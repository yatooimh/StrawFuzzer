public class android.media.AudioRecord extends java.lang.Object implements android.media.AudioRouting, android.media.MicrophoneDirection, android.media.AudioRecordingMonitor, android.media.AudioRecordingMonitorClient
{
    private static final int AUDIORECORD_ERROR_SETUP_INVALIDCHANNELMASK;
    private static final int AUDIORECORD_ERROR_SETUP_INVALIDFORMAT;
    private static final int AUDIORECORD_ERROR_SETUP_INVALIDSOURCE;
    private static final int AUDIORECORD_ERROR_SETUP_NATIVEINITFAILED;
    private static final int AUDIORECORD_ERROR_SETUP_ZEROFRAMECOUNT;
    public static final int ERROR;
    public static final int ERROR_BAD_VALUE;
    public static final int ERROR_DEAD_OBJECT;
    public static final int ERROR_INVALID_OPERATION;
    private static final int NATIVE_EVENT_MARKER;
    private static final int NATIVE_EVENT_NEW_POS;
    public static final int READ_BLOCKING;
    public static final int READ_NON_BLOCKING;
    public static final int RECORDSTATE_RECORDING;
    public static final int RECORDSTATE_STOPPED;
    public static final int STATE_INITIALIZED;
    public static final int STATE_UNINITIALIZED;
    public static final java.lang.String SUBMIX_FIXED_VOLUME;
    public static final int SUCCESS;
    private static final java.lang.String TAG;
    private android.media.AudioAttributes mAudioAttributes;
    private android.media.audiopolicy.AudioPolicy mAudioCapturePolicy;
    private int mAudioFormat;
    private int mChannelCount;
    private int mChannelIndexMask;
    private int mChannelMask;
    private android.media.AudioRecord$NativeEventHandler mEventHandler;
    private final android.os.IBinder mICallBack;
    private android.os.Looper mInitializationLooper;
    private boolean mIsSubmixFullVolume;
    private int mNativeBufferSizeInBytes;
    private long mNativeCallbackCookie;
    private long mNativeDeviceCallback;
    private long mNativeRecorderInJavaObj;
    private android.media.AudioRecord$OnRecordPositionUpdateListener mPositionListener;
    private final java.lang.Object mPositionListenerLock;
    private android.media.AudioDeviceInfo mPreferredDevice;
    private int mRecordSource;
    android.media.AudioRecordingMonitorImpl mRecordingInfoImpl;
    private int mRecordingState;
    private final java.lang.Object mRecordingStateLock;
    private android.util.ArrayMap mRoutingChangeListeners;
    private int mSampleRate;
    private int mSessionId;
    private int mState;

    public void <init>(int, int, int, int, int) throws java.lang.IllegalArgumentException
    {
        android.media.AudioRecord r0;
        int i0, i1, i2, i3, i4, $i5;
        android.media.AudioAttributes$Builder $r1, $r2;
        android.media.AudioAttributes $r3;
        android.media.AudioFormat$Builder $r4, $r5, $r6, $r7;
        android.media.AudioFormat $r8;

        r0 := @this: android.media.AudioRecord;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        $r1 = new android.media.AudioAttributes$Builder;

        specialinvoke $r1.<android.media.AudioAttributes$Builder: void <init>()>();

        $r2 = virtualinvoke $r1.<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setInternalCapturePreset(int)>(i0);

        $r3 = virtualinvoke $r2.<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>();

        $r4 = new android.media.AudioFormat$Builder;

        specialinvoke $r4.<android.media.AudioFormat$Builder: void <init>()>();

        $i5 = staticinvoke <android.media.AudioRecord: int getChannelMaskFromLegacyConfig(int,boolean)>(i2, 1);

        $r5 = virtualinvoke $r4.<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setChannelMask(int)>($i5);

        $r6 = virtualinvoke $r5.<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setEncoding(int)>(i3);

        $r7 = virtualinvoke $r6.<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setSampleRate(int)>(i1);

        $r8 = virtualinvoke $r7.<android.media.AudioFormat$Builder: android.media.AudioFormat build()>();

        specialinvoke r0.<android.media.AudioRecord: void <init>(android.media.AudioAttributes,android.media.AudioFormat,int,int)>($r3, $r8, i4, 0);

        return;
    }

    void <init>(long)
    {
        android.media.AudioRecord r0;
        long l0;
        java.lang.Object $r1, $r2;
        android.os.Binder $r3;
        android.util.ArrayMap $r4;
        android.media.AudioRecordingMonitorImpl $r5;
        byte $b1;

        r0 := @this: android.media.AudioRecord;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.media.AudioRecord: int mState> = 0;

        r0.<android.media.AudioRecord: int mRecordingState> = 1;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<android.media.AudioRecord: java.lang.Object mRecordingStateLock> = $r1;

        r0.<android.media.AudioRecord: android.media.AudioRecord$OnRecordPositionUpdateListener mPositionListener> = null;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<android.media.AudioRecord: java.lang.Object mPositionListenerLock> = $r2;

        r0.<android.media.AudioRecord: android.media.AudioRecord$NativeEventHandler mEventHandler> = null;

        r0.<android.media.AudioRecord: android.os.Looper mInitializationLooper> = null;

        r0.<android.media.AudioRecord: int mNativeBufferSizeInBytes> = 0;

        r0.<android.media.AudioRecord: int mSessionId> = 0;

        r0.<android.media.AudioRecord: boolean mIsSubmixFullVolume> = 0;

        $r3 = new android.os.Binder;

        specialinvoke $r3.<android.os.Binder: void <init>()>();

        r0.<android.media.AudioRecord: android.os.IBinder mICallBack> = $r3;

        $r4 = new android.util.ArrayMap;

        specialinvoke $r4.<android.util.ArrayMap: void <init>()>();

        r0.<android.media.AudioRecord: android.util.ArrayMap mRoutingChangeListeners> = $r4;

        r0.<android.media.AudioRecord: android.media.AudioDeviceInfo mPreferredDevice> = null;

        $r5 = new android.media.AudioRecordingMonitorImpl;

        specialinvoke $r5.<android.media.AudioRecordingMonitorImpl: void <init>(android.media.AudioRecordingMonitorClient)>(r0);

        r0.<android.media.AudioRecord: android.media.AudioRecordingMonitorImpl mRecordingInfoImpl> = $r5;

        r0.<android.media.AudioRecord: long mNativeRecorderInJavaObj> = 0L;

        r0.<android.media.AudioRecord: long mNativeCallbackCookie> = 0L;

        r0.<android.media.AudioRecord: long mNativeDeviceCallback> = 0L;

        $b1 = l0 cmp 0L;

        if $b1 == 0 goto label1;

        virtualinvoke r0.<android.media.AudioRecord: void deferred_connect(long)>(l0);

        goto label2;

     label1:
        r0.<android.media.AudioRecord: int mState> = 0;

     label2:
        return;
    }

    public void <init>(android.media.AudioAttributes, android.media.AudioFormat, int, int) throws java.lang.IllegalArgumentException
    {
        android.media.AudioRecord r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i20, i21, i22, i23, $i24, $i25, $i26, $i27, $i28, i29;
        java.lang.String r2, $r14, $r30;
        java.lang.Object $r3, $r4, $r19;
        android.os.Binder $r5;
        android.util.ArrayMap $r6;
        android.media.AudioRecordingMonitorImpl $r7;
        java.lang.IllegalArgumentException $r8, $r9;
        java.lang.StringBuilder $r10;
        android.media.AudioAttributes$Builder $r15;
        java.util.Set $r16;
        boolean $z0, $z1;
        android.media.AudioAttributes $r18, r22, $r29;
        android.os.Looper $r21, r24;
        android.media.AudioFormat r23;
        java.util.Iterator r25;
        int[] r26, r27;
        java.lang.ref.WeakReference $r28;

        r0 := @this: android.media.AudioRecord;

        r22 := @parameter0: android.media.AudioAttributes;

        r23 := @parameter1: android.media.AudioFormat;

        i20 := @parameter2: int;

        i0 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.media.AudioRecord: int mState> = 0;

        r0.<android.media.AudioRecord: int mRecordingState> = 1;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<android.media.AudioRecord: java.lang.Object mRecordingStateLock> = $r3;

        r0.<android.media.AudioRecord: android.media.AudioRecord$OnRecordPositionUpdateListener mPositionListener> = null;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<android.media.AudioRecord: java.lang.Object mPositionListenerLock> = $r4;

        r0.<android.media.AudioRecord: android.media.AudioRecord$NativeEventHandler mEventHandler> = null;

        r0.<android.media.AudioRecord: android.os.Looper mInitializationLooper> = null;

        r0.<android.media.AudioRecord: int mNativeBufferSizeInBytes> = 0;

        r0.<android.media.AudioRecord: int mSessionId> = 0;

        r0.<android.media.AudioRecord: boolean mIsSubmixFullVolume> = 0;

        $r5 = new android.os.Binder;

        specialinvoke $r5.<android.os.Binder: void <init>()>();

        r0.<android.media.AudioRecord: android.os.IBinder mICallBack> = $r5;

        $r6 = new android.util.ArrayMap;

        specialinvoke $r6.<android.util.ArrayMap: void <init>()>();

        r0.<android.media.AudioRecord: android.util.ArrayMap mRoutingChangeListeners> = $r6;

        r0.<android.media.AudioRecord: android.media.AudioDeviceInfo mPreferredDevice> = null;

        $r7 = new android.media.AudioRecordingMonitorImpl;

        specialinvoke $r7.<android.media.AudioRecordingMonitorImpl: void <init>(android.media.AudioRecordingMonitorClient)>(r0);

        r0.<android.media.AudioRecord: android.media.AudioRecordingMonitorImpl mRecordingInfoImpl> = $r7;

        r0.<android.media.AudioRecord: int mRecordingState> = 1;

        if r22 == null goto label16;

        if r23 == null goto label15;

        r24 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        r0.<android.media.AudioRecord: android.os.Looper mInitializationLooper> = r24;

        if r24 != null goto label01;

        $r21 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        r0.<android.media.AudioRecord: android.os.Looper mInitializationLooper> = $r21;

     label01:
        $i1 = virtualinvoke r22.<android.media.AudioAttributes: int getCapturePreset()>();

        if $i1 != 8 goto label06;

        $r15 = new android.media.AudioAttributes$Builder;

        specialinvoke $r15.<android.media.AudioAttributes$Builder: void <init>()>();

        $r16 = virtualinvoke r22.<android.media.AudioAttributes: java.util.Set getTags()>();

        r25 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        $r19 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.lang.String) $r19;

        $z1 = virtualinvoke r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("fixedVolume");

        if $z1 == 0 goto label03;

        r0.<android.media.AudioRecord: boolean mIsSubmixFullVolume> = 1;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("android.media.AudioRecord", "Will record from REMOTE_SUBMIX at full fixed volume");

        goto label04;

     label03:
        virtualinvoke $r15.<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder addTag(java.lang.String)>(r2);

     label04:
        goto label02;

     label05:
        $i18 = virtualinvoke r22.<android.media.AudioAttributes: int getCapturePreset()>();

        virtualinvoke $r15.<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setInternalCapturePreset(int)>($i18);

        $r18 = virtualinvoke $r15.<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>();

        r0.<android.media.AudioRecord: android.media.AudioAttributes mAudioAttributes> = $r18;

        goto label07;

     label06:
        r0.<android.media.AudioRecord: android.media.AudioAttributes mAudioAttributes> = r22;

     label07:
        i21 = virtualinvoke r23.<android.media.AudioFormat: int getSampleRate()>();

        if i21 != 0 goto label08;

        i21 = 0;

        goto label08;

     label08:
        $i2 = virtualinvoke r23.<android.media.AudioFormat: int getPropertySetMask()>();

        $i3 = $i2 & 1;

        if $i3 == 0 goto label09;

        i22 = virtualinvoke r23.<android.media.AudioFormat: int getEncoding()>();

        goto label10;

     label09:
        i22 = 1;

     label10:
        $i4 = virtualinvoke r22.<android.media.AudioAttributes: int getCapturePreset()>();

        specialinvoke r0.<android.media.AudioRecord: void audioParamCheck(int,int,int)>($i4, i21, i22);

        $i5 = virtualinvoke r23.<android.media.AudioFormat: int getPropertySetMask()>();

        $i6 = $i5 & 8;

        if $i6 == 0 goto label11;

        $i16 = virtualinvoke r23.<android.media.AudioFormat: int getChannelIndexMask()>();

        r0.<android.media.AudioRecord: int mChannelIndexMask> = $i16;

        $i17 = virtualinvoke r23.<android.media.AudioFormat: int getChannelCount()>();

        r0.<android.media.AudioRecord: int mChannelCount> = $i17;

     label11:
        $i7 = virtualinvoke r23.<android.media.AudioFormat: int getPropertySetMask()>();

        $i8 = $i7 & 4;

        if $i8 == 0 goto label12;

        $i13 = virtualinvoke r23.<android.media.AudioFormat: int getChannelMask()>();

        $i14 = staticinvoke <android.media.AudioRecord: int getChannelMaskFromLegacyConfig(int,boolean)>($i13, 0);

        r0.<android.media.AudioRecord: int mChannelMask> = $i14;

        $i15 = virtualinvoke r23.<android.media.AudioFormat: int getChannelCount()>();

        r0.<android.media.AudioRecord: int mChannelCount> = $i15;

        goto label13;

     label12:
        $i9 = r0.<android.media.AudioRecord: int mChannelIndexMask>;

        if $i9 != 0 goto label13;

        i23 = staticinvoke <android.media.AudioRecord: int getChannelMaskFromLegacyConfig(int,boolean)>(1, 0);

        r0.<android.media.AudioRecord: int mChannelMask> = i23;

        $i12 = staticinvoke <android.media.AudioFormat: int channelCountFromInChannelMask(int)>(i23);

        r0.<android.media.AudioRecord: int mChannelCount> = $i12;

     label13:
        specialinvoke r0.<android.media.AudioRecord: void audioBuffSizeCheck(int)>(i20);

        r26 = newarray (int)[1];

        $i24 = r0.<android.media.AudioRecord: int mSampleRate>;

        r26[0] = $i24;

        r27 = newarray (int)[1];

        r27[0] = i0;

        $r28 = new java.lang.ref.WeakReference;

        specialinvoke $r28.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r0);

        $r29 = r0.<android.media.AudioRecord: android.media.AudioAttributes mAudioAttributes>;

        $i25 = r0.<android.media.AudioRecord: int mChannelMask>;

        $i26 = r0.<android.media.AudioRecord: int mChannelIndexMask>;

        $i27 = r0.<android.media.AudioRecord: int mAudioFormat>;

        $i28 = r0.<android.media.AudioRecord: int mNativeBufferSizeInBytes>;

        $r30 = specialinvoke r0.<android.media.AudioRecord: java.lang.String getCurrentOpPackageName()>();

        i29 = specialinvoke r0.<android.media.AudioRecord: int native_setup(java.lang.Object,java.lang.Object,int[],int,int,int,int,int[],java.lang.String,long)>($r28, $r29, r26, $i25, $i26, $i27, $i28, r27, $r30, 0L);

        if i29 == 0 goto label14;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error code ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i29);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" when initializing native AudioRecord object.");

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.media.AudioRecord: void loge(java.lang.String)>($r14);

        return;

     label14:
        $i10 = r26[0];

        r0.<android.media.AudioRecord: int mSampleRate> = $i10;

        $i11 = r27[0];

        r0.<android.media.AudioRecord: int mSessionId> = $i11;

        r0.<android.media.AudioRecord: int mState> = 1;

        return;

     label15:
        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null AudioFormat");

        throw $r9;

     label16:
        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null AudioAttributes");

        throw $r8;
    }

    static void access$000(android.media.AudioRecord, android.media.audiopolicy.AudioPolicy)
    {
        android.media.AudioRecord r0;
        android.media.audiopolicy.AudioPolicy r1;

        r0 := @parameter0: android.media.AudioRecord;

        r1 := @parameter1: android.media.audiopolicy.AudioPolicy;

        specialinvoke r0.<android.media.AudioRecord: void unregisterAudioPolicyOnRelease(android.media.audiopolicy.AudioPolicy)>(r1);

        return;
    }

    static java.lang.Object access$100(android.media.AudioRecord)
    {
        android.media.AudioRecord r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.media.AudioRecord;

        $r1 = r0.<android.media.AudioRecord: java.lang.Object mPositionListenerLock>;

        return $r1;
    }

    static android.media.AudioRecord$OnRecordPositionUpdateListener access$200(android.media.AudioRecord)
    {
        android.media.AudioRecord r0;
        android.media.AudioRecord$OnRecordPositionUpdateListener $r1;

        r0 := @parameter0: android.media.AudioRecord;

        $r1 = r0.<android.media.AudioRecord: android.media.AudioRecord$OnRecordPositionUpdateListener mPositionListener>;

        return $r1;
    }

    static void access$300(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <android.media.AudioRecord: void loge(java.lang.String)>(r0);

        return;
    }

    private void audioBuffSizeCheck(int) throws java.lang.IllegalArgumentException
    {
        android.media.AudioRecord r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r8;
        java.lang.String $r9;

        r0 := @this: android.media.AudioRecord;

        i0 := @parameter0: int;

        $i3 = r0.<android.media.AudioRecord: int mChannelCount>;

        $i2 = r0.<android.media.AudioRecord: int mAudioFormat>;

        $i4 = staticinvoke <android.media.AudioFormat: int getBytesPerSample(int)>($i2);

        i1 = $i3 * $i4;

        $i5 = i0 % i1;

        if $i5 != 0 goto label1;

        if i0 < 1 goto label1;

        r0.<android.media.AudioRecord: int mNativeBufferSizeInBytes> = i0;

        return;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid audio buffer size ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (frame size ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r8;
    }

    private void audioParamCheck(int, int, int) throws java.lang.IllegalArgumentException
    {
        android.media.AudioRecord r0;
        int i0, i1, i2, $i3;
        java.lang.StringBuilder $r1, $r6, $r11;
        java.lang.IllegalArgumentException $r4, $r9, $r15;
        java.lang.String $r5, $r10, $r16;

        r0 := @this: android.media.AudioRecord;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i0 < 0 goto label9;

        $i3 = staticinvoke <android.media.MediaRecorder: int getAudioSourceMax()>();

        if i0 <= $i3 goto label1;

        if i0 == 1998 goto label1;

        if i0 == 1997 goto label1;

        if i0 != 1999 goto label9;

     label1:
        r0.<android.media.AudioRecord: int mRecordSource> = i0;

        if i1 < 4000 goto label2;

        if i1 <= 192000 goto label3;

     label2:
        if i1 != 0 goto label8;

     label3:
        r0.<android.media.AudioRecord: int mSampleRate> = i1;

        if i2 == 1 goto label6;

        if i2 == 2 goto label5;

        if i2 == 3 goto label5;

        if i2 != 4 goto label4;

        goto label5;

     label4:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported sample encoding ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Should be ENCODING_PCM_8BIT, ENCODING_PCM_16BIT, or ENCODING_PCM_FLOAT.");

        $r15 = new java.lang.IllegalArgumentException;

        $r16 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r15;

     label5:
        r0.<android.media.AudioRecord: int mAudioFormat> = i2;

        goto label7;

     label6:
        r0.<android.media.AudioRecord: int mAudioFormat> = 2;

     label7:
        return;

     label8:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Hz is not a supported sample rate.");

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r9;

     label9:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid audio source ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    private void broadcastRoutingChange()
    {
        android.media.AudioRecord r0;
        android.util.ArrayMap r1, $r2;
        java.util.Collection $r3;
        boolean $z0;
        java.lang.Object $r4;
        android.media.NativeRoutingEventHandlerDelegate $r5;
        java.lang.Throwable $r6;
        java.util.Iterator r7;

        r0 := @this: android.media.AudioRecord;

        staticinvoke <android.media.AudioManager: int resetAudioPortGeneration()>();

        r1 = r0.<android.media.AudioRecord: android.util.ArrayMap mRoutingChangeListeners>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.media.AudioRecord: android.util.ArrayMap mRoutingChangeListeners>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.util.Collection values()>();

        r7 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (android.media.NativeRoutingEventHandlerDelegate) $r4;

        virtualinvoke $r5.<android.media.NativeRoutingEventHandlerDelegate: void notifyClient()>();

     label3:
        goto label2;

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r6 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private static int getChannelMaskFromLegacyConfig(int, boolean)
    {
        int i0, i1;
        boolean z0;
        java.lang.IllegalArgumentException $r0, $r1;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if i0 == 1 goto label3;

        if i0 == 2 goto label3;

        if i0 == 3 goto label2;

        if i0 == 12 goto label2;

        if i0 == 16 goto label3;

        if i0 != 48 goto label1;

        i1 = i0;

        goto label4;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unsupported channel configuration.");

        throw $r1;

     label2:
        i1 = 12;

        goto label4;

     label3:
        i1 = 16;

     label4:
        if z0 != 0 goto label6;

        if i0 == 2 goto label5;

        if i0 == 3 goto label5;

        goto label6;

     label5:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unsupported deprecated configuration.");

        throw $r0;

     label6:
        return i1;
    }

    private java.lang.String getCurrentOpPackageName()
    {
        android.media.AudioRecord r0;
        java.lang.StringBuilder $r1;
        int $i0;
        java.lang.String $r4, r5;

        r0 := @this: android.media.AudioRecord;

        r5 = staticinvoke <android.app.ActivityThread: java.lang.String currentOpPackageName()>();

        if r5 == null goto label1;

        return r5;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uid:");

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public static int getMinBufferSize(int, int, int)
    {
        int i0, i1, i2, i4;
        byte b3;

        i1 := @parameter0: int;

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        if i2 == 1 goto label2;

        if i2 == 2 goto label2;

        if i2 == 3 goto label1;

        if i2 == 12 goto label1;

        if i2 == 16 goto label2;

        if i2 == 48 goto label1;

        staticinvoke <android.media.AudioRecord: void loge(java.lang.String)>("getMinBufferSize(): Invalid channel configuration.");

        return -2;

     label1:
        b3 = 2;

        goto label3;

     label2:
        b3 = 1;

     label3:
        i4 = staticinvoke <android.media.AudioRecord: int native_get_min_buff_size(int,int,int)>(i1, b3, i0);

        if i4 != 0 goto label4;

        return -2;

     label4:
        if i4 != -1 goto label5;

        return -1;

     label5:
        return i4;
    }

    private void handleFullVolumeRec(boolean)
    {
        android.media.AudioRecord r0;
        boolean z0, $z1;
        android.os.IBinder $r1, $r2;
        android.os.RemoteException $r3;
        android.media.IAudioService r4;

        r0 := @this: android.media.AudioRecord;

        z0 := @parameter0: boolean;

        $z1 = r0.<android.media.AudioRecord: boolean mIsSubmixFullVolume>;

        if $z1 != 0 goto label1;

        return;

     label1:
        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("audio");

        r4 = staticinvoke <android.media.IAudioService$Stub: android.media.IAudioService asInterface(android.os.IBinder)>($r1);

     label2:
        $r2 = r0.<android.media.AudioRecord: android.os.IBinder mICallBack>;

        interfaceinvoke r4.<android.media.IAudioService: void forceRemoteSubmixFullVolume(boolean,android.os.IBinder)>(z0, $r2);

     label3:
        goto label5;

     label4:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("android.media.AudioRecord", "Error talking to AudioService when handling full submix volume", $r3);

     label5:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    private static void logd(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("android.media.AudioRecord", r0);

        return;
    }

    private static void loge(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("android.media.AudioRecord", r0);

        return;
    }

    private final native void native_disableDeviceCallback();

    private final native void native_enableDeviceCallback();

    private final native void native_finalize();

    private native android.os.PersistableBundle native_getMetrics();

    private native int native_getPortId();

    private final native int native_getRoutedDeviceId();

    private final native int native_get_active_microphones(java.util.ArrayList);

    private final native int native_get_buffer_size_in_frames();

    private final native int native_get_marker_pos();

    private static final native int native_get_min_buff_size(int, int, int);

    private final native int native_get_pos_update_period();

    private final native int native_get_timestamp(android.media.AudioTimestamp, int);

    private final native int native_read_in_byte_array(byte[], int, int, boolean);

    private final native int native_read_in_direct_buffer(java.lang.Object, int, boolean);

    private final native int native_read_in_float_array(float[], int, int, boolean);

    private final native int native_read_in_short_array(short[], int, int, boolean);

    private final native boolean native_setInputDevice(int);

    private final native int native_set_marker_pos(int);

    private final native int native_set_pos_update_period(int);

    private native int native_set_preferred_microphone_direction(int);

    private native int native_set_preferred_microphone_field_dimension(float);

    private final native int native_setup(java.lang.Object, java.lang.Object, int[], int, int, int, int, int[], java.lang.String, long);

    private final native int native_start(int, int);

    private final native void native_stop();

    private static void postEventFromNative(java.lang.Object, int, int, int, java.lang.Object)
    {
        int i0, i1, i2;
        android.media.AudioRecord$NativeEventHandler r0, $r3;
        java.lang.ref.WeakReference $r1;
        java.lang.Object $r2, r4, r5;
        android.media.AudioRecord r6;
        android.os.Message r7;

        r4 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r5 := @parameter4: java.lang.Object;

        $r1 = (java.lang.ref.WeakReference) r4;

        $r2 = virtualinvoke $r1.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r6 = (android.media.AudioRecord) $r2;

        if r6 != null goto label1;

        return;

     label1:
        if i0 != 1000 goto label2;

        specialinvoke r6.<android.media.AudioRecord: void broadcastRoutingChange()>();

        return;

     label2:
        r0 = r6.<android.media.AudioRecord: android.media.AudioRecord$NativeEventHandler mEventHandler>;

        if r0 == null goto label3;

        r7 = virtualinvoke r0.<android.media.AudioRecord$NativeEventHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(i0, i1, i2, r5);

        $r3 = r6.<android.media.AudioRecord: android.media.AudioRecord$NativeEventHandler mEventHandler>;

        virtualinvoke $r3.<android.media.AudioRecord$NativeEventHandler: boolean sendMessage(android.os.Message)>(r7);

     label3:
        return;
    }

    private void testDisableNativeRoutingCallbacksLocked()
    {
        android.media.AudioRecord r0;
        android.util.ArrayMap $r1;
        int $i0;

        r0 := @this: android.media.AudioRecord;

        $r1 = r0.<android.media.AudioRecord: android.util.ArrayMap mRoutingChangeListeners>;

        $i0 = virtualinvoke $r1.<android.util.ArrayMap: int size()>();

        if $i0 != 0 goto label1;

        specialinvoke r0.<android.media.AudioRecord: void native_disableDeviceCallback()>();

     label1:
        return;
    }

    private void testEnableNativeRoutingCallbacksLocked()
    {
        android.media.AudioRecord r0;
        android.util.ArrayMap $r1;
        int $i0;

        r0 := @this: android.media.AudioRecord;

        $r1 = r0.<android.media.AudioRecord: android.util.ArrayMap mRoutingChangeListeners>;

        $i0 = virtualinvoke $r1.<android.util.ArrayMap: int size()>();

        if $i0 != 0 goto label1;

        specialinvoke r0.<android.media.AudioRecord: void native_enableDeviceCallback()>();

     label1:
        return;
    }

    private void unregisterAudioPolicyOnRelease(android.media.audiopolicy.AudioPolicy)
    {
        android.media.AudioRecord r0;
        android.media.audiopolicy.AudioPolicy r1;

        r0 := @this: android.media.AudioRecord;

        r1 := @parameter0: android.media.audiopolicy.AudioPolicy;

        r0.<android.media.AudioRecord: android.media.audiopolicy.AudioPolicy mAudioCapturePolicy> = r1;

        return;
    }

    public void addOnRoutingChangedListener(android.media.AudioRecord$OnRoutingChangedListener, android.os.Handler)
    {
        android.media.AudioRecord r0;
        android.media.AudioRecord$OnRoutingChangedListener r1;
        android.os.Handler r2;

        r0 := @this: android.media.AudioRecord;

        r1 := @parameter0: android.media.AudioRecord$OnRoutingChangedListener;

        r2 := @parameter1: android.os.Handler;

        virtualinvoke r0.<android.media.AudioRecord: void addOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener,android.os.Handler)>(r1, r2);

        return;
    }

    public void addOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener, android.os.Handler)
    {
        android.media.AudioRecord r0;
        android.util.ArrayMap r1, r2, $r4;
        android.media.NativeRoutingEventHandlerDelegate r3;
        boolean $z0;
        android.os.Handler $r5, r10;
        android.os.Looper $r6;
        java.lang.Throwable $r8;
        android.media.AudioRouting$OnRoutingChangedListener r9;

        r0 := @this: android.media.AudioRecord;

        r9 := @parameter0: android.media.AudioRouting$OnRoutingChangedListener;

        r10 := @parameter1: android.os.Handler;

        r1 = r0.<android.media.AudioRecord: android.util.ArrayMap mRoutingChangeListeners>;

        entermonitor r1;

        if r9 == null goto label5;

     label1:
        $r4 = r0.<android.media.AudioRecord: android.util.ArrayMap mRoutingChangeListeners>;

        $z0 = virtualinvoke $r4.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r9);

        if $z0 != 0 goto label5;

        specialinvoke r0.<android.media.AudioRecord: void testEnableNativeRoutingCallbacksLocked()>();

        r2 = r0.<android.media.AudioRecord: android.util.ArrayMap mRoutingChangeListeners>;

        r3 = new android.media.NativeRoutingEventHandlerDelegate;

     label2:
        if r10 == null goto label3;

        goto label4;

     label3:
        $r5 = new android.os.Handler;

        $r6 = r0.<android.media.AudioRecord: android.os.Looper mInitializationLooper>;

        specialinvoke $r5.<android.os.Handler: void <init>(android.os.Looper)>($r6);

        r10 = $r5;

     label4:
        specialinvoke r3.<android.media.NativeRoutingEventHandlerDelegate: void <init>(android.media.AudioRouting,android.media.AudioRouting$OnRoutingChangedListener,android.os.Handler)>(r0, r9, r10);

        virtualinvoke r2.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, r3);

     label5:
        exitmonitor r1;

     label6:
        return;

     label7:
        $r8 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    void deferred_connect(long)
    {
        android.media.AudioRecord r0;
        long l0;
        int[] r1, $r4;
        int i1, $i2, $i3;
        java.lang.ref.WeakReference $r3;
        java.lang.StringBuilder $r5;
        java.lang.String $r9, r10;

        r0 := @this: android.media.AudioRecord;

        l0 := @parameter0: long;

        $i2 = r0.<android.media.AudioRecord: int mState>;

        if $i2 == 1 goto label2;

        r1 = newarray (int)[1];

        r1[0] = 0;

        $r3 = new java.lang.ref.WeakReference;

        specialinvoke $r3.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r0);

        r10 = staticinvoke <android.app.ActivityThread: java.lang.String currentOpPackageName()>();

        $r4 = newarray (int)[1];

        $r4[0] = 0;

        i1 = specialinvoke r0.<android.media.AudioRecord: int native_setup(java.lang.Object,java.lang.Object,int[],int,int,int,int,int[],java.lang.String,long)>($r3, null, $r4, 0, 0, 0, 0, r1, r10, l0);

        if i1 == 0 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error code ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" when initializing native AudioRecord object.");

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.media.AudioRecord: void loge(java.lang.String)>($r9);

        return;

     label1:
        $i3 = r1[0];

        r0.<android.media.AudioRecord: int mSessionId> = $i3;

        r0.<android.media.AudioRecord: int mState> = 1;

     label2:
        return;
    }

    protected void finalize()
    {
        android.media.AudioRecord r0;

        r0 := @this: android.media.AudioRecord;

        virtualinvoke r0.<android.media.AudioRecord: void release()>();

        return;
    }

    public java.util.List getActiveMicrophones() throws java.io.IOException
    {
        android.media.AudioRecord r0;
        java.util.ArrayList $r3, $r4;
        int $i0, i3, $i4, i5;
        android.util.Pair $r5;
        java.lang.Integer $r6, $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r11;
        android.media.AudioDeviceInfo r13;
        android.media.MicrophoneInfo r14;

        r0 := @this: android.media.AudioRecord;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        i3 = specialinvoke r0.<android.media.AudioRecord: int native_get_active_microphones(java.util.ArrayList)>($r3);

        if i3 == 0 goto label2;

        if i3 == -3 goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getActiveMicrophones failed:");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("android.media.AudioRecord", $r11);

     label1:
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("android.media.AudioRecord", "getActiveMicrophones failed, fallback on routed device info");

     label2:
        staticinvoke <android.media.AudioManager: void setPortIdForMicrophones(java.util.ArrayList)>($r3);

        $i4 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        if $i4 != 0 goto label5;

        r13 = virtualinvoke r0.<android.media.AudioRecord: android.media.AudioDeviceInfo getRoutedDevice()>();

        if r13 == null goto label5;

        r14 = staticinvoke <android.media.AudioManager: android.media.MicrophoneInfo microphoneInfoFromAudioDeviceInfo(android.media.AudioDeviceInfo)>(r13);

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        i5 = 0;

     label3:
        $i0 = r0.<android.media.AudioRecord: int mChannelCount>;

        if i5 >= $i0 goto label4;

        $r5 = new android.util.Pair;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i5);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r5.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r6, $r7);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        i5 = i5 + 1;

        goto label3;

     label4:
        virtualinvoke r14.<android.media.MicrophoneInfo: void setChannelMapping(java.util.List)>($r4);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r14);

     label5:
        return $r3;
    }

    public android.media.AudioRecordingConfiguration getActiveRecordingConfiguration()
    {
        android.media.AudioRecord r0;
        android.media.AudioRecordingMonitorImpl $r1;
        android.media.AudioRecordingConfiguration $r2;

        r0 := @this: android.media.AudioRecord;

        $r1 = r0.<android.media.AudioRecord: android.media.AudioRecordingMonitorImpl mRecordingInfoImpl>;

        $r2 = virtualinvoke $r1.<android.media.AudioRecordingMonitorImpl: android.media.AudioRecordingConfiguration getActiveRecordingConfiguration()>();

        return $r2;
    }

    public int getAudioFormat()
    {
        android.media.AudioRecord r0;
        int $i0;

        r0 := @this: android.media.AudioRecord;

        $i0 = r0.<android.media.AudioRecord: int mAudioFormat>;

        return $i0;
    }

    public int getAudioSessionId()
    {
        android.media.AudioRecord r0;
        int $i0;

        r0 := @this: android.media.AudioRecord;

        $i0 = r0.<android.media.AudioRecord: int mSessionId>;

        return $i0;
    }

    public int getAudioSource()
    {
        android.media.AudioRecord r0;
        int $i0;

        r0 := @this: android.media.AudioRecord;

        $i0 = r0.<android.media.AudioRecord: int mRecordSource>;

        return $i0;
    }

    public int getBufferSizeInFrames()
    {
        android.media.AudioRecord r0;
        int $i0;

        r0 := @this: android.media.AudioRecord;

        $i0 = specialinvoke r0.<android.media.AudioRecord: int native_get_buffer_size_in_frames()>();

        return $i0;
    }

    public int getChannelConfiguration()
    {
        android.media.AudioRecord r0;
        int $i0;

        r0 := @this: android.media.AudioRecord;

        $i0 = r0.<android.media.AudioRecord: int mChannelMask>;

        return $i0;
    }

    public int getChannelCount()
    {
        android.media.AudioRecord r0;
        int $i0;

        r0 := @this: android.media.AudioRecord;

        $i0 = r0.<android.media.AudioRecord: int mChannelCount>;

        return $i0;
    }

    public android.media.AudioFormat getFormat()
    {
        android.media.AudioRecord r0;
        android.media.AudioFormat$Builder r1, $r2, $r3;
        int $i0, $i1, i2, i3;
        android.media.AudioFormat $r4;

        r0 := @this: android.media.AudioRecord;

        $r2 = new android.media.AudioFormat$Builder;

        specialinvoke $r2.<android.media.AudioFormat$Builder: void <init>()>();

        $i0 = r0.<android.media.AudioRecord: int mSampleRate>;

        $r3 = virtualinvoke $r2.<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setSampleRate(int)>($i0);

        $i1 = r0.<android.media.AudioRecord: int mAudioFormat>;

        r1 = virtualinvoke $r3.<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setEncoding(int)>($i1);

        i2 = r0.<android.media.AudioRecord: int mChannelMask>;

        if i2 == 0 goto label1;

        virtualinvoke r1.<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setChannelMask(int)>(i2);

     label1:
        i3 = r0.<android.media.AudioRecord: int mChannelIndexMask>;

        if i3 == 0 goto label2;

        virtualinvoke r1.<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setChannelIndexMask(int)>(i3);

     label2:
        $r4 = virtualinvoke r1.<android.media.AudioFormat$Builder: android.media.AudioFormat build()>();

        return $r4;
    }

    public android.os.PersistableBundle getMetrics()
    {
        android.media.AudioRecord r0;
        android.os.PersistableBundle $r1;

        r0 := @this: android.media.AudioRecord;

        $r1 = specialinvoke r0.<android.media.AudioRecord: android.os.PersistableBundle native_getMetrics()>();

        return $r1;
    }

    public int getNotificationMarkerPosition()
    {
        android.media.AudioRecord r0;
        int $i0;

        r0 := @this: android.media.AudioRecord;

        $i0 = specialinvoke r0.<android.media.AudioRecord: int native_get_marker_pos()>();

        return $i0;
    }

    public int getPortId()
    {
        android.media.AudioRecord r0;
        long $l0;
        byte $b1;
        int $i2;

        r0 := @this: android.media.AudioRecord;

        $l0 = r0.<android.media.AudioRecord: long mNativeRecorderInJavaObj>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        return 0;

     label1:
        $i2 = specialinvoke r0.<android.media.AudioRecord: int native_getPortId()>();

        return $i2;
    }

    public int getPositionNotificationPeriod()
    {
        android.media.AudioRecord r0;
        int $i0;

        r0 := @this: android.media.AudioRecord;

        $i0 = specialinvoke r0.<android.media.AudioRecord: int native_get_pos_update_period()>();

        return $i0;
    }

    public android.media.AudioDeviceInfo getPreferredDevice()
    {
        android.media.AudioRecord r0;
        java.lang.Throwable $r1;
        android.media.AudioDeviceInfo r2;

        r0 := @this: android.media.AudioRecord;

        entermonitor r0;

     label1:
        r2 = r0.<android.media.AudioRecord: android.media.AudioDeviceInfo mPreferredDevice>;

        exitmonitor r0;

     label2:
        return r2;

     label3:
        $r1 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int getRecordingState()
    {
        android.media.AudioRecord r0;
        java.lang.Object r1;
        int i0;
        java.lang.Throwable $r3;

        r0 := @this: android.media.AudioRecord;

        r1 = r0.<android.media.AudioRecord: java.lang.Object mRecordingStateLock>;

        entermonitor r1;

     label1:
        i0 = r0.<android.media.AudioRecord: int mRecordingState>;

        exitmonitor r1;

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.media.AudioDeviceInfo getRoutedDevice()
    {
        android.media.AudioRecord r0;
        int i0, $i1, $i2, i3;
        android.media.AudioDeviceInfo[] r1;
        android.media.AudioDeviceInfo $r2, $r3;

        r0 := @this: android.media.AudioRecord;

        i0 = specialinvoke r0.<android.media.AudioRecord: int native_getRoutedDeviceId()>();

        if i0 != 0 goto label1;

        return null;

     label1:
        r1 = staticinvoke <android.media.AudioManager: android.media.AudioDeviceInfo[] getDevicesStatic(int)>(1);

        i3 = 0;

     label2:
        $i1 = lengthof r1;

        if i3 >= $i1 goto label4;

        $r2 = r1[i3];

        $i2 = virtualinvoke $r2.<android.media.AudioDeviceInfo: int getId()>();

        if $i2 != i0 goto label3;

        $r3 = r1[i3];

        return $r3;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return null;
    }

    public int getSampleRate()
    {
        android.media.AudioRecord r0;
        int $i0;

        r0 := @this: android.media.AudioRecord;

        $i0 = r0.<android.media.AudioRecord: int mSampleRate>;

        return $i0;
    }

    public int getState()
    {
        android.media.AudioRecord r0;
        int $i0;

        r0 := @this: android.media.AudioRecord;

        $i0 = r0.<android.media.AudioRecord: int mState>;

        return $i0;
    }

    public int getTimestamp(android.media.AudioTimestamp, int)
    {
        android.media.AudioRecord r0;
        android.media.AudioTimestamp r1;
        int i0, $i1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: android.media.AudioRecord;

        r1 := @parameter0: android.media.AudioTimestamp;

        i0 := @parameter1: int;

        if r1 == null goto label2;

        if i0 == 1 goto label1;

        if i0 != 0 goto label2;

     label1:
        $i1 = specialinvoke r0.<android.media.AudioRecord: int native_get_timestamp(android.media.AudioTimestamp,int)>(r1, i0);

        return $i1;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;
    }

    public boolean isPrivacySensitive()
    {
        android.media.AudioRecord r0;
        android.media.AudioAttributes $r1;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.media.AudioRecord;

        $r1 = r0.<android.media.AudioRecord: android.media.AudioAttributes mAudioAttributes>;

        $i0 = virtualinvoke $r1.<android.media.AudioAttributes: int getAllFlags()>();

        $i1 = $i0 & 8192;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public final native void native_release();

    public int read(java.nio.ByteBuffer, int)
    {
        android.media.AudioRecord r0;
        java.nio.ByteBuffer r1;
        int i0, $i1;

        r0 := @this: android.media.AudioRecord;

        r1 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        $i1 = virtualinvoke r0.<android.media.AudioRecord: int read(java.nio.ByteBuffer,int,int)>(r1, i0, 0);

        return $i1;
    }

    public int read(java.nio.ByteBuffer, int, int)
    {
        android.media.AudioRecord r0;
        java.nio.ByteBuffer r1;
        int i0, i1, i2, $i3;
        boolean z0;

        r0 := @this: android.media.AudioRecord;

        r1 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = r0.<android.media.AudioRecord: int mState>;

        z0 = 1;

        if i2 == 1 goto label1;

        return -3;

     label1:
        if i1 == 0 goto label2;

        if i1 == 1 goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("android.media.AudioRecord", "AudioRecord.read() called with invalid blocking mode");

        return -2;

     label2:
        if r1 == null goto label6;

        if i0 >= 0 goto label3;

        goto label6;

     label3:
        if i1 != 0 goto label4;

        goto label5;

     label4:
        z0 = 0;

     label5:
        $i3 = specialinvoke r0.<android.media.AudioRecord: int native_read_in_direct_buffer(java.lang.Object,int,boolean)>(r1, i0, z0);

        return $i3;

     label6:
        return -2;
    }

    public int read(byte[], int, int)
    {
        android.media.AudioRecord r0;
        byte[] r1;
        int i0, i1, $i2;

        r0 := @this: android.media.AudioRecord;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = virtualinvoke r0.<android.media.AudioRecord: int read(byte[],int,int,int)>(r1, i0, i1, 0);

        return $i2;
    }

    public int read(byte[], int, int, int)
    {
        android.media.AudioRecord r0;
        byte[] r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8;
        boolean z0;

        r0 := @this: android.media.AudioRecord;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 = r0.<android.media.AudioRecord: int mState>;

        z0 = 1;

        if i3 != 1 goto label7;

        $i4 = r0.<android.media.AudioRecord: int mAudioFormat>;

        if $i4 != 4 goto label1;

        goto label7;

     label1:
        if i2 == 0 goto label2;

        if i2 == 1 goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("android.media.AudioRecord", "AudioRecord.read() called with invalid blocking mode");

        return -2;

     label2:
        if r1 == null goto label6;

        if i0 < 0 goto label6;

        if i1 < 0 goto label6;

        $i5 = i0 + i1;

        if $i5 < 0 goto label6;

        $i7 = i0 + i1;

        $i6 = lengthof r1;

        if $i7 <= $i6 goto label3;

        goto label6;

     label3:
        if i2 != 0 goto label4;

        goto label5;

     label4:
        z0 = 0;

     label5:
        $i8 = specialinvoke r0.<android.media.AudioRecord: int native_read_in_byte_array(byte[],int,int,boolean)>(r1, i0, i1, z0);

        return $i8;

     label6:
        return -2;

     label7:
        return -3;
    }

    public int read(float[], int, int, int)
    {
        android.media.AudioRecord r0;
        float[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean z0;

        r0 := @this: android.media.AudioRecord;

        r1 := @parameter0: float[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $i3 = r0.<android.media.AudioRecord: int mState>;

        if $i3 != 0 goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("android.media.AudioRecord", "AudioRecord.read() called in invalid state STATE_UNINITIALIZED");

        return -3;

     label1:
        $i4 = r0.<android.media.AudioRecord: int mAudioFormat>;

        if $i4 == 4 goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("android.media.AudioRecord", "AudioRecord.read(float[] ...) requires format ENCODING_PCM_FLOAT");

        return -3;

     label2:
        z0 = 1;

        if i2 == 0 goto label3;

        if i2 == 1 goto label3;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("android.media.AudioRecord", "AudioRecord.read() called with invalid blocking mode");

        return -2;

     label3:
        if r1 == null goto label7;

        if i0 < 0 goto label7;

        if i1 < 0 goto label7;

        $i5 = i0 + i1;

        if $i5 < 0 goto label7;

        $i7 = i0 + i1;

        $i6 = lengthof r1;

        if $i7 <= $i6 goto label4;

        goto label7;

     label4:
        if i2 != 0 goto label5;

        goto label6;

     label5:
        z0 = 0;

     label6:
        $i8 = specialinvoke r0.<android.media.AudioRecord: int native_read_in_float_array(float[],int,int,boolean)>(r1, i0, i1, z0);

        return $i8;

     label7:
        return -2;
    }

    public int read(short[], int, int)
    {
        android.media.AudioRecord r0;
        short[] r1;
        int i0, i1, $i2;

        r0 := @this: android.media.AudioRecord;

        r1 := @parameter0: short[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = virtualinvoke r0.<android.media.AudioRecord: int read(short[],int,int,int)>(r1, i0, i1, 0);

        return $i2;
    }

    public int read(short[], int, int, int)
    {
        android.media.AudioRecord r0;
        short[] r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8;
        boolean z0;

        r0 := @this: android.media.AudioRecord;

        r1 := @parameter0: short[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 = r0.<android.media.AudioRecord: int mState>;

        z0 = 1;

        if i3 != 1 goto label7;

        $i4 = r0.<android.media.AudioRecord: int mAudioFormat>;

        if $i4 != 4 goto label1;

        goto label7;

     label1:
        if i2 == 0 goto label2;

        if i2 == 1 goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("android.media.AudioRecord", "AudioRecord.read() called with invalid blocking mode");

        return -2;

     label2:
        if r1 == null goto label6;

        if i0 < 0 goto label6;

        if i1 < 0 goto label6;

        $i5 = i0 + i1;

        if $i5 < 0 goto label6;

        $i7 = i0 + i1;

        $i6 = lengthof r1;

        if $i7 <= $i6 goto label3;

        goto label6;

     label3:
        if i2 != 0 goto label4;

        goto label5;

     label4:
        z0 = 0;

     label5:
        $i8 = specialinvoke r0.<android.media.AudioRecord: int native_read_in_short_array(short[],int,int,boolean)>(r1, i0, i1, z0);

        return $i8;

     label6:
        return -2;

     label7:
        return -3;
    }

    public void registerAudioRecordingCallback(java.util.concurrent.Executor, android.media.AudioManager$AudioRecordingCallback)
    {
        android.media.AudioRecord r0;
        java.util.concurrent.Executor r1;
        android.media.AudioManager$AudioRecordingCallback r2;
        android.media.AudioRecordingMonitorImpl $r3;

        r0 := @this: android.media.AudioRecord;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: android.media.AudioManager$AudioRecordingCallback;

        $r3 = r0.<android.media.AudioRecord: android.media.AudioRecordingMonitorImpl mRecordingInfoImpl>;

        virtualinvoke $r3.<android.media.AudioRecordingMonitorImpl: void registerAudioRecordingCallback(java.util.concurrent.Executor,android.media.AudioManager$AudioRecordingCallback)>(r1, r2);

        return;
    }

    public void release()
    {
        android.media.AudioRecord r0;
        java.lang.Throwable $r1;
        android.media.audiopolicy.AudioPolicy r3;

        r0 := @this: android.media.AudioRecord;

     label1:
        virtualinvoke r0.<android.media.AudioRecord: void stop()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

     label4:
        r3 = r0.<android.media.AudioRecord: android.media.audiopolicy.AudioPolicy mAudioCapturePolicy>;

        if r3 == null goto label5;

        staticinvoke <android.media.AudioManager: void unregisterAudioPolicyAsyncStatic(android.media.audiopolicy.AudioPolicy)>(r3);

        r0.<android.media.AudioRecord: android.media.audiopolicy.AudioPolicy mAudioCapturePolicy> = null;

     label5:
        virtualinvoke r0.<android.media.AudioRecord: void native_release()>();

        r0.<android.media.AudioRecord: int mState> = 0;

        return;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    public void removeOnRoutingChangedListener(android.media.AudioRecord$OnRoutingChangedListener)
    {
        android.media.AudioRecord r0;
        android.media.AudioRecord$OnRoutingChangedListener r1;

        r0 := @this: android.media.AudioRecord;

        r1 := @parameter0: android.media.AudioRecord$OnRoutingChangedListener;

        virtualinvoke r0.<android.media.AudioRecord: void removeOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener)>(r1);

        return;
    }

    public void removeOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener)
    {
        android.media.AudioRecord r0;
        android.util.ArrayMap r1, $r2, $r3;
        boolean $z0;
        java.lang.Throwable $r5;
        android.media.AudioRouting$OnRoutingChangedListener r6;

        r0 := @this: android.media.AudioRecord;

        r6 := @parameter0: android.media.AudioRouting$OnRoutingChangedListener;

        r1 = r0.<android.media.AudioRecord: android.util.ArrayMap mRoutingChangeListeners>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.media.AudioRecord: android.util.ArrayMap mRoutingChangeListeners>;

        $z0 = virtualinvoke $r2.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r6);

        if $z0 == 0 goto label2;

        $r3 = r0.<android.media.AudioRecord: android.util.ArrayMap mRoutingChangeListeners>;

        virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r6);

        specialinvoke r0.<android.media.AudioRecord: void testDisableNativeRoutingCallbacksLocked()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public int setNotificationMarkerPosition(int)
    {
        android.media.AudioRecord r0;
        int i0, $i1, $i2;

        r0 := @this: android.media.AudioRecord;

        i0 := @parameter0: int;

        $i1 = r0.<android.media.AudioRecord: int mState>;

        if $i1 != 0 goto label1;

        return -3;

     label1:
        $i2 = specialinvoke r0.<android.media.AudioRecord: int native_set_marker_pos(int)>(i0);

        return $i2;
    }

    public int setPositionNotificationPeriod(int)
    {
        android.media.AudioRecord r0;
        int i0, $i1, $i2;

        r0 := @this: android.media.AudioRecord;

        i0 := @parameter0: int;

        $i1 = r0.<android.media.AudioRecord: int mState>;

        if $i1 != 0 goto label1;

        return -3;

     label1:
        $i2 = specialinvoke r0.<android.media.AudioRecord: int native_set_pos_update_period(int)>(i0);

        return $i2;
    }

    public boolean setPreferredDevice(android.media.AudioDeviceInfo)
    {
        android.media.AudioRecord r0;
        boolean z0, $z1;
        java.lang.Throwable $r1;
        android.media.AudioDeviceInfo r2;
        int i0;

        r0 := @this: android.media.AudioRecord;

        r2 := @parameter0: android.media.AudioDeviceInfo;

        i0 = 0;

        if r2 == null goto label1;

        $z1 = virtualinvoke r2.<android.media.AudioDeviceInfo: boolean isSource()>();

        if $z1 != 0 goto label1;

        return 0;

     label1:
        if r2 == null goto label2;

        i0 = virtualinvoke r2.<android.media.AudioDeviceInfo: int getId()>();

     label2:
        z0 = specialinvoke r0.<android.media.AudioRecord: boolean native_setInputDevice(int)>(i0);

        if z0 != 1 goto label8;

        entermonitor r0;

     label3:
        r0.<android.media.AudioRecord: android.media.AudioDeviceInfo mPreferredDevice> = r2;

        exitmonitor r0;

     label4:
        goto label8;

     label5:
        $r1 := @caughtexception;

     label6:
        exitmonitor r0;

     label7:
        throw $r1;

     label8:
        return z0;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public boolean setPreferredMicrophoneDirection(int)
    {
        android.media.AudioRecord r0;
        int i0, $i1;
        boolean z0;

        r0 := @this: android.media.AudioRecord;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<android.media.AudioRecord: int native_set_preferred_microphone_direction(int)>(i0);

        if $i1 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean setPreferredMicrophoneFieldDimension(float)
    {
        android.media.AudioRecord r0;
        float f0;
        byte $b0, $b1;
        boolean z1, z2;
        int $i2;

        r0 := @this: android.media.AudioRecord;

        f0 := @parameter0: float;

        $b0 = f0 cmpl -1.0F;

        if $b0 < 0 goto label1;

        $b1 = f0 cmpg 1.0F;

        if $b1 > 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z1, "Argument must fall between -1 & 1 (inclusive)");

        $i2 = specialinvoke r0.<android.media.AudioRecord: int native_set_preferred_microphone_field_dimension(float)>(f0);

        if $i2 != 0 goto label3;

        z2 = 1;

        goto label4;

     label3:
        z2 = 0;

     label4:
        return z2;
    }

    public void setRecordPositionUpdateListener(android.media.AudioRecord$OnRecordPositionUpdateListener)
    {
        android.media.AudioRecord r0;
        android.media.AudioRecord$OnRecordPositionUpdateListener r1;

        r0 := @this: android.media.AudioRecord;

        r1 := @parameter0: android.media.AudioRecord$OnRecordPositionUpdateListener;

        virtualinvoke r0.<android.media.AudioRecord: void setRecordPositionUpdateListener(android.media.AudioRecord$OnRecordPositionUpdateListener,android.os.Handler)>(r1, null);

        return;
    }

    public void setRecordPositionUpdateListener(android.media.AudioRecord$OnRecordPositionUpdateListener, android.os.Handler)
    {
        android.media.AudioRecord r0;
        android.os.Handler r1;
        java.lang.Object r2;
        android.os.Looper $r3, $r4;
        java.lang.Throwable $r5;
        android.media.AudioRecord$OnRecordPositionUpdateListener r6;
        android.media.AudioRecord$NativeEventHandler r7, r8;

        r0 := @this: android.media.AudioRecord;

        r6 := @parameter0: android.media.AudioRecord$OnRecordPositionUpdateListener;

        r1 := @parameter1: android.os.Handler;

        r2 = r0.<android.media.AudioRecord: java.lang.Object mPositionListenerLock>;

        entermonitor r2;

     label01:
        r0.<android.media.AudioRecord: android.media.AudioRecord$OnRecordPositionUpdateListener mPositionListener> = r6;

     label02:
        if r6 == null goto label07;

        if r1 == null goto label05;

     label03:
        r7 = new android.media.AudioRecord$NativeEventHandler;

        $r4 = virtualinvoke r1.<android.os.Handler: android.os.Looper getLooper()>();

        specialinvoke r7.<android.media.AudioRecord$NativeEventHandler: void <init>(android.media.AudioRecord,android.media.AudioRecord,android.os.Looper)>(r0, r0, $r4);

        r0.<android.media.AudioRecord: android.media.AudioRecord$NativeEventHandler mEventHandler> = r7;

     label04:
        goto label08;

     label05:
        r8 = new android.media.AudioRecord$NativeEventHandler;

        $r3 = r0.<android.media.AudioRecord: android.os.Looper mInitializationLooper>;

        specialinvoke r8.<android.media.AudioRecord$NativeEventHandler: void <init>(android.media.AudioRecord,android.media.AudioRecord,android.os.Looper)>(r0, r0, $r3);

        r0.<android.media.AudioRecord: android.media.AudioRecord$NativeEventHandler mEventHandler> = r8;

     label06:
        goto label08;

     label07:
        r0.<android.media.AudioRecord: android.media.AudioRecord$NativeEventHandler mEventHandler> = null;

     label08:
        exitmonitor r2;

     label09:
        return;

     label10:
        $r5 := @caughtexception;

     label11:
        exitmonitor r2;

     label12:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public void startRecording() throws java.lang.IllegalStateException
    {
        android.media.AudioRecord r0;
        java.lang.Object r1;
        int $i0, $i1;
        java.lang.IllegalStateException $r3;
        java.lang.Throwable $r4;

        r0 := @this: android.media.AudioRecord;

        $i0 = r0.<android.media.AudioRecord: int mState>;

        if $i0 != 1 goto label7;

        r1 = r0.<android.media.AudioRecord: java.lang.Object mRecordingStateLock>;

        entermonitor r1;

     label1:
        $i1 = specialinvoke r0.<android.media.AudioRecord: int native_start(int,int)>(0, 0);

        if $i1 != 0 goto label2;

        specialinvoke r0.<android.media.AudioRecord: void handleFullVolumeRec(boolean)>(1);

        r0.<android.media.AudioRecord: int mRecordingState> = 3;

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

     label7:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("startRecording() called on an uninitialized AudioRecord.");

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void startRecording(android.media.MediaSyncEvent) throws java.lang.IllegalStateException
    {
        android.media.AudioRecord r0;
        java.lang.Object r1;
        int $i0, $i1, $i2, $i3;
        java.lang.IllegalStateException $r2;
        java.lang.Throwable $r3;
        android.media.MediaSyncEvent r4;

        r0 := @this: android.media.AudioRecord;

        r4 := @parameter0: android.media.MediaSyncEvent;

        $i0 = r0.<android.media.AudioRecord: int mState>;

        if $i0 != 1 goto label7;

        r1 = r0.<android.media.AudioRecord: java.lang.Object mRecordingStateLock>;

        entermonitor r1;

     label1:
        $i1 = virtualinvoke r4.<android.media.MediaSyncEvent: int getType()>();

        $i2 = virtualinvoke r4.<android.media.MediaSyncEvent: int getAudioSessionId()>();

        $i3 = specialinvoke r0.<android.media.AudioRecord: int native_start(int,int)>($i1, $i2);

        if $i3 != 0 goto label2;

        specialinvoke r0.<android.media.AudioRecord: void handleFullVolumeRec(boolean)>(1);

        r0.<android.media.AudioRecord: int mRecordingState> = 3;

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r3;

     label7:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("startRecording() called on an uninitialized AudioRecord.");

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void stop() throws java.lang.IllegalStateException
    {
        android.media.AudioRecord r0;
        java.lang.Object r1;
        int $i0;
        java.lang.IllegalStateException $r3;
        java.lang.Throwable $r4;

        r0 := @this: android.media.AudioRecord;

        $i0 = r0.<android.media.AudioRecord: int mState>;

        if $i0 != 1 goto label6;

        r1 = r0.<android.media.AudioRecord: java.lang.Object mRecordingStateLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.media.AudioRecord: void handleFullVolumeRec(boolean)>(0);

        specialinvoke r0.<android.media.AudioRecord: void native_stop()>();

        r0.<android.media.AudioRecord: int mRecordingState> = 1;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

     label6:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("stop() called on an uninitialized AudioRecord.");

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void unregisterAudioRecordingCallback(android.media.AudioManager$AudioRecordingCallback)
    {
        android.media.AudioRecord r0;
        android.media.AudioManager$AudioRecordingCallback r1;
        android.media.AudioRecordingMonitorImpl $r2;

        r0 := @this: android.media.AudioRecord;

        r1 := @parameter0: android.media.AudioManager$AudioRecordingCallback;

        $r2 = r0.<android.media.AudioRecord: android.media.AudioRecordingMonitorImpl mRecordingInfoImpl>;

        virtualinvoke $r2.<android.media.AudioRecordingMonitorImpl: void unregisterAudioRecordingCallback(android.media.AudioManager$AudioRecordingCallback)>(r1);

        return;
    }

    public static void <clinit>()
    {
        <android.media.AudioRecord: java.lang.String TAG> = "android.media.AudioRecord";

        <android.media.AudioRecord: int SUCCESS> = 0;

        <android.media.AudioRecord: java.lang.String SUBMIX_FIXED_VOLUME> = "fixedVolume";

        <android.media.AudioRecord: int STATE_UNINITIALIZED> = 0;

        <android.media.AudioRecord: int STATE_INITIALIZED> = 1;

        <android.media.AudioRecord: int RECORDSTATE_STOPPED> = 1;

        <android.media.AudioRecord: int RECORDSTATE_RECORDING> = 3;

        <android.media.AudioRecord: int READ_NON_BLOCKING> = 1;

        <android.media.AudioRecord: int READ_BLOCKING> = 0;

        <android.media.AudioRecord: int NATIVE_EVENT_NEW_POS> = 3;

        <android.media.AudioRecord: int NATIVE_EVENT_MARKER> = 2;

        <android.media.AudioRecord: int ERROR_INVALID_OPERATION> = -3;

        <android.media.AudioRecord: int ERROR_DEAD_OBJECT> = -6;

        <android.media.AudioRecord: int ERROR_BAD_VALUE> = -2;

        <android.media.AudioRecord: int ERROR> = -1;

        <android.media.AudioRecord: int AUDIORECORD_ERROR_SETUP_ZEROFRAMECOUNT> = -16;

        <android.media.AudioRecord: int AUDIORECORD_ERROR_SETUP_NATIVEINITFAILED> = -20;

        <android.media.AudioRecord: int AUDIORECORD_ERROR_SETUP_INVALIDSOURCE> = -19;

        <android.media.AudioRecord: int AUDIORECORD_ERROR_SETUP_INVALIDFORMAT> = -18;

        <android.media.AudioRecord: int AUDIORECORD_ERROR_SETUP_INVALIDCHANNELMASK> = -17;

        return;
    }
}
