public class android.media.AudioRecordingMonitorImpl extends java.lang.Object implements android.media.AudioRecordingMonitor
{
    private static final int MSG_RECORDING_CONFIG_CHANGE;
    private static final java.lang.String TAG;
    private static android.media.IAudioService sService;
    private final android.media.AudioRecordingMonitorClient mClient;
    private java.util.LinkedList mRecordCallbackList;
    private final java.lang.Object mRecordCallbackLock;
    private final android.media.IRecordingConfigDispatcher mRecordingCallback;
    private volatile android.os.Handler mRecordingCallbackHandler;
    private android.os.HandlerThread mRecordingCallbackHandlerThread;

    void <init>(android.media.AudioRecordingMonitorClient)
    {
        android.media.AudioRecordingMonitorImpl r0;
        android.media.AudioRecordingMonitorClient r1;
        java.lang.Object $r2;
        java.util.LinkedList $r3;
        android.media.AudioRecordingMonitorImpl$1 $r4;

        r0 := @this: android.media.AudioRecordingMonitorImpl;

        r1 := @parameter0: android.media.AudioRecordingMonitorClient;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<android.media.AudioRecordingMonitorImpl: java.lang.Object mRecordCallbackLock> = $r2;

        $r3 = new java.util.LinkedList;

        specialinvoke $r3.<java.util.LinkedList: void <init>()>();

        r0.<android.media.AudioRecordingMonitorImpl: java.util.LinkedList mRecordCallbackList> = $r3;

        $r4 = new android.media.AudioRecordingMonitorImpl$1;

        specialinvoke $r4.<android.media.AudioRecordingMonitorImpl$1: void <init>(android.media.AudioRecordingMonitorImpl)>(r0);

        r0.<android.media.AudioRecordingMonitorImpl: android.media.IRecordingConfigDispatcher mRecordingCallback> = $r4;

        r0.<android.media.AudioRecordingMonitorImpl: android.media.AudioRecordingMonitorClient mClient> = r1;

        return;
    }

    static java.lang.Object access$000(android.media.AudioRecordingMonitorImpl)
    {
        android.media.AudioRecordingMonitorImpl r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.media.AudioRecordingMonitorImpl;

        $r1 = r0.<android.media.AudioRecordingMonitorImpl: java.lang.Object mRecordCallbackLock>;

        return $r1;
    }

    static android.os.Handler access$100(android.media.AudioRecordingMonitorImpl)
    {
        android.media.AudioRecordingMonitorImpl r0;
        android.os.Handler $r1;

        r0 := @parameter0: android.media.AudioRecordingMonitorImpl;

        $r1 = r0.<android.media.AudioRecordingMonitorImpl: android.os.Handler mRecordingCallbackHandler>;

        return $r1;
    }

    static java.util.LinkedList access$200(android.media.AudioRecordingMonitorImpl)
    {
        android.media.AudioRecordingMonitorImpl r0;
        java.util.LinkedList $r1;

        r0 := @parameter0: android.media.AudioRecordingMonitorImpl;

        $r1 = r0.<android.media.AudioRecordingMonitorImpl: java.util.LinkedList mRecordCallbackList>;

        return $r1;
    }

    private void beginRecordingCallbackHandling()
    {
        android.media.AudioRecordingMonitorImpl r0;
        android.os.HandlerThread $r1, $r2, $r3;
        android.media.AudioRecordingMonitorImpl$2 $r4;
        android.media.IRecordingConfigDispatcher $r5;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;
        android.os.Looper r9;
        android.media.IAudioService r10;

        r0 := @this: android.media.AudioRecordingMonitorImpl;

        $r1 = r0.<android.media.AudioRecordingMonitorImpl: android.os.HandlerThread mRecordingCallbackHandlerThread>;

        if $r1 != null goto label4;

        $r2 = new android.os.HandlerThread;

        specialinvoke $r2.<android.os.HandlerThread: void <init>(java.lang.String)>("android.media.AudioRecordingMonitor.RecordingCallback");

        r0.<android.media.AudioRecordingMonitorImpl: android.os.HandlerThread mRecordingCallbackHandlerThread> = $r2;

        virtualinvoke $r2.<android.os.HandlerThread: void start()>();

        $r3 = r0.<android.media.AudioRecordingMonitorImpl: android.os.HandlerThread mRecordingCallbackHandlerThread>;

        r9 = virtualinvoke $r3.<android.os.HandlerThread: android.os.Looper getLooper()>();

        if r9 == null goto label4;

        $r4 = new android.media.AudioRecordingMonitorImpl$2;

        specialinvoke $r4.<android.media.AudioRecordingMonitorImpl$2: void <init>(android.media.AudioRecordingMonitorImpl,android.os.Looper)>(r0, r9);

        r0.<android.media.AudioRecordingMonitorImpl: android.os.Handler mRecordingCallbackHandler> = $r4;

        r10 = staticinvoke <android.media.AudioRecordingMonitorImpl: android.media.IAudioService getService()>();

     label1:
        $r5 = r0.<android.media.AudioRecordingMonitorImpl: android.media.IRecordingConfigDispatcher mRecordingCallback>;

        interfaceinvoke r10.<android.media.IAudioService: void registerRecordingCallback(android.media.IRecordingConfigDispatcher)>($r5);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void endRecordingCallbackHandling()
    {
        android.media.AudioRecordingMonitorImpl r0;
        android.os.HandlerThread $r1, $r3;
        android.media.IRecordingConfigDispatcher $r2;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.media.IAudioService r6;

        r0 := @this: android.media.AudioRecordingMonitorImpl;

        $r1 = r0.<android.media.AudioRecordingMonitorImpl: android.os.HandlerThread mRecordingCallbackHandlerThread>;

        if $r1 == null goto label4;

        r6 = staticinvoke <android.media.AudioRecordingMonitorImpl: android.media.IAudioService getService()>();

     label1:
        $r2 = r0.<android.media.AudioRecordingMonitorImpl: android.media.IRecordingConfigDispatcher mRecordingCallback>;

        interfaceinvoke r6.<android.media.IAudioService: void unregisterRecordingCallback(android.media.IRecordingConfigDispatcher)>($r2);

     label2:
        $r3 = r0.<android.media.AudioRecordingMonitorImpl: android.os.HandlerThread mRecordingCallbackHandlerThread>;

        virtualinvoke $r3.<android.os.HandlerThread: boolean quit()>();

        r0.<android.media.AudioRecordingMonitorImpl: android.os.HandlerThread mRecordingCallbackHandlerThread> = null;

        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private static android.media.IAudioService getService()
    {
        android.os.IBinder $r0;
        android.media.IAudioService r1, r2;

        r1 = <android.media.AudioRecordingMonitorImpl: android.media.IAudioService sService>;

        if r1 == null goto label1;

        return r1;

     label1:
        $r0 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("audio");

        r2 = staticinvoke <android.media.IAudioService$Stub: android.media.IAudioService asInterface(android.os.IBinder)>($r0);

        <android.media.AudioRecordingMonitorImpl: android.media.IAudioService sService> = r2;

        return r2;
    }

    public android.media.AudioRecordingConfiguration getActiveRecordingConfiguration()
    {
        android.media.AudioRecordingMonitorImpl r0;
        java.util.List $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.media.IAudioService r4;
        android.media.AudioRecordingConfiguration r5;

        r0 := @this: android.media.AudioRecordingMonitorImpl;

        r4 = staticinvoke <android.media.AudioRecordingMonitorImpl: android.media.IAudioService getService()>();

     label1:
        $r1 = interfaceinvoke r4.<android.media.IAudioService: java.util.List getActiveRecordingConfigurations()>();

        r5 = virtualinvoke r0.<android.media.AudioRecordingMonitorImpl: android.media.AudioRecordingConfiguration getMyConfig(java.util.List)>($r1);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    android.media.AudioRecordingConfiguration getMyConfig(java.util.List)
    {
        android.media.AudioRecordingMonitorImpl r0;
        int i0, $i1;
        android.media.AudioRecordingConfiguration r1;
        android.media.AudioRecordingMonitorClient $r2;
        boolean $z0;
        java.lang.Object $r3;
        java.util.List r4;
        java.util.Iterator r5;

        r0 := @this: android.media.AudioRecordingMonitorImpl;

        r4 := @parameter0: java.util.List;

        $r2 = r0.<android.media.AudioRecordingMonitorImpl: android.media.AudioRecordingMonitorClient mClient>;

        i0 = interfaceinvoke $r2.<android.media.AudioRecordingMonitorClient: int getPortId()>();

        r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r1 = (android.media.AudioRecordingConfiguration) $r3;

        $i1 = virtualinvoke r1.<android.media.AudioRecordingConfiguration: int getClientPortId()>();

        if $i1 != i0 goto label2;

        return r1;

     label2:
        goto label1;

     label3:
        return null;
    }

    public void registerAudioRecordingCallback(java.util.concurrent.Executor, android.media.AudioManager$AudioRecordingCallback)
    {
        android.media.AudioRecordingMonitorImpl r0;
        android.media.AudioManager$AudioRecordingCallback r1, $r9;
        java.lang.Object r2, $r7;
        android.media.AudioRecordingMonitorImpl$AudioRecordingCallbackInfo r3, $r8;
        java.lang.IllegalArgumentException $r4, $r5, r13;
        java.util.LinkedList $r6, r14;
        boolean $z0;
        java.lang.Throwable $r10;
        java.util.concurrent.Executor r11;
        java.util.Iterator r12;

        r0 := @this: android.media.AudioRecordingMonitorImpl;

        r11 := @parameter0: java.util.concurrent.Executor;

        r1 := @parameter1: android.media.AudioManager$AudioRecordingCallback;

        if r1 == null goto label11;

        if r11 == null goto label10;

        r2 = r0.<android.media.AudioRecordingMonitorImpl: java.lang.Object mRecordCallbackLock>;

        entermonitor r2;

     label01:
        $r6 = r0.<android.media.AudioRecordingMonitorImpl: java.util.LinkedList mRecordCallbackList>;

        r12 = virtualinvoke $r6.<java.util.LinkedList: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        $r7 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (android.media.AudioRecordingMonitorImpl$AudioRecordingCallbackInfo) $r7;

        $r9 = $r8.<android.media.AudioRecordingMonitorImpl$AudioRecordingCallbackInfo: android.media.AudioManager$AudioRecordingCallback mCb>;

        if $r9 == r1 goto label04;

     label03:
        goto label02;

     label04:
        r13 = new java.lang.IllegalArgumentException;

        specialinvoke r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("AudioRecordingCallback already registered");

        throw r13;

     label05:
        specialinvoke r0.<android.media.AudioRecordingMonitorImpl: void beginRecordingCallbackHandling()>();

        r14 = r0.<android.media.AudioRecordingMonitorImpl: java.util.LinkedList mRecordCallbackList>;

        r3 = new android.media.AudioRecordingMonitorImpl$AudioRecordingCallbackInfo;

        specialinvoke r3.<android.media.AudioRecordingMonitorImpl$AudioRecordingCallbackInfo: void <init>(java.util.concurrent.Executor,android.media.AudioManager$AudioRecordingCallback)>(r11, r1);

        virtualinvoke r14.<java.util.LinkedList: boolean add(java.lang.Object)>(r3);

        exitmonitor r2;

     label06:
        return;

     label07:
        $r10 := @caughtexception;

     label08:
        exitmonitor r2;

     label09:
        throw $r10;

     label10:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null Executor");

        throw $r5;

     label11:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null AudioRecordingCallback");

        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    public void unregisterAudioRecordingCallback(android.media.AudioManager$AudioRecordingCallback)
    {
        android.media.AudioRecordingMonitorImpl r0;
        java.lang.Object r1, $r6;
        java.util.Iterator r2;
        android.media.AudioRecordingMonitorImpl$AudioRecordingCallbackInfo r3;
        java.lang.IllegalArgumentException $r4, r12;
        java.util.LinkedList $r5, $r8, $r9;
        boolean $z0;
        android.media.AudioManager$AudioRecordingCallback $r7, r11;
        int $i0;
        java.lang.Throwable $r10;

        r0 := @this: android.media.AudioRecordingMonitorImpl;

        r11 := @parameter0: android.media.AudioManager$AudioRecordingCallback;

        if r11 == null goto label10;

        r1 = r0.<android.media.AudioRecordingMonitorImpl: java.lang.Object mRecordCallbackLock>;

        entermonitor r1;

     label01:
        $r5 = r0.<android.media.AudioRecordingMonitorImpl: java.util.LinkedList mRecordCallbackList>;

        r2 = virtualinvoke $r5.<java.util.LinkedList: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.media.AudioRecordingMonitorImpl$AudioRecordingCallbackInfo) $r6;

        $r7 = r3.<android.media.AudioRecordingMonitorImpl$AudioRecordingCallbackInfo: android.media.AudioManager$AudioRecordingCallback mCb>;

        if $r7 != r11 goto label05;

        $r8 = r0.<android.media.AudioRecordingMonitorImpl: java.util.LinkedList mRecordCallbackList>;

        virtualinvoke $r8.<java.util.LinkedList: boolean remove(java.lang.Object)>(r3);

        $r9 = r0.<android.media.AudioRecordingMonitorImpl: java.util.LinkedList mRecordCallbackList>;

        $i0 = virtualinvoke $r9.<java.util.LinkedList: int size()>();

        if $i0 != 0 goto label03;

        specialinvoke r0.<android.media.AudioRecordingMonitorImpl: void endRecordingCallbackHandling()>();

     label03:
        exitmonitor r1;

     label04:
        return;

     label05:
        goto label02;

     label06:
        r12 = new java.lang.IllegalArgumentException;

        specialinvoke r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("AudioRecordingCallback was not registered");

        throw r12;

     label07:
        $r10 := @caughtexception;

     label08:
        exitmonitor r1;

     label09:
        throw $r10;

     label10:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null AudioRecordingCallback argument");

        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label06 to label07 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    public static void <clinit>()
    {
        <android.media.AudioRecordingMonitorImpl: java.lang.String TAG> = "android.media.AudioRecordingMonitor";

        <android.media.AudioRecordingMonitorImpl: int MSG_RECORDING_CONFIG_CHANGE> = 1;

        return;
    }
}
