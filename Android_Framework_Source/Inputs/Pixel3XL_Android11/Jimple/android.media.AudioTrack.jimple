public class android.media.AudioTrack extends android.media.PlayerBase implements android.media.AudioRouting, android.media.VolumeAutomation
{
    private static final int AUDIO_OUTPUT_FLAG_DEEP_BUFFER;
    private static final int AUDIO_OUTPUT_FLAG_FAST;
    public static final int DUAL_MONO_MODE_LL;
    public static final int DUAL_MONO_MODE_LR;
    public static final int DUAL_MONO_MODE_OFF;
    public static final int DUAL_MONO_MODE_RR;
    public static final int ENCAPSULATION_METADATA_TYPE_DVB_AD_DESCRIPTOR;
    public static final int ENCAPSULATION_METADATA_TYPE_FRAMEWORK_TUNER;
    public static final int ENCAPSULATION_METADATA_TYPE_NONE;
    public static final int ENCAPSULATION_MODE_ELEMENTARY_STREAM;
    public static final int ENCAPSULATION_MODE_HANDLE;
    public static final int ENCAPSULATION_MODE_NONE;
    public static final int ERROR;
    public static final int ERROR_BAD_VALUE;
    public static final int ERROR_DEAD_OBJECT;
    public static final int ERROR_INVALID_OPERATION;
    private static final int ERROR_NATIVESETUP_AUDIOSYSTEM;
    private static final int ERROR_NATIVESETUP_INVALIDCHANNELMASK;
    private static final int ERROR_NATIVESETUP_INVALIDFORMAT;
    private static final int ERROR_NATIVESETUP_INVALIDSTREAMTYPE;
    private static final int ERROR_NATIVESETUP_NATIVEINITFAILED;
    public static final int ERROR_WOULD_BLOCK;
    private static final float GAIN_MAX;
    private static final float GAIN_MIN;
    private static final float HEADER_V2_SIZE_BYTES;
    private static final float MAX_AUDIO_DESCRIPTION_MIX_LEVEL;
    public static final int MODE_STATIC;
    public static final int MODE_STREAM;
    private static final int NATIVE_EVENT_CAN_WRITE_MORE_DATA;
    private static final int NATIVE_EVENT_CODEC_FORMAT_CHANGE;
    private static final int NATIVE_EVENT_MARKER;
    private static final int NATIVE_EVENT_NEW_IAUDIOTRACK;
    private static final int NATIVE_EVENT_NEW_POS;
    private static final int NATIVE_EVENT_STREAM_END;
    public static final int PERFORMANCE_MODE_LOW_LATENCY;
    public static final int PERFORMANCE_MODE_NONE;
    public static final int PERFORMANCE_MODE_POWER_SAVING;
    public static final int PLAYSTATE_PAUSED;
    private static final int PLAYSTATE_PAUSED_STOPPING;
    public static final int PLAYSTATE_PLAYING;
    public static final int PLAYSTATE_STOPPED;
    private static final int PLAYSTATE_STOPPING;
    public static final int STATE_INITIALIZED;
    public static final int STATE_NO_STATIC_DATA;
    public static final int STATE_UNINITIALIZED;
    public static final int SUCCESS;
    private static final int SUPPORTED_OUT_CHANNELS;
    private static final java.lang.String TAG;
    public static final int WRITE_BLOCKING;
    public static final int WRITE_NON_BLOCKING;
    private int mAudioFormat;
    private int mAvSyncBytesRemaining;
    private java.nio.ByteBuffer mAvSyncHeader;
    private int mChannelConfiguration;
    private int mChannelCount;
    private int mChannelIndexMask;
    private int mChannelMask;
    private final android.media.Utils$ListenerList mCodecFormatChangedListeners;
    private android.media.AudioAttributes mConfiguredAudioAttributes;
    private int mDataLoadMode;
    private android.media.AudioTrack$NativePositionEventHandlerDelegate mEventHandlerDelegate;
    private final android.os.Looper mInitializationLooper;
    private long mJniData;
    private int mNativeBufferSizeInBytes;
    private int mNativeBufferSizeInFrames;
    protected long mNativeTrackInJavaObj;
    private int mOffloadDelayFrames;
    private boolean mOffloadEosPending;
    private int mOffloadPaddingFrames;
    private boolean mOffloaded;
    private int mOffset;
    private int mPlayState;
    private final java.lang.Object mPlayStateLock;
    private android.media.AudioDeviceInfo mPreferredDevice;
    private android.util.ArrayMap mRoutingChangeListeners;
    private int mSampleRate;
    private int mSessionId;
    private int mState;
    private java.util.LinkedList mStreamEventCbInfoList;
    private final java.lang.Object mStreamEventCbLock;
    private volatile android.media.AudioTrack$StreamEventHandler mStreamEventHandler;
    private android.os.HandlerThread mStreamEventHandlerThread;
    private int mStreamType;

    public void <init>(int, int, int, int, int, int) throws java.lang.IllegalArgumentException
    {
        android.media.AudioTrack r0;
        int i0, i1, i2, i3, i4, i5;

        r0 := @this: android.media.AudioTrack;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        specialinvoke r0.<android.media.AudioTrack: void <init>(int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, 0);

        return;
    }

    public void <init>(int, int, int, int, int, int, int) throws java.lang.IllegalArgumentException
    {
        android.media.AudioTrack r0;
        int i0, i1, i2, i3, i4, i5, i6;
        android.media.AudioAttributes$Builder $r1, $r2;
        android.media.AudioAttributes $r3;
        android.media.AudioFormat$Builder $r4, $r5, $r6, $r7;
        android.media.AudioFormat $r8;

        r0 := @this: android.media.AudioTrack;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        i6 := @parameter6: int;

        $r1 = new android.media.AudioAttributes$Builder;

        specialinvoke $r1.<android.media.AudioAttributes$Builder: void <init>()>();

        $r2 = virtualinvoke $r1.<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setLegacyStreamType(int)>(i0);

        $r3 = virtualinvoke $r2.<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>();

        $r4 = new android.media.AudioFormat$Builder;

        specialinvoke $r4.<android.media.AudioFormat$Builder: void <init>()>();

        $r5 = virtualinvoke $r4.<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setChannelMask(int)>(i2);

        $r6 = virtualinvoke $r5.<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setEncoding(int)>(i3);

        $r7 = virtualinvoke $r6.<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setSampleRate(int)>(i1);

        $r8 = virtualinvoke $r7.<android.media.AudioFormat$Builder: android.media.AudioFormat build()>();

        specialinvoke r0.<android.media.AudioTrack: void <init>(android.media.AudioAttributes,android.media.AudioFormat,int,int,int)>($r3, $r8, i4, i5, i6);

        staticinvoke <android.media.AudioTrack: void deprecateStreamTypeForPlayback(int,java.lang.String,java.lang.String)>(i0, "AudioTrack", "AudioTrack()");

        return;
    }

    void <init>(long)
    {
        android.media.AudioTrack r0;
        long l0;
        android.os.Looper r1, r9;
        android.media.AudioAttributes$Builder $r2;
        android.media.AudioAttributes $r3;
        java.lang.Object $r4, $r7;
        android.util.ArrayMap $r5;
        android.media.Utils$ListenerList $r6;
        java.util.LinkedList $r8;
        byte $b1;

        r0 := @this: android.media.AudioTrack;

        l0 := @parameter0: long;

        $r2 = new android.media.AudioAttributes$Builder;

        specialinvoke $r2.<android.media.AudioAttributes$Builder: void <init>()>();

        $r3 = virtualinvoke $r2.<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>();

        specialinvoke r0.<android.media.PlayerBase: void <init>(android.media.AudioAttributes,int)>($r3, 1);

        r0.<android.media.AudioTrack: int mState> = 0;

        r0.<android.media.AudioTrack: int mPlayState> = 1;

        r0.<android.media.AudioTrack: boolean mOffloadEosPending> = 0;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<android.media.AudioTrack: java.lang.Object mPlayStateLock> = $r4;

        r0.<android.media.AudioTrack: int mNativeBufferSizeInBytes> = 0;

        r0.<android.media.AudioTrack: int mNativeBufferSizeInFrames> = 0;

        r0.<android.media.AudioTrack: int mChannelCount> = 1;

        r0.<android.media.AudioTrack: int mChannelMask> = 4;

        r0.<android.media.AudioTrack: int mStreamType> = 3;

        r0.<android.media.AudioTrack: int mDataLoadMode> = 1;

        r0.<android.media.AudioTrack: int mChannelConfiguration> = 4;

        r0.<android.media.AudioTrack: int mChannelIndexMask> = 0;

        r0.<android.media.AudioTrack: int mSessionId> = 0;

        r0.<android.media.AudioTrack: java.nio.ByteBuffer mAvSyncHeader> = null;

        r0.<android.media.AudioTrack: int mAvSyncBytesRemaining> = 0;

        r0.<android.media.AudioTrack: int mOffset> = 0;

        r0.<android.media.AudioTrack: boolean mOffloaded> = 0;

        r0.<android.media.AudioTrack: int mOffloadDelayFrames> = 0;

        r0.<android.media.AudioTrack: int mOffloadPaddingFrames> = 0;

        r0.<android.media.AudioTrack: android.media.AudioDeviceInfo mPreferredDevice> = null;

        $r5 = new android.util.ArrayMap;

        specialinvoke $r5.<android.util.ArrayMap: void <init>()>();

        r0.<android.media.AudioTrack: android.util.ArrayMap mRoutingChangeListeners> = $r5;

        $r6 = new android.media.Utils$ListenerList;

        specialinvoke $r6.<android.media.Utils$ListenerList: void <init>()>();

        r0.<android.media.AudioTrack: android.media.Utils$ListenerList mCodecFormatChangedListeners> = $r6;

        $r7 = new java.lang.Object;

        specialinvoke $r7.<java.lang.Object: void <init>()>();

        r0.<android.media.AudioTrack: java.lang.Object mStreamEventCbLock> = $r7;

        $r8 = new java.util.LinkedList;

        specialinvoke $r8.<java.util.LinkedList: void <init>()>();

        r0.<android.media.AudioTrack: java.util.LinkedList mStreamEventCbInfoList> = $r8;

        r0.<android.media.AudioTrack: long mNativeTrackInJavaObj> = 0L;

        r0.<android.media.AudioTrack: long mJniData> = 0L;

        r1 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        r9 = r1;

        if r1 != null goto label1;

        r9 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

     label1:
        r0.<android.media.AudioTrack: android.os.Looper mInitializationLooper> = r9;

        $b1 = l0 cmp 0L;

        if $b1 == 0 goto label2;

        virtualinvoke r0.<android.media.AudioTrack: void baseRegisterPlayer()>();

        virtualinvoke r0.<android.media.AudioTrack: void deferred_connect(long)>(l0);

        goto label3;

     label2:
        r0.<android.media.AudioTrack: int mState> = 0;

     label3:
        return;
    }

    public void <init>(android.media.AudioAttributes, android.media.AudioFormat, int, int, int) throws java.lang.IllegalArgumentException
    {
        android.media.AudioTrack r0;
        android.media.AudioAttributes r1;
        android.media.AudioFormat r2;
        int i0, i1, i2;

        r0 := @this: android.media.AudioTrack;

        r1 := @parameter0: android.media.AudioAttributes;

        r2 := @parameter1: android.media.AudioFormat;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        specialinvoke r0.<android.media.AudioTrack: void <init>(android.media.AudioAttributes,android.media.AudioFormat,int,int,int,boolean,int,android.media.AudioTrack$TunerConfiguration)>(r1, r2, i0, i1, i2, 0, 0, null);

        return;
    }

    private void <init>(android.media.AudioAttributes, android.media.AudioFormat, int, int, int, boolean, int, android.media.AudioTrack$TunerConfiguration) throws java.lang.IllegalArgumentException
    {
        android.media.AudioTrack r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, i26, i27, i28, i29, $i30, $i31, i32, i33, i34, $i35;
        boolean z0, $z1, $z2;
        android.media.AudioTrack$TunerConfiguration r1;
        java.lang.Object $r2, $r5;
        android.util.ArrayMap $r3;
        android.media.Utils$ListenerList $r4;
        java.util.LinkedList $r6;
        java.lang.IllegalArgumentException $r7, $r12;
        android.media.AudioAttributes $r8, $r15, $r16, $r23, $r24, $r26, r27;
        java.lang.StringBuilder $r9, $r17;
        java.lang.String $r13, $r21;
        java.lang.ref.WeakReference $r14;
        float $f0, $f1;
        double $d0, $d1;
        android.media.AudioAttributes$Builder $r22, $r25;
        android.media.AudioFormat r28;
        android.os.Looper r29;
        int[] r30, r31;

        r0 := @this: android.media.AudioTrack;

        r27 := @parameter0: android.media.AudioAttributes;

        r28 := @parameter1: android.media.AudioFormat;

        i26 := @parameter2: int;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        z0 := @parameter5: boolean;

        i2 := @parameter6: int;

        r1 := @parameter7: android.media.AudioTrack$TunerConfiguration;

        specialinvoke r0.<android.media.PlayerBase: void <init>(android.media.AudioAttributes,int)>(r27, 1);

        r0.<android.media.AudioTrack: int mState> = 0;

        r0.<android.media.AudioTrack: int mPlayState> = 1;

        r0.<android.media.AudioTrack: boolean mOffloadEosPending> = 0;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<android.media.AudioTrack: java.lang.Object mPlayStateLock> = $r2;

        r0.<android.media.AudioTrack: int mNativeBufferSizeInBytes> = 0;

        r0.<android.media.AudioTrack: int mNativeBufferSizeInFrames> = 0;

        r0.<android.media.AudioTrack: int mChannelCount> = 1;

        r0.<android.media.AudioTrack: int mChannelMask> = 4;

        r0.<android.media.AudioTrack: int mStreamType> = 3;

        r0.<android.media.AudioTrack: int mDataLoadMode> = 1;

        r0.<android.media.AudioTrack: int mChannelConfiguration> = 4;

        r0.<android.media.AudioTrack: int mChannelIndexMask> = 0;

        r0.<android.media.AudioTrack: int mSessionId> = 0;

        r0.<android.media.AudioTrack: java.nio.ByteBuffer mAvSyncHeader> = null;

        r0.<android.media.AudioTrack: int mAvSyncBytesRemaining> = 0;

        r0.<android.media.AudioTrack: int mOffset> = 0;

        r0.<android.media.AudioTrack: boolean mOffloaded> = 0;

        r0.<android.media.AudioTrack: int mOffloadDelayFrames> = 0;

        r0.<android.media.AudioTrack: int mOffloadPaddingFrames> = 0;

        r0.<android.media.AudioTrack: android.media.AudioDeviceInfo mPreferredDevice> = null;

        $r3 = new android.util.ArrayMap;

        specialinvoke $r3.<android.util.ArrayMap: void <init>()>();

        r0.<android.media.AudioTrack: android.util.ArrayMap mRoutingChangeListeners> = $r3;

        $r4 = new android.media.Utils$ListenerList;

        specialinvoke $r4.<android.media.Utils$ListenerList: void <init>()>();

        r0.<android.media.AudioTrack: android.media.Utils$ListenerList mCodecFormatChangedListeners> = $r4;

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<android.media.AudioTrack: java.lang.Object mStreamEventCbLock> = $r5;

        $r6 = new java.util.LinkedList;

        specialinvoke $r6.<java.util.LinkedList: void <init>()>();

        r0.<android.media.AudioTrack: java.util.LinkedList mStreamEventCbInfoList> = $r6;

        r0.<android.media.AudioTrack: android.media.AudioAttributes mConfiguredAudioAttributes> = r27;

        if r28 == null goto label18;

        $r8 = r0.<android.media.AudioTrack: android.media.AudioAttributes mAttributes>;

        $z1 = staticinvoke <android.media.AudioTrack: boolean shouldEnablePowerSaving(android.media.AudioAttributes,android.media.AudioFormat,int,int)>($r8, r28, i26, i0);

        if $z1 == 0 goto label01;

        $r22 = new android.media.AudioAttributes$Builder;

        $r23 = r0.<android.media.AudioTrack: android.media.AudioAttributes mAttributes>;

        specialinvoke $r22.<android.media.AudioAttributes$Builder: void <init>(android.media.AudioAttributes)>($r23);

        $r24 = r0.<android.media.AudioTrack: android.media.AudioAttributes mAttributes>;

        $i23 = virtualinvoke $r24.<android.media.AudioAttributes: int getAllFlags()>();

        $i24 = $i23 | 512;

        $i25 = $i24 & -257;

        $r25 = virtualinvoke $r22.<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder replaceFlags(int)>($i25);

        $r26 = virtualinvoke $r25.<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>();

        r0.<android.media.AudioTrack: android.media.AudioAttributes mAttributes> = $r26;

     label01:
        r29 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if r29 != null goto label02;

        r29 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        goto label02;

     label02:
        i27 = virtualinvoke r28.<android.media.AudioFormat: int getSampleRate()>();

        if i27 != 0 goto label03;

        i27 = 0;

        goto label03;

     label03:
        $i3 = virtualinvoke r28.<android.media.AudioFormat: int getPropertySetMask()>();

        $i4 = $i3 & 8;

        if $i4 == 0 goto label04;

        i28 = virtualinvoke r28.<android.media.AudioFormat: int getChannelIndexMask()>();

        goto label05;

     label04:
        i28 = 0;

     label05:
        $i5 = virtualinvoke r28.<android.media.AudioFormat: int getPropertySetMask()>();

        $i6 = 4 & $i5;

        if $i6 == 0 goto label06;

        i29 = virtualinvoke r28.<android.media.AudioFormat: int getChannelMask()>();

        goto label08;

     label06:
        if i28 != 0 goto label07;

        i29 = 12;

        goto label08;

     label07:
        i29 = 0;

     label08:
        $i30 = virtualinvoke r28.<android.media.AudioFormat: int getPropertySetMask()>();

        $i31 = $i30 & 1;

        if $i31 == 0 goto label09;

        i32 = virtualinvoke r28.<android.media.AudioFormat: int getEncoding()>();

        goto label10;

     label09:
        i32 = 1;

     label10:
        specialinvoke r0.<android.media.AudioTrack: void audioParamCheck(int,int,int,int,int)>(i27, i29, i28, i32, i0);

        r0.<android.media.AudioTrack: boolean mOffloaded> = z0;

        r0.<android.media.AudioTrack: int mStreamType> = -1;

        specialinvoke r0.<android.media.AudioTrack: void audioBuffSizeCheck(int)>(i26);

        r0.<android.media.AudioTrack: android.os.Looper mInitializationLooper> = r29;

        if i1 < 0 goto label17;

        r30 = newarray (int)[1];

        $i7 = r0.<android.media.AudioTrack: int mSampleRate>;

        r30[0] = $i7;

        r31 = newarray (int)[1];

        r31[0] = i1;

        $r14 = new java.lang.ref.WeakReference;

        specialinvoke $r14.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r0);

        $r15 = r0.<android.media.AudioTrack: android.media.AudioAttributes mAttributes>;

        $i12 = r0.<android.media.AudioTrack: int mChannelMask>;

        $i11 = r0.<android.media.AudioTrack: int mChannelIndexMask>;

        $i10 = r0.<android.media.AudioTrack: int mAudioFormat>;

        $i9 = r0.<android.media.AudioTrack: int mNativeBufferSizeInBytes>;

        $i8 = r0.<android.media.AudioTrack: int mDataLoadMode>;

        i33 = specialinvoke r0.<android.media.AudioTrack: int native_setup(java.lang.Object,java.lang.Object,int[],int,int,int,int,int,int[],long,boolean,int,java.lang.Object)>($r14, $r15, r30, $i12, $i11, $i10, $i9, $i8, r31, 0L, z0, i2, r1);

        if i33 == 0 goto label11;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error code ");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i33);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" when initializing AudioTrack.");

        $r21 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.media.AudioTrack: void loge(java.lang.String)>($r21);

        return;

     label11:
        $i13 = r30[0];

        r0.<android.media.AudioTrack: int mSampleRate> = $i13;

        $i14 = r31[0];

        r0.<android.media.AudioTrack: int mSessionId> = $i14;

        $r16 = r0.<android.media.AudioTrack: android.media.AudioAttributes mAttributes>;

        $i15 = virtualinvoke $r16.<android.media.AudioAttributes: int getFlags()>();

        $i16 = $i15 & 16;

        if $i16 == 0 goto label14;

        $i17 = r0.<android.media.AudioTrack: int mAudioFormat>;

        $z2 = staticinvoke <android.media.AudioFormat: boolean isEncodingLinearFrames(int)>($i17);

        if $z2 == 0 goto label12;

        $i21 = r0.<android.media.AudioTrack: int mChannelCount>;

        $i20 = r0.<android.media.AudioTrack: int mAudioFormat>;

        $i22 = staticinvoke <android.media.AudioFormat: int getBytesPerSample(int)>($i20);

        i34 = $i21 * $i22;

        goto label13;

     label12:
        i34 = 1;

     label13:
        $f0 = (float) i34;

        $f1 = 20.0F / $f0;

        $d0 = (double) $f1;

        $d1 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        $i18 = (int) $d1;

        $i19 = $i18 * i34;

        r0.<android.media.AudioTrack: int mOffset> = $i19;

     label14:
        $i35 = r0.<android.media.AudioTrack: int mDataLoadMode>;

        if $i35 != 0 goto label15;

        r0.<android.media.AudioTrack: int mState> = 2;

        goto label16;

     label15:
        r0.<android.media.AudioTrack: int mState> = 1;

     label16:
        virtualinvoke r0.<android.media.AudioTrack: void baseRegisterPlayer()>();

        return;

     label17:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid audio session ID: ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r12;

     label18:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null AudioFormat");

        throw $r7;
    }

    void <init>(android.media.AudioAttributes, android.media.AudioFormat, int, int, int, boolean, int, android.media.AudioTrack$TunerConfiguration, android.media.AudioTrack$1) throws java.lang.IllegalArgumentException
    {
        android.media.AudioTrack r0;
        android.media.AudioAttributes r1;
        android.media.AudioFormat r2;
        int i0, i1, i2, i3;
        boolean z0;
        android.media.AudioTrack$TunerConfiguration r3;
        android.media.AudioTrack$1 r4;

        r0 := @this: android.media.AudioTrack;

        r1 := @parameter0: android.media.AudioAttributes;

        r2 := @parameter1: android.media.AudioFormat;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        z0 := @parameter5: boolean;

        i3 := @parameter6: int;

        r3 := @parameter7: android.media.AudioTrack$TunerConfiguration;

        r4 := @parameter8: android.media.AudioTrack$1;

        specialinvoke r0.<android.media.AudioTrack: void <init>(android.media.AudioAttributes,android.media.AudioFormat,int,int,int,boolean,int,android.media.AudioTrack$TunerConfiguration)>(r1, r2, i0, i1, i2, z0, i3, r3);

        return;
    }

    static boolean access$000(android.media.AudioAttributes, android.media.AudioFormat, int, int)
    {
        android.media.AudioAttributes r0;
        android.media.AudioFormat r1;
        int i0, i1;
        boolean $z0;

        r0 := @parameter0: android.media.AudioAttributes;

        r1 := @parameter1: android.media.AudioFormat;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $z0 = staticinvoke <android.media.AudioTrack: boolean shouldEnablePowerSaving(android.media.AudioAttributes,android.media.AudioFormat,int,int)>(r0, r1, i0, i1);

        return $z0;
    }

    static java.util.LinkedList access$1000(android.media.AudioTrack)
    {
        android.media.AudioTrack r0;
        java.util.LinkedList $r1;

        r0 := @parameter0: android.media.AudioTrack;

        $r1 = r0.<android.media.AudioTrack: java.util.LinkedList mStreamEventCbInfoList>;

        return $r1;
    }

    static android.os.Looper access$1100(android.media.AudioTrack)
    {
        android.media.AudioTrack r0;
        android.os.Looper $r1;

        r0 := @parameter0: android.media.AudioTrack;

        $r1 = r0.<android.media.AudioTrack: android.os.Looper mInitializationLooper>;

        return $r1;
    }

    static void access$1200(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <android.media.AudioTrack: void loge(java.lang.String)>(r0);

        return;
    }

    static void access$200(android.media.AudioTrack)
    {
        android.media.AudioTrack r0;

        r0 := @parameter0: android.media.AudioTrack;

        specialinvoke r0.<android.media.AudioTrack: void startImpl()>();

        return;
    }

    static java.lang.Object access$300(android.media.AudioTrack)
    {
        android.media.AudioTrack r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.media.AudioTrack;

        $r1 = r0.<android.media.AudioTrack: java.lang.Object mStreamEventCbLock>;

        return $r1;
    }

    static java.lang.Object access$400(android.media.AudioTrack)
    {
        android.media.AudioTrack r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.media.AudioTrack;

        $r1 = r0.<android.media.AudioTrack: java.lang.Object mPlayStateLock>;

        return $r1;
    }

    static int access$500(android.media.AudioTrack)
    {
        android.media.AudioTrack r0;
        int $i0;

        r0 := @parameter0: android.media.AudioTrack;

        $i0 = r0.<android.media.AudioTrack: int mPlayState>;

        return $i0;
    }

    static int access$502(android.media.AudioTrack, int)
    {
        android.media.AudioTrack r0;
        int i0;

        r0 := @parameter0: android.media.AudioTrack;

        i0 := @parameter1: int;

        r0.<android.media.AudioTrack: int mPlayState> = i0;

        return i0;
    }

    static boolean access$600(android.media.AudioTrack)
    {
        android.media.AudioTrack r0;
        boolean $z0;

        r0 := @parameter0: android.media.AudioTrack;

        $z0 = r0.<android.media.AudioTrack: boolean mOffloadEosPending>;

        return $z0;
    }

    static boolean access$602(android.media.AudioTrack, boolean)
    {
        android.media.AudioTrack r0;
        boolean z0;

        r0 := @parameter0: android.media.AudioTrack;

        z0 := @parameter1: boolean;

        r0.<android.media.AudioTrack: boolean mOffloadEosPending> = z0;

        return z0;
    }

    static void access$700(android.media.AudioTrack)
    {
        android.media.AudioTrack r0;

        r0 := @parameter0: android.media.AudioTrack;

        specialinvoke r0.<android.media.AudioTrack: void native_start()>();

        return;
    }

    static java.nio.ByteBuffer access$802(android.media.AudioTrack, java.nio.ByteBuffer)
    {
        android.media.AudioTrack r0;
        java.nio.ByteBuffer r1;

        r0 := @parameter0: android.media.AudioTrack;

        r1 := @parameter1: java.nio.ByteBuffer;

        r0.<android.media.AudioTrack: java.nio.ByteBuffer mAvSyncHeader> = r1;

        return r1;
    }

    static int access$902(android.media.AudioTrack, int)
    {
        android.media.AudioTrack r0;
        int i0;

        r0 := @parameter0: android.media.AudioTrack;

        i0 := @parameter1: int;

        r0.<android.media.AudioTrack: int mAvSyncBytesRemaining> = i0;

        return i0;
    }

    private void audioBuffSizeCheck(int)
    {
        android.media.AudioTrack r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        boolean $z0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: android.media.AudioTrack;

        i0 := @parameter0: int;

        $i1 = r0.<android.media.AudioTrack: int mAudioFormat>;

        $z0 = staticinvoke <android.media.AudioFormat: boolean isEncodingLinearFrames(int)>($i1);

        if $z0 == 0 goto label1;

        $i5 = r0.<android.media.AudioTrack: int mChannelCount>;

        $i4 = r0.<android.media.AudioTrack: int mAudioFormat>;

        $i6 = staticinvoke <android.media.AudioFormat: int getBytesPerSample(int)>($i4);

        i7 = $i5 * $i6;

        goto label2;

     label1:
        i7 = 1;

     label2:
        $i2 = i0 % i7;

        if $i2 != 0 goto label3;

        if i0 < 1 goto label3;

        r0.<android.media.AudioTrack: int mNativeBufferSizeInBytes> = i0;

        $i3 = i0 / i7;

        r0.<android.media.AudioTrack: int mNativeBufferSizeInFrames> = $i3;

        return;

     label3:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid audio buffer size.");

        throw $r1;
    }

    private void audioParamCheck(int, int, int, int, int)
    {
        android.media.AudioTrack r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11, i12, i13;
        java.lang.StringBuilder $r1, $r8;
        java.lang.IllegalArgumentException $r4, $r6, $r7, $r11, $r13, $r14, $r15;
        java.lang.String $r5, $r12;
        boolean $z0, $z1, $z2;

        r0 := @this: android.media.AudioTrack;

        i9 := @parameter0: int;

        i10 := @parameter1: int;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        if i9 < 4000 goto label01;

        if i9 <= 192000 goto label02;

     label01:
        if i9 != 0 goto label19;

     label02:
        r0.<android.media.AudioTrack: int mSampleRate> = i9;

        if i1 != 13 goto label04;

        if i10 != 12 goto label03;

        goto label04;

     label03:
        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ENCODING_IEC61937 must be configured as CHANNEL_OUT_STEREO");

        throw $r15;

     label04:
        r0.<android.media.AudioTrack: int mChannelConfiguration> = i10;

        if i10 == 1 goto label08;

        if i10 == 2 goto label08;

        if i10 == 3 goto label07;

        if i10 == 4 goto label08;

        if i10 == 12 goto label07;

        if i10 != 0 goto label05;

        if i0 == 0 goto label05;

        r0.<android.media.AudioTrack: int mChannelCount> = 0;

        goto label09;

     label05:
        $z2 = staticinvoke <android.media.AudioTrack: boolean isMultichannelConfigSupported(int)>(i10);

        if $z2 == 0 goto label06;

        r0.<android.media.AudioTrack: int mChannelMask> = i10;

        $i8 = staticinvoke <android.media.AudioFormat: int channelCountFromOutChannelMask(int)>(i10);

        r0.<android.media.AudioTrack: int mChannelCount> = $i8;

        goto label09;

     label06:
        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unsupported channel configuration.");

        throw $r14;

     label07:
        r0.<android.media.AudioTrack: int mChannelCount> = 2;

        r0.<android.media.AudioTrack: int mChannelMask> = 12;

        goto label09;

     label08:
        r0.<android.media.AudioTrack: int mChannelCount> = 1;

        r0.<android.media.AudioTrack: int mChannelMask> = 4;

     label09:
        r0.<android.media.AudioTrack: int mChannelIndexMask> = i0;

        if i0 == 0 goto label13;

        $i4 = <android.media.AudioSystem: int OUT_CHANNEL_COUNT_MAX>;

        $i5 = 1 << $i4;

        $i6 = $i5 - 1;

        $i7 = $i6 & i0;

        if $i7 != 0 goto label12;

        i11 = staticinvoke <java.lang.Integer: int bitCount(int)>(i0);

        i12 = r0.<android.media.AudioTrack: int mChannelCount>;

        if i12 != 0 goto label10;

        r0.<android.media.AudioTrack: int mChannelCount> = i11;

        goto label13;

     label10:
        if i12 != i11 goto label11;

        goto label13;

     label11:
        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Channel count must match");

        throw $r13;

     label12:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported channel index configuration ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r11;

     label13:
        i13 = i1;

        if i1 != 1 goto label14;

        i13 = 2;

     label14:
        $z0 = staticinvoke <android.media.AudioFormat: boolean isPublicEncoding(int)>(i13);

        if $z0 == 0 goto label18;

        r0.<android.media.AudioTrack: int mAudioFormat> = i13;

        if i2 == 1 goto label15;

        if i2 != 0 goto label16;

     label15:
        if i2 == 1 goto label17;

        $i3 = r0.<android.media.AudioTrack: int mAudioFormat>;

        $z1 = staticinvoke <android.media.AudioFormat: boolean isEncodingLinearPcm(int)>($i3);

        if $z1 == 0 goto label16;

        goto label17;

     label16:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid mode.");

        throw $r7;

     label17:
        r0.<android.media.AudioTrack: int mDataLoadMode> = i2;

        return;

     label18:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unsupported audio encoding.");

        throw $r6;

     label19:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Hz is not a supported sample rate.");

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    private void beginStreamEventHandling()
    {
        android.media.AudioTrack r0;
        android.os.HandlerThread $r1, $r2, $r3;
        android.media.AudioTrack$StreamEventHandler $r4;
        android.os.Looper r6;

        r0 := @this: android.media.AudioTrack;

        $r1 = r0.<android.media.AudioTrack: android.os.HandlerThread mStreamEventHandlerThread>;

        if $r1 != null goto label1;

        $r2 = new android.os.HandlerThread;

        specialinvoke $r2.<android.os.HandlerThread: void <init>(java.lang.String)>("android.media.AudioTrack.StreamEvent");

        r0.<android.media.AudioTrack: android.os.HandlerThread mStreamEventHandlerThread> = $r2;

        virtualinvoke $r2.<android.os.HandlerThread: void start()>();

        $r3 = r0.<android.media.AudioTrack: android.os.HandlerThread mStreamEventHandlerThread>;

        r6 = virtualinvoke $r3.<android.os.HandlerThread: android.os.Looper getLooper()>();

        if r6 == null goto label1;

        $r4 = new android.media.AudioTrack$StreamEventHandler;

        specialinvoke $r4.<android.media.AudioTrack$StreamEventHandler: void <init>(android.media.AudioTrack,android.os.Looper)>(r0, r6);

        r0.<android.media.AudioTrack: android.media.AudioTrack$StreamEventHandler mStreamEventHandler> = $r4;

     label1:
        return;
    }

    private boolean blockUntilOffloadDrain(int)
    {
        android.media.AudioTrack r0;
        int i0, $i1, $i2;
        java.lang.Object r1, $r2;
        java.lang.Throwable $r3, $r4;

        r0 := @this: android.media.AudioTrack;

        i0 := @parameter0: int;

        r1 = r0.<android.media.AudioTrack: java.lang.Object mPlayStateLock>;

        entermonitor r1;

     label01:
        $i1 = r0.<android.media.AudioTrack: int mPlayState>;

        if $i1 == 4 goto label05;

        $i2 = r0.<android.media.AudioTrack: int mPlayState>;

        if $i2 != 5 goto label03;

     label02:
        goto label05;

     label03:
        exitmonitor r1;

     label04:
        return 1;

     label05:
        if i0 != 1 goto label08;

     label06:
        exitmonitor r1;

     label07:
        return 0;

     label08:
        $r2 = r0.<android.media.AudioTrack: java.lang.Object mPlayStateLock>;

        virtualinvoke $r2.<java.lang.Object: void wait()>();

     label09:
        goto label11;

     label10:
        $r3 := @caughtexception;

     label11:
        goto label01;

     label12:
        $r4 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.InterruptedException from label08 to label09 with label10;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    private void broadcastRoutingChange()
    {
        android.media.AudioTrack r0;
        android.util.ArrayMap r1, $r2;
        java.util.Collection $r3;
        boolean $z0;
        java.lang.Object $r4;
        android.media.NativeRoutingEventHandlerDelegate $r5;
        java.lang.Throwable $r6;
        java.util.Iterator r7;

        r0 := @this: android.media.AudioTrack;

        staticinvoke <android.media.AudioManager: int resetAudioPortGeneration()>();

        r1 = r0.<android.media.AudioTrack: android.util.ArrayMap mRoutingChangeListeners>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.media.AudioTrack: android.util.ArrayMap mRoutingChangeListeners>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.util.Collection values()>();

        r7 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (android.media.NativeRoutingEventHandlerDelegate) $r4;

        virtualinvoke $r5.<android.media.NativeRoutingEventHandlerDelegate: void notifyClient()>();

     label3:
        goto label2;

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r6 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private static float clampGainOrLevel(float)
    {
        float f0, f1;
        boolean $z0;
        java.lang.IllegalArgumentException $r0;
        byte $b0, $b1;

        f0 := @parameter0: float;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z0 != 0 goto label3;

        $b0 = f0 cmpg 0.0F;

        if $b0 >= 0 goto label1;

        f1 = 0.0F;

        goto label2;

     label1:
        f1 = f0;

        $b1 = f0 cmpl 1.0F;

        if $b1 <= 0 goto label2;

        f1 = 1.0F;

     label2:
        return f1;

     label3:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r0;
    }

    private void endStreamEventHandling()
    {
        android.media.AudioTrack r0;
        android.os.HandlerThread r1;

        r0 := @this: android.media.AudioTrack;

        r1 = r0.<android.media.AudioTrack: android.os.HandlerThread mStreamEventHandlerThread>;

        if r1 == null goto label1;

        virtualinvoke r1.<android.os.HandlerThread: boolean quit()>();

        r0.<android.media.AudioTrack: android.os.HandlerThread mStreamEventHandlerThread> = null;

     label1:
        return;
    }

    public static float getMaxVolume()
    {
        return 1.0F;
    }

    public static int getMinBufferSize(int, int, int)
    {
        int i0, i1, i2, i3, i4;
        java.lang.StringBuilder $r1;
        java.lang.String $r5;
        boolean $z0, $z1;

        i1 := @parameter0: int;

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        if i2 == 2 goto label3;

        if i2 == 3 goto label2;

        if i2 == 4 goto label3;

        if i2 == 12 goto label2;

        $z0 = staticinvoke <android.media.AudioTrack: boolean isMultichannelConfigSupported(int)>(i2);

        if $z0 != 0 goto label1;

        staticinvoke <android.media.AudioTrack: void loge(java.lang.String)>("getMinBufferSize(): Invalid channel configuration.");

        return -2;

     label1:
        i3 = staticinvoke <android.media.AudioFormat: int channelCountFromOutChannelMask(int)>(i2);

        goto label4;

     label2:
        i3 = 2;

        goto label4;

     label3:
        i3 = 1;

     label4:
        $z1 = staticinvoke <android.media.AudioFormat: boolean isPublicEncoding(int)>(i0);

        if $z1 != 0 goto label5;

        staticinvoke <android.media.AudioTrack: void loge(java.lang.String)>("getMinBufferSize(): Invalid audio format.");

        return -2;

     label5:
        if i1 < 4000 goto label8;

        if i1 <= 192000 goto label6;

        goto label8;

     label6:
        i4 = staticinvoke <android.media.AudioTrack: int native_get_min_buff_size(int,int,int)>(i1, i3, i0);

        if i4 > 0 goto label7;

        staticinvoke <android.media.AudioTrack: void loge(java.lang.String)>("getMinBufferSize(): error querying hardware");

        return -1;

     label7:
        return i4;

     label8:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getMinBufferSize(): ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Hz is not a supported sample rate.");

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.media.AudioTrack: void loge(java.lang.String)>($r5);

        return -2;
    }

    public static float getMinVolume()
    {
        return 0.0F;
    }

    public static int getNativeOutputSampleRate(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = staticinvoke <android.media.AudioTrack: int native_get_output_sample_rate(int)>(i0);

        return $i1;
    }

    public static boolean isDirectPlaybackSupported(android.media.AudioFormat, android.media.AudioAttributes)
    {
        android.media.AudioFormat r0;
        android.media.AudioAttributes r1;
        java.lang.IllegalArgumentException $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0;

        r0 := @parameter0: android.media.AudioFormat;

        r1 := @parameter1: android.media.AudioAttributes;

        if r0 == null goto label2;

        if r1 == null goto label1;

        $i0 = virtualinvoke r0.<android.media.AudioFormat: int getEncoding()>();

        $i1 = virtualinvoke r0.<android.media.AudioFormat: int getSampleRate()>();

        $i2 = virtualinvoke r0.<android.media.AudioFormat: int getChannelMask()>();

        $i3 = virtualinvoke r0.<android.media.AudioFormat: int getChannelIndexMask()>();

        $i4 = virtualinvoke r1.<android.media.AudioAttributes: int getContentType()>();

        $i5 = virtualinvoke r1.<android.media.AudioAttributes: int getUsage()>();

        $i6 = virtualinvoke r1.<android.media.AudioAttributes: int getFlags()>();

        $z0 = staticinvoke <android.media.AudioTrack: boolean native_is_direct_output_supported(int,int,int,int,int,int,int)>($i0, $i1, $i2, $i3, $i4, $i5, $i6);

        return $z0;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null AudioAttributes argument");

        throw $r3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null AudioFormat argument");

        throw $r2;
    }

    private static boolean isMultichannelConfigSupported(int)
    {
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.StringBuilder $r1;
        java.lang.String $r6;

        i0 := @parameter0: int;

        $i2 = i0 & 7420;

        if $i2 == i0 goto label1;

        staticinvoke <android.media.AudioTrack: void loge(java.lang.String)>("Channel configuration features unsupported channels");

        return 0;

     label1:
        i1 = staticinvoke <android.media.AudioFormat: int channelCountFromOutChannelMask(int)>(i0);

        $i3 = <android.media.AudioSystem: int OUT_CHANNEL_COUNT_MAX>;

        if i1 <= $i3 goto label2;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Channel configuration contains too many channels ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $i9 = <android.media.AudioSystem: int OUT_CHANNEL_COUNT_MAX>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.media.AudioTrack: void loge(java.lang.String)>($r6);

        return 0;

     label2:
        $i4 = i0 & 12;

        if $i4 == 12 goto label3;

        staticinvoke <android.media.AudioTrack: void loge(java.lang.String)>("Front channels must be present in multichannel configurations");

        return 0;

     label3:
        $i5 = i0 & 192;

        if $i5 == 0 goto label4;

        $i8 = i0 & 192;

        if $i8 == 192 goto label4;

        staticinvoke <android.media.AudioTrack: void loge(java.lang.String)>("Rear channels can\'t be used independently");

        return 0;

     label4:
        $i6 = i0 & 6144;

        if $i6 == 0 goto label5;

        $i7 = i0 & 6144;

        if $i7 == 6144 goto label5;

        staticinvoke <android.media.AudioTrack: void loge(java.lang.String)>("Side channels can\'t be used independently");

        return 0;

     label5:
        return 1;
    }

    private static boolean isValidAudioDescriptionMixLevel(float)
    {
        float f0;
        boolean $z0, z1;
        byte $b0;

        f0 := @parameter0: float;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z0 != 0 goto label1;

        $b0 = f0 cmpl 48.0F;

        if $b0 > 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    private static boolean isValidDualMonoMode(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 == 0 goto label1;

        if i0 == 1 goto label1;

        if i0 == 2 goto label1;

        if i0 == 3 goto label1;

        return 0;

     label1:
        return 1;
    }

    private static void logd(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("android.media.AudioTrack", r0);

        return;
    }

    private static void loge(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("android.media.AudioTrack", r0);

        return;
    }

    private native int native_applyVolumeShaper(android.media.VolumeShaper$Configuration, android.media.VolumeShaper$Operation);

    private final native int native_attachAuxEffect(int);

    private final native void native_disableDeviceCallback();

    private final native void native_enableDeviceCallback();

    private final native void native_finalize();

    private final native void native_flush();

    private native android.os.PersistableBundle native_getMetrics();

    private native int native_getPortId();

    private final native int native_getRoutedDeviceId();

    private native android.media.VolumeShaper$State native_getVolumeShaperState(int);

    private native int native_get_audio_description_mix_level_db(float[]);

    private final native int native_get_buffer_capacity_frames();

    private final native int native_get_buffer_size_frames();

    private native int native_get_dual_mono_mode(int[]);

    private final native int native_get_flags();

    private final native int native_get_latency();

    private final native int native_get_marker_pos();

    private static final native int native_get_min_buff_size(int, int, int);

    private static final native int native_get_output_sample_rate(int);

    private final native android.media.PlaybackParams native_get_playback_params();

    private final native int native_get_playback_rate();

    private final native int native_get_pos_update_period();

    private final native int native_get_position();

    private final native int native_get_timestamp(long[]);

    private final native int native_get_underrun_count();

    private static native boolean native_is_direct_output_supported(int, int, int, int, int, int, int);

    private final native void native_pause();

    private final native int native_reload_static();

    private final native int native_setAuxEffectSendLevel(float);

    private final native boolean native_setOutputDevice(int);

    private final native int native_setPresentation(int, int);

    private final native void native_setVolume(float, float);

    private native int native_set_audio_description_mix_level_db(float);

    private final native int native_set_buffer_size_frames(int);

    private native void native_set_delay_padding(int, int);

    private native int native_set_dual_mono_mode(int);

    private final native int native_set_loop(int, int, int);

    private final native int native_set_marker_pos(int);

    private final native void native_set_playback_params(android.media.PlaybackParams);

    private final native int native_set_playback_rate(int);

    private final native int native_set_pos_update_period(int);

    private final native int native_set_position(int);

    private final native int native_setup(java.lang.Object, java.lang.Object, int[], int, int, int, int, int, int[], long, boolean, int, java.lang.Object);

    private final native void native_start();

    private final native void native_stop();

    private final native int native_write_byte(byte[], int, int, int, boolean);

    private final native int native_write_float(float[], int, int, int, boolean);

    private final native int native_write_native_bytes(java.nio.ByteBuffer, int, int, int, boolean);

    private final native int native_write_short(short[], int, int, int, boolean);

    private static void postEventFromNative(java.lang.Object, int, int, int, java.lang.Object)
    {
        int i0, i1, i2;
        java.lang.ref.WeakReference $r0;
        java.lang.Object $r1, r7, r8;
        android.os.Message $r2;
        java.nio.ByteOrder $r3;
        android.media.Utils$ListenerList $r6;
        android.media.AudioTrack r9;
        java.nio.ByteBuffer r10;
        android.media.AudioMetadata$BaseMap r11;
        android.media.AudioTrack$NativePositionEventHandlerDelegate r12;
        android.os.Handler r13;

        r7 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r8 := @parameter4: java.lang.Object;

        $r0 = (java.lang.ref.WeakReference) r7;

        $r1 = virtualinvoke $r0.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r9 = (android.media.AudioTrack) $r1;

        if r9 != null goto label1;

        return;

     label1:
        if i0 != 1000 goto label2;

        specialinvoke r9.<android.media.AudioTrack: void broadcastRoutingChange()>();

        return;

     label2:
        if i0 != 100 goto label4;

        r10 = (java.nio.ByteBuffer) r8;

        $r3 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        virtualinvoke r10.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r3);

        virtualinvoke r10.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        r11 = staticinvoke <android.media.AudioMetadata: android.media.AudioMetadata$BaseMap fromByteBuffer(java.nio.ByteBuffer)>(r10);

        if r11 != null goto label3;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("android.media.AudioTrack", "Unable to get audio metadata from byte buffer");

        return;

     label3:
        $r6 = r9.<android.media.AudioTrack: android.media.Utils$ListenerList mCodecFormatChangedListeners>;

        virtualinvoke $r6.<android.media.Utils$ListenerList: void notify(int,java.lang.Object)>(0, r11);

        return;

     label4:
        if i0 == 9 goto label7;

        if i0 == 6 goto label7;

        if i0 != 7 goto label5;

        goto label7;

     label5:
        r12 = r9.<android.media.AudioTrack: android.media.AudioTrack$NativePositionEventHandlerDelegate mEventHandlerDelegate>;

        if r12 == null goto label6;

        r13 = virtualinvoke r12.<android.media.AudioTrack$NativePositionEventHandlerDelegate: android.os.Handler getHandler()>();

        if r13 == null goto label6;

        $r2 = virtualinvoke r13.<android.os.Handler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(i0, i1, i2, r8);

        virtualinvoke r13.<android.os.Handler: boolean sendMessage(android.os.Message)>($r2);

     label6:
        return;

     label7:
        virtualinvoke r9.<android.media.AudioTrack: void handleStreamEventFromNative(int,int)>(i0, i1);

        return;
    }

    private static boolean shouldEnablePowerSaving(android.media.AudioAttributes, android.media.AudioFormat, int, int)
    {
        android.media.AudioAttributes r0;
        android.media.AudioFormat r1;
        int i0, i1, i2, $i4, $i5, $i6, $i7, $i8, $i11, $i12, $i15, $i20, $i21, $i22, $i23, $i24;
        long l3, $l9, $l10, $l13, $l14, $l16, $l17, $l18;
        boolean $z0, $z1;
        byte $b19;

        r0 := @parameter0: android.media.AudioAttributes;

        r1 := @parameter1: android.media.AudioFormat;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 = virtualinvoke r0.<android.media.AudioAttributes: int getAllFlags()>();

        if r0 == null goto label2;

        $i20 = i2 & 792;

        if $i20 != 0 goto label1;

        $i21 = virtualinvoke r0.<android.media.AudioAttributes: int getUsage()>();

        if $i21 != 1 goto label1;

        $i22 = virtualinvoke r0.<android.media.AudioAttributes: int getContentType()>();

        if $i22 == 0 goto label2;

        $i23 = virtualinvoke r0.<android.media.AudioAttributes: int getContentType()>();

        if $i23 == 2 goto label2;

        $i24 = virtualinvoke r0.<android.media.AudioAttributes: int getContentType()>();

        if $i24 == 3 goto label2;

     label1:
        return 0;

     label2:
        if r1 == null goto label6;

        $i4 = virtualinvoke r1.<android.media.AudioFormat: int getSampleRate()>();

        if $i4 == 0 goto label6;

        $i5 = virtualinvoke r1.<android.media.AudioFormat: int getEncoding()>();

        $z0 = staticinvoke <android.media.AudioFormat: boolean isEncodingLinearPcm(int)>($i5);

        if $z0 == 0 goto label6;

        $i6 = virtualinvoke r1.<android.media.AudioFormat: int getEncoding()>();

        $z1 = staticinvoke <android.media.AudioFormat: boolean isValidEncoding(int)>($i6);

        if $z1 == 0 goto label6;

        $i7 = virtualinvoke r1.<android.media.AudioFormat: int getChannelCount()>();

        if $i7 >= 1 goto label3;

        goto label6;

     label3:
        if i1 == 1 goto label4;

        return 0;

     label4:
        if i0 == 0 goto label5;

        $i8 = virtualinvoke r1.<android.media.AudioFormat: int getChannelCount()>();

        $l9 = (long) $i8;

        $l10 = $l9 * 100L;

        $i11 = virtualinvoke r1.<android.media.AudioFormat: int getEncoding()>();

        $i12 = staticinvoke <android.media.AudioFormat: int getBytesPerSample(int)>($i11);

        $l13 = (long) $i12;

        $l14 = $l10 * $l13;

        $i15 = virtualinvoke r1.<android.media.AudioFormat: int getSampleRate()>();

        $l16 = (long) $i15;

        $l17 = $l14 * $l16;

        l3 = $l17 / 1000L;

        $l18 = (long) i0;

        $b19 = $l18 cmp l3;

        if $b19 >= 0 goto label5;

        return 0;

     label5:
        return 1;

     label6:
        return 0;
    }

    private void startImpl()
    {
        android.media.AudioTrack r0;
        java.lang.Object r1;
        int $i0;
        java.lang.Throwable $r3;

        r0 := @this: android.media.AudioTrack;

        r1 = r0.<android.media.AudioTrack: java.lang.Object mPlayStateLock>;

        entermonitor r1;

     label1:
        virtualinvoke r0.<android.media.AudioTrack: void baseStart()>();

        specialinvoke r0.<android.media.AudioTrack: void native_start()>();

        $i0 = r0.<android.media.AudioTrack: int mPlayState>;

        if $i0 != 5 goto label3;

        r0.<android.media.AudioTrack: int mPlayState> = 4;

     label2:
        goto label4;

     label3:
        r0.<android.media.AudioTrack: int mPlayState> = 3;

        r0.<android.media.AudioTrack: boolean mOffloadEosPending> = 0;

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r3 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void testDisableNativeRoutingCallbacksLocked()
    {
        android.media.AudioTrack r0;
        android.util.ArrayMap $r1;
        int $i0;

        r0 := @this: android.media.AudioTrack;

        $r1 = r0.<android.media.AudioTrack: android.util.ArrayMap mRoutingChangeListeners>;

        $i0 = virtualinvoke $r1.<android.util.ArrayMap: int size()>();

        if $i0 != 0 goto label1;

        specialinvoke r0.<android.media.AudioTrack: void native_disableDeviceCallback()>();

     label1:
        return;
    }

    private void testEnableNativeRoutingCallbacksLocked()
    {
        android.media.AudioTrack r0;
        android.util.ArrayMap $r1;
        int $i0;

        r0 := @this: android.media.AudioTrack;

        $r1 = r0.<android.media.AudioTrack: android.util.ArrayMap mRoutingChangeListeners>;

        $i0 = virtualinvoke $r1.<android.util.ArrayMap: int size()>();

        if $i0 != 0 goto label1;

        specialinvoke r0.<android.media.AudioTrack: void native_enableDeviceCallback()>();

     label1:
        return;
    }

    public void addOnCodecFormatChangedListener(java.util.concurrent.Executor, android.media.AudioTrack$OnCodecFormatChangedListener)
    {
        android.media.AudioTrack r0;
        java.util.concurrent.Executor r1;
        android.media.AudioTrack$OnCodecFormatChangedListener r2;
        android.media._$$Lambda$AudioTrack$_tggs0CIzmnwn1nRK8KlBjbHnSE $r3;
        android.media.Utils$ListenerList $r4;

        r0 := @this: android.media.AudioTrack;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: android.media.AudioTrack$OnCodecFormatChangedListener;

        $r4 = r0.<android.media.AudioTrack: android.media.Utils$ListenerList mCodecFormatChangedListeners>;

        $r3 = new android.media._$$Lambda$AudioTrack$_tggs0CIzmnwn1nRK8KlBjbHnSE;

        specialinvoke $r3.<android.media._$$Lambda$AudioTrack$_tggs0CIzmnwn1nRK8KlBjbHnSE: void <init>(android.media.AudioTrack,android.media.AudioTrack$OnCodecFormatChangedListener)>(r0, r2);

        virtualinvoke $r4.<android.media.Utils$ListenerList: void add(java.lang.Object,java.util.concurrent.Executor,android.media.Utils$ListenerList$Listener)>(r2, r1, $r3);

        return;
    }

    public void addOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener, android.os.Handler)
    {
        android.media.AudioTrack r0;
        android.util.ArrayMap r1, r2, $r4;
        android.media.NativeRoutingEventHandlerDelegate r3;
        boolean $z0;
        android.os.Handler $r5, r10;
        android.os.Looper $r6;
        java.lang.Throwable $r8;
        android.media.AudioRouting$OnRoutingChangedListener r9;

        r0 := @this: android.media.AudioTrack;

        r9 := @parameter0: android.media.AudioRouting$OnRoutingChangedListener;

        r10 := @parameter1: android.os.Handler;

        r1 = r0.<android.media.AudioTrack: android.util.ArrayMap mRoutingChangeListeners>;

        entermonitor r1;

        if r9 == null goto label5;

     label1:
        $r4 = r0.<android.media.AudioTrack: android.util.ArrayMap mRoutingChangeListeners>;

        $z0 = virtualinvoke $r4.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r9);

        if $z0 != 0 goto label5;

        specialinvoke r0.<android.media.AudioTrack: void testEnableNativeRoutingCallbacksLocked()>();

        r2 = r0.<android.media.AudioTrack: android.util.ArrayMap mRoutingChangeListeners>;

        r3 = new android.media.NativeRoutingEventHandlerDelegate;

     label2:
        if r10 == null goto label3;

        goto label4;

     label3:
        $r5 = new android.os.Handler;

        $r6 = r0.<android.media.AudioTrack: android.os.Looper mInitializationLooper>;

        specialinvoke $r5.<android.os.Handler: void <init>(android.os.Looper)>($r6);

        r10 = $r5;

     label4:
        specialinvoke r3.<android.media.NativeRoutingEventHandlerDelegate: void <init>(android.media.AudioRouting,android.media.AudioRouting$OnRoutingChangedListener,android.os.Handler)>(r0, r9, r10);

        virtualinvoke r2.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, r3);

     label5:
        exitmonitor r1;

     label6:
        return;

     label7:
        $r8 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void addOnRoutingChangedListener(android.media.AudioTrack$OnRoutingChangedListener, android.os.Handler)
    {
        android.media.AudioTrack r0;
        android.media.AudioTrack$OnRoutingChangedListener r1;
        android.os.Handler r2;

        r0 := @this: android.media.AudioTrack;

        r1 := @parameter0: android.media.AudioTrack$OnRoutingChangedListener;

        r2 := @parameter1: android.os.Handler;

        virtualinvoke r0.<android.media.AudioTrack: void addOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener,android.os.Handler)>(r1, r2);

        return;
    }

    public int attachAuxEffect(int)
    {
        android.media.AudioTrack r0;
        int i0, $i1, $i2;

        r0 := @this: android.media.AudioTrack;

        i0 := @parameter0: int;

        $i1 = r0.<android.media.AudioTrack: int mState>;

        if $i1 != 0 goto label1;

        return -3;

     label1:
        $i2 = specialinvoke r0.<android.media.AudioTrack: int native_attachAuxEffect(int)>(i0);

        return $i2;
    }

    public android.media.VolumeShaper createVolumeShaper(android.media.VolumeShaper$Configuration)
    {
        android.media.AudioTrack r0;
        android.media.VolumeShaper$Configuration r1;
        android.media.VolumeShaper $r2;

        r0 := @this: android.media.AudioTrack;

        r1 := @parameter0: android.media.VolumeShaper$Configuration;

        $r2 = new android.media.VolumeShaper;

        specialinvoke $r2.<android.media.VolumeShaper: void <init>(android.media.VolumeShaper$Configuration,android.media.PlayerBase)>(r1, r0);

        return $r2;
    }

    void deferred_connect(long)
    {
        android.media.AudioTrack r0;
        long l0;
        int i1, $i2, $i3;
        java.lang.ref.WeakReference $r1;
        int[] $r2, r8;
        java.lang.StringBuilder $r3;
        java.lang.String $r7;

        r0 := @this: android.media.AudioTrack;

        l0 := @parameter0: long;

        $i2 = r0.<android.media.AudioTrack: int mState>;

        if $i2 == 1 goto label2;

        r8 = newarray (int)[1];

        r8[0] = 0;

        $r1 = new java.lang.ref.WeakReference;

        specialinvoke $r1.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r0);

        $r2 = newarray (int)[1];

        $r2[0] = 0;

        i1 = specialinvoke r0.<android.media.AudioTrack: int native_setup(java.lang.Object,java.lang.Object,int[],int,int,int,int,int,int[],long,boolean,int,java.lang.Object)>($r1, null, $r2, 0, 0, 0, 0, 0, r8, l0, 0, 0, null);

        if i1 == 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error code ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" when initializing AudioTrack.");

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.media.AudioTrack: void loge(java.lang.String)>($r7);

        return;

     label1:
        $i3 = r8[0];

        r0.<android.media.AudioTrack: int mSessionId> = $i3;

        r0.<android.media.AudioTrack: int mState> = 1;

     label2:
        return;
    }

    protected void finalize()
    {
        android.media.AudioTrack r0;

        r0 := @this: android.media.AudioTrack;

        virtualinvoke r0.<android.media.AudioTrack: void baseRelease()>();

        specialinvoke r0.<android.media.AudioTrack: void native_finalize()>();

        return;
    }

    public void flush()
    {
        android.media.AudioTrack r0;
        int $i0;

        r0 := @this: android.media.AudioTrack;

        $i0 = r0.<android.media.AudioTrack: int mState>;

        if $i0 != 1 goto label1;

        specialinvoke r0.<android.media.AudioTrack: void native_flush()>();

        r0.<android.media.AudioTrack: java.nio.ByteBuffer mAvSyncHeader> = null;

        r0.<android.media.AudioTrack: int mAvSyncBytesRemaining> = 0;

     label1:
        return;
    }

    public android.media.AudioAttributes getAudioAttributes()
    {
        android.media.AudioTrack r0;
        android.media.AudioAttributes r1;
        int $i0;
        java.lang.IllegalStateException $r2;

        r0 := @this: android.media.AudioTrack;

        $i0 = r0.<android.media.AudioTrack: int mState>;

        if $i0 == 0 goto label1;

        r1 = r0.<android.media.AudioTrack: android.media.AudioAttributes mConfiguredAudioAttributes>;

        if r1 == null goto label1;

        return r1;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("track not initialized");

        throw $r2;
    }

    public float getAudioDescriptionMixLeveldB()
    {
        android.media.AudioTrack r0;
        boolean z0;
        int $i0;
        float $f0, $f1;
        java.lang.Exception $r1;
        float[] r2;

        r0 := @this: android.media.AudioTrack;

        r2 = newarray (float)[1];

        r2[0] = #-InfinityF;

     label1:
        $i0 = specialinvoke r0.<android.media.AudioTrack: int native_get_audio_description_mix_level_db(float[])>(r2);

        if $i0 != 0 goto label4;

        $f0 = r2[0];

        z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f0);

     label2:
        if z0 == 0 goto label3;

        goto label4;

     label3:
        $f1 = r2[0];

        return $f1;

     label4:
        return #-InfinityF;

     label5:
        $r1 := @caughtexception;

        return #-InfinityF;

        catch java.lang.Exception from label1 to label2 with label5;
    }

    public int getAudioFormat()
    {
        android.media.AudioTrack r0;
        int $i0;

        r0 := @this: android.media.AudioTrack;

        $i0 = r0.<android.media.AudioTrack: int mAudioFormat>;

        return $i0;
    }

    public int getAudioSessionId()
    {
        android.media.AudioTrack r0;
        int $i0;

        r0 := @this: android.media.AudioTrack;

        $i0 = r0.<android.media.AudioTrack: int mSessionId>;

        return $i0;
    }

    public int getBufferCapacityInFrames()
    {
        android.media.AudioTrack r0;
        int $i0;

        r0 := @this: android.media.AudioTrack;

        $i0 = specialinvoke r0.<android.media.AudioTrack: int native_get_buffer_capacity_frames()>();

        return $i0;
    }

    public int getBufferSizeInFrames()
    {
        android.media.AudioTrack r0;
        int $i0;

        r0 := @this: android.media.AudioTrack;

        $i0 = specialinvoke r0.<android.media.AudioTrack: int native_get_buffer_size_frames()>();

        return $i0;
    }

    public int getChannelConfiguration()
    {
        android.media.AudioTrack r0;
        int $i0;

        r0 := @this: android.media.AudioTrack;

        $i0 = r0.<android.media.AudioTrack: int mChannelConfiguration>;

        return $i0;
    }

    public int getChannelCount()
    {
        android.media.AudioTrack r0;
        int $i0;

        r0 := @this: android.media.AudioTrack;

        $i0 = r0.<android.media.AudioTrack: int mChannelCount>;

        return $i0;
    }

    public int getDualMonoMode()
    {
        android.media.AudioTrack r0;
        boolean z0;
        int $i0, $i1, $i2;
        java.lang.Exception $r1;
        int[] r2;

        r0 := @this: android.media.AudioTrack;

        r2 = newarray (int)[1];

        r2[0] = 0;

     label1:
        $i0 = specialinvoke r0.<android.media.AudioTrack: int native_get_dual_mono_mode(int[])>(r2);

        if $i0 != 0 goto label4;

        $i1 = r2[0];

        z0 = staticinvoke <android.media.AudioTrack: boolean isValidDualMonoMode(int)>($i1);

     label2:
        if z0 != 0 goto label3;

        goto label4;

     label3:
        $i2 = r2[0];

        return $i2;

     label4:
        return 0;

     label5:
        $r1 := @caughtexception;

        return 0;

        catch java.lang.Exception from label1 to label2 with label5;
    }

    public android.media.AudioFormat getFormat()
    {
        android.media.AudioTrack r0;
        android.media.AudioFormat$Builder r1, $r2, $r3;
        int $i0, $i1, i2, i3;
        android.media.AudioFormat $r4;

        r0 := @this: android.media.AudioTrack;

        $r2 = new android.media.AudioFormat$Builder;

        specialinvoke $r2.<android.media.AudioFormat$Builder: void <init>()>();

        $i0 = r0.<android.media.AudioTrack: int mSampleRate>;

        $r3 = virtualinvoke $r2.<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setSampleRate(int)>($i0);

        $i1 = r0.<android.media.AudioTrack: int mAudioFormat>;

        r1 = virtualinvoke $r3.<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setEncoding(int)>($i1);

        i2 = r0.<android.media.AudioTrack: int mChannelConfiguration>;

        if i2 == 0 goto label1;

        virtualinvoke r1.<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setChannelMask(int)>(i2);

     label1:
        i3 = r0.<android.media.AudioTrack: int mChannelIndexMask>;

        if i3 == 0 goto label2;

        virtualinvoke r1.<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setChannelIndexMask(int)>(i3);

     label2:
        $r4 = virtualinvoke r1.<android.media.AudioFormat$Builder: android.media.AudioFormat build()>();

        return $r4;
    }

    public int getLatency()
    {
        android.media.AudioTrack r0;
        int $i0;

        r0 := @this: android.media.AudioTrack;

        $i0 = specialinvoke r0.<android.media.AudioTrack: int native_get_latency()>();

        return $i0;
    }

    public android.os.PersistableBundle getMetrics()
    {
        android.media.AudioTrack r0;
        android.os.PersistableBundle $r1;

        r0 := @this: android.media.AudioTrack;

        $r1 = specialinvoke r0.<android.media.AudioTrack: android.os.PersistableBundle native_getMetrics()>();

        return $r1;
    }

    protected int getNativeFrameCount()
    {
        android.media.AudioTrack r0;
        int $i0;

        r0 := @this: android.media.AudioTrack;

        $i0 = specialinvoke r0.<android.media.AudioTrack: int native_get_buffer_capacity_frames()>();

        return $i0;
    }

    public int getNotificationMarkerPosition()
    {
        android.media.AudioTrack r0;
        int $i0;

        r0 := @this: android.media.AudioTrack;

        $i0 = specialinvoke r0.<android.media.AudioTrack: int native_get_marker_pos()>();

        return $i0;
    }

    public int getOffloadDelay()
    {
        android.media.AudioTrack r0;
        boolean $z0;
        java.lang.IllegalStateException $r1, $r2;
        int $i0, $i1;

        r0 := @this: android.media.AudioTrack;

        $z0 = r0.<android.media.AudioTrack: boolean mOffloaded>;

        if $z0 == 0 goto label2;

        $i0 = r0.<android.media.AudioTrack: int mState>;

        if $i0 == 0 goto label1;

        $i1 = r0.<android.media.AudioTrack: int mOffloadDelayFrames>;

        return $i1;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Illegal query of delay on uninitialized track");

        throw $r2;

     label2:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Illegal query of delay on non-offloaded track");

        throw $r1;
    }

    public int getOffloadPadding()
    {
        android.media.AudioTrack r0;
        boolean $z0;
        java.lang.IllegalStateException $r1, $r2;
        int $i0, $i1;

        r0 := @this: android.media.AudioTrack;

        $z0 = r0.<android.media.AudioTrack: boolean mOffloaded>;

        if $z0 == 0 goto label2;

        $i0 = r0.<android.media.AudioTrack: int mState>;

        if $i0 == 0 goto label1;

        $i1 = r0.<android.media.AudioTrack: int mOffloadPaddingFrames>;

        return $i1;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Illegal query of padding on uninitialized track");

        throw $r2;

     label2:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Illegal query of padding on non-offloaded track");

        throw $r1;
    }

    public int getPerformanceMode()
    {
        android.media.AudioTrack r0;
        int i0, $i1, $i2;

        r0 := @this: android.media.AudioTrack;

        i0 = specialinvoke r0.<android.media.AudioTrack: int native_get_flags()>();

        $i1 = i0 & 4;

        if $i1 == 0 goto label1;

        return 1;

     label1:
        $i2 = i0 & 8;

        if $i2 == 0 goto label2;

        return 2;

     label2:
        return 0;
    }

    public int getPlayState()
    {
        android.media.AudioTrack r0;
        java.lang.Object r1;
        java.lang.Throwable $r3;
        int i0, i1;

        r0 := @this: android.media.AudioTrack;

        r1 = r0.<android.media.AudioTrack: java.lang.Object mPlayStateLock>;

        entermonitor r1;

     label01:
        i0 = r0.<android.media.AudioTrack: int mPlayState>;

     label02:
        if i0 == 4 goto label07;

        if i0 == 5 goto label05;

     label03:
        i1 = r0.<android.media.AudioTrack: int mPlayState>;

        exitmonitor r1;

     label04:
        return i1;

     label05:
        exitmonitor r1;

     label06:
        return 2;

     label07:
        exitmonitor r1;

     label08:
        return 3;

     label09:
        $r3 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public int getPlaybackHeadPosition()
    {
        android.media.AudioTrack r0;
        int $i0;

        r0 := @this: android.media.AudioTrack;

        $i0 = specialinvoke r0.<android.media.AudioTrack: int native_get_position()>();

        return $i0;
    }

    public android.media.PlaybackParams getPlaybackParams()
    {
        android.media.AudioTrack r0;
        android.media.PlaybackParams $r1;

        r0 := @this: android.media.AudioTrack;

        $r1 = specialinvoke r0.<android.media.AudioTrack: android.media.PlaybackParams native_get_playback_params()>();

        return $r1;
    }

    public int getPlaybackRate()
    {
        android.media.AudioTrack r0;
        int $i0;

        r0 := @this: android.media.AudioTrack;

        $i0 = specialinvoke r0.<android.media.AudioTrack: int native_get_playback_rate()>();

        return $i0;
    }

    public int getPositionNotificationPeriod()
    {
        android.media.AudioTrack r0;
        int $i0;

        r0 := @this: android.media.AudioTrack;

        $i0 = specialinvoke r0.<android.media.AudioTrack: int native_get_pos_update_period()>();

        return $i0;
    }

    public android.media.AudioDeviceInfo getPreferredDevice()
    {
        android.media.AudioTrack r0;
        java.lang.Throwable $r1;
        android.media.AudioDeviceInfo r2;

        r0 := @this: android.media.AudioTrack;

        entermonitor r0;

     label1:
        r2 = r0.<android.media.AudioTrack: android.media.AudioDeviceInfo mPreferredDevice>;

        exitmonitor r0;

     label2:
        return r2;

     label3:
        $r1 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.media.AudioDeviceInfo getRoutedDevice()
    {
        android.media.AudioTrack r0;
        int i0, $i1, $i2, i3;
        android.media.AudioDeviceInfo[] r1;
        android.media.AudioDeviceInfo $r2, $r3;

        r0 := @this: android.media.AudioTrack;

        i0 = specialinvoke r0.<android.media.AudioTrack: int native_getRoutedDeviceId()>();

        if i0 != 0 goto label1;

        return null;

     label1:
        r1 = staticinvoke <android.media.AudioManager: android.media.AudioDeviceInfo[] getDevicesStatic(int)>(2);

        i3 = 0;

     label2:
        $i1 = lengthof r1;

        if i3 >= $i1 goto label4;

        $r2 = r1[i3];

        $i2 = virtualinvoke $r2.<android.media.AudioDeviceInfo: int getId()>();

        if $i2 != i0 goto label3;

        $r3 = r1[i3];

        return $r3;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return null;
    }

    public int getSampleRate()
    {
        android.media.AudioTrack r0;
        int $i0;

        r0 := @this: android.media.AudioTrack;

        $i0 = r0.<android.media.AudioTrack: int mSampleRate>;

        return $i0;
    }

    public int getState()
    {
        android.media.AudioTrack r0;
        int $i0;

        r0 := @this: android.media.AudioTrack;

        $i0 = r0.<android.media.AudioTrack: int mState>;

        return $i0;
    }

    public int getStreamType()
    {
        android.media.AudioTrack r0;
        int $i0;

        r0 := @this: android.media.AudioTrack;

        $i0 = r0.<android.media.AudioTrack: int mStreamType>;

        return $i0;
    }

    public boolean getTimestamp(android.media.AudioTimestamp)
    {
        android.media.AudioTrack r0;
        android.media.AudioTimestamp r1;
        long[] r2;
        java.lang.IllegalArgumentException $r3;
        int $i0;
        long $l1, $l2;

        r0 := @this: android.media.AudioTrack;

        r1 := @parameter0: android.media.AudioTimestamp;

        if r1 == null goto label2;

        r2 = newarray (long)[2];

        $i0 = specialinvoke r0.<android.media.AudioTrack: int native_get_timestamp(long[])>(r2);

        if $i0 == 0 goto label1;

        return 0;

     label1:
        $l1 = r2[0];

        r1.<android.media.AudioTimestamp: long framePosition> = $l1;

        $l2 = r2[1];

        r1.<android.media.AudioTimestamp: long nanoTime> = $l2;

        return 1;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;
    }

    public int getTimestampWithStatus(android.media.AudioTimestamp)
    {
        android.media.AudioTrack r0;
        android.media.AudioTimestamp r1;
        long[] r2;
        int i0;
        java.lang.IllegalArgumentException $r3;
        long $l1, $l2;

        r0 := @this: android.media.AudioTrack;

        r1 := @parameter0: android.media.AudioTimestamp;

        if r1 == null goto label1;

        r2 = newarray (long)[2];

        i0 = specialinvoke r0.<android.media.AudioTrack: int native_get_timestamp(long[])>(r2);

        $l1 = r2[0];

        r1.<android.media.AudioTimestamp: long framePosition> = $l1;

        $l2 = r2[1];

        r1.<android.media.AudioTimestamp: long nanoTime> = $l2;

        return i0;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;
    }

    public int getUnderrunCount()
    {
        android.media.AudioTrack r0;
        int $i0;

        r0 := @this: android.media.AudioTrack;

        $i0 = specialinvoke r0.<android.media.AudioTrack: int native_get_underrun_count()>();

        return $i0;
    }

    void handleStreamEventFromNative(int, int)
    {
        android.media.AudioTrack r0;
        int i0, i1;
        android.media.AudioTrack$StreamEventHandler $r1, $r2, $r3, $r5, $r6, $r8, $r9, $r10;
        android.os.Message $r4, $r7, $r11;

        r0 := @this: android.media.AudioTrack;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<android.media.AudioTrack: android.media.AudioTrack$StreamEventHandler mStreamEventHandler>;

        if $r1 != null goto label1;

        return;

     label1:
        if i0 == 6 goto label4;

        if i0 == 7 goto label3;

        if i0 == 9 goto label2;

        goto label5;

     label2:
        $r8 = r0.<android.media.AudioTrack: android.media.AudioTrack$StreamEventHandler mStreamEventHandler>;

        virtualinvoke $r8.<android.media.AudioTrack$StreamEventHandler: void removeMessages(int)>(9);

        $r10 = r0.<android.media.AudioTrack: android.media.AudioTrack$StreamEventHandler mStreamEventHandler>;

        $r9 = r0.<android.media.AudioTrack: android.media.AudioTrack$StreamEventHandler mStreamEventHandler>;

        $r11 = virtualinvoke $r9.<android.media.AudioTrack$StreamEventHandler: android.os.Message obtainMessage(int,int,int)>(9, i1, 0);

        virtualinvoke $r10.<android.media.AudioTrack$StreamEventHandler: boolean sendMessage(android.os.Message)>($r11);

        goto label5;

     label3:
        $r6 = r0.<android.media.AudioTrack: android.media.AudioTrack$StreamEventHandler mStreamEventHandler>;

        $r5 = r0.<android.media.AudioTrack: android.media.AudioTrack$StreamEventHandler mStreamEventHandler>;

        $r7 = virtualinvoke $r5.<android.media.AudioTrack$StreamEventHandler: android.os.Message obtainMessage(int)>(7);

        virtualinvoke $r6.<android.media.AudioTrack$StreamEventHandler: boolean sendMessage(android.os.Message)>($r7);

        goto label5;

     label4:
        $r3 = r0.<android.media.AudioTrack: android.media.AudioTrack$StreamEventHandler mStreamEventHandler>;

        $r2 = r0.<android.media.AudioTrack: android.media.AudioTrack$StreamEventHandler mStreamEventHandler>;

        $r4 = virtualinvoke $r2.<android.media.AudioTrack$StreamEventHandler: android.os.Message obtainMessage(int)>(6);

        virtualinvoke $r3.<android.media.AudioTrack$StreamEventHandler: boolean sendMessage(android.os.Message)>($r4);

     label5:
        return;
    }

    public boolean isOffloadedPlayback()
    {
        android.media.AudioTrack r0;
        boolean $z0;

        r0 := @this: android.media.AudioTrack;

        $z0 = r0.<android.media.AudioTrack: boolean mOffloaded>;

        return $z0;
    }

    public void lambda$addOnCodecFormatChangedListener$0$AudioTrack(android.media.AudioTrack$OnCodecFormatChangedListener, int, android.media.AudioMetadataReadMap)
    {
        android.media.AudioTrack r0;
        android.media.AudioTrack$OnCodecFormatChangedListener r1;
        int i0;
        android.media.AudioMetadataReadMap r2;

        r0 := @this: android.media.AudioTrack;

        r1 := @parameter0: android.media.AudioTrack$OnCodecFormatChangedListener;

        i0 := @parameter1: int;

        r2 := @parameter2: android.media.AudioMetadataReadMap;

        interfaceinvoke r1.<android.media.AudioTrack$OnCodecFormatChangedListener: void onCodecFormatChanged(android.media.AudioTrack,android.media.AudioMetadataReadMap)>(r0, r2);

        return;
    }

    public final native void native_release();

    public void pause() throws java.lang.IllegalStateException
    {
        android.media.AudioTrack r0;
        java.lang.Object r1;
        int $i0, $i1;
        java.lang.IllegalStateException $r3;
        java.lang.Throwable $r4;

        r0 := @this: android.media.AudioTrack;

        $i0 = r0.<android.media.AudioTrack: int mState>;

        if $i0 != 1 goto label9;

        r1 = r0.<android.media.AudioTrack: java.lang.Object mPlayStateLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.media.AudioTrack: void native_pause()>();

        virtualinvoke r0.<android.media.AudioTrack: void basePause()>();

        $i1 = r0.<android.media.AudioTrack: int mPlayState>;

        if $i1 != 4 goto label3;

        r0.<android.media.AudioTrack: int mPlayState> = 5;

     label2:
        goto label4;

     label3:
        r0.<android.media.AudioTrack: int mPlayState> = 2;

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

     label9:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("pause() called on uninitialized AudioTrack.");

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void play() throws java.lang.IllegalStateException
    {
        android.media.AudioTrack r0;
        int i0, $i1;
        java.lang.IllegalStateException $r1;
        android.media.AudioTrack$1 $r2;

        r0 := @this: android.media.AudioTrack;

        $i1 = r0.<android.media.AudioTrack: int mState>;

        if $i1 != 1 goto label3;

        i0 = virtualinvoke r0.<android.media.AudioTrack: int getStartDelayMs()>();

        if i0 != 0 goto label1;

        specialinvoke r0.<android.media.AudioTrack: void startImpl()>();

        goto label2;

     label1:
        $r2 = new android.media.AudioTrack$1;

        specialinvoke $r2.<android.media.AudioTrack$1: void <init>(android.media.AudioTrack,int)>(r0, i0);

        virtualinvoke $r2.<android.media.AudioTrack$1: void start()>();

     label2:
        return;

     label3:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("play() called on uninitialized AudioTrack.");

        throw $r1;
    }

    int playerApplyVolumeShaper(android.media.VolumeShaper$Configuration, android.media.VolumeShaper$Operation)
    {
        android.media.AudioTrack r0;
        android.media.VolumeShaper$Configuration r1;
        android.media.VolumeShaper$Operation r2;
        int $i0;

        r0 := @this: android.media.AudioTrack;

        r1 := @parameter0: android.media.VolumeShaper$Configuration;

        r2 := @parameter1: android.media.VolumeShaper$Operation;

        $i0 = specialinvoke r0.<android.media.AudioTrack: int native_applyVolumeShaper(android.media.VolumeShaper$Configuration,android.media.VolumeShaper$Operation)>(r1, r2);

        return $i0;
    }

    android.media.VolumeShaper$State playerGetVolumeShaperState(int)
    {
        android.media.AudioTrack r0;
        int i0;
        android.media.VolumeShaper$State $r1;

        r0 := @this: android.media.AudioTrack;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<android.media.AudioTrack: android.media.VolumeShaper$State native_getVolumeShaperState(int)>(i0);

        return $r1;
    }

    void playerPause()
    {
        android.media.AudioTrack r0;

        r0 := @this: android.media.AudioTrack;

        virtualinvoke r0.<android.media.AudioTrack: void pause()>();

        return;
    }

    int playerSetAuxEffectSendLevel(boolean, float)
    {
        android.media.AudioTrack r0;
        boolean z0;
        float $f0, f1;
        int $i0;
        byte b1;

        r0 := @this: android.media.AudioTrack;

        z0 := @parameter0: boolean;

        f1 := @parameter1: float;

        if z0 == 0 goto label1;

        f1 = 0.0F;

        goto label1;

     label1:
        $f0 = staticinvoke <android.media.AudioTrack: float clampGainOrLevel(float)>(f1);

        $i0 = specialinvoke r0.<android.media.AudioTrack: int native_setAuxEffectSendLevel(float)>($f0);

        if $i0 != 0 goto label2;

        b1 = 0;

        goto label3;

     label2:
        b1 = -1;

     label3:
        return b1;
    }

    void playerSetVolume(boolean, float, float)
    {
        android.media.AudioTrack r0;
        boolean z0;
        float $f1, f2, f3, f4;

        r0 := @this: android.media.AudioTrack;

        z0 := @parameter0: boolean;

        f2 := @parameter1: float;

        f3 := @parameter2: float;

        if z0 == 0 goto label1;

        f2 = 0.0F;

        goto label1;

     label1:
        f4 = staticinvoke <android.media.AudioTrack: float clampGainOrLevel(float)>(f2);

        if z0 == 0 goto label2;

        f3 = 0.0F;

        goto label2;

     label2:
        $f1 = staticinvoke <android.media.AudioTrack: float clampGainOrLevel(float)>(f3);

        specialinvoke r0.<android.media.AudioTrack: void native_setVolume(float,float)>(f4, $f1);

        return;
    }

    void playerStart()
    {
        android.media.AudioTrack r0;

        r0 := @this: android.media.AudioTrack;

        virtualinvoke r0.<android.media.AudioTrack: void play()>();

        return;
    }

    void playerStop()
    {
        android.media.AudioTrack r0;

        r0 := @this: android.media.AudioTrack;

        virtualinvoke r0.<android.media.AudioTrack: void stop()>();

        return;
    }

    public void registerStreamEventCallback(java.util.concurrent.Executor, android.media.AudioTrack$StreamEventCallback)
    {
        android.media.AudioTrack r0;
        android.media.AudioTrack$StreamEventCallback r1, $r10;
        java.lang.Object r2, $r8;
        android.media.AudioTrack$StreamEventCbInfo r3, $r9;
        java.lang.IllegalArgumentException $r4, $r6, r14;
        boolean $z0, $z1;
        java.lang.IllegalStateException $r5;
        java.util.LinkedList $r7, r15;
        java.lang.Throwable $r11;
        java.util.concurrent.Executor r12;
        java.util.Iterator r13;

        r0 := @this: android.media.AudioTrack;

        r12 := @parameter0: java.util.concurrent.Executor;

        r1 := @parameter1: android.media.AudioTrack$StreamEventCallback;

        if r1 == null goto label12;

        $z0 = r0.<android.media.AudioTrack: boolean mOffloaded>;

        if $z0 == 0 goto label11;

        if r12 == null goto label10;

        r2 = r0.<android.media.AudioTrack: java.lang.Object mStreamEventCbLock>;

        entermonitor r2;

     label01:
        $r7 = r0.<android.media.AudioTrack: java.util.LinkedList mStreamEventCbInfoList>;

        r13 = virtualinvoke $r7.<java.util.LinkedList: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label05;

        $r8 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (android.media.AudioTrack$StreamEventCbInfo) $r8;

        $r10 = $r9.<android.media.AudioTrack$StreamEventCbInfo: android.media.AudioTrack$StreamEventCallback mStreamEventCb>;

        if $r10 == r1 goto label04;

     label03:
        goto label02;

     label04:
        r14 = new java.lang.IllegalArgumentException;

        specialinvoke r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("StreamEventCallback already registered");

        throw r14;

     label05:
        specialinvoke r0.<android.media.AudioTrack: void beginStreamEventHandling()>();

        r15 = r0.<android.media.AudioTrack: java.util.LinkedList mStreamEventCbInfoList>;

        r3 = new android.media.AudioTrack$StreamEventCbInfo;

        specialinvoke r3.<android.media.AudioTrack$StreamEventCbInfo: void <init>(java.util.concurrent.Executor,android.media.AudioTrack$StreamEventCallback)>(r12, r1);

        virtualinvoke r15.<java.util.LinkedList: boolean add(java.lang.Object)>(r3);

        exitmonitor r2;

     label06:
        return;

     label07:
        $r11 := @caughtexception;

     label08:
        exitmonitor r2;

     label09:
        throw $r11;

     label10:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null Executor for the StreamEventCallback");

        throw $r6;

     label11:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot register StreamEventCallback on non-offloaded AudioTrack");

        throw $r5;

     label12:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null StreamEventCallback");

        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    public void release()
    {
        android.media.AudioTrack r0;
        java.lang.Object $r1, r5, r7;
        java.lang.Throwable $r2, $r3, $r4;

        r0 := @this: android.media.AudioTrack;

        r5 = r0.<android.media.AudioTrack: java.lang.Object mStreamEventCbLock>;

        entermonitor r5;

     label01:
        specialinvoke r0.<android.media.AudioTrack: void endStreamEventHandling()>();

        exitmonitor r5;

     label02:
        virtualinvoke r0.<android.media.AudioTrack: void stop()>();

     label03:
        goto label05;

     label04:
        $r4 := @caughtexception;

     label05:
        virtualinvoke r0.<android.media.AudioTrack: void baseRelease()>();

        virtualinvoke r0.<android.media.AudioTrack: void native_release()>();

        r7 = r0.<android.media.AudioTrack: java.lang.Object mPlayStateLock>;

        entermonitor r7;

     label06:
        r0.<android.media.AudioTrack: int mState> = 0;

        r0.<android.media.AudioTrack: int mPlayState> = 1;

        $r1 = r0.<android.media.AudioTrack: java.lang.Object mPlayStateLock>;

        virtualinvoke $r1.<java.lang.Object: void notify()>();

        exitmonitor r7;

     label07:
        return;

     label08:
        $r2 := @caughtexception;

     label09:
        exitmonitor r7;

     label10:
        throw $r2;

     label11:
        $r3 := @caughtexception;

     label12:
        exitmonitor r5;

     label13:
        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.IllegalStateException from label02 to label03 with label04;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public int reloadStaticData()
    {
        android.media.AudioTrack r0;
        int $i0, $i1, $i2;

        r0 := @this: android.media.AudioTrack;

        $i0 = r0.<android.media.AudioTrack: int mDataLoadMode>;

        if $i0 == 1 goto label2;

        $i1 = r0.<android.media.AudioTrack: int mState>;

        if $i1 == 1 goto label1;

        goto label2;

     label1:
        $i2 = specialinvoke r0.<android.media.AudioTrack: int native_reload_static()>();

        return $i2;

     label2:
        return -3;
    }

    public void removeOnCodecFormatChangedListener(android.media.AudioTrack$OnCodecFormatChangedListener)
    {
        android.media.AudioTrack r0;
        android.media.AudioTrack$OnCodecFormatChangedListener r1;
        android.media.Utils$ListenerList $r2;

        r0 := @this: android.media.AudioTrack;

        r1 := @parameter0: android.media.AudioTrack$OnCodecFormatChangedListener;

        $r2 = r0.<android.media.AudioTrack: android.media.Utils$ListenerList mCodecFormatChangedListeners>;

        virtualinvoke $r2.<android.media.Utils$ListenerList: void remove(java.lang.Object)>(r1);

        return;
    }

    public void removeOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener)
    {
        android.media.AudioTrack r0;
        android.util.ArrayMap r1, $r2, $r3;
        boolean $z0;
        java.lang.Throwable $r5;
        android.media.AudioRouting$OnRoutingChangedListener r6;

        r0 := @this: android.media.AudioTrack;

        r6 := @parameter0: android.media.AudioRouting$OnRoutingChangedListener;

        r1 = r0.<android.media.AudioTrack: android.util.ArrayMap mRoutingChangeListeners>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.media.AudioTrack: android.util.ArrayMap mRoutingChangeListeners>;

        $z0 = virtualinvoke $r2.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r6);

        if $z0 == 0 goto label2;

        $r3 = r0.<android.media.AudioTrack: android.util.ArrayMap mRoutingChangeListeners>;

        virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r6);

     label2:
        specialinvoke r0.<android.media.AudioTrack: void testDisableNativeRoutingCallbacksLocked()>();

        exitmonitor r1;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void removeOnRoutingChangedListener(android.media.AudioTrack$OnRoutingChangedListener)
    {
        android.media.AudioTrack r0;
        android.media.AudioTrack$OnRoutingChangedListener r1;

        r0 := @this: android.media.AudioTrack;

        r1 := @parameter0: android.media.AudioTrack$OnRoutingChangedListener;

        virtualinvoke r0.<android.media.AudioTrack: void removeOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener)>(r1);

        return;
    }

    public boolean setAudioDescriptionMixLeveldB(float)
    {
        android.media.AudioTrack r0;
        float f0;
        boolean $z0, z1;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r6;
        int $i0;

        r0 := @this: android.media.AudioTrack;

        f0 := @parameter0: float;

        $z0 = staticinvoke <android.media.AudioTrack: boolean isValidAudioDescriptionMixLevel(float)>(f0);

        if $z0 == 0 goto label3;

        $i0 = specialinvoke r0.<android.media.AudioTrack: int native_set_audio_description_mix_level_db(float)>(f0);

        if $i0 != 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("level is out of range");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f0);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    public int setAuxEffectSendLevel(float)
    {
        android.media.AudioTrack r0;
        float f0;
        int $i0, $i1;

        r0 := @this: android.media.AudioTrack;

        f0 := @parameter0: float;

        $i0 = r0.<android.media.AudioTrack: int mState>;

        if $i0 != 0 goto label1;

        return -3;

     label1:
        $i1 = virtualinvoke r0.<android.media.AudioTrack: int baseSetAuxEffectSendLevel(float)>(f0);

        return $i1;
    }

    public int setBufferSizeInFrames(int)
    {
        android.media.AudioTrack r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: android.media.AudioTrack;

        i0 := @parameter0: int;

        $i1 = r0.<android.media.AudioTrack: int mDataLoadMode>;

        if $i1 == 0 goto label3;

        $i2 = r0.<android.media.AudioTrack: int mState>;

        if $i2 != 0 goto label1;

        goto label3;

     label1:
        if i0 >= 0 goto label2;

        return -2;

     label2:
        $i3 = specialinvoke r0.<android.media.AudioTrack: int native_set_buffer_size_frames(int)>(i0);

        return $i3;

     label3:
        return -3;
    }

    public boolean setDualMonoMode(int)
    {
        android.media.AudioTrack r0;
        int i0, $i1;
        boolean $z0, z1;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r6;

        r0 := @this: android.media.AudioTrack;

        i0 := @parameter0: int;

        $z0 = staticinvoke <android.media.AudioTrack: boolean isValidDualMonoMode(int)>(i0);

        if $z0 == 0 goto label3;

        $i1 = specialinvoke r0.<android.media.AudioTrack: int native_set_dual_mono_mode(int)>(i0);

        if $i1 != 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid Dual Mono mode ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    public int setLoopPoints(int, int, int)
    {
        android.media.AudioTrack r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7;

        r0 := @this: android.media.AudioTrack;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $i4 = r0.<android.media.AudioTrack: int mDataLoadMode>;

        if $i4 == 1 goto label5;

        $i5 = r0.<android.media.AudioTrack: int mState>;

        if $i5 == 0 goto label5;

        $i6 = virtualinvoke r0.<android.media.AudioTrack: int getPlayState()>();

        if $i6 != 3 goto label1;

        goto label5;

     label1:
        if i2 != 0 goto label2;

        goto label3;

     label2:
        if i0 < 0 goto label4;

        i3 = r0.<android.media.AudioTrack: int mNativeBufferSizeInFrames>;

        if i0 >= i3 goto label4;

        if i0 >= i1 goto label4;

        if i1 <= i3 goto label3;

        goto label4;

     label3:
        $i7 = specialinvoke r0.<android.media.AudioTrack: int native_set_loop(int,int,int)>(i0, i1, i2);

        return $i7;

     label4:
        return -2;

     label5:
        return -3;
    }

    public int setNotificationMarkerPosition(int)
    {
        android.media.AudioTrack r0;
        int i0, $i1, $i2;

        r0 := @this: android.media.AudioTrack;

        i0 := @parameter0: int;

        $i1 = r0.<android.media.AudioTrack: int mState>;

        if $i1 != 0 goto label1;

        return -3;

     label1:
        $i2 = specialinvoke r0.<android.media.AudioTrack: int native_set_marker_pos(int)>(i0);

        return $i2;
    }

    public void setOffloadDelayPadding(int, int)
    {
        android.media.AudioTrack r0;
        int i0, i1, $i2;
        java.lang.IllegalArgumentException $r1, $r2;
        boolean $z0;
        java.lang.IllegalStateException $r3, $r4;

        r0 := @this: android.media.AudioTrack;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 < 0 goto label4;

        if i0 < 0 goto label3;

        $z0 = r0.<android.media.AudioTrack: boolean mOffloaded>;

        if $z0 == 0 goto label2;

        $i2 = r0.<android.media.AudioTrack: int mState>;

        if $i2 == 0 goto label1;

        r0.<android.media.AudioTrack: int mOffloadDelayFrames> = i0;

        r0.<android.media.AudioTrack: int mOffloadPaddingFrames> = i1;

        specialinvoke r0.<android.media.AudioTrack: void native_set_delay_padding(int,int)>(i0, i1);

        return;

     label1:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Uninitialized track");

        throw $r4;

     label2:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Illegal use of delay/padding on non-offloaded track");

        throw $r3;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal negative delay");

        throw $r2;

     label4:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal negative padding");

        throw $r1;
    }

    public void setOffloadEndOfStream()
    {
        android.media.AudioTrack r0;
        boolean $z0;
        java.lang.IllegalStateException $r1, $r2, $r3, r10;
        int $i0, $i1, $i2;
        java.util.LinkedList $r4;
        java.lang.Throwable $r5, $r6;
        java.lang.Object r7, r8;

        r0 := @this: android.media.AudioTrack;

        $z0 = r0.<android.media.AudioTrack: boolean mOffloaded>;

        if $z0 == 0 goto label14;

        $i0 = r0.<android.media.AudioTrack: int mState>;

        if $i0 == 0 goto label13;

        $i1 = r0.<android.media.AudioTrack: int mPlayState>;

        if $i1 != 3 goto label12;

        r7 = r0.<android.media.AudioTrack: java.lang.Object mStreamEventCbLock>;

        entermonitor r7;

     label01:
        $r4 = r0.<android.media.AudioTrack: java.util.LinkedList mStreamEventCbInfoList>;

        $i2 = virtualinvoke $r4.<java.util.LinkedList: int size()>();

        if $i2 == 0 goto label08;

        exitmonitor r7;

     label02:
        r8 = r0.<android.media.AudioTrack: java.lang.Object mPlayStateLock>;

        entermonitor r8;

     label03:
        specialinvoke r0.<android.media.AudioTrack: void native_stop()>();

        r0.<android.media.AudioTrack: boolean mOffloadEosPending> = 1;

        r0.<android.media.AudioTrack: int mPlayState> = 4;

        exitmonitor r8;

     label04:
        return;

     label05:
        $r5 := @caughtexception;

     label06:
        exitmonitor r8;

     label07:
        throw $r5;

     label08:
        r10 = new java.lang.IllegalStateException;

        specialinvoke r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("EOS not supported without StreamEventCallback");

        throw r10;

     label09:
        $r6 := @caughtexception;

     label10:
        exitmonitor r7;

     label11:
        throw $r6;

     label12:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("EOS not supported if not playing");

        throw $r3;

     label13:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Uninitialized track");

        throw $r2;

     label14:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("EOS not supported on non-offloaded track");

        throw $r1;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public int setPlaybackHeadPosition(int)
    {
        android.media.AudioTrack r0;
        int i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: android.media.AudioTrack;

        i0 := @parameter0: int;

        $i1 = r0.<android.media.AudioTrack: int mDataLoadMode>;

        if $i1 == 1 goto label4;

        $i2 = r0.<android.media.AudioTrack: int mState>;

        if $i2 == 0 goto label4;

        $i3 = virtualinvoke r0.<android.media.AudioTrack: int getPlayState()>();

        if $i3 != 3 goto label1;

        goto label4;

     label1:
        if i0 < 0 goto label3;

        $i4 = r0.<android.media.AudioTrack: int mNativeBufferSizeInFrames>;

        if i0 <= $i4 goto label2;

        goto label3;

     label2:
        $i5 = specialinvoke r0.<android.media.AudioTrack: int native_set_position(int)>(i0);

        return $i5;

     label3:
        return -2;

     label4:
        return -3;
    }

    public void setPlaybackParams(android.media.PlaybackParams)
    {
        android.media.AudioTrack r0;
        android.media.PlaybackParams r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: android.media.AudioTrack;

        r1 := @parameter0: android.media.PlaybackParams;

        if r1 == null goto label1;

        specialinvoke r0.<android.media.AudioTrack: void native_set_playback_params(android.media.PlaybackParams)>(r1);

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("params is null");

        throw $r2;
    }

    public void setPlaybackPositionUpdateListener(android.media.AudioTrack$OnPlaybackPositionUpdateListener)
    {
        android.media.AudioTrack r0;
        android.media.AudioTrack$OnPlaybackPositionUpdateListener r1;

        r0 := @this: android.media.AudioTrack;

        r1 := @parameter0: android.media.AudioTrack$OnPlaybackPositionUpdateListener;

        virtualinvoke r0.<android.media.AudioTrack: void setPlaybackPositionUpdateListener(android.media.AudioTrack$OnPlaybackPositionUpdateListener,android.os.Handler)>(r1, null);

        return;
    }

    public void setPlaybackPositionUpdateListener(android.media.AudioTrack$OnPlaybackPositionUpdateListener, android.os.Handler)
    {
        android.media.AudioTrack r0;
        android.media.AudioTrack$OnPlaybackPositionUpdateListener r1;
        android.os.Handler r2;
        android.media.AudioTrack$NativePositionEventHandlerDelegate $r3;

        r0 := @this: android.media.AudioTrack;

        r1 := @parameter0: android.media.AudioTrack$OnPlaybackPositionUpdateListener;

        r2 := @parameter1: android.os.Handler;

        if r1 == null goto label1;

        $r3 = new android.media.AudioTrack$NativePositionEventHandlerDelegate;

        specialinvoke $r3.<android.media.AudioTrack$NativePositionEventHandlerDelegate: void <init>(android.media.AudioTrack,android.media.AudioTrack,android.media.AudioTrack$OnPlaybackPositionUpdateListener,android.os.Handler)>(r0, r0, r1, r2);

        r0.<android.media.AudioTrack: android.media.AudioTrack$NativePositionEventHandlerDelegate mEventHandlerDelegate> = $r3;

        goto label2;

     label1:
        r0.<android.media.AudioTrack: android.media.AudioTrack$NativePositionEventHandlerDelegate mEventHandlerDelegate> = null;

     label2:
        return;
    }

    public int setPlaybackRate(int)
    {
        android.media.AudioTrack r0;
        int i0, $i1, $i2;

        r0 := @this: android.media.AudioTrack;

        i0 := @parameter0: int;

        $i1 = r0.<android.media.AudioTrack: int mState>;

        if $i1 == 1 goto label1;

        return -3;

     label1:
        if i0 > 0 goto label2;

        return -2;

     label2:
        $i2 = specialinvoke r0.<android.media.AudioTrack: int native_set_playback_rate(int)>(i0);

        return $i2;
    }

    public int setPositionNotificationPeriod(int)
    {
        android.media.AudioTrack r0;
        int i0, $i1, $i2;

        r0 := @this: android.media.AudioTrack;

        i0 := @parameter0: int;

        $i1 = r0.<android.media.AudioTrack: int mState>;

        if $i1 != 0 goto label1;

        return -3;

     label1:
        $i2 = specialinvoke r0.<android.media.AudioTrack: int native_set_pos_update_period(int)>(i0);

        return $i2;
    }

    public boolean setPreferredDevice(android.media.AudioDeviceInfo)
    {
        android.media.AudioTrack r0;
        boolean z0, $z1;
        java.lang.Throwable $r1;
        android.media.AudioDeviceInfo r2;
        int i0;

        r0 := @this: android.media.AudioTrack;

        r2 := @parameter0: android.media.AudioDeviceInfo;

        i0 = 0;

        if r2 == null goto label1;

        $z1 = virtualinvoke r2.<android.media.AudioDeviceInfo: boolean isSink()>();

        if $z1 != 0 goto label1;

        return 0;

     label1:
        if r2 == null goto label2;

        i0 = virtualinvoke r2.<android.media.AudioDeviceInfo: int getId()>();

     label2:
        z0 = specialinvoke r0.<android.media.AudioTrack: boolean native_setOutputDevice(int)>(i0);

        if z0 != 1 goto label8;

        entermonitor r0;

     label3:
        r0.<android.media.AudioTrack: android.media.AudioDeviceInfo mPreferredDevice> = r2;

        exitmonitor r0;

     label4:
        goto label8;

     label5:
        $r1 := @caughtexception;

     label6:
        exitmonitor r0;

     label7:
        throw $r1;

     label8:
        return z0;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public int setPresentation(android.media.AudioPresentation)
    {
        android.media.AudioTrack r0;
        android.media.AudioPresentation r1;
        java.lang.IllegalArgumentException $r2;
        int $i0, $i1, $i2;

        r0 := @this: android.media.AudioTrack;

        r1 := @parameter0: android.media.AudioPresentation;

        if r1 == null goto label1;

        $i0 = virtualinvoke r1.<android.media.AudioPresentation: int getPresentationId()>();

        $i1 = virtualinvoke r1.<android.media.AudioPresentation: int getProgramId()>();

        $i2 = specialinvoke r0.<android.media.AudioTrack: int native_setPresentation(int,int)>($i0, $i1);

        return $i2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("audio presentation is null");

        throw $r2;
    }

    protected void setState(int)
    {
        android.media.AudioTrack r0;
        int i0;

        r0 := @this: android.media.AudioTrack;

        i0 := @parameter0: int;

        r0.<android.media.AudioTrack: int mState> = i0;

        return;
    }

    public int setStereoVolume(float, float)
    {
        android.media.AudioTrack r0;
        float f0, f1;
        int $i0;

        r0 := @this: android.media.AudioTrack;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $i0 = r0.<android.media.AudioTrack: int mState>;

        if $i0 != 0 goto label1;

        return -3;

     label1:
        virtualinvoke r0.<android.media.AudioTrack: void baseSetVolume(float,float)>(f0, f1);

        return 0;
    }

    public int setVolume(float)
    {
        android.media.AudioTrack r0;
        float f0;
        int $i0;

        r0 := @this: android.media.AudioTrack;

        f0 := @parameter0: float;

        $i0 = virtualinvoke r0.<android.media.AudioTrack: int setStereoVolume(float,float)>(f0, f0);

        return $i0;
    }

    public void stop() throws java.lang.IllegalStateException
    {
        android.media.AudioTrack r0;
        java.lang.Object r1, $r4;
        int $i0, $i1;
        java.lang.IllegalStateException $r3;
        boolean $z0;
        java.lang.Throwable $r5;

        r0 := @this: android.media.AudioTrack;

        $i0 = r0.<android.media.AudioTrack: int mState>;

        if $i0 != 1 goto label9;

        r1 = r0.<android.media.AudioTrack: java.lang.Object mPlayStateLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.media.AudioTrack: void native_stop()>();

        virtualinvoke r0.<android.media.AudioTrack: void baseStop()>();

        $z0 = r0.<android.media.AudioTrack: boolean mOffloaded>;

        if $z0 == 0 goto label3;

        $i1 = r0.<android.media.AudioTrack: int mPlayState>;

        if $i1 == 5 goto label3;

        r0.<android.media.AudioTrack: int mPlayState> = 4;

     label2:
        goto label4;

     label3:
        r0.<android.media.AudioTrack: int mPlayState> = 1;

        r0.<android.media.AudioTrack: boolean mOffloadEosPending> = 0;

        r0.<android.media.AudioTrack: java.nio.ByteBuffer mAvSyncHeader> = null;

        r0.<android.media.AudioTrack: int mAvSyncBytesRemaining> = 0;

        $r4 = r0.<android.media.AudioTrack: java.lang.Object mPlayStateLock>;

        virtualinvoke $r4.<java.lang.Object: void notify()>();

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r5;

     label9:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("stop() called on uninitialized AudioTrack.");

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void unregisterStreamEventCallback(android.media.AudioTrack$StreamEventCallback)
    {
        android.media.AudioTrack r0;
        java.lang.Object r1, $r7;
        java.util.Iterator r2;
        android.media.AudioTrack$StreamEventCbInfo r3;
        java.lang.IllegalArgumentException $r4, r13;
        boolean $z0, $z1;
        java.lang.IllegalStateException $r5;
        java.util.LinkedList $r6, $r9, $r10;
        android.media.AudioTrack$StreamEventCallback $r8, r12;
        int $i0;
        java.lang.Throwable $r11;

        r0 := @this: android.media.AudioTrack;

        r12 := @parameter0: android.media.AudioTrack$StreamEventCallback;

        if r12 == null goto label11;

        $z0 = r0.<android.media.AudioTrack: boolean mOffloaded>;

        if $z0 == 0 goto label10;

        r1 = r0.<android.media.AudioTrack: java.lang.Object mStreamEventCbLock>;

        entermonitor r1;

     label01:
        $r6 = r0.<android.media.AudioTrack: java.util.LinkedList mStreamEventCbInfoList>;

        r2 = virtualinvoke $r6.<java.util.LinkedList: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label06;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.media.AudioTrack$StreamEventCbInfo) $r7;

        $r8 = r3.<android.media.AudioTrack$StreamEventCbInfo: android.media.AudioTrack$StreamEventCallback mStreamEventCb>;

        if $r8 != r12 goto label05;

        $r9 = r0.<android.media.AudioTrack: java.util.LinkedList mStreamEventCbInfoList>;

        virtualinvoke $r9.<java.util.LinkedList: boolean remove(java.lang.Object)>(r3);

        $r10 = r0.<android.media.AudioTrack: java.util.LinkedList mStreamEventCbInfoList>;

        $i0 = virtualinvoke $r10.<java.util.LinkedList: int size()>();

        if $i0 != 0 goto label03;

        specialinvoke r0.<android.media.AudioTrack: void endStreamEventHandling()>();

     label03:
        exitmonitor r1;

     label04:
        return;

     label05:
        goto label02;

     label06:
        r13 = new java.lang.IllegalArgumentException;

        specialinvoke r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("StreamEventCallback was not registered");

        throw r13;

     label07:
        $r11 := @caughtexception;

     label08:
        exitmonitor r1;

     label09:
        throw $r11;

     label10:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No StreamEventCallback on non-offloaded AudioTrack");

        throw $r5;

     label11:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null StreamEventCallback");

        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label06 to label07 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    public int write(java.nio.ByteBuffer, int, int)
    {
        android.media.AudioTrack r0;
        int i0, i1, $i2, $i4, $i5, $i6, $i7, $i8, i11, i12, i13, i14, i15, i16, $i17;
        byte[] r1;
        boolean $z0, $z1, z2, z3;
        java.nio.ByteBuffer r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r9;

        r0 := @this: android.media.AudioTrack;

        r6 := @parameter0: java.nio.ByteBuffer;

        i11 := @parameter1: int;

        i0 := @parameter2: int;

        $i2 = r0.<android.media.AudioTrack: int mState>;

        if $i2 != 0 goto label01;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("android.media.AudioTrack", "AudioTrack.write() called in invalid state STATE_UNINITIALIZED");

        return -3;

     label01:
        if i0 == 0 goto label02;

        if i0 == 1 goto label02;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("android.media.AudioTrack", "AudioTrack.write() called with invalid blocking mode");

        return -2;

     label02:
        if r6 == null goto label13;

        if i11 < 0 goto label13;

        $i4 = virtualinvoke r6.<java.nio.ByteBuffer: int remaining()>();

        if i11 <= $i4 goto label03;

        goto label13;

     label03:
        $z0 = specialinvoke r0.<android.media.AudioTrack: boolean blockUntilOffloadDrain(int)>(i0);

        if $z0 != 0 goto label04;

        return 0;

     label04:
        $z1 = virtualinvoke r6.<java.nio.ByteBuffer: boolean isDirect()>();

        if $z1 == 0 goto label07;

        i12 = virtualinvoke r6.<java.nio.ByteBuffer: int position()>();

        i13 = r0.<android.media.AudioTrack: int mAudioFormat>;

        if i0 != 0 goto label05;

        z2 = 1;

        goto label06;

     label05:
        z2 = 0;

     label06:
        i14 = specialinvoke r0.<android.media.AudioTrack: int native_write_native_bytes(java.nio.ByteBuffer,int,int,int,boolean)>(r6, i12, i11, i13, z2);

        goto label10;

     label07:
        r1 = staticinvoke <java.nio.NioUtils: byte[] unsafeArray(java.nio.ByteBuffer)>(r6);

        i1 = staticinvoke <java.nio.NioUtils: int unsafeArrayOffset(java.nio.ByteBuffer)>(r6);

        i15 = virtualinvoke r6.<java.nio.ByteBuffer: int position()>();

        i16 = r0.<android.media.AudioTrack: int mAudioFormat>;

        if i0 != 0 goto label08;

        z3 = 1;

        goto label09;

     label08:
        z3 = 0;

     label09:
        $i5 = i15 + i1;

        i14 = specialinvoke r0.<android.media.AudioTrack: int native_write_byte(byte[],int,int,int,boolean)>(r1, $i5, i11, i16, z3);

     label10:
        $i17 = r0.<android.media.AudioTrack: int mDataLoadMode>;

        if $i17 != 0 goto label11;

        $i8 = r0.<android.media.AudioTrack: int mState>;

        if $i8 != 2 goto label11;

        if i14 <= 0 goto label11;

        r0.<android.media.AudioTrack: int mState> = 1;

     label11:
        if i14 <= 0 goto label12;

        $i6 = virtualinvoke r6.<java.nio.ByteBuffer: int position()>();

        $i7 = $i6 + i14;

        virtualinvoke r6.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i7);

     label12:
        return i14;

     label13:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AudioTrack.write() called with invalid size (");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") value");

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("android.media.AudioTrack", $r9);

        return -2;
    }

    public int write(java.nio.ByteBuffer, int, int, long)
    {
        android.media.AudioTrack r0;
        int i0, i2, $i3, $i4, $i5, $i6, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i17, $i20, $i21, $i23, i27, i28;
        long l1;
        android.media.AudioAttributes $r1;
        boolean $z0;
        java.nio.ByteBuffer $r5, $r6, $r7, $r8, $r10, $r12, $r14, $r18, r20, r21, r22;
        java.nio.ByteOrder $r16;
        java.lang.StringBuilder $r23;
        java.lang.String $r25;

        r0 := @this: android.media.AudioTrack;

        r20 := @parameter0: java.nio.ByteBuffer;

        i27 := @parameter1: int;

        i0 := @parameter2: int;

        l1 := @parameter3: long;

        $i3 = r0.<android.media.AudioTrack: int mState>;

        if $i3 != 0 goto label01;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("android.media.AudioTrack", "AudioTrack.write() called in invalid state STATE_UNINITIALIZED");

        return -3;

     label01:
        if i0 == 0 goto label02;

        if i0 == 1 goto label02;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("android.media.AudioTrack", "AudioTrack.write() called with invalid blocking mode");

        return -2;

     label02:
        $i4 = r0.<android.media.AudioTrack: int mDataLoadMode>;

        if $i4 == 1 goto label03;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("android.media.AudioTrack", "AudioTrack.write() with timestamp called for non-streaming mode track");

        return -3;

     label03:
        $r1 = r0.<android.media.AudioTrack: android.media.AudioAttributes mAttributes>;

        $i5 = virtualinvoke $r1.<android.media.AudioAttributes: int getFlags()>();

        $i6 = $i5 & 16;

        if $i6 != 0 goto label04;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("android.media.AudioTrack", "AudioTrack.write() called on a regular AudioTrack. Ignoring pts...");

        $i23 = virtualinvoke r0.<android.media.AudioTrack: int write(java.nio.ByteBuffer,int,int)>(r20, i27, i0);

        return $i23;

     label04:
        if r20 == null goto label12;

        if i27 < 0 goto label12;

        $i8 = virtualinvoke r20.<java.nio.ByteBuffer: int remaining()>();

        if i27 <= $i8 goto label05;

        goto label12;

     label05:
        $z0 = specialinvoke r0.<android.media.AudioTrack: boolean blockUntilOffloadDrain(int)>(i0);

        if $z0 != 0 goto label06;

        return 0;

     label06:
        $r5 = r0.<android.media.AudioTrack: java.nio.ByteBuffer mAvSyncHeader>;

        if $r5 != null goto label07;

        $i21 = r0.<android.media.AudioTrack: int mOffset>;

        r21 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i21);

        r0.<android.media.AudioTrack: java.nio.ByteBuffer mAvSyncHeader> = r21;

        $r16 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        virtualinvoke r21.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r16);

        $r18 = r0.<android.media.AudioTrack: java.nio.ByteBuffer mAvSyncHeader>;

        virtualinvoke $r18.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>(1431633922);

     label07:
        $i9 = r0.<android.media.AudioTrack: int mAvSyncBytesRemaining>;

        if $i9 != 0 goto label08;

        $r8 = r0.<android.media.AudioTrack: java.nio.ByteBuffer mAvSyncHeader>;

        virtualinvoke $r8.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int,int)>(4, i27);

        $r10 = r0.<android.media.AudioTrack: java.nio.ByteBuffer mAvSyncHeader>;

        virtualinvoke $r10.<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(int,long)>(8, l1);

        $r12 = r0.<android.media.AudioTrack: java.nio.ByteBuffer mAvSyncHeader>;

        $i20 = r0.<android.media.AudioTrack: int mOffset>;

        virtualinvoke $r12.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int,int)>(16, $i20);

        $r14 = r0.<android.media.AudioTrack: java.nio.ByteBuffer mAvSyncHeader>;

        virtualinvoke $r14.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0);

        r0.<android.media.AudioTrack: int mAvSyncBytesRemaining> = i27;

     label08:
        $r6 = r0.<android.media.AudioTrack: java.nio.ByteBuffer mAvSyncHeader>;

        $i10 = virtualinvoke $r6.<java.nio.ByteBuffer: int remaining()>();

        if $i10 == 0 goto label10;

        r22 = r0.<android.media.AudioTrack: java.nio.ByteBuffer mAvSyncHeader>;

        $i16 = virtualinvoke r22.<java.nio.ByteBuffer: int remaining()>();

        i2 = virtualinvoke r0.<android.media.AudioTrack: int write(java.nio.ByteBuffer,int,int)>(r22, $i16, i0);

        if i2 >= 0 goto label09;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("android.media.AudioTrack", "AudioTrack.write() could not write timestamp header!");

        r0.<android.media.AudioTrack: java.nio.ByteBuffer mAvSyncHeader> = null;

        r0.<android.media.AudioTrack: int mAvSyncBytesRemaining> = 0;

        return i2;

     label09:
        $r7 = r0.<android.media.AudioTrack: java.nio.ByteBuffer mAvSyncHeader>;

        $i17 = virtualinvoke $r7.<java.nio.ByteBuffer: int remaining()>();

        if $i17 <= 0 goto label10;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("android.media.AudioTrack", "AudioTrack.write() partial timestamp header written.");

        return 0;

     label10:
        $i11 = r0.<android.media.AudioTrack: int mAvSyncBytesRemaining>;

        $i12 = staticinvoke <java.lang.Math: int min(int,int)>($i11, i27);

        i28 = virtualinvoke r0.<android.media.AudioTrack: int write(java.nio.ByteBuffer,int,int)>(r20, $i12, i0);

        if i28 >= 0 goto label11;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("android.media.AudioTrack", "AudioTrack.write() could not write audio data!");

        r0.<android.media.AudioTrack: java.nio.ByteBuffer mAvSyncHeader> = null;

        r0.<android.media.AudioTrack: int mAvSyncBytesRemaining> = 0;

        return i28;

     label11:
        $i13 = r0.<android.media.AudioTrack: int mAvSyncBytesRemaining>;

        $i14 = $i13 - i28;

        r0.<android.media.AudioTrack: int mAvSyncBytesRemaining> = $i14;

        return i28;

     label12:
        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AudioTrack.write() called with invalid size (");

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i27);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") value");

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("android.media.AudioTrack", $r25);

        return -2;
    }

    public int write(byte[], int, int)
    {
        android.media.AudioTrack r0;
        byte[] r1;
        int i0, i1, $i2;

        r0 := @this: android.media.AudioTrack;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = virtualinvoke r0.<android.media.AudioTrack: int write(byte[],int,int,int)>(r1, i0, i1, 0);

        return $i2;
    }

    public int write(byte[], int, int, int)
    {
        android.media.AudioTrack r0;
        byte[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i11, i12;
        boolean $z0, z1;

        r0 := @this: android.media.AudioTrack;

        r1 := @parameter0: byte[];

        i11 := @parameter1: int;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $i3 = r0.<android.media.AudioTrack: int mState>;

        if $i3 == 0 goto label9;

        $i4 = r0.<android.media.AudioTrack: int mAudioFormat>;

        if $i4 != 4 goto label1;

        goto label9;

     label1:
        if i1 == 0 goto label2;

        if i1 == 1 goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("android.media.AudioTrack", "AudioTrack.write() called with invalid blocking mode");

        return -2;

     label2:
        if r1 == null goto label8;

        if i11 < 0 goto label8;

        if i0 < 0 goto label8;

        $i5 = i11 + i0;

        if $i5 < 0 goto label8;

        $i7 = i11 + i0;

        $i6 = lengthof r1;

        if $i7 <= $i6 goto label3;

        goto label8;

     label3:
        $z0 = specialinvoke r0.<android.media.AudioTrack: boolean blockUntilOffloadDrain(int)>(i1);

        if $z0 != 0 goto label4;

        return 0;

     label4:
        i2 = r0.<android.media.AudioTrack: int mAudioFormat>;

        if i1 != 0 goto label5;

        z1 = 1;

        goto label6;

     label5:
        z1 = 0;

     label6:
        i12 = specialinvoke r0.<android.media.AudioTrack: int native_write_byte(byte[],int,int,int,boolean)>(r1, i11, i0, i2, z1);

        $i8 = r0.<android.media.AudioTrack: int mDataLoadMode>;

        if $i8 != 0 goto label7;

        $i9 = r0.<android.media.AudioTrack: int mState>;

        if $i9 != 2 goto label7;

        if i12 <= 0 goto label7;

        r0.<android.media.AudioTrack: int mState> = 1;

     label7:
        return i12;

     label8:
        return -2;

     label9:
        return -3;
    }

    public int write(float[], int, int, int)
    {
        android.media.AudioTrack r0;
        float[] r1;
        int i0, i1, i2, $i3, $i4, $i6, $i7, $i8, $i9, $i10, i14, i15;
        boolean $z0, z1;

        r0 := @this: android.media.AudioTrack;

        r1 := @parameter0: float[];

        i14 := @parameter1: int;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $i3 = r0.<android.media.AudioTrack: int mState>;

        if $i3 != 0 goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("android.media.AudioTrack", "AudioTrack.write() called in invalid state STATE_UNINITIALIZED");

        return -3;

     label1:
        $i4 = r0.<android.media.AudioTrack: int mAudioFormat>;

        if $i4 == 4 goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("android.media.AudioTrack", "AudioTrack.write(float[] ...) requires format ENCODING_PCM_FLOAT");

        return -3;

     label2:
        if i1 == 0 goto label3;

        if i1 == 1 goto label3;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("android.media.AudioTrack", "AudioTrack.write() called with invalid blocking mode");

        return -2;

     label3:
        if r1 == null goto label9;

        if i14 < 0 goto label9;

        if i0 < 0 goto label9;

        $i6 = i14 + i0;

        if $i6 < 0 goto label9;

        $i8 = i14 + i0;

        $i7 = lengthof r1;

        if $i8 <= $i7 goto label4;

        goto label9;

     label4:
        $z0 = specialinvoke r0.<android.media.AudioTrack: boolean blockUntilOffloadDrain(int)>(i1);

        if $z0 != 0 goto label5;

        return 0;

     label5:
        i2 = r0.<android.media.AudioTrack: int mAudioFormat>;

        if i1 != 0 goto label6;

        z1 = 1;

        goto label7;

     label6:
        z1 = 0;

     label7:
        i15 = specialinvoke r0.<android.media.AudioTrack: int native_write_float(float[],int,int,int,boolean)>(r1, i14, i0, i2, z1);

        $i9 = r0.<android.media.AudioTrack: int mDataLoadMode>;

        if $i9 != 0 goto label8;

        $i10 = r0.<android.media.AudioTrack: int mState>;

        if $i10 != 2 goto label8;

        if i15 <= 0 goto label8;

        r0.<android.media.AudioTrack: int mState> = 1;

     label8:
        return i15;

     label9:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("android.media.AudioTrack", "AudioTrack.write() called with invalid array, offset, or size");

        return -2;
    }

    public int write(short[], int, int)
    {
        android.media.AudioTrack r0;
        short[] r1;
        int i0, i1, $i2;

        r0 := @this: android.media.AudioTrack;

        r1 := @parameter0: short[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = virtualinvoke r0.<android.media.AudioTrack: int write(short[],int,int,int)>(r1, i0, i1, 0);

        return $i2;
    }

    public int write(short[], int, int, int)
    {
        android.media.AudioTrack r0;
        short[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i11, i12;
        boolean $z0, z1;

        r0 := @this: android.media.AudioTrack;

        r1 := @parameter0: short[];

        i11 := @parameter1: int;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $i3 = r0.<android.media.AudioTrack: int mState>;

        if $i3 == 0 goto label9;

        $i4 = r0.<android.media.AudioTrack: int mAudioFormat>;

        if $i4 != 4 goto label1;

        goto label9;

     label1:
        if i1 == 0 goto label2;

        if i1 == 1 goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("android.media.AudioTrack", "AudioTrack.write() called with invalid blocking mode");

        return -2;

     label2:
        if r1 == null goto label8;

        if i11 < 0 goto label8;

        if i0 < 0 goto label8;

        $i5 = i11 + i0;

        if $i5 < 0 goto label8;

        $i7 = i11 + i0;

        $i6 = lengthof r1;

        if $i7 <= $i6 goto label3;

        goto label8;

     label3:
        $z0 = specialinvoke r0.<android.media.AudioTrack: boolean blockUntilOffloadDrain(int)>(i1);

        if $z0 != 0 goto label4;

        return 0;

     label4:
        i2 = r0.<android.media.AudioTrack: int mAudioFormat>;

        if i1 != 0 goto label5;

        z1 = 1;

        goto label6;

     label5:
        z1 = 0;

     label6:
        i12 = specialinvoke r0.<android.media.AudioTrack: int native_write_short(short[],int,int,int,boolean)>(r1, i11, i0, i2, z1);

        $i8 = r0.<android.media.AudioTrack: int mDataLoadMode>;

        if $i8 != 0 goto label7;

        $i9 = r0.<android.media.AudioTrack: int mState>;

        if $i9 != 2 goto label7;

        if i12 <= 0 goto label7;

        r0.<android.media.AudioTrack: int mState> = 1;

     label7:
        return i12;

     label8:
        return -2;

     label9:
        return -3;
    }

    public static void <clinit>()
    {
        <android.media.AudioTrack: int WRITE_NON_BLOCKING> = 1;

        <android.media.AudioTrack: int WRITE_BLOCKING> = 0;

        <android.media.AudioTrack: java.lang.String TAG> = "android.media.AudioTrack";

        <android.media.AudioTrack: int SUPPORTED_OUT_CHANNELS> = 7420;

        <android.media.AudioTrack: int SUCCESS> = 0;

        <android.media.AudioTrack: int STATE_UNINITIALIZED> = 0;

        <android.media.AudioTrack: int STATE_NO_STATIC_DATA> = 2;

        <android.media.AudioTrack: int STATE_INITIALIZED> = 1;

        <android.media.AudioTrack: int PLAYSTATE_STOPPING> = 4;

        <android.media.AudioTrack: int PLAYSTATE_STOPPED> = 1;

        <android.media.AudioTrack: int PLAYSTATE_PLAYING> = 3;

        <android.media.AudioTrack: int PLAYSTATE_PAUSED_STOPPING> = 5;

        <android.media.AudioTrack: int PLAYSTATE_PAUSED> = 2;

        <android.media.AudioTrack: int PERFORMANCE_MODE_POWER_SAVING> = 2;

        <android.media.AudioTrack: int PERFORMANCE_MODE_NONE> = 0;

        <android.media.AudioTrack: int PERFORMANCE_MODE_LOW_LATENCY> = 1;

        <android.media.AudioTrack: int NATIVE_EVENT_STREAM_END> = 7;

        <android.media.AudioTrack: int NATIVE_EVENT_NEW_POS> = 4;

        <android.media.AudioTrack: int NATIVE_EVENT_NEW_IAUDIOTRACK> = 6;

        <android.media.AudioTrack: int NATIVE_EVENT_MARKER> = 3;

        <android.media.AudioTrack: int NATIVE_EVENT_CODEC_FORMAT_CHANGE> = 100;

        <android.media.AudioTrack: int NATIVE_EVENT_CAN_WRITE_MORE_DATA> = 9;

        <android.media.AudioTrack: int MODE_STREAM> = 1;

        <android.media.AudioTrack: int MODE_STATIC> = 0;

        <android.media.AudioTrack: float MAX_AUDIO_DESCRIPTION_MIX_LEVEL> = 48.0F;

        <android.media.AudioTrack: float HEADER_V2_SIZE_BYTES> = 20.0F;

        <android.media.AudioTrack: float GAIN_MIN> = 0.0F;

        <android.media.AudioTrack: float GAIN_MAX> = 1.0F;

        <android.media.AudioTrack: int ERROR_WOULD_BLOCK> = -7;

        <android.media.AudioTrack: int ERROR_NATIVESETUP_NATIVEINITFAILED> = -20;

        <android.media.AudioTrack: int ERROR_NATIVESETUP_INVALIDSTREAMTYPE> = -19;

        <android.media.AudioTrack: int ERROR_NATIVESETUP_INVALIDFORMAT> = -18;

        <android.media.AudioTrack: int ERROR_NATIVESETUP_INVALIDCHANNELMASK> = -17;

        <android.media.AudioTrack: int ERROR_NATIVESETUP_AUDIOSYSTEM> = -16;

        <android.media.AudioTrack: int ERROR_INVALID_OPERATION> = -3;

        <android.media.AudioTrack: int ERROR_DEAD_OBJECT> = -6;

        <android.media.AudioTrack: int ERROR_BAD_VALUE> = -2;

        <android.media.AudioTrack: int ERROR> = -1;

        <android.media.AudioTrack: int ENCAPSULATION_MODE_NONE> = 0;

        <android.media.AudioTrack: int ENCAPSULATION_MODE_HANDLE> = 2;

        <android.media.AudioTrack: int ENCAPSULATION_MODE_ELEMENTARY_STREAM> = 1;

        <android.media.AudioTrack: int ENCAPSULATION_METADATA_TYPE_NONE> = 0;

        <android.media.AudioTrack: int ENCAPSULATION_METADATA_TYPE_FRAMEWORK_TUNER> = 1;

        <android.media.AudioTrack: int ENCAPSULATION_METADATA_TYPE_DVB_AD_DESCRIPTOR> = 2;

        <android.media.AudioTrack: int DUAL_MONO_MODE_RR> = 3;

        <android.media.AudioTrack: int DUAL_MONO_MODE_OFF> = 0;

        <android.media.AudioTrack: int DUAL_MONO_MODE_LR> = 1;

        <android.media.AudioTrack: int DUAL_MONO_MODE_LL> = 2;

        <android.media.AudioTrack: int AUDIO_OUTPUT_FLAG_FAST> = 4;

        <android.media.AudioTrack: int AUDIO_OUTPUT_FLAG_DEEP_BUFFER> = 8;

        return;
    }
}
