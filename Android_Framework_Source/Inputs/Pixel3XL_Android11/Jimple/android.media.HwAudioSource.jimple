public class android.media.HwAudioSource extends android.media.PlayerBase
{
    private final android.media.AudioAttributes mAudioAttributes;
    private final android.media.AudioDeviceInfo mAudioDeviceInfo;
    private int mNativeHandle;

    private void <init>(android.media.AudioDeviceInfo, android.media.AudioAttributes)
    {
        android.media.HwAudioSource r0;
        android.media.AudioDeviceInfo r1;
        android.media.AudioAttributes r2;
        boolean $z0;

        r0 := @this: android.media.HwAudioSource;

        r1 := @parameter0: android.media.AudioDeviceInfo;

        r2 := @parameter1: android.media.AudioAttributes;

        specialinvoke r0.<android.media.PlayerBase: void <init>(android.media.AudioAttributes,int)>(r2, 14);

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $z0 = virtualinvoke r1.<android.media.AudioDeviceInfo: boolean isSource()>();

        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "Requires a source device");

        r0.<android.media.HwAudioSource: android.media.AudioDeviceInfo mAudioDeviceInfo> = r1;

        r0.<android.media.HwAudioSource: android.media.AudioAttributes mAudioAttributes> = r2;

        virtualinvoke r0.<android.media.HwAudioSource: void baseRegisterPlayer()>();

        return;
    }

    void <init>(android.media.AudioDeviceInfo, android.media.AudioAttributes, android.media.HwAudioSource$1)
    {
        android.media.HwAudioSource r0;
        android.media.AudioDeviceInfo r1;
        android.media.AudioAttributes r2;
        android.media.HwAudioSource$1 r3;

        r0 := @this: android.media.HwAudioSource;

        r1 := @parameter0: android.media.AudioDeviceInfo;

        r2 := @parameter1: android.media.AudioAttributes;

        r3 := @parameter2: android.media.HwAudioSource$1;

        specialinvoke r0.<android.media.HwAudioSource: void <init>(android.media.AudioDeviceInfo,android.media.AudioAttributes)>(r1, r2);

        return;
    }

    public boolean isPlaying()
    {
        android.media.HwAudioSource r0;
        int $i0;
        boolean z0;

        r0 := @this: android.media.HwAudioSource;

        $i0 = r0.<android.media.HwAudioSource: int mNativeHandle>;

        if $i0 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    int playerApplyVolumeShaper(android.media.VolumeShaper$Configuration, android.media.VolumeShaper$Operation)
    {
        android.media.HwAudioSource r0;
        android.media.VolumeShaper$Configuration r1;
        android.media.VolumeShaper$Operation r2;

        r0 := @this: android.media.HwAudioSource;

        r1 := @parameter0: android.media.VolumeShaper$Configuration;

        r2 := @parameter1: android.media.VolumeShaper$Operation;

        return 0;
    }

    android.media.VolumeShaper$State playerGetVolumeShaperState(int)
    {
        android.media.HwAudioSource r0;
        int i0;
        android.media.VolumeShaper$State $r1;

        r0 := @this: android.media.HwAudioSource;

        i0 := @parameter0: int;

        $r1 = new android.media.VolumeShaper$State;

        specialinvoke $r1.<android.media.VolumeShaper$State: void <init>(float,float)>(1.0F, 1.0F);

        return $r1;
    }

    void playerPause()
    {
        android.media.HwAudioSource r0;

        r0 := @this: android.media.HwAudioSource;

        virtualinvoke r0.<android.media.HwAudioSource: void stop()>();

        return;
    }

    int playerSetAuxEffectSendLevel(boolean, float)
    {
        android.media.HwAudioSource r0;
        boolean z0;
        float f0;

        r0 := @this: android.media.HwAudioSource;

        z0 := @parameter0: boolean;

        f0 := @parameter1: float;

        return 0;
    }

    void playerSetVolume(boolean, float, float)
    {
        android.media.HwAudioSource r0;
        boolean z0;
        float f0, f1;

        r0 := @this: android.media.HwAudioSource;

        z0 := @parameter0: boolean;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        return;
    }

    void playerStart()
    {
        android.media.HwAudioSource r0;

        r0 := @this: android.media.HwAudioSource;

        virtualinvoke r0.<android.media.HwAudioSource: void start()>();

        return;
    }

    void playerStop()
    {
        android.media.HwAudioSource r0;

        r0 := @this: android.media.HwAudioSource;

        virtualinvoke r0.<android.media.HwAudioSource: void stop()>();

        return;
    }

    public void start()
    {
        android.media.HwAudioSource r0;
        boolean $z0, $z1;
        android.media.AudioDeviceInfo $r1;
        android.media.AudioDevicePort $r2;
        android.media.AudioPortConfig $r3;
        android.media.AudioAttributes $r4;
        int $i0;

        r0 := @this: android.media.HwAudioSource;

        $z0 = virtualinvoke r0.<android.media.HwAudioSource: boolean isPlaying()>();

        $z1 = $z0 ^ 1;

        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>($z1, "HwAudioSource is currently playing");

        virtualinvoke r0.<android.media.HwAudioSource: void baseStart()>();

        $r1 = r0.<android.media.HwAudioSource: android.media.AudioDeviceInfo mAudioDeviceInfo>;

        $r2 = virtualinvoke $r1.<android.media.AudioDeviceInfo: android.media.AudioDevicePort getPort()>();

        $r3 = virtualinvoke $r2.<android.media.AudioDevicePort: android.media.AudioPortConfig activeConfig()>();

        $r4 = r0.<android.media.HwAudioSource: android.media.AudioAttributes mAudioAttributes>;

        $i0 = staticinvoke <android.media.AudioSystem: int startAudioSource(android.media.AudioPortConfig,android.media.AudioAttributes)>($r3, $r4);

        r0.<android.media.HwAudioSource: int mNativeHandle> = $i0;

        return;
    }

    public void stop()
    {
        android.media.HwAudioSource r0;
        int i0;

        r0 := @this: android.media.HwAudioSource;

        virtualinvoke r0.<android.media.HwAudioSource: void baseStop()>();

        i0 = r0.<android.media.HwAudioSource: int mNativeHandle>;

        if i0 <= 0 goto label1;

        staticinvoke <android.media.AudioSystem: int stopAudioSource(int)>(i0);

        r0.<android.media.HwAudioSource: int mNativeHandle> = 0;

     label1:
        return;
    }
}
