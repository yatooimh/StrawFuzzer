public class android.media.IAudioService$Default extends java.lang.Object implements android.media.IAudioService
{

    public void <init>()
    {
        android.media.IAudioService$Default r0;

        r0 := @this: android.media.IAudioService$Default;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int abandonAudioFocus(android.media.IAudioFocusDispatcher, java.lang.String, android.media.AudioAttributes, java.lang.String) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        android.media.IAudioFocusDispatcher r1;
        java.lang.String r2, r4;
        android.media.AudioAttributes r3;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: android.media.IAudioFocusDispatcher;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.media.AudioAttributes;

        r4 := @parameter3: java.lang.String;

        return 0;
    }

    public int addMixForPolicy(android.media.audiopolicy.AudioPolicyConfig, android.media.audiopolicy.IAudioPolicyCallback) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        android.media.audiopolicy.AudioPolicyConfig r1;
        android.media.audiopolicy.IAudioPolicyCallback r2;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: android.media.audiopolicy.AudioPolicyConfig;

        r2 := @parameter1: android.media.audiopolicy.IAudioPolicyCallback;

        return 0;
    }

    public void adjustStreamVolume(int, int, int, java.lang.String) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        int i0, i1, i2;
        java.lang.String r1;

        r0 := @this: android.media.IAudioService$Default;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        return;
    }

    public void adjustSuggestedStreamVolume(int, int, int, java.lang.String, java.lang.String) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        int i0, i1, i2;
        java.lang.String r1, r2;

        r0 := @this: android.media.IAudioService$Default;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        r2 := @parameter4: java.lang.String;

        return;
    }

    public android.os.IBinder asBinder()
    {
        android.media.IAudioService$Default r0;

        r0 := @this: android.media.IAudioService$Default;

        return null;
    }

    public void avrcpSupportsAbsoluteVolume(java.lang.String, boolean) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        java.lang.String r1;
        boolean z0;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        return;
    }

    public void disableRingtoneSync(int) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        int i0;

        r0 := @this: android.media.IAudioService$Default;

        i0 := @parameter0: int;

        return;
    }

    public void disableSafeMediaVolume(java.lang.String) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        java.lang.String r1;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public int dispatchFocusChange(android.media.AudioFocusInfo, int, android.media.audiopolicy.IAudioPolicyCallback) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        android.media.AudioFocusInfo r1;
        int i0;
        android.media.audiopolicy.IAudioPolicyCallback r2;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: android.media.AudioFocusInfo;

        i0 := @parameter1: int;

        r2 := @parameter2: android.media.audiopolicy.IAudioPolicyCallback;

        return 0;
    }

    public void forceRemoteSubmixFullVolume(boolean, android.os.IBinder) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        boolean z0;
        android.os.IBinder r1;

        r0 := @this: android.media.IAudioService$Default;

        z0 := @parameter0: boolean;

        r1 := @parameter1: android.os.IBinder;

        return;
    }

    public void forceVolumeControlStream(int, android.os.IBinder) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        int i0;
        android.os.IBinder r1;

        r0 := @this: android.media.IAudioService$Default;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.IBinder;

        return;
    }

    public java.util.List getActivePlaybackConfigurations() throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;

        r0 := @this: android.media.IAudioService$Default;

        return null;
    }

    public java.util.List getActiveRecordingConfigurations() throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;

        r0 := @this: android.media.IAudioService$Default;

        return null;
    }

    public int getAllowedCapturePolicy() throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;

        r0 := @this: android.media.IAudioService$Default;

        return 0;
    }

    public java.util.List getAudioProductStrategies() throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;

        r0 := @this: android.media.IAudioService$Default;

        return null;
    }

    public java.util.List getAudioVolumeGroups() throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;

        r0 := @this: android.media.IAudioService$Default;

        return null;
    }

    public int getCurrentAudioFocus() throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;

        r0 := @this: android.media.IAudioService$Default;

        return 0;
    }

    public int getDeviceVolumeBehavior(android.media.AudioDeviceAttributes) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        android.media.AudioDeviceAttributes r1;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: android.media.AudioDeviceAttributes;

        return 0;
    }

    public java.util.List getDevicesForAttributes(android.media.AudioAttributes) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        android.media.AudioAttributes r1;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: android.media.AudioAttributes;

        return null;
    }

    public int getFocusRampTimeMs(int, android.media.AudioAttributes) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        int i0;
        android.media.AudioAttributes r1;

        r0 := @this: android.media.IAudioService$Default;

        i0 := @parameter0: int;

        r1 := @parameter1: android.media.AudioAttributes;

        return 0;
    }

    public int getLastAudibleStreamVolume(int) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        int i0;

        r0 := @this: android.media.IAudioService$Default;

        i0 := @parameter0: int;

        return 0;
    }

    public int getMaxVolumeIndexForAttributes(android.media.AudioAttributes) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        android.media.AudioAttributes r1;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: android.media.AudioAttributes;

        return 0;
    }

    public int getMinVolumeIndexForAttributes(android.media.AudioAttributes) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        android.media.AudioAttributes r1;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: android.media.AudioAttributes;

        return 0;
    }

    public int getMode() throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;

        r0 := @this: android.media.IAudioService$Default;

        return 0;
    }

    public android.media.AudioDeviceAttributes getPreferredDeviceForStrategy(int) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        int i0;

        r0 := @this: android.media.IAudioService$Default;

        i0 := @parameter0: int;

        return null;
    }

    public int getRingerModeExternal() throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;

        r0 := @this: android.media.IAudioService$Default;

        return 0;
    }

    public int getRingerModeInternal() throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;

        r0 := @this: android.media.IAudioService$Default;

        return 0;
    }

    public android.media.IRingtonePlayer getRingtonePlayer() throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;

        r0 := @this: android.media.IAudioService$Default;

        return null;
    }

    public int getStreamMaxVolume(int) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        int i0;

        r0 := @this: android.media.IAudioService$Default;

        i0 := @parameter0: int;

        return 0;
    }

    public int getStreamMinVolume(int) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        int i0;

        r0 := @this: android.media.IAudioService$Default;

        i0 := @parameter0: int;

        return 0;
    }

    public int getStreamVolume(int) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        int i0;

        r0 := @this: android.media.IAudioService$Default;

        i0 := @parameter0: int;

        return 0;
    }

    public int[] getSupportedSystemUsages() throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;

        r0 := @this: android.media.IAudioService$Default;

        return null;
    }

    public int getUiSoundsStreamType() throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;

        r0 := @this: android.media.IAudioService$Default;

        return 0;
    }

    public int getVibrateSetting(int) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        int i0;

        r0 := @this: android.media.IAudioService$Default;

        i0 := @parameter0: int;

        return 0;
    }

    public int getVolumeIndexForAttributes(android.media.AudioAttributes) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        android.media.AudioAttributes r1;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: android.media.AudioAttributes;

        return 0;
    }

    public void handleBluetoothA2dpDeviceConfigChange(android.bluetooth.BluetoothDevice) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        android.bluetooth.BluetoothDevice r1;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: android.bluetooth.BluetoothDevice;

        return;
    }

    public void handleVolumeKey(android.view.KeyEvent, boolean, java.lang.String, java.lang.String) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        android.view.KeyEvent r1;
        boolean z0;
        java.lang.String r2, r3;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: android.view.KeyEvent;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        return;
    }

    public boolean hasHapticChannels(android.net.Uri) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        android.net.Uri r1;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: android.net.Uri;

        return 0;
    }

    public boolean hasRegisteredDynamicPolicy() throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;

        r0 := @this: android.media.IAudioService$Default;

        return 0;
    }

    public boolean isAudioServerRunning() throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;

        r0 := @this: android.media.IAudioService$Default;

        return 0;
    }

    public boolean isBluetoothA2dpOn() throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;

        r0 := @this: android.media.IAudioService$Default;

        return 0;
    }

    public boolean isBluetoothScoOn() throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;

        r0 := @this: android.media.IAudioService$Default;

        return 0;
    }

    public boolean isCallScreeningModeSupported() throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;

        r0 := @this: android.media.IAudioService$Default;

        return 0;
    }

    public boolean isCameraSoundForced() throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;

        r0 := @this: android.media.IAudioService$Default;

        return 0;
    }

    public boolean isHdmiSystemAudioSupported() throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;

        r0 := @this: android.media.IAudioService$Default;

        return 0;
    }

    public boolean isMasterMute() throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;

        r0 := @this: android.media.IAudioService$Default;

        return 0;
    }

    public boolean isMicrophoneMuted() throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;

        r0 := @this: android.media.IAudioService$Default;

        return 0;
    }

    public boolean isSpeakerphoneOn() throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;

        r0 := @this: android.media.IAudioService$Default;

        return 0;
    }

    public boolean isStreamAffectedByMute(int) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        int i0;

        r0 := @this: android.media.IAudioService$Default;

        i0 := @parameter0: int;

        return 0;
    }

    public boolean isStreamAffectedByRingerMode(int) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        int i0;

        r0 := @this: android.media.IAudioService$Default;

        i0 := @parameter0: int;

        return 0;
    }

    public boolean isStreamMute(int) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        int i0;

        r0 := @this: android.media.IAudioService$Default;

        i0 := @parameter0: int;

        return 0;
    }

    public boolean isValidRingerMode(int) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        int i0;

        r0 := @this: android.media.IAudioService$Default;

        i0 := @parameter0: int;

        return 0;
    }

    public boolean loadSoundEffects() throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;

        r0 := @this: android.media.IAudioService$Default;

        return 0;
    }

    public void notifyVolumeControllerVisible(android.media.IVolumeController, boolean) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        android.media.IVolumeController r1;
        boolean z0;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: android.media.IVolumeController;

        z0 := @parameter1: boolean;

        return;
    }

    public void playSoundEffect(int) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        int i0;

        r0 := @this: android.media.IAudioService$Default;

        i0 := @parameter0: int;

        return;
    }

    public void playSoundEffectVolume(int, float) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        int i0;
        float f0;

        r0 := @this: android.media.IAudioService$Default;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        return;
    }

    public void playerAttributes(int, android.media.AudioAttributes) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        int i0;
        android.media.AudioAttributes r1;

        r0 := @this: android.media.IAudioService$Default;

        i0 := @parameter0: int;

        r1 := @parameter1: android.media.AudioAttributes;

        return;
    }

    public void playerEvent(int, int) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        int i0, i1;

        r0 := @this: android.media.IAudioService$Default;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return;
    }

    public void playerHasOpPlayAudio(int, boolean) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        int i0;
        boolean z0;

        r0 := @this: android.media.IAudioService$Default;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        return;
    }

    public void recorderEvent(int, int) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        int i0, i1;

        r0 := @this: android.media.IAudioService$Default;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return;
    }

    public java.lang.String registerAudioPolicy(android.media.audiopolicy.AudioPolicyConfig, android.media.audiopolicy.IAudioPolicyCallback, boolean, boolean, boolean, boolean, android.media.projection.IMediaProjection) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        android.media.audiopolicy.AudioPolicyConfig r1;
        android.media.audiopolicy.IAudioPolicyCallback r2;
        boolean z0, z1, z2, z3;
        android.media.projection.IMediaProjection r3;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: android.media.audiopolicy.AudioPolicyConfig;

        r2 := @parameter1: android.media.audiopolicy.IAudioPolicyCallback;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        z2 := @parameter4: boolean;

        z3 := @parameter5: boolean;

        r3 := @parameter6: android.media.projection.IMediaProjection;

        return null;
    }

    public void registerAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        android.media.IAudioServerStateDispatcher r1;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: android.media.IAudioServerStateDispatcher;

        return;
    }

    public void registerPlaybackCallback(android.media.IPlaybackConfigDispatcher) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        android.media.IPlaybackConfigDispatcher r1;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: android.media.IPlaybackConfigDispatcher;

        return;
    }

    public void registerRecordingCallback(android.media.IRecordingConfigDispatcher) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        android.media.IRecordingConfigDispatcher r1;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: android.media.IRecordingConfigDispatcher;

        return;
    }

    public void registerStrategyPreferredDeviceDispatcher(android.media.IStrategyPreferredDeviceDispatcher) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        android.media.IStrategyPreferredDeviceDispatcher r1;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: android.media.IStrategyPreferredDeviceDispatcher;

        return;
    }

    public void releasePlayer(int) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        int i0;

        r0 := @this: android.media.IAudioService$Default;

        i0 := @parameter0: int;

        return;
    }

    public void releaseRecorder(int) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        int i0;

        r0 := @this: android.media.IAudioService$Default;

        i0 := @parameter0: int;

        return;
    }

    public void reloadAudioSettings() throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;

        r0 := @this: android.media.IAudioService$Default;

        return;
    }

    public int removeMixForPolicy(android.media.audiopolicy.AudioPolicyConfig, android.media.audiopolicy.IAudioPolicyCallback) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        android.media.audiopolicy.AudioPolicyConfig r1;
        android.media.audiopolicy.IAudioPolicyCallback r2;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: android.media.audiopolicy.AudioPolicyConfig;

        r2 := @parameter1: android.media.audiopolicy.IAudioPolicyCallback;

        return 0;
    }

    public int removePreferredDeviceForStrategy(int) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        int i0;

        r0 := @this: android.media.IAudioService$Default;

        i0 := @parameter0: int;

        return 0;
    }

    public int removeUidDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback, int) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        android.media.audiopolicy.IAudioPolicyCallback r1;
        int i0;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: android.media.audiopolicy.IAudioPolicyCallback;

        i0 := @parameter1: int;

        return 0;
    }

    public int removeUserIdDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback, int) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        android.media.audiopolicy.IAudioPolicyCallback r1;
        int i0;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: android.media.audiopolicy.IAudioPolicyCallback;

        i0 := @parameter1: int;

        return 0;
    }

    public int requestAudioFocus(android.media.AudioAttributes, int, android.os.IBinder, android.media.IAudioFocusDispatcher, java.lang.String, java.lang.String, int, android.media.audiopolicy.IAudioPolicyCallback, int) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        android.media.AudioAttributes r1;
        int i0, i1, i2;
        android.os.IBinder r2;
        android.media.IAudioFocusDispatcher r3;
        java.lang.String r4, r5;
        android.media.audiopolicy.IAudioPolicyCallback r6;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: android.media.AudioAttributes;

        i0 := @parameter1: int;

        r2 := @parameter2: android.os.IBinder;

        r3 := @parameter3: android.media.IAudioFocusDispatcher;

        r4 := @parameter4: java.lang.String;

        r5 := @parameter5: java.lang.String;

        i1 := @parameter6: int;

        r6 := @parameter7: android.media.audiopolicy.IAudioPolicyCallback;

        i2 := @parameter8: int;

        return 0;
    }

    public int setAllowedCapturePolicy(int) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        int i0;

        r0 := @this: android.media.IAudioService$Default;

        i0 := @parameter0: int;

        return 0;
    }

    public void setBluetoothA2dpDeviceConnectionStateSuppressNoisyIntent(android.bluetooth.BluetoothDevice, int, int, boolean, int) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        android.bluetooth.BluetoothDevice r1;
        int i0, i1, i2;
        boolean z0;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: android.bluetooth.BluetoothDevice;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        i2 := @parameter4: int;

        return;
    }

    public void setBluetoothA2dpOn(boolean) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        boolean z0;

        r0 := @this: android.media.IAudioService$Default;

        z0 := @parameter0: boolean;

        return;
    }

    public void setBluetoothHearingAidDeviceConnectionState(android.bluetooth.BluetoothDevice, int, boolean, int) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        android.bluetooth.BluetoothDevice r1;
        int i0, i1;
        boolean z0;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: android.bluetooth.BluetoothDevice;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        i1 := @parameter3: int;

        return;
    }

    public void setBluetoothScoOn(boolean) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        boolean z0;

        r0 := @this: android.media.IAudioService$Default;

        z0 := @parameter0: boolean;

        return;
    }

    public void setDeviceVolumeBehavior(android.media.AudioDeviceAttributes, int, java.lang.String) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        android.media.AudioDeviceAttributes r1;
        int i0;
        java.lang.String r2;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: android.media.AudioDeviceAttributes;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        return;
    }

    public int setFocusPropertiesForPolicy(int, android.media.audiopolicy.IAudioPolicyCallback) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        int i0;
        android.media.audiopolicy.IAudioPolicyCallback r1;

        r0 := @this: android.media.IAudioService$Default;

        i0 := @parameter0: int;

        r1 := @parameter1: android.media.audiopolicy.IAudioPolicyCallback;

        return 0;
    }

    public void setFocusRequestResultFromExtPolicy(android.media.AudioFocusInfo, int, android.media.audiopolicy.IAudioPolicyCallback) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        android.media.AudioFocusInfo r1;
        int i0;
        android.media.audiopolicy.IAudioPolicyCallback r2;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: android.media.AudioFocusInfo;

        i0 := @parameter1: int;

        r2 := @parameter2: android.media.audiopolicy.IAudioPolicyCallback;

        return;
    }

    public int setHdmiSystemAudioSupported(boolean) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        boolean z0;

        r0 := @this: android.media.IAudioService$Default;

        z0 := @parameter0: boolean;

        return 0;
    }

    public void setMasterMute(boolean, int, java.lang.String, int) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        boolean z0;
        int i0, i1;
        java.lang.String r1;

        r0 := @this: android.media.IAudioService$Default;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        i1 := @parameter3: int;

        return;
    }

    public void setMicrophoneMute(boolean, java.lang.String, int) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        boolean z0;
        java.lang.String r1;
        int i0;

        r0 := @this: android.media.IAudioService$Default;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        return;
    }

    public void setMicrophoneMuteFromSwitch(boolean) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        boolean z0;

        r0 := @this: android.media.IAudioService$Default;

        z0 := @parameter0: boolean;

        return;
    }

    public void setMode(int, android.os.IBinder, java.lang.String) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        int i0;
        android.os.IBinder r1;
        java.lang.String r2;

        r0 := @this: android.media.IAudioService$Default;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.IBinder;

        r2 := @parameter2: java.lang.String;

        return;
    }

    public void setMultiAudioFocusEnabled(boolean) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        boolean z0;

        r0 := @this: android.media.IAudioService$Default;

        z0 := @parameter0: boolean;

        return;
    }

    public int setPreferredDeviceForStrategy(int, android.media.AudioDeviceAttributes) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        int i0;
        android.media.AudioDeviceAttributes r1;

        r0 := @this: android.media.IAudioService$Default;

        i0 := @parameter0: int;

        r1 := @parameter1: android.media.AudioDeviceAttributes;

        return 0;
    }

    public void setRingerModeExternal(int, java.lang.String) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        int i0;
        java.lang.String r1;

        r0 := @this: android.media.IAudioService$Default;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        return;
    }

    public void setRingerModeInternal(int, java.lang.String) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        int i0;
        java.lang.String r1;

        r0 := @this: android.media.IAudioService$Default;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        return;
    }

    public void setRingtonePlayer(android.media.IRingtonePlayer) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        android.media.IRingtonePlayer r1;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: android.media.IRingtonePlayer;

        return;
    }

    public void setRttEnabled(boolean) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        boolean z0;

        r0 := @this: android.media.IAudioService$Default;

        z0 := @parameter0: boolean;

        return;
    }

    public void setSpeakerphoneOn(android.os.IBinder, boolean) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        android.os.IBinder r1;
        boolean z0;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

        return;
    }

    public void setStreamVolume(int, int, int, java.lang.String) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        int i0, i1, i2;
        java.lang.String r1;

        r0 := @this: android.media.IAudioService$Default;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        return;
    }

    public void setSupportedSystemUsages(int[]) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        int[] r1;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: int[];

        return;
    }

    public int setUidDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback, int, int[], java.lang.String[]) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        android.media.audiopolicy.IAudioPolicyCallback r1;
        int i0;
        int[] r2;
        java.lang.String[] r3;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: android.media.audiopolicy.IAudioPolicyCallback;

        i0 := @parameter1: int;

        r2 := @parameter2: int[];

        r3 := @parameter3: java.lang.String[];

        return 0;
    }

    public int setUserIdDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback, int, int[], java.lang.String[]) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        android.media.audiopolicy.IAudioPolicyCallback r1;
        int i0;
        int[] r2;
        java.lang.String[] r3;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: android.media.audiopolicy.IAudioPolicyCallback;

        i0 := @parameter1: int;

        r2 := @parameter2: int[];

        r3 := @parameter3: java.lang.String[];

        return 0;
    }

    public void setVibrateSetting(int, int) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        int i0, i1;

        r0 := @this: android.media.IAudioService$Default;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return;
    }

    public void setVolumeController(android.media.IVolumeController) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        android.media.IVolumeController r1;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: android.media.IVolumeController;

        return;
    }

    public void setVolumeIndexForAttributes(android.media.AudioAttributes, int, int, java.lang.String) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        android.media.AudioAttributes r1;
        int i0, i1;
        java.lang.String r2;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: android.media.AudioAttributes;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        return;
    }

    public void setVolumePolicy(android.media.VolumePolicy) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        android.media.VolumePolicy r1;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: android.media.VolumePolicy;

        return;
    }

    public void setWiredDeviceConnectionState(int, int, java.lang.String, java.lang.String, java.lang.String) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        int i0, i1;
        java.lang.String r1, r2, r3;

        r0 := @this: android.media.IAudioService$Default;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: java.lang.String;

        return;
    }

    public boolean shouldVibrate(int) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        int i0;

        r0 := @this: android.media.IAudioService$Default;

        i0 := @parameter0: int;

        return 0;
    }

    public void startBluetoothSco(android.os.IBinder, int) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        android.os.IBinder r1;
        int i0;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        return;
    }

    public void startBluetoothScoVirtualCall(android.os.IBinder) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        android.os.IBinder r1;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: android.os.IBinder;

        return;
    }

    public android.media.AudioRoutesInfo startWatchingRoutes(android.media.IAudioRoutesObserver) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        android.media.IAudioRoutesObserver r1;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: android.media.IAudioRoutesObserver;

        return null;
    }

    public void stopBluetoothSco(android.os.IBinder) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        android.os.IBinder r1;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: android.os.IBinder;

        return;
    }

    public int trackPlayer(android.media.PlayerBase$PlayerIdCard) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        android.media.PlayerBase$PlayerIdCard r1;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: android.media.PlayerBase$PlayerIdCard;

        return 0;
    }

    public int trackRecorder(android.os.IBinder) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        android.os.IBinder r1;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: android.os.IBinder;

        return 0;
    }

    public void unloadSoundEffects() throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;

        r0 := @this: android.media.IAudioService$Default;

        return;
    }

    public void unregisterAudioFocusClient(java.lang.String) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        java.lang.String r1;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void unregisterAudioPolicy(android.media.audiopolicy.IAudioPolicyCallback) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        android.media.audiopolicy.IAudioPolicyCallback r1;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: android.media.audiopolicy.IAudioPolicyCallback;

        return;
    }

    public void unregisterAudioPolicyAsync(android.media.audiopolicy.IAudioPolicyCallback) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        android.media.audiopolicy.IAudioPolicyCallback r1;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: android.media.audiopolicy.IAudioPolicyCallback;

        return;
    }

    public void unregisterAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        android.media.IAudioServerStateDispatcher r1;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: android.media.IAudioServerStateDispatcher;

        return;
    }

    public void unregisterPlaybackCallback(android.media.IPlaybackConfigDispatcher) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        android.media.IPlaybackConfigDispatcher r1;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: android.media.IPlaybackConfigDispatcher;

        return;
    }

    public void unregisterRecordingCallback(android.media.IRecordingConfigDispatcher) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        android.media.IRecordingConfigDispatcher r1;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: android.media.IRecordingConfigDispatcher;

        return;
    }

    public void unregisterStrategyPreferredDeviceDispatcher(android.media.IStrategyPreferredDeviceDispatcher) throws android.os.RemoteException
    {
        android.media.IAudioService$Default r0;
        android.media.IStrategyPreferredDeviceDispatcher r1;

        r0 := @this: android.media.IAudioService$Default;

        r1 := @parameter0: android.media.IStrategyPreferredDeviceDispatcher;

        return;
    }
}
