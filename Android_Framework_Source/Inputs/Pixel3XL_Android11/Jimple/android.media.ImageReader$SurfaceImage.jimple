class android.media.ImageReader$SurfaceImage extends android.media.Image
{
    private int mFormat;
    private java.util.concurrent.atomic.AtomicBoolean mIsDetached;
    private long mNativeBuffer;
    private android.media.ImageReader$SurfaceImage$SurfacePlane[] mPlanes;
    private int mScalingMode;
    private long mTimestamp;
    private int mTransform;
    final android.media.ImageReader this$0;

    public void <init>(android.media.ImageReader, int)
    {
        android.media.ImageReader$SurfaceImage r0;
        android.media.ImageReader r1;
        int i0;
        java.util.concurrent.atomic.AtomicBoolean $r2;

        r0 := @this: android.media.ImageReader$SurfaceImage;

        r1 := @parameter0: android.media.ImageReader;

        i0 := @parameter1: int;

        r0.<android.media.ImageReader$SurfaceImage: android.media.ImageReader this$0> = r1;

        specialinvoke r0.<android.media.Image: void <init>()>();

        r0.<android.media.ImageReader$SurfaceImage: int mFormat> = 0;

        $r2 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<android.media.ImageReader$SurfaceImage: java.util.concurrent.atomic.AtomicBoolean mIsDetached> = $r2;

        r0.<android.media.ImageReader$SurfaceImage: int mFormat> = i0;

        return;
    }

    static void access$000(android.media.ImageReader$SurfaceImage)
    {
        android.media.ImageReader$SurfaceImage r0;

        r0 := @parameter0: android.media.ImageReader$SurfaceImage;

        specialinvoke r0.<android.media.ImageReader$SurfaceImage: void clearSurfacePlanes()>();

        return;
    }

    static android.media.ImageReader$SurfaceImage$SurfacePlane[] access$102(android.media.ImageReader$SurfaceImage, android.media.ImageReader$SurfaceImage$SurfacePlane[])
    {
        android.media.ImageReader$SurfaceImage r0;
        android.media.ImageReader$SurfaceImage$SurfacePlane[] r1;

        r0 := @parameter0: android.media.ImageReader$SurfaceImage;

        r1 := @parameter1: android.media.ImageReader$SurfaceImage$SurfacePlane[];

        r0.<android.media.ImageReader$SurfaceImage: android.media.ImageReader$SurfaceImage$SurfacePlane[] mPlanes> = r1;

        return r1;
    }

    static void access$200(android.media.ImageReader$SurfaceImage, boolean)
    {
        android.media.ImageReader$SurfaceImage r0;
        boolean z0;

        r0 := @parameter0: android.media.ImageReader$SurfaceImage;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.media.ImageReader$SurfaceImage: void setDetached(boolean)>(z0);

        return;
    }

    private void clearSurfacePlanes()
    {
        android.media.ImageReader$SurfaceImage r0;
        android.media.ImageReader$SurfaceImage$SurfacePlane[] r1, $r2, $r5;
        boolean $z0;
        int $i0, i1;
        android.media.ImageReader$SurfaceImage$SurfacePlane $r3, $r4;

        r0 := @this: android.media.ImageReader$SurfaceImage;

        $z0 = r0.<android.media.ImageReader$SurfaceImage: boolean mIsImageValid>;

        if $z0 == 0 goto label3;

        $r2 = r0.<android.media.ImageReader$SurfaceImage: android.media.ImageReader$SurfaceImage$SurfacePlane[] mPlanes>;

        if $r2 == null goto label3;

        i1 = 0;

     label1:
        r1 = r0.<android.media.ImageReader$SurfaceImage: android.media.ImageReader$SurfaceImage$SurfacePlane[] mPlanes>;

        $i0 = lengthof r1;

        if i1 >= $i0 goto label3;

        $r3 = r1[i1];

        if $r3 == null goto label2;

        $r4 = r1[i1];

        staticinvoke <android.media.ImageReader$SurfaceImage$SurfacePlane: void access$1000(android.media.ImageReader$SurfaceImage$SurfacePlane)>($r4);

        $r5 = r0.<android.media.ImageReader$SurfaceImage: android.media.ImageReader$SurfaceImage$SurfacePlane[] mPlanes>;

        $r5[i1] = null;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    private synchronized native android.media.ImageReader$SurfaceImage$SurfacePlane[] nativeCreatePlanes(int, int);

    private synchronized native int nativeGetFormat(int);

    private synchronized native android.hardware.HardwareBuffer nativeGetHardwareBuffer();

    private synchronized native int nativeGetHeight();

    private synchronized native int nativeGetWidth();

    private void setDetached(boolean)
    {
        android.media.ImageReader$SurfaceImage r0;
        boolean z0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @this: android.media.ImageReader$SurfaceImage;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<android.media.ImageReader$SurfaceImage: void throwISEIfImageIsInvalid()>();

        $r1 = r0.<android.media.ImageReader$SurfaceImage: java.util.concurrent.atomic.AtomicBoolean mIsDetached>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean getAndSet(boolean)>(z0);

        return;
    }

    public void close()
    {
        android.media.ImageReader$SurfaceImage r0;
        android.media.ImageReader $r1;

        r0 := @this: android.media.ImageReader$SurfaceImage;

        $r1 = r0.<android.media.ImageReader$SurfaceImage: android.media.ImageReader this$0>;

        staticinvoke <android.media.ImageReader: void access$700(android.media.ImageReader,android.media.Image)>($r1, r0);

        return;
    }

    protected final void finalize() throws java.lang.Throwable
    {
        android.media.ImageReader$SurfaceImage r0;
        java.lang.Throwable $r2;

        r0 := @this: android.media.ImageReader$SurfaceImage;

     label1:
        virtualinvoke r0.<android.media.ImageReader$SurfaceImage: void close()>();

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label3:
        $r2 := @caughtexception;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int getFormat()
    {
        android.media.ImageReader$SurfaceImage r0;
        android.media.ImageReader $r1;
        int i0;

        r0 := @this: android.media.ImageReader$SurfaceImage;

        virtualinvoke r0.<android.media.ImageReader$SurfaceImage: void throwISEIfImageIsInvalid()>();

        $r1 = r0.<android.media.ImageReader$SurfaceImage: android.media.ImageReader this$0>;

        i0 = virtualinvoke $r1.<android.media.ImageReader: int getImageFormat()>();

        if i0 != 34 goto label1;

        goto label2;

     label1:
        i0 = specialinvoke r0.<android.media.ImageReader$SurfaceImage: int nativeGetFormat(int)>(i0);

     label2:
        r0.<android.media.ImageReader$SurfaceImage: int mFormat> = i0;

        return i0;
    }

    public android.hardware.HardwareBuffer getHardwareBuffer()
    {
        android.media.ImageReader$SurfaceImage r0;
        android.hardware.HardwareBuffer $r1;

        r0 := @this: android.media.ImageReader$SurfaceImage;

        virtualinvoke r0.<android.media.ImageReader$SurfaceImage: void throwISEIfImageIsInvalid()>();

        $r1 = specialinvoke r0.<android.media.ImageReader$SurfaceImage: android.hardware.HardwareBuffer nativeGetHardwareBuffer()>();

        return $r1;
    }

    public int getHeight()
    {
        android.media.ImageReader$SurfaceImage r0;
        int i0, i1;
        android.media.ImageReader $r1;

        r0 := @this: android.media.ImageReader$SurfaceImage;

        virtualinvoke r0.<android.media.ImageReader$SurfaceImage: void throwISEIfImageIsInvalid()>();

        i0 = virtualinvoke r0.<android.media.ImageReader$SurfaceImage: int getFormat()>();

        if i0 == 36 goto label1;

        if i0 == 1212500294 goto label1;

        if i0 == 1768253795 goto label1;

        if i0 == 256 goto label1;

        if i0 == 257 goto label1;

        i1 = specialinvoke r0.<android.media.ImageReader$SurfaceImage: int nativeGetHeight()>();

        goto label2;

     label1:
        $r1 = r0.<android.media.ImageReader$SurfaceImage: android.media.ImageReader this$0>;

        i1 = virtualinvoke $r1.<android.media.ImageReader: int getHeight()>();

     label2:
        return i1;
    }

    long getNativeContext()
    {
        android.media.ImageReader$SurfaceImage r0;
        long $l0;

        r0 := @this: android.media.ImageReader$SurfaceImage;

        virtualinvoke r0.<android.media.ImageReader$SurfaceImage: void throwISEIfImageIsInvalid()>();

        $l0 = r0.<android.media.ImageReader$SurfaceImage: long mNativeBuffer>;

        return $l0;
    }

    android.media.ImageReader getOwner()
    {
        android.media.ImageReader$SurfaceImage r0;
        android.media.ImageReader $r1;

        r0 := @this: android.media.ImageReader$SurfaceImage;

        virtualinvoke r0.<android.media.ImageReader$SurfaceImage: void throwISEIfImageIsInvalid()>();

        $r1 = r0.<android.media.ImageReader$SurfaceImage: android.media.ImageReader this$0>;

        return $r1;
    }

    volatile java.lang.Object getOwner()
    {
        android.media.ImageReader$SurfaceImage r0;
        android.media.ImageReader $r1;

        r0 := @this: android.media.ImageReader$SurfaceImage;

        $r1 = virtualinvoke r0.<android.media.ImageReader$SurfaceImage: android.media.ImageReader getOwner()>();

        return $r1;
    }

    public android.media.Image$Plane[] getPlanes()
    {
        android.media.ImageReader$SurfaceImage r0;
        android.media.ImageReader$SurfaceImage$SurfacePlane[] $r1, $r2, $r7;
        java.lang.Object $r3;
        android.media.Image$Plane[] $r4;
        android.media.ImageReader $r5, $r6;
        int $i0, $i1;

        r0 := @this: android.media.ImageReader$SurfaceImage;

        virtualinvoke r0.<android.media.ImageReader$SurfaceImage: void throwISEIfImageIsInvalid()>();

        $r1 = r0.<android.media.ImageReader$SurfaceImage: android.media.ImageReader$SurfaceImage$SurfacePlane[] mPlanes>;

        if $r1 != null goto label1;

        $r5 = r0.<android.media.ImageReader$SurfaceImage: android.media.ImageReader this$0>;

        $i0 = staticinvoke <android.media.ImageReader: int access$800(android.media.ImageReader)>($r5);

        $r6 = r0.<android.media.ImageReader$SurfaceImage: android.media.ImageReader this$0>;

        $i1 = staticinvoke <android.media.ImageReader: int access$900(android.media.ImageReader)>($r6);

        $r7 = specialinvoke r0.<android.media.ImageReader$SurfaceImage: android.media.ImageReader$SurfaceImage$SurfacePlane[] nativeCreatePlanes(int,int)>($i0, $i1);

        r0.<android.media.ImageReader$SurfaceImage: android.media.ImageReader$SurfaceImage$SurfacePlane[] mPlanes> = $r7;

     label1:
        $r2 = r0.<android.media.ImageReader$SurfaceImage: android.media.ImageReader$SurfaceImage$SurfacePlane[] mPlanes>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (android.media.Image$Plane[]) $r3;

        return $r4;
    }

    public android.media.ImageReader getReader()
    {
        android.media.ImageReader$SurfaceImage r0;
        android.media.ImageReader $r1;

        r0 := @this: android.media.ImageReader$SurfaceImage;

        $r1 = r0.<android.media.ImageReader$SurfaceImage: android.media.ImageReader this$0>;

        return $r1;
    }

    public int getScalingMode()
    {
        android.media.ImageReader$SurfaceImage r0;
        int $i0;

        r0 := @this: android.media.ImageReader$SurfaceImage;

        virtualinvoke r0.<android.media.ImageReader$SurfaceImage: void throwISEIfImageIsInvalid()>();

        $i0 = r0.<android.media.ImageReader$SurfaceImage: int mScalingMode>;

        return $i0;
    }

    public long getTimestamp()
    {
        android.media.ImageReader$SurfaceImage r0;
        long $l0;

        r0 := @this: android.media.ImageReader$SurfaceImage;

        virtualinvoke r0.<android.media.ImageReader$SurfaceImage: void throwISEIfImageIsInvalid()>();

        $l0 = r0.<android.media.ImageReader$SurfaceImage: long mTimestamp>;

        return $l0;
    }

    public int getTransform()
    {
        android.media.ImageReader$SurfaceImage r0;
        int $i0;

        r0 := @this: android.media.ImageReader$SurfaceImage;

        virtualinvoke r0.<android.media.ImageReader$SurfaceImage: void throwISEIfImageIsInvalid()>();

        $i0 = r0.<android.media.ImageReader$SurfaceImage: int mTransform>;

        return $i0;
    }

    public int getWidth()
    {
        android.media.ImageReader$SurfaceImage r0;
        int i0, i1;
        android.media.ImageReader $r1;

        r0 := @this: android.media.ImageReader$SurfaceImage;

        virtualinvoke r0.<android.media.ImageReader$SurfaceImage: void throwISEIfImageIsInvalid()>();

        i0 = virtualinvoke r0.<android.media.ImageReader$SurfaceImage: int getFormat()>();

        if i0 == 36 goto label1;

        if i0 == 1212500294 goto label1;

        if i0 == 1768253795 goto label1;

        if i0 == 256 goto label1;

        if i0 == 257 goto label1;

        i1 = specialinvoke r0.<android.media.ImageReader$SurfaceImage: int nativeGetWidth()>();

        goto label2;

     label1:
        $r1 = r0.<android.media.ImageReader$SurfaceImage: android.media.ImageReader this$0>;

        i1 = virtualinvoke $r1.<android.media.ImageReader: int getWidth()>();

     label2:
        return i1;
    }

    boolean isAttachable()
    {
        android.media.ImageReader$SurfaceImage r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;

        r0 := @this: android.media.ImageReader$SurfaceImage;

        virtualinvoke r0.<android.media.ImageReader$SurfaceImage: void throwISEIfImageIsInvalid()>();

        $r1 = r0.<android.media.ImageReader$SurfaceImage: java.util.concurrent.atomic.AtomicBoolean mIsDetached>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        return $z0;
    }

    public void setTimestamp(long)
    {
        android.media.ImageReader$SurfaceImage r0;
        long l0;

        r0 := @this: android.media.ImageReader$SurfaceImage;

        l0 := @parameter0: long;

        virtualinvoke r0.<android.media.ImageReader$SurfaceImage: void throwISEIfImageIsInvalid()>();

        r0.<android.media.ImageReader$SurfaceImage: long mTimestamp> = l0;

        return;
    }
}
