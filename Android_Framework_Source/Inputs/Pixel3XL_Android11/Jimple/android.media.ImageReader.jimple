public class android.media.ImageReader extends java.lang.Object implements java.lang.AutoCloseable
{
    private static final int ACQUIRE_MAX_IMAGES;
    private static final int ACQUIRE_NO_BUFS;
    private static final int ACQUIRE_SUCCESS;
    private java.util.List mAcquiredImages;
    private final java.lang.Object mCloseLock;
    private int mEstimatedNativeAllocBytes;
    private final int mFormat;
    private final int mHeight;
    private boolean mIsReaderValid;
    private android.media.ImageReader$OnImageAvailableListener mListener;
    private android.media.ImageReader$ListenerHandler mListenerHandler;
    private final java.lang.Object mListenerLock;
    private final int mMaxImages;
    private long mNativeContext;
    private final int mNumPlanes;
    private final android.view.Surface mSurface;
    private final int mWidth;

    static void <clinit>()
    {
        <android.media.ImageReader: int ACQUIRE_SUCCESS> = 0;

        <android.media.ImageReader: int ACQUIRE_NO_BUFS> = 1;

        <android.media.ImageReader: int ACQUIRE_MAX_IMAGES> = 2;

        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("media_jni");

        staticinvoke <android.media.ImageReader: void nativeClassInit()>();

        return;
    }

    protected void <init>(int, int, int, int, long)
    {
        android.media.ImageReader r0;
        int i0, i1, i2, i3, $i5, $i6, $i7;
        long l4;
        java.lang.Object $r1, $r2;
        java.util.concurrent.CopyOnWriteArrayList $r3;
        java.lang.IllegalArgumentException $r4, $r5, $r6;
        java.lang.ref.WeakReference $r7;
        android.view.Surface $r8;
        dalvik.system.VMRuntime $r9;

        r0 := @this: android.media.ImageReader;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        l4 := @parameter4: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<android.media.ImageReader: java.lang.Object mListenerLock> = $r1;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<android.media.ImageReader: java.lang.Object mCloseLock> = $r2;

        r0.<android.media.ImageReader: boolean mIsReaderValid> = 0;

        $r3 = new java.util.concurrent.CopyOnWriteArrayList;

        specialinvoke $r3.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();

        r0.<android.media.ImageReader: java.util.List mAcquiredImages> = $r3;

        r0.<android.media.ImageReader: int mWidth> = i0;

        r0.<android.media.ImageReader: int mHeight> = i1;

        r0.<android.media.ImageReader: int mFormat> = i2;

        r0.<android.media.ImageReader: int mMaxImages> = i3;

        if i0 < 1 goto label3;

        if i1 < 1 goto label3;

        if i3 < 1 goto label2;

        if i2 == 17 goto label1;

        $i5 = staticinvoke <android.media.ImageUtils: int getNumPlanesForFormat(int)>(i2);

        r0.<android.media.ImageReader: int mNumPlanes> = $i5;

        $r7 = new java.lang.ref.WeakReference;

        specialinvoke $r7.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r0);

        specialinvoke r0.<android.media.ImageReader: void nativeInit(java.lang.Object,int,int,int,int,long)>($r7, i0, i1, i2, i3, l4);

        $r8 = specialinvoke r0.<android.media.ImageReader: android.view.Surface nativeGetSurface()>();

        r0.<android.media.ImageReader: android.view.Surface mSurface> = $r8;

        r0.<android.media.ImageReader: boolean mIsReaderValid> = 1;

        $i6 = staticinvoke <android.media.ImageUtils: int getEstimatedNativeAllocBytes(int,int,int,int)>(i0, i1, i2, 1);

        r0.<android.media.ImageReader: int mEstimatedNativeAllocBytes> = $i6;

        $r9 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        $i7 = r0.<android.media.ImageReader: int mEstimatedNativeAllocBytes>;

        virtualinvoke $r9.<dalvik.system.VMRuntime: void registerNativeAllocation(int)>($i7);

        return;

     label1:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("NV21 format is not supported");

        throw $r6;

     label2:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Maximum outstanding image count must be at least 1");

        throw $r5;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The image dimensions must be positive");

        throw $r4;
    }

    static java.lang.Object access$300(android.media.ImageReader)
    {
        android.media.ImageReader r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.media.ImageReader;

        $r1 = r0.<android.media.ImageReader: java.lang.Object mListenerLock>;

        return $r1;
    }

    static android.media.ImageReader$OnImageAvailableListener access$400(android.media.ImageReader)
    {
        android.media.ImageReader r0;
        android.media.ImageReader$OnImageAvailableListener $r1;

        r0 := @parameter0: android.media.ImageReader;

        $r1 = r0.<android.media.ImageReader: android.media.ImageReader$OnImageAvailableListener mListener>;

        return $r1;
    }

    static java.lang.Object access$500(android.media.ImageReader)
    {
        android.media.ImageReader r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.media.ImageReader;

        $r1 = r0.<android.media.ImageReader: java.lang.Object mCloseLock>;

        return $r1;
    }

    static boolean access$600(android.media.ImageReader)
    {
        android.media.ImageReader r0;
        boolean $z0;

        r0 := @parameter0: android.media.ImageReader;

        $z0 = r0.<android.media.ImageReader: boolean mIsReaderValid>;

        return $z0;
    }

    static void access$700(android.media.ImageReader, android.media.Image)
    {
        android.media.ImageReader r0;
        android.media.Image r1;

        r0 := @parameter0: android.media.ImageReader;

        r1 := @parameter1: android.media.Image;

        specialinvoke r0.<android.media.ImageReader: void releaseImage(android.media.Image)>(r1);

        return;
    }

    static int access$800(android.media.ImageReader)
    {
        android.media.ImageReader r0;
        int $i0;

        r0 := @parameter0: android.media.ImageReader;

        $i0 = r0.<android.media.ImageReader: int mNumPlanes>;

        return $i0;
    }

    static int access$900(android.media.ImageReader)
    {
        android.media.ImageReader r0;
        int $i0;

        r0 := @parameter0: android.media.ImageReader;

        $i0 = r0.<android.media.ImageReader: int mFormat>;

        return $i0;
    }

    private int acquireNextSurfaceImage(android.media.ImageReader$SurfaceImage)
    {
        android.media.ImageReader r0;
        java.lang.Object r1;
        java.lang.StringBuilder r2;
        boolean $z0;
        java.util.List $r3;
        java.lang.String $r6;
        java.lang.Throwable $r7;
        android.media.ImageReader$SurfaceImage r8;
        int i0;
        java.lang.AssertionError r9;

        r0 := @this: android.media.ImageReader;

        r8 := @parameter0: android.media.ImageReader$SurfaceImage;

        r1 = r0.<android.media.ImageReader: java.lang.Object mCloseLock>;

        entermonitor r1;

        i0 = 1;

     label01:
        $z0 = r0.<android.media.ImageReader: boolean mIsReaderValid>;

        if $z0 == 0 goto label02;

        i0 = specialinvoke r0.<android.media.ImageReader: int nativeImageSetup(android.media.Image)>(r8);

     label02:
        if i0 == 0 goto label04;

        if i0 == 1 goto label05;

        if i0 != 2 goto label03;

        goto label05;

     label03:
        r9 = new java.lang.AssertionError;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown nativeImageSetup return code ");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r9.<java.lang.AssertionError: void <init>(java.lang.Object)>($r6);

        throw r9;

     label04:
        r8.<android.media.ImageReader$SurfaceImage: boolean mIsImageValid> = 1;

     label05:
        if i0 != 0 goto label07;

     label06:
        $r3 = r0.<android.media.ImageReader: java.util.List mAcquiredImages>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r8);

     label07:
        exitmonitor r1;

     label08:
        return i0;

     label09:
        $r7 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    private boolean isImageOwnedbyMe(android.media.Image)
    {
        android.media.ImageReader r0, $r3;
        android.media.Image r1;
        boolean z0, z1;
        android.media.ImageReader$SurfaceImage $r2;

        r0 := @this: android.media.ImageReader;

        r1 := @parameter0: android.media.Image;

        z0 = r1 instanceof android.media.ImageReader$SurfaceImage;

        z1 = 0;

        if z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = (android.media.ImageReader$SurfaceImage) r1;

        $r3 = virtualinvoke $r2.<android.media.ImageReader$SurfaceImage: android.media.ImageReader getReader()>();

        if $r3 != r0 goto label2;

        z1 = 1;

     label2:
        return z1;
    }

    private static native void nativeClassInit();

    private synchronized native void nativeClose();

    private synchronized native int nativeDetachImage(android.media.Image);

    private synchronized native void nativeDiscardFreeBuffers();

    private synchronized native android.view.Surface nativeGetSurface();

    private synchronized native int nativeImageSetup(android.media.Image);

    private synchronized native void nativeInit(java.lang.Object, int, int, int, int, long);

    private synchronized native void nativeReleaseImage(android.media.Image);

    public static android.media.ImageReader newInstance(int, int, int, int)
    {
        int i0, i1, i2, i3;
        android.media.ImageReader $r0;
        long l4;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        if i2 != 34 goto label1;

        l4 = 0L;

        goto label2;

     label1:
        l4 = 3L;

     label2:
        $r0 = new android.media.ImageReader;

        specialinvoke $r0.<android.media.ImageReader: void <init>(int,int,int,int,long)>(i0, i1, i2, i3, l4);

        return $r0;
    }

    public static android.media.ImageReader newInstance(int, int, int, int, long)
    {
        int i0, i1, i2, i3;
        long l4;
        android.media.ImageReader $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        l4 := @parameter4: long;

        $r0 = new android.media.ImageReader;

        specialinvoke $r0.<android.media.ImageReader: void <init>(int,int,int,int,long)>(i0, i1, i2, i3, l4);

        return $r0;
    }

    private static void postEventFromNative(java.lang.Object)
    {
        java.lang.ref.WeakReference $r0;
        java.lang.Object $r1, r3, r5;
        java.lang.Throwable $r2;
        android.media.ImageReader r4;
        android.media.ImageReader$ListenerHandler r6;

        r3 := @parameter0: java.lang.Object;

        $r0 = (java.lang.ref.WeakReference) r3;

        $r1 = virtualinvoke $r0.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r4 = (android.media.ImageReader) $r1;

        if r4 != null goto label1;

        return;

     label1:
        r5 = r4.<android.media.ImageReader: java.lang.Object mListenerLock>;

        entermonitor r5;

     label2:
        r6 = r4.<android.media.ImageReader: android.media.ImageReader$ListenerHandler mListenerHandler>;

        exitmonitor r5;

     label3:
        if r6 == null goto label4;

        virtualinvoke r6.<android.os.Handler: boolean sendEmptyMessage(int)>(0);

     label4:
        return;

     label5:
        $r2 := @caughtexception;

     label6:
        exitmonitor r5;

     label7:
        throw $r2;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void releaseImage(android.media.Image)
    {
        android.media.ImageReader r0, $r4;
        android.media.Image r1;
        android.media.ImageReader$SurfaceImage r2;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r3, $r5;
        java.util.List $r6, $r7;

        r0 := @this: android.media.ImageReader;

        r1 := @parameter0: android.media.Image;

        $z0 = r1 instanceof android.media.ImageReader$SurfaceImage;

        if $z0 == 0 goto label3;

        r2 = (android.media.ImageReader$SurfaceImage) r1;

        $z1 = r2.<android.media.ImageReader$SurfaceImage: boolean mIsImageValid>;

        if $z1 != 0 goto label1;

        return;

     label1:
        $r4 = virtualinvoke r2.<android.media.ImageReader$SurfaceImage: android.media.ImageReader getReader()>();

        if $r4 != r0 goto label2;

        $r6 = r0.<android.media.ImageReader: java.util.List mAcquiredImages>;

        $z2 = interfaceinvoke $r6.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z2 == 0 goto label2;

        staticinvoke <android.media.ImageReader$SurfaceImage: void access$000(android.media.ImageReader$SurfaceImage)>(r2);

        specialinvoke r0.<android.media.ImageReader: void nativeReleaseImage(android.media.Image)>(r1);

        r2.<android.media.ImageReader$SurfaceImage: boolean mIsImageValid> = 0;

        $r7 = r0.<android.media.ImageReader: java.util.List mAcquiredImages>;

        interfaceinvoke $r7.<java.util.List: boolean remove(java.lang.Object)>(r1);

        return;

     label2:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("This image was not produced by this ImageReader");

        throw $r5;

     label3:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("This image was not produced by an ImageReader");

        throw $r3;
    }

    public android.media.Image acquireLatestImage()
    {
        android.media.ImageReader r0;
        java.lang.Throwable $r2;
        android.media.Image r3, r4, r5;

        r0 := @this: android.media.ImageReader;

        r3 = virtualinvoke r0.<android.media.ImageReader: android.media.Image acquireNextImage()>();

        r4 = r3;

        if r3 != null goto label1;

        return null;

     label1:
        r5 = virtualinvoke r0.<android.media.ImageReader: android.media.Image acquireNextImageNoThrowISE()>();

     label2:
        if r5 != null goto label4;

        goto label3;

     label3:
        return r4;

     label4:
        virtualinvoke r4.<android.media.Image: void close()>();

     label5:
        r4 = r5;

        goto label1;

     label6:
        $r2 := @caughtexception;

        if r4 == null goto label7;

        virtualinvoke r4.<android.media.Image: void close()>();

     label7:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public android.media.Image acquireNextImage()
    {
        android.media.ImageReader r0;
        int i0, $i1, $i2;
        android.media.ImageReader$SurfaceImage $r1;
        java.lang.IllegalStateException $r2;
        java.lang.Object[] $r3;
        java.lang.Integer $r4;
        java.lang.String $r5, $r10;
        java.lang.StringBuilder $r6;
        java.lang.AssertionError $r9;

        r0 := @this: android.media.ImageReader;

        $r1 = new android.media.ImageReader$SurfaceImage;

        $i1 = r0.<android.media.ImageReader: int mFormat>;

        specialinvoke $r1.<android.media.ImageReader$SurfaceImage: void <init>(android.media.ImageReader,int)>(r0, $i1);

        i0 = specialinvoke r0.<android.media.ImageReader: int acquireNextSurfaceImage(android.media.ImageReader$SurfaceImage)>($r1);

        if i0 == 0 goto label3;

        if i0 == 1 goto label2;

        if i0 == 2 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown nativeImageSetup return code ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = new java.lang.AssertionError;

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.AssertionError: void <init>(java.lang.Object)>($r10);

        throw $r9;

     label1:
        $r2 = new java.lang.IllegalStateException;

        $r3 = newarray (java.lang.Object)[1];

        $i2 = r0.<android.media.ImageReader: int mMaxImages>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("maxImages (%d) has already been acquired, call #close before acquiring more.", $r3);

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r2;

     label2:
        return null;

     label3:
        return $r1;
    }

    public android.media.Image acquireNextImageNoThrowISE()
    {
        android.media.ImageReader r0;
        android.media.ImageReader$SurfaceImage $r1, r2;
        int $i0, $i1;

        r0 := @this: android.media.ImageReader;

        $r1 = new android.media.ImageReader$SurfaceImage;

        $i0 = r0.<android.media.ImageReader: int mFormat>;

        specialinvoke $r1.<android.media.ImageReader$SurfaceImage: void <init>(android.media.ImageReader,int)>(r0, $i0);

        r2 = $r1;

        $i1 = specialinvoke r0.<android.media.ImageReader: int acquireNextSurfaceImage(android.media.ImageReader$SurfaceImage)>($r1);

        if $i1 != 0 goto label1;

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    public void close()
    {
        android.media.ImageReader r0;
        java.util.List $r1, $r2;
        int $i0, $i1;
        dalvik.system.VMRuntime $r3;
        java.lang.Object $r4, r8;
        android.media.Image $r5;
        java.lang.Throwable $r6;
        android.view.Surface r7;
        java.util.Iterator r9;
        boolean $z0;

        r0 := @this: android.media.ImageReader;

        virtualinvoke r0.<android.media.ImageReader: void setOnImageAvailableListener(android.media.ImageReader$OnImageAvailableListener,android.os.Handler)>(null, null);

        r7 = r0.<android.media.ImageReader: android.view.Surface mSurface>;

        if r7 == null goto label01;

        virtualinvoke r7.<android.view.Surface: void release()>();

     label01:
        r8 = r0.<android.media.ImageReader: java.lang.Object mCloseLock>;

        entermonitor r8;

     label02:
        r0.<android.media.ImageReader: boolean mIsReaderValid> = 0;

        $r1 = r0.<android.media.ImageReader: java.util.List mAcquiredImages>;

        r9 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        $r4 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (android.media.Image) $r4;

        virtualinvoke $r5.<android.media.Image: void close()>();

     label04:
        goto label03;

     label05:
        $r2 = r0.<android.media.ImageReader: java.util.List mAcquiredImages>;

        interfaceinvoke $r2.<java.util.List: void clear()>();

        specialinvoke r0.<android.media.ImageReader: void nativeClose()>();

        $i0 = r0.<android.media.ImageReader: int mEstimatedNativeAllocBytes>;

        if $i0 <= 0 goto label06;

        $r3 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        $i1 = r0.<android.media.ImageReader: int mEstimatedNativeAllocBytes>;

        virtualinvoke $r3.<dalvik.system.VMRuntime: void registerNativeFree(int)>($i1);

        r0.<android.media.ImageReader: int mEstimatedNativeAllocBytes> = 0;

     label06:
        exitmonitor r8;

     label07:
        return;

     label08:
        $r6 := @caughtexception;

     label09:
        exitmonitor r8;

     label10:
        throw $r6;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    void detachImage(android.media.Image)
    {
        android.media.ImageReader r0;
        android.media.Image r1;
        android.media.ImageReader$SurfaceImage r2;
        java.lang.IllegalArgumentException $r3, $r4;
        boolean $z0, $z1;
        java.lang.IllegalStateException $r5;

        r0 := @this: android.media.ImageReader;

        r1 := @parameter0: android.media.Image;

        if r1 == null goto label3;

        $z0 = specialinvoke r0.<android.media.ImageReader: boolean isImageOwnedbyMe(android.media.Image)>(r1);

        if $z0 == 0 goto label2;

        r2 = (android.media.ImageReader$SurfaceImage) r1;

        virtualinvoke r2.<android.media.ImageReader$SurfaceImage: void throwISEIfImageIsInvalid()>();

        $z1 = virtualinvoke r2.<android.media.ImageReader$SurfaceImage: boolean isAttachable()>();

        if $z1 != 0 goto label1;

        specialinvoke r0.<android.media.ImageReader: int nativeDetachImage(android.media.Image)>(r1);

        staticinvoke <android.media.ImageReader$SurfaceImage: void access$000(android.media.ImageReader$SurfaceImage)>(r2);

        staticinvoke <android.media.ImageReader$SurfaceImage: android.media.ImageReader$SurfaceImage$SurfacePlane[] access$102(android.media.ImageReader$SurfaceImage,android.media.ImageReader$SurfaceImage$SurfacePlane[])>(r2, null);

        staticinvoke <android.media.ImageReader$SurfaceImage: void access$200(android.media.ImageReader$SurfaceImage,boolean)>(r2, 1);

        return;

     label1:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Image was already detached from this ImageReader");

        throw $r5;

     label2:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Trying to detach an image that is not owned by this ImageReader");

        throw $r4;

     label3:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("input image must not be null");

        throw $r3;
    }

    public void discardFreeBuffers()
    {
        android.media.ImageReader r0;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: android.media.ImageReader;

        r1 = r0.<android.media.ImageReader: java.lang.Object mCloseLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.media.ImageReader: void nativeDiscardFreeBuffers()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.media.ImageReader r0;
        java.lang.Throwable $r2;

        r0 := @this: android.media.ImageReader;

     label1:
        virtualinvoke r0.<android.media.ImageReader: void close()>();

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label3:
        $r2 := @caughtexception;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int getHeight()
    {
        android.media.ImageReader r0;
        int $i0;

        r0 := @this: android.media.ImageReader;

        $i0 = r0.<android.media.ImageReader: int mHeight>;

        return $i0;
    }

    public int getImageFormat()
    {
        android.media.ImageReader r0;
        int $i0;

        r0 := @this: android.media.ImageReader;

        $i0 = r0.<android.media.ImageReader: int mFormat>;

        return $i0;
    }

    public int getMaxImages()
    {
        android.media.ImageReader r0;
        int $i0;

        r0 := @this: android.media.ImageReader;

        $i0 = r0.<android.media.ImageReader: int mMaxImages>;

        return $i0;
    }

    public android.view.Surface getSurface()
    {
        android.media.ImageReader r0;
        android.view.Surface $r1;

        r0 := @this: android.media.ImageReader;

        $r1 = r0.<android.media.ImageReader: android.view.Surface mSurface>;

        return $r1;
    }

    public int getWidth()
    {
        android.media.ImageReader r0;
        int $i0;

        r0 := @this: android.media.ImageReader;

        $i0 = r0.<android.media.ImageReader: int mWidth>;

        return $i0;
    }

    public void setOnImageAvailableListener(android.media.ImageReader$OnImageAvailableListener, android.os.Handler)
    {
        android.media.ImageReader r0;
        java.lang.Object r1;
        android.media.ImageReader$ListenerHandler r2, $r3, $r4;
        android.os.Looper $r5, r9;
        java.lang.Throwable $r6;
        android.media.ImageReader$OnImageAvailableListener r7;
        android.os.Handler r8;
        java.lang.IllegalArgumentException r10;

        r0 := @this: android.media.ImageReader;

        r7 := @parameter0: android.media.ImageReader$OnImageAvailableListener;

        r8 := @parameter1: android.os.Handler;

        r1 = r0.<android.media.ImageReader: java.lang.Object mListenerLock>;

        entermonitor r1;

        if r7 == null goto label10;

        if r8 == null goto label03;

     label01:
        r9 = virtualinvoke r8.<android.os.Handler: android.os.Looper getLooper()>();

     label02:
        goto label04;

     label03:
        r9 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

     label04:
        if r9 == null goto label09;

     label05:
        $r3 = r0.<android.media.ImageReader: android.media.ImageReader$ListenerHandler mListenerHandler>;

        if $r3 == null goto label06;

        $r4 = r0.<android.media.ImageReader: android.media.ImageReader$ListenerHandler mListenerHandler>;

        $r5 = virtualinvoke $r4.<android.media.ImageReader$ListenerHandler: android.os.Looper getLooper()>();

        if $r5 == r9 goto label07;

     label06:
        r2 = new android.media.ImageReader$ListenerHandler;

        specialinvoke r2.<android.media.ImageReader$ListenerHandler: void <init>(android.media.ImageReader,android.os.Looper)>(r0, r9);

        r0.<android.media.ImageReader: android.media.ImageReader$ListenerHandler mListenerHandler> = r2;

     label07:
        r0.<android.media.ImageReader: android.media.ImageReader$OnImageAvailableListener mListener> = r7;

     label08:
        goto label11;

     label09:
        r10 = new java.lang.IllegalArgumentException;

        specialinvoke r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("handler is null but the current thread is not a looper");

        throw r10;

     label10:
        r0.<android.media.ImageReader: android.media.ImageReader$OnImageAvailableListener mListener> = null;

        r0.<android.media.ImageReader: android.media.ImageReader$ListenerHandler mListenerHandler> = null;

     label11:
        exitmonitor r1;

     label12:
        return;

     label13:
        $r6 := @caughtexception;

     label14:
        exitmonitor r1;

     label15:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }
}
