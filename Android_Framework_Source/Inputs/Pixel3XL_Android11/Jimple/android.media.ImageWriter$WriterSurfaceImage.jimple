class android.media.ImageWriter$WriterSurfaceImage extends android.media.Image
{
    private final long DEFAULT_TIMESTAMP;
    private int mFormat;
    private int mHeight;
    private long mNativeBuffer;
    private int mNativeFenceFd;
    private android.media.ImageWriter mOwner;
    private android.media.ImageWriter$WriterSurfaceImage$SurfacePlane[] mPlanes;
    private int mScalingMode;
    private long mTimestamp;
    private int mTransform;
    private int mWidth;

    public void <init>(android.media.ImageWriter)
    {
        android.media.ImageWriter$WriterSurfaceImage r0;
        android.media.ImageWriter r1;

        r0 := @this: android.media.ImageWriter$WriterSurfaceImage;

        r1 := @parameter0: android.media.ImageWriter;

        specialinvoke r0.<android.media.Image: void <init>()>();

        r0.<android.media.ImageWriter$WriterSurfaceImage: int mNativeFenceFd> = -1;

        r0.<android.media.ImageWriter$WriterSurfaceImage: int mHeight> = -1;

        r0.<android.media.ImageWriter$WriterSurfaceImage: int mWidth> = -1;

        r0.<android.media.ImageWriter$WriterSurfaceImage: int mFormat> = -1;

        r0.<android.media.ImageWriter$WriterSurfaceImage: long DEFAULT_TIMESTAMP> = -9223372036854775808L;

        r0.<android.media.ImageWriter$WriterSurfaceImage: long mTimestamp> = -9223372036854775808L;

        r0.<android.media.ImageWriter$WriterSurfaceImage: int mTransform> = 0;

        r0.<android.media.ImageWriter$WriterSurfaceImage: int mScalingMode> = 0;

        r0.<android.media.ImageWriter$WriterSurfaceImage: android.media.ImageWriter mOwner> = r1;

        return;
    }

    static void access$000(android.media.ImageWriter$WriterSurfaceImage)
    {
        android.media.ImageWriter$WriterSurfaceImage r0;

        r0 := @parameter0: android.media.ImageWriter$WriterSurfaceImage;

        specialinvoke r0.<android.media.ImageWriter$WriterSurfaceImage: void clearSurfacePlanes()>();

        return;
    }

    private void clearSurfacePlanes()
    {
        android.media.ImageWriter$WriterSurfaceImage r0;
        android.media.ImageWriter$WriterSurfaceImage$SurfacePlane[] r1, $r2, $r5;
        boolean $z0;
        int $i0, i1;
        android.media.ImageWriter$WriterSurfaceImage$SurfacePlane $r3, $r4;

        r0 := @this: android.media.ImageWriter$WriterSurfaceImage;

        $z0 = r0.<android.media.ImageWriter$WriterSurfaceImage: boolean mIsImageValid>;

        if $z0 == 0 goto label3;

        $r2 = r0.<android.media.ImageWriter$WriterSurfaceImage: android.media.ImageWriter$WriterSurfaceImage$SurfacePlane[] mPlanes>;

        if $r2 == null goto label3;

        i1 = 0;

     label1:
        r1 = r0.<android.media.ImageWriter$WriterSurfaceImage: android.media.ImageWriter$WriterSurfaceImage$SurfacePlane[] mPlanes>;

        $i0 = lengthof r1;

        if i1 >= $i0 goto label3;

        $r3 = r1[i1];

        if $r3 == null goto label2;

        $r4 = r1[i1];

        staticinvoke <android.media.ImageWriter$WriterSurfaceImage$SurfacePlane: void access$400(android.media.ImageWriter$WriterSurfaceImage$SurfacePlane)>($r4);

        $r5 = r0.<android.media.ImageWriter$WriterSurfaceImage: android.media.ImageWriter$WriterSurfaceImage$SurfacePlane[] mPlanes>;

        $r5[i1] = null;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    private synchronized native android.media.ImageWriter$WriterSurfaceImage$SurfacePlane[] nativeCreatePlanes(int, int);

    private synchronized native int nativeGetFormat();

    private synchronized native android.hardware.HardwareBuffer nativeGetHardwareBuffer();

    private synchronized native int nativeGetHeight();

    private synchronized native int nativeGetWidth();

    public void close()
    {
        android.media.ImageWriter$WriterSurfaceImage r0;
        boolean $z0;
        android.media.ImageWriter $r1;

        r0 := @this: android.media.ImageWriter$WriterSurfaceImage;

        $z0 = r0.<android.media.ImageWriter$WriterSurfaceImage: boolean mIsImageValid>;

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<android.media.ImageWriter$WriterSurfaceImage: android.media.ImageWriter getOwner()>();

        staticinvoke <android.media.ImageWriter: void access$300(android.media.ImageWriter,android.media.Image)>($r1, r0);

     label1:
        return;
    }

    protected final void finalize() throws java.lang.Throwable
    {
        android.media.ImageWriter$WriterSurfaceImage r0;
        java.lang.Throwable $r2;

        r0 := @this: android.media.ImageWriter$WriterSurfaceImage;

     label1:
        virtualinvoke r0.<android.media.ImageWriter$WriterSurfaceImage: void close()>();

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label3:
        $r2 := @caughtexception;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int getFormat()
    {
        android.media.ImageWriter$WriterSurfaceImage r0;
        int $i0, $i1, $i2;

        r0 := @this: android.media.ImageWriter$WriterSurfaceImage;

        virtualinvoke r0.<android.media.ImageWriter$WriterSurfaceImage: void throwISEIfImageIsInvalid()>();

        $i0 = r0.<android.media.ImageWriter$WriterSurfaceImage: int mFormat>;

        if $i0 != -1 goto label1;

        $i2 = specialinvoke r0.<android.media.ImageWriter$WriterSurfaceImage: int nativeGetFormat()>();

        r0.<android.media.ImageWriter$WriterSurfaceImage: int mFormat> = $i2;

     label1:
        $i1 = r0.<android.media.ImageWriter$WriterSurfaceImage: int mFormat>;

        return $i1;
    }

    public android.hardware.HardwareBuffer getHardwareBuffer()
    {
        android.media.ImageWriter$WriterSurfaceImage r0;
        android.hardware.HardwareBuffer $r1;

        r0 := @this: android.media.ImageWriter$WriterSurfaceImage;

        virtualinvoke r0.<android.media.ImageWriter$WriterSurfaceImage: void throwISEIfImageIsInvalid()>();

        $r1 = specialinvoke r0.<android.media.ImageWriter$WriterSurfaceImage: android.hardware.HardwareBuffer nativeGetHardwareBuffer()>();

        return $r1;
    }

    public int getHeight()
    {
        android.media.ImageWriter$WriterSurfaceImage r0;
        int $i0, $i1, $i2;

        r0 := @this: android.media.ImageWriter$WriterSurfaceImage;

        virtualinvoke r0.<android.media.ImageWriter$WriterSurfaceImage: void throwISEIfImageIsInvalid()>();

        $i0 = r0.<android.media.ImageWriter$WriterSurfaceImage: int mHeight>;

        if $i0 != -1 goto label1;

        $i2 = specialinvoke r0.<android.media.ImageWriter$WriterSurfaceImage: int nativeGetHeight()>();

        r0.<android.media.ImageWriter$WriterSurfaceImage: int mHeight> = $i2;

     label1:
        $i1 = r0.<android.media.ImageWriter$WriterSurfaceImage: int mHeight>;

        return $i1;
    }

    long getNativeContext()
    {
        android.media.ImageWriter$WriterSurfaceImage r0;
        long $l0;

        r0 := @this: android.media.ImageWriter$WriterSurfaceImage;

        virtualinvoke r0.<android.media.ImageWriter$WriterSurfaceImage: void throwISEIfImageIsInvalid()>();

        $l0 = r0.<android.media.ImageWriter$WriterSurfaceImage: long mNativeBuffer>;

        return $l0;
    }

    android.media.ImageWriter getOwner()
    {
        android.media.ImageWriter$WriterSurfaceImage r0;
        android.media.ImageWriter $r1;

        r0 := @this: android.media.ImageWriter$WriterSurfaceImage;

        virtualinvoke r0.<android.media.ImageWriter$WriterSurfaceImage: void throwISEIfImageIsInvalid()>();

        $r1 = r0.<android.media.ImageWriter$WriterSurfaceImage: android.media.ImageWriter mOwner>;

        return $r1;
    }

    volatile java.lang.Object getOwner()
    {
        android.media.ImageWriter$WriterSurfaceImage r0;
        android.media.ImageWriter $r1;

        r0 := @this: android.media.ImageWriter$WriterSurfaceImage;

        $r1 = virtualinvoke r0.<android.media.ImageWriter$WriterSurfaceImage: android.media.ImageWriter getOwner()>();

        return $r1;
    }

    public android.media.Image$Plane[] getPlanes()
    {
        android.media.ImageWriter$WriterSurfaceImage r0;
        android.media.ImageWriter$WriterSurfaceImage$SurfacePlane[] $r1, $r2, $r6;
        java.lang.Object $r3;
        android.media.Image$Plane[] $r4;
        int $i0, $i1, $i2;
        android.media.ImageWriter $r5;

        r0 := @this: android.media.ImageWriter$WriterSurfaceImage;

        virtualinvoke r0.<android.media.ImageWriter$WriterSurfaceImage: void throwISEIfImageIsInvalid()>();

        $r1 = r0.<android.media.ImageWriter$WriterSurfaceImage: android.media.ImageWriter$WriterSurfaceImage$SurfacePlane[] mPlanes>;

        if $r1 != null goto label1;

        $i0 = virtualinvoke r0.<android.media.ImageWriter$WriterSurfaceImage: int getFormat()>();

        $i1 = staticinvoke <android.media.ImageUtils: int getNumPlanesForFormat(int)>($i0);

        $r5 = virtualinvoke r0.<android.media.ImageWriter$WriterSurfaceImage: android.media.ImageWriter getOwner()>();

        $i2 = virtualinvoke $r5.<android.media.ImageWriter: int getFormat()>();

        $r6 = specialinvoke r0.<android.media.ImageWriter$WriterSurfaceImage: android.media.ImageWriter$WriterSurfaceImage$SurfacePlane[] nativeCreatePlanes(int,int)>($i1, $i2);

        r0.<android.media.ImageWriter$WriterSurfaceImage: android.media.ImageWriter$WriterSurfaceImage$SurfacePlane[] mPlanes> = $r6;

     label1:
        $r2 = r0.<android.media.ImageWriter$WriterSurfaceImage: android.media.ImageWriter$WriterSurfaceImage$SurfacePlane[] mPlanes>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (android.media.Image$Plane[]) $r3;

        return $r4;
    }

    public int getScalingMode()
    {
        android.media.ImageWriter$WriterSurfaceImage r0;
        int $i0;

        r0 := @this: android.media.ImageWriter$WriterSurfaceImage;

        virtualinvoke r0.<android.media.ImageWriter$WriterSurfaceImage: void throwISEIfImageIsInvalid()>();

        $i0 = r0.<android.media.ImageWriter$WriterSurfaceImage: int mScalingMode>;

        return $i0;
    }

    public long getTimestamp()
    {
        android.media.ImageWriter$WriterSurfaceImage r0;
        long $l0;

        r0 := @this: android.media.ImageWriter$WriterSurfaceImage;

        virtualinvoke r0.<android.media.ImageWriter$WriterSurfaceImage: void throwISEIfImageIsInvalid()>();

        $l0 = r0.<android.media.ImageWriter$WriterSurfaceImage: long mTimestamp>;

        return $l0;
    }

    public int getTransform()
    {
        android.media.ImageWriter$WriterSurfaceImage r0;
        int $i0;

        r0 := @this: android.media.ImageWriter$WriterSurfaceImage;

        virtualinvoke r0.<android.media.ImageWriter$WriterSurfaceImage: void throwISEIfImageIsInvalid()>();

        $i0 = r0.<android.media.ImageWriter$WriterSurfaceImage: int mTransform>;

        return $i0;
    }

    public int getWidth()
    {
        android.media.ImageWriter$WriterSurfaceImage r0;
        int $i0, $i1, $i2;

        r0 := @this: android.media.ImageWriter$WriterSurfaceImage;

        virtualinvoke r0.<android.media.ImageWriter$WriterSurfaceImage: void throwISEIfImageIsInvalid()>();

        $i0 = r0.<android.media.ImageWriter$WriterSurfaceImage: int mWidth>;

        if $i0 != -1 goto label1;

        $i2 = specialinvoke r0.<android.media.ImageWriter$WriterSurfaceImage: int nativeGetWidth()>();

        r0.<android.media.ImageWriter$WriterSurfaceImage: int mWidth> = $i2;

     label1:
        $i1 = r0.<android.media.ImageWriter$WriterSurfaceImage: int mWidth>;

        return $i1;
    }

    boolean isAttachable()
    {
        android.media.ImageWriter$WriterSurfaceImage r0;

        r0 := @this: android.media.ImageWriter$WriterSurfaceImage;

        virtualinvoke r0.<android.media.ImageWriter$WriterSurfaceImage: void throwISEIfImageIsInvalid()>();

        return 0;
    }

    public void setTimestamp(long)
    {
        android.media.ImageWriter$WriterSurfaceImage r0;
        long l0;

        r0 := @this: android.media.ImageWriter$WriterSurfaceImage;

        l0 := @parameter0: long;

        virtualinvoke r0.<android.media.ImageWriter$WriterSurfaceImage: void throwISEIfImageIsInvalid()>();

        r0.<android.media.ImageWriter$WriterSurfaceImage: long mTimestamp> = l0;

        return;
    }
}
