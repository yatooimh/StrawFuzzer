public final class android.media.MediaCas extends java.lang.Object implements java.lang.AutoCloseable
{
    public static final int PLUGIN_STATUS_PHYSICAL_MODULE_CHANGED;
    public static final int PLUGIN_STATUS_SESSION_NUMBER_CHANGED;
    public static final int SCRAMBLING_MODE_AES128;
    public static final int SCRAMBLING_MODE_AES_ECB;
    public static final int SCRAMBLING_MODE_AES_SCTE52;
    public static final int SCRAMBLING_MODE_DVB_CISSA_V1;
    public static final int SCRAMBLING_MODE_DVB_CSA1;
    public static final int SCRAMBLING_MODE_DVB_CSA2;
    public static final int SCRAMBLING_MODE_DVB_CSA3_ENHANCE;
    public static final int SCRAMBLING_MODE_DVB_CSA3_MINIMAL;
    public static final int SCRAMBLING_MODE_DVB_CSA3_STANDARD;
    public static final int SCRAMBLING_MODE_DVB_IDSA;
    public static final int SCRAMBLING_MODE_MULTI2;
    public static final int SCRAMBLING_MODE_RESERVED;
    public static final int SCRAMBLING_MODE_TDES_ECB;
    public static final int SCRAMBLING_MODE_TDES_SCTE52;
    public static final int SESSION_USAGE_LIVE;
    public static final int SESSION_USAGE_PLAYBACK;
    public static final int SESSION_USAGE_RECORD;
    public static final int SESSION_USAGE_TIMESHIFT;
    private static final java.lang.String TAG;
    private static final android.util.Singleton sService;
    private final android.hardware.cas.V1_2.ICasListener$Stub mBinder;
    private int mCasSystemId;
    private int mClientId;
    private android.media.MediaCas$EventHandler mEventHandler;
    private android.os.HandlerThread mHandlerThread;
    private android.hardware.cas.V1_0.ICas mICas;
    private android.hardware.cas.V1_1.ICas mICasV11;
    private android.hardware.cas.V1_2.ICas mICasV12;
    private android.media.MediaCas$EventListener mListener;
    private int mPriorityHint;
    private final android.media.tv.tunerresourcemanager.TunerResourceManager$ResourcesReclaimListener mResourceListener;
    private final java.util.Map mSessionMap;
    private android.media.tv.tunerresourcemanager.TunerResourceManager mTunerResourceManager;
    private java.lang.String mTvInputServiceSessionId;
    private int mUserId;

    static void <clinit>()
    {
        android.media.MediaCas$1 $r0;

        <android.media.MediaCas: java.lang.String TAG> = "MediaCas";

        <android.media.MediaCas: int SESSION_USAGE_TIMESHIFT> = 3;

        <android.media.MediaCas: int SESSION_USAGE_RECORD> = 2;

        <android.media.MediaCas: int SESSION_USAGE_PLAYBACK> = 1;

        <android.media.MediaCas: int SESSION_USAGE_LIVE> = 0;

        <android.media.MediaCas: int SCRAMBLING_MODE_TDES_SCTE52> = 13;

        <android.media.MediaCas: int SCRAMBLING_MODE_TDES_ECB> = 12;

        <android.media.MediaCas: int SCRAMBLING_MODE_RESERVED> = 0;

        <android.media.MediaCas: int SCRAMBLING_MODE_MULTI2> = 8;

        <android.media.MediaCas: int SCRAMBLING_MODE_DVB_IDSA> = 7;

        <android.media.MediaCas: int SCRAMBLING_MODE_DVB_CSA3_STANDARD> = 3;

        <android.media.MediaCas: int SCRAMBLING_MODE_DVB_CSA3_MINIMAL> = 4;

        <android.media.MediaCas: int SCRAMBLING_MODE_DVB_CSA3_ENHANCE> = 5;

        <android.media.MediaCas: int SCRAMBLING_MODE_DVB_CSA2> = 2;

        <android.media.MediaCas: int SCRAMBLING_MODE_DVB_CSA1> = 1;

        <android.media.MediaCas: int SCRAMBLING_MODE_DVB_CISSA_V1> = 6;

        <android.media.MediaCas: int SCRAMBLING_MODE_AES_SCTE52> = 11;

        <android.media.MediaCas: int SCRAMBLING_MODE_AES_ECB> = 10;

        <android.media.MediaCas: int SCRAMBLING_MODE_AES128> = 9;

        <android.media.MediaCas: int PLUGIN_STATUS_SESSION_NUMBER_CHANGED> = 1;

        <android.media.MediaCas: int PLUGIN_STATUS_PHYSICAL_MODULE_CHANGED> = 0;

        $r0 = new android.media.MediaCas$1;

        specialinvoke $r0.<android.media.MediaCas$1: void <init>()>();

        <android.media.MediaCas: android.util.Singleton sService> = $r0;

        return;
    }

    public void <init>(int) throws android.media.MediaCasException$UnsupportedCasException
    {
        android.media.MediaCas r0;
        int i0, $i1;
        java.util.HashMap $r1;
        android.media.MediaCas$2 $r2;
        android.media.MediaCas$3 $r3;
        android.hardware.cas.V1_2.ICasListener$Stub $r4, $r12, $r13;
        android.hardware.cas.V1_1.ICas $r5, r34;
        android.hardware.cas.V1_0.ICas $r6, $r14, $r25;
        java.lang.StringBuilder $r7, $r19, $r26, r39;
        android.media.MediaCasException$UnsupportedCasException $r10, $r22, $r29;
        java.lang.String $r11, $r18, $r23, $r30;
        java.lang.Exception $r15;
        java.lang.Throwable $r24;
        android.hardware.cas.V1_0.IMediaCasService r31;
        android.hardware.cas.V1_2.IMediaCasService r32;
        android.hardware.cas.V1_1.IMediaCasService r33;
        android.hardware.cas.V1_2.ICas r35;

        r0 := @this: android.media.MediaCas;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.media.MediaCas: android.media.tv.tunerresourcemanager.TunerResourceManager mTunerResourceManager> = null;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<android.media.MediaCas: java.util.Map mSessionMap> = $r1;

        $r2 = new android.media.MediaCas$2;

        specialinvoke $r2.<android.media.MediaCas$2: void <init>(android.media.MediaCas)>(r0);

        r0.<android.media.MediaCas: android.hardware.cas.V1_2.ICasListener$Stub mBinder> = $r2;

        $r3 = new android.media.MediaCas$3;

        specialinvoke $r3.<android.media.MediaCas$3: void <init>(android.media.MediaCas)>(r0);

        r0.<android.media.MediaCas: android.media.tv.tunerresourcemanager.TunerResourceManager$ResourcesReclaimListener mResourceListener> = $r3;

     label01:
        r0.<android.media.MediaCas: int mCasSystemId> = i0;

        $i1 = staticinvoke <android.app.ActivityManager: int getCurrentUser()>();

        r0.<android.media.MediaCas: int mUserId> = $i1;

        r31 = staticinvoke <android.media.MediaCas: android.hardware.cas.V1_0.IMediaCasService getService()>();

     label02:
        r32 = staticinvoke <android.hardware.cas.V1_2.IMediaCasService: android.hardware.cas.V1_2.IMediaCasService castFrom(android.os.IHwInterface)>(r31);

     label03:
        if r32 != null goto label10;

     label04:
        r33 = staticinvoke <android.hardware.cas.V1_1.IMediaCasService: android.hardware.cas.V1_1.IMediaCasService castFrom(android.os.IHwInterface)>(r31);

     label05:
        if r33 != null goto label08;

     label06:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("MediaCas", "Used cas@1_0 interface to create plugin");

        $r13 = r0.<android.media.MediaCas: android.hardware.cas.V1_2.ICasListener$Stub mBinder>;

        $r14 = interfaceinvoke r31.<android.hardware.cas.V1_0.IMediaCasService: android.hardware.cas.V1_0.ICas createPlugin(int,android.hardware.cas.V1_0.ICasListener)>(i0, $r13);

        r0.<android.media.MediaCas: android.hardware.cas.V1_0.ICas mICas> = $r14;

     label07:
        goto label09;

     label08:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("MediaCas", "Used cas@1.1 interface to create plugin");

        $r12 = r0.<android.media.MediaCas: android.hardware.cas.V1_2.ICasListener$Stub mBinder>;

        r34 = interfaceinvoke r33.<android.hardware.cas.V1_1.IMediaCasService: android.hardware.cas.V1_1.ICas createPluginExt(int,android.hardware.cas.V1_1.ICasListener)>(i0, $r12);

        r0.<android.media.MediaCas: android.hardware.cas.V1_1.ICas mICasV11> = r34;

        r0.<android.media.MediaCas: android.hardware.cas.V1_0.ICas mICas> = r34;

     label09:
        goto label11;

     label10:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("MediaCas", "Used cas@1.2 interface to create plugin");

        $r4 = r0.<android.media.MediaCas: android.hardware.cas.V1_2.ICasListener$Stub mBinder>;

        $r5 = interfaceinvoke r32.<android.hardware.cas.V1_2.IMediaCasService: android.hardware.cas.V1_1.ICas createPluginExt(int,android.hardware.cas.V1_1.ICasListener)>(i0, $r4);

        r35 = staticinvoke <android.hardware.cas.V1_2.ICas: android.hardware.cas.V1_2.ICas castFrom(android.os.IHwInterface)>($r5);

        r0.<android.media.MediaCas: android.hardware.cas.V1_2.ICas mICasV12> = r35;

        r0.<android.media.MediaCas: android.hardware.cas.V1_1.ICas mICasV11> = r35;

        r0.<android.media.MediaCas: android.hardware.cas.V1_0.ICas mICas> = r35;

     label11:
        $r6 = r0.<android.media.MediaCas: android.hardware.cas.V1_0.ICas mICas>;

        if $r6 == null goto label12;

        goto label17;

     label12:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported CA_system_id ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = new android.media.MediaCasException$UnsupportedCasException;

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<android.media.MediaCasException$UnsupportedCasException: void <init>(java.lang.String)>($r11);

        throw $r10;

     label13:
        $r24 := @caughtexception;

        goto label19;

     label14:
        $r15 := @caughtexception;

     label15:
        r39 = new java.lang.StringBuilder;

        specialinvoke r39.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to create plugin: ");

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r18 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MediaCas", $r18);

        r0.<android.media.MediaCas: android.hardware.cas.V1_0.ICas mICas> = null;

     label16:
        goto label18;

     label17:
        return;

     label18:
        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported CA_system_id ");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r22 = new android.media.MediaCasException$UnsupportedCasException;

        $r23 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<android.media.MediaCasException$UnsupportedCasException: void <init>(java.lang.String)>($r23);

        throw $r22;

     label19:
        $r25 = r0.<android.media.MediaCas: android.hardware.cas.V1_0.ICas mICas>;

        if $r25 != null goto label20;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported CA_system_id ");

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r29 = new android.media.MediaCasException$UnsupportedCasException;

        $r30 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<android.media.MediaCasException$UnsupportedCasException: void <init>(java.lang.String)>($r30);

        throw $r29;

     label20:
        throw $r24;

        catch java.lang.Exception from label01 to label02 with label14;
        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Exception from label02 to label03 with label14;
        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.lang.Exception from label04 to label05 with label14;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Exception from label06 to label07 with label14;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Exception from label08 to label09 with label14;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Exception from label10 to label11 with label14;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label15 to label16 with label13;
    }

    public void <init>(android.content.Context, int, java.lang.String, int) throws android.media.MediaCasException$UnsupportedCasException
    {
        android.media.MediaCas r0;
        android.content.Context r1;
        int i0, i1, $i2;
        java.lang.Object $r3;
        android.media.tv.tunerresourcemanager.ResourceClientProfile $r4;
        android.media.tv.tunerresourcemanager.TunerResourceManager $r5, r9;
        java.util.concurrent.Executor $r6;
        android.media.tv.tunerresourcemanager.TunerResourceManager$ResourcesReclaimListener $r7;
        java.lang.String r8;
        int[] r10;

        r0 := @this: android.media.MediaCas;

        r1 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        r8 := @parameter2: java.lang.String;

        i1 := @parameter3: int;

        specialinvoke r0.<android.media.MediaCas: void <init>(int)>(i0);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "context must not be null");

        $r3 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("tv_tuner_resource_mgr");

        r9 = (android.media.tv.tunerresourcemanager.TunerResourceManager) $r3;

        r0.<android.media.MediaCas: android.media.tv.tunerresourcemanager.TunerResourceManager mTunerResourceManager> = r9;

        if r9 == null goto label1;

        r10 = newarray (int)[1];

        $r4 = new android.media.tv.tunerresourcemanager.ResourceClientProfile;

        specialinvoke $r4.<android.media.tv.tunerresourcemanager.ResourceClientProfile: void <init>(java.lang.String,int)>(r8, i1);

        $r5 = r0.<android.media.MediaCas: android.media.tv.tunerresourcemanager.TunerResourceManager mTunerResourceManager>;

        $r6 = virtualinvoke r1.<android.content.Context: java.util.concurrent.Executor getMainExecutor()>();

        $r7 = r0.<android.media.MediaCas: android.media.tv.tunerresourcemanager.TunerResourceManager$ResourcesReclaimListener mResourceListener>;

        virtualinvoke $r5.<android.media.tv.tunerresourcemanager.TunerResourceManager: void registerClientProfile(android.media.tv.tunerresourcemanager.ResourceClientProfile,java.util.concurrent.Executor,android.media.tv.tunerresourcemanager.TunerResourceManager$ResourcesReclaimListener,int[])>($r4, $r6, $r7, r10);

        $i2 = r10[0];

        r0.<android.media.MediaCas: int mClientId> = $i2;

     label1:
        return;
    }

    static byte[] access$000(android.media.MediaCas, java.util.ArrayList)
    {
        android.media.MediaCas r0;
        java.util.ArrayList r1;
        byte[] $r2;

        r0 := @parameter0: android.media.MediaCas;

        r1 := @parameter1: java.util.ArrayList;

        $r2 = specialinvoke r0.<android.media.MediaCas: byte[] toBytes(java.util.ArrayList)>(r1);

        return $r2;
    }

    static android.media.MediaCas$EventListener access$100(android.media.MediaCas)
    {
        android.media.MediaCas r0;
        android.media.MediaCas$EventListener $r1;

        r0 := @parameter0: android.media.MediaCas;

        $r1 = r0.<android.media.MediaCas: android.media.MediaCas$EventListener mListener>;

        return $r1;
    }

    static android.hardware.cas.V1_1.ICas access$1000(android.media.MediaCas)
    {
        android.media.MediaCas r0;
        android.hardware.cas.V1_1.ICas $r1;

        r0 := @parameter0: android.media.MediaCas;

        $r1 = r0.<android.media.MediaCas: android.hardware.cas.V1_1.ICas mICasV11>;

        return $r1;
    }

    static void access$1100(android.media.MediaCas, android.media.MediaCas$Session)
    {
        android.media.MediaCas r0;
        android.media.MediaCas$Session r1;

        r0 := @parameter0: android.media.MediaCas;

        r1 := @parameter1: android.media.MediaCas$Session;

        specialinvoke r0.<android.media.MediaCas: void removeSessionFromResourceMap(android.media.MediaCas$Session)>(r1);

        return;
    }

    static java.util.ArrayList access$200(android.media.MediaCas, byte[])
    {
        android.media.MediaCas r0;
        byte[] r1;
        java.util.ArrayList $r2;

        r0 := @parameter0: android.media.MediaCas;

        r1 := @parameter1: byte[];

        $r2 = specialinvoke r0.<android.media.MediaCas: java.util.ArrayList toByteArray(byte[])>(r1);

        return $r2;
    }

    static android.media.tv.tunerresourcemanager.TunerResourceManager access$300(android.media.MediaCas)
    {
        android.media.MediaCas r0;
        android.media.tv.tunerresourcemanager.TunerResourceManager $r1;

        r0 := @parameter0: android.media.MediaCas;

        $r1 = r0.<android.media.MediaCas: android.media.tv.tunerresourcemanager.TunerResourceManager mTunerResourceManager>;

        return $r1;
    }

    static int access$400(android.media.MediaCas)
    {
        android.media.MediaCas r0;
        int $i0;

        r0 := @parameter0: android.media.MediaCas;

        $i0 = r0.<android.media.MediaCas: int mCasSystemId>;

        return $i0;
    }

    static android.media.MediaCas$EventHandler access$500(android.media.MediaCas)
    {
        android.media.MediaCas r0;
        android.media.MediaCas$EventHandler $r1;

        r0 := @parameter0: android.media.MediaCas;

        $r1 = r0.<android.media.MediaCas: android.media.MediaCas$EventHandler mEventHandler>;

        return $r1;
    }

    static java.util.Map access$600(android.media.MediaCas)
    {
        android.media.MediaCas r0;
        java.util.Map $r1;

        r0 := @parameter0: android.media.MediaCas;

        $r1 = r0.<android.media.MediaCas: java.util.Map mSessionMap>;

        return $r1;
    }

    static android.hardware.cas.V1_0.ICas access$700(android.media.MediaCas)
    {
        android.media.MediaCas r0;
        android.hardware.cas.V1_0.ICas $r1;

        r0 := @parameter0: android.media.MediaCas;

        $r1 = r0.<android.media.MediaCas: android.hardware.cas.V1_0.ICas mICas>;

        return $r1;
    }

    static java.util.ArrayList access$800(android.media.MediaCas, byte[], int, int)
    {
        android.media.MediaCas r0;
        byte[] r1;
        int i0, i1;
        java.util.ArrayList $r2;

        r0 := @parameter0: android.media.MediaCas;

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r2 = specialinvoke r0.<android.media.MediaCas: java.util.ArrayList toByteArray(byte[],int,int)>(r1, i0, i1);

        return $r2;
    }

    static void access$900(android.media.MediaCas)
    {
        android.media.MediaCas r0;

        r0 := @parameter0: android.media.MediaCas;

        specialinvoke r0.<android.media.MediaCas: void cleanupAndRethrowIllegalState()>();

        return;
    }

    private void addSessionToResourceMap(android.media.MediaCas$Session, int)
    {
        android.media.MediaCas r0;
        int i0;
        java.util.Map r1, $r2;
        java.lang.Integer $r3;
        java.lang.Throwable $r5;
        android.media.MediaCas$Session r6;

        r0 := @this: android.media.MediaCas;

        r6 := @parameter0: android.media.MediaCas$Session;

        i0 := @parameter1: int;

        if i0 == -1 goto label6;

        r1 = r0.<android.media.MediaCas: java.util.Map mSessionMap>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.media.MediaCas: java.util.Map mSessionMap>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, $r3);

        exitmonitor r1;

     label2:
        goto label6;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void cleanupAndRethrowIllegalState()
    {
        android.media.MediaCas r0;
        java.lang.IllegalStateException $r1;

        r0 := @this: android.media.MediaCas;

        r0.<android.media.MediaCas: android.hardware.cas.V1_0.ICas mICas> = null;

        r0.<android.media.MediaCas: android.hardware.cas.V1_1.ICas mICasV11> = null;

        r0.<android.media.MediaCas: android.hardware.cas.V1_2.ICas mICasV12> = null;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;
    }

    public static android.media.MediaCas$PluginDescriptor[] enumeratePlugins()
    {
        java.util.ArrayList r0;
        int $i0, $i1, $i2, i3;
        android.media.MediaCas$PluginDescriptor $r1;
        java.lang.Object $r2;
        android.hardware.cas.V1_0.HidlCasPluginDescriptor $r3;
        android.os.RemoteException $r4;
        android.hardware.cas.V1_0.IMediaCasService r5;
        android.media.MediaCas$PluginDescriptor[] r6;

        r5 = staticinvoke <android.media.MediaCas: android.hardware.cas.V1_0.IMediaCasService getService()>();

        if r5 == null goto label9;

     label1:
        r0 = interfaceinvoke r5.<android.hardware.cas.V1_0.IMediaCasService: java.util.ArrayList enumeratePlugins()>();

        $i0 = virtualinvoke r0.<java.util.ArrayList: int size()>();

        if $i0 != 0 goto label3;

     label2:
        return null;

     label3:
        $i1 = virtualinvoke r0.<java.util.ArrayList: int size()>();

        r6 = newarray (android.media.MediaCas$PluginDescriptor)[$i1];

     label4:
        i3 = 0;

     label5:
        $i2 = lengthof r6;

        if i3 >= $i2 goto label7;

        $r1 = new android.media.MediaCas$PluginDescriptor;

        $r2 = virtualinvoke r0.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r3 = (android.hardware.cas.V1_0.HidlCasPluginDescriptor) $r2;

        specialinvoke $r1.<android.media.MediaCas$PluginDescriptor: void <init>(android.hardware.cas.V1_0.HidlCasPluginDescriptor)>($r3);

        r6[i3] = $r1;

     label6:
        i3 = i3 + 1;

        goto label5;

     label7:
        return r6;

     label8:
        $r4 := @caughtexception;

     label9:
        return null;

        catch android.os.RemoteException from label1 to label2 with label8;
        catch android.os.RemoteException from label3 to label4 with label8;
        catch android.os.RemoteException from label5 to label6 with label8;
    }

    static android.hardware.cas.V1_0.IMediaCasService getService()
    {
        android.util.Singleton $r0;
        java.lang.Object $r1;
        android.hardware.cas.V1_0.IMediaCasService $r2;

        $r0 = <android.media.MediaCas: android.util.Singleton sService>;

        $r1 = virtualinvoke $r0.<android.util.Singleton: java.lang.Object get()>();

        $r2 = (android.hardware.cas.V1_0.IMediaCasService) $r1;

        return $r2;
    }

    private int getSessionResourceHandle() throws android.media.MediaCasException
    {
        android.media.MediaCas r0;
        int[] r1;
        android.media.tv.tunerresourcemanager.TunerResourceManager $r3, $r5;
        int $i0, $i1, $i2;
        android.media.tv.tunerresourcemanager.CasSessionRequest $r4;
        boolean $z0;
        android.media.MediaCasException$InsufficientResourceException $r6;

        r0 := @this: android.media.MediaCas;

        specialinvoke r0.<android.media.MediaCas: void validateInternalStates()>();

        r1 = newarray (int)[1];

        r1[0] = -1;

        $r3 = r0.<android.media.MediaCas: android.media.tv.tunerresourcemanager.TunerResourceManager mTunerResourceManager>;

        if $r3 == null goto label2;

        $r4 = new android.media.tv.tunerresourcemanager.CasSessionRequest;

        $i2 = r0.<android.media.MediaCas: int mClientId>;

        $i1 = r0.<android.media.MediaCas: int mCasSystemId>;

        specialinvoke $r4.<android.media.tv.tunerresourcemanager.CasSessionRequest: void <init>(int,int)>($i2, $i1);

        $r5 = r0.<android.media.MediaCas: android.media.tv.tunerresourcemanager.TunerResourceManager mTunerResourceManager>;

        $z0 = virtualinvoke $r5.<android.media.tv.tunerresourcemanager.TunerResourceManager: boolean requestCasSession(android.media.tv.tunerresourcemanager.CasSessionRequest,int[])>($r4, r1);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        $r6 = new android.media.MediaCasException$InsufficientResourceException;

        specialinvoke $r6.<android.media.MediaCasException$InsufficientResourceException: void <init>(java.lang.String)>("insufficient resource to Open Session");

        throw $r6;

     label2:
        $i0 = r1[0];

        return $i0;
    }

    public static boolean isSystemIdSupported(int)
    {
        int i0;
        boolean z0;
        android.os.RemoteException $r0;
        android.hardware.cas.V1_0.IMediaCasService r1;

        i0 := @parameter0: int;

        r1 = staticinvoke <android.media.MediaCas: android.hardware.cas.V1_0.IMediaCasService getService()>();

        if r1 == null goto label4;

     label1:
        z0 = interfaceinvoke r1.<android.hardware.cas.V1_0.IMediaCasService: boolean isSystemIdSupported(int)>(i0);

     label2:
        return z0;

     label3:
        $r0 := @caughtexception;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void removeSessionFromResourceMap(android.media.MediaCas$Session)
    {
        android.media.MediaCas r0;
        java.util.Map r1, $r2, $r4, $r8;
        java.lang.Object $r3, $r6;
        android.media.tv.tunerresourcemanager.TunerResourceManager $r5;
        java.lang.Integer $r7;
        int $i0, $i1;
        java.lang.Throwable $r10;
        android.media.MediaCas$Session r11;

        r0 := @this: android.media.MediaCas;

        r11 := @parameter0: android.media.MediaCas$Session;

        r1 = r0.<android.media.MediaCas: java.util.Map mSessionMap>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.media.MediaCas: java.util.Map mSessionMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r11);

        if $r3 == null goto label2;

        $r5 = r0.<android.media.MediaCas: android.media.tv.tunerresourcemanager.TunerResourceManager mTunerResourceManager>;

        $r4 = r0.<android.media.MediaCas: java.util.Map mSessionMap>;

        $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r11);

        $r7 = (java.lang.Integer) $r6;

        $i0 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $i1 = r0.<android.media.MediaCas: int mClientId>;

        virtualinvoke $r5.<android.media.tv.tunerresourcemanager.TunerResourceManager: void releaseCasSession(int,int)>($i0, $i1);

        $r8 = r0.<android.media.MediaCas: java.util.Map mSessionMap>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r11);

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r10 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private java.util.ArrayList toByteArray(byte[])
    {
        android.media.MediaCas r0;
        byte[] r1;
        int $i0;
        java.util.ArrayList $r2, $r3;

        r0 := @this: android.media.MediaCas;

        r1 := @parameter0: byte[];

        if r1 != null goto label1;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        return $r3;

     label1:
        $i0 = lengthof r1;

        $r2 = specialinvoke r0.<android.media.MediaCas: java.util.ArrayList toByteArray(byte[],int,int)>(r1, 0, $i0);

        return $r2;
    }

    private java.util.ArrayList toByteArray(byte[], int, int)
    {
        android.media.MediaCas r0;
        byte[] r1;
        int i0, i1, $i2, i4;
        java.util.ArrayList $r3;
        byte $b3;
        java.lang.Byte $r4;

        r0 := @this: android.media.MediaCas;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>(i1);

        i4 = 0;

     label1:
        if i4 >= i1 goto label2;

        $i2 = i0 + i4;

        $b3 = r1[$i2];

        $r4 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b3);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        i4 = i4 + 1;

        goto label1;

     label2:
        return $r3;
    }

    private byte[] toBytes(java.util.ArrayList)
    {
        android.media.MediaCas r0;
        java.util.ArrayList r1;
        byte[] r2, r5;
        int $i0, $i1, i3;
        java.lang.Object $r3;
        java.lang.Byte $r4;
        byte $b2;

        r0 := @this: android.media.MediaCas;

        r1 := @parameter0: java.util.ArrayList;

        r5 = null;

        if r1 == null goto label2;

        $i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        r2 = newarray (byte)[$i0];

        i3 = 0;

     label1:
        r5 = r2;

        $i1 = lengthof r2;

        if i3 >= $i1 goto label2;

        $r3 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r4 = (java.lang.Byte) $r3;

        $b2 = virtualinvoke $r4.<java.lang.Byte: byte byteValue()>();

        r2[i3] = $b2;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r5;
    }

    private void validateInternalStates()
    {
        android.media.MediaCas r0;
        android.hardware.cas.V1_0.ICas $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: android.media.MediaCas;

        $r1 = r0.<android.media.MediaCas: android.hardware.cas.V1_0.ICas mICas>;

        if $r1 == null goto label1;

        return;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;
    }

    public void close()
    {
        android.media.MediaCas r0;
        int $i0;
        android.os.RemoteException $r1;
        java.lang.Throwable $r2;
        android.hardware.cas.V1_0.ICas r3;
        android.media.tv.tunerresourcemanager.TunerResourceManager r6;
        android.os.HandlerThread r7;

        r0 := @this: android.media.MediaCas;

        r3 = r0.<android.media.MediaCas: android.hardware.cas.V1_0.ICas mICas>;

        if r3 == null goto label6;

     label1:
        interfaceinvoke r3.<android.hardware.cas.V1_0.ICas: int release()>();

     label2:
        goto label5;

     label3:
        $r2 := @caughtexception;

        r0.<android.media.MediaCas: android.hardware.cas.V1_0.ICas mICas> = null;

        throw $r2;

     label4:
        $r1 := @caughtexception;

     label5:
        r0.<android.media.MediaCas: android.hardware.cas.V1_0.ICas mICas> = null;

     label6:
        r6 = r0.<android.media.MediaCas: android.media.tv.tunerresourcemanager.TunerResourceManager mTunerResourceManager>;

        if r6 == null goto label7;

        $i0 = r0.<android.media.MediaCas: int mClientId>;

        virtualinvoke r6.<android.media.tv.tunerresourcemanager.TunerResourceManager: void unregisterClientProfile(int)>($i0);

        r0.<android.media.MediaCas: android.media.tv.tunerresourcemanager.TunerResourceManager mTunerResourceManager> = null;

     label7:
        r7 = r0.<android.media.MediaCas: android.os.HandlerThread mHandlerThread>;

        if r7 == null goto label8;

        virtualinvoke r7.<android.os.HandlerThread: boolean quit()>();

        r0.<android.media.MediaCas: android.os.HandlerThread mHandlerThread> = null;

     label8:
        return;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
    }

    android.media.MediaCas$Session createFromSessionId(java.util.ArrayList)
    {
        android.media.MediaCas r0;
        java.util.ArrayList r1;
        int $i0;
        android.media.MediaCas$Session $r2;

        r0 := @this: android.media.MediaCas;

        r1 := @parameter0: java.util.ArrayList;

        if r1 == null goto label2;

        $i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        if $i0 != 0 goto label1;

        goto label2;

     label1:
        $r2 = new android.media.MediaCas$Session;

        specialinvoke $r2.<android.media.MediaCas$Session: void <init>(android.media.MediaCas,java.util.ArrayList)>(r0, r1);

        return $r2;

     label2:
        return null;
    }

    protected void finalize()
    {
        android.media.MediaCas r0;

        r0 := @this: android.media.MediaCas;

        virtualinvoke r0.<android.media.MediaCas: void close()>();

        return;
    }

    public void forceResourceLost()
    {
        android.media.MediaCas r0;
        android.media.tv.tunerresourcemanager.TunerResourceManager$ResourcesReclaimListener r1;

        r0 := @this: android.media.MediaCas;

        r1 = r0.<android.media.MediaCas: android.media.tv.tunerresourcemanager.TunerResourceManager$ResourcesReclaimListener mResourceListener>;

        if r1 == null goto label1;

        virtualinvoke r1.<android.media.tv.tunerresourcemanager.TunerResourceManager$ResourcesReclaimListener: void onReclaimResources()>();

     label1:
        return;
    }

    android.os.IHwBinder getBinder()
    {
        android.media.MediaCas r0;
        android.hardware.cas.V1_0.ICas $r1;
        android.os.IHwBinder $r2;

        r0 := @this: android.media.MediaCas;

        specialinvoke r0.<android.media.MediaCas: void validateInternalStates()>();

        $r1 = r0.<android.media.MediaCas: android.hardware.cas.V1_0.ICas mICas>;

        $r2 = interfaceinvoke $r1.<android.hardware.cas.V1_0.ICas: android.os.IHwBinder asBinder()>();

        return $r2;
    }

    public android.media.MediaCas$Session openSession() throws android.media.MediaCasException
    {
        android.media.MediaCas r0;
        int i0, $i1, $i3, $i4, $i6, $i7;
        android.hardware.cas.V1_0.ICas $r1;
        android.media.MediaCas$Session $r2, r5;
        android.os.RemoteException $r3;
        android.media.MediaCas$OpenSessionCallback r4;

        r0 := @this: android.media.MediaCas;

        i0 = specialinvoke r0.<android.media.MediaCas: int getSessionResourceHandle()>();

     label1:
        r4 = new android.media.MediaCas$OpenSessionCallback;

        specialinvoke r4.<android.media.MediaCas$OpenSessionCallback: void <init>(android.media.MediaCas,android.media.MediaCas$1)>(r0, null);

        $r1 = r0.<android.media.MediaCas: android.hardware.cas.V1_0.ICas mICas>;

        interfaceinvoke $r1.<android.hardware.cas.V1_0.ICas: void openSession(android.hardware.cas.V1_0.ICas$openSessionCallback)>(r4);

        $i1 = r4.<android.media.MediaCas$OpenSessionCallback: int mStatus>;

        staticinvoke <android.media.MediaCasException: void throwExceptionIfNeeded(int)>($i1);

        $r2 = r4.<android.media.MediaCas$OpenSessionCallback: android.media.MediaCas$Session mSession>;

        specialinvoke r0.<android.media.MediaCas: void addSessionToResourceMap(android.media.MediaCas$Session,int)>($r2, i0);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("MediaCas", "Write Stats Log for succeed to Open Session.");

        $i4 = r0.<android.media.MediaCas: int mUserId>;

        $i3 = r0.<android.media.MediaCas: int mCasSystemId>;

        staticinvoke <com.android.internal.util.FrameworkStatsLog: void write(int,int,int,int)>(280, $i4, $i3, 1);

        r5 = r4.<android.media.MediaCas$OpenSessionCallback: android.media.MediaCas$Session mSession>;

     label2:
        return r5;

     label3:
        $r3 := @caughtexception;

        specialinvoke r0.<android.media.MediaCas: void cleanupAndRethrowIllegalState()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("MediaCas", "Write Stats Log for fail to Open Session.");

        $i7 = r0.<android.media.MediaCas: int mUserId>;

        $i6 = r0.<android.media.MediaCas: int mCasSystemId>;

        staticinvoke <com.android.internal.util.FrameworkStatsLog: void write(int,int,int,int)>(280, $i7, $i6, 2);

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.media.MediaCas$Session openSession(int, int) throws android.media.MediaCasException
    {
        android.media.MediaCas r0;
        int i0, i1, i2, $i4, $i6, $i7, $i9, $i10;
        android.hardware.cas.V1_2.ICas $r1, $r3;
        android.media.MediaCasException$UnsupportedCasException $r2;
        android.media.MediaCas$Session $r4, r7;
        android.os.RemoteException $r5;
        android.media.MediaCas$OpenSession_1_2_Callback r6;

        r0 := @this: android.media.MediaCas;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = specialinvoke r0.<android.media.MediaCas: int getSessionResourceHandle()>();

        $r1 = r0.<android.media.MediaCas: android.hardware.cas.V1_2.ICas mICasV12>;

        if $r1 == null goto label4;

     label1:
        r6 = new android.media.MediaCas$OpenSession_1_2_Callback;

        specialinvoke r6.<android.media.MediaCas$OpenSession_1_2_Callback: void <init>(android.media.MediaCas,android.media.MediaCas$1)>(r0, null);

        $r3 = r0.<android.media.MediaCas: android.hardware.cas.V1_2.ICas mICasV12>;

        interfaceinvoke $r3.<android.hardware.cas.V1_2.ICas: void openSession_1_2(int,int,android.hardware.cas.V1_2.ICas$openSession_1_2Callback)>(i0, i1, r6);

        $i4 = r6.<android.media.MediaCas$OpenSession_1_2_Callback: int mStatus>;

        staticinvoke <android.media.MediaCasException: void throwExceptionIfNeeded(int)>($i4);

        $r4 = r6.<android.media.MediaCas$OpenSession_1_2_Callback: android.media.MediaCas$Session mSession>;

        specialinvoke r0.<android.media.MediaCas: void addSessionToResourceMap(android.media.MediaCas$Session,int)>($r4, i2);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("MediaCas", "Write Stats Log for succeed to Open Session.");

        $i7 = r0.<android.media.MediaCas: int mUserId>;

        $i6 = r0.<android.media.MediaCas: int mCasSystemId>;

        staticinvoke <com.android.internal.util.FrameworkStatsLog: void write(int,int,int,int)>(280, $i7, $i6, 1);

        r7 = r6.<android.media.MediaCas$OpenSession_1_2_Callback: android.media.MediaCas$Session mSession>;

     label2:
        return r7;

     label3:
        $r5 := @caughtexception;

        specialinvoke r0.<android.media.MediaCas: void cleanupAndRethrowIllegalState()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("MediaCas", "Write Stats Log for fail to Open Session.");

        $i10 = r0.<android.media.MediaCas: int mUserId>;

        $i9 = r0.<android.media.MediaCas: int mCasSystemId>;

        staticinvoke <com.android.internal.util.FrameworkStatsLog: void write(int,int,int,int)>(280, $i10, $i9, 2);

        return null;

     label4:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("MediaCas", "Open Session with scrambling mode is only supported by cas@1.2+ interface");

        $r2 = new android.media.MediaCasException$UnsupportedCasException;

        specialinvoke $r2.<android.media.MediaCasException$UnsupportedCasException: void <init>(java.lang.String)>("Open Session with scrambling mode is not supported");

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void processEmm(byte[]) throws android.media.MediaCasException
    {
        android.media.MediaCas r0;
        byte[] r1;
        int $i0;

        r0 := @this: android.media.MediaCas;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        virtualinvoke r0.<android.media.MediaCas: void processEmm(byte[],int,int)>(r1, 0, $i0);

        return;
    }

    public void processEmm(byte[], int, int) throws android.media.MediaCasException
    {
        android.media.MediaCas r0;
        int i0, i1, $i2;
        android.hardware.cas.V1_0.ICas $r1;
        java.util.ArrayList $r2;
        android.os.RemoteException $r3;
        byte[] r4;

        r0 := @this: android.media.MediaCas;

        r4 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<android.media.MediaCas: void validateInternalStates()>();

     label1:
        $r1 = r0.<android.media.MediaCas: android.hardware.cas.V1_0.ICas mICas>;

        $r2 = specialinvoke r0.<android.media.MediaCas: java.util.ArrayList toByteArray(byte[],int,int)>(r4, i0, i1);

        $i2 = interfaceinvoke $r1.<android.hardware.cas.V1_0.ICas: int processEmm(java.util.ArrayList)>($r2);

        staticinvoke <android.media.MediaCasException: void throwExceptionIfNeeded(int)>($i2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        specialinvoke r0.<android.media.MediaCas: void cleanupAndRethrowIllegalState()>();

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void provision(java.lang.String) throws android.media.MediaCasException
    {
        android.media.MediaCas r0;
        android.hardware.cas.V1_0.ICas $r1;
        int $i0;
        android.os.RemoteException $r2;
        java.lang.String r3;

        r0 := @this: android.media.MediaCas;

        r3 := @parameter0: java.lang.String;

        specialinvoke r0.<android.media.MediaCas: void validateInternalStates()>();

     label1:
        $r1 = r0.<android.media.MediaCas: android.hardware.cas.V1_0.ICas mICas>;

        $i0 = interfaceinvoke $r1.<android.hardware.cas.V1_0.ICas: int provision(java.lang.String)>(r3);

        staticinvoke <android.media.MediaCasException: void throwExceptionIfNeeded(int)>($i0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        specialinvoke r0.<android.media.MediaCas: void cleanupAndRethrowIllegalState()>();

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void refreshEntitlements(int, byte[]) throws android.media.MediaCasException
    {
        android.media.MediaCas r0;
        int i0, $i1;
        android.hardware.cas.V1_0.ICas $r1;
        java.util.ArrayList $r2;
        android.os.RemoteException $r3;
        byte[] r4;

        r0 := @this: android.media.MediaCas;

        i0 := @parameter0: int;

        r4 := @parameter1: byte[];

        specialinvoke r0.<android.media.MediaCas: void validateInternalStates()>();

     label1:
        $r1 = r0.<android.media.MediaCas: android.hardware.cas.V1_0.ICas mICas>;

        $r2 = specialinvoke r0.<android.media.MediaCas: java.util.ArrayList toByteArray(byte[])>(r4);

        $i1 = interfaceinvoke $r1.<android.hardware.cas.V1_0.ICas: int refreshEntitlements(int,java.util.ArrayList)>(i0, $r2);

        staticinvoke <android.media.MediaCasException: void throwExceptionIfNeeded(int)>($i1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        specialinvoke r0.<android.media.MediaCas: void cleanupAndRethrowIllegalState()>();

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void sendEvent(int, int, byte[]) throws android.media.MediaCasException
    {
        android.media.MediaCas r0;
        int i0, i1, $i2;
        android.hardware.cas.V1_0.ICas $r1;
        java.util.ArrayList $r2;
        android.os.RemoteException $r3;
        byte[] r4;

        r0 := @this: android.media.MediaCas;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r4 := @parameter2: byte[];

        specialinvoke r0.<android.media.MediaCas: void validateInternalStates()>();

     label1:
        $r1 = r0.<android.media.MediaCas: android.hardware.cas.V1_0.ICas mICas>;

        $r2 = specialinvoke r0.<android.media.MediaCas: java.util.ArrayList toByteArray(byte[])>(r4);

        $i2 = interfaceinvoke $r1.<android.hardware.cas.V1_0.ICas: int sendEvent(int,int,java.util.ArrayList)>(i0, i1, $r2);

        staticinvoke <android.media.MediaCasException: void throwExceptionIfNeeded(int)>($i2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        specialinvoke r0.<android.media.MediaCas: void cleanupAndRethrowIllegalState()>();

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setEventListener(android.media.MediaCas$EventListener, android.os.Handler)
    {
        android.media.MediaCas r0;
        android.os.HandlerThread $r1, r8, $r10;
        boolean $z0;
        android.media.MediaCas$EventListener r2;
        android.os.Handler r3;
        android.os.Looper r4, r5, r6, r7;
        android.media.MediaCas$EventHandler $r11;

        r0 := @this: android.media.MediaCas;

        r2 := @parameter0: android.media.MediaCas$EventListener;

        r3 := @parameter1: android.os.Handler;

        r0.<android.media.MediaCas: android.media.MediaCas$EventListener mListener> = r2;

        r4 = null;

        if r2 != null goto label1;

        r0.<android.media.MediaCas: android.media.MediaCas$EventHandler mEventHandler> = null;

        return;

     label1:
        if r3 == null goto label2;

        r4 = virtualinvoke r3.<android.os.Handler: android.os.Looper getLooper()>();

     label2:
        r5 = r4;

        if r4 != null goto label5;

        r6 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        r5 = r6;

        if r6 != null goto label5;

        r7 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        r5 = r7;

        if r7 != null goto label5;

        r8 = r0.<android.media.MediaCas: android.os.HandlerThread mHandlerThread>;

        if r8 == null goto label3;

        $z0 = virtualinvoke r8.<android.os.HandlerThread: boolean isAlive()>();

        if $z0 != 0 goto label4;

     label3:
        $r1 = new android.os.HandlerThread;

        specialinvoke $r1.<android.os.HandlerThread: void <init>(java.lang.String,int)>("MediaCasEventThread", -2);

        r0.<android.media.MediaCas: android.os.HandlerThread mHandlerThread> = $r1;

        virtualinvoke $r1.<android.os.HandlerThread: void start()>();

     label4:
        $r10 = r0.<android.media.MediaCas: android.os.HandlerThread mHandlerThread>;

        r5 = virtualinvoke $r10.<android.os.HandlerThread: android.os.Looper getLooper()>();

     label5:
        $r11 = new android.media.MediaCas$EventHandler;

        specialinvoke $r11.<android.media.MediaCas$EventHandler: void <init>(android.media.MediaCas,android.os.Looper)>(r0, r5);

        r0.<android.media.MediaCas: android.media.MediaCas$EventHandler mEventHandler> = $r11;

        return;
    }

    public void setPrivateData(byte[]) throws android.media.MediaCasException
    {
        android.media.MediaCas r0;
        int $i0, $i1;
        android.hardware.cas.V1_0.ICas $r1;
        java.util.ArrayList $r2;
        android.os.RemoteException $r3;
        byte[] r4;

        r0 := @this: android.media.MediaCas;

        r4 := @parameter0: byte[];

        specialinvoke r0.<android.media.MediaCas: void validateInternalStates()>();

     label1:
        $r1 = r0.<android.media.MediaCas: android.hardware.cas.V1_0.ICas mICas>;

        $i0 = lengthof r4;

        $r2 = specialinvoke r0.<android.media.MediaCas: java.util.ArrayList toByteArray(byte[],int,int)>(r4, 0, $i0);

        $i1 = interfaceinvoke $r1.<android.hardware.cas.V1_0.ICas: int setPrivateData(java.util.ArrayList)>($r2);

        staticinvoke <android.media.MediaCasException: void throwExceptionIfNeeded(int)>($i1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        specialinvoke r0.<android.media.MediaCas: void cleanupAndRethrowIllegalState()>();

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }
}
