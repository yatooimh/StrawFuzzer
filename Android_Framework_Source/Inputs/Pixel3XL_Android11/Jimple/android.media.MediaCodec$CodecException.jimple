public final class android.media.MediaCodec$CodecException extends java.lang.IllegalStateException
{
    private static final int ACTION_RECOVERABLE;
    private static final int ACTION_TRANSIENT;
    public static final int ERROR_INSUFFICIENT_RESOURCE;
    public static final int ERROR_RECLAIMED;
    private final int mActionCode;
    private final java.lang.String mDiagnosticInfo;
    private final int mErrorCode;

    void <init>(int, int, java.lang.String)
    {
        android.media.MediaCodec$CodecException r0;
        int i0, i1, $i2;
        java.lang.StringBuilder $r2;
        java.lang.String $r6, r7, r8;

        r0 := @this: android.media.MediaCodec$CodecException;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r7 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r7);

        r0.<android.media.MediaCodec$CodecException: int mErrorCode> = i0;

        r0.<android.media.MediaCodec$CodecException: int mActionCode> = i1;

        if i0 >= 0 goto label1;

        r8 = "neg_";

        goto label2;

     label1:
        r8 = "";

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.media.MediaCodec.error_");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $i2 = staticinvoke <java.lang.Math: int abs(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<android.media.MediaCodec$CodecException: java.lang.String mDiagnosticInfo> = $r6;

        return;
    }

    public java.lang.String getDiagnosticInfo()
    {
        android.media.MediaCodec$CodecException r0;
        java.lang.String $r1;

        r0 := @this: android.media.MediaCodec$CodecException;

        $r1 = r0.<android.media.MediaCodec$CodecException: java.lang.String mDiagnosticInfo>;

        return $r1;
    }

    public int getErrorCode()
    {
        android.media.MediaCodec$CodecException r0;
        int $i0;

        r0 := @this: android.media.MediaCodec$CodecException;

        $i0 = r0.<android.media.MediaCodec$CodecException: int mErrorCode>;

        return $i0;
    }

    public boolean isRecoverable()
    {
        android.media.MediaCodec$CodecException r0;
        int $i0;
        boolean z0;

        r0 := @this: android.media.MediaCodec$CodecException;

        $i0 = r0.<android.media.MediaCodec$CodecException: int mActionCode>;

        if $i0 != 2 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isTransient()
    {
        android.media.MediaCodec$CodecException r0;
        int i0;
        boolean z0;

        r0 := @this: android.media.MediaCodec$CodecException;

        i0 = r0.<android.media.MediaCodec$CodecException: int mActionCode>;

        z0 = 1;

        if i0 != 1 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static void <clinit>()
    {
        <android.media.MediaCodec$CodecException: int ERROR_RECLAIMED> = 1101;

        <android.media.MediaCodec$CodecException: int ERROR_INSUFFICIENT_RESOURCE> = 1100;

        <android.media.MediaCodec$CodecException: int ACTION_TRANSIENT> = 1;

        <android.media.MediaCodec$CodecException: int ACTION_RECOVERABLE> = 2;

        return;
    }
}
