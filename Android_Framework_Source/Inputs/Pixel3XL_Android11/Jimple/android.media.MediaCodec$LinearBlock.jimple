public final class android.media.MediaCodec$LinearBlock extends java.lang.Object
{
    private static final java.util.concurrent.BlockingQueue sPool;
    private final java.lang.Object mLock;
    private boolean mMappable;
    private java.nio.ByteBuffer mMapped;
    private long mNativeContext;
    private boolean mValid;

    static void <clinit>()
    {
        java.util.concurrent.LinkedBlockingQueue $r0;

        $r0 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r0.<java.util.concurrent.LinkedBlockingQueue: void <init>()>();

        <android.media.MediaCodec$LinearBlock: java.util.concurrent.BlockingQueue sPool> = $r0;

        return;
    }

    private void <init>()
    {
        android.media.MediaCodec$LinearBlock r0;
        java.lang.Object $r1;

        r0 := @this: android.media.MediaCodec$LinearBlock;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<android.media.MediaCodec$LinearBlock: java.lang.Object mLock> = $r1;

        r0.<android.media.MediaCodec$LinearBlock: boolean mValid> = 0;

        r0.<android.media.MediaCodec$LinearBlock: boolean mMappable> = 0;

        r0.<android.media.MediaCodec$LinearBlock: java.nio.ByteBuffer mMapped> = null;

        r0.<android.media.MediaCodec$LinearBlock: long mNativeContext> = 0L;

        return;
    }

    public static boolean isCodecCopyFreeCompatible(java.lang.String[])
    {
        java.lang.String[] r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String[];

        $z0 = staticinvoke <android.media.MediaCodec$LinearBlock: boolean native_checkCompatible(java.lang.String[])>(r0);

        return $z0;
    }

    private static native boolean native_checkCompatible(java.lang.String[]);

    private native java.nio.ByteBuffer native_map();

    private native void native_obtain(int, java.lang.String[]);

    private native void native_recycle();

    public static android.media.MediaCodec$LinearBlock obtain(int, java.lang.String[])
    {
        int i0;
        java.util.concurrent.BlockingQueue $r0;
        java.lang.Object $r1, r7;
        android.media.MediaCodec$LinearBlock $r2, r5, r6;
        java.lang.Throwable $r3;
        java.lang.String[] r4;

        i0 := @parameter0: int;

        r4 := @parameter1: java.lang.String[];

        $r0 = <android.media.MediaCodec$LinearBlock: java.util.concurrent.BlockingQueue sPool>;

        $r1 = interfaceinvoke $r0.<java.util.concurrent.BlockingQueue: java.lang.Object poll()>();

        r5 = (android.media.MediaCodec$LinearBlock) $r1;

        r6 = r5;

        if r5 != null goto label1;

        $r2 = new android.media.MediaCodec$LinearBlock;

        specialinvoke $r2.<android.media.MediaCodec$LinearBlock: void <init>()>();

        r6 = $r2;

     label1:
        r7 = r6.<android.media.MediaCodec$LinearBlock: java.lang.Object mLock>;

        entermonitor r7;

     label2:
        specialinvoke r6.<android.media.MediaCodec$LinearBlock: void native_obtain(int,java.lang.String[])>(i0, r4);

        exitmonitor r7;

     label3:
        return r6;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r7;

     label6:
        throw $r3;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void setInternalStateLocked(long, boolean)
    {
        android.media.MediaCodec$LinearBlock r0;
        long l0;
        byte $b1;
        boolean z0, z1;

        r0 := @this: android.media.MediaCodec$LinearBlock;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        r0.<android.media.MediaCodec$LinearBlock: long mNativeContext> = l0;

        r0.<android.media.MediaCodec$LinearBlock: boolean mMappable> = z0;

        $b1 = l0 cmp 0L;

        if $b1 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        r0.<android.media.MediaCodec$LinearBlock: boolean mValid> = z1;

        return;
    }

    protected void finalize()
    {
        android.media.MediaCodec$LinearBlock r0;

        r0 := @this: android.media.MediaCodec$LinearBlock;

        specialinvoke r0.<android.media.MediaCodec$LinearBlock: void native_recycle()>();

        return;
    }

    public boolean isMappable()
    {
        android.media.MediaCodec$LinearBlock r0;
        java.lang.Object r1;
        boolean z0, $z1;
        java.lang.Throwable $r2;
        java.lang.IllegalStateException r3;

        r0 := @this: android.media.MediaCodec$LinearBlock;

        r1 = r0.<android.media.MediaCodec$LinearBlock: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z1 = r0.<android.media.MediaCodec$LinearBlock: boolean mValid>;

        if $z1 == 0 goto label3;

        z0 = r0.<android.media.MediaCodec$LinearBlock: boolean mMappable>;

        exitmonitor r1;

     label2:
        return z0;

     label3:
        r3 = new java.lang.IllegalStateException;

        specialinvoke r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The linear block is invalid");

        throw r3;

     label4:
        $r2 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public java.nio.ByteBuffer map()
    {
        android.media.MediaCodec$LinearBlock r0;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.nio.ByteBuffer $r2, $r3, r5;
        java.lang.Throwable $r4;
        java.lang.IllegalStateException r6, r7;

        r0 := @this: android.media.MediaCodec$LinearBlock;

        r1 = r0.<android.media.MediaCodec$LinearBlock: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = r0.<android.media.MediaCodec$LinearBlock: boolean mValid>;

        if $z0 == 0 goto label5;

        $z1 = r0.<android.media.MediaCodec$LinearBlock: boolean mMappable>;

        if $z1 == 0 goto label4;

        $r2 = r0.<android.media.MediaCodec$LinearBlock: java.nio.ByteBuffer mMapped>;

        if $r2 != null goto label2;

        $r3 = specialinvoke r0.<android.media.MediaCodec$LinearBlock: java.nio.ByteBuffer native_map()>();

        r0.<android.media.MediaCodec$LinearBlock: java.nio.ByteBuffer mMapped> = $r3;

     label2:
        r5 = r0.<android.media.MediaCodec$LinearBlock: java.nio.ByteBuffer mMapped>;

        exitmonitor r1;

     label3:
        return r5;

     label4:
        r6 = new java.lang.IllegalStateException;

        specialinvoke r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The linear block is not mappable");

        throw r6;

     label5:
        r7 = new java.lang.IllegalStateException;

        specialinvoke r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The linear block is invalid");

        throw r7;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void recycle()
    {
        android.media.MediaCodec$LinearBlock r0;
        java.lang.Object r1;
        boolean $z0;
        java.nio.ByteBuffer $r2, $r4;
        java.util.concurrent.BlockingQueue $r3;
        java.lang.Throwable $r5;
        java.lang.IllegalStateException r6;

        r0 := @this: android.media.MediaCodec$LinearBlock;

        r1 = r0.<android.media.MediaCodec$LinearBlock: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = r0.<android.media.MediaCodec$LinearBlock: boolean mValid>;

        if $z0 == 0 goto label4;

        $r2 = r0.<android.media.MediaCodec$LinearBlock: java.nio.ByteBuffer mMapped>;

        if $r2 == null goto label2;

        $r4 = r0.<android.media.MediaCodec$LinearBlock: java.nio.ByteBuffer mMapped>;

        virtualinvoke $r4.<java.nio.ByteBuffer: void setAccessible(boolean)>(0);

        r0.<android.media.MediaCodec$LinearBlock: java.nio.ByteBuffer mMapped> = null;

     label2:
        specialinvoke r0.<android.media.MediaCodec$LinearBlock: void native_recycle()>();

        r0.<android.media.MediaCodec$LinearBlock: boolean mValid> = 0;

        r0.<android.media.MediaCodec$LinearBlock: long mNativeContext> = 0L;

        exitmonitor r1;

     label3:
        $r3 = <android.media.MediaCodec$LinearBlock: java.util.concurrent.BlockingQueue sPool>;

        interfaceinvoke $r3.<java.util.concurrent.BlockingQueue: boolean offer(java.lang.Object)>(r0);

        return;

     label4:
        r6 = new java.lang.IllegalStateException;

        specialinvoke r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The linear block is invalid");

        throw r6;

     label5:
        $r5 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label4 to label5 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }
}
