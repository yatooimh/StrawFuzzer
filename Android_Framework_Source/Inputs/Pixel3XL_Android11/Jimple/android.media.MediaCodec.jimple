public final class android.media.MediaCodec extends java.lang.Object
{
    public static final int BUFFER_FLAG_CODEC_CONFIG;
    public static final int BUFFER_FLAG_END_OF_STREAM;
    public static final int BUFFER_FLAG_KEY_FRAME;
    public static final int BUFFER_FLAG_MUXER_DATA;
    public static final int BUFFER_FLAG_PARTIAL_FRAME;
    public static final int BUFFER_FLAG_SYNC_FRAME;
    private static final int BUFFER_MODE_BLOCK;
    private static final int BUFFER_MODE_INVALID;
    private static final int BUFFER_MODE_LEGACY;
    private static final int CB_ERROR;
    private static final int CB_INPUT_AVAILABLE;
    private static final int CB_OUTPUT_AVAILABLE;
    private static final int CB_OUTPUT_FORMAT_CHANGE;
    public static final int CONFIGURE_FLAG_ENCODE;
    public static final int CONFIGURE_FLAG_USE_BLOCK_MODEL;
    public static final int CRYPTO_MODE_AES_CBC;
    public static final int CRYPTO_MODE_AES_CTR;
    public static final int CRYPTO_MODE_UNENCRYPTED;
    private static final int EVENT_CALLBACK;
    private static final int EVENT_FRAME_RENDERED;
    private static final int EVENT_SET_CALLBACK;
    public static final int INFO_OUTPUT_BUFFERS_CHANGED;
    public static final int INFO_OUTPUT_FORMAT_CHANGED;
    public static final int INFO_TRY_AGAIN_LATER;
    public static final java.lang.String PARAMETER_KEY_HDR10_PLUS_INFO;
    public static final java.lang.String PARAMETER_KEY_LOW_LATENCY;
    public static final java.lang.String PARAMETER_KEY_OFFSET_TIME;
    public static final java.lang.String PARAMETER_KEY_REQUEST_SYNC_FRAME;
    public static final java.lang.String PARAMETER_KEY_SUSPEND;
    public static final java.lang.String PARAMETER_KEY_SUSPEND_TIME;
    public static final java.lang.String PARAMETER_KEY_VIDEO_BITRATE;
    public static final int VIDEO_SCALING_MODE_SCALE_TO_FIT;
    public static final int VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING;
    private final java.lang.Object mBufferLock;
    private int mBufferMode;
    private java.nio.ByteBuffer[] mCachedInputBuffers;
    private java.nio.ByteBuffer[] mCachedOutputBuffers;
    private android.media.MediaCodec$Callback mCallback;
    private android.media.MediaCodec$EventHandler mCallbackHandler;
    private android.media.MediaCodecInfo mCodecInfo;
    private final java.lang.Object mCodecInfoLock;
    private android.media.MediaCrypto mCrypto;
    private final android.media.MediaCodec$BufferMap mDequeuedInputBuffers;
    private final android.media.MediaCodec$BufferMap mDequeuedOutputBuffers;
    private final java.util.Map mDequeuedOutputInfos;
    private android.media.MediaCodec$EventHandler mEventHandler;
    private boolean mHasSurface;
    private final java.lang.Object mListenerLock;
    private java.lang.String mNameAtCreation;
    private long mNativeContext;
    private final java.util.concurrent.locks.Lock mNativeContextLock;
    private android.media.MediaCodec$EventHandler mOnFrameRenderedHandler;
    private android.media.MediaCodec$OnFrameRenderedListener mOnFrameRenderedListener;
    private final java.util.ArrayList mOutputFrames;
    private final java.util.ArrayList mQueueRequests;

    static void <clinit>()
    {
        <android.media.MediaCodec: int VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING> = 2;

        <android.media.MediaCodec: int VIDEO_SCALING_MODE_SCALE_TO_FIT> = 1;

        <android.media.MediaCodec: java.lang.String PARAMETER_KEY_VIDEO_BITRATE> = "video-bitrate";

        <android.media.MediaCodec: java.lang.String PARAMETER_KEY_SUSPEND_TIME> = "drop-start-time-us";

        <android.media.MediaCodec: java.lang.String PARAMETER_KEY_SUSPEND> = "drop-input-frames";

        <android.media.MediaCodec: java.lang.String PARAMETER_KEY_REQUEST_SYNC_FRAME> = "request-sync";

        <android.media.MediaCodec: java.lang.String PARAMETER_KEY_OFFSET_TIME> = "time-offset-us";

        <android.media.MediaCodec: java.lang.String PARAMETER_KEY_LOW_LATENCY> = "low-latency";

        <android.media.MediaCodec: java.lang.String PARAMETER_KEY_HDR10_PLUS_INFO> = "hdr10-plus-info";

        <android.media.MediaCodec: int INFO_TRY_AGAIN_LATER> = -1;

        <android.media.MediaCodec: int INFO_OUTPUT_FORMAT_CHANGED> = -2;

        <android.media.MediaCodec: int INFO_OUTPUT_BUFFERS_CHANGED> = -3;

        <android.media.MediaCodec: int EVENT_SET_CALLBACK> = 2;

        <android.media.MediaCodec: int EVENT_FRAME_RENDERED> = 3;

        <android.media.MediaCodec: int EVENT_CALLBACK> = 1;

        <android.media.MediaCodec: int CRYPTO_MODE_UNENCRYPTED> = 0;

        <android.media.MediaCodec: int CRYPTO_MODE_AES_CTR> = 1;

        <android.media.MediaCodec: int CRYPTO_MODE_AES_CBC> = 2;

        <android.media.MediaCodec: int CONFIGURE_FLAG_USE_BLOCK_MODEL> = 2;

        <android.media.MediaCodec: int CONFIGURE_FLAG_ENCODE> = 1;

        <android.media.MediaCodec: int CB_OUTPUT_FORMAT_CHANGE> = 4;

        <android.media.MediaCodec: int CB_OUTPUT_AVAILABLE> = 2;

        <android.media.MediaCodec: int CB_INPUT_AVAILABLE> = 1;

        <android.media.MediaCodec: int CB_ERROR> = 3;

        <android.media.MediaCodec: int BUFFER_MODE_LEGACY> = 0;

        <android.media.MediaCodec: int BUFFER_MODE_INVALID> = -1;

        <android.media.MediaCodec: int BUFFER_MODE_BLOCK> = 1;

        <android.media.MediaCodec: int BUFFER_FLAG_SYNC_FRAME> = 1;

        <android.media.MediaCodec: int BUFFER_FLAG_PARTIAL_FRAME> = 8;

        <android.media.MediaCodec: int BUFFER_FLAG_MUXER_DATA> = 16;

        <android.media.MediaCodec: int BUFFER_FLAG_KEY_FRAME> = 1;

        <android.media.MediaCodec: int BUFFER_FLAG_END_OF_STREAM> = 4;

        <android.media.MediaCodec: int BUFFER_FLAG_CODEC_CONFIG> = 2;

        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("media_jni");

        staticinvoke <android.media.MediaCodec: void native_init()>();

        return;
    }

    private void <init>(java.lang.String, boolean, boolean)
    {
        android.media.MediaCodec r0;
        java.lang.String r1, r12;
        boolean z0, z1;
        java.lang.Object $r2, $r3, $r16;
        java.util.ArrayList $r4, $r8;
        android.media.MediaCodec$BufferMap $r5, $r6;
        java.util.HashMap $r7;
        java.util.concurrent.locks.ReentrantLock $r9;
        android.media.MediaCodec$EventHandler $r10, $r11, r15;
        android.os.Looper r13, r14;

        r0 := @this: android.media.MediaCodec;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<android.media.MediaCodec: java.lang.Object mListenerLock> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<android.media.MediaCodec: java.lang.Object mCodecInfoLock> = $r3;

        r0.<android.media.MediaCodec: boolean mHasSurface> = 0;

        r0.<android.media.MediaCodec: int mBufferMode> = -1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<android.media.MediaCodec: java.util.ArrayList mQueueRequests> = $r4;

        r12 = null;

        $r5 = new android.media.MediaCodec$BufferMap;

        specialinvoke $r5.<android.media.MediaCodec$BufferMap: void <init>(android.media.MediaCodec$1)>(null);

        r0.<android.media.MediaCodec: android.media.MediaCodec$BufferMap mDequeuedInputBuffers> = $r5;

        $r6 = new android.media.MediaCodec$BufferMap;

        specialinvoke $r6.<android.media.MediaCodec$BufferMap: void <init>(android.media.MediaCodec$1)>(null);

        r0.<android.media.MediaCodec: android.media.MediaCodec$BufferMap mDequeuedOutputBuffers> = $r6;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r0.<android.media.MediaCodec: java.util.Map mDequeuedOutputInfos> = $r7;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r0.<android.media.MediaCodec: java.util.ArrayList mOutputFrames> = $r8;

        r0.<android.media.MediaCodec: long mNativeContext> = 0L;

        $r9 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r9.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r0.<android.media.MediaCodec: java.util.concurrent.locks.Lock mNativeContextLock> = $r9;

        r13 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if r13 == null goto label1;

        $r11 = new android.media.MediaCodec$EventHandler;

        specialinvoke $r11.<android.media.MediaCodec$EventHandler: void <init>(android.media.MediaCodec,android.media.MediaCodec,android.os.Looper)>(r0, r0, r13);

        r0.<android.media.MediaCodec: android.media.MediaCodec$EventHandler mEventHandler> = $r11;

        goto label3;

     label1:
        r14 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        if r14 == null goto label2;

        $r10 = new android.media.MediaCodec$EventHandler;

        specialinvoke $r10.<android.media.MediaCodec$EventHandler: void <init>(android.media.MediaCodec,android.media.MediaCodec,android.os.Looper)>(r0, r0, r14);

        r0.<android.media.MediaCodec: android.media.MediaCodec$EventHandler mEventHandler> = $r10;

        goto label3;

     label2:
        r0.<android.media.MediaCodec: android.media.MediaCodec$EventHandler mEventHandler> = null;

     label3:
        r15 = r0.<android.media.MediaCodec: android.media.MediaCodec$EventHandler mEventHandler>;

        r0.<android.media.MediaCodec: android.media.MediaCodec$EventHandler mCallbackHandler> = r15;

        r0.<android.media.MediaCodec: android.media.MediaCodec$EventHandler mOnFrameRenderedHandler> = r15;

        $r16 = new java.lang.Object;

        specialinvoke $r16.<java.lang.Object: void <init>()>();

        r0.<android.media.MediaCodec: java.lang.Object mBufferLock> = $r16;

        if z0 == 0 goto label4;

        goto label5;

     label4:
        r12 = r1;

     label5:
        r0.<android.media.MediaCodec: java.lang.String mNameAtCreation> = r12;

        specialinvoke r0.<android.media.MediaCodec: void native_setup(java.lang.String,boolean,boolean)>(r1, z0, z1);

        return;
    }

    static android.media.MediaCodec$Callback access$000(android.media.MediaCodec)
    {
        android.media.MediaCodec r0;
        android.media.MediaCodec$Callback $r1;

        r0 := @parameter0: android.media.MediaCodec;

        $r1 = r0.<android.media.MediaCodec: android.media.MediaCodec$Callback mCallback>;

        return $r1;
    }

    static android.media.MediaCodec$Callback access$002(android.media.MediaCodec, android.media.MediaCodec$Callback)
    {
        android.media.MediaCodec r0;
        android.media.MediaCodec$Callback r1;

        r0 := @parameter0: android.media.MediaCodec;

        r1 := @parameter1: android.media.MediaCodec$Callback;

        r0.<android.media.MediaCodec: android.media.MediaCodec$Callback mCallback> = r1;

        return r1;
    }

    static java.lang.Object access$100(android.media.MediaCodec)
    {
        android.media.MediaCodec r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.media.MediaCodec;

        $r1 = r0.<android.media.MediaCodec: java.lang.Object mListenerLock>;

        return $r1;
    }

    static void access$1000(android.media.MediaCodec, java.nio.ByteBuffer[], int, android.media.MediaCodec$BufferInfo)
    {
        android.media.MediaCodec r0;
        java.nio.ByteBuffer[] r1;
        int i0;
        android.media.MediaCodec$BufferInfo r2;

        r0 := @parameter0: android.media.MediaCodec;

        r1 := @parameter1: java.nio.ByteBuffer[];

        i0 := @parameter2: int;

        r2 := @parameter3: android.media.MediaCodec$BufferInfo;

        specialinvoke r0.<android.media.MediaCodec: void validateOutputByteBuffer(java.nio.ByteBuffer[],int,android.media.MediaCodec$BufferInfo)>(r1, i0, r2);

        return;
    }

    static java.util.ArrayList access$1100(android.media.MediaCodec)
    {
        android.media.MediaCodec r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: android.media.MediaCodec;

        $r1 = r0.<android.media.MediaCodec: java.util.ArrayList mOutputFrames>;

        return $r1;
    }

    static void access$1200(android.view.Surface)
    {
        android.view.Surface r0;

        r0 := @parameter0: android.view.Surface;

        staticinvoke <android.media.MediaCodec: void native_releasePersistentInputSurface(android.view.Surface)>(r0);

        return;
    }

    static void access$1500(android.media.MediaCodec, int, android.media.MediaCodec$LinearBlock, int, int, android.media.MediaCodec$CryptoInfo, long, int, java.util.ArrayList, java.util.ArrayList)
    {
        android.media.MediaCodec r0;
        int i0, i1, i2, i4;
        android.media.MediaCodec$LinearBlock r1;
        android.media.MediaCodec$CryptoInfo r2;
        long l3;
        java.util.ArrayList r3, r4;

        r0 := @parameter0: android.media.MediaCodec;

        i0 := @parameter1: int;

        r1 := @parameter2: android.media.MediaCodec$LinearBlock;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r2 := @parameter5: android.media.MediaCodec$CryptoInfo;

        l3 := @parameter6: long;

        i4 := @parameter7: int;

        r3 := @parameter8: java.util.ArrayList;

        r4 := @parameter9: java.util.ArrayList;

        specialinvoke r0.<android.media.MediaCodec: void native_queueLinearBlock(int,android.media.MediaCodec$LinearBlock,int,int,android.media.MediaCodec$CryptoInfo,long,int,java.util.ArrayList,java.util.ArrayList)>(i0, r1, i1, i2, r2, l3, i4, r3, r4);

        return;
    }

    static void access$1600(android.media.MediaCodec, int, android.hardware.HardwareBuffer, long, int, java.util.ArrayList, java.util.ArrayList)
    {
        android.media.MediaCodec r0;
        int i0, i2;
        android.hardware.HardwareBuffer r1;
        long l1;
        java.util.ArrayList r2, r3;

        r0 := @parameter0: android.media.MediaCodec;

        i0 := @parameter1: int;

        r1 := @parameter2: android.hardware.HardwareBuffer;

        l1 := @parameter3: long;

        i2 := @parameter4: int;

        r2 := @parameter5: java.util.ArrayList;

        r3 := @parameter6: java.util.ArrayList;

        specialinvoke r0.<android.media.MediaCodec: void native_queueHardwareBuffer(int,android.hardware.HardwareBuffer,long,int,java.util.ArrayList,java.util.ArrayList)>(i0, r1, l1, i2, r2, r3);

        return;
    }

    static void access$1900(long)
    {
        long l0;

        l0 := @parameter0: long;

        staticinvoke <android.media.MediaCodec: void native_closeMediaImage(long)>(l0);

        return;
    }

    static android.media.MediaCodec$OnFrameRenderedListener access$200(android.media.MediaCodec)
    {
        android.media.MediaCodec r0;
        android.media.MediaCodec$OnFrameRenderedListener $r1;

        r0 := @parameter0: android.media.MediaCodec;

        $r1 = r0.<android.media.MediaCodec: android.media.MediaCodec$OnFrameRenderedListener mOnFrameRenderedListener>;

        return $r1;
    }

    static java.lang.Object access$300(android.media.MediaCodec)
    {
        android.media.MediaCodec r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.media.MediaCodec;

        $r1 = r0.<android.media.MediaCodec: java.lang.Object mBufferLock>;

        return $r1;
    }

    static int access$400(android.media.MediaCodec)
    {
        android.media.MediaCodec r0;
        int $i0;

        r0 := @parameter0: android.media.MediaCodec;

        $i0 = r0.<android.media.MediaCodec: int mBufferMode>;

        return $i0;
    }

    static java.nio.ByteBuffer[] access$500(android.media.MediaCodec)
    {
        android.media.MediaCodec r0;
        java.nio.ByteBuffer[] $r1;

        r0 := @parameter0: android.media.MediaCodec;

        $r1 = r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedInputBuffers>;

        return $r1;
    }

    static void access$600(android.media.MediaCodec, java.nio.ByteBuffer[], int)
    {
        android.media.MediaCodec r0;
        java.nio.ByteBuffer[] r1;
        int i0;

        r0 := @parameter0: android.media.MediaCodec;

        r1 := @parameter1: java.nio.ByteBuffer[];

        i0 := @parameter2: int;

        specialinvoke r0.<android.media.MediaCodec: void validateInputByteBuffer(java.nio.ByteBuffer[],int)>(r1, i0);

        return;
    }

    static java.util.ArrayList access$700(android.media.MediaCodec)
    {
        android.media.MediaCodec r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: android.media.MediaCodec;

        $r1 = r0.<android.media.MediaCodec: java.util.ArrayList mQueueRequests>;

        return $r1;
    }

    static java.nio.ByteBuffer[] access$900(android.media.MediaCodec)
    {
        android.media.MediaCodec r0;
        java.nio.ByteBuffer[] $r1;

        r0 := @parameter0: android.media.MediaCodec;

        $r1 = r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedOutputBuffers>;

        return $r1;
    }

    private final void cacheBuffers(boolean)
    {
        android.media.MediaCodec r0;
        boolean z0;
        java.lang.Throwable $r1;
        java.nio.ByteBuffer[] r2, r3;

        r0 := @this: android.media.MediaCodec;

        z0 := @parameter0: boolean;

        r2 = null;

     label1:
        r3 = specialinvoke r0.<android.media.MediaCodec: java.nio.ByteBuffer[] getBuffers(boolean)>(z0);

     label2:
        r2 = r3;

     label3:
        specialinvoke r0.<android.media.MediaCodec: void invalidateByteBuffers(java.nio.ByteBuffer[])>(r3);

     label4:
        r2 = r3;

        goto label6;

     label5:
        $r1 := @caughtexception;

     label6:
        if z0 == 0 goto label7;

        r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedInputBuffers> = r2;

        goto label8;

     label7:
        r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedOutputBuffers> = r2;

     label8:
        return;

        catch java.lang.IllegalStateException from label1 to label2 with label5;
        catch java.lang.IllegalStateException from label3 to label4 with label5;
    }

    private void configure(android.media.MediaFormat, android.view.Surface, android.media.MediaCrypto, android.os.IHwBinder, int)
    {
        android.media.MediaCodec r0;
        android.view.Surface r1;
        android.media.MediaCrypto r2;
        android.os.IHwBinder r3;
        int i0, i1, $i2, $i3, $i4, $i5, i6;
        java.util.Map$Entry r4;
        java.util.Set $r5;
        boolean $z0, $z1, z2;
        java.lang.Object $r6, $r7, $r9, $r11, $r12, r25;
        java.lang.String $r8, $r10;
        java.lang.Integer $r13, $r14;
        java.lang.IllegalArgumentException $r15, $r18;
        java.lang.Throwable $r16;
        java.lang.Exception $r17;
        android.media.MediaFormat r19;
        java.util.Map r20;
        java.lang.String[] r21;
        java.lang.Object[] r22;
        java.util.Iterator r23;

        r0 := @this: android.media.MediaCodec;

        r19 := @parameter0: android.media.MediaFormat;

        r1 := @parameter1: android.view.Surface;

        r2 := @parameter2: android.media.MediaCrypto;

        r3 := @parameter3: android.os.IHwBinder;

        i0 := @parameter4: int;

        if r2 == null goto label02;

        if r3 != null goto label01;

        goto label02;

     label01:
        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t use crypto and descrambler together!");

        throw $r15;

     label02:
        if r19 == null goto label10;

        r20 = virtualinvoke r19.<android.media.MediaFormat: java.util.Map getMap()>();

        $i3 = interfaceinvoke r20.<java.util.Map: int size()>();

        r21 = newarray (java.lang.String)[$i3];

        $i4 = interfaceinvoke r20.<java.util.Map: int size()>();

        r22 = newarray (java.lang.Object)[$i4];

        $r5 = interfaceinvoke r20.<java.util.Map: java.util.Set entrySet()>();

        r23 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

        i6 = 0;

     label03:
        $z0 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r6 = interfaceinvoke r23.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r6;

        $r7 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (java.lang.String) $r7;

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("audio-session-id");

        if $z1 == 0 goto label07;

     label04:
        $r12 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r13 = (java.lang.Integer) $r12;

        i1 = virtualinvoke $r13.<java.lang.Integer: int intValue()>();

     label05:
        r21[i6] = "audio-hw-sync";

        $i5 = staticinvoke <android.media.AudioSystem: int getAudioHwSyncForSession(int)>(i1);

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        r22[i6] = $r14;

        goto label08;

     label06:
        $r17 := @caughtexception;

        $r18 = new java.lang.IllegalArgumentException;

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Wrong Session ID Parameter!");

        throw $r18;

     label07:
        $r9 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = (java.lang.String) $r9;

        r21[i6] = $r10;

        $r11 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        r22[i6] = $r11;

     label08:
        i6 = i6 + 1;

        goto label03;

     label09:
        goto label11;

     label10:
        r21 = null;

        r22 = null;

     label11:
        if r1 == null goto label12;

        z2 = 1;

        goto label13;

     label12:
        z2 = 0;

     label13:
        r0.<android.media.MediaCodec: boolean mHasSurface> = z2;

        r0.<android.media.MediaCodec: android.media.MediaCrypto mCrypto> = r2;

        r25 = r0.<android.media.MediaCodec: java.lang.Object mBufferLock>;

        entermonitor r25;

        $i2 = i0 & 2;

        if $i2 == 0 goto label16;

     label14:
        r0.<android.media.MediaCodec: int mBufferMode> = 1;

     label15:
        goto label17;

     label16:
        r0.<android.media.MediaCodec: int mBufferMode> = 0;

     label17:
        exitmonitor r25;

     label18:
        specialinvoke r0.<android.media.MediaCodec: void native_configure(java.lang.String[],java.lang.Object[],android.view.Surface,android.media.MediaCrypto,android.os.IHwBinder,int)>(r21, r22, r1, r2, r3, i0);

        return;

     label19:
        $r16 := @caughtexception;

     label20:
        exitmonitor r25;

     label21:
        throw $r16;

        catch java.lang.Exception from label04 to label05 with label06;
        catch java.lang.Throwable from label14 to label15 with label19;
        catch java.lang.Throwable from label16 to label17 with label19;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
    }

    public static android.media.MediaCodec createByCodecName(java.lang.String) throws java.io.IOException
    {
        java.lang.String r0;
        android.media.MediaCodec $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = new android.media.MediaCodec;

        specialinvoke $r1.<android.media.MediaCodec: void <init>(java.lang.String,boolean,boolean)>(r0, 0, 0);

        return $r1;
    }

    public static android.media.MediaCodec createDecoderByType(java.lang.String) throws java.io.IOException
    {
        java.lang.String r0;
        android.media.MediaCodec $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = new android.media.MediaCodec;

        specialinvoke $r1.<android.media.MediaCodec: void <init>(java.lang.String,boolean,boolean)>(r0, 1, 0);

        return $r1;
    }

    public static android.media.MediaCodec createEncoderByType(java.lang.String) throws java.io.IOException
    {
        java.lang.String r0;
        android.media.MediaCodec $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = new android.media.MediaCodec;

        specialinvoke $r1.<android.media.MediaCodec: void <init>(java.lang.String,boolean,boolean)>(r0, 1, 1);

        return $r1;
    }

    public static android.view.Surface createPersistentInputSurface()
    {
        android.media.MediaCodec$PersistentSurface $r0;

        $r0 = staticinvoke <android.media.MediaCodec: android.media.MediaCodec$PersistentSurface native_createPersistentInputSurface()>();

        return $r0;
    }

    private final void freeAllTrackedBuffers()
    {
        android.media.MediaCodec r0;
        java.lang.Object r1;
        java.nio.ByteBuffer[] $r3, $r4;
        android.media.MediaCodec$BufferMap $r5, $r6;
        java.util.ArrayList $r7, $r8;
        java.lang.Throwable $r9;

        r0 := @this: android.media.MediaCodec;

        r1 = r0.<android.media.MediaCodec: java.lang.Object mBufferLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedInputBuffers>;

        specialinvoke r0.<android.media.MediaCodec: void freeByteBuffers(java.nio.ByteBuffer[])>($r3);

        $r4 = r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedOutputBuffers>;

        specialinvoke r0.<android.media.MediaCodec: void freeByteBuffers(java.nio.ByteBuffer[])>($r4);

        r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedInputBuffers> = null;

        r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedOutputBuffers> = null;

        $r5 = r0.<android.media.MediaCodec: android.media.MediaCodec$BufferMap mDequeuedInputBuffers>;

        virtualinvoke $r5.<android.media.MediaCodec$BufferMap: void clear()>();

        $r6 = r0.<android.media.MediaCodec: android.media.MediaCodec$BufferMap mDequeuedOutputBuffers>;

        virtualinvoke $r6.<android.media.MediaCodec$BufferMap: void clear()>();

        $r7 = r0.<android.media.MediaCodec: java.util.ArrayList mQueueRequests>;

        virtualinvoke $r7.<java.util.ArrayList: void clear()>();

        $r8 = r0.<android.media.MediaCodec: java.util.ArrayList mOutputFrames>;

        virtualinvoke $r8.<java.util.ArrayList: void clear()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r9 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private final void freeByteBuffer(java.nio.ByteBuffer)
    {
        android.media.MediaCodec r0;
        java.nio.ByteBuffer r1;

        r0 := @this: android.media.MediaCodec;

        r1 := @parameter0: java.nio.ByteBuffer;

        if r1 == null goto label1;

        staticinvoke <java.nio.NioUtils: void freeDirectBuffer(java.nio.ByteBuffer)>(r1);

     label1:
        return;
    }

    private final void freeByteBuffers(java.nio.ByteBuffer[])
    {
        android.media.MediaCodec r0;
        java.nio.ByteBuffer[] r1;
        int i0, i1;
        java.nio.ByteBuffer $r2;

        r0 := @this: android.media.MediaCodec;

        r1 := @parameter0: java.nio.ByteBuffer[];

        if r1 == null goto label2;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = r1[i1];

        specialinvoke r0.<android.media.MediaCodec: void freeByteBuffer(java.nio.ByteBuffer)>($r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private final native java.nio.ByteBuffer getBuffer(boolean, int);

    private final native java.nio.ByteBuffer[] getBuffers(boolean);

    private android.media.MediaCodec$EventHandler getEventHandlerOn(android.os.Handler, android.media.MediaCodec$EventHandler)
    {
        android.media.MediaCodec r0;
        android.media.MediaCodec$EventHandler r1, $r3, $r4;
        android.os.Looper $r2, r6;
        android.os.Handler r5;

        r0 := @this: android.media.MediaCodec;

        r5 := @parameter0: android.os.Handler;

        r1 := @parameter1: android.media.MediaCodec$EventHandler;

        if r5 != null goto label1;

        $r4 = r0.<android.media.MediaCodec: android.media.MediaCodec$EventHandler mEventHandler>;

        return $r4;

     label1:
        r6 = virtualinvoke r5.<android.os.Handler: android.os.Looper getLooper()>();

        $r2 = virtualinvoke r1.<android.media.MediaCodec$EventHandler: android.os.Looper getLooper()>();

        if $r2 != r6 goto label2;

        return r1;

     label2:
        $r3 = new android.media.MediaCodec$EventHandler;

        specialinvoke $r3.<android.media.MediaCodec$EventHandler: void <init>(android.media.MediaCodec,android.media.MediaCodec,android.os.Looper)>(r0, r0, r6);

        return $r3;
    }

    private final native java.util.Map getFormatNative(boolean);

    private final native android.media.Image getImage(boolean, int);

    private final native java.util.Map getOutputFormatNative(int);

    private final native android.media.MediaCodecInfo getOwnCodecInfo();

    private final void invalidateByteBuffer(java.nio.ByteBuffer[], int)
    {
        android.media.MediaCodec r0;
        int i0, $i1;
        java.nio.ByteBuffer[] r1;
        java.nio.ByteBuffer r2;

        r0 := @this: android.media.MediaCodec;

        r1 := @parameter0: java.nio.ByteBuffer[];

        i0 := @parameter1: int;

        if r1 == null goto label1;

        if i0 < 0 goto label1;

        $i1 = lengthof r1;

        if i0 >= $i1 goto label1;

        r2 = r1[i0];

        if r2 == null goto label1;

        virtualinvoke r2.<java.nio.ByteBuffer: void setAccessible(boolean)>(0);

     label1:
        return;
    }

    private final void invalidateByteBuffers(java.nio.ByteBuffer[])
    {
        android.media.MediaCodec r0;
        java.nio.ByteBuffer[] r1;
        int i0, i1;
        java.nio.ByteBuffer r2;

        r0 := @this: android.media.MediaCodec;

        r1 := @parameter0: java.nio.ByteBuffer[];

        if r1 == null goto label3;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = r1[i1];

        if r2 == null goto label2;

        virtualinvoke r2.<java.nio.ByteBuffer: void setAccessible(boolean)>(0);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    private final long lockAndGetContext()
    {
        android.media.MediaCodec r0;
        java.util.concurrent.locks.Lock $r1;
        long $l0;

        r0 := @this: android.media.MediaCodec;

        $r1 = r0.<android.media.MediaCodec: java.util.concurrent.locks.Lock mNativeContextLock>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lock()>();

        $l0 = r0.<android.media.MediaCodec: long mNativeContext>;

        return $l0;
    }

    public static android.media.Image mapHardwareBuffer(android.hardware.HardwareBuffer)
    {
        android.hardware.HardwareBuffer r0;
        android.media.Image $r1;

        r0 := @parameter0: android.hardware.HardwareBuffer;

        $r1 = staticinvoke <android.media.MediaCodec: android.media.Image native_mapHardwareBuffer(android.hardware.HardwareBuffer)>(r0);

        return $r1;
    }

    private static native void native_closeMediaImage(long);

    private final native void native_configure(java.lang.String[], java.lang.Object[], android.view.Surface, android.media.MediaCrypto, android.os.IHwBinder, int);

    private static final native android.media.MediaCodec$PersistentSurface native_createPersistentInputSurface();

    private final native int native_dequeueInputBuffer(long);

    private final native int native_dequeueOutputBuffer(android.media.MediaCodec$BufferInfo, long);

    private native void native_enableOnFrameRenderedListener(boolean);

    private final native void native_finalize();

    private final native void native_flush();

    private native android.os.PersistableBundle native_getMetrics();

    private native void native_getOutputFrame(android.media.MediaCodec$OutputFrame, int);

    private static final native void native_init();

    private static native android.media.Image native_mapHardwareBuffer(android.hardware.HardwareBuffer);

    private native void native_queueHardwareBuffer(int, android.hardware.HardwareBuffer, long, int, java.util.ArrayList, java.util.ArrayList);

    private final native void native_queueInputBuffer(int, int, int, long, int) throws android.media.MediaCodec$CryptoException;

    private native void native_queueLinearBlock(int, android.media.MediaCodec$LinearBlock, int, int, android.media.MediaCodec$CryptoInfo, long, int, java.util.ArrayList, java.util.ArrayList);

    private final native void native_queueSecureInputBuffer(int, int, android.media.MediaCodec$CryptoInfo, long, int) throws android.media.MediaCodec$CryptoException;

    private final native void native_release();

    private static final native void native_releasePersistentInputSurface(android.view.Surface);

    private final native void native_reset();

    private native void native_setAudioPresentation(int, int);

    private final native void native_setCallback(android.media.MediaCodec$Callback);

    private final native void native_setInputSurface(android.view.Surface);

    private native void native_setSurface(android.view.Surface);

    private final native void native_setup(java.lang.String, boolean, boolean);

    private final native void native_start();

    private final native void native_stop();

    private void postEventFromNative(int, int, int, java.lang.Object)
    {
        android.media.MediaCodec r0;
        int i0, i1, i2;
        java.lang.Object r1, r4;
        android.os.Message $r2;
        java.lang.Throwable $r3;
        android.media.MediaCodec$EventHandler r5;

        r0 := @this: android.media.MediaCodec;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r4 := @parameter3: java.lang.Object;

        r1 = r0.<android.media.MediaCodec: java.lang.Object mListenerLock>;

        entermonitor r1;

     label01:
        r5 = r0.<android.media.MediaCodec: android.media.MediaCodec$EventHandler mEventHandler>;

     label02:
        if i0 != 1 goto label05;

     label03:
        r5 = r0.<android.media.MediaCodec: android.media.MediaCodec$EventHandler mCallbackHandler>;

     label04:
        goto label07;

     label05:
        if i0 != 3 goto label07;

     label06:
        r5 = r0.<android.media.MediaCodec: android.media.MediaCodec$EventHandler mOnFrameRenderedHandler>;

     label07:
        if r5 == null goto label09;

     label08:
        $r2 = virtualinvoke r5.<android.media.MediaCodec$EventHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(i0, i1, i2, r4);

        virtualinvoke r5.<android.media.MediaCodec$EventHandler: boolean sendMessage(android.os.Message)>($r2);

     label09:
        exitmonitor r1;

     label10:
        return;

     label11:
        $r3 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    private final native void releaseOutputBuffer(int, boolean, boolean, long);

    private void releaseOutputBufferInternal(int, boolean, boolean, long)
    {
        android.media.MediaCodec r0;
        int i0, i2, $i3;
        boolean z0, z1, $z2;
        long l1;
        java.lang.Object r1, $r7, $r12;
        java.lang.StringBuilder r2;
        java.nio.ByteBuffer[] $r3;
        android.media.MediaCodec$BufferMap $r4;
        java.util.Map $r5;
        java.lang.Integer $r6;
        java.lang.String $r10;
        java.util.ArrayList $r11;
        java.lang.Throwable $r13;
        android.media.MediaCodec$OutputFrame r14;
        java.lang.IllegalStateException r15;
        android.media.MediaCodec$BufferInfo r16;

        r0 := @this: android.media.MediaCodec;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        l1 := @parameter3: long;

        r1 = r0.<android.media.MediaCodec: java.lang.Object mBufferLock>;

        entermonitor r1;

     label01:
        i2 = r0.<android.media.MediaCodec: int mBufferMode>;

     label02:
        if i2 == 0 goto label06;

        if i2 != 1 goto label05;

     label03:
        $r11 = r0.<android.media.MediaCodec: java.util.ArrayList mOutputFrames>;

        $r12 = virtualinvoke $r11.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        r14 = (android.media.MediaCodec$OutputFrame) $r12;

        virtualinvoke r14.<android.media.MediaCodec$OutputFrame: void setAccessible(boolean)>(0);

        virtualinvoke r14.<android.media.MediaCodec$OutputFrame: void clear()>();

     label04:
        goto label07;

     label05:
        r15 = new java.lang.IllegalStateException;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized buffer mode: ");

        $i3 = r0.<android.media.MediaCodec: int mBufferMode>;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r10 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw r15;

     label06:
        $r3 = r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedOutputBuffers>;

        specialinvoke r0.<android.media.MediaCodec: void invalidateByteBuffer(java.nio.ByteBuffer[],int)>($r3, i0);

        $r4 = r0.<android.media.MediaCodec: android.media.MediaCodec$BufferMap mDequeuedOutputBuffers>;

        virtualinvoke $r4.<android.media.MediaCodec$BufferMap: void remove(int)>(i0);

        $z2 = r0.<android.media.MediaCodec: boolean mHasSurface>;

        if $z2 == 0 goto label07;

        $r5 = r0.<android.media.MediaCodec: java.util.Map mDequeuedOutputInfos>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r7 = interfaceinvoke $r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r6);

        r16 = (android.media.MediaCodec$BufferInfo) $r7;

     label07:
        exitmonitor r1;

     label08:
        specialinvoke r0.<android.media.MediaCodec: void releaseOutputBuffer(int,boolean,boolean,long)>(i0, z0, z1, l1);

        return;

     label09:
        $r13 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    private final void revalidateByteBuffer(java.nio.ByteBuffer[], int)
    {
        android.media.MediaCodec r0;
        int i0, $i1;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        java.nio.ByteBuffer[] r3;
        java.nio.ByteBuffer r4;

        r0 := @this: android.media.MediaCodec;

        r3 := @parameter0: java.nio.ByteBuffer[];

        i0 := @parameter1: int;

        r1 = r0.<android.media.MediaCodec: java.lang.Object mBufferLock>;

        entermonitor r1;

        if r3 == null goto label4;

        if i0 < 0 goto label4;

     label1:
        $i1 = lengthof r3;

        if i0 >= $i1 goto label4;

     label2:
        r4 = r3[i0];

        if r4 == null goto label4;

     label3:
        virtualinvoke r4.<java.nio.ByteBuffer: void setAccessible(boolean)>(1);

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r2 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private final void setAndUnlockContext(long)
    {
        android.media.MediaCodec r0;
        long l0;
        java.util.concurrent.locks.Lock $r1;

        r0 := @this: android.media.MediaCodec;

        l0 := @parameter0: long;

        r0.<android.media.MediaCodec: long mNativeContext> = l0;

        $r1 = r0.<android.media.MediaCodec: java.util.concurrent.locks.Lock mNativeContextLock>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void unlock()>();

        return;
    }

    private final native void setParameters(java.lang.String[], java.lang.Object[]);

    private final void validateInputByteBuffer(java.nio.ByteBuffer[], int)
    {
        android.media.MediaCodec r0;
        int i0, $i1;
        java.nio.ByteBuffer[] r2;
        java.nio.ByteBuffer r3;

        r0 := @this: android.media.MediaCodec;

        r2 := @parameter0: java.nio.ByteBuffer[];

        i0 := @parameter1: int;

        if r2 == null goto label1;

        if i0 < 0 goto label1;

        $i1 = lengthof r2;

        if i0 >= $i1 goto label1;

        r3 = r2[i0];

        if r3 == null goto label1;

        virtualinvoke r3.<java.nio.ByteBuffer: void setAccessible(boolean)>(1);

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

     label1:
        return;
    }

    private final void validateOutputByteBuffer(java.nio.ByteBuffer[], int, android.media.MediaCodec$BufferInfo)
    {
        android.media.MediaCodec r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        android.media.MediaCodec$BufferInfo r1;
        java.nio.Buffer $r2;
        java.nio.ByteBuffer[] r4;
        java.nio.ByteBuffer r5;

        r0 := @this: android.media.MediaCodec;

        r4 := @parameter0: java.nio.ByteBuffer[];

        i0 := @parameter1: int;

        r1 := @parameter2: android.media.MediaCodec$BufferInfo;

        if r4 == null goto label1;

        if i0 < 0 goto label1;

        $i1 = lengthof r4;

        if i0 >= $i1 goto label1;

        r5 = r4[i0];

        if r5 == null goto label1;

        virtualinvoke r5.<java.nio.ByteBuffer: void setAccessible(boolean)>(1);

        $i3 = r1.<android.media.MediaCodec$BufferInfo: int offset>;

        $i2 = r1.<android.media.MediaCodec$BufferInfo: int size>;

        $i4 = $i3 + $i2;

        $r2 = virtualinvoke r5.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i4);

        $i5 = r1.<android.media.MediaCodec$BufferInfo: int offset>;

        virtualinvoke $r2.<java.nio.Buffer: java.nio.Buffer position(int)>($i5);

     label1:
        return;
    }

    public void configure(android.media.MediaFormat, android.view.Surface, int, android.media.MediaDescrambler)
    {
        android.media.MediaCodec r0;
        android.media.MediaFormat r1;
        android.view.Surface r2;
        int i0;
        android.media.MediaDescrambler r3;
        android.os.IHwBinder r4;

        r0 := @this: android.media.MediaCodec;

        r1 := @parameter0: android.media.MediaFormat;

        r2 := @parameter1: android.view.Surface;

        i0 := @parameter2: int;

        r3 := @parameter3: android.media.MediaDescrambler;

        if r3 == null goto label1;

        r4 = virtualinvoke r3.<android.media.MediaDescrambler: android.os.IHwBinder getBinder()>();

        goto label2;

     label1:
        r4 = null;

     label2:
        specialinvoke r0.<android.media.MediaCodec: void configure(android.media.MediaFormat,android.view.Surface,android.media.MediaCrypto,android.os.IHwBinder,int)>(r1, r2, null, r4, i0);

        return;
    }

    public void configure(android.media.MediaFormat, android.view.Surface, android.media.MediaCrypto, int)
    {
        android.media.MediaCodec r0;
        android.media.MediaFormat r1;
        android.view.Surface r2;
        android.media.MediaCrypto r3;
        int i0;

        r0 := @this: android.media.MediaCodec;

        r1 := @parameter0: android.media.MediaFormat;

        r2 := @parameter1: android.view.Surface;

        r3 := @parameter2: android.media.MediaCrypto;

        i0 := @parameter3: int;

        specialinvoke r0.<android.media.MediaCodec: void configure(android.media.MediaFormat,android.view.Surface,android.media.MediaCrypto,android.os.IHwBinder,int)>(r1, r2, r3, null, i0);

        return;
    }

    public final native android.view.Surface createInputSurface();

    public final int dequeueInputBuffer(long)
    {
        android.media.MediaCodec r0;
        long l0;
        int i1, $i2;
        java.nio.ByteBuffer[] $r1;
        java.lang.Throwable $r2, $r3;
        java.lang.Object r4, r5;
        android.media.MediaCodec$IncompatibleWithBlockModelException r7;

        r0 := @this: android.media.MediaCodec;

        l0 := @parameter0: long;

        r4 = r0.<android.media.MediaCodec: java.lang.Object mBufferLock>;

        entermonitor r4;

     label01:
        $i2 = r0.<android.media.MediaCodec: int mBufferMode>;

        if $i2 == 1 goto label09;

        exitmonitor r4;

     label02:
        i1 = specialinvoke r0.<android.media.MediaCodec: int native_dequeueInputBuffer(long)>(l0);

        if i1 < 0 goto label08;

        r5 = r0.<android.media.MediaCodec: java.lang.Object mBufferLock>;

        entermonitor r5;

     label03:
        $r1 = r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedInputBuffers>;

        specialinvoke r0.<android.media.MediaCodec: void validateInputByteBuffer(java.nio.ByteBuffer[],int)>($r1, i1);

        exitmonitor r5;

     label04:
        goto label08;

     label05:
        $r2 := @caughtexception;

     label06:
        exitmonitor r5;

     label07:
        throw $r2;

     label08:
        return i1;

     label09:
        r7 = new android.media.MediaCodec$IncompatibleWithBlockModelException;

        specialinvoke r7.<android.media.MediaCodec$IncompatibleWithBlockModelException: void <init>(android.media.MediaCodec,java.lang.String)>(r0, "dequeueInputBuffer() is not compatible with CONFIGURE_FLAG_USE_BLOCK_MODEL. Please use MediaCodec.Callback objectes to get input buffer slots.");

        throw r7;

     label10:
        $r3 := @caughtexception;

     label11:
        exitmonitor r4;

     label12:
        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public final int dequeueOutputBuffer(android.media.MediaCodec$BufferInfo, long)
    {
        android.media.MediaCodec r0;
        long l0;
        int i1, $i2;
        java.nio.ByteBuffer[] $r1;
        boolean $z0;
        java.util.Map $r2;
        java.lang.Integer $r3;
        android.media.MediaCodec$BufferInfo $r4, r8;
        java.lang.Throwable $r6, $r7;
        java.lang.Object r9, r10;
        android.media.MediaCodec$IncompatibleWithBlockModelException r12;

        r0 := @this: android.media.MediaCodec;

        r8 := @parameter0: android.media.MediaCodec$BufferInfo;

        l0 := @parameter1: long;

        r9 = r0.<android.media.MediaCodec: java.lang.Object mBufferLock>;

        entermonitor r9;

     label01:
        $i2 = r0.<android.media.MediaCodec: int mBufferMode>;

        if $i2 == 1 goto label12;

        exitmonitor r9;

     label02:
        i1 = specialinvoke r0.<android.media.MediaCodec: int native_dequeueOutputBuffer(android.media.MediaCodec$BufferInfo,long)>(r8, l0);

        r10 = r0.<android.media.MediaCodec: java.lang.Object mBufferLock>;

        entermonitor r10;

        if i1 != -3 goto label06;

     label03:
        specialinvoke r0.<android.media.MediaCodec: void cacheBuffers(boolean)>(0);

     label04:
        goto label08;

     label05:
        $r6 := @caughtexception;

        goto label10;

     label06:
        if i1 < 0 goto label08;

     label07:
        $r1 = r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedOutputBuffers>;

        specialinvoke r0.<android.media.MediaCodec: void validateOutputByteBuffer(java.nio.ByteBuffer[],int,android.media.MediaCodec$BufferInfo)>($r1, i1, r8);

        $z0 = r0.<android.media.MediaCodec: boolean mHasSurface>;

        if $z0 == 0 goto label08;

        $r2 = r0.<android.media.MediaCodec: java.util.Map mDequeuedOutputInfos>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r4 = virtualinvoke r8.<android.media.MediaCodec$BufferInfo: android.media.MediaCodec$BufferInfo dup()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

     label08:
        exitmonitor r10;

     label09:
        return i1;

     label10:
        exitmonitor r10;

     label11:
        throw $r6;

     label12:
        r12 = new android.media.MediaCodec$IncompatibleWithBlockModelException;

        specialinvoke r12.<android.media.MediaCodec$IncompatibleWithBlockModelException: void <init>(android.media.MediaCodec,java.lang.String)>(r0, "dequeueOutputBuffer() is not compatible with CONFIGURE_FLAG_USE_BLOCK_MODEL. Please use MediaCodec.Callback objects to get output buffer slots.");

        throw r12;

     label13:
        $r7 := @caughtexception;

     label14:
        exitmonitor r9;

     label15:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label07 to label08 with label05;
        catch java.lang.Throwable from label08 to label09 with label05;
        catch java.lang.Throwable from label10 to label11 with label05;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    protected void finalize()
    {
        android.media.MediaCodec r0;

        r0 := @this: android.media.MediaCodec;

        specialinvoke r0.<android.media.MediaCodec: void native_finalize()>();

        r0.<android.media.MediaCodec: android.media.MediaCrypto mCrypto> = null;

        return;
    }

    public final void flush()
    {
        android.media.MediaCodec r0;
        java.lang.Object r1;
        java.nio.ByteBuffer[] $r3, $r4;
        android.media.MediaCodec$BufferMap $r5, $r6;
        java.lang.Throwable $r7;

        r0 := @this: android.media.MediaCodec;

        r1 = r0.<android.media.MediaCodec: java.lang.Object mBufferLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedInputBuffers>;

        specialinvoke r0.<android.media.MediaCodec: void invalidateByteBuffers(java.nio.ByteBuffer[])>($r3);

        $r4 = r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedOutputBuffers>;

        specialinvoke r0.<android.media.MediaCodec: void invalidateByteBuffers(java.nio.ByteBuffer[])>($r4);

        $r5 = r0.<android.media.MediaCodec: android.media.MediaCodec$BufferMap mDequeuedInputBuffers>;

        virtualinvoke $r5.<android.media.MediaCodec$BufferMap: void clear()>();

        $r6 = r0.<android.media.MediaCodec: android.media.MediaCodec$BufferMap mDequeuedOutputBuffers>;

        virtualinvoke $r6.<android.media.MediaCodec$BufferMap: void clear()>();

        exitmonitor r1;

     label2:
        specialinvoke r0.<android.media.MediaCodec: void native_flush()>();

        return;

     label3:
        $r7 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public final native java.lang.String getCanonicalName();

    public android.media.MediaCodecInfo getCodecInfo()
    {
        android.media.MediaCodec r0;
        java.lang.String r1;
        java.lang.Object r2;
        android.media.MediaCodecInfo $r3, $r4, r6, r7;
        java.lang.Throwable $r5;

        r0 := @this: android.media.MediaCodec;

        r1 = virtualinvoke r0.<android.media.MediaCodec: java.lang.String getName()>();

        r2 = r0.<android.media.MediaCodec: java.lang.Object mCodecInfoLock>;

        entermonitor r2;

     label1:
        $r3 = r0.<android.media.MediaCodec: android.media.MediaCodecInfo mCodecInfo>;

        if $r3 != null goto label4;

        r6 = specialinvoke r0.<android.media.MediaCodec: android.media.MediaCodecInfo getOwnCodecInfo()>();

        r0.<android.media.MediaCodec: android.media.MediaCodecInfo mCodecInfo> = r6;

     label2:
        if r6 != null goto label4;

     label3:
        $r4 = staticinvoke <android.media.MediaCodecList: android.media.MediaCodecInfo getInfoFor(java.lang.String)>(r1);

        r0.<android.media.MediaCodec: android.media.MediaCodecInfo mCodecInfo> = $r4;

     label4:
        r7 = r0.<android.media.MediaCodec: android.media.MediaCodecInfo mCodecInfo>;

        exitmonitor r2;

     label5:
        return r7;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r2;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public java.nio.ByteBuffer getInputBuffer(int)
    {
        android.media.MediaCodec r0;
        int i0, $i1;
        java.nio.ByteBuffer[] $r1;
        android.media.MediaCodec$BufferMap $r2;
        java.lang.Throwable $r3, $r4;
        java.lang.Object r5, r7;
        java.nio.ByteBuffer r6;
        android.media.MediaCodec$IncompatibleWithBlockModelException r9;

        r0 := @this: android.media.MediaCodec;

        i0 := @parameter0: int;

        r5 = r0.<android.media.MediaCodec: java.lang.Object mBufferLock>;

        entermonitor r5;

     label01:
        $i1 = r0.<android.media.MediaCodec: int mBufferMode>;

        if $i1 == 1 goto label08;

        exitmonitor r5;

     label02:
        r6 = specialinvoke r0.<android.media.MediaCodec: java.nio.ByteBuffer getBuffer(boolean,int)>(1, i0);

        r7 = r0.<android.media.MediaCodec: java.lang.Object mBufferLock>;

        entermonitor r7;

     label03:
        $r1 = r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedInputBuffers>;

        specialinvoke r0.<android.media.MediaCodec: void invalidateByteBuffer(java.nio.ByteBuffer[],int)>($r1, i0);

        $r2 = r0.<android.media.MediaCodec: android.media.MediaCodec$BufferMap mDequeuedInputBuffers>;

        virtualinvoke $r2.<android.media.MediaCodec$BufferMap: void put(int,java.nio.ByteBuffer)>(i0, r6);

        exitmonitor r7;

     label04:
        return r6;

     label05:
        $r4 := @caughtexception;

     label06:
        exitmonitor r7;

     label07:
        throw $r4;

     label08:
        r9 = new android.media.MediaCodec$IncompatibleWithBlockModelException;

        specialinvoke r9.<android.media.MediaCodec$IncompatibleWithBlockModelException: void <init>(android.media.MediaCodec,java.lang.String)>(r0, "getInputBuffer() is not compatible with CONFIGURE_FLAG_USE_BLOCK_MODEL. Please obtain MediaCodec.LinearBlock or HardwareBuffer objects and attach to QueueRequest objects.");

        throw r9;

     label09:
        $r3 := @caughtexception;

     label10:
        exitmonitor r5;

     label11:
        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public java.nio.ByteBuffer[] getInputBuffers()
    {
        android.media.MediaCodec r0;
        java.lang.Object r1;
        int $i0;
        java.nio.ByteBuffer[] $r2, r4;
        java.lang.Throwable $r3;
        java.lang.IllegalStateException r5;
        android.media.MediaCodec$IncompatibleWithBlockModelException r6;

        r0 := @this: android.media.MediaCodec;

        r1 = r0.<android.media.MediaCodec: java.lang.Object mBufferLock>;

        entermonitor r1;

     label1:
        $i0 = r0.<android.media.MediaCodec: int mBufferMode>;

        if $i0 == 1 goto label4;

        $r2 = r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedInputBuffers>;

        if $r2 == null goto label3;

        r4 = r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedInputBuffers>;

        exitmonitor r1;

     label2:
        return r4;

     label3:
        r5 = new java.lang.IllegalStateException;

        specialinvoke r5.<java.lang.IllegalStateException: void <init>()>();

        throw r5;

     label4:
        r6 = new android.media.MediaCodec$IncompatibleWithBlockModelException;

        specialinvoke r6.<android.media.MediaCodec$IncompatibleWithBlockModelException: void <init>(android.media.MediaCodec,java.lang.String)>(r0, "getInputBuffers() is not compatible with CONFIGURE_FLAG_USE_BLOCK_MODEL. Please obtain MediaCodec.LinearBlock or HardwareBuffer objects and attach to QueueRequest objects.");

        throw r6;

     label5:
        $r3 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label4 to label5 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public final android.media.MediaFormat getInputFormat()
    {
        android.media.MediaCodec r0;
        android.media.MediaFormat $r1;
        java.util.Map $r2;

        r0 := @this: android.media.MediaCodec;

        $r1 = new android.media.MediaFormat;

        $r2 = specialinvoke r0.<android.media.MediaCodec: java.util.Map getFormatNative(boolean)>(1);

        specialinvoke $r1.<android.media.MediaFormat: void <init>(java.util.Map)>($r2);

        return $r1;
    }

    public android.media.Image getInputImage(int)
    {
        android.media.MediaCodec r0;
        int i0, $i1;
        java.nio.ByteBuffer[] $r1;
        android.media.MediaCodec$BufferMap $r2;
        java.lang.Throwable $r3, $r4;
        java.lang.Object r5, r7;
        android.media.Image r6;
        android.media.MediaCodec$IncompatibleWithBlockModelException r9;

        r0 := @this: android.media.MediaCodec;

        i0 := @parameter0: int;

        r5 = r0.<android.media.MediaCodec: java.lang.Object mBufferLock>;

        entermonitor r5;

     label01:
        $i1 = r0.<android.media.MediaCodec: int mBufferMode>;

        if $i1 == 1 goto label08;

        exitmonitor r5;

     label02:
        r6 = specialinvoke r0.<android.media.MediaCodec: android.media.Image getImage(boolean,int)>(1, i0);

        r7 = r0.<android.media.MediaCodec: java.lang.Object mBufferLock>;

        entermonitor r7;

     label03:
        $r1 = r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedInputBuffers>;

        specialinvoke r0.<android.media.MediaCodec: void invalidateByteBuffer(java.nio.ByteBuffer[],int)>($r1, i0);

        $r2 = r0.<android.media.MediaCodec: android.media.MediaCodec$BufferMap mDequeuedInputBuffers>;

        virtualinvoke $r2.<android.media.MediaCodec$BufferMap: void put(int,android.media.Image)>(i0, r6);

        exitmonitor r7;

     label04:
        return r6;

     label05:
        $r4 := @caughtexception;

     label06:
        exitmonitor r7;

     label07:
        throw $r4;

     label08:
        r9 = new android.media.MediaCodec$IncompatibleWithBlockModelException;

        specialinvoke r9.<android.media.MediaCodec$IncompatibleWithBlockModelException: void <init>(android.media.MediaCodec,java.lang.String)>(r0, "getInputImage() is not compatible with CONFIGURE_FLAG_USE_BLOCK_MODEL. Please obtain MediaCodec.LinearBlock or HardwareBuffer objects and attach to QueueRequest objects.");

        throw r9;

     label09:
        $r3 := @caughtexception;

     label10:
        exitmonitor r5;

     label11:
        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public android.os.PersistableBundle getMetrics()
    {
        android.media.MediaCodec r0;
        android.os.PersistableBundle $r1;

        r0 := @this: android.media.MediaCodec;

        $r1 = specialinvoke r0.<android.media.MediaCodec: android.os.PersistableBundle native_getMetrics()>();

        return $r1;
    }

    public final java.lang.String getName()
    {
        android.media.MediaCodec r0;
        java.lang.String r1, r2;

        r0 := @this: android.media.MediaCodec;

        r2 = virtualinvoke r0.<android.media.MediaCodec: java.lang.String getCanonicalName()>();

        r1 = r0.<android.media.MediaCodec: java.lang.String mNameAtCreation>;

        if r1 == null goto label1;

        r2 = r1;

        goto label1;

     label1:
        return r2;
    }

    public java.nio.ByteBuffer getOutputBuffer(int)
    {
        android.media.MediaCodec r0;
        int i0, $i1;
        java.nio.ByteBuffer[] $r1;
        android.media.MediaCodec$BufferMap $r2;
        java.lang.Throwable $r3, $r4;
        java.lang.Object r5, r7;
        java.nio.ByteBuffer r6;
        android.media.MediaCodec$IncompatibleWithBlockModelException r9;

        r0 := @this: android.media.MediaCodec;

        i0 := @parameter0: int;

        r5 = r0.<android.media.MediaCodec: java.lang.Object mBufferLock>;

        entermonitor r5;

     label01:
        $i1 = r0.<android.media.MediaCodec: int mBufferMode>;

        if $i1 == 1 goto label08;

        exitmonitor r5;

     label02:
        r6 = specialinvoke r0.<android.media.MediaCodec: java.nio.ByteBuffer getBuffer(boolean,int)>(0, i0);

        r7 = r0.<android.media.MediaCodec: java.lang.Object mBufferLock>;

        entermonitor r7;

     label03:
        $r1 = r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedOutputBuffers>;

        specialinvoke r0.<android.media.MediaCodec: void invalidateByteBuffer(java.nio.ByteBuffer[],int)>($r1, i0);

        $r2 = r0.<android.media.MediaCodec: android.media.MediaCodec$BufferMap mDequeuedOutputBuffers>;

        virtualinvoke $r2.<android.media.MediaCodec$BufferMap: void put(int,java.nio.ByteBuffer)>(i0, r6);

        exitmonitor r7;

     label04:
        return r6;

     label05:
        $r4 := @caughtexception;

     label06:
        exitmonitor r7;

     label07:
        throw $r4;

     label08:
        r9 = new android.media.MediaCodec$IncompatibleWithBlockModelException;

        specialinvoke r9.<android.media.MediaCodec$IncompatibleWithBlockModelException: void <init>(android.media.MediaCodec,java.lang.String)>(r0, "getOutputBuffer() is not compatible with CONFIGURE_FLAG_USE_BLOCK_MODEL. Please use getOutputFrame() to get output frames.");

        throw r9;

     label09:
        $r3 := @caughtexception;

     label10:
        exitmonitor r5;

     label11:
        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public java.nio.ByteBuffer[] getOutputBuffers()
    {
        android.media.MediaCodec r0;
        java.lang.Object r1;
        int $i0;
        java.nio.ByteBuffer[] $r2, r4;
        java.lang.Throwable $r3;
        java.lang.IllegalStateException r5;
        android.media.MediaCodec$IncompatibleWithBlockModelException r6;

        r0 := @this: android.media.MediaCodec;

        r1 = r0.<android.media.MediaCodec: java.lang.Object mBufferLock>;

        entermonitor r1;

     label1:
        $i0 = r0.<android.media.MediaCodec: int mBufferMode>;

        if $i0 == 1 goto label4;

        $r2 = r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedOutputBuffers>;

        if $r2 == null goto label3;

        r4 = r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedOutputBuffers>;

        exitmonitor r1;

     label2:
        return r4;

     label3:
        r5 = new java.lang.IllegalStateException;

        specialinvoke r5.<java.lang.IllegalStateException: void <init>()>();

        throw r5;

     label4:
        r6 = new android.media.MediaCodec$IncompatibleWithBlockModelException;

        specialinvoke r6.<android.media.MediaCodec$IncompatibleWithBlockModelException: void <init>(android.media.MediaCodec,java.lang.String)>(r0, "getOutputBuffers() is not compatible with CONFIGURE_FLAG_USE_BLOCK_MODEL. Please use getOutputFrame to get output frames.");

        throw r6;

     label5:
        $r3 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label4 to label5 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public final android.media.MediaFormat getOutputFormat()
    {
        android.media.MediaCodec r0;
        android.media.MediaFormat $r1;
        java.util.Map $r2;

        r0 := @this: android.media.MediaCodec;

        $r1 = new android.media.MediaFormat;

        $r2 = specialinvoke r0.<android.media.MediaCodec: java.util.Map getFormatNative(boolean)>(0);

        specialinvoke $r1.<android.media.MediaFormat: void <init>(java.util.Map)>($r2);

        return $r1;
    }

    public final android.media.MediaFormat getOutputFormat(int)
    {
        android.media.MediaCodec r0;
        int i0;
        android.media.MediaFormat $r1;
        java.util.Map $r2;

        r0 := @this: android.media.MediaCodec;

        i0 := @parameter0: int;

        $r1 = new android.media.MediaFormat;

        $r2 = specialinvoke r0.<android.media.MediaCodec: java.util.Map getOutputFormatNative(int)>(i0);

        specialinvoke $r1.<android.media.MediaFormat: void <init>(java.util.Map)>($r2);

        return $r1;
    }

    public android.media.MediaCodec$OutputFrame getOutputFrame(int)
    {
        android.media.MediaCodec r0;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Object r1, $r10;
        java.util.ArrayList $r3, $r8, $r9;
        java.lang.String $r7, $r13, $r16;
        boolean $z0, $z1;
        java.lang.Throwable $r17;
        android.media.MediaCodec$OutputFrame r18;
        java.lang.IllegalArgumentException r19, r21;
        java.lang.StringBuilder r20, r22, r24;
        java.lang.IndexOutOfBoundsException r23;
        java.lang.IllegalStateException r25;

        r0 := @this: android.media.MediaCodec;

        i0 := @parameter0: int;

        r1 = r0.<android.media.MediaCodec: java.lang.Object mBufferLock>;

        entermonitor r1;

     label01:
        $i1 = r0.<android.media.MediaCodec: int mBufferMode>;

        if $i1 != 1 goto label11;

     label02:
        if i0 < 0 goto label10;

     label03:
        $r8 = r0.<android.media.MediaCodec: java.util.ArrayList mOutputFrames>;

        $i4 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        if i0 >= $i4 goto label10;

        $r9 = r0.<android.media.MediaCodec: java.util.ArrayList mOutputFrames>;

        $r10 = virtualinvoke $r9.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        r18 = (android.media.MediaCodec$OutputFrame) $r10;

     label04:
        if r18 == null goto label09;

     label05:
        $z0 = virtualinvoke r18.<android.media.MediaCodec$OutputFrame: boolean isAccessible()>();

        if $z0 == 0 goto label08;

        $z1 = virtualinvoke r18.<android.media.MediaCodec$OutputFrame: boolean isLoaded()>();

        if $z1 != 0 goto label06;

        specialinvoke r0.<android.media.MediaCodec: void native_getOutputFrame(android.media.MediaCodec$OutputFrame,int)>(r18, i0);

        virtualinvoke r18.<android.media.MediaCodec$OutputFrame: void setLoaded(boolean)>(1);

     label06:
        exitmonitor r1;

     label07:
        return r18;

     label08:
        r19 = new java.lang.IllegalArgumentException;

        r20 = new java.lang.StringBuilder;

        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The output frame is stale at index ");

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r16 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw r19;

     label09:
        r21 = new java.lang.IllegalArgumentException;

        r22 = new java.lang.StringBuilder;

        specialinvoke r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unavailable index: ");

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw r21;

     label10:
        r23 = new java.lang.IndexOutOfBoundsException;

        r24 = new java.lang.StringBuilder;

        specialinvoke r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected range of index: [0,");

        $r3 = r0.<android.media.MediaCodec: java.util.ArrayList mQueueRequests>;

        $i2 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        $i3 = $i2 - 1;

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]; actual: ");

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r23.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r7);

        throw r23;

     label11:
        r25 = new java.lang.IllegalStateException;

        specialinvoke r25.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The codec is not configured for block model");

        throw r25;

     label12:
        $r17 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r17;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label11 to label12 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public android.media.Image getOutputImage(int)
    {
        android.media.MediaCodec r0;
        int i0, $i1;
        java.nio.ByteBuffer[] $r1;
        android.media.MediaCodec$BufferMap $r2;
        java.lang.Throwable $r3, $r4;
        java.lang.Object r5, r7;
        android.media.Image r6;
        android.media.MediaCodec$IncompatibleWithBlockModelException r9;

        r0 := @this: android.media.MediaCodec;

        i0 := @parameter0: int;

        r5 = r0.<android.media.MediaCodec: java.lang.Object mBufferLock>;

        entermonitor r5;

     label01:
        $i1 = r0.<android.media.MediaCodec: int mBufferMode>;

        if $i1 == 1 goto label08;

        exitmonitor r5;

     label02:
        r6 = specialinvoke r0.<android.media.MediaCodec: android.media.Image getImage(boolean,int)>(0, i0);

        r7 = r0.<android.media.MediaCodec: java.lang.Object mBufferLock>;

        entermonitor r7;

     label03:
        $r1 = r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedOutputBuffers>;

        specialinvoke r0.<android.media.MediaCodec: void invalidateByteBuffer(java.nio.ByteBuffer[],int)>($r1, i0);

        $r2 = r0.<android.media.MediaCodec: android.media.MediaCodec$BufferMap mDequeuedOutputBuffers>;

        virtualinvoke $r2.<android.media.MediaCodec$BufferMap: void put(int,android.media.Image)>(i0, r6);

        exitmonitor r7;

     label04:
        return r6;

     label05:
        $r3 := @caughtexception;

     label06:
        exitmonitor r7;

     label07:
        throw $r3;

     label08:
        r9 = new android.media.MediaCodec$IncompatibleWithBlockModelException;

        specialinvoke r9.<android.media.MediaCodec$IncompatibleWithBlockModelException: void <init>(android.media.MediaCodec,java.lang.String)>(r0, "getOutputImage() is not compatible with CONFIGURE_FLAG_USE_BLOCK_MODEL. Please use getOutputFrame() to get output frames.");

        throw r9;

     label09:
        $r4 := @caughtexception;

     label10:
        exitmonitor r5;

     label11:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public android.media.MediaCodec$QueueRequest getQueueRequest(int)
    {
        android.media.MediaCodec r0;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Object r1, $r10;
        java.util.ArrayList $r3, $r8, $r9;
        java.lang.String $r7, $r13, $r16;
        boolean $z0;
        java.lang.Throwable $r17;
        android.media.MediaCodec$QueueRequest r18, r19;
        java.lang.IllegalArgumentException r20, r22;
        java.lang.StringBuilder r21, r23, r25;
        java.lang.IndexOutOfBoundsException r24;
        java.lang.IllegalStateException r26;

        r0 := @this: android.media.MediaCodec;

        i0 := @parameter0: int;

        r1 = r0.<android.media.MediaCodec: java.lang.Object mBufferLock>;

        entermonitor r1;

     label01:
        $i1 = r0.<android.media.MediaCodec: int mBufferMode>;

        if $i1 != 1 goto label10;

     label02:
        if i0 < 0 goto label09;

     label03:
        $r8 = r0.<android.media.MediaCodec: java.util.ArrayList mQueueRequests>;

        $i4 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        if i0 >= $i4 goto label09;

        $r9 = r0.<android.media.MediaCodec: java.util.ArrayList mQueueRequests>;

        $r10 = virtualinvoke $r9.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        r18 = (android.media.MediaCodec$QueueRequest) $r10;

     label04:
        if r18 == null goto label08;

     label05:
        $z0 = virtualinvoke r18.<android.media.MediaCodec$QueueRequest: boolean isAccessible()>();

        if $z0 == 0 goto label07;

        r19 = virtualinvoke r18.<android.media.MediaCodec$QueueRequest: android.media.MediaCodec$QueueRequest clear()>();

        exitmonitor r1;

     label06:
        return r19;

     label07:
        r20 = new java.lang.IllegalArgumentException;

        r21 = new java.lang.StringBuilder;

        specialinvoke r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The request is stale at index ");

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r16 = virtualinvoke r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw r20;

     label08:
        r22 = new java.lang.IllegalArgumentException;

        r23 = new java.lang.StringBuilder;

        specialinvoke r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unavailable index: ");

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw r22;

     label09:
        r24 = new java.lang.IndexOutOfBoundsException;

        r25 = new java.lang.StringBuilder;

        specialinvoke r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected range of index: [0,");

        $r3 = r0.<android.media.MediaCodec: java.util.ArrayList mQueueRequests>;

        $i2 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        $i3 = $i2 - 1;

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]; actual: ");

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r24.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r7);

        throw r24;

     label10:
        r26 = new java.lang.IllegalStateException;

        specialinvoke r26.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The codec is not configured for block model");

        throw r26;

     label11:
        $r17 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r17;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label10 to label11 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public final void queueInputBuffer(int, int, int, long, int) throws android.media.MediaCodec$CryptoException
    {
        android.media.MediaCodec r0;
        int i0, i1, i2, i4, $i5;
        long l3;
        java.nio.ByteBuffer[] $r1, $r4;
        android.media.MediaCodec$BufferMap $r2;
        java.lang.Throwable $r3, $r5;
        java.lang.Object r6;
        android.media.MediaCodec$IncompatibleWithBlockModelException r8;

        r0 := @this: android.media.MediaCodec;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        l3 := @parameter3: long;

        i4 := @parameter4: int;

        r6 = r0.<android.media.MediaCodec: java.lang.Object mBufferLock>;

        entermonitor r6;

     label1:
        $i5 = r0.<android.media.MediaCodec: int mBufferMode>;

        if $i5 == 1 goto label5;

        $r1 = r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedInputBuffers>;

        specialinvoke r0.<android.media.MediaCodec: void invalidateByteBuffer(java.nio.ByteBuffer[],int)>($r1, i0);

        $r2 = r0.<android.media.MediaCodec: android.media.MediaCodec$BufferMap mDequeuedInputBuffers>;

        virtualinvoke $r2.<android.media.MediaCodec$BufferMap: void remove(int)>(i0);

        exitmonitor r6;

     label2:
        specialinvoke r0.<android.media.MediaCodec: void native_queueInputBuffer(int,int,int,long,int)>(i0, i1, i2, l3, i4);

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        $r4 = r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedInputBuffers>;

        specialinvoke r0.<android.media.MediaCodec: void revalidateByteBuffer(java.nio.ByteBuffer[],int)>($r4, i0);

        throw $r3;

     label5:
        r8 = new android.media.MediaCodec$IncompatibleWithBlockModelException;

        specialinvoke r8.<android.media.MediaCodec$IncompatibleWithBlockModelException: void <init>(android.media.MediaCodec,java.lang.String)>(r0, "queueInputBuffer() is not compatible with CONFIGURE_FLAG_USE_BLOCK_MODEL. Please use getQueueRequest() to queue buffers");

        throw r8;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r6;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch android.media.MediaCodec$CryptoException from label2 to label3 with label4;
        catch java.lang.IllegalStateException from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public final void queueSecureInputBuffer(int, int, android.media.MediaCodec$CryptoInfo, long, int) throws android.media.MediaCodec$CryptoException
    {
        android.media.MediaCodec r0;
        int i0, i1, i3, $i4;
        long l2;
        java.lang.Object r1;
        java.nio.ByteBuffer[] $r2, $r5;
        android.media.MediaCodec$BufferMap $r3;
        java.lang.Throwable $r4, $r6;
        android.media.MediaCodec$CryptoInfo r7;
        android.media.MediaCodec$IncompatibleWithBlockModelException r9;

        r0 := @this: android.media.MediaCodec;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r7 := @parameter2: android.media.MediaCodec$CryptoInfo;

        l2 := @parameter3: long;

        i3 := @parameter4: int;

        r1 = r0.<android.media.MediaCodec: java.lang.Object mBufferLock>;

        entermonitor r1;

     label1:
        $i4 = r0.<android.media.MediaCodec: int mBufferMode>;

        if $i4 == 1 goto label5;

        $r2 = r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedInputBuffers>;

        specialinvoke r0.<android.media.MediaCodec: void invalidateByteBuffer(java.nio.ByteBuffer[],int)>($r2, i0);

        $r3 = r0.<android.media.MediaCodec: android.media.MediaCodec$BufferMap mDequeuedInputBuffers>;

        virtualinvoke $r3.<android.media.MediaCodec$BufferMap: void remove(int)>(i0);

        exitmonitor r1;

     label2:
        specialinvoke r0.<android.media.MediaCodec: void native_queueSecureInputBuffer(int,int,android.media.MediaCodec$CryptoInfo,long,int)>(i0, i1, r7, l2, i3);

     label3:
        return;

     label4:
        $r4 := @caughtexception;

        $r5 = r0.<android.media.MediaCodec: java.nio.ByteBuffer[] mCachedInputBuffers>;

        specialinvoke r0.<android.media.MediaCodec: void revalidateByteBuffer(java.nio.ByteBuffer[],int)>($r5, i0);

        throw $r4;

     label5:
        r9 = new android.media.MediaCodec$IncompatibleWithBlockModelException;

        specialinvoke r9.<android.media.MediaCodec$IncompatibleWithBlockModelException: void <init>(android.media.MediaCodec,java.lang.String)>(r0, "queueSecureInputBuffer() is not compatible with CONFIGURE_FLAG_USE_BLOCK_MODEL. Please use getQueueRequest() to queue buffers");

        throw r9;

     label6:
        $r6 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch android.media.MediaCodec$CryptoException from label2 to label3 with label4;
        catch java.lang.IllegalStateException from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public final void release()
    {
        android.media.MediaCodec r0;

        r0 := @this: android.media.MediaCodec;

        specialinvoke r0.<android.media.MediaCodec: void freeAllTrackedBuffers()>();

        specialinvoke r0.<android.media.MediaCodec: void native_release()>();

        r0.<android.media.MediaCodec: android.media.MediaCrypto mCrypto> = null;

        return;
    }

    public final void releaseOutputBuffer(int, long)
    {
        android.media.MediaCodec r0;
        int i0;
        long l1;

        r0 := @this: android.media.MediaCodec;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        specialinvoke r0.<android.media.MediaCodec: void releaseOutputBufferInternal(int,boolean,boolean,long)>(i0, 1, 1, l1);

        return;
    }

    public final void releaseOutputBuffer(int, boolean)
    {
        android.media.MediaCodec r0;
        int i0;
        boolean z0;

        r0 := @this: android.media.MediaCodec;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.media.MediaCodec: void releaseOutputBufferInternal(int,boolean,boolean,long)>(i0, z0, 0, 0L);

        return;
    }

    public final void reset()
    {
        android.media.MediaCodec r0;

        r0 := @this: android.media.MediaCodec;

        specialinvoke r0.<android.media.MediaCodec: void freeAllTrackedBuffers()>();

        specialinvoke r0.<android.media.MediaCodec: void native_reset()>();

        r0.<android.media.MediaCodec: android.media.MediaCrypto mCrypto> = null;

        return;
    }

    public void setAudioPresentation(android.media.AudioPresentation)
    {
        android.media.MediaCodec r0;
        android.media.AudioPresentation r1;
        java.lang.NullPointerException $r2;
        int $i0, $i1;

        r0 := @this: android.media.MediaCodec;

        r1 := @parameter0: android.media.AudioPresentation;

        if r1 == null goto label1;

        $i0 = virtualinvoke r1.<android.media.AudioPresentation: int getPresentationId()>();

        $i1 = virtualinvoke r1.<android.media.AudioPresentation: int getProgramId()>();

        specialinvoke r0.<android.media.MediaCodec: void native_setAudioPresentation(int,int)>($i0, $i1);

        return;

     label1:
        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("audio presentation is null");

        throw $r2;
    }

    public void setCallback(android.media.MediaCodec$Callback)
    {
        android.media.MediaCodec r0;
        android.media.MediaCodec$Callback r1;

        r0 := @this: android.media.MediaCodec;

        r1 := @parameter0: android.media.MediaCodec$Callback;

        virtualinvoke r0.<android.media.MediaCodec: void setCallback(android.media.MediaCodec$Callback,android.os.Handler)>(r1, null);

        return;
    }

    public void setCallback(android.media.MediaCodec$Callback, android.os.Handler)
    {
        android.media.MediaCodec r0;
        java.lang.Object r1;
        android.media.MediaCodec$EventHandler $r2, $r3, $r4, $r5, $r6, $r7, r11, r13, r14;
        java.lang.Throwable $r8;
        android.media.MediaCodec$Callback r9;
        android.os.Handler r10;
        android.os.Message r15;

        r0 := @this: android.media.MediaCodec;

        r9 := @parameter0: android.media.MediaCodec$Callback;

        r10 := @parameter1: android.os.Handler;

        if r9 == null goto label7;

        r1 = r0.<android.media.MediaCodec: java.lang.Object mListenerLock>;

        entermonitor r1;

     label1:
        $r4 = r0.<android.media.MediaCodec: android.media.MediaCodec$EventHandler mCallbackHandler>;

        r11 = specialinvoke r0.<android.media.MediaCodec: android.media.MediaCodec$EventHandler getEventHandlerOn(android.os.Handler,android.media.MediaCodec$EventHandler)>(r10, $r4);

        $r5 = r0.<android.media.MediaCodec: android.media.MediaCodec$EventHandler mCallbackHandler>;

        if r11 == $r5 goto label2;

        $r6 = r0.<android.media.MediaCodec: android.media.MediaCodec$EventHandler mCallbackHandler>;

        virtualinvoke $r6.<android.media.MediaCodec$EventHandler: void removeMessages(int)>(2);

        $r7 = r0.<android.media.MediaCodec: android.media.MediaCodec$EventHandler mCallbackHandler>;

        virtualinvoke $r7.<android.media.MediaCodec$EventHandler: void removeMessages(int)>(1);

        r0.<android.media.MediaCodec: android.media.MediaCodec$EventHandler mCallbackHandler> = r11;

     label2:
        exitmonitor r1;

     label3:
        goto label8;

     label4:
        $r8 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r8;

     label7:
        r13 = r0.<android.media.MediaCodec: android.media.MediaCodec$EventHandler mCallbackHandler>;

        if r13 == null goto label8;

        virtualinvoke r13.<android.media.MediaCodec$EventHandler: void removeMessages(int)>(2);

        $r3 = r0.<android.media.MediaCodec: android.media.MediaCodec$EventHandler mCallbackHandler>;

        virtualinvoke $r3.<android.media.MediaCodec$EventHandler: void removeMessages(int)>(1);

     label8:
        r14 = r0.<android.media.MediaCodec: android.media.MediaCodec$EventHandler mCallbackHandler>;

        if r14 == null goto label9;

        r15 = virtualinvoke r14.<android.media.MediaCodec$EventHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(2, 0, 0, r9);

        $r2 = r0.<android.media.MediaCodec: android.media.MediaCodec$EventHandler mCallbackHandler>;

        virtualinvoke $r2.<android.media.MediaCodec$EventHandler: boolean sendMessage(android.os.Message)>(r15);

        specialinvoke r0.<android.media.MediaCodec: void native_setCallback(android.media.MediaCodec$Callback)>(r9);

     label9:
        return;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void setInputSurface(android.view.Surface)
    {
        android.media.MediaCodec r0;
        android.view.Surface r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: android.media.MediaCodec;

        r1 := @parameter0: android.view.Surface;

        $z0 = r1 instanceof android.media.MediaCodec$PersistentSurface;

        if $z0 == 0 goto label1;

        specialinvoke r0.<android.media.MediaCodec: void native_setInputSurface(android.view.Surface)>(r1);

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("not a PersistentSurface");

        throw $r2;
    }

    public void setOnFrameRenderedListener(android.media.MediaCodec$OnFrameRenderedListener, android.os.Handler)
    {
        android.media.MediaCodec r0;
        java.lang.Object r1;
        android.media.MediaCodec$EventHandler $r2, $r3, $r4, $r5, $r6, r10;
        java.lang.Throwable $r7;
        android.media.MediaCodec$OnFrameRenderedListener r8;
        android.os.Handler r9;
        boolean z0;

        r0 := @this: android.media.MediaCodec;

        r8 := @parameter0: android.media.MediaCodec$OnFrameRenderedListener;

        r9 := @parameter1: android.os.Handler;

        r1 = r0.<android.media.MediaCodec: java.lang.Object mListenerLock>;

        entermonitor r1;

     label01:
        r0.<android.media.MediaCodec: android.media.MediaCodec$OnFrameRenderedListener mOnFrameRenderedListener> = r8;

     label02:
        if r8 == null goto label06;

     label03:
        $r4 = r0.<android.media.MediaCodec: android.media.MediaCodec$EventHandler mOnFrameRenderedHandler>;

        r10 = specialinvoke r0.<android.media.MediaCodec: android.media.MediaCodec$EventHandler getEventHandlerOn(android.os.Handler,android.media.MediaCodec$EventHandler)>(r9, $r4);

        $r5 = r0.<android.media.MediaCodec: android.media.MediaCodec$EventHandler mOnFrameRenderedHandler>;

        if r10 == $r5 goto label04;

        $r6 = r0.<android.media.MediaCodec: android.media.MediaCodec$EventHandler mOnFrameRenderedHandler>;

        virtualinvoke $r6.<android.media.MediaCodec$EventHandler: void removeMessages(int)>(3);

     label04:
        r0.<android.media.MediaCodec: android.media.MediaCodec$EventHandler mOnFrameRenderedHandler> = r10;

     label05:
        goto label08;

     label06:
        $r2 = r0.<android.media.MediaCodec: android.media.MediaCodec$EventHandler mOnFrameRenderedHandler>;

        if $r2 == null goto label08;

        $r3 = r0.<android.media.MediaCodec: android.media.MediaCodec$EventHandler mOnFrameRenderedHandler>;

        virtualinvoke $r3.<android.media.MediaCodec$EventHandler: void removeMessages(int)>(3);

     label07:
        goto label08;

     label08:
        if r8 == null goto label09;

        z0 = 1;

        goto label10;

     label09:
        z0 = 0;

     label10:
        specialinvoke r0.<android.media.MediaCodec: void native_enableOnFrameRenderedListener(boolean)>(z0);

        exitmonitor r1;

     label11:
        return;

     label12:
        $r7 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public void setOutputSurface(android.view.Surface)
    {
        android.media.MediaCodec r0;
        android.view.Surface r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;

        r0 := @this: android.media.MediaCodec;

        r1 := @parameter0: android.view.Surface;

        $z0 = r0.<android.media.MediaCodec: boolean mHasSurface>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<android.media.MediaCodec: void native_setSurface(android.view.Surface)>(r1);

        return;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("codec was not configured for an output surface");

        throw $r2;
    }

    public final void setParameters(android.os.Bundle)
    {
        android.media.MediaCodec r0;
        android.os.Bundle r1;
        java.lang.String[] r2;
        java.lang.Object[] r3;
        java.util.Iterator r4;
        int $i0, $i1, i2;
        java.util.Set $r5;
        boolean $z0, $z1;
        java.lang.Object $r6, r10;
        byte[] $r7;
        java.nio.ByteBuffer $r8;
        java.lang.String r9;

        r0 := @this: android.media.MediaCodec;

        r1 := @parameter0: android.os.Bundle;

        if r1 != null goto label1;

        return;

     label1:
        $i0 = virtualinvoke r1.<android.os.Bundle: int size()>();

        r2 = newarray (java.lang.String)[$i0];

        $i1 = virtualinvoke r1.<android.os.Bundle: int size()>();

        r3 = newarray (java.lang.Object)[$i1];

        i2 = 0;

        $r5 = virtualinvoke r1.<android.os.Bundle: java.util.Set keySet()>();

        r4 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.lang.String) $r6;

        r2[i2] = r9;

        r10 = virtualinvoke r1.<android.os.Bundle: java.lang.Object get(java.lang.String)>(r9);

        $z1 = r10 instanceof byte[];

        if $z1 == 0 goto label3;

        $r7 = (byte[]) r10;

        $r8 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r7);

        r3[i2] = $r8;

        goto label4;

     label3:
        r3[i2] = r10;

     label4:
        i2 = i2 + 1;

        goto label2;

     label5:
        specialinvoke r0.<android.media.MediaCodec: void setParameters(java.lang.String[],java.lang.Object[])>(r2, r3);

        return;
    }

    public final native void setVideoScalingMode(int);

    public final native void signalEndOfInputStream();

    public final void start()
    {
        android.media.MediaCodec r0;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: android.media.MediaCodec;

        specialinvoke r0.<android.media.MediaCodec: void native_start()>();

        r1 = r0.<android.media.MediaCodec: java.lang.Object mBufferLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.media.MediaCodec: void cacheBuffers(boolean)>(1);

        specialinvoke r0.<android.media.MediaCodec: void cacheBuffers(boolean)>(0);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public final void stop()
    {
        android.media.MediaCodec r0;
        java.lang.Object r1;
        android.media.MediaCodec$EventHandler $r3, $r4, $r5, $r6, $r7;
        java.lang.Throwable $r8;

        r0 := @this: android.media.MediaCodec;

        specialinvoke r0.<android.media.MediaCodec: void native_stop()>();

        specialinvoke r0.<android.media.MediaCodec: void freeAllTrackedBuffers()>();

        r1 = r0.<android.media.MediaCodec: java.lang.Object mListenerLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<android.media.MediaCodec: android.media.MediaCodec$EventHandler mCallbackHandler>;

        if $r3 == null goto label2;

        $r6 = r0.<android.media.MediaCodec: android.media.MediaCodec$EventHandler mCallbackHandler>;

        virtualinvoke $r6.<android.media.MediaCodec$EventHandler: void removeMessages(int)>(2);

        $r7 = r0.<android.media.MediaCodec: android.media.MediaCodec$EventHandler mCallbackHandler>;

        virtualinvoke $r7.<android.media.MediaCodec$EventHandler: void removeMessages(int)>(1);

     label2:
        $r4 = r0.<android.media.MediaCodec: android.media.MediaCodec$EventHandler mOnFrameRenderedHandler>;

        if $r4 == null goto label3;

        $r5 = r0.<android.media.MediaCodec: android.media.MediaCodec$EventHandler mOnFrameRenderedHandler>;

        virtualinvoke $r5.<android.media.MediaCodec$EventHandler: void removeMessages(int)>(3);

     label3:
        exitmonitor r1;

     label4:
        return;

     label5:
        $r8 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }
}
