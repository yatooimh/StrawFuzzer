public final class android.media.MediaCodecInfo$AudioCapabilities extends java.lang.Object
{
    private static final int MAX_INPUT_CHANNEL_COUNT;
    private static final java.lang.String TAG;
    private android.util.Range mBitrateRange;
    private int mMaxInputChannelCount;
    private android.media.MediaCodecInfo$CodecCapabilities mParent;
    private android.util.Range[] mSampleRateRanges;
    private int[] mSampleRates;

    private void <init>()
    {
        android.media.MediaCodecInfo$AudioCapabilities r0;

        r0 := @this: android.media.MediaCodecInfo$AudioCapabilities;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private void applyLevelLimits()
    {
        android.media.MediaCodecInfo$AudioCapabilities r0;
        java.lang.String r1, $r11;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        java.lang.Integer r2, $r5, $r6, $r13, $r14, $r16, $r17, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r27, $r28, $r29, $r31, $r33, $r34, $r36, $r37, $r39, r43;
        android.media.MediaCodecInfo$CodecCapabilities $r3, r45;
        int[] $r4, $r12, $r15, $r18, $r26, $r30, $r32, $r35, $r38, r40;
        android.util.Range[] $r7;
        java.lang.StringBuilder $r8;
        int $i1, $i2, i3;
        android.util.Range r41, r42;

        r0 := @this: android.media.MediaCodecInfo$AudioCapabilities;

        r40 = null;

        r41 = null;

        r42 = null;

        i3 = 30;

        $r3 = r0.<android.media.MediaCodecInfo$AudioCapabilities: android.media.MediaCodecInfo$CodecCapabilities mParent>;

        r1 = virtualinvoke $r3.<android.media.MediaCodecInfo$CodecCapabilities: java.lang.String getMimeType()>();

        z0 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("audio/mpeg");

        r43 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8000);

        r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        if z0 == 0 goto label01;

        $r38 = newarray (int)[9];

        $r38[0] = 8000;

        $r38[1] = 11025;

        $r38[2] = 12000;

        $r38[3] = 16000;

        $r38[4] = 22050;

        $r38[5] = 24000;

        $r38[6] = 32000;

        $r38[7] = 44100;

        $r38[8] = 48000;

        r40 = $r38;

        $r39 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(320000);

        r42 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>(r43, $r39);

        i3 = 2;

        goto label16;

     label01:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("audio/3gpp");

        if $z1 == 0 goto label02;

        $r35 = newarray (int)[1];

        $r35[0] = 8000;

        r40 = $r35;

        $r36 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4750);

        $r37 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(12200);

        r42 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r36, $r37);

        i3 = 1;

        goto label16;

     label02:
        $z2 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("audio/amr-wb");

        if $z2 == 0 goto label03;

        $r32 = newarray (int)[1];

        $r32[0] = 16000;

        r40 = $r32;

        $r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6600);

        $r34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(23850);

        r42 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r33, $r34);

        i3 = 1;

        goto label16;

     label03:
        $z3 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("audio/mp4a-latm");

        if $z3 == 0 goto label04;

        $r30 = newarray (int)[13];

        $r30[0] = 7350;

        $r30[1] = 8000;

        $r30[2] = 11025;

        $r30[3] = 12000;

        $r30[4] = 16000;

        $r30[5] = 22050;

        $r30[6] = 24000;

        $r30[7] = 32000;

        $r30[8] = 44100;

        $r30[9] = 48000;

        $r30[10] = 64000;

        $r30[11] = 88200;

        $r30[12] = 96000;

        r40 = $r30;

        $r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(510000);

        r42 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>(r43, $r31);

        i3 = 48;

        goto label16;

     label04:
        $z4 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("audio/vorbis");

        if $z4 == 0 goto label05;

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(32000);

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(500000);

        r42 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r27, $r28);

        $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(192000);

        r41 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>(r43, $r29);

        i3 = 255;

        goto label16;

     label05:
        $z5 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("audio/opus");

        if $z5 == 0 goto label06;

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6000);

        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(510000);

        r42 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r24, $r25);

        $r26 = newarray (int)[5];

        $r26[0] = 8000;

        $r26[1] = 12000;

        $r26[2] = 16000;

        $r26[3] = 24000;

        $r26[4] = 48000;

        r40 = $r26;

        i3 = 255;

        goto label16;

     label06:
        $z6 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("audio/raw");

        if $z6 == 0 goto label07;

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(96000);

        r41 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>(r2, $r22);

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10000000);

        r42 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>(r2, $r23);

        i3 = <android.media.AudioSystem: int OUT_CHANNEL_COUNT_MAX>;

        goto label16;

     label07:
        $z7 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("audio/flac");

        if $z7 == 0 goto label08;

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(655350);

        r41 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>(r2, $r21);

        i3 = 255;

        goto label16;

     label08:
        $z8 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("audio/g711-alaw");

        if $z8 != 0 goto label15;

        $z9 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("audio/g711-mlaw");

        if $z9 == 0 goto label09;

        goto label15;

     label09:
        $z10 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("audio/gsm");

        if $z10 == 0 goto label10;

        $r18 = newarray (int)[1];

        $r18[0] = 8000;

        r40 = $r18;

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(13000);

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(13000);

        r42 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r19, $r20);

        i3 = 1;

        goto label16;

     label10:
        $z11 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("audio/ac3");

        if $z11 == 0 goto label11;

        i3 = 6;

        goto label16;

     label11:
        $z12 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("audio/eac3");

        if $z12 == 0 goto label12;

        i3 = 16;

        goto label16;

     label12:
        $z13 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("audio/eac3-joc");

        if $z13 == 0 goto label13;

        $r15 = newarray (int)[1];

        $r15[0] = 48000;

        r40 = $r15;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(32000);

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6144000);

        r42 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r16, $r17);

        i3 = 16;

        goto label16;

     label13:
        $z14 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("audio/ac4");

        if $z14 == 0 goto label14;

        $r12 = newarray (int)[4];

        $r12[0] = 44100;

        $r12[1] = 48000;

        $r12[2] = 96000;

        $r12[3] = 192000;

        r40 = $r12;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(16000);

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2688000);

        r42 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r13, $r14);

        i3 = 24;

        goto label16;

     label14:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported mime ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AudioCapabilities", $r11);

        r45 = r0.<android.media.MediaCodecInfo$AudioCapabilities: android.media.MediaCodecInfo$CodecCapabilities mParent>;

        $i1 = r45.<android.media.MediaCodecInfo$CodecCapabilities: int mError>;

        $i2 = $i1 | 2;

        r45.<android.media.MediaCodecInfo$CodecCapabilities: int mError> = $i2;

        goto label16;

     label15:
        $r4 = newarray (int)[1];

        $r4[0] = 8000;

        r40 = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(64000);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(64000);

        r42 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r5, $r6);

     label16:
        if r40 == null goto label17;

        specialinvoke r0.<android.media.MediaCodecInfo$AudioCapabilities: void limitSampleRates(int[])>(r40);

        goto label18;

     label17:
        if r41 == null goto label18;

        $r7 = newarray (android.util.Range)[1];

        $r7[0] = r41;

        specialinvoke r0.<android.media.MediaCodecInfo$AudioCapabilities: void limitSampleRates(android.util.Range[])>($r7);

     label18:
        specialinvoke r0.<android.media.MediaCodecInfo$AudioCapabilities: void applyLimits(int,android.util.Range)>(i3, r42);

        return;
    }

    private void applyLimits(int, android.util.Range)
    {
        android.media.MediaCodecInfo$AudioCapabilities r0;
        int i0, $i1, $i2;
        android.util.Range r1, $r4, $r8, $r9;
        java.lang.Integer $r2, $r3, $r5, $r7;
        java.lang.Comparable $r6;

        r0 := @this: android.media.MediaCodecInfo$AudioCapabilities;

        i0 := @parameter0: int;

        r1 := @parameter1: android.util.Range;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $i1 = r0.<android.media.MediaCodecInfo$AudioCapabilities: int mMaxInputChannelCount>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r4 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r2, $r3);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6 = virtualinvoke $r4.<android.util.Range: java.lang.Comparable clamp(java.lang.Comparable)>($r5);

        $r7 = (java.lang.Integer) $r6;

        $i2 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        r0.<android.media.MediaCodecInfo$AudioCapabilities: int mMaxInputChannelCount> = $i2;

        if r1 == null goto label1;

        $r8 = r0.<android.media.MediaCodecInfo$AudioCapabilities: android.util.Range mBitrateRange>;

        $r9 = virtualinvoke $r8.<android.util.Range: android.util.Range intersect(android.util.Range)>(r1);

        r0.<android.media.MediaCodecInfo$AudioCapabilities: android.util.Range mBitrateRange> = $r9;

     label1:
        return;
    }

    public static android.media.MediaCodecInfo$AudioCapabilities create(android.media.MediaFormat, android.media.MediaCodecInfo$CodecCapabilities)
    {
        android.media.MediaFormat r0;
        android.media.MediaCodecInfo$CodecCapabilities r1;
        android.media.MediaCodecInfo$AudioCapabilities $r3;

        r0 := @parameter0: android.media.MediaFormat;

        r1 := @parameter1: android.media.MediaCodecInfo$CodecCapabilities;

        $r3 = new android.media.MediaCodecInfo$AudioCapabilities;

        specialinvoke $r3.<android.media.MediaCodecInfo$AudioCapabilities: void <init>()>();

        specialinvoke $r3.<android.media.MediaCodecInfo$AudioCapabilities: void init(android.media.MediaFormat,android.media.MediaCodecInfo$CodecCapabilities)>(r0, r1);

        return $r3;
    }

    private void createDiscreteSampleRates()
    {
        android.media.MediaCodecInfo$AudioCapabilities r0;
        android.util.Range[] r1, $r2;
        int $i0, $i1, $i2, i3;
        int[] $r3, $r5;
        android.util.Range $r4;
        java.lang.Comparable $r6;
        java.lang.Integer $r7;

        r0 := @this: android.media.MediaCodecInfo$AudioCapabilities;

        $r2 = r0.<android.media.MediaCodecInfo$AudioCapabilities: android.util.Range[] mSampleRateRanges>;

        $i0 = lengthof $r2;

        $r3 = newarray (int)[$i0];

        r0.<android.media.MediaCodecInfo$AudioCapabilities: int[] mSampleRates> = $r3;

        i3 = 0;

     label1:
        r1 = r0.<android.media.MediaCodecInfo$AudioCapabilities: android.util.Range[] mSampleRateRanges>;

        $i1 = lengthof r1;

        if i3 >= $i1 goto label2;

        $r5 = r0.<android.media.MediaCodecInfo$AudioCapabilities: int[] mSampleRates>;

        $r4 = r1[i3];

        $r6 = virtualinvoke $r4.<android.util.Range: java.lang.Comparable getLower()>();

        $r7 = (java.lang.Integer) $r6;

        $i2 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $r5[i3] = $i2;

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    private void init(android.media.MediaFormat, android.media.MediaCodecInfo$CodecCapabilities)
    {
        android.media.MediaCodecInfo$AudioCapabilities r0;
        android.media.MediaFormat r1;
        android.media.MediaCodecInfo$CodecCapabilities r2;

        r0 := @this: android.media.MediaCodecInfo$AudioCapabilities;

        r1 := @parameter0: android.media.MediaFormat;

        r2 := @parameter1: android.media.MediaCodecInfo$CodecCapabilities;

        r0.<android.media.MediaCodecInfo$AudioCapabilities: android.media.MediaCodecInfo$CodecCapabilities mParent> = r2;

        specialinvoke r0.<android.media.MediaCodecInfo$AudioCapabilities: void initWithPlatformLimits()>();

        specialinvoke r0.<android.media.MediaCodecInfo$AudioCapabilities: void applyLevelLimits()>();

        specialinvoke r0.<android.media.MediaCodecInfo$AudioCapabilities: void parseFromInfo(android.media.MediaFormat)>(r1);

        return;
    }

    private void initWithPlatformLimits()
    {
        android.media.MediaCodecInfo$AudioCapabilities r0;
        int i0, $i1;
        java.lang.Integer $r1, $r2, $r5, $r6;
        android.util.Range $r3, $r7;
        android.util.Range[] $r4;

        r0 := @this: android.media.MediaCodecInfo$AudioCapabilities;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2147483647);

        $r3 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r1, $r2);

        r0.<android.media.MediaCodecInfo$AudioCapabilities: android.util.Range mBitrateRange> = $r3;

        r0.<android.media.MediaCodecInfo$AudioCapabilities: int mMaxInputChannelCount> = 30;

        i0 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("ro.mediacodec.min_sample_rate", 7350);

        $r4 = newarray (android.util.Range)[1];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $i1 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("ro.mediacodec.max_sample_rate", 192000);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r7 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r5, $r6);

        $r4[0] = $r7;

        r0.<android.media.MediaCodecInfo$AudioCapabilities: android.util.Range[] mSampleRateRanges> = $r4;

        r0.<android.media.MediaCodecInfo$AudioCapabilities: int[] mSampleRates> = null;

        return;
    }

    private void limitSampleRates(int[])
    {
        android.media.MediaCodecInfo$AudioCapabilities r0;
        int[] r1;
        int i0, i1, $i2, i3;
        java.util.ArrayList $r3;
        android.util.Range[] $r4, $r6;
        java.lang.Object[] $r5;
        java.lang.Integer $r7, $r8, $r9;
        boolean $z0;
        android.util.Range $r10;

        r0 := @this: android.media.MediaCodecInfo$AudioCapabilities;

        r1 := @parameter0: int[];

        staticinvoke <java.util.Arrays: void sort(int[])>(r1);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        i0 = lengthof r1;

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        i1 = r1[i3];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $z0 = specialinvoke r0.<android.media.MediaCodecInfo$AudioCapabilities: boolean supports(java.lang.Integer,java.lang.Integer)>($r7, null);

        if $z0 == 0 goto label2;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r10 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r8, $r9);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r10);

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        $i2 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        $r4 = newarray (android.util.Range)[$i2];

        $r5 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (android.util.Range[]) $r5;

        r0.<android.media.MediaCodecInfo$AudioCapabilities: android.util.Range[] mSampleRateRanges> = $r6;

        specialinvoke r0.<android.media.MediaCodecInfo$AudioCapabilities: void createDiscreteSampleRates()>();

        return;
    }

    private void limitSampleRates(android.util.Range[])
    {
        android.media.MediaCodecInfo$AudioCapabilities r0;
        android.util.Range[] r1, $r2, r6;
        int i0, i1;
        java.lang.Comparable $r3, $r5;
        java.lang.Integer $r4;
        boolean $z0;
        android.util.Range r7;

        r0 := @this: android.media.MediaCodecInfo$AudioCapabilities;

        r6 := @parameter0: android.util.Range[];

        staticinvoke <android.media.Utils: void sortDistinctRanges(android.util.Range[])>(r6);

        $r2 = r0.<android.media.MediaCodecInfo$AudioCapabilities: android.util.Range[] mSampleRateRanges>;

        r1 = staticinvoke <android.media.Utils: android.util.Range[] intersectSortedDistinctRanges(android.util.Range[],android.util.Range[])>($r2, r6);

        r0.<android.media.MediaCodecInfo$AudioCapabilities: android.util.Range[] mSampleRateRanges> = r1;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r7 = r1[i1];

        $r3 = virtualinvoke r7.<android.util.Range: java.lang.Comparable getLower()>();

        $r4 = (java.lang.Integer) $r3;

        $r5 = virtualinvoke r7.<android.util.Range: java.lang.Comparable getUpper()>();

        $z0 = virtualinvoke $r4.<java.lang.Integer: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label2;

        r0.<android.media.MediaCodecInfo$AudioCapabilities: int[] mSampleRates> = null;

        return;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        specialinvoke r0.<android.media.MediaCodecInfo$AudioCapabilities: void createDiscreteSampleRates()>();

        return;
    }

    private void parseFromInfo(android.media.MediaFormat)
    {
        android.media.MediaCodecInfo$AudioCapabilities r0;
        android.media.MediaFormat r1;
        android.util.Range r2, $r6, $r10, r12;
        java.lang.String[] r3;
        boolean $z0, $z1, $z2;
        android.media.MediaCodecInfo$CodecCapabilities $r4;
        int $i1, $i2, $i3, $i4, i5, i6;
        java.lang.String $r5, $r7, $r8, $r9;
        android.util.Range[] r11;

        r0 := @this: android.media.MediaCodecInfo$AudioCapabilities;

        r1 := @parameter0: android.media.MediaFormat;

        r2 = staticinvoke <android.media.MediaCodecInfo: android.util.Range access$000()>();

        $z0 = virtualinvoke r1.<android.media.MediaFormat: boolean containsKey(java.lang.String)>("sample-rate-ranges");

        if $z0 == 0 goto label3;

        $r8 = virtualinvoke r1.<android.media.MediaFormat: java.lang.String getString(java.lang.String)>("sample-rate-ranges");

        r3 = virtualinvoke $r8.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $i3 = lengthof r3;

        r11 = newarray (android.util.Range)[$i3];

        i5 = 0;

     label1:
        $i4 = lengthof r3;

        if i5 >= $i4 goto label2;

        $r9 = r3[i5];

        $r10 = staticinvoke <android.media.Utils: android.util.Range parseIntRange(java.lang.Object,android.util.Range)>($r9, null);

        r11[i5] = $r10;

        i5 = i5 + 1;

        goto label1;

     label2:
        specialinvoke r0.<android.media.MediaCodecInfo$AudioCapabilities: void limitSampleRates(android.util.Range[])>(r11);

     label3:
        $z1 = virtualinvoke r1.<android.media.MediaFormat: boolean containsKey(java.lang.String)>("max-channel-count");

        if $z1 == 0 goto label4;

        $r7 = virtualinvoke r1.<android.media.MediaFormat: java.lang.String getString(java.lang.String)>("max-channel-count");

        i6 = staticinvoke <android.media.Utils: int parseIntSafely(java.lang.Object,int)>($r7, 30);

        goto label5;

     label4:
        i6 = 30;

        $r4 = r0.<android.media.MediaCodecInfo$AudioCapabilities: android.media.MediaCodecInfo$CodecCapabilities mParent>;

        $i1 = $r4.<android.media.MediaCodecInfo$CodecCapabilities: int mError>;

        $i2 = $i1 & 2;

        if $i2 == 0 goto label5;

        i6 = 0;

     label5:
        r12 = r2;

        $z2 = virtualinvoke r1.<android.media.MediaFormat: boolean containsKey(java.lang.String)>("bitrate-range");

        if $z2 == 0 goto label6;

        $r5 = virtualinvoke r1.<android.media.MediaFormat: java.lang.String getString(java.lang.String)>("bitrate-range");

        $r6 = staticinvoke <android.media.Utils: android.util.Range parseIntRange(java.lang.Object,android.util.Range)>($r5, r2);

        r12 = virtualinvoke r2.<android.util.Range: android.util.Range intersect(android.util.Range)>($r6);

     label6:
        specialinvoke r0.<android.media.MediaCodecInfo$AudioCapabilities: void applyLimits(int,android.util.Range)>(i6, r12);

        return;
    }

    private boolean supports(java.lang.Integer, java.lang.Integer)
    {
        android.media.MediaCodecInfo$AudioCapabilities r0;
        java.lang.Integer r1, r2;
        android.util.Range[] $r3;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.media.MediaCodecInfo$AudioCapabilities;

        r1 := @parameter0: java.lang.Integer;

        r2 := @parameter1: java.lang.Integer;

        if r2 == null goto label2;

        $i1 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        if $i1 < 1 goto label1;

        $i2 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        $i3 = r0.<android.media.MediaCodecInfo$AudioCapabilities: int mMaxInputChannelCount>;

        if $i2 <= $i3 goto label2;

     label1:
        return 0;

     label2:
        if r1 == null goto label3;

        $r3 = r0.<android.media.MediaCodecInfo$AudioCapabilities: android.util.Range[] mSampleRateRanges>;

        $i0 = staticinvoke <android.media.Utils: int binarySearchDistinctRanges(android.util.Range[],java.lang.Comparable)>($r3, r1);

        if $i0 >= 0 goto label3;

        return 0;

     label3:
        return 1;
    }

    public android.util.Range getBitrateRange()
    {
        android.media.MediaCodecInfo$AudioCapabilities r0;
        android.util.Range $r1;

        r0 := @this: android.media.MediaCodecInfo$AudioCapabilities;

        $r1 = r0.<android.media.MediaCodecInfo$AudioCapabilities: android.util.Range mBitrateRange>;

        return $r1;
    }

    public void getDefaultFormat(android.media.MediaFormat)
    {
        android.media.MediaCodecInfo$AudioCapabilities r0;
        android.media.MediaFormat r1;
        int[] r2;
        android.util.Range $r3, $r5, $r8;
        java.lang.Comparable $r4, $r7, $r9;
        java.lang.Integer $r6, $r10;
        boolean $z0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.media.MediaCodecInfo$AudioCapabilities;

        r1 := @parameter0: android.media.MediaFormat;

        $r3 = r0.<android.media.MediaCodecInfo$AudioCapabilities: android.util.Range mBitrateRange>;

        $r4 = virtualinvoke $r3.<android.util.Range: java.lang.Comparable getLower()>();

        $r6 = (java.lang.Integer) $r4;

        $r5 = r0.<android.media.MediaCodecInfo$AudioCapabilities: android.util.Range mBitrateRange>;

        $r7 = virtualinvoke $r5.<android.util.Range: java.lang.Comparable getUpper()>();

        $z0 = virtualinvoke $r6.<java.lang.Integer: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label1;

        $r8 = r0.<android.media.MediaCodecInfo$AudioCapabilities: android.util.Range mBitrateRange>;

        $r9 = virtualinvoke $r8.<android.util.Range: java.lang.Comparable getLower()>();

        $r10 = (java.lang.Integer) $r9;

        $i3 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        virtualinvoke r1.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("bitrate", $i3);

     label1:
        $i0 = r0.<android.media.MediaCodecInfo$AudioCapabilities: int mMaxInputChannelCount>;

        if $i0 != 1 goto label2;

        virtualinvoke r1.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("channel-count", 1);

     label2:
        r2 = r0.<android.media.MediaCodecInfo$AudioCapabilities: int[] mSampleRates>;

        if r2 == null goto label3;

        $i1 = lengthof r2;

        if $i1 != 1 goto label3;

        $i2 = r2[0];

        virtualinvoke r1.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("sample-rate", $i2);

     label3:
        return;
    }

    public int getMaxInputChannelCount()
    {
        android.media.MediaCodecInfo$AudioCapabilities r0;
        int $i0;

        r0 := @this: android.media.MediaCodecInfo$AudioCapabilities;

        $i0 = r0.<android.media.MediaCodecInfo$AudioCapabilities: int mMaxInputChannelCount>;

        return $i0;
    }

    public android.util.Range[] getSupportedSampleRateRanges()
    {
        android.media.MediaCodecInfo$AudioCapabilities r0;
        android.util.Range[] r1, $r3;
        int $i0;
        java.lang.Object[] $r2;

        r0 := @this: android.media.MediaCodecInfo$AudioCapabilities;

        r1 = r0.<android.media.MediaCodecInfo$AudioCapabilities: android.util.Range[] mSampleRateRanges>;

        $i0 = lengthof r1;

        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r1, $i0);

        $r3 = (android.util.Range[]) $r2;

        return $r3;
    }

    public int[] getSupportedSampleRates()
    {
        android.media.MediaCodecInfo$AudioCapabilities r0;
        int $i0;
        int[] r1, r2;

        r0 := @this: android.media.MediaCodecInfo$AudioCapabilities;

        r1 = r0.<android.media.MediaCodecInfo$AudioCapabilities: int[] mSampleRates>;

        if r1 == null goto label1;

        $i0 = lengthof r1;

        r2 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>(r1, $i0);

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    public boolean isSampleRateSupported(int)
    {
        android.media.MediaCodecInfo$AudioCapabilities r0;
        int i0;
        java.lang.Integer $r1;
        boolean $z0;

        r0 := @this: android.media.MediaCodecInfo$AudioCapabilities;

        i0 := @parameter0: int;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z0 = specialinvoke r0.<android.media.MediaCodecInfo$AudioCapabilities: boolean supports(java.lang.Integer,java.lang.Integer)>($r1, null);

        return $z0;
    }

    public boolean supportsFormat(android.media.MediaFormat)
    {
        android.media.MediaCodecInfo$AudioCapabilities r0;
        android.media.MediaFormat r1;
        java.util.Map r2;
        java.lang.Object $r3, $r5;
        java.lang.Integer $r4, $r6;
        boolean $z0, $z1;
        android.util.Range $r7;

        r0 := @this: android.media.MediaCodecInfo$AudioCapabilities;

        r1 := @parameter0: android.media.MediaFormat;

        r2 = virtualinvoke r1.<android.media.MediaFormat: java.util.Map getMap()>();

        $r3 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("sample-rate");

        $r4 = (java.lang.Integer) $r3;

        $r5 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("channel-count");

        $r6 = (java.lang.Integer) $r5;

        $z0 = specialinvoke r0.<android.media.MediaCodecInfo$AudioCapabilities: boolean supports(java.lang.Integer,java.lang.Integer)>($r4, $r6);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r7 = r0.<android.media.MediaCodecInfo$AudioCapabilities: android.util.Range mBitrateRange>;

        $z1 = staticinvoke <android.media.MediaCodecInfo$CodecCapabilities: boolean access$100(android.util.Range,android.media.MediaFormat)>($r7, r1);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        return 1;
    }

    public static void <clinit>()
    {
        <android.media.MediaCodecInfo$AudioCapabilities: java.lang.String TAG> = "AudioCapabilities";

        <android.media.MediaCodecInfo$AudioCapabilities: int MAX_INPUT_CHANNEL_COUNT> = 30;

        return;
    }
}
