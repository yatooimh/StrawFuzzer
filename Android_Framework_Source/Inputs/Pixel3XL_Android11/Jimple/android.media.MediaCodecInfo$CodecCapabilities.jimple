public final class android.media.MediaCodecInfo$CodecCapabilities extends java.lang.Object
{
    public static final int COLOR_Format12bitRGB444;
    public static final int COLOR_Format16bitARGB1555;
    public static final int COLOR_Format16bitARGB4444;
    public static final int COLOR_Format16bitBGR565;
    public static final int COLOR_Format16bitRGB565;
    public static final int COLOR_Format18BitBGR666;
    public static final int COLOR_Format18bitARGB1665;
    public static final int COLOR_Format18bitRGB666;
    public static final int COLOR_Format19bitARGB1666;
    public static final int COLOR_Format24BitABGR6666;
    public static final int COLOR_Format24BitARGB6666;
    public static final int COLOR_Format24bitARGB1887;
    public static final int COLOR_Format24bitBGR888;
    public static final int COLOR_Format24bitRGB888;
    public static final int COLOR_Format25bitARGB1888;
    public static final int COLOR_Format32bitABGR8888;
    public static final int COLOR_Format32bitARGB8888;
    public static final int COLOR_Format32bitBGRA8888;
    public static final int COLOR_Format8bitRGB332;
    public static final int COLOR_FormatCbYCrY;
    public static final int COLOR_FormatCrYCbY;
    public static final int COLOR_FormatL16;
    public static final int COLOR_FormatL2;
    public static final int COLOR_FormatL24;
    public static final int COLOR_FormatL32;
    public static final int COLOR_FormatL4;
    public static final int COLOR_FormatL8;
    public static final int COLOR_FormatMonochrome;
    public static final int COLOR_FormatRGBAFlexible;
    public static final int COLOR_FormatRGBFlexible;
    public static final int COLOR_FormatRawBayer10bit;
    public static final int COLOR_FormatRawBayer8bit;
    public static final int COLOR_FormatRawBayer8bitcompressed;
    public static final int COLOR_FormatSurface;
    public static final int COLOR_FormatYCbYCr;
    public static final int COLOR_FormatYCrYCb;
    public static final int COLOR_FormatYUV411PackedPlanar;
    public static final int COLOR_FormatYUV411Planar;
    public static final int COLOR_FormatYUV420Flexible;
    public static final int COLOR_FormatYUV420PackedPlanar;
    public static final int COLOR_FormatYUV420PackedSemiPlanar;
    public static final int COLOR_FormatYUV420Planar;
    public static final int COLOR_FormatYUV420SemiPlanar;
    public static final int COLOR_FormatYUV422Flexible;
    public static final int COLOR_FormatYUV422PackedPlanar;
    public static final int COLOR_FormatYUV422PackedSemiPlanar;
    public static final int COLOR_FormatYUV422Planar;
    public static final int COLOR_FormatYUV422SemiPlanar;
    public static final int COLOR_FormatYUV444Flexible;
    public static final int COLOR_FormatYUV444Interleaved;
    public static final int COLOR_QCOM_FormatYUV420SemiPlanar;
    public static final int COLOR_TI_FormatYUV420PackedSemiPlanar;
    public static final java.lang.String FEATURE_AdaptivePlayback;
    public static final java.lang.String FEATURE_DynamicTimestamp;
    public static final java.lang.String FEATURE_FrameParsing;
    public static final java.lang.String FEATURE_IntraRefresh;
    public static final java.lang.String FEATURE_LowLatency;
    public static final java.lang.String FEATURE_MultipleFrames;
    public static final java.lang.String FEATURE_PartialFrame;
    public static final java.lang.String FEATURE_SecurePlayback;
    public static final java.lang.String FEATURE_TunneledPlayback;
    private static final java.lang.String TAG;
    private static final android.media.MediaCodecInfo$Feature[] decoderFeatures;
    private static final android.media.MediaCodecInfo$Feature[] encoderFeatures;
    public int[] colorFormats;
    private android.media.MediaCodecInfo$AudioCapabilities mAudioCaps;
    private android.media.MediaFormat mCapabilitiesInfo;
    private android.media.MediaFormat mDefaultFormat;
    private android.media.MediaCodecInfo$EncoderCapabilities mEncoderCaps;
    int mError;
    private int mFlagsRequired;
    private int mFlagsSupported;
    private int mFlagsVerified;
    private int mMaxSupportedInstances;
    private java.lang.String mMime;
    private android.media.MediaCodecInfo$VideoCapabilities mVideoCaps;
    public android.media.MediaCodecInfo$CodecProfileLevel[] profileLevels;

    static void <clinit>()
    {
        android.media.MediaCodecInfo$Feature[] $r0, $r9;
        android.media.MediaCodecInfo$Feature $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r10, $r11, $r12;

        <android.media.MediaCodecInfo$CodecCapabilities: java.lang.String TAG> = "CodecCapabilities";

        <android.media.MediaCodecInfo$CodecCapabilities: java.lang.String FEATURE_TunneledPlayback> = "tunneled-playback";

        <android.media.MediaCodecInfo$CodecCapabilities: java.lang.String FEATURE_SecurePlayback> = "secure-playback";

        <android.media.MediaCodecInfo$CodecCapabilities: java.lang.String FEATURE_PartialFrame> = "partial-frame";

        <android.media.MediaCodecInfo$CodecCapabilities: java.lang.String FEATURE_MultipleFrames> = "multiple-frames";

        <android.media.MediaCodecInfo$CodecCapabilities: java.lang.String FEATURE_LowLatency> = "low-latency";

        <android.media.MediaCodecInfo$CodecCapabilities: java.lang.String FEATURE_IntraRefresh> = "intra-refresh";

        <android.media.MediaCodecInfo$CodecCapabilities: java.lang.String FEATURE_FrameParsing> = "frame-parsing";

        <android.media.MediaCodecInfo$CodecCapabilities: java.lang.String FEATURE_DynamicTimestamp> = "dynamic-timestamp";

        <android.media.MediaCodecInfo$CodecCapabilities: java.lang.String FEATURE_AdaptivePlayback> = "adaptive-playback";

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_TI_FormatYUV420PackedSemiPlanar> = 2130706688;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_QCOM_FormatYUV420SemiPlanar> = 2141391872;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYUV444Interleaved> = 29;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYUV444Flexible> = 2135181448;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYUV422SemiPlanar> = 24;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYUV422Planar> = 22;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYUV422PackedSemiPlanar> = 40;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYUV422PackedPlanar> = 23;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYUV422Flexible> = 2135042184;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYUV420SemiPlanar> = 21;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYUV420Planar> = 19;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYUV420PackedSemiPlanar> = 39;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYUV420PackedPlanar> = 20;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYUV420Flexible> = 2135033992;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYUV411Planar> = 17;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYUV411PackedPlanar> = 18;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYCrYCb> = 26;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatYCbYCr> = 25;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatSurface> = 2130708361;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatRawBayer8bitcompressed> = 32;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatRawBayer8bit> = 30;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatRawBayer10bit> = 31;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatRGBFlexible> = 2134292616;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatRGBAFlexible> = 2134288520;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatMonochrome> = 1;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatL8> = 35;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatL4> = 34;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatL32> = 38;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatL24> = 37;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatL2> = 33;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatL16> = 36;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatCrYCbY> = 28;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_FormatCbYCrY> = 27;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format8bitRGB332> = 2;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format32bitBGRA8888> = 15;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format32bitARGB8888> = 16;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format32bitABGR8888> = 2130747392;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format25bitARGB1888> = 14;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format24bitRGB888> = 11;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format24bitBGR888> = 12;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format24bitARGB1887> = 13;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format24BitARGB6666> = 42;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format24BitABGR6666> = 43;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format19bitARGB1666> = 10;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format18bitRGB666> = 8;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format18bitARGB1665> = 9;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format18BitBGR666> = 41;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format16bitRGB565> = 6;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format16bitBGR565> = 7;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format16bitARGB4444> = 4;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format16bitARGB1555> = 5;

        <android.media.MediaCodecInfo$CodecCapabilities: int COLOR_Format12bitRGB444> = 3;

        $r0 = newarray (android.media.MediaCodecInfo$Feature)[8];

        $r1 = new android.media.MediaCodecInfo$Feature;

        specialinvoke $r1.<android.media.MediaCodecInfo$Feature: void <init>(java.lang.String,int,boolean)>("adaptive-playback", 1, 1);

        $r0[0] = $r1;

        $r2 = new android.media.MediaCodecInfo$Feature;

        specialinvoke $r2.<android.media.MediaCodecInfo$Feature: void <init>(java.lang.String,int,boolean)>("secure-playback", 2, 0);

        $r0[1] = $r2;

        $r3 = new android.media.MediaCodecInfo$Feature;

        specialinvoke $r3.<android.media.MediaCodecInfo$Feature: void <init>(java.lang.String,int,boolean)>("tunneled-playback", 4, 0);

        $r0[2] = $r3;

        $r4 = new android.media.MediaCodecInfo$Feature;

        specialinvoke $r4.<android.media.MediaCodecInfo$Feature: void <init>(java.lang.String,int,boolean)>("partial-frame", 8, 0);

        $r0[3] = $r4;

        $r5 = new android.media.MediaCodecInfo$Feature;

        specialinvoke $r5.<android.media.MediaCodecInfo$Feature: void <init>(java.lang.String,int,boolean)>("frame-parsing", 16, 0);

        $r0[4] = $r5;

        $r6 = new android.media.MediaCodecInfo$Feature;

        specialinvoke $r6.<android.media.MediaCodecInfo$Feature: void <init>(java.lang.String,int,boolean)>("multiple-frames", 32, 0);

        $r0[5] = $r6;

        $r7 = new android.media.MediaCodecInfo$Feature;

        specialinvoke $r7.<android.media.MediaCodecInfo$Feature: void <init>(java.lang.String,int,boolean)>("dynamic-timestamp", 64, 0);

        $r0[6] = $r7;

        $r8 = new android.media.MediaCodecInfo$Feature;

        specialinvoke $r8.<android.media.MediaCodecInfo$Feature: void <init>(java.lang.String,int,boolean)>("low-latency", 128, 1);

        $r0[7] = $r8;

        <android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$Feature[] decoderFeatures> = $r0;

        $r9 = newarray (android.media.MediaCodecInfo$Feature)[3];

        $r10 = new android.media.MediaCodecInfo$Feature;

        specialinvoke $r10.<android.media.MediaCodecInfo$Feature: void <init>(java.lang.String,int,boolean)>("intra-refresh", 1, 0);

        $r9[0] = $r10;

        $r11 = new android.media.MediaCodecInfo$Feature;

        specialinvoke $r11.<android.media.MediaCodecInfo$Feature: void <init>(java.lang.String,int,boolean)>("multiple-frames", 2, 0);

        $r9[1] = $r11;

        $r12 = new android.media.MediaCodecInfo$Feature;

        specialinvoke $r12.<android.media.MediaCodecInfo$Feature: void <init>(java.lang.String,int,boolean)>("dynamic-timestamp", 4, 0);

        $r9[2] = $r12;

        <android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$Feature[] encoderFeatures> = $r9;

        return;
    }

    public void <init>()
    {
        android.media.MediaCodecInfo$CodecCapabilities r0;

        r0 := @this: android.media.MediaCodecInfo$CodecCapabilities;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    void <init>(android.media.MediaCodecInfo$CodecProfileLevel[], int[], boolean, android.media.MediaFormat, android.media.MediaFormat)
    {
        android.media.MediaCodecInfo$CodecCapabilities r0;
        java.util.Map r1, r35;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13, i14;
        java.lang.String $r2, $r3, $r15, $r19, r27, $r31, $r32, r39;
        boolean $z1, $z2, $z3, z4, $z5;
        android.media.MediaCodecInfo$VideoCapabilities $r4;
        java.lang.Object $r5, $r6, $r17;
        java.lang.Integer $r7, $r8, $r10, $r12, r40;
        android.util.Range $r9;
        java.lang.Comparable $r11;
        java.lang.StringBuilder $r13;
        android.media.MediaFormat $r18, $r20, r25, r26, r41;
        android.media.MediaCodecInfo$CodecProfileLevel $r21;
        android.media.MediaCodecInfo$CodecProfileLevel[] $r22, r23, r29;
        int[] r24;
        android.media.MediaCodecInfo$AudioCapabilities r33;
        android.media.MediaCodecInfo$EncoderCapabilities r34;
        android.media.MediaCodecInfo$Feature[] r36;
        android.media.MediaCodecInfo$Feature r37;

        r0 := @this: android.media.MediaCodecInfo$CodecCapabilities;

        r23 := @parameter0: android.media.MediaCodecInfo$CodecProfileLevel[];

        r24 := @parameter1: int[];

        z4 := @parameter2: boolean;

        r25 := @parameter3: android.media.MediaFormat;

        r26 := @parameter4: android.media.MediaFormat;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r1 = virtualinvoke r26.<android.media.MediaFormat: java.util.Map getMap()>();

        r0.<android.media.MediaCodecInfo$CodecCapabilities: int[] colorFormats> = r24;

        i11 = 0;

        r0.<android.media.MediaCodecInfo$CodecCapabilities: int mFlagsVerified> = 0;

        r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaFormat mDefaultFormat> = r25;

        r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaFormat mCapabilitiesInfo> = r26;

        r27 = virtualinvoke r25.<android.media.MediaFormat: java.lang.String getString(java.lang.String)>("mime");

        r0.<android.media.MediaCodecInfo$CodecCapabilities: java.lang.String mMime> = r27;

        i12 = lengthof r23;

        r29 = r23;

        if i12 != 0 goto label01;

        r29 = r23;

        $z3 = virtualinvoke r27.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("video/x-vnd.on2.vp9");

        if $z3 == 0 goto label01;

        $r21 = new android.media.MediaCodecInfo$CodecProfileLevel;

        specialinvoke $r21.<android.media.MediaCodecInfo$CodecProfileLevel: void <init>()>();

        $r21.<android.media.MediaCodecInfo$CodecProfileLevel: int profile> = 1;

        $i10 = staticinvoke <android.media.MediaCodecInfo$VideoCapabilities: int equivalentVP9Level(android.media.MediaFormat)>(r26);

        $r21.<android.media.MediaCodecInfo$CodecProfileLevel: int level> = $i10;

        $r22 = newarray (android.media.MediaCodecInfo$CodecProfileLevel)[1];

        $r22[0] = $r21;

        r29 = $r22;

     label01:
        r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$CodecProfileLevel[] profileLevels> = r29;

        $r31 = r0.<android.media.MediaCodecInfo$CodecCapabilities: java.lang.String mMime>;

        $r32 = virtualinvoke $r31.<java.lang.String: java.lang.String toLowerCase()>();

        $z5 = virtualinvoke $r32.<java.lang.String: boolean startsWith(java.lang.String)>("audio/");

        if $z5 == 0 goto label02;

        r33 = staticinvoke <android.media.MediaCodecInfo$AudioCapabilities: android.media.MediaCodecInfo$AudioCapabilities create(android.media.MediaFormat,android.media.MediaCodecInfo$CodecCapabilities)>(r26, r0);

        r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$AudioCapabilities mAudioCaps> = r33;

        $r20 = r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaFormat mDefaultFormat>;

        virtualinvoke r33.<android.media.MediaCodecInfo$AudioCapabilities: void getDefaultFormat(android.media.MediaFormat)>($r20);

        goto label04;

     label02:
        $r2 = r0.<android.media.MediaCodecInfo$CodecCapabilities: java.lang.String mMime>;

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String toLowerCase()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("video/");

        if $z1 != 0 goto label03;

        $r19 = r0.<android.media.MediaCodecInfo$CodecCapabilities: java.lang.String mMime>;

        $z2 = virtualinvoke $r19.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("image/vnd.android.heic");

        if $z2 == 0 goto label04;

     label03:
        $r4 = staticinvoke <android.media.MediaCodecInfo$VideoCapabilities: android.media.MediaCodecInfo$VideoCapabilities create(android.media.MediaFormat,android.media.MediaCodecInfo$CodecCapabilities)>(r26, r0);

        r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$VideoCapabilities mVideoCaps> = $r4;

     label04:
        if z4 == 0 goto label05;

        r34 = staticinvoke <android.media.MediaCodecInfo$EncoderCapabilities: android.media.MediaCodecInfo$EncoderCapabilities create(android.media.MediaFormat,android.media.MediaCodecInfo$CodecCapabilities)>(r26, r0);

        r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$EncoderCapabilities mEncoderCaps> = r34;

        $r18 = r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaFormat mDefaultFormat>;

        virtualinvoke r34.<android.media.MediaCodecInfo$EncoderCapabilities: void getDefaultFormat(android.media.MediaFormat)>($r18);

     label05:
        r35 = staticinvoke <android.media.MediaCodecList: java.util.Map getGlobalSettings()>();

        $r5 = interfaceinvoke r35.<java.util.Map: java.lang.Object get(java.lang.Object)>("max-concurrent-instances");

        $i1 = staticinvoke <android.media.Utils: int parseIntSafely(java.lang.Object,int)>($r5, 32);

        r0.<android.media.MediaCodecInfo$CodecCapabilities: int mMaxSupportedInstances> = $i1;

        $r6 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("max-concurrent-instances");

        $i2 = r0.<android.media.MediaCodecInfo$CodecCapabilities: int mMaxSupportedInstances>;

        i13 = staticinvoke <android.media.Utils: int parseIntSafely(java.lang.Object,int)>($r6, $i2);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(256);

        $r9 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r7, $r8);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i13);

        $r11 = virtualinvoke $r9.<android.util.Range: java.lang.Comparable clamp(java.lang.Comparable)>($r10);

        $r12 = (java.lang.Integer) $r11;

        $i3 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        r0.<android.media.MediaCodecInfo$CodecCapabilities: int mMaxSupportedInstances> = $i3;

        r36 = specialinvoke r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$Feature[] getValidFeatures()>();

        i14 = lengthof r36;

     label06:
        if i11 >= i14 goto label10;

        r37 = r36[i11];

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("feature-");

        $r15 = r37.<android.media.MediaCodecInfo$Feature: java.lang.String mName>;

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        r39 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r39);

        r40 = (java.lang.Integer) $r17;

        if r40 != null goto label07;

        goto label09;

     label07:
        $i4 = virtualinvoke r40.<java.lang.Integer: int intValue()>();

        if $i4 <= 0 goto label08;

        i0 = r0.<android.media.MediaCodecInfo$CodecCapabilities: int mFlagsRequired>;

        $i8 = r37.<android.media.MediaCodecInfo$Feature: int mValue>;

        $i9 = $i8 | i0;

        r0.<android.media.MediaCodecInfo$CodecCapabilities: int mFlagsRequired> = $i9;

     label08:
        $i6 = r0.<android.media.MediaCodecInfo$CodecCapabilities: int mFlagsSupported>;

        $i5 = r37.<android.media.MediaCodecInfo$Feature: int mValue>;

        $i7 = $i6 | $i5;

        r0.<android.media.MediaCodecInfo$CodecCapabilities: int mFlagsSupported> = $i7;

        r41 = r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaFormat mDefaultFormat>;

        virtualinvoke r41.<android.media.MediaFormat: void setInteger(java.lang.String,int)>(r39, 1);

     label09:
        i11 = i11 + 1;

        goto label06;

     label10:
        return;
    }

    void <init>(android.media.MediaCodecInfo$CodecProfileLevel[], int[], boolean, java.util.Map, java.util.Map)
    {
        android.media.MediaCodecInfo$CodecCapabilities r0;
        android.media.MediaCodecInfo$CodecProfileLevel[] r1;
        int[] r2;
        boolean z0;
        java.util.Map r3, r4;
        android.media.MediaFormat $r5, $r6;

        r0 := @this: android.media.MediaCodecInfo$CodecCapabilities;

        r1 := @parameter0: android.media.MediaCodecInfo$CodecProfileLevel[];

        r2 := @parameter1: int[];

        z0 := @parameter2: boolean;

        r3 := @parameter3: java.util.Map;

        r4 := @parameter4: java.util.Map;

        $r5 = new android.media.MediaFormat;

        specialinvoke $r5.<android.media.MediaFormat: void <init>(java.util.Map)>(r3);

        $r6 = new android.media.MediaFormat;

        specialinvoke $r6.<android.media.MediaFormat: void <init>(java.util.Map)>(r4);

        specialinvoke r0.<android.media.MediaCodecInfo$CodecCapabilities: void <init>(android.media.MediaCodecInfo$CodecProfileLevel[],int[],boolean,android.media.MediaFormat,android.media.MediaFormat)>(r1, r2, z0, $r5, $r6);

        return;
    }

    static boolean access$100(android.util.Range, android.media.MediaFormat)
    {
        android.util.Range r0;
        android.media.MediaFormat r1;
        boolean $z0;

        r0 := @parameter0: android.util.Range;

        r1 := @parameter1: android.media.MediaFormat;

        $z0 = staticinvoke <android.media.MediaCodecInfo$CodecCapabilities: boolean supportsBitrate(android.util.Range,android.media.MediaFormat)>(r0, r1);

        return $z0;
    }

    private boolean checkFeature(java.lang.String, int)
    {
        android.media.MediaCodecInfo$CodecCapabilities r0;
        java.lang.String r1, $r4;
        int i0, i1, $i2, $i3, i4;
        android.media.MediaCodecInfo$Feature[] r2;
        android.media.MediaCodecInfo$Feature r3;
        boolean $z0, z1;

        r0 := @this: android.media.MediaCodecInfo$CodecCapabilities;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 = specialinvoke r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$Feature[] getValidFeatures()>();

        i1 = lengthof r2;

        z1 = 0;

        i4 = 0;

     label1:
        if i4 >= i1 goto label4;

        r3 = r2[i4];

        $r4 = r3.<android.media.MediaCodecInfo$Feature: java.lang.String mName>;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label3;

        $i2 = r3.<android.media.MediaCodecInfo$Feature: int mValue>;

        $i3 = $i2 & i0;

        if $i3 == 0 goto label2;

        z1 = 1;

     label2:
        return z1;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        return 0;
    }

    public static android.media.MediaCodecInfo$CodecCapabilities createFromProfileLevel(java.lang.String, int, int)
    {
        int i0, i1, $i2;
        android.media.MediaCodecInfo$CodecProfileLevel $r2;
        android.media.MediaFormat $r3, $r4;
        android.media.MediaCodecInfo$CodecCapabilities $r5;
        android.media.MediaCodecInfo$CodecProfileLevel[] $r6;
        int[] $r7;
        java.lang.String r8;

        r8 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new android.media.MediaCodecInfo$CodecProfileLevel;

        specialinvoke $r2.<android.media.MediaCodecInfo$CodecProfileLevel: void <init>()>();

        $r2.<android.media.MediaCodecInfo$CodecProfileLevel: int profile> = i0;

        $r2.<android.media.MediaCodecInfo$CodecProfileLevel: int level> = i1;

        $r3 = new android.media.MediaFormat;

        specialinvoke $r3.<android.media.MediaFormat: void <init>()>();

        virtualinvoke $r3.<android.media.MediaFormat: void setString(java.lang.String,java.lang.String)>("mime", r8);

        $r4 = new android.media.MediaFormat;

        specialinvoke $r4.<android.media.MediaFormat: void <init>()>();

        $r5 = new android.media.MediaCodecInfo$CodecCapabilities;

        $r6 = newarray (android.media.MediaCodecInfo$CodecProfileLevel)[1];

        $r6[0] = $r2;

        $r7 = newarray (int)[0];

        specialinvoke $r5.<android.media.MediaCodecInfo$CodecCapabilities: void <init>(android.media.MediaCodecInfo$CodecProfileLevel[],int[],boolean,android.media.MediaFormat,android.media.MediaFormat)>($r6, $r7, 1, $r3, $r4);

        $i2 = $r5.<android.media.MediaCodecInfo$CodecCapabilities: int mError>;

        if $i2 == 0 goto label1;

        return null;

     label1:
        return $r5;
    }

    private android.media.MediaCodecInfo$Feature[] getValidFeatures()
    {
        android.media.MediaCodecInfo$CodecCapabilities r0;
        boolean $z0;
        android.media.MediaCodecInfo$Feature[] $r1, $r2;

        r0 := @this: android.media.MediaCodecInfo$CodecCapabilities;

        $z0 = specialinvoke r0.<android.media.MediaCodecInfo$CodecCapabilities: boolean isEncoder()>();

        if $z0 != 0 goto label1;

        $r2 = <android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$Feature[] decoderFeatures>;

        return $r2;

     label1:
        $r1 = <android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$Feature[] encoderFeatures>;

        return $r1;
    }

    private boolean isAudio()
    {
        android.media.MediaCodecInfo$CodecCapabilities r0;
        android.media.MediaCodecInfo$AudioCapabilities $r1;
        boolean z0;

        r0 := @this: android.media.MediaCodecInfo$CodecCapabilities;

        $r1 = r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$AudioCapabilities mAudioCaps>;

        if $r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isEncoder()
    {
        android.media.MediaCodecInfo$CodecCapabilities r0;
        android.media.MediaCodecInfo$EncoderCapabilities $r1;
        boolean z0;

        r0 := @this: android.media.MediaCodecInfo$CodecCapabilities;

        $r1 = r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$EncoderCapabilities mEncoderCaps>;

        if $r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isVideo()
    {
        android.media.MediaCodecInfo$CodecCapabilities r0;
        android.media.MediaCodecInfo$VideoCapabilities $r1;
        boolean z0;

        r0 := @this: android.media.MediaCodecInfo$CodecCapabilities;

        $r1 = r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$VideoCapabilities mVideoCaps>;

        if $r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private static boolean supportsBitrate(android.util.Range, android.media.MediaFormat)
    {
        android.util.Range r0;
        java.lang.Integer r1, r2, r7;
        java.lang.Object $r3, $r4;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        android.media.MediaFormat r5;
        java.util.Map r6;

        r0 := @parameter0: android.util.Range;

        r5 := @parameter1: android.media.MediaFormat;

        r6 = virtualinvoke r5.<android.media.MediaFormat: java.util.Map getMap()>();

        $r3 = interfaceinvoke r6.<java.util.Map: java.lang.Object get(java.lang.Object)>("max-bitrate");

        r1 = (java.lang.Integer) $r3;

        $r4 = interfaceinvoke r6.<java.util.Map: java.lang.Object get(java.lang.Object)>("bitrate");

        r2 = (java.lang.Integer) $r4;

        if r2 != null goto label1;

        r7 = r1;

        goto label2;

     label1:
        r7 = r2;

        if r1 == null goto label2;

        $i1 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        $i2 = virtualinvoke r1.<java.lang.Integer: int intValue()>();

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>($i1, $i2);

        r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

     label2:
        if r7 == null goto label3;

        $i0 = virtualinvoke r7.<java.lang.Integer: int intValue()>();

        if $i0 <= 0 goto label3;

        $z0 = virtualinvoke r0.<android.util.Range: boolean contains(java.lang.Comparable)>(r7);

        return $z0;

     label3:
        return 1;
    }

    private boolean supportsProfileLevel(int, java.lang.Integer)
    {
        android.media.MediaCodecInfo$CodecCapabilities r0, $r7, $r9;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, $i18, $i19;
        java.lang.Integer r1;
        android.media.MediaCodecInfo$CodecProfileLevel[] r2;
        android.media.MediaCodecInfo$CodecProfileLevel r3;
        java.lang.String $r4, $r5, $r6, $r8, $r10, $r11;
        boolean $z0, $z1, z2, $z3, $z4, z5, z6;

        r0 := @this: android.media.MediaCodecInfo$CodecCapabilities;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Integer;

        r2 = r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$CodecProfileLevel[] profileLevels>;

        i1 = lengthof r2;

        z2 = 0;

        i17 = 0;

     label01:
        if i17 >= i1 goto label15;

        r3 = r2[i17];

        $i2 = r3.<android.media.MediaCodecInfo$CodecProfileLevel: int profile>;

        if $i2 == i0 goto label02;

        goto label13;

     label02:
        if r1 == null goto label14;

        $r4 = r0.<android.media.MediaCodecInfo$CodecCapabilities: java.lang.String mMime>;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("audio/mp4a-latm");

        if $z0 == 0 goto label03;

        goto label14;

     label03:
        $r5 = r0.<android.media.MediaCodecInfo$CodecCapabilities: java.lang.String mMime>;

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("video/3gpp");

        if $z1 == 0 goto label04;

        $i13 = r3.<android.media.MediaCodecInfo$CodecProfileLevel: int level>;

        $i14 = virtualinvoke r1.<java.lang.Integer: int intValue()>();

        if $i13 == $i14 goto label04;

        $i15 = r3.<android.media.MediaCodecInfo$CodecProfileLevel: int level>;

        if $i15 != 16 goto label04;

        $i16 = virtualinvoke r1.<java.lang.Integer: int intValue()>();

        if $i16 <= 1 goto label04;

        goto label13;

     label04:
        $r10 = r0.<android.media.MediaCodecInfo$CodecCapabilities: java.lang.String mMime>;

        $z3 = virtualinvoke $r10.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("video/mp4v-es");

        if $z3 == 0 goto label05;

        $i9 = r3.<android.media.MediaCodecInfo$CodecProfileLevel: int level>;

        $i10 = virtualinvoke r1.<java.lang.Integer: int intValue()>();

        if $i9 == $i10 goto label05;

        $i11 = r3.<android.media.MediaCodecInfo$CodecProfileLevel: int level>;

        if $i11 != 4 goto label05;

        $i12 = virtualinvoke r1.<java.lang.Integer: int intValue()>();

        if $i12 <= 1 goto label05;

        goto label13;

     label05:
        $r11 = r0.<android.media.MediaCodecInfo$CodecCapabilities: java.lang.String mMime>;

        $z4 = virtualinvoke $r11.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("video/hevc");

        if $z4 == 0 goto label10;

        $i5 = r3.<android.media.MediaCodecInfo$CodecProfileLevel: int level>;

        $i6 = $i5 & 44739242;

        if $i6 == 0 goto label06;

        z5 = 1;

        goto label07;

     label06:
        z5 = 0;

     label07:
        $i7 = virtualinvoke r1.<java.lang.Integer: int intValue()>();

        $i8 = 44739242 & $i7;

        if $i8 == 0 goto label08;

        z6 = 1;

        goto label09;

     label08:
        z6 = 0;

     label09:
        if z6 == 0 goto label10;

        if z5 != 0 goto label10;

        goto label13;

     label10:
        $i18 = r3.<android.media.MediaCodecInfo$CodecProfileLevel: int level>;

        $i19 = virtualinvoke r1.<java.lang.Integer: int intValue()>();

        if $i18 < $i19 goto label13;

        $r6 = r0.<android.media.MediaCodecInfo$CodecCapabilities: java.lang.String mMime>;

        $i3 = r3.<android.media.MediaCodecInfo$CodecProfileLevel: int level>;

        $r7 = staticinvoke <android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$CodecCapabilities createFromProfileLevel(java.lang.String,int,int)>($r6, i0, $i3);

        if $r7 == null goto label12;

        $r8 = r0.<android.media.MediaCodecInfo$CodecCapabilities: java.lang.String mMime>;

        $i4 = virtualinvoke r1.<java.lang.Integer: int intValue()>();

        $r9 = staticinvoke <android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$CodecCapabilities createFromProfileLevel(java.lang.String,int,int)>($r8, i0, $i4);

        if $r9 == null goto label11;

        z2 = 1;

     label11:
        return z2;

     label12:
        return 1;

     label13:
        i17 = i17 + 1;

        goto label01;

     label14:
        return 1;

     label15:
        return 0;
    }

    public android.media.MediaCodecInfo$CodecCapabilities dup()
    {
        android.media.MediaCodecInfo$CodecCapabilities r0, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object[] $r3;
        android.media.MediaCodecInfo$CodecProfileLevel[] $r4, r12;
        int[] $r5, r13;
        java.lang.String $r6;
        android.media.MediaCodecInfo$AudioCapabilities $r7;
        android.media.MediaCodecInfo$VideoCapabilities $r8;
        android.media.MediaCodecInfo$EncoderCapabilities $r9;
        android.media.MediaFormat $r10, $r11;

        r0 := @this: android.media.MediaCodecInfo$CodecCapabilities;

        $r2 = new android.media.MediaCodecInfo$CodecCapabilities;

        specialinvoke $r2.<android.media.MediaCodecInfo$CodecCapabilities: void <init>()>();

        r12 = r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$CodecProfileLevel[] profileLevels>;

        $i0 = lengthof r12;

        $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r12, $i0);

        $r4 = (android.media.MediaCodecInfo$CodecProfileLevel[]) $r3;

        $r2.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$CodecProfileLevel[] profileLevels> = $r4;

        r13 = r0.<android.media.MediaCodecInfo$CodecCapabilities: int[] colorFormats>;

        $i1 = lengthof r13;

        $r5 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>(r13, $i1);

        $r2.<android.media.MediaCodecInfo$CodecCapabilities: int[] colorFormats> = $r5;

        $r6 = r0.<android.media.MediaCodecInfo$CodecCapabilities: java.lang.String mMime>;

        $r2.<android.media.MediaCodecInfo$CodecCapabilities: java.lang.String mMime> = $r6;

        $i2 = r0.<android.media.MediaCodecInfo$CodecCapabilities: int mMaxSupportedInstances>;

        $r2.<android.media.MediaCodecInfo$CodecCapabilities: int mMaxSupportedInstances> = $i2;

        $i3 = r0.<android.media.MediaCodecInfo$CodecCapabilities: int mFlagsRequired>;

        $r2.<android.media.MediaCodecInfo$CodecCapabilities: int mFlagsRequired> = $i3;

        $i4 = r0.<android.media.MediaCodecInfo$CodecCapabilities: int mFlagsSupported>;

        $r2.<android.media.MediaCodecInfo$CodecCapabilities: int mFlagsSupported> = $i4;

        $i5 = r0.<android.media.MediaCodecInfo$CodecCapabilities: int mFlagsVerified>;

        $r2.<android.media.MediaCodecInfo$CodecCapabilities: int mFlagsVerified> = $i5;

        $r7 = r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$AudioCapabilities mAudioCaps>;

        $r2.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$AudioCapabilities mAudioCaps> = $r7;

        $r8 = r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$VideoCapabilities mVideoCaps>;

        $r2.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$VideoCapabilities mVideoCaps> = $r8;

        $r9 = r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$EncoderCapabilities mEncoderCaps>;

        $r2.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$EncoderCapabilities mEncoderCaps> = $r9;

        $r10 = r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaFormat mDefaultFormat>;

        $r2.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaFormat mDefaultFormat> = $r10;

        $r11 = r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaFormat mCapabilitiesInfo>;

        $r2.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaFormat mCapabilitiesInfo> = $r11;

        return $r2;
    }

    public android.media.MediaCodecInfo$AudioCapabilities getAudioCapabilities()
    {
        android.media.MediaCodecInfo$CodecCapabilities r0;
        android.media.MediaCodecInfo$AudioCapabilities $r1;

        r0 := @this: android.media.MediaCodecInfo$CodecCapabilities;

        $r1 = r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$AudioCapabilities mAudioCaps>;

        return $r1;
    }

    public android.media.MediaFormat getDefaultFormat()
    {
        android.media.MediaCodecInfo$CodecCapabilities r0;
        android.media.MediaFormat $r1;

        r0 := @this: android.media.MediaCodecInfo$CodecCapabilities;

        $r1 = r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaFormat mDefaultFormat>;

        return $r1;
    }

    public android.media.MediaCodecInfo$EncoderCapabilities getEncoderCapabilities()
    {
        android.media.MediaCodecInfo$CodecCapabilities r0;
        android.media.MediaCodecInfo$EncoderCapabilities $r1;

        r0 := @this: android.media.MediaCodecInfo$CodecCapabilities;

        $r1 = r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$EncoderCapabilities mEncoderCaps>;

        return $r1;
    }

    public int getMaxSupportedInstances()
    {
        android.media.MediaCodecInfo$CodecCapabilities r0;
        int $i0;

        r0 := @this: android.media.MediaCodecInfo$CodecCapabilities;

        $i0 = r0.<android.media.MediaCodecInfo$CodecCapabilities: int mMaxSupportedInstances>;

        return $i0;
    }

    public java.lang.String getMimeType()
    {
        android.media.MediaCodecInfo$CodecCapabilities r0;
        java.lang.String $r1;

        r0 := @this: android.media.MediaCodecInfo$CodecCapabilities;

        $r1 = r0.<android.media.MediaCodecInfo$CodecCapabilities: java.lang.String mMime>;

        return $r1;
    }

    public android.media.MediaCodecInfo$VideoCapabilities getVideoCapabilities()
    {
        android.media.MediaCodecInfo$CodecCapabilities r0;
        android.media.MediaCodecInfo$VideoCapabilities $r1;

        r0 := @this: android.media.MediaCodecInfo$CodecCapabilities;

        $r1 = r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$VideoCapabilities mVideoCaps>;

        return $r1;
    }

    public final boolean isFeatureRequired(java.lang.String)
    {
        android.media.MediaCodecInfo$CodecCapabilities r0;
        java.lang.String r1;
        int $i0;
        boolean $z0;

        r0 := @this: android.media.MediaCodecInfo$CodecCapabilities;

        r1 := @parameter0: java.lang.String;

        $i0 = r0.<android.media.MediaCodecInfo$CodecCapabilities: int mFlagsRequired>;

        $z0 = specialinvoke r0.<android.media.MediaCodecInfo$CodecCapabilities: boolean checkFeature(java.lang.String,int)>(r1, $i0);

        return $z0;
    }

    public final boolean isFeatureSupported(java.lang.String)
    {
        android.media.MediaCodecInfo$CodecCapabilities r0;
        java.lang.String r1;
        int $i0;
        boolean $z0;

        r0 := @this: android.media.MediaCodecInfo$CodecCapabilities;

        r1 := @parameter0: java.lang.String;

        $i0 = r0.<android.media.MediaCodecInfo$CodecCapabilities: int mFlagsSupported>;

        $z0 = specialinvoke r0.<android.media.MediaCodecInfo$CodecCapabilities: boolean checkFeature(java.lang.String,int)>(r1, $i0);

        return $z0;
    }

    public final boolean isFormatSupported(android.media.MediaFormat)
    {
        android.media.MediaCodecInfo$CodecCapabilities r0, r29;
        android.media.MediaFormat r1, $r8;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11, i12, i13;
        java.lang.Object $r2, $r3, $r4, $r15;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.String $r5, $r9, $r12, $r14, $r16, $r17, $r18, r20;
        java.util.HashMap $r6;
        java.lang.StringBuilder $r10;
        java.util.Map r19;
        android.media.MediaCodecInfo$Feature[] r21;
        android.media.MediaCodecInfo$Feature r22;
        java.lang.Integer r24, r25, r26;
        android.media.MediaCodecInfo$CodecProfileLevel[] r27;
        android.media.MediaCodecInfo$CodecProfileLevel r28;
        android.media.MediaCodecInfo$AudioCapabilities r32;
        android.media.MediaCodecInfo$VideoCapabilities r33;
        android.media.MediaCodecInfo$EncoderCapabilities r34;

        r0 := @this: android.media.MediaCodecInfo$CodecCapabilities;

        r1 := @parameter0: android.media.MediaFormat;

        r19 = virtualinvoke r1.<android.media.MediaFormat: java.util.Map getMap()>();

        $r2 = interfaceinvoke r19.<java.util.Map: java.lang.Object get(java.lang.Object)>("mime");

        r20 = (java.lang.String) $r2;

        if r20 == null goto label01;

        $r18 = r0.<android.media.MediaCodecInfo$CodecCapabilities: java.lang.String mMime>;

        $z8 = virtualinvoke $r18.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r20);

        if $z8 != 0 goto label01;

        return 0;

     label01:
        r21 = specialinvoke r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$Feature[] getValidFeatures()>();

        i9 = lengthof r21;

        i10 = 0;

     label02:
        if i10 >= i9 goto label07;

        r22 = r21[i10];

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("feature-");

        $r12 = r22.<android.media.MediaCodecInfo$Feature: java.lang.String mName>;

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = interfaceinvoke r19.<java.util.Map: java.lang.Object get(java.lang.Object)>($r14);

        r24 = (java.lang.Integer) $r15;

        if r24 != null goto label03;

        goto label06;

     label03:
        $i7 = virtualinvoke r24.<java.lang.Integer: int intValue()>();

        if $i7 != 1 goto label04;

        $r17 = r22.<android.media.MediaCodecInfo$Feature: java.lang.String mName>;

        $z7 = virtualinvoke r0.<android.media.MediaCodecInfo$CodecCapabilities: boolean isFeatureSupported(java.lang.String)>($r17);

        if $z7 == 0 goto label05;

     label04:
        $i8 = virtualinvoke r24.<java.lang.Integer: int intValue()>();

        if $i8 != 0 goto label06;

        $r16 = r22.<android.media.MediaCodecInfo$Feature: java.lang.String mName>;

        $z6 = virtualinvoke r0.<android.media.MediaCodecInfo$CodecCapabilities: boolean isFeatureRequired(java.lang.String)>($r16);

        if $z6 == 0 goto label06;

     label05:
        return 0;

     label06:
        i10 = i10 + 1;

        goto label02;

     label07:
        $r3 = interfaceinvoke r19.<java.util.Map: java.lang.Object get(java.lang.Object)>("profile");

        r25 = (java.lang.Integer) $r3;

        $r4 = interfaceinvoke r19.<java.util.Map: java.lang.Object get(java.lang.Object)>("level");

        r26 = (java.lang.Integer) $r4;

        if r25 == null goto label13;

        $i1 = virtualinvoke r25.<java.lang.Integer: int intValue()>();

        $z3 = specialinvoke r0.<android.media.MediaCodecInfo$CodecCapabilities: boolean supportsProfileLevel(int,java.lang.Integer)>($i1, r26);

        if $z3 != 0 goto label08;

        return 0;

     label08:
        i11 = 0;

        r27 = r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$CodecProfileLevel[] profileLevels>;

        i0 = lengthof r27;

        i12 = 0;

     label09:
        if i12 >= i0 goto label12;

        r28 = r27[i12];

        i13 = i11;

        $i3 = r28.<android.media.MediaCodecInfo$CodecProfileLevel: int profile>;

        $i4 = virtualinvoke r25.<java.lang.Integer: int intValue()>();

        if $i3 != $i4 goto label11;

        i13 = i11;

        $i5 = r28.<android.media.MediaCodecInfo$CodecProfileLevel: int level>;

        if $i5 <= i11 goto label11;

        $r9 = r0.<android.media.MediaCodecInfo$CodecCapabilities: java.lang.String mMime>;

        $z5 = virtualinvoke $r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("video/3gpp");

        if $z5 == 0 goto label10;

        $i6 = r28.<android.media.MediaCodecInfo$CodecProfileLevel: int level>;

        if $i6 != 16 goto label10;

        i13 = i11;

        if i11 != 1 goto label11;

     label10:
        i13 = r28.<android.media.MediaCodecInfo$CodecProfileLevel: int level>;

     label11:
        i12 = i12 + 1;

        i11 = i13;

        goto label09;

     label12:
        $r5 = r0.<android.media.MediaCodecInfo$CodecCapabilities: java.lang.String mMime>;

        $i2 = virtualinvoke r25.<java.lang.Integer: int intValue()>();

        r29 = staticinvoke <android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$CodecCapabilities createFromProfileLevel(java.lang.String,int,int)>($r5, $i2, i11);

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>(java.util.Map)>(r19);

        interfaceinvoke $r6.<java.util.Map: java.lang.Object remove(java.lang.Object)>("profile");

        $r8 = new android.media.MediaFormat;

        specialinvoke $r8.<android.media.MediaFormat: void <init>(java.util.Map)>($r6);

        if r29 == null goto label13;

        $z4 = virtualinvoke r29.<android.media.MediaCodecInfo$CodecCapabilities: boolean isFormatSupported(android.media.MediaFormat)>($r8);

        if $z4 != 0 goto label13;

        return 0;

     label13:
        r32 = r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$AudioCapabilities mAudioCaps>;

        if r32 == null goto label14;

        $z2 = virtualinvoke r32.<android.media.MediaCodecInfo$AudioCapabilities: boolean supportsFormat(android.media.MediaFormat)>(r1);

        if $z2 != 0 goto label14;

        return 0;

     label14:
        r33 = r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$VideoCapabilities mVideoCaps>;

        if r33 == null goto label15;

        $z1 = virtualinvoke r33.<android.media.MediaCodecInfo$VideoCapabilities: boolean supportsFormat(android.media.MediaFormat)>(r1);

        if $z1 != 0 goto label15;

        return 0;

     label15:
        r34 = r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$EncoderCapabilities mEncoderCaps>;

        if r34 == null goto label16;

        $z0 = virtualinvoke r34.<android.media.MediaCodecInfo$EncoderCapabilities: boolean supportsFormat(android.media.MediaFormat)>(r1);

        if $z0 != 0 goto label16;

        return 0;

     label16:
        return 1;
    }

    public boolean isRegular()
    {
        android.media.MediaCodecInfo$CodecCapabilities r0;
        android.media.MediaCodecInfo$Feature[] r1;
        int i0, i1;
        android.media.MediaCodecInfo$Feature r2;
        boolean $z0, $z1;
        java.lang.String $r3;

        r0 := @this: android.media.MediaCodecInfo$CodecCapabilities;

        r1 = specialinvoke r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$Feature[] getValidFeatures()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = r1[i1];

        $z0 = r2.<android.media.MediaCodecInfo$Feature: boolean mDefault>;

        if $z0 != 0 goto label2;

        $r3 = r2.<android.media.MediaCodecInfo$Feature: java.lang.String mName>;

        $z1 = virtualinvoke r0.<android.media.MediaCodecInfo$CodecCapabilities: boolean isFeatureRequired(java.lang.String)>($r3);

        if $z1 == 0 goto label2;

        return 0;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 1;
    }

    public java.lang.String[] validFeatures()
    {
        android.media.MediaCodecInfo$CodecCapabilities r0;
        android.media.MediaCodecInfo$Feature[] r1;
        java.lang.String[] r2;
        int $i0, $i1, i2;
        android.media.MediaCodecInfo$Feature $r3;
        java.lang.String $r4;

        r0 := @this: android.media.MediaCodecInfo$CodecCapabilities;

        r1 = specialinvoke r0.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$Feature[] getValidFeatures()>();

        $i0 = lengthof r1;

        r2 = newarray (java.lang.String)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof r2;

        if i2 >= $i1 goto label2;

        $r3 = r1[i2];

        $r4 = $r3.<android.media.MediaCodecInfo$Feature: java.lang.String mName>;

        r2[i2] = $r4;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r2;
    }
}
