public final class android.media.MediaCodecInfo$EncoderCapabilities extends java.lang.Object
{
    public static final int BITRATE_MODE_CBR;
    public static final int BITRATE_MODE_CQ;
    public static final int BITRATE_MODE_VBR;
    private static final android.media.MediaCodecInfo$Feature[] bitrates;
    private int mBitControl;
    private android.util.Range mComplexityRange;
    private java.lang.Integer mDefaultComplexity;
    private java.lang.Integer mDefaultQuality;
    private android.media.MediaCodecInfo$CodecCapabilities mParent;
    private android.util.Range mQualityRange;
    private java.lang.String mQualityScale;

    static void <clinit>()
    {
        android.media.MediaCodecInfo$Feature[] $r0;
        android.media.MediaCodecInfo$Feature $r1, $r2, $r3;

        <android.media.MediaCodecInfo$EncoderCapabilities: int BITRATE_MODE_VBR> = 1;

        <android.media.MediaCodecInfo$EncoderCapabilities: int BITRATE_MODE_CQ> = 0;

        <android.media.MediaCodecInfo$EncoderCapabilities: int BITRATE_MODE_CBR> = 2;

        $r0 = newarray (android.media.MediaCodecInfo$Feature)[3];

        $r1 = new android.media.MediaCodecInfo$Feature;

        specialinvoke $r1.<android.media.MediaCodecInfo$Feature: void <init>(java.lang.String,int,boolean)>("VBR", 1, 1);

        $r0[0] = $r1;

        $r2 = new android.media.MediaCodecInfo$Feature;

        specialinvoke $r2.<android.media.MediaCodecInfo$Feature: void <init>(java.lang.String,int,boolean)>("CBR", 2, 0);

        $r0[1] = $r2;

        $r3 = new android.media.MediaCodecInfo$Feature;

        specialinvoke $r3.<android.media.MediaCodecInfo$Feature: void <init>(java.lang.String,int,boolean)>("CQ", 0, 0);

        $r0[2] = $r3;

        <android.media.MediaCodecInfo$EncoderCapabilities: android.media.MediaCodecInfo$Feature[] bitrates> = $r0;

        return;
    }

    private void <init>()
    {
        android.media.MediaCodecInfo$EncoderCapabilities r0;

        r0 := @this: android.media.MediaCodecInfo$EncoderCapabilities;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private void applyLevelLimits()
    {
        android.media.MediaCodecInfo$EncoderCapabilities r0;
        java.lang.String r1;
        android.media.MediaCodecInfo$CodecCapabilities $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Integer $r3, $r4;
        android.util.Range $r5;

        r0 := @this: android.media.MediaCodecInfo$EncoderCapabilities;

        $r2 = r0.<android.media.MediaCodecInfo$EncoderCapabilities: android.media.MediaCodecInfo$CodecCapabilities mParent>;

        r1 = virtualinvoke $r2.<android.media.MediaCodecInfo$CodecCapabilities: java.lang.String getMimeType()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("audio/flac");

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        $r5 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r3, $r4);

        r0.<android.media.MediaCodecInfo$EncoderCapabilities: android.util.Range mComplexityRange> = $r5;

        r0.<android.media.MediaCodecInfo$EncoderCapabilities: int mBitControl> = 1;

        goto label3;

     label1:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("audio/3gpp");

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("audio/amr-wb");

        if $z2 != 0 goto label2;

        $z3 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("audio/g711-alaw");

        if $z3 != 0 goto label2;

        $z4 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("audio/g711-mlaw");

        if $z4 != 0 goto label2;

        $z5 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("audio/gsm");

        if $z5 == 0 goto label3;

     label2:
        r0.<android.media.MediaCodecInfo$EncoderCapabilities: int mBitControl> = 4;

     label3:
        return;
    }

    public static android.media.MediaCodecInfo$EncoderCapabilities create(android.media.MediaFormat, android.media.MediaCodecInfo$CodecCapabilities)
    {
        android.media.MediaFormat r0;
        android.media.MediaCodecInfo$CodecCapabilities r1;
        android.media.MediaCodecInfo$EncoderCapabilities $r3;

        r0 := @parameter0: android.media.MediaFormat;

        r1 := @parameter1: android.media.MediaCodecInfo$CodecCapabilities;

        $r3 = new android.media.MediaCodecInfo$EncoderCapabilities;

        specialinvoke $r3.<android.media.MediaCodecInfo$EncoderCapabilities: void <init>()>();

        specialinvoke $r3.<android.media.MediaCodecInfo$EncoderCapabilities: void init(android.media.MediaFormat,android.media.MediaCodecInfo$CodecCapabilities)>(r0, r1);

        return $r3;
    }

    private void init(android.media.MediaFormat, android.media.MediaCodecInfo$CodecCapabilities)
    {
        android.media.MediaCodecInfo$EncoderCapabilities r0;
        android.media.MediaFormat r1;
        android.util.Range $r2, $r3;
        android.media.MediaCodecInfo$CodecCapabilities r4;
        java.lang.Integer r5;

        r0 := @this: android.media.MediaCodecInfo$EncoderCapabilities;

        r1 := @parameter0: android.media.MediaFormat;

        r4 := @parameter1: android.media.MediaCodecInfo$CodecCapabilities;

        r0.<android.media.MediaCodecInfo$EncoderCapabilities: android.media.MediaCodecInfo$CodecCapabilities mParent> = r4;

        r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r2 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>(r5, r5);

        r0.<android.media.MediaCodecInfo$EncoderCapabilities: android.util.Range mComplexityRange> = $r2;

        $r3 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>(r5, r5);

        r0.<android.media.MediaCodecInfo$EncoderCapabilities: android.util.Range mQualityRange> = $r3;

        r0.<android.media.MediaCodecInfo$EncoderCapabilities: int mBitControl> = 2;

        specialinvoke r0.<android.media.MediaCodecInfo$EncoderCapabilities: void applyLevelLimits()>();

        specialinvoke r0.<android.media.MediaCodecInfo$EncoderCapabilities: void parseFromInfo(android.media.MediaFormat)>(r1);

        return;
    }

    private static int parseBitrateMode(java.lang.String)
    {
        java.lang.String r0, $r3;
        android.media.MediaCodecInfo$Feature[] r1;
        int i0, $i1, i2;
        android.media.MediaCodecInfo$Feature r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 = <android.media.MediaCodecInfo$EncoderCapabilities: android.media.MediaCodecInfo$Feature[] bitrates>;

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        r2 = r1[i2];

        $r3 = r2.<android.media.MediaCodecInfo$Feature: java.lang.String mName>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z0 == 0 goto label2;

        $i1 = r2.<android.media.MediaCodecInfo$Feature: int mValue>;

        return $i1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return 0;
    }

    private void parseFromInfo(android.media.MediaFormat)
    {
        android.media.MediaCodecInfo$EncoderCapabilities r0;
        java.util.Map r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        java.lang.String r2, $r4, $r7, $r10, $r11, $r12, $r15;
        boolean $z0, $z1, $z2;
        java.lang.Object $r3, $r6, $r9;
        java.lang.Integer $r5, $r8;
        android.util.Range $r13, $r14, $r16, $r17;
        java.lang.Throwable $r18, $r19;
        android.media.MediaFormat r20;
        java.lang.String[] r21;

        r0 := @this: android.media.MediaCodecInfo$EncoderCapabilities;

        r20 := @parameter0: android.media.MediaFormat;

        r1 = virtualinvoke r20.<android.media.MediaFormat: java.util.Map getMap()>();

        $z0 = virtualinvoke r20.<android.media.MediaFormat: boolean containsKey(java.lang.String)>("complexity-range");

        if $z0 == 0 goto label01;

        $r15 = virtualinvoke r20.<android.media.MediaFormat: java.lang.String getString(java.lang.String)>("complexity-range");

        $r16 = r0.<android.media.MediaCodecInfo$EncoderCapabilities: android.util.Range mComplexityRange>;

        $r17 = staticinvoke <android.media.Utils: android.util.Range parseIntRange(java.lang.Object,android.util.Range)>($r15, $r16);

        r0.<android.media.MediaCodecInfo$EncoderCapabilities: android.util.Range mComplexityRange> = $r17;

     label01:
        $z1 = virtualinvoke r20.<android.media.MediaFormat: boolean containsKey(java.lang.String)>("quality-range");

        if $z1 == 0 goto label02;

        $r12 = virtualinvoke r20.<android.media.MediaFormat: java.lang.String getString(java.lang.String)>("quality-range");

        $r13 = r0.<android.media.MediaCodecInfo$EncoderCapabilities: android.util.Range mQualityRange>;

        $r14 = staticinvoke <android.media.Utils: android.util.Range parseIntRange(java.lang.Object,android.util.Range)>($r12, $r13);

        r0.<android.media.MediaCodecInfo$EncoderCapabilities: android.util.Range mQualityRange> = $r14;

     label02:
        $z2 = virtualinvoke r20.<android.media.MediaFormat: boolean containsKey(java.lang.String)>("feature-bitrate-modes");

        if $z2 == 0 goto label04;

        $r11 = virtualinvoke r20.<android.media.MediaFormat: java.lang.String getString(java.lang.String)>("feature-bitrate-modes");

        r21 = virtualinvoke $r11.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        i0 = lengthof r21;

        i7 = 0;

     label03:
        if i7 >= i0 goto label04;

        r2 = r21[i7];

        $i3 = r0.<android.media.MediaCodecInfo$EncoderCapabilities: int mBitControl>;

        $i4 = staticinvoke <android.media.MediaCodecInfo$EncoderCapabilities: int parseBitrateMode(java.lang.String)>(r2);

        $i5 = 1 << $i4;

        $i6 = $i3 | $i5;

        r0.<android.media.MediaCodecInfo$EncoderCapabilities: int mBitControl> = $i6;

        i7 = i7 + 1;

        goto label03;

     label04:
        $r3 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("complexity-default");

        $r4 = (java.lang.String) $r3;

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        r0.<android.media.MediaCodecInfo$EncoderCapabilities: java.lang.Integer mDefaultComplexity> = $r5;

     label05:
        goto label07;

     label06:
        $r18 := @caughtexception;

     label07:
        $r6 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("quality-default");

        $r7 = (java.lang.String) $r6;

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r7);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        r0.<android.media.MediaCodecInfo$EncoderCapabilities: java.lang.Integer mDefaultQuality> = $r8;

     label08:
        goto label10;

     label09:
        $r19 := @caughtexception;

     label10:
        $r9 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("quality-scale");

        $r10 = (java.lang.String) $r9;

        r0.<android.media.MediaCodecInfo$EncoderCapabilities: java.lang.String mQualityScale> = $r10;

        return;

        catch java.lang.NumberFormatException from label04 to label05 with label06;
        catch java.lang.NumberFormatException from label07 to label08 with label09;
    }

    private boolean supports(java.lang.Integer, java.lang.Integer, java.lang.Integer)
    {
        android.media.MediaCodecInfo$EncoderCapabilities r0;
        java.lang.Integer r1, r6, r7, r9;
        int i0, $i1, $i2, i3;
        android.media.MediaCodecInfo$CodecCapabilities $r2;
        android.media.MediaCodecInfo$CodecProfileLevel $r3;
        android.util.Range $r4, $r5;
        boolean z1, z2, z3, z4;
        android.media.MediaCodecInfo$CodecProfileLevel[] r8;

        r0 := @this: android.media.MediaCodecInfo$EncoderCapabilities;

        r6 := @parameter0: java.lang.Integer;

        r7 := @parameter1: java.lang.Integer;

        r1 := @parameter2: java.lang.Integer;

        z1 = 1;

        if r6 == null goto label1;

        $r5 = r0.<android.media.MediaCodecInfo$EncoderCapabilities: android.util.Range mComplexityRange>;

        z1 = virtualinvoke $r5.<android.util.Range: boolean contains(java.lang.Comparable)>(r6);

     label1:
        z2 = z1;

        if z1 == 0 goto label2;

        z2 = z1;

        if r7 == null goto label2;

        $r4 = r0.<android.media.MediaCodecInfo$EncoderCapabilities: android.util.Range mQualityRange>;

        z2 = virtualinvoke $r4.<android.util.Range: boolean contains(java.lang.Comparable)>(r7);

     label2:
        z3 = z2;

        if z2 == 0 goto label7;

        z3 = z2;

        if r1 == null goto label7;

        $r2 = r0.<android.media.MediaCodecInfo$EncoderCapabilities: android.media.MediaCodecInfo$CodecCapabilities mParent>;

        r8 = $r2.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$CodecProfileLevel[] profileLevels>;

        i0 = lengthof r8;

        z4 = 0;

        i3 = 0;

     label3:
        r9 = r1;

        if i3 >= i0 goto label5;

        $r3 = r8[i3];

        $i1 = $r3.<android.media.MediaCodecInfo$CodecProfileLevel: int profile>;

        $i2 = virtualinvoke r1.<java.lang.Integer: int intValue()>();

        if $i1 != $i2 goto label4;

        r9 = null;

        goto label5;

     label4:
        i3 = i3 + 1;

        goto label3;

     label5:
        if r9 != null goto label6;

        z4 = 1;

     label6:
        z3 = z4;

     label7:
        return z3;
    }

    public android.util.Range getComplexityRange()
    {
        android.media.MediaCodecInfo$EncoderCapabilities r0;
        android.util.Range $r1;

        r0 := @this: android.media.MediaCodecInfo$EncoderCapabilities;

        $r1 = r0.<android.media.MediaCodecInfo$EncoderCapabilities: android.util.Range mComplexityRange>;

        return $r1;
    }

    public void getDefaultFormat(android.media.MediaFormat)
    {
        android.media.MediaCodecInfo$EncoderCapabilities r0;
        android.media.MediaFormat r1;
        android.media.MediaCodecInfo$Feature[] r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        android.util.Range $r3, $r5, $r9, $r12;
        java.lang.Comparable $r4, $r7, $r10, $r13;
        java.lang.Integer $r6, r8, $r11, r14;
        boolean $z0, $z1;
        android.media.MediaCodecInfo$Feature r15;

        r0 := @this: android.media.MediaCodecInfo$EncoderCapabilities;

        r1 := @parameter0: android.media.MediaFormat;

        $r3 = r0.<android.media.MediaCodecInfo$EncoderCapabilities: android.util.Range mQualityRange>;

        $r4 = virtualinvoke $r3.<android.util.Range: java.lang.Comparable getUpper()>();

        $r6 = (java.lang.Integer) $r4;

        $r5 = r0.<android.media.MediaCodecInfo$EncoderCapabilities: android.util.Range mQualityRange>;

        $r7 = virtualinvoke $r5.<android.util.Range: java.lang.Comparable getLower()>();

        $z0 = virtualinvoke $r6.<java.lang.Integer: boolean equals(java.lang.Object)>($r7);

        if $z0 != 0 goto label1;

        r8 = r0.<android.media.MediaCodecInfo$EncoderCapabilities: java.lang.Integer mDefaultQuality>;

        if r8 == null goto label1;

        $i7 = virtualinvoke r8.<java.lang.Integer: int intValue()>();

        virtualinvoke r1.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("quality", $i7);

     label1:
        $r9 = r0.<android.media.MediaCodecInfo$EncoderCapabilities: android.util.Range mComplexityRange>;

        $r10 = virtualinvoke $r9.<android.util.Range: java.lang.Comparable getUpper()>();

        $r11 = (java.lang.Integer) $r10;

        $r12 = r0.<android.media.MediaCodecInfo$EncoderCapabilities: android.util.Range mComplexityRange>;

        $r13 = virtualinvoke $r12.<android.util.Range: java.lang.Comparable getLower()>();

        $z1 = virtualinvoke $r11.<java.lang.Integer: boolean equals(java.lang.Object)>($r13);

        if $z1 != 0 goto label2;

        r14 = r0.<android.media.MediaCodecInfo$EncoderCapabilities: java.lang.Integer mDefaultComplexity>;

        if r14 == null goto label2;

        $i6 = virtualinvoke r14.<java.lang.Integer: int intValue()>();

        virtualinvoke r1.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("complexity", $i6);

     label2:
        r2 = <android.media.MediaCodecInfo$EncoderCapabilities: android.media.MediaCodecInfo$Feature[] bitrates>;

        i0 = lengthof r2;

        i8 = 0;

     label3:
        if i8 >= i0 goto label5;

        r15 = r2[i8];

        $i3 = r0.<android.media.MediaCodecInfo$EncoderCapabilities: int mBitControl>;

        $i1 = r15.<android.media.MediaCodecInfo$Feature: int mValue>;

        $i2 = 1 << $i1;

        $i4 = $i3 & $i2;

        if $i4 == 0 goto label4;

        $i5 = r15.<android.media.MediaCodecInfo$Feature: int mValue>;

        virtualinvoke r1.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("bitrate-mode", $i5);

        goto label5;

     label4:
        i8 = i8 + 1;

        goto label3;

     label5:
        return;
    }

    public android.util.Range getQualityRange()
    {
        android.media.MediaCodecInfo$EncoderCapabilities r0;
        android.util.Range $r1;

        r0 := @this: android.media.MediaCodecInfo$EncoderCapabilities;

        $r1 = r0.<android.media.MediaCodecInfo$EncoderCapabilities: android.util.Range mQualityRange>;

        return $r1;
    }

    public boolean isBitrateModeSupported(int)
    {
        android.media.MediaCodecInfo$EncoderCapabilities r0;
        int i0, i1, $i2, $i3, $i4, $i5, i6;
        android.media.MediaCodecInfo$Feature[] r1;
        android.media.MediaCodecInfo$Feature $r2;
        boolean z0;

        r0 := @this: android.media.MediaCodecInfo$EncoderCapabilities;

        i0 := @parameter0: int;

        r1 = <android.media.MediaCodecInfo$EncoderCapabilities: android.media.MediaCodecInfo$Feature[] bitrates>;

        i1 = lengthof r1;

        z0 = 0;

        i6 = 0;

     label1:
        if i6 >= i1 goto label4;

        $r2 = r1[i6];

        $i2 = $r2.<android.media.MediaCodecInfo$Feature: int mValue>;

        if i0 != $i2 goto label3;

        $i4 = r0.<android.media.MediaCodecInfo$EncoderCapabilities: int mBitControl>;

        $i3 = 1 << i0;

        $i5 = $i4 & $i3;

        if $i5 == 0 goto label2;

        z0 = 1;

     label2:
        return z0;

     label3:
        i6 = i6 + 1;

        goto label1;

     label4:
        return 0;
    }

    public boolean supportsFormat(android.media.MediaFormat)
    {
        android.media.MediaCodecInfo$EncoderCapabilities r0;
        java.util.Map r1;
        android.media.MediaCodecInfo$CodecCapabilities $r2;
        java.lang.Object $r3, $r4, $r6, $r8, $r16, $r21;
        java.lang.String $r5, r11, $r19;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.IllegalArgumentException $r7, $r9;
        int $i0;
        android.media.MediaFormat r10;
        java.lang.Integer r12, r13, r14, r15, r17, r18, r20, $r22;

        r0 := @this: android.media.MediaCodecInfo$EncoderCapabilities;

        r10 := @parameter0: android.media.MediaFormat;

        r1 = virtualinvoke r10.<android.media.MediaFormat: java.util.Map getMap()>();

        $r2 = r0.<android.media.MediaCodecInfo$EncoderCapabilities: android.media.MediaCodecInfo$CodecCapabilities mParent>;

        r11 = virtualinvoke $r2.<android.media.MediaCodecInfo$CodecCapabilities: java.lang.String getMimeType()>();

        $r3 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("bitrate-mode");

        r12 = (java.lang.Integer) $r3;

        if r12 == null goto label1;

        $i0 = virtualinvoke r12.<java.lang.Integer: int intValue()>();

        $z3 = virtualinvoke r0.<android.media.MediaCodecInfo$EncoderCapabilities: boolean isBitrateModeSupported(int)>($i0);

        if $z3 != 0 goto label1;

        return 0;

     label1:
        $r4 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("complexity");

        r13 = (java.lang.Integer) $r4;

        r14 = r13;

        $r5 = "audio/flac";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r11);

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("flac-compression-level");

        r15 = (java.lang.Integer) $r8;

        if r13 != null goto label2;

        r14 = r15;

        goto label4;

     label2:
        r14 = r13;

        if r15 == null goto label4;

        $z2 = virtualinvoke r13.<java.lang.Integer: boolean equals(java.lang.Object)>(r15);

        if $z2 == 0 goto label3;

        r14 = r13;

        goto label4;

     label3:
        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("conflicting values for complexity and flac-compression-level");

        throw $r9;

     label4:
        $r16 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("profile");

        r17 = (java.lang.Integer) $r16;

        r18 = r17;

        $r19 = "audio/mp4a-latm";

        $z4 = virtualinvoke $r19.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r11);

        if $z4 == 0 goto label7;

        $r6 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("aac-profile");

        r20 = (java.lang.Integer) $r6;

        if r17 != null goto label5;

        r18 = r20;

        goto label7;

     label5:
        r18 = r17;

        if r20 == null goto label7;

        $z1 = virtualinvoke r20.<java.lang.Integer: boolean equals(java.lang.Object)>(r17);

        if $z1 == 0 goto label6;

        r18 = r17;

        goto label7;

     label6:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("conflicting values for profile and aac-profile");

        throw $r7;

     label7:
        $r21 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("quality");

        $r22 = (java.lang.Integer) $r21;

        $z5 = specialinvoke r0.<android.media.MediaCodecInfo$EncoderCapabilities: boolean supports(java.lang.Integer,java.lang.Integer,java.lang.Integer)>(r14, $r22, r18);

        return $z5;
    }
}
