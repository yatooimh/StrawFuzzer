public final class android.media.MediaCodecInfo extends java.lang.Object
{
    private static final android.util.Range BITRATE_RANGE;
    private static final int DEFAULT_MAX_SUPPORTED_INSTANCES;
    private static final int ERROR_NONE_SUPPORTED;
    private static final int ERROR_UNRECOGNIZED;
    private static final int ERROR_UNSUPPORTED;
    private static final int FLAG_IS_ENCODER;
    private static final int FLAG_IS_HARDWARE_ACCELERATED;
    private static final int FLAG_IS_SOFTWARE_ONLY;
    private static final int FLAG_IS_VENDOR;
    private static final android.util.Range FRAME_RATE_RANGE;
    private static final int MAX_SUPPORTED_INSTANCES_LIMIT;
    private static final android.util.Range POSITIVE_INTEGERS;
    private static final android.util.Range POSITIVE_LONGS;
    private static final android.util.Range POSITIVE_RATIONALS;
    private static final android.util.Range SIZE_RANGE;
    private static final java.lang.String TAG;
    private java.lang.String mCanonicalName;
    private java.util.Map mCaps;
    private int mFlags;
    private java.lang.String mName;

    static void <clinit>()
    {
        java.lang.Integer $r0, $r8, $r10, $r12, r14, r15;
        android.util.Range $r1, $r4, $r7, $r9, $r11, $r13;
        java.lang.Long $r2, $r3;
        android.util.Rational $r5, $r6;

        <android.media.MediaCodecInfo: java.lang.String TAG> = "MediaCodecInfo";

        <android.media.MediaCodecInfo: int MAX_SUPPORTED_INSTANCES_LIMIT> = 256;

        <android.media.MediaCodecInfo: int FLAG_IS_VENDOR> = 2;

        <android.media.MediaCodecInfo: int FLAG_IS_SOFTWARE_ONLY> = 4;

        <android.media.MediaCodecInfo: int FLAG_IS_HARDWARE_ACCELERATED> = 8;

        <android.media.MediaCodecInfo: int FLAG_IS_ENCODER> = 1;

        <android.media.MediaCodecInfo: int ERROR_UNSUPPORTED> = 2;

        <android.media.MediaCodecInfo: int ERROR_UNRECOGNIZED> = 1;

        <android.media.MediaCodecInfo: int ERROR_NONE_SUPPORTED> = 4;

        <android.media.MediaCodecInfo: int DEFAULT_MAX_SUPPORTED_INSTANCES> = 32;

        r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2147483647);

        $r1 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>(r14, $r0);

        <android.media.MediaCodecInfo: android.util.Range POSITIVE_INTEGERS> = $r1;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(9223372036854775807L);

        $r4 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r2, $r3);

        <android.media.MediaCodecInfo: android.util.Range POSITIVE_LONGS> = $r4;

        $r5 = new android.util.Rational;

        specialinvoke $r5.<android.util.Rational: void <init>(int,int)>(1, 2147483647);

        $r6 = new android.util.Rational;

        specialinvoke $r6.<android.util.Rational: void <init>(int,int)>(2147483647, 1);

        $r7 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r5, $r6);

        <android.media.MediaCodecInfo: android.util.Range POSITIVE_RATIONALS> = $r7;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(32768);

        $r9 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>(r14, $r8);

        <android.media.MediaCodecInfo: android.util.Range SIZE_RANGE> = $r9;

        r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(960);

        $r11 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>(r15, $r10);

        <android.media.MediaCodecInfo: android.util.Range FRAME_RATE_RANGE> = $r11;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(500000000);

        $r13 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>(r15, $r12);

        <android.media.MediaCodecInfo: android.util.Range BITRATE_RANGE> = $r13;

        return;
    }

    void <init>(java.lang.String, java.lang.String, int, android.media.MediaCodecInfo$CodecCapabilities[])
    {
        android.media.MediaCodecInfo r0;
        java.lang.String r1, $r5, r7;
        android.media.MediaCodecInfo$CodecCapabilities[] r2;
        int i0, i1, i2;
        java.util.HashMap $r3;
        java.util.Map $r4;
        android.media.MediaCodecInfo$CodecCapabilities r8;

        r0 := @this: android.media.MediaCodecInfo;

        r7 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        r2 := @parameter3: android.media.MediaCodecInfo$CodecCapabilities[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.media.MediaCodecInfo: java.lang.String mName> = r7;

        r0.<android.media.MediaCodecInfo: java.lang.String mCanonicalName> = r1;

        r0.<android.media.MediaCodecInfo: int mFlags> = i1;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<android.media.MediaCodecInfo: java.util.Map mCaps> = $r3;

        i0 = lengthof r2;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        r8 = r2[i2];

        $r4 = r0.<android.media.MediaCodecInfo: java.util.Map mCaps>;

        $r5 = virtualinvoke r8.<android.media.MediaCodecInfo$CodecCapabilities: java.lang.String getMimeType()>();

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r8);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    static android.util.Range access$000()
    {
        android.util.Range $r0;

        $r0 = <android.media.MediaCodecInfo: android.util.Range POSITIVE_INTEGERS>;

        return $r0;
    }

    static int access$200(int, java.lang.String)
    {
        int i0, $i1;
        java.lang.String r0;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        $i1 = staticinvoke <android.media.MediaCodecInfo: int checkPowerOfTwo(int,java.lang.String)>(i0, r0);

        return $i1;
    }

    static android.util.Range access$300()
    {
        android.util.Range $r0;

        $r0 = <android.media.MediaCodecInfo: android.util.Range BITRATE_RANGE>;

        return $r0;
    }

    static android.util.Range access$400()
    {
        android.util.Range $r0;

        $r0 = <android.media.MediaCodecInfo: android.util.Range SIZE_RANGE>;

        return $r0;
    }

    static android.util.Range access$500()
    {
        android.util.Range $r0;

        $r0 = <android.media.MediaCodecInfo: android.util.Range FRAME_RATE_RANGE>;

        return $r0;
    }

    static android.util.Range access$600()
    {
        android.util.Range $r0;

        $r0 = <android.media.MediaCodecInfo: android.util.Range POSITIVE_LONGS>;

        return $r0;
    }

    static android.util.Range access$700()
    {
        android.util.Range $r0;

        $r0 = <android.media.MediaCodecInfo: android.util.Range POSITIVE_RATIONALS>;

        return $r0;
    }

    private static int checkPowerOfTwo(int, java.lang.String)
    {
        int i0, $i1, $i2;
        java.lang.String r0;
        java.lang.IllegalArgumentException $r1;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        $i1 = i0 - 1;

        $i2 = $i1 & i0;

        if $i2 != 0 goto label1;

        return i0;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r0);

        throw $r1;
    }

    public final java.lang.String getCanonicalName()
    {
        android.media.MediaCodecInfo r0;
        java.lang.String $r1;

        r0 := @this: android.media.MediaCodecInfo;

        $r1 = r0.<android.media.MediaCodecInfo: java.lang.String mCanonicalName>;

        return $r1;
    }

    public final android.media.MediaCodecInfo$CodecCapabilities getCapabilitiesForType(java.lang.String)
    {
        android.media.MediaCodecInfo r0;
        java.util.Map $r1;
        java.lang.Object $r2;
        java.lang.IllegalArgumentException $r3;
        android.media.MediaCodecInfo$CodecCapabilities $r4, r6;
        java.lang.String r5;

        r0 := @this: android.media.MediaCodecInfo;

        r5 := @parameter0: java.lang.String;

        $r1 = r0.<android.media.MediaCodecInfo: java.util.Map mCaps>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        r6 = (android.media.MediaCodecInfo$CodecCapabilities) $r2;

        if r6 == null goto label1;

        $r4 = virtualinvoke r6.<android.media.MediaCodecInfo$CodecCapabilities: android.media.MediaCodecInfo$CodecCapabilities dup()>();

        return $r4;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("codec does not support type");

        throw $r3;
    }

    public final java.lang.String getName()
    {
        android.media.MediaCodecInfo r0;
        java.lang.String $r1;

        r0 := @this: android.media.MediaCodecInfo;

        $r1 = r0.<android.media.MediaCodecInfo: java.lang.String mName>;

        return $r1;
    }

    public final java.lang.String[] getSupportedTypes()
    {
        android.media.MediaCodecInfo r0;
        java.util.Map $r1;
        int $i0;
        java.lang.String[] $r2, r5;
        java.lang.Object[] $r3;
        java.util.Set r4;

        r0 := @this: android.media.MediaCodecInfo;

        $r1 = r0.<android.media.MediaCodecInfo: java.util.Map mCaps>;

        r4 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $i0 = interfaceinvoke r4.<java.util.Set: int size()>();

        $r2 = newarray (java.lang.String)[$i0];

        $r3 = interfaceinvoke r4.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        r5 = (java.lang.String[]) $r3;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[])>(r5);

        return r5;
    }

    public final boolean isAlias()
    {
        android.media.MediaCodecInfo r0;
        java.lang.String $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: android.media.MediaCodecInfo;

        $r2 = r0.<android.media.MediaCodecInfo: java.lang.String mName>;

        $r1 = r0.<android.media.MediaCodecInfo: java.lang.String mCanonicalName>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        $z1 = $z0 ^ 1;

        return $z1;
    }

    public final boolean isEncoder()
    {
        android.media.MediaCodecInfo r0;
        int i0, $i1;
        boolean z0;

        r0 := @this: android.media.MediaCodecInfo;

        i0 = r0.<android.media.MediaCodecInfo: int mFlags>;

        z0 = 1;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public final boolean isHardwareAccelerated()
    {
        android.media.MediaCodecInfo r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.media.MediaCodecInfo;

        $i0 = r0.<android.media.MediaCodecInfo: int mFlags>;

        $i1 = $i0 & 8;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public final boolean isSoftwareOnly()
    {
        android.media.MediaCodecInfo r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.media.MediaCodecInfo;

        $i0 = r0.<android.media.MediaCodecInfo: int mFlags>;

        $i1 = $i0 & 4;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public final boolean isVendor()
    {
        android.media.MediaCodecInfo r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.media.MediaCodecInfo;

        $i0 = r0.<android.media.MediaCodecInfo: int mFlags>;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public android.media.MediaCodecInfo makeRegular()
    {
        android.media.MediaCodecInfo r0, $r8;
        java.util.Iterator r2;
        android.media.MediaCodecInfo$CodecCapabilities r3;
        java.util.ArrayList $r4;
        java.util.Map $r5, $r7;
        java.util.Collection $r6;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r9, $r10;
        android.media.MediaCodecInfo$CodecCapabilities[] $r11, $r13;
        java.lang.Object[] $r12;
        java.lang.Object $r14;

        r0 := @this: android.media.MediaCodecInfo;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = r0.<android.media.MediaCodecInfo: java.util.Map mCaps>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Collection values()>();

        r2 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r14 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.media.MediaCodecInfo$CodecCapabilities) $r14;

        $z1 = virtualinvoke r3.<android.media.MediaCodecInfo$CodecCapabilities: boolean isRegular()>();

        if $z1 == 0 goto label2;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

     label2:
        goto label1;

     label3:
        $i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        if $i0 != 0 goto label4;

        return null;

     label4:
        $i1 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        $r7 = r0.<android.media.MediaCodecInfo: java.util.Map mCaps>;

        $i2 = interfaceinvoke $r7.<java.util.Map: int size()>();

        if $i1 != $i2 goto label5;

        return r0;

     label5:
        $r8 = new android.media.MediaCodecInfo;

        $r9 = r0.<android.media.MediaCodecInfo: java.lang.String mName>;

        $r10 = r0.<android.media.MediaCodecInfo: java.lang.String mCanonicalName>;

        $i3 = r0.<android.media.MediaCodecInfo: int mFlags>;

        $i4 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        $r11 = newarray (android.media.MediaCodecInfo$CodecCapabilities)[$i4];

        $r12 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r11);

        $r13 = (android.media.MediaCodecInfo$CodecCapabilities[]) $r12;

        specialinvoke $r8.<android.media.MediaCodecInfo: void <init>(java.lang.String,java.lang.String,int,android.media.MediaCodecInfo$CodecCapabilities[])>($r9, $r10, $i3, $r13);

        return $r8;
    }
}
