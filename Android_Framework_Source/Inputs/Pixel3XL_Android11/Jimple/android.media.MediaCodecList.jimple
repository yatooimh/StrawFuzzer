public final class android.media.MediaCodecList extends java.lang.Object
{
    public static final int ALL_CODECS;
    public static final int REGULAR_CODECS;
    private static final java.lang.String TAG;
    private static android.media.MediaCodecInfo[] sAllCodecInfos;
    private static java.util.Map sGlobalSettings;
    private static java.lang.Object sInitLock;
    private static android.media.MediaCodecInfo[] sRegularCodecInfos;
    private android.media.MediaCodecInfo[] mCodecInfos;

    static void <clinit>()
    {
        java.lang.Object $r0;

        <android.media.MediaCodecList: java.lang.String TAG> = "MediaCodecList";

        <android.media.MediaCodecList: int REGULAR_CODECS> = 0;

        <android.media.MediaCodecList: int ALL_CODECS> = 1;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <android.media.MediaCodecList: java.lang.Object sInitLock> = $r0;

        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("media_jni");

        staticinvoke <android.media.MediaCodecList: void native_init()>();

        return;
    }

    private void <init>()
    {
        android.media.MediaCodecList r0;

        r0 := @this: android.media.MediaCodecList;

        specialinvoke r0.<android.media.MediaCodecList: void <init>(int)>(0);

        return;
    }

    public void <init>(int)
    {
        android.media.MediaCodecList r0;
        int i0;
        android.media.MediaCodecInfo[] $r1, $r2;

        r0 := @this: android.media.MediaCodecList;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <android.media.MediaCodecList: void initCodecList()>();

        if i0 != 0 goto label1;

        $r2 = <android.media.MediaCodecList: android.media.MediaCodecInfo[] sRegularCodecInfos>;

        r0.<android.media.MediaCodecList: android.media.MediaCodecInfo[] mCodecInfos> = $r2;

        goto label2;

     label1:
        $r1 = <android.media.MediaCodecList: android.media.MediaCodecInfo[] sAllCodecInfos>;

        r0.<android.media.MediaCodecList: android.media.MediaCodecInfo[] mCodecInfos> = $r1;

     label2:
        return;
    }

    static final native int findCodecByName(java.lang.String);

    private java.lang.String findCodecForFormat(boolean, android.media.MediaFormat)
    {
        android.media.MediaCodecList r0;
        boolean z0, $z1, $z2;
        android.media.MediaFormat r1;
        java.lang.String r2, r7;
        android.media.MediaCodecInfo[] r3;
        int i0, i1;
        android.media.MediaCodecInfo r4;
        java.lang.Throwable $r5;
        android.media.MediaCodecInfo$CodecCapabilities r6;

        r0 := @this: android.media.MediaCodecList;

        z0 := @parameter0: boolean;

        r1 := @parameter1: android.media.MediaFormat;

        r2 = virtualinvoke r1.<android.media.MediaFormat: java.lang.String getString(java.lang.String)>("mime");

        r3 = r0.<android.media.MediaCodecList: android.media.MediaCodecInfo[] mCodecInfos>;

        i0 = lengthof r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label9;

        r4 = r3[i1];

        $z1 = virtualinvoke r4.<android.media.MediaCodecInfo: boolean isEncoder()>();

        if $z1 == z0 goto label2;

        goto label8;

     label2:
        r6 = virtualinvoke r4.<android.media.MediaCodecInfo: android.media.MediaCodecInfo$CodecCapabilities getCapabilitiesForType(java.lang.String)>(r2);

     label3:
        if r6 == null goto label6;

     label4:
        $z2 = virtualinvoke r6.<android.media.MediaCodecInfo$CodecCapabilities: boolean isFormatSupported(android.media.MediaFormat)>(r1);

        if $z2 == 0 goto label6;

        r7 = virtualinvoke r4.<android.media.MediaCodecInfo: java.lang.String getName()>();

     label5:
        return r7;

     label6:
        goto label8;

     label7:
        $r5 := @caughtexception;

     label8:
        i1 = i1 + 1;

        goto label1;

     label9:
        return null;

        catch java.lang.IllegalArgumentException from label2 to label3 with label7;
        catch java.lang.IllegalArgumentException from label4 to label5 with label7;
    }

    static final native int getAttributes(int);

    static final native java.lang.String getCanonicalName(int);

    static final native android.media.MediaCodecInfo$CodecCapabilities getCodecCapabilities(int, java.lang.String);

    public static final int getCodecCount()
    {
        android.media.MediaCodecInfo[] $r0;
        int $i0;

        staticinvoke <android.media.MediaCodecList: void initCodecList()>();

        $r0 = <android.media.MediaCodecList: android.media.MediaCodecInfo[] sRegularCodecInfos>;

        $i0 = lengthof $r0;

        return $i0;
    }

    public static final android.media.MediaCodecInfo getCodecInfoAt(int)
    {
        int i0, $i1;
        android.media.MediaCodecInfo[] r0;
        java.lang.IllegalArgumentException $r1;
        android.media.MediaCodecInfo $r2;

        i0 := @parameter0: int;

        staticinvoke <android.media.MediaCodecList: void initCodecList()>();

        if i0 < 0 goto label1;

        r0 = <android.media.MediaCodecList: android.media.MediaCodecInfo[] sRegularCodecInfos>;

        $i1 = lengthof r0;

        if i0 > $i1 goto label1;

        $r2 = r0[i0];

        return $r2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;
    }

    static final native java.lang.String getCodecName(int);

    static final java.util.Map getGlobalSettings()
    {
        java.lang.Object r0;
        java.util.Map $r2, $r3, $r4;
        java.lang.Throwable $r5;

        r0 = <android.media.MediaCodecList: java.lang.Object sInitLock>;

        entermonitor r0;

     label1:
        $r2 = <android.media.MediaCodecList: java.util.Map sGlobalSettings>;

        if $r2 != null goto label2;

        $r4 = staticinvoke <android.media.MediaCodecList: java.util.Map native_getGlobalSettings()>();

        <android.media.MediaCodecList: java.util.Map sGlobalSettings> = $r4;

     label2:
        exitmonitor r0;

     label3:
        $r3 = <android.media.MediaCodecList: java.util.Map sGlobalSettings>;

        return $r3;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r0;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public static android.media.MediaCodecInfo getInfoFor(java.lang.String)
    {
        java.lang.String r0;
        android.media.MediaCodecInfo[] $r1;
        int $i0;
        android.media.MediaCodecInfo $r2;

        r0 := @parameter0: java.lang.String;

        staticinvoke <android.media.MediaCodecList: void initCodecList()>();

        $r1 = <android.media.MediaCodecList: android.media.MediaCodecInfo[] sAllCodecInfos>;

        $i0 = staticinvoke <android.media.MediaCodecList: int findCodecByName(java.lang.String)>(r0);

        $r2 = $r1[$i0];

        return $r2;
    }

    private static android.media.MediaCodecInfo getNewCodecInfoAt(int)
    {
        int i0, i1, $i2, $i3, i4, i5;
        java.lang.String[] r0;
        android.media.MediaCodecInfo$CodecCapabilities[] r1;
        android.media.MediaCodecInfo $r2;
        java.lang.String $r3, $r4, $r5;
        android.media.MediaCodecInfo$CodecCapabilities $r6;

        i0 := @parameter0: int;

        r0 = staticinvoke <android.media.MediaCodecList: java.lang.String[] getSupportedTypes(int)>(i0);

        $i2 = lengthof r0;

        r1 = newarray (android.media.MediaCodecInfo$CodecCapabilities)[$i2];

        i4 = 0;

        i1 = lengthof r0;

        i5 = 0;

     label1:
        if i5 >= i1 goto label2;

        $r5 = r0[i5];

        $r6 = staticinvoke <android.media.MediaCodecList: android.media.MediaCodecInfo$CodecCapabilities getCodecCapabilities(int,java.lang.String)>(i0, $r5);

        r1[i4] = $r6;

        i5 = i5 + 1;

        i4 = i4 + 1;

        goto label1;

     label2:
        $r2 = new android.media.MediaCodecInfo;

        $r3 = staticinvoke <android.media.MediaCodecList: java.lang.String getCodecName(int)>(i0);

        $r4 = staticinvoke <android.media.MediaCodecList: java.lang.String getCanonicalName(int)>(i0);

        $i3 = staticinvoke <android.media.MediaCodecList: int getAttributes(int)>(i0);

        specialinvoke $r2.<android.media.MediaCodecInfo: void <init>(java.lang.String,java.lang.String,int,android.media.MediaCodecInfo$CodecCapabilities[])>($r3, $r4, $i3, r1);

        return $r2;
    }

    static final native java.lang.String[] getSupportedTypes(int);

    private static final void initCodecList()
    {
        java.lang.Object r0;
        int i0, $i1, $i2, i4;
        java.util.ArrayList r1, r11;
        android.media.MediaCodecInfo[] $r2, $r3, $r5, $r6, $r8;
        java.lang.Object[] $r4, $r7;
        java.lang.Throwable $r9;
        java.lang.Exception $r10;
        android.media.MediaCodecInfo r12, r13;

        r0 = <android.media.MediaCodecList: java.lang.Object sInitLock>;

        entermonitor r0;

     label01:
        $r2 = <android.media.MediaCodecList: android.media.MediaCodecInfo[] sRegularCodecInfos>;

        if $r2 != null goto label13;

        i0 = staticinvoke <android.media.MediaCodecList: int native_getCodecCount()>();

        r1 = new java.util.ArrayList;

        specialinvoke r1.<java.util.ArrayList: void <init>()>();

        r11 = new java.util.ArrayList;

        specialinvoke r11.<java.util.ArrayList: void <init>()>();

     label02:
        i4 = 0;

     label03:
        if i4 >= i0 goto label11;

     label04:
        r12 = staticinvoke <android.media.MediaCodecList: android.media.MediaCodecInfo getNewCodecInfoAt(int)>(i4);

        virtualinvoke r11.<java.util.ArrayList: boolean add(java.lang.Object)>(r12);

        r13 = virtualinvoke r12.<android.media.MediaCodecInfo: android.media.MediaCodecInfo makeRegular()>();

     label05:
        if r13 == null goto label07;

     label06:
        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r13);

     label07:
        goto label10;

     label08:
        $r10 := @caughtexception;

     label09:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaCodecList", "Could not get codec capabilities", $r10);

     label10:
        i4 = i4 + 1;

        goto label03;

     label11:
        $i1 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        $r3 = newarray (android.media.MediaCodecInfo)[$i1];

        $r4 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (android.media.MediaCodecInfo[]) $r4;

        <android.media.MediaCodecList: android.media.MediaCodecInfo[] sRegularCodecInfos> = $r5;

     label12:
        $i2 = virtualinvoke r11.<java.util.ArrayList: int size()>();

        $r6 = newarray (android.media.MediaCodecInfo)[$i2];

        $r7 = virtualinvoke r11.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r8 = (android.media.MediaCodecInfo[]) $r7;

        <android.media.MediaCodecList: android.media.MediaCodecInfo[] sAllCodecInfos> = $r8;

     label13:
        exitmonitor r0;

     label14:
        return;

     label15:
        $r9 := @caughtexception;

     label16:
        exitmonitor r0;

     label17:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Exception from label04 to label05 with label08;
        catch java.lang.Throwable from label04 to label05 with label15;
        catch java.lang.Exception from label06 to label07 with label08;
        catch java.lang.Throwable from label06 to label07 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label12 to label13 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    private static final native int native_getCodecCount();

    static final native java.util.Map native_getGlobalSettings();

    private static final native void native_init();

    public final java.lang.String findDecoderForFormat(android.media.MediaFormat)
    {
        android.media.MediaCodecList r0;
        android.media.MediaFormat r1;
        java.lang.String $r2;

        r0 := @this: android.media.MediaCodecList;

        r1 := @parameter0: android.media.MediaFormat;

        $r2 = specialinvoke r0.<android.media.MediaCodecList: java.lang.String findCodecForFormat(boolean,android.media.MediaFormat)>(0, r1);

        return $r2;
    }

    public final java.lang.String findEncoderForFormat(android.media.MediaFormat)
    {
        android.media.MediaCodecList r0;
        android.media.MediaFormat r1;
        java.lang.String $r2;

        r0 := @this: android.media.MediaCodecList;

        r1 := @parameter0: android.media.MediaFormat;

        $r2 = specialinvoke r0.<android.media.MediaCodecList: java.lang.String findCodecForFormat(boolean,android.media.MediaFormat)>(1, r1);

        return $r2;
    }

    public final android.media.MediaCodecInfo[] getCodecInfos()
    {
        android.media.MediaCodecList r0;
        android.media.MediaCodecInfo[] r1, $r3;
        int $i0;
        java.lang.Object[] $r2;

        r0 := @this: android.media.MediaCodecList;

        r1 = r0.<android.media.MediaCodecList: android.media.MediaCodecInfo[] mCodecInfos>;

        $i0 = lengthof r1;

        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r1, $i0);

        $r3 = (android.media.MediaCodecInfo[]) $r2;

        return $r3;
    }
}
