public final class android.media.MediaCrypto extends java.lang.Object
{
    private long mNativeContext;

    static void <clinit>()
    {
        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("media_jni");

        staticinvoke <android.media.MediaCrypto: void native_init()>();

        return;
    }

    public void <init>(java.util.UUID, byte[]) throws android.media.MediaCryptoException
    {
        android.media.MediaCrypto r0;
        java.util.UUID r1;
        byte[] r2, $r3;

        r0 := @this: android.media.MediaCrypto;

        r1 := @parameter0: java.util.UUID;

        r2 := @parameter1: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = staticinvoke <android.media.MediaCrypto: byte[] getByteArrayFromUUID(java.util.UUID)>(r1);

        specialinvoke r0.<android.media.MediaCrypto: void native_setup(byte[],byte[])>($r3, r2);

        return;
    }

    private static final byte[] getByteArrayFromUUID(java.util.UUID)
    {
        long l0, l1, $l4, $l10;
        int $i2, $i3, $i5, $i8, $i9, $i11, $i14, i15;
        byte $b6, $b7, $b12, $b13;
        java.util.UUID r0;
        byte[] r1;

        r0 := @parameter0: java.util.UUID;

        l0 = virtualinvoke r0.<java.util.UUID: long getMostSignificantBits()>();

        l1 = virtualinvoke r0.<java.util.UUID: long getLeastSignificantBits()>();

        r1 = newarray (byte)[16];

        i15 = 0;

     label1:
        if i15 >= 8 goto label2;

        $i2 = 7 - i15;

        $i3 = $i2 * 8;

        $l4 = l0 >>> $i3;

        $i5 = (int) $l4;

        $b6 = (byte) $i5;

        $b7 = (byte) $b6;

        r1[i15] = $b7;

        $i14 = i15 + 8;

        $i8 = 7 - i15;

        $i9 = $i8 * 8;

        $l10 = l1 >>> $i9;

        $i11 = (int) $l10;

        $b12 = (byte) $i11;

        $b13 = (byte) $b12;

        r1[$i14] = $b13;

        i15 = i15 + 1;

        goto label1;

     label2:
        return r1;
    }

    public static final boolean isCryptoSchemeSupported(java.util.UUID)
    {
        java.util.UUID r0;
        byte[] $r1;
        boolean $z0;

        r0 := @parameter0: java.util.UUID;

        $r1 = staticinvoke <android.media.MediaCrypto: byte[] getByteArrayFromUUID(java.util.UUID)>(r0);

        $z0 = staticinvoke <android.media.MediaCrypto: boolean isCryptoSchemeSupportedNative(byte[])>($r1);

        return $z0;
    }

    private static final native boolean isCryptoSchemeSupportedNative(byte[]);

    private final native void native_finalize();

    private static final native void native_init();

    private final native void native_setup(byte[], byte[]) throws android.media.MediaCryptoException;

    protected void finalize()
    {
        android.media.MediaCrypto r0;

        r0 := @this: android.media.MediaCrypto;

        specialinvoke r0.<android.media.MediaCrypto: void native_finalize()>();

        return;
    }

    public final native void release();

    public final native boolean requiresSecureDecoderComponent(java.lang.String);

    public final native void setMediaDrmSession(byte[]) throws android.media.MediaCryptoException;
}
