public final class android.media.MediaDescrambler extends java.lang.Object implements java.lang.AutoCloseable
{
    public static final byte SCRAMBLE_CONTROL_EVEN_KEY;
    public static final byte SCRAMBLE_CONTROL_ODD_KEY;
    public static final byte SCRAMBLE_CONTROL_RESERVED;
    public static final byte SCRAMBLE_CONTROL_UNSCRAMBLED;
    public static final byte SCRAMBLE_FLAG_PES_HEADER;
    private static final java.lang.String TAG;
    private android.hardware.cas.V1_0.IDescramblerBase mIDescrambler;
    private long mNativeContext;

    static void <clinit>()
    {
        <android.media.MediaDescrambler: java.lang.String TAG> = "MediaDescrambler";

        <android.media.MediaDescrambler: byte SCRAMBLE_FLAG_PES_HEADER> = 1;

        <android.media.MediaDescrambler: byte SCRAMBLE_CONTROL_UNSCRAMBLED> = 0;

        <android.media.MediaDescrambler: byte SCRAMBLE_CONTROL_RESERVED> = 1;

        <android.media.MediaDescrambler: byte SCRAMBLE_CONTROL_ODD_KEY> = 3;

        <android.media.MediaDescrambler: byte SCRAMBLE_CONTROL_EVEN_KEY> = 2;

        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("media_jni");

        staticinvoke <android.media.MediaDescrambler: void native_init()>();

        return;
    }

    public void <init>(int) throws android.media.MediaCasException$UnsupportedCasException
    {
        android.media.MediaDescrambler r0;
        int i0;
        android.hardware.cas.V1_0.IMediaCasService $r2;
        java.lang.StringBuilder $r3, $r14, $r21, r29;
        android.media.MediaCasException$UnsupportedCasException $r6, $r17, $r24;
        java.lang.String $r7, $r13, $r18, $r25;
        android.hardware.cas.V1_0.IDescramblerBase $r8, $r20, r26;
        android.os.IHwBinder $r9;
        java.lang.Exception $r10;
        java.lang.Throwable $r19;

        r0 := @this: android.media.MediaDescrambler;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

     label01:
        $r2 = staticinvoke <android.media.MediaCas: android.hardware.cas.V1_0.IMediaCasService getService()>();

        r26 = interfaceinvoke $r2.<android.hardware.cas.V1_0.IMediaCasService: android.hardware.cas.V1_0.IDescramblerBase createDescrambler(int)>(i0);

        r0.<android.media.MediaDescrambler: android.hardware.cas.V1_0.IDescramblerBase mIDescrambler> = r26;

     label02:
        if r26 == null goto label03;

        goto label08;

     label03:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported CA_system_id ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = new android.media.MediaCasException$UnsupportedCasException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<android.media.MediaCasException$UnsupportedCasException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label04:
        $r19 := @caughtexception;

        goto label10;

     label05:
        $r10 := @caughtexception;

     label06:
        r29 = new java.lang.StringBuilder;

        specialinvoke r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to create descrambler: ");

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r13 = virtualinvoke r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MediaDescrambler", $r13);

        r0.<android.media.MediaDescrambler: android.hardware.cas.V1_0.IDescramblerBase mIDescrambler> = null;

     label07:
        goto label09;

     label08:
        $r8 = r0.<android.media.MediaDescrambler: android.hardware.cas.V1_0.IDescramblerBase mIDescrambler>;

        $r9 = interfaceinvoke $r8.<android.hardware.cas.V1_0.IDescramblerBase: android.os.IHwBinder asBinder()>();

        specialinvoke r0.<android.media.MediaDescrambler: void native_setup(android.os.IHwBinder)>($r9);

        return;

     label09:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported CA_system_id ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r17 = new android.media.MediaCasException$UnsupportedCasException;

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<android.media.MediaCasException$UnsupportedCasException: void <init>(java.lang.String)>($r18);

        throw $r17;

     label10:
        $r20 = r0.<android.media.MediaDescrambler: android.hardware.cas.V1_0.IDescramblerBase mIDescrambler>;

        if $r20 != null goto label11;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported CA_system_id ");

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r24 = new android.media.MediaCasException$UnsupportedCasException;

        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<android.media.MediaCasException$UnsupportedCasException: void <init>(java.lang.String)>($r25);

        throw $r24;

     label11:
        throw $r19;

        catch java.lang.Exception from label01 to label02 with label05;
        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label06 to label07 with label04;
    }

    private final void cleanupAndRethrowIllegalState()
    {
        android.media.MediaDescrambler r0;
        java.lang.IllegalStateException $r1;

        r0 := @this: android.media.MediaDescrambler;

        r0.<android.media.MediaDescrambler: android.hardware.cas.V1_0.IDescramblerBase mIDescrambler> = null;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;
    }

    private final native int native_descramble(byte, byte, int, int[], int[], java.nio.ByteBuffer, int, int, java.nio.ByteBuffer, int, int) throws android.os.RemoteException;

    private static final native void native_init();

    private final native void native_release();

    private final native void native_setup(android.os.IHwBinder);

    private final void validateInternalStates()
    {
        android.media.MediaDescrambler r0;
        android.hardware.cas.V1_0.IDescramblerBase $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: android.media.MediaDescrambler;

        $r1 = r0.<android.media.MediaDescrambler: android.hardware.cas.V1_0.IDescramblerBase mIDescrambler>;

        if $r1 == null goto label1;

        return;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;
    }

    public void close()
    {
        android.media.MediaDescrambler r0;
        android.os.RemoteException $r1;
        java.lang.Throwable $r2;
        android.hardware.cas.V1_0.IDescramblerBase r3;

        r0 := @this: android.media.MediaDescrambler;

        r3 = r0.<android.media.MediaDescrambler: android.hardware.cas.V1_0.IDescramblerBase mIDescrambler>;

        if r3 == null goto label6;

     label1:
        interfaceinvoke r3.<android.hardware.cas.V1_0.IDescramblerBase: int release()>();

     label2:
        goto label5;

     label3:
        $r2 := @caughtexception;

        r0.<android.media.MediaDescrambler: android.hardware.cas.V1_0.IDescramblerBase mIDescrambler> = null;

        throw $r2;

     label4:
        $r1 := @caughtexception;

     label5:
        r0.<android.media.MediaDescrambler: android.hardware.cas.V1_0.IDescramblerBase mIDescrambler> = null;

     label6:
        specialinvoke r0.<android.media.MediaDescrambler: void native_release()>();

        return;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public final int descramble(java.nio.ByteBuffer, java.nio.ByteBuffer, android.media.MediaCodec$CryptoInfo)
    {
        android.media.MediaDescrambler r0;
        java.nio.ByteBuffer r1, r27;
        android.media.MediaCodec$CryptoInfo r2;
        int i0, $i1, $i2, $i3, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        java.lang.StringBuilder $r3;
        java.lang.IllegalArgumentException $r6, $r12, $r19, $r21, $r23;
        java.lang.String $r7, $r25;
        int[] $r8, $r9, $r10, $r16, $r17, $r18, $r20, $r22;
        byte[] $r11, $r13, $r14, $r15;
        byte $b4, $b5;
        android.os.ServiceSpecificException $r24;
        android.os.RemoteException $r26;

        r0 := @this: android.media.MediaDescrambler;

        r27 := @parameter0: java.nio.ByteBuffer;

        r1 := @parameter1: java.nio.ByteBuffer;

        r2 := @parameter2: android.media.MediaCodec$CryptoInfo;

        specialinvoke r0.<android.media.MediaDescrambler: void validateInternalStates()>();

        $i1 = r2.<android.media.MediaCodec$CryptoInfo: int numSubSamples>;

        if $i1 <= 0 goto label13;

        $r8 = r2.<android.media.MediaCodec$CryptoInfo: int[] numBytesOfClearData>;

        if $r8 != null goto label02;

        $r22 = r2.<android.media.MediaCodec$CryptoInfo: int[] numBytesOfEncryptedData>;

        if $r22 == null goto label01;

        goto label02;

     label01:
        $r23 = new java.lang.IllegalArgumentException;

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid CryptoInfo: clearData and encryptedData size arrays are both null!");

        throw $r23;

     label02:
        $r9 = r2.<android.media.MediaCodec$CryptoInfo: int[] numBytesOfClearData>;

        if $r9 == null goto label04;

        $r20 = r2.<android.media.MediaCodec$CryptoInfo: int[] numBytesOfClearData>;

        $i14 = lengthof $r20;

        $i13 = r2.<android.media.MediaCodec$CryptoInfo: int numSubSamples>;

        if $i14 < $i13 goto label03;

        goto label04;

     label03:
        $r21 = new java.lang.IllegalArgumentException;

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid CryptoInfo: numBytesOfClearData is too small!");

        throw $r21;

     label04:
        $r10 = r2.<android.media.MediaCodec$CryptoInfo: int[] numBytesOfEncryptedData>;

        if $r10 == null goto label06;

        $r18 = r2.<android.media.MediaCodec$CryptoInfo: int[] numBytesOfEncryptedData>;

        $i12 = lengthof $r18;

        $i11 = r2.<android.media.MediaCodec$CryptoInfo: int numSubSamples>;

        if $i12 < $i11 goto label05;

        goto label06;

     label05:
        $r19 = new java.lang.IllegalArgumentException;

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid CryptoInfo: numBytesOfEncryptedData is too small!");

        throw $r19;

     label06:
        $r11 = r2.<android.media.MediaCodec$CryptoInfo: byte[] key>;

        if $r11 == null goto label12;

        $r13 = r2.<android.media.MediaCodec$CryptoInfo: byte[] key>;

        $i3 = lengthof $r13;

        if $i3 != 16 goto label12;

     label07:
        $r14 = r2.<android.media.MediaCodec$CryptoInfo: byte[] key>;

        $b4 = $r14[0];

        $r15 = r2.<android.media.MediaCodec$CryptoInfo: byte[] key>;

        $b5 = $r15[1];

        $i6 = r2.<android.media.MediaCodec$CryptoInfo: int numSubSamples>;

        $r16 = r2.<android.media.MediaCodec$CryptoInfo: int[] numBytesOfClearData>;

        $r17 = r2.<android.media.MediaCodec$CryptoInfo: int[] numBytesOfEncryptedData>;

        $i7 = virtualinvoke r27.<java.nio.ByteBuffer: int position()>();

        $i8 = virtualinvoke r27.<java.nio.ByteBuffer: int limit()>();

        $i9 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $i10 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();

        i0 = specialinvoke r0.<android.media.MediaDescrambler: int native_descramble(byte,byte,int,int[],int[],java.nio.ByteBuffer,int,int,java.nio.ByteBuffer,int,int)>($b4, $b5, $i6, $r16, $r17, r27, $i7, $i8, r1, $i9, $i10);

     label08:
        return i0;

     label09:
        $r26 := @caughtexception;

        specialinvoke r0.<android.media.MediaDescrambler: void cleanupAndRethrowIllegalState()>();

        goto label11;

     label10:
        $r24 := @caughtexception;

        $i15 = $r24.<android.os.ServiceSpecificException: int errorCode>;

        $r25 = virtualinvoke $r24.<android.os.ServiceSpecificException: java.lang.String getMessage()>();

        staticinvoke <android.media.MediaCasStateException: void throwExceptionIfNeeded(int,java.lang.String)>($i15, $r25);

     label11:
        return -1;

     label12:
        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid CryptoInfo: key array is invalid!");

        throw $r12;

     label13:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid CryptoInfo: invalid numSubSamples=");

        $i2 = r2.<android.media.MediaCodec$CryptoInfo: int numSubSamples>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;

        catch android.os.ServiceSpecificException from label07 to label08 with label10;
        catch android.os.RemoteException from label07 to label08 with label09;
    }

    protected void finalize()
    {
        android.media.MediaDescrambler r0;

        r0 := @this: android.media.MediaDescrambler;

        virtualinvoke r0.<android.media.MediaDescrambler: void close()>();

        return;
    }

    android.os.IHwBinder getBinder()
    {
        android.media.MediaDescrambler r0;
        android.hardware.cas.V1_0.IDescramblerBase $r1;
        android.os.IHwBinder $r2;

        r0 := @this: android.media.MediaDescrambler;

        specialinvoke r0.<android.media.MediaDescrambler: void validateInternalStates()>();

        $r1 = r0.<android.media.MediaDescrambler: android.hardware.cas.V1_0.IDescramblerBase mIDescrambler>;

        $r2 = interfaceinvoke $r1.<android.hardware.cas.V1_0.IDescramblerBase: android.os.IHwBinder asBinder()>();

        return $r2;
    }

    public final boolean requiresSecureDecoderComponent(java.lang.String)
    {
        android.media.MediaDescrambler r0;
        boolean z0;
        android.hardware.cas.V1_0.IDescramblerBase $r1;
        android.os.RemoteException $r2;
        java.lang.String r3;

        r0 := @this: android.media.MediaDescrambler;

        r3 := @parameter0: java.lang.String;

        specialinvoke r0.<android.media.MediaDescrambler: void validateInternalStates()>();

     label1:
        $r1 = r0.<android.media.MediaDescrambler: android.hardware.cas.V1_0.IDescramblerBase mIDescrambler>;

        z0 = interfaceinvoke $r1.<android.hardware.cas.V1_0.IDescramblerBase: boolean requiresSecureDecoderComponent(java.lang.String)>(r3);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        specialinvoke r0.<android.media.MediaDescrambler: void cleanupAndRethrowIllegalState()>();

        return 1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public final void setMediaCasSession(android.media.MediaCas$Session)
    {
        android.media.MediaDescrambler r0;
        java.util.ArrayList $r1;
        android.hardware.cas.V1_0.IDescramblerBase $r2;
        int $i0;
        android.os.RemoteException $r3;
        android.media.MediaCas$Session r4;

        r0 := @this: android.media.MediaDescrambler;

        r4 := @parameter0: android.media.MediaCas$Session;

        specialinvoke r0.<android.media.MediaDescrambler: void validateInternalStates()>();

     label1:
        $r2 = r0.<android.media.MediaDescrambler: android.hardware.cas.V1_0.IDescramblerBase mIDescrambler>;

        $r1 = r4.<android.media.MediaCas$Session: java.util.ArrayList mSessionId>;

        $i0 = interfaceinvoke $r2.<android.hardware.cas.V1_0.IDescramblerBase: int setMediaCasSession(java.util.ArrayList)>($r1);

        staticinvoke <android.media.MediaCasStateException: void throwExceptionIfNeeded(int)>($i0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        specialinvoke r0.<android.media.MediaDescrambler: void cleanupAndRethrowIllegalState()>();

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }
}
