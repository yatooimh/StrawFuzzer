public final class android.media.MediaDrm extends java.lang.Object implements java.lang.AutoCloseable
{
    public static final int CERTIFICATE_TYPE_NONE;
    public static final int CERTIFICATE_TYPE_X509;
    private static final int DRM_EVENT;
    public static final int EVENT_KEY_EXPIRED;
    public static final int EVENT_KEY_REQUIRED;
    public static final int EVENT_PROVISION_REQUIRED;
    public static final int EVENT_SESSION_RECLAIMED;
    public static final int EVENT_VENDOR_DEFINED;
    private static final int EXPIRATION_UPDATE;
    public static final int HDCP_LEVEL_UNKNOWN;
    public static final int HDCP_NONE;
    public static final int HDCP_NO_DIGITAL_OUTPUT;
    public static final int HDCP_V1;
    public static final int HDCP_V2;
    public static final int HDCP_V2_1;
    public static final int HDCP_V2_2;
    public static final int HDCP_V2_3;
    private static final int KEY_STATUS_CHANGE;
    public static final int KEY_TYPE_OFFLINE;
    public static final int KEY_TYPE_RELEASE;
    public static final int KEY_TYPE_STREAMING;
    public static final int OFFLINE_LICENSE_STATE_RELEASED;
    public static final int OFFLINE_LICENSE_STATE_UNKNOWN;
    public static final int OFFLINE_LICENSE_STATE_USABLE;
    private static final java.lang.String PERMISSION;
    public static final java.lang.String PROPERTY_ALGORITHMS;
    public static final java.lang.String PROPERTY_DESCRIPTION;
    public static final java.lang.String PROPERTY_DEVICE_UNIQUE_ID;
    public static final java.lang.String PROPERTY_VENDOR;
    public static final java.lang.String PROPERTY_VERSION;
    public static final int SECURITY_LEVEL_HW_SECURE_ALL;
    public static final int SECURITY_LEVEL_HW_SECURE_CRYPTO;
    public static final int SECURITY_LEVEL_HW_SECURE_DECODE;
    public static final int SECURITY_LEVEL_MAX;
    public static final int SECURITY_LEVEL_SW_SECURE_CRYPTO;
    public static final int SECURITY_LEVEL_SW_SECURE_DECODE;
    public static final int SECURITY_LEVEL_UNKNOWN;
    private static final int SESSION_LOST_STATE;
    private static final java.lang.String TAG;
    private final dalvik.system.CloseGuard mCloseGuard;
    private final java.util.concurrent.atomic.AtomicBoolean mClosed;
    private final java.util.Map mListenerMap;
    private long mNativeContext;

    static void <clinit>()
    {
        <android.media.MediaDrm: java.lang.String TAG> = "MediaDrm";

        <android.media.MediaDrm: int SESSION_LOST_STATE> = 203;

        <android.media.MediaDrm: int SECURITY_LEVEL_UNKNOWN> = 0;

        <android.media.MediaDrm: int SECURITY_LEVEL_SW_SECURE_DECODE> = 2;

        <android.media.MediaDrm: int SECURITY_LEVEL_SW_SECURE_CRYPTO> = 1;

        <android.media.MediaDrm: int SECURITY_LEVEL_MAX> = 6;

        <android.media.MediaDrm: int SECURITY_LEVEL_HW_SECURE_DECODE> = 4;

        <android.media.MediaDrm: int SECURITY_LEVEL_HW_SECURE_CRYPTO> = 3;

        <android.media.MediaDrm: int SECURITY_LEVEL_HW_SECURE_ALL> = 5;

        <android.media.MediaDrm: java.lang.String PROPERTY_VERSION> = "version";

        <android.media.MediaDrm: java.lang.String PROPERTY_VENDOR> = "vendor";

        <android.media.MediaDrm: java.lang.String PROPERTY_DEVICE_UNIQUE_ID> = "deviceUniqueId";

        <android.media.MediaDrm: java.lang.String PROPERTY_DESCRIPTION> = "description";

        <android.media.MediaDrm: java.lang.String PROPERTY_ALGORITHMS> = "algorithms";

        <android.media.MediaDrm: java.lang.String PERMISSION> = "android.permission.ACCESS_DRM_CERTIFICATES";

        <android.media.MediaDrm: int OFFLINE_LICENSE_STATE_USABLE> = 1;

        <android.media.MediaDrm: int OFFLINE_LICENSE_STATE_UNKNOWN> = 0;

        <android.media.MediaDrm: int OFFLINE_LICENSE_STATE_RELEASED> = 2;

        <android.media.MediaDrm: int KEY_TYPE_STREAMING> = 1;

        <android.media.MediaDrm: int KEY_TYPE_RELEASE> = 3;

        <android.media.MediaDrm: int KEY_TYPE_OFFLINE> = 2;

        <android.media.MediaDrm: int KEY_STATUS_CHANGE> = 202;

        <android.media.MediaDrm: int HDCP_V2_3> = 6;

        <android.media.MediaDrm: int HDCP_V2_2> = 5;

        <android.media.MediaDrm: int HDCP_V2_1> = 4;

        <android.media.MediaDrm: int HDCP_V2> = 3;

        <android.media.MediaDrm: int HDCP_V1> = 2;

        <android.media.MediaDrm: int HDCP_NO_DIGITAL_OUTPUT> = 2147483647;

        <android.media.MediaDrm: int HDCP_NONE> = 1;

        <android.media.MediaDrm: int HDCP_LEVEL_UNKNOWN> = 0;

        <android.media.MediaDrm: int EXPIRATION_UPDATE> = 201;

        <android.media.MediaDrm: int EVENT_VENDOR_DEFINED> = 4;

        <android.media.MediaDrm: int EVENT_SESSION_RECLAIMED> = 5;

        <android.media.MediaDrm: int EVENT_PROVISION_REQUIRED> = 1;

        <android.media.MediaDrm: int EVENT_KEY_REQUIRED> = 2;

        <android.media.MediaDrm: int EVENT_KEY_EXPIRED> = 3;

        <android.media.MediaDrm: int DRM_EVENT> = 200;

        <android.media.MediaDrm: int CERTIFICATE_TYPE_X509> = 1;

        <android.media.MediaDrm: int CERTIFICATE_TYPE_NONE> = 0;

        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("media_jni");

        staticinvoke <android.media.MediaDrm: void native_init()>();

        return;
    }

    public void <init>(java.util.UUID) throws android.media.UnsupportedSchemeException
    {
        android.media.MediaDrm r0;
        java.util.UUID r1;
        java.util.concurrent.atomic.AtomicBoolean $r2;
        dalvik.system.CloseGuard $r3, $r8;
        java.util.concurrent.ConcurrentHashMap $r4;
        java.lang.ref.WeakReference $r5;
        byte[] $r6;
        java.lang.String $r7;

        r0 := @this: android.media.MediaDrm;

        r1 := @parameter0: java.util.UUID;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();

        r0.<android.media.MediaDrm: java.util.concurrent.atomic.AtomicBoolean mClosed> = $r2;

        $r3 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.media.MediaDrm: dalvik.system.CloseGuard mCloseGuard> = $r3;

        $r4 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r4.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<android.media.MediaDrm: java.util.Map mListenerMap> = $r4;

        $r5 = new java.lang.ref.WeakReference;

        specialinvoke $r5.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r0);

        $r6 = staticinvoke <android.media.MediaDrm: byte[] getByteArrayFromUUID(java.util.UUID)>(r1);

        $r7 = staticinvoke <android.app.ActivityThread: java.lang.String currentOpPackageName()>();

        specialinvoke r0.<android.media.MediaDrm: void native_setup(java.lang.Object,byte[],java.lang.String)>($r5, $r6, $r7);

        $r8 = r0.<android.media.MediaDrm: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r8.<dalvik.system.CloseGuard: void open(java.lang.String)>("release");

        return;
    }

    static void access$100(android.media.MediaDrm, byte[], java.lang.String)
    {
        android.media.MediaDrm r0;
        byte[] r1;
        java.lang.String r2;

        r0 := @parameter0: android.media.MediaDrm;

        r1 := @parameter1: byte[];

        r2 := @parameter2: java.lang.String;

        staticinvoke <android.media.MediaDrm: void setCipherAlgorithmNative(android.media.MediaDrm,byte[],java.lang.String)>(r0, r1, r2);

        return;
    }

    static void access$200(android.media.MediaDrm, byte[], java.lang.String)
    {
        android.media.MediaDrm r0;
        byte[] r1;
        java.lang.String r2;

        r0 := @parameter0: android.media.MediaDrm;

        r1 := @parameter1: byte[];

        r2 := @parameter2: java.lang.String;

        staticinvoke <android.media.MediaDrm: void setMacAlgorithmNative(android.media.MediaDrm,byte[],java.lang.String)>(r0, r1, r2);

        return;
    }

    static byte[] access$300(android.media.MediaDrm, byte[], byte[], byte[], byte[])
    {
        android.media.MediaDrm r0;
        byte[] r1, r2, r3, r4, $r5;

        r0 := @parameter0: android.media.MediaDrm;

        r1 := @parameter1: byte[];

        r2 := @parameter2: byte[];

        r3 := @parameter3: byte[];

        r4 := @parameter4: byte[];

        $r5 = staticinvoke <android.media.MediaDrm: byte[] encryptNative(android.media.MediaDrm,byte[],byte[],byte[],byte[])>(r0, r1, r2, r3, r4);

        return $r5;
    }

    static byte[] access$400(android.media.MediaDrm, byte[], byte[], byte[], byte[])
    {
        android.media.MediaDrm r0;
        byte[] r1, r2, r3, r4, $r5;

        r0 := @parameter0: android.media.MediaDrm;

        r1 := @parameter1: byte[];

        r2 := @parameter2: byte[];

        r3 := @parameter3: byte[];

        r4 := @parameter4: byte[];

        $r5 = staticinvoke <android.media.MediaDrm: byte[] decryptNative(android.media.MediaDrm,byte[],byte[],byte[],byte[])>(r0, r1, r2, r3, r4);

        return $r5;
    }

    static byte[] access$500(android.media.MediaDrm, byte[], byte[], byte[])
    {
        android.media.MediaDrm r0;
        byte[] r1, r2, r3, $r4;

        r0 := @parameter0: android.media.MediaDrm;

        r1 := @parameter1: byte[];

        r2 := @parameter2: byte[];

        r3 := @parameter3: byte[];

        $r4 = staticinvoke <android.media.MediaDrm: byte[] signNative(android.media.MediaDrm,byte[],byte[],byte[])>(r0, r1, r2, r3);

        return $r4;
    }

    static boolean access$600(android.media.MediaDrm, byte[], byte[], byte[], byte[])
    {
        android.media.MediaDrm r0;
        byte[] r1, r2, r3, r4;
        boolean $z0;

        r0 := @parameter0: android.media.MediaDrm;

        r1 := @parameter1: byte[];

        r2 := @parameter2: byte[];

        r3 := @parameter3: byte[];

        r4 := @parameter4: byte[];

        $z0 = staticinvoke <android.media.MediaDrm: boolean verifyNative(android.media.MediaDrm,byte[],byte[],byte[],byte[])>(r0, r1, r2, r3, r4);

        return $z0;
    }

    private void clearGenericListener(int)
    {
        android.media.MediaDrm r0;
        int i0;
        java.util.Map $r1;
        java.lang.Integer $r2;

        r0 := @this: android.media.MediaDrm;

        i0 := @parameter0: int;

        $r1 = r0.<android.media.MediaDrm: java.util.Map mListenerMap>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r2);

        return;
    }

    private android.os.Handler createHandler()
    {
        android.media.MediaDrm r0;
        android.os.Handler $r1, $r2, r4;
        android.os.Looper r3, r5;

        r0 := @this: android.media.MediaDrm;

        r3 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if r3 == null goto label1;

        $r2 = new android.os.Handler;

        specialinvoke $r2.<android.os.Handler: void <init>(android.os.Looper)>(r3);

        r4 = $r2;

        goto label3;

     label1:
        r5 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        if r5 == null goto label2;

        $r1 = new android.os.Handler;

        specialinvoke $r1.<android.os.Handler: void <init>(android.os.Looper)>(r5);

        r4 = $r1;

        goto label3;

     label2:
        r4 = null;

     label3:
        return r4;
    }

    private java.util.function.Consumer createOnEventListener(android.media.MediaDrm$OnEventListener)
    {
        android.media.MediaDrm r0;
        android.media.MediaDrm$OnEventListener r1;
        android.media._$$Lambda$MediaDrm$8rRollK1F3eENvuaBGoS8u__heQ $r2;

        r0 := @this: android.media.MediaDrm;

        r1 := @parameter0: android.media.MediaDrm$OnEventListener;

        $r2 = new android.media._$$Lambda$MediaDrm$8rRollK1F3eENvuaBGoS8u__heQ;

        specialinvoke $r2.<android.media._$$Lambda$MediaDrm$8rRollK1F3eENvuaBGoS8u__heQ: void <init>(android.media.MediaDrm,android.media.MediaDrm$OnEventListener)>(r0, r1);

        return $r2;
    }

    private java.util.function.Consumer createOnExpirationUpdateListener(android.media.MediaDrm$OnExpirationUpdateListener)
    {
        android.media.MediaDrm r0;
        android.media.MediaDrm$OnExpirationUpdateListener r1;
        android.media._$$Lambda$MediaDrm$btxNighXxrJ0k5ooHZIA_tMesRA $r2;

        r0 := @this: android.media.MediaDrm;

        r1 := @parameter0: android.media.MediaDrm$OnExpirationUpdateListener;

        $r2 = new android.media._$$Lambda$MediaDrm$btxNighXxrJ0k5ooHZIA_tMesRA;

        specialinvoke $r2.<android.media._$$Lambda$MediaDrm$btxNighXxrJ0k5ooHZIA_tMesRA: void <init>(android.media.MediaDrm,android.media.MediaDrm$OnExpirationUpdateListener)>(r0, r1);

        return $r2;
    }

    private java.util.function.Consumer createOnKeyStatusChangeListener(android.media.MediaDrm$OnKeyStatusChangeListener)
    {
        android.media.MediaDrm r0;
        android.media.MediaDrm$OnKeyStatusChangeListener r1;
        android.media._$$Lambda$MediaDrm$_FHBF1q3qSxz22Mhv8jmgjN4xt0 $r2;

        r0 := @this: android.media.MediaDrm;

        r1 := @parameter0: android.media.MediaDrm$OnKeyStatusChangeListener;

        $r2 = new android.media._$$Lambda$MediaDrm$_FHBF1q3qSxz22Mhv8jmgjN4xt0;

        specialinvoke $r2.<android.media._$$Lambda$MediaDrm$_FHBF1q3qSxz22Mhv8jmgjN4xt0: void <init>(android.media.MediaDrm,android.media.MediaDrm$OnKeyStatusChangeListener)>(r0, r1);

        return $r2;
    }

    private java.util.function.Consumer createOnSessionLostStateListener(android.media.MediaDrm$OnSessionLostStateListener)
    {
        android.media.MediaDrm r0;
        android.media.MediaDrm$OnSessionLostStateListener r1;
        android.media._$$Lambda$MediaDrm$4XHJHM_muz_p2PFHVhlVJb_7ccc $r2;

        r0 := @this: android.media.MediaDrm;

        r1 := @parameter0: android.media.MediaDrm$OnSessionLostStateListener;

        $r2 = new android.media._$$Lambda$MediaDrm$4XHJHM_muz_p2PFHVhlVJb_7ccc;

        specialinvoke $r2.<android.media._$$Lambda$MediaDrm$4XHJHM_muz_p2PFHVhlVJb_7ccc: void <init>(android.media.MediaDrm,android.media.MediaDrm$OnSessionLostStateListener)>(r0, r1);

        return $r2;
    }

    private static final native byte[] decryptNative(android.media.MediaDrm, byte[], byte[], byte[], byte[]);

    private static final native byte[] encryptNative(android.media.MediaDrm, byte[], byte[], byte[], byte[]);

    private static final byte[] getByteArrayFromUUID(java.util.UUID)
    {
        long l0, l1, $l4, $l10;
        int $i2, $i3, $i5, $i8, $i9, $i11, $i14, i15;
        byte $b6, $b7, $b12, $b13;
        java.util.UUID r0;
        byte[] r1;

        r0 := @parameter0: java.util.UUID;

        l0 = virtualinvoke r0.<java.util.UUID: long getMostSignificantBits()>();

        l1 = virtualinvoke r0.<java.util.UUID: long getLeastSignificantBits()>();

        r1 = newarray (byte)[16];

        i15 = 0;

     label1:
        if i15 >= 8 goto label2;

        $i2 = 7 - i15;

        $i3 = $i2 * 8;

        $l4 = l0 >>> $i3;

        $i5 = (int) $l4;

        $b6 = (byte) $i5;

        $b7 = (byte) $b6;

        r1[i15] = $b7;

        $i14 = i15 + 8;

        $i8 = 7 - i15;

        $i9 = $i8 * 8;

        $l10 = l1 >>> $i9;

        $i11 = (int) $l10;

        $b12 = (byte) $i11;

        $b13 = (byte) $b12;

        r1[$i14] = $b13;

        i15 = i15 + 1;

        goto label1;

     label2:
        return r1;
    }

    public static final int getMaxSecurityLevel()
    {
        return 6;
    }

    private native android.os.PersistableBundle getMetricsNative();

    private native android.media.MediaDrm$ProvisionRequest getProvisionRequestNative(int, java.lang.String);

    public static final java.util.List getSupportedCryptoSchemes()
    {
        byte[] $r0;
        java.util.List $r1;

        $r0 = staticinvoke <android.media.MediaDrm: byte[] getSupportedCryptoSchemesNative()>();

        $r1 = staticinvoke <android.media.MediaDrm: java.util.List getUUIDsFromByteArray(byte[])>($r0);

        return $r1;
    }

    private static final native byte[] getSupportedCryptoSchemesNative();

    private static final java.util.UUID getUUIDFromByteArray(byte[], int)
    {
        byte[] r0;
        int i0, $i1, $i6, $i7, i14;
        java.util.UUID $r1;
        byte $b2, $b8;
        long $l3, $l4, $l5, $l9, $l10, $l11, l12, l13;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        l12 = 0L;

        l13 = 0L;

        i14 = 0;

     label1:
        if i14 >= 8 goto label2;

        $l5 = l12 << 8;

        $i1 = i0 + i14;

        $b2 = r0[$i1];

        $l3 = (long) $b2;

        $l4 = $l3 & 255L;

        l12 = $l5 | $l4;

        $l11 = l13 << 8;

        $i6 = i0 + i14;

        $i7 = $i6 + 8;

        $b8 = r0[$i7];

        $l9 = (long) $b8;

        $l10 = $l9 & 255L;

        l13 = $l11 | $l10;

        i14 = i14 + 1;

        goto label1;

     label2:
        $r1 = new java.util.UUID;

        specialinvoke $r1.<java.util.UUID: void <init>(long,long)>(l12, l13);

        return $r1;
    }

    private static final java.util.List getUUIDsFromByteArray(byte[])
    {
        byte[] r0;
        java.util.LinkedHashSet $r2;
        int $i0, i1;
        java.util.ArrayList $r3;
        java.util.UUID $r4;

        r0 := @parameter0: byte[];

        $r2 = new java.util.LinkedHashSet;

        specialinvoke $r2.<java.util.LinkedHashSet: void <init>()>();

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label2;

        $r4 = staticinvoke <android.media.MediaDrm: java.util.UUID getUUIDFromByteArray(byte[],int)>(r0, i1);

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r4);

        i1 = i1 + 16;

        goto label1;

     label2:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        return $r3;
    }

    public static final boolean isCryptoSchemeSupported(java.util.UUID)
    {
        java.util.UUID r0;
        byte[] $r1;
        boolean $z0;

        r0 := @parameter0: java.util.UUID;

        $r1 = staticinvoke <android.media.MediaDrm: byte[] getByteArrayFromUUID(java.util.UUID)>(r0);

        $z0 = staticinvoke <android.media.MediaDrm: boolean isCryptoSchemeSupportedNative(byte[],java.lang.String,int)>($r1, null, 0);

        return $z0;
    }

    public static final boolean isCryptoSchemeSupported(java.util.UUID, java.lang.String)
    {
        java.util.UUID r0;
        java.lang.String r1;
        byte[] $r2;
        boolean $z0;

        r0 := @parameter0: java.util.UUID;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <android.media.MediaDrm: byte[] getByteArrayFromUUID(java.util.UUID)>(r0);

        $z0 = staticinvoke <android.media.MediaDrm: boolean isCryptoSchemeSupportedNative(byte[],java.lang.String,int)>($r2, r1, 0);

        return $z0;
    }

    public static final boolean isCryptoSchemeSupported(java.util.UUID, java.lang.String, int)
    {
        java.util.UUID r0;
        java.lang.String r1;
        int i0;
        byte[] $r2;
        boolean $z0;

        r0 := @parameter0: java.util.UUID;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r2 = staticinvoke <android.media.MediaDrm: byte[] getByteArrayFromUUID(java.util.UUID)>(r0);

        $z0 = staticinvoke <android.media.MediaDrm: boolean isCryptoSchemeSupportedNative(byte[],java.lang.String,int)>($r2, r1, i0);

        return $z0;
    }

    private static final native boolean isCryptoSchemeSupportedNative(byte[], java.lang.String, int);

    private java.util.List keyStatusListFromParcel(android.os.Parcel)
    {
        android.media.MediaDrm r0;
        android.os.Parcel r1;
        java.util.ArrayList $r3;
        android.media.MediaDrm$KeyStatus $r4;
        byte[] $r5;
        int $i0, i1;

        r0 := @this: android.media.MediaDrm;

        r1 := @parameter0: android.os.Parcel;

        i1 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>(i1);

     label1:
        if i1 <= 0 goto label2;

        $r4 = new android.media.MediaDrm$KeyStatus;

        $r5 = virtualinvoke r1.<android.os.Parcel: byte[] createByteArray()>();

        $i0 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        specialinvoke $r4.<android.media.MediaDrm$KeyStatus: void <init>(byte[],int)>($r5, $i0);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r4);

        i1 = i1 + -1;

        goto label1;

     label2:
        return $r3;
    }

    public static java.util.function.Consumer lambda$IvEWhXQgSYABwC6_1bdnhTJ4V2I(android.media.MediaDrm, android.media.MediaDrm$OnEventListener)
    {
        android.media.MediaDrm r0;
        android.media.MediaDrm$OnEventListener r1;
        java.util.function.Consumer $r2;

        r0 := @parameter0: android.media.MediaDrm;

        r1 := @parameter1: android.media.MediaDrm$OnEventListener;

        $r2 = specialinvoke r0.<android.media.MediaDrm: java.util.function.Consumer createOnEventListener(android.media.MediaDrm$OnEventListener)>(r1);

        return $r2;
    }

    public static java.util.function.Consumer lambda$V4Xmxq2t4qcaWIsuRLRluTj6MT0(android.media.MediaDrm, android.media.MediaDrm$OnKeyStatusChangeListener)
    {
        android.media.MediaDrm r0;
        android.media.MediaDrm$OnKeyStatusChangeListener r1;
        java.util.function.Consumer $r2;

        r0 := @parameter0: android.media.MediaDrm;

        r1 := @parameter1: android.media.MediaDrm$OnKeyStatusChangeListener;

        $r2 = specialinvoke r0.<android.media.MediaDrm: java.util.function.Consumer createOnKeyStatusChangeListener(android.media.MediaDrm$OnKeyStatusChangeListener)>(r1);

        return $r2;
    }

    public static java.util.function.Consumer lambda$dloezJ1eKxYxi1Oq-oYrMXoRpPM(android.media.MediaDrm, android.media.MediaDrm$OnExpirationUpdateListener)
    {
        android.media.MediaDrm r0;
        android.media.MediaDrm$OnExpirationUpdateListener r1;
        java.util.function.Consumer $r2;

        r0 := @parameter0: android.media.MediaDrm;

        r1 := @parameter1: android.media.MediaDrm$OnExpirationUpdateListener;

        $r2 = specialinvoke r0.<android.media.MediaDrm: java.util.function.Consumer createOnExpirationUpdateListener(android.media.MediaDrm$OnExpirationUpdateListener)>(r1);

        return $r2;
    }

    public static java.util.function.Consumer lambda$o5lC7TOBZhvtA31JYaLa-MogSw4(android.media.MediaDrm, android.media.MediaDrm$OnSessionLostStateListener)
    {
        android.media.MediaDrm r0;
        android.media.MediaDrm$OnSessionLostStateListener r1;
        java.util.function.Consumer $r2;

        r0 := @parameter0: android.media.MediaDrm;

        r1 := @parameter1: android.media.MediaDrm$OnSessionLostStateListener;

        $r2 = specialinvoke r0.<android.media.MediaDrm: java.util.function.Consumer createOnSessionLostStateListener(android.media.MediaDrm$OnSessionLostStateListener)>(r1);

        return $r2;
    }

    static void lambda$postEventFromNative$4(android.media.MediaDrm, int, int, byte[], byte[], long, java.util.List, boolean, android.media.MediaDrm$ListenerWithExecutor)
    {
        int i0, i1;
        byte[] r0, r1;
        long l2, $l3;
        java.util.List r2;
        boolean z0;
        android.media.MediaDrm$ListenerWithExecutor r3;
        byte $b4;
        android.media.MediaDrm$ListenerArgs $r4;
        java.util.function.Consumer $r5;
        android.media.MediaDrm r6;

        r6 := @parameter0: android.media.MediaDrm;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r0 := @parameter3: byte[];

        r1 := @parameter4: byte[];

        l2 := @parameter5: long;

        r2 := @parameter6: java.util.List;

        z0 := @parameter7: boolean;

        r3 := @parameter8: android.media.MediaDrm$ListenerWithExecutor;

        $l3 = r6.<android.media.MediaDrm: long mNativeContext>;

        $b4 = $l3 cmp 0L;

        if $b4 != 0 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MediaDrm", "MediaDrm went away with unhandled events");

        return;

     label1:
        $r4 = new android.media.MediaDrm$ListenerArgs;

        specialinvoke $r4.<android.media.MediaDrm$ListenerArgs: void <init>(int,int,byte[],byte[],long,java.util.List,boolean)>(i0, i1, r0, r1, l2, r2, z0);

        $r5 = staticinvoke <android.media.MediaDrm$ListenerWithExecutor: java.util.function.Consumer access$700(android.media.MediaDrm$ListenerWithExecutor)>(r3);

        interfaceinvoke $r5.<java.util.function.Consumer: void accept(java.lang.Object)>($r4);

        return;
    }

    private static final native void native_init();

    private final native void native_setup(java.lang.Object, byte[], java.lang.String);

    private static void postEventFromNative(java.lang.Object, int, int, int, byte[], byte[], long, java.util.List, boolean)
    {
        int i0, i1, i2;
        byte[] r0, r15;
        long l3;
        java.util.List r1;
        boolean z0;
        android.media.MediaDrm r2;
        java.lang.ref.WeakReference $r3;
        java.lang.Object $r4, $r7, r14;
        java.util.Map $r5;
        java.lang.Integer $r6;
        android.media._$$Lambda$MediaDrm$UPVWCanGo24eu9_1S_t6PvJ1Zno $r8;
        java.util.concurrent.Executor $r9;
        java.lang.StringBuilder $r10;
        java.lang.String $r13;
        android.media.MediaDrm$ListenerWithExecutor r17;

        r14 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r15 := @parameter4: byte[];

        r0 := @parameter5: byte[];

        l3 := @parameter6: long;

        r1 := @parameter7: java.util.List;

        z0 := @parameter8: boolean;

        $r3 = (java.lang.ref.WeakReference) r14;

        $r4 = virtualinvoke $r3.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r2 = (android.media.MediaDrm) $r4;

        if r2 != null goto label1;

        return;

     label1:
        tableswitch(i0)
        {
            case 200: goto label3;
            case 201: goto label3;
            case 202: goto label3;
            case 203: goto label3;
            default: goto label2;
        };

     label2:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown message type ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MediaDrm", $r13);

        goto label4;

     label3:
        $r5 = r2.<android.media.MediaDrm: java.util.Map mListenerMap>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r7 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        r17 = (android.media.MediaDrm$ListenerWithExecutor) $r7;

        if r17 == null goto label4;

        $r8 = new android.media._$$Lambda$MediaDrm$UPVWCanGo24eu9_1S_t6PvJ1Zno;

        specialinvoke $r8.<android.media._$$Lambda$MediaDrm$UPVWCanGo24eu9_1S_t6PvJ1Zno: void <init>(android.media.MediaDrm,int,int,byte[],byte[],long,java.util.List,boolean,android.media.MediaDrm$ListenerWithExecutor)>(r2, i1, i2, r15, r0, l3, r1, z0, r17);

        $r9 = staticinvoke <android.media.MediaDrm$ListenerWithExecutor: java.util.concurrent.Executor access$000(android.media.MediaDrm$ListenerWithExecutor)>(r17);

        interfaceinvoke $r9.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r8);

     label4:
        return;
    }

    private native android.media.MediaDrm$Certificate provideProvisionResponseNative(byte[]) throws android.media.DeniedByServerException;

    private static final native void setCipherAlgorithmNative(android.media.MediaDrm, byte[], java.lang.String);

    private void setGenericListener(int, java.util.concurrent.Executor, java.lang.Object, java.util.function.Function)
    {
        android.media.MediaDrm r0;
        int i0;
        java.util.concurrent.Executor r1;
        java.lang.Object r2, $r7;
        java.util.function.Function r3;
        java.util.Map $r4;
        java.lang.Integer $r5;
        android.media.MediaDrm$ListenerWithExecutor $r6;
        java.util.function.Consumer $r8;

        r0 := @this: android.media.MediaDrm;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.concurrent.Executor;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.util.function.Function;

        $r4 = r0.<android.media.MediaDrm: java.util.Map mListenerMap>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6 = new android.media.MediaDrm$ListenerWithExecutor;

        $r7 = interfaceinvoke r3.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(r2);

        $r8 = (java.util.function.Consumer) $r7;

        specialinvoke $r6.<android.media.MediaDrm$ListenerWithExecutor: void <init>(java.util.concurrent.Executor,java.util.function.Consumer)>(r1, $r8);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r6);

        return;
    }

    private void setListenerWithExecutor(int, java.util.concurrent.Executor, java.lang.Object, java.util.function.Function)
    {
        android.media.MediaDrm r0;
        int i0;
        java.util.concurrent.Executor r1;
        java.lang.Object r2;
        java.util.function.Function r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.Object[] $r5;
        java.lang.String $r6;

        r0 := @this: android.media.MediaDrm;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.concurrent.Executor;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.util.function.Function;

        if r1 == null goto label1;

        if r2 == null goto label1;

        specialinvoke r0.<android.media.MediaDrm: void setGenericListener(int,java.util.concurrent.Executor,java.lang.Object,java.util.function.Function)>(i0, r1, r2, r3);

        return;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = newarray (java.lang.Object)[2];

        $r5[0] = r1;

        $r5[1] = r2;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("executor %s listener %s", $r5);

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r4;
    }

    private void setListenerWithHandler(int, android.os.Handler, java.lang.Object, java.util.function.Function)
    {
        android.media.MediaDrm r0;
        int i0;
        java.lang.Object r1;
        java.util.function.Function r2;
        android.os.HandlerExecutor $r3;
        android.os.Handler r4;

        r0 := @this: android.media.MediaDrm;

        i0 := @parameter0: int;

        r4 := @parameter1: android.os.Handler;

        r1 := @parameter2: java.lang.Object;

        r2 := @parameter3: java.util.function.Function;

        if r1 != null goto label1;

        specialinvoke r0.<android.media.MediaDrm: void clearGenericListener(int)>(i0);

        goto label3;

     label1:
        if r4 != null goto label2;

        r4 = specialinvoke r0.<android.media.MediaDrm: android.os.Handler createHandler()>();

        goto label2;

     label2:
        $r3 = new android.os.HandlerExecutor;

        specialinvoke $r3.<android.os.HandlerExecutor: void <init>(android.os.Handler)>(r4);

        specialinvoke r0.<android.media.MediaDrm: void setGenericListener(int,java.util.concurrent.Executor,java.lang.Object,java.util.function.Function)>(i0, $r3, r1, r2);

     label3:
        return;
    }

    private static final native void setMacAlgorithmNative(android.media.MediaDrm, byte[], java.lang.String);

    private static final native byte[] signNative(android.media.MediaDrm, byte[], byte[], byte[]);

    private static final native byte[] signRSANative(android.media.MediaDrm, byte[], java.lang.String, byte[], byte[]);

    private static final native boolean verifyNative(android.media.MediaDrm, byte[], byte[], byte[], byte[]);

    public void clearOnEventListener()
    {
        android.media.MediaDrm r0;

        r0 := @this: android.media.MediaDrm;

        specialinvoke r0.<android.media.MediaDrm: void clearGenericListener(int)>(200);

        return;
    }

    public void clearOnExpirationUpdateListener()
    {
        android.media.MediaDrm r0;

        r0 := @this: android.media.MediaDrm;

        specialinvoke r0.<android.media.MediaDrm: void clearGenericListener(int)>(201);

        return;
    }

    public void clearOnKeyStatusChangeListener()
    {
        android.media.MediaDrm r0;

        r0 := @this: android.media.MediaDrm;

        specialinvoke r0.<android.media.MediaDrm: void clearGenericListener(int)>(202);

        return;
    }

    public void clearOnSessionLostStateListener()
    {
        android.media.MediaDrm r0;

        r0 := @this: android.media.MediaDrm;

        specialinvoke r0.<android.media.MediaDrm: void clearGenericListener(int)>(203);

        return;
    }

    public void close()
    {
        android.media.MediaDrm r0;

        r0 := @this: android.media.MediaDrm;

        virtualinvoke r0.<android.media.MediaDrm: void release()>();

        return;
    }

    public native void closeSession(byte[]);

    protected void finalize() throws java.lang.Throwable
    {
        android.media.MediaDrm r0;
        dalvik.system.CloseGuard $r2, $r3;
        java.lang.Throwable $r4;

        r0 := @this: android.media.MediaDrm;

     label1:
        $r2 = r0.<android.media.MediaDrm: dalvik.system.CloseGuard mCloseGuard>;

        if $r2 == null goto label2;

        $r3 = r0.<android.media.MediaDrm: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r3.<dalvik.system.CloseGuard: void warnIfOpen()>();

     label2:
        virtualinvoke r0.<android.media.MediaDrm: void release()>();

     label3:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label4:
        $r4 := @caughtexception;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public android.media.MediaDrm$CertificateRequest getCertificateRequest(int, java.lang.String)
    {
        android.media.MediaDrm r0;
        int i0;
        android.media.MediaDrm$CertificateRequest $r1;
        byte[] $r2;
        java.lang.String $r3, r4;
        android.media.MediaDrm$ProvisionRequest r5;

        r0 := @this: android.media.MediaDrm;

        i0 := @parameter0: int;

        r4 := @parameter1: java.lang.String;

        r5 = specialinvoke r0.<android.media.MediaDrm: android.media.MediaDrm$ProvisionRequest getProvisionRequestNative(int,java.lang.String)>(i0, r4);

        $r1 = new android.media.MediaDrm$CertificateRequest;

        $r2 = virtualinvoke r5.<android.media.MediaDrm$ProvisionRequest: byte[] getData()>();

        $r3 = virtualinvoke r5.<android.media.MediaDrm$ProvisionRequest: java.lang.String getDefaultUrl()>();

        specialinvoke $r1.<android.media.MediaDrm$CertificateRequest: void <init>(byte[],java.lang.String)>($r2, $r3);

        return $r1;
    }

    public native int getConnectedHdcpLevel();

    public android.media.MediaDrm$CryptoSession getCryptoSession(byte[], java.lang.String, java.lang.String)
    {
        android.media.MediaDrm r0;
        byte[] r1;
        java.lang.String r2, r3;
        android.media.MediaDrm$CryptoSession $r4;

        r0 := @this: android.media.MediaDrm;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = new android.media.MediaDrm$CryptoSession;

        specialinvoke $r4.<android.media.MediaDrm$CryptoSession: void <init>(android.media.MediaDrm,byte[],java.lang.String,java.lang.String)>(r0, r1, r2, r3);

        return $r4;
    }

    public native android.media.MediaDrm$KeyRequest getKeyRequest(byte[], byte[], java.lang.String, int, java.util.HashMap) throws android.media.NotProvisionedException;

    public native int getMaxHdcpLevel();

    public native int getMaxSessionCount();

    public android.os.PersistableBundle getMetrics()
    {
        android.media.MediaDrm r0;
        android.os.PersistableBundle $r1;

        r0 := @this: android.media.MediaDrm;

        $r1 = specialinvoke r0.<android.media.MediaDrm: android.os.PersistableBundle getMetricsNative()>();

        return $r1;
    }

    public native java.util.List getOfflineLicenseKeySetIds();

    public native int getOfflineLicenseState(byte[]);

    public native int getOpenSessionCount();

    public native byte[] getPropertyByteArray(java.lang.String);

    public native java.lang.String getPropertyString(java.lang.String);

    public android.media.MediaDrm$ProvisionRequest getProvisionRequest()
    {
        android.media.MediaDrm r0;
        android.media.MediaDrm$ProvisionRequest $r1;

        r0 := @this: android.media.MediaDrm;

        $r1 = specialinvoke r0.<android.media.MediaDrm: android.media.MediaDrm$ProvisionRequest getProvisionRequestNative(int,java.lang.String)>(0, "");

        return $r1;
    }

    public native byte[] getSecureStop(byte[]);

    public native java.util.List getSecureStopIds();

    public native java.util.List getSecureStops();

    public native int getSecurityLevel(byte[]);

    public void lambda$createOnEventListener$0$MediaDrm(android.media.MediaDrm$OnEventListener, android.media.MediaDrm$ListenerArgs)
    {
        android.media.MediaDrm r0;
        android.media.MediaDrm$OnEventListener r1;
        android.media.MediaDrm$ListenerArgs r2;
        int $i0, $i2, $i3, $i4, $i5, $i6;
        byte[] r9, r10, r11;
        java.lang.StringBuilder $r12;
        java.lang.String $r13;

        r0 := @this: android.media.MediaDrm;

        r1 := @parameter0: android.media.MediaDrm$OnEventListener;

        r2 := @parameter1: android.media.MediaDrm$ListenerArgs;

        r9 = staticinvoke <android.media.MediaDrm$ListenerArgs: byte[] access$800(android.media.MediaDrm$ListenerArgs)>(r2);

        r10 = r9;

        $i0 = lengthof r9;

        if $i0 != 0 goto label1;

        r10 = null;

     label1:
        r11 = staticinvoke <android.media.MediaDrm$ListenerArgs: byte[] access$1200(android.media.MediaDrm$ListenerArgs)>(r2);

        if r11 == null goto label2;

        $i2 = lengthof r11;

        if $i2 != 0 goto label2;

        r11 = null;

        goto label2;

     label2:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Drm event (");

        $i3 = staticinvoke <android.media.MediaDrm$ListenerArgs: int access$1300(android.media.MediaDrm$ListenerArgs)>(r2);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $i4 = staticinvoke <android.media.MediaDrm$ListenerArgs: int access$1400(android.media.MediaDrm$ListenerArgs)>(r2);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MediaDrm", $r13);

        $i5 = staticinvoke <android.media.MediaDrm$ListenerArgs: int access$1300(android.media.MediaDrm$ListenerArgs)>(r2);

        $i6 = staticinvoke <android.media.MediaDrm$ListenerArgs: int access$1400(android.media.MediaDrm$ListenerArgs)>(r2);

        interfaceinvoke r1.<android.media.MediaDrm$OnEventListener: void onEvent(android.media.MediaDrm,byte[],int,int,byte[])>(r0, r10, $i5, $i6, r11);

        return;
    }

    public void lambda$createOnExpirationUpdateListener$2$MediaDrm(android.media.MediaDrm$OnExpirationUpdateListener, android.media.MediaDrm$ListenerArgs)
    {
        android.media.MediaDrm r0;
        android.media.MediaDrm$OnExpirationUpdateListener r1;
        byte[] r2;
        long l0;
        int $i1;
        java.lang.StringBuilder $r3;
        java.lang.String $r6;
        android.media.MediaDrm$ListenerArgs r7;

        r0 := @this: android.media.MediaDrm;

        r1 := @parameter0: android.media.MediaDrm$OnExpirationUpdateListener;

        r7 := @parameter1: android.media.MediaDrm$ListenerArgs;

        r2 = staticinvoke <android.media.MediaDrm$ListenerArgs: byte[] access$800(android.media.MediaDrm$ListenerArgs)>(r7);

        $i1 = lengthof r2;

        if $i1 <= 0 goto label1;

        l0 = staticinvoke <android.media.MediaDrm$ListenerArgs: long access$900(android.media.MediaDrm$ListenerArgs)>(r7);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Drm key expiration update: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MediaDrm", $r6);

        interfaceinvoke r1.<android.media.MediaDrm$OnExpirationUpdateListener: void onExpirationUpdate(android.media.MediaDrm,byte[],long)>(r0, r2, l0);

     label1:
        return;
    }

    public void lambda$createOnKeyStatusChangeListener$1$MediaDrm(android.media.MediaDrm$OnKeyStatusChangeListener, android.media.MediaDrm$ListenerArgs)
    {
        android.media.MediaDrm r0;
        android.media.MediaDrm$OnKeyStatusChangeListener r1;
        android.media.MediaDrm$ListenerArgs r2;
        byte[] r3;
        java.util.List r4;
        boolean z0;
        int $i0;

        r0 := @this: android.media.MediaDrm;

        r1 := @parameter0: android.media.MediaDrm$OnKeyStatusChangeListener;

        r2 := @parameter1: android.media.MediaDrm$ListenerArgs;

        r3 = staticinvoke <android.media.MediaDrm$ListenerArgs: byte[] access$800(android.media.MediaDrm$ListenerArgs)>(r2);

        $i0 = lengthof r3;

        if $i0 <= 0 goto label1;

        r4 = staticinvoke <android.media.MediaDrm$ListenerArgs: java.util.List access$1000(android.media.MediaDrm$ListenerArgs)>(r2);

        z0 = staticinvoke <android.media.MediaDrm$ListenerArgs: boolean access$1100(android.media.MediaDrm$ListenerArgs)>(r2);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MediaDrm", "Drm key status changed");

        interfaceinvoke r1.<android.media.MediaDrm$OnKeyStatusChangeListener: void onKeyStatusChange(android.media.MediaDrm,byte[],java.util.List,boolean)>(r0, r3, r4, z0);

     label1:
        return;
    }

    public void lambda$createOnSessionLostStateListener$3$MediaDrm(android.media.MediaDrm$OnSessionLostStateListener, android.media.MediaDrm$ListenerArgs)
    {
        android.media.MediaDrm r0;
        android.media.MediaDrm$OnSessionLostStateListener r1;
        android.media.MediaDrm$ListenerArgs r2;
        byte[] r3;

        r0 := @this: android.media.MediaDrm;

        r1 := @parameter0: android.media.MediaDrm$OnSessionLostStateListener;

        r2 := @parameter1: android.media.MediaDrm$ListenerArgs;

        r3 = staticinvoke <android.media.MediaDrm$ListenerArgs: byte[] access$800(android.media.MediaDrm$ListenerArgs)>(r2);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MediaDrm", "Drm session lost state event: ");

        interfaceinvoke r1.<android.media.MediaDrm$OnSessionLostStateListener: void onSessionLostState(android.media.MediaDrm,byte[])>(r0, r3);

        return;
    }

    public final native void native_release();

    public byte[] openSession() throws android.media.NotProvisionedException, android.media.ResourceBusyException
    {
        android.media.MediaDrm r0;
        int $i0;
        byte[] $r1;

        r0 := @this: android.media.MediaDrm;

        $i0 = staticinvoke <android.media.MediaDrm: int getMaxSecurityLevel()>();

        $r1 = virtualinvoke r0.<android.media.MediaDrm: byte[] openSession(int)>($i0);

        return $r1;
    }

    public native byte[] openSession(int) throws android.media.NotProvisionedException, android.media.ResourceBusyException;

    public android.media.MediaDrm$Certificate provideCertificateResponse(byte[]) throws android.media.DeniedByServerException
    {
        android.media.MediaDrm r0;
        byte[] r1;
        android.media.MediaDrm$Certificate $r2;

        r0 := @this: android.media.MediaDrm;

        r1 := @parameter0: byte[];

        $r2 = specialinvoke r0.<android.media.MediaDrm: android.media.MediaDrm$Certificate provideProvisionResponseNative(byte[])>(r1);

        return $r2;
    }

    public native byte[] provideKeyResponse(byte[], byte[]) throws android.media.NotProvisionedException, android.media.DeniedByServerException;

    public void provideProvisionResponse(byte[]) throws android.media.DeniedByServerException
    {
        android.media.MediaDrm r0;
        byte[] r1;

        r0 := @this: android.media.MediaDrm;

        r1 := @parameter0: byte[];

        specialinvoke r0.<android.media.MediaDrm: android.media.MediaDrm$Certificate provideProvisionResponseNative(byte[])>(r1);

        return;
    }

    public native java.util.HashMap queryKeyStatus(byte[]);

    public void release()
    {
        android.media.MediaDrm r0;
        dalvik.system.CloseGuard $r1;
        java.util.concurrent.atomic.AtomicBoolean $r2;
        boolean $z0;

        r0 := @this: android.media.MediaDrm;

        $r1 = r0.<android.media.MediaDrm: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r1.<dalvik.system.CloseGuard: void close()>();

        $r2 = r0.<android.media.MediaDrm: java.util.concurrent.atomic.AtomicBoolean mClosed>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<android.media.MediaDrm: void native_release()>();

     label1:
        return;
    }

    public void releaseAllSecureStops()
    {
        android.media.MediaDrm r0;

        r0 := @this: android.media.MediaDrm;

        virtualinvoke r0.<android.media.MediaDrm: void removeAllSecureStops()>();

        return;
    }

    public native void releaseSecureStops(byte[]);

    public native void removeAllSecureStops();

    public native void removeKeys(byte[]);

    public native void removeOfflineLicense(byte[]);

    public native void removeSecureStop(byte[]);

    public native void restoreKeys(byte[], byte[]);

    public void setOnEventListener(android.media.MediaDrm$OnEventListener)
    {
        android.media.MediaDrm r0;
        android.media.MediaDrm$OnEventListener r1;

        r0 := @this: android.media.MediaDrm;

        r1 := @parameter0: android.media.MediaDrm$OnEventListener;

        virtualinvoke r0.<android.media.MediaDrm: void setOnEventListener(android.media.MediaDrm$OnEventListener,android.os.Handler)>(r1, null);

        return;
    }

    public void setOnEventListener(android.media.MediaDrm$OnEventListener, android.os.Handler)
    {
        android.media.MediaDrm r0;
        android.media.MediaDrm$OnEventListener r1;
        android.os.Handler r2;
        android.media._$$Lambda$MediaDrm$IvEWhXQgSYABwC6_1bdnhTJ4V2I $r3;

        r0 := @this: android.media.MediaDrm;

        r1 := @parameter0: android.media.MediaDrm$OnEventListener;

        r2 := @parameter1: android.os.Handler;

        $r3 = new android.media._$$Lambda$MediaDrm$IvEWhXQgSYABwC6_1bdnhTJ4V2I;

        specialinvoke $r3.<android.media._$$Lambda$MediaDrm$IvEWhXQgSYABwC6_1bdnhTJ4V2I: void <init>(android.media.MediaDrm)>(r0);

        specialinvoke r0.<android.media.MediaDrm: void setListenerWithHandler(int,android.os.Handler,java.lang.Object,java.util.function.Function)>(200, r2, r1, $r3);

        return;
    }

    public void setOnEventListener(java.util.concurrent.Executor, android.media.MediaDrm$OnEventListener)
    {
        android.media.MediaDrm r0;
        java.util.concurrent.Executor r1;
        android.media.MediaDrm$OnEventListener r2;
        android.media._$$Lambda$MediaDrm$IvEWhXQgSYABwC6_1bdnhTJ4V2I $r3;

        r0 := @this: android.media.MediaDrm;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: android.media.MediaDrm$OnEventListener;

        $r3 = new android.media._$$Lambda$MediaDrm$IvEWhXQgSYABwC6_1bdnhTJ4V2I;

        specialinvoke $r3.<android.media._$$Lambda$MediaDrm$IvEWhXQgSYABwC6_1bdnhTJ4V2I: void <init>(android.media.MediaDrm)>(r0);

        specialinvoke r0.<android.media.MediaDrm: void setListenerWithExecutor(int,java.util.concurrent.Executor,java.lang.Object,java.util.function.Function)>(200, r1, r2, $r3);

        return;
    }

    public void setOnExpirationUpdateListener(android.media.MediaDrm$OnExpirationUpdateListener, android.os.Handler)
    {
        android.media.MediaDrm r0;
        android.media.MediaDrm$OnExpirationUpdateListener r1;
        android.os.Handler r2;
        android.media._$$Lambda$MediaDrm$dloezJ1eKxYxi1Oq_oYrMXoRpPM $r3;

        r0 := @this: android.media.MediaDrm;

        r1 := @parameter0: android.media.MediaDrm$OnExpirationUpdateListener;

        r2 := @parameter1: android.os.Handler;

        $r3 = new android.media._$$Lambda$MediaDrm$dloezJ1eKxYxi1Oq_oYrMXoRpPM;

        specialinvoke $r3.<android.media._$$Lambda$MediaDrm$dloezJ1eKxYxi1Oq_oYrMXoRpPM: void <init>(android.media.MediaDrm)>(r0);

        specialinvoke r0.<android.media.MediaDrm: void setListenerWithHandler(int,android.os.Handler,java.lang.Object,java.util.function.Function)>(201, r2, r1, $r3);

        return;
    }

    public void setOnExpirationUpdateListener(java.util.concurrent.Executor, android.media.MediaDrm$OnExpirationUpdateListener)
    {
        android.media.MediaDrm r0;
        java.util.concurrent.Executor r1;
        android.media.MediaDrm$OnExpirationUpdateListener r2;
        android.media._$$Lambda$MediaDrm$dloezJ1eKxYxi1Oq_oYrMXoRpPM $r3;

        r0 := @this: android.media.MediaDrm;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: android.media.MediaDrm$OnExpirationUpdateListener;

        $r3 = new android.media._$$Lambda$MediaDrm$dloezJ1eKxYxi1Oq_oYrMXoRpPM;

        specialinvoke $r3.<android.media._$$Lambda$MediaDrm$dloezJ1eKxYxi1Oq_oYrMXoRpPM: void <init>(android.media.MediaDrm)>(r0);

        specialinvoke r0.<android.media.MediaDrm: void setListenerWithExecutor(int,java.util.concurrent.Executor,java.lang.Object,java.util.function.Function)>(201, r1, r2, $r3);

        return;
    }

    public void setOnKeyStatusChangeListener(android.media.MediaDrm$OnKeyStatusChangeListener, android.os.Handler)
    {
        android.media.MediaDrm r0;
        android.media.MediaDrm$OnKeyStatusChangeListener r1;
        android.os.Handler r2;
        android.media._$$Lambda$MediaDrm$V4Xmxq2t4qcaWIsuRLRluTj6MT0 $r3;

        r0 := @this: android.media.MediaDrm;

        r1 := @parameter0: android.media.MediaDrm$OnKeyStatusChangeListener;

        r2 := @parameter1: android.os.Handler;

        $r3 = new android.media._$$Lambda$MediaDrm$V4Xmxq2t4qcaWIsuRLRluTj6MT0;

        specialinvoke $r3.<android.media._$$Lambda$MediaDrm$V4Xmxq2t4qcaWIsuRLRluTj6MT0: void <init>(android.media.MediaDrm)>(r0);

        specialinvoke r0.<android.media.MediaDrm: void setListenerWithHandler(int,android.os.Handler,java.lang.Object,java.util.function.Function)>(202, r2, r1, $r3);

        return;
    }

    public void setOnKeyStatusChangeListener(java.util.concurrent.Executor, android.media.MediaDrm$OnKeyStatusChangeListener)
    {
        android.media.MediaDrm r0;
        java.util.concurrent.Executor r1;
        android.media.MediaDrm$OnKeyStatusChangeListener r2;
        android.media._$$Lambda$MediaDrm$V4Xmxq2t4qcaWIsuRLRluTj6MT0 $r3;

        r0 := @this: android.media.MediaDrm;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: android.media.MediaDrm$OnKeyStatusChangeListener;

        $r3 = new android.media._$$Lambda$MediaDrm$V4Xmxq2t4qcaWIsuRLRluTj6MT0;

        specialinvoke $r3.<android.media._$$Lambda$MediaDrm$V4Xmxq2t4qcaWIsuRLRluTj6MT0: void <init>(android.media.MediaDrm)>(r0);

        specialinvoke r0.<android.media.MediaDrm: void setListenerWithExecutor(int,java.util.concurrent.Executor,java.lang.Object,java.util.function.Function)>(202, r1, r2, $r3);

        return;
    }

    public void setOnSessionLostStateListener(android.media.MediaDrm$OnSessionLostStateListener, android.os.Handler)
    {
        android.media.MediaDrm r0;
        android.media.MediaDrm$OnSessionLostStateListener r1;
        android.os.Handler r2;
        android.media._$$Lambda$MediaDrm$o5lC7TOBZhvtA31JYaLa_MogSw4 $r3;

        r0 := @this: android.media.MediaDrm;

        r1 := @parameter0: android.media.MediaDrm$OnSessionLostStateListener;

        r2 := @parameter1: android.os.Handler;

        $r3 = new android.media._$$Lambda$MediaDrm$o5lC7TOBZhvtA31JYaLa_MogSw4;

        specialinvoke $r3.<android.media._$$Lambda$MediaDrm$o5lC7TOBZhvtA31JYaLa_MogSw4: void <init>(android.media.MediaDrm)>(r0);

        specialinvoke r0.<android.media.MediaDrm: void setListenerWithHandler(int,android.os.Handler,java.lang.Object,java.util.function.Function)>(203, r2, r1, $r3);

        return;
    }

    public void setOnSessionLostStateListener(java.util.concurrent.Executor, android.media.MediaDrm$OnSessionLostStateListener)
    {
        android.media.MediaDrm r0;
        java.util.concurrent.Executor r1;
        android.media.MediaDrm$OnSessionLostStateListener r2;
        android.media._$$Lambda$MediaDrm$o5lC7TOBZhvtA31JYaLa_MogSw4 $r3;

        r0 := @this: android.media.MediaDrm;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: android.media.MediaDrm$OnSessionLostStateListener;

        $r3 = new android.media._$$Lambda$MediaDrm$o5lC7TOBZhvtA31JYaLa_MogSw4;

        specialinvoke $r3.<android.media._$$Lambda$MediaDrm$o5lC7TOBZhvtA31JYaLa_MogSw4: void <init>(android.media.MediaDrm)>(r0);

        specialinvoke r0.<android.media.MediaDrm: void setListenerWithExecutor(int,java.util.concurrent.Executor,java.lang.Object,java.util.function.Function)>(203, r1, r2, $r3);

        return;
    }

    public native void setPropertyByteArray(java.lang.String, byte[]);

    public native void setPropertyString(java.lang.String, java.lang.String);

    public byte[] signRSA(byte[], java.lang.String, byte[], byte[])
    {
        android.media.MediaDrm r0;
        byte[] r1, r3, r4, $r5;
        java.lang.String r2;

        r0 := @this: android.media.MediaDrm;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: byte[];

        r4 := @parameter3: byte[];

        $r5 = staticinvoke <android.media.MediaDrm: byte[] signRSANative(android.media.MediaDrm,byte[],java.lang.String,byte[],byte[])>(r0, r1, r2, r3, r4);

        return $r5;
    }
}
