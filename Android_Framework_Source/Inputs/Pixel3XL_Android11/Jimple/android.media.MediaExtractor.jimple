public final class android.media.MediaExtractor extends java.lang.Object
{
    public static final int SAMPLE_FLAG_ENCRYPTED;
    public static final int SAMPLE_FLAG_PARTIAL_FRAME;
    public static final int SAMPLE_FLAG_SYNC;
    public static final int SEEK_TO_CLOSEST_SYNC;
    public static final int SEEK_TO_NEXT_SYNC;
    public static final int SEEK_TO_PREVIOUS_SYNC;
    private android.media.MediaCas mMediaCas;
    private long mNativeContext;

    static void <clinit>()
    {
        <android.media.MediaExtractor: int SEEK_TO_PREVIOUS_SYNC> = 0;

        <android.media.MediaExtractor: int SEEK_TO_NEXT_SYNC> = 1;

        <android.media.MediaExtractor: int SEEK_TO_CLOSEST_SYNC> = 2;

        <android.media.MediaExtractor: int SAMPLE_FLAG_SYNC> = 1;

        <android.media.MediaExtractor: int SAMPLE_FLAG_PARTIAL_FRAME> = 4;

        <android.media.MediaExtractor: int SAMPLE_FLAG_ENCRYPTED> = 2;

        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("media_jni");

        staticinvoke <android.media.MediaExtractor: void native_init()>();

        return;
    }

    public void <init>()
    {
        android.media.MediaExtractor r0;

        r0 := @this: android.media.MediaExtractor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        specialinvoke r0.<android.media.MediaExtractor: void native_setup()>();

        return;
    }

    private native java.util.Map getFileFormatNative();

    private native java.util.Map getTrackFormatNative(int);

    static android.media.DrmInitData$SchemeInitData lambda$getDrmInitData$0(java.util.Map$Entry)
    {
        java.util.Map$Entry r0;
        android.media.DrmInitData$SchemeInitData $r1;
        java.lang.Object $r2, $r4;
        java.util.UUID $r3;
        byte[] $r5;

        r0 := @parameter0: java.util.Map$Entry;

        $r1 = new android.media.DrmInitData$SchemeInitData;

        $r2 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r3 = (java.util.UUID) $r2;

        $r4 = interfaceinvoke r0.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r5 = (byte[]) $r4;

        specialinvoke $r1.<android.media.DrmInitData$SchemeInitData: void <init>(java.util.UUID,java.lang.String,byte[])>($r3, "cenc", $r5);

        return $r1;
    }

    static android.media.DrmInitData$SchemeInitData[] lambda$getDrmInitData$1(int)
    {
        int i0;
        android.media.DrmInitData$SchemeInitData[] $r0;

        i0 := @parameter0: int;

        $r0 = newarray (android.media.DrmInitData$SchemeInitData)[i0];

        return $r0;
    }

    static java.util.UUID lambda$getDrmInitData$2(android.media.DrmInitData$SchemeInitData)
    {
        android.media.DrmInitData$SchemeInitData r0;
        java.util.UUID $r1;

        r0 := @parameter0: android.media.DrmInitData$SchemeInitData;

        $r1 = r0.<android.media.DrmInitData$SchemeInitData: java.util.UUID uuid>;

        return $r1;
    }

    static android.media.DrmInitData$SchemeInitData lambda$getDrmInitData$3(android.media.DrmInitData$SchemeInitData)
    {
        android.media.DrmInitData$SchemeInitData r0;

        r0 := @parameter0: android.media.DrmInitData$SchemeInitData;

        return r0;
    }

    private final native void nativeSetDataSource(android.os.IBinder, java.lang.String, java.lang.String[], java.lang.String[]) throws java.io.IOException;

    private final native void nativeSetMediaCas(android.os.IHwBinder);

    private final native void native_finalize();

    private native java.util.List native_getAudioPresentations(int);

    private native android.os.PersistableBundle native_getMetrics();

    private static final native void native_init();

    private final native void native_setup();

    private java.util.ArrayList toByteArray(byte[])
    {
        android.media.MediaExtractor r0;
        byte[] r1;
        java.util.ArrayList $r3;
        int $i0, $i1, i3;
        byte $b2;
        java.lang.Byte $r4;

        r0 := @this: android.media.MediaExtractor;

        r1 := @parameter0: byte[];

        $r3 = new java.util.ArrayList;

        $i0 = lengthof r1;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i0);

        i3 = 0;

     label1:
        $i1 = lengthof r1;

        if i3 >= $i1 goto label2;

        $b2 = r1[i3];

        $r4 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b2);

        virtualinvoke $r3.<java.util.ArrayList: void add(int,java.lang.Object)>(i3, $r4);

        i3 = i3 + 1;

        goto label1;

     label2:
        return $r3;
    }

    public native boolean advance();

    protected void finalize()
    {
        android.media.MediaExtractor r0;

        r0 := @this: android.media.MediaExtractor;

        specialinvoke r0.<android.media.MediaExtractor: void native_finalize()>();

        return;
    }

    public java.util.List getAudioPresentations(int)
    {
        android.media.MediaExtractor r0;
        int i0;
        java.util.List $r1;

        r0 := @this: android.media.MediaExtractor;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<android.media.MediaExtractor: java.util.List native_getAudioPresentations(int)>(i0);

        return $r1;
    }

    public native long getCachedDuration();

    public android.media.MediaExtractor$CasInfo getCasInfo(int)
    {
        android.media.MediaExtractor r0;
        java.util.Map r1;
        boolean $z0, $z1, $z2;
        java.lang.Object $r2, $r5, $r8;
        java.lang.Integer $r3;
        android.media.MediaCas $r4, $r6;
        int $i0, $i1, i2, i3;
        java.util.ArrayList $r7;
        byte[] r9, r13;
        java.nio.ByteBuffer r10, r12;
        android.media.MediaCas$Session r11;
        android.media.MediaExtractor$CasInfo $r14;

        r0 := @this: android.media.MediaExtractor;

        i2 := @parameter0: int;

        r1 = specialinvoke r0.<android.media.MediaExtractor: java.util.Map getTrackFormatNative(int)>(i2);

        $z0 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>("ca-system-id");

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("ca-system-id");

        $r3 = (java.lang.Integer) $r2;

        i3 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        r9 = null;

        $z1 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>("ca-private-data");

        if $z1 == 0 goto label1;

        $r8 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("ca-private-data");

        r10 = (java.nio.ByteBuffer) $r8;

        virtualinvoke r10.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        $i1 = virtualinvoke r10.<java.nio.ByteBuffer: int remaining()>();

        r9 = newarray (byte)[$i1];

        virtualinvoke r10.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r9);

     label1:
        r11 = null;

        $r4 = r0.<android.media.MediaExtractor: android.media.MediaCas mMediaCas>;

        if $r4 == null goto label2;

        r11 = null;

        $z2 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>("ca-session-id");

        if $z2 == 0 goto label2;

        $r5 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("ca-session-id");

        r12 = (java.nio.ByteBuffer) $r5;

        virtualinvoke r12.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        $i0 = virtualinvoke r12.<java.nio.ByteBuffer: int remaining()>();

        r13 = newarray (byte)[$i0];

        virtualinvoke r12.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r13);

        $r6 = r0.<android.media.MediaExtractor: android.media.MediaCas mMediaCas>;

        $r7 = specialinvoke r0.<android.media.MediaExtractor: java.util.ArrayList toByteArray(byte[])>(r13);

        r11 = virtualinvoke $r6.<android.media.MediaCas: android.media.MediaCas$Session createFromSessionId(java.util.ArrayList)>($r7);

     label2:
        $r14 = new android.media.MediaExtractor$CasInfo;

        specialinvoke $r14.<android.media.MediaExtractor$CasInfo: void <init>(int,android.media.MediaCas$Session,byte[])>(i3, r11, r9);

        return $r14;

     label3:
        return null;
    }

    public android.media.DrmInitData getDrmInitData()
    {
        android.media.MediaExtractor r0;
        int i0, $i1, i2;
        byte[] r1;
        boolean $z0, $z1;
        java.lang.Object $r2, $r19;
        java.util.UUID $r7;
        java.util.Set $r8;
        java.util.stream.Stream $r9, $r11, $r15;
        android.media.'-$$Lambda$MediaExtractor$AQWHHMUeHgJTkS0k0b0xoZxPezM' $r10;
        android.media.'-$$Lambda$MediaExtractor$XTtCu2qZqPfrj1LW7KOxdVVSgoY' $r12;
        java.lang.Object[] $r13;
        android.media.'-$$Lambda$MediaExtractor$j4boqJIEvcYyVawgtNNWskNKVz8' $r16;
        android.media.'-$$Lambda$MediaExtractor$R3OLaOzRieGuaOtoydwuYEiQATg' $r17;
        java.util.stream.Collector $r18;
        java.util.Map $r20, r21, r22, r24;
        android.media.DrmInitData$SchemeInitData[] r23;
        java.nio.ByteBuffer r25;
        android.media.MediaExtractor$1 r26;
        android.media.DrmInitData$SchemeInitData r27;
        android.media.MediaExtractor$2 r28;
        java.util.function.Function r29, r31, r32;
        java.util.function.IntFunction r30;

        r0 := @this: android.media.MediaExtractor;

        r21 = specialinvoke r0.<android.media.MediaExtractor: java.util.Map getFileFormatNative()>();

        if r21 != null goto label1;

        return null;

     label1:
        $z0 = interfaceinvoke r21.<java.util.Map: boolean containsKey(java.lang.Object)>("pssh");

        if $z0 == 0 goto label2;

        r22 = virtualinvoke r0.<android.media.MediaExtractor: java.util.Map getPsshInfo()>();

        $r8 = interfaceinvoke r22.<java.util.Map: java.util.Set entrySet()>();

        $r9 = interfaceinvoke $r8.<java.util.Set: java.util.stream.Stream stream()>();

        $r10 = <android.media._$$Lambda$MediaExtractor$AQWHHMUeHgJTkS0k0b0xoZxPezM: android.media.'-$$Lambda$MediaExtractor$AQWHHMUeHgJTkS0k0b0xoZxPezM' INSTANCE>;

        r29 = (java.util.function.Function) $r10;

        $r11 = interfaceinvoke $r9.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(r29);

        $r12 = <android.media._$$Lambda$MediaExtractor$XTtCu2qZqPfrj1LW7KOxdVVSgoY: android.media.'-$$Lambda$MediaExtractor$XTtCu2qZqPfrj1LW7KOxdVVSgoY' INSTANCE>;

        r30 = (java.util.function.IntFunction) $r12;

        $r13 = interfaceinvoke $r11.<java.util.stream.Stream: java.lang.Object[] toArray(java.util.function.IntFunction)>(r30);

        r23 = (android.media.DrmInitData$SchemeInitData[]) $r13;

        r26 = new android.media.MediaExtractor$1;

        $r15 = staticinvoke <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>(r23);

        $r17 = <android.media._$$Lambda$MediaExtractor$R3OLaOzRieGuaOtoydwuYEiQATg: android.media.'-$$Lambda$MediaExtractor$R3OLaOzRieGuaOtoydwuYEiQATg' INSTANCE>;

        $r16 = <android.media._$$Lambda$MediaExtractor$j4boqJIEvcYyVawgtNNWskNKVz8: android.media.'-$$Lambda$MediaExtractor$j4boqJIEvcYyVawgtNNWskNKVz8' INSTANCE>;

        r31 = (java.util.function.Function) $r17;

        r32 = (java.util.function.Function) $r16;

        $r18 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>(r31, r32);

        $r19 = interfaceinvoke $r15.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r18);

        $r20 = (java.util.Map) $r19;

        specialinvoke r26.<android.media.MediaExtractor$1: void <init>(android.media.MediaExtractor,java.util.Map,android.media.DrmInitData$SchemeInitData[])>(r0, $r20, r23);

        return r26;

     label2:
        i0 = virtualinvoke r0.<android.media.MediaExtractor: int getTrackCount()>();

        i2 = 0;

     label3:
        if i2 >= i0 goto label5;

        r24 = specialinvoke r0.<android.media.MediaExtractor: java.util.Map getTrackFormatNative(int)>(i2);

        $z1 = interfaceinvoke r24.<java.util.Map: boolean containsKey(java.lang.Object)>("crypto-key");

        if $z1 != 0 goto label4;

        i2 = i2 + 1;

        goto label3;

     label4:
        $r2 = interfaceinvoke r24.<java.util.Map: java.lang.Object get(java.lang.Object)>("crypto-key");

        r25 = (java.nio.ByteBuffer) $r2;

        virtualinvoke r25.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        $i1 = virtualinvoke r25.<java.nio.ByteBuffer: int remaining()>();

        r1 = newarray (byte)[$i1];

        virtualinvoke r25.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r1);

        r28 = new android.media.MediaExtractor$2;

        r27 = new android.media.DrmInitData$SchemeInitData;

        $r7 = <android.media.DrmInitData$SchemeInitData: java.util.UUID UUID_NIL>;

        specialinvoke r27.<android.media.DrmInitData$SchemeInitData: void <init>(java.util.UUID,java.lang.String,byte[])>($r7, "webm", r1);

        specialinvoke r28.<android.media.MediaExtractor$2: void <init>(android.media.MediaExtractor,android.media.DrmInitData$SchemeInitData)>(r0, r27);

        return r28;

     label5:
        return null;
    }

    public android.os.PersistableBundle getMetrics()
    {
        android.media.MediaExtractor r0;
        android.os.PersistableBundle $r1;

        r0 := @this: android.media.MediaExtractor;

        $r1 = specialinvoke r0.<android.media.MediaExtractor: android.os.PersistableBundle native_getMetrics()>();

        return $r1;
    }

    public java.util.Map getPsshInfo()
    {
        android.media.MediaExtractor r0;
        java.nio.ByteBuffer r1;
        boolean $z0;
        java.lang.Object $r2;
        java.nio.ByteOrder $r3, $r5, $r7;
        java.util.HashMap $r4, r9;
        int $i0, $i3;
        java.util.UUID $r6;
        long $l1, $l2;
        java.util.Map r8;
        byte[] r12;

        r0 := @this: android.media.MediaExtractor;

        r8 = specialinvoke r0.<android.media.MediaExtractor: java.util.Map getFileFormatNative()>();

        r9 = null;

        if r8 == null goto label2;

        r9 = null;

        $z0 = interfaceinvoke r8.<java.util.Map: boolean containsKey(java.lang.Object)>("pssh");

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r8.<java.util.Map: java.lang.Object get(java.lang.Object)>("pssh");

        r1 = (java.nio.ByteBuffer) $r2;

        $r3 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r3);

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        interfaceinvoke r8.<java.util.Map: java.lang.Object remove(java.lang.Object)>("pssh");

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

     label1:
        r9 = $r4;

        $i0 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        if $i0 <= 0 goto label2;

        $r5 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r5);

        $r6 = new java.util.UUID;

        $l1 = virtualinvoke r1.<java.nio.ByteBuffer: long getLong()>();

        $l2 = virtualinvoke r1.<java.nio.ByteBuffer: long getLong()>();

        specialinvoke $r6.<java.util.UUID: void <init>(long,long)>($l1, $l2);

        $r7 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r7);

        $i3 = virtualinvoke r1.<java.nio.ByteBuffer: int getInt()>();

        r12 = newarray (byte)[$i3];

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r12);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r12);

        goto label1;

     label2:
        return r9;
    }

    public native boolean getSampleCryptoInfo(android.media.MediaCodec$CryptoInfo);

    public native int getSampleFlags();

    public native long getSampleSize();

    public native long getSampleTime();

    public native int getSampleTrackIndex();

    public final native int getTrackCount();

    public android.media.MediaFormat getTrackFormat(int)
    {
        android.media.MediaExtractor r0;
        int i0;
        android.media.MediaFormat $r1;
        java.util.Map $r2;

        r0 := @this: android.media.MediaExtractor;

        i0 := @parameter0: int;

        $r1 = new android.media.MediaFormat;

        $r2 = specialinvoke r0.<android.media.MediaExtractor: java.util.Map getTrackFormatNative(int)>(i0);

        specialinvoke $r1.<android.media.MediaFormat: void <init>(java.util.Map)>($r2);

        return $r1;
    }

    public native boolean hasCacheReachedEndOfStream();

    public native int readSampleData(java.nio.ByteBuffer, int);

    public final native void release();

    public native void seekTo(long, int);

    public native void selectTrack(int);

    public final void setDataSource(android.content.Context, android.net.Uri, java.util.Map) throws java.io.IOException
    {
        android.media.MediaExtractor r0;
        android.net.Uri r1;
        java.util.Map r2;
        java.lang.String $r3, r11, $r19;
        boolean $z0;
        android.content.ContentResolver $r4;
        long $l0, $l2, $l3;
        byte $b1;
        java.io.FileDescriptor $r5, $r6;
        java.lang.Throwable $r7, $r8, $r9;
        android.content.Context r10;
        android.content.res.AssetFileDescriptor r12, r13, r14, r15;

        r0 := @this: android.media.MediaExtractor;

        r10 := @parameter0: android.content.Context;

        r1 := @parameter1: android.net.Uri;

        r2 := @parameter2: java.util.Map;

        r11 = virtualinvoke r1.<android.net.Uri: java.lang.String getScheme()>();

        if r11 == null goto label20;

        $z0 = virtualinvoke r11.<java.lang.String: boolean equals(java.lang.Object)>("file");

        if $z0 == 0 goto label01;

        goto label20;

     label01:
        r12 = null;

        r13 = null;

        r14 = null;

     label02:
        $r4 = virtualinvoke r10.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r15 = virtualinvoke $r4.<android.content.ContentResolver: android.content.res.AssetFileDescriptor openAssetFileDescriptor(android.net.Uri,java.lang.String)>(r1, "r");

     label03:
        if r15 != null goto label05;

        if r15 == null goto label04;

        virtualinvoke r15.<android.content.res.AssetFileDescriptor: void close()>();

     label04:
        return;

     label05:
        r14 = r15;

        r12 = r15;

        r13 = r15;

     label06:
        $l0 = virtualinvoke r15.<android.content.res.AssetFileDescriptor: long getDeclaredLength()>();

        $b1 = $l0 cmp 0L;

        if $b1 >= 0 goto label10;

     label07:
        r14 = r15;

        r12 = r15;

        r13 = r15;

     label08:
        $r6 = virtualinvoke r15.<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        virtualinvoke r0.<android.media.MediaExtractor: void setDataSource(java.io.FileDescriptor)>($r6);

     label09:
        goto label12;

     label10:
        r14 = r15;

        r12 = r15;

        r13 = r15;

     label11:
        $r5 = virtualinvoke r15.<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        $l2 = virtualinvoke r15.<android.content.res.AssetFileDescriptor: long getStartOffset()>();

        $l3 = virtualinvoke r15.<android.content.res.AssetFileDescriptor: long getDeclaredLength()>();

        virtualinvoke r0.<android.media.MediaExtractor: void setDataSource(java.io.FileDescriptor,long,long)>($r5, $l2, $l3);

     label12:
        if r15 == null goto label13;

        virtualinvoke r15.<android.content.res.AssetFileDescriptor: void close()>();

     label13:
        return;

     label14:
        $r7 := @caughtexception;

        if r14 == null goto label15;

        virtualinvoke r14.<android.content.res.AssetFileDescriptor: void close()>();

     label15:
        throw $r7;

     label16:
        $r9 := @caughtexception;

        if r12 == null goto label19;

     label17:
        virtualinvoke r12.<android.content.res.AssetFileDescriptor: void close()>();

        goto label19;

     label18:
        $r8 := @caughtexception;

        if r13 == null goto label19;

        r12 = r13;

        goto label17;

     label19:
        $r19 = virtualinvoke r1.<android.net.Uri: java.lang.String toString()>();

        virtualinvoke r0.<android.media.MediaExtractor: void setDataSource(java.lang.String,java.util.Map)>($r19, r2);

        return;

     label20:
        $r3 = virtualinvoke r1.<android.net.Uri: java.lang.String getPath()>();

        virtualinvoke r0.<android.media.MediaExtractor: void setDataSource(java.lang.String)>($r3);

        return;

        catch java.lang.SecurityException from label02 to label03 with label18;
        catch java.io.IOException from label02 to label03 with label16;
        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.SecurityException from label06 to label07 with label18;
        catch java.io.IOException from label06 to label07 with label16;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.SecurityException from label08 to label09 with label18;
        catch java.io.IOException from label08 to label09 with label16;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.SecurityException from label11 to label12 with label18;
        catch java.io.IOException from label11 to label12 with label16;
        catch java.lang.Throwable from label11 to label12 with label14;
    }

    public final void setDataSource(android.content.res.AssetFileDescriptor) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException
    {
        android.media.MediaExtractor r0;
        android.content.res.AssetFileDescriptor r1;
        long $l0, $l2, $l3;
        byte $b1;
        java.io.FileDescriptor $r3, $r4;

        r0 := @this: android.media.MediaExtractor;

        r1 := @parameter0: android.content.res.AssetFileDescriptor;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $l0 = virtualinvoke r1.<android.content.res.AssetFileDescriptor: long getDeclaredLength()>();

        $b1 = $l0 cmp 0L;

        if $b1 >= 0 goto label1;

        $r4 = virtualinvoke r1.<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        virtualinvoke r0.<android.media.MediaExtractor: void setDataSource(java.io.FileDescriptor)>($r4);

        goto label2;

     label1:
        $r3 = virtualinvoke r1.<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        $l2 = virtualinvoke r1.<android.content.res.AssetFileDescriptor: long getStartOffset()>();

        $l3 = virtualinvoke r1.<android.content.res.AssetFileDescriptor: long getDeclaredLength()>();

        virtualinvoke r0.<android.media.MediaExtractor: void setDataSource(java.io.FileDescriptor,long,long)>($r3, $l2, $l3);

     label2:
        return;
    }

    public final native void setDataSource(android.media.MediaDataSource) throws java.io.IOException;

    public final void setDataSource(java.io.FileDescriptor) throws java.io.IOException
    {
        android.media.MediaExtractor r0;
        java.io.FileDescriptor r1;

        r0 := @this: android.media.MediaExtractor;

        r1 := @parameter0: java.io.FileDescriptor;

        virtualinvoke r0.<android.media.MediaExtractor: void setDataSource(java.io.FileDescriptor,long,long)>(r1, 0L, 576460752303423487L);

        return;
    }

    public final native void setDataSource(java.io.FileDescriptor, long, long) throws java.io.IOException;

    public final void setDataSource(java.lang.String) throws java.io.IOException
    {
        android.media.MediaExtractor r0;
        java.lang.String r1;
        android.os.IBinder $r2;

        r0 := @this: android.media.MediaExtractor;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <android.media.MediaHTTPService: android.os.IBinder createHttpServiceBinderIfNecessary(java.lang.String)>(r1);

        specialinvoke r0.<android.media.MediaExtractor: void nativeSetDataSource(android.os.IBinder,java.lang.String,java.lang.String[],java.lang.String[])>($r2, r1, null, null);

        return;
    }

    public final void setDataSource(java.lang.String, java.util.Map) throws java.io.IOException
    {
        android.media.MediaExtractor r0;
        java.lang.String r1, $r8, $r10;
        java.lang.String[] r2, r3, r12, r13;
        android.os.IBinder $r4;
        int $i0, $i1, i2;
        java.util.Set $r5;
        boolean $z0;
        java.lang.Object $r6, $r7, $r9;
        java.util.Map r11;
        java.util.Iterator r14;
        java.util.Map$Entry r15;

        r0 := @this: android.media.MediaExtractor;

        r1 := @parameter0: java.lang.String;

        r11 := @parameter1: java.util.Map;

        r12 = null;

        r13 = null;

        if r11 == null goto label2;

        $i0 = interfaceinvoke r11.<java.util.Map: int size()>();

        r2 = newarray (java.lang.String)[$i0];

        $i1 = interfaceinvoke r11.<java.util.Map: int size()>();

        r3 = newarray (java.lang.String)[$i1];

        i2 = 0;

        $r5 = interfaceinvoke r11.<java.util.Map: java.util.Set entrySet()>();

        r14 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        r12 = r2;

        r13 = r3;

        $z0 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        r15 = (java.util.Map$Entry) $r6;

        $r7 = interfaceinvoke r15.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (java.lang.String) $r7;

        r2[i2] = $r8;

        $r9 = interfaceinvoke r15.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (java.lang.String) $r9;

        r3[i2] = $r10;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r4 = staticinvoke <android.media.MediaHTTPService: android.os.IBinder createHttpServiceBinderIfNecessary(java.lang.String)>(r1);

        specialinvoke r0.<android.media.MediaExtractor: void nativeSetDataSource(android.os.IBinder,java.lang.String,java.lang.String[],java.lang.String[])>($r4, r1, r12, r13);

        return;
    }

    public final void setMediaCas(android.media.MediaCas)
    {
        android.media.MediaExtractor r0;
        android.media.MediaCas r1;
        android.os.IHwBinder $r2;

        r0 := @this: android.media.MediaExtractor;

        r1 := @parameter0: android.media.MediaCas;

        r0.<android.media.MediaExtractor: android.media.MediaCas mMediaCas> = r1;

        $r2 = virtualinvoke r1.<android.media.MediaCas: android.os.IHwBinder getBinder()>();

        specialinvoke r0.<android.media.MediaExtractor: void nativeSetMediaCas(android.os.IHwBinder)>($r2);

        return;
    }

    public native void unselectTrack(int);
}
