public final class android.media.MediaFormat extends java.lang.Object
{
    public static final int COLOR_RANGE_FULL;
    public static final int COLOR_RANGE_LIMITED;
    public static final int COLOR_STANDARD_BT2020;
    public static final int COLOR_STANDARD_BT601_NTSC;
    public static final int COLOR_STANDARD_BT601_PAL;
    public static final int COLOR_STANDARD_BT709;
    public static final int COLOR_TRANSFER_HLG;
    public static final int COLOR_TRANSFER_LINEAR;
    public static final int COLOR_TRANSFER_SDR_VIDEO;
    public static final int COLOR_TRANSFER_ST2084;
    public static final java.lang.String KEY_AAC_DRC_ALBUM_MODE;
    public static final java.lang.String KEY_AAC_DRC_ATTENUATION_FACTOR;
    public static final java.lang.String KEY_AAC_DRC_BOOST_FACTOR;
    public static final java.lang.String KEY_AAC_DRC_EFFECT_TYPE;
    public static final java.lang.String KEY_AAC_DRC_HEAVY_COMPRESSION;
    public static final java.lang.String KEY_AAC_DRC_OUTPUT_LOUDNESS;
    public static final java.lang.String KEY_AAC_DRC_TARGET_REFERENCE_LEVEL;
    public static final java.lang.String KEY_AAC_ENCODED_TARGET_LEVEL;
    public static final java.lang.String KEY_AAC_MAX_OUTPUT_CHANNEL_COUNT;
    public static final java.lang.String KEY_AAC_PROFILE;
    public static final java.lang.String KEY_AAC_SBR_MODE;
    public static final java.lang.String KEY_AUDIO_SESSION_ID;
    public static final java.lang.String KEY_BITRATE_MODE;
    public static final java.lang.String KEY_BIT_RATE;
    public static final java.lang.String KEY_CAPTION_SERVICE_NUMBER;
    public static final java.lang.String KEY_CAPTURE_RATE;
    public static final java.lang.String KEY_CA_PRIVATE_DATA;
    public static final java.lang.String KEY_CA_SESSION_ID;
    public static final java.lang.String KEY_CA_SYSTEM_ID;
    public static final java.lang.String KEY_CHANNEL_COUNT;
    public static final java.lang.String KEY_CHANNEL_MASK;
    public static final java.lang.String KEY_CODECS_STRING;
    public static final java.lang.String KEY_COLOR_FORMAT;
    public static final java.lang.String KEY_COLOR_RANGE;
    public static final java.lang.String KEY_COLOR_STANDARD;
    public static final java.lang.String KEY_COLOR_TRANSFER;
    public static final java.lang.String KEY_COMPLEXITY;
    public static final java.lang.String KEY_CREATE_INPUT_SURFACE_SUSPENDED;
    public static final java.lang.String KEY_DURATION;
    public static final java.lang.String KEY_ENCODER_DELAY;
    public static final java.lang.String KEY_ENCODER_PADDING;
    public static final java.lang.String KEY_FEATURE_;
    public static final java.lang.String KEY_FLAC_COMPRESSION_LEVEL;
    public static final java.lang.String KEY_FRAME_RATE;
    public static final java.lang.String KEY_GRID_COLUMNS;
    public static final java.lang.String KEY_GRID_ROWS;
    public static final java.lang.String KEY_HAPTIC_CHANNEL_COUNT;
    public static final java.lang.String KEY_HARDWARE_AV_SYNC_ID;
    public static final java.lang.String KEY_HDR10_PLUS_INFO;
    public static final java.lang.String KEY_HDR_STATIC_INFO;
    public static final java.lang.String KEY_HEIGHT;
    public static final java.lang.String KEY_INTRA_REFRESH_PERIOD;
    public static final java.lang.String KEY_IS_ADTS;
    public static final java.lang.String KEY_IS_AUTOSELECT;
    public static final java.lang.String KEY_IS_DEFAULT;
    public static final java.lang.String KEY_IS_FORCED_SUBTITLE;
    public static final java.lang.String KEY_IS_TIMED_TEXT;
    public static final java.lang.String KEY_I_FRAME_INTERVAL;
    public static final java.lang.String KEY_LANGUAGE;
    public static final java.lang.String KEY_LATENCY;
    public static final java.lang.String KEY_LEVEL;
    public static final java.lang.String KEY_LOW_LATENCY;
    public static final java.lang.String KEY_MAX_BIT_RATE;
    public static final java.lang.String KEY_MAX_B_FRAMES;
    public static final java.lang.String KEY_MAX_FPS_TO_ENCODER;
    public static final java.lang.String KEY_MAX_HEIGHT;
    public static final java.lang.String KEY_MAX_INPUT_SIZE;
    public static final java.lang.String KEY_MAX_PTS_GAP_TO_ENCODER;
    public static final java.lang.String KEY_MAX_WIDTH;
    public static final java.lang.String KEY_MIME;
    public static final java.lang.String KEY_OPERATING_RATE;
    public static final java.lang.String KEY_OUTPUT_REORDER_DEPTH;
    public static final java.lang.String KEY_PCM_ENCODING;
    public static final java.lang.String KEY_PIXEL_ASPECT_RATIO_HEIGHT;
    public static final java.lang.String KEY_PIXEL_ASPECT_RATIO_WIDTH;
    public static final java.lang.String KEY_PREPEND_HEADER_TO_SYNC_FRAMES;
    public static final java.lang.String KEY_PRIORITY;
    public static final java.lang.String KEY_PROFILE;
    public static final java.lang.String KEY_PUSH_BLANK_BUFFERS_ON_STOP;
    public static final java.lang.String KEY_QUALITY;
    public static final java.lang.String KEY_REPEAT_PREVIOUS_FRAME_AFTER;
    public static final java.lang.String KEY_ROTATION;
    public static final java.lang.String KEY_SAMPLE_RATE;
    public static final java.lang.String KEY_SLICE_HEIGHT;
    public static final java.lang.String KEY_STRIDE;
    public static final java.lang.String KEY_TEMPORAL_LAYERING;
    public static final java.lang.String KEY_TILE_HEIGHT;
    public static final java.lang.String KEY_TILE_WIDTH;
    public static final java.lang.String KEY_TRACK_ID;
    public static final java.lang.String KEY_WIDTH;
    public static final java.lang.String MIMETYPE_AUDIO_AAC;
    public static final java.lang.String MIMETYPE_AUDIO_AC3;
    public static final java.lang.String MIMETYPE_AUDIO_AC4;
    public static final java.lang.String MIMETYPE_AUDIO_AMR_NB;
    public static final java.lang.String MIMETYPE_AUDIO_AMR_WB;
    public static final java.lang.String MIMETYPE_AUDIO_EAC3;
    public static final java.lang.String MIMETYPE_AUDIO_EAC3_JOC;
    public static final java.lang.String MIMETYPE_AUDIO_FLAC;
    public static final java.lang.String MIMETYPE_AUDIO_G711_ALAW;
    public static final java.lang.String MIMETYPE_AUDIO_G711_MLAW;
    public static final java.lang.String MIMETYPE_AUDIO_MPEG;
    public static final java.lang.String MIMETYPE_AUDIO_MSGSM;
    public static final java.lang.String MIMETYPE_AUDIO_OPUS;
    public static final java.lang.String MIMETYPE_AUDIO_QCELP;
    public static final java.lang.String MIMETYPE_AUDIO_RAW;
    public static final java.lang.String MIMETYPE_AUDIO_SCRAMBLED;
    public static final java.lang.String MIMETYPE_AUDIO_VORBIS;
    public static final java.lang.String MIMETYPE_IMAGE_ANDROID_HEIC;
    public static final java.lang.String MIMETYPE_TEXT_CEA_608;
    public static final java.lang.String MIMETYPE_TEXT_CEA_708;
    public static final java.lang.String MIMETYPE_TEXT_SUBRIP;
    public static final java.lang.String MIMETYPE_TEXT_VTT;
    public static final java.lang.String MIMETYPE_VIDEO_AV1;
    public static final java.lang.String MIMETYPE_VIDEO_AVC;
    public static final java.lang.String MIMETYPE_VIDEO_DOLBY_VISION;
    public static final java.lang.String MIMETYPE_VIDEO_H263;
    public static final java.lang.String MIMETYPE_VIDEO_HEVC;
    public static final java.lang.String MIMETYPE_VIDEO_MPEG2;
    public static final java.lang.String MIMETYPE_VIDEO_MPEG4;
    public static final java.lang.String MIMETYPE_VIDEO_RAW;
    public static final java.lang.String MIMETYPE_VIDEO_SCRAMBLED;
    public static final java.lang.String MIMETYPE_VIDEO_VP8;
    public static final java.lang.String MIMETYPE_VIDEO_VP9;
    public static final int TYPE_BYTE_BUFFER;
    public static final int TYPE_FLOAT;
    public static final int TYPE_INTEGER;
    public static final int TYPE_LONG;
    public static final int TYPE_NULL;
    public static final int TYPE_STRING;
    private java.util.Map mMap;

    public void <init>()
    {
        android.media.MediaFormat r0;
        java.util.HashMap $r1;

        r0 := @this: android.media.MediaFormat;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<android.media.MediaFormat: java.util.Map mMap> = $r1;

        return;
    }

    public void <init>(android.media.MediaFormat)
    {
        android.media.MediaFormat r0, r1;
        java.util.Map $r2, $r3;

        r0 := @this: android.media.MediaFormat;

        r1 := @parameter0: android.media.MediaFormat;

        specialinvoke r0.<android.media.MediaFormat: void <init>()>();

        $r3 = r0.<android.media.MediaFormat: java.util.Map mMap>;

        $r2 = r1.<android.media.MediaFormat: java.util.Map mMap>;

        interfaceinvoke $r3.<java.util.Map: void putAll(java.util.Map)>($r2);

        return;
    }

    void <init>(java.util.Map)
    {
        android.media.MediaFormat r0;
        java.util.Map r1;

        r0 := @this: android.media.MediaFormat;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.media.MediaFormat: java.util.Map mMap> = r1;

        return;
    }

    static java.util.Map access$000(android.media.MediaFormat)
    {
        android.media.MediaFormat r0;
        java.util.Map $r1;

        r0 := @parameter0: android.media.MediaFormat;

        $r1 = r0.<android.media.MediaFormat: java.util.Map mMap>;

        return $r1;
    }

    public static final android.media.MediaFormat createAudioFormat(java.lang.String, int, int)
    {
        java.lang.String r0;
        int i0, i1;
        android.media.MediaFormat $r2;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new android.media.MediaFormat;

        specialinvoke $r2.<android.media.MediaFormat: void <init>()>();

        virtualinvoke $r2.<android.media.MediaFormat: void setString(java.lang.String,java.lang.String)>("mime", r0);

        virtualinvoke $r2.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("sample-rate", i0);

        virtualinvoke $r2.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("channel-count", i1);

        return $r2;
    }

    public static final android.media.MediaFormat createSubtitleFormat(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        android.media.MediaFormat $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r3 = new android.media.MediaFormat;

        specialinvoke $r3.<android.media.MediaFormat: void <init>()>();

        virtualinvoke $r3.<android.media.MediaFormat: void setString(java.lang.String,java.lang.String)>("mime", r0);

        virtualinvoke $r3.<android.media.MediaFormat: void setString(java.lang.String,java.lang.String)>("language", r1);

        return $r3;
    }

    public static final android.media.MediaFormat createVideoFormat(java.lang.String, int, int)
    {
        java.lang.String r0;
        int i0, i1;
        android.media.MediaFormat $r2;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new android.media.MediaFormat;

        specialinvoke $r2.<android.media.MediaFormat: void <init>()>();

        virtualinvoke $r2.<android.media.MediaFormat: void setString(java.lang.String,java.lang.String)>("mime", r0);

        virtualinvoke $r2.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("width", i0);

        virtualinvoke $r2.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("height", i1);

        return $r2;
    }

    public final boolean containsFeature(java.lang.String)
    {
        android.media.MediaFormat r0;
        java.lang.String r1, $r7;
        java.util.Map r2;
        java.lang.StringBuilder $r4;
        boolean $z0;

        r0 := @this: android.media.MediaFormat;

        r1 := @parameter0: java.lang.String;

        r2 = r0.<android.media.MediaFormat: java.util.Map mMap>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("feature-");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r7);

        return $z0;
    }

    public final boolean containsKey(java.lang.String)
    {
        android.media.MediaFormat r0;
        java.lang.String r1;
        java.util.Map $r2;
        boolean $z0;

        r0 := @this: android.media.MediaFormat;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.media.MediaFormat: java.util.Map mMap>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public final java.nio.ByteBuffer getByteBuffer(java.lang.String)
    {
        android.media.MediaFormat r0;
        java.lang.String r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.nio.ByteBuffer $r4;

        r0 := @this: android.media.MediaFormat;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.media.MediaFormat: java.util.Map mMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.nio.ByteBuffer) $r3;

        return $r4;
    }

    public final java.nio.ByteBuffer getByteBuffer(java.lang.String, java.nio.ByteBuffer)
    {
        android.media.MediaFormat r0;
        java.lang.String r1;
        java.nio.ByteBuffer r2, r3;

        r0 := @this: android.media.MediaFormat;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.nio.ByteBuffer;

        r3 = virtualinvoke r0.<android.media.MediaFormat: java.nio.ByteBuffer getByteBuffer(java.lang.String)>(r1);

        if r3 != null goto label1;

        goto label2;

     label1:
        r2 = r3;

     label2:
        return r2;
    }

    public boolean getFeatureEnabled(java.lang.String)
    {
        android.media.MediaFormat r0;
        java.util.Map r1;
        java.lang.StringBuilder $r3;
        java.lang.String $r6, r9;
        java.lang.Object $r7;
        java.lang.IllegalArgumentException $r8;
        int $i0;
        java.lang.Integer r10;
        boolean z0;

        r0 := @this: android.media.MediaFormat;

        r9 := @parameter0: java.lang.String;

        r1 = r0.<android.media.MediaFormat: java.util.Map mMap>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("feature-");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        r10 = (java.lang.Integer) $r7;

        if r10 == null goto label3;

        $i0 = virtualinvoke r10.<java.lang.Integer: int intValue()>();

        if $i0 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;

     label3:
        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("feature is not specified");

        throw $r8;
    }

    public final java.util.Set getFeatures()
    {
        android.media.MediaFormat r0;
        android.media.MediaFormat$PrefixedKeySetWithPrefixRemoved $r1;

        r0 := @this: android.media.MediaFormat;

        $r1 = new android.media.MediaFormat$PrefixedKeySetWithPrefixRemoved;

        specialinvoke $r1.<android.media.MediaFormat$PrefixedKeySetWithPrefixRemoved: void <init>(android.media.MediaFormat,java.lang.String)>(r0, "feature-");

        return $r1;
    }

    public final float getFloat(java.lang.String)
    {
        android.media.MediaFormat r0;
        java.lang.String r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.Float $r4;
        float $f0;

        r0 := @this: android.media.MediaFormat;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.media.MediaFormat: java.util.Map mMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.Float) $r3;

        $f0 = virtualinvoke $r4.<java.lang.Float: float floatValue()>();

        return $f0;
    }

    public final float getFloat(java.lang.String, float)
    {
        android.media.MediaFormat r0;
        java.util.Map $r1;
        java.lang.Float $r2;
        java.lang.String r3;
        float f0;
        java.lang.Object r4;

        r0 := @this: android.media.MediaFormat;

        r3 := @parameter0: java.lang.String;

        f0 := @parameter1: float;

        $r1 = r0.<android.media.MediaFormat: java.util.Map mMap>;

        r4 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        if r4 == null goto label1;

        $r2 = (java.lang.Float) r4;

        f0 = virtualinvoke $r2.<java.lang.Float: float floatValue()>();

        goto label1;

     label1:
        return f0;
    }

    public final int getInteger(java.lang.String)
    {
        android.media.MediaFormat r0;
        java.lang.String r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.Integer $r4;
        int $i0;

        r0 := @this: android.media.MediaFormat;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.media.MediaFormat: java.util.Map mMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    public final int getInteger(java.lang.String, int)
    {
        android.media.MediaFormat r0;
        int i0, i1;
        java.lang.NullPointerException $r1;
        java.lang.String r2;

        r0 := @this: android.media.MediaFormat;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        i1 = virtualinvoke r0.<android.media.MediaFormat: int getInteger(java.lang.String)>(r2);

     label2:
        return i1;

     label3:
        $r1 := @caughtexception;

        return i0;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public final java.util.Set getKeys()
    {
        android.media.MediaFormat r0;
        android.media.MediaFormat$UnprefixedKeySet $r1;

        r0 := @this: android.media.MediaFormat;

        $r1 = new android.media.MediaFormat$UnprefixedKeySet;

        specialinvoke $r1.<android.media.MediaFormat$UnprefixedKeySet: void <init>(android.media.MediaFormat,java.lang.String)>(r0, "feature-");

        return $r1;
    }

    public final long getLong(java.lang.String)
    {
        android.media.MediaFormat r0;
        java.lang.String r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.Long $r4;
        long $l0;

        r0 := @this: android.media.MediaFormat;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.media.MediaFormat: java.util.Map mMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.Long) $r3;

        $l0 = virtualinvoke $r4.<java.lang.Long: long longValue()>();

        return $l0;
    }

    public final long getLong(java.lang.String, long)
    {
        android.media.MediaFormat r0;
        long l0, l1;
        java.lang.NullPointerException $r1;
        java.lang.String r2;

        r0 := @this: android.media.MediaFormat;

        r2 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

     label1:
        l1 = virtualinvoke r0.<android.media.MediaFormat: long getLong(java.lang.String)>(r2);

     label2:
        return l1;

     label3:
        $r1 := @caughtexception;

        return l0;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    java.util.Map getMap()
    {
        android.media.MediaFormat r0;
        java.util.Map $r1;

        r0 := @this: android.media.MediaFormat;

        $r1 = r0.<android.media.MediaFormat: java.util.Map mMap>;

        return $r1;
    }

    public final java.lang.Number getNumber(java.lang.String)
    {
        android.media.MediaFormat r0;
        java.lang.String r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.Number $r4;

        r0 := @this: android.media.MediaFormat;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.media.MediaFormat: java.util.Map mMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.Number) $r3;

        return $r4;
    }

    public final java.lang.Number getNumber(java.lang.String, java.lang.Number)
    {
        android.media.MediaFormat r0;
        java.lang.Number r1, r3;
        java.lang.String r2;

        r0 := @this: android.media.MediaFormat;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Number;

        r3 = virtualinvoke r0.<android.media.MediaFormat: java.lang.Number getNumber(java.lang.String)>(r2);

        if r3 != null goto label1;

        r3 = r1;

        goto label1;

     label1:
        return r3;
    }

    public final java.lang.String getString(java.lang.String)
    {
        android.media.MediaFormat r0;
        java.lang.String r1, $r4;
        java.util.Map $r2;
        java.lang.Object $r3;

        r0 := @this: android.media.MediaFormat;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.media.MediaFormat: java.util.Map mMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    public final java.lang.String getString(java.lang.String, java.lang.String)
    {
        android.media.MediaFormat r0;
        java.lang.String r1, r2, r3;

        r0 := @this: android.media.MediaFormat;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r3 = virtualinvoke r0.<android.media.MediaFormat: java.lang.String getString(java.lang.String)>(r2);

        if r3 != null goto label1;

        r3 = r1;

        goto label1;

     label1:
        return r3;
    }

    public final int getValueTypeForKey(java.lang.String)
    {
        android.media.MediaFormat r0;
        java.util.Map $r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.RuntimeException $r2;
        java.lang.String r3;
        java.lang.Object r4;

        r0 := @this: android.media.MediaFormat;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<android.media.MediaFormat: java.util.Map mMap>;

        r4 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        if r4 != null goto label1;

        return 0;

     label1:
        $z0 = r4 instanceof java.lang.Integer;

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $z1 = r4 instanceof java.lang.Long;

        if $z1 == 0 goto label3;

        return 2;

     label3:
        $z2 = r4 instanceof java.lang.Float;

        if $z2 == 0 goto label4;

        return 3;

     label4:
        $z3 = r4 instanceof java.lang.String;

        if $z3 == 0 goto label5;

        return 4;

     label5:
        $z4 = r4 instanceof java.nio.ByteBuffer;

        if $z4 == 0 goto label6;

        return 5;

     label6:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("invalid value for key");

        throw $r2;
    }

    public final void removeFeature(java.lang.String)
    {
        android.media.MediaFormat r0;
        java.lang.String r1, $r7;
        java.util.Map r2;
        java.lang.StringBuilder $r4;

        r0 := @this: android.media.MediaFormat;

        r1 := @parameter0: java.lang.String;

        r2 = r0.<android.media.MediaFormat: java.util.Map mMap>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("feature-");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r7);

        return;
    }

    public final void removeKey(java.lang.String)
    {
        android.media.MediaFormat r0;
        java.lang.String r1;
        boolean $z0;
        java.util.Map $r2;

        r0 := @this: android.media.MediaFormat;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("feature-");

        if $z0 != 0 goto label1;

        $r2 = r0.<android.media.MediaFormat: java.util.Map mMap>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

     label1:
        return;
    }

    public final void setByteBuffer(java.lang.String, java.nio.ByteBuffer)
    {
        android.media.MediaFormat r0;
        java.lang.String r1;
        java.nio.ByteBuffer r2;
        java.util.Map $r3;

        r0 := @this: android.media.MediaFormat;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.nio.ByteBuffer;

        $r3 = r0.<android.media.MediaFormat: java.util.Map mMap>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public void setFeatureEnabled(java.lang.String, boolean)
    {
        android.media.MediaFormat r0;
        java.lang.String r1, $r6;
        boolean z0;
        java.lang.StringBuilder $r3;
        int i0;

        r0 := @this: android.media.MediaFormat;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("feature-");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        i0 = (int) z0;

        virtualinvoke r0.<android.media.MediaFormat: void setInteger(java.lang.String,int)>($r6, i0);

        return;
    }

    public final void setFloat(java.lang.String, float)
    {
        android.media.MediaFormat r0;
        java.lang.String r1;
        float f0;
        java.util.Map $r2;
        java.lang.Float $r3;

        r0 := @this: android.media.MediaFormat;

        r1 := @parameter0: java.lang.String;

        f0 := @parameter1: float;

        $r2 = r0.<android.media.MediaFormat: java.util.Map mMap>;

        $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3);

        return;
    }

    public final void setInteger(java.lang.String, int)
    {
        android.media.MediaFormat r0;
        java.lang.String r1;
        int i0;
        java.util.Map $r2;
        java.lang.Integer $r3;

        r0 := @this: android.media.MediaFormat;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<android.media.MediaFormat: java.util.Map mMap>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3);

        return;
    }

    public final void setLong(java.lang.String, long)
    {
        android.media.MediaFormat r0;
        java.lang.String r1;
        long l0;
        java.util.Map $r2;
        java.lang.Long $r3;

        r0 := @this: android.media.MediaFormat;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r2 = r0.<android.media.MediaFormat: java.util.Map mMap>;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3);

        return;
    }

    public final void setString(java.lang.String, java.lang.String)
    {
        android.media.MediaFormat r0;
        java.lang.String r1, r2;
        java.util.Map $r3;

        r0 := @this: android.media.MediaFormat;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<android.media.MediaFormat: java.util.Map mMap>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public java.lang.String toString()
    {
        android.media.MediaFormat r0;
        java.util.Map $r1;
        java.lang.String $r2;

        r0 := @this: android.media.MediaFormat;

        $r1 = r0.<android.media.MediaFormat: java.util.Map mMap>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public static void <clinit>()
    {
        <android.media.MediaFormat: int TYPE_STRING> = 4;

        <android.media.MediaFormat: int TYPE_NULL> = 0;

        <android.media.MediaFormat: int TYPE_LONG> = 2;

        <android.media.MediaFormat: int TYPE_INTEGER> = 1;

        <android.media.MediaFormat: int TYPE_FLOAT> = 3;

        <android.media.MediaFormat: int TYPE_BYTE_BUFFER> = 5;

        <android.media.MediaFormat: java.lang.String MIMETYPE_VIDEO_VP9> = "video/x-vnd.on2.vp9";

        <android.media.MediaFormat: java.lang.String MIMETYPE_VIDEO_VP8> = "video/x-vnd.on2.vp8";

        <android.media.MediaFormat: java.lang.String MIMETYPE_VIDEO_SCRAMBLED> = "video/scrambled";

        <android.media.MediaFormat: java.lang.String MIMETYPE_VIDEO_RAW> = "video/raw";

        <android.media.MediaFormat: java.lang.String MIMETYPE_VIDEO_MPEG4> = "video/mp4v-es";

        <android.media.MediaFormat: java.lang.String MIMETYPE_VIDEO_MPEG2> = "video/mpeg2";

        <android.media.MediaFormat: java.lang.String MIMETYPE_VIDEO_HEVC> = "video/hevc";

        <android.media.MediaFormat: java.lang.String MIMETYPE_VIDEO_H263> = "video/3gpp";

        <android.media.MediaFormat: java.lang.String MIMETYPE_VIDEO_DOLBY_VISION> = "video/dolby-vision";

        <android.media.MediaFormat: java.lang.String MIMETYPE_VIDEO_AVC> = "video/avc";

        <android.media.MediaFormat: java.lang.String MIMETYPE_VIDEO_AV1> = "video/av01";

        <android.media.MediaFormat: java.lang.String MIMETYPE_TEXT_VTT> = "text/vtt";

        <android.media.MediaFormat: java.lang.String MIMETYPE_TEXT_SUBRIP> = "application/x-subrip";

        <android.media.MediaFormat: java.lang.String MIMETYPE_TEXT_CEA_708> = "text/cea-708";

        <android.media.MediaFormat: java.lang.String MIMETYPE_TEXT_CEA_608> = "text/cea-608";

        <android.media.MediaFormat: java.lang.String MIMETYPE_IMAGE_ANDROID_HEIC> = "image/vnd.android.heic";

        <android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_VORBIS> = "audio/vorbis";

        <android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_SCRAMBLED> = "audio/scrambled";

        <android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_RAW> = "audio/raw";

        <android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_QCELP> = "audio/qcelp";

        <android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_OPUS> = "audio/opus";

        <android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_MSGSM> = "audio/gsm";

        <android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_MPEG> = "audio/mpeg";

        <android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_G711_MLAW> = "audio/g711-mlaw";

        <android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_G711_ALAW> = "audio/g711-alaw";

        <android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_FLAC> = "audio/flac";

        <android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_EAC3_JOC> = "audio/eac3-joc";

        <android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_EAC3> = "audio/eac3";

        <android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_AMR_WB> = "audio/amr-wb";

        <android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_AMR_NB> = "audio/3gpp";

        <android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_AC4> = "audio/ac4";

        <android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_AC3> = "audio/ac3";

        <android.media.MediaFormat: java.lang.String MIMETYPE_AUDIO_AAC> = "audio/mp4a-latm";

        <android.media.MediaFormat: java.lang.String KEY_WIDTH> = "width";

        <android.media.MediaFormat: java.lang.String KEY_TRACK_ID> = "track-id";

        <android.media.MediaFormat: java.lang.String KEY_TILE_WIDTH> = "tile-width";

        <android.media.MediaFormat: java.lang.String KEY_TILE_HEIGHT> = "tile-height";

        <android.media.MediaFormat: java.lang.String KEY_TEMPORAL_LAYERING> = "ts-schema";

        <android.media.MediaFormat: java.lang.String KEY_STRIDE> = "stride";

        <android.media.MediaFormat: java.lang.String KEY_SLICE_HEIGHT> = "slice-height";

        <android.media.MediaFormat: java.lang.String KEY_SAMPLE_RATE> = "sample-rate";

        <android.media.MediaFormat: java.lang.String KEY_ROTATION> = "rotation-degrees";

        <android.media.MediaFormat: java.lang.String KEY_REPEAT_PREVIOUS_FRAME_AFTER> = "repeat-previous-frame-after";

        <android.media.MediaFormat: java.lang.String KEY_QUALITY> = "quality";

        <android.media.MediaFormat: java.lang.String KEY_PUSH_BLANK_BUFFERS_ON_STOP> = "push-blank-buffers-on-shutdown";

        <android.media.MediaFormat: java.lang.String KEY_PROFILE> = "profile";

        <android.media.MediaFormat: java.lang.String KEY_PRIORITY> = "priority";

        <android.media.MediaFormat: java.lang.String KEY_PREPEND_HEADER_TO_SYNC_FRAMES> = "prepend-sps-pps-to-idr-frames";

        <android.media.MediaFormat: java.lang.String KEY_PIXEL_ASPECT_RATIO_WIDTH> = "sar-width";

        <android.media.MediaFormat: java.lang.String KEY_PIXEL_ASPECT_RATIO_HEIGHT> = "sar-height";

        <android.media.MediaFormat: java.lang.String KEY_PCM_ENCODING> = "pcm-encoding";

        <android.media.MediaFormat: java.lang.String KEY_OUTPUT_REORDER_DEPTH> = "output-reorder-depth";

        <android.media.MediaFormat: java.lang.String KEY_OPERATING_RATE> = "operating-rate";

        <android.media.MediaFormat: java.lang.String KEY_MIME> = "mime";

        <android.media.MediaFormat: java.lang.String KEY_MAX_WIDTH> = "max-width";

        <android.media.MediaFormat: java.lang.String KEY_MAX_PTS_GAP_TO_ENCODER> = "max-pts-gap-to-encoder";

        <android.media.MediaFormat: java.lang.String KEY_MAX_INPUT_SIZE> = "max-input-size";

        <android.media.MediaFormat: java.lang.String KEY_MAX_HEIGHT> = "max-height";

        <android.media.MediaFormat: java.lang.String KEY_MAX_FPS_TO_ENCODER> = "max-fps-to-encoder";

        <android.media.MediaFormat: java.lang.String KEY_MAX_B_FRAMES> = "max-bframes";

        <android.media.MediaFormat: java.lang.String KEY_MAX_BIT_RATE> = "max-bitrate";

        <android.media.MediaFormat: java.lang.String KEY_LOW_LATENCY> = "low-latency";

        <android.media.MediaFormat: java.lang.String KEY_LEVEL> = "level";

        <android.media.MediaFormat: java.lang.String KEY_LATENCY> = "latency";

        <android.media.MediaFormat: java.lang.String KEY_LANGUAGE> = "language";

        <android.media.MediaFormat: java.lang.String KEY_I_FRAME_INTERVAL> = "i-frame-interval";

        <android.media.MediaFormat: java.lang.String KEY_IS_TIMED_TEXT> = "is-timed-text";

        <android.media.MediaFormat: java.lang.String KEY_IS_FORCED_SUBTITLE> = "is-forced-subtitle";

        <android.media.MediaFormat: java.lang.String KEY_IS_DEFAULT> = "is-default";

        <android.media.MediaFormat: java.lang.String KEY_IS_AUTOSELECT> = "is-autoselect";

        <android.media.MediaFormat: java.lang.String KEY_IS_ADTS> = "is-adts";

        <android.media.MediaFormat: java.lang.String KEY_INTRA_REFRESH_PERIOD> = "intra-refresh-period";

        <android.media.MediaFormat: java.lang.String KEY_HEIGHT> = "height";

        <android.media.MediaFormat: java.lang.String KEY_HDR_STATIC_INFO> = "hdr-static-info";

        <android.media.MediaFormat: java.lang.String KEY_HDR10_PLUS_INFO> = "hdr10-plus-info";

        <android.media.MediaFormat: java.lang.String KEY_HARDWARE_AV_SYNC_ID> = "hw-av-sync-id";

        <android.media.MediaFormat: java.lang.String KEY_HAPTIC_CHANNEL_COUNT> = "haptic-channel-count";

        <android.media.MediaFormat: java.lang.String KEY_GRID_ROWS> = "grid-rows";

        <android.media.MediaFormat: java.lang.String KEY_GRID_COLUMNS> = "grid-cols";

        <android.media.MediaFormat: java.lang.String KEY_FRAME_RATE> = "frame-rate";

        <android.media.MediaFormat: java.lang.String KEY_FLAC_COMPRESSION_LEVEL> = "flac-compression-level";

        <android.media.MediaFormat: java.lang.String KEY_FEATURE_> = "feature-";

        <android.media.MediaFormat: java.lang.String KEY_ENCODER_PADDING> = "encoder-padding";

        <android.media.MediaFormat: java.lang.String KEY_ENCODER_DELAY> = "encoder-delay";

        <android.media.MediaFormat: java.lang.String KEY_DURATION> = "durationUs";

        <android.media.MediaFormat: java.lang.String KEY_CREATE_INPUT_SURFACE_SUSPENDED> = "create-input-buffers-suspended";

        <android.media.MediaFormat: java.lang.String KEY_COMPLEXITY> = "complexity";

        <android.media.MediaFormat: java.lang.String KEY_COLOR_TRANSFER> = "color-transfer";

        <android.media.MediaFormat: java.lang.String KEY_COLOR_STANDARD> = "color-standard";

        <android.media.MediaFormat: java.lang.String KEY_COLOR_RANGE> = "color-range";

        <android.media.MediaFormat: java.lang.String KEY_COLOR_FORMAT> = "color-format";

        <android.media.MediaFormat: java.lang.String KEY_CODECS_STRING> = "codecs-string";

        <android.media.MediaFormat: java.lang.String KEY_CHANNEL_MASK> = "channel-mask";

        <android.media.MediaFormat: java.lang.String KEY_CHANNEL_COUNT> = "channel-count";

        <android.media.MediaFormat: java.lang.String KEY_CA_SYSTEM_ID> = "ca-system-id";

        <android.media.MediaFormat: java.lang.String KEY_CA_SESSION_ID> = "ca-session-id";

        <android.media.MediaFormat: java.lang.String KEY_CA_PRIVATE_DATA> = "ca-private-data";

        <android.media.MediaFormat: java.lang.String KEY_CAPTURE_RATE> = "capture-rate";

        <android.media.MediaFormat: java.lang.String KEY_CAPTION_SERVICE_NUMBER> = "caption-service-number";

        <android.media.MediaFormat: java.lang.String KEY_BIT_RATE> = "bitrate";

        <android.media.MediaFormat: java.lang.String KEY_BITRATE_MODE> = "bitrate-mode";

        <android.media.MediaFormat: java.lang.String KEY_AUDIO_SESSION_ID> = "audio-session-id";

        <android.media.MediaFormat: java.lang.String KEY_AAC_SBR_MODE> = "aac-sbr-mode";

        <android.media.MediaFormat: java.lang.String KEY_AAC_PROFILE> = "aac-profile";

        <android.media.MediaFormat: java.lang.String KEY_AAC_MAX_OUTPUT_CHANNEL_COUNT> = "aac-max-output-channel_count";

        <android.media.MediaFormat: java.lang.String KEY_AAC_ENCODED_TARGET_LEVEL> = "aac-encoded-target-level";

        <android.media.MediaFormat: java.lang.String KEY_AAC_DRC_TARGET_REFERENCE_LEVEL> = "aac-target-ref-level";

        <android.media.MediaFormat: java.lang.String KEY_AAC_DRC_OUTPUT_LOUDNESS> = "aac-drc-output-loudness";

        <android.media.MediaFormat: java.lang.String KEY_AAC_DRC_HEAVY_COMPRESSION> = "aac-drc-heavy-compression";

        <android.media.MediaFormat: java.lang.String KEY_AAC_DRC_EFFECT_TYPE> = "aac-drc-effect-type";

        <android.media.MediaFormat: java.lang.String KEY_AAC_DRC_BOOST_FACTOR> = "aac-drc-boost-level";

        <android.media.MediaFormat: java.lang.String KEY_AAC_DRC_ATTENUATION_FACTOR> = "aac-drc-cut-level";

        <android.media.MediaFormat: java.lang.String KEY_AAC_DRC_ALBUM_MODE> = "aac-drc-album-mode";

        <android.media.MediaFormat: int COLOR_TRANSFER_ST2084> = 6;

        <android.media.MediaFormat: int COLOR_TRANSFER_SDR_VIDEO> = 3;

        <android.media.MediaFormat: int COLOR_TRANSFER_LINEAR> = 1;

        <android.media.MediaFormat: int COLOR_TRANSFER_HLG> = 7;

        <android.media.MediaFormat: int COLOR_STANDARD_BT709> = 1;

        <android.media.MediaFormat: int COLOR_STANDARD_BT601_PAL> = 2;

        <android.media.MediaFormat: int COLOR_STANDARD_BT601_NTSC> = 4;

        <android.media.MediaFormat: int COLOR_STANDARD_BT2020> = 6;

        <android.media.MediaFormat: int COLOR_RANGE_LIMITED> = 2;

        <android.media.MediaFormat: int COLOR_RANGE_FULL> = 1;

        return;
    }
}
