public class android.media.MediaPlayer extends android.media.PlayerBase implements android.media.SubtitleController$Listener, android.media.VolumeAutomation, android.media.AudioRouting
{
    public static final boolean APPLY_METADATA_FILTER;
    public static final boolean BYPASS_METADATA_FILTER;
    private static final java.lang.String IMEDIA_PLAYER;
    private static final int INVOKE_ID_ADD_EXTERNAL_SOURCE;
    private static final int INVOKE_ID_ADD_EXTERNAL_SOURCE_FD;
    private static final int INVOKE_ID_DESELECT_TRACK;
    private static final int INVOKE_ID_GET_SELECTED_TRACK;
    private static final int INVOKE_ID_GET_TRACK_INFO;
    private static final int INVOKE_ID_SELECT_TRACK;
    private static final int INVOKE_ID_SET_VIDEO_SCALE_MODE;
    private static final int KEY_PARAMETER_AUDIO_ATTRIBUTES;
    private static final int MEDIA_AUDIO_ROUTING_CHANGED;
    private static final int MEDIA_BUFFERING_UPDATE;
    private static final int MEDIA_DRM_INFO;
    private static final int MEDIA_ERROR;
    public static final int MEDIA_ERROR_IO;
    public static final int MEDIA_ERROR_MALFORMED;
    public static final int MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACK;
    public static final int MEDIA_ERROR_SERVER_DIED;
    public static final int MEDIA_ERROR_SYSTEM;
    public static final int MEDIA_ERROR_TIMED_OUT;
    public static final int MEDIA_ERROR_UNKNOWN;
    public static final int MEDIA_ERROR_UNSUPPORTED;
    private static final int MEDIA_INFO;
    public static final int MEDIA_INFO_AUDIO_NOT_PLAYING;
    public static final int MEDIA_INFO_BAD_INTERLEAVING;
    public static final int MEDIA_INFO_BUFFERING_END;
    public static final int MEDIA_INFO_BUFFERING_START;
    public static final int MEDIA_INFO_EXTERNAL_METADATA_UPDATE;
    public static final int MEDIA_INFO_METADATA_UPDATE;
    public static final int MEDIA_INFO_NETWORK_BANDWIDTH;
    public static final int MEDIA_INFO_NOT_SEEKABLE;
    public static final int MEDIA_INFO_STARTED_AS_NEXT;
    public static final int MEDIA_INFO_SUBTITLE_TIMED_OUT;
    public static final int MEDIA_INFO_TIMED_TEXT_ERROR;
    public static final int MEDIA_INFO_UNKNOWN;
    public static final int MEDIA_INFO_UNSUPPORTED_SUBTITLE;
    public static final int MEDIA_INFO_VIDEO_NOT_PLAYING;
    public static final int MEDIA_INFO_VIDEO_RENDERING_START;
    public static final int MEDIA_INFO_VIDEO_TRACK_LAGGING;
    private static final int MEDIA_META_DATA;
    public static final java.lang.String MEDIA_MIMETYPE_TEXT_CEA_608;
    public static final java.lang.String MEDIA_MIMETYPE_TEXT_CEA_708;
    public static final java.lang.String MEDIA_MIMETYPE_TEXT_SUBRIP;
    public static final java.lang.String MEDIA_MIMETYPE_TEXT_VTT;
    private static final int MEDIA_NOP;
    private static final int MEDIA_NOTIFY_TIME;
    private static final int MEDIA_PAUSED;
    private static final int MEDIA_PLAYBACK_COMPLETE;
    private static final int MEDIA_PREPARED;
    private static final int MEDIA_SEEK_COMPLETE;
    private static final int MEDIA_SET_VIDEO_SIZE;
    private static final int MEDIA_SKIPPED;
    private static final int MEDIA_STARTED;
    private static final int MEDIA_STOPPED;
    private static final int MEDIA_SUBTITLE_DATA;
    private static final int MEDIA_TIMED_TEXT;
    private static final int MEDIA_TIME_DISCONTINUITY;
    public static final boolean METADATA_ALL;
    public static final boolean METADATA_UPDATE_ONLY;
    public static final int PLAYBACK_RATE_AUDIO_MODE_DEFAULT;
    public static final int PLAYBACK_RATE_AUDIO_MODE_RESAMPLE;
    public static final int PLAYBACK_RATE_AUDIO_MODE_STRETCH;
    public static final int PREPARE_DRM_STATUS_PREPARATION_ERROR;
    public static final int PREPARE_DRM_STATUS_PROVISIONING_NETWORK_ERROR;
    public static final int PREPARE_DRM_STATUS_PROVISIONING_SERVER_ERROR;
    public static final int PREPARE_DRM_STATUS_SUCCESS;
    public static final int SEEK_CLOSEST;
    public static final int SEEK_CLOSEST_SYNC;
    public static final int SEEK_NEXT_SYNC;
    public static final int SEEK_PREVIOUS_SYNC;
    private static final java.lang.String TAG;
    public static final int VIDEO_SCALING_MODE_SCALE_TO_FIT;
    public static final int VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING;
    private boolean mActiveDrmScheme;
    private boolean mDrmConfigAllowed;
    private android.media.MediaPlayer$DrmInfo mDrmInfo;
    private boolean mDrmInfoResolved;
    private final java.lang.Object mDrmLock;
    private android.media.MediaDrm mDrmObj;
    private boolean mDrmProvisioningInProgress;
    private android.media.MediaPlayer$ProvisioningThread mDrmProvisioningThread;
    private byte[] mDrmSessionId;
    private java.util.UUID mDrmUUID;
    private android.media.MediaPlayer$EventHandler mEventHandler;
    private android.os.Handler mExtSubtitleDataHandler;
    private android.media.MediaPlayer$OnSubtitleDataListener mExtSubtitleDataListener;
    private java.util.BitSet mInbandTrackIndices;
    private java.util.Vector mIndexTrackPairs;
    private final android.media.MediaPlayer$OnSubtitleDataListener mIntSubtitleDataListener;
    private int mListenerContext;
    private long mNativeContext;
    private long mNativeSurfaceTexture;
    private android.media.MediaPlayer$OnBufferingUpdateListener mOnBufferingUpdateListener;
    private final android.media.MediaPlayer$OnCompletionListener mOnCompletionInternalListener;
    private android.media.MediaPlayer$OnCompletionListener mOnCompletionListener;
    private android.media.MediaPlayer$OnDrmConfigHelper mOnDrmConfigHelper;
    private android.media.MediaPlayer$OnDrmInfoHandlerDelegate mOnDrmInfoHandlerDelegate;
    private android.media.MediaPlayer$OnDrmPreparedHandlerDelegate mOnDrmPreparedHandlerDelegate;
    private android.media.MediaPlayer$OnErrorListener mOnErrorListener;
    private android.media.MediaPlayer$OnInfoListener mOnInfoListener;
    private android.os.Handler mOnMediaTimeDiscontinuityHandler;
    private android.media.MediaPlayer$OnMediaTimeDiscontinuityListener mOnMediaTimeDiscontinuityListener;
    private android.media.MediaPlayer$OnPreparedListener mOnPreparedListener;
    private android.media.MediaPlayer$OnSeekCompleteListener mOnSeekCompleteListener;
    private android.media.MediaPlayer$OnTimedMetaDataAvailableListener mOnTimedMetaDataAvailableListener;
    private android.media.MediaPlayer$OnTimedTextListener mOnTimedTextListener;
    private android.media.MediaPlayer$OnVideoSizeChangedListener mOnVideoSizeChangedListener;
    private java.util.Vector mOpenSubtitleSources;
    private android.media.AudioDeviceInfo mPreferredDevice;
    private boolean mPrepareDrmInProgress;
    private android.util.ArrayMap mRoutingChangeListeners;
    private boolean mScreenOnWhilePlaying;
    private int mSelectedSubtitleTrackIndex;
    private boolean mStayAwake;
    private int mStreamType;
    private android.media.SubtitleController mSubtitleController;
    private boolean mSubtitleDataListenerDisabled;
    private android.view.SurfaceHolder mSurfaceHolder;
    private android.media.MediaPlayer$TimeProvider mTimeProvider;
    private final java.lang.Object mTimeProviderLock;
    private android.os.PowerManager$WakeLock mWakeLock;

    static void <clinit>()
    {
        <android.media.MediaPlayer: int VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING> = 2;

        <android.media.MediaPlayer: int VIDEO_SCALING_MODE_SCALE_TO_FIT> = 1;

        <android.media.MediaPlayer: java.lang.String TAG> = "MediaPlayer";

        <android.media.MediaPlayer: int SEEK_PREVIOUS_SYNC> = 0;

        <android.media.MediaPlayer: int SEEK_NEXT_SYNC> = 1;

        <android.media.MediaPlayer: int SEEK_CLOSEST_SYNC> = 2;

        <android.media.MediaPlayer: int SEEK_CLOSEST> = 3;

        <android.media.MediaPlayer: int PREPARE_DRM_STATUS_SUCCESS> = 0;

        <android.media.MediaPlayer: int PREPARE_DRM_STATUS_PROVISIONING_SERVER_ERROR> = 2;

        <android.media.MediaPlayer: int PREPARE_DRM_STATUS_PROVISIONING_NETWORK_ERROR> = 1;

        <android.media.MediaPlayer: int PREPARE_DRM_STATUS_PREPARATION_ERROR> = 3;

        <android.media.MediaPlayer: int PLAYBACK_RATE_AUDIO_MODE_STRETCH> = 1;

        <android.media.MediaPlayer: int PLAYBACK_RATE_AUDIO_MODE_RESAMPLE> = 2;

        <android.media.MediaPlayer: int PLAYBACK_RATE_AUDIO_MODE_DEFAULT> = 0;

        <android.media.MediaPlayer: boolean METADATA_UPDATE_ONLY> = 1;

        <android.media.MediaPlayer: boolean METADATA_ALL> = 0;

        <android.media.MediaPlayer: int MEDIA_TIME_DISCONTINUITY> = 211;

        <android.media.MediaPlayer: int MEDIA_TIMED_TEXT> = 99;

        <android.media.MediaPlayer: int MEDIA_SUBTITLE_DATA> = 201;

        <android.media.MediaPlayer: int MEDIA_STOPPED> = 8;

        <android.media.MediaPlayer: int MEDIA_STARTED> = 6;

        <android.media.MediaPlayer: int MEDIA_SKIPPED> = 9;

        <android.media.MediaPlayer: int MEDIA_SET_VIDEO_SIZE> = 5;

        <android.media.MediaPlayer: int MEDIA_SEEK_COMPLETE> = 4;

        <android.media.MediaPlayer: int MEDIA_PREPARED> = 1;

        <android.media.MediaPlayer: int MEDIA_PLAYBACK_COMPLETE> = 2;

        <android.media.MediaPlayer: int MEDIA_PAUSED> = 7;

        <android.media.MediaPlayer: int MEDIA_NOTIFY_TIME> = 98;

        <android.media.MediaPlayer: int MEDIA_NOP> = 0;

        <android.media.MediaPlayer: java.lang.String MEDIA_MIMETYPE_TEXT_VTT> = "text/vtt";

        <android.media.MediaPlayer: java.lang.String MEDIA_MIMETYPE_TEXT_SUBRIP> = "application/x-subrip";

        <android.media.MediaPlayer: java.lang.String MEDIA_MIMETYPE_TEXT_CEA_708> = "text/cea-708";

        <android.media.MediaPlayer: java.lang.String MEDIA_MIMETYPE_TEXT_CEA_608> = "text/cea-608";

        <android.media.MediaPlayer: int MEDIA_META_DATA> = 202;

        <android.media.MediaPlayer: int MEDIA_INFO_VIDEO_TRACK_LAGGING> = 700;

        <android.media.MediaPlayer: int MEDIA_INFO_VIDEO_RENDERING_START> = 3;

        <android.media.MediaPlayer: int MEDIA_INFO_VIDEO_NOT_PLAYING> = 805;

        <android.media.MediaPlayer: int MEDIA_INFO_UNSUPPORTED_SUBTITLE> = 901;

        <android.media.MediaPlayer: int MEDIA_INFO_UNKNOWN> = 1;

        <android.media.MediaPlayer: int MEDIA_INFO_TIMED_TEXT_ERROR> = 900;

        <android.media.MediaPlayer: int MEDIA_INFO_SUBTITLE_TIMED_OUT> = 902;

        <android.media.MediaPlayer: int MEDIA_INFO_STARTED_AS_NEXT> = 2;

        <android.media.MediaPlayer: int MEDIA_INFO_NOT_SEEKABLE> = 801;

        <android.media.MediaPlayer: int MEDIA_INFO_NETWORK_BANDWIDTH> = 703;

        <android.media.MediaPlayer: int MEDIA_INFO_METADATA_UPDATE> = 802;

        <android.media.MediaPlayer: int MEDIA_INFO_EXTERNAL_METADATA_UPDATE> = 803;

        <android.media.MediaPlayer: int MEDIA_INFO_BUFFERING_START> = 701;

        <android.media.MediaPlayer: int MEDIA_INFO_BUFFERING_END> = 702;

        <android.media.MediaPlayer: int MEDIA_INFO_BAD_INTERLEAVING> = 800;

        <android.media.MediaPlayer: int MEDIA_INFO_AUDIO_NOT_PLAYING> = 804;

        <android.media.MediaPlayer: int MEDIA_INFO> = 200;

        <android.media.MediaPlayer: int MEDIA_ERROR_UNSUPPORTED> = -1010;

        <android.media.MediaPlayer: int MEDIA_ERROR_UNKNOWN> = 1;

        <android.media.MediaPlayer: int MEDIA_ERROR_TIMED_OUT> = -110;

        <android.media.MediaPlayer: int MEDIA_ERROR_SYSTEM> = -2147483648;

        <android.media.MediaPlayer: int MEDIA_ERROR_SERVER_DIED> = 100;

        <android.media.MediaPlayer: int MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACK> = 200;

        <android.media.MediaPlayer: int MEDIA_ERROR_MALFORMED> = -1007;

        <android.media.MediaPlayer: int MEDIA_ERROR_IO> = -1004;

        <android.media.MediaPlayer: int MEDIA_ERROR> = 100;

        <android.media.MediaPlayer: int MEDIA_DRM_INFO> = 210;

        <android.media.MediaPlayer: int MEDIA_BUFFERING_UPDATE> = 3;

        <android.media.MediaPlayer: int MEDIA_AUDIO_ROUTING_CHANGED> = 10000;

        <android.media.MediaPlayer: int KEY_PARAMETER_AUDIO_ATTRIBUTES> = 1400;

        <android.media.MediaPlayer: int INVOKE_ID_SET_VIDEO_SCALE_MODE> = 6;

        <android.media.MediaPlayer: int INVOKE_ID_SELECT_TRACK> = 4;

        <android.media.MediaPlayer: int INVOKE_ID_GET_TRACK_INFO> = 1;

        <android.media.MediaPlayer: int INVOKE_ID_GET_SELECTED_TRACK> = 7;

        <android.media.MediaPlayer: int INVOKE_ID_DESELECT_TRACK> = 5;

        <android.media.MediaPlayer: int INVOKE_ID_ADD_EXTERNAL_SOURCE_FD> = 3;

        <android.media.MediaPlayer: int INVOKE_ID_ADD_EXTERNAL_SOURCE> = 2;

        <android.media.MediaPlayer: java.lang.String IMEDIA_PLAYER> = "android.media.IMediaPlayer";

        <android.media.MediaPlayer: boolean BYPASS_METADATA_FILTER> = 0;

        <android.media.MediaPlayer: boolean APPLY_METADATA_FILTER> = 1;

        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("media_jni");

        staticinvoke <android.media.MediaPlayer: void native_init()>();

        return;
    }

    public void <init>()
    {
        android.media.MediaPlayer r0;
        android.media.AudioAttributes$Builder $r1;
        android.media.AudioAttributes $r2;
        java.lang.Object $r3, $r8;
        android.util.ArrayMap $r4;
        java.util.Vector $r5, $r15;
        java.util.BitSet $r6;
        android.media.MediaPlayer$3 $r7;
        android.media.MediaPlayer$7 $r9;
        android.media.MediaPlayer$EventHandler $r10, $r11;
        android.os.Looper r12, r13;
        android.media.MediaPlayer$TimeProvider $r14;
        java.lang.ref.WeakReference $r16;

        r0 := @this: android.media.MediaPlayer;

        $r1 = new android.media.AudioAttributes$Builder;

        specialinvoke $r1.<android.media.AudioAttributes$Builder: void <init>()>();

        $r2 = virtualinvoke $r1.<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>();

        specialinvoke r0.<android.media.PlayerBase: void <init>(android.media.AudioAttributes,int)>($r2, 2);

        r0.<android.media.MediaPlayer: android.os.PowerManager$WakeLock mWakeLock> = null;

        r0.<android.media.MediaPlayer: int mStreamType> = -2147483648;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<android.media.MediaPlayer: java.lang.Object mDrmLock> = $r3;

        r0.<android.media.MediaPlayer: android.media.AudioDeviceInfo mPreferredDevice> = null;

        $r4 = new android.util.ArrayMap;

        specialinvoke $r4.<android.util.ArrayMap: void <init>()>();

        r0.<android.media.MediaPlayer: android.util.ArrayMap mRoutingChangeListeners> = $r4;

        $r5 = new java.util.Vector;

        specialinvoke $r5.<java.util.Vector: void <init>()>();

        r0.<android.media.MediaPlayer: java.util.Vector mIndexTrackPairs> = $r5;

        $r6 = new java.util.BitSet;

        specialinvoke $r6.<java.util.BitSet: void <init>()>();

        r0.<android.media.MediaPlayer: java.util.BitSet mInbandTrackIndices> = $r6;

        r0.<android.media.MediaPlayer: int mSelectedSubtitleTrackIndex> = -1;

        $r7 = new android.media.MediaPlayer$3;

        specialinvoke $r7.<android.media.MediaPlayer$3: void <init>(android.media.MediaPlayer)>(r0);

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnSubtitleDataListener mIntSubtitleDataListener> = $r7;

        $r8 = new java.lang.Object;

        specialinvoke $r8.<java.lang.Object: void <init>()>();

        r0.<android.media.MediaPlayer: java.lang.Object mTimeProviderLock> = $r8;

        $r9 = new android.media.MediaPlayer$7;

        specialinvoke $r9.<android.media.MediaPlayer$7: void <init>(android.media.MediaPlayer)>(r0);

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnCompletionListener mOnCompletionInternalListener> = $r9;

        r12 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if r12 == null goto label1;

        $r11 = new android.media.MediaPlayer$EventHandler;

        specialinvoke $r11.<android.media.MediaPlayer$EventHandler: void <init>(android.media.MediaPlayer,android.media.MediaPlayer,android.os.Looper)>(r0, r0, r12);

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$EventHandler mEventHandler> = $r11;

        goto label3;

     label1:
        r13 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        if r13 == null goto label2;

        $r10 = new android.media.MediaPlayer$EventHandler;

        specialinvoke $r10.<android.media.MediaPlayer$EventHandler: void <init>(android.media.MediaPlayer,android.media.MediaPlayer,android.os.Looper)>(r0, r0, r13);

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$EventHandler mEventHandler> = $r10;

        goto label3;

     label2:
        r0.<android.media.MediaPlayer: android.media.MediaPlayer$EventHandler mEventHandler> = null;

     label3:
        $r14 = new android.media.MediaPlayer$TimeProvider;

        specialinvoke $r14.<android.media.MediaPlayer$TimeProvider: void <init>(android.media.MediaPlayer)>(r0);

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$TimeProvider mTimeProvider> = $r14;

        $r15 = new java.util.Vector;

        specialinvoke $r15.<java.util.Vector: void <init>()>();

        r0.<android.media.MediaPlayer: java.util.Vector mOpenSubtitleSources> = $r15;

        $r16 = new java.lang.ref.WeakReference;

        specialinvoke $r16.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r0);

        specialinvoke r0.<android.media.MediaPlayer: void native_setup(java.lang.Object)>($r16);

        virtualinvoke r0.<android.media.MediaPlayer: void baseRegisterPlayer()>();

        return;
    }

    private int HandleProvisioninig(java.util.UUID)
    {
        android.media.MediaPlayer r0;
        android.media.MediaDrm$ProvisionRequest r1;
        boolean $z0;
        android.media.MediaDrm $r2;
        java.lang.StringBuilder $r3, $r16;
        byte[] $r5;
        java.lang.String $r8, $r10, $r19;
        android.media.MediaPlayer$ProvisioningThread $r11, $r13, $r14, r22;
        android.media.MediaPlayer$OnDrmPreparedHandlerDelegate $r12;
        java.lang.Exception $r15;
        java.util.UUID r20;
        int i4;

        r0 := @this: android.media.MediaPlayer;

        r20 := @parameter0: java.util.UUID;

        $z0 = r0.<android.media.MediaPlayer: boolean mDrmProvisioningInProgress>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MediaPlayer", "HandleProvisioninig: Unexpected mDrmProvisioningInProgress");

        return 3;

     label1:
        $r2 = r0.<android.media.MediaPlayer: android.media.MediaDrm mDrmObj>;

        r1 = virtualinvoke $r2.<android.media.MediaDrm: android.media.MediaDrm$ProvisionRequest getProvisionRequest()>();

        if r1 != null goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MediaPlayer", "HandleProvisioninig: getProvisionRequest returned null.");

        return 3;

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HandleProvisioninig provReq  data: ");

        $r5 = virtualinvoke r1.<android.media.MediaDrm$ProvisionRequest: byte[] getData()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" url: ");

        $r8 = virtualinvoke r1.<android.media.MediaDrm$ProvisionRequest: java.lang.String getDefaultUrl()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaPlayer", $r10);

        r0.<android.media.MediaPlayer: boolean mDrmProvisioningInProgress> = 1;

        $r11 = new android.media.MediaPlayer$ProvisioningThread;

        specialinvoke $r11.<android.media.MediaPlayer$ProvisioningThread: void <init>(android.media.MediaPlayer,android.media.MediaPlayer$1)>(r0, null);

        r22 = virtualinvoke $r11.<android.media.MediaPlayer$ProvisioningThread: android.media.MediaPlayer$ProvisioningThread initialize(android.media.MediaDrm$ProvisionRequest,java.util.UUID,android.media.MediaPlayer)>(r1, r20, r0);

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$ProvisioningThread mDrmProvisioningThread> = r22;

        virtualinvoke r22.<android.media.MediaPlayer$ProvisioningThread: void start()>();

        $r12 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnDrmPreparedHandlerDelegate mOnDrmPreparedHandlerDelegate>;

        if $r12 == null goto label3;

        i4 = 0;

        goto label7;

     label3:
        $r13 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$ProvisioningThread mDrmProvisioningThread>;

        virtualinvoke $r13.<android.media.MediaPlayer$ProvisioningThread: void join()>();

     label4:
        goto label6;

     label5:
        $r15 := @caughtexception;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HandleProvisioninig: Thread.join Exception ");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MediaPlayer", $r19);

     label6:
        $r14 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$ProvisioningThread mDrmProvisioningThread>;

        i4 = virtualinvoke $r14.<android.media.MediaPlayer$ProvisioningThread: int status()>();

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$ProvisioningThread mDrmProvisioningThread> = null;

     label7:
        return i4;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    private native int _getAudioStreamType() throws java.lang.IllegalStateException;

    private native void _notifyAt(long);

    private native void _pause() throws java.lang.IllegalStateException;

    private native void _prepare() throws java.io.IOException, java.lang.IllegalStateException;

    private native void _prepareDrm(byte[], byte[]);

    private native void _release();

    private native void _releaseDrm();

    private native void _reset();

    private final native void _seekTo(long, int);

    private native void _setAudioStreamType(int);

    private native void _setAuxEffectSendLevel(float);

    private native void _setDataSource(android.media.MediaDataSource) throws java.lang.IllegalArgumentException, java.lang.IllegalStateException;

    private native void _setDataSource(java.io.FileDescriptor, long, long) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException;

    private native void _setVideoSurface(android.view.Surface);

    private native void _setVolume(float, float);

    private native void _start() throws java.lang.IllegalStateException;

    private native void _stop() throws java.lang.IllegalStateException;

    static void access$000(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;

        r0 := @parameter0: android.media.MediaPlayer;

        specialinvoke r0.<android.media.MediaPlayer: void startImpl()>();

        return;
    }

    static android.media.SubtitleController access$100(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;
        android.media.SubtitleController $r1;

        r0 := @parameter0: android.media.MediaPlayer;

        $r1 = r0.<android.media.MediaPlayer: android.media.SubtitleController mSubtitleController>;

        return $r1;
    }

    static android.media.MediaPlayer$OnPreparedListener access$1000(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnPreparedListener $r1;

        r0 := @parameter0: android.media.MediaPlayer;

        $r1 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnPreparedListener mOnPreparedListener>;

        return $r1;
    }

    static android.media.SubtitleController access$102(android.media.MediaPlayer, android.media.SubtitleController)
    {
        android.media.MediaPlayer r0;
        android.media.SubtitleController r1;

        r0 := @parameter0: android.media.MediaPlayer;

        r1 := @parameter1: android.media.SubtitleController;

        r0.<android.media.MediaPlayer: android.media.SubtitleController mSubtitleController> = r1;

        return r1;
    }

    static android.media.MediaPlayer$OnDrmInfoHandlerDelegate access$1100(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnDrmInfoHandlerDelegate $r1;

        r0 := @parameter0: android.media.MediaPlayer;

        $r1 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnDrmInfoHandlerDelegate mOnDrmInfoHandlerDelegate>;

        return $r1;
    }

    static java.lang.Object access$1200(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.media.MediaPlayer;

        $r1 = r0.<android.media.MediaPlayer: java.lang.Object mDrmLock>;

        return $r1;
    }

    static android.media.MediaPlayer$DrmInfo access$1300(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$DrmInfo $r1;

        r0 := @parameter0: android.media.MediaPlayer;

        $r1 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$DrmInfo mDrmInfo>;

        return $r1;
    }

    static android.media.MediaPlayer$OnCompletionListener access$1500(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnCompletionListener $r1;

        r0 := @parameter0: android.media.MediaPlayer;

        $r1 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnCompletionListener mOnCompletionInternalListener>;

        return $r1;
    }

    static android.media.MediaPlayer$OnCompletionListener access$1600(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnCompletionListener $r1;

        r0 := @parameter0: android.media.MediaPlayer;

        $r1 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnCompletionListener mOnCompletionListener>;

        return $r1;
    }

    static void access$1700(android.media.MediaPlayer, boolean)
    {
        android.media.MediaPlayer r0;
        boolean z0;

        r0 := @parameter0: android.media.MediaPlayer;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.media.MediaPlayer: void stayAwake(boolean)>(z0);

        return;
    }

    static android.media.MediaPlayer$OnBufferingUpdateListener access$1800(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnBufferingUpdateListener $r1;

        r0 := @parameter0: android.media.MediaPlayer;

        $r1 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnBufferingUpdateListener mOnBufferingUpdateListener>;

        return $r1;
    }

    static android.media.MediaPlayer$OnSeekCompleteListener access$1900(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnSeekCompleteListener $r1;

        r0 := @parameter0: android.media.MediaPlayer;

        $r1 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnSeekCompleteListener mOnSeekCompleteListener>;

        return $r1;
    }

    static android.media.MediaPlayer$OnVideoSizeChangedListener access$2000(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnVideoSizeChangedListener $r1;

        r0 := @parameter0: android.media.MediaPlayer;

        $r1 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnVideoSizeChangedListener mOnVideoSizeChangedListener>;

        return $r1;
    }

    static android.media.MediaPlayer$OnErrorListener access$2100(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnErrorListener $r1;

        r0 := @parameter0: android.media.MediaPlayer;

        $r1 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnErrorListener mOnErrorListener>;

        return $r1;
    }

    static android.media.MediaPlayer$OnInfoListener access$2200(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnInfoListener $r1;

        r0 := @parameter0: android.media.MediaPlayer;

        $r1 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnInfoListener mOnInfoListener>;

        return $r1;
    }

    static android.media.MediaPlayer$OnTimedTextListener access$2300(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnTimedTextListener $r1;

        r0 := @parameter0: android.media.MediaPlayer;

        $r1 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnTimedTextListener mOnTimedTextListener>;

        return $r1;
    }

    static boolean access$2400(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;
        boolean $z0;

        r0 := @parameter0: android.media.MediaPlayer;

        $z0 = r0.<android.media.MediaPlayer: boolean mSubtitleDataListenerDisabled>;

        return $z0;
    }

    static android.media.MediaPlayer$OnSubtitleDataListener access$2500(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnSubtitleDataListener $r1;

        r0 := @parameter0: android.media.MediaPlayer;

        $r1 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnSubtitleDataListener mExtSubtitleDataListener>;

        return $r1;
    }

    static android.os.Handler access$2600(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;
        android.os.Handler $r1;

        r0 := @parameter0: android.media.MediaPlayer;

        $r1 = r0.<android.media.MediaPlayer: android.os.Handler mExtSubtitleDataHandler>;

        return $r1;
    }

    static android.media.MediaPlayer$OnSubtitleDataListener access$2700(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnSubtitleDataListener $r1;

        r0 := @parameter0: android.media.MediaPlayer;

        $r1 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnSubtitleDataListener mIntSubtitleDataListener>;

        return $r1;
    }

    static android.media.MediaPlayer$OnTimedMetaDataAvailableListener access$2900(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnTimedMetaDataAvailableListener $r1;

        r0 := @parameter0: android.media.MediaPlayer;

        $r1 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnTimedMetaDataAvailableListener mOnTimedMetaDataAvailableListener>;

        return $r1;
    }

    static java.util.Vector access$300(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;
        java.util.Vector $r1;

        r0 := @parameter0: android.media.MediaPlayer;

        $r1 = r0.<android.media.MediaPlayer: java.util.Vector mIndexTrackPairs>;

        return $r1;
    }

    static android.util.ArrayMap access$3000(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;
        android.util.ArrayMap $r1;

        r0 := @parameter0: android.media.MediaPlayer;

        $r1 = r0.<android.media.MediaPlayer: android.util.ArrayMap mRoutingChangeListeners>;

        return $r1;
    }

    static android.media.MediaPlayer$OnMediaTimeDiscontinuityListener access$3100(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnMediaTimeDiscontinuityListener $r1;

        r0 := @parameter0: android.media.MediaPlayer;

        $r1 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnMediaTimeDiscontinuityListener mOnMediaTimeDiscontinuityListener>;

        return $r1;
    }

    static android.os.Handler access$3200(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;
        android.os.Handler $r1;

        r0 := @parameter0: android.media.MediaPlayer;

        $r1 = r0.<android.media.MediaPlayer: android.os.Handler mOnMediaTimeDiscontinuityHandler>;

        return $r1;
    }

    static android.media.MediaPlayer$OnDrmPreparedHandlerDelegate access$3800(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnDrmPreparedHandlerDelegate $r1;

        r0 := @parameter0: android.media.MediaPlayer;

        $r1 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnDrmPreparedHandlerDelegate mOnDrmPreparedHandlerDelegate>;

        return $r1;
    }

    static android.media.MediaDrm access$3900(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;
        android.media.MediaDrm $r1;

        r0 := @parameter0: android.media.MediaPlayer;

        $r1 = r0.<android.media.MediaPlayer: android.media.MediaDrm mDrmObj>;

        return $r1;
    }

    static java.util.Vector access$400(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;
        java.util.Vector $r1;

        r0 := @parameter0: android.media.MediaPlayer;

        $r1 = r0.<android.media.MediaPlayer: java.util.Vector mOpenSubtitleSources>;

        return $r1;
    }

    static boolean access$4000(android.media.MediaPlayer, java.util.UUID)
    {
        android.media.MediaPlayer r0;
        java.util.UUID r1;
        boolean $z0;

        r0 := @parameter0: android.media.MediaPlayer;

        r1 := @parameter1: java.util.UUID;

        $z0 = specialinvoke r0.<android.media.MediaPlayer: boolean resumePrepareDrm(java.util.UUID)>(r1);

        return $z0;
    }

    static boolean access$4102(android.media.MediaPlayer, boolean)
    {
        android.media.MediaPlayer r0;
        boolean z0;

        r0 := @parameter0: android.media.MediaPlayer;

        z0 := @parameter1: boolean;

        r0.<android.media.MediaPlayer: boolean mDrmProvisioningInProgress> = z0;

        return z0;
    }

    static boolean access$4202(android.media.MediaPlayer, boolean)
    {
        android.media.MediaPlayer r0;
        boolean z0;

        r0 := @parameter0: android.media.MediaPlayer;

        z0 := @parameter1: boolean;

        r0.<android.media.MediaPlayer: boolean mPrepareDrmInProgress> = z0;

        return z0;
    }

    static void access$4300(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;

        r0 := @parameter0: android.media.MediaPlayer;

        specialinvoke r0.<android.media.MediaPlayer: void cleanDrmObj()>();

        return;
    }

    static java.lang.Object access$500(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.media.MediaPlayer;

        $r1 = r0.<android.media.MediaPlayer: java.lang.Object mTimeProviderLock>;

        return $r1;
    }

    static android.media.MediaPlayer$TimeProvider access$600(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$TimeProvider $r1;

        r0 := @parameter0: android.media.MediaPlayer;

        $r1 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$TimeProvider mTimeProvider>;

        return $r1;
    }

    static android.media.MediaPlayer$EventHandler access$700(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$EventHandler $r1;

        r0 := @parameter0: android.media.MediaPlayer;

        $r1 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$EventHandler mEventHandler>;

        return $r1;
    }

    static long access$800(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;
        long $l0;

        r0 := @parameter0: android.media.MediaPlayer;

        $l0 = r0.<android.media.MediaPlayer: long mNativeContext>;

        return $l0;
    }

    static void access$900(android.media.MediaPlayer)
    {
        android.media.MediaPlayer r0;

        r0 := @parameter0: android.media.MediaPlayer;

        specialinvoke r0.<android.media.MediaPlayer: void scanInternalSubtitleTracks()>();

        return;
    }

    private boolean attemptDataSource(android.content.ContentResolver, android.net.Uri)
    {
        android.media.MediaPlayer r0;
        java.lang.Throwable $r1, $r2, $r3;
        android.content.ContentResolver r4;
        android.net.Uri r5;
        android.content.res.AssetFileDescriptor r6;

        r0 := @this: android.media.MediaPlayer;

        r4 := @parameter0: android.content.ContentResolver;

        r5 := @parameter1: android.net.Uri;

     label01:
        r6 = virtualinvoke r4.<android.content.ContentResolver: android.content.res.AssetFileDescriptor openAssetFileDescriptor(android.net.Uri,java.lang.String)>(r5, "r");

     label02:
        virtualinvoke r0.<android.media.MediaPlayer: void setDataSource(android.content.res.AssetFileDescriptor)>(r6);

     label03:
        if r6 == null goto label05;

     label04:
        virtualinvoke r6.<android.content.res.AssetFileDescriptor: void close()>();

     label05:
        return 1;

     label06:
        $r1 := @caughtexception;

        if r6 == null goto label11;

     label07:
        virtualinvoke r6.<android.content.res.AssetFileDescriptor: void close()>();

     label08:
        goto label11;

     label09:
        $r2 := @caughtexception;

     label10:
        virtualinvoke $r1.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r2);

     label11:
        throw $r1;

     label12:
        $r3 := @caughtexception;

        return 0;

        catch java.lang.NullPointerException from label01 to label02 with label12;
        catch java.lang.SecurityException from label01 to label02 with label12;
        catch java.io.IOException from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.NullPointerException from label04 to label05 with label12;
        catch java.lang.SecurityException from label04 to label05 with label12;
        catch java.io.IOException from label04 to label05 with label12;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.NullPointerException from label10 to label11 with label12;
        catch java.lang.SecurityException from label10 to label11 with label12;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.lang.NullPointerException from label11 to label12 with label12;
        catch java.lang.SecurityException from label11 to label12 with label12;
        catch java.io.IOException from label11 to label12 with label12;
    }

    private static boolean availableMimeTypeForExternalSource(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = "application/x-subrip";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private void cleanDrmObj()
    {
        android.media.MediaPlayer r0;
        java.lang.StringBuilder $r1;
        android.media.MediaDrm $r3, $r9, r12;
        byte[] $r6, r11;
        java.lang.String $r8;

        r0 := @this: android.media.MediaPlayer;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cleanDrmObj: mDrmObj=");

        $r3 = r0.<android.media.MediaPlayer: android.media.MediaDrm mDrmObj>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mDrmSessionId=");

        $r6 = r0.<android.media.MediaPlayer: byte[] mDrmSessionId>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaPlayer", $r8);

        r11 = r0.<android.media.MediaPlayer: byte[] mDrmSessionId>;

        if r11 == null goto label1;

        $r9 = r0.<android.media.MediaPlayer: android.media.MediaDrm mDrmObj>;

        virtualinvoke $r9.<android.media.MediaDrm: void closeSession(byte[])>(r11);

        r0.<android.media.MediaPlayer: byte[] mDrmSessionId> = null;

     label1:
        r12 = r0.<android.media.MediaPlayer: android.media.MediaDrm mDrmObj>;

        if r12 == null goto label2;

        virtualinvoke r12.<android.media.MediaDrm: void release()>();

        r0.<android.media.MediaPlayer: android.media.MediaDrm mDrmObj> = null;

     label2:
        return;
    }

    public static android.media.MediaPlayer create(android.content.Context, int)
    {
        android.content.Context r0;
        int i0, i1;
        android.media.MediaPlayer $r1;

        r0 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        i1 = staticinvoke <android.media.AudioSystem: int newAudioSessionId()>();

        if i1 <= 0 goto label1;

        goto label2;

     label1:
        i1 = 0;

     label2:
        $r1 = staticinvoke <android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int,android.media.AudioAttributes,int)>(r0, i0, null, i1);

        return $r1;
    }

    public static android.media.MediaPlayer create(android.content.Context, int, android.media.AudioAttributes, int)
    {
        int i0, i1;
        android.media.MediaPlayer r0;
        android.content.res.Resources $r1;
        java.io.FileDescriptor $r2;
        long $l2, $l3;
        java.lang.Throwable $r3, $r4, $r5;
        android.content.Context r6;
        android.media.AudioAttributes r7;
        android.content.res.AssetFileDescriptor r8;
        android.media.AudioAttributes$Builder r9;

        r6 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        r7 := @parameter2: android.media.AudioAttributes;

        i1 := @parameter3: int;

     label01:
        $r1 = virtualinvoke r6.<android.content.Context: android.content.res.Resources getResources()>();

        r8 = virtualinvoke $r1.<android.content.res.Resources: android.content.res.AssetFileDescriptor openRawResourceFd(int)>(i0);

     label02:
        if r8 != null goto label03;

        return null;

     label03:
        r0 = new android.media.MediaPlayer;

        specialinvoke r0.<android.media.MediaPlayer: void <init>()>();

     label04:
        if r7 == null goto label05;

        goto label06;

     label05:
        r9 = new android.media.AudioAttributes$Builder;

        specialinvoke r9.<android.media.AudioAttributes$Builder: void <init>()>();

        r7 = virtualinvoke r9.<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>();

     label06:
        virtualinvoke r0.<android.media.MediaPlayer: void setAudioAttributes(android.media.AudioAttributes)>(r7);

        virtualinvoke r0.<android.media.MediaPlayer: void setAudioSessionId(int)>(i1);

        $r2 = virtualinvoke r8.<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        $l2 = virtualinvoke r8.<android.content.res.AssetFileDescriptor: long getStartOffset()>();

        $l3 = virtualinvoke r8.<android.content.res.AssetFileDescriptor: long getLength()>();

        virtualinvoke r0.<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>($r2, $l2, $l3);

        virtualinvoke r8.<android.content.res.AssetFileDescriptor: void close()>();

        virtualinvoke r0.<android.media.MediaPlayer: void prepare()>();

     label07:
        return r0;

     label08:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaPlayer", "create failed:", $r3);

        goto label11;

     label09:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaPlayer", "create failed:", $r5);

        goto label11;

     label10:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaPlayer", "create failed:", $r4);

     label11:
        return null;

        catch java.io.IOException from label01 to label02 with label10;
        catch java.lang.IllegalArgumentException from label01 to label02 with label09;
        catch java.lang.SecurityException from label01 to label02 with label08;
        catch java.io.IOException from label03 to label04 with label10;
        catch java.lang.IllegalArgumentException from label03 to label04 with label09;
        catch java.lang.SecurityException from label03 to label04 with label08;
        catch java.io.IOException from label05 to label06 with label10;
        catch java.lang.IllegalArgumentException from label05 to label06 with label09;
        catch java.lang.SecurityException from label05 to label06 with label08;
        catch java.io.IOException from label06 to label07 with label10;
        catch java.lang.IllegalArgumentException from label06 to label07 with label09;
        catch java.lang.SecurityException from label06 to label07 with label08;
    }

    public static android.media.MediaPlayer create(android.content.Context, android.net.Uri)
    {
        android.content.Context r0;
        android.net.Uri r1;
        android.media.MediaPlayer $r2;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.net.Uri;

        $r2 = staticinvoke <android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri,android.view.SurfaceHolder)>(r0, r1, null);

        return $r2;
    }

    public static android.media.MediaPlayer create(android.content.Context, android.net.Uri, android.view.SurfaceHolder)
    {
        android.content.Context r0;
        android.net.Uri r1;
        android.view.SurfaceHolder r2;
        android.media.MediaPlayer $r3;
        int i0;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.net.Uri;

        r2 := @parameter2: android.view.SurfaceHolder;

        i0 = staticinvoke <android.media.AudioSystem: int newAudioSessionId()>();

        if i0 <= 0 goto label1;

        goto label2;

     label1:
        i0 = 0;

     label2:
        $r3 = staticinvoke <android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri,android.view.SurfaceHolder,android.media.AudioAttributes,int)>(r0, r1, r2, null, i0);

        return $r3;
    }

    public static android.media.MediaPlayer create(android.content.Context, android.net.Uri, android.view.SurfaceHolder, android.media.AudioAttributes, int)
    {
        android.net.Uri r0;
        android.view.SurfaceHolder r1;
        int i0;
        android.media.MediaPlayer r2;
        java.lang.Throwable $r3, $r4, $r5;
        android.content.Context r6;
        android.media.AudioAttributes r7;
        android.media.AudioAttributes$Builder r8;

        r6 := @parameter0: android.content.Context;

        r0 := @parameter1: android.net.Uri;

        r1 := @parameter2: android.view.SurfaceHolder;

        r7 := @parameter3: android.media.AudioAttributes;

        i0 := @parameter4: int;

     label01:
        r2 = new android.media.MediaPlayer;

        specialinvoke r2.<android.media.MediaPlayer: void <init>()>();

     label02:
        if r7 == null goto label03;

        goto label04;

     label03:
        r8 = new android.media.AudioAttributes$Builder;

        specialinvoke r8.<android.media.AudioAttributes$Builder: void <init>()>();

        r7 = virtualinvoke r8.<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>();

     label04:
        virtualinvoke r2.<android.media.MediaPlayer: void setAudioAttributes(android.media.AudioAttributes)>(r7);

        virtualinvoke r2.<android.media.MediaPlayer: void setAudioSessionId(int)>(i0);

        virtualinvoke r2.<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>(r6, r0);

     label05:
        if r1 == null goto label07;

     label06:
        virtualinvoke r2.<android.media.MediaPlayer: void setDisplay(android.view.SurfaceHolder)>(r1);

     label07:
        virtualinvoke r2.<android.media.MediaPlayer: void prepare()>();

     label08:
        return r2;

     label09:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaPlayer", "create failed:", $r4);

        goto label12;

     label10:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaPlayer", "create failed:", $r3);

        goto label12;

     label11:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaPlayer", "create failed:", $r5);

     label12:
        return null;

        catch java.io.IOException from label01 to label02 with label11;
        catch java.lang.IllegalArgumentException from label01 to label02 with label10;
        catch java.lang.SecurityException from label01 to label02 with label09;
        catch java.io.IOException from label03 to label04 with label11;
        catch java.lang.IllegalArgumentException from label03 to label04 with label10;
        catch java.lang.SecurityException from label03 to label04 with label09;
        catch java.io.IOException from label04 to label05 with label11;
        catch java.lang.IllegalArgumentException from label04 to label05 with label10;
        catch java.lang.SecurityException from label04 to label05 with label09;
        catch java.io.IOException from label06 to label07 with label11;
        catch java.lang.IllegalArgumentException from label06 to label07 with label10;
        catch java.lang.SecurityException from label06 to label07 with label09;
        catch java.io.IOException from label07 to label08 with label11;
        catch java.lang.IllegalArgumentException from label07 to label08 with label10;
        catch java.lang.SecurityException from label07 to label08 with label09;
    }

    private void enableNativeRoutingCallbacksLocked(boolean)
    {
        android.media.MediaPlayer r0;
        boolean z0;
        android.util.ArrayMap $r1;
        int $i0;

        r0 := @this: android.media.MediaPlayer;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.media.MediaPlayer: android.util.ArrayMap mRoutingChangeListeners>;

        $i0 = virtualinvoke $r1.<android.util.ArrayMap: int size()>();

        if $i0 != 0 goto label1;

        specialinvoke r0.<android.media.MediaPlayer: void native_enableDeviceCallback(boolean)>(z0);

     label1:
        return;
    }

    private int getAudioStreamType()
    {
        android.media.MediaPlayer r0;
        int $i0, $i1, $i2;

        r0 := @this: android.media.MediaPlayer;

        $i0 = r0.<android.media.MediaPlayer: int mStreamType>;

        if $i0 != -2147483648 goto label1;

        $i2 = specialinvoke r0.<android.media.MediaPlayer: int _getAudioStreamType()>();

        r0.<android.media.MediaPlayer: int mStreamType> = $i2;

     label1:
        $i1 = r0.<android.media.MediaPlayer: int mStreamType>;

        return $i1;
    }

    private static final byte[] getByteArrayFromUUID(java.util.UUID)
    {
        long l0, l1, $l4, $l10;
        int $i2, $i3, $i5, $i8, $i9, $i11, $i14, i15;
        byte $b6, $b7, $b12, $b13;
        java.util.UUID r0;
        byte[] r1;

        r0 := @parameter0: java.util.UUID;

        l0 = virtualinvoke r0.<java.util.UUID: long getMostSignificantBits()>();

        l1 = virtualinvoke r0.<java.util.UUID: long getLeastSignificantBits()>();

        r1 = newarray (byte)[16];

        i15 = 0;

     label1:
        if i15 >= 8 goto label2;

        $i2 = 7 - i15;

        $i3 = $i2 * 8;

        $l4 = l0 >>> $i3;

        $i5 = (int) $l4;

        $b6 = (byte) $i5;

        $b7 = (byte) $b6;

        r1[i15] = $b7;

        $i14 = i15 + 8;

        $i8 = 7 - i15;

        $i9 = $i8 * 8;

        $l10 = l1 >>> $i9;

        $i11 = (int) $l10;

        $b12 = (byte) $i11;

        $b13 = (byte) $b12;

        r1[$i14] = $b13;

        i15 = i15 + 1;

        goto label1;

     label2:
        return r1;
    }

    private android.media.MediaPlayer$TrackInfo[] getInbandTrackInfo() throws java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;
        android.os.Parcel r1, r2;
        android.os.Parcelable$Creator $r3;
        java.lang.Object[] $r4;
        java.lang.Throwable $r5;
        android.media.MediaPlayer$TrackInfo[] r6;

        r0 := @this: android.media.MediaPlayer;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.media.IMediaPlayer");

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(1);

        virtualinvoke r0.<android.media.MediaPlayer: void invoke(android.os.Parcel,android.os.Parcel)>(r1, r2);

        $r3 = <android.media.MediaPlayer$TrackInfo: android.os.Parcelable$Creator CREATOR>;

        $r4 = virtualinvoke r2.<android.os.Parcel: java.lang.Object[] createTypedArray(android.os.Parcelable$Creator)>($r3);

        r6 = (android.media.MediaPlayer$TrackInfo[]) $r4;

     label2:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        return r6;

     label3:
        $r5 := @caughtexception;

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private boolean isVideoScalingModeSupported(int)
    {
        android.media.MediaPlayer r0;
        int i0;
        boolean z1;

        r0 := @this: android.media.MediaPlayer;

        i0 := @parameter0: int;

        z1 = 1;

        if i0 == 1 goto label2;

        if i0 != 2 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    private native void nativeSetDataSource(android.os.IBinder, java.lang.String, java.lang.String[], java.lang.String[]) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.SecurityException, java.lang.IllegalStateException;

    private native int native_applyVolumeShaper(android.media.VolumeShaper$Configuration, android.media.VolumeShaper$Operation);

    private final native void native_enableDeviceCallback(boolean);

    private final native void native_finalize();

    private final native boolean native_getMetadata(boolean, boolean, android.os.Parcel);

    private native android.os.PersistableBundle native_getMetrics();

    private final native int native_getRoutedDeviceId();

    private native android.media.VolumeShaper$State native_getVolumeShaperState(int);

    private static final native void native_init();

    private final native int native_invoke(android.os.Parcel, android.os.Parcel);

    public static native int native_pullBatteryData(android.os.Parcel);

    private final native int native_setMetadataFilter(android.os.Parcel);

    private final native boolean native_setOutputDevice(int);

    private final native int native_setRetransmitEndpoint(java.lang.String, int);

    private final native void native_setup(java.lang.Object);

    private void populateInbandTracks()
    {
        android.media.MediaPlayer r0;
        java.util.Vector r1, $r6, $r13;
        int $i0, $i1, i3;
        java.util.BitSet $r2, $r3;
        boolean $z0;
        android.media.MediaPlayer$TrackInfo $r4, $r5, $r9, $r10;
        java.lang.Integer $r7, $r14;
        android.util.Pair $r8, $r15;
        android.media.SubtitleController $r11;
        android.media.MediaFormat $r12;
        java.lang.String $r18;
        java.lang.Throwable $r19;
        android.media.MediaPlayer$TrackInfo[] r20;
        java.lang.StringBuilder r21;
        android.media.SubtitleTrack r22;

        r0 := @this: android.media.MediaPlayer;

        r20 = specialinvoke r0.<android.media.MediaPlayer: android.media.MediaPlayer$TrackInfo[] getInbandTrackInfo()>();

        r1 = r0.<android.media.MediaPlayer: java.util.Vector mIndexTrackPairs>;

        entermonitor r1;

        i3 = 0;

     label01:
        $i0 = lengthof r20;

        if i3 >= $i0 goto label11;

        $r2 = r0.<android.media.MediaPlayer: java.util.BitSet mInbandTrackIndices>;

        $z0 = virtualinvoke $r2.<java.util.BitSet: boolean get(int)>(i3);

        if $z0 == 0 goto label03;

     label02:
        goto label10;

     label03:
        $r3 = r0.<android.media.MediaPlayer: java.util.BitSet mInbandTrackIndices>;

        virtualinvoke $r3.<java.util.BitSet: void set(int)>(i3);

     label04:
        $r4 = r20[i3];

        if $r4 != null goto label06;

     label05:
        r21 = new java.lang.StringBuilder;

        specialinvoke r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unexpected NULL track at index ");

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r18 = virtualinvoke r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MediaPlayer", $r18);

     label06:
        $r5 = r20[i3];

        if $r5 == null goto label09;

     label07:
        $r9 = r20[i3];

        $i1 = virtualinvoke $r9.<android.media.MediaPlayer$TrackInfo: int getTrackType()>();

        if $i1 != 4 goto label09;

        $r11 = r0.<android.media.MediaPlayer: android.media.SubtitleController mSubtitleController>;

        $r10 = r20[i3];

        $r12 = virtualinvoke $r10.<android.media.MediaPlayer$TrackInfo: android.media.MediaFormat getFormat()>();

        r22 = virtualinvoke $r11.<android.media.SubtitleController: android.media.SubtitleTrack addTrack(android.media.MediaFormat)>($r12);

        $r13 = r0.<android.media.MediaPlayer: java.util.Vector mIndexTrackPairs>;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $r15 = staticinvoke <android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>($r14, r22);

        virtualinvoke $r13.<java.util.Vector: boolean add(java.lang.Object)>($r15);

     label08:
        goto label10;

     label09:
        $r6 = r0.<android.media.MediaPlayer: java.util.Vector mIndexTrackPairs>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $r8 = staticinvoke <android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>($r7, null);

        virtualinvoke $r6.<java.util.Vector: boolean add(java.lang.Object)>($r8);

     label10:
        i3 = i3 + 1;

        goto label01;

     label11:
        exitmonitor r1;

     label12:
        return;

     label13:
        $r19 := @caughtexception;

     label14:
        exitmonitor r1;

     label15:
        throw $r19;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    private static void postEventFromNative(java.lang.Object, int, int, int, java.lang.Object)
    {
        int i0, i1, i2;
        java.lang.ref.WeakReference $r1;
        java.lang.Object $r2, r14, r15, r17, r20;
        android.media.MediaPlayer$EventHandler $r3, r21;
        java.lang.Thread $r4;
        android.media.MediaPlayer$6 $r5;
        boolean $z1;
        java.lang.StringBuilder $r6;
        java.lang.String $r9;
        android.media.MediaPlayer$DrmInfo $r10;
        android.os.Parcel $r11;
        java.lang.Throwable $r12, $r13;
        android.media.MediaPlayer r16;
        android.os.Message r22;

        r14 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r15 := @parameter4: java.lang.Object;

        $r1 = (java.lang.ref.WeakReference) r14;

        $r2 = virtualinvoke $r1.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r16 = (android.media.MediaPlayer) $r2;

        if r16 != null goto label01;

        return;

     label01:
        if i0 == 1 goto label10;

        if i0 == 200 goto label09;

        if i0 == 210 goto label02;

        goto label12;

     label02:
        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaPlayer", "postEventFromNative MEDIA_DRM_INFO");

        $z1 = r15 instanceof android.os.Parcel;

        if $z1 == 0 goto label08;

        $r10 = new android.media.MediaPlayer$DrmInfo;

        $r11 = (android.os.Parcel) r15;

        specialinvoke $r10.<android.media.MediaPlayer$DrmInfo: void <init>(android.os.Parcel,android.media.MediaPlayer$1)>($r11, null);

        r17 = r16.<android.media.MediaPlayer: java.lang.Object mDrmLock>;

        entermonitor r17;

     label03:
        r16.<android.media.MediaPlayer: android.media.MediaPlayer$DrmInfo mDrmInfo> = $r10;

        exitmonitor r17;

     label04:
        goto label12;

     label05:
        $r13 := @caughtexception;

     label06:
        exitmonitor r17;

     label07:
        throw $r13;

     label08:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MEDIA_DRM_INFO msg.obj of unexpected type ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r15);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MediaPlayer", $r9);

        goto label12;

     label09:
        if i1 != 2 goto label12;

        $r4 = new java.lang.Thread;

        $r5 = new android.media.MediaPlayer$6;

        specialinvoke $r5.<android.media.MediaPlayer$6: void <init>(android.media.MediaPlayer)>(r16);

        specialinvoke $r4.<java.lang.Thread: void <init>(java.lang.Runnable)>($r5);

        virtualinvoke $r4.<java.lang.Thread: void start()>();

        staticinvoke <java.lang.Thread: void yield()>();

        goto label12;

     label10:
        r20 = r16.<android.media.MediaPlayer: java.lang.Object mDrmLock>;

        entermonitor r20;

     label11:
        r16.<android.media.MediaPlayer: boolean mDrmInfoResolved> = 1;

        exitmonitor r20;

     label12:
        r21 = r16.<android.media.MediaPlayer: android.media.MediaPlayer$EventHandler mEventHandler>;

        if r21 == null goto label13;

        r22 = virtualinvoke r21.<android.media.MediaPlayer$EventHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(i0, i1, i2, r15);

        $r3 = r16.<android.media.MediaPlayer: android.media.MediaPlayer$EventHandler mEventHandler>;

        virtualinvoke $r3.<android.media.MediaPlayer$EventHandler: boolean sendMessage(android.os.Message)>(r22);

     label13:
        return;

     label14:
        $r12 := @caughtexception;

     label15:
        exitmonitor r20;

     label16:
        throw $r12;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    private void prepareDrm_createDrmStep(java.util.UUID) throws android.media.UnsupportedSchemeException
    {
        android.media.MediaPlayer r0;
        java.lang.StringBuilder $r1, $r10, r17;
        java.lang.String $r4, $r8, $r13;
        android.media.MediaDrm $r6, r16;
        java.lang.Exception $r9;
        java.util.UUID r14;

        r0 := @this: android.media.MediaPlayer;

        r14 := @parameter0: java.util.UUID;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("prepareDrm_createDrmStep: UUID: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r14);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaPlayer", $r4);

     label1:
        r16 = new android.media.MediaDrm;

        specialinvoke r16.<android.media.MediaDrm: void <init>(java.util.UUID)>(r14);

        r0.<android.media.MediaPlayer: android.media.MediaDrm mDrmObj> = r16;

        r17 = new java.lang.StringBuilder;

        specialinvoke r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("prepareDrm_createDrmStep: Created mDrmObj=");

        $r6 = r0.<android.media.MediaPlayer: android.media.MediaDrm mDrmObj>;

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaPlayer", $r8);

     label2:
        return;

     label3:
        $r9 := @caughtexception;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("prepareDrm_createDrmStep: MediaDrm failed with ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MediaPlayer", $r13);

        throw $r9;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void prepareDrm_openSessionStep(java.util.UUID) throws android.media.NotProvisionedException, android.media.ResourceBusyException
    {
        android.media.MediaPlayer r0;
        java.lang.StringBuilder $r1, $r14, r20;
        java.lang.String $r4, $r10, $r17;
        android.media.MediaDrm $r5;
        byte[] $r6, $r8, $r11, $r12;
        java.lang.Exception $r13;
        java.util.UUID r18;

        r0 := @this: android.media.MediaPlayer;

        r18 := @parameter0: java.util.UUID;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("prepareDrm_openSessionStep: uuid: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r18);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaPlayer", $r4);

     label1:
        $r5 = r0.<android.media.MediaPlayer: android.media.MediaDrm mDrmObj>;

        $r6 = virtualinvoke $r5.<android.media.MediaDrm: byte[] openSession()>();

        r0.<android.media.MediaPlayer: byte[] mDrmSessionId> = $r6;

        r20 = new java.lang.StringBuilder;

        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("prepareDrm_openSessionStep: mDrmSessionId=");

        $r8 = r0.<android.media.MediaPlayer: byte[] mDrmSessionId>;

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaPlayer", $r10);

        $r11 = staticinvoke <android.media.MediaPlayer: byte[] getByteArrayFromUUID(java.util.UUID)>(r18);

        $r12 = r0.<android.media.MediaPlayer: byte[] mDrmSessionId>;

        specialinvoke r0.<android.media.MediaPlayer: void _prepareDrm(byte[],byte[])>($r11, $r12);

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaPlayer", "prepareDrm_openSessionStep: _prepareDrm/Crypto succeeded");

     label2:
        return;

     label3:
        $r13 := @caughtexception;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("prepareDrm_openSessionStep: open/crypto failed with ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MediaPlayer", $r17);

        throw $r13;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void resetDrmState()
    {
        android.media.MediaPlayer r0;
        java.lang.Object r1;
        android.media.MediaPlayer$DrmInfo $r4;
        android.media.MediaPlayer$ProvisioningThread $r7, $r14, r21;
        boolean $z0, $z1;
        java.lang.String $r13, $r18;
        java.lang.Throwable $r15, $r19;
        java.lang.StringBuilder r20, r22;

        r0 := @this: android.media.MediaPlayer;

        r1 = r0.<android.media.MediaPlayer: java.lang.Object mDrmLock>;

        entermonitor r1;

     label01:
        r20 = new java.lang.StringBuilder;

        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("resetDrmState:  mDrmInfo=");

        $r4 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$DrmInfo mDrmInfo>;

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mDrmProvisioningThread=");

        $r7 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$ProvisioningThread mDrmProvisioningThread>;

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mPrepareDrmInProgress=");

        $z0 = r0.<android.media.MediaPlayer: boolean mPrepareDrmInProgress>;

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mActiveDrmScheme=");

        $z1 = r0.<android.media.MediaPlayer: boolean mActiveDrmScheme>;

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r13 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaPlayer", $r13);

        r0.<android.media.MediaPlayer: boolean mDrmInfoResolved> = 0;

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$DrmInfo mDrmInfo> = null;

        r21 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$ProvisioningThread mDrmProvisioningThread>;

     label02:
        if r21 == null goto label08;

     label03:
        $r14 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$ProvisioningThread mDrmProvisioningThread>;

        virtualinvoke $r14.<android.media.MediaPlayer$ProvisioningThread: void join()>();

     label04:
        goto label07;

     label05:
        $r15 := @caughtexception;

     label06:
        r22 = new java.lang.StringBuilder;

        specialinvoke r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("resetDrmState: ProvThread.join Exception ");

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r18 = virtualinvoke r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MediaPlayer", $r18);

     label07:
        r0.<android.media.MediaPlayer: android.media.MediaPlayer$ProvisioningThread mDrmProvisioningThread> = null;

     label08:
        r0.<android.media.MediaPlayer: boolean mPrepareDrmInProgress> = 0;

        r0.<android.media.MediaPlayer: boolean mActiveDrmScheme> = 0;

        specialinvoke r0.<android.media.MediaPlayer: void cleanDrmObj()>();

        exitmonitor r1;

     label09:
        return;

     label10:
        $r19 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r19;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.InterruptedException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private boolean resumePrepareDrm(java.util.UUID)
    {
        android.media.MediaPlayer r0;
        java.lang.StringBuilder $r1, $r6;
        java.lang.String $r4, $r9;
        java.lang.Exception $r5;
        java.util.UUID r10;
        boolean z0;

        r0 := @this: android.media.MediaPlayer;

        r10 := @parameter0: java.util.UUID;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("resumePrepareDrm: uuid: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaPlayer", $r4);

        z0 = 0;

     label1:
        specialinvoke r0.<android.media.MediaPlayer: void prepareDrm_openSessionStep(java.util.UUID)>(r10);

        r0.<android.media.MediaPlayer: java.util.UUID mDrmUUID> = r10;

        r0.<android.media.MediaPlayer: boolean mActiveDrmScheme> = 1;

     label2:
        z0 = 1;

        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HandleProvisioninig: Thread run _prepareDrm resume failed with ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MediaPlayer", $r9);

     label4:
        return z0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void scanInternalSubtitleTracks()
    {
        android.media.MediaPlayer r0;
        android.media.SubtitleController r1;

        r0 := @this: android.media.MediaPlayer;

        specialinvoke r0.<android.media.MediaPlayer: void setSubtitleAnchor()>();

        specialinvoke r0.<android.media.MediaPlayer: void populateInbandTracks()>();

        r1 = r0.<android.media.MediaPlayer: android.media.SubtitleController mSubtitleController>;

        if r1 == null goto label1;

        virtualinvoke r1.<android.media.SubtitleController: void selectDefaultTrack()>();

     label1:
        return;
    }

    private void selectOrDeselectInbandTrack(int, boolean) throws java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;
        int i0;
        boolean z0;
        android.os.Parcel r1, r2;
        java.lang.Throwable $r4;
        byte b1;

        r0 := @this: android.media.MediaPlayer;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.media.IMediaPlayer");

     label2:
        if z0 == 0 goto label3;

        b1 = 4;

        goto label4;

     label3:
        b1 = 5;

     label4:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(b1);

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i0);

        virtualinvoke r0.<android.media.MediaPlayer: void invoke(android.os.Parcel,android.os.Parcel)>(r1, r2);

     label5:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        return;

     label6:
        $r4 := @caughtexception;

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    private void selectOrDeselectTrack(int, boolean) throws java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;
        boolean z0;
        android.util.Pair r1, r19;
        java.util.Vector $r2, $r6, $r7, r22;
        java.lang.Object $r3, $r4, $r8, $r9, $r10, $r11, $r15;
        int $i0, $i1, $i2, $i4, i5, i6;
        android.media.SubtitleController $r5, $r14, r21;
        java.lang.Integer $r12, $r16;
        android.media.SubtitleTrack $r13, r20;
        java.lang.Throwable $r17;
        java.lang.ArrayIndexOutOfBoundsException $r18;

        r0 := @this: android.media.MediaPlayer;

        i5 := @parameter0: int;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.media.MediaPlayer: void populateInbandTracks()>();

     label01:
        $r2 = r0.<android.media.MediaPlayer: java.util.Vector mIndexTrackPairs>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object get(int)>(i5);

        r19 = (android.util.Pair) $r3;

     label02:
        $r4 = r19.<android.util.Pair: java.lang.Object second>;

        r20 = (android.media.SubtitleTrack) $r4;

        if r20 != null goto label03;

        $r15 = r19.<android.util.Pair: java.lang.Object first>;

        $r16 = (java.lang.Integer) $r15;

        $i4 = virtualinvoke $r16.<java.lang.Integer: int intValue()>();

        specialinvoke r0.<android.media.MediaPlayer: void selectOrDeselectInbandTrack(int,boolean)>($i4, z0);

        return;

     label03:
        r21 = r0.<android.media.MediaPlayer: android.media.SubtitleController mSubtitleController>;

        if r21 != null goto label04;

        return;

     label04:
        if z0 != 0 goto label07;

        $r13 = virtualinvoke r21.<android.media.SubtitleController: android.media.SubtitleTrack getSelectedTrack()>();

        if $r13 != r20 goto label05;

        $r14 = r0.<android.media.MediaPlayer: android.media.SubtitleController mSubtitleController>;

        virtualinvoke $r14.<android.media.SubtitleController: boolean selectTrack(android.media.SubtitleTrack)>(null);

        goto label06;

     label05:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MediaPlayer", "trying to deselect track that was not selected");

     label06:
        return;

     label07:
        $i0 = virtualinvoke r20.<android.media.SubtitleTrack: int getTrackType()>();

        if $i0 != 3 goto label14;

        i6 = virtualinvoke r0.<android.media.MediaPlayer: int getSelectedTrack(int)>(3);

        r22 = r0.<android.media.MediaPlayer: java.util.Vector mIndexTrackPairs>;

        entermonitor r22;

        if i6 < 0 goto label09;

     label08:
        $r6 = r0.<android.media.MediaPlayer: java.util.Vector mIndexTrackPairs>;

        $i1 = virtualinvoke $r6.<java.util.Vector: int size()>();

        if i6 >= $i1 goto label09;

        $r7 = r0.<android.media.MediaPlayer: java.util.Vector mIndexTrackPairs>;

        $r8 = virtualinvoke $r7.<java.util.Vector: java.lang.Object get(int)>(i6);

        r1 = (android.util.Pair) $r8;

        $r9 = r1.<android.util.Pair: java.lang.Object first>;

        if $r9 == null goto label09;

        $r10 = r1.<android.util.Pair: java.lang.Object second>;

        if $r10 != null goto label09;

        $r11 = r1.<android.util.Pair: java.lang.Object first>;

        $r12 = (java.lang.Integer) $r11;

        $i2 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        specialinvoke r0.<android.media.MediaPlayer: void selectOrDeselectInbandTrack(int,boolean)>($i2, 0);

     label09:
        exitmonitor r22;

     label10:
        goto label14;

     label11:
        $r17 := @caughtexception;

     label12:
        exitmonitor r22;

     label13:
        throw $r17;

     label14:
        $r5 = r0.<android.media.MediaPlayer: android.media.SubtitleController mSubtitleController>;

        virtualinvoke $r5.<android.media.SubtitleController: boolean selectTrack(android.media.SubtitleTrack)>(r20);

        return;

     label15:
        $r18 := @caughtexception;

        return;

        catch java.lang.ArrayIndexOutOfBoundsException from label01 to label02 with label15;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    private void setDataSource(java.lang.String, java.util.Map, java.util.List) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.SecurityException, java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;
        java.lang.String r1, $r8, $r10;
        java.util.List r2;
        java.lang.String[] r3, r4, r12, r13;
        int $i0, $i1, i2;
        java.util.Set $r5;
        boolean $z0;
        java.lang.Object $r6, $r7, $r9;
        java.util.Map r11;
        java.util.Iterator r14;
        java.util.Map$Entry r15;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: java.lang.String;

        r11 := @parameter1: java.util.Map;

        r2 := @parameter2: java.util.List;

        r12 = null;

        r13 = null;

        if r11 == null goto label2;

        $i0 = interfaceinvoke r11.<java.util.Map: int size()>();

        r3 = newarray (java.lang.String)[$i0];

        $i1 = interfaceinvoke r11.<java.util.Map: int size()>();

        r4 = newarray (java.lang.String)[$i1];

        i2 = 0;

        $r5 = interfaceinvoke r11.<java.util.Map: java.util.Set entrySet()>();

        r14 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        r12 = r3;

        r13 = r4;

        $z0 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        r15 = (java.util.Map$Entry) $r6;

        $r7 = interfaceinvoke r15.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (java.lang.String) $r7;

        r3[i2] = $r8;

        $r9 = interfaceinvoke r15.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (java.lang.String) $r9;

        r4[i2] = $r10;

        i2 = i2 + 1;

        goto label1;

     label2:
        specialinvoke r0.<android.media.MediaPlayer: void setDataSource(java.lang.String,java.lang.String[],java.lang.String[],java.util.List)>(r1, r12, r13, r2);

        return;
    }

    private void setDataSource(java.lang.String, java.lang.String[], java.lang.String[], java.util.List) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.SecurityException, java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;
        java.lang.String[] r1, r12;
        java.util.List r2;
        java.lang.String r3, $r4, r11, r14;
        boolean $z0;
        java.io.FileInputStream $r5;
        java.io.File $r6;
        java.io.FileDescriptor $r7;
        android.os.IBinder $r8;
        java.lang.Throwable $r9, $r10;
        android.net.Uri r13;

        r0 := @this: android.media.MediaPlayer;

        r11 := @parameter0: java.lang.String;

        r12 := @parameter1: java.lang.String[];

        r1 := @parameter2: java.lang.String[];

        r2 := @parameter3: java.util.List;

        r13 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>(r11);

        r3 = virtualinvoke r13.<android.net.Uri: java.lang.String getScheme()>();

        $r4 = "file";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z0 == 0 goto label1;

        r14 = virtualinvoke r13.<android.net.Uri: java.lang.String getPath()>();

        goto label2;

     label1:
        r14 = r11;

        if r3 == null goto label2;

        $r8 = staticinvoke <android.media.MediaHTTPService: android.os.IBinder createHttpServiceBinderIfNecessary(java.lang.String,java.util.List)>(r11, r2);

        specialinvoke r0.<android.media.MediaPlayer: void nativeSetDataSource(android.os.IBinder,java.lang.String,java.lang.String[],java.lang.String[])>($r8, r11, r12, r1);

        return;

     label2:
        $r5 = new java.io.FileInputStream;

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>(r14);

        specialinvoke $r5.<java.io.FileInputStream: void <init>(java.io.File)>($r6);

     label3:
        $r7 = virtualinvoke $r5.<java.io.FileInputStream: java.io.FileDescriptor getFD()>();

        virtualinvoke r0.<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor)>($r7);

     label4:
        virtualinvoke $r5.<java.io.FileInputStream: void close()>();

        return;

     label5:
        $r9 := @caughtexception;

     label6:
        virtualinvoke $r5.<java.io.FileInputStream: void close()>();

     label7:
        goto label9;

     label8:
        $r10 := @caughtexception;

        virtualinvoke $r9.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r10);

     label9:
        throw $r9;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    private void setOnMediaTimeDiscontinuityListenerInt(android.media.MediaPlayer$OnMediaTimeDiscontinuityListener, android.os.Handler)
    {
        android.media.MediaPlayer r0;
        android.os.Handler r1;
        java.lang.Throwable $r2;
        android.media.MediaPlayer$OnMediaTimeDiscontinuityListener r3;

        r0 := @this: android.media.MediaPlayer;

        r3 := @parameter0: android.media.MediaPlayer$OnMediaTimeDiscontinuityListener;

        r1 := @parameter1: android.os.Handler;

        entermonitor r0;

     label1:
        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnMediaTimeDiscontinuityListener mOnMediaTimeDiscontinuityListener> = r3;

        r0.<android.media.MediaPlayer: android.os.Handler mOnMediaTimeDiscontinuityHandler> = r1;

        exitmonitor r0;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void setOnSubtitleDataListenerInt(android.media.MediaPlayer$OnSubtitleDataListener, android.os.Handler)
    {
        android.media.MediaPlayer r0;
        android.os.Handler r1;
        java.lang.Throwable $r2;
        android.media.MediaPlayer$OnSubtitleDataListener r3;

        r0 := @this: android.media.MediaPlayer;

        r3 := @parameter0: android.media.MediaPlayer$OnSubtitleDataListener;

        r1 := @parameter1: android.os.Handler;

        entermonitor r0;

     label1:
        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnSubtitleDataListener mExtSubtitleDataListener> = r3;

        r0.<android.media.MediaPlayer: android.os.Handler mExtSubtitleDataHandler> = r1;

        exitmonitor r0;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private native boolean setParameter(int, android.os.Parcel);

    private void setSubtitleAnchor()
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$TimeProvider r1;
        android.os.HandlerThread r2;
        android.media.MediaPlayer$2 r3;
        android.media.SubtitleController $r4;
        android.app.Application $r5;
        android.media.MediaTimeProvider $r6;
        android.os.Looper $r7;
        java.lang.Throwable $r8, $r9;
        java.lang.Thread $r10;
        android.os.Handler r11;

        r0 := @this: android.media.MediaPlayer;

        entermonitor r0;

     label1:
        $r4 = r0.<android.media.MediaPlayer: android.media.SubtitleController mSubtitleController>;

        if $r4 != null goto label6;

        $r5 = staticinvoke <android.app.ActivityThread: android.app.Application currentApplication()>();

        if $r5 == null goto label6;

        $r6 = virtualinvoke r0.<android.media.MediaPlayer: android.media.MediaTimeProvider getMediaTimeProvider()>();

        r1 = (android.media.MediaPlayer$TimeProvider) $r6;

        r2 = new android.os.HandlerThread;

        specialinvoke r2.<android.os.HandlerThread: void <init>(java.lang.String)>("SetSubtitleAnchorThread");

        virtualinvoke r2.<android.os.HandlerThread: void start()>();

        r11 = new android.os.Handler;

        $r7 = virtualinvoke r2.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke r11.<android.os.Handler: void <init>(android.os.Looper)>($r7);

        r3 = new android.media.MediaPlayer$2;

        specialinvoke r3.<android.media.MediaPlayer$2: void <init>(android.media.MediaPlayer,android.media.MediaPlayer$TimeProvider,android.os.HandlerThread)>(r0, r1, r2);

        virtualinvoke r11.<android.os.Handler: boolean post(java.lang.Runnable)>(r3);

     label2:
        virtualinvoke r2.<android.os.HandlerThread: void join()>();

     label3:
        goto label6;

     label4:
        $r9 := @caughtexception;

     label5:
        $r10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r10.<java.lang.Thread: void interrupt()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MediaPlayer", "failed to join SetSubtitleAnchorThread");

     label6:
        exitmonitor r0;

        return;

     label7:
        $r8 := @caughtexception;

        exitmonitor r0;

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.InterruptedException from label2 to label3 with label4;
        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    private void startImpl()
    {
        android.media.MediaPlayer r0;

        r0 := @this: android.media.MediaPlayer;

        virtualinvoke r0.<android.media.MediaPlayer: void baseStart()>();

        specialinvoke r0.<android.media.MediaPlayer: void stayAwake(boolean)>(1);

        specialinvoke r0.<android.media.MediaPlayer: void _start()>();

        return;
    }

    private void stayAwake(boolean)
    {
        android.media.MediaPlayer r0;
        boolean z0, $z1, $z2;
        android.os.PowerManager$WakeLock r1, $r2, $r3, $r4;

        r0 := @this: android.media.MediaPlayer;

        z0 := @parameter0: boolean;

        r1 = r0.<android.media.MediaPlayer: android.os.PowerManager$WakeLock mWakeLock>;

        if r1 == null goto label2;

        if z0 == 0 goto label1;

        $z2 = virtualinvoke r1.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z2 != 0 goto label1;

        $r4 = r0.<android.media.MediaPlayer: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r4.<android.os.PowerManager$WakeLock: void acquire()>();

        goto label2;

     label1:
        if z0 != 0 goto label2;

        $r2 = r0.<android.media.MediaPlayer: android.os.PowerManager$WakeLock mWakeLock>;

        $z1 = virtualinvoke $r2.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z1 == 0 goto label2;

        $r3 = r0.<android.media.MediaPlayer: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r3.<android.os.PowerManager$WakeLock: void release()>();

     label2:
        r0.<android.media.MediaPlayer: boolean mStayAwake> = z0;

        specialinvoke r0.<android.media.MediaPlayer: void updateSurfaceScreenOn()>();

        return;
    }

    private void updateSurfaceScreenOn()
    {
        android.media.MediaPlayer r0;
        android.view.SurfaceHolder r1;
        boolean $z0, $z1, z2;

        r0 := @this: android.media.MediaPlayer;

        r1 = r0.<android.media.MediaPlayer: android.view.SurfaceHolder mSurfaceHolder>;

        if r1 == null goto label3;

        $z0 = r0.<android.media.MediaPlayer: boolean mScreenOnWhilePlaying>;

        if $z0 == 0 goto label1;

        $z1 = r0.<android.media.MediaPlayer: boolean mStayAwake>;

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        interfaceinvoke r1.<android.view.SurfaceHolder: void setKeepScreenOn(boolean)>(z2);

     label3:
        return;
    }

    public void addOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener, android.os.Handler)
    {
        android.media.MediaPlayer r0;
        android.util.ArrayMap r1, r2, $r4;
        android.media.NativeRoutingEventHandlerDelegate r3;
        boolean $z0;
        java.lang.Throwable $r6;
        android.media.AudioRouting$OnRoutingChangedListener r7;
        android.os.Handler r8;

        r0 := @this: android.media.MediaPlayer;

        r7 := @parameter0: android.media.AudioRouting$OnRoutingChangedListener;

        r8 := @parameter1: android.os.Handler;

        r1 = r0.<android.media.MediaPlayer: android.util.ArrayMap mRoutingChangeListeners>;

        entermonitor r1;

        if r7 == null goto label5;

     label1:
        $r4 = r0.<android.media.MediaPlayer: android.util.ArrayMap mRoutingChangeListeners>;

        $z0 = virtualinvoke $r4.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r7);

        if $z0 != 0 goto label5;

        specialinvoke r0.<android.media.MediaPlayer: void enableNativeRoutingCallbacksLocked(boolean)>(1);

        r2 = r0.<android.media.MediaPlayer: android.util.ArrayMap mRoutingChangeListeners>;

        r3 = new android.media.NativeRoutingEventHandlerDelegate;

     label2:
        if r8 == null goto label3;

        goto label4;

     label3:
        r8 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$EventHandler mEventHandler>;

     label4:
        specialinvoke r3.<android.media.NativeRoutingEventHandlerDelegate: void <init>(android.media.AudioRouting,android.media.AudioRouting$OnRoutingChangedListener,android.os.Handler)>(r0, r7, r8);

        virtualinvoke r2.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, r3);

     label5:
        exitmonitor r1;

     label6:
        return;

     label7:
        $r6 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void addSubtitleSource(java.io.InputStream, android.media.MediaFormat) throws java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;
        android.media.MediaFormat r1;
        android.os.HandlerThread $r3;
        android.os.Handler $r4;
        android.os.Looper $r5;
        android.media.MediaPlayer$4 $r6;
        java.util.Vector $r7, r10;
        java.lang.Throwable $r8;
        java.io.InputStream r9;

        r0 := @this: android.media.MediaPlayer;

        r9 := @parameter0: java.io.InputStream;

        r1 := @parameter1: android.media.MediaFormat;

        if r9 == null goto label6;

        r10 = r0.<android.media.MediaPlayer: java.util.Vector mOpenSubtitleSources>;

        entermonitor r10;

     label1:
        $r7 = r0.<android.media.MediaPlayer: java.util.Vector mOpenSubtitleSources>;

        virtualinvoke $r7.<java.util.Vector: boolean add(java.lang.Object)>(r9);

        exitmonitor r10;

     label2:
        goto label7;

     label3:
        $r8 := @caughtexception;

     label4:
        exitmonitor r10;

     label5:
        throw $r8;

     label6:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MediaPlayer", "addSubtitleSource called with null InputStream");

     label7:
        virtualinvoke r0.<android.media.MediaPlayer: android.media.MediaTimeProvider getMediaTimeProvider()>();

        $r3 = new android.os.HandlerThread;

        specialinvoke $r3.<android.os.HandlerThread: void <init>(java.lang.String,int)>("SubtitleReadThread", 9);

        virtualinvoke $r3.<android.os.HandlerThread: void start()>();

        $r4 = new android.os.Handler;

        $r5 = virtualinvoke $r3.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r4.<android.os.Handler: void <init>(android.os.Looper)>($r5);

        $r6 = new android.media.MediaPlayer$4;

        specialinvoke $r6.<android.media.MediaPlayer$4: void <init>(android.media.MediaPlayer,java.io.InputStream,android.media.MediaFormat,android.os.HandlerThread)>(r0, r9, r1, $r3);

        virtualinvoke $r4.<android.os.Handler: boolean post(java.lang.Runnable)>($r6);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void addTimedTextSource(android.content.Context, android.net.Uri, java.lang.String) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;
        android.net.Uri r1;
        java.lang.String r2, $r3, r10;
        boolean $z0;
        android.content.ContentResolver $r4;
        java.io.FileDescriptor $r5;
        java.lang.Throwable $r6, $r7, $r8;
        android.content.Context r9;
        android.content.res.AssetFileDescriptor r11, r12, r13, r14;

        r0 := @this: android.media.MediaPlayer;

        r9 := @parameter0: android.content.Context;

        r1 := @parameter1: android.net.Uri;

        r2 := @parameter2: java.lang.String;

        r10 = virtualinvoke r1.<android.net.Uri: java.lang.String getScheme()>();

        if r10 == null goto label15;

        $z0 = virtualinvoke r10.<java.lang.String: boolean equals(java.lang.Object)>("file");

        if $z0 == 0 goto label01;

        goto label15;

     label01:
        r11 = null;

        r12 = null;

        r13 = null;

     label02:
        $r4 = virtualinvoke r9.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r14 = virtualinvoke $r4.<android.content.ContentResolver: android.content.res.AssetFileDescriptor openAssetFileDescriptor(android.net.Uri,java.lang.String)>(r1, "r");

     label03:
        if r14 != null goto label05;

        if r14 == null goto label04;

        virtualinvoke r14.<android.content.res.AssetFileDescriptor: void close()>();

     label04:
        return;

     label05:
        r13 = r14;

        r11 = r14;

        r12 = r14;

     label06:
        $r5 = virtualinvoke r14.<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        virtualinvoke r0.<android.media.MediaPlayer: void addTimedTextSource(java.io.FileDescriptor,java.lang.String)>($r5, r2);

     label07:
        if r14 == null goto label08;

        virtualinvoke r14.<android.content.res.AssetFileDescriptor: void close()>();

     label08:
        return;

     label09:
        $r8 := @caughtexception;

        if r13 == null goto label10;

        virtualinvoke r13.<android.content.res.AssetFileDescriptor: void close()>();

     label10:
        throw $r8;

     label11:
        $r7 := @caughtexception;

        if r11 == null goto label14;

     label12:
        virtualinvoke r11.<android.content.res.AssetFileDescriptor: void close()>();

        goto label14;

     label13:
        $r6 := @caughtexception;

        if r12 == null goto label14;

        r11 = r12;

        goto label12;

     label14:
        return;

     label15:
        $r3 = virtualinvoke r1.<android.net.Uri: java.lang.String getPath()>();

        virtualinvoke r0.<android.media.MediaPlayer: void addTimedTextSource(java.lang.String,java.lang.String)>($r3, r2);

        return;

        catch java.lang.SecurityException from label02 to label03 with label13;
        catch java.io.IOException from label02 to label03 with label11;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.SecurityException from label06 to label07 with label13;
        catch java.io.IOException from label06 to label07 with label11;
        catch java.lang.Throwable from label06 to label07 with label09;
    }

    public void addTimedTextSource(java.io.FileDescriptor, long, long, java.lang.String) throws java.lang.IllegalArgumentException, java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;
        long l0, l1;
        boolean $z0, $z1;
        java.lang.String $r5, $r22, r25;
        android.media.SubtitleController $r7, $r8, $r9, $r19;
        java.util.Vector $r10, r30;
        android.util.Pair $r11;
        android.os.Looper $r15;
        android.media.MediaPlayer$EventHandler $r18;
        java.lang.Throwable $r20, $r21;
        java.io.FileDescriptor r24, r26;
        android.app.Application r28;
        android.media.SubtitleTrack r29;
        android.media.MediaFormat r35;
        android.media.SRTRenderer r36;
        android.os.HandlerThread r37;
        android.os.Handler r38;
        android.media.MediaPlayer$5 r39;
        java.lang.RuntimeException r40;
        java.lang.StringBuilder r41;
        java.lang.IllegalArgumentException r42;
        android.system.ErrnoException r43;

        r0 := @this: android.media.MediaPlayer;

        r24 := @parameter0: java.io.FileDescriptor;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        r25 := @parameter3: java.lang.String;

        $z0 = staticinvoke <android.media.MediaPlayer: boolean availableMimeTypeForExternalSource(java.lang.String)>(r25);

        if $z0 == 0 goto label11;

     label01:
        r26 = staticinvoke <android.system.Os: java.io.FileDescriptor dup(java.io.FileDescriptor)>(r24);

     label02:
        r35 = new android.media.MediaFormat;

        specialinvoke r35.<android.media.MediaFormat: void <init>()>();

        virtualinvoke r35.<android.media.MediaFormat: void setString(java.lang.String,java.lang.String)>("mime", r25);

        virtualinvoke r35.<android.media.MediaFormat: void setInteger(java.lang.String,int)>("is-timed-text", 1);

        $r7 = r0.<android.media.MediaPlayer: android.media.SubtitleController mSubtitleController>;

        if $r7 != null goto label03;

        specialinvoke r0.<android.media.MediaPlayer: void setSubtitleAnchor()>();

     label03:
        $r8 = r0.<android.media.MediaPlayer: android.media.SubtitleController mSubtitleController>;

        $z1 = virtualinvoke $r8.<android.media.SubtitleController: boolean hasRendererFor(android.media.MediaFormat)>(r35);

        if $z1 != 0 goto label04;

        r28 = staticinvoke <android.app.ActivityThread: android.app.Application currentApplication()>();

        $r19 = r0.<android.media.MediaPlayer: android.media.SubtitleController mSubtitleController>;

        r36 = new android.media.SRTRenderer;

        $r18 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$EventHandler mEventHandler>;

        specialinvoke r36.<android.media.SRTRenderer: void <init>(android.content.Context,android.os.Handler)>(r28, $r18);

        virtualinvoke $r19.<android.media.SubtitleController: void registerRenderer(android.media.SubtitleController$Renderer)>(r36);

     label04:
        $r9 = r0.<android.media.MediaPlayer: android.media.SubtitleController mSubtitleController>;

        r29 = virtualinvoke $r9.<android.media.SubtitleController: android.media.SubtitleTrack addTrack(android.media.MediaFormat)>(r35);

        r30 = r0.<android.media.MediaPlayer: java.util.Vector mIndexTrackPairs>;

        entermonitor r30;

     label05:
        $r10 = r0.<android.media.MediaPlayer: java.util.Vector mIndexTrackPairs>;

        $r11 = staticinvoke <android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>(null, r29);

        virtualinvoke $r10.<java.util.Vector: boolean add(java.lang.Object)>($r11);

        exitmonitor r30;

     label06:
        virtualinvoke r0.<android.media.MediaPlayer: android.media.MediaTimeProvider getMediaTimeProvider()>();

        r37 = new android.os.HandlerThread;

        specialinvoke r37.<android.os.HandlerThread: void <init>(java.lang.String,int)>("TimedTextReadThread", 9);

        virtualinvoke r37.<android.os.HandlerThread: void start()>();

        r38 = new android.os.Handler;

        $r15 = virtualinvoke r37.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke r38.<android.os.Handler: void <init>(android.os.Looper)>($r15);

        r39 = new android.media.MediaPlayer$5;

        specialinvoke r39.<android.media.MediaPlayer$5: void <init>(android.media.MediaPlayer,java.io.FileDescriptor,long,long,android.media.SubtitleTrack,android.os.HandlerThread)>(r0, r26, l0, l1, r29, r37);

        virtualinvoke r38.<android.os.Handler: boolean post(java.lang.Runnable)>(r39);

        return;

     label07:
        $r20 := @caughtexception;

     label08:
        exitmonitor r30;

     label09:
        throw $r20;

     label10:
        $r21 := @caughtexception;

        r43 = (android.system.ErrnoException) $r21;

        $r22 = virtualinvoke r43.<android.system.ErrnoException: java.lang.String getMessage()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaPlayer", $r22, $r21);

        r40 = new java.lang.RuntimeException;

        specialinvoke r40.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r21);

        throw r40;

     label11:
        r41 = new java.lang.StringBuilder;

        specialinvoke r41.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal mimeType for timed text source: ");

        virtualinvoke r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25);

        r42 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke r41.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r42.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw r42;

        catch android.system.ErrnoException from label01 to label02 with label10;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    public void addTimedTextSource(java.io.FileDescriptor, java.lang.String) throws java.lang.IllegalArgumentException, java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;
        java.io.FileDescriptor r1;
        java.lang.String r2;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.media.MediaPlayer: void addTimedTextSource(java.io.FileDescriptor,long,long,java.lang.String)>(r1, 0L, 576460752303423487L, r2);

        return;
    }

    public void addTimedTextSource(java.lang.String, java.lang.String) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;
        boolean $z0;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5, r11, r12;
        java.io.FileInputStream $r6;
        java.io.File $r7;
        java.io.FileDescriptor $r8;
        java.lang.Throwable $r9, $r10;

        r0 := @this: android.media.MediaPlayer;

        r11 := @parameter0: java.lang.String;

        r12 := @parameter1: java.lang.String;

        $z0 = staticinvoke <android.media.MediaPlayer: boolean availableMimeTypeForExternalSource(java.lang.String)>(r12);

        if $z0 == 0 goto label8;

        $r6 = new java.io.FileInputStream;

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>(r11);

        specialinvoke $r6.<java.io.FileInputStream: void <init>(java.io.File)>($r7);

     label1:
        $r8 = virtualinvoke $r6.<java.io.FileInputStream: java.io.FileDescriptor getFD()>();

        virtualinvoke r0.<android.media.MediaPlayer: void addTimedTextSource(java.io.FileDescriptor,java.lang.String)>($r8, r12);

     label2:
        virtualinvoke $r6.<java.io.FileInputStream: void close()>();

        return;

     label3:
        $r10 := @caughtexception;

     label4:
        virtualinvoke $r6.<java.io.FileInputStream: void close()>();

     label5:
        goto label7;

     label6:
        $r9 := @caughtexception;

        virtualinvoke $r10.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r9);

     label7:
        throw $r10;

     label8:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal mimeType for timed text source: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public native void attachAuxEffect(int);

    public void clearOnMediaTimeDiscontinuityListener()
    {
        android.media.MediaPlayer r0;

        r0 := @this: android.media.MediaPlayer;

        specialinvoke r0.<android.media.MediaPlayer: void setOnMediaTimeDiscontinuityListenerInt(android.media.MediaPlayer$OnMediaTimeDiscontinuityListener,android.os.Handler)>(null, null);

        return;
    }

    public void clearOnSubtitleDataListener()
    {
        android.media.MediaPlayer r0;

        r0 := @this: android.media.MediaPlayer;

        specialinvoke r0.<android.media.MediaPlayer: void setOnSubtitleDataListenerInt(android.media.MediaPlayer$OnSubtitleDataListener,android.os.Handler)>(null, null);

        return;
    }

    public android.media.VolumeShaper createVolumeShaper(android.media.VolumeShaper$Configuration)
    {
        android.media.MediaPlayer r0;
        android.media.VolumeShaper$Configuration r1;
        android.media.VolumeShaper $r2;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: android.media.VolumeShaper$Configuration;

        $r2 = new android.media.VolumeShaper;

        specialinvoke $r2.<android.media.VolumeShaper: void <init>(android.media.VolumeShaper$Configuration,android.media.PlayerBase)>(r1, r0);

        return $r2;
    }

    public void deselectTrack(int) throws java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;
        int i0;

        r0 := @this: android.media.MediaPlayer;

        i0 := @parameter0: int;

        specialinvoke r0.<android.media.MediaPlayer: void selectOrDeselectTrack(int,boolean)>(i0, 0);

        return;
    }

    public android.media.PlaybackParams easyPlaybackParams(float, int)
    {
        android.media.MediaPlayer r0;
        float f0;
        int i0;
        android.media.PlaybackParams $r1, $r3, $r5, $r6, $r14;
        java.lang.StringBuilder $r8;
        java.lang.IllegalArgumentException $r12;
        java.lang.String $r13;

        r0 := @this: android.media.MediaPlayer;

        f0 := @parameter0: float;

        i0 := @parameter1: int;

        $r1 = new android.media.PlaybackParams;

        specialinvoke $r1.<android.media.PlaybackParams: void <init>()>();

        virtualinvoke $r1.<android.media.PlaybackParams: android.media.PlaybackParams allowDefaults()>();

        if i0 == 0 goto label3;

        if i0 == 1 goto label2;

        if i0 != 2 goto label1;

        $r14 = virtualinvoke $r1.<android.media.PlaybackParams: android.media.PlaybackParams setSpeed(float)>(f0);

        virtualinvoke $r14.<android.media.PlaybackParams: android.media.PlaybackParams setPitch(float)>(f0);

        goto label4;

     label1:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Audio playback mode ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not supported");

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r12;

     label2:
        $r5 = virtualinvoke $r1.<android.media.PlaybackParams: android.media.PlaybackParams setSpeed(float)>(f0);

        $r6 = virtualinvoke $r5.<android.media.PlaybackParams: android.media.PlaybackParams setPitch(float)>(1.0F);

        virtualinvoke $r6.<android.media.PlaybackParams: android.media.PlaybackParams setAudioFallbackMode(int)>(2);

        goto label4;

     label3:
        $r3 = virtualinvoke $r1.<android.media.PlaybackParams: android.media.PlaybackParams setSpeed(float)>(f0);

        virtualinvoke $r3.<android.media.PlaybackParams: android.media.PlaybackParams setPitch(float)>(1.0F);

     label4:
        return $r1;
    }

    protected void finalize()
    {
        android.media.MediaPlayer r0;

        r0 := @this: android.media.MediaPlayer;

        virtualinvoke r0.<android.media.MediaPlayer: void baseRelease()>();

        specialinvoke r0.<android.media.MediaPlayer: void native_finalize()>();

        return;
    }

    public native int getAudioSessionId();

    public native int getCurrentPosition();

    public android.media.MediaPlayer$DrmInfo getDrmInfo()
    {
        android.media.MediaPlayer r0;
        java.lang.Object r1;
        boolean $z0;
        android.media.MediaPlayer$DrmInfo $r2, $r3, $r4, r6;
        java.lang.Throwable $r5;
        java.lang.IllegalStateException r7;

        r0 := @this: android.media.MediaPlayer;

        r6 = null;

        r1 = r0.<android.media.MediaPlayer: java.lang.Object mDrmLock>;

        entermonitor r1;

     label1:
        $z0 = r0.<android.media.MediaPlayer: boolean mDrmInfoResolved>;

        if $z0 != 0 goto label4;

        $r4 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$DrmInfo mDrmInfo>;

        if $r4 == null goto label3;

     label2:
        goto label4;

     label3:
        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaPlayer", "The Player has not been prepared yet");

        r7 = new java.lang.IllegalStateException;

        specialinvoke r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The Player has not been prepared yet");

        throw r7;

     label4:
        $r2 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$DrmInfo mDrmInfo>;

        if $r2 == null goto label5;

        $r3 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$DrmInfo mDrmInfo>;

        r6 = staticinvoke <android.media.MediaPlayer$DrmInfo: android.media.MediaPlayer$DrmInfo access$1400(android.media.MediaPlayer$DrmInfo)>($r3);

     label5:
        exitmonitor r1;

     label6:
        return r6;

     label7:
        $r5 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public java.lang.String getDrmPropertyString(java.lang.String) throws android.media.MediaPlayer$NoDrmSchemeException
    {
        android.media.MediaPlayer r0;
        java.lang.StringBuilder $r1, $r6, r24;
        java.lang.String $r4, $r11, $r16, r17, r21;
        boolean $z0, $z1;
        android.media.MediaDrm $r5;
        java.lang.Throwable $r12;
        java.lang.Exception $r13;
        java.lang.Object r19;
        android.media.MediaPlayer$NoDrmSchemeException r20;

        r0 := @this: android.media.MediaPlayer;

        r17 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getDrmPropertyString: propertyName: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaPlayer", $r4);

        r19 = r0.<android.media.MediaPlayer: java.lang.Object mDrmLock>;

        entermonitor r19;

     label01:
        $z0 = r0.<android.media.MediaPlayer: boolean mActiveDrmScheme>;

        if $z0 != 0 goto label04;

        $z1 = r0.<android.media.MediaPlayer: boolean mDrmConfigAllowed>;

        if $z1 == 0 goto label03;

     label02:
        goto label04;

     label03:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MediaPlayer", "getDrmPropertyString NoDrmSchemeException");

        r20 = new android.media.MediaPlayer$NoDrmSchemeException;

        specialinvoke r20.<android.media.MediaPlayer$NoDrmSchemeException: void <init>(java.lang.String)>("getDrmPropertyString: Has to prepareDrm() first.");

        throw r20;

     label04:
        $r5 = r0.<android.media.MediaPlayer: android.media.MediaDrm mDrmObj>;

        r21 = virtualinvoke $r5.<android.media.MediaDrm: java.lang.String getPropertyString(java.lang.String)>(r17);

     label05:
        exitmonitor r19;

     label06:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getDrmPropertyString: propertyName: ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --> value: ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        $r11 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaPlayer", $r11);

        return r21;

     label07:
        $r13 := @caughtexception;

     label08:
        r24 = new java.lang.StringBuilder;

        specialinvoke r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getDrmPropertyString Exception ");

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r16 = virtualinvoke r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MediaPlayer", $r16);

     label09:
        throw $r13;

     label10:
        $r12 := @caughtexception;

     label11:
        exitmonitor r19;

     label12:
        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Exception from label04 to label05 with label07;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public native int getDuration();

    public android.media.MediaDrm$KeyRequest getKeyRequest(byte[], byte[], java.lang.String, int, java.util.Map) throws android.media.MediaPlayer$NoDrmSchemeException
    {
        android.media.MediaPlayer r0;
        java.lang.String r1, $r14, $r18, $r22;
        int i0;
        java.lang.Object r2;
        boolean z0;
        java.lang.StringBuilder $r3, r34, r35;
        android.media.MediaDrm $r15;
        java.lang.Exception $r19;
        java.lang.Throwable $r23;
        android.media.NotProvisionedException $r24;
        byte[] r25, r26;
        java.util.Map r27;
        java.util.HashMap r31, r32;
        android.media.MediaDrm$KeyRequest r33;
        java.lang.IllegalStateException r36;
        android.media.MediaPlayer$NoDrmSchemeException r37;

        r0 := @this: android.media.MediaPlayer;

        r25 := @parameter0: byte[];

        r26 := @parameter1: byte[];

        r1 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        r27 := @parameter4: java.util.Map;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getKeyRequest:  keySetId: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r25);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" initData:");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r26);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mimeType: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" keyType: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" optionalParameters: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r27);

        $r14 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaPlayer", $r14);

        r2 = r0.<android.media.MediaPlayer: java.lang.Object mDrmLock>;

        entermonitor r2;

     label01:
        z0 = r0.<android.media.MediaPlayer: boolean mActiveDrmScheme>;

     label02:
        if z0 == 0 goto label17;

        if i0 == 3 goto label07;

     label03:
        r25 = r0.<android.media.MediaPlayer: byte[] mDrmSessionId>;

     label04:
        goto label07;

     label05:
        $r19 := @caughtexception;

        goto label14;

     label06:
        $r24 := @caughtexception;

        goto label16;

     label07:
        if r27 == null goto label10;

     label08:
        r31 = new java.util.HashMap;

        specialinvoke r31.<java.util.HashMap: void <init>(java.util.Map)>(r27);

     label09:
        r32 = r31;

        goto label11;

     label10:
        r32 = null;

     label11:
        $r15 = r0.<android.media.MediaPlayer: android.media.MediaDrm mDrmObj>;

        r33 = virtualinvoke $r15.<android.media.MediaDrm: android.media.MediaDrm$KeyRequest getKeyRequest(byte[],byte[],java.lang.String,int,java.util.HashMap)>(r25, r26, r1, i0, r32);

        r34 = new java.lang.StringBuilder;

        specialinvoke r34.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getKeyRequest:   --> request: ");

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r33);

        $r18 = virtualinvoke r34.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaPlayer", $r18);

     label12:
        exitmonitor r2;

     label13:
        return r33;

     label14:
        r35 = new java.lang.StringBuilder;

        specialinvoke r35.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getKeyRequest Exception ");

        virtualinvoke r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r22 = virtualinvoke r35.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MediaPlayer", $r22);

     label15:
        throw $r19;

     label16:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MediaPlayer", "getKeyRequest NotProvisionedException: Unexpected. Shouldn\'t have reached here.");

        r36 = new java.lang.IllegalStateException;

        specialinvoke r36.<java.lang.IllegalStateException: void <init>(java.lang.String)>("getKeyRequest: Unexpected provisioning error.");

        throw r36;

     label17:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MediaPlayer", "getKeyRequest NoDrmSchemeException");

        r37 = new android.media.MediaPlayer$NoDrmSchemeException;

        specialinvoke r37.<android.media.MediaPlayer$NoDrmSchemeException: void <init>(java.lang.String)>("getKeyRequest: Has to set a DRM scheme first.");

        throw r37;

     label18:
        $r23 := @caughtexception;

     label19:
        exitmonitor r2;

     label20:
        throw $r23;

        catch java.lang.Throwable from label01 to label02 with label18;
        catch android.media.NotProvisionedException from label03 to label04 with label06;
        catch java.lang.Exception from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label18;
        catch android.media.NotProvisionedException from label08 to label09 with label06;
        catch java.lang.Exception from label08 to label09 with label05;
        catch java.lang.Throwable from label08 to label09 with label18;
        catch android.media.NotProvisionedException from label11 to label12 with label06;
        catch java.lang.Exception from label11 to label12 with label05;
        catch java.lang.Throwable from label11 to label12 with label18;
        catch java.lang.Throwable from label12 to label13 with label18;
        catch java.lang.Throwable from label14 to label15 with label18;
        catch java.lang.Throwable from label15 to label16 with label18;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label17 to label18 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
    }

    public android.media.MediaTimeProvider getMediaTimeProvider()
    {
        android.media.MediaPlayer r0;
        java.lang.Object r1;
        android.media.MediaPlayer$TimeProvider $r2, r4, r5;
        java.lang.Throwable $r3;

        r0 := @this: android.media.MediaPlayer;

        r1 = r0.<android.media.MediaPlayer: java.lang.Object mTimeProviderLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$TimeProvider mTimeProvider>;

        if $r2 != null goto label2;

        r4 = new android.media.MediaPlayer$TimeProvider;

        specialinvoke r4.<android.media.MediaPlayer$TimeProvider: void <init>(android.media.MediaPlayer)>(r0);

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$TimeProvider mTimeProvider> = r4;

     label2:
        r5 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$TimeProvider mTimeProvider>;

        exitmonitor r1;

     label3:
        return r5;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public android.media.Metadata getMetadata(boolean, boolean)
    {
        android.media.MediaPlayer r0;
        boolean z0, z1, $z2, $z3;
        android.os.Parcel r1;
        android.media.Metadata $r3;

        r0 := @this: android.media.MediaPlayer;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        $r3 = new android.media.Metadata;

        specialinvoke $r3.<android.media.Metadata: void <init>()>();

        $z2 = specialinvoke r0.<android.media.MediaPlayer: boolean native_getMetadata(boolean,boolean,android.os.Parcel)>(z0, z1, r1);

        if $z2 != 0 goto label1;

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return null;

     label1:
        $z3 = virtualinvoke $r3.<android.media.Metadata: boolean parse(android.os.Parcel)>(r1);

        if $z3 != 0 goto label2;

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return null;

     label2:
        return $r3;
    }

    public android.os.PersistableBundle getMetrics()
    {
        android.media.MediaPlayer r0;
        android.os.PersistableBundle $r1;

        r0 := @this: android.media.MediaPlayer;

        $r1 = specialinvoke r0.<android.media.MediaPlayer: android.os.PersistableBundle native_getMetrics()>();

        return $r1;
    }

    public native android.media.PlaybackParams getPlaybackParams();

    public android.media.AudioDeviceInfo getPreferredDevice()
    {
        android.media.MediaPlayer r0;
        java.lang.Throwable $r1;
        android.media.AudioDeviceInfo r2;

        r0 := @this: android.media.MediaPlayer;

        entermonitor r0;

     label1:
        r2 = r0.<android.media.MediaPlayer: android.media.AudioDeviceInfo mPreferredDevice>;

        exitmonitor r0;

     label2:
        return r2;

     label3:
        $r1 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.media.AudioDeviceInfo getRoutedDevice()
    {
        android.media.MediaPlayer r0;
        int i0, $i1, $i2, i3;
        android.media.AudioDeviceInfo[] r1;
        android.media.AudioDeviceInfo $r2, $r3;

        r0 := @this: android.media.MediaPlayer;

        i0 = specialinvoke r0.<android.media.MediaPlayer: int native_getRoutedDeviceId()>();

        if i0 != 0 goto label1;

        return null;

     label1:
        r1 = staticinvoke <android.media.AudioManager: android.media.AudioDeviceInfo[] getDevicesStatic(int)>(2);

        i3 = 0;

     label2:
        $i1 = lengthof r1;

        if i3 >= $i1 goto label4;

        $r2 = r1[i3];

        $i2 = virtualinvoke $r2.<android.media.AudioDeviceInfo: int getId()>();

        if $i2 != i0 goto label3;

        $r3 = r1[i3];

        return $r3;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return null;
    }

    public int getSelectedTrack(int) throws java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;
        android.media.SubtitleController $r1, $r7;
        java.util.Vector $r2, $r8, $r9, r17, r21, $r22;
        java.lang.Object $r3, $r4, $r5, $r10, $r12;
        java.lang.Integer $r6;
        int $i0, $i1, $i2, i3, i4, i5, i6, $i7;
        android.util.Pair $r11, r23;
        java.lang.Throwable $r13, $r14, $r15;
        android.media.SubtitleTrack r16;
        android.os.Parcel r19, r20;

        r0 := @this: android.media.MediaPlayer;

        i3 := @parameter0: int;

        $r1 = r0.<android.media.MediaPlayer: android.media.SubtitleController mSubtitleController>;

        if $r1 == null goto label10;

        if i3 == 4 goto label01;

        if i3 != 3 goto label10;

     label01:
        $r7 = r0.<android.media.MediaPlayer: android.media.SubtitleController mSubtitleController>;

        r16 = virtualinvoke $r7.<android.media.SubtitleController: android.media.SubtitleTrack getSelectedTrack()>();

        if r16 == null goto label10;

        r17 = r0.<android.media.MediaPlayer: java.util.Vector mIndexTrackPairs>;

        entermonitor r17;

        i4 = 0;

     label02:
        $r8 = r0.<android.media.MediaPlayer: java.util.Vector mIndexTrackPairs>;

        $i1 = virtualinvoke $r8.<java.util.Vector: int size()>();

        if i4 >= $i1 goto label05;

        $r9 = r0.<android.media.MediaPlayer: java.util.Vector mIndexTrackPairs>;

        $r10 = virtualinvoke $r9.<java.util.Vector: java.lang.Object get(int)>(i4);

        $r11 = (android.util.Pair) $r10;

        $r12 = $r11.<android.util.Pair: java.lang.Object second>;

        if $r12 != r16 goto label04;

        $i2 = virtualinvoke r16.<android.media.SubtitleTrack: int getTrackType()>();

        if $i2 != i3 goto label04;

        exitmonitor r17;

     label03:
        return i4;

     label04:
        i4 = i4 + 1;

        goto label02;

     label05:
        exitmonitor r17;

     label06:
        goto label10;

     label07:
        $r13 := @caughtexception;

     label08:
        exitmonitor r17;

     label09:
        throw $r13;

     label10:
        r19 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r20 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label11:
        virtualinvoke r19.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.media.IMediaPlayer");

        virtualinvoke r19.<android.os.Parcel: void writeInt(int)>(7);

        virtualinvoke r19.<android.os.Parcel: void writeInt(int)>(i3);

        virtualinvoke r0.<android.media.MediaPlayer: void invoke(android.os.Parcel,android.os.Parcel)>(r19, r20);

        i5 = virtualinvoke r20.<android.os.Parcel: int readInt()>();

        r21 = r0.<android.media.MediaPlayer: java.util.Vector mIndexTrackPairs>;

        entermonitor r21;

     label12:
        i6 = 0;

     label13:
        $r22 = r0.<android.media.MediaPlayer: java.util.Vector mIndexTrackPairs>;

        $i7 = virtualinvoke $r22.<java.util.Vector: int size()>();

        if i6 >= $i7 goto label16;

        $r2 = r0.<android.media.MediaPlayer: java.util.Vector mIndexTrackPairs>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object get(int)>(i6);

        r23 = (android.util.Pair) $r3;

        $r4 = r23.<android.util.Pair: java.lang.Object first>;

        if $r4 == null goto label15;

        $r5 = r23.<android.util.Pair: java.lang.Object first>;

        $r6 = (java.lang.Integer) $r5;

        $i0 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        if $i0 != i5 goto label15;

        exitmonitor r21;

     label14:
        virtualinvoke r19.<android.os.Parcel: void recycle()>();

        virtualinvoke r20.<android.os.Parcel: void recycle()>();

        return i6;

     label15:
        i6 = i6 + 1;

        goto label13;

     label16:
        exitmonitor r21;

     label17:
        virtualinvoke r19.<android.os.Parcel: void recycle()>();

        virtualinvoke r20.<android.os.Parcel: void recycle()>();

        return -1;

     label18:
        $r15 := @caughtexception;

     label19:
        exitmonitor r21;

     label20:
        throw $r15;

     label21:
        $r14 := @caughtexception;

        virtualinvoke r19.<android.os.Parcel: void recycle()>();

        virtualinvoke r20.<android.os.Parcel: void recycle()>();

        throw $r14;

        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label11 to label12 with label21;
        catch java.lang.Throwable from label13 to label14 with label18;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
        catch java.lang.Throwable from label20 to label21 with label21;
    }

    public native android.media.SyncParams getSyncParams();

    public android.media.MediaTimestamp getTimestamp()
    {
        android.media.MediaPlayer r0;
        long l0, l1, $l3;
        int $i2;
        boolean $z0;
        android.media.MediaTimestamp $r1;
        android.media.PlaybackParams $r2;
        java.lang.Throwable $r3;
        float f0;

        r0 := @this: android.media.MediaPlayer;

     label1:
        $i2 = virtualinvoke r0.<android.media.MediaPlayer: int getCurrentPosition()>();

        l0 = (long) $i2;

        l1 = staticinvoke <java.lang.System: long nanoTime()>();

        $z0 = virtualinvoke r0.<android.media.MediaPlayer: boolean isPlaying()>();

        if $z0 == 0 goto label3;

        $r2 = virtualinvoke r0.<android.media.MediaPlayer: android.media.PlaybackParams getPlaybackParams()>();

        f0 = virtualinvoke $r2.<android.media.PlaybackParams: float getSpeed()>();

     label2:
        goto label4;

     label3:
        f0 = 0.0F;

     label4:
        $r1 = new android.media.MediaTimestamp;

        $l3 = l0 * 1000L;

        specialinvoke $r1.<android.media.MediaTimestamp: void <init>(long,long,float)>($l3, l1, f0);

     label5:
        return $r1;

     label6:
        $r3 := @caughtexception;

        return null;

        catch java.lang.IllegalStateException from label1 to label2 with label6;
        catch java.lang.IllegalStateException from label4 to label5 with label6;
    }

    public android.media.MediaPlayer$TrackInfo[] getTrackInfo() throws java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;
        java.util.Vector r1, $r3, $r4;
        android.media.MediaPlayer$TrackInfo[] r2, r14;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.Object $r5, $r6, $r7, $r10;
        android.media.MediaPlayer$TrackInfo $r8, $r12;
        android.media.MediaFormat $r9;
        java.lang.Integer $r11;
        java.lang.Throwable $r13;
        android.util.Pair r15;
        android.media.SubtitleTrack r16;

        r0 := @this: android.media.MediaPlayer;

        r14 = specialinvoke r0.<android.media.MediaPlayer: android.media.MediaPlayer$TrackInfo[] getInbandTrackInfo()>();

        r1 = r0.<android.media.MediaPlayer: java.util.Vector mIndexTrackPairs>;

        entermonitor r1;

     label01:
        $r3 = r0.<android.media.MediaPlayer: java.util.Vector mIndexTrackPairs>;

        $i0 = virtualinvoke $r3.<java.util.Vector: int size()>();

        r2 = newarray (android.media.MediaPlayer$TrackInfo)[$i0];

     label02:
        i4 = 0;

     label03:
        $i1 = lengthof r2;

        if i4 >= $i1 goto label07;

        $r4 = r0.<android.media.MediaPlayer: java.util.Vector mIndexTrackPairs>;

        $r5 = virtualinvoke $r4.<java.util.Vector: java.lang.Object get(int)>(i4);

        r15 = (android.util.Pair) $r5;

        $r6 = r15.<android.util.Pair: java.lang.Object first>;

        if $r6 == null goto label05;

        $r10 = r15.<android.util.Pair: java.lang.Object first>;

        $r11 = (java.lang.Integer) $r10;

        $i3 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();

        $r12 = r14[$i3];

        r2[i4] = $r12;

     label04:
        goto label06;

     label05:
        $r7 = r15.<android.util.Pair: java.lang.Object second>;

        r16 = (android.media.SubtitleTrack) $r7;

        $r8 = new android.media.MediaPlayer$TrackInfo;

        $i2 = virtualinvoke r16.<android.media.SubtitleTrack: int getTrackType()>();

        $r9 = virtualinvoke r16.<android.media.SubtitleTrack: android.media.MediaFormat getFormat()>();

        specialinvoke $r8.<android.media.MediaPlayer$TrackInfo: void <init>(int,android.media.MediaFormat)>($i2, $r9);

        r2[i4] = $r8;

     label06:
        i4 = i4 + 1;

        goto label03;

     label07:
        exitmonitor r1;

     label08:
        return r2;

     label09:
        $r13 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public native int getVideoHeight();

    public native int getVideoWidth();

    public void invoke(android.os.Parcel, android.os.Parcel)
    {
        android.media.MediaPlayer r0;
        android.os.Parcel r1, r7;
        int i0;
        java.lang.StringBuilder $r2;
        java.lang.RuntimeException $r5;
        java.lang.String $r6;

        r0 := @this: android.media.MediaPlayer;

        r7 := @parameter0: android.os.Parcel;

        r1 := @parameter1: android.os.Parcel;

        i0 = specialinvoke r0.<android.media.MediaPlayer: int native_invoke(android.os.Parcel,android.os.Parcel)>(r7, r1);

        virtualinvoke r1.<android.os.Parcel: void setDataPosition(int)>(0);

        if i0 != 0 goto label1;

        return;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failure code: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = new java.lang.RuntimeException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    public native boolean isLooping();

    public native boolean isPlaying();

    public android.os.Parcel newRequest()
    {
        android.media.MediaPlayer r0;
        android.os.Parcel r1;

        r0 := @this: android.media.MediaPlayer;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.media.IMediaPlayer");

        return r1;
    }

    public void notifyAt(long)
    {
        android.media.MediaPlayer r0;
        long l0;

        r0 := @this: android.media.MediaPlayer;

        l0 := @parameter0: long;

        specialinvoke r0.<android.media.MediaPlayer: void _notifyAt(long)>(l0);

        return;
    }

    public void onSubtitleTrackSelected(android.media.SubtitleTrack)
    {
        android.media.MediaPlayer r0;
        java.util.Iterator r1;
        android.util.Pair r2;
        java.util.Vector $r3, r16;
        boolean $z0;
        java.lang.Object $r4, $r5, $r6, $r7;
        java.lang.Integer $r8;
        int $i0, i1, i2;
        java.lang.Throwable $r9, $r10, $r11, $r12, $r13;
        android.media.SubtitleTrack r14;

        r0 := @this: android.media.MediaPlayer;

        r14 := @parameter0: android.media.SubtitleTrack;

        i1 = r0.<android.media.MediaPlayer: int mSelectedSubtitleTrackIndex>;

        if i1 < 0 goto label05;

     label01:
        specialinvoke r0.<android.media.MediaPlayer: void selectOrDeselectInbandTrack(int,boolean)>(i1, 0);

     label02:
        goto label04;

     label03:
        $r10 := @caughtexception;

     label04:
        r0.<android.media.MediaPlayer: int mSelectedSubtitleTrackIndex> = -1;

     label05:
        entermonitor r0;

     label06:
        r0.<android.media.MediaPlayer: boolean mSubtitleDataListenerDisabled> = 1;

        exitmonitor r0;

     label07:
        if r14 != null goto label08;

        return;

     label08:
        r16 = r0.<android.media.MediaPlayer: java.util.Vector mIndexTrackPairs>;

        entermonitor r16;

     label09:
        $r3 = r0.<android.media.MediaPlayer: java.util.Vector mIndexTrackPairs>;

        r1 = virtualinvoke $r3.<java.util.Vector: java.util.Iterator iterator()>();

     label10:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.util.Pair) $r4;

        $r5 = r2.<android.util.Pair: java.lang.Object first>;

        if $r5 == null goto label12;

        $r6 = r2.<android.util.Pair: java.lang.Object second>;

        if $r6 != r14 goto label12;

        $r7 = r2.<android.util.Pair: java.lang.Object first>;

        $r8 = (java.lang.Integer) $r7;

        $i0 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        r0.<android.media.MediaPlayer: int mSelectedSubtitleTrackIndex> = $i0;

     label11:
        goto label13;

     label12:
        goto label10;

     label13:
        exitmonitor r16;

     label14:
        i2 = r0.<android.media.MediaPlayer: int mSelectedSubtitleTrackIndex>;

        if i2 < 0 goto label24;

     label15:
        specialinvoke r0.<android.media.MediaPlayer: void selectOrDeselectInbandTrack(int,boolean)>(i2, 1);

     label16:
        goto label18;

     label17:
        $r13 := @caughtexception;

     label18:
        entermonitor r0;

     label19:
        r0.<android.media.MediaPlayer: boolean mSubtitleDataListenerDisabled> = 0;

        exitmonitor r0;

     label20:
        goto label24;

     label21:
        $r12 := @caughtexception;

     label22:
        exitmonitor r0;

     label23:
        throw $r12;

     label24:
        return;

     label25:
        $r11 := @caughtexception;

     label26:
        exitmonitor r16;

     label27:
        throw $r11;

     label28:
        $r9 := @caughtexception;

     label29:
        exitmonitor r0;

     label30:
        throw $r9;

        catch java.lang.IllegalStateException from label01 to label02 with label03;
        catch java.lang.Throwable from label06 to label07 with label28;
        catch java.lang.Throwable from label09 to label10 with label25;
        catch java.lang.Throwable from label10 to label11 with label25;
        catch java.lang.Throwable from label13 to label14 with label25;
        catch java.lang.IllegalStateException from label15 to label16 with label17;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label22 to label23 with label21;
        catch java.lang.Throwable from label26 to label27 with label25;
        catch java.lang.Throwable from label29 to label30 with label28;
    }

    public void pause() throws java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;

        r0 := @this: android.media.MediaPlayer;

        specialinvoke r0.<android.media.MediaPlayer: void stayAwake(boolean)>(0);

        specialinvoke r0.<android.media.MediaPlayer: void _pause()>();

        virtualinvoke r0.<android.media.MediaPlayer: void basePause()>();

        return;
    }

    int playerApplyVolumeShaper(android.media.VolumeShaper$Configuration, android.media.VolumeShaper$Operation)
    {
        android.media.MediaPlayer r0;
        android.media.VolumeShaper$Configuration r1;
        android.media.VolumeShaper$Operation r2;
        int $i0;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: android.media.VolumeShaper$Configuration;

        r2 := @parameter1: android.media.VolumeShaper$Operation;

        $i0 = specialinvoke r0.<android.media.MediaPlayer: int native_applyVolumeShaper(android.media.VolumeShaper$Configuration,android.media.VolumeShaper$Operation)>(r1, r2);

        return $i0;
    }

    android.media.VolumeShaper$State playerGetVolumeShaperState(int)
    {
        android.media.MediaPlayer r0;
        int i0;
        android.media.VolumeShaper$State $r1;

        r0 := @this: android.media.MediaPlayer;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<android.media.MediaPlayer: android.media.VolumeShaper$State native_getVolumeShaperState(int)>(i0);

        return $r1;
    }

    void playerPause()
    {
        android.media.MediaPlayer r0;

        r0 := @this: android.media.MediaPlayer;

        virtualinvoke r0.<android.media.MediaPlayer: void pause()>();

        return;
    }

    int playerSetAuxEffectSendLevel(boolean, float)
    {
        android.media.MediaPlayer r0;
        boolean z0;
        float f0;

        r0 := @this: android.media.MediaPlayer;

        z0 := @parameter0: boolean;

        f0 := @parameter1: float;

        if z0 == 0 goto label1;

        f0 = 0.0F;

        goto label1;

     label1:
        specialinvoke r0.<android.media.MediaPlayer: void _setAuxEffectSendLevel(float)>(f0);

        return 0;
    }

    void playerSetVolume(boolean, float, float)
    {
        android.media.MediaPlayer r0;
        boolean z0;
        float f1, f2;

        r0 := @this: android.media.MediaPlayer;

        z0 := @parameter0: boolean;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        if z0 == 0 goto label1;

        f1 = 0.0F;

        goto label1;

     label1:
        if z0 == 0 goto label2;

        f2 = 0.0F;

        goto label2;

     label2:
        specialinvoke r0.<android.media.MediaPlayer: void _setVolume(float,float)>(f1, f2);

        return;
    }

    void playerStart()
    {
        android.media.MediaPlayer r0;

        r0 := @this: android.media.MediaPlayer;

        virtualinvoke r0.<android.media.MediaPlayer: void start()>();

        return;
    }

    void playerStop()
    {
        android.media.MediaPlayer r0;

        r0 := @this: android.media.MediaPlayer;

        virtualinvoke r0.<android.media.MediaPlayer: void stop()>();

        return;
    }

    public void prepare() throws java.io.IOException, java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: android.media.MediaPlayer;

        specialinvoke r0.<android.media.MediaPlayer: void _prepare()>();

        specialinvoke r0.<android.media.MediaPlayer: void scanInternalSubtitleTracks()>();

        r1 = r0.<android.media.MediaPlayer: java.lang.Object mDrmLock>;

        entermonitor r1;

     label1:
        r0.<android.media.MediaPlayer: boolean mDrmInfoResolved> = 1;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public native void prepareAsync() throws java.lang.IllegalStateException;

    public void prepareDrm(java.util.UUID) throws android.media.UnsupportedSchemeException, android.media.ResourceBusyException, android.media.MediaPlayer$ProvisioningNetworkErrorException, android.media.MediaPlayer$ProvisioningServerErrorException
    {
        android.media.MediaPlayer r0;
        java.lang.StringBuilder $r2, r31, r41;
        android.media.MediaPlayer$OnDrmConfigHelper $r6, r27;
        java.lang.String $r8, $r20, r42;
        android.media.MediaPlayer$DrmInfo $r9;
        boolean $z1, $z2, $z3, $z4, $z5, $z6, z9, z10;
        java.util.UUID $r11, r23;
        android.media.NotProvisionedException $r13;
        java.lang.Exception $r14, $r17;
        java.lang.Throwable $r15, $r16, $r21, $r22;
        java.lang.Object r25, r28;
        android.media.MediaPlayer$OnDrmPreparedHandlerDelegate r26;
        int i12;
        java.lang.IllegalStateException r32, r36, r39, r40, r43, r44;
        android.media.MediaPlayer$ProvisioningServerErrorException r33;
        android.media.MediaPlayer$ProvisioningNetworkErrorException r34;

        r0 := @this: android.media.MediaPlayer;

        r23 := @parameter0: java.util.UUID;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("prepareDrm: uuid: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r23);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mOnDrmConfigHelper: ");

        $r6 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnDrmConfigHelper mOnDrmConfigHelper>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaPlayer", $r8);

        r25 = r0.<android.media.MediaPlayer: java.lang.Object mDrmLock>;

        entermonitor r25;

     label01:
        $r9 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$DrmInfo mDrmInfo>;

        if $r9 == null goto label83;

        $z1 = r0.<android.media.MediaPlayer: boolean mActiveDrmScheme>;

        if $z1 != 0 goto label82;

        $z2 = r0.<android.media.MediaPlayer: boolean mPrepareDrmInProgress>;

        if $z2 != 0 goto label81;

        $z3 = r0.<android.media.MediaPlayer: boolean mDrmProvisioningInProgress>;

        if $z3 != 0 goto label80;

        specialinvoke r0.<android.media.MediaPlayer: void cleanDrmObj()>();

        r0.<android.media.MediaPlayer: boolean mPrepareDrmInProgress> = 1;

        r26 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnDrmPreparedHandlerDelegate mOnDrmPreparedHandlerDelegate>;

     label02:
        specialinvoke r0.<android.media.MediaPlayer: void prepareDrm_createDrmStep(java.util.UUID)>(r23);

     label03:
        r0.<android.media.MediaPlayer: boolean mDrmConfigAllowed> = 1;

        exitmonitor r25;

     label04:
        r27 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnDrmConfigHelper mOnDrmConfigHelper>;

        if r27 == null goto label05;

        interfaceinvoke r27.<android.media.MediaPlayer$OnDrmConfigHelper: void onDrmConfig(android.media.MediaPlayer)>(r0);

     label05:
        r28 = r0.<android.media.MediaPlayer: java.lang.Object mDrmLock>;

        entermonitor r28;

     label06:
        r0.<android.media.MediaPlayer: boolean mDrmConfigAllowed> = 0;

     label07:
        z9 = 0;

     label08:
        specialinvoke r0.<android.media.MediaPlayer: void prepareDrm_openSessionStep(java.util.UUID)>(r23);

     label09:
        z9 = 0;

     label10:
        r0.<android.media.MediaPlayer: java.util.UUID mDrmUUID> = r23;

     label11:
        z9 = 0;

     label12:
        r0.<android.media.MediaPlayer: boolean mActiveDrmScheme> = 1;

     label13:
        z10 = 1;

     label14:
        $z4 = r0.<android.media.MediaPlayer: boolean mDrmProvisioningInProgress>;

        if $z4 != 0 goto label15;

        r0.<android.media.MediaPlayer: boolean mPrepareDrmInProgress> = 0;

     label15:
        goto label59;

     label16:
        $r21 := @caughtexception;

        goto label70;

     label17:
        $r17 := @caughtexception;

        z9 = 0;

     label18:
        r31 = new java.lang.StringBuilder;

     label19:
        z9 = 0;

     label20:
        specialinvoke r31.<java.lang.StringBuilder: void <init>()>();

     label21:
        z9 = 0;

     label22:
        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("prepareDrm: Exception ");

     label23:
        z9 = 0;

     label24:
        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

     label25:
        z9 = 0;

     label26:
        $r20 = virtualinvoke r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MediaPlayer", $r20);

     label27:
        z9 = 1;

     label28:
        throw $r17;

     label29:
        $r13 := @caughtexception;

        z9 = 0;

     label30:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MediaPlayer", "prepareDrm: NotProvisionedException");

     label31:
        z9 = 0;

     label32:
        i12 = specialinvoke r0.<android.media.MediaPlayer: int HandleProvisioninig(java.util.UUID)>(r23);

     label33:
        if i12 == 0 goto label57;

        if i12 == 1 goto label49;

        if i12 == 2 goto label41;

        z9 = 1;

     label34:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MediaPlayer", "prepareDrm: Post-provisioning preparation failed.");

     label35:
        z9 = 1;

     label36:
        r32 = new java.lang.IllegalStateException;

     label37:
        z9 = 1;

     label38:
        specialinvoke r32.<java.lang.IllegalStateException: void <init>(java.lang.String)>("prepareDrm: Post-provisioning preparation failed.");

     label39:
        z9 = 1;

     label40:
        throw r32;

     label41:
        z9 = 1;

     label42:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MediaPlayer", "prepareDrm: Provisioning was required but the request was denied by the server.");

     label43:
        z9 = 1;

     label44:
        r33 = new android.media.MediaPlayer$ProvisioningServerErrorException;

     label45:
        z9 = 1;

     label46:
        specialinvoke r33.<android.media.MediaPlayer$ProvisioningServerErrorException: void <init>(java.lang.String)>("prepareDrm: Provisioning was required but the request was denied by the server.");

     label47:
        z9 = 1;

     label48:
        throw r33;

     label49:
        z9 = 1;

     label50:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MediaPlayer", "prepareDrm: Provisioning was required but failed due to a network error.");

     label51:
        z9 = 1;

     label52:
        r34 = new android.media.MediaPlayer$ProvisioningNetworkErrorException;

     label53:
        z9 = 1;

     label54:
        specialinvoke r34.<android.media.MediaPlayer$ProvisioningNetworkErrorException: void <init>(java.lang.String)>("prepareDrm: Provisioning was required but failed due to a network error.");

     label55:
        z9 = 1;

     label56:
        throw r34;

     label57:
        $z5 = r0.<android.media.MediaPlayer: boolean mDrmProvisioningInProgress>;

        if $z5 != 0 goto label58;

        r0.<android.media.MediaPlayer: boolean mPrepareDrmInProgress> = 0;

     label58:
        z10 = 0;

        goto label59;

     label59:
        exitmonitor r28;

     label60:
        if z10 == 0 goto label61;

        if r26 == null goto label61;

        virtualinvoke r26.<android.media.MediaPlayer$OnDrmPreparedHandlerDelegate: void notifyClient(int)>(0);

     label61:
        return;

     label62:
        $r15 := @caughtexception;

        z9 = 0;

     label63:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MediaPlayer", "prepareDrm(): Wrong usage: The player must be in the prepared state to call prepareDrm().");

     label64:
        z9 = 1;

     label65:
        r36 = new java.lang.IllegalStateException;

     label66:
        z9 = 1;

     label67:
        specialinvoke r36.<java.lang.IllegalStateException: void <init>(java.lang.String)>("prepareDrm(): Wrong usage: The player must be in the prepared state to call prepareDrm().");

     label68:
        z9 = 1;

     label69:
        throw r36;

     label70:
        $z6 = r0.<android.media.MediaPlayer: boolean mDrmProvisioningInProgress>;

        if $z6 != 0 goto label71;

        r0.<android.media.MediaPlayer: boolean mPrepareDrmInProgress> = 0;

     label71:
        if z9 == 0 goto label73;

     label72:
        specialinvoke r0.<android.media.MediaPlayer: void cleanDrmObj()>();

     label73:
        throw $r21;

     label74:
        $r22 := @caughtexception;

     label75:
        exitmonitor r28;

     label76:
        throw $r22;

     label77:
        $r14 := @caughtexception;

     label78:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaPlayer", "prepareDrm(): Exception ", $r14);

        r0.<android.media.MediaPlayer: boolean mPrepareDrmInProgress> = 0;

     label79:
        throw $r14;

     label80:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MediaPlayer", "prepareDrm(): Unexpectd: Provisioning is already in progress.");

        r39 = new java.lang.IllegalStateException;

        specialinvoke r39.<java.lang.IllegalStateException: void <init>(java.lang.String)>("prepareDrm(): Unexpectd: Provisioning is already in progress.");

        throw r39;

     label81:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MediaPlayer", "prepareDrm(): Wrong usage: There is already a pending prepareDrm call.");

        r40 = new java.lang.IllegalStateException;

        specialinvoke r40.<java.lang.IllegalStateException: void <init>(java.lang.String)>("prepareDrm(): Wrong usage: There is already a pending prepareDrm call.");

        throw r40;

     label82:
        r41 = new java.lang.StringBuilder;

        specialinvoke r41.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("prepareDrm(): Wrong usage: There is already an active DRM scheme with ");

        $r11 = r0.<android.media.MediaPlayer: java.util.UUID mDrmUUID>;

        virtualinvoke r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        r42 = virtualinvoke r41.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MediaPlayer", r42);

        r43 = new java.lang.IllegalStateException;

        specialinvoke r43.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r42);

        throw r43;

     label83:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MediaPlayer", "prepareDrm(): Wrong usage: The player must be prepared and DRM info be retrieved before this call.");

        r44 = new java.lang.IllegalStateException;

        specialinvoke r44.<java.lang.IllegalStateException: void <init>(java.lang.String)>("prepareDrm(): Wrong usage: The player must be prepared and DRM info be retrieved before this call.");

        throw r44;

     label84:
        $r16 := @caughtexception;

     label85:
        exitmonitor r25;

     label86:
        throw $r16;

        catch java.lang.Throwable from label01 to label02 with label84;
        catch java.lang.Exception from label02 to label03 with label77;
        catch java.lang.Throwable from label02 to label03 with label84;
        catch java.lang.Throwable from label03 to label04 with label84;
        catch java.lang.Throwable from label06 to label07 with label74;
        catch java.lang.IllegalStateException from label08 to label09 with label62;
        catch android.media.NotProvisionedException from label08 to label09 with label29;
        catch java.lang.Exception from label08 to label09 with label17;
        catch java.lang.Throwable from label08 to label09 with label16;
        catch java.lang.IllegalStateException from label10 to label11 with label62;
        catch android.media.NotProvisionedException from label10 to label11 with label29;
        catch java.lang.Exception from label10 to label11 with label17;
        catch java.lang.Throwable from label10 to label11 with label16;
        catch java.lang.IllegalStateException from label12 to label13 with label62;
        catch android.media.NotProvisionedException from label12 to label13 with label29;
        catch java.lang.Exception from label12 to label13 with label17;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.lang.Throwable from label14 to label15 with label74;
        catch java.lang.Throwable from label16 to label16 with label74;
        catch java.lang.Throwable from label18 to label19 with label16;
        catch java.lang.Throwable from label20 to label21 with label16;
        catch java.lang.Throwable from label22 to label23 with label16;
        catch java.lang.Throwable from label24 to label25 with label16;
        catch java.lang.Throwable from label26 to label27 with label16;
        catch java.lang.Throwable from label28 to label29 with label16;
        catch java.lang.Throwable from label30 to label31 with label16;
        catch java.lang.Throwable from label32 to label33 with label16;
        catch java.lang.Throwable from label34 to label35 with label16;
        catch java.lang.Throwable from label36 to label37 with label16;
        catch java.lang.Throwable from label38 to label39 with label16;
        catch java.lang.Throwable from label40 to label41 with label16;
        catch java.lang.Throwable from label42 to label43 with label16;
        catch java.lang.Throwable from label44 to label45 with label16;
        catch java.lang.Throwable from label46 to label47 with label16;
        catch java.lang.Throwable from label48 to label49 with label16;
        catch java.lang.Throwable from label50 to label51 with label16;
        catch java.lang.Throwable from label52 to label53 with label16;
        catch java.lang.Throwable from label54 to label55 with label16;
        catch java.lang.Throwable from label56 to label57 with label16;
        catch java.lang.Throwable from label57 to label58 with label74;
        catch java.lang.Throwable from label59 to label60 with label74;
        catch java.lang.Throwable from label63 to label64 with label16;
        catch java.lang.Throwable from label65 to label66 with label16;
        catch java.lang.Throwable from label67 to label68 with label16;
        catch java.lang.Throwable from label69 to label70 with label16;
        catch java.lang.Throwable from label70 to label71 with label74;
        catch java.lang.Throwable from label72 to label73 with label74;
        catch java.lang.Throwable from label73 to label74 with label74;
        catch java.lang.Throwable from label75 to label76 with label74;
        catch java.lang.Throwable from label78 to label79 with label84;
        catch java.lang.Throwable from label79 to label80 with label84;
        catch java.lang.Throwable from label80 to label81 with label84;
        catch java.lang.Throwable from label81 to label82 with label84;
        catch java.lang.Throwable from label82 to label83 with label84;
        catch java.lang.Throwable from label83 to label84 with label84;
        catch java.lang.Throwable from label85 to label86 with label84;
    }

    public byte[] provideKeyResponse(byte[], byte[]) throws android.media.MediaPlayer$NoDrmSchemeException, android.media.DeniedByServerException
    {
        android.media.MediaPlayer r0;
        java.lang.Object r1;
        boolean z0;
        java.lang.StringBuilder r2, $r3, r30;
        java.lang.String $r8, $r16, $r21;
        android.media.MediaDrm $r9;
        android.media.NotProvisionedException $r17;
        java.lang.Exception $r18;
        java.lang.Throwable $r22;
        byte[] r23, r24, r26, r29;
        java.lang.IllegalStateException r31;
        android.media.MediaPlayer$NoDrmSchemeException r32;

        r0 := @this: android.media.MediaPlayer;

        r23 := @parameter0: byte[];

        r24 := @parameter1: byte[];

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("provideKeyResponse: keySetId: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r23);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" response: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r24);

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaPlayer", $r8);

        r1 = r0.<android.media.MediaPlayer: java.lang.Object mDrmLock>;

        entermonitor r1;

     label01:
        z0 = r0.<android.media.MediaPlayer: boolean mActiveDrmScheme>;

     label02:
        if z0 == 0 goto label14;

        if r23 != null goto label07;

     label03:
        r26 = r0.<android.media.MediaPlayer: byte[] mDrmSessionId>;

     label04:
        goto label08;

     label05:
        $r18 := @caughtexception;

        goto label11;

     label06:
        $r17 := @caughtexception;

        goto label13;

     label07:
        r26 = r23;

     label08:
        $r9 = r0.<android.media.MediaPlayer: android.media.MediaDrm mDrmObj>;

        r29 = virtualinvoke $r9.<android.media.MediaDrm: byte[] provideKeyResponse(byte[],byte[])>(r26, r24);

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("provideKeyResponse: keySetId: ");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r23);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" response: ");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r24);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --> ");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r29);

        $r16 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaPlayer", $r16);

     label09:
        exitmonitor r1;

     label10:
        return r29;

     label11:
        r30 = new java.lang.StringBuilder;

        specialinvoke r30.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("provideKeyResponse Exception ");

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r21 = virtualinvoke r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MediaPlayer", $r21);

     label12:
        throw $r18;

     label13:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MediaPlayer", "provideKeyResponse NotProvisionedException: Unexpected. Shouldn\'t have reached here.");

        r31 = new java.lang.IllegalStateException;

        specialinvoke r31.<java.lang.IllegalStateException: void <init>(java.lang.String)>("provideKeyResponse: Unexpected provisioning error.");

        throw r31;

     label14:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MediaPlayer", "getKeyRequest NoDrmSchemeException");

        r32 = new android.media.MediaPlayer$NoDrmSchemeException;

        specialinvoke r32.<android.media.MediaPlayer$NoDrmSchemeException: void <init>(java.lang.String)>("getKeyRequest: Has to set a DRM scheme first.");

        throw r32;

     label15:
        $r22 := @caughtexception;

     label16:
        exitmonitor r1;

     label17:
        throw $r22;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch android.media.NotProvisionedException from label03 to label04 with label06;
        catch java.lang.Exception from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label15;
        catch android.media.NotProvisionedException from label08 to label09 with label06;
        catch java.lang.Exception from label08 to label09 with label05;
        catch java.lang.Throwable from label08 to label09 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label12 to label13 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label14 to label15 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    public void release()
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$TimeProvider $r2, $r3;
        java.lang.Throwable $r4, $r5;
        java.lang.Object r6;

        r0 := @this: android.media.MediaPlayer;

        virtualinvoke r0.<android.media.MediaPlayer: void baseRelease()>();

        specialinvoke r0.<android.media.MediaPlayer: void stayAwake(boolean)>(0);

        specialinvoke r0.<android.media.MediaPlayer: void updateSurfaceScreenOn()>();

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnPreparedListener mOnPreparedListener> = null;

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnBufferingUpdateListener mOnBufferingUpdateListener> = null;

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnCompletionListener mOnCompletionListener> = null;

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnSeekCompleteListener mOnSeekCompleteListener> = null;

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnErrorListener mOnErrorListener> = null;

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnInfoListener mOnInfoListener> = null;

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnVideoSizeChangedListener mOnVideoSizeChangedListener> = null;

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnTimedTextListener mOnTimedTextListener> = null;

        r6 = r0.<android.media.MediaPlayer: java.lang.Object mTimeProviderLock>;

        entermonitor r6;

     label01:
        $r2 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$TimeProvider mTimeProvider>;

        if $r2 == null goto label02;

        $r3 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$TimeProvider mTimeProvider>;

        virtualinvoke $r3.<android.media.MediaPlayer$TimeProvider: void close()>();

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$TimeProvider mTimeProvider> = null;

     label02:
        exitmonitor r6;

     label03:
        entermonitor r0;

     label04:
        r0.<android.media.MediaPlayer: boolean mSubtitleDataListenerDisabled> = 0;

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnSubtitleDataListener mExtSubtitleDataListener> = null;

        r0.<android.media.MediaPlayer: android.os.Handler mExtSubtitleDataHandler> = null;

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnMediaTimeDiscontinuityListener mOnMediaTimeDiscontinuityListener> = null;

        r0.<android.media.MediaPlayer: android.os.Handler mOnMediaTimeDiscontinuityHandler> = null;

        exitmonitor r0;

     label05:
        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnDrmConfigHelper mOnDrmConfigHelper> = null;

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnDrmInfoHandlerDelegate mOnDrmInfoHandlerDelegate> = null;

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnDrmPreparedHandlerDelegate mOnDrmPreparedHandlerDelegate> = null;

        specialinvoke r0.<android.media.MediaPlayer: void resetDrmState()>();

        specialinvoke r0.<android.media.MediaPlayer: void _release()>();

        return;

     label06:
        $r5 := @caughtexception;

     label07:
        exitmonitor r0;

     label08:
        throw $r5;

     label09:
        $r4 := @caughtexception;

     label10:
        exitmonitor r6;

     label11:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void releaseDrm() throws android.media.MediaPlayer$NoDrmSchemeException
    {
        android.media.MediaPlayer r0;
        java.lang.Object r1;
        boolean z0;
        java.lang.Exception $r2;
        java.lang.Throwable $r3, $r4;
        java.lang.IllegalStateException r7;
        android.media.MediaPlayer$NoDrmSchemeException r8;

        r0 := @this: android.media.MediaPlayer;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaPlayer", "releaseDrm:");

        r1 = r0.<android.media.MediaPlayer: java.lang.Object mDrmLock>;

        entermonitor r1;

     label01:
        z0 = r0.<android.media.MediaPlayer: boolean mActiveDrmScheme>;

     label02:
        if z0 == 0 goto label11;

     label03:
        specialinvoke r0.<android.media.MediaPlayer: void _releaseDrm()>();

        specialinvoke r0.<android.media.MediaPlayer: void cleanDrmObj()>();

        r0.<android.media.MediaPlayer: boolean mActiveDrmScheme> = 0;

     label04:
        goto label07;

     label05:
        $r2 := @caughtexception;

     label06:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaPlayer", "releaseDrm: Exception ", $r2);

     label07:
        exitmonitor r1;

     label08:
        return;

     label09:
        $r3 := @caughtexception;

     label10:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaPlayer", "releaseDrm: Exception ", $r3);

        r7 = new java.lang.IllegalStateException;

        specialinvoke r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("releaseDrm: The player is not in a valid state.");

        throw r7;

     label11:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MediaPlayer", "releaseDrm(): No active DRM scheme to release.");

        r8 = new android.media.MediaPlayer$NoDrmSchemeException;

        specialinvoke r8.<android.media.MediaPlayer$NoDrmSchemeException: void <init>(java.lang.String)>("releaseDrm: No active DRM scheme to release.");

        throw r8;

     label12:
        $r4 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.IllegalStateException from label03 to label04 with label09;
        catch java.lang.Exception from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label11 to label12 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public void removeOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener)
    {
        android.media.MediaPlayer r0;
        android.util.ArrayMap r1, $r2, $r3;
        boolean $z0;
        java.lang.Throwable $r5;
        android.media.AudioRouting$OnRoutingChangedListener r6;

        r0 := @this: android.media.MediaPlayer;

        r6 := @parameter0: android.media.AudioRouting$OnRoutingChangedListener;

        r1 = r0.<android.media.MediaPlayer: android.util.ArrayMap mRoutingChangeListeners>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.media.MediaPlayer: android.util.ArrayMap mRoutingChangeListeners>;

        $z0 = virtualinvoke $r2.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r6);

        if $z0 == 0 goto label2;

        $r3 = r0.<android.media.MediaPlayer: android.util.ArrayMap mRoutingChangeListeners>;

        virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r6);

        specialinvoke r0.<android.media.MediaPlayer: void enableNativeRoutingCallbacksLocked(boolean)>(0);

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void reset()
    {
        android.media.MediaPlayer r0;
        java.util.Vector $r1, $r2, $r4, r12, r19;
        boolean $z0;
        android.media.MediaPlayer$TimeProvider $r3, $r6;
        java.util.BitSet $r5;
        java.lang.Object $r7, r17;
        java.lang.Throwable $r8, $r9, $r10, $r11;
        java.util.Iterator r13;
        java.io.InputStream r14;
        android.media.SubtitleController r16;
        android.media.MediaPlayer$EventHandler r18;

        r0 := @this: android.media.MediaPlayer;

        r0.<android.media.MediaPlayer: int mSelectedSubtitleTrackIndex> = -1;

        r12 = r0.<android.media.MediaPlayer: java.util.Vector mOpenSubtitleSources>;

        entermonitor r12;

     label01:
        $r1 = r0.<android.media.MediaPlayer: java.util.Vector mOpenSubtitleSources>;

        r13 = virtualinvoke $r1.<java.util.Vector: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        $r7 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        r14 = (java.io.InputStream) $r7;

     label03:
        virtualinvoke r14.<java.io.InputStream: void close()>();

     label04:
        goto label06;

     label05:
        $r11 := @caughtexception;

     label06:
        goto label02;

     label07:
        $r2 = r0.<android.media.MediaPlayer: java.util.Vector mOpenSubtitleSources>;

        virtualinvoke $r2.<java.util.Vector: void clear()>();

        exitmonitor r12;

     label08:
        r16 = r0.<android.media.MediaPlayer: android.media.SubtitleController mSubtitleController>;

        if r16 == null goto label09;

        virtualinvoke r16.<android.media.SubtitleController: void reset()>();

     label09:
        r17 = r0.<android.media.MediaPlayer: java.lang.Object mTimeProviderLock>;

        entermonitor r17;

     label10:
        $r3 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$TimeProvider mTimeProvider>;

        if $r3 == null goto label11;

        $r6 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$TimeProvider mTimeProvider>;

        virtualinvoke $r6.<android.media.MediaPlayer$TimeProvider: void close()>();

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$TimeProvider mTimeProvider> = null;

     label11:
        exitmonitor r17;

     label12:
        specialinvoke r0.<android.media.MediaPlayer: void stayAwake(boolean)>(0);

        specialinvoke r0.<android.media.MediaPlayer: void _reset()>();

        r18 = r0.<android.media.MediaPlayer: android.media.MediaPlayer$EventHandler mEventHandler>;

        if r18 == null goto label13;

        virtualinvoke r18.<android.media.MediaPlayer$EventHandler: void removeCallbacksAndMessages(java.lang.Object)>(null);

     label13:
        r19 = r0.<android.media.MediaPlayer: java.util.Vector mIndexTrackPairs>;

        entermonitor r19;

     label14:
        $r4 = r0.<android.media.MediaPlayer: java.util.Vector mIndexTrackPairs>;

        virtualinvoke $r4.<java.util.Vector: void clear()>();

        $r5 = r0.<android.media.MediaPlayer: java.util.BitSet mInbandTrackIndices>;

        virtualinvoke $r5.<java.util.BitSet: void clear()>();

        exitmonitor r19;

     label15:
        specialinvoke r0.<android.media.MediaPlayer: void resetDrmState()>();

        return;

     label16:
        $r10 := @caughtexception;

     label17:
        exitmonitor r19;

     label18:
        throw $r10;

     label19:
        $r8 := @caughtexception;

     label20:
        exitmonitor r17;

     label21:
        throw $r8;

     label22:
        $r9 := @caughtexception;

     label23:
        exitmonitor r12;

     label24:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label22;
        catch java.lang.Throwable from label02 to label03 with label22;
        catch java.io.IOException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label22;
        catch java.lang.Throwable from label07 to label08 with label22;
        catch java.lang.Throwable from label10 to label11 with label19;
        catch java.lang.Throwable from label11 to label12 with label19;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
        catch java.lang.Throwable from label20 to label21 with label19;
        catch java.lang.Throwable from label23 to label24 with label22;
    }

    public void restoreKeys(byte[]) throws android.media.MediaPlayer$NoDrmSchemeException
    {
        android.media.MediaPlayer r0;
        boolean z0;
        java.lang.StringBuilder $r2, r16;
        java.lang.String $r5, $r12;
        byte[] $r6, r13;
        android.media.MediaDrm $r7;
        java.lang.Throwable $r8;
        java.lang.Exception $r9;
        java.lang.Object r15;
        android.media.MediaPlayer$NoDrmSchemeException r17;

        r0 := @this: android.media.MediaPlayer;

        r13 := @parameter0: byte[];

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("restoreKeys: keySetId: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r13);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaPlayer", $r5);

        r15 = r0.<android.media.MediaPlayer: java.lang.Object mDrmLock>;

        entermonitor r15;

     label01:
        z0 = r0.<android.media.MediaPlayer: boolean mActiveDrmScheme>;

     label02:
        if z0 == 0 goto label09;

     label03:
        $r7 = r0.<android.media.MediaPlayer: android.media.MediaDrm mDrmObj>;

        $r6 = r0.<android.media.MediaPlayer: byte[] mDrmSessionId>;

        virtualinvoke $r7.<android.media.MediaDrm: void restoreKeys(byte[],byte[])>($r6, r13);

     label04:
        exitmonitor r15;

     label05:
        return;

     label06:
        $r9 := @caughtexception;

     label07:
        r16 = new java.lang.StringBuilder;

        specialinvoke r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("restoreKeys Exception ");

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r12 = virtualinvoke r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MediaPlayer", $r12);

     label08:
        throw $r9;

     label09:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MediaPlayer", "restoreKeys NoDrmSchemeException");

        r17 = new android.media.MediaPlayer$NoDrmSchemeException;

        specialinvoke r17.<android.media.MediaPlayer$NoDrmSchemeException: void <init>(java.lang.String)>("restoreKeys: Has to set a DRM scheme first.");

        throw r17;

     label10:
        $r8 := @caughtexception;

     label11:
        exitmonitor r15;

     label12:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Exception from label03 to label04 with label06;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public void seekTo(int) throws java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;
        int i0;
        long $l1;

        r0 := @this: android.media.MediaPlayer;

        i0 := @parameter0: int;

        $l1 = (long) i0;

        virtualinvoke r0.<android.media.MediaPlayer: void seekTo(long,int)>($l1, 0);

        return;
    }

    public void seekTo(long, int)
    {
        android.media.MediaPlayer r0;
        long l0, l6;
        int i1;
        java.lang.StringBuilder $r1, $r6, $r12;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5, $r11, $r17;
        byte $b2, $b3;

        r0 := @this: android.media.MediaPlayer;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        if i1 < 0 goto label3;

        if i1 > 3 goto label3;

        $b2 = l0 cmp 2147483647L;

        if $b2 <= 0 goto label1;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("seekTo offset ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is too large, cap to ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(2147483647);

        $r17 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MediaPlayer", $r17);

        l6 = 2147483647L;

        goto label2;

     label1:
        l6 = l0;

        $b3 = l0 cmp -2147483648L;

        if $b3 >= 0 goto label2;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("seekTo offset ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is too small, cap to ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(-2147483648);

        $r11 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MediaPlayer", $r11);

        l6 = -2147483648L;

     label2:
        specialinvoke r0.<android.media.MediaPlayer: void _seekTo(long,int)>(l6, i1);

        return;

     label3:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal seek mode: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    public void selectTrack(int) throws java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;
        int i0;

        r0 := @this: android.media.MediaPlayer;

        i0 := @parameter0: int;

        specialinvoke r0.<android.media.MediaPlayer: void selectOrDeselectTrack(int,boolean)>(i0, 1);

        return;
    }

    public void setAudioAttributes(android.media.AudioAttributes) throws java.lang.IllegalArgumentException
    {
        android.media.MediaPlayer r0;
        android.media.AudioAttributes r1;
        android.os.Parcel r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: android.media.AudioAttributes;

        if r1 == null goto label1;

        virtualinvoke r0.<android.media.MediaPlayer: void baseUpdateAudioAttributes(android.media.AudioAttributes)>(r1);

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        virtualinvoke r1.<android.media.AudioAttributes: void writeToParcel(android.os.Parcel,int)>(r2, 1);

        specialinvoke r0.<android.media.MediaPlayer: boolean setParameter(int,android.os.Parcel)>(1400, r2);

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        return;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot set AudioAttributes to null");

        throw $r3;
    }

    public native void setAudioSessionId(int) throws java.lang.IllegalArgumentException, java.lang.IllegalStateException;

    public void setAudioStreamType(int)
    {
        android.media.MediaPlayer r0;
        int i0;
        android.media.AudioAttributes$Builder $r1, $r2;
        android.media.AudioAttributes $r3;

        r0 := @this: android.media.MediaPlayer;

        i0 := @parameter0: int;

        staticinvoke <android.media.MediaPlayer: void deprecateStreamTypeForPlayback(int,java.lang.String,java.lang.String)>(i0, "MediaPlayer", "setAudioStreamType()");

        $r1 = new android.media.AudioAttributes$Builder;

        specialinvoke $r1.<android.media.AudioAttributes$Builder: void <init>()>();

        $r2 = virtualinvoke $r1.<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setInternalLegacyStreamType(int)>(i0);

        $r3 = virtualinvoke $r2.<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>();

        virtualinvoke r0.<android.media.MediaPlayer: void baseUpdateAudioAttributes(android.media.AudioAttributes)>($r3);

        specialinvoke r0.<android.media.MediaPlayer: void _setAudioStreamType(int)>(i0);

        r0.<android.media.MediaPlayer: int mStreamType> = i0;

        return;
    }

    public void setAuxEffectSendLevel(float)
    {
        android.media.MediaPlayer r0;
        float f0;

        r0 := @this: android.media.MediaPlayer;

        f0 := @parameter0: float;

        virtualinvoke r0.<android.media.MediaPlayer: int baseSetAuxEffectSendLevel(float)>(f0);

        return;
    }

    public void setDataSource(android.content.Context, android.net.Uri) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.SecurityException, java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;
        android.content.Context r1;
        android.net.Uri r2;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.net.Uri;

        virtualinvoke r0.<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri,java.util.Map,java.util.List)>(r1, r2, null, null);

        return;
    }

    public void setDataSource(android.content.Context, android.net.Uri, java.util.Map) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.SecurityException, java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;
        android.content.Context r1;
        android.net.Uri r2;
        java.util.Map r3;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.net.Uri;

        r3 := @parameter2: java.util.Map;

        virtualinvoke r0.<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri,java.util.Map,java.util.List)>(r1, r2, r3, null);

        return;
    }

    public void setDataSource(android.content.Context, android.net.Uri, java.util.Map, java.util.List) throws java.io.IOException
    {
        android.media.MediaPlayer r0;
        android.net.Uri r1, r19, r20;
        java.util.Map r2;
        java.util.List r3;
        java.lang.String r4, $r7, $r8, $r9, $r10, $r11, r16, $r17, $r18;
        int i0, $i1;
        java.lang.NullPointerException $r5, $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.IllegalArgumentException $r12;
        android.content.Context r13;
        java.net.CookieHandler r14;
        android.content.ContentResolver r15;

        r0 := @this: android.media.MediaPlayer;

        r13 := @parameter0: android.content.Context;

        r1 := @parameter1: android.net.Uri;

        r2 := @parameter2: java.util.Map;

        r3 := @parameter3: java.util.List;

        if r13 == null goto label10;

        if r1 == null goto label09;

        if r3 == null goto label02;

        r14 = staticinvoke <java.net.CookieHandler: java.net.CookieHandler getDefault()>();

        if r14 == null goto label02;

        $z5 = r14 instanceof java.net.CookieManager;

        if $z5 == 0 goto label01;

        goto label02;

     label01:
        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The cookie handler has to be of CookieManager type when cookies are provided.");

        throw $r12;

     label02:
        r15 = virtualinvoke r13.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r16 = virtualinvoke r1.<android.net.Uri: java.lang.String getScheme()>();

        $r17 = virtualinvoke r1.<android.net.Uri: java.lang.String getAuthority()>();

        r4 = staticinvoke <android.content.ContentProvider: java.lang.String getAuthorityWithoutUserId(java.lang.String)>($r17);

        $r18 = "file";

        $z6 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>(r16);

        if $z6 == 0 goto label03;

        $r11 = virtualinvoke r1.<android.net.Uri: java.lang.String getPath()>();

        virtualinvoke r0.<android.media.MediaPlayer: void setDataSource(java.lang.String)>($r11);

        return;

     label03:
        $r7 = "content";

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r16);

        if $z0 == 0 goto label06;

        $r9 = "settings";

        $z2 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z2 == 0 goto label06;

        i0 = staticinvoke <android.media.RingtoneManager: int getDefaultType(android.net.Uri)>(r1);

        $i1 = virtualinvoke r13.<android.content.Context: int getUserId()>();

        r19 = staticinvoke <android.media.RingtoneManager: android.net.Uri getCacheForType(int,int)>(i0, $i1);

        r20 = staticinvoke <android.media.RingtoneManager: android.net.Uri getActualDefaultRingtoneUri(android.content.Context,int)>(r13, i0);

        $z3 = specialinvoke r0.<android.media.MediaPlayer: boolean attemptDataSource(android.content.ContentResolver,android.net.Uri)>(r15, r19);

        if $z3 == 0 goto label04;

        return;

     label04:
        $z4 = specialinvoke r0.<android.media.MediaPlayer: boolean attemptDataSource(android.content.ContentResolver,android.net.Uri)>(r15, r20);

        if $z4 == 0 goto label05;

        return;

     label05:
        $r10 = virtualinvoke r1.<android.net.Uri: java.lang.String toString()>();

        specialinvoke r0.<android.media.MediaPlayer: void setDataSource(java.lang.String,java.util.Map,java.util.List)>($r10, r2, r3);

        goto label08;

     label06:
        $z1 = specialinvoke r0.<android.media.MediaPlayer: boolean attemptDataSource(android.content.ContentResolver,android.net.Uri)>(r15, r1);

        if $z1 == 0 goto label07;

        return;

     label07:
        $r8 = virtualinvoke r1.<android.net.Uri: java.lang.String toString()>();

        specialinvoke r0.<android.media.MediaPlayer: void setDataSource(java.lang.String,java.util.Map,java.util.List)>($r8, r2, r3);

     label08:
        return;

     label09:
        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("uri param can not be null.");

        throw $r6;

     label10:
        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("context param can not be null.");

        throw $r5;
    }

    public void setDataSource(android.content.res.AssetFileDescriptor) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;
        android.content.res.AssetFileDescriptor r1;
        long $l0, $l2, $l3;
        byte $b1;
        java.io.FileDescriptor $r3, $r4;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: android.content.res.AssetFileDescriptor;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $l0 = virtualinvoke r1.<android.content.res.AssetFileDescriptor: long getDeclaredLength()>();

        $b1 = $l0 cmp 0L;

        if $b1 >= 0 goto label1;

        $r4 = virtualinvoke r1.<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        virtualinvoke r0.<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor)>($r4);

        goto label2;

     label1:
        $r3 = virtualinvoke r1.<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        $l2 = virtualinvoke r1.<android.content.res.AssetFileDescriptor: long getStartOffset()>();

        $l3 = virtualinvoke r1.<android.content.res.AssetFileDescriptor: long getDeclaredLength()>();

        virtualinvoke r0.<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>($r3, $l2, $l3);

     label2:
        return;
    }

    public void setDataSource(android.media.MediaDataSource) throws java.lang.IllegalArgumentException, java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;
        android.media.MediaDataSource r1;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: android.media.MediaDataSource;

        specialinvoke r0.<android.media.MediaPlayer: void _setDataSource(android.media.MediaDataSource)>(r1);

        return;
    }

    public void setDataSource(java.io.FileDescriptor) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;
        java.io.FileDescriptor r1;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: java.io.FileDescriptor;

        virtualinvoke r0.<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>(r1, 0L, 576460752303423487L);

        return;
    }

    public void setDataSource(java.io.FileDescriptor, long, long) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;
        java.io.FileDescriptor r1;
        long l0, l1;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: java.io.FileDescriptor;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        specialinvoke r0.<android.media.MediaPlayer: void _setDataSource(java.io.FileDescriptor,long,long)>(r1, l0, l1);

        return;
    }

    public void setDataSource(java.lang.String) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.SecurityException, java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;
        java.lang.String r1;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.media.MediaPlayer: void setDataSource(java.lang.String,java.util.Map,java.util.List)>(r1, null, null);

        return;
    }

    public void setDataSource(java.lang.String, java.util.Map) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.SecurityException, java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;
        java.lang.String r1;
        java.util.Map r2;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Map;

        specialinvoke r0.<android.media.MediaPlayer: void setDataSource(java.lang.String,java.util.Map,java.util.List)>(r1, r2, null);

        return;
    }

    public void setDisplay(android.view.SurfaceHolder)
    {
        android.media.MediaPlayer r0;
        android.view.SurfaceHolder r1;
        android.view.Surface r2;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: android.view.SurfaceHolder;

        r0.<android.media.MediaPlayer: android.view.SurfaceHolder mSurfaceHolder> = r1;

        if r1 == null goto label1;

        r2 = interfaceinvoke r1.<android.view.SurfaceHolder: android.view.Surface getSurface()>();

        goto label2;

     label1:
        r2 = null;

     label2:
        specialinvoke r0.<android.media.MediaPlayer: void _setVideoSurface(android.view.Surface)>(r2);

        specialinvoke r0.<android.media.MediaPlayer: void updateSurfaceScreenOn()>();

        return;
    }

    public void setDrmPropertyString(java.lang.String, java.lang.String) throws android.media.MediaPlayer$NoDrmSchemeException
    {
        android.media.MediaPlayer r0;
        java.lang.StringBuilder $r1, r19;
        java.lang.String $r6, $r11, r13, r14;
        boolean $z0, $z1;
        android.media.MediaDrm $r7;
        java.lang.Exception $r8;
        java.lang.Throwable $r12;
        java.lang.Object r16;
        android.media.MediaPlayer$NoDrmSchemeException r17;

        r0 := @this: android.media.MediaPlayer;

        r13 := @parameter0: java.lang.String;

        r14 := @parameter1: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setDrmPropertyString: propertyName: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" value: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("MediaPlayer", $r6);

        r16 = r0.<android.media.MediaPlayer: java.lang.Object mDrmLock>;

        entermonitor r16;

     label01:
        $z0 = r0.<android.media.MediaPlayer: boolean mActiveDrmScheme>;

        if $z0 != 0 goto label04;

        $z1 = r0.<android.media.MediaPlayer: boolean mDrmConfigAllowed>;

        if $z1 == 0 goto label03;

     label02:
        goto label04;

     label03:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MediaPlayer", "setDrmPropertyString NoDrmSchemeException");

        r17 = new android.media.MediaPlayer$NoDrmSchemeException;

        specialinvoke r17.<android.media.MediaPlayer$NoDrmSchemeException: void <init>(java.lang.String)>("setDrmPropertyString: Has to prepareDrm() first.");

        throw r17;

     label04:
        $r7 = r0.<android.media.MediaPlayer: android.media.MediaDrm mDrmObj>;

        virtualinvoke $r7.<android.media.MediaDrm: void setPropertyString(java.lang.String,java.lang.String)>(r13, r14);

     label05:
        exitmonitor r16;

     label06:
        return;

     label07:
        $r8 := @caughtexception;

     label08:
        r19 = new java.lang.StringBuilder;

        specialinvoke r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setDrmPropertyString Exception ");

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r11 = virtualinvoke r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MediaPlayer", $r11);

     label09:
        throw $r8;

     label10:
        $r12 := @caughtexception;

     label11:
        exitmonitor r16;

     label12:
        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Exception from label04 to label05 with label07;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public native void setLooping(boolean);

    public int setMetadataFilter(java.util.Set, java.util.Set)
    {
        android.media.MediaPlayer r0;
        java.util.Set r1, r7;
        android.os.Parcel r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        boolean $z0, $z1;
        java.lang.Object $r3, $r5;
        java.lang.Integer $r4, $r6;
        java.util.Iterator r8, r9;

        r0 := @this: android.media.MediaPlayer;

        r7 := @parameter0: java.util.Set;

        r1 := @parameter1: java.util.Set;

        r2 = virtualinvoke r0.<android.media.MediaPlayer: android.os.Parcel newRequest()>();

        $i1 = virtualinvoke r2.<android.os.Parcel: int dataSize()>();

        $i2 = interfaceinvoke r7.<java.util.Set: int size()>();

        $i3 = $i2 + 1;

        $i4 = $i3 + 1;

        $i5 = interfaceinvoke r1.<java.util.Set: int size()>();

        $i6 = $i4 + $i5;

        $i7 = $i6 * 4;

        i0 = $i1 + $i7;

        $i8 = virtualinvoke r2.<android.os.Parcel: int dataCapacity()>();

        if $i8 >= i0 goto label1;

        virtualinvoke r2.<android.os.Parcel: void setDataCapacity(int)>(i0);

     label1:
        $i9 = interfaceinvoke r7.<java.util.Set: int size()>();

        virtualinvoke r2.<android.os.Parcel: void writeInt(int)>($i9);

        r8 = interfaceinvoke r7.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r5 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.Integer) $r5;

        $i13 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        virtualinvoke r2.<android.os.Parcel: void writeInt(int)>($i13);

        goto label2;

     label3:
        $i10 = interfaceinvoke r1.<java.util.Set: int size()>();

        virtualinvoke r2.<android.os.Parcel: void writeInt(int)>($i10);

        r9 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.Integer) $r3;

        $i12 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        virtualinvoke r2.<android.os.Parcel: void writeInt(int)>($i12);

        goto label4;

     label5:
        $i11 = specialinvoke r0.<android.media.MediaPlayer: int native_setMetadataFilter(android.os.Parcel)>(r2);

        return $i11;
    }

    public native void setNextMediaPlayer(android.media.MediaPlayer);

    public void setOnBufferingUpdateListener(android.media.MediaPlayer$OnBufferingUpdateListener)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnBufferingUpdateListener r1;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: android.media.MediaPlayer$OnBufferingUpdateListener;

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnBufferingUpdateListener mOnBufferingUpdateListener> = r1;

        return;
    }

    public void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnCompletionListener r1;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: android.media.MediaPlayer$OnCompletionListener;

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnCompletionListener mOnCompletionListener> = r1;

        return;
    }

    public void setOnDrmConfigHelper(android.media.MediaPlayer$OnDrmConfigHelper)
    {
        android.media.MediaPlayer r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        android.media.MediaPlayer$OnDrmConfigHelper r3;

        r0 := @this: android.media.MediaPlayer;

        r3 := @parameter0: android.media.MediaPlayer$OnDrmConfigHelper;

        r1 = r0.<android.media.MediaPlayer: java.lang.Object mDrmLock>;

        entermonitor r1;

     label1:
        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnDrmConfigHelper mOnDrmConfigHelper> = r3;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setOnDrmInfoListener(android.media.MediaPlayer$OnDrmInfoListener)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnDrmInfoListener r1;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: android.media.MediaPlayer$OnDrmInfoListener;

        virtualinvoke r0.<android.media.MediaPlayer: void setOnDrmInfoListener(android.media.MediaPlayer$OnDrmInfoListener,android.os.Handler)>(r1, null);

        return;
    }

    public void setOnDrmInfoListener(android.media.MediaPlayer$OnDrmInfoListener, android.os.Handler)
    {
        android.media.MediaPlayer r0;
        android.os.Handler r1;
        java.lang.Object r2;
        android.media.MediaPlayer$OnDrmInfoHandlerDelegate r3;
        java.lang.Throwable $r4;
        android.media.MediaPlayer$OnDrmInfoListener r5;

        r0 := @this: android.media.MediaPlayer;

        r5 := @parameter0: android.media.MediaPlayer$OnDrmInfoListener;

        r1 := @parameter1: android.os.Handler;

        r2 = r0.<android.media.MediaPlayer: java.lang.Object mDrmLock>;

        entermonitor r2;

        if r5 == null goto label3;

     label1:
        r3 = new android.media.MediaPlayer$OnDrmInfoHandlerDelegate;

        specialinvoke r3.<android.media.MediaPlayer$OnDrmInfoHandlerDelegate: void <init>(android.media.MediaPlayer,android.media.MediaPlayer,android.media.MediaPlayer$OnDrmInfoListener,android.os.Handler)>(r0, r0, r5, r1);

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnDrmInfoHandlerDelegate mOnDrmInfoHandlerDelegate> = r3;

     label2:
        goto label4;

     label3:
        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnDrmInfoHandlerDelegate mOnDrmInfoHandlerDelegate> = null;

     label4:
        exitmonitor r2;

     label5:
        return;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r2;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void setOnDrmPreparedListener(android.media.MediaPlayer$OnDrmPreparedListener)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnDrmPreparedListener r1;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: android.media.MediaPlayer$OnDrmPreparedListener;

        virtualinvoke r0.<android.media.MediaPlayer: void setOnDrmPreparedListener(android.media.MediaPlayer$OnDrmPreparedListener,android.os.Handler)>(r1, null);

        return;
    }

    public void setOnDrmPreparedListener(android.media.MediaPlayer$OnDrmPreparedListener, android.os.Handler)
    {
        android.media.MediaPlayer r0;
        android.os.Handler r1;
        java.lang.Object r2;
        android.media.MediaPlayer$OnDrmPreparedHandlerDelegate r3;
        java.lang.Throwable $r4;
        android.media.MediaPlayer$OnDrmPreparedListener r5;

        r0 := @this: android.media.MediaPlayer;

        r5 := @parameter0: android.media.MediaPlayer$OnDrmPreparedListener;

        r1 := @parameter1: android.os.Handler;

        r2 = r0.<android.media.MediaPlayer: java.lang.Object mDrmLock>;

        entermonitor r2;

        if r5 == null goto label3;

     label1:
        r3 = new android.media.MediaPlayer$OnDrmPreparedHandlerDelegate;

        specialinvoke r3.<android.media.MediaPlayer$OnDrmPreparedHandlerDelegate: void <init>(android.media.MediaPlayer,android.media.MediaPlayer,android.media.MediaPlayer$OnDrmPreparedListener,android.os.Handler)>(r0, r0, r5, r1);

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnDrmPreparedHandlerDelegate mOnDrmPreparedHandlerDelegate> = r3;

     label2:
        goto label4;

     label3:
        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnDrmPreparedHandlerDelegate mOnDrmPreparedHandlerDelegate> = null;

     label4:
        exitmonitor r2;

     label5:
        return;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r2;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void setOnErrorListener(android.media.MediaPlayer$OnErrorListener)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnErrorListener r1;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: android.media.MediaPlayer$OnErrorListener;

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnErrorListener mOnErrorListener> = r1;

        return;
    }

    public void setOnInfoListener(android.media.MediaPlayer$OnInfoListener)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnInfoListener r1;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: android.media.MediaPlayer$OnInfoListener;

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnInfoListener mOnInfoListener> = r1;

        return;
    }

    public void setOnMediaTimeDiscontinuityListener(android.media.MediaPlayer$OnMediaTimeDiscontinuityListener)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnMediaTimeDiscontinuityListener r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: android.media.MediaPlayer$OnMediaTimeDiscontinuityListener;

        if r1 == null goto label1;

        specialinvoke r0.<android.media.MediaPlayer: void setOnMediaTimeDiscontinuityListenerInt(android.media.MediaPlayer$OnMediaTimeDiscontinuityListener,android.os.Handler)>(r1, null);

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null listener");

        throw $r2;
    }

    public void setOnMediaTimeDiscontinuityListener(android.media.MediaPlayer$OnMediaTimeDiscontinuityListener, android.os.Handler)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnMediaTimeDiscontinuityListener r1;
        android.os.Handler r2;
        java.lang.IllegalArgumentException $r3, $r4;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: android.media.MediaPlayer$OnMediaTimeDiscontinuityListener;

        r2 := @parameter1: android.os.Handler;

        if r1 == null goto label2;

        if r2 == null goto label1;

        specialinvoke r0.<android.media.MediaPlayer: void setOnMediaTimeDiscontinuityListenerInt(android.media.MediaPlayer$OnMediaTimeDiscontinuityListener,android.os.Handler)>(r1, r2);

        return;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null handler");

        throw $r4;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null listener");

        throw $r3;
    }

    public void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnPreparedListener r1;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: android.media.MediaPlayer$OnPreparedListener;

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnPreparedListener mOnPreparedListener> = r1;

        return;
    }

    public void setOnSeekCompleteListener(android.media.MediaPlayer$OnSeekCompleteListener)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnSeekCompleteListener r1;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: android.media.MediaPlayer$OnSeekCompleteListener;

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnSeekCompleteListener mOnSeekCompleteListener> = r1;

        return;
    }

    public void setOnSubtitleDataListener(android.media.MediaPlayer$OnSubtitleDataListener)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnSubtitleDataListener r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: android.media.MediaPlayer$OnSubtitleDataListener;

        if r1 == null goto label1;

        specialinvoke r0.<android.media.MediaPlayer: void setOnSubtitleDataListenerInt(android.media.MediaPlayer$OnSubtitleDataListener,android.os.Handler)>(r1, null);

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null listener");

        throw $r2;
    }

    public void setOnSubtitleDataListener(android.media.MediaPlayer$OnSubtitleDataListener, android.os.Handler)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnSubtitleDataListener r1;
        android.os.Handler r2;
        java.lang.IllegalArgumentException $r3, $r4;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: android.media.MediaPlayer$OnSubtitleDataListener;

        r2 := @parameter1: android.os.Handler;

        if r1 == null goto label2;

        if r2 == null goto label1;

        specialinvoke r0.<android.media.MediaPlayer: void setOnSubtitleDataListenerInt(android.media.MediaPlayer$OnSubtitleDataListener,android.os.Handler)>(r1, r2);

        return;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null handler");

        throw $r4;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null listener");

        throw $r3;
    }

    public void setOnTimedMetaDataAvailableListener(android.media.MediaPlayer$OnTimedMetaDataAvailableListener)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnTimedMetaDataAvailableListener r1;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: android.media.MediaPlayer$OnTimedMetaDataAvailableListener;

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnTimedMetaDataAvailableListener mOnTimedMetaDataAvailableListener> = r1;

        return;
    }

    public void setOnTimedTextListener(android.media.MediaPlayer$OnTimedTextListener)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnTimedTextListener r1;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: android.media.MediaPlayer$OnTimedTextListener;

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnTimedTextListener mOnTimedTextListener> = r1;

        return;
    }

    public void setOnVideoSizeChangedListener(android.media.MediaPlayer$OnVideoSizeChangedListener)
    {
        android.media.MediaPlayer r0;
        android.media.MediaPlayer$OnVideoSizeChangedListener r1;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: android.media.MediaPlayer$OnVideoSizeChangedListener;

        r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnVideoSizeChangedListener mOnVideoSizeChangedListener> = r1;

        return;
    }

    public native void setPlaybackParams(android.media.PlaybackParams);

    public boolean setPreferredDevice(android.media.AudioDeviceInfo)
    {
        android.media.MediaPlayer r0;
        boolean z0, $z1;
        java.lang.Throwable $r1;
        android.media.AudioDeviceInfo r2;
        int i0;

        r0 := @this: android.media.MediaPlayer;

        r2 := @parameter0: android.media.AudioDeviceInfo;

        i0 = 0;

        if r2 == null goto label1;

        $z1 = virtualinvoke r2.<android.media.AudioDeviceInfo: boolean isSink()>();

        if $z1 != 0 goto label1;

        return 0;

     label1:
        if r2 == null goto label2;

        i0 = virtualinvoke r2.<android.media.AudioDeviceInfo: int getId()>();

     label2:
        z0 = specialinvoke r0.<android.media.MediaPlayer: boolean native_setOutputDevice(int)>(i0);

        if z0 != 1 goto label8;

        entermonitor r0;

     label3:
        r0.<android.media.MediaPlayer: android.media.AudioDeviceInfo mPreferredDevice> = r2;

        exitmonitor r0;

     label4:
        goto label8;

     label5:
        $r1 := @caughtexception;

     label6:
        exitmonitor r0;

     label7:
        throw $r1;

     label8:
        return z0;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void setRetransmitEndpoint(java.net.InetSocketAddress) throws java.lang.IllegalStateException, java.lang.IllegalArgumentException
    {
        android.media.MediaPlayer r0;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5, r8;
        java.net.InetAddress $r6;
        java.net.InetSocketAddress r7;
        int i0, i1;

        r0 := @this: android.media.MediaPlayer;

        r7 := @parameter0: java.net.InetSocketAddress;

        r8 = null;

        i0 = 0;

        if r7 == null goto label1;

        $r6 = virtualinvoke r7.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        r8 = virtualinvoke $r6.<java.net.InetAddress: java.lang.String getHostAddress()>();

        i0 = virtualinvoke r7.<java.net.InetSocketAddress: int getPort()>();

     label1:
        i1 = specialinvoke r0.<android.media.MediaPlayer: int native_setRetransmitEndpoint(java.lang.String,int)>(r8, i0);

        if i1 != 0 goto label2;

        return;

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal re-transmit endpoint; native ret ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    public void setScreenOnWhilePlaying(boolean)
    {
        android.media.MediaPlayer r0;
        boolean z0, $z1;
        android.view.SurfaceHolder $r1;

        r0 := @this: android.media.MediaPlayer;

        z0 := @parameter0: boolean;

        $z1 = r0.<android.media.MediaPlayer: boolean mScreenOnWhilePlaying>;

        if $z1 == z0 goto label2;

        if z0 == 0 goto label1;

        $r1 = r0.<android.media.MediaPlayer: android.view.SurfaceHolder mSurfaceHolder>;

        if $r1 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MediaPlayer", "setScreenOnWhilePlaying(true) is ineffective without a SurfaceHolder");

     label1:
        r0.<android.media.MediaPlayer: boolean mScreenOnWhilePlaying> = z0;

        specialinvoke r0.<android.media.MediaPlayer: void updateSurfaceScreenOn()>();

     label2:
        return;
    }

    public void setSubtitleAnchor(android.media.SubtitleController, android.media.SubtitleController$Anchor)
    {
        android.media.MediaPlayer r0;
        android.media.SubtitleController r1;
        android.media.SubtitleController$Anchor r2;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: android.media.SubtitleController;

        r2 := @parameter1: android.media.SubtitleController$Anchor;

        r0.<android.media.MediaPlayer: android.media.SubtitleController mSubtitleController> = r1;

        virtualinvoke r1.<android.media.SubtitleController: void setAnchor(android.media.SubtitleController$Anchor)>(r2);

        return;
    }

    public void setSurface(android.view.Surface)
    {
        android.media.MediaPlayer r0;
        android.view.Surface r1;
        boolean $z0;

        r0 := @this: android.media.MediaPlayer;

        r1 := @parameter0: android.view.Surface;

        $z0 = r0.<android.media.MediaPlayer: boolean mScreenOnWhilePlaying>;

        if $z0 == 0 goto label1;

        if r1 == null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MediaPlayer", "setScreenOnWhilePlaying(true) is ineffective for Surface");

     label1:
        r0.<android.media.MediaPlayer: android.view.SurfaceHolder mSurfaceHolder> = null;

        specialinvoke r0.<android.media.MediaPlayer: void _setVideoSurface(android.view.Surface)>(r1);

        specialinvoke r0.<android.media.MediaPlayer: void updateSurfaceScreenOn()>();

        return;
    }

    public native void setSyncParams(android.media.SyncParams);

    public void setVideoScalingMode(int)
    {
        android.media.MediaPlayer r0;
        int i0;
        android.os.Parcel r1, r10;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.IllegalArgumentException $r7;
        java.lang.String $r8;
        java.lang.Throwable $r9;

        r0 := @this: android.media.MediaPlayer;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<android.media.MediaPlayer: boolean isVideoScalingModeSupported(int)>(i0);

        if $z0 == 0 goto label4;

        r10 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r10.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.media.IMediaPlayer");

        virtualinvoke r10.<android.os.Parcel: void writeInt(int)>(6);

        virtualinvoke r10.<android.os.Parcel: void writeInt(int)>(i0);

        virtualinvoke r0.<android.media.MediaPlayer: void invoke(android.os.Parcel,android.os.Parcel)>(r10, r1);

     label2:
        virtualinvoke r10.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        $r9 := @caughtexception;

        virtualinvoke r10.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r9;

     label4:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Scaling mode ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not supported");

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setVolume(float)
    {
        android.media.MediaPlayer r0;
        float f0;

        r0 := @this: android.media.MediaPlayer;

        f0 := @parameter0: float;

        virtualinvoke r0.<android.media.MediaPlayer: void setVolume(float,float)>(f0, f0);

        return;
    }

    public void setVolume(float, float)
    {
        android.media.MediaPlayer r0;
        float f0, f1;

        r0 := @this: android.media.MediaPlayer;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        virtualinvoke r0.<android.media.MediaPlayer: void baseSetVolume(float,float)>(f0, f1);

        return;
    }

    public void setWakeMode(android.content.Context, int)
    {
        android.media.MediaPlayer r0;
        int i0, $i2;
        android.os.PowerManager$WakeLock r1, $r2, $r3, r14;
        boolean $z1, $z2, z3;
        java.lang.StringBuilder $r4;
        java.lang.String $r7, $r13;
        android.content.Context r8;
        java.lang.Object $r10;
        android.os.PowerManager $r11;
        java.lang.Class $r12;

        r0 := @this: android.media.MediaPlayer;

        r8 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        z3 = 0;

        $z1 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("audio.offload.ignore_setawake", 0);

        if $z1 != 1 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IGNORING setWakeMode ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MediaPlayer", $r7);

        return;

     label1:
        r1 = r0.<android.media.MediaPlayer: android.os.PowerManager$WakeLock mWakeLock>;

        if r1 == null goto label3;

        z3 = 0;

        $z2 = virtualinvoke r1.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z2 == 0 goto label2;

        z3 = 1;

        $r3 = r0.<android.media.MediaPlayer: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r3.<android.os.PowerManager$WakeLock: void release()>();

     label2:
        r0.<android.media.MediaPlayer: android.os.PowerManager$WakeLock mWakeLock> = null;

     label3:
        $r10 = virtualinvoke r8.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        $r11 = (android.os.PowerManager) $r10;

        $i2 = 536870912 | i0;

        $r12 = class "Landroid/media/MediaPlayer;";

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String getName()>();

        r14 = virtualinvoke $r11.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>($i2, $r13);

        r0.<android.media.MediaPlayer: android.os.PowerManager$WakeLock mWakeLock> = r14;

        virtualinvoke r14.<android.os.PowerManager$WakeLock: void setReferenceCounted(boolean)>(0);

        if z3 == 0 goto label4;

        $r2 = r0.<android.media.MediaPlayer: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r2.<android.os.PowerManager$WakeLock: void acquire()>();

     label4:
        return;
    }

    public void start() throws java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;
        int i0;
        android.media.MediaPlayer$1 $r1;

        r0 := @this: android.media.MediaPlayer;

        i0 = virtualinvoke r0.<android.media.MediaPlayer: int getStartDelayMs()>();

        if i0 != 0 goto label1;

        specialinvoke r0.<android.media.MediaPlayer: void startImpl()>();

        goto label2;

     label1:
        $r1 = new android.media.MediaPlayer$1;

        specialinvoke $r1.<android.media.MediaPlayer$1: void <init>(android.media.MediaPlayer,int)>(r0, i0);

        virtualinvoke $r1.<android.media.MediaPlayer$1: void start()>();

     label2:
        return;
    }

    public void stop() throws java.lang.IllegalStateException
    {
        android.media.MediaPlayer r0;

        r0 := @this: android.media.MediaPlayer;

        specialinvoke r0.<android.media.MediaPlayer: void stayAwake(boolean)>(0);

        specialinvoke r0.<android.media.MediaPlayer: void _stop()>();

        virtualinvoke r0.<android.media.MediaPlayer: void baseStop()>();

        return;
    }
}
