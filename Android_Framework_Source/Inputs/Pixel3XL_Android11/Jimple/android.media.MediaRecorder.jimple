public class android.media.MediaRecorder extends java.lang.Object implements android.media.AudioRouting, android.media.AudioRecordingMonitor, android.media.AudioRecordingMonitorClient, android.media.MicrophoneDirection
{
    public static final int MEDIA_ERROR_SERVER_DIED;
    public static final int MEDIA_RECORDER_ERROR_UNKNOWN;
    public static final int MEDIA_RECORDER_INFO_MAX_DURATION_REACHED;
    public static final int MEDIA_RECORDER_INFO_MAX_FILESIZE_APPROACHING;
    public static final int MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHED;
    public static final int MEDIA_RECORDER_INFO_NEXT_OUTPUT_FILE_STARTED;
    public static final int MEDIA_RECORDER_INFO_UNKNOWN;
    public static final int MEDIA_RECORDER_TRACK_INFO_COMPLETION_STATUS;
    public static final int MEDIA_RECORDER_TRACK_INFO_DATA_KBYTES;
    public static final int MEDIA_RECORDER_TRACK_INFO_DURATION_MS;
    public static final int MEDIA_RECORDER_TRACK_INFO_ENCODED_FRAMES;
    public static final int MEDIA_RECORDER_TRACK_INFO_INITIAL_DELAY_MS;
    public static final int MEDIA_RECORDER_TRACK_INFO_LIST_END;
    public static final int MEDIA_RECORDER_TRACK_INFO_LIST_START;
    public static final int MEDIA_RECORDER_TRACK_INFO_MAX_CHUNK_DUR_MS;
    public static final int MEDIA_RECORDER_TRACK_INFO_PROGRESS_IN_TIME;
    public static final int MEDIA_RECORDER_TRACK_INFO_START_OFFSET_MS;
    public static final int MEDIA_RECORDER_TRACK_INFO_TYPE;
    public static final int MEDIA_RECORDER_TRACK_INTER_CHUNK_TIME_MS;
    private static final java.lang.String TAG;
    private int mChannelCount;
    private android.media.MediaRecorder$EventHandler mEventHandler;
    private java.io.FileDescriptor mFd;
    private java.io.File mFile;
    private long mNativeContext;
    private android.media.MediaRecorder$OnErrorListener mOnErrorListener;
    private android.media.MediaRecorder$OnInfoListener mOnInfoListener;
    private java.lang.String mPath;
    private android.media.AudioDeviceInfo mPreferredDevice;
    android.media.AudioRecordingMonitorImpl mRecordingInfoImpl;
    private android.util.ArrayMap mRoutingChangeListeners;
    private android.view.Surface mSurface;

    static void <clinit>()
    {
        <android.media.MediaRecorder: java.lang.String TAG> = "MediaRecorder";

        <android.media.MediaRecorder: int MEDIA_RECORDER_TRACK_INTER_CHUNK_TIME_MS> = 1006;

        <android.media.MediaRecorder: int MEDIA_RECORDER_TRACK_INFO_TYPE> = 1002;

        <android.media.MediaRecorder: int MEDIA_RECORDER_TRACK_INFO_START_OFFSET_MS> = 1008;

        <android.media.MediaRecorder: int MEDIA_RECORDER_TRACK_INFO_PROGRESS_IN_TIME> = 1001;

        <android.media.MediaRecorder: int MEDIA_RECORDER_TRACK_INFO_MAX_CHUNK_DUR_MS> = 1004;

        <android.media.MediaRecorder: int MEDIA_RECORDER_TRACK_INFO_LIST_START> = 1000;

        <android.media.MediaRecorder: int MEDIA_RECORDER_TRACK_INFO_LIST_END> = 2000;

        <android.media.MediaRecorder: int MEDIA_RECORDER_TRACK_INFO_INITIAL_DELAY_MS> = 1007;

        <android.media.MediaRecorder: int MEDIA_RECORDER_TRACK_INFO_ENCODED_FRAMES> = 1005;

        <android.media.MediaRecorder: int MEDIA_RECORDER_TRACK_INFO_DURATION_MS> = 1003;

        <android.media.MediaRecorder: int MEDIA_RECORDER_TRACK_INFO_DATA_KBYTES> = 1009;

        <android.media.MediaRecorder: int MEDIA_RECORDER_TRACK_INFO_COMPLETION_STATUS> = 1000;

        <android.media.MediaRecorder: int MEDIA_RECORDER_INFO_UNKNOWN> = 1;

        <android.media.MediaRecorder: int MEDIA_RECORDER_INFO_NEXT_OUTPUT_FILE_STARTED> = 803;

        <android.media.MediaRecorder: int MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHED> = 801;

        <android.media.MediaRecorder: int MEDIA_RECORDER_INFO_MAX_FILESIZE_APPROACHING> = 802;

        <android.media.MediaRecorder: int MEDIA_RECORDER_INFO_MAX_DURATION_REACHED> = 800;

        <android.media.MediaRecorder: int MEDIA_RECORDER_ERROR_UNKNOWN> = 1;

        <android.media.MediaRecorder: int MEDIA_ERROR_SERVER_DIED> = 100;

        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("media_jni");

        staticinvoke <android.media.MediaRecorder: void native_init()>();

        return;
    }

    public void <init>()
    {
        android.media.MediaRecorder r0;
        android.util.ArrayMap $r1;
        android.media.AudioRecordingMonitorImpl $r2;
        android.media.MediaRecorder$EventHandler $r3, $r4;
        android.os.Looper r5, r6;
        java.lang.String r7, $r9;
        java.lang.ref.WeakReference $r8;

        r0 := @this: android.media.MediaRecorder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.media.MediaRecorder: android.media.AudioDeviceInfo mPreferredDevice> = null;

        $r1 = new android.util.ArrayMap;

        specialinvoke $r1.<android.util.ArrayMap: void <init>()>();

        r0.<android.media.MediaRecorder: android.util.ArrayMap mRoutingChangeListeners> = $r1;

        $r2 = new android.media.AudioRecordingMonitorImpl;

        specialinvoke $r2.<android.media.AudioRecordingMonitorImpl: void <init>(android.media.AudioRecordingMonitorClient)>(r0);

        r0.<android.media.MediaRecorder: android.media.AudioRecordingMonitorImpl mRecordingInfoImpl> = $r2;

        r5 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if r5 == null goto label1;

        $r4 = new android.media.MediaRecorder$EventHandler;

        specialinvoke $r4.<android.media.MediaRecorder$EventHandler: void <init>(android.media.MediaRecorder,android.media.MediaRecorder,android.os.Looper)>(r0, r0, r5);

        r0.<android.media.MediaRecorder: android.media.MediaRecorder$EventHandler mEventHandler> = $r4;

        goto label3;

     label1:
        r6 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        if r6 == null goto label2;

        $r3 = new android.media.MediaRecorder$EventHandler;

        specialinvoke $r3.<android.media.MediaRecorder$EventHandler: void <init>(android.media.MediaRecorder,android.media.MediaRecorder,android.os.Looper)>(r0, r0, r6);

        r0.<android.media.MediaRecorder: android.media.MediaRecorder$EventHandler mEventHandler> = $r3;

        goto label3;

     label2:
        r0.<android.media.MediaRecorder: android.media.MediaRecorder$EventHandler mEventHandler> = null;

     label3:
        r0.<android.media.MediaRecorder: int mChannelCount> = 1;

        r7 = staticinvoke <android.app.ActivityThread: java.lang.String currentPackageName()>();

        $r8 = new java.lang.ref.WeakReference;

        specialinvoke $r8.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r0);

        $r9 = staticinvoke <android.app.ActivityThread: java.lang.String currentOpPackageName()>();

        specialinvoke r0.<android.media.MediaRecorder: void native_setup(java.lang.Object,java.lang.String,java.lang.String)>($r8, r7, $r9);

        return;
    }

    private native void _prepare() throws java.lang.IllegalStateException, java.io.IOException;

    private native void _setNextOutputFile(java.io.FileDescriptor) throws java.lang.IllegalStateException, java.io.IOException;

    private native void _setOutputFile(java.io.FileDescriptor) throws java.lang.IllegalStateException, java.io.IOException;

    static long access$000(android.media.MediaRecorder)
    {
        android.media.MediaRecorder r0;
        long $l0;

        r0 := @parameter0: android.media.MediaRecorder;

        $l0 = r0.<android.media.MediaRecorder: long mNativeContext>;

        return $l0;
    }

    static android.media.MediaRecorder$OnErrorListener access$100(android.media.MediaRecorder)
    {
        android.media.MediaRecorder r0;
        android.media.MediaRecorder$OnErrorListener $r1;

        r0 := @parameter0: android.media.MediaRecorder;

        $r1 = r0.<android.media.MediaRecorder: android.media.MediaRecorder$OnErrorListener mOnErrorListener>;

        return $r1;
    }

    static android.media.MediaRecorder$OnInfoListener access$200(android.media.MediaRecorder)
    {
        android.media.MediaRecorder r0;
        android.media.MediaRecorder$OnInfoListener $r1;

        r0 := @parameter0: android.media.MediaRecorder;

        $r1 = r0.<android.media.MediaRecorder: android.media.MediaRecorder$OnInfoListener mOnInfoListener>;

        return $r1;
    }

    static android.util.ArrayMap access$300(android.media.MediaRecorder)
    {
        android.media.MediaRecorder r0;
        android.util.ArrayMap $r1;

        r0 := @parameter0: android.media.MediaRecorder;

        $r1 = r0.<android.media.MediaRecorder: android.util.ArrayMap mRoutingChangeListeners>;

        return $r1;
    }

    private void enableNativeRoutingCallbacksLocked(boolean)
    {
        android.media.MediaRecorder r0;
        boolean z0;
        android.util.ArrayMap $r1;
        int $i0;

        r0 := @this: android.media.MediaRecorder;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.media.MediaRecorder: android.util.ArrayMap mRoutingChangeListeners>;

        $i0 = virtualinvoke $r1.<android.util.ArrayMap: int size()>();

        if $i0 != 0 goto label1;

        specialinvoke r0.<android.media.MediaRecorder: void native_enableDeviceCallback(boolean)>(z0);

     label1:
        return;
    }

    public static final int getAudioSourceMax()
    {
        return 10;
    }

    public static boolean isSystemOnlyAudioSource(int)
    {
        int i0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label2;
            case 1: goto label2;
            case 2: goto label2;
            case 3: goto label2;
            case 4: goto label2;
            case 5: goto label2;
            case 6: goto label2;
            case 7: goto label2;
            case 8: goto label1;
            case 9: goto label2;
            case 10: goto label2;
            default: goto label1;
        };

     label1:
        return 1;

     label2:
        return 0;
    }

    private final native void native_enableDeviceCallback(boolean);

    private final native void native_finalize();

    private final native int native_getActiveMicrophones(java.util.ArrayList);

    private native android.os.PersistableBundle native_getMetrics();

    private native int native_getPortId();

    private final native int native_getRoutedDeviceId();

    private static final native void native_init();

    private native void native_reset();

    private final native boolean native_setInputDevice(int);

    private final native void native_setInputSurface(android.view.Surface);

    private native int native_setPreferredMicrophoneDirection(int);

    private native int native_setPreferredMicrophoneFieldDimension(float);

    private final native void native_setup(java.lang.Object, java.lang.String, java.lang.String) throws java.lang.IllegalStateException;

    private static void postEventFromNative(java.lang.Object, int, int, int, java.lang.Object)
    {
        int i0, i1, i2;
        android.media.MediaRecorder$EventHandler r0, $r3;
        java.lang.ref.WeakReference $r1;
        java.lang.Object $r2, r4, r5;
        android.media.MediaRecorder r6;
        android.os.Message r7;

        r4 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r5 := @parameter4: java.lang.Object;

        $r1 = (java.lang.ref.WeakReference) r4;

        $r2 = virtualinvoke $r1.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r6 = (android.media.MediaRecorder) $r2;

        if r6 != null goto label1;

        return;

     label1:
        r0 = r6.<android.media.MediaRecorder: android.media.MediaRecorder$EventHandler mEventHandler>;

        if r0 == null goto label2;

        r7 = virtualinvoke r0.<android.media.MediaRecorder$EventHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(i0, i1, i2, r5);

        $r3 = r6.<android.media.MediaRecorder: android.media.MediaRecorder$EventHandler mEventHandler>;

        virtualinvoke $r3.<android.media.MediaRecorder$EventHandler: boolean sendMessage(android.os.Message)>(r7);

     label2:
        return;
    }

    private native void setParameter(java.lang.String);

    public static final java.lang.String toLogFriendlyAudioSource(int)
    {
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r4;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case -1: goto label17;
            case 0: goto label16;
            case 1: goto label15;
            case 2: goto label14;
            case 3: goto label13;
            case 4: goto label12;
            case 5: goto label11;
            case 6: goto label10;
            case 7: goto label09;
            case 8: goto label08;
            case 9: goto label07;
            case 10: goto label06;
            default: goto label01;
        };

     label01:
        tableswitch(i0)
        {
            case 1997: goto label05;
            case 1998: goto label04;
            case 1999: goto label03;
            default: goto label02;
        };

     label02:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown source ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label03:
        return "HOTWORD";

     label04:
        return "RADIO_TUNER";

     label05:
        return "ECHO_REFERENCE";

     label06:
        return "VOICE_PERFORMANCE";

     label07:
        return "UNPROCESSED";

     label08:
        return "REMOTE_SUBMIX";

     label09:
        return "VOICE_COMMUNICATION";

     label10:
        return "VOICE_RECOGNITION";

     label11:
        return "CAMCORDER";

     label12:
        return "VOICE_CALL";

     label13:
        return "VOICE_DOWNLINK";

     label14:
        return "VOICE_UPLINK";

     label15:
        return "MIC";

     label16:
        return "DEFAULT";

     label17:
        return "AUDIO_SOURCE_INVALID";
    }

    public void addOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener, android.os.Handler)
    {
        android.media.MediaRecorder r0;
        android.util.ArrayMap r1, r2, $r4;
        android.media.NativeRoutingEventHandlerDelegate r3;
        boolean $z0;
        java.lang.Throwable $r6;
        android.media.AudioRouting$OnRoutingChangedListener r7;
        android.os.Handler r8;

        r0 := @this: android.media.MediaRecorder;

        r7 := @parameter0: android.media.AudioRouting$OnRoutingChangedListener;

        r8 := @parameter1: android.os.Handler;

        r1 = r0.<android.media.MediaRecorder: android.util.ArrayMap mRoutingChangeListeners>;

        entermonitor r1;

        if r7 == null goto label5;

     label1:
        $r4 = r0.<android.media.MediaRecorder: android.util.ArrayMap mRoutingChangeListeners>;

        $z0 = virtualinvoke $r4.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r7);

        if $z0 != 0 goto label5;

        specialinvoke r0.<android.media.MediaRecorder: void enableNativeRoutingCallbacksLocked(boolean)>(1);

        r2 = r0.<android.media.MediaRecorder: android.util.ArrayMap mRoutingChangeListeners>;

        r3 = new android.media.NativeRoutingEventHandlerDelegate;

     label2:
        if r8 == null goto label3;

        goto label4;

     label3:
        r8 = r0.<android.media.MediaRecorder: android.media.MediaRecorder$EventHandler mEventHandler>;

     label4:
        specialinvoke r3.<android.media.NativeRoutingEventHandlerDelegate: void <init>(android.media.AudioRouting,android.media.AudioRouting$OnRoutingChangedListener,android.os.Handler)>(r0, r7, r8);

        virtualinvoke r2.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, r3);

     label5:
        exitmonitor r1;

     label6:
        return;

     label7:
        $r6 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    protected void finalize()
    {
        android.media.MediaRecorder r0;

        r0 := @this: android.media.MediaRecorder;

        specialinvoke r0.<android.media.MediaRecorder: void native_finalize()>();

        return;
    }

    public java.util.List getActiveMicrophones() throws java.io.IOException
    {
        android.media.MediaRecorder r0;
        java.util.ArrayList $r3, $r4;
        int $i0, i3, $i4, i5;
        android.util.Pair $r5;
        java.lang.Integer $r6, $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r11;
        android.media.AudioDeviceInfo r13;
        android.media.MicrophoneInfo r14;

        r0 := @this: android.media.MediaRecorder;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        i3 = specialinvoke r0.<android.media.MediaRecorder: int native_getActiveMicrophones(java.util.ArrayList)>($r3);

        if i3 == 0 goto label2;

        if i3 == -3 goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getActiveMicrophones failed:");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MediaRecorder", $r11);

     label1:
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MediaRecorder", "getActiveMicrophones failed, fallback on routed device info");

     label2:
        staticinvoke <android.media.AudioManager: void setPortIdForMicrophones(java.util.ArrayList)>($r3);

        $i4 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        if $i4 != 0 goto label5;

        r13 = virtualinvoke r0.<android.media.MediaRecorder: android.media.AudioDeviceInfo getRoutedDevice()>();

        if r13 == null goto label5;

        r14 = staticinvoke <android.media.AudioManager: android.media.MicrophoneInfo microphoneInfoFromAudioDeviceInfo(android.media.AudioDeviceInfo)>(r13);

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        i5 = 0;

     label3:
        $i0 = r0.<android.media.MediaRecorder: int mChannelCount>;

        if i5 >= $i0 goto label4;

        $r5 = new android.util.Pair;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i5);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke $r5.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r6, $r7);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        i5 = i5 + 1;

        goto label3;

     label4:
        virtualinvoke r14.<android.media.MicrophoneInfo: void setChannelMapping(java.util.List)>($r4);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r14);

     label5:
        return $r3;
    }

    public android.media.AudioRecordingConfiguration getActiveRecordingConfiguration()
    {
        android.media.MediaRecorder r0;
        android.media.AudioRecordingMonitorImpl $r1;
        android.media.AudioRecordingConfiguration $r2;

        r0 := @this: android.media.MediaRecorder;

        $r1 = r0.<android.media.MediaRecorder: android.media.AudioRecordingMonitorImpl mRecordingInfoImpl>;

        $r2 = virtualinvoke $r1.<android.media.AudioRecordingMonitorImpl: android.media.AudioRecordingConfiguration getActiveRecordingConfiguration()>();

        return $r2;
    }

    public native int getMaxAmplitude() throws java.lang.IllegalStateException;

    public android.os.PersistableBundle getMetrics()
    {
        android.media.MediaRecorder r0;
        android.os.PersistableBundle $r1;

        r0 := @this: android.media.MediaRecorder;

        $r1 = specialinvoke r0.<android.media.MediaRecorder: android.os.PersistableBundle native_getMetrics()>();

        return $r1;
    }

    public int getPortId()
    {
        android.media.MediaRecorder r0;
        long $l0;
        byte $b1;
        int $i2;

        r0 := @this: android.media.MediaRecorder;

        $l0 = r0.<android.media.MediaRecorder: long mNativeContext>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        return 0;

     label1:
        $i2 = specialinvoke r0.<android.media.MediaRecorder: int native_getPortId()>();

        return $i2;
    }

    public android.media.AudioDeviceInfo getPreferredDevice()
    {
        android.media.MediaRecorder r0;
        java.lang.Throwable $r1;
        android.media.AudioDeviceInfo r2;

        r0 := @this: android.media.MediaRecorder;

        entermonitor r0;

     label1:
        r2 = r0.<android.media.MediaRecorder: android.media.AudioDeviceInfo mPreferredDevice>;

        exitmonitor r0;

     label2:
        return r2;

     label3:
        $r1 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.media.AudioDeviceInfo getRoutedDevice()
    {
        android.media.MediaRecorder r0;
        int i0, $i1, $i2, i3;
        android.media.AudioDeviceInfo[] r1;
        android.media.AudioDeviceInfo $r2, $r3;

        r0 := @this: android.media.MediaRecorder;

        i0 = specialinvoke r0.<android.media.MediaRecorder: int native_getRoutedDeviceId()>();

        if i0 != 0 goto label1;

        return null;

     label1:
        r1 = staticinvoke <android.media.AudioManager: android.media.AudioDeviceInfo[] getDevicesStatic(int)>(1);

        i3 = 0;

     label2:
        $i1 = lengthof r1;

        if i3 >= $i1 goto label4;

        $r2 = r1[i3];

        $i2 = virtualinvoke $r2.<android.media.AudioDeviceInfo: int getId()>();

        if $i2 != i0 goto label3;

        $r3 = r1[i3];

        return $r3;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return null;
    }

    public native android.view.Surface getSurface();

    public native boolean isPrivacySensitive();

    public native void pause() throws java.lang.IllegalStateException;

    public void prepare() throws java.lang.IllegalStateException, java.io.IOException
    {
        android.media.MediaRecorder r0;
        java.lang.String $r1, $r8;
        java.io.File $r2, $r5;
        java.io.IOException $r3;
        java.io.RandomAccessFile $r4, $r7;
        java.io.FileDescriptor $r6, $r9, r14;
        java.lang.Throwable $r10, $r11;

        r0 := @this: android.media.MediaRecorder;

        $r1 = r0.<android.media.MediaRecorder: java.lang.String mPath>;

        if $r1 == null goto label04;

        $r7 = new java.io.RandomAccessFile;

        $r8 = r0.<android.media.MediaRecorder: java.lang.String mPath>;

        specialinvoke $r7.<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>($r8, "rw");

     label01:
        $r9 = virtualinvoke $r7.<java.io.RandomAccessFile: java.io.FileDescriptor getFD()>();

        specialinvoke r0.<android.media.MediaRecorder: void _setOutputFile(java.io.FileDescriptor)>($r9);

     label02:
        virtualinvoke $r7.<java.io.RandomAccessFile: void close()>();

        goto label08;

     label03:
        $r10 := @caughtexception;

        virtualinvoke $r7.<java.io.RandomAccessFile: void close()>();

        throw $r10;

     label04:
        r14 = r0.<android.media.MediaRecorder: java.io.FileDescriptor mFd>;

        if r14 == null goto label05;

        specialinvoke r0.<android.media.MediaRecorder: void _setOutputFile(java.io.FileDescriptor)>(r14);

        goto label08;

     label05:
        $r2 = r0.<android.media.MediaRecorder: java.io.File mFile>;

        if $r2 == null goto label10;

        $r4 = new java.io.RandomAccessFile;

        $r5 = r0.<android.media.MediaRecorder: java.io.File mFile>;

        specialinvoke $r4.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>($r5, "rw");

     label06:
        $r6 = virtualinvoke $r4.<java.io.RandomAccessFile: java.io.FileDescriptor getFD()>();

        specialinvoke r0.<android.media.MediaRecorder: void _setOutputFile(java.io.FileDescriptor)>($r6);

     label07:
        virtualinvoke $r4.<java.io.RandomAccessFile: void close()>();

     label08:
        specialinvoke r0.<android.media.MediaRecorder: void _prepare()>();

        return;

     label09:
        $r11 := @caughtexception;

        virtualinvoke $r4.<java.io.RandomAccessFile: void close()>();

        throw $r11;

     label10:
        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("No valid output file");

        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label06 to label07 with label09;
    }

    public void registerAudioRecordingCallback(java.util.concurrent.Executor, android.media.AudioManager$AudioRecordingCallback)
    {
        android.media.MediaRecorder r0;
        java.util.concurrent.Executor r1;
        android.media.AudioManager$AudioRecordingCallback r2;
        android.media.AudioRecordingMonitorImpl $r3;

        r0 := @this: android.media.MediaRecorder;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: android.media.AudioManager$AudioRecordingCallback;

        $r3 = r0.<android.media.MediaRecorder: android.media.AudioRecordingMonitorImpl mRecordingInfoImpl>;

        virtualinvoke $r3.<android.media.AudioRecordingMonitorImpl: void registerAudioRecordingCallback(java.util.concurrent.Executor,android.media.AudioManager$AudioRecordingCallback)>(r1, r2);

        return;
    }

    public native void release();

    public void removeOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener)
    {
        android.media.MediaRecorder r0;
        android.util.ArrayMap r1, $r2, $r3;
        boolean $z0;
        java.lang.Throwable $r5;
        android.media.AudioRouting$OnRoutingChangedListener r6;

        r0 := @this: android.media.MediaRecorder;

        r6 := @parameter0: android.media.AudioRouting$OnRoutingChangedListener;

        r1 = r0.<android.media.MediaRecorder: android.util.ArrayMap mRoutingChangeListeners>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.media.MediaRecorder: android.util.ArrayMap mRoutingChangeListeners>;

        $z0 = virtualinvoke $r2.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r6);

        if $z0 == 0 goto label2;

        $r3 = r0.<android.media.MediaRecorder: android.util.ArrayMap mRoutingChangeListeners>;

        virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r6);

        specialinvoke r0.<android.media.MediaRecorder: void enableNativeRoutingCallbacksLocked(boolean)>(0);

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void reset()
    {
        android.media.MediaRecorder r0;
        android.media.MediaRecorder$EventHandler $r1;

        r0 := @this: android.media.MediaRecorder;

        specialinvoke r0.<android.media.MediaRecorder: void native_reset()>();

        $r1 = r0.<android.media.MediaRecorder: android.media.MediaRecorder$EventHandler mEventHandler>;

        virtualinvoke $r1.<android.media.MediaRecorder$EventHandler: void removeCallbacksAndMessages(java.lang.Object)>(null);

        return;
    }

    public native void resume() throws java.lang.IllegalStateException;

    public void setAudioChannels(int)
    {
        android.media.MediaRecorder r0;
        int i0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r6;

        r0 := @this: android.media.MediaRecorder;

        i0 := @parameter0: int;

        if i0 <= 0 goto label1;

        r0.<android.media.MediaRecorder: int mChannelCount> = i0;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("audio-param-number-of-channels=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.media.MediaRecorder: void setParameter(java.lang.String)>($r6);

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Number of channels is not positive");

        throw $r2;
    }

    public native void setAudioEncoder(int) throws java.lang.IllegalStateException;

    public void setAudioEncodingBitRate(int)
    {
        android.media.MediaRecorder r0;
        int i0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r6;

        r0 := @this: android.media.MediaRecorder;

        i0 := @parameter0: int;

        if i0 <= 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("audio-param-encoding-bitrate=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.media.MediaRecorder: void setParameter(java.lang.String)>($r6);

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Audio encoding bit rate is not positive");

        throw $r2;
    }

    public void setAudioSamplingRate(int)
    {
        android.media.MediaRecorder r0;
        int i0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r6;

        r0 := @this: android.media.MediaRecorder;

        i0 := @parameter0: int;

        if i0 <= 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("audio-param-sampling-rate=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.media.MediaRecorder: void setParameter(java.lang.String)>($r6);

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Audio sampling rate is not positive");

        throw $r2;
    }

    public native void setAudioSource(int) throws java.lang.IllegalStateException;

    public void setAuxiliaryOutputFile(java.io.FileDescriptor)
    {
        android.media.MediaRecorder r0;
        java.io.FileDescriptor r1;

        r0 := @this: android.media.MediaRecorder;

        r1 := @parameter0: java.io.FileDescriptor;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MediaRecorder", "setAuxiliaryOutputFile(FileDescriptor) is no longer supported.");

        return;
    }

    public void setAuxiliaryOutputFile(java.lang.String)
    {
        android.media.MediaRecorder r0;
        java.lang.String r1;

        r0 := @this: android.media.MediaRecorder;

        r1 := @parameter0: java.lang.String;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MediaRecorder", "setAuxiliaryOutputFile(String) is no longer supported.");

        return;
    }

    public native void setCamera(android.hardware.Camera);

    public void setCaptureRate(double)
    {
        android.media.MediaRecorder r0;
        double d0;
        java.lang.StringBuilder $r2;
        java.lang.String $r5;

        r0 := @this: android.media.MediaRecorder;

        d0 := @parameter0: double;

        specialinvoke r0.<android.media.MediaRecorder: void setParameter(java.lang.String)>("time-lapse-enable=1");

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("time-lapse-fps=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.media.MediaRecorder: void setParameter(java.lang.String)>($r5);

        return;
    }

    public void setInputSurface(android.view.Surface)
    {
        android.media.MediaRecorder r0;
        android.view.Surface r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: android.media.MediaRecorder;

        r1 := @parameter0: android.view.Surface;

        $z0 = r1 instanceof android.media.MediaCodec$PersistentSurface;

        if $z0 == 0 goto label1;

        specialinvoke r0.<android.media.MediaRecorder: void native_setInputSurface(android.view.Surface)>(r1);

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("not a PersistentSurface");

        throw $r2;
    }

    public void setLocation(float, float)
    {
        android.media.MediaRecorder r0;
        float f0, f1, $f2, $f3;
        int i0, i1;
        double $d0, $d1, $d2, $d3;
        java.lang.StringBuilder $r1, $r7, $r13, $r17;
        java.lang.IllegalArgumentException $r5, $r11;
        java.lang.String $r6, $r12, $r16, $r20;

        r0 := @this: android.media.MediaRecorder;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $f2 = f0 * 10000.0F;

        $d0 = (double) $f2;

        $d1 = $d0 + 0.5;

        i0 = (int) $d1;

        $f3 = 10000.0F * f1;

        $d2 = (double) $f3;

        $d3 = $d2 + 0.5;

        i1 = (int) $d3;

        if i0 > 900000 goto label2;

        if i0 < -900000 goto label2;

        if i1 > 1800000 goto label1;

        if i1 < -1800000 goto label1;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("param-geotag-latitude=");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.media.MediaRecorder: void setParameter(java.lang.String)>($r16);

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("param-geotag-longitude=");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.media.MediaRecorder: void setParameter(java.lang.String)>($r20);

        return;

     label1:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Longitude: ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f1);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" out of range");

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r11;

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Latitude: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" out of range.");

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    public native void setMaxDuration(int) throws java.lang.IllegalArgumentException;

    public native void setMaxFileSize(long) throws java.lang.IllegalArgumentException;

    public void setNextOutputFile(java.io.File) throws java.io.IOException
    {
        android.media.MediaRecorder r0;
        java.io.RandomAccessFile $r2;
        java.io.FileDescriptor $r3;
        java.lang.Throwable $r4;
        java.io.File r5;

        r0 := @this: android.media.MediaRecorder;

        r5 := @parameter0: java.io.File;

        $r2 = new java.io.RandomAccessFile;

        specialinvoke $r2.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>(r5, "rw");

     label1:
        $r3 = virtualinvoke $r2.<java.io.RandomAccessFile: java.io.FileDescriptor getFD()>();

        specialinvoke r0.<android.media.MediaRecorder: void _setNextOutputFile(java.io.FileDescriptor)>($r3);

     label2:
        virtualinvoke $r2.<java.io.RandomAccessFile: void close()>();

        return;

     label3:
        $r4 := @caughtexception;

        virtualinvoke $r2.<java.io.RandomAccessFile: void close()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setNextOutputFile(java.io.FileDescriptor) throws java.io.IOException
    {
        android.media.MediaRecorder r0;
        java.io.FileDescriptor r1;

        r0 := @this: android.media.MediaRecorder;

        r1 := @parameter0: java.io.FileDescriptor;

        specialinvoke r0.<android.media.MediaRecorder: void _setNextOutputFile(java.io.FileDescriptor)>(r1);

        return;
    }

    public void setOnErrorListener(android.media.MediaRecorder$OnErrorListener)
    {
        android.media.MediaRecorder r0;
        android.media.MediaRecorder$OnErrorListener r1;

        r0 := @this: android.media.MediaRecorder;

        r1 := @parameter0: android.media.MediaRecorder$OnErrorListener;

        r0.<android.media.MediaRecorder: android.media.MediaRecorder$OnErrorListener mOnErrorListener> = r1;

        return;
    }

    public void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)
    {
        android.media.MediaRecorder r0;
        android.media.MediaRecorder$OnInfoListener r1;

        r0 := @this: android.media.MediaRecorder;

        r1 := @parameter0: android.media.MediaRecorder$OnInfoListener;

        r0.<android.media.MediaRecorder: android.media.MediaRecorder$OnInfoListener mOnInfoListener> = r1;

        return;
    }

    public void setOrientationHint(int)
    {
        android.media.MediaRecorder r0;
        int i0;
        java.lang.StringBuilder $r3, $r9;
        java.lang.IllegalArgumentException $r6;
        java.lang.String $r7, $r11;

        r0 := @this: android.media.MediaRecorder;

        i0 := @parameter0: int;

        if i0 == 0 goto label2;

        if i0 == 90 goto label2;

        if i0 == 180 goto label2;

        if i0 != 270 goto label1;

        goto label2;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported angle: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label2:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("video-param-rotation-angle-degrees=");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.media.MediaRecorder: void setParameter(java.lang.String)>($r11);

        return;
    }

    public void setOutputFile(java.io.File)
    {
        android.media.MediaRecorder r0;
        java.io.File r1;

        r0 := @this: android.media.MediaRecorder;

        r1 := @parameter0: java.io.File;

        r0.<android.media.MediaRecorder: java.lang.String mPath> = null;

        r0.<android.media.MediaRecorder: java.io.FileDescriptor mFd> = null;

        r0.<android.media.MediaRecorder: java.io.File mFile> = r1;

        return;
    }

    public void setOutputFile(java.io.FileDescriptor) throws java.lang.IllegalStateException
    {
        android.media.MediaRecorder r0;
        java.io.FileDescriptor r1;

        r0 := @this: android.media.MediaRecorder;

        r1 := @parameter0: java.io.FileDescriptor;

        r0.<android.media.MediaRecorder: java.lang.String mPath> = null;

        r0.<android.media.MediaRecorder: java.io.File mFile> = null;

        r0.<android.media.MediaRecorder: java.io.FileDescriptor mFd> = r1;

        return;
    }

    public void setOutputFile(java.lang.String) throws java.lang.IllegalStateException
    {
        android.media.MediaRecorder r0;
        java.lang.String r1;

        r0 := @this: android.media.MediaRecorder;

        r1 := @parameter0: java.lang.String;

        r0.<android.media.MediaRecorder: java.io.FileDescriptor mFd> = null;

        r0.<android.media.MediaRecorder: java.io.File mFile> = null;

        r0.<android.media.MediaRecorder: java.lang.String mPath> = r1;

        return;
    }

    public native void setOutputFormat(int) throws java.lang.IllegalStateException;

    public boolean setPreferredDevice(android.media.AudioDeviceInfo)
    {
        android.media.MediaRecorder r0;
        boolean z0, $z1;
        java.lang.Throwable $r1;
        android.media.AudioDeviceInfo r2;
        int i0;

        r0 := @this: android.media.MediaRecorder;

        r2 := @parameter0: android.media.AudioDeviceInfo;

        i0 = 0;

        if r2 == null goto label1;

        $z1 = virtualinvoke r2.<android.media.AudioDeviceInfo: boolean isSource()>();

        if $z1 != 0 goto label1;

        return 0;

     label1:
        if r2 == null goto label2;

        i0 = virtualinvoke r2.<android.media.AudioDeviceInfo: int getId()>();

     label2:
        z0 = specialinvoke r0.<android.media.MediaRecorder: boolean native_setInputDevice(int)>(i0);

        if z0 != 1 goto label8;

        entermonitor r0;

     label3:
        r0.<android.media.MediaRecorder: android.media.AudioDeviceInfo mPreferredDevice> = r2;

        exitmonitor r0;

     label4:
        goto label8;

     label5:
        $r1 := @caughtexception;

     label6:
        exitmonitor r0;

     label7:
        throw $r1;

     label8:
        return z0;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public boolean setPreferredMicrophoneDirection(int)
    {
        android.media.MediaRecorder r0;
        int i0, $i1;
        boolean z0;

        r0 := @this: android.media.MediaRecorder;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<android.media.MediaRecorder: int native_setPreferredMicrophoneDirection(int)>(i0);

        if $i1 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean setPreferredMicrophoneFieldDimension(float)
    {
        android.media.MediaRecorder r0;
        float f0;
        byte $b0, $b1;
        boolean z1, z2;
        int $i2;

        r0 := @this: android.media.MediaRecorder;

        f0 := @parameter0: float;

        $b0 = f0 cmpl -1.0F;

        if $b0 < 0 goto label1;

        $b1 = f0 cmpg 1.0F;

        if $b1 > 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z1, "Argument must fall between -1 & 1 (inclusive)");

        $i2 = specialinvoke r0.<android.media.MediaRecorder: int native_setPreferredMicrophoneFieldDimension(float)>(f0);

        if $i2 != 0 goto label3;

        z2 = 1;

        goto label4;

     label3:
        z2 = 0;

     label4:
        return z2;
    }

    public void setPreviewDisplay(android.view.Surface)
    {
        android.media.MediaRecorder r0;
        android.view.Surface r1;

        r0 := @this: android.media.MediaRecorder;

        r1 := @parameter0: android.view.Surface;

        r0.<android.media.MediaRecorder: android.view.Surface mSurface> = r1;

        return;
    }

    public native void setPrivacySensitive(boolean);

    public void setProfile(android.media.CamcorderProfile)
    {
        android.media.MediaRecorder r0;
        android.media.CamcorderProfile r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;

        r0 := @this: android.media.MediaRecorder;

        r1 := @parameter0: android.media.CamcorderProfile;

        $i0 = r1.<android.media.CamcorderProfile: int fileFormat>;

        virtualinvoke r0.<android.media.MediaRecorder: void setOutputFormat(int)>($i0);

        $i1 = r1.<android.media.CamcorderProfile: int videoFrameRate>;

        virtualinvoke r0.<android.media.MediaRecorder: void setVideoFrameRate(int)>($i1);

        $i3 = r1.<android.media.CamcorderProfile: int videoFrameWidth>;

        $i2 = r1.<android.media.CamcorderProfile: int videoFrameHeight>;

        virtualinvoke r0.<android.media.MediaRecorder: void setVideoSize(int,int)>($i3, $i2);

        $i4 = r1.<android.media.CamcorderProfile: int videoBitRate>;

        virtualinvoke r0.<android.media.MediaRecorder: void setVideoEncodingBitRate(int)>($i4);

        $i5 = r1.<android.media.CamcorderProfile: int videoCodec>;

        virtualinvoke r0.<android.media.MediaRecorder: void setVideoEncoder(int)>($i5);

        $i6 = r1.<android.media.CamcorderProfile: int quality>;

        if $i6 < 1000 goto label1;

        $i11 = r1.<android.media.CamcorderProfile: int quality>;

        if $i11 > 1007 goto label1;

        goto label2;

     label1:
        $i7 = r1.<android.media.CamcorderProfile: int audioBitRate>;

        virtualinvoke r0.<android.media.MediaRecorder: void setAudioEncodingBitRate(int)>($i7);

        $i8 = r1.<android.media.CamcorderProfile: int audioChannels>;

        virtualinvoke r0.<android.media.MediaRecorder: void setAudioChannels(int)>($i8);

        $i9 = r1.<android.media.CamcorderProfile: int audioSampleRate>;

        virtualinvoke r0.<android.media.MediaRecorder: void setAudioSamplingRate(int)>($i9);

        $i10 = r1.<android.media.CamcorderProfile: int audioCodec>;

        virtualinvoke r0.<android.media.MediaRecorder: void setAudioEncoder(int)>($i10);

     label2:
        return;
    }

    public native void setVideoEncoder(int) throws java.lang.IllegalStateException;

    public void setVideoEncodingBitRate(int)
    {
        android.media.MediaRecorder r0;
        int i0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r6;

        r0 := @this: android.media.MediaRecorder;

        i0 := @parameter0: int;

        if i0 <= 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("video-param-encoding-bitrate=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.media.MediaRecorder: void setParameter(java.lang.String)>($r6);

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Video encoding bit rate is not positive");

        throw $r2;
    }

    public void setVideoEncodingProfileLevel(int, int)
    {
        android.media.MediaRecorder r0;
        int i0, i1;
        java.lang.IllegalArgumentException $r1, $r2;
        java.lang.StringBuilder $r3, $r7;
        java.lang.String $r6, $r10;

        r0 := @this: android.media.MediaRecorder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 <= 0 goto label2;

        if i1 <= 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("video-param-encoder-profile=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.media.MediaRecorder: void setParameter(java.lang.String)>($r6);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("video-param-encoder-level=");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.media.MediaRecorder: void setParameter(java.lang.String)>($r10);

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Video encoding level is not positive");

        throw $r2;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Video encoding profile is not positive");

        throw $r1;
    }

    public native void setVideoFrameRate(int) throws java.lang.IllegalStateException;

    public native void setVideoSize(int, int) throws java.lang.IllegalStateException;

    public native void setVideoSource(int) throws java.lang.IllegalStateException;

    public native void start() throws java.lang.IllegalStateException;

    public native void stop() throws java.lang.IllegalStateException;

    public void unregisterAudioRecordingCallback(android.media.AudioManager$AudioRecordingCallback)
    {
        android.media.MediaRecorder r0;
        android.media.AudioManager$AudioRecordingCallback r1;
        android.media.AudioRecordingMonitorImpl $r2;

        r0 := @this: android.media.MediaRecorder;

        r1 := @parameter0: android.media.AudioManager$AudioRecordingCallback;

        $r2 = r0.<android.media.MediaRecorder: android.media.AudioRecordingMonitorImpl mRecordingInfoImpl>;

        virtualinvoke $r2.<android.media.AudioRecordingMonitorImpl: void unregisterAudioRecordingCallback(android.media.AudioManager$AudioRecordingCallback)>(r1);

        return;
    }
}
