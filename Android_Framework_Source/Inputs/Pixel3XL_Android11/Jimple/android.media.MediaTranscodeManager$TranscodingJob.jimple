public final class android.media.MediaTranscodeManager$TranscodingJob extends java.lang.Object
{
    public static final int RESULT_CANCELED;
    public static final int RESULT_ERROR;
    public static final int RESULT_NONE;
    public static final int RESULT_SUCCESS;
    public static final int STATUS_FINISHED;
    public static final int STATUS_PENDING;
    public static final int STATUS_RUNNING;
    private final java.util.concurrent.Executor mExecutor;
    private long mID;
    private final android.media.MediaTranscodeManager$OnTranscodingFinishedListener mListener;
    private float mProgress;
    private java.util.concurrent.Executor mProgressChangedExecutor;
    private android.media.MediaTranscodeManager$TranscodingJob$OnProgressChangedListener mProgressChangedListener;
    private int mResult;
    private int mStatus;
    private final java.util.concurrent.locks.ReentrantLock mStatusChangeLock;

    private void <init>(long, java.util.concurrent.Executor, android.media.MediaTranscodeManager$OnTranscodingFinishedListener)
    {
        android.media.MediaTranscodeManager$TranscodingJob r0;
        long l0;
        java.util.concurrent.Executor r1;
        android.media.MediaTranscodeManager$OnTranscodingFinishedListener r2;
        java.util.concurrent.locks.ReentrantLock $r3;

        r0 := @this: android.media.MediaTranscodeManager$TranscodingJob;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.Executor;

        r2 := @parameter2: android.media.MediaTranscodeManager$OnTranscodingFinishedListener;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r3.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r0.<android.media.MediaTranscodeManager$TranscodingJob: java.util.concurrent.locks.ReentrantLock mStatusChangeLock> = $r3;

        r0.<android.media.MediaTranscodeManager$TranscodingJob: float mProgress> = 0.0F;

        r0.<android.media.MediaTranscodeManager$TranscodingJob: int mStatus> = 1;

        r0.<android.media.MediaTranscodeManager$TranscodingJob: int mResult> = 1;

        r0.<android.media.MediaTranscodeManager$TranscodingJob: long mID> = l0;

        r0.<android.media.MediaTranscodeManager$TranscodingJob: java.util.concurrent.Executor mExecutor> = r1;

        r0.<android.media.MediaTranscodeManager$TranscodingJob: android.media.MediaTranscodeManager$OnTranscodingFinishedListener mListener> = r2;

        return;
    }

    void <init>(long, java.util.concurrent.Executor, android.media.MediaTranscodeManager$OnTranscodingFinishedListener, android.media.MediaTranscodeManager$1)
    {
        android.media.MediaTranscodeManager$TranscodingJob r0;
        long l0;
        java.util.concurrent.Executor r1;
        android.media.MediaTranscodeManager$OnTranscodingFinishedListener r2;
        android.media.MediaTranscodeManager$1 r3;

        r0 := @this: android.media.MediaTranscodeManager$TranscodingJob;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.Executor;

        r2 := @parameter2: android.media.MediaTranscodeManager$OnTranscodingFinishedListener;

        r3 := @parameter3: android.media.MediaTranscodeManager$1;

        specialinvoke r0.<android.media.MediaTranscodeManager$TranscodingJob: void <init>(long,java.util.concurrent.Executor,android.media.MediaTranscodeManager$OnTranscodingFinishedListener)>(l0, r1, r2);

        return;
    }

    static void access$600(android.media.MediaTranscodeManager$TranscodingJob, int, int)
    {
        android.media.MediaTranscodeManager$TranscodingJob r0;
        int i0, i1;

        r0 := @parameter0: android.media.MediaTranscodeManager$TranscodingJob;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<android.media.MediaTranscodeManager$TranscodingJob: void processJobEvent(int,int)>(i0, i1);

        return;
    }

    private void processJobEvent(int, int)
    {
        android.media.MediaTranscodeManager$TranscodingJob r0;
        int i0, i1;
        float $f0, $f1;
        java.lang.StringBuilder $r2;
        java.lang.String $r5;

        r0 := @this: android.media.MediaTranscodeManager$TranscodingJob;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 == 1 goto label3;

        if i0 == 2 goto label2;

        if i0 == 3 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported event: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MediaTranscodeManager", $r5);

        goto label4;

     label1:
        specialinvoke r0.<android.media.MediaTranscodeManager$TranscodingJob: void setJobFinished(int)>(i1);

        goto label4;

     label2:
        $f0 = (float) i1;

        $f1 = $f0 / 100.0F;

        specialinvoke r0.<android.media.MediaTranscodeManager$TranscodingJob: void setJobProgress(float)>($f1);

        goto label4;

     label3:
        specialinvoke r0.<android.media.MediaTranscodeManager$TranscodingJob: void setJobStarted()>();

     label4:
        return;
    }

    private void setJobFinished(int)
    {
        android.media.MediaTranscodeManager$TranscodingJob r0;
        int i0, $i1;
        java.util.concurrent.locks.ReentrantLock $r2, $r3, $r7;
        android.media._$$Lambda$MediaTranscodeManager$TranscodingJob$QvWheBYah_rzcUxaPabT8c9A4r4 $r4;
        java.util.concurrent.Executor $r5;
        java.lang.Throwable $r6;
        boolean z0;

        r0 := @this: android.media.MediaTranscodeManager$TranscodingJob;

        i0 := @parameter0: int;

        z0 = 0;

     label1:
        $r2 = r0.<android.media.MediaTranscodeManager$TranscodingJob: java.util.concurrent.locks.ReentrantLock mStatusChangeLock>;

        virtualinvoke $r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label2:
        $i1 = r0.<android.media.MediaTranscodeManager$TranscodingJob: int mStatus>;

        if $i1 == 3 goto label4;

        r0.<android.media.MediaTranscodeManager$TranscodingJob: int mStatus> = 3;

        r0.<android.media.MediaTranscodeManager$TranscodingJob: int mResult> = i0;

     label3:
        z0 = 1;

     label4:
        $r3 = r0.<android.media.MediaTranscodeManager$TranscodingJob: java.util.concurrent.locks.ReentrantLock mStatusChangeLock>;

        virtualinvoke $r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        if z0 == 0 goto label5;

        $r5 = r0.<android.media.MediaTranscodeManager$TranscodingJob: java.util.concurrent.Executor mExecutor>;

        $r4 = new android.media._$$Lambda$MediaTranscodeManager$TranscodingJob$QvWheBYah_rzcUxaPabT8c9A4r4;

        specialinvoke $r4.<android.media._$$Lambda$MediaTranscodeManager$TranscodingJob$QvWheBYah_rzcUxaPabT8c9A4r4: void <init>(android.media.MediaTranscodeManager$TranscodingJob)>(r0);

        interfaceinvoke $r5.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r4);

     label5:
        return;

     label6:
        $r6 := @caughtexception;

        $r7 = r0.<android.media.MediaTranscodeManager$TranscodingJob: java.util.concurrent.locks.ReentrantLock mStatusChangeLock>;

        virtualinvoke $r7.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
    }

    private void setJobProgress(float)
    {
        android.media.MediaTranscodeManager$TranscodingJob r0;
        float f0;
        android.media.MediaTranscodeManager$TranscodingJob$OnProgressChangedListener r1;
        android.media._$$Lambda$MediaTranscodeManager$TranscodingJob$zBKUqcscKK9kg5Ya3kpdPZqyUQw $r2;
        java.util.concurrent.Executor $r3;

        r0 := @this: android.media.MediaTranscodeManager$TranscodingJob;

        f0 := @parameter0: float;

        r0.<android.media.MediaTranscodeManager$TranscodingJob: float mProgress> = f0;

        r1 = r0.<android.media.MediaTranscodeManager$TranscodingJob: android.media.MediaTranscodeManager$TranscodingJob$OnProgressChangedListener mProgressChangedListener>;

        if r1 == null goto label1;

        $r3 = r0.<android.media.MediaTranscodeManager$TranscodingJob: java.util.concurrent.Executor mProgressChangedExecutor>;

        $r2 = new android.media._$$Lambda$MediaTranscodeManager$TranscodingJob$zBKUqcscKK9kg5Ya3kpdPZqyUQw;

        specialinvoke $r2.<android.media._$$Lambda$MediaTranscodeManager$TranscodingJob$zBKUqcscKK9kg5Ya3kpdPZqyUQw: void <init>(android.media.MediaTranscodeManager$TranscodingJob,android.media.MediaTranscodeManager$TranscodingJob$OnProgressChangedListener)>(r0, r1);

        interfaceinvoke $r3.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r2);

     label1:
        return;
    }

    private void setJobStarted()
    {
        android.media.MediaTranscodeManager$TranscodingJob r0;

        r0 := @this: android.media.MediaTranscodeManager$TranscodingJob;

        r0.<android.media.MediaTranscodeManager$TranscodingJob: int mStatus> = 2;

        return;
    }

    public void cancel()
    {
        android.media.MediaTranscodeManager$TranscodingJob r0;
        android.media.MediaTranscodeManager $r1;
        long $l0;

        r0 := @this: android.media.MediaTranscodeManager$TranscodingJob;

        specialinvoke r0.<android.media.MediaTranscodeManager$TranscodingJob: void setJobFinished(int)>(4);

        $r1 = staticinvoke <android.media.MediaTranscodeManager: android.media.MediaTranscodeManager access$400()>();

        $l0 = r0.<android.media.MediaTranscodeManager$TranscodingJob: long mID>;

        staticinvoke <android.media.MediaTranscodeManager: void access$500(android.media.MediaTranscodeManager,long)>($r1, $l0);

        return;
    }

    public float getProgress()
    {
        android.media.MediaTranscodeManager$TranscodingJob r0;
        float $f0;

        r0 := @this: android.media.MediaTranscodeManager$TranscodingJob;

        $f0 = r0.<android.media.MediaTranscodeManager$TranscodingJob: float mProgress>;

        return $f0;
    }

    public int getResult()
    {
        android.media.MediaTranscodeManager$TranscodingJob r0;
        int $i0;

        r0 := @this: android.media.MediaTranscodeManager$TranscodingJob;

        $i0 = r0.<android.media.MediaTranscodeManager$TranscodingJob: int mResult>;

        return $i0;
    }

    public int getStatus()
    {
        android.media.MediaTranscodeManager$TranscodingJob r0;
        int $i0;

        r0 := @this: android.media.MediaTranscodeManager$TranscodingJob;

        $i0 = r0.<android.media.MediaTranscodeManager$TranscodingJob: int mStatus>;

        return $i0;
    }

    public void lambda$setJobFinished$1$MediaTranscodeManager$TranscodingJob()
    {
        android.media.MediaTranscodeManager$TranscodingJob r0;
        android.media.MediaTranscodeManager$OnTranscodingFinishedListener $r1;

        r0 := @this: android.media.MediaTranscodeManager$TranscodingJob;

        $r1 = r0.<android.media.MediaTranscodeManager$TranscodingJob: android.media.MediaTranscodeManager$OnTranscodingFinishedListener mListener>;

        interfaceinvoke $r1.<android.media.MediaTranscodeManager$OnTranscodingFinishedListener: void onTranscodingFinished(android.media.MediaTranscodeManager$TranscodingJob)>(r0);

        return;
    }

    public void lambda$setJobProgress$0$MediaTranscodeManager$TranscodingJob(android.media.MediaTranscodeManager$TranscodingJob$OnProgressChangedListener)
    {
        android.media.MediaTranscodeManager$TranscodingJob r0;
        android.media.MediaTranscodeManager$TranscodingJob$OnProgressChangedListener r1;
        float $f0;

        r0 := @this: android.media.MediaTranscodeManager$TranscodingJob;

        r1 := @parameter0: android.media.MediaTranscodeManager$TranscodingJob$OnProgressChangedListener;

        $f0 = r0.<android.media.MediaTranscodeManager$TranscodingJob: float mProgress>;

        interfaceinvoke r1.<android.media.MediaTranscodeManager$TranscodingJob$OnProgressChangedListener: void onProgressChanged(float)>($f0);

        return;
    }

    public void setOnProgressChangedListener(java.util.concurrent.Executor, android.media.MediaTranscodeManager$TranscodingJob$OnProgressChangedListener)
    {
        android.media.MediaTranscodeManager$TranscodingJob r0;
        java.util.concurrent.Executor r1;
        android.media.MediaTranscodeManager$TranscodingJob$OnProgressChangedListener r2;

        r0 := @this: android.media.MediaTranscodeManager$TranscodingJob;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: android.media.MediaTranscodeManager$TranscodingJob$OnProgressChangedListener;

        r0.<android.media.MediaTranscodeManager$TranscodingJob: java.util.concurrent.Executor mProgressChangedExecutor> = r1;

        r0.<android.media.MediaTranscodeManager$TranscodingJob: android.media.MediaTranscodeManager$TranscodingJob$OnProgressChangedListener mProgressChangedListener> = r2;

        return;
    }

    public static void <clinit>()
    {
        <android.media.MediaTranscodeManager$TranscodingJob: int STATUS_RUNNING> = 2;

        <android.media.MediaTranscodeManager$TranscodingJob: int STATUS_PENDING> = 1;

        <android.media.MediaTranscodeManager$TranscodingJob: int STATUS_FINISHED> = 3;

        <android.media.MediaTranscodeManager$TranscodingJob: int RESULT_SUCCESS> = 2;

        <android.media.MediaTranscodeManager$TranscodingJob: int RESULT_NONE> = 1;

        <android.media.MediaTranscodeManager$TranscodingJob: int RESULT_ERROR> = 3;

        <android.media.MediaTranscodeManager$TranscodingJob: int RESULT_CANCELED> = 4;

        return;
    }
}
