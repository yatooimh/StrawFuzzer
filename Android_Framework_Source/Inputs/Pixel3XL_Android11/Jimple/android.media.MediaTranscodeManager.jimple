public final class android.media.MediaTranscodeManager extends java.lang.Object
{
    private static final int EVENT_JOB_FINISHED;
    private static final int EVENT_JOB_PROGRESSED;
    private static final int EVENT_JOB_STARTED;
    private static final long ID_INVALID;
    private static final java.lang.String TAG;
    private static android.media.MediaTranscodeManager sMediaTranscodeManager;
    private final android.content.Context mContext;
    private final java.util.concurrent.ConcurrentMap mPendingTranscodingJobs;

    static void <clinit>()
    {
        <android.media.MediaTranscodeManager: java.lang.String TAG> = "MediaTranscodeManager";

        <android.media.MediaTranscodeManager: long ID_INVALID> = -1L;

        <android.media.MediaTranscodeManager: int EVENT_JOB_STARTED> = 1;

        <android.media.MediaTranscodeManager: int EVENT_JOB_PROGRESSED> = 2;

        <android.media.MediaTranscodeManager: int EVENT_JOB_FINISHED> = 3;

        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("media_jni");

        staticinvoke <android.media.MediaTranscodeManager: void native_init()>();

        return;
    }

    private void <init>(android.content.Context)
    {
        android.media.MediaTranscodeManager r0;
        android.content.Context r1;
        java.util.concurrent.ConcurrentHashMap $r2;

        r0 := @this: android.media.MediaTranscodeManager;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<android.media.MediaTranscodeManager: java.util.concurrent.ConcurrentMap mPendingTranscodingJobs> = $r2;

        r0.<android.media.MediaTranscodeManager: android.content.Context mContext> = r1;

        return;
    }

    static android.media.MediaTranscodeManager access$400()
    {
        android.media.MediaTranscodeManager $r0;

        $r0 = <android.media.MediaTranscodeManager: android.media.MediaTranscodeManager sMediaTranscodeManager>;

        return $r0;
    }

    static void access$500(android.media.MediaTranscodeManager, long)
    {
        android.media.MediaTranscodeManager r0;
        long l0;

        r0 := @parameter0: android.media.MediaTranscodeManager;

        l0 := @parameter1: long;

        specialinvoke r0.<android.media.MediaTranscodeManager: void native_cancelTranscodingRequest(long)>(l0);

        return;
    }

    public static android.media.MediaTranscodeManager getInstance(android.content.Context)
    {
        android.media.MediaTranscodeManager r0, $r2, r6;
        android.content.Context $r3, r5;
        java.lang.Throwable $r4;

        r5 := @parameter0: android.content.Context;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r5);

        entermonitor class "Landroid/media/MediaTranscodeManager;";

     label1:
        $r2 = <android.media.MediaTranscodeManager: android.media.MediaTranscodeManager sMediaTranscodeManager>;

        if $r2 != null goto label2;

        r0 = new android.media.MediaTranscodeManager;

        $r3 = virtualinvoke r5.<android.content.Context: android.content.Context getApplicationContext()>();

        specialinvoke r0.<android.media.MediaTranscodeManager: void <init>(android.content.Context)>($r3);

        <android.media.MediaTranscodeManager: android.media.MediaTranscodeManager sMediaTranscodeManager> = r0;

     label2:
        r6 = <android.media.MediaTranscodeManager: android.media.MediaTranscodeManager sMediaTranscodeManager>;

        exitmonitor class "Landroid/media/MediaTranscodeManager;";

     label3:
        return r6;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor class "Landroid/media/MediaTranscodeManager;";

     label6:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private native void native_cancelTranscodingRequest(long);

    private native boolean native_enqueueTranscodingRequest(long, android.media.MediaTranscodeManager$TranscodingRequest, android.content.Context);

    private static native void native_init();

    private native long native_requestUniqueJobID();

    private void postEventFromNative(int, long, int)
    {
        android.media.MediaTranscodeManager r0;
        int i0, i2;
        long l1;
        java.lang.Object[] $r1;
        java.lang.Integer $r2, $r4;
        java.lang.Long $r3, $r7;
        java.lang.String $r5, $r12;
        java.util.concurrent.ConcurrentMap $r6;
        java.lang.Object $r8;
        java.lang.StringBuilder $r9;
        android.media.MediaTranscodeManager$TranscodingJob r13;

        r0 := @this: android.media.MediaTranscodeManager;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        i2 := @parameter2: int;

        $r1 = newarray (java.lang.Object)[3];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r1[1] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r1[2] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("postEventFromNative. Event %d, ID %d, arg %d", $r1);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("MediaTranscodeManager", $r5);

        $r6 = r0.<android.media.MediaTranscodeManager: java.util.concurrent.ConcurrentMap mPendingTranscodingJobs>;

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r8 = interfaceinvoke $r6.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>($r7);

        r13 = (android.media.MediaTranscodeManager$TranscodingJob) $r8;

        if r13 != null goto label1;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No matching transcode job found for id ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MediaTranscodeManager", $r12);

        return;

     label1:
        staticinvoke <android.media.MediaTranscodeManager$TranscodingJob: void access$600(android.media.MediaTranscodeManager$TranscodingJob,int,int)>(r13, i0, i2);

        return;
    }

    public android.media.MediaTranscodeManager$TranscodingJob enqueueTranscodingRequest(android.media.MediaTranscodeManager$TranscodingRequest, java.util.concurrent.Executor, android.media.MediaTranscodeManager$OnTranscodingFinishedListener)
    {
        android.media.MediaTranscodeManager r0;
        android.media.MediaTranscodeManager$TranscodingRequest r1;
        android.media.MediaTranscodeManager$OnTranscodingFinishedListener r2;
        long l0;
        byte $b2;
        android.media.MediaTranscodeManager$TranscodingJob $r6;
        java.util.concurrent.ConcurrentMap $r7, $r11;
        java.lang.Long $r8, $r12;
        android.content.Context $r10;
        boolean $z0;
        java.util.concurrent.Executor r14;

        r0 := @this: android.media.MediaTranscodeManager;

        r1 := @parameter0: android.media.MediaTranscodeManager$TranscodingRequest;

        r14 := @parameter1: java.util.concurrent.Executor;

        r2 := @parameter2: android.media.MediaTranscodeManager$OnTranscodingFinishedListener;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MediaTranscodeManager", "enqueueTranscodingRequest called.");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r14);

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        l0 = specialinvoke r0.<android.media.MediaTranscodeManager: long native_requestUniqueJobID()>();

        $b2 = l0 cmp -1L;

        if $b2 != 0 goto label1;

        return null;

     label1:
        $r6 = new android.media.MediaTranscodeManager$TranscodingJob;

        specialinvoke $r6.<android.media.MediaTranscodeManager$TranscodingJob: void <init>(long,java.util.concurrent.Executor,android.media.MediaTranscodeManager$OnTranscodingFinishedListener,android.media.MediaTranscodeManager$1)>(l0, r14, r2, null);

        $r7 = r0.<android.media.MediaTranscodeManager: java.util.concurrent.ConcurrentMap mPendingTranscodingJobs>;

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        interfaceinvoke $r7.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r6);

        $r10 = r0.<android.media.MediaTranscodeManager: android.content.Context mContext>;

        $z0 = specialinvoke r0.<android.media.MediaTranscodeManager: boolean native_enqueueTranscodingRequest(long,android.media.MediaTranscodeManager$TranscodingRequest,android.content.Context)>(l0, r1, $r10);

        if $z0 != 0 goto label2;

        $r11 = r0.<android.media.MediaTranscodeManager: java.util.concurrent.ConcurrentMap mPendingTranscodingJobs>;

        $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        interfaceinvoke $r11.<java.util.concurrent.ConcurrentMap: java.lang.Object remove(java.lang.Object)>($r12);

        return null;

     label2:
        return $r6;
    }
}
