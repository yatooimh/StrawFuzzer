public abstract class android.media.PlayerBase extends java.lang.Object
{
    private static final boolean DEBUG;
    private static final boolean DEBUG_APP_OPS;
    private static final java.lang.String TAG;
    private static final boolean USE_AUDIOFLINGER_MUTING_FOR_OP;
    private static android.media.IAudioService sService;
    private com.android.internal.app.IAppOpsService mAppOps;
    private com.android.internal.app.IAppOpsCallback mAppOpsCallback;
    protected android.media.AudioAttributes mAttributes;
    protected float mAuxEffectSendLevel;
    private boolean mHasAppOpsPlayAudio;
    private final int mImplType;
    protected float mLeftVolume;
    private final java.lang.Object mLock;
    private float mPanMultiplierL;
    private float mPanMultiplierR;
    private int mPlayerIId;
    protected float mRightVolume;
    private int mStartDelayMs;
    private int mState;
    private float mVolMultiplier;

    void <init>(android.media.AudioAttributes, int)
    {
        android.media.PlayerBase r0;
        android.media.AudioAttributes r1;
        int i0;
        java.lang.Object $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: android.media.PlayerBase;

        r1 := @parameter0: android.media.AudioAttributes;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.media.PlayerBase: float mLeftVolume> = 1.0F;

        r0.<android.media.PlayerBase: float mRightVolume> = 1.0F;

        r0.<android.media.PlayerBase: float mAuxEffectSendLevel> = 0.0F;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<android.media.PlayerBase: java.lang.Object mLock> = $r2;

        r0.<android.media.PlayerBase: boolean mHasAppOpsPlayAudio> = 1;

        r0.<android.media.PlayerBase: int mPlayerIId> = -1;

        r0.<android.media.PlayerBase: int mStartDelayMs> = 0;

        r0.<android.media.PlayerBase: float mPanMultiplierL> = 1.0F;

        r0.<android.media.PlayerBase: float mPanMultiplierR> = 1.0F;

        r0.<android.media.PlayerBase: float mVolMultiplier> = 1.0F;

        if r1 == null goto label1;

        r0.<android.media.PlayerBase: android.media.AudioAttributes mAttributes> = r1;

        r0.<android.media.PlayerBase: int mImplType> = i0;

        r0.<android.media.PlayerBase: int mState> = 1;

        return;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null AudioAttributes");

        throw $r3;
    }

    static void access$000(android.media.PlayerBase)
    {
        android.media.PlayerBase r0;

        r0 := @parameter0: android.media.PlayerBase;

        specialinvoke r0.<android.media.PlayerBase: void updateAppOpsPlayAudio()>();

        return;
    }

    public static void deprecateStreamTypeForPlayback(int, java.lang.String, java.lang.String) throws java.lang.IllegalArgumentException
    {
        int i0;
        java.lang.String r0, r1, $r8;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        if i0 == 10 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>(r0, "Use of stream types is deprecated for operations other than volume control");

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("See the documentation of ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for what to use instead with android.media.AudioAttributes to qualify your playback use case");

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>(r0, $r8);

        return;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Use of STREAM_ACCESSIBILITY is reserved for volume control");

        throw $r3;
    }

    private static android.media.IAudioService getService()
    {
        android.os.IBinder $r0;
        android.media.IAudioService r1, r2;

        r1 = <android.media.PlayerBase: android.media.IAudioService sService>;

        if r1 == null goto label1;

        return r1;

     label1:
        $r0 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("audio");

        r2 = staticinvoke <android.media.IAudioService$Stub: android.media.IAudioService asInterface(android.os.IBinder)>($r0);

        <android.media.PlayerBase: android.media.IAudioService sService> = r2;

        return r2;
    }

    private void updateAppOpsPlayAudio()
    {
        android.media.PlayerBase r0;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: android.media.PlayerBase;

        r1 = r0.<android.media.PlayerBase: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        virtualinvoke r0.<android.media.PlayerBase: void updateAppOpsPlayAudio_sync(boolean)>(0);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void updatePlayerVolume()
    {
        android.media.PlayerBase r0;
        java.lang.Object r1;
        float f0, f1, f2, f3, f4, f5, $f6, $f7, $f8, $f9;
        boolean z0;
        java.lang.Throwable $r3;

        r0 := @this: android.media.PlayerBase;

        r1 = r0.<android.media.PlayerBase: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        f0 = r0.<android.media.PlayerBase: float mVolMultiplier>;

        f1 = r0.<android.media.PlayerBase: float mLeftVolume>;

        f2 = r0.<android.media.PlayerBase: float mPanMultiplierL>;

        f3 = r0.<android.media.PlayerBase: float mVolMultiplier>;

        f4 = r0.<android.media.PlayerBase: float mRightVolume>;

        f5 = r0.<android.media.PlayerBase: float mPanMultiplierR>;

        z0 = virtualinvoke r0.<android.media.PlayerBase: boolean isRestricted_sync()>();

        exitmonitor r1;

     label2:
        $f6 = f0 * f1;

        $f9 = $f6 * f2;

        $f7 = f3 * f4;

        $f8 = $f7 * f5;

        virtualinvoke r0.<android.media.PlayerBase: void playerSetVolume(boolean,float,float)>(z0, $f9, $f8);

        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void updateState(int)
    {
        android.media.PlayerBase r0;
        int i0, i1;
        android.media.IAudioService $r1;
        android.os.RemoteException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r9;
        java.lang.Throwable $r10;
        java.lang.Object r11;

        r0 := @this: android.media.PlayerBase;

        i0 := @parameter0: int;

        r11 = r0.<android.media.PlayerBase: java.lang.Object mLock>;

        entermonitor r11;

     label1:
        r0.<android.media.PlayerBase: int mState> = i0;

        i1 = r0.<android.media.PlayerBase: int mPlayerIId>;

        exitmonitor r11;

     label2:
        $r1 = staticinvoke <android.media.PlayerBase: android.media.IAudioService getService()>();

        interfaceinvoke $r1.<android.media.IAudioService: void playerEvent(int,int)>(i1, i0);

     label3:
        goto label5;

     label4:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error talking to audio service, ");

        $r5 = staticinvoke <android.media.AudioPlaybackConfiguration: java.lang.String toLogFriendlyPlayerState(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" state will not be tracked for piid=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("PlayerBase", $r9, $r2);

     label5:
        return;

     label6:
        $r10 := @caughtexception;

     label7:
        exitmonitor r11;

     label8:
        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch android.os.RemoteException from label2 to label3 with label4;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    void basePause()
    {
        android.media.PlayerBase r0;

        r0 := @this: android.media.PlayerBase;

        specialinvoke r0.<android.media.PlayerBase: void updateState(int)>(3);

        return;
    }

    protected void baseRegisterPlayer()
    {
        android.media.PlayerBase r0;
        android.media.IAudioService r1;
        android.media.PlayerBase$PlayerIdCard r2;
        int i0, $i1;
        android.media.PlayerBase$IPlayerWrapper r3;
        android.os.RemoteException $r4;
        android.media.AudioAttributes r5;

        r0 := @this: android.media.PlayerBase;

     label1:
        r1 = staticinvoke <android.media.PlayerBase: android.media.IAudioService getService()>();

        r2 = new android.media.PlayerBase$PlayerIdCard;

        i0 = r0.<android.media.PlayerBase: int mImplType>;

        r5 = r0.<android.media.PlayerBase: android.media.AudioAttributes mAttributes>;

        r3 = new android.media.PlayerBase$IPlayerWrapper;

        specialinvoke r3.<android.media.PlayerBase$IPlayerWrapper: void <init>(android.media.PlayerBase)>(r0);

        specialinvoke r2.<android.media.PlayerBase$PlayerIdCard: void <init>(int,android.media.AudioAttributes,android.media.IPlayer)>(i0, r5, r3);

        $i1 = interfaceinvoke r1.<android.media.IAudioService: int trackPlayer(android.media.PlayerBase$PlayerIdCard)>(r2);

        r0.<android.media.PlayerBase: int mPlayerIId> = $i1;

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("PlayerBase", "Error talking to audio service, player will not be tracked", $r4);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    void baseRelease()
    {
        android.media.PlayerBase r0;
        java.lang.Object r1;
        int $i0, $i1;
        com.android.internal.app.IAppOpsCallback $r2;
        com.android.internal.app.IAppOpsService $r3, $r9;
        android.media.IAudioService $r4;
        java.lang.Exception $r5;
        android.os.RemoteException $r6;
        java.lang.Throwable $r7;
        boolean z0;

        r0 := @this: android.media.PlayerBase;

        z0 = 0;

        r1 = r0.<android.media.PlayerBase: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $i0 = r0.<android.media.PlayerBase: int mState>;

        if $i0 == 0 goto label04;

     label02:
        z0 = 1;

     label03:
        r0.<android.media.PlayerBase: int mState> = 0;

     label04:
        exitmonitor r1;

     label05:
        if z0 == 0 goto label09;

     label06:
        $r4 = staticinvoke <android.media.PlayerBase: android.media.IAudioService getService()>();

        $i1 = r0.<android.media.PlayerBase: int mPlayerIId>;

        interfaceinvoke $r4.<android.media.IAudioService: void releasePlayer(int)>($i1);

     label07:
        goto label09;

     label08:
        $r6 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("PlayerBase", "Error talking to audio service, the player will still be tracked", $r6);

        goto label09;

     label09:
        $r9 = r0.<android.media.PlayerBase: com.android.internal.app.IAppOpsService mAppOps>;

        if $r9 == null goto label10;

        $r3 = r0.<android.media.PlayerBase: com.android.internal.app.IAppOpsService mAppOps>;

        $r2 = r0.<android.media.PlayerBase: com.android.internal.app.IAppOpsCallback mAppOpsCallback>;

        interfaceinvoke $r3.<com.android.internal.app.IAppOpsService: void stopWatchingMode(com.android.internal.app.IAppOpsCallback)>($r2);

     label10:
        goto label12;

     label11:
        $r5 := @caughtexception;

     label12:
        return;

     label13:
        $r7 := @caughtexception;

     label14:
        exitmonitor r1;

     label15:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch android.os.RemoteException from label06 to label07 with label08;
        catch java.lang.Exception from label09 to label10 with label11;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    int baseSetAuxEffectSendLevel(float)
    {
        android.media.PlayerBase r0;
        float f0;
        java.lang.Object r1;
        boolean $z0;
        int $i0;
        java.lang.Throwable $r3;

        r0 := @this: android.media.PlayerBase;

        f0 := @parameter0: float;

        r1 = r0.<android.media.PlayerBase: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<android.media.PlayerBase: float mAuxEffectSendLevel> = f0;

        $z0 = virtualinvoke r0.<android.media.PlayerBase: boolean isRestricted_sync()>();

        if $z0 == 0 goto label3;

        exitmonitor r1;

     label2:
        return 0;

     label3:
        exitmonitor r1;

     label4:
        $i0 = virtualinvoke r0.<android.media.PlayerBase: int playerSetAuxEffectSendLevel(boolean,float)>(0, f0);

        return $i0;

     label5:
        $r3 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    void baseSetPan(float)
    {
        android.media.PlayerBase r0;
        java.lang.Object r1;
        float $f0, $f1, $f2, f3, f4;
        byte $b0;
        java.lang.Throwable $r3;

        r0 := @this: android.media.PlayerBase;

        f3 := @parameter0: float;

        $f0 = staticinvoke <java.lang.Math: float max(float,float)>(-1.0F, f3);

        f4 = staticinvoke <java.lang.Math: float min(float,float)>($f0, 1.0F);

        r1 = r0.<android.media.PlayerBase: java.lang.Object mLock>;

        entermonitor r1;

        $b0 = f4 cmpl 0.0F;

        if $b0 < 0 goto label3;

     label1:
        $f2 = 1.0F - f4;

        r0.<android.media.PlayerBase: float mPanMultiplierL> = $f2;

        r0.<android.media.PlayerBase: float mPanMultiplierR> = 1.0F;

     label2:
        goto label4;

     label3:
        r0.<android.media.PlayerBase: float mPanMultiplierL> = 1.0F;

        $f1 = 1.0F + f4;

        r0.<android.media.PlayerBase: float mPanMultiplierR> = $f1;

     label4:
        exitmonitor r1;

     label5:
        specialinvoke r0.<android.media.PlayerBase: void updatePlayerVolume()>();

        return;

     label6:
        $r3 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    void baseSetStartDelayMs(int)
    {
        android.media.PlayerBase r0;
        int i0, $i1;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: android.media.PlayerBase;

        i0 := @parameter0: int;

        r1 = r0.<android.media.PlayerBase: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $i1 = staticinvoke <java.lang.Math: int max(int,int)>(i0, 0);

        r0.<android.media.PlayerBase: int mStartDelayMs> = $i1;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void baseSetVolume(float, float)
    {
        android.media.PlayerBase r0;
        float f0, f1;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: android.media.PlayerBase;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        r1 = r0.<android.media.PlayerBase: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<android.media.PlayerBase: float mLeftVolume> = f0;

        r0.<android.media.PlayerBase: float mRightVolume> = f1;

        exitmonitor r1;

     label2:
        specialinvoke r0.<android.media.PlayerBase: void updatePlayerVolume()>();

        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void baseStart()
    {
        android.media.PlayerBase r0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.Throwable $r3;

        r0 := @this: android.media.PlayerBase;

        specialinvoke r0.<android.media.PlayerBase: void updateState(int)>(2);

        r1 = r0.<android.media.PlayerBase: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = virtualinvoke r0.<android.media.PlayerBase: boolean isRestricted_sync()>();

        if $z0 == 0 goto label2;

        virtualinvoke r0.<android.media.PlayerBase: void playerSetVolume(boolean,float,float)>(1, 0.0F, 0.0F);

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    void baseStop()
    {
        android.media.PlayerBase r0;

        r0 := @this: android.media.PlayerBase;

        specialinvoke r0.<android.media.PlayerBase: void updateState(int)>(4);

        return;
    }

    void baseUpdateAudioAttributes(android.media.AudioAttributes)
    {
        android.media.PlayerBase r0;
        java.lang.IllegalArgumentException $r1;
        android.media.IAudioService $r2;
        int $i0;
        android.media.AudioAttributes $r3, r6;
        android.os.RemoteException $r4;
        java.lang.Throwable $r5;
        java.lang.Object r8;
        boolean z0;

        r0 := @this: android.media.PlayerBase;

        r6 := @parameter0: android.media.AudioAttributes;

        if r6 == null goto label13;

     label01:
        $r2 = staticinvoke <android.media.PlayerBase: android.media.IAudioService getService()>();

        $i0 = r0.<android.media.PlayerBase: int mPlayerIId>;

        interfaceinvoke $r2.<android.media.IAudioService: void playerAttributes(int,android.media.AudioAttributes)>($i0, r6);

     label02:
        goto label04;

     label03:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("PlayerBase", "Error talking to audio service, STARTED state will not be tracked", $r4);

     label04:
        r8 = r0.<android.media.PlayerBase: java.lang.Object mLock>;

        entermonitor r8;

     label05:
        $r3 = r0.<android.media.PlayerBase: android.media.AudioAttributes mAttributes>;

        if $r3 == r6 goto label07;

     label06:
        z0 = 1;

        goto label08;

     label07:
        z0 = 0;

     label08:
        r0.<android.media.PlayerBase: android.media.AudioAttributes mAttributes> = r6;

        virtualinvoke r0.<android.media.PlayerBase: void updateAppOpsPlayAudio_sync(boolean)>(z0);

        exitmonitor r8;

     label09:
        return;

     label10:
        $r5 := @caughtexception;

     label11:
        exitmonitor r8;

     label12:
        throw $r5;

     label13:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null AudioAttributes");

        throw $r1;

        catch android.os.RemoteException from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    protected int getStartDelayMs()
    {
        android.media.PlayerBase r0;
        java.lang.Object r1;
        int i0;
        java.lang.Throwable $r3;

        r0 := @this: android.media.PlayerBase;

        r1 = r0.<android.media.PlayerBase: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        i0 = r0.<android.media.PlayerBase: int mStartDelayMs>;

        exitmonitor r1;

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    boolean isRestricted_sync()
    {
        android.media.PlayerBase r0;

        r0 := @this: android.media.PlayerBase;

        return 0;
    }

    abstract int playerApplyVolumeShaper(android.media.VolumeShaper$Configuration, android.media.VolumeShaper$Operation);

    abstract android.media.VolumeShaper$State playerGetVolumeShaperState(int);

    abstract void playerPause();

    abstract int playerSetAuxEffectSendLevel(boolean, float);

    abstract void playerSetVolume(boolean, float, float);

    abstract void playerStart();

    abstract void playerStop();

    public void setStartDelayMs(int)
    {
        android.media.PlayerBase r0;
        int i0;

        r0 := @this: android.media.PlayerBase;

        i0 := @parameter0: int;

        virtualinvoke r0.<android.media.PlayerBase: void baseSetStartDelayMs(int)>(i0);

        return;
    }

    void setVolumeMultiplier(float)
    {
        android.media.PlayerBase r0;
        float f0;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: android.media.PlayerBase;

        f0 := @parameter0: float;

        r1 = r0.<android.media.PlayerBase: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<android.media.PlayerBase: float mVolMultiplier> = f0;

        exitmonitor r1;

     label2:
        specialinvoke r0.<android.media.PlayerBase: void updatePlayerVolume()>();

        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void updateAppOpsPlayAudio_sync(boolean)
    {
        android.media.PlayerBase r0;
        boolean z0;

        r0 := @this: android.media.PlayerBase;

        z0 := @parameter0: boolean;

        return;
    }

    public static void <clinit>()
    {
        <android.media.PlayerBase: boolean USE_AUDIOFLINGER_MUTING_FOR_OP> = 1;

        <android.media.PlayerBase: java.lang.String TAG> = "PlayerBase";

        <android.media.PlayerBase: boolean DEBUG_APP_OPS> = 0;

        <android.media.PlayerBase: boolean DEBUG> = 0;

        return;
    }
}
