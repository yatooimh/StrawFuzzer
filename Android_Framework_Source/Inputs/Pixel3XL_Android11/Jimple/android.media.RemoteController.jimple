public final class android.media.RemoteController extends java.lang.Object
{
    private static final boolean DEBUG;
    private static final int MAX_BITMAP_DIMENSION;
    private static final int MSG_CLIENT_CHANGE;
    private static final int MSG_NEW_MEDIA_METADATA;
    private static final int MSG_NEW_PLAYBACK_STATE;
    public static final int POSITION_SYNCHRONIZATION_CHECK;
    public static final int POSITION_SYNCHRONIZATION_NONE;
    private static final int SENDMSG_NOOP;
    private static final int SENDMSG_QUEUE;
    private static final int SENDMSG_REPLACE;
    private static final java.lang.String TAG;
    private static final java.lang.Object mInfoLock;
    private int mArtworkHeight;
    private int mArtworkWidth;
    private final android.content.Context mContext;
    private android.media.session.MediaController mCurrentSession;
    private boolean mEnabled;
    private final android.media.RemoteController$EventHandler mEventHandler;
    private boolean mIsRegistered;
    private android.media.RemoteController$PlaybackInfo mLastPlaybackInfo;
    private final int mMaxBitmapDimension;
    private android.media.RemoteController$MetadataEditor mMetadataEditor;
    private android.media.RemoteController$OnClientUpdateListener mOnClientUpdateListener;
    private android.media.session.MediaController$Callback mSessionCb;
    private android.media.session.MediaSessionManager$OnActiveSessionsChangedListener mSessionListener;
    private android.media.session.MediaSessionManager mSessionManager;

    static void <clinit>()
    {
        java.lang.Object $r0;

        <android.media.RemoteController: java.lang.String TAG> = "RemoteController";

        <android.media.RemoteController: int SENDMSG_REPLACE> = 0;

        <android.media.RemoteController: int SENDMSG_QUEUE> = 2;

        <android.media.RemoteController: int SENDMSG_NOOP> = 1;

        <android.media.RemoteController: int POSITION_SYNCHRONIZATION_NONE> = 0;

        <android.media.RemoteController: int POSITION_SYNCHRONIZATION_CHECK> = 1;

        <android.media.RemoteController: int MSG_NEW_PLAYBACK_STATE> = 1;

        <android.media.RemoteController: int MSG_NEW_MEDIA_METADATA> = 2;

        <android.media.RemoteController: int MSG_CLIENT_CHANGE> = 0;

        <android.media.RemoteController: int MAX_BITMAP_DIMENSION> = 512;

        <android.media.RemoteController: boolean DEBUG> = 0;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <android.media.RemoteController: java.lang.Object mInfoLock> = $r0;

        return;
    }

    public void <init>(android.content.Context, android.media.RemoteController$OnClientUpdateListener) throws java.lang.IllegalArgumentException
    {
        android.media.RemoteController r0;
        android.content.Context r1;
        android.media.RemoteController$OnClientUpdateListener r2;

        r0 := @this: android.media.RemoteController;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.media.RemoteController$OnClientUpdateListener;

        specialinvoke r0.<android.media.RemoteController: void <init>(android.content.Context,android.media.RemoteController$OnClientUpdateListener,android.os.Looper)>(r1, r2, null);

        return;
    }

    public void <init>(android.content.Context, android.media.RemoteController$OnClientUpdateListener, android.os.Looper) throws java.lang.IllegalArgumentException
    {
        android.media.RemoteController r0;
        android.media.RemoteController$OnClientUpdateListener r1;
        android.media.RemoteController$MediaControllerCallback $r2;
        java.lang.IllegalArgumentException $r3, $r4, $r5;
        android.media.RemoteController$EventHandler $r6, $r11;
        java.lang.Object $r7;
        android.media.session.MediaSessionManager $r8;
        android.media.RemoteController$TopTransportSessionListener $r9;
        boolean $z0;
        android.content.res.Resources $r10;
        int $i0, $i1, $i2;
        android.content.Context r12;
        android.os.Looper r13, r14;
        android.util.DisplayMetrics r15;

        r0 := @this: android.media.RemoteController;

        r12 := @parameter0: android.content.Context;

        r1 := @parameter1: android.media.RemoteController$OnClientUpdateListener;

        r13 := @parameter2: android.os.Looper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new android.media.RemoteController$MediaControllerCallback;

        specialinvoke $r2.<android.media.RemoteController$MediaControllerCallback: void <init>(android.media.RemoteController,android.media.RemoteController$1)>(r0, null);

        r0.<android.media.RemoteController: android.media.session.MediaController$Callback mSessionCb> = $r2;

        r0.<android.media.RemoteController: boolean mIsRegistered> = 0;

        r0.<android.media.RemoteController: int mArtworkWidth> = -1;

        r0.<android.media.RemoteController: int mArtworkHeight> = -1;

        r0.<android.media.RemoteController: boolean mEnabled> = 1;

        if r12 == null goto label7;

        if r1 == null goto label6;

        if r13 == null goto label1;

        $r11 = new android.media.RemoteController$EventHandler;

        specialinvoke $r11.<android.media.RemoteController$EventHandler: void <init>(android.media.RemoteController,android.media.RemoteController,android.os.Looper)>(r0, r0, r13);

        r0.<android.media.RemoteController: android.media.RemoteController$EventHandler mEventHandler> = $r11;

        goto label2;

     label1:
        r14 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if r14 == null goto label5;

        $r6 = new android.media.RemoteController$EventHandler;

        specialinvoke $r6.<android.media.RemoteController$EventHandler: void <init>(android.media.RemoteController,android.media.RemoteController,android.os.Looper)>(r0, r0, r14);

        r0.<android.media.RemoteController: android.media.RemoteController$EventHandler mEventHandler> = $r6;

     label2:
        r0.<android.media.RemoteController: android.media.RemoteController$OnClientUpdateListener mOnClientUpdateListener> = r1;

        r0.<android.media.RemoteController: android.content.Context mContext> = r12;

        $r7 = virtualinvoke r12.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("media_session");

        $r8 = (android.media.session.MediaSessionManager) $r7;

        r0.<android.media.RemoteController: android.media.session.MediaSessionManager mSessionManager> = $r8;

        $r9 = new android.media.RemoteController$TopTransportSessionListener;

        specialinvoke $r9.<android.media.RemoteController$TopTransportSessionListener: void <init>(android.media.RemoteController,android.media.RemoteController$1)>(r0, null);

        r0.<android.media.RemoteController: android.media.session.MediaSessionManager$OnActiveSessionsChangedListener mSessionListener> = $r9;

        $z0 = staticinvoke <android.app.ActivityManager: boolean isLowRamDeviceStatic()>();

        if $z0 == 0 goto label3;

        r0.<android.media.RemoteController: int mMaxBitmapDimension> = 512;

        goto label4;

     label3:
        $r10 = virtualinvoke r12.<android.content.Context: android.content.res.Resources getResources()>();

        r15 = virtualinvoke $r10.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $i1 = r15.<android.util.DisplayMetrics: int widthPixels>;

        $i0 = r15.<android.util.DisplayMetrics: int heightPixels>;

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i1, $i0);

        r0.<android.media.RemoteController: int mMaxBitmapDimension> = $i2;

     label4:
        return;

     label5:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Calling thread not associated with a looper");

        throw $r5;

     label6:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid null OnClientUpdateListener");

        throw $r4;

     label7:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid null Context");

        throw $r3;
    }

    static java.lang.Object access$200()
    {
        java.lang.Object $r0;

        $r0 = <android.media.RemoteController: java.lang.Object mInfoLock>;

        return $r0;
    }

    static android.media.session.MediaController access$300(android.media.RemoteController)
    {
        android.media.RemoteController r0;
        android.media.session.MediaController $r1;

        r0 := @parameter0: android.media.RemoteController;

        $r1 = r0.<android.media.RemoteController: android.media.session.MediaController mCurrentSession>;

        return $r1;
    }

    static void access$400(android.media.RemoteController, android.media.session.PlaybackState)
    {
        android.media.RemoteController r0;
        android.media.session.PlaybackState r1;

        r0 := @parameter0: android.media.RemoteController;

        r1 := @parameter1: android.media.session.PlaybackState;

        specialinvoke r0.<android.media.RemoteController: void onNewPlaybackState(android.media.session.PlaybackState)>(r1);

        return;
    }

    static void access$500(android.media.RemoteController, android.media.MediaMetadata)
    {
        android.media.RemoteController r0;
        android.media.MediaMetadata r1;

        r0 := @parameter0: android.media.RemoteController;

        r1 := @parameter1: android.media.MediaMetadata;

        specialinvoke r0.<android.media.RemoteController: void onNewMediaMetadata(android.media.MediaMetadata)>(r1);

        return;
    }

    static void access$600(android.media.RemoteController, android.media.session.MediaController)
    {
        android.media.RemoteController r0;
        android.media.session.MediaController r1;

        r0 := @parameter0: android.media.RemoteController;

        r1 := @parameter1: android.media.session.MediaController;

        specialinvoke r0.<android.media.RemoteController: void updateController(android.media.session.MediaController)>(r1);

        return;
    }

    static void access$700(android.media.RemoteController, boolean)
    {
        android.media.RemoteController r0;
        boolean z0;

        r0 := @parameter0: android.media.RemoteController;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.media.RemoteController: void onClientChange(boolean)>(z0);

        return;
    }

    private void onClientChange(boolean)
    {
        android.media.RemoteController r0;
        boolean z0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        android.media.RemoteController$OnClientUpdateListener r3;

        r0 := @this: android.media.RemoteController;

        z0 := @parameter0: boolean;

        r1 = <android.media.RemoteController: java.lang.Object mInfoLock>;

        entermonitor r1;

     label1:
        r3 = r0.<android.media.RemoteController: android.media.RemoteController$OnClientUpdateListener mOnClientUpdateListener>;

        r0.<android.media.RemoteController: android.media.RemoteController$MetadataEditor mMetadataEditor> = null;

        exitmonitor r1;

     label2:
        if r3 == null goto label3;

        interfaceinvoke r3.<android.media.RemoteController$OnClientUpdateListener: void onClientChange(boolean)>(z0);

     label3:
        return;

     label4:
        $r2 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void onNewMediaMetadata(android.media.MediaMetadata)
    {
        android.media.RemoteController r0;
        java.lang.Object r1;
        android.media.RemoteController$OnClientUpdateListener r2;
        android.media.RemoteController$MetadataEditor r3;
        android.media.session.MediaController $r4, $r5;
        int $i0, $i1, $i2;
        java.lang.Throwable $r6;
        android.media.MediaMetadata r7;
        boolean z0;
        long l3;
        android.os.Bundle r8;

        r0 := @this: android.media.RemoteController;

        r7 := @parameter0: android.media.MediaMetadata;

        if r7 != null goto label01;

        return;

     label01:
        r1 = <android.media.RemoteController: java.lang.Object mInfoLock>;

        entermonitor r1;

     label02:
        r2 = r0.<android.media.RemoteController: android.media.RemoteController$OnClientUpdateListener mOnClientUpdateListener>;

        $r4 = r0.<android.media.RemoteController: android.media.session.MediaController mCurrentSession>;

        if $r4 == null goto label04;

        $r5 = r0.<android.media.RemoteController: android.media.session.MediaController mCurrentSession>;

        $i2 = virtualinvoke $r5.<android.media.session.MediaController: int getRatingType()>();

        if $i2 == 0 goto label04;

     label03:
        z0 = 1;

        goto label05;

     label04:
        z0 = 0;

     label05:
        if z0 == 0 goto label06;

        l3 = 268435457L;

        goto label07;

     label06:
        l3 = 0L;

     label07:
        $i1 = r0.<android.media.RemoteController: int mArtworkWidth>;

        $i0 = r0.<android.media.RemoteController: int mArtworkHeight>;

        r8 = staticinvoke <android.media.session.MediaSessionLegacyHelper: android.os.Bundle getOldMetadata(android.media.MediaMetadata,int,int)>(r7, $i1, $i0);

        r3 = new android.media.RemoteController$MetadataEditor;

        specialinvoke r3.<android.media.RemoteController$MetadataEditor: void <init>(android.media.RemoteController,android.os.Bundle,long)>(r0, r8, l3);

        r0.<android.media.RemoteController: android.media.RemoteController$MetadataEditor mMetadataEditor> = r3;

        exitmonitor r1;

     label08:
        if r2 == null goto label09;

        interfaceinvoke r2.<android.media.RemoteController$OnClientUpdateListener: void onClientMetadataUpdate(android.media.RemoteController$MetadataEditor)>(r3);

     label09:
        return;

     label10:
        $r6 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r6;

        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private void onNewPlaybackState(android.media.session.PlaybackState)
    {
        android.media.RemoteController r0;
        java.lang.Object r1;
        android.media.RemoteController$OnClientUpdateListener r2;
        int $i0, $i2, i7;
        long $l1, $l3, $l5, $l6;
        byte $b4;
        float $f0;
        java.lang.Throwable $r3;
        android.media.session.PlaybackState r4;

        r0 := @this: android.media.RemoteController;

        r4 := @parameter0: android.media.session.PlaybackState;

        r1 = <android.media.RemoteController: java.lang.Object mInfoLock>;

        entermonitor r1;

     label01:
        r2 = r0.<android.media.RemoteController: android.media.RemoteController$OnClientUpdateListener mOnClientUpdateListener>;

        exitmonitor r1;

     label02:
        if r2 == null goto label08;

        if r4 != null goto label03;

        i7 = 0;

        goto label04;

     label03:
        $i0 = virtualinvoke r4.<android.media.session.PlaybackState: int getState()>();

        i7 = staticinvoke <android.media.RemoteControlClient: int getRccStateFromState(int)>($i0);

     label04:
        if r4 == null goto label06;

        $l3 = virtualinvoke r4.<android.media.session.PlaybackState: long getPosition()>();

        $b4 = $l3 cmp -1L;

        if $b4 != 0 goto label05;

        goto label06;

     label05:
        $l5 = virtualinvoke r4.<android.media.session.PlaybackState: long getLastPositionUpdateTime()>();

        $l6 = virtualinvoke r4.<android.media.session.PlaybackState: long getPosition()>();

        $f0 = virtualinvoke r4.<android.media.session.PlaybackState: float getPlaybackSpeed()>();

        interfaceinvoke r2.<android.media.RemoteController$OnClientUpdateListener: void onClientPlaybackStateUpdate(int,long,long,float)>(i7, $l5, $l6, $f0);

        goto label07;

     label06:
        interfaceinvoke r2.<android.media.RemoteController$OnClientUpdateListener: void onClientPlaybackStateUpdate(int)>(i7);

     label07:
        if r4 == null goto label08;

        $l1 = virtualinvoke r4.<android.media.session.PlaybackState: long getActions()>();

        $i2 = staticinvoke <android.media.RemoteControlClient: int getRccControlFlagsFromActions(long)>($l1);

        interfaceinvoke r2.<android.media.RemoteController$OnClientUpdateListener: void onClientTransportControlUpdate(int)>($i2);

     label08:
        return;

     label09:
        $r3 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    private static void sendMsg(android.os.Handler, int, int, int, int, java.lang.Object, int)
    {
        int i0, i1, i2, i3, i4;
        java.lang.Object r0;
        boolean $z1;
        java.lang.StringBuilder $r1;
        java.lang.String $r4;
        android.os.Handler r5;
        android.os.Message $r7;
        long $l6;

        r5 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r0 := @parameter5: java.lang.Object;

        i4 := @parameter6: int;

        if r5 != null goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null event handler, will not deliver message ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("RemoteController", $r4);

        return;

     label1:
        if i1 != 0 goto label2;

        virtualinvoke r5.<android.os.Handler: void removeMessages(int)>(i0);

        goto label3;

     label2:
        if i1 != 1 goto label3;

        $z1 = virtualinvoke r5.<android.os.Handler: boolean hasMessages(int)>(i0);

        if $z1 == 0 goto label3;

        return;

     label3:
        $r7 = virtualinvoke r5.<android.os.Handler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(i0, i2, i3, r0);

        $l6 = (long) i4;

        virtualinvoke r5.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r7, $l6);

        return;
    }

    private void updateController(android.media.session.MediaController)
    {
        android.media.RemoteController r0;
        java.lang.Object r1;
        android.media.session.PlaybackState r2;
        android.media.session.MediaController $r3, $r4, $r11, $r13, $r15, $r17, r20;
        android.media.RemoteController$EventHandler $r5, $r6, $r8, $r9, $r18;
        android.media.session.MediaController$Callback $r7, $r10, $r16;
        android.media.session.MediaSession$Token $r12, $r14;
        boolean $z0;
        java.lang.Throwable $r19;
        android.media.MediaMetadata r21;

        r0 := @this: android.media.RemoteController;

        r20 := @parameter0: android.media.session.MediaController;

        r1 = <android.media.RemoteController: java.lang.Object mInfoLock>;

        entermonitor r1;

        if r20 != null goto label03;

     label01:
        $r15 = r0.<android.media.RemoteController: android.media.session.MediaController mCurrentSession>;

        if $r15 == null goto label06;

        $r17 = r0.<android.media.RemoteController: android.media.session.MediaController mCurrentSession>;

        $r16 = r0.<android.media.RemoteController: android.media.session.MediaController$Callback mSessionCb>;

        virtualinvoke $r17.<android.media.session.MediaController: void unregisterCallback(android.media.session.MediaController$Callback)>($r16);

        r0.<android.media.RemoteController: android.media.session.MediaController mCurrentSession> = null;

        $r18 = r0.<android.media.RemoteController: android.media.RemoteController$EventHandler mEventHandler>;

        staticinvoke <android.media.RemoteController: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r18, 0, 0, 0, 1, null, 0);

     label02:
        goto label06;

     label03:
        $r3 = r0.<android.media.RemoteController: android.media.session.MediaController mCurrentSession>;

        if $r3 == null goto label04;

        $r12 = virtualinvoke r20.<android.media.session.MediaController: android.media.session.MediaSession$Token getSessionToken()>();

        $r13 = r0.<android.media.RemoteController: android.media.session.MediaController mCurrentSession>;

        $r14 = virtualinvoke $r13.<android.media.session.MediaController: android.media.session.MediaSession$Token getSessionToken()>();

        $z0 = virtualinvoke $r12.<android.media.session.MediaSession$Token: boolean equals(java.lang.Object)>($r14);

        if $z0 != 0 goto label06;

     label04:
        $r4 = r0.<android.media.RemoteController: android.media.session.MediaController mCurrentSession>;

        if $r4 == null goto label05;

        $r11 = r0.<android.media.RemoteController: android.media.session.MediaController mCurrentSession>;

        $r10 = r0.<android.media.RemoteController: android.media.session.MediaController$Callback mSessionCb>;

        virtualinvoke $r11.<android.media.session.MediaController: void unregisterCallback(android.media.session.MediaController$Callback)>($r10);

     label05:
        $r5 = r0.<android.media.RemoteController: android.media.RemoteController$EventHandler mEventHandler>;

        staticinvoke <android.media.RemoteController: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r5, 0, 0, 0, 0, null, 0);

        r0.<android.media.RemoteController: android.media.session.MediaController mCurrentSession> = r20;

        $r7 = r0.<android.media.RemoteController: android.media.session.MediaController$Callback mSessionCb>;

        $r6 = r0.<android.media.RemoteController: android.media.RemoteController$EventHandler mEventHandler>;

        virtualinvoke r20.<android.media.session.MediaController: void registerCallback(android.media.session.MediaController$Callback,android.os.Handler)>($r7, $r6);

        r2 = virtualinvoke r20.<android.media.session.MediaController: android.media.session.PlaybackState getPlaybackState()>();

        $r8 = r0.<android.media.RemoteController: android.media.RemoteController$EventHandler mEventHandler>;

        staticinvoke <android.media.RemoteController: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r8, 1, 0, 0, 0, r2, 0);

        r21 = virtualinvoke r20.<android.media.session.MediaController: android.media.MediaMetadata getMetadata()>();

        $r9 = r0.<android.media.RemoteController: android.media.RemoteController$EventHandler mEventHandler>;

        staticinvoke <android.media.RemoteController: void sendMsg(android.os.Handler,int,int,int,int,java.lang.Object,int)>($r9, 2, 0, 0, 0, r21, 0);

     label06:
        exitmonitor r1;

     label07:
        return;

     label08:
        $r19 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r19;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public boolean clearArtworkConfiguration()
    {
        android.media.RemoteController r0;
        boolean $z0;

        r0 := @this: android.media.RemoteController;

        $z0 = virtualinvoke r0.<android.media.RemoteController: boolean setArtworkConfiguration(boolean,int,int)>(0, -1, -1);

        return $z0;
    }

    public android.media.RemoteController$MetadataEditor editMetadata()
    {
        android.media.RemoteController r0;
        android.media.RemoteController$MetadataEditor $r2;
        android.os.Bundle $r3;

        r0 := @this: android.media.RemoteController;

        $r2 = new android.media.RemoteController$MetadataEditor;

        specialinvoke $r2.<android.media.RemoteController$MetadataEditor: void <init>(android.media.RemoteController)>(r0);

        $r3 = new android.os.Bundle;

        specialinvoke $r3.<android.os.Bundle: void <init>()>();

        $r2.<android.media.RemoteController$MetadataEditor: android.os.Bundle mEditorMetadata> = $r3;

        $r2.<android.media.RemoteController$MetadataEditor: android.graphics.Bitmap mEditorArtwork> = null;

        $r2.<android.media.RemoteController$MetadataEditor: boolean mMetadataChanged> = 1;

        $r2.<android.media.RemoteController$MetadataEditor: boolean mArtworkChanged> = 1;

        $r2.<android.media.RemoteController$MetadataEditor: long mEditableKeys> = 0L;

        return $r2;
    }

    public long getEstimatedMediaPosition()
    {
        android.media.RemoteController r0;
        java.lang.Object r1;
        long l0;
        android.media.session.MediaController $r2, $r3;
        java.lang.Throwable $r4;
        android.media.session.PlaybackState r5;

        r0 := @this: android.media.RemoteController;

        r1 = <android.media.RemoteController: java.lang.Object mInfoLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.media.RemoteController: android.media.session.MediaController mCurrentSession>;

        if $r2 == null goto label5;

        $r3 = r0.<android.media.RemoteController: android.media.session.MediaController mCurrentSession>;

        r5 = virtualinvoke $r3.<android.media.session.MediaController: android.media.session.PlaybackState getPlaybackState()>();

     label2:
        if r5 == null goto label5;

     label3:
        l0 = virtualinvoke r5.<android.media.session.PlaybackState: long getPosition()>();

        exitmonitor r1;

     label4:
        return l0;

     label5:
        exitmonitor r1;

     label6:
        return -1L;

     label7:
        $r4 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    android.media.RemoteController$OnClientUpdateListener getUpdateListener()
    {
        android.media.RemoteController r0;
        android.media.RemoteController$OnClientUpdateListener $r1;

        r0 := @this: android.media.RemoteController;

        $r1 = r0.<android.media.RemoteController: android.media.RemoteController$OnClientUpdateListener mOnClientUpdateListener>;

        return $r1;
    }

    public boolean seekTo(long) throws java.lang.IllegalArgumentException
    {
        android.media.RemoteController r0;
        long l0;
        java.lang.Object r1;
        boolean $z0;
        byte $b1;
        java.lang.IllegalArgumentException $r3;
        android.media.session.MediaController $r4, $r5;
        android.media.session.MediaController$TransportControls $r6;
        java.lang.Throwable $r7;

        r0 := @this: android.media.RemoteController;

        l0 := @parameter0: long;

        $z0 = r0.<android.media.RemoteController: boolean mEnabled>;

        if $z0 != 0 goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("RemoteController", "Cannot use seekTo() from a disabled RemoteController");

        return 0;

     label1:
        $b1 = l0 cmp 0L;

        if $b1 < 0 goto label8;

        r1 = <android.media.RemoteController: java.lang.Object mInfoLock>;

        entermonitor r1;

     label2:
        $r4 = r0.<android.media.RemoteController: android.media.session.MediaController mCurrentSession>;

        if $r4 == null goto label3;

        $r5 = r0.<android.media.RemoteController: android.media.session.MediaController mCurrentSession>;

        $r6 = virtualinvoke $r5.<android.media.session.MediaController: android.media.session.MediaController$TransportControls getTransportControls()>();

        virtualinvoke $r6.<android.media.session.MediaController$TransportControls: void seekTo(long)>(l0);

     label3:
        exitmonitor r1;

     label4:
        return 1;

     label5:
        $r7 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r7;

     label8:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("illegal negative time value");

        throw $r3;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public boolean sendMediaKeyEvent(android.view.KeyEvent) throws java.lang.IllegalArgumentException
    {
        android.media.RemoteController r0;
        java.lang.Object r1;
        boolean z0, $z1;
        int $i0;
        java.lang.IllegalArgumentException $r2;
        android.media.session.MediaController $r3, $r4;
        java.lang.Throwable $r5;
        android.view.KeyEvent r6;

        r0 := @this: android.media.RemoteController;

        r6 := @parameter0: android.view.KeyEvent;

        $i0 = virtualinvoke r6.<android.view.KeyEvent: int getKeyCode()>();

        $z1 = staticinvoke <android.view.KeyEvent: boolean isMediaSessionKey(int)>($i0);

        if $z1 == 0 goto label8;

        r1 = <android.media.RemoteController: java.lang.Object mInfoLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<android.media.RemoteController: android.media.session.MediaController mCurrentSession>;

        if $r3 == null goto label3;

        $r4 = r0.<android.media.RemoteController: android.media.session.MediaController mCurrentSession>;

        z0 = virtualinvoke $r4.<android.media.session.MediaController: boolean dispatchMediaButtonEvent(android.view.KeyEvent)>(r6);

        exitmonitor r1;

     label2:
        return z0;

     label3:
        exitmonitor r1;

     label4:
        return 0;

     label5:
        $r5 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r5;

     label8:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("not a media key event");

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public boolean setArtworkConfiguration(int, int) throws java.lang.IllegalArgumentException
    {
        android.media.RemoteController r0;
        int i0, i1;
        boolean $z0;

        r0 := @this: android.media.RemoteController;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = virtualinvoke r0.<android.media.RemoteController: boolean setArtworkConfiguration(boolean,int,int)>(1, i0, i1);

        return $z0;
    }

    public boolean setArtworkConfiguration(boolean, int, int) throws java.lang.IllegalArgumentException
    {
        android.media.RemoteController r0;
        boolean z0;
        int i0, $i1, $i2, i3, i4, i5;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        java.lang.IllegalArgumentException r3;

        r0 := @this: android.media.RemoteController;

        z0 := @parameter0: boolean;

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        r1 = <android.media.RemoteController: java.lang.Object mInfoLock>;

        entermonitor r1;

        if z0 == 0 goto label07;

        if i3 <= 0 goto label06;

        if i0 <= 0 goto label06;

        i4 = i3;

     label01:
        $i1 = r0.<android.media.RemoteController: int mMaxBitmapDimension>;

        if i3 <= $i1 goto label02;

        i4 = r0.<android.media.RemoteController: int mMaxBitmapDimension>;

     label02:
        i5 = i0;

     label03:
        $i2 = r0.<android.media.RemoteController: int mMaxBitmapDimension>;

        if i0 <= $i2 goto label04;

        i5 = r0.<android.media.RemoteController: int mMaxBitmapDimension>;

     label04:
        r0.<android.media.RemoteController: int mArtworkWidth> = i4;

        r0.<android.media.RemoteController: int mArtworkHeight> = i5;

     label05:
        goto label08;

     label06:
        r3 = new java.lang.IllegalArgumentException;

        specialinvoke r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid dimensions");

        throw r3;

     label07:
        r0.<android.media.RemoteController: int mArtworkWidth> = -1;

        r0.<android.media.RemoteController: int mArtworkHeight> = -1;

     label08:
        exitmonitor r1;

     label09:
        return 1;

     label10:
        $r2 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public boolean setSynchronizationMode(int) throws java.lang.IllegalArgumentException
    {
        android.media.RemoteController r0;
        int i0;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r6;

        r0 := @this: android.media.RemoteController;

        i0 := @parameter0: int;

        if i0 == 0 goto label2;

        if i0 != 1 goto label1;

        goto label2;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown synchronization mode ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label2:
        $z0 = r0.<android.media.RemoteController: boolean mIsRegistered>;

        if $z0 != 0 goto label3;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("RemoteController", "Cannot set synchronization mode on an unregistered RemoteController");

        return 0;

     label3:
        return 1;
    }

    void startListeningToSessions()
    {
        android.media.RemoteController r0;
        android.content.ComponentName $r2;
        android.media.RemoteController$OnClientUpdateListener $r3;
        android.content.Context $r4;
        java.lang.Class $r5;
        android.os.Looper $r6, $r13;
        android.media.session.MediaSessionManager $r7, $r9;
        android.media.session.MediaSessionManager$OnActiveSessionsChangedListener $r8, $r10;
        int $i0;
        java.util.List $r11;
        android.os.Handler $r12, r14;

        r0 := @this: android.media.RemoteController;

        $r2 = new android.content.ComponentName;

        $r4 = r0.<android.media.RemoteController: android.content.Context mContext>;

        $r3 = r0.<android.media.RemoteController: android.media.RemoteController$OnClientUpdateListener mOnClientUpdateListener>;

        $r5 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        specialinvoke $r2.<android.content.ComponentName: void <init>(android.content.Context,java.lang.Class)>($r4, $r5);

        r14 = null;

        $r6 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if $r6 != null goto label1;

        $r12 = new android.os.Handler;

        $r13 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r12.<android.os.Handler: void <init>(android.os.Looper)>($r13);

        r14 = $r12;

     label1:
        $r7 = r0.<android.media.RemoteController: android.media.session.MediaSessionManager mSessionManager>;

        $r8 = r0.<android.media.RemoteController: android.media.session.MediaSessionManager$OnActiveSessionsChangedListener mSessionListener>;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        virtualinvoke $r7.<android.media.session.MediaSessionManager: void addOnActiveSessionsChangedListener(android.media.session.MediaSessionManager$OnActiveSessionsChangedListener,android.content.ComponentName,int,android.os.Handler)>($r8, $r2, $i0, r14);

        $r10 = r0.<android.media.RemoteController: android.media.session.MediaSessionManager$OnActiveSessionsChangedListener mSessionListener>;

        $r9 = r0.<android.media.RemoteController: android.media.session.MediaSessionManager mSessionManager>;

        $r11 = virtualinvoke $r9.<android.media.session.MediaSessionManager: java.util.List getActiveSessions(android.content.ComponentName)>($r2);

        interfaceinvoke $r10.<android.media.session.MediaSessionManager$OnActiveSessionsChangedListener: void onActiveSessionsChanged(java.util.List)>($r11);

        return;
    }

    void stopListeningToSessions()
    {
        android.media.RemoteController r0;
        android.media.session.MediaSessionManager$OnActiveSessionsChangedListener $r1;
        android.media.session.MediaSessionManager $r2;

        r0 := @this: android.media.RemoteController;

        $r2 = r0.<android.media.RemoteController: android.media.session.MediaSessionManager mSessionManager>;

        $r1 = r0.<android.media.RemoteController: android.media.session.MediaSessionManager$OnActiveSessionsChangedListener mSessionListener>;

        virtualinvoke $r2.<android.media.session.MediaSessionManager: void removeOnActiveSessionsChangedListener(android.media.session.MediaSessionManager$OnActiveSessionsChangedListener)>($r1);

        return;
    }
}
