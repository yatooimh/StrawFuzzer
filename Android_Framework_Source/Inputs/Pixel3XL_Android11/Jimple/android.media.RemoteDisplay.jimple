public final class android.media.RemoteDisplay extends java.lang.Object
{
    public static final int DISPLAY_ERROR_CONNECTION_DROPPED;
    public static final int DISPLAY_ERROR_UNKOWN;
    public static final int DISPLAY_FLAG_SECURE;
    private final dalvik.system.CloseGuard mGuard;
    private final android.os.Handler mHandler;
    private final android.media.RemoteDisplay$Listener mListener;
    private final java.lang.String mOpPackageName;
    private long mPtr;

    private void <init>(android.media.RemoteDisplay$Listener, android.os.Handler, java.lang.String)
    {
        android.media.RemoteDisplay r0;
        android.media.RemoteDisplay$Listener r1;
        android.os.Handler r2;
        java.lang.String r3;
        dalvik.system.CloseGuard $r4;

        r0 := @this: android.media.RemoteDisplay;

        r1 := @parameter0: android.media.RemoteDisplay$Listener;

        r2 := @parameter1: android.os.Handler;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.media.RemoteDisplay: dalvik.system.CloseGuard mGuard> = $r4;

        r0.<android.media.RemoteDisplay: android.media.RemoteDisplay$Listener mListener> = r1;

        r0.<android.media.RemoteDisplay: android.os.Handler mHandler> = r2;

        r0.<android.media.RemoteDisplay: java.lang.String mOpPackageName> = r3;

        return;
    }

    static android.media.RemoteDisplay$Listener access$000(android.media.RemoteDisplay)
    {
        android.media.RemoteDisplay r0;
        android.media.RemoteDisplay$Listener $r1;

        r0 := @parameter0: android.media.RemoteDisplay;

        $r1 = r0.<android.media.RemoteDisplay: android.media.RemoteDisplay$Listener mListener>;

        return $r1;
    }

    private void dispose(boolean)
    {
        android.media.RemoteDisplay r0;
        boolean z0;
        dalvik.system.CloseGuard r1;
        long $l0, $l2;
        byte $b1;

        r0 := @this: android.media.RemoteDisplay;

        z0 := @parameter0: boolean;

        $l0 = r0.<android.media.RemoteDisplay: long mPtr>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label3;

        r1 = r0.<android.media.RemoteDisplay: dalvik.system.CloseGuard mGuard>;

        if r1 == null goto label2;

        if z0 == 0 goto label1;

        virtualinvoke r1.<dalvik.system.CloseGuard: void warnIfOpen()>();

        goto label2;

     label1:
        virtualinvoke r1.<dalvik.system.CloseGuard: void close()>();

     label2:
        $l2 = r0.<android.media.RemoteDisplay: long mPtr>;

        specialinvoke r0.<android.media.RemoteDisplay: void nativeDispose(long)>($l2);

        r0.<android.media.RemoteDisplay: long mPtr> = 0L;

     label3:
        return;
    }

    public static android.media.RemoteDisplay listen(java.lang.String, android.media.RemoteDisplay$Listener, android.os.Handler, java.lang.String)
    {
        java.lang.String r0, r2;
        android.os.Handler r1;
        java.lang.IllegalArgumentException $r3, $r4, $r5;
        android.media.RemoteDisplay $r6;
        android.media.RemoteDisplay$Listener r7;

        r0 := @parameter0: java.lang.String;

        r7 := @parameter1: android.media.RemoteDisplay$Listener;

        r1 := @parameter2: android.os.Handler;

        r2 := @parameter3: java.lang.String;

        if r0 == null goto label3;

        if r7 == null goto label2;

        if r1 == null goto label1;

        $r6 = new android.media.RemoteDisplay;

        specialinvoke $r6.<android.media.RemoteDisplay: void <init>(android.media.RemoteDisplay$Listener,android.os.Handler,java.lang.String)>(r7, r1, r2);

        specialinvoke $r6.<android.media.RemoteDisplay: void startListening(java.lang.String)>(r0);

        return $r6;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("handler must not be null");

        throw $r5;

     label2:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("listener must not be null");

        throw $r4;

     label3:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("iface must not be null");

        throw $r3;
    }

    private native void nativeDispose(long);

    private native long nativeListen(java.lang.String, java.lang.String);

    private native void nativePause(long);

    private native void nativeResume(long);

    private void notifyDisplayConnected(android.view.Surface, int, int, int, int)
    {
        android.media.RemoteDisplay r0;
        android.view.Surface r1;
        int i0, i1, i2, i3;
        android.media.RemoteDisplay$1 $r2;
        android.os.Handler $r3;

        r0 := @this: android.media.RemoteDisplay;

        r1 := @parameter0: android.view.Surface;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $r3 = r0.<android.media.RemoteDisplay: android.os.Handler mHandler>;

        $r2 = new android.media.RemoteDisplay$1;

        specialinvoke $r2.<android.media.RemoteDisplay$1: void <init>(android.media.RemoteDisplay,android.view.Surface,int,int,int,int)>(r0, r1, i0, i1, i2, i3);

        virtualinvoke $r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r2);

        return;
    }

    private void notifyDisplayDisconnected()
    {
        android.media.RemoteDisplay r0;
        android.media.RemoteDisplay$2 $r1;
        android.os.Handler $r2;

        r0 := @this: android.media.RemoteDisplay;

        $r2 = r0.<android.media.RemoteDisplay: android.os.Handler mHandler>;

        $r1 = new android.media.RemoteDisplay$2;

        specialinvoke $r1.<android.media.RemoteDisplay$2: void <init>(android.media.RemoteDisplay)>(r0);

        virtualinvoke $r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r1);

        return;
    }

    private void notifyDisplayError(int)
    {
        android.media.RemoteDisplay r0;
        int i0;
        android.media.RemoteDisplay$3 $r1;
        android.os.Handler $r2;

        r0 := @this: android.media.RemoteDisplay;

        i0 := @parameter0: int;

        $r2 = r0.<android.media.RemoteDisplay: android.os.Handler mHandler>;

        $r1 = new android.media.RemoteDisplay$3;

        specialinvoke $r1.<android.media.RemoteDisplay$3: void <init>(android.media.RemoteDisplay,int)>(r0, i0);

        virtualinvoke $r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r1);

        return;
    }

    private void startListening(java.lang.String)
    {
        android.media.RemoteDisplay r0;
        java.lang.String r1, $r3, $r9;
        long l0;
        byte $b1;
        java.lang.StringBuilder $r4;
        java.lang.IllegalStateException $r8;
        dalvik.system.CloseGuard $r10;

        r0 := @this: android.media.RemoteDisplay;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<android.media.RemoteDisplay: java.lang.String mOpPackageName>;

        l0 = specialinvoke r0.<android.media.RemoteDisplay: long nativeListen(java.lang.String,java.lang.String)>(r1, $r3);

        r0.<android.media.RemoteDisplay: long mPtr> = l0;

        $b1 = l0 cmp 0L;

        if $b1 == 0 goto label1;

        $r10 = r0.<android.media.RemoteDisplay: dalvik.system.CloseGuard mGuard>;

        virtualinvoke $r10.<dalvik.system.CloseGuard: void open(java.lang.String)>("dispose");

        return;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not start listening for remote display connection on \"");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r8 = new java.lang.IllegalStateException;

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r8;
    }

    public void dispose()
    {
        android.media.RemoteDisplay r0;

        r0 := @this: android.media.RemoteDisplay;

        specialinvoke r0.<android.media.RemoteDisplay: void dispose(boolean)>(0);

        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.media.RemoteDisplay r0;
        java.lang.Throwable $r2;

        r0 := @this: android.media.RemoteDisplay;

     label1:
        specialinvoke r0.<android.media.RemoteDisplay: void dispose(boolean)>(1);

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label3:
        $r2 := @caughtexception;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void pause()
    {
        android.media.RemoteDisplay r0;
        long $l0;

        r0 := @this: android.media.RemoteDisplay;

        $l0 = r0.<android.media.RemoteDisplay: long mPtr>;

        specialinvoke r0.<android.media.RemoteDisplay: void nativePause(long)>($l0);

        return;
    }

    public void resume()
    {
        android.media.RemoteDisplay r0;
        long $l0;

        r0 := @this: android.media.RemoteDisplay;

        $l0 = r0.<android.media.RemoteDisplay: long mPtr>;

        specialinvoke r0.<android.media.RemoteDisplay: void nativeResume(long)>($l0);

        return;
    }

    public static void <clinit>()
    {
        <android.media.RemoteDisplay: int DISPLAY_FLAG_SECURE> = 1;

        <android.media.RemoteDisplay: int DISPLAY_ERROR_UNKOWN> = 1;

        <android.media.RemoteDisplay: int DISPLAY_ERROR_CONNECTION_DROPPED> = 2;

        return;
    }
}
