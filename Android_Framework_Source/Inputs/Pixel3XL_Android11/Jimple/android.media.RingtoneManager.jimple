public class android.media.RingtoneManager extends java.lang.Object
{
    public static final java.lang.String ACTION_RINGTONE_PICKER;
    public static final java.lang.String EXTRA_RINGTONE_AUDIO_ATTRIBUTES_FLAGS;
    public static final java.lang.String EXTRA_RINGTONE_DEFAULT_URI;
    public static final java.lang.String EXTRA_RINGTONE_EXISTING_URI;
    public static final java.lang.String EXTRA_RINGTONE_INCLUDE_DRM;
    public static final java.lang.String EXTRA_RINGTONE_PICKED_URI;
    public static final java.lang.String EXTRA_RINGTONE_SHOW_DEFAULT;
    public static final java.lang.String EXTRA_RINGTONE_SHOW_SILENT;
    public static final java.lang.String EXTRA_RINGTONE_TITLE;
    public static final java.lang.String EXTRA_RINGTONE_TYPE;
    public static final int ID_COLUMN_INDEX;
    private static final java.lang.String[] INTERNAL_COLUMNS;
    private static final java.lang.String[] MEDIA_COLUMNS;
    private static final java.lang.String TAG;
    public static final int TITLE_COLUMN_INDEX;
    public static final int TYPE_ALARM;
    public static final int TYPE_ALL;
    public static final int TYPE_NOTIFICATION;
    public static final int TYPE_RINGTONE;
    public static final int URI_COLUMN_INDEX;
    private final android.app.Activity mActivity;
    private final android.content.Context mContext;
    private android.database.Cursor mCursor;
    private final java.util.List mFilterColumns;
    private boolean mIncludeParentRingtones;
    private android.media.Ringtone mPreviousRingtone;
    private boolean mStopPreviousRingtone;
    private int mType;

    static void <clinit>()
    {
        java.lang.String[] $r0, $r1;

        <android.media.RingtoneManager: int URI_COLUMN_INDEX> = 2;

        <android.media.RingtoneManager: int TYPE_RINGTONE> = 1;

        <android.media.RingtoneManager: int TYPE_NOTIFICATION> = 2;

        <android.media.RingtoneManager: int TYPE_ALL> = 7;

        <android.media.RingtoneManager: int TYPE_ALARM> = 4;

        <android.media.RingtoneManager: int TITLE_COLUMN_INDEX> = 1;

        <android.media.RingtoneManager: java.lang.String TAG> = "RingtoneManager";

        <android.media.RingtoneManager: int ID_COLUMN_INDEX> = 0;

        <android.media.RingtoneManager: java.lang.String EXTRA_RINGTONE_TYPE> = "android.intent.extra.ringtone.TYPE";

        <android.media.RingtoneManager: java.lang.String EXTRA_RINGTONE_TITLE> = "android.intent.extra.ringtone.TITLE";

        <android.media.RingtoneManager: java.lang.String EXTRA_RINGTONE_SHOW_SILENT> = "android.intent.extra.ringtone.SHOW_SILENT";

        <android.media.RingtoneManager: java.lang.String EXTRA_RINGTONE_SHOW_DEFAULT> = "android.intent.extra.ringtone.SHOW_DEFAULT";

        <android.media.RingtoneManager: java.lang.String EXTRA_RINGTONE_PICKED_URI> = "android.intent.extra.ringtone.PICKED_URI";

        <android.media.RingtoneManager: java.lang.String EXTRA_RINGTONE_INCLUDE_DRM> = "android.intent.extra.ringtone.INCLUDE_DRM";

        <android.media.RingtoneManager: java.lang.String EXTRA_RINGTONE_EXISTING_URI> = "android.intent.extra.ringtone.EXISTING_URI";

        <android.media.RingtoneManager: java.lang.String EXTRA_RINGTONE_DEFAULT_URI> = "android.intent.extra.ringtone.DEFAULT_URI";

        <android.media.RingtoneManager: java.lang.String EXTRA_RINGTONE_AUDIO_ATTRIBUTES_FLAGS> = "android.intent.extra.ringtone.AUDIO_ATTRIBUTES_FLAGS";

        <android.media.RingtoneManager: java.lang.String ACTION_RINGTONE_PICKER> = "android.intent.action.RINGTONE_PICKER";

        $r0 = newarray (java.lang.String)[4];

        $r0[0] = "_id";

        $r0[1] = "title";

        $r0[2] = "title";

        $r0[3] = "title_key";

        <android.media.RingtoneManager: java.lang.String[] INTERNAL_COLUMNS> = $r0;

        $r1 = newarray (java.lang.String)[4];

        $r1[0] = "_id";

        $r1[1] = "title";

        $r1[2] = "title";

        $r1[3] = "title_key";

        <android.media.RingtoneManager: java.lang.String[] MEDIA_COLUMNS> = $r1;

        return;
    }

    public void <init>(android.app.Activity)
    {
        android.media.RingtoneManager r0;
        android.app.Activity r1;

        r0 := @this: android.media.RingtoneManager;

        r1 := @parameter0: android.app.Activity;

        specialinvoke r0.<android.media.RingtoneManager: void <init>(android.app.Activity,boolean)>(r1, 0);

        return;
    }

    public void <init>(android.app.Activity, boolean)
    {
        android.media.RingtoneManager r0;
        android.app.Activity r1;
        boolean z0;
        java.util.ArrayList $r2;
        int $i0;

        r0 := @this: android.media.RingtoneManager;

        r1 := @parameter0: android.app.Activity;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.media.RingtoneManager: int mType> = 1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<android.media.RingtoneManager: java.util.List mFilterColumns> = $r2;

        r0.<android.media.RingtoneManager: boolean mStopPreviousRingtone> = 1;

        r0.<android.media.RingtoneManager: android.app.Activity mActivity> = r1;

        r0.<android.media.RingtoneManager: android.content.Context mContext> = r1;

        $i0 = r0.<android.media.RingtoneManager: int mType>;

        virtualinvoke r0.<android.media.RingtoneManager: void setType(int)>($i0);

        r0.<android.media.RingtoneManager: boolean mIncludeParentRingtones> = z0;

        return;
    }

    public void <init>(android.content.Context)
    {
        android.media.RingtoneManager r0;
        android.content.Context r1;

        r0 := @this: android.media.RingtoneManager;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.media.RingtoneManager: void <init>(android.content.Context,boolean)>(r1, 0);

        return;
    }

    public void <init>(android.content.Context, boolean)
    {
        android.media.RingtoneManager r0;
        android.content.Context r1;
        boolean z0;
        java.util.ArrayList $r2;
        int $i0;

        r0 := @this: android.media.RingtoneManager;

        r1 := @parameter0: android.content.Context;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.media.RingtoneManager: int mType> = 1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<android.media.RingtoneManager: java.util.List mFilterColumns> = $r2;

        r0.<android.media.RingtoneManager: boolean mStopPreviousRingtone> = 1;

        r0.<android.media.RingtoneManager: android.app.Activity mActivity> = null;

        r0.<android.media.RingtoneManager: android.content.Context mContext> = r1;

        $i0 = r0.<android.media.RingtoneManager: int mType>;

        virtualinvoke r0.<android.media.RingtoneManager: void setType(int)>($i0);

        r0.<android.media.RingtoneManager: boolean mIncludeParentRingtones> = z0;

        return;
    }

    private static java.lang.String constructBooleanTrueWhereClause(java.util.List)
    {
        java.util.List r0;
        java.lang.StringBuilder $r2;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String $r5, $r7;
        java.lang.Object $r6;

        r0 := @parameter0: java.util.List;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        i4 = $i0 - 1;

     label2:
        if i4 < 0 goto label3;

        $r6 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i4);

        $r7 = (java.lang.String) $r6;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=1 or ");

        i4 = i4 + -1;

        goto label2;

     label3:
        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i1 <= 0 goto label4;

        $i2 = virtualinvoke $r2.<java.lang.StringBuilder: int length()>();

        $i3 = $i2 - 4;

        virtualinvoke $r2.<java.lang.StringBuilder: void setLength(int)>($i3);

     label4:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    private static android.content.Context createPackageContextAsUser(android.content.Context, int)
    {
        int i0;
        java.lang.String $r0;
        android.os.UserHandle $r1;
        android.content.pm.PackageManager$NameNotFoundException $r2;
        android.content.Context r3, r4;

        r3 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

     label1:
        $r0 = virtualinvoke r3.<android.content.Context: java.lang.String getPackageName()>();

        $r1 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i0);

        r4 = virtualinvoke r3.<android.content.Context: android.content.Context createPackageContextAsUser(java.lang.String,int,android.os.UserHandle)>($r0, 0, $r1);

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("RingtoneManager", "Unable to create package context", $r2);

        return null;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
    }

    public static void disableSyncFromParent(android.content.Context)
    {
        android.media.IAudioService r0;
        android.os.IBinder $r1;
        int $i0;
        android.os.RemoteException $r2;
        android.content.Context r3;

        r3 := @parameter0: android.content.Context;

        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("audio");

        r0 = staticinvoke <android.media.IAudioService$Stub: android.media.IAudioService asInterface(android.os.IBinder)>($r1);

     label1:
        $i0 = virtualinvoke r3.<android.content.Context: int getUserId()>();

        interfaceinvoke r0.<android.media.IAudioService: void disableRingtoneSync(int)>($i0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("RingtoneManager", "Unable to disable ringtone sync.");

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static void enableSyncFromParent(android.content.Context)
    {
        android.content.Context r0;
        android.content.ContentResolver $r1;
        int $i0;

        r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = virtualinvoke r0.<android.content.Context: int getUserId()>();

        staticinvoke <android.provider.Settings$Secure: boolean putIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r1, "sync_parent_sounds", 1, $i0);

        return;
    }

    public static void ensureDefaultRingtones(android.content.Context)
    {
        int i0, $i1, i3;
        android.net.Uri r0, $r7, $r8;
        int[] $r1;
        android.content.ContentResolver $r2, $r3, $r6, $r9;
        java.lang.String[] $r4, $r5;
        boolean $z0;
        long $l2;
        java.lang.Throwable $r10, $r11;
        android.content.Context r12;
        java.lang.String r13, r14;
        android.database.Cursor r15;

        r12 := @parameter0: android.content.Context;

        i3 = 0;

     label01:
        if i3 >= 3 goto label11;

        $r1 = newarray (int)[3];

        $r1[0] = 1;

        $r1[1] = 2;

        $r1[2] = 4;

        i0 = $r1[i3];

        r13 = staticinvoke <android.media.RingtoneManager: java.lang.String getDefaultRingtoneSetting(int)>(i0);

        $r2 = virtualinvoke r12.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i1 = staticinvoke <android.provider.Settings$System: int getInt(android.content.ContentResolver,java.lang.String,int)>($r2, r13, 0);

        if $i1 == 0 goto label02;

        goto label05;

     label02:
        r14 = staticinvoke <android.media.RingtoneManager: java.lang.String getDefaultRingtoneFilename(int)>(i0);

        r0 = <android.provider.MediaStore$Audio$Media: android.net.Uri INTERNAL_CONTENT_URI>;

        $r3 = virtualinvoke r12.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r4 = newarray (java.lang.String)[1];

        $r4[0] = "_id";

        $r5 = newarray (java.lang.String)[1];

        $r5[0] = r14;

        r15 = virtualinvoke $r3.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>(r0, $r4, "_display_name=?", $r5, null);

     label03:
        $z0 = interfaceinvoke r15.<android.database.Cursor: boolean moveToFirst()>();

        if $z0 == 0 goto label04;

        $r6 = virtualinvoke r12.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $l2 = interfaceinvoke r15.<android.database.Cursor: long getLong(int)>(0);

        $r7 = staticinvoke <android.content.ContentUris: android.net.Uri withAppendedId(android.net.Uri,long)>(r0, $l2);

        $r8 = virtualinvoke $r6.<android.content.ContentResolver: android.net.Uri canonicalizeOrElse(android.net.Uri)>($r7);

        staticinvoke <android.media.RingtoneManager: void setActualDefaultRingtoneUri(android.content.Context,int,android.net.Uri)>(r12, i0, $r8);

        $r9 = virtualinvoke r12.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$System: boolean putInt(android.content.ContentResolver,java.lang.String,int)>($r9, r13, 1);

     label04:
        if r15 == null goto label05;

        interfaceinvoke r15.<android.database.Cursor: void close()>();

     label05:
        i3 = i3 + 1;

        goto label01;

     label06:
        $r11 := @caughtexception;

        if r15 == null goto label10;

     label07:
        interfaceinvoke r15.<android.database.Cursor: void close()>();

     label08:
        goto label10;

     label09:
        $r10 := @caughtexception;

        virtualinvoke $r11.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r10);

     label10:
        throw $r11;

     label11:
        return;

        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label07 to label08 with label09;
    }

    public static android.net.Uri getActualDefaultRingtoneUri(android.content.Context, int)
    {
        android.content.Context r0;
        int i0, $i1, $i2, $i3;
        android.content.ContentResolver $r1;
        java.lang.String r2, r4;
        android.net.Uri r3, r5;

        r0 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        r2 = staticinvoke <android.media.RingtoneManager: java.lang.String getSettingForType(int)>(i0);

        r3 = null;

        if r2 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i1 = virtualinvoke r0.<android.content.Context: int getUserId()>();

        r4 = staticinvoke <android.provider.Settings$System: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>($r1, r2, $i1);

        if r4 == null goto label2;

        r3 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>(r4);

     label2:
        r5 = r3;

        if r3 == null goto label3;

        r5 = r3;

        $i2 = staticinvoke <android.content.ContentProvider: int getUserIdFromUri(android.net.Uri)>(r3);

        $i3 = virtualinvoke r0.<android.content.Context: int getUserId()>();

        if $i2 != $i3 goto label3;

        r5 = staticinvoke <android.content.ContentProvider: android.net.Uri getUriWithoutUserId(android.net.Uri)>(r3);

     label3:
        return r5;
    }

    public static android.net.Uri getCacheForType(int)
    {
        int i0, $i1;
        android.net.Uri $r0;

        i0 := @parameter0: int;

        $i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r0 = staticinvoke <android.media.RingtoneManager: android.net.Uri getCacheForType(int,int)>(i0, $i1);

        return $r0;
    }

    public static android.net.Uri getCacheForType(int, int)
    {
        int i0, i1, $i2, $i3, $i4;
        android.net.Uri $r0, $r1, $r2, $r3, $r4, $r5;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = i0 & 1;

        if $i2 == 0 goto label1;

        $r4 = <android.provider.Settings$System: android.net.Uri RINGTONE_CACHE_URI>;

        $r5 = staticinvoke <android.content.ContentProvider: android.net.Uri maybeAddUserId(android.net.Uri,int)>($r4, i1);

        return $r5;

     label1:
        $i3 = i0 & 2;

        if $i3 == 0 goto label2;

        $r2 = <android.provider.Settings$System: android.net.Uri NOTIFICATION_SOUND_CACHE_URI>;

        $r3 = staticinvoke <android.content.ContentProvider: android.net.Uri maybeAddUserId(android.net.Uri,int)>($r2, i1);

        return $r3;

     label2:
        $i4 = i0 & 4;

        if $i4 == 0 goto label3;

        $r0 = <android.provider.Settings$System: android.net.Uri ALARM_ALERT_CACHE_URI>;

        $r1 = staticinvoke <android.content.ContentProvider: android.net.Uri maybeAddUserId(android.net.Uri,int)>($r0, i1);

        return $r1;

     label3:
        return null;
    }

    private static java.lang.String getDefaultRingtoneFilename(int)
    {
        int i0;
        java.lang.String $r0, $r1, $r3;
        java.lang.IllegalArgumentException $r2;

        i0 := @parameter0: int;

        if i0 == 1 goto label3;

        if i0 == 2 goto label2;

        if i0 != 4 goto label1;

        $r3 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.config.alarm_alert");

        return $r3;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label2:
        $r1 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.config.notification_sound");

        return $r1;

     label3:
        $r0 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.config.ringtone");

        return $r0;
    }

    private static java.lang.String getDefaultRingtoneSetting(int)
    {
        int i0;
        java.lang.IllegalArgumentException $r0;

        i0 := @parameter0: int;

        if i0 == 1 goto label3;

        if i0 == 2 goto label2;

        if i0 != 4 goto label1;

        return "alarm_alert_set";

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r0;

     label2:
        return "notification_sound_set";

     label3:
        return "ringtone_set";
    }

    public static int getDefaultType(android.net.Uri)
    {
        android.net.Uri $r0, $r1, $r2, r3, r4;
        boolean $z0, $z1, $z2;

        r3 := @parameter0: android.net.Uri;

        r4 = staticinvoke <android.content.ContentProvider: android.net.Uri getUriWithoutUserId(android.net.Uri)>(r3);

        if r4 != null goto label1;

        return -1;

     label1:
        $r0 = <android.provider.Settings$System: android.net.Uri DEFAULT_RINGTONE_URI>;

        $z0 = virtualinvoke r4.<android.net.Uri: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $r1 = <android.provider.Settings$System: android.net.Uri DEFAULT_NOTIFICATION_URI>;

        $z1 = virtualinvoke r4.<android.net.Uri: boolean equals(java.lang.Object)>($r1);

        if $z1 == 0 goto label3;

        return 2;

     label3:
        $r2 = <android.provider.Settings$System: android.net.Uri DEFAULT_ALARM_ALERT_URI>;

        $z2 = virtualinvoke r4.<android.net.Uri: boolean equals(java.lang.Object)>($r2);

        if $z2 == 0 goto label4;

        return 4;

     label4:
        return -1;
    }

    public static android.net.Uri getDefaultUri(int)
    {
        int i0, $i1, $i2, $i3;
        android.net.Uri $r0, $r1, $r2;

        i0 := @parameter0: int;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        $r2 = <android.provider.Settings$System: android.net.Uri DEFAULT_RINGTONE_URI>;

        return $r2;

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        $r1 = <android.provider.Settings$System: android.net.Uri DEFAULT_NOTIFICATION_URI>;

        return $r1;

     label2:
        $i3 = i0 & 4;

        if $i3 == 0 goto label3;

        $r0 = <android.provider.Settings$System: android.net.Uri DEFAULT_ALARM_ALERT_URI>;

        return $r0;

     label3:
        return null;
    }

    private static final java.lang.String getExternalDirectoryForType(int)
    {
        int i0;
        java.lang.String $r1, $r2, $r7, $r8;
        java.lang.StringBuilder $r3;
        java.lang.IllegalArgumentException $r6;

        i0 := @parameter0: int;

        if i0 == 1 goto label3;

        if i0 == 2 goto label2;

        if i0 != 4 goto label1;

        $r8 = <android.os.Environment: java.lang.String DIRECTORY_ALARMS>;

        return $r8;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported ringtone type: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label2:
        $r2 = <android.os.Environment: java.lang.String DIRECTORY_NOTIFICATIONS>;

        return $r2;

     label3:
        $r1 = <android.os.Environment: java.lang.String DIRECTORY_RINGTONES>;

        return $r1;
    }

    private android.database.Cursor getInternalRingtones()
    {
        android.media.RingtoneManager r0;
        android.media.ExternalRingtonesCursorWrapper $r1;
        java.util.List $r2;
        android.net.Uri $r3, $r7;
        java.lang.String[] $r4;
        java.lang.String $r5;
        android.database.Cursor $r6;

        r0 := @this: android.media.RingtoneManager;

        $r1 = new android.media.ExternalRingtonesCursorWrapper;

        $r3 = <android.provider.MediaStore$Audio$Media: android.net.Uri INTERNAL_CONTENT_URI>;

        $r4 = <android.media.RingtoneManager: java.lang.String[] INTERNAL_COLUMNS>;

        $r2 = r0.<android.media.RingtoneManager: java.util.List mFilterColumns>;

        $r5 = staticinvoke <android.media.RingtoneManager: java.lang.String constructBooleanTrueWhereClause(java.util.List)>($r2);

        $r6 = specialinvoke r0.<android.media.RingtoneManager: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>($r3, $r4, $r5, null, "title_key");

        $r7 = <android.provider.MediaStore$Audio$Media: android.net.Uri INTERNAL_CONTENT_URI>;

        specialinvoke $r1.<android.media.ExternalRingtonesCursorWrapper: void <init>(android.database.Cursor,android.net.Uri)>($r6, $r7);

        return $r1;
    }

    private android.database.Cursor getMediaRingtones()
    {
        android.media.RingtoneManager r0;
        android.media.ExternalRingtonesCursorWrapper $r1;
        android.content.Context $r2;
        android.database.Cursor $r3;
        android.net.Uri $r4;

        r0 := @this: android.media.RingtoneManager;

        $r1 = new android.media.ExternalRingtonesCursorWrapper;

        $r2 = r0.<android.media.RingtoneManager: android.content.Context mContext>;

        $r3 = specialinvoke r0.<android.media.RingtoneManager: android.database.Cursor getMediaRingtones(android.content.Context)>($r2);

        $r4 = <android.provider.MediaStore$Audio$Media: android.net.Uri EXTERNAL_CONTENT_URI>;

        specialinvoke $r1.<android.media.ExternalRingtonesCursorWrapper: void <init>(android.database.Cursor,android.net.Uri)>($r3, $r4);

        return $r1;
    }

    private android.database.Cursor getMediaRingtones(android.content.Context)
    {
        android.media.RingtoneManager r0;
        android.content.Context r1;
        java.util.List $r2;
        android.net.Uri $r3;
        java.lang.String[] $r4;
        java.lang.String $r5;
        android.database.Cursor $r6;

        r0 := @this: android.media.RingtoneManager;

        r1 := @parameter0: android.content.Context;

        $r3 = <android.provider.MediaStore$Audio$Media: android.net.Uri EXTERNAL_CONTENT_URI>;

        $r4 = <android.media.RingtoneManager: java.lang.String[] MEDIA_COLUMNS>;

        $r2 = r0.<android.media.RingtoneManager: java.util.List mFilterColumns>;

        $r5 = staticinvoke <android.media.RingtoneManager: java.lang.String constructBooleanTrueWhereClause(java.util.List)>($r2);

        $r6 = specialinvoke r0.<android.media.RingtoneManager: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.content.Context)>($r3, $r4, $r5, null, "title_key", r1);

        return $r6;
    }

    private android.database.Cursor getParentProfileRingtones()
    {
        android.media.RingtoneManager r0;
        android.content.pm.UserInfo r1;
        android.content.Context r2, $r3, $r5, $r6, $r7;
        android.os.UserManager $r4;
        int $i0, $i1, $i2, $i3, $i4;
        android.media.ExternalRingtonesCursorWrapper $r8;
        android.database.Cursor $r9;
        android.net.Uri $r10, $r11;

        r0 := @this: android.media.RingtoneManager;

        $r3 = r0.<android.media.RingtoneManager: android.content.Context mContext>;

        $r4 = staticinvoke <android.os.UserManager: android.os.UserManager get(android.content.Context)>($r3);

        $r5 = r0.<android.media.RingtoneManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r5.<android.content.Context: int getUserId()>();

        r1 = virtualinvoke $r4.<android.os.UserManager: android.content.pm.UserInfo getProfileParent(int)>($i0);

        if r1 == null goto label1;

        $i1 = r1.<android.content.pm.UserInfo: int id>;

        $r6 = r0.<android.media.RingtoneManager: android.content.Context mContext>;

        $i2 = virtualinvoke $r6.<android.content.Context: int getUserId()>();

        if $i1 == $i2 goto label1;

        $r7 = r0.<android.media.RingtoneManager: android.content.Context mContext>;

        $i3 = r1.<android.content.pm.UserInfo: int id>;

        r2 = staticinvoke <android.media.RingtoneManager: android.content.Context createPackageContextAsUser(android.content.Context,int)>($r7, $i3);

        if r2 == null goto label1;

        $r8 = new android.media.ExternalRingtonesCursorWrapper;

        $r9 = specialinvoke r0.<android.media.RingtoneManager: android.database.Cursor getMediaRingtones(android.content.Context)>(r2);

        $r10 = <android.provider.MediaStore$Audio$Media: android.net.Uri EXTERNAL_CONTENT_URI>;

        $i4 = r1.<android.content.pm.UserInfo: int id>;

        $r11 = staticinvoke <android.content.ContentProvider: android.net.Uri maybeAddUserId(android.net.Uri,int)>($r10, $i4);

        specialinvoke $r8.<android.media.ExternalRingtonesCursorWrapper: void <init>(android.database.Cursor,android.net.Uri)>($r9, $r11);

        return $r8;

     label1:
        return null;
    }

    public static android.media.Ringtone getRingtone(android.content.Context, android.net.Uri)
    {
        android.content.Context r0;
        android.net.Uri r1;
        android.media.Ringtone $r2;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.net.Uri;

        $r2 = staticinvoke <android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri,int)>(r0, r1, -1);

        return $r2;
    }

    private static android.media.Ringtone getRingtone(android.content.Context, android.net.Uri, int)
    {
        android.content.Context r0;
        android.net.Uri r1;
        int i0;
        android.media.Ringtone $r2;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.net.Uri;

        i0 := @parameter2: int;

        $r2 = staticinvoke <android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri,int,android.media.VolumeShaper$Configuration)>(r0, r1, i0, null);

        return $r2;
    }

    private static android.media.Ringtone getRingtone(android.content.Context, android.net.Uri, int, android.media.VolumeShaper$Configuration)
    {
        android.net.Uri r0;
        int i0;
        android.media.Ringtone r1;
        java.lang.Exception $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r8;
        android.content.Context r9;
        android.media.VolumeShaper$Configuration r10;

        r9 := @parameter0: android.content.Context;

        r0 := @parameter1: android.net.Uri;

        i0 := @parameter2: int;

        r10 := @parameter3: android.media.VolumeShaper$Configuration;

     label1:
        r1 = new android.media.Ringtone;

        specialinvoke r1.<android.media.Ringtone: void <init>(android.content.Context,boolean)>(r9, 1);

     label2:
        if i0 < 0 goto label4;

     label3:
        virtualinvoke r1.<android.media.Ringtone: void setStreamType(int)>(i0);

     label4:
        virtualinvoke r1.<android.media.Ringtone: void setUri(android.net.Uri,android.media.VolumeShaper$Configuration)>(r0, r10);

     label5:
        return r1;

     label6:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to open ringtone ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("RingtoneManager", $r8);

        return null;

        catch java.lang.Exception from label1 to label2 with label6;
        catch java.lang.Exception from label3 to label4 with label6;
        catch java.lang.Exception from label4 to label5 with label6;
    }

    public static android.media.Ringtone getRingtone(android.content.Context, android.net.Uri, android.media.VolumeShaper$Configuration)
    {
        android.content.Context r0;
        android.net.Uri r1;
        android.media.VolumeShaper$Configuration r2;
        android.media.Ringtone $r3;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.net.Uri;

        r2 := @parameter2: android.media.VolumeShaper$Configuration;

        $r3 = staticinvoke <android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri,int,android.media.VolumeShaper$Configuration)>(r0, r1, -1, r2);

        return $r3;
    }

    private static java.lang.String getSettingForType(int)
    {
        int i0, $i1, $i2, $i3;

        i0 := @parameter0: int;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        return "ringtone";

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        return "notification_sound";

     label2:
        $i3 = i0 & 4;

        if $i3 == 0 goto label3;

        return "alarm_alert";

     label3:
        return null;
    }

    private static android.net.Uri getUriFromCursor(android.content.Context, android.database.Cursor)
    {
        android.content.Context r0;
        java.lang.String $r1;
        android.net.Uri $r2, $r4, r6;
        long $l0;
        android.content.ContentResolver $r3;
        android.database.Cursor r5;

        r0 := @parameter0: android.content.Context;

        r5 := @parameter1: android.database.Cursor;

        $r1 = interfaceinvoke r5.<android.database.Cursor: java.lang.String getString(int)>(2);

        $r2 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r1);

        $l0 = interfaceinvoke r5.<android.database.Cursor: long getLong(int)>(0);

        r6 = staticinvoke <android.content.ContentUris: android.net.Uri withAppendedId(android.net.Uri,long)>($r2, $l0);

        $r3 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r4 = virtualinvoke $r3.<android.content.ContentResolver: android.net.Uri canonicalizeOrElse(android.net.Uri)>(r6);

        return $r4;
    }

    public static android.net.Uri getValidRingtoneUri(android.content.Context)
    {
        android.content.Context r0;
        android.net.Uri r2, r6;
        android.media.RingtoneManager $r3;
        android.database.Cursor $r4, $r5;

        r0 := @parameter0: android.content.Context;

        $r3 = new android.media.RingtoneManager;

        specialinvoke $r3.<android.media.RingtoneManager: void <init>(android.content.Context)>(r0);

        $r4 = specialinvoke $r3.<android.media.RingtoneManager: android.database.Cursor getInternalRingtones()>();

        r2 = staticinvoke <android.media.RingtoneManager: android.net.Uri getValidRingtoneUriFromCursorAndClose(android.content.Context,android.database.Cursor)>(r0, $r4);

        r6 = r2;

        if r2 != null goto label1;

        $r5 = specialinvoke $r3.<android.media.RingtoneManager: android.database.Cursor getMediaRingtones()>();

        r6 = staticinvoke <android.media.RingtoneManager: android.net.Uri getValidRingtoneUriFromCursorAndClose(android.content.Context,android.database.Cursor)>(r0, $r5);

     label1:
        return r6;
    }

    private static android.net.Uri getValidRingtoneUriFromCursorAndClose(android.content.Context, android.database.Cursor)
    {
        android.content.Context r0;
        android.database.Cursor r1;
        boolean $z0;
        android.net.Uri r2;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.database.Cursor;

        if r1 == null goto label2;

        r2 = null;

        $z0 = interfaceinvoke r1.<android.database.Cursor: boolean moveToFirst()>();

        if $z0 == 0 goto label1;

        r2 = staticinvoke <android.media.RingtoneManager: android.net.Uri getUriFromCursor(android.content.Context,android.database.Cursor)>(r0, r1);

     label1:
        interfaceinvoke r1.<android.database.Cursor: void close()>();

        return r2;

     label2:
        return null;
    }

    public static boolean hasHapticChannels(android.net.Uri)
    {
        android.net.Uri r0;
        boolean $z0;

        r0 := @parameter0: android.net.Uri;

        $z0 = staticinvoke <android.media.AudioManager: boolean hasHapticChannels(android.net.Uri)>(r0);

        return $z0;
    }

    public static boolean isDefault(android.net.Uri)
    {
        android.net.Uri r0;
        int $i0;
        boolean z0;

        r0 := @parameter0: android.net.Uri;

        $i0 = staticinvoke <android.media.RingtoneManager: int getDefaultType(android.net.Uri)>(r0);

        if $i0 == -1 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private static boolean isExternalRingtoneUri(android.net.Uri)
    {
        android.net.Uri r0, $r1;
        boolean $z0;

        r0 := @parameter0: android.net.Uri;

        $r1 = <android.provider.MediaStore$Audio$Media: android.net.Uri EXTERNAL_CONTENT_URI>;

        $z0 = staticinvoke <android.media.RingtoneManager: boolean isRingtoneUriInStorage(android.net.Uri,android.net.Uri)>(r0, $r1);

        return $z0;
    }

    private static boolean isInternalRingtoneUri(android.net.Uri)
    {
        android.net.Uri r0, $r1;
        boolean $z0;

        r0 := @parameter0: android.net.Uri;

        $r1 = <android.provider.MediaStore$Audio$Media: android.net.Uri INTERNAL_CONTENT_URI>;

        $z0 = staticinvoke <android.media.RingtoneManager: boolean isRingtoneUriInStorage(android.net.Uri,android.net.Uri)>(r0, $r1);

        return $z0;
    }

    private static boolean isRingtoneUriInStorage(android.net.Uri, android.net.Uri)
    {
        android.net.Uri r0, r3, r4;
        java.lang.String $r1, $r2;
        boolean z0;

        r3 := @parameter0: android.net.Uri;

        r0 := @parameter1: android.net.Uri;

        r4 = staticinvoke <android.content.ContentProvider: android.net.Uri getUriWithoutUserId(android.net.Uri)>(r3);

        if r4 != null goto label1;

        z0 = 0;

        goto label2;

     label1:
        $r1 = virtualinvoke r4.<android.net.Uri: java.lang.String toString()>();

        $r2 = virtualinvoke r0.<android.net.Uri: java.lang.String toString()>();

        z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>($r2);

     label2:
        return z0;
    }

    public static android.content.res.AssetFileDescriptor openDefaultRingtoneUri(android.content.Context, android.net.Uri) throws java.io.FileNotFoundException
    {
        int i0, $i1;
        android.net.Uri r0, r3, r4;
        android.content.ContentResolver r1;
        android.content.Context r2;
        android.content.res.AssetFileDescriptor r5, r6;

        r2 := @parameter0: android.content.Context;

        r3 := @parameter1: android.net.Uri;

        i0 = staticinvoke <android.media.RingtoneManager: int getDefaultType(android.net.Uri)>(r3);

        $i1 = virtualinvoke r2.<android.content.Context: int getUserId()>();

        r4 = staticinvoke <android.media.RingtoneManager: android.net.Uri getCacheForType(int,int)>(i0, $i1);

        r0 = staticinvoke <android.media.RingtoneManager: android.net.Uri getActualDefaultRingtoneUri(android.content.Context,int)>(r2, i0);

        r1 = virtualinvoke r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r5 = null;

        if r4 == null goto label1;

        r6 = virtualinvoke r1.<android.content.ContentResolver: android.content.res.AssetFileDescriptor openAssetFileDescriptor(android.net.Uri,java.lang.String)>(r4, "r");

        r5 = r6;

        if r6 == null goto label1;

        return r6;

     label1:
        if r0 == null goto label2;

        r5 = virtualinvoke r1.<android.content.ContentResolver: android.content.res.AssetFileDescriptor openAssetFileDescriptor(android.net.Uri,java.lang.String)>(r0, "r");

     label2:
        return r5;
    }

    private static java.io.InputStream openRingtone(android.content.Context, android.net.Uri) throws java.io.IOException
    {
        android.net.Uri r0;
        java.lang.Exception $r2;
        java.io.IOException $r3;
        java.lang.Throwable $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r8;
        java.lang.Object $r9;
        android.media.AudioManager $r10;
        android.os.ParcelFileDescriptor$AutoCloseInputStream $r11;
        android.os.ParcelFileDescriptor $r12;
        android.content.Context r13;
        android.content.ContentResolver r14;
        java.io.InputStream r15;
        android.media.IRingtonePlayer r17;

        r13 := @parameter0: android.content.Context;

        r0 := @parameter1: android.net.Uri;

        r14 = virtualinvoke r13.<android.content.Context: android.content.ContentResolver getContentResolver()>();

     label1:
        r15 = virtualinvoke r14.<android.content.ContentResolver: java.io.InputStream openInputStream(android.net.Uri)>(r0);

     label2:
        return r15;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to open directly; attempting failover: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("RingtoneManager", $r8);

        $r9 = virtualinvoke r13.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/media/AudioManager;");

        $r10 = (android.media.AudioManager) $r9;

        r17 = virtualinvoke $r10.<android.media.AudioManager: android.media.IRingtonePlayer getRingtonePlayer()>();

     label4:
        $r11 = new android.os.ParcelFileDescriptor$AutoCloseInputStream;

        $r12 = interfaceinvoke r17.<android.media.IRingtonePlayer: android.os.ParcelFileDescriptor openRingtone(android.net.Uri)>(r0);

        specialinvoke $r11.<android.os.ParcelFileDescriptor$AutoCloseInputStream: void <init>(android.os.ParcelFileDescriptor)>($r12);

     label5:
        return $r11;

     label6:
        $r2 := @caughtexception;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.Throwable)>($r2);

        throw $r3;

        catch java.lang.SecurityException from label1 to label2 with label3;
        catch java.io.IOException from label1 to label2 with label3;
        catch java.lang.Exception from label4 to label5 with label6;
    }

    private android.database.Cursor query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String)
    {
        android.media.RingtoneManager r0;
        android.net.Uri r1;
        java.lang.String[] r2, r4;
        java.lang.String r3, r5;
        android.content.Context $r6;
        android.database.Cursor $r7;

        r0 := @this: android.media.RingtoneManager;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String[];

        r5 := @parameter4: java.lang.String;

        $r6 = r0.<android.media.RingtoneManager: android.content.Context mContext>;

        $r7 = specialinvoke r0.<android.media.RingtoneManager: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.content.Context)>(r1, r2, r3, r4, r5, $r6);

        return $r7;
    }

    private android.database.Cursor query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, android.content.Context)
    {
        android.media.RingtoneManager r0;
        android.net.Uri r1;
        java.lang.String[] r2, r4;
        java.lang.String r3, r5;
        android.content.Context r6;
        android.app.Activity r7;
        android.content.ContentResolver $r8;
        android.database.Cursor $r9, $r10;

        r0 := @this: android.media.RingtoneManager;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String[];

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: android.content.Context;

        r7 = r0.<android.media.RingtoneManager: android.app.Activity mActivity>;

        if r7 == null goto label1;

        $r10 = virtualinvoke r7.<android.app.Activity: android.database.Cursor managedQuery(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>(r1, r2, r3, r4, r5);

        return $r10;

     label1:
        $r8 = virtualinvoke r6.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r9 = virtualinvoke $r8.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>(r1, r2, r3, r4, r5);

        return $r9;
    }

    public static void setActualDefaultRingtoneUri(android.content.Context, int, android.net.Uri)
    {
        int i0, $i1, $i2, $i3, $i4, $i6;
        java.lang.String r0, $r7, r14;
        android.content.ContentResolver r1;
        boolean $z0;
        java.lang.Throwable $r2, $r3, $r8, $r9, $r10;
        java.lang.StringBuilder $r4;
        android.content.Context r11;
        android.net.Uri r12, r13, r15;
        java.io.InputStream r16;
        java.io.OutputStream r17;

        r11 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        r12 := @parameter2: android.net.Uri;

        r0 = staticinvoke <android.media.RingtoneManager: java.lang.String getSettingForType(int)>(i0);

        if r0 != null goto label01;

        return;

     label01:
        r1 = virtualinvoke r11.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i1 = virtualinvoke r11.<android.content.Context: int getUserId()>();

        $i2 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "sync_parent_sounds", 0, $i1);

        if $i2 != 1 goto label02;

        staticinvoke <android.media.RingtoneManager: void disableSyncFromParent(android.content.Context)>(r11);

     label02:
        r13 = r12;

        $z0 = staticinvoke <android.media.RingtoneManager: boolean isInternalRingtoneUri(android.net.Uri)>(r12);

        if $z0 != 0 goto label03;

        $i6 = virtualinvoke r11.<android.content.Context: int getUserId()>();

        r13 = staticinvoke <android.content.ContentProvider: android.net.Uri maybeAddUserId(android.net.Uri,int)>(r12, $i6);

     label03:
        if r13 == null goto label04;

        r14 = virtualinvoke r13.<android.net.Uri: java.lang.String toString()>();

        goto label05;

     label04:
        r14 = null;

     label05:
        $i3 = virtualinvoke r11.<android.content.Context: int getUserId()>();

        staticinvoke <android.provider.Settings$System: boolean putStringForUser(android.content.ContentResolver,java.lang.String,java.lang.String,int)>(r1, r0, r14, $i3);

        if r13 == null goto label27;

        $i4 = virtualinvoke r11.<android.content.Context: int getUserId()>();

        r15 = staticinvoke <android.media.RingtoneManager: android.net.Uri getCacheForType(int,int)>(i0, $i4);

     label06:
        r16 = staticinvoke <android.media.RingtoneManager: java.io.InputStream openRingtone(android.content.Context,android.net.Uri)>(r11, r13);

     label07:
        r17 = virtualinvoke r1.<android.content.ContentResolver: java.io.OutputStream openOutputStream(android.net.Uri)>(r15);

     label08:
        staticinvoke <android.os.FileUtils: long copy(java.io.InputStream,java.io.OutputStream)>(r16, r17);

     label09:
        if r17 == null goto label11;

     label10:
        virtualinvoke r17.<java.io.OutputStream: void close()>();

     label11:
        if r16 == null goto label13;

     label12:
        virtualinvoke r16.<java.io.InputStream: void close()>();

     label13:
        goto label27;

     label14:
        $r8 := @caughtexception;

        if r17 == null goto label19;

     label15:
        virtualinvoke r17.<java.io.OutputStream: void close()>();

     label16:
        goto label19;

     label17:
        $r10 := @caughtexception;

     label18:
        virtualinvoke $r8.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r10);

     label19:
        throw $r8;

     label20:
        $r2 := @caughtexception;

        if r16 == null goto label25;

     label21:
        virtualinvoke r16.<java.io.InputStream: void close()>();

     label22:
        goto label25;

     label23:
        $r9 := @caughtexception;

     label24:
        virtualinvoke $r2.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r9);

     label25:
        throw $r2;

     label26:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to cache ringtone: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("RingtoneManager", $r7);

     label27:
        return;

        catch java.io.IOException from label06 to label07 with label26;
        catch java.lang.Throwable from label07 to label08 with label20;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label10 to label11 with label20;
        catch java.io.IOException from label12 to label13 with label26;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label19 to label20 with label20;
        catch java.lang.Throwable from label21 to label22 with label23;
        catch java.io.IOException from label24 to label25 with label26;
        catch java.io.IOException from label25 to label26 with label26;
    }

    private void setFilterColumnsList(int)
    {
        android.media.RingtoneManager r0;
        int i0, $i1, $i2, $i3;
        java.util.List r1;

        r0 := @this: android.media.RingtoneManager;

        i0 := @parameter0: int;

        r1 = r0.<android.media.RingtoneManager: java.util.List mFilterColumns>;

        interfaceinvoke r1.<java.util.List: void clear()>();

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("is_ringtone");

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("is_notification");

     label2:
        $i3 = i0 & 4;

        if $i3 == 0 goto label3;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("is_alarm");

     label3:
        return;
    }

    public android.net.Uri addCustomExternalRingtone(android.net.Uri, int) throws java.io.FileNotFoundException, java.lang.IllegalArgumentException, java.io.IOException
    {
        android.media.RingtoneManager r0;
        int i0;
        java.lang.String r1, $r2, $r11, $r12, $r13, r24;
        boolean $z0, $z1, $z2;
        java.io.IOException $r3;
        android.content.Context $r4, $r14, $r16, r25;
        android.content.ContentResolver $r5, $r15, $r17;
        java.lang.StringBuilder $r6;
        java.lang.IllegalArgumentException $r10;
        android.net.Uri $r18, r23;
        java.lang.Throwable $r19, $r20, $r21, $r22;
        java.io.File r26;
        java.io.InputStream r27;
        java.io.FileOutputStream r28;

        r0 := @this: android.media.RingtoneManager;

        r23 := @parameter0: android.net.Uri;

        i0 := @parameter1: int;

        $r2 = staticinvoke <android.os.Environment: java.lang.String getExternalStorageState()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("mounted");

        if $z0 == 0 goto label19;

        $r4 = r0.<android.media.RingtoneManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r24 = virtualinvoke $r5.<android.content.ContentResolver: java.lang.String getType(android.net.Uri)>(r23);

        if r24 == null goto label18;

        $z1 = virtualinvoke r24.<java.lang.String: boolean startsWith(java.lang.String)>("audio/");

        if $z1 != 0 goto label01;

        $z2 = virtualinvoke r24.<java.lang.String: boolean equals(java.lang.Object)>("application/ogg");

        if $z2 == 0 goto label18;

     label01:
        r1 = staticinvoke <android.media.RingtoneManager: java.lang.String getExternalDirectoryForType(int)>(i0);

        r25 = r0.<android.media.RingtoneManager: android.content.Context mContext>;

        $r12 = staticinvoke <android.media.Utils: java.lang.String getFileDisplayNameFromUri(android.content.Context,android.net.Uri)>(r25, r23);

        $r13 = staticinvoke <android.os.FileUtils: java.lang.String buildValidFatFilename(java.lang.String)>($r12);

        r26 = staticinvoke <android.media.Utils: java.io.File getUniqueExternalFile(android.content.Context,java.lang.String,java.lang.String,java.lang.String)>(r25, r1, $r13, r24);

        $r14 = r0.<android.media.RingtoneManager: android.content.Context mContext>;

        $r15 = virtualinvoke $r14.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r27 = virtualinvoke $r15.<android.content.ContentResolver: java.io.InputStream openInputStream(android.net.Uri)>(r23);

     label02:
        r28 = new java.io.FileOutputStream;

        specialinvoke r28.<java.io.FileOutputStream: void <init>(java.io.File)>(r26);

     label03:
        staticinvoke <android.os.FileUtils: long copy(java.io.InputStream,java.io.OutputStream)>(r27, r28);

     label04:
        virtualinvoke r28.<java.io.OutputStream: void close()>();

     label05:
        if r27 == null goto label06;

        virtualinvoke r27.<java.io.InputStream: void close()>();

     label06:
        $r16 = r0.<android.media.RingtoneManager: android.content.Context mContext>;

        $r17 = virtualinvoke $r16.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r18 = staticinvoke <android.provider.MediaStore: android.net.Uri scanFile(android.content.ContentResolver,java.io.File)>($r17, r26);

        return $r18;

     label07:
        $r21 := @caughtexception;

     label08:
        virtualinvoke r28.<java.io.OutputStream: void close()>();

     label09:
        goto label12;

     label10:
        $r22 := @caughtexception;

     label11:
        virtualinvoke $r21.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r22);

     label12:
        throw $r21;

     label13:
        $r20 := @caughtexception;

        if r27 == null goto label17;

     label14:
        virtualinvoke r27.<java.io.InputStream: void close()>();

     label15:
        goto label17;

     label16:
        $r19 := @caughtexception;

        virtualinvoke $r20.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r19);

     label17:
        throw $r20;

     label18:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ringtone file must have MIME type \"audio/*\". Given file has MIME type \"");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r24);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r10;

     label19:
        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("External storage is not mounted. Unable to install ringtones.");

        throw $r3;

        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label14 to label15 with label16;
    }

    public android.database.Cursor getCursor()
    {
        android.media.RingtoneManager r0;
        java.util.ArrayList $r2;
        android.database.Cursor $r3, $r4, $r5, r6, r7;
        boolean $z2, $z4;
        com.android.internal.database.SortCursor $r8;
        int $i0;
        android.database.Cursor[] $r9, $r11;
        java.lang.Object[] $r10;

        r0 := @this: android.media.RingtoneManager;

        r6 = r0.<android.media.RingtoneManager: android.database.Cursor mCursor>;

        if r6 == null goto label1;

        $z4 = interfaceinvoke r6.<android.database.Cursor: boolean requery()>();

        if $z4 == 0 goto label1;

        $r5 = r0.<android.media.RingtoneManager: android.database.Cursor mCursor>;

        return $r5;

     label1:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = specialinvoke r0.<android.media.RingtoneManager: android.database.Cursor getInternalRingtones()>();

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        $r4 = specialinvoke r0.<android.media.RingtoneManager: android.database.Cursor getMediaRingtones()>();

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        $z2 = r0.<android.media.RingtoneManager: boolean mIncludeParentRingtones>;

        if $z2 == 0 goto label2;

        r7 = specialinvoke r0.<android.media.RingtoneManager: android.database.Cursor getParentProfileRingtones()>();

        if r7 == null goto label2;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r7);

     label2:
        $r8 = new com.android.internal.database.SortCursor;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        $r9 = newarray (android.database.Cursor)[$i0];

        $r10 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        $r11 = (android.database.Cursor[]) $r10;

        specialinvoke $r8.<com.android.internal.database.SortCursor: void <init>(android.database.Cursor[],java.lang.String)>($r11, "title_key");

        r0.<android.media.RingtoneManager: android.database.Cursor mCursor> = $r8;

        return $r8;
    }

    public boolean getIncludeDrm()
    {
        android.media.RingtoneManager r0;

        r0 := @this: android.media.RingtoneManager;

        return 0;
    }

    public android.media.Ringtone getRingtone(int)
    {
        android.media.RingtoneManager r0;
        int i0, $i1;
        boolean $z0;
        android.media.Ringtone r1, r4;
        android.content.Context $r2;
        android.net.Uri $r3;

        r0 := @this: android.media.RingtoneManager;

        i0 := @parameter0: int;

        $z0 = r0.<android.media.RingtoneManager: boolean mStopPreviousRingtone>;

        if $z0 == 0 goto label1;

        r1 = r0.<android.media.RingtoneManager: android.media.Ringtone mPreviousRingtone>;

        if r1 == null goto label1;

        virtualinvoke r1.<android.media.Ringtone: void stop()>();

     label1:
        $r2 = r0.<android.media.RingtoneManager: android.content.Context mContext>;

        $r3 = virtualinvoke r0.<android.media.RingtoneManager: android.net.Uri getRingtoneUri(int)>(i0);

        $i1 = virtualinvoke r0.<android.media.RingtoneManager: int inferStreamType()>();

        r4 = staticinvoke <android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri,int)>($r2, $r3, $i1);

        r0.<android.media.RingtoneManager: android.media.Ringtone mPreviousRingtone> = r4;

        return r4;
    }

    public int getRingtonePosition(android.net.Uri)
    {
        android.media.RingtoneManager r0;
        long l0, $l2;
        int i1;
        boolean $z1;
        byte $b3;
        java.lang.Throwable $r1;
        android.net.Uri r2;
        android.database.Cursor r3;

        r0 := @this: android.media.RingtoneManager;

        r2 := @parameter0: android.net.Uri;

        if r2 != null goto label1;

        return -1;

     label1:
        l0 = staticinvoke <android.content.ContentUris: long parseId(android.net.Uri)>(r2);

        r3 = virtualinvoke r0.<android.media.RingtoneManager: android.database.Cursor getCursor()>();

        interfaceinvoke r3.<android.database.Cursor: boolean moveToPosition(int)>(-1);

     label2:
        $z1 = interfaceinvoke r3.<android.database.Cursor: boolean moveToNext()>();

        if $z1 == 0 goto label4;

        $l2 = interfaceinvoke r3.<android.database.Cursor: long getLong(int)>(0);

        $b3 = l0 cmp $l2;

        if $b3 != 0 goto label2;

        i1 = interfaceinvoke r3.<android.database.Cursor: int getPosition()>();

     label3:
        return i1;

     label4:
        goto label6;

     label5:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("RingtoneManager", "NumberFormatException while getting ringtone position, returning -1", $r1);

     label6:
        return -1;

        catch java.lang.NumberFormatException from label1 to label2 with label5;
        catch java.lang.NumberFormatException from label2 to label3 with label5;
    }

    public android.net.Uri getRingtoneUri(int)
    {
        android.media.RingtoneManager r0;
        int i0;
        android.database.Cursor r1, $r2;
        boolean $z0;
        android.content.Context $r3;
        android.net.Uri $r4;

        r0 := @this: android.media.RingtoneManager;

        i0 := @parameter0: int;

        r1 = r0.<android.media.RingtoneManager: android.database.Cursor mCursor>;

        if r1 == null goto label2;

        $z0 = interfaceinvoke r1.<android.database.Cursor: boolean moveToPosition(int)>(i0);

        if $z0 != 0 goto label1;

        goto label2;

     label1:
        $r3 = r0.<android.media.RingtoneManager: android.content.Context mContext>;

        $r2 = r0.<android.media.RingtoneManager: android.database.Cursor mCursor>;

        $r4 = staticinvoke <android.media.RingtoneManager: android.net.Uri getUriFromCursor(android.content.Context,android.database.Cursor)>($r3, $r2);

        return $r4;

     label2:
        return null;
    }

    public boolean getStopPreviousRingtone()
    {
        android.media.RingtoneManager r0;
        boolean $z0;

        r0 := @this: android.media.RingtoneManager;

        $z0 = r0.<android.media.RingtoneManager: boolean mStopPreviousRingtone>;

        return $z0;
    }

    public boolean hasHapticChannels(int)
    {
        android.media.RingtoneManager r0;
        int i0;
        android.net.Uri $r1;
        boolean $z0;

        r0 := @this: android.media.RingtoneManager;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<android.media.RingtoneManager: android.net.Uri getRingtoneUri(int)>(i0);

        $z0 = staticinvoke <android.media.RingtoneManager: boolean hasHapticChannels(android.net.Uri)>($r1);

        return $z0;
    }

    public int inferStreamType()
    {
        android.media.RingtoneManager r0;
        int i0;

        r0 := @this: android.media.RingtoneManager;

        i0 = r0.<android.media.RingtoneManager: int mType>;

        if i0 == 2 goto label2;

        if i0 == 4 goto label1;

        return 2;

     label1:
        return 4;

     label2:
        return 5;
    }

    public void setIncludeDrm(boolean)
    {
        android.media.RingtoneManager r0;
        boolean z0;

        r0 := @this: android.media.RingtoneManager;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("RingtoneManager", "setIncludeDrm no longer supported");

     label1:
        return;
    }

    public void setStopPreviousRingtone(boolean)
    {
        android.media.RingtoneManager r0;
        boolean z0;

        r0 := @this: android.media.RingtoneManager;

        z0 := @parameter0: boolean;

        r0.<android.media.RingtoneManager: boolean mStopPreviousRingtone> = z0;

        return;
    }

    public void setType(int)
    {
        android.media.RingtoneManager r0;
        int i0;
        android.database.Cursor $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: android.media.RingtoneManager;

        i0 := @parameter0: int;

        $r1 = r0.<android.media.RingtoneManager: android.database.Cursor mCursor>;

        if $r1 != null goto label1;

        r0.<android.media.RingtoneManager: int mType> = i0;

        specialinvoke r0.<android.media.RingtoneManager: void setFilterColumnsList(int)>(i0);

        return;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Setting filter columns should be done before querying for ringtones.");

        throw $r2;
    }

    public void stopPreviousRingtone()
    {
        android.media.RingtoneManager r0;
        android.media.Ringtone r1;

        r0 := @this: android.media.RingtoneManager;

        r1 = r0.<android.media.RingtoneManager: android.media.Ringtone mPreviousRingtone>;

        if r1 == null goto label1;

        virtualinvoke r1.<android.media.Ringtone: void stop()>();

     label1:
        return;
    }
}
