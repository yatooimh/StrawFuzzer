public class android.media.SoundPool extends android.media.PlayerBase
{
    private static final boolean DEBUG;
    private static final int SAMPLE_LOADED;
    private static final java.lang.String TAG;
    private final android.media.AudioAttributes mAttributes;
    private final java.util.concurrent.atomic.AtomicReference mEventHandler;
    private boolean mHasAppOpsPlayAudio;
    private long mNativeContext;

    static void <clinit>()
    {
        boolean $z0;

        <android.media.SoundPool: java.lang.String TAG> = "SoundPool";

        <android.media.SoundPool: int SAMPLE_LOADED> = 1;

        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("soundpool");

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("SoundPool", 3);

        <android.media.SoundPool: boolean DEBUG> = $z0;

        return;
    }

    public void <init>(int, int, int)
    {
        android.media.SoundPool r0;
        int i0, i1, i2;
        android.media.AudioAttributes$Builder $r1, $r2;
        android.media.AudioAttributes $r3;

        r0 := @this: android.media.SoundPool;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r1 = new android.media.AudioAttributes$Builder;

        specialinvoke $r1.<android.media.AudioAttributes$Builder: void <init>()>();

        $r2 = virtualinvoke $r1.<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setInternalLegacyStreamType(int)>(i1);

        $r3 = virtualinvoke $r2.<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>();

        specialinvoke r0.<android.media.SoundPool: void <init>(int,android.media.AudioAttributes)>(i0, $r3);

        staticinvoke <android.media.PlayerBase: void deprecateStreamTypeForPlayback(int,java.lang.String,java.lang.String)>(i1, "SoundPool", "SoundPool()");

        return;
    }

    private void <init>(int, android.media.AudioAttributes)
    {
        android.media.SoundPool r0;
        int i0, $i1;
        android.media.AudioAttributes r1;
        java.util.concurrent.atomic.AtomicReference $r2;
        java.lang.ref.WeakReference $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.media.SoundPool;

        i0 := @parameter0: int;

        r1 := @parameter1: android.media.AudioAttributes;

        specialinvoke r0.<android.media.PlayerBase: void <init>(android.media.AudioAttributes,int)>(r1, 3);

        $r2 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>(null);

        r0.<android.media.SoundPool: java.util.concurrent.atomic.AtomicReference mEventHandler> = $r2;

        $r3 = new java.lang.ref.WeakReference;

        specialinvoke $r3.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r0);

        $i1 = specialinvoke r0.<android.media.SoundPool: int native_setup(java.lang.Object,int,java.lang.Object)>($r3, i0, r1);

        if $i1 != 0 goto label1;

        r0.<android.media.SoundPool: android.media.AudioAttributes mAttributes> = r1;

        virtualinvoke r0.<android.media.SoundPool: void baseRegisterPlayer()>();

        return;

     label1:
        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Native setup failed");

        throw $r4;
    }

    void <init>(int, android.media.AudioAttributes, android.media.SoundPool$1)
    {
        android.media.SoundPool r0;
        int i0;
        android.media.AudioAttributes r1;
        android.media.SoundPool$1 r2;

        r0 := @this: android.media.SoundPool;

        i0 := @parameter0: int;

        r1 := @parameter1: android.media.AudioAttributes;

        r2 := @parameter2: android.media.SoundPool$1;

        specialinvoke r0.<android.media.SoundPool: void <init>(int,android.media.AudioAttributes)>(i0, r1);

        return;
    }

    private final native int _load(java.io.FileDescriptor, long, long, int);

    private final native void _mute(boolean);

    private final native int _play(int, float, float, int, int, float);

    private final native void _setVolume(int, float, float);

    static boolean access$000()
    {
        boolean $z0;

        $z0 = <android.media.SoundPool: boolean DEBUG>;

        return $z0;
    }

    private final native void native_release();

    private final native int native_setup(java.lang.Object, int, java.lang.Object);

    private static void postEventFromNative(java.lang.Object, int, int, int, java.lang.Object)
    {
        int i0, i1, i2;
        java.lang.Object r0, $r2, $r4, r6;
        java.lang.ref.WeakReference $r1;
        java.util.concurrent.atomic.AtomicReference $r3;
        android.os.Message $r5;
        android.media.SoundPool r7;
        android.os.Handler r8;

        r6 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r0 := @parameter4: java.lang.Object;

        $r1 = (java.lang.ref.WeakReference) r6;

        $r2 = virtualinvoke $r1.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r7 = (android.media.SoundPool) $r2;

        if r7 != null goto label1;

        return;

     label1:
        $r3 = r7.<android.media.SoundPool: java.util.concurrent.atomic.AtomicReference mEventHandler>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r8 = (android.os.Handler) $r4;

        if r8 != null goto label2;

        return;

     label2:
        $r5 = virtualinvoke r8.<android.os.Handler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(i0, i1, i2, r0);

        virtualinvoke r8.<android.os.Handler: boolean sendMessage(android.os.Message)>($r5);

        return;
    }

    public final native void autoPause();

    public final native void autoResume();

    protected void finalize()
    {
        android.media.SoundPool r0;

        r0 := @this: android.media.SoundPool;

        virtualinvoke r0.<android.media.SoundPool: void release()>();

        return;
    }

    public int load(android.content.Context, int, int)
    {
        android.media.SoundPool r0;
        int i0, i3, i4;
        android.content.res.Resources $r1;
        java.io.FileDescriptor $r2;
        long $l1, $l2;
        java.lang.Throwable $r3;
        android.content.Context r4;
        android.content.res.AssetFileDescriptor r5;

        r0 := @this: android.media.SoundPool;

        r4 := @parameter0: android.content.Context;

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        $r1 = virtualinvoke r4.<android.content.Context: android.content.res.Resources getResources()>();

        r5 = virtualinvoke $r1.<android.content.res.Resources: android.content.res.AssetFileDescriptor openRawResourceFd(int)>(i3);

        i4 = 0;

        if r5 == null goto label4;

        $r2 = virtualinvoke r5.<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        $l1 = virtualinvoke r5.<android.content.res.AssetFileDescriptor: long getStartOffset()>();

        $l2 = virtualinvoke r5.<android.content.res.AssetFileDescriptor: long getLength()>();

        i4 = specialinvoke r0.<android.media.SoundPool: int _load(java.io.FileDescriptor,long,long,int)>($r2, $l1, $l2, i0);

     label1:
        virtualinvoke r5.<android.content.res.AssetFileDescriptor: void close()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return i4;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public int load(android.content.res.AssetFileDescriptor, int)
    {
        android.media.SoundPool r0;
        android.content.res.AssetFileDescriptor r1;
        int i0, $i4;
        long l1, $l3;
        byte $b2;
        android.util.AndroidRuntimeException $r2;
        java.io.FileDescriptor $r3;

        r0 := @this: android.media.SoundPool;

        r1 := @parameter0: android.content.res.AssetFileDescriptor;

        i0 := @parameter1: int;

        if r1 == null goto label2;

        l1 = virtualinvoke r1.<android.content.res.AssetFileDescriptor: long getLength()>();

        $b2 = l1 cmp 0L;

        if $b2 < 0 goto label1;

        $r3 = virtualinvoke r1.<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        $l3 = virtualinvoke r1.<android.content.res.AssetFileDescriptor: long getStartOffset()>();

        $i4 = specialinvoke r0.<android.media.SoundPool: int _load(java.io.FileDescriptor,long,long,int)>($r3, $l3, l1, i0);

        return $i4;

     label1:
        $r2 = new android.util.AndroidRuntimeException;

        specialinvoke $r2.<android.util.AndroidRuntimeException: void <init>(java.lang.String)>("no length for fd");

        throw $r2;

     label2:
        return 0;
    }

    public int load(java.io.FileDescriptor, long, long, int)
    {
        android.media.SoundPool r0;
        java.io.FileDescriptor r1;
        long l0, l1;
        int i2, $i3;

        r0 := @this: android.media.SoundPool;

        r1 := @parameter0: java.io.FileDescriptor;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        i2 := @parameter3: int;

        $i3 = specialinvoke r0.<android.media.SoundPool: int _load(java.io.FileDescriptor,long,long,int)>(r1, l0, l1, i2);

        return $i3;
    }

    public int load(java.lang.String, int)
    {
        android.media.SoundPool r0;
        java.lang.String r1, $r8;
        android.os.ParcelFileDescriptor r2;
        java.io.FileDescriptor $r3;
        long $l2;
        java.lang.Throwable $r4;
        java.lang.StringBuilder $r5;
        int i4, i5, i6;
        java.io.File r9;

        r0 := @this: android.media.SoundPool;

        r1 := @parameter0: java.lang.String;

        i4 := @parameter1: int;

        i5 = 0;

     label01:
        r9 = new java.io.File;

     label02:
        i5 = 0;

     label03:
        specialinvoke r9.<java.io.File: void <init>(java.lang.String)>(r1);

     label04:
        i5 = 0;

     label05:
        r2 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int)>(r9, 268435456);

     label06:
        i5 = 0;

        if r2 == null goto label11;

        i5 = 0;

     label07:
        $r3 = virtualinvoke r2.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        $l2 = virtualinvoke r9.<java.io.File: long length()>();

        i6 = specialinvoke r0.<android.media.SoundPool: int _load(java.io.FileDescriptor,long,long,int)>($r3, 0L, $l2, i4);

     label08:
        i5 = i6;

     label09:
        virtualinvoke r2.<android.os.ParcelFileDescriptor: void close()>();

     label10:
        i5 = i6;

     label11:
        goto label13;

     label12:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("error loading ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("SoundPool", $r8);

     label13:
        return i5;

        catch java.io.IOException from label01 to label02 with label12;
        catch java.io.IOException from label03 to label04 with label12;
        catch java.io.IOException from label05 to label06 with label12;
        catch java.io.IOException from label07 to label08 with label12;
        catch java.io.IOException from label09 to label10 with label12;
    }

    public final native void pause(int);

    public final int play(int, float, float, int, int, float)
    {
        android.media.SoundPool r0;
        int i0, i1, i2, $i3;
        float f0, f1, f2;

        r0 := @this: android.media.SoundPool;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        f2 := @parameter5: float;

        virtualinvoke r0.<android.media.SoundPool: void baseStart()>();

        $i3 = specialinvoke r0.<android.media.SoundPool: int _play(int,float,float,int,int,float)>(i0, f0, f1, i1, i2, f2);

        return $i3;
    }

    int playerApplyVolumeShaper(android.media.VolumeShaper$Configuration, android.media.VolumeShaper$Operation)
    {
        android.media.SoundPool r0;
        android.media.VolumeShaper$Configuration r1;
        android.media.VolumeShaper$Operation r2;

        r0 := @this: android.media.SoundPool;

        r1 := @parameter0: android.media.VolumeShaper$Configuration;

        r2 := @parameter1: android.media.VolumeShaper$Operation;

        return -1;
    }

    android.media.VolumeShaper$State playerGetVolumeShaperState(int)
    {
        android.media.SoundPool r0;
        int i0;

        r0 := @this: android.media.SoundPool;

        i0 := @parameter0: int;

        return null;
    }

    void playerPause()
    {
        android.media.SoundPool r0;

        r0 := @this: android.media.SoundPool;

        return;
    }

    int playerSetAuxEffectSendLevel(boolean, float)
    {
        android.media.SoundPool r0;
        boolean z0;
        float f0;

        r0 := @this: android.media.SoundPool;

        z0 := @parameter0: boolean;

        f0 := @parameter1: float;

        return 0;
    }

    void playerSetVolume(boolean, float, float)
    {
        android.media.SoundPool r0;
        boolean z0;
        float f0, f1;

        r0 := @this: android.media.SoundPool;

        z0 := @parameter0: boolean;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        specialinvoke r0.<android.media.SoundPool: void _mute(boolean)>(z0);

        return;
    }

    void playerStart()
    {
        android.media.SoundPool r0;

        r0 := @this: android.media.SoundPool;

        return;
    }

    void playerStop()
    {
        android.media.SoundPool r0;

        r0 := @this: android.media.SoundPool;

        return;
    }

    public final void release()
    {
        android.media.SoundPool r0;

        r0 := @this: android.media.SoundPool;

        virtualinvoke r0.<android.media.SoundPool: void baseRelease()>();

        specialinvoke r0.<android.media.SoundPool: void native_release()>();

        return;
    }

    public final native void resume(int);

    public final native void setLoop(int, int);

    public void setOnLoadCompleteListener(android.media.SoundPool$OnLoadCompleteListener)
    {
        android.media.SoundPool r0;
        android.media.SoundPool$OnLoadCompleteListener r1;
        java.util.concurrent.atomic.AtomicReference $r2, $r4, $r6, $r7;
        android.media.SoundPool$EventHandler $r3, $r5;
        android.os.Looper r8, r9;

        r0 := @this: android.media.SoundPool;

        r1 := @parameter0: android.media.SoundPool$OnLoadCompleteListener;

        if r1 != null goto label1;

        $r7 = r0.<android.media.SoundPool: java.util.concurrent.atomic.AtomicReference mEventHandler>;

        virtualinvoke $r7.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(null);

        return;

     label1:
        r8 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if r8 == null goto label2;

        $r6 = r0.<android.media.SoundPool: java.util.concurrent.atomic.AtomicReference mEventHandler>;

        $r5 = new android.media.SoundPool$EventHandler;

        specialinvoke $r5.<android.media.SoundPool$EventHandler: void <init>(android.media.SoundPool,android.os.Looper,android.media.SoundPool$OnLoadCompleteListener)>(r0, r8, r1);

        virtualinvoke $r6.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r5);

        goto label4;

     label2:
        r9 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        if r9 == null goto label3;

        $r4 = r0.<android.media.SoundPool: java.util.concurrent.atomic.AtomicReference mEventHandler>;

        $r3 = new android.media.SoundPool$EventHandler;

        specialinvoke $r3.<android.media.SoundPool$EventHandler: void <init>(android.media.SoundPool,android.os.Looper,android.media.SoundPool$OnLoadCompleteListener)>(r0, r9, r1);

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r3);

        goto label4;

     label3:
        $r2 = r0.<android.media.SoundPool: java.util.concurrent.atomic.AtomicReference mEventHandler>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(null);

     label4:
        return;
    }

    public final native void setPriority(int, int);

    public final native void setRate(int, float);

    public void setVolume(int, float)
    {
        android.media.SoundPool r0;
        int i0;
        float f0;

        r0 := @this: android.media.SoundPool;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        virtualinvoke r0.<android.media.SoundPool: void setVolume(int,float,float)>(i0, f0, f0);

        return;
    }

    public final void setVolume(int, float, float)
    {
        android.media.SoundPool r0;
        int i0;
        float f0, f1;

        r0 := @this: android.media.SoundPool;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        specialinvoke r0.<android.media.SoundPool: void _setVolume(int,float,float)>(i0, f0, f1);

        return;
    }

    public final native void stop(int);

    public final native boolean unload(int);
}
