public final class android.media.VolumeShaper$Configuration extends java.lang.Object implements android.os.Parcelable
{
    public static final android.os.Parcelable$Creator CREATOR;
    public static final android.media.VolumeShaper$Configuration CUBIC_RAMP;
    public static final int INTERPOLATOR_TYPE_CUBIC;
    public static final int INTERPOLATOR_TYPE_CUBIC_MONOTONIC;
    public static final int INTERPOLATOR_TYPE_LINEAR;
    public static final int INTERPOLATOR_TYPE_STEP;
    public static final android.media.VolumeShaper$Configuration LINEAR_RAMP;
    private static final int MAXIMUM_CURVE_POINTS;
    public static final int OPTION_FLAG_CLOCK_TIME;
    private static final int OPTION_FLAG_PUBLIC_ALL;
    public static final int OPTION_FLAG_VOLUME_IN_DBFS;
    public static final android.media.VolumeShaper$Configuration SCURVE_RAMP;
    public static final android.media.VolumeShaper$Configuration SINE_RAMP;
    static final int TYPE_ID;
    static final int TYPE_SCALE;
    private final double mDurationMs;
    private final int mId;
    private final int mInterpolatorType;
    private final int mOptionFlags;
    private final float[] mTimes;
    private final int mType;
    private final float[] mVolumes;

    static void <clinit>()
    {
        float[] r0, r1, r2, $r5, $r6, $r12, $r13;
        float f0, $f1, $f2, $f3, $f4;
        android.media.VolumeShaper$Configuration$Builder $r3, $r4, $r7, $r8, $r10, $r11, $r14, $r15, $r17, $r18, $r19, $r20, $r22, $r23, $r24, $r25;
        android.media.VolumeShaper$Configuration $r9, $r16, $r21, $r26;
        android.media.VolumeShaper$Configuration$1 $r27;
        double $d0, $d1, $d2, $d3;
        int i0;

        <android.media.VolumeShaper$Configuration: int TYPE_SCALE> = 1;

        <android.media.VolumeShaper$Configuration: int TYPE_ID> = 0;

        <android.media.VolumeShaper$Configuration: int OPTION_FLAG_VOLUME_IN_DBFS> = 1;

        <android.media.VolumeShaper$Configuration: int OPTION_FLAG_PUBLIC_ALL> = 3;

        <android.media.VolumeShaper$Configuration: int OPTION_FLAG_CLOCK_TIME> = 2;

        <android.media.VolumeShaper$Configuration: int MAXIMUM_CURVE_POINTS> = 16;

        <android.media.VolumeShaper$Configuration: int INTERPOLATOR_TYPE_STEP> = 0;

        <android.media.VolumeShaper$Configuration: int INTERPOLATOR_TYPE_LINEAR> = 1;

        <android.media.VolumeShaper$Configuration: int INTERPOLATOR_TYPE_CUBIC_MONOTONIC> = 3;

        <android.media.VolumeShaper$Configuration: int INTERPOLATOR_TYPE_CUBIC> = 2;

        $r3 = new android.media.VolumeShaper$Configuration$Builder;

        specialinvoke $r3.<android.media.VolumeShaper$Configuration$Builder: void <init>()>();

        $r4 = virtualinvoke $r3.<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration$Builder setInterpolatorType(int)>(1);

        $r5 = newarray (float)[2];

        $r5[0] = 0.0F;

        $r5[1] = 1.0F;

        $r6 = newarray (float)[2];

        $r6[0] = 0.0F;

        $r6[1] = 1.0F;

        $r7 = virtualinvoke $r4.<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration$Builder setCurve(float[],float[])>($r5, $r6);

        $r8 = virtualinvoke $r7.<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration$Builder setDuration(long)>(1000L);

        $r9 = virtualinvoke $r8.<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration build()>();

        <android.media.VolumeShaper$Configuration: android.media.VolumeShaper$Configuration LINEAR_RAMP> = $r9;

        $r10 = new android.media.VolumeShaper$Configuration$Builder;

        specialinvoke $r10.<android.media.VolumeShaper$Configuration$Builder: void <init>()>();

        $r11 = virtualinvoke $r10.<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration$Builder setInterpolatorType(int)>(2);

        $r12 = newarray (float)[2];

        $r12[0] = 0.0F;

        $r12[1] = 1.0F;

        $r13 = newarray (float)[2];

        $r13[0] = 0.0F;

        $r13[1] = 1.0F;

        $r14 = virtualinvoke $r11.<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration$Builder setCurve(float[],float[])>($r12, $r13);

        $r15 = virtualinvoke $r14.<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration$Builder setDuration(long)>(1000L);

        $r16 = virtualinvoke $r15.<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration build()>();

        <android.media.VolumeShaper$Configuration: android.media.VolumeShaper$Configuration CUBIC_RAMP> = $r16;

        r0 = newarray (float)[16];

        r1 = newarray (float)[16];

        r2 = newarray (float)[16];

        i0 = 0;

     label1:
        if i0 >= 16 goto label2;

        $f1 = (float) i0;

        $f2 = $f1 / 15.0F;

        r0[i0] = $f2;

        $f3 = r0[i0];

        $d0 = (double) $f3;

        $d1 = $d0 * 3.141592653589793;

        $d2 = $d1 / 2.0;

        $d3 = staticinvoke <java.lang.Math: double sin(double)>($d2);

        f0 = (float) $d3;

        r1[i0] = f0;

        $f4 = f0 * f0;

        r2[i0] = $f4;

        i0 = i0 + 1;

        goto label1;

     label2:
        $r17 = new android.media.VolumeShaper$Configuration$Builder;

        specialinvoke $r17.<android.media.VolumeShaper$Configuration$Builder: void <init>()>();

        $r18 = virtualinvoke $r17.<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration$Builder setInterpolatorType(int)>(2);

        $r19 = virtualinvoke $r18.<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration$Builder setCurve(float[],float[])>(r0, r1);

        $r20 = virtualinvoke $r19.<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration$Builder setDuration(long)>(1000L);

        $r21 = virtualinvoke $r20.<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration build()>();

        <android.media.VolumeShaper$Configuration: android.media.VolumeShaper$Configuration SINE_RAMP> = $r21;

        $r22 = new android.media.VolumeShaper$Configuration$Builder;

        specialinvoke $r22.<android.media.VolumeShaper$Configuration$Builder: void <init>()>();

        $r23 = virtualinvoke $r22.<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration$Builder setInterpolatorType(int)>(2);

        $r24 = virtualinvoke $r23.<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration$Builder setCurve(float[],float[])>(r0, r2);

        $r25 = virtualinvoke $r24.<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration$Builder setDuration(long)>(1000L);

        $r26 = virtualinvoke $r25.<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration build()>();

        <android.media.VolumeShaper$Configuration: android.media.VolumeShaper$Configuration SCURVE_RAMP> = $r26;

        $r27 = new android.media.VolumeShaper$Configuration$1;

        specialinvoke $r27.<android.media.VolumeShaper$Configuration$1: void <init>()>();

        <android.media.VolumeShaper$Configuration: android.os.Parcelable$Creator CREATOR> = $r27;

        return;
    }

    public void <init>(int)
    {
        android.media.VolumeShaper$Configuration r0;
        int i0;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r6;

        r0 := @this: android.media.VolumeShaper$Configuration;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 < 0 goto label1;

        r0.<android.media.VolumeShaper$Configuration: int mType> = 0;

        r0.<android.media.VolumeShaper$Configuration: int mId> = i0;

        r0.<android.media.VolumeShaper$Configuration: int mInterpolatorType> = 0;

        r0.<android.media.VolumeShaper$Configuration: int mOptionFlags> = 0;

        r0.<android.media.VolumeShaper$Configuration: double mDurationMs> = 0.0;

        r0.<android.media.VolumeShaper$Configuration: float[] mTimes> = null;

        r0.<android.media.VolumeShaper$Configuration: float[] mVolumes> = null;

        return;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("negative id ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    private void <init>(int, int, int, double, int, float[], float[])
    {
        android.media.VolumeShaper$Configuration r0;
        int i0, i1, i2, i3;
        double d0;
        float[] r1, r2;

        r0 := @this: android.media.VolumeShaper$Configuration;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        d0 := @parameter3: double;

        i3 := @parameter4: int;

        r1 := @parameter5: float[];

        r2 := @parameter6: float[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.media.VolumeShaper$Configuration: int mType> = i0;

        r0.<android.media.VolumeShaper$Configuration: int mId> = i1;

        r0.<android.media.VolumeShaper$Configuration: int mOptionFlags> = i2;

        r0.<android.media.VolumeShaper$Configuration: double mDurationMs> = d0;

        r0.<android.media.VolumeShaper$Configuration: int mInterpolatorType> = i3;

        r0.<android.media.VolumeShaper$Configuration: float[] mTimes> = r1;

        r0.<android.media.VolumeShaper$Configuration: float[] mVolumes> = r2;

        return;
    }

    void <init>(int, int, int, double, int, float[], float[], android.media.VolumeShaper$1)
    {
        android.media.VolumeShaper$Configuration r0;
        int i0, i1, i2, i3;
        double d0;
        float[] r1, r2;
        android.media.VolumeShaper$1 r3;

        r0 := @this: android.media.VolumeShaper$Configuration;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        d0 := @parameter3: double;

        i3 := @parameter4: int;

        r1 := @parameter5: float[];

        r2 := @parameter6: float[];

        r3 := @parameter7: android.media.VolumeShaper$1;

        specialinvoke r0.<android.media.VolumeShaper$Configuration: void <init>(int,int,int,double,int,float[],float[])>(i0, i1, i2, d0, i3, r1, r2);

        return;
    }

    static void access$100(float[], float[], boolean, boolean)
    {
        float[] r0, r1;
        boolean z0, z1;

        r0 := @parameter0: float[];

        r1 := @parameter1: float[];

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        staticinvoke <android.media.VolumeShaper$Configuration: void checkCurveForErrorsAndThrowException(float[],float[],boolean,boolean)>(r0, r1, z0, z1);

        return;
    }

    static void access$200(float, boolean)
    {
        float f0;
        boolean z0;

        f0 := @parameter0: float;

        z0 := @parameter1: boolean;

        staticinvoke <android.media.VolumeShaper$Configuration: void checkValidVolumeAndThrowException(float,boolean)>(f0, z0);

        return;
    }

    static void access$300(float[], boolean)
    {
        float[] r0;
        boolean z0;

        r0 := @parameter0: float[];

        z0 := @parameter1: boolean;

        staticinvoke <android.media.VolumeShaper$Configuration: void clampVolume(float[],boolean)>(r0, z0);

        return;
    }

    private static java.lang.String checkCurveForErrors(float[], float[], boolean)
    {
        float[] r0, r13;
        boolean z0;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i8, $i9, $i12, $i14, i16, i17, i18;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6;
        byte $b4, $b7, $b10, $b11, $b13, $b15;
        java.lang.StringBuilder $r1, $r5, $r9;
        java.lang.String $r4, $r8, $r12;

        r13 := @parameter0: float[];

        r0 := @parameter1: float[];

        z0 := @parameter2: boolean;

        if r13 != null goto label01;

        return "times array must be non-null";

     label01:
        if r0 != null goto label02;

        return "volumes array must be non-null";

     label02:
        $i1 = lengthof r13;

        $i0 = lengthof r0;

        if $i1 == $i0 goto label03;

        return "array length must match";

     label03:
        $i2 = lengthof r13;

        if $i2 >= 2 goto label04;

        return "array length must be at least 2";

     label04:
        $i3 = lengthof r13;

        if $i3 <= 16 goto label05;

        return "array length must be no larger than 16";

     label05:
        $f0 = r13[0];

        $b4 = $f0 cmpl 0.0F;

        if $b4 == 0 goto label06;

        return "times must start at 0.f";

     label06:
        $i5 = lengthof r13;

        $i6 = $i5 - 1;

        $f1 = r13[$i6];

        $b7 = $f1 cmpl 1.0F;

        if $b7 == 0 goto label07;

        return "times must end at 1.f";

     label07:
        i16 = 1;

     label08:
        $i8 = lengthof r13;

        if i16 >= $i8 goto label10;

        $f6 = r13[i16];

        $i14 = i16 - 1;

        $f5 = r13[$i14];

        $b15 = $f6 cmpl $f5;

        if $b15 > 0 goto label09;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("times not monotonic increasing, check index ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i16);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;

     label09:
        i16 = i16 + 1;

        goto label08;

     label10:
        if z0 == 0 goto label14;

        i17 = 0;

     label11:
        $i12 = lengthof r0;

        if i17 >= $i12 goto label13;

        $f4 = r0[i17];

        $b13 = $f4 cmpg 0.0F;

        if $b13 <= 0 goto label12;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("volumes for log scale cannot be positive, check index ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i17);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;

     label12:
        i17 = i17 + 1;

        goto label11;

     label13:
        goto label18;

     label14:
        i18 = 0;

     label15:
        $i9 = lengthof r0;

        if i18 >= $i9 goto label18;

        $f2 = r0[i18];

        $b10 = $f2 cmpl 0.0F;

        if $b10 < 0 goto label17;

        $f3 = r0[i18];

        $b11 = $f3 cmpg 1.0F;

        if $b11 <= 0 goto label16;

        goto label17;

     label16:
        i18 = i18 + 1;

        goto label15;

     label17:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("volumes for linear scale must be between 0.f and 1.f, check index ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i18);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label18:
        return null;
    }

    private static void checkCurveForErrorsAndThrowException(float[], float[], boolean, boolean)
    {
        float[] r0, r3;
        boolean z0, z1;
        java.lang.IllegalArgumentException $r1;
        java.lang.IllegalStateException $r2;
        java.lang.String r4;

        r3 := @parameter0: float[];

        r0 := @parameter1: float[];

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        r4 = staticinvoke <android.media.VolumeShaper$Configuration: java.lang.String checkCurveForErrors(float[],float[],boolean)>(r3, r0, z0);

        if r4 == null goto label2;

        if z1 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r4);

        throw $r2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r4);

        throw $r1;

     label2:
        return;
    }

    private static void checkValidVolumeAndThrowException(float, boolean)
    {
        float f0;
        boolean z0;
        byte $b0, $b1, $b2;
        java.lang.IllegalArgumentException $r0, $r1;

        f0 := @parameter0: float;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label2;

        $b2 = f0 cmpg 0.0F;

        if $b2 > 0 goto label1;

        goto label3;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("dbfs volume must be 0.f or less");

        throw $r1;

     label2:
        $b0 = f0 cmpl 0.0F;

        if $b0 < 0 goto label4;

        $b1 = f0 cmpg 1.0F;

        if $b1 > 0 goto label4;

     label3:
        return;

     label4:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("volume must be >= 0.f and <= 1.f");

        throw $r0;
    }

    private static void clampVolume(float[], boolean)
    {
        float[] r0;
        boolean z0;
        int $i0, $i3, i5, i6;
        float $f0, $f1, $f2;
        byte $b1, $b2, $b4;

        r0 := @parameter0: float[];

        z0 := @parameter1: boolean;

        if z0 == 0 goto label4;

        i5 = 0;

     label1:
        $i3 = lengthof r0;

        if i5 >= $i3 goto label3;

        $f2 = r0[i5];

        $b4 = $f2 cmpg 0.0F;

        if $b4 <= 0 goto label2;

        r0[i5] = 0.0F;

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        goto label8;

     label4:
        i6 = 0;

     label5:
        $i0 = lengthof r0;

        if i6 >= $i0 goto label8;

        $f0 = r0[i6];

        $b1 = $f0 cmpl 0.0F;

        if $b1 >= 0 goto label6;

        r0[i6] = 0.0F;

        goto label7;

     label6:
        $f1 = r0[i6];

        $b2 = $f1 cmpg 1.0F;

        if $b2 <= 0 goto label7;

        r0[i6] = 1.0F;

     label7:
        i6 = i6 + 1;

        goto label5;

     label8:
        return;
    }

    public static int getMaximumCurvePoints()
    {
        return 16;
    }

    public int describeContents()
    {
        android.media.VolumeShaper$Configuration r0;

        r0 := @this: android.media.VolumeShaper$Configuration;

        return 0;
    }

    public boolean equals(java.lang.Object)
    {
        android.media.VolumeShaper$Configuration r0, r6;
        boolean z0, $z1, $z2, z3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i7, $i8;
        double $d0, $d1;
        byte $b6;
        float[] $r1, $r2, $r3, $r4;
        java.lang.Object r5;

        r0 := @this: android.media.VolumeShaper$Configuration;

        r5 := @parameter0: java.lang.Object;

        z0 = r5 instanceof android.media.VolumeShaper$Configuration;

        z3 = 0;

        if z0 != 0 goto label1;

        return 0;

     label1:
        if r5 != r0 goto label2;

        return 1;

     label2:
        r6 = (android.media.VolumeShaper$Configuration) r5;

        i0 = r0.<android.media.VolumeShaper$Configuration: int mType>;

        $i1 = r6.<android.media.VolumeShaper$Configuration: int mType>;

        if i0 != $i1 goto label4;

        $i3 = r0.<android.media.VolumeShaper$Configuration: int mId>;

        $i2 = r6.<android.media.VolumeShaper$Configuration: int mId>;

        if $i3 != $i2 goto label4;

        if i0 == 0 goto label3;

        $i5 = r0.<android.media.VolumeShaper$Configuration: int mOptionFlags>;

        $i4 = r6.<android.media.VolumeShaper$Configuration: int mOptionFlags>;

        if $i5 != $i4 goto label4;

        $d1 = r0.<android.media.VolumeShaper$Configuration: double mDurationMs>;

        $d0 = r6.<android.media.VolumeShaper$Configuration: double mDurationMs>;

        $b6 = $d1 cmpl $d0;

        if $b6 != 0 goto label4;

        $i8 = r0.<android.media.VolumeShaper$Configuration: int mInterpolatorType>;

        $i7 = r6.<android.media.VolumeShaper$Configuration: int mInterpolatorType>;

        if $i8 != $i7 goto label4;

        $r2 = r0.<android.media.VolumeShaper$Configuration: float[] mTimes>;

        $r1 = r6.<android.media.VolumeShaper$Configuration: float[] mTimes>;

        $z1 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($r2, $r1);

        if $z1 == 0 goto label4;

        $r4 = r0.<android.media.VolumeShaper$Configuration: float[] mVolumes>;

        $r3 = r6.<android.media.VolumeShaper$Configuration: float[] mVolumes>;

        $z2 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($r4, $r3);

        if $z2 == 0 goto label4;

     label3:
        z3 = 1;

        goto label4;

     label4:
        return z3;
    }

    int getAllOptionFlags()
    {
        android.media.VolumeShaper$Configuration r0;
        int $i0;

        r0 := @this: android.media.VolumeShaper$Configuration;

        $i0 = r0.<android.media.VolumeShaper$Configuration: int mOptionFlags>;

        return $i0;
    }

    public long getDuration()
    {
        android.media.VolumeShaper$Configuration r0;
        double $d0;
        long $l0;

        r0 := @this: android.media.VolumeShaper$Configuration;

        $d0 = r0.<android.media.VolumeShaper$Configuration: double mDurationMs>;

        $l0 = (long) $d0;

        return $l0;
    }

    public int getId()
    {
        android.media.VolumeShaper$Configuration r0;
        int $i0;

        r0 := @this: android.media.VolumeShaper$Configuration;

        $i0 = r0.<android.media.VolumeShaper$Configuration: int mId>;

        return $i0;
    }

    public int getInterpolatorType()
    {
        android.media.VolumeShaper$Configuration r0;
        int $i0;

        r0 := @this: android.media.VolumeShaper$Configuration;

        $i0 = r0.<android.media.VolumeShaper$Configuration: int mInterpolatorType>;

        return $i0;
    }

    public int getOptionFlags()
    {
        android.media.VolumeShaper$Configuration r0;
        int $i0, $i1;

        r0 := @this: android.media.VolumeShaper$Configuration;

        $i0 = r0.<android.media.VolumeShaper$Configuration: int mOptionFlags>;

        $i1 = $i0 & 3;

        return $i1;
    }

    public float[] getTimes()
    {
        android.media.VolumeShaper$Configuration r0;
        float[] $r1;

        r0 := @this: android.media.VolumeShaper$Configuration;

        $r1 = r0.<android.media.VolumeShaper$Configuration: float[] mTimes>;

        return $r1;
    }

    public int getType()
    {
        android.media.VolumeShaper$Configuration r0;
        int $i0;

        r0 := @this: android.media.VolumeShaper$Configuration;

        $i0 = r0.<android.media.VolumeShaper$Configuration: int mType>;

        return $i0;
    }

    public float[] getVolumes()
    {
        android.media.VolumeShaper$Configuration r0;
        float[] $r1;

        r0 := @this: android.media.VolumeShaper$Configuration;

        $r1 = r0.<android.media.VolumeShaper$Configuration: float[] mVolumes>;

        return $r1;
    }

    public int hashCode()
    {
        android.media.VolumeShaper$Configuration r0;
        java.lang.Object[] $r1, $r11;
        java.lang.Integer $r2, $r3, $r4, $r6, $r8, $r10, $r12, $r13;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        double $d0;
        java.lang.Double $r5;
        float[] $r7, $r9;

        r0 := @this: android.media.VolumeShaper$Configuration;

        i6 = r0.<android.media.VolumeShaper$Configuration: int mType>;

        if i6 != 0 goto label1;

        $r11 = newarray (java.lang.Object)[2];

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i6);

        $r11[0] = $r12;

        $i5 = r0.<android.media.VolumeShaper$Configuration: int mId>;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r11[1] = $r13;

        i7 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>($r11);

        goto label2;

     label1:
        $r1 = newarray (java.lang.Object)[7];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i6);

        $r1[0] = $r2;

        $i0 = r0.<android.media.VolumeShaper$Configuration: int mId>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[1] = $r3;

        $i1 = r0.<android.media.VolumeShaper$Configuration: int mOptionFlags>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r1[2] = $r4;

        $d0 = r0.<android.media.VolumeShaper$Configuration: double mDurationMs>;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r1[3] = $r5;

        $i2 = r0.<android.media.VolumeShaper$Configuration: int mInterpolatorType>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r1[4] = $r6;

        $r7 = r0.<android.media.VolumeShaper$Configuration: float[] mTimes>;

        $i3 = staticinvoke <java.util.Arrays: int hashCode(float[])>($r7);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r1[5] = $r8;

        $r9 = r0.<android.media.VolumeShaper$Configuration: float[] mVolumes>;

        $i4 = staticinvoke <java.util.Arrays: int hashCode(float[])>($r9);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r1[6] = $r10;

        i7 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>($r1);

     label2:
        return i7;
    }

    public java.lang.String toString()
    {
        android.media.VolumeShaper$Configuration r0;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.StringBuilder $r2, $r7;
        java.lang.String $r9, $r10, $r18, $r22, $r26, r27;
        double $d0;
        float[] $r17, $r21;

        r0 := @this: android.media.VolumeShaper$Configuration;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("VolumeShaper.Configuration{mType = ");

        $i1 = r0.<android.media.VolumeShaper$Configuration: int mType>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mId = ");

        $i2 = r0.<android.media.VolumeShaper$Configuration: int mId>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        i0 = r0.<android.media.VolumeShaper$Configuration: int mType>;

        r27 = "}";

        if i0 != 0 goto label1;

        goto label2;

     label1:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mOptionFlags = 0x");

        $i3 = r0.<android.media.VolumeShaper$Configuration: int mOptionFlags>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i3);

        $r10 = virtualinvoke $r9.<java.lang.String: java.lang.String toUpperCase()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mDurationMs = ");

        $d0 = r0.<android.media.VolumeShaper$Configuration: double mDurationMs>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mInterpolatorType = ");

        $i4 = r0.<android.media.VolumeShaper$Configuration: int mInterpolatorType>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mTimes[] = ");

        $r17 = r0.<android.media.VolumeShaper$Configuration: float[] mTimes>;

        $r18 = staticinvoke <java.util.Arrays: java.lang.String toString(float[])>($r17);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mVolumes[] = ");

        $r21 = r0.<android.media.VolumeShaper$Configuration: float[] mVolumes>;

        $r22 = staticinvoke <java.util.Arrays: java.lang.String toString(float[])>($r21);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        r27 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27);

        $r26 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r26;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        android.media.VolumeShaper$Configuration r0;
        android.os.Parcel r1;
        float[] r2, $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        double $d0;
        float $f0, $f1;

        r0 := @this: android.media.VolumeShaper$Configuration;

        r1 := @parameter0: android.os.Parcel;

        i7 := @parameter1: int;

        $i0 = r0.<android.media.VolumeShaper$Configuration: int mType>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i0);

        $i1 = r0.<android.media.VolumeShaper$Configuration: int mId>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i1);

        $i2 = r0.<android.media.VolumeShaper$Configuration: int mType>;

        if $i2 == 0 goto label2;

        $i3 = r0.<android.media.VolumeShaper$Configuration: int mOptionFlags>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i3);

        $d0 = r0.<android.media.VolumeShaper$Configuration: double mDurationMs>;

        virtualinvoke r1.<android.os.Parcel: void writeDouble(double)>($d0);

        $i4 = r0.<android.media.VolumeShaper$Configuration: int mInterpolatorType>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i4);

        virtualinvoke r1.<android.os.Parcel: void writeFloat(float)>(0.0F);

        virtualinvoke r1.<android.os.Parcel: void writeFloat(float)>(0.0F);

        $r3 = r0.<android.media.VolumeShaper$Configuration: float[] mTimes>;

        $i5 = lengthof $r3;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i5);

        i8 = 0;

     label1:
        r2 = r0.<android.media.VolumeShaper$Configuration: float[] mTimes>;

        $i6 = lengthof r2;

        if i8 >= $i6 goto label2;

        $f0 = r2[i8];

        virtualinvoke r1.<android.os.Parcel: void writeFloat(float)>($f0);

        $r4 = r0.<android.media.VolumeShaper$Configuration: float[] mVolumes>;

        $f1 = $r4[i8];

        virtualinvoke r1.<android.os.Parcel: void writeFloat(float)>($f1);

        i8 = i8 + 1;

        goto label1;

     label2:
        return;
    }
}
