class android.media.WebVttTrack extends android.media.SubtitleTrack implements android.media.WebVttCueListener
{
    private static final java.lang.String TAG;
    private java.lang.Long mCurrentRunID;
    private final android.media.UnstyledTextExtractor mExtractor;
    private final android.media.WebVttParser mParser;
    private final java.util.Map mRegions;
    private final android.media.WebVttRenderingWidget mRenderingWidget;
    private final java.util.Vector mTimestamps;
    private final android.media.Tokenizer mTokenizer;

    void <init>(android.media.WebVttRenderingWidget, android.media.MediaFormat)
    {
        android.media.WebVttTrack r0;
        android.media.WebVttRenderingWidget r1;
        android.media.WebVttParser $r2;
        android.media.UnstyledTextExtractor $r3;
        android.media.Tokenizer $r4;
        java.util.Vector $r5;
        java.util.HashMap $r6;
        android.media.MediaFormat r7;

        r0 := @this: android.media.WebVttTrack;

        r1 := @parameter0: android.media.WebVttRenderingWidget;

        r7 := @parameter1: android.media.MediaFormat;

        specialinvoke r0.<android.media.SubtitleTrack: void <init>(android.media.MediaFormat)>(r7);

        $r2 = new android.media.WebVttParser;

        specialinvoke $r2.<android.media.WebVttParser: void <init>(android.media.WebVttCueListener)>(r0);

        r0.<android.media.WebVttTrack: android.media.WebVttParser mParser> = $r2;

        $r3 = new android.media.UnstyledTextExtractor;

        specialinvoke $r3.<android.media.UnstyledTextExtractor: void <init>()>();

        r0.<android.media.WebVttTrack: android.media.UnstyledTextExtractor mExtractor> = $r3;

        $r4 = new android.media.Tokenizer;

        specialinvoke $r4.<android.media.Tokenizer: void <init>(android.media.Tokenizer$OnTokenListener)>($r3);

        r0.<android.media.WebVttTrack: android.media.Tokenizer mTokenizer> = $r4;

        $r5 = new java.util.Vector;

        specialinvoke $r5.<java.util.Vector: void <init>()>();

        r0.<android.media.WebVttTrack: java.util.Vector mTimestamps> = $r5;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<android.media.WebVttTrack: java.util.Map mRegions> = $r6;

        r0.<android.media.WebVttTrack: android.media.WebVttRenderingWidget mRenderingWidget> = r1;

        return;
    }

    public volatile android.media.SubtitleTrack$RenderingWidget getRenderingWidget()
    {
        android.media.WebVttTrack r0;
        android.media.WebVttRenderingWidget $r1;

        r0 := @this: android.media.WebVttTrack;

        $r1 = virtualinvoke r0.<android.media.WebVttTrack: android.media.WebVttRenderingWidget getRenderingWidget()>();

        return $r1;
    }

    public android.media.WebVttRenderingWidget getRenderingWidget()
    {
        android.media.WebVttTrack r0;
        android.media.WebVttRenderingWidget $r1;

        r0 := @this: android.media.WebVttTrack;

        $r1 = r0.<android.media.WebVttTrack: android.media.WebVttRenderingWidget mRenderingWidget>;

        return $r1;
    }

    public void onCueParsed(android.media.TextTrackCue)
    {
        android.media.WebVttTrack r0;
        android.media.WebVttParser r1;
        int i0, i1, $i2, $i3, $i5, $i6, i18, i19, i20, i21, i22;
        android.media.TextTrackCueSpan r2;
        java.lang.String $r3, $r23, $r27, $r28, r36;
        boolean $z0, $z1, $z3;
        android.media.Tokenizer $r4, $r24;
        android.media.UnstyledTextExtractor $r5;
        android.media.TextTrackCueSpan[][] $r6, r39;
        java.util.Vector $r7, $r9, $r11, $r12, $r13, $r17, $r19;
        java.lang.Long $r8, $r16, $r18, $r20;
        long $l4, $l7, $l8, $l9, $l11, $l12, $l14, $l15;
        long[] $r10, $r14;
        java.lang.Object $r15, $r30;
        byte $b10, $b13;
        java.lang.StringBuilder $r22, r34, r37, r38;
        java.util.Map $r29;
        android.media.TextTrackRegion $r31;
        java.lang.Throwable $r32;
        android.media.TextTrackCue r33;
        java.lang.String[] r35;
        android.media.TextTrackCueSpan[] r40;

        r0 := @this: android.media.WebVttTrack;

        r33 := @parameter0: android.media.TextTrackCue;

        r1 = r0.<android.media.WebVttTrack: android.media.WebVttParser mParser>;

        entermonitor r1;

     label01:
        $r3 = r33.<android.media.TextTrackCue: java.lang.String mRegionId>;

        $i2 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i2 == 0 goto label02;

        $r29 = r0.<android.media.WebVttTrack: java.util.Map mRegions>;

        $r28 = r33.<android.media.TextTrackCue: java.lang.String mRegionId>;

        $r30 = interfaceinvoke $r29.<java.util.Map: java.lang.Object get(java.lang.Object)>($r28);

        $r31 = (android.media.TextTrackRegion) $r30;

        r33.<android.media.TextTrackCue: android.media.TextTrackRegion mRegion> = $r31;

     label02:
        $z0 = r0.<android.media.WebVttTrack: boolean DEBUG>;

        if $z0 == 0 goto label03;

        r34 = new java.lang.StringBuilder;

        specialinvoke r34.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("adding cue ");

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r33);

        $r27 = virtualinvoke r34.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("WebVttTrack", $r27);

     label03:
        $r4 = r0.<android.media.WebVttTrack: android.media.Tokenizer mTokenizer>;

        virtualinvoke $r4.<android.media.Tokenizer: void reset()>();

        r35 = r33.<android.media.TextTrackCue: java.lang.String[] mStrings>;

        i18 = lengthof r35;

     label04:
        i19 = 0;

     label05:
        if i19 >= i18 goto label08;

        r36 = r35[i19];

     label06:
        $r24 = r0.<android.media.WebVttTrack: android.media.Tokenizer mTokenizer>;

        virtualinvoke $r24.<android.media.Tokenizer: void tokenize(java.lang.String)>(r36);

     label07:
        i19 = i19 + 1;

        goto label05;

     label08:
        $r5 = r0.<android.media.WebVttTrack: android.media.UnstyledTextExtractor mExtractor>;

        $r6 = virtualinvoke $r5.<android.media.UnstyledTextExtractor: android.media.TextTrackCueSpan[][] getText()>();

        r33.<android.media.TextTrackCue: android.media.TextTrackCueSpan[][] mLines> = $r6;

        $z1 = r0.<android.media.WebVttTrack: boolean DEBUG>;

        if $z1 == 0 goto label09;

        r37 = new java.lang.StringBuilder;

        specialinvoke r37.<java.lang.StringBuilder: void <init>()>();

        r38 = virtualinvoke r33.<android.media.TextTrackCue: java.lang.StringBuilder appendStringsToBuilder(java.lang.StringBuilder)>(r37);

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" simplified to: ");

        $r22 = virtualinvoke r33.<android.media.TextTrackCue: java.lang.StringBuilder appendLinesToBuilder(java.lang.StringBuilder)>(r38);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("WebVttTrack", $r23);

     label09:
        r39 = r33.<android.media.TextTrackCue: android.media.TextTrackCueSpan[][] mLines>;

        i0 = lengthof r39;

     label10:
        i20 = 0;

     label11:
        if i20 >= i0 goto label18;

        r40 = r39[i20];

     label12:
        i1 = lengthof r40;

     label13:
        i21 = 0;

     label14:
        if i21 >= i1 goto label17;

        r2 = r40[i21];

     label15:
        $l9 = r2.<android.media.TextTrackCueSpan: long mTimestampMs>;

        $l8 = r33.<android.media.TextTrackCue: long mStartTimeMs>;

        $b10 = $l9 cmp $l8;

        if $b10 <= 0 goto label16;

        $l12 = r2.<android.media.TextTrackCueSpan: long mTimestampMs>;

        $l11 = r33.<android.media.TextTrackCue: long mEndTimeMs>;

        $b13 = $l12 cmp $l11;

        if $b13 >= 0 goto label16;

        $r17 = r0.<android.media.WebVttTrack: java.util.Vector mTimestamps>;

        $l14 = r2.<android.media.TextTrackCueSpan: long mTimestampMs>;

        $r18 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l14);

        $z3 = virtualinvoke $r17.<java.util.Vector: boolean contains(java.lang.Object)>($r18);

        if $z3 != 0 goto label16;

        $r19 = r0.<android.media.WebVttTrack: java.util.Vector mTimestamps>;

        $l15 = r2.<android.media.TextTrackCueSpan: long mTimestampMs>;

        $r20 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l15);

        virtualinvoke $r19.<java.util.Vector: boolean add(java.lang.Object)>($r20);

     label16:
        i21 = i21 + 1;

        goto label14;

     label17:
        i20 = i20 + 1;

        goto label11;

     label18:
        $r7 = r0.<android.media.WebVttTrack: java.util.Vector mTimestamps>;

        $i3 = virtualinvoke $r7.<java.util.Vector: int size()>();

        if $i3 <= 0 goto label24;

        $r9 = r0.<android.media.WebVttTrack: java.util.Vector mTimestamps>;

        $i5 = virtualinvoke $r9.<java.util.Vector: int size()>();

        $r10 = newarray (long)[$i5];

        r33.<android.media.TextTrackCue: long[] mInnerTimesMs> = $r10;

     label19:
        i22 = 0;

     label20:
        $r11 = r0.<android.media.WebVttTrack: java.util.Vector mTimestamps>;

        $i6 = virtualinvoke $r11.<java.util.Vector: int size()>();

        if i22 >= $i6 goto label22;

        $r14 = r33.<android.media.TextTrackCue: long[] mInnerTimesMs>;

        $r13 = r0.<android.media.WebVttTrack: java.util.Vector mTimestamps>;

        $r15 = virtualinvoke $r13.<java.util.Vector: java.lang.Object get(int)>(i22);

        $r16 = (java.lang.Long) $r15;

        $l7 = virtualinvoke $r16.<java.lang.Long: long longValue()>();

        $r14[i22] = $l7;

     label21:
        i22 = i22 + 1;

        goto label20;

     label22:
        $r12 = r0.<android.media.WebVttTrack: java.util.Vector mTimestamps>;

        virtualinvoke $r12.<java.util.Vector: void clear()>();

     label23:
        goto label25;

     label24:
        r33.<android.media.TextTrackCue: long[] mInnerTimesMs> = null;

     label25:
        $r8 = r0.<android.media.WebVttTrack: java.lang.Long mCurrentRunID>;

        $l4 = virtualinvoke $r8.<java.lang.Long: long longValue()>();

        r33.<android.media.TextTrackCue: long mRunID> = $l4;

        exitmonitor r1;

     label26:
        virtualinvoke r0.<android.media.WebVttTrack: boolean addCue(android.media.SubtitleTrack$Cue)>(r33);

        return;

     label27:
        $r32 := @caughtexception;

     label28:
        exitmonitor r1;

     label29:
        throw $r32;

        catch java.lang.Throwable from label01 to label02 with label27;
        catch java.lang.Throwable from label02 to label03 with label27;
        catch java.lang.Throwable from label03 to label04 with label27;
        catch java.lang.Throwable from label06 to label07 with label27;
        catch java.lang.Throwable from label08 to label09 with label27;
        catch java.lang.Throwable from label09 to label10 with label27;
        catch java.lang.Throwable from label12 to label13 with label27;
        catch java.lang.Throwable from label15 to label16 with label27;
        catch java.lang.Throwable from label18 to label19 with label27;
        catch java.lang.Throwable from label20 to label21 with label27;
        catch java.lang.Throwable from label22 to label23 with label27;
        catch java.lang.Throwable from label24 to label25 with label27;
        catch java.lang.Throwable from label25 to label26 with label27;
        catch java.lang.Throwable from label28 to label29 with label27;
    }

    public void onData(byte[], boolean, long)
    {
        android.media.WebVttTrack r0;
        boolean z0;
        long l0, $l1;
        java.lang.IllegalStateException r1;
        java.lang.Long $r2, $r3, $r7, $r9;
        android.media.WebVttParser $r4, $r5, r22;
        java.util.Map $r6;
        byte $b2;
        java.lang.String $r13, $r18, r21;
        java.lang.Throwable $r14, $r19;
        java.lang.StringBuilder $r15, r23;
        byte[] r20;

        r0 := @this: android.media.WebVttTrack;

        r20 := @parameter0: byte[];

        z0 := @parameter1: boolean;

        l0 := @parameter2: long;

     label01:
        r21 = new java.lang.String;

        specialinvoke r21.<java.lang.String: void <init>(byte[],java.lang.String)>(r20, "UTF-8");

        r22 = r0.<android.media.WebVttTrack: android.media.WebVttParser mParser>;

        entermonitor r22;

     label02:
        $r2 = r0.<android.media.WebVttTrack: java.lang.Long mCurrentRunID>;

        if $r2 == null goto label05;

        $r7 = r0.<android.media.WebVttTrack: java.lang.Long mCurrentRunID>;

        $l1 = virtualinvoke $r7.<java.lang.Long: long longValue()>();

        $b2 = l0 cmp $l1;

        if $b2 != 0 goto label04;

     label03:
        goto label05;

     label04:
        r1 = new java.lang.IllegalStateException;

        r23 = new java.lang.StringBuilder;

        specialinvoke r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Run #");

        $r9 = r0.<android.media.WebVttTrack: java.lang.Long mCurrentRunID>;

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in progress.  Cannot process run #");

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r13 = virtualinvoke r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        throw r1;

     label05:
        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        r0.<android.media.WebVttTrack: java.lang.Long mCurrentRunID> = $r3;

        $r4 = r0.<android.media.WebVttTrack: android.media.WebVttParser mParser>;

        virtualinvoke $r4.<android.media.WebVttParser: void parse(java.lang.String)>(r21);

     label06:
        if z0 == 0 goto label08;

     label07:
        virtualinvoke r0.<android.media.WebVttTrack: void finishedRun(long)>(l0);

        $r5 = r0.<android.media.WebVttTrack: android.media.WebVttParser mParser>;

        virtualinvoke $r5.<android.media.WebVttParser: void eos()>();

        $r6 = r0.<android.media.WebVttTrack: java.util.Map mRegions>;

        interfaceinvoke $r6.<java.util.Map: void clear()>();

        r0.<android.media.WebVttTrack: java.lang.Long mCurrentRunID> = null;

     label08:
        exitmonitor r22;

     label09:
        goto label14;

     label10:
        $r19 := @caughtexception;

     label11:
        exitmonitor r22;

     label12:
        throw $r19;

     label13:
        $r14 := @caughtexception;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("subtitle data is not UTF-8 encoded: ");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WebVttTrack", $r18);

     label14:
        return;

        catch java.io.UnsupportedEncodingException from label01 to label02 with label13;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
        catch java.io.UnsupportedEncodingException from label12 to label13 with label13;
    }

    public void onRegionParsed(android.media.TextTrackRegion)
    {
        android.media.WebVttTrack r0;
        android.media.WebVttParser r1;
        java.lang.String $r2;
        java.util.Map $r3;
        java.lang.Throwable $r5;
        android.media.TextTrackRegion r6;

        r0 := @this: android.media.WebVttTrack;

        r6 := @parameter0: android.media.TextTrackRegion;

        r1 = r0.<android.media.WebVttTrack: android.media.WebVttParser mParser>;

        entermonitor r1;

     label1:
        $r3 = r0.<android.media.WebVttTrack: java.util.Map mRegions>;

        $r2 = r6.<android.media.TextTrackRegion: java.lang.String mId>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, r6);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void updateView(java.util.Vector)
    {
        android.media.WebVttTrack r0;
        java.util.Vector r1;
        boolean $z0, $z1;
        android.media.MediaTimeProvider $r2, $r4;
        long $l0, $l1;
        java.lang.String $r7;
        java.lang.Throwable $r8;
        java.lang.StringBuilder r9;
        android.media.WebVttRenderingWidget r11;

        r0 := @this: android.media.WebVttTrack;

        r1 := @parameter0: java.util.Vector;

        $z0 = r0.<android.media.WebVttTrack: boolean mVisible>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $z1 = r0.<android.media.WebVttTrack: boolean DEBUG>;

        if $z1 == 0 goto label5;

        $r2 = r0.<android.media.WebVttTrack: android.media.MediaTimeProvider mTimeProvider>;

        if $r2 == null goto label5;

     label2:
        r9 = new java.lang.StringBuilder;

        specialinvoke r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("at ");

        $r4 = r0.<android.media.WebVttTrack: android.media.MediaTimeProvider mTimeProvider>;

        $l0 = interfaceinvoke $r4.<android.media.MediaTimeProvider: long getCurrentTimeUs(boolean,boolean)>(0, 1);

        $l1 = $l0 / 1000L;

        virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms the active cues are:");

        $r7 = virtualinvoke r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("WebVttTrack", $r7);

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("WebVttTrack", "at (illegal state) the active cues are:");

     label5:
        r11 = r0.<android.media.WebVttTrack: android.media.WebVttRenderingWidget mRenderingWidget>;

        if r11 == null goto label6;

        virtualinvoke r11.<android.media.WebVttRenderingWidget: void setActiveCues(java.util.Vector)>(r1);

     label6:
        return;

        catch java.lang.IllegalStateException from label2 to label3 with label4;
    }

    public static void <clinit>()
    {
        <android.media.WebVttTrack: java.lang.String TAG> = "WebVttTrack";

        return;
    }
}
