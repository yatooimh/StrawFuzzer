public final class android.media.audiofx.DynamicsProcessing$Config$Builder extends java.lang.Object
{
    private android.media.audiofx.DynamicsProcessing$Channel[] mChannel;
    private int mChannelCount;
    private boolean mLimiterInUse;
    private int mMbcBandCount;
    private boolean mMbcInUse;
    private int mPostEqBandCount;
    private boolean mPostEqInUse;
    private int mPreEqBandCount;
    private boolean mPreEqInUse;
    private float mPreferredFrameDuration;
    private int mVariant;

    public void <init>(int, int, boolean, int, boolean, int, boolean, int, boolean)
    {
        android.media.audiofx.DynamicsProcessing$Config$Builder r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, i8, i9;
        boolean z0, z1, z2, z3, $z4, $z5, $z6, $z7;
        android.media.audiofx.DynamicsProcessing$Channel[] $r1, $r3;
        android.media.audiofx.DynamicsProcessing$Channel $r2;

        r0 := @this: android.media.audiofx.DynamicsProcessing$Config$Builder;

        i8 := @parameter0: int;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        i1 := @parameter3: int;

        z1 := @parameter4: boolean;

        i2 := @parameter5: int;

        z2 := @parameter6: boolean;

        i3 := @parameter7: int;

        z3 := @parameter8: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: float mPreferredFrameDuration> = 10.0F;

        r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: int mVariant> = i8;

        r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: int mChannelCount> = i0;

        r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: boolean mPreEqInUse> = z0;

        r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: int mPreEqBandCount> = i1;

        r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: boolean mMbcInUse> = z1;

        r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: int mMbcBandCount> = i2;

        r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: boolean mPostEqInUse> = z2;

        r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: int mPostEqBandCount> = i3;

        r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: boolean mLimiterInUse> = z3;

        $r1 = newarray (android.media.audiofx.DynamicsProcessing$Channel)[i0];

        r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: android.media.audiofx.DynamicsProcessing$Channel[] mChannel> = $r1;

        i9 = 0;

     label1:
        $i4 = r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: int mChannelCount>;

        if i9 >= $i4 goto label2;

        $r3 = r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: android.media.audiofx.DynamicsProcessing$Channel[] mChannel>;

        $r2 = new android.media.audiofx.DynamicsProcessing$Channel;

        $z7 = r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: boolean mPreEqInUse>;

        $i7 = r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: int mPreEqBandCount>;

        $z6 = r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: boolean mMbcInUse>;

        $i6 = r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: int mMbcBandCount>;

        $z5 = r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: boolean mPostEqInUse>;

        $i5 = r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: int mPostEqBandCount>;

        $z4 = r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: boolean mLimiterInUse>;

        specialinvoke $r2.<android.media.audiofx.DynamicsProcessing$Channel: void <init>(float,boolean,int,boolean,int,boolean,int,boolean)>(0.0F, $z7, $i7, $z6, $i6, $z5, $i5, $z4);

        $r3[i9] = $r2;

        i9 = i9 + 1;

        goto label1;

     label2:
        return;
    }

    private void checkChannel(int)
    {
        android.media.audiofx.DynamicsProcessing$Config$Builder r0;
        int i0, $i1;
        java.lang.IllegalArgumentException $r1;
        android.media.audiofx.DynamicsProcessing$Channel[] $r2;

        r0 := @this: android.media.audiofx.DynamicsProcessing$Config$Builder;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r2 = r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: android.media.audiofx.DynamicsProcessing$Channel[] mChannel>;

        $i1 = lengthof $r2;

        if i0 >= $i1 goto label1;

        return;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ChannelIndex out of bounds");

        throw $r1;
    }

    public android.media.audiofx.DynamicsProcessing$Config build()
    {
        android.media.audiofx.DynamicsProcessing$Config$Builder r0;
        android.media.audiofx.DynamicsProcessing$Config $r1;
        android.media.audiofx.DynamicsProcessing$Channel[] $r2;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i1, $i2, $i3, $i4;
        float $f0;

        r0 := @this: android.media.audiofx.DynamicsProcessing$Config$Builder;

        $r1 = new android.media.audiofx.DynamicsProcessing$Config;

        $i4 = r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: int mVariant>;

        $f0 = r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: float mPreferredFrameDuration>;

        $i3 = r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: int mChannelCount>;

        $z3 = r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: boolean mPreEqInUse>;

        $i2 = r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: int mPreEqBandCount>;

        $z2 = r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: boolean mMbcInUse>;

        $i1 = r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: int mMbcBandCount>;

        $z1 = r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: boolean mPostEqInUse>;

        $i0 = r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: int mPostEqBandCount>;

        $z0 = r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: boolean mLimiterInUse>;

        $r2 = r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: android.media.audiofx.DynamicsProcessing$Channel[] mChannel>;

        specialinvoke $r1.<android.media.audiofx.DynamicsProcessing$Config: void <init>(int,float,int,boolean,int,boolean,int,boolean,int,boolean,android.media.audiofx.DynamicsProcessing$Channel[])>($i4, $f0, $i3, $z3, $i2, $z2, $i1, $z1, $i0, $z0, $r2);

        return $r1;
    }

    public android.media.audiofx.DynamicsProcessing$Config$Builder setAllChannelsTo(android.media.audiofx.DynamicsProcessing$Channel)
    {
        android.media.audiofx.DynamicsProcessing$Config$Builder r0;
        android.media.audiofx.DynamicsProcessing$Channel r1;
        android.media.audiofx.DynamicsProcessing$Channel[] $r2;
        int $i0, i1;

        r0 := @this: android.media.audiofx.DynamicsProcessing$Config$Builder;

        r1 := @parameter0: android.media.audiofx.DynamicsProcessing$Channel;

        i1 = 0;

     label1:
        $r2 = r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: android.media.audiofx.DynamicsProcessing$Channel[] mChannel>;

        $i0 = lengthof $r2;

        if i1 >= $i0 goto label2;

        virtualinvoke r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: android.media.audiofx.DynamicsProcessing$Config$Builder setChannelTo(int,android.media.audiofx.DynamicsProcessing$Channel)>(i1, r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public android.media.audiofx.DynamicsProcessing$Config$Builder setChannelTo(int, android.media.audiofx.DynamicsProcessing$Channel)
    {
        android.media.audiofx.DynamicsProcessing$Config$Builder r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        android.media.audiofx.DynamicsProcessing$Channel r1, $r29;
        android.media.audiofx.DynamicsProcessing$Mbc $r2;
        java.lang.StringBuilder $r3, $r12, $r21;
        android.media.audiofx.DynamicsProcessing$Eq $r7, $r11, $r16, $r20, $r25;
        java.lang.IllegalArgumentException $r9, $r18, $r27;
        java.lang.String $r10, $r19, $r28;
        android.media.audiofx.DynamicsProcessing$Channel[] $r30;

        r0 := @this: android.media.audiofx.DynamicsProcessing$Config$Builder;

        i0 := @parameter0: int;

        r1 := @parameter1: android.media.audiofx.DynamicsProcessing$Channel;

        specialinvoke r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: void checkChannel(int)>(i0);

        $i1 = r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: int mMbcBandCount>;

        $r2 = virtualinvoke r1.<android.media.audiofx.DynamicsProcessing$Channel: android.media.audiofx.DynamicsProcessing$Mbc getMbc()>();

        $i2 = virtualinvoke $r2.<android.media.audiofx.DynamicsProcessing$Mbc: int getBandCount()>();

        if $i1 != $i2 goto label3;

        $i5 = r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: int mPreEqBandCount>;

        $r11 = virtualinvoke r1.<android.media.audiofx.DynamicsProcessing$Channel: android.media.audiofx.DynamicsProcessing$Eq getPreEq()>();

        $i6 = virtualinvoke $r11.<android.media.audiofx.DynamicsProcessing$Eq: int getBandCount()>();

        if $i5 != $i6 goto label2;

        $i9 = r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: int mPostEqBandCount>;

        $r20 = virtualinvoke r1.<android.media.audiofx.DynamicsProcessing$Channel: android.media.audiofx.DynamicsProcessing$Eq getPostEq()>();

        $i10 = virtualinvoke $r20.<android.media.audiofx.DynamicsProcessing$Eq: int getBandCount()>();

        if $i9 != $i10 goto label1;

        $r30 = r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: android.media.audiofx.DynamicsProcessing$Channel[] mChannel>;

        $r29 = new android.media.audiofx.DynamicsProcessing$Channel;

        specialinvoke $r29.<android.media.audiofx.DynamicsProcessing$Channel: void <init>(android.media.audiofx.DynamicsProcessing$Channel)>(r1);

        $r30[i0] = $r29;

        return r0;

     label1:
        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PostEqBandCount changed from ");

        $i11 = r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: int mPostEqBandCount>;

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r25 = virtualinvoke r1.<android.media.audiofx.DynamicsProcessing$Channel: android.media.audiofx.DynamicsProcessing$Eq getPostEq()>();

        $i12 = virtualinvoke $r25.<android.media.audiofx.DynamicsProcessing$Eq: int getBandCount()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r27 = new java.lang.IllegalArgumentException;

        $r28 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r28);

        throw $r27;

     label2:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PreEqBandCount changed from ");

        $i7 = r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: int mPreEqBandCount>;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r16 = virtualinvoke r1.<android.media.audiofx.DynamicsProcessing$Channel: android.media.audiofx.DynamicsProcessing$Eq getPreEq()>();

        $i8 = virtualinvoke $r16.<android.media.audiofx.DynamicsProcessing$Eq: int getBandCount()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r18 = new java.lang.IllegalArgumentException;

        $r19 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r18;

     label3:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MbcBandCount changed from ");

        $i3 = r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: int mMbcBandCount>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r7 = virtualinvoke r1.<android.media.audiofx.DynamicsProcessing$Channel: android.media.audiofx.DynamicsProcessing$Eq getPreEq()>();

        $i4 = virtualinvoke $r7.<android.media.audiofx.DynamicsProcessing$Eq: int getBandCount()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r9;
    }

    public android.media.audiofx.DynamicsProcessing$Config$Builder setInputGainAllChannelsTo(float)
    {
        android.media.audiofx.DynamicsProcessing$Config$Builder r0;
        float f0;
        android.media.audiofx.DynamicsProcessing$Channel[] r1;
        int $i0, i1;
        android.media.audiofx.DynamicsProcessing$Channel $r2;

        r0 := @this: android.media.audiofx.DynamicsProcessing$Config$Builder;

        f0 := @parameter0: float;

        i1 = 0;

     label1:
        r1 = r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: android.media.audiofx.DynamicsProcessing$Channel[] mChannel>;

        $i0 = lengthof r1;

        if i1 >= $i0 goto label2;

        $r2 = r1[i1];

        virtualinvoke $r2.<android.media.audiofx.DynamicsProcessing$Channel: void setInputGain(float)>(f0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public android.media.audiofx.DynamicsProcessing$Config$Builder setInputGainByChannelIndex(int, float)
    {
        android.media.audiofx.DynamicsProcessing$Config$Builder r0;
        int i0;
        float f0;
        android.media.audiofx.DynamicsProcessing$Channel[] $r1;
        android.media.audiofx.DynamicsProcessing$Channel $r2;

        r0 := @this: android.media.audiofx.DynamicsProcessing$Config$Builder;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        specialinvoke r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: void checkChannel(int)>(i0);

        $r1 = r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: android.media.audiofx.DynamicsProcessing$Channel[] mChannel>;

        $r2 = $r1[i0];

        virtualinvoke $r2.<android.media.audiofx.DynamicsProcessing$Channel: void setInputGain(float)>(f0);

        return r0;
    }

    public android.media.audiofx.DynamicsProcessing$Config$Builder setLimiterAllChannelsTo(android.media.audiofx.DynamicsProcessing$Limiter)
    {
        android.media.audiofx.DynamicsProcessing$Config$Builder r0;
        android.media.audiofx.DynamicsProcessing$Limiter r1;
        android.media.audiofx.DynamicsProcessing$Channel[] $r2;
        int $i0, i1;

        r0 := @this: android.media.audiofx.DynamicsProcessing$Config$Builder;

        r1 := @parameter0: android.media.audiofx.DynamicsProcessing$Limiter;

        i1 = 0;

     label1:
        $r2 = r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: android.media.audiofx.DynamicsProcessing$Channel[] mChannel>;

        $i0 = lengthof $r2;

        if i1 >= $i0 goto label2;

        virtualinvoke r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: android.media.audiofx.DynamicsProcessing$Config$Builder setLimiterByChannelIndex(int,android.media.audiofx.DynamicsProcessing$Limiter)>(i1, r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public android.media.audiofx.DynamicsProcessing$Config$Builder setLimiterByChannelIndex(int, android.media.audiofx.DynamicsProcessing$Limiter)
    {
        android.media.audiofx.DynamicsProcessing$Config$Builder r0;
        int i0;
        android.media.audiofx.DynamicsProcessing$Limiter r1;
        android.media.audiofx.DynamicsProcessing$Channel[] $r2;
        android.media.audiofx.DynamicsProcessing$Channel $r3;

        r0 := @this: android.media.audiofx.DynamicsProcessing$Config$Builder;

        i0 := @parameter0: int;

        r1 := @parameter1: android.media.audiofx.DynamicsProcessing$Limiter;

        specialinvoke r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: void checkChannel(int)>(i0);

        $r2 = r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: android.media.audiofx.DynamicsProcessing$Channel[] mChannel>;

        $r3 = $r2[i0];

        virtualinvoke $r3.<android.media.audiofx.DynamicsProcessing$Channel: void setLimiter(android.media.audiofx.DynamicsProcessing$Limiter)>(r1);

        return r0;
    }

    public android.media.audiofx.DynamicsProcessing$Config$Builder setMbcAllChannelsTo(android.media.audiofx.DynamicsProcessing$Mbc)
    {
        android.media.audiofx.DynamicsProcessing$Config$Builder r0;
        android.media.audiofx.DynamicsProcessing$Mbc r1;
        android.media.audiofx.DynamicsProcessing$Channel[] $r2;
        int $i0, i1;

        r0 := @this: android.media.audiofx.DynamicsProcessing$Config$Builder;

        r1 := @parameter0: android.media.audiofx.DynamicsProcessing$Mbc;

        i1 = 0;

     label1:
        $r2 = r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: android.media.audiofx.DynamicsProcessing$Channel[] mChannel>;

        $i0 = lengthof $r2;

        if i1 >= $i0 goto label2;

        virtualinvoke r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: android.media.audiofx.DynamicsProcessing$Config$Builder setMbcByChannelIndex(int,android.media.audiofx.DynamicsProcessing$Mbc)>(i1, r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public android.media.audiofx.DynamicsProcessing$Config$Builder setMbcByChannelIndex(int, android.media.audiofx.DynamicsProcessing$Mbc)
    {
        android.media.audiofx.DynamicsProcessing$Config$Builder r0;
        int i0;
        android.media.audiofx.DynamicsProcessing$Mbc r1;
        android.media.audiofx.DynamicsProcessing$Channel[] $r2;
        android.media.audiofx.DynamicsProcessing$Channel $r3;

        r0 := @this: android.media.audiofx.DynamicsProcessing$Config$Builder;

        i0 := @parameter0: int;

        r1 := @parameter1: android.media.audiofx.DynamicsProcessing$Mbc;

        specialinvoke r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: void checkChannel(int)>(i0);

        $r2 = r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: android.media.audiofx.DynamicsProcessing$Channel[] mChannel>;

        $r3 = $r2[i0];

        virtualinvoke $r3.<android.media.audiofx.DynamicsProcessing$Channel: void setMbc(android.media.audiofx.DynamicsProcessing$Mbc)>(r1);

        return r0;
    }

    public android.media.audiofx.DynamicsProcessing$Config$Builder setPostEqAllChannelsTo(android.media.audiofx.DynamicsProcessing$Eq)
    {
        android.media.audiofx.DynamicsProcessing$Config$Builder r0;
        android.media.audiofx.DynamicsProcessing$Eq r1;
        android.media.audiofx.DynamicsProcessing$Channel[] $r2;
        int $i0, i1;

        r0 := @this: android.media.audiofx.DynamicsProcessing$Config$Builder;

        r1 := @parameter0: android.media.audiofx.DynamicsProcessing$Eq;

        i1 = 0;

     label1:
        $r2 = r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: android.media.audiofx.DynamicsProcessing$Channel[] mChannel>;

        $i0 = lengthof $r2;

        if i1 >= $i0 goto label2;

        virtualinvoke r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: android.media.audiofx.DynamicsProcessing$Config$Builder setPostEqByChannelIndex(int,android.media.audiofx.DynamicsProcessing$Eq)>(i1, r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public android.media.audiofx.DynamicsProcessing$Config$Builder setPostEqByChannelIndex(int, android.media.audiofx.DynamicsProcessing$Eq)
    {
        android.media.audiofx.DynamicsProcessing$Config$Builder r0;
        int i0;
        android.media.audiofx.DynamicsProcessing$Eq r1;
        android.media.audiofx.DynamicsProcessing$Channel[] $r2;
        android.media.audiofx.DynamicsProcessing$Channel $r3;

        r0 := @this: android.media.audiofx.DynamicsProcessing$Config$Builder;

        i0 := @parameter0: int;

        r1 := @parameter1: android.media.audiofx.DynamicsProcessing$Eq;

        specialinvoke r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: void checkChannel(int)>(i0);

        $r2 = r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: android.media.audiofx.DynamicsProcessing$Channel[] mChannel>;

        $r3 = $r2[i0];

        virtualinvoke $r3.<android.media.audiofx.DynamicsProcessing$Channel: void setPostEq(android.media.audiofx.DynamicsProcessing$Eq)>(r1);

        return r0;
    }

    public android.media.audiofx.DynamicsProcessing$Config$Builder setPreEqAllChannelsTo(android.media.audiofx.DynamicsProcessing$Eq)
    {
        android.media.audiofx.DynamicsProcessing$Config$Builder r0;
        android.media.audiofx.DynamicsProcessing$Eq r1;
        android.media.audiofx.DynamicsProcessing$Channel[] $r2;
        int $i0, i1;

        r0 := @this: android.media.audiofx.DynamicsProcessing$Config$Builder;

        r1 := @parameter0: android.media.audiofx.DynamicsProcessing$Eq;

        i1 = 0;

     label1:
        $r2 = r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: android.media.audiofx.DynamicsProcessing$Channel[] mChannel>;

        $i0 = lengthof $r2;

        if i1 >= $i0 goto label2;

        virtualinvoke r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: android.media.audiofx.DynamicsProcessing$Config$Builder setPreEqByChannelIndex(int,android.media.audiofx.DynamicsProcessing$Eq)>(i1, r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public android.media.audiofx.DynamicsProcessing$Config$Builder setPreEqByChannelIndex(int, android.media.audiofx.DynamicsProcessing$Eq)
    {
        android.media.audiofx.DynamicsProcessing$Config$Builder r0;
        int i0;
        android.media.audiofx.DynamicsProcessing$Eq r1;
        android.media.audiofx.DynamicsProcessing$Channel[] $r2;
        android.media.audiofx.DynamicsProcessing$Channel $r3;

        r0 := @this: android.media.audiofx.DynamicsProcessing$Config$Builder;

        i0 := @parameter0: int;

        r1 := @parameter1: android.media.audiofx.DynamicsProcessing$Eq;

        specialinvoke r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: void checkChannel(int)>(i0);

        $r2 = r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: android.media.audiofx.DynamicsProcessing$Channel[] mChannel>;

        $r3 = $r2[i0];

        virtualinvoke $r3.<android.media.audiofx.DynamicsProcessing$Channel: void setPreEq(android.media.audiofx.DynamicsProcessing$Eq)>(r1);

        return r0;
    }

    public android.media.audiofx.DynamicsProcessing$Config$Builder setPreferredFrameDuration(float)
    {
        android.media.audiofx.DynamicsProcessing$Config$Builder r0;
        float f0;
        byte $b0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: android.media.audiofx.DynamicsProcessing$Config$Builder;

        f0 := @parameter0: float;

        $b0 = f0 cmpg 0.0F;

        if $b0 < 0 goto label1;

        r0.<android.media.audiofx.DynamicsProcessing$Config$Builder: float mPreferredFrameDuration> = f0;

        return r0;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Expected positive frameDuration");

        throw $r1;
    }
}
