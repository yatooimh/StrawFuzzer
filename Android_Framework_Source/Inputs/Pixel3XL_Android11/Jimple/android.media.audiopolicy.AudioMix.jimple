public class android.media.audiopolicy.AudioMix extends java.lang.Object
{
    private static final int CALLBACK_FLAGS_ALL;
    public static final int CALLBACK_FLAG_NOTIFY_ACTIVITY;
    public static final int MIX_STATE_DISABLED;
    public static final int MIX_STATE_IDLE;
    public static final int MIX_STATE_MIXING;
    public static final int MIX_TYPE_INVALID;
    public static final int MIX_TYPE_PLAYERS;
    public static final int MIX_TYPE_RECORDERS;
    private static final int PRIVILEDGED_CAPTURE_MAX_BYTES_PER_SAMPLE;
    private static final int PRIVILEDGED_CAPTURE_MAX_CHANNEL_NUMBER;
    private static final int PRIVILEDGED_CAPTURE_MAX_SAMPLE_RATE;
    public static final int ROUTE_FLAG_LOOP_BACK;
    public static final int ROUTE_FLAG_LOOP_BACK_RENDER;
    public static final int ROUTE_FLAG_RENDER;
    private static final int ROUTE_FLAG_SUPPORTED;
    int mCallbackFlags;
    java.lang.String mDeviceAddress;
    final int mDeviceSystemType;
    private android.media.AudioFormat mFormat;
    int mMixState;
    private int mMixType;
    private int mRouteFlags;
    private android.media.audiopolicy.AudioMixingRule mRule;

    private void <init>(android.media.audiopolicy.AudioMixingRule, android.media.AudioFormat, int, int, int, java.lang.String)
    {
        android.media.audiopolicy.AudioMix r0;
        android.media.audiopolicy.AudioMixingRule r1;
        android.media.AudioFormat r2;
        int i0, i1, i2, $i3;
        java.lang.String $r3, r4;

        r0 := @this: android.media.audiopolicy.AudioMix;

        r1 := @parameter0: android.media.audiopolicy.AudioMixingRule;

        r2 := @parameter1: android.media.AudioFormat;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r4 := @parameter5: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.media.audiopolicy.AudioMix: int mMixType> = -1;

        r0.<android.media.audiopolicy.AudioMix: int mMixState> = -1;

        r0.<android.media.audiopolicy.AudioMix: android.media.audiopolicy.AudioMixingRule mRule> = r1;

        r0.<android.media.audiopolicy.AudioMix: android.media.AudioFormat mFormat> = r2;

        r0.<android.media.audiopolicy.AudioMix: int mRouteFlags> = i0;

        $i3 = virtualinvoke r1.<android.media.audiopolicy.AudioMixingRule: int getTargetMixType()>();

        r0.<android.media.audiopolicy.AudioMix: int mMixType> = $i3;

        r0.<android.media.audiopolicy.AudioMix: int mCallbackFlags> = i1;

        r0.<android.media.audiopolicy.AudioMix: int mDeviceSystemType> = i2;

        if r4 != null goto label1;

        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(java.lang.String)>("");

        r4 = $r3;

        goto label1;

     label1:
        r0.<android.media.audiopolicy.AudioMix: java.lang.String mDeviceAddress> = r4;

        return;
    }

    void <init>(android.media.audiopolicy.AudioMixingRule, android.media.AudioFormat, int, int, int, java.lang.String, android.media.audiopolicy.AudioMix$1)
    {
        android.media.audiopolicy.AudioMix r0;
        android.media.audiopolicy.AudioMixingRule r1;
        android.media.AudioFormat r2;
        int i0, i1, i2;
        java.lang.String r3;
        android.media.audiopolicy.AudioMix$1 r4;

        r0 := @this: android.media.audiopolicy.AudioMix;

        r1 := @parameter0: android.media.audiopolicy.AudioMixingRule;

        r2 := @parameter1: android.media.AudioFormat;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r3 := @parameter5: java.lang.String;

        r4 := @parameter6: android.media.audiopolicy.AudioMix$1;

        specialinvoke r0.<android.media.audiopolicy.AudioMix: void <init>(android.media.audiopolicy.AudioMixingRule,android.media.AudioFormat,int,int,int,java.lang.String)>(r1, r2, i0, i1, i2, r3);

        return;
    }

    public static java.lang.String canBeUsedForPrivilegedCapture(android.media.AudioFormat)
    {
        java.lang.StringBuilder $r0, $r7, $r13, $r18;
        java.lang.String $r6, $r12, $r17, $r24;
        boolean $z0, $z1;
        int $i0, i1, i2, i3;
        android.media.AudioFormat r25;

        r25 := @parameter0: android.media.AudioFormat;

        i1 = virtualinvoke r25.<android.media.AudioFormat: int getSampleRate()>();

        if i1 > 16000 goto label7;

        if i1 > 0 goto label1;

        goto label7;

     label1:
        i2 = virtualinvoke r25.<android.media.AudioFormat: int getChannelCount()>();

        if i2 > 1 goto label6;

        if i2 > 0 goto label2;

        goto label6;

     label2:
        i3 = virtualinvoke r25.<android.media.AudioFormat: int getEncoding()>();

        $z0 = staticinvoke <android.media.AudioFormat: boolean isPublicEncoding(int)>(i3);

        if $z0 == 0 goto label5;

        $z1 = staticinvoke <android.media.AudioFormat: boolean isEncodingLinearPcm(int)>(i3);

        if $z1 != 0 goto label3;

        goto label5;

     label3:
        $i0 = staticinvoke <android.media.AudioFormat: int getBytesPerSample(int)>(i3);

        if $i0 <= 2 goto label4;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Privileged audio capture encoding ");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" can not be over ");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(2);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes per sample");

        $r24 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r24;

     label4:
        return null;

     label5:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Privileged audio capture encoding ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("is not linear");

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r17;

     label6:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Privileged audio capture channel count ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" can not be over ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(1);

        $r12 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;

     label7:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Privileged audio capture sample rate ");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" can not be over ");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(16000);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("kHz");

        $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public boolean containsMatchAttributeRuleForUsage(int)
    {
        android.media.audiopolicy.AudioMix r0;
        int i0;
        android.media.audiopolicy.AudioMixingRule $r1;
        boolean $z0;

        r0 := @this: android.media.audiopolicy.AudioMix;

        i0 := @parameter0: int;

        $r1 = r0.<android.media.audiopolicy.AudioMix: android.media.audiopolicy.AudioMixingRule mRule>;

        $z0 = virtualinvoke $r1.<android.media.audiopolicy.AudioMixingRule: boolean containsMatchAttributeRuleForUsage(int)>(i0);

        return $z0;
    }

    public boolean equals(java.lang.Object)
    {
        android.media.audiopolicy.AudioMix r0, r8;
        java.lang.Class $r1, $r2;
        int $i0, $i1, $i2, $i3;
        android.media.audiopolicy.AudioMixingRule $r3, $r4;
        android.media.AudioFormat $r5, $r6;
        java.lang.Object r7;
        boolean z0;

        r0 := @this: android.media.audiopolicy.AudioMix;

        r7 := @parameter0: java.lang.Object;

        z0 = 1;

        if r0 != r7 goto label1;

        return 1;

     label1:
        if r7 == null goto label5;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke r7.<java.lang.Object: java.lang.Class getClass()>();

        if $r1 == $r2 goto label2;

        goto label5;

     label2:
        r8 = (android.media.audiopolicy.AudioMix) r7;

        $i1 = r0.<android.media.audiopolicy.AudioMix: int mRouteFlags>;

        $i0 = r8.<android.media.audiopolicy.AudioMix: int mRouteFlags>;

        if $i1 != $i0 goto label3;

        $r4 = r0.<android.media.audiopolicy.AudioMix: android.media.audiopolicy.AudioMixingRule mRule>;

        $r3 = r8.<android.media.audiopolicy.AudioMix: android.media.audiopolicy.AudioMixingRule mRule>;

        if $r4 != $r3 goto label3;

        $i3 = r0.<android.media.audiopolicy.AudioMix: int mMixType>;

        $i2 = r8.<android.media.audiopolicy.AudioMix: int mMixType>;

        if $i3 != $i2 goto label3;

        $r6 = r0.<android.media.audiopolicy.AudioMix: android.media.AudioFormat mFormat>;

        $r5 = r8.<android.media.audiopolicy.AudioMix: android.media.AudioFormat mFormat>;

        if $r6 != $r5 goto label3;

        goto label4;

     label3:
        z0 = 0;

     label4:
        return z0;

     label5:
        return 0;
    }

    public android.media.AudioFormat getFormat()
    {
        android.media.audiopolicy.AudioMix r0;
        android.media.AudioFormat $r1;

        r0 := @this: android.media.audiopolicy.AudioMix;

        $r1 = r0.<android.media.audiopolicy.AudioMix: android.media.AudioFormat mFormat>;

        return $r1;
    }

    public int getMixState()
    {
        android.media.audiopolicy.AudioMix r0;
        int $i0;

        r0 := @this: android.media.audiopolicy.AudioMix;

        $i0 = r0.<android.media.audiopolicy.AudioMix: int mMixState>;

        return $i0;
    }

    public int getMixType()
    {
        android.media.audiopolicy.AudioMix r0;
        int $i0;

        r0 := @this: android.media.audiopolicy.AudioMix;

        $i0 = r0.<android.media.audiopolicy.AudioMix: int mMixType>;

        return $i0;
    }

    public java.lang.String getRegistration()
    {
        android.media.audiopolicy.AudioMix r0;
        java.lang.String $r1;

        r0 := @this: android.media.audiopolicy.AudioMix;

        $r1 = r0.<android.media.audiopolicy.AudioMix: java.lang.String mDeviceAddress>;

        return $r1;
    }

    public int getRouteFlags()
    {
        android.media.audiopolicy.AudioMix r0;
        int $i0;

        r0 := @this: android.media.audiopolicy.AudioMix;

        $i0 = r0.<android.media.audiopolicy.AudioMix: int mRouteFlags>;

        return $i0;
    }

    public android.media.audiopolicy.AudioMixingRule getRule()
    {
        android.media.audiopolicy.AudioMix r0;
        android.media.audiopolicy.AudioMixingRule $r1;

        r0 := @this: android.media.audiopolicy.AudioMix;

        $r1 = r0.<android.media.audiopolicy.AudioMix: android.media.audiopolicy.AudioMixingRule mRule>;

        return $r1;
    }

    public int hashCode()
    {
        android.media.audiopolicy.AudioMix r0;
        java.lang.Object[] $r1;
        int $i0, $i1, $i2;
        java.lang.Integer $r2, $r4;
        android.media.audiopolicy.AudioMixingRule $r3;
        android.media.AudioFormat $r5;

        r0 := @this: android.media.audiopolicy.AudioMix;

        $r1 = newarray (java.lang.Object)[4];

        $i0 = r0.<android.media.audiopolicy.AudioMix: int mRouteFlags>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[0] = $r2;

        $r3 = r0.<android.media.audiopolicy.AudioMix: android.media.audiopolicy.AudioMixingRule mRule>;

        $r1[1] = $r3;

        $i1 = r0.<android.media.audiopolicy.AudioMix: int mMixType>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r1[2] = $r4;

        $r5 = r0.<android.media.audiopolicy.AudioMix: android.media.AudioFormat mFormat>;

        $r1[3] = $r5;

        $i2 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>($r1);

        return $i2;
    }

    public boolean isAffectingUsage(int)
    {
        android.media.audiopolicy.AudioMix r0;
        int i0;
        android.media.audiopolicy.AudioMixingRule $r1;
        boolean $z0;

        r0 := @this: android.media.audiopolicy.AudioMix;

        i0 := @parameter0: int;

        $r1 = r0.<android.media.audiopolicy.AudioMix: android.media.audiopolicy.AudioMixingRule mRule>;

        $z0 = virtualinvoke $r1.<android.media.audiopolicy.AudioMixingRule: boolean isAffectingUsage(int)>(i0);

        return $z0;
    }

    public boolean isRoutedToDevice(int, java.lang.String)
    {
        android.media.audiopolicy.AudioMix r0;
        int i0, $i1, $i2, $i3;
        java.lang.String r1, $r2;
        boolean $z0;

        r0 := @this: android.media.audiopolicy.AudioMix;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $i1 = r0.<android.media.audiopolicy.AudioMix: int mRouteFlags>;

        $i2 = $i1 & 1;

        if $i2 == 1 goto label1;

        return 0;

     label1:
        $i3 = r0.<android.media.audiopolicy.AudioMix: int mDeviceSystemType>;

        if i0 == $i3 goto label2;

        return 0;

     label2:
        $r2 = r0.<android.media.audiopolicy.AudioMix: java.lang.String mDeviceAddress>;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        return 1;
    }

    void setRegistration(java.lang.String)
    {
        android.media.audiopolicy.AudioMix r0;
        java.lang.String r1;

        r0 := @this: android.media.audiopolicy.AudioMix;

        r1 := @parameter0: java.lang.String;

        r0.<android.media.audiopolicy.AudioMix: java.lang.String mDeviceAddress> = r1;

        return;
    }

    public static void <clinit>()
    {
        <android.media.audiopolicy.AudioMix: int ROUTE_FLAG_SUPPORTED> = 3;

        <android.media.audiopolicy.AudioMix: int ROUTE_FLAG_RENDER> = 1;

        <android.media.audiopolicy.AudioMix: int ROUTE_FLAG_LOOP_BACK_RENDER> = 3;

        <android.media.audiopolicy.AudioMix: int ROUTE_FLAG_LOOP_BACK> = 2;

        <android.media.audiopolicy.AudioMix: int PRIVILEDGED_CAPTURE_MAX_SAMPLE_RATE> = 16000;

        <android.media.audiopolicy.AudioMix: int PRIVILEDGED_CAPTURE_MAX_CHANNEL_NUMBER> = 1;

        <android.media.audiopolicy.AudioMix: int PRIVILEDGED_CAPTURE_MAX_BYTES_PER_SAMPLE> = 2;

        <android.media.audiopolicy.AudioMix: int MIX_TYPE_RECORDERS> = 1;

        <android.media.audiopolicy.AudioMix: int MIX_TYPE_PLAYERS> = 0;

        <android.media.audiopolicy.AudioMix: int MIX_TYPE_INVALID> = -1;

        <android.media.audiopolicy.AudioMix: int MIX_STATE_MIXING> = 1;

        <android.media.audiopolicy.AudioMix: int MIX_STATE_IDLE> = 0;

        <android.media.audiopolicy.AudioMix: int MIX_STATE_DISABLED> = -1;

        <android.media.audiopolicy.AudioMix: int CALLBACK_FLAG_NOTIFY_ACTIVITY> = 1;

        <android.media.audiopolicy.AudioMix: int CALLBACK_FLAGS_ALL> = 1;

        return;
    }
}
