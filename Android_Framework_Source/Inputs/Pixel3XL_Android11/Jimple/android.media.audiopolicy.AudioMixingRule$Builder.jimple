public class android.media.audiopolicy.AudioMixingRule$Builder extends java.lang.Object
{
    private boolean mAllowPrivilegedPlaybackCapture;
    private java.util.ArrayList mCriteria;
    private int mTargetMixType;
    private boolean mVoiceCommunicationCaptureAllowed;

    public void <init>()
    {
        android.media.audiopolicy.AudioMixingRule$Builder r0;
        java.util.ArrayList $r1;

        r0 := @this: android.media.audiopolicy.AudioMixingRule$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.media.audiopolicy.AudioMixingRule$Builder: int mTargetMixType> = -1;

        r0.<android.media.audiopolicy.AudioMixingRule$Builder: boolean mAllowPrivilegedPlaybackCapture> = 0;

        r0.<android.media.audiopolicy.AudioMixingRule$Builder: boolean mVoiceCommunicationCaptureAllowed> = 0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<android.media.audiopolicy.AudioMixingRule$Builder: java.util.ArrayList mCriteria> = $r1;

        return;
    }

    private android.media.audiopolicy.AudioMixingRule$Builder addRuleInternal(android.media.AudioAttributes, java.lang.Integer, int) throws java.lang.IllegalArgumentException
    {
        android.media.audiopolicy.AudioMixingRule$Builder r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17;
        java.util.ArrayList r1, $r22, r33, r35;
        java.util.Iterator r2;
        java.lang.Object $r3;
        android.media.AudioAttributes $r4, $r8, r20;
        java.lang.String $r7, $r11, $r14, $r17;
        boolean $z2, $z3, $z4, $z5;
        java.lang.IllegalArgumentException $r18, r24, r26, r28, r30;
        java.lang.Throwable $r19;
        java.lang.Integer r21;
        android.media.audiopolicy.AudioMixingRule$AudioMixMatchCriterion r23, r34, r36;
        java.lang.StringBuilder r25, r27, r29, r31;
        java.lang.IllegalStateException r32;

        r0 := @this: android.media.audiopolicy.AudioMixingRule$Builder;

        r20 := @parameter0: android.media.AudioAttributes;

        r21 := @parameter1: java.lang.Integer;

        i0 := @parameter2: int;

        i16 = r0.<android.media.audiopolicy.AudioMixingRule$Builder: int mTargetMixType>;

        if i16 != -1 goto label02;

        $z4 = staticinvoke <android.media.audiopolicy.AudioMixingRule: boolean access$400(int)>(i0);

        if $z4 == 0 goto label01;

        r0.<android.media.audiopolicy.AudioMixingRule$Builder: int mTargetMixType> = 0;

        goto label05;

     label01:
        r0.<android.media.audiopolicy.AudioMixingRule$Builder: int mTargetMixType> = 1;

        goto label05;

     label02:
        if i16 != 0 goto label03;

        $z3 = staticinvoke <android.media.audiopolicy.AudioMixingRule: boolean access$400(int)>(i0);

        if $z3 == 0 goto label04;

     label03:
        $i1 = r0.<android.media.audiopolicy.AudioMixingRule$Builder: int mTargetMixType>;

        if $i1 != 1 goto label05;

        $z2 = staticinvoke <android.media.audiopolicy.AudioMixingRule: boolean access$400(int)>(i0);

        if $z2 != 0 goto label04;

        goto label05;

     label04:
        $r18 = new java.lang.IllegalArgumentException;

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Incompatible rule for mix");

        throw $r18;

     label05:
        r1 = r0.<android.media.audiopolicy.AudioMixingRule$Builder: java.util.ArrayList mCriteria>;

        entermonitor r1;

     label06:
        $r22 = r0.<android.media.audiopolicy.AudioMixingRule$Builder: java.util.ArrayList mCriteria>;

        r2 = virtualinvoke $r22.<java.util.ArrayList: java.util.Iterator iterator()>();

     label07:
        i17 = i0 & -32769;

     label08:
        $z5 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label24;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r23 = (android.media.audiopolicy.AudioMixingRule$AudioMixMatchCriterion) $r3;

        $i2 = r23.<android.media.audiopolicy.AudioMixingRule$AudioMixMatchCriterion: int mRule>;

        $i3 = $i2 & -32769;

        if $i3 == i17 goto label10;

     label09:
        goto label08;

     label10:
        if i17 == 1 goto label20;

        if i17 == 2 goto label17;

        if i17 == 4 goto label14;

        if i17 == 8 goto label11;

        goto label23;

     label11:
        $i13 = r23.<android.media.audiopolicy.AudioMixingRule$AudioMixMatchCriterion: int mIntProp>;

        $i14 = virtualinvoke r21.<java.lang.Integer: int intValue()>();

        if $i13 != $i14 goto label23;

        $i15 = r23.<android.media.audiopolicy.AudioMixingRule$AudioMixMatchCriterion: int mRule>;

        if $i15 != i0 goto label13;

        exitmonitor r1;

     label12:
        return r0;

     label13:
        r24 = new java.lang.IllegalArgumentException;

        r25 = new java.lang.StringBuilder;

        specialinvoke r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Contradictory rule exists for userId ");

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r21);

        $r17 = virtualinvoke r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw r24;

     label14:
        $i10 = r23.<android.media.audiopolicy.AudioMixingRule$AudioMixMatchCriterion: int mIntProp>;

        $i11 = virtualinvoke r21.<java.lang.Integer: int intValue()>();

        if $i10 != $i11 goto label23;

        $i12 = r23.<android.media.audiopolicy.AudioMixingRule$AudioMixMatchCriterion: int mRule>;

        if $i12 != i0 goto label16;

        exitmonitor r1;

     label15:
        return r0;

     label16:
        r26 = new java.lang.IllegalArgumentException;

        r27 = new java.lang.StringBuilder;

        specialinvoke r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Contradictory rule exists for UID ");

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r21);

        $r14 = virtualinvoke r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r26.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw r26;

     label17:
        $r8 = r23.<android.media.audiopolicy.AudioMixingRule$AudioMixMatchCriterion: android.media.AudioAttributes mAttr>;

        $i7 = virtualinvoke $r8.<android.media.AudioAttributes: int getCapturePreset()>();

        $i8 = virtualinvoke r20.<android.media.AudioAttributes: int getCapturePreset()>();

        if $i7 != $i8 goto label23;

        $i9 = r23.<android.media.audiopolicy.AudioMixingRule$AudioMixMatchCriterion: int mRule>;

        if $i9 != i0 goto label19;

        exitmonitor r1;

     label18:
        return r0;

     label19:
        r28 = new java.lang.IllegalArgumentException;

        r29 = new java.lang.StringBuilder;

        specialinvoke r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Contradictory rule exists for ");

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r20);

        $r11 = virtualinvoke r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r28.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw r28;

     label20:
        $r4 = r23.<android.media.audiopolicy.AudioMixingRule$AudioMixMatchCriterion: android.media.AudioAttributes mAttr>;

        $i4 = virtualinvoke $r4.<android.media.AudioAttributes: int getUsage()>();

        $i5 = virtualinvoke r20.<android.media.AudioAttributes: int getUsage()>();

        if $i4 != $i5 goto label23;

        $i6 = r23.<android.media.audiopolicy.AudioMixingRule$AudioMixMatchCriterion: int mRule>;

        if $i6 != i0 goto label22;

        exitmonitor r1;

     label21:
        return r0;

     label22:
        r30 = new java.lang.IllegalArgumentException;

        r31 = new java.lang.StringBuilder;

        specialinvoke r31.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Contradictory rule exists for ");

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r20);

        $r7 = virtualinvoke r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r30.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw r30;

     label23:
        goto label08;

     label24:
        if i17 == 1 goto label28;

        if i17 == 2 goto label28;

        if i17 == 4 goto label26;

        if i17 != 8 goto label25;

        goto label26;

     label25:
        r32 = new java.lang.IllegalStateException;

        specialinvoke r32.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unreachable code in addRuleInternal()");

        throw r32;

     label26:
        r33 = r0.<android.media.audiopolicy.AudioMixingRule$Builder: java.util.ArrayList mCriteria>;

        r34 = new android.media.audiopolicy.AudioMixingRule$AudioMixMatchCriterion;

        specialinvoke r34.<android.media.audiopolicy.AudioMixingRule$AudioMixMatchCriterion: void <init>(java.lang.Integer,int)>(r21, i0);

        virtualinvoke r33.<java.util.ArrayList: boolean add(java.lang.Object)>(r34);

     label27:
        goto label29;

     label28:
        r35 = r0.<android.media.audiopolicy.AudioMixingRule$Builder: java.util.ArrayList mCriteria>;

        r36 = new android.media.audiopolicy.AudioMixingRule$AudioMixMatchCriterion;

        specialinvoke r36.<android.media.audiopolicy.AudioMixingRule$AudioMixMatchCriterion: void <init>(android.media.AudioAttributes,int)>(r20, i0);

        virtualinvoke r35.<java.util.ArrayList: boolean add(java.lang.Object)>(r36);

     label29:
        exitmonitor r1;

     label30:
        return r0;

     label31:
        $r19 := @caughtexception;

     label32:
        exitmonitor r1;

     label33:
        throw $r19;

        catch java.lang.Throwable from label06 to label07 with label31;
        catch java.lang.Throwable from label08 to label09 with label31;
        catch java.lang.Throwable from label11 to label12 with label31;
        catch java.lang.Throwable from label13 to label14 with label31;
        catch java.lang.Throwable from label14 to label15 with label31;
        catch java.lang.Throwable from label16 to label17 with label31;
        catch java.lang.Throwable from label17 to label18 with label31;
        catch java.lang.Throwable from label19 to label20 with label31;
        catch java.lang.Throwable from label20 to label21 with label31;
        catch java.lang.Throwable from label22 to label23 with label31;
        catch java.lang.Throwable from label25 to label26 with label31;
        catch java.lang.Throwable from label26 to label27 with label31;
        catch java.lang.Throwable from label28 to label29 with label31;
        catch java.lang.Throwable from label29 to label30 with label31;
        catch java.lang.Throwable from label32 to label33 with label31;
    }

    private android.media.audiopolicy.AudioMixingRule$Builder checkAddRuleObjInternal(int, java.lang.Object) throws java.lang.IllegalArgumentException
    {
        android.media.audiopolicy.AudioMixingRule$Builder r0, $r9, $r12;
        int i0, $i1;
        java.lang.IllegalArgumentException $r1, $r5, $r7, $r10;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r2;
        java.lang.String $r6;
        java.lang.Integer $r8;
        android.media.AudioAttributes $r11;
        java.lang.Object r13;

        r0 := @this: android.media.audiopolicy.AudioMixingRule$Builder;

        i0 := @parameter0: int;

        r13 := @parameter1: java.lang.Object;

        if r13 == null goto label5;

        $z0 = staticinvoke <android.media.audiopolicy.AudioMixingRule: boolean access$200(int)>(i0);

        if $z0 == 0 goto label4;

        $i1 = -32769 & i0;

        $z1 = staticinvoke <android.media.audiopolicy.AudioMixingRule: boolean access$300(int)>($i1);

        if $z1 == 0 goto label2;

        $z3 = r13 instanceof android.media.AudioAttributes;

        if $z3 == 0 goto label1;

        $r11 = (android.media.AudioAttributes) r13;

        $r12 = specialinvoke r0.<android.media.audiopolicy.AudioMixingRule$Builder: android.media.audiopolicy.AudioMixingRule$Builder addRuleInternal(android.media.AudioAttributes,java.lang.Integer,int)>($r11, null, i0);

        return $r12;

     label1:
        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid AudioAttributes argument");

        throw $r10;

     label2:
        $z2 = r13 instanceof java.lang.Integer;

        if $z2 == 0 goto label3;

        $r8 = (java.lang.Integer) r13;

        $r9 = specialinvoke r0.<android.media.audiopolicy.AudioMixingRule$Builder: android.media.audiopolicy.AudioMixingRule$Builder addRuleInternal(android.media.AudioAttributes,java.lang.Integer,int)>(null, $r8, i0);

        return $r9;

     label3:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid Integer argument");

        throw $r7;

     label4:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal rule value ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label5:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null argument for mixing rule");

        throw $r1;
    }

    public android.media.audiopolicy.AudioMixingRule$Builder addMixRule(int, java.lang.Object) throws java.lang.IllegalArgumentException
    {
        android.media.audiopolicy.AudioMixingRule$Builder r0, $r6;
        int i0;
        boolean $z0;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5;
        java.lang.Object r7;

        r0 := @this: android.media.audiopolicy.AudioMixingRule$Builder;

        i0 := @parameter0: int;

        r7 := @parameter1: java.lang.Object;

        $z0 = staticinvoke <android.media.audiopolicy.AudioMixingRule: boolean access$100(int)>(i0);

        if $z0 == 0 goto label1;

        $r6 = specialinvoke r0.<android.media.audiopolicy.AudioMixingRule$Builder: android.media.audiopolicy.AudioMixingRule$Builder checkAddRuleObjInternal(int,java.lang.Object)>(i0, r7);

        return $r6;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal rule value ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    public android.media.audiopolicy.AudioMixingRule$Builder addRule(android.media.AudioAttributes, int) throws java.lang.IllegalArgumentException
    {
        android.media.audiopolicy.AudioMixingRule$Builder r0, $r6;
        int i0;
        boolean $z0;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5;
        android.media.AudioAttributes r7;

        r0 := @this: android.media.audiopolicy.AudioMixingRule$Builder;

        r7 := @parameter0: android.media.AudioAttributes;

        i0 := @parameter1: int;

        $z0 = staticinvoke <android.media.audiopolicy.AudioMixingRule: boolean access$000(int)>(i0);

        if $z0 == 0 goto label1;

        $r6 = specialinvoke r0.<android.media.audiopolicy.AudioMixingRule$Builder: android.media.audiopolicy.AudioMixingRule$Builder checkAddRuleObjInternal(int,java.lang.Object)>(i0, r7);

        return $r6;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal rule value ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    android.media.audiopolicy.AudioMixingRule$Builder addRuleFromParcel(android.os.Parcel) throws java.lang.IllegalArgumentException
    {
        android.media.audiopolicy.AudioMixingRule$Builder r0, $r13;
        int i0, $i1, i2, i3, i4;
        android.media.AudioAttributes$Builder $r1, $r2, $r3, $r4;
        java.lang.Integer $r5, r10;
        java.lang.StringBuilder $r6;
        java.lang.IllegalArgumentException $r7;
        java.lang.String $r8;
        android.os.Parcel r9;
        android.media.AudioAttributes r12;

        r0 := @this: android.media.audiopolicy.AudioMixingRule$Builder;

        r9 := @parameter0: android.os.Parcel;

        i0 = virtualinvoke r9.<android.os.Parcel: int readInt()>();

        i2 = -32769 & i0;

        r10 = null;

        if i2 == 1 goto label4;

        if i2 == 2 goto label3;

        if i2 == 4 goto label2;

        if i2 != 8 goto label1;

        goto label2;

     label1:
        virtualinvoke r9.<android.os.Parcel: int readInt()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal rule value ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in parcel");

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label2:
        $r5 = new java.lang.Integer;

        $i1 = virtualinvoke r9.<android.os.Parcel: int readInt()>();

        specialinvoke $r5.<java.lang.Integer: void <init>(int)>($i1);

        r10 = $r5;

        r12 = null;

        goto label5;

     label3:
        i3 = virtualinvoke r9.<android.os.Parcel: int readInt()>();

        $r3 = new android.media.AudioAttributes$Builder;

        specialinvoke $r3.<android.media.AudioAttributes$Builder: void <init>()>();

        $r4 = virtualinvoke $r3.<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setInternalCapturePreset(int)>(i3);

        r12 = virtualinvoke $r4.<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>();

        goto label5;

     label4:
        i4 = virtualinvoke r9.<android.os.Parcel: int readInt()>();

        $r1 = new android.media.AudioAttributes$Builder;

        specialinvoke $r1.<android.media.AudioAttributes$Builder: void <init>()>();

        $r2 = virtualinvoke $r1.<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setUsage(int)>(i4);

        r12 = virtualinvoke $r2.<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>();

     label5:
        $r13 = specialinvoke r0.<android.media.audiopolicy.AudioMixingRule$Builder: android.media.audiopolicy.AudioMixingRule$Builder addRuleInternal(android.media.AudioAttributes,java.lang.Integer,int)>(r12, r10, i0);

        return $r13;
    }

    public android.media.audiopolicy.AudioMixingRule$Builder allowPrivilegedPlaybackCapture(boolean)
    {
        android.media.audiopolicy.AudioMixingRule$Builder r0;
        boolean z0;

        r0 := @this: android.media.audiopolicy.AudioMixingRule$Builder;

        z0 := @parameter0: boolean;

        r0.<android.media.audiopolicy.AudioMixingRule$Builder: boolean mAllowPrivilegedPlaybackCapture> = z0;

        return r0;
    }

    public android.media.audiopolicy.AudioMixingRule build()
    {
        android.media.audiopolicy.AudioMixingRule$Builder r0;
        android.media.audiopolicy.AudioMixingRule $r1;
        boolean $z0, $z1;
        java.util.ArrayList $r2;
        int $i0;

        r0 := @this: android.media.audiopolicy.AudioMixingRule$Builder;

        $r1 = new android.media.audiopolicy.AudioMixingRule;

        $i0 = r0.<android.media.audiopolicy.AudioMixingRule$Builder: int mTargetMixType>;

        $r2 = r0.<android.media.audiopolicy.AudioMixingRule$Builder: java.util.ArrayList mCriteria>;

        $z1 = r0.<android.media.audiopolicy.AudioMixingRule$Builder: boolean mAllowPrivilegedPlaybackCapture>;

        $z0 = r0.<android.media.audiopolicy.AudioMixingRule$Builder: boolean mVoiceCommunicationCaptureAllowed>;

        specialinvoke $r1.<android.media.audiopolicy.AudioMixingRule: void <init>(int,java.util.ArrayList,boolean,boolean,android.media.audiopolicy.AudioMixingRule$1)>($i0, $r2, $z1, $z0, null);

        return $r1;
    }

    public android.media.audiopolicy.AudioMixingRule$Builder excludeMixRule(int, java.lang.Object) throws java.lang.IllegalArgumentException
    {
        android.media.audiopolicy.AudioMixingRule$Builder r0, $r6;
        int i0, $i1;
        boolean $z0;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5;
        java.lang.Object r7;

        r0 := @this: android.media.audiopolicy.AudioMixingRule$Builder;

        i0 := @parameter0: int;

        r7 := @parameter1: java.lang.Object;

        $z0 = staticinvoke <android.media.audiopolicy.AudioMixingRule: boolean access$100(int)>(i0);

        if $z0 == 0 goto label1;

        $i1 = 32768 | i0;

        $r6 = specialinvoke r0.<android.media.audiopolicy.AudioMixingRule$Builder: android.media.audiopolicy.AudioMixingRule$Builder checkAddRuleObjInternal(int,java.lang.Object)>($i1, r7);

        return $r6;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal rule value ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    public android.media.audiopolicy.AudioMixingRule$Builder excludeRule(android.media.AudioAttributes, int) throws java.lang.IllegalArgumentException
    {
        android.media.audiopolicy.AudioMixingRule$Builder r0, $r6;
        int i0, $i1;
        boolean $z0;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5;
        android.media.AudioAttributes r7;

        r0 := @this: android.media.audiopolicy.AudioMixingRule$Builder;

        r7 := @parameter0: android.media.AudioAttributes;

        i0 := @parameter1: int;

        $z0 = staticinvoke <android.media.audiopolicy.AudioMixingRule: boolean access$000(int)>(i0);

        if $z0 == 0 goto label1;

        $i1 = 32768 | i0;

        $r6 = specialinvoke r0.<android.media.audiopolicy.AudioMixingRule$Builder: android.media.audiopolicy.AudioMixingRule$Builder checkAddRuleObjInternal(int,java.lang.Object)>($i1, r7);

        return $r6;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal rule value ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    public android.media.audiopolicy.AudioMixingRule$Builder voiceCommunicationCaptureAllowed(boolean)
    {
        android.media.audiopolicy.AudioMixingRule$Builder r0;
        boolean z0;

        r0 := @this: android.media.audiopolicy.AudioMixingRule$Builder;

        z0 := @parameter0: boolean;

        r0.<android.media.audiopolicy.AudioMixingRule$Builder: boolean mVoiceCommunicationCaptureAllowed> = z0;

        return r0;
    }
}
