public class android.media.audiopolicy.AudioMixingRule extends java.lang.Object
{
    public static final int RULE_EXCLUDE_ATTRIBUTE_CAPTURE_PRESET;
    public static final int RULE_EXCLUDE_ATTRIBUTE_USAGE;
    public static final int RULE_EXCLUDE_UID;
    public static final int RULE_EXCLUDE_USERID;
    private static final int RULE_EXCLUSION_MASK;
    public static final int RULE_MATCH_ATTRIBUTE_CAPTURE_PRESET;
    public static final int RULE_MATCH_ATTRIBUTE_USAGE;
    public static final int RULE_MATCH_UID;
    public static final int RULE_MATCH_USERID;
    private boolean mAllowPrivilegedPlaybackCapture;
    private final java.util.ArrayList mCriteria;
    private final int mTargetMixType;
    private boolean mVoiceCommunicationCaptureAllowed;

    private void <init>(int, java.util.ArrayList, boolean, boolean)
    {
        android.media.audiopolicy.AudioMixingRule r0;
        int i0;
        java.util.ArrayList r1;
        boolean z0, z1;

        r0 := @this: android.media.audiopolicy.AudioMixingRule;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.ArrayList;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.media.audiopolicy.AudioMixingRule: boolean mAllowPrivilegedPlaybackCapture> = 0;

        r0.<android.media.audiopolicy.AudioMixingRule: boolean mVoiceCommunicationCaptureAllowed> = 0;

        r0.<android.media.audiopolicy.AudioMixingRule: java.util.ArrayList mCriteria> = r1;

        r0.<android.media.audiopolicy.AudioMixingRule: int mTargetMixType> = i0;

        r0.<android.media.audiopolicy.AudioMixingRule: boolean mAllowPrivilegedPlaybackCapture> = z0;

        r0.<android.media.audiopolicy.AudioMixingRule: boolean mVoiceCommunicationCaptureAllowed> = z1;

        return;
    }

    void <init>(int, java.util.ArrayList, boolean, boolean, android.media.audiopolicy.AudioMixingRule$1)
    {
        android.media.audiopolicy.AudioMixingRule r0;
        int i0;
        java.util.ArrayList r1;
        boolean z0, z1;
        android.media.audiopolicy.AudioMixingRule$1 r2;

        r0 := @this: android.media.audiopolicy.AudioMixingRule;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.ArrayList;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        r2 := @parameter4: android.media.audiopolicy.AudioMixingRule$1;

        specialinvoke r0.<android.media.audiopolicy.AudioMixingRule: void <init>(int,java.util.ArrayList,boolean,boolean)>(i0, r1, z0, z1);

        return;
    }

    static boolean access$000(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        $z0 = staticinvoke <android.media.audiopolicy.AudioMixingRule: boolean isValidAttributesSystemApiRule(int)>(i0);

        return $z0;
    }

    static boolean access$100(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        $z0 = staticinvoke <android.media.audiopolicy.AudioMixingRule: boolean isValidSystemApiRule(int)>(i0);

        return $z0;
    }

    static boolean access$200(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        $z0 = staticinvoke <android.media.audiopolicy.AudioMixingRule: boolean isValidRule(int)>(i0);

        return $z0;
    }

    static boolean access$300(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        $z0 = staticinvoke <android.media.audiopolicy.AudioMixingRule: boolean isAudioAttributeRule(int)>(i0);

        return $z0;
    }

    static boolean access$400(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        $z0 = staticinvoke <android.media.audiopolicy.AudioMixingRule: boolean isPlayerRule(int)>(i0);

        return $z0;
    }

    private static boolean areCriteriaEquivalent(java.util.ArrayList, java.util.ArrayList)
    {
        java.util.ArrayList r0, r1;
        int $i0, $i1, $i2, $i3;
        boolean z0;

        r0 := @parameter0: java.util.ArrayList;

        r1 := @parameter1: java.util.ArrayList;

        z0 = 0;

        if r0 == null goto label5;

        if r1 != null goto label1;

        goto label5;

     label1:
        if r0 != r1 goto label2;

        return 1;

     label2:
        $i0 = virtualinvoke r0.<java.util.ArrayList: int size()>();

        $i1 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        if $i0 == $i1 goto label3;

        return 0;

     label3:
        $i2 = virtualinvoke r0.<java.util.ArrayList: int hashCode()>();

        $i3 = virtualinvoke r1.<java.util.ArrayList: int hashCode()>();

        if $i2 != $i3 goto label4;

        z0 = 1;

     label4:
        return z0;

     label5:
        return 0;
    }

    private static boolean isAudioAttributeRule(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 == 1 goto label1;

        if i0 == 2 goto label1;

        return 0;

     label1:
        return 1;
    }

    private static boolean isPlayerRule(int)
    {
        int i0, i1;

        i0 := @parameter0: int;

        i1 = -32769 & i0;

        if i1 == 1 goto label1;

        if i1 == 4 goto label1;

        if i1 == 8 goto label1;

        return 0;

     label1:
        return 1;
    }

    private static boolean isValidAttributesSystemApiRule(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 == 1 goto label1;

        if i0 == 2 goto label1;

        return 0;

     label1:
        return 1;
    }

    private static boolean isValidRule(int)
    {
        int i0, i1;

        i0 := @parameter0: int;

        i1 = -32769 & i0;

        if i1 == 1 goto label1;

        if i1 == 2 goto label1;

        if i1 == 4 goto label1;

        if i1 == 8 goto label1;

        return 0;

     label1:
        return 1;
    }

    private static boolean isValidSystemApiRule(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 == 1 goto label1;

        if i0 == 2 goto label1;

        if i0 == 4 goto label1;

        if i0 == 8 goto label1;

        return 0;

     label1:
        return 1;
    }

    public boolean allowPrivilegedPlaybackCapture()
    {
        android.media.audiopolicy.AudioMixingRule r0;
        boolean $z0;

        r0 := @this: android.media.audiopolicy.AudioMixingRule;

        $z0 = r0.<android.media.audiopolicy.AudioMixingRule: boolean mAllowPrivilegedPlaybackCapture>;

        return $z0;
    }

    boolean containsMatchAttributeRuleForUsage(int)
    {
        android.media.audiopolicy.AudioMixingRule r0;
        int i0, $i1, $i2;
        java.util.Iterator r1;
        android.media.audiopolicy.AudioMixingRule$AudioMixMatchCriterion r2;
        java.util.ArrayList $r3;
        boolean $z0;
        java.lang.Object $r4;
        android.media.AudioAttributes $r5, $r6;

        r0 := @this: android.media.audiopolicy.AudioMixingRule;

        i0 := @parameter0: int;

        $r3 = r0.<android.media.audiopolicy.AudioMixingRule: java.util.ArrayList mCriteria>;

        r1 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.media.audiopolicy.AudioMixingRule$AudioMixMatchCriterion) $r4;

        $i1 = r2.<android.media.audiopolicy.AudioMixingRule$AudioMixMatchCriterion: int mRule>;

        if $i1 != 1 goto label2;

        $r5 = r2.<android.media.audiopolicy.AudioMixingRule$AudioMixMatchCriterion: android.media.AudioAttributes mAttr>;

        if $r5 == null goto label2;

        $r6 = r2.<android.media.audiopolicy.AudioMixingRule$AudioMixMatchCriterion: android.media.AudioAttributes mAttr>;

        $i2 = virtualinvoke $r6.<android.media.AudioAttributes: int getUsage()>();

        if $i2 != i0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public boolean equals(java.lang.Object)
    {
        android.media.audiopolicy.AudioMixingRule r0, r6;
        java.lang.Class $r1, $r2;
        int $i0, $i1;
        java.util.ArrayList $r3, $r4;
        boolean $z0, $z1, $z2, $z3, $z4, z5;
        java.lang.Object r5;

        r0 := @this: android.media.audiopolicy.AudioMixingRule;

        r5 := @parameter0: java.lang.Object;

        z5 = 1;

        if r0 != r5 goto label1;

        return 1;

     label1:
        if r5 == null goto label5;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke r5.<java.lang.Object: java.lang.Class getClass()>();

        if $r1 == $r2 goto label2;

        goto label5;

     label2:
        r6 = (android.media.audiopolicy.AudioMixingRule) r5;

        $i1 = r0.<android.media.audiopolicy.AudioMixingRule: int mTargetMixType>;

        $i0 = r6.<android.media.audiopolicy.AudioMixingRule: int mTargetMixType>;

        if $i1 != $i0 goto label3;

        $r4 = r0.<android.media.audiopolicy.AudioMixingRule: java.util.ArrayList mCriteria>;

        $r3 = r6.<android.media.audiopolicy.AudioMixingRule: java.util.ArrayList mCriteria>;

        $z0 = staticinvoke <android.media.audiopolicy.AudioMixingRule: boolean areCriteriaEquivalent(java.util.ArrayList,java.util.ArrayList)>($r4, $r3);

        if $z0 == 0 goto label3;

        $z2 = r0.<android.media.audiopolicy.AudioMixingRule: boolean mAllowPrivilegedPlaybackCapture>;

        $z1 = r6.<android.media.audiopolicy.AudioMixingRule: boolean mAllowPrivilegedPlaybackCapture>;

        if $z2 != $z1 goto label3;

        $z4 = r0.<android.media.audiopolicy.AudioMixingRule: boolean mVoiceCommunicationCaptureAllowed>;

        $z3 = r6.<android.media.audiopolicy.AudioMixingRule: boolean mVoiceCommunicationCaptureAllowed>;

        if $z4 != $z3 goto label3;

        goto label4;

     label3:
        z5 = 0;

     label4:
        return z5;

     label5:
        return 0;
    }

    public java.util.ArrayList getCriteria()
    {
        android.media.audiopolicy.AudioMixingRule r0;
        java.util.ArrayList $r1;

        r0 := @this: android.media.audiopolicy.AudioMixingRule;

        $r1 = r0.<android.media.audiopolicy.AudioMixingRule: java.util.ArrayList mCriteria>;

        return $r1;
    }

    int getTargetMixType()
    {
        android.media.audiopolicy.AudioMixingRule r0;
        int $i0;

        r0 := @this: android.media.audiopolicy.AudioMixingRule;

        $i0 = r0.<android.media.audiopolicy.AudioMixingRule: int mTargetMixType>;

        return $i0;
    }

    public int hashCode()
    {
        android.media.audiopolicy.AudioMixingRule r0;
        java.lang.Object[] $r1;
        int $i0, $i1;
        java.lang.Integer $r2;
        java.util.ArrayList $r3;
        boolean $z0, $z1;
        java.lang.Boolean $r4, $r5;

        r0 := @this: android.media.audiopolicy.AudioMixingRule;

        $r1 = newarray (java.lang.Object)[4];

        $i0 = r0.<android.media.audiopolicy.AudioMixingRule: int mTargetMixType>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[0] = $r2;

        $r3 = r0.<android.media.audiopolicy.AudioMixingRule: java.util.ArrayList mCriteria>;

        $r1[1] = $r3;

        $z0 = r0.<android.media.audiopolicy.AudioMixingRule: boolean mAllowPrivilegedPlaybackCapture>;

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r1[2] = $r4;

        $z1 = r0.<android.media.audiopolicy.AudioMixingRule: boolean mVoiceCommunicationCaptureAllowed>;

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        $r1[3] = $r5;

        $i1 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>($r1);

        return $i1;
    }

    boolean isAffectingUsage(int)
    {
        android.media.audiopolicy.AudioMixingRule r0;
        int i0, $i1, $i2, $i3;
        java.util.Iterator r1;
        android.media.audiopolicy.AudioMixingRule$AudioMixMatchCriterion r2;
        java.util.ArrayList $r3;
        boolean $z0;
        java.lang.Object $r4;
        android.media.AudioAttributes $r5, $r6;

        r0 := @this: android.media.audiopolicy.AudioMixingRule;

        i0 := @parameter0: int;

        $r3 = r0.<android.media.audiopolicy.AudioMixingRule: java.util.ArrayList mCriteria>;

        r1 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.media.audiopolicy.AudioMixingRule$AudioMixMatchCriterion) $r4;

        $i1 = r2.<android.media.audiopolicy.AudioMixingRule$AudioMixMatchCriterion: int mRule>;

        $i2 = $i1 & 1;

        if $i2 == 0 goto label2;

        $r5 = r2.<android.media.audiopolicy.AudioMixingRule$AudioMixMatchCriterion: android.media.AudioAttributes mAttr>;

        if $r5 == null goto label2;

        $r6 = r2.<android.media.audiopolicy.AudioMixingRule$AudioMixMatchCriterion: android.media.AudioAttributes mAttr>;

        $i3 = virtualinvoke $r6.<android.media.AudioAttributes: int getUsage()>();

        if $i3 != i0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public void setVoiceCommunicationCaptureAllowed(boolean)
    {
        android.media.audiopolicy.AudioMixingRule r0;
        boolean z0;

        r0 := @this: android.media.audiopolicy.AudioMixingRule;

        z0 := @parameter0: boolean;

        r0.<android.media.audiopolicy.AudioMixingRule: boolean mVoiceCommunicationCaptureAllowed> = z0;

        return;
    }

    public boolean voiceCommunicationCaptureAllowed()
    {
        android.media.audiopolicy.AudioMixingRule r0;
        boolean $z0;

        r0 := @this: android.media.audiopolicy.AudioMixingRule;

        $z0 = r0.<android.media.audiopolicy.AudioMixingRule: boolean mVoiceCommunicationCaptureAllowed>;

        return $z0;
    }

    public static void <clinit>()
    {
        <android.media.audiopolicy.AudioMixingRule: int RULE_MATCH_USERID> = 8;

        <android.media.audiopolicy.AudioMixingRule: int RULE_MATCH_UID> = 4;

        <android.media.audiopolicy.AudioMixingRule: int RULE_MATCH_ATTRIBUTE_USAGE> = 1;

        <android.media.audiopolicy.AudioMixingRule: int RULE_MATCH_ATTRIBUTE_CAPTURE_PRESET> = 2;

        <android.media.audiopolicy.AudioMixingRule: int RULE_EXCLUSION_MASK> = 32768;

        <android.media.audiopolicy.AudioMixingRule: int RULE_EXCLUDE_USERID> = 32776;

        <android.media.audiopolicy.AudioMixingRule: int RULE_EXCLUDE_UID> = 32772;

        <android.media.audiopolicy.AudioMixingRule: int RULE_EXCLUDE_ATTRIBUTE_USAGE> = 32769;

        <android.media.audiopolicy.AudioMixingRule: int RULE_EXCLUDE_ATTRIBUTE_CAPTURE_PRESET> = 32770;

        return;
    }
}
