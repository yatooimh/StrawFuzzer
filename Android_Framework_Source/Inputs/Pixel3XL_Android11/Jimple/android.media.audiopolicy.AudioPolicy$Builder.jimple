public class android.media.audiopolicy.AudioPolicy$Builder extends java.lang.Object
{
    private android.content.Context mContext;
    private android.media.audiopolicy.AudioPolicy$AudioPolicyFocusListener mFocusListener;
    private boolean mIsFocusPolicy;
    private boolean mIsTestFocusPolicy;
    private android.os.Looper mLooper;
    private java.util.ArrayList mMixes;
    private android.media.projection.MediaProjection mProjection;
    private android.media.audiopolicy.AudioPolicy$AudioPolicyStatusListener mStatusListener;
    private android.media.audiopolicy.AudioPolicy$AudioPolicyVolumeCallback mVolCb;

    public void <init>(android.content.Context)
    {
        android.media.audiopolicy.AudioPolicy$Builder r0;
        android.content.Context r1;
        java.util.ArrayList $r2;

        r0 := @this: android.media.audiopolicy.AudioPolicy$Builder;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.media.audiopolicy.AudioPolicy$Builder: boolean mIsFocusPolicy> = 0;

        r0.<android.media.audiopolicy.AudioPolicy$Builder: boolean mIsTestFocusPolicy> = 0;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<android.media.audiopolicy.AudioPolicy$Builder: java.util.ArrayList mMixes> = $r2;

        r0.<android.media.audiopolicy.AudioPolicy$Builder: android.content.Context mContext> = r1;

        return;
    }

    public android.media.audiopolicy.AudioPolicy$Builder addMix(android.media.audiopolicy.AudioMix) throws java.lang.IllegalArgumentException
    {
        android.media.audiopolicy.AudioPolicy$Builder r0;
        android.media.audiopolicy.AudioMix r1;
        java.lang.IllegalArgumentException $r2;
        java.util.ArrayList $r3;

        r0 := @this: android.media.audiopolicy.AudioPolicy$Builder;

        r1 := @parameter0: android.media.audiopolicy.AudioMix;

        if r1 == null goto label1;

        $r3 = r0.<android.media.audiopolicy.AudioPolicy$Builder: java.util.ArrayList mMixes>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        return r0;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null AudioMix argument");

        throw $r2;
    }

    public android.media.audiopolicy.AudioPolicy build()
    {
        android.media.audiopolicy.AudioPolicy$Builder r0;
        java.util.Iterator r1;
        android.media.audiopolicy.AudioMix r2;
        android.media.audiopolicy.AudioPolicy$AudioPolicyStatusListener $r3, $r9;
        boolean $z0, $z1, $z2, $z3;
        android.media.audiopolicy.AudioPolicy $r4;
        android.media.audiopolicy.AudioPolicyConfig $r5;
        java.util.ArrayList $r6, $r15;
        android.media.projection.MediaProjection $r7;
        android.media.audiopolicy.AudioPolicy$AudioPolicyVolumeCallback $r8;
        android.media.audiopolicy.AudioPolicy$AudioPolicyFocusListener $r10, $r13;
        android.os.Looper $r11;
        android.content.Context $r12;
        java.lang.IllegalStateException $r14;
        java.lang.Object $r16;
        int $i0, $i1;

        r0 := @this: android.media.audiopolicy.AudioPolicy$Builder;

        $r3 = r0.<android.media.audiopolicy.AudioPolicy$Builder: android.media.audiopolicy.AudioPolicy$AudioPolicyStatusListener mStatusListener>;

        if $r3 == null goto label2;

        $r15 = r0.<android.media.audiopolicy.AudioPolicy$Builder: java.util.ArrayList mMixes>;

        r1 = virtualinvoke $r15.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label2;

        $r16 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.media.audiopolicy.AudioMix) $r16;

        $i0 = r2.<android.media.audiopolicy.AudioMix: int mCallbackFlags>;

        $i1 = $i0 | 1;

        r2.<android.media.audiopolicy.AudioMix: int mCallbackFlags> = $i1;

        goto label1;

     label2:
        $z0 = r0.<android.media.audiopolicy.AudioPolicy$Builder: boolean mIsFocusPolicy>;

        if $z0 == 0 goto label4;

        $r13 = r0.<android.media.audiopolicy.AudioPolicy$Builder: android.media.audiopolicy.AudioPolicy$AudioPolicyFocusListener mFocusListener>;

        if $r13 == null goto label3;

        goto label4;

     label3:
        $r14 = new java.lang.IllegalStateException;

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot be a focus policy without an AudioPolicyFocusListener");

        throw $r14;

     label4:
        $r4 = new android.media.audiopolicy.AudioPolicy;

        $r5 = new android.media.audiopolicy.AudioPolicyConfig;

        $r6 = r0.<android.media.audiopolicy.AudioPolicy$Builder: java.util.ArrayList mMixes>;

        specialinvoke $r5.<android.media.audiopolicy.AudioPolicyConfig: void <init>(java.util.ArrayList)>($r6);

        $r12 = r0.<android.media.audiopolicy.AudioPolicy$Builder: android.content.Context mContext>;

        $r11 = r0.<android.media.audiopolicy.AudioPolicy$Builder: android.os.Looper mLooper>;

        $r10 = r0.<android.media.audiopolicy.AudioPolicy$Builder: android.media.audiopolicy.AudioPolicy$AudioPolicyFocusListener mFocusListener>;

        $r9 = r0.<android.media.audiopolicy.AudioPolicy$Builder: android.media.audiopolicy.AudioPolicy$AudioPolicyStatusListener mStatusListener>;

        $z2 = r0.<android.media.audiopolicy.AudioPolicy$Builder: boolean mIsFocusPolicy>;

        $z1 = r0.<android.media.audiopolicy.AudioPolicy$Builder: boolean mIsTestFocusPolicy>;

        $r8 = r0.<android.media.audiopolicy.AudioPolicy$Builder: android.media.audiopolicy.AudioPolicy$AudioPolicyVolumeCallback mVolCb>;

        $r7 = r0.<android.media.audiopolicy.AudioPolicy$Builder: android.media.projection.MediaProjection mProjection>;

        specialinvoke $r4.<android.media.audiopolicy.AudioPolicy: void <init>(android.media.audiopolicy.AudioPolicyConfig,android.content.Context,android.os.Looper,android.media.audiopolicy.AudioPolicy$AudioPolicyFocusListener,android.media.audiopolicy.AudioPolicy$AudioPolicyStatusListener,boolean,boolean,android.media.audiopolicy.AudioPolicy$AudioPolicyVolumeCallback,android.media.projection.MediaProjection,android.media.audiopolicy.AudioPolicy$1)>($r5, $r12, $r11, $r10, $r9, $z2, $z1, $r8, $r7, null);

        return $r4;
    }

    public void setAudioPolicyFocusListener(android.media.audiopolicy.AudioPolicy$AudioPolicyFocusListener)
    {
        android.media.audiopolicy.AudioPolicy$Builder r0;
        android.media.audiopolicy.AudioPolicy$AudioPolicyFocusListener r1;

        r0 := @this: android.media.audiopolicy.AudioPolicy$Builder;

        r1 := @parameter0: android.media.audiopolicy.AudioPolicy$AudioPolicyFocusListener;

        r0.<android.media.audiopolicy.AudioPolicy$Builder: android.media.audiopolicy.AudioPolicy$AudioPolicyFocusListener mFocusListener> = r1;

        return;
    }

    public void setAudioPolicyStatusListener(android.media.audiopolicy.AudioPolicy$AudioPolicyStatusListener)
    {
        android.media.audiopolicy.AudioPolicy$Builder r0;
        android.media.audiopolicy.AudioPolicy$AudioPolicyStatusListener r1;

        r0 := @this: android.media.audiopolicy.AudioPolicy$Builder;

        r1 := @parameter0: android.media.audiopolicy.AudioPolicy$AudioPolicyStatusListener;

        r0.<android.media.audiopolicy.AudioPolicy$Builder: android.media.audiopolicy.AudioPolicy$AudioPolicyStatusListener mStatusListener> = r1;

        return;
    }

    public android.media.audiopolicy.AudioPolicy$Builder setAudioPolicyVolumeCallback(android.media.audiopolicy.AudioPolicy$AudioPolicyVolumeCallback)
    {
        android.media.audiopolicy.AudioPolicy$Builder r0;
        android.media.audiopolicy.AudioPolicy$AudioPolicyVolumeCallback r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: android.media.audiopolicy.AudioPolicy$Builder;

        r1 := @parameter0: android.media.audiopolicy.AudioPolicy$AudioPolicyVolumeCallback;

        if r1 == null goto label1;

        r0.<android.media.audiopolicy.AudioPolicy$Builder: android.media.audiopolicy.AudioPolicy$AudioPolicyVolumeCallback mVolCb> = r1;

        return r0;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid null volume callback");

        throw $r2;
    }

    public android.media.audiopolicy.AudioPolicy$Builder setIsAudioFocusPolicy(boolean)
    {
        android.media.audiopolicy.AudioPolicy$Builder r0;
        boolean z0;

        r0 := @this: android.media.audiopolicy.AudioPolicy$Builder;

        z0 := @parameter0: boolean;

        r0.<android.media.audiopolicy.AudioPolicy$Builder: boolean mIsFocusPolicy> = z0;

        return r0;
    }

    public android.media.audiopolicy.AudioPolicy$Builder setIsTestFocusPolicy(boolean)
    {
        android.media.audiopolicy.AudioPolicy$Builder r0;
        boolean z0;

        r0 := @this: android.media.audiopolicy.AudioPolicy$Builder;

        z0 := @parameter0: boolean;

        r0.<android.media.audiopolicy.AudioPolicy$Builder: boolean mIsTestFocusPolicy> = z0;

        return r0;
    }

    public android.media.audiopolicy.AudioPolicy$Builder setLooper(android.os.Looper) throws java.lang.IllegalArgumentException
    {
        android.media.audiopolicy.AudioPolicy$Builder r0;
        android.os.Looper r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: android.media.audiopolicy.AudioPolicy$Builder;

        r1 := @parameter0: android.os.Looper;

        if r1 == null goto label1;

        r0.<android.media.audiopolicy.AudioPolicy$Builder: android.os.Looper mLooper> = r1;

        return r0;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null Looper argument");

        throw $r2;
    }

    public android.media.audiopolicy.AudioPolicy$Builder setMediaProjection(android.media.projection.MediaProjection)
    {
        android.media.audiopolicy.AudioPolicy$Builder r0;
        android.media.projection.MediaProjection r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: android.media.audiopolicy.AudioPolicy$Builder;

        r1 := @parameter0: android.media.projection.MediaProjection;

        if r1 == null goto label1;

        r0.<android.media.audiopolicy.AudioPolicy$Builder: android.media.projection.MediaProjection mProjection> = r1;

        return r0;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid null volume callback");

        throw $r2;
    }
}
