public class android.media.audiopolicy.AudioPolicy extends java.lang.Object
{
    private static final boolean DEBUG;
    public static final int FOCUS_POLICY_DUCKING_DEFAULT;
    public static final int FOCUS_POLICY_DUCKING_IN_APP;
    public static final int FOCUS_POLICY_DUCKING_IN_POLICY;
    private static final int MSG_FOCUS_ABANDON;
    private static final int MSG_FOCUS_GRANT;
    private static final int MSG_FOCUS_LOSS;
    private static final int MSG_FOCUS_REQUEST;
    private static final int MSG_MIX_STATE_UPDATE;
    private static final int MSG_POLICY_STATUS_CHANGE;
    private static final int MSG_VOL_ADJUST;
    public static final int POLICY_STATUS_REGISTERED;
    public static final int POLICY_STATUS_UNREGISTERED;
    private static final java.lang.String TAG;
    private static android.media.IAudioService sService;
    private java.util.ArrayList mCaptors;
    private android.media.audiopolicy.AudioPolicyConfig mConfig;
    private android.content.Context mContext;
    private final android.media.audiopolicy.AudioPolicy$EventHandler mEventHandler;
    private android.media.audiopolicy.AudioPolicy$AudioPolicyFocusListener mFocusListener;
    private java.util.ArrayList mInjectors;
    private boolean mIsFocusPolicy;
    private boolean mIsTestFocusPolicy;
    private final java.lang.Object mLock;
    private final android.media.audiopolicy.IAudioPolicyCallback mPolicyCb;
    private final android.media.projection.MediaProjection mProjection;
    private java.lang.String mRegistrationId;
    private int mStatus;
    private android.media.audiopolicy.AudioPolicy$AudioPolicyStatusListener mStatusListener;
    private final android.media.audiopolicy.AudioPolicy$AudioPolicyVolumeCallback mVolCb;

    private void <init>(android.media.audiopolicy.AudioPolicyConfig, android.content.Context, android.os.Looper, android.media.audiopolicy.AudioPolicy$AudioPolicyFocusListener, android.media.audiopolicy.AudioPolicy$AudioPolicyStatusListener, boolean, boolean, android.media.audiopolicy.AudioPolicy$AudioPolicyVolumeCallback, android.media.projection.MediaProjection)
    {
        android.media.audiopolicy.AudioPolicy r0;
        android.content.Context r1;
        android.os.Looper r2, r11;
        android.media.audiopolicy.AudioPolicy$AudioPolicyFocusListener r3;
        android.media.audiopolicy.AudioPolicy$AudioPolicyStatusListener r4;
        boolean z0, z1;
        android.media.audiopolicy.AudioPolicy$AudioPolicyVolumeCallback r5;
        android.media.projection.MediaProjection r6;
        java.lang.Object $r7;
        android.media.audiopolicy.AudioPolicy$1 $r8;
        android.media.audiopolicy.AudioPolicy$EventHandler $r9;
        android.media.audiopolicy.AudioPolicyConfig r10;

        r0 := @this: android.media.audiopolicy.AudioPolicy;

        r10 := @parameter0: android.media.audiopolicy.AudioPolicyConfig;

        r1 := @parameter1: android.content.Context;

        r2 := @parameter2: android.os.Looper;

        r3 := @parameter3: android.media.audiopolicy.AudioPolicy$AudioPolicyFocusListener;

        r4 := @parameter4: android.media.audiopolicy.AudioPolicy$AudioPolicyStatusListener;

        z0 := @parameter5: boolean;

        z1 := @parameter6: boolean;

        r5 := @parameter7: android.media.audiopolicy.AudioPolicy$AudioPolicyVolumeCallback;

        r6 := @parameter8: android.media.projection.MediaProjection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r7 = new java.lang.Object;

        specialinvoke $r7.<java.lang.Object: void <init>()>();

        r0.<android.media.audiopolicy.AudioPolicy: java.lang.Object mLock> = $r7;

        $r8 = new android.media.audiopolicy.AudioPolicy$1;

        specialinvoke $r8.<android.media.audiopolicy.AudioPolicy$1: void <init>(android.media.audiopolicy.AudioPolicy)>(r0);

        r0.<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.IAudioPolicyCallback mPolicyCb> = $r8;

        r0.<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.AudioPolicyConfig mConfig> = r10;

        r0.<android.media.audiopolicy.AudioPolicy: int mStatus> = 1;

        r0.<android.media.audiopolicy.AudioPolicy: android.content.Context mContext> = r1;

        r11 = r2;

        if r2 != null goto label1;

        r11 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

     label1:
        if r11 == null goto label2;

        $r9 = new android.media.audiopolicy.AudioPolicy$EventHandler;

        specialinvoke $r9.<android.media.audiopolicy.AudioPolicy$EventHandler: void <init>(android.media.audiopolicy.AudioPolicy,android.media.audiopolicy.AudioPolicy,android.os.Looper)>(r0, r0, r11);

        r0.<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.AudioPolicy$EventHandler mEventHandler> = $r9;

        goto label3;

     label2:
        r0.<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.AudioPolicy$EventHandler mEventHandler> = null;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AudioPolicy", "No event handler due to looper without a thread");

     label3:
        r0.<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.AudioPolicy$AudioPolicyFocusListener mFocusListener> = r3;

        r0.<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.AudioPolicy$AudioPolicyStatusListener mStatusListener> = r4;

        r0.<android.media.audiopolicy.AudioPolicy: boolean mIsFocusPolicy> = z0;

        r0.<android.media.audiopolicy.AudioPolicy: boolean mIsTestFocusPolicy> = z1;

        r0.<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.AudioPolicy$AudioPolicyVolumeCallback mVolCb> = r5;

        r0.<android.media.audiopolicy.AudioPolicy: android.media.projection.MediaProjection mProjection> = r6;

        return;
    }

    void <init>(android.media.audiopolicy.AudioPolicyConfig, android.content.Context, android.os.Looper, android.media.audiopolicy.AudioPolicy$AudioPolicyFocusListener, android.media.audiopolicy.AudioPolicy$AudioPolicyStatusListener, boolean, boolean, android.media.audiopolicy.AudioPolicy$AudioPolicyVolumeCallback, android.media.projection.MediaProjection, android.media.audiopolicy.AudioPolicy$1)
    {
        android.media.audiopolicy.AudioPolicy r0;
        android.media.audiopolicy.AudioPolicyConfig r1;
        android.content.Context r2;
        android.os.Looper r3;
        android.media.audiopolicy.AudioPolicy$AudioPolicyFocusListener r4;
        android.media.audiopolicy.AudioPolicy$AudioPolicyStatusListener r5;
        boolean z0, z1;
        android.media.audiopolicy.AudioPolicy$AudioPolicyVolumeCallback r6;
        android.media.projection.MediaProjection r7;
        android.media.audiopolicy.AudioPolicy$1 r8;

        r0 := @this: android.media.audiopolicy.AudioPolicy;

        r1 := @parameter0: android.media.audiopolicy.AudioPolicyConfig;

        r2 := @parameter1: android.content.Context;

        r3 := @parameter2: android.os.Looper;

        r4 := @parameter3: android.media.audiopolicy.AudioPolicy$AudioPolicyFocusListener;

        r5 := @parameter4: android.media.audiopolicy.AudioPolicy$AudioPolicyStatusListener;

        z0 := @parameter5: boolean;

        z1 := @parameter6: boolean;

        r6 := @parameter7: android.media.audiopolicy.AudioPolicy$AudioPolicyVolumeCallback;

        r7 := @parameter8: android.media.projection.MediaProjection;

        r8 := @parameter9: android.media.audiopolicy.AudioPolicy$1;

        specialinvoke r0.<android.media.audiopolicy.AudioPolicy: void <init>(android.media.audiopolicy.AudioPolicyConfig,android.content.Context,android.os.Looper,android.media.audiopolicy.AudioPolicy$AudioPolicyFocusListener,android.media.audiopolicy.AudioPolicy$AudioPolicyStatusListener,boolean,boolean,android.media.audiopolicy.AudioPolicy$AudioPolicyVolumeCallback,android.media.projection.MediaProjection)>(r1, r2, r3, r4, r5, z0, z1, r6, r7);

        return;
    }

    static void access$100(android.media.audiopolicy.AudioPolicy, int, java.lang.Object, int)
    {
        android.media.audiopolicy.AudioPolicy r0;
        int i0, i1;
        java.lang.Object r1;

        r0 := @parameter0: android.media.audiopolicy.AudioPolicy;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.Object;

        i1 := @parameter3: int;

        specialinvoke r0.<android.media.audiopolicy.AudioPolicy: void sendMsg(int,java.lang.Object,int)>(i0, r1, i1);

        return;
    }

    static android.media.audiopolicy.AudioPolicyConfig access$200(android.media.audiopolicy.AudioPolicy)
    {
        android.media.audiopolicy.AudioPolicy r0;
        android.media.audiopolicy.AudioPolicyConfig $r1;

        r0 := @parameter0: android.media.audiopolicy.AudioPolicy;

        $r1 = r0.<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.AudioPolicyConfig mConfig>;

        return $r1;
    }

    static void access$300(android.media.audiopolicy.AudioPolicy)
    {
        android.media.audiopolicy.AudioPolicy r0;

        r0 := @parameter0: android.media.audiopolicy.AudioPolicy;

        specialinvoke r0.<android.media.audiopolicy.AudioPolicy: void onPolicyStatusChange()>();

        return;
    }

    static android.media.audiopolicy.AudioPolicy$AudioPolicyFocusListener access$400(android.media.audiopolicy.AudioPolicy)
    {
        android.media.audiopolicy.AudioPolicy r0;
        android.media.audiopolicy.AudioPolicy$AudioPolicyFocusListener $r1;

        r0 := @parameter0: android.media.audiopolicy.AudioPolicy;

        $r1 = r0.<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.AudioPolicy$AudioPolicyFocusListener mFocusListener>;

        return $r1;
    }

    static android.media.audiopolicy.AudioPolicy$AudioPolicyStatusListener access$500(android.media.audiopolicy.AudioPolicy)
    {
        android.media.audiopolicy.AudioPolicy r0;
        android.media.audiopolicy.AudioPolicy$AudioPolicyStatusListener $r1;

        r0 := @parameter0: android.media.audiopolicy.AudioPolicy;

        $r1 = r0.<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.AudioPolicy$AudioPolicyStatusListener mStatusListener>;

        return $r1;
    }

    static android.media.audiopolicy.AudioPolicy$AudioPolicyVolumeCallback access$600(android.media.audiopolicy.AudioPolicy)
    {
        android.media.audiopolicy.AudioPolicy r0;
        android.media.audiopolicy.AudioPolicy$AudioPolicyVolumeCallback $r1;

        r0 := @parameter0: android.media.audiopolicy.AudioPolicy;

        $r1 = r0.<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.AudioPolicy$AudioPolicyVolumeCallback mVolCb>;

        return $r1;
    }

    private static java.lang.String addressForTag(android.media.audiopolicy.AudioMix)
    {
        android.media.audiopolicy.AudioMix r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r4, $r6;

        r0 := @parameter0: android.media.audiopolicy.AudioMix;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("addr=");

        $r4 = virtualinvoke r0.<android.media.audiopolicy.AudioMix: java.lang.String getRegistration()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    private int checkCallingOrSelfPermission(java.lang.String)
    {
        android.media.audiopolicy.AudioPolicy r0;
        android.content.Context r1;
        int i0, $i2, i3, i4;
        android.app.IActivityManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;

        r0 := @this: android.media.audiopolicy.AudioPolicy;

        r5 := @parameter0: java.lang.String;

        r1 = r0.<android.media.audiopolicy.AudioPolicy: android.content.Context mContext>;

        if r1 == null goto label1;

        $i2 = virtualinvoke r1.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>(r5);

        return $i2;

     label1:
        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("AudioPolicy", "Null context, checking permission via ActivityManager");

        i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

     label2:
        $r2 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        i4 = interfaceinvoke $r2.<android.app.IActivityManager: int checkPermission(java.lang.String,int,int)>(r5, i0, i3);

     label3:
        return i4;

     label4:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    private void checkMixReadyToUse(android.media.audiopolicy.AudioMix, boolean) throws java.lang.IllegalArgumentException
    {
        android.media.audiopolicy.AudioPolicy r0;
        boolean z0, $z1;
        android.media.audiopolicy.AudioPolicyConfig $r1;
        java.util.ArrayList $r2;
        java.lang.IllegalArgumentException $r3, $r4, $r5, $r6, $r7;
        int $i0, $i1, $i2, $i3;
        android.media.audiopolicy.AudioMix r8;
        java.lang.String r9;

        r0 := @this: android.media.audiopolicy.AudioPolicy;

        r8 := @parameter0: android.media.audiopolicy.AudioMix;

        z0 := @parameter1: boolean;

        if r8 != null goto label3;

        if z0 == 0 goto label1;

        r9 = "Invalid null AudioMix for AudioTrack creation";

        goto label2;

     label1:
        r9 = "Invalid null AudioMix for AudioRecord creation";

     label2:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r9);

        throw $r7;

     label3:
        $r1 = r0.<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.AudioPolicyConfig mConfig>;

        $r2 = $r1.<android.media.audiopolicy.AudioPolicyConfig: java.util.ArrayList mMixes>;

        $z1 = virtualinvoke $r2.<java.util.ArrayList: boolean contains(java.lang.Object)>(r8);

        if $z1 == 0 goto label9;

        $i0 = virtualinvoke r8.<android.media.audiopolicy.AudioMix: int getRouteFlags()>();

        $i1 = $i0 & 2;

        if $i1 != 2 goto label8;

        if z0 == 0 goto label5;

        $i3 = virtualinvoke r8.<android.media.audiopolicy.AudioMix: int getMixType()>();

        if $i3 != 1 goto label4;

        goto label5;

     label4:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid AudioMix: not defined for being a recording source");

        throw $r6;

     label5:
        if z0 != 0 goto label7;

        $i2 = virtualinvoke r8.<android.media.audiopolicy.AudioMix: int getMixType()>();

        if $i2 != 0 goto label6;

        goto label7;

     label6:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid AudioMix: not defined for capturing playback");

        throw $r5;

     label7:
        return;

     label8:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid AudioMix: not defined for loop back");

        throw $r4;

     label9:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid mix: not part of this policy");

        throw $r3;
    }

    private static android.media.IAudioService getService()
    {
        android.os.IBinder $r0;
        android.media.IAudioService r1, r2;

        r1 = <android.media.audiopolicy.AudioPolicy: android.media.IAudioService sService>;

        if r1 == null goto label1;

        return r1;

     label1:
        $r0 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("audio");

        r2 = staticinvoke <android.media.IAudioService$Stub: android.media.IAudioService asInterface(android.os.IBinder)>($r0);

        <android.media.audiopolicy.AudioPolicy: android.media.IAudioService sService> = r2;

        return r2;
    }

    private boolean isLoopbackRenderPolicy()
    {
        android.media.audiopolicy.AudioPolicy r0;
        java.lang.Object r1;
        boolean z0;
        android.media.audiopolicy.AudioPolicyConfig $r3;
        java.util.ArrayList $r4;
        java.util.stream.Stream $r5;
        android.media.audiopolicy.'-$$Lambda$AudioPolicy$-ztOT0FT3tzGMUr4lm1gv6dBE4c' $r6;
        java.lang.Throwable $r7;
        java.util.function.Predicate r8;

        r0 := @this: android.media.audiopolicy.AudioPolicy;

        r1 = r0.<android.media.audiopolicy.AudioPolicy: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.AudioPolicyConfig mConfig>;

        $r4 = $r3.<android.media.audiopolicy.AudioPolicyConfig: java.util.ArrayList mMixes>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.util.stream.Stream stream()>();

        $r6 = <android.media.audiopolicy._$$Lambda$AudioPolicy$_ztOT0FT3tzGMUr4lm1gv6dBE4c: android.media.audiopolicy.'-$$Lambda$AudioPolicy$-ztOT0FT3tzGMUr4lm1gv6dBE4c' INSTANCE>;

        r8 = (java.util.function.Predicate) $r6;

        z0 = interfaceinvoke $r5.<java.util.stream.Stream: boolean allMatch(java.util.function.Predicate)>(r8);

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r7 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    static boolean lambda$isLoopbackRenderPolicy$0(android.media.audiopolicy.AudioMix)
    {
        android.media.audiopolicy.AudioMix r0;
        int $i0;
        boolean z0;

        r0 := @parameter0: android.media.audiopolicy.AudioMix;

        $i0 = virtualinvoke r0.<android.media.audiopolicy.AudioMix: int getRouteFlags()>();

        if $i0 != 3 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private void onPolicyStatusChange()
    {
        android.media.audiopolicy.AudioPolicy r0;
        java.lang.Object r1;
        android.media.audiopolicy.AudioPolicy$AudioPolicyStatusListener $r2, r4;
        java.lang.Throwable $r3;

        r0 := @this: android.media.audiopolicy.AudioPolicy;

        r1 = r0.<android.media.audiopolicy.AudioPolicy: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.AudioPolicy$AudioPolicyStatusListener mStatusListener>;

        if $r2 != null goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        r4 = r0.<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.AudioPolicy$AudioPolicyStatusListener mStatusListener>;

        exitmonitor r1;

     label4:
        virtualinvoke r4.<android.media.audiopolicy.AudioPolicy$AudioPolicyStatusListener: void onStatusChange()>();

        return;

     label5:
        $r3 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private boolean policyReadyToUse()
    {
        android.media.audiopolicy.AudioPolicy r0;
        java.lang.Object r1;
        boolean z0, z1, z2, $z3;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r2, $r10;
        android.media.projection.MediaProjection $r3, $r11;
        java.lang.StringBuilder $r4;
        android.media.projection.IMediaProjection $r12;
        java.lang.Throwable $r13;
        android.os.RemoteException $r14;
        java.lang.RuntimeException $r15;

        r0 := @this: android.media.audiopolicy.AudioPolicy;

        r1 = r0.<android.media.audiopolicy.AudioPolicy: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $i0 = r0.<android.media.audiopolicy.AudioPolicy: int mStatus>;

        if $i0 == 2 goto label03;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AudioPolicy", "Cannot use unregistered AudioPolicy");

        exitmonitor r1;

     label02:
        return 0;

     label03:
        $r2 = r0.<android.media.audiopolicy.AudioPolicy: java.lang.String mRegistrationId>;

        if $r2 != null goto label05;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AudioPolicy", "Cannot use unregistered AudioPolicy");

        exitmonitor r1;

     label04:
        return 0;

     label05:
        exitmonitor r1;

     label06:
        $i1 = specialinvoke r0.<android.media.audiopolicy.AudioPolicy: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.MODIFY_AUDIO_ROUTING");

        if $i1 != 0 goto label07;

        z1 = 1;

        goto label08;

     label07:
        z1 = 0;

     label08:
        $r3 = r0.<android.media.audiopolicy.AudioPolicy: android.media.projection.MediaProjection mProjection>;

        if $r3 == null goto label10;

        $r11 = r0.<android.media.audiopolicy.AudioPolicy: android.media.projection.MediaProjection mProjection>;

        $r12 = virtualinvoke $r11.<android.media.projection.MediaProjection: android.media.projection.IMediaProjection getProjection()>();

        z0 = interfaceinvoke $r12.<android.media.projection.IMediaProjection: boolean canProjectAudio()>();

     label09:
        if z0 == 0 goto label10;

        z2 = 1;

        goto label11;

     label10:
        z2 = 0;

     label11:
        $z3 = specialinvoke r0.<android.media.audiopolicy.AudioPolicy: boolean isLoopbackRenderPolicy()>();

        if $z3 == 0 goto label12;

        if z2 != 0 goto label13;

     label12:
        if z1 != 0 goto label13;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot use AudioPolicy for pid ");

        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" / uid ");

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", needs MODIFY_AUDIO_ROUTING or MediaProjection that can project audio.");

        $r10 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("AudioPolicy", $r10);

        return 0;

     label13:
        return 1;

     label14:
        $r14 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AudioPolicy", "Failed to check if MediaProjection#canProjectAudio");

        $r15 = virtualinvoke $r14.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r15;

     label15:
        $r13 := @caughtexception;

     label16:
        exitmonitor r1;

     label17:
        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label03 to label04 with label15;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch android.os.RemoteException from label08 to label09 with label14;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    private void sendMsg(int)
    {
        android.media.audiopolicy.AudioPolicy r0;
        int i0;
        android.media.audiopolicy.AudioPolicy$EventHandler r1;

        r0 := @this: android.media.audiopolicy.AudioPolicy;

        i0 := @parameter0: int;

        r1 = r0.<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.AudioPolicy$EventHandler mEventHandler>;

        if r1 == null goto label1;

        virtualinvoke r1.<android.media.audiopolicy.AudioPolicy$EventHandler: boolean sendEmptyMessage(int)>(i0);

     label1:
        return;
    }

    private void sendMsg(int, java.lang.Object, int)
    {
        android.media.audiopolicy.AudioPolicy r0;
        int i0, i1;
        java.lang.Object r1;
        android.media.audiopolicy.AudioPolicy$EventHandler r2;
        android.os.Message $r3;

        r0 := @this: android.media.audiopolicy.AudioPolicy;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        i1 := @parameter2: int;

        r2 = r0.<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.AudioPolicy$EventHandler mEventHandler>;

        if r2 == null goto label1;

        $r3 = virtualinvoke r2.<android.media.audiopolicy.AudioPolicy$EventHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(i0, i1, 0, r1);

        virtualinvoke r2.<android.media.audiopolicy.AudioPolicy$EventHandler: boolean sendMessage(android.os.Message)>($r3);

     label1:
        return;
    }

    public int attachMixes(java.util.List)
    {
        android.media.audiopolicy.AudioPolicy r0;
        java.lang.Object r1, $r6;
        java.util.ArrayList r2;
        int i0, $i1, $i2;
        java.lang.IllegalArgumentException $r3, r12;
        boolean $z0;
        android.media.audiopolicy.IAudioPolicyCallback $r4;
        android.media.audiopolicy.AudioPolicyConfig $r5, r13;
        android.os.RemoteException $r7;
        java.lang.Throwable $r8;
        java.util.List r9;
        java.util.Iterator r10;
        android.media.audiopolicy.AudioMix r11;
        android.media.IAudioService r14;
        java.lang.IllegalStateException r16;

        r0 := @this: android.media.audiopolicy.AudioPolicy;

        r9 := @parameter0: java.util.List;

        if r9 == null goto label20;

        r1 = r0.<android.media.audiopolicy.AudioPolicy: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $i1 = r0.<android.media.audiopolicy.AudioPolicy: int mStatus>;

        if $i1 != 2 goto label16;

        r2 = new java.util.ArrayList;

        $i2 = interfaceinvoke r9.<java.util.List: int size()>();

        specialinvoke r2.<java.util.ArrayList: void <init>(int)>($i2);

        r10 = interfaceinvoke r9.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        $r6 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r11 = (android.media.audiopolicy.AudioMix) $r6;

     label03:
        if r11 == null goto label06;

     label04:
        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r11);

     label05:
        goto label02;

     label06:
        r12 = new java.lang.IllegalArgumentException;

        specialinvoke r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null AudioMix in attachMixes");

        throw r12;

     label07:
        r13 = new android.media.audiopolicy.AudioPolicyConfig;

        specialinvoke r13.<android.media.audiopolicy.AudioPolicyConfig: void <init>(java.util.ArrayList)>(r2);

        r14 = staticinvoke <android.media.audiopolicy.AudioPolicy: android.media.IAudioService getService()>();

     label08:
        $r4 = virtualinvoke r0.<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.IAudioPolicyCallback cb()>();

        i0 = interfaceinvoke r14.<android.media.IAudioService: int addMixForPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback)>(r13, $r4);

     label09:
        if i0 != 0 goto label11;

     label10:
        $r5 = r0.<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.AudioPolicyConfig mConfig>;

        virtualinvoke $r5.<android.media.audiopolicy.AudioPolicyConfig: void add(java.util.ArrayList)>(r2);

     label11:
        exitmonitor r1;

     label12:
        return i0;

     label13:
        $r7 := @caughtexception;

     label14:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AudioPolicy", "Dead object in attachMixes", $r7);

        exitmonitor r1;

     label15:
        return -1;

     label16:
        r16 = new java.lang.IllegalStateException;

        specialinvoke r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot alter unregistered AudioPolicy");

        throw r16;

     label17:
        $r8 := @caughtexception;

     label18:
        exitmonitor r1;

     label19:
        throw $r8;

     label20:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null list of AudioMix");

        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label02 to label03 with label17;
        catch java.lang.Throwable from label04 to label05 with label17;
        catch java.lang.Throwable from label06 to label07 with label17;
        catch java.lang.Throwable from label07 to label08 with label17;
        catch android.os.RemoteException from label08 to label09 with label13;
        catch java.lang.Throwable from label08 to label09 with label17;
        catch android.os.RemoteException from label10 to label11 with label13;
        catch java.lang.Throwable from label10 to label11 with label17;
        catch java.lang.Throwable from label11 to label12 with label17;
        catch java.lang.Throwable from label14 to label15 with label17;
        catch java.lang.Throwable from label16 to label17 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    public android.media.audiopolicy.IAudioPolicyCallback cb()
    {
        android.media.audiopolicy.AudioPolicy r0;
        android.media.audiopolicy.IAudioPolicyCallback $r1;

        r0 := @this: android.media.audiopolicy.AudioPolicy;

        $r1 = r0.<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.IAudioPolicyCallback mPolicyCb>;

        return $r1;
    }

    public android.media.AudioRecord createAudioRecordSink(android.media.audiopolicy.AudioMix) throws java.lang.IllegalArgumentException
    {
        android.media.audiopolicy.AudioPolicy r0;
        java.util.ArrayList r1, $r15, r21;
        boolean $z0;
        android.media.AudioFormat$Builder $r2, $r5;
        android.media.AudioFormat $r3, $r4, $r13, $r14, r18;
        int $i0, $i1, $i2, $i3, $i4;
        android.media.AudioRecord $r6;
        android.media.AudioAttributes$Builder $r7, $r8, $r10, $r11;
        java.lang.String $r9;
        android.media.AudioAttributes $r12;
        java.lang.Throwable $r16;
        android.media.audiopolicy.AudioMix r17;
        java.lang.Object r20;
        java.lang.ref.WeakReference r22;

        r0 := @this: android.media.audiopolicy.AudioPolicy;

        r17 := @parameter0: android.media.audiopolicy.AudioMix;

        $z0 = specialinvoke r0.<android.media.audiopolicy.AudioPolicy: boolean policyReadyToUse()>();

        if $z0 != 0 goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AudioPolicy", "Cannot create AudioRecord sink for AudioMix");

        return null;

     label1:
        specialinvoke r0.<android.media.audiopolicy.AudioPolicy: void checkMixReadyToUse(android.media.audiopolicy.AudioMix,boolean)>(r17, 0);

        $r2 = new android.media.AudioFormat$Builder;

        $r3 = virtualinvoke r17.<android.media.audiopolicy.AudioMix: android.media.AudioFormat getFormat()>();

        specialinvoke $r2.<android.media.AudioFormat$Builder: void <init>(android.media.AudioFormat)>($r3);

        $r4 = virtualinvoke r17.<android.media.audiopolicy.AudioMix: android.media.AudioFormat getFormat()>();

        $i0 = virtualinvoke $r4.<android.media.AudioFormat: int getChannelMask()>();

        $i1 = staticinvoke <android.media.AudioFormat: int inChannelMaskFromOutChannelMask(int)>($i0);

        $r5 = virtualinvoke $r2.<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setChannelMask(int)>($i1);

        r18 = virtualinvoke $r5.<android.media.AudioFormat$Builder: android.media.AudioFormat build()>();

        $r6 = new android.media.AudioRecord;

        $r7 = new android.media.AudioAttributes$Builder;

        specialinvoke $r7.<android.media.AudioAttributes$Builder: void <init>()>();

        $r8 = virtualinvoke $r7.<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setInternalCapturePreset(int)>(8);

        $r9 = staticinvoke <android.media.audiopolicy.AudioPolicy: java.lang.String addressForTag(android.media.audiopolicy.AudioMix)>(r17);

        $r10 = virtualinvoke $r8.<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder addTag(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder addTag(java.lang.String)>("fixedVolume");

        $r12 = virtualinvoke $r11.<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>();

        $r13 = virtualinvoke r17.<android.media.audiopolicy.AudioMix: android.media.AudioFormat getFormat()>();

        $i2 = virtualinvoke $r13.<android.media.AudioFormat: int getSampleRate()>();

        $r14 = virtualinvoke r17.<android.media.audiopolicy.AudioMix: android.media.AudioFormat getFormat()>();

        $i3 = virtualinvoke $r14.<android.media.AudioFormat: int getEncoding()>();

        $i4 = staticinvoke <android.media.AudioRecord: int getMinBufferSize(int,int,int)>($i2, 12, $i3);

        specialinvoke $r6.<android.media.AudioRecord: void <init>(android.media.AudioAttributes,android.media.AudioFormat,int,int)>($r12, r18, $i4, 0);

        r20 = r0.<android.media.audiopolicy.AudioPolicy: java.lang.Object mLock>;

        entermonitor r20;

     label2:
        $r15 = r0.<android.media.audiopolicy.AudioPolicy: java.util.ArrayList mCaptors>;

        if $r15 != null goto label3;

        r21 = new java.util.ArrayList;

        specialinvoke r21.<java.util.ArrayList: void <init>(int)>(1);

        r0.<android.media.audiopolicy.AudioPolicy: java.util.ArrayList mCaptors> = r21;

     label3:
        r1 = r0.<android.media.audiopolicy.AudioPolicy: java.util.ArrayList mCaptors>;

        r22 = new java.lang.ref.WeakReference;

        specialinvoke r22.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>($r6);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r22);

        exitmonitor r20;

     label4:
        return $r6;

     label5:
        $r16 := @caughtexception;

     label6:
        exitmonitor r20;

     label7:
        throw $r16;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public android.media.AudioTrack createAudioTrackSource(android.media.audiopolicy.AudioMix) throws java.lang.IllegalArgumentException
    {
        android.media.audiopolicy.AudioPolicy r0;
        java.lang.ref.WeakReference r1;
        boolean $z0;
        android.media.AudioTrack $r2;
        android.media.AudioAttributes$Builder $r3, $r4, $r6;
        java.lang.String $r5;
        android.media.AudioAttributes $r7;
        android.media.AudioFormat $r8, $r9, $r10, $r11;
        int $i0, $i1, $i2, $i3;
        java.util.ArrayList $r12, r17, r18;
        java.lang.Throwable $r13;
        android.media.audiopolicy.AudioMix r14;
        java.lang.Object r16;

        r0 := @this: android.media.audiopolicy.AudioPolicy;

        r14 := @parameter0: android.media.audiopolicy.AudioMix;

        $z0 = specialinvoke r0.<android.media.audiopolicy.AudioPolicy: boolean policyReadyToUse()>();

        if $z0 != 0 goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AudioPolicy", "Cannot create AudioTrack source for AudioMix");

        return null;

     label1:
        specialinvoke r0.<android.media.audiopolicy.AudioPolicy: void checkMixReadyToUse(android.media.audiopolicy.AudioMix,boolean)>(r14, 1);

        $r2 = new android.media.AudioTrack;

        $r3 = new android.media.AudioAttributes$Builder;

        specialinvoke $r3.<android.media.AudioAttributes$Builder: void <init>()>();

        $r4 = virtualinvoke $r3.<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setUsage(int)>(15);

        $r5 = staticinvoke <android.media.audiopolicy.AudioPolicy: java.lang.String addressForTag(android.media.audiopolicy.AudioMix)>(r14);

        $r6 = virtualinvoke $r4.<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder addTag(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>();

        $r8 = virtualinvoke r14.<android.media.audiopolicy.AudioMix: android.media.AudioFormat getFormat()>();

        $r9 = virtualinvoke r14.<android.media.audiopolicy.AudioMix: android.media.AudioFormat getFormat()>();

        $i0 = virtualinvoke $r9.<android.media.AudioFormat: int getSampleRate()>();

        $r10 = virtualinvoke r14.<android.media.audiopolicy.AudioMix: android.media.AudioFormat getFormat()>();

        $i1 = virtualinvoke $r10.<android.media.AudioFormat: int getChannelMask()>();

        $r11 = virtualinvoke r14.<android.media.audiopolicy.AudioMix: android.media.AudioFormat getFormat()>();

        $i2 = virtualinvoke $r11.<android.media.AudioFormat: int getEncoding()>();

        $i3 = staticinvoke <android.media.AudioTrack: int getMinBufferSize(int,int,int)>($i0, $i1, $i2);

        specialinvoke $r2.<android.media.AudioTrack: void <init>(android.media.AudioAttributes,android.media.AudioFormat,int,int,int)>($r7, $r8, $i3, 1, 0);

        r16 = r0.<android.media.audiopolicy.AudioPolicy: java.lang.Object mLock>;

        entermonitor r16;

     label2:
        $r12 = r0.<android.media.audiopolicy.AudioPolicy: java.util.ArrayList mInjectors>;

        if $r12 != null goto label3;

        r17 = new java.util.ArrayList;

        specialinvoke r17.<java.util.ArrayList: void <init>(int)>(1);

        r0.<android.media.audiopolicy.AudioPolicy: java.util.ArrayList mInjectors> = r17;

     label3:
        r18 = r0.<android.media.audiopolicy.AudioPolicy: java.util.ArrayList mInjectors>;

        r1 = new java.lang.ref.WeakReference;

        specialinvoke r1.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>($r2);

        virtualinvoke r18.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        exitmonitor r16;

     label4:
        return $r2;

     label5:
        $r13 := @caughtexception;

     label6:
        exitmonitor r16;

     label7:
        throw $r13;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public int detachMixes(java.util.List)
    {
        android.media.audiopolicy.AudioPolicy r0;
        java.lang.Object r1, $r6;
        java.util.ArrayList r2;
        int i0, $i1, $i2;
        java.lang.IllegalArgumentException $r3, r12;
        boolean $z0;
        android.media.audiopolicy.IAudioPolicyCallback $r4;
        android.media.audiopolicy.AudioPolicyConfig $r5, r13;
        android.os.RemoteException $r7;
        java.lang.Throwable $r8;
        java.util.List r9;
        java.util.Iterator r10;
        android.media.audiopolicy.AudioMix r11;
        android.media.IAudioService r14;
        java.lang.IllegalStateException r16;

        r0 := @this: android.media.audiopolicy.AudioPolicy;

        r9 := @parameter0: java.util.List;

        if r9 == null goto label20;

        r1 = r0.<android.media.audiopolicy.AudioPolicy: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $i1 = r0.<android.media.audiopolicy.AudioPolicy: int mStatus>;

        if $i1 != 2 goto label16;

        r2 = new java.util.ArrayList;

        $i2 = interfaceinvoke r9.<java.util.List: int size()>();

        specialinvoke r2.<java.util.ArrayList: void <init>(int)>($i2);

        r10 = interfaceinvoke r9.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        $r6 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r11 = (android.media.audiopolicy.AudioMix) $r6;

     label03:
        if r11 == null goto label06;

     label04:
        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r11);

     label05:
        goto label02;

     label06:
        r12 = new java.lang.IllegalArgumentException;

        specialinvoke r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null AudioMix in detachMixes");

        throw r12;

     label07:
        r13 = new android.media.audiopolicy.AudioPolicyConfig;

        specialinvoke r13.<android.media.audiopolicy.AudioPolicyConfig: void <init>(java.util.ArrayList)>(r2);

        r14 = staticinvoke <android.media.audiopolicy.AudioPolicy: android.media.IAudioService getService()>();

     label08:
        $r4 = virtualinvoke r0.<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.IAudioPolicyCallback cb()>();

        i0 = interfaceinvoke r14.<android.media.IAudioService: int removeMixForPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback)>(r13, $r4);

     label09:
        if i0 != 0 goto label11;

     label10:
        $r5 = r0.<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.AudioPolicyConfig mConfig>;

        virtualinvoke $r5.<android.media.audiopolicy.AudioPolicyConfig: void remove(java.util.ArrayList)>(r2);

     label11:
        exitmonitor r1;

     label12:
        return i0;

     label13:
        $r7 := @caughtexception;

     label14:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AudioPolicy", "Dead object in detachMixes", $r7);

        exitmonitor r1;

     label15:
        return -1;

     label16:
        r16 = new java.lang.IllegalStateException;

        specialinvoke r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot alter unregistered AudioPolicy");

        throw r16;

     label17:
        $r8 := @caughtexception;

     label18:
        exitmonitor r1;

     label19:
        throw $r8;

     label20:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null list of AudioMix");

        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label02 to label03 with label17;
        catch java.lang.Throwable from label04 to label05 with label17;
        catch java.lang.Throwable from label06 to label07 with label17;
        catch java.lang.Throwable from label07 to label08 with label17;
        catch android.os.RemoteException from label08 to label09 with label13;
        catch java.lang.Throwable from label08 to label09 with label17;
        catch android.os.RemoteException from label10 to label11 with label13;
        catch java.lang.Throwable from label10 to label11 with label17;
        catch java.lang.Throwable from label11 to label12 with label17;
        catch java.lang.Throwable from label14 to label15 with label17;
        catch java.lang.Throwable from label16 to label17 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    public android.media.audiopolicy.AudioPolicyConfig getConfig()
    {
        android.media.audiopolicy.AudioPolicy r0;
        android.media.audiopolicy.AudioPolicyConfig $r1;

        r0 := @this: android.media.audiopolicy.AudioPolicy;

        $r1 = r0.<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.AudioPolicyConfig mConfig>;

        return $r1;
    }

    public int getFocusDuckingBehavior()
    {
        android.media.audiopolicy.AudioPolicy r0;
        android.media.audiopolicy.AudioPolicyConfig $r1;
        int $i0;

        r0 := @this: android.media.audiopolicy.AudioPolicy;

        $r1 = r0.<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.AudioPolicyConfig mConfig>;

        $i0 = $r1.<android.media.audiopolicy.AudioPolicyConfig: int mDuckingPolicy>;

        return $i0;
    }

    public android.media.projection.MediaProjection getMediaProjection()
    {
        android.media.audiopolicy.AudioPolicy r0;
        android.media.projection.MediaProjection $r1;

        r0 := @this: android.media.audiopolicy.AudioPolicy;

        $r1 = r0.<android.media.audiopolicy.AudioPolicy: android.media.projection.MediaProjection mProjection>;

        return $r1;
    }

    public int getStatus()
    {
        android.media.audiopolicy.AudioPolicy r0;
        int $i0;

        r0 := @this: android.media.audiopolicy.AudioPolicy;

        $i0 = r0.<android.media.audiopolicy.AudioPolicy: int mStatus>;

        return $i0;
    }

    public boolean hasFocusListener()
    {
        android.media.audiopolicy.AudioPolicy r0;
        android.media.audiopolicy.AudioPolicy$AudioPolicyFocusListener $r1;
        boolean z0;

        r0 := @this: android.media.audiopolicy.AudioPolicy;

        $r1 = r0.<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.AudioPolicy$AudioPolicyFocusListener mFocusListener>;

        if $r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public void invalidateCaptorsAndInjectors()
    {
        android.media.audiopolicy.AudioPolicy r0;
        java.lang.Object r1, $r4, $r6, $r8, $r10;
        boolean $z0, $z1, $z2;
        java.util.ArrayList $r2, $r3, $r7, $r17;
        java.lang.ref.WeakReference $r5, $r9;
        java.lang.Throwable $r11, $r12, $r13;
        java.util.Iterator r14, r18;
        android.media.AudioTrack r15;
        android.media.AudioRecord r19;

        r0 := @this: android.media.audiopolicy.AudioPolicy;

        $z0 = specialinvoke r0.<android.media.audiopolicy.AudioPolicy: boolean policyReadyToUse()>();

        if $z0 != 0 goto label01;

        return;

     label01:
        r1 = r0.<android.media.audiopolicy.AudioPolicy: java.lang.Object mLock>;

        entermonitor r1;

     label02:
        $r2 = r0.<android.media.audiopolicy.AudioPolicy: java.util.ArrayList mInjectors>;

        if $r2 == null goto label09;

        $r7 = r0.<android.media.audiopolicy.AudioPolicy: java.util.ArrayList mInjectors>;

        r14 = virtualinvoke $r7.<java.util.ArrayList: java.util.Iterator iterator()>();

     label03:
        $z2 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label09;

        $r8 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (java.lang.ref.WeakReference) $r8;

        $r10 = virtualinvoke $r9.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r15 = (android.media.AudioTrack) $r10;

     label04:
        if r15 != null goto label05;

        goto label09;

     label05:
        virtualinvoke r15.<android.media.AudioTrack: void stop()>();

        virtualinvoke r15.<android.media.AudioTrack: void flush()>();

     label06:
        goto label08;

     label07:
        $r11 := @caughtexception;

     label08:
        goto label03;

     label09:
        $r17 = r0.<android.media.audiopolicy.AudioPolicy: java.util.ArrayList mCaptors>;

        if $r17 == null goto label16;

        $r3 = r0.<android.media.audiopolicy.AudioPolicy: java.util.ArrayList mCaptors>;

        r18 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label10:
        $z1 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label16;

        $r4 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.ref.WeakReference) $r4;

        $r6 = virtualinvoke $r5.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r19 = (android.media.AudioRecord) $r6;

     label11:
        if r19 != null goto label12;

        goto label16;

     label12:
        virtualinvoke r19.<android.media.AudioRecord: void stop()>();

     label13:
        goto label15;

     label14:
        $r13 := @caughtexception;

     label15:
        goto label10;

     label16:
        exitmonitor r1;

     label17:
        return;

     label18:
        $r12 := @caughtexception;

     label19:
        exitmonitor r1;

     label20:
        throw $r12;

        catch java.lang.Throwable from label02 to label03 with label18;
        catch java.lang.Throwable from label03 to label04 with label18;
        catch java.lang.IllegalStateException from label05 to label06 with label07;
        catch java.lang.Throwable from label05 to label06 with label18;
        catch java.lang.Throwable from label09 to label10 with label18;
        catch java.lang.Throwable from label10 to label11 with label18;
        catch java.lang.IllegalStateException from label12 to label13 with label14;
        catch java.lang.Throwable from label12 to label13 with label18;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
    }

    public boolean isFocusPolicy()
    {
        android.media.audiopolicy.AudioPolicy r0;
        boolean $z0;

        r0 := @this: android.media.audiopolicy.AudioPolicy;

        $z0 = r0.<android.media.audiopolicy.AudioPolicy: boolean mIsFocusPolicy>;

        return $z0;
    }

    public boolean isTestFocusPolicy()
    {
        android.media.audiopolicy.AudioPolicy r0;
        boolean $z0;

        r0 := @this: android.media.audiopolicy.AudioPolicy;

        $z0 = r0.<android.media.audiopolicy.AudioPolicy: boolean mIsTestFocusPolicy>;

        return $z0;
    }

    public boolean isVolumeController()
    {
        android.media.audiopolicy.AudioPolicy r0;
        android.media.audiopolicy.AudioPolicy$AudioPolicyVolumeCallback $r1;
        boolean z0;

        r0 := @this: android.media.audiopolicy.AudioPolicy;

        $r1 = r0.<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.AudioPolicy$AudioPolicyVolumeCallback mVolCb>;

        if $r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean removeUidDeviceAffinity(int)
    {
        android.media.audiopolicy.AudioPolicy r0;
        java.lang.Object r1;
        int $i0, i2, i3;
        android.media.audiopolicy.IAudioPolicyCallback $r2;
        android.os.RemoteException $r3;
        java.lang.Throwable $r4;
        android.media.IAudioService r5;
        boolean z0;
        java.lang.IllegalStateException r7;

        r0 := @this: android.media.audiopolicy.AudioPolicy;

        i2 := @parameter0: int;

        r1 = r0.<android.media.audiopolicy.AudioPolicy: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $i0 = r0.<android.media.audiopolicy.AudioPolicy: int mStatus>;

        if $i0 != 2 goto label10;

        r5 = staticinvoke <android.media.audiopolicy.AudioPolicy: android.media.IAudioService getService()>();

     label02:
        z0 = 0;

     label03:
        $r2 = virtualinvoke r0.<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.IAudioPolicyCallback cb()>();

        i3 = interfaceinvoke r5.<android.media.IAudioService: int removeUidDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int)>($r2, i2);

     label04:
        if i3 != 0 goto label05;

        z0 = 1;

     label05:
        exitmonitor r1;

     label06:
        return z0;

     label07:
        $r3 := @caughtexception;

     label08:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AudioPolicy", "Dead object in removeUidDeviceAffinity", $r3);

        exitmonitor r1;

     label09:
        return 0;

     label10:
        r7 = new java.lang.IllegalStateException;

        specialinvoke r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot use unregistered AudioPolicy");

        throw r7;

     label11:
        $r4 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch android.os.RemoteException from label03 to label04 with label07;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label10 to label11 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public boolean removeUserIdDeviceAffinity(int)
    {
        android.media.audiopolicy.AudioPolicy r0;
        java.lang.Object r1;
        int $i0, i2, i3;
        android.media.audiopolicy.IAudioPolicyCallback $r2;
        android.os.RemoteException $r3;
        java.lang.Throwable $r4;
        android.media.IAudioService r5;
        boolean z0;
        java.lang.IllegalStateException r7;

        r0 := @this: android.media.audiopolicy.AudioPolicy;

        i2 := @parameter0: int;

        r1 = r0.<android.media.audiopolicy.AudioPolicy: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $i0 = r0.<android.media.audiopolicy.AudioPolicy: int mStatus>;

        if $i0 != 2 goto label10;

        r5 = staticinvoke <android.media.audiopolicy.AudioPolicy: android.media.IAudioService getService()>();

     label02:
        z0 = 0;

     label03:
        $r2 = virtualinvoke r0.<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.IAudioPolicyCallback cb()>();

        i3 = interfaceinvoke r5.<android.media.IAudioService: int removeUserIdDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int)>($r2, i2);

     label04:
        if i3 != 0 goto label05;

        z0 = 1;

     label05:
        exitmonitor r1;

     label06:
        return z0;

     label07:
        $r3 := @caughtexception;

     label08:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AudioPolicy", "Dead object in removeUserIdDeviceAffinity", $r3);

        exitmonitor r1;

     label09:
        return 0;

     label10:
        r7 = new java.lang.IllegalStateException;

        specialinvoke r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot use unregistered AudioPolicy");

        throw r7;

     label11:
        $r4 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch android.os.RemoteException from label03 to label04 with label07;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label10 to label11 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public int setFocusDuckingBehavior(int) throws java.lang.IllegalArgumentException, java.lang.IllegalStateException
    {
        android.media.audiopolicy.AudioPolicy r0;
        int i0, i1, $i2;
        android.media.audiopolicy.IAudioPolicyCallback $r1;
        android.media.audiopolicy.AudioPolicyConfig $r2;
        android.media.audiopolicy.AudioPolicy$AudioPolicyFocusListener $r3;
        java.lang.StringBuilder $r4;
        java.lang.IllegalArgumentException $r7;
        java.lang.String $r8;
        android.os.RemoteException $r9;
        java.lang.Throwable $r10;
        java.lang.Object r12;
        java.lang.IllegalStateException r13, r16;
        android.media.IAudioService r14;

        r0 := @this: android.media.audiopolicy.AudioPolicy;

        i0 := @parameter0: int;

        if i0 == 0 goto label02;

        if i0 != 1 goto label01;

        goto label02;

     label01:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid ducking behavior ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label02:
        r12 = r0.<android.media.audiopolicy.AudioPolicy: java.lang.Object mLock>;

        entermonitor r12;

     label03:
        $i2 = r0.<android.media.audiopolicy.AudioPolicy: int mStatus>;

        if $i2 != 2 goto label17;

     label04:
        if i0 != 1 goto label08;

     label05:
        $r3 = r0.<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.AudioPolicy$AudioPolicyFocusListener mFocusListener>;

        if $r3 == null goto label07;

     label06:
        goto label08;

     label07:
        r13 = new java.lang.IllegalStateException;

        specialinvoke r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot handle ducking without an audio focus listener");

        throw r13;

     label08:
        r14 = staticinvoke <android.media.audiopolicy.AudioPolicy: android.media.IAudioService getService()>();

     label09:
        $r1 = virtualinvoke r0.<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.IAudioPolicyCallback cb()>();

        i1 = interfaceinvoke r14.<android.media.IAudioService: int setFocusPropertiesForPolicy(int,android.media.audiopolicy.IAudioPolicyCallback)>(i0, $r1);

     label10:
        if i1 != 0 goto label12;

     label11:
        $r2 = r0.<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.AudioPolicyConfig mConfig>;

        $r2.<android.media.audiopolicy.AudioPolicyConfig: int mDuckingPolicy> = i0;

     label12:
        exitmonitor r12;

     label13:
        return i1;

     label14:
        $r9 := @caughtexception;

     label15:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AudioPolicy", "Dead object in setFocusPropertiesForPolicy for behavior", $r9);

        exitmonitor r12;

     label16:
        return -1;

     label17:
        r16 = new java.lang.IllegalStateException;

        specialinvoke r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot change ducking behavior for unregistered policy");

        throw r16;

     label18:
        $r10 := @caughtexception;

     label19:
        exitmonitor r12;

     label20:
        throw $r10;

        catch java.lang.Throwable from label03 to label04 with label18;
        catch java.lang.Throwable from label05 to label06 with label18;
        catch java.lang.Throwable from label07 to label08 with label18;
        catch java.lang.Throwable from label08 to label09 with label18;
        catch android.os.RemoteException from label09 to label10 with label14;
        catch java.lang.Throwable from label09 to label10 with label18;
        catch android.os.RemoteException from label11 to label12 with label14;
        catch java.lang.Throwable from label11 to label12 with label18;
        catch java.lang.Throwable from label12 to label13 with label18;
        catch java.lang.Throwable from label15 to label16 with label18;
        catch java.lang.Throwable from label17 to label18 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
    }

    public void setRegistration(java.lang.String)
    {
        android.media.audiopolicy.AudioPolicy r0;
        java.lang.Object r1;
        android.media.audiopolicy.AudioPolicyConfig $r2;
        java.lang.Throwable $r3;
        java.lang.String r4;

        r0 := @this: android.media.audiopolicy.AudioPolicy;

        r4 := @parameter0: java.lang.String;

        r1 = r0.<android.media.audiopolicy.AudioPolicy: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        r0.<android.media.audiopolicy.AudioPolicy: java.lang.String mRegistrationId> = r4;

        $r2 = r0.<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.AudioPolicyConfig mConfig>;

        virtualinvoke $r2.<android.media.audiopolicy.AudioPolicyConfig: void setRegistration(java.lang.String)>(r4);

     label02:
        if r4 == null goto label05;

     label03:
        r0.<android.media.audiopolicy.AudioPolicy: int mStatus> = 2;

     label04:
        goto label06;

     label05:
        r0.<android.media.audiopolicy.AudioPolicy: int mStatus> = 1;

     label06:
        exitmonitor r1;

     label07:
        specialinvoke r0.<android.media.audiopolicy.AudioPolicy: void sendMsg(int)>(0);

        return;

     label08:
        $r3 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public boolean setUidDeviceAffinity(int, java.util.List)
    {
        android.media.audiopolicy.AudioPolicy r0;
        java.lang.Object r1, $r7;
        int[] r2;
        java.lang.String[] r3;
        java.util.Iterator r4;
        java.lang.IllegalArgumentException $r5, r13;
        int $i0, $i1, $i2, $i3, $i4, i6, i7, i8;
        boolean $z0, z1;
        android.media.audiopolicy.IAudioPolicyCallback $r6;
        java.lang.String $r8;
        android.os.RemoteException $r9;
        java.lang.Throwable $r10;
        java.util.List r11;
        android.media.AudioDeviceInfo r12;
        android.media.IAudioService r14;
        java.lang.IllegalStateException r16;

        r0 := @this: android.media.audiopolicy.AudioPolicy;

        i6 := @parameter0: int;

        r11 := @parameter1: java.util.List;

        if r11 == null goto label22;

        r1 = r0.<android.media.audiopolicy.AudioPolicy: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $i0 = r0.<android.media.audiopolicy.AudioPolicy: int mStatus>;

        if $i0 != 2 goto label18;

        $i1 = interfaceinvoke r11.<java.util.List: int size()>();

        r2 = newarray (int)[$i1];

        $i2 = interfaceinvoke r11.<java.util.List: int size()>();

        r3 = newarray (java.lang.String)[$i2];

     label02:
        i7 = 0;

     label03:
        r4 = interfaceinvoke r11.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r12 = (android.media.AudioDeviceInfo) $r7;

     label05:
        if r12 == null goto label08;

     label06:
        $i3 = virtualinvoke r12.<android.media.AudioDeviceInfo: int getType()>();

        $i4 = staticinvoke <android.media.AudioDeviceInfo: int convertDeviceTypeToInternalDevice(int)>($i3);

        r2[i7] = $i4;

        $r8 = virtualinvoke r12.<android.media.AudioDeviceInfo: java.lang.String getAddress()>();

        r3[i7] = $r8;

     label07:
        i7 = i7 + 1;

        goto label04;

     label08:
        r13 = new java.lang.IllegalArgumentException;

        specialinvoke r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null AudioDeviceInfo in setUidDeviceAffinity");

        throw r13;

     label09:
        r14 = staticinvoke <android.media.audiopolicy.AudioPolicy: android.media.IAudioService getService()>();

     label10:
        z1 = 0;

     label11:
        $r6 = virtualinvoke r0.<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.IAudioPolicyCallback cb()>();

        i8 = interfaceinvoke r14.<android.media.IAudioService: int setUidDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int,int[],java.lang.String[])>($r6, i6, r2, r3);

     label12:
        if i8 != 0 goto label13;

        z1 = 1;

     label13:
        exitmonitor r1;

     label14:
        return z1;

     label15:
        $r9 := @caughtexception;

     label16:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AudioPolicy", "Dead object in setUidDeviceAffinity", $r9);

        exitmonitor r1;

     label17:
        return 0;

     label18:
        r16 = new java.lang.IllegalStateException;

        specialinvoke r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot use unregistered AudioPolicy");

        throw r16;

     label19:
        $r10 := @caughtexception;

     label20:
        exitmonitor r1;

     label21:
        throw $r10;

     label22:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null list of audio devices");

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label19;
        catch java.lang.Throwable from label03 to label04 with label19;
        catch java.lang.Throwable from label04 to label05 with label19;
        catch java.lang.Throwable from label06 to label07 with label19;
        catch java.lang.Throwable from label08 to label09 with label19;
        catch java.lang.Throwable from label09 to label10 with label19;
        catch android.os.RemoteException from label11 to label12 with label15;
        catch java.lang.Throwable from label11 to label12 with label19;
        catch java.lang.Throwable from label13 to label14 with label19;
        catch java.lang.Throwable from label16 to label17 with label19;
        catch java.lang.Throwable from label18 to label19 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
    }

    public boolean setUserIdDeviceAffinity(int, java.util.List)
    {
        android.media.audiopolicy.AudioPolicy r0;
        java.lang.Object r1, $r7;
        int[] r2;
        java.lang.String[] r3;
        java.util.Iterator r4;
        int $i0, $i1, $i2, $i3, $i4, i6, i7, i8;
        boolean $z0, z1;
        android.media.audiopolicy.IAudioPolicyCallback $r6;
        java.lang.String $r8;
        java.lang.Throwable $r9;
        android.os.RemoteException $r10;
        java.util.List r11;
        android.media.AudioDeviceInfo r12;
        java.lang.IllegalArgumentException r13;
        android.media.IAudioService r14;
        java.lang.IllegalStateException r16;

        r0 := @this: android.media.audiopolicy.AudioPolicy;

        i6 := @parameter0: int;

        r11 := @parameter1: java.util.List;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r11, "Illegal null list of audio devices");

        r1 = r0.<android.media.audiopolicy.AudioPolicy: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $i0 = r0.<android.media.audiopolicy.AudioPolicy: int mStatus>;

        if $i0 != 2 goto label18;

        $i1 = interfaceinvoke r11.<java.util.List: int size()>();

        r2 = newarray (int)[$i1];

        $i2 = interfaceinvoke r11.<java.util.List: int size()>();

        r3 = newarray (java.lang.String)[$i2];

     label02:
        i7 = 0;

     label03:
        r4 = interfaceinvoke r11.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r12 = (android.media.AudioDeviceInfo) $r7;

     label05:
        if r12 == null goto label08;

     label06:
        $i3 = virtualinvoke r12.<android.media.AudioDeviceInfo: int getType()>();

        $i4 = staticinvoke <android.media.AudioDeviceInfo: int convertDeviceTypeToInternalDevice(int)>($i3);

        r2[i7] = $i4;

        $r8 = virtualinvoke r12.<android.media.AudioDeviceInfo: java.lang.String getAddress()>();

        r3[i7] = $r8;

     label07:
        i7 = i7 + 1;

        goto label04;

     label08:
        r13 = new java.lang.IllegalArgumentException;

        specialinvoke r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal null AudioDeviceInfo in setUserIdDeviceAffinity");

        throw r13;

     label09:
        r14 = staticinvoke <android.media.audiopolicy.AudioPolicy: android.media.IAudioService getService()>();

     label10:
        z1 = 0;

     label11:
        $r6 = virtualinvoke r0.<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.IAudioPolicyCallback cb()>();

        i8 = interfaceinvoke r14.<android.media.IAudioService: int setUserIdDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback,int,int[],java.lang.String[])>($r6, i6, r2, r3);

     label12:
        if i8 != 0 goto label13;

        z1 = 1;

     label13:
        exitmonitor r1;

     label14:
        return z1;

     label15:
        $r10 := @caughtexception;

     label16:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AudioPolicy", "Dead object in setUserIdDeviceAffinity", $r10);

        exitmonitor r1;

     label17:
        return 0;

     label18:
        r16 = new java.lang.IllegalStateException;

        specialinvoke r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot use unregistered AudioPolicy");

        throw r16;

     label19:
        $r9 := @caughtexception;

     label20:
        exitmonitor r1;

     label21:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label19;
        catch java.lang.Throwable from label03 to label04 with label19;
        catch java.lang.Throwable from label04 to label05 with label19;
        catch java.lang.Throwable from label06 to label07 with label19;
        catch java.lang.Throwable from label08 to label09 with label19;
        catch java.lang.Throwable from label09 to label10 with label19;
        catch android.os.RemoteException from label11 to label12 with label15;
        catch java.lang.Throwable from label11 to label12 with label19;
        catch java.lang.Throwable from label13 to label14 with label19;
        catch java.lang.Throwable from label16 to label17 with label19;
        catch java.lang.Throwable from label18 to label19 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
    }

    public java.lang.String toLogFriendlyString()
    {
        android.media.audiopolicy.AudioPolicy r0;
        java.lang.String $r3, $r8, $r10;
        java.lang.StringBuilder $r4;
        android.media.audiopolicy.AudioPolicyConfig $r7;

        r0 := @this: android.media.audiopolicy.AudioPolicy;

        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(java.lang.String)>("android.media.audiopolicy.AudioPolicy:\n");

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("config=");

        $r7 = r0.<android.media.audiopolicy.AudioPolicy: android.media.audiopolicy.AudioPolicyConfig mConfig>;

        $r8 = virtualinvoke $r7.<android.media.audiopolicy.AudioPolicyConfig: java.lang.String toLogFriendlyString()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    public static void <clinit>()
    {
        <android.media.audiopolicy.AudioPolicy: java.lang.String TAG> = "AudioPolicy";

        <android.media.audiopolicy.AudioPolicy: int POLICY_STATUS_UNREGISTERED> = 1;

        <android.media.audiopolicy.AudioPolicy: int POLICY_STATUS_REGISTERED> = 2;

        <android.media.audiopolicy.AudioPolicy: int MSG_VOL_ADJUST> = 6;

        <android.media.audiopolicy.AudioPolicy: int MSG_POLICY_STATUS_CHANGE> = 0;

        <android.media.audiopolicy.AudioPolicy: int MSG_MIX_STATE_UPDATE> = 3;

        <android.media.audiopolicy.AudioPolicy: int MSG_FOCUS_REQUEST> = 4;

        <android.media.audiopolicy.AudioPolicy: int MSG_FOCUS_LOSS> = 2;

        <android.media.audiopolicy.AudioPolicy: int MSG_FOCUS_GRANT> = 1;

        <android.media.audiopolicy.AudioPolicy: int MSG_FOCUS_ABANDON> = 5;

        <android.media.audiopolicy.AudioPolicy: int FOCUS_POLICY_DUCKING_IN_POLICY> = 1;

        <android.media.audiopolicy.AudioPolicy: int FOCUS_POLICY_DUCKING_IN_APP> = 0;

        <android.media.audiopolicy.AudioPolicy: int FOCUS_POLICY_DUCKING_DEFAULT> = 0;

        <android.media.audiopolicy.AudioPolicy: boolean DEBUG> = 0;

        return;
    }
}
