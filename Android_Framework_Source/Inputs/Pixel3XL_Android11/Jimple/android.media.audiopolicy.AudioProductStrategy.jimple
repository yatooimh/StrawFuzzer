public final class android.media.audiopolicy.AudioProductStrategy extends java.lang.Object implements android.os.Parcelable
{
    public static final android.os.Parcelable$Creator CREATOR;
    public static final int DEFAULT_GROUP;
    private static final java.lang.String TAG;
    private static java.util.List sAudioProductStrategies;
    public static final android.media.AudioAttributes sDefaultAttributes;
    private static final java.lang.Object sLock;
    private final android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup[] mAudioAttributesGroups;
    private int mId;
    private final java.lang.String mName;

    static void <clinit>()
    {
        java.lang.Object $r0;
        android.media.audiopolicy.AudioProductStrategy$1 $r1;
        android.media.AudioAttributes$Builder $r2, $r3;
        android.media.AudioAttributes $r4;

        <android.media.audiopolicy.AudioProductStrategy: java.lang.String TAG> = "AudioProductStrategy";

        <android.media.audiopolicy.AudioProductStrategy: int DEFAULT_GROUP> = -1;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <android.media.audiopolicy.AudioProductStrategy: java.lang.Object sLock> = $r0;

        $r1 = new android.media.audiopolicy.AudioProductStrategy$1;

        specialinvoke $r1.<android.media.audiopolicy.AudioProductStrategy$1: void <init>()>();

        <android.media.audiopolicy.AudioProductStrategy: android.os.Parcelable$Creator CREATOR> = $r1;

        $r2 = new android.media.AudioAttributes$Builder;

        specialinvoke $r2.<android.media.AudioAttributes$Builder: void <init>()>();

        $r3 = virtualinvoke $r2.<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setCapturePreset(int)>(0);

        $r4 = virtualinvoke $r3.<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>();

        <android.media.audiopolicy.AudioProductStrategy: android.media.AudioAttributes sDefaultAttributes> = $r4;

        return;
    }

    private void <init>(java.lang.String, int, android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup[])
    {
        android.media.audiopolicy.AudioProductStrategy r0;
        java.lang.String r1;
        int i0;
        android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup[] r2;

        r0 := @this: android.media.audiopolicy.AudioProductStrategy;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "name must not be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "AudioAttributesGroups must not be null");

        r0.<android.media.audiopolicy.AudioProductStrategy: java.lang.String mName> = r1;

        r0.<android.media.audiopolicy.AudioProductStrategy: int mId> = i0;

        r0.<android.media.audiopolicy.AudioProductStrategy: android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup[] mAudioAttributesGroups> = r2;

        return;
    }

    void <init>(java.lang.String, int, android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup[], android.media.audiopolicy.AudioProductStrategy$1)
    {
        android.media.audiopolicy.AudioProductStrategy r0;
        java.lang.String r1;
        int i0;
        android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup[] r2;
        android.media.audiopolicy.AudioProductStrategy$1 r3;

        r0 := @this: android.media.audiopolicy.AudioProductStrategy;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup[];

        r3 := @parameter3: android.media.audiopolicy.AudioProductStrategy$1;

        specialinvoke r0.<android.media.audiopolicy.AudioProductStrategy: void <init>(java.lang.String,int,android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup[])>(r1, i0, r2);

        return;
    }

    static boolean access$100(android.media.AudioAttributes, android.media.AudioAttributes)
    {
        android.media.AudioAttributes r0, r1;
        boolean $z0;

        r0 := @parameter0: android.media.AudioAttributes;

        r1 := @parameter1: android.media.AudioAttributes;

        $z0 = staticinvoke <android.media.audiopolicy.AudioProductStrategy: boolean attributesMatches(android.media.AudioAttributes,android.media.AudioAttributes)>(r0, r1);

        return $z0;
    }

    private static boolean attributesMatches(android.media.AudioAttributes, android.media.AudioAttributes)
    {
        android.media.AudioAttributes r0, r1, $r8;
        java.lang.String r2, r3;
        boolean z0, $z1, z2;
        java.util.Set $r6, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;

        r0 := @parameter0: android.media.AudioAttributes;

        r1 := @parameter1: android.media.AudioAttributes;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "refAttr must not be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "attr must not be null");

        $r6 = virtualinvoke r0.<android.media.AudioAttributes: java.util.Set getTags()>();

        r2 = staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>(";", $r6);

        $r7 = virtualinvoke r1.<android.media.AudioAttributes: java.util.Set getTags()>();

        r3 = staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>(";", $r7);

        $r8 = <android.media.audiopolicy.AudioProductStrategy: android.media.AudioAttributes sDefaultAttributes>;

        z0 = virtualinvoke r0.<android.media.AudioAttributes: boolean equals(java.lang.Object)>($r8);

        z2 = 0;

        if z0 == 0 goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke r0.<android.media.AudioAttributes: int getSystemUsage()>();

        if $i0 == 0 goto label2;

        $i11 = virtualinvoke r1.<android.media.AudioAttributes: int getSystemUsage()>();

        $i12 = virtualinvoke r0.<android.media.AudioAttributes: int getSystemUsage()>();

        if $i11 != $i12 goto label5;

     label2:
        $i1 = virtualinvoke r0.<android.media.AudioAttributes: int getContentType()>();

        if $i1 == 0 goto label3;

        $i9 = virtualinvoke r1.<android.media.AudioAttributes: int getContentType()>();

        $i10 = virtualinvoke r0.<android.media.AudioAttributes: int getContentType()>();

        if $i9 != $i10 goto label5;

     label3:
        $i2 = virtualinvoke r0.<android.media.AudioAttributes: int getAllFlags()>();

        if $i2 == 0 goto label4;

        $i4 = virtualinvoke r1.<android.media.AudioAttributes: int getAllFlags()>();

        if $i4 == 0 goto label5;

        $i5 = virtualinvoke r1.<android.media.AudioAttributes: int getAllFlags()>();

        $i6 = virtualinvoke r0.<android.media.AudioAttributes: int getAllFlags()>();

        $i7 = $i5 & $i6;

        $i8 = virtualinvoke r0.<android.media.AudioAttributes: int getAllFlags()>();

        if $i7 != $i8 goto label5;

     label4:
        $i3 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i3 == 0 goto label6;

        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z1 == 0 goto label5;

        goto label6;

     label5:
        goto label7;

     label6:
        z2 = 1;

     label7:
        return z2;
    }

    public static android.media.audiopolicy.AudioProductStrategy createInvalidAudioProductStrategy(int)
    {
        int i0;
        android.media.audiopolicy.AudioProductStrategy $r0;
        android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup[] $r1;

        i0 := @parameter0: int;

        $r0 = new android.media.audiopolicy.AudioProductStrategy;

        $r1 = newarray (android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup)[0];

        specialinvoke $r0.<android.media.audiopolicy.AudioProductStrategy: void <init>(java.lang.String,int,android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup[])>("dummy strategy", i0, $r1);

        return $r0;
    }

    public static android.media.AudioAttributes getAudioAttributesForStrategyWithLegacyStreamType(int)
    {
        int i0;
        java.util.Iterator r0;
        android.media.AudioAttributes r1, $r6;
        java.util.List $r2;
        boolean $z0;
        android.media.AudioAttributes$Builder $r3, $r4, $r5;
        java.lang.Object $r7;
        android.media.audiopolicy.AudioProductStrategy $r8;

        i0 := @parameter0: int;

        $r2 = staticinvoke <android.media.audiopolicy.AudioProductStrategy: java.util.List getAudioProductStrategies()>();

        r0 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (android.media.audiopolicy.AudioProductStrategy) $r7;

        r1 = virtualinvoke $r8.<android.media.audiopolicy.AudioProductStrategy: android.media.AudioAttributes getAudioAttributesForLegacyStreamType(int)>(i0);

        if r1 == null goto label2;

        return r1;

     label2:
        goto label1;

     label3:
        $r3 = new android.media.AudioAttributes$Builder;

        specialinvoke $r3.<android.media.AudioAttributes$Builder: void <init>()>();

        $r4 = virtualinvoke $r3.<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setContentType(int)>(0);

        $r5 = virtualinvoke $r4.<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setUsage(int)>(0);

        $r6 = virtualinvoke $r5.<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>();

        return $r6;
    }

    public static java.util.List getAudioProductStrategies()
    {
        java.lang.Object r0;
        java.util.List $r2, $r3, $r4, $r5;
        java.lang.Throwable $r6;

        $r2 = <android.media.audiopolicy.AudioProductStrategy: java.util.List sAudioProductStrategies>;

        if $r2 != null goto label7;

        r0 = <android.media.audiopolicy.AudioProductStrategy: java.lang.Object sLock>;

        entermonitor r0;

     label1:
        $r4 = <android.media.audiopolicy.AudioProductStrategy: java.util.List sAudioProductStrategies>;

        if $r4 != null goto label2;

        $r5 = staticinvoke <android.media.audiopolicy.AudioProductStrategy: java.util.List initializeAudioProductStrategies()>();

        <android.media.audiopolicy.AudioProductStrategy: java.util.List sAudioProductStrategies> = $r5;

     label2:
        exitmonitor r0;

     label3:
        goto label7;

     label4:
        $r6 := @caughtexception;

     label5:
        exitmonitor r0;

     label6:
        throw $r6;

     label7:
        $r3 = <android.media.audiopolicy.AudioProductStrategy: java.util.List sAudioProductStrategies>;

        return $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public static android.media.audiopolicy.AudioProductStrategy getAudioProductStrategyWithId(int)
    {
        int i0, $i1;
        java.lang.Object r0, $r4;
        java.util.Iterator r1;
        java.util.List $r2, $r3, $r5;
        java.lang.Throwable $r6;
        boolean $z0;
        android.media.audiopolicy.AudioProductStrategy r7;

        i0 := @parameter0: int;

        r0 = <android.media.audiopolicy.AudioProductStrategy: java.lang.Object sLock>;

        entermonitor r0;

     label01:
        $r2 = <android.media.audiopolicy.AudioProductStrategy: java.util.List sAudioProductStrategies>;

        if $r2 != null goto label02;

        $r5 = staticinvoke <android.media.audiopolicy.AudioProductStrategy: java.util.List initializeAudioProductStrategies()>();

        <android.media.audiopolicy.AudioProductStrategy: java.util.List sAudioProductStrategies> = $r5;

     label02:
        $r3 = <android.media.audiopolicy.AudioProductStrategy: java.util.List sAudioProductStrategies>;

        r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r7 = (android.media.audiopolicy.AudioProductStrategy) $r4;

        $i1 = virtualinvoke r7.<android.media.audiopolicy.AudioProductStrategy: int getId()>();

        if $i1 != i0 goto label05;

        exitmonitor r0;

     label04:
        return r7;

     label05:
        goto label03;

     label06:
        exitmonitor r0;

     label07:
        return null;

     label08:
        $r6 := @caughtexception;

     label09:
        exitmonitor r0;

     label10:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public static int getLegacyStreamTypeForStrategyWithAudioAttributes(android.media.AudioAttributes)
    {
        android.media.AudioAttributes r0;
        android.media.audiopolicy.AudioProductStrategy r1;
        int i0, $i1, $i2;
        java.util.List $r3;
        boolean $z0, $z1;
        java.lang.Object $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r7, $r12;
        java.util.Iterator r13;

        r0 := @parameter0: android.media.AudioAttributes;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "AudioAttributes must not be null");

        $r3 = staticinvoke <android.media.audiopolicy.AudioProductStrategy: java.util.List getAudioProductStrategies()>();

        r13 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        r1 = (android.media.audiopolicy.AudioProductStrategy) $r4;

        $z1 = virtualinvoke r1.<android.media.audiopolicy.AudioProductStrategy: boolean supportsAudioAttributes(android.media.AudioAttributes)>(r0);

        if $z1 == 0 goto label3;

        i0 = virtualinvoke r1.<android.media.audiopolicy.AudioProductStrategy: int getLegacyStreamTypeForAudioAttributes(android.media.AudioAttributes)>(r0);

        if i0 != -1 goto label2;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attributes ");

        $r7 = virtualinvoke r0.<android.media.AudioAttributes: java.lang.String toString()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ported by strategy ");

        $i2 = virtualinvoke r1.<android.media.audiopolicy.AudioProductStrategy: int getId()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has no stream type associated, DO NOT USE STREAM TO CONTROL THE VOLUME");

        $r12 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AudioProductStrategy", $r12);

        return 3;

     label2:
        $i1 = staticinvoke <android.media.AudioSystem: int getNumStreamTypes()>();

        if i0 >= $i1 goto label3;

        return i0;

     label3:
        goto label1;

     label4:
        return 3;
    }

    private static java.util.List initializeAudioProductStrategies()
    {
        java.util.ArrayList $r1;
        int $i0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $i0 = staticinvoke <android.media.audiopolicy.AudioProductStrategy: int native_list_audio_product_strategies(java.util.ArrayList)>($r1);

        if $i0 == 0 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("AudioProductStrategy", ": initializeAudioProductStrategies failed");

     label1:
        return $r1;
    }

    private static native int native_list_audio_product_strategies(java.util.ArrayList);

    public int describeContents()
    {
        android.media.audiopolicy.AudioProductStrategy r0;

        r0 := @this: android.media.audiopolicy.AudioProductStrategy;

        return 0;
    }

    public boolean equals(java.lang.Object)
    {
        android.media.audiopolicy.AudioProductStrategy r0, r8;
        java.lang.Class $r1, $r2;
        java.lang.String $r3, $r4;
        int $i0, $i1;
        android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup[] $r5, $r6;
        boolean $z0, z1;
        java.lang.Object r7;

        r0 := @this: android.media.audiopolicy.AudioProductStrategy;

        r7 := @parameter0: java.lang.Object;

        z1 = 1;

        if r0 != r7 goto label1;

        return 1;

     label1:
        if r7 == null goto label5;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke r7.<java.lang.Object: java.lang.Class getClass()>();

        if $r1 == $r2 goto label2;

        goto label5;

     label2:
        r8 = (android.media.audiopolicy.AudioProductStrategy) r7;

        $r4 = r0.<android.media.audiopolicy.AudioProductStrategy: java.lang.String mName>;

        $r3 = r8.<android.media.audiopolicy.AudioProductStrategy: java.lang.String mName>;

        if $r4 != $r3 goto label3;

        $i1 = r0.<android.media.audiopolicy.AudioProductStrategy: int mId>;

        $i0 = r8.<android.media.audiopolicy.AudioProductStrategy: int mId>;

        if $i1 != $i0 goto label3;

        $r6 = r0.<android.media.audiopolicy.AudioProductStrategy: android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup[] mAudioAttributesGroups>;

        $r5 = r8.<android.media.audiopolicy.AudioProductStrategy: android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup[] mAudioAttributesGroups>;

        $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label3;

        goto label4;

     label3:
        z1 = 0;

     label4:
        return z1;

     label5:
        return 0;
    }

    public android.media.AudioAttributes getAudioAttributes()
    {
        android.media.audiopolicy.AudioProductStrategy r0;
        int $i0;
        android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup $r1;
        android.media.AudioAttributes$Builder $r2;
        android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup[] r3;
        android.media.AudioAttributes r4;

        r0 := @this: android.media.audiopolicy.AudioProductStrategy;

        r3 = r0.<android.media.audiopolicy.AudioProductStrategy: android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup[] mAudioAttributesGroups>;

        $i0 = lengthof r3;

        if $i0 != 0 goto label1;

        $r2 = new android.media.AudioAttributes$Builder;

        specialinvoke $r2.<android.media.AudioAttributes$Builder: void <init>()>();

        r4 = virtualinvoke $r2.<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>();

        goto label2;

     label1:
        $r1 = r3[0];

        r4 = virtualinvoke $r1.<android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup: android.media.AudioAttributes getAudioAttributes()>();

     label2:
        return r4;
    }

    public android.media.AudioAttributes getAudioAttributesForLegacyStreamType(int)
    {
        android.media.audiopolicy.AudioProductStrategy r0;
        int i0, i1, i2;
        android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup[] r1;
        android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup r2;
        boolean $z0;
        android.media.AudioAttributes $r3;

        r0 := @this: android.media.audiopolicy.AudioProductStrategy;

        i0 := @parameter0: int;

        r1 = r0.<android.media.audiopolicy.AudioProductStrategy: android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup[] mAudioAttributesGroups>;

        i1 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i1 goto label3;

        r2 = r1[i2];

        $z0 = virtualinvoke r2.<android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup: boolean supportsStreamType(int)>(i0);

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke r2.<android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup: android.media.AudioAttributes getAudioAttributes()>();

        return $r3;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return null;
    }

    public int getId()
    {
        android.media.audiopolicy.AudioProductStrategy r0;
        int $i0;

        r0 := @this: android.media.audiopolicy.AudioProductStrategy;

        $i0 = r0.<android.media.audiopolicy.AudioProductStrategy: int mId>;

        return $i0;
    }

    public int getLegacyStreamTypeForAudioAttributes(android.media.AudioAttributes)
    {
        android.media.audiopolicy.AudioProductStrategy r0;
        android.media.AudioAttributes r1;
        android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup[] r2;
        int i0, $i1, i2;
        android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup r3;
        boolean $z0;

        r0 := @this: android.media.audiopolicy.AudioProductStrategy;

        r1 := @parameter0: android.media.AudioAttributes;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "AudioAttributes must not be null");

        r2 = r0.<android.media.audiopolicy.AudioProductStrategy: android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup[] mAudioAttributesGroups>;

        i0 = lengthof r2;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        r3 = r2[i2];

        $z0 = virtualinvoke r3.<android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup: boolean supportsAttributes(android.media.AudioAttributes)>(r1);

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke r3.<android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup: int getStreamType()>();

        return $i1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return -1;
    }

    public int getVolumeGroupIdForAudioAttributes(android.media.AudioAttributes)
    {
        android.media.audiopolicy.AudioProductStrategy r0;
        android.media.AudioAttributes r1;
        android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup[] r2;
        int i0, $i1, i2;
        android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup r3;
        boolean $z0;

        r0 := @this: android.media.audiopolicy.AudioProductStrategy;

        r1 := @parameter0: android.media.AudioAttributes;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "AudioAttributes must not be null");

        r2 = r0.<android.media.audiopolicy.AudioProductStrategy: android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup[] mAudioAttributesGroups>;

        i0 = lengthof r2;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        r3 = r2[i2];

        $z0 = virtualinvoke r3.<android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup: boolean supportsAttributes(android.media.AudioAttributes)>(r1);

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke r3.<android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup: int getVolumeGroupId()>();

        return $i1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return -1;
    }

    public int getVolumeGroupIdForLegacyStreamType(int)
    {
        android.media.audiopolicy.AudioProductStrategy r0;
        int i0, i1, $i2, i3;
        android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup[] r1;
        android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup r2;
        boolean $z0;

        r0 := @this: android.media.audiopolicy.AudioProductStrategy;

        i0 := @parameter0: int;

        r1 = r0.<android.media.audiopolicy.AudioProductStrategy: android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup[] mAudioAttributesGroups>;

        i1 = lengthof r1;

        i3 = 0;

     label1:
        if i3 >= i1 goto label3;

        r2 = r1[i3];

        $z0 = virtualinvoke r2.<android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup: boolean supportsStreamType(int)>(i0);

        if $z0 == 0 goto label2;

        $i2 = virtualinvoke r2.<android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup: int getVolumeGroupId()>();

        return $i2;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return -1;
    }

    public boolean supportsAudioAttributes(android.media.AudioAttributes)
    {
        android.media.audiopolicy.AudioProductStrategy r0;
        android.media.AudioAttributes r1;
        android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup[] r2;
        int i0, i1;
        android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup $r4;
        boolean $z0;

        r0 := @this: android.media.audiopolicy.AudioProductStrategy;

        r1 := @parameter0: android.media.AudioAttributes;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "AudioAttributes must not be null");

        r2 = r0.<android.media.audiopolicy.AudioProductStrategy: android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup[] mAudioAttributesGroups>;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r4 = r2[i1];

        $z0 = virtualinvoke $r4.<android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup: boolean supportsAttributes(android.media.AudioAttributes)>(r1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public java.lang.String toString()
    {
        android.media.audiopolicy.AudioProductStrategy r0;
        android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup[] r2;
        int i0, $i1, i2;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r8, $r10, $r12;
        android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup $r11;

        r0 := @this: android.media.audiopolicy.AudioProductStrategy;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n Name: ");

        $r5 = r0.<android.media.audiopolicy.AudioProductStrategy: java.lang.String mName>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Id: ");

        $i1 = r0.<android.media.audiopolicy.AudioProductStrategy: int mId>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        r2 = r0.<android.media.audiopolicy.AudioProductStrategy: android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup[] mAudioAttributesGroups>;

        i0 = lengthof r2;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r11 = r2[i2];

        $r12 = virtualinvoke $r11.<android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup: java.lang.String toString()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r10 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        android.media.audiopolicy.AudioProductStrategy r0;
        android.os.Parcel r1;
        int i0, i1, $i2, $i3, i4;
        android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup[] r2, $r4;
        java.lang.String $r3;
        android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup $r5;

        r0 := @this: android.media.audiopolicy.AudioProductStrategy;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        $r3 = r0.<android.media.audiopolicy.AudioProductStrategy: java.lang.String mName>;

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>($r3);

        $i2 = r0.<android.media.audiopolicy.AudioProductStrategy: int mId>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i2);

        $r4 = r0.<android.media.audiopolicy.AudioProductStrategy: android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup[] mAudioAttributesGroups>;

        $i3 = lengthof $r4;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i3);

        r2 = r0.<android.media.audiopolicy.AudioProductStrategy: android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup[] mAudioAttributesGroups>;

        i1 = lengthof r2;

        i4 = 0;

     label1:
        if i4 >= i1 goto label2;

        $r5 = r2[i4];

        virtualinvoke $r5.<android.media.audiopolicy.AudioProductStrategy$AudioAttributesGroup: void writeToParcel(android.os.Parcel,int)>(r1, i0);

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }
}
