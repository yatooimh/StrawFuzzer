public final class android.media.midi.MidiManager extends java.lang.Object
{
    public static final java.lang.String BLUETOOTH_MIDI_SERVICE_CLASS;
    public static final java.lang.String BLUETOOTH_MIDI_SERVICE_INTENT;
    public static final java.lang.String BLUETOOTH_MIDI_SERVICE_PACKAGE;
    private static final java.lang.String TAG;
    private java.util.concurrent.ConcurrentHashMap mDeviceListeners;
    private final android.media.midi.IMidiManager mService;
    private final android.os.IBinder mToken;

    public void <init>(android.media.midi.IMidiManager)
    {
        android.media.midi.MidiManager r0;
        android.media.midi.IMidiManager r1;
        android.os.Binder $r2;
        java.util.concurrent.ConcurrentHashMap $r3;

        r0 := @this: android.media.midi.MidiManager;

        r1 := @parameter0: android.media.midi.IMidiManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new android.os.Binder;

        specialinvoke $r2.<android.os.Binder: void <init>()>();

        r0.<android.media.midi.MidiManager: android.os.IBinder mToken> = $r2;

        $r3 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r3.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<android.media.midi.MidiManager: java.util.concurrent.ConcurrentHashMap mDeviceListeners> = $r3;

        r0.<android.media.midi.MidiManager: android.media.midi.IMidiManager mService> = r1;

        return;
    }

    static android.media.midi.IMidiManager access$100(android.media.midi.MidiManager)
    {
        android.media.midi.MidiManager r0;
        android.media.midi.IMidiManager $r1;

        r0 := @parameter0: android.media.midi.MidiManager;

        $r1 = r0.<android.media.midi.MidiManager: android.media.midi.IMidiManager mService>;

        return $r1;
    }

    static android.os.IBinder access$200(android.media.midi.MidiManager)
    {
        android.media.midi.MidiManager r0;
        android.os.IBinder $r1;

        r0 := @parameter0: android.media.midi.MidiManager;

        $r1 = r0.<android.media.midi.MidiManager: android.os.IBinder mToken>;

        return $r1;
    }

    static void access$300(android.media.midi.MidiManager, android.media.midi.MidiDevice, android.media.midi.MidiManager$OnDeviceOpenedListener, android.os.Handler)
    {
        android.media.midi.MidiManager r0;
        android.media.midi.MidiDevice r1;
        android.media.midi.MidiManager$OnDeviceOpenedListener r2;
        android.os.Handler r3;

        r0 := @parameter0: android.media.midi.MidiManager;

        r1 := @parameter1: android.media.midi.MidiDevice;

        r2 := @parameter2: android.media.midi.MidiManager$OnDeviceOpenedListener;

        r3 := @parameter3: android.os.Handler;

        specialinvoke r0.<android.media.midi.MidiManager: void sendOpenDeviceResponse(android.media.midi.MidiDevice,android.media.midi.MidiManager$OnDeviceOpenedListener,android.os.Handler)>(r1, r2, r3);

        return;
    }

    private void sendOpenDeviceResponse(android.media.midi.MidiDevice, android.media.midi.MidiManager$OnDeviceOpenedListener, android.os.Handler)
    {
        android.media.midi.MidiManager r0;
        android.media.midi.MidiDevice r1;
        android.media.midi.MidiManager$OnDeviceOpenedListener r2;
        android.os.Handler r3;
        android.media.midi.MidiManager$1 $r4;

        r0 := @this: android.media.midi.MidiManager;

        r1 := @parameter0: android.media.midi.MidiDevice;

        r2 := @parameter1: android.media.midi.MidiManager$OnDeviceOpenedListener;

        r3 := @parameter2: android.os.Handler;

        if r3 == null goto label1;

        $r4 = new android.media.midi.MidiManager$1;

        specialinvoke $r4.<android.media.midi.MidiManager$1: void <init>(android.media.midi.MidiManager,android.media.midi.MidiManager$OnDeviceOpenedListener,android.media.midi.MidiDevice)>(r0, r2, r1);

        virtualinvoke r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r4);

        goto label2;

     label1:
        interfaceinvoke r2.<android.media.midi.MidiManager$OnDeviceOpenedListener: void onDeviceOpened(android.media.midi.MidiDevice)>(r1);

     label2:
        return;
    }

    public android.media.midi.MidiDeviceServer createDeviceServer(android.media.midi.MidiReceiver[], int, java.lang.String[], java.lang.String[], android.os.Bundle, int, android.media.midi.MidiDeviceServer$Callback)
    {
        android.media.midi.MidiManager r0;
        int i0, i1, $i2;
        java.lang.String[] r1, r2;
        android.os.Bundle r3;
        android.media.midi.MidiDeviceServer$Callback r4;
        android.media.midi.MidiDeviceServer r5;
        android.media.midi.IMidiManager r6, $r7;
        android.media.midi.IMidiDeviceServer $r8;
        android.media.midi.MidiDeviceInfo $r9;
        android.os.RemoteException $r10, $r12, r14;
        java.lang.RuntimeException $r11;
        android.media.midi.MidiReceiver[] r13;

        r0 := @this: android.media.midi.MidiManager;

        r13 := @parameter0: android.media.midi.MidiReceiver[];

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String[];

        r2 := @parameter3: java.lang.String[];

        r3 := @parameter4: android.os.Bundle;

        i1 := @parameter5: int;

        r4 := @parameter6: android.media.midi.MidiDeviceServer$Callback;

     label1:
        r5 = new android.media.midi.MidiDeviceServer;

        r6 = r0.<android.media.midi.MidiManager: android.media.midi.IMidiManager mService>;

     label2:
        specialinvoke r5.<android.media.midi.MidiDeviceServer: void <init>(android.media.midi.IMidiManager,android.media.midi.MidiReceiver[],int,android.media.midi.MidiDeviceServer$Callback)>(r6, r13, i0, r4);

        $r7 = r0.<android.media.midi.MidiManager: android.media.midi.IMidiManager mService>;

        $r8 = virtualinvoke r5.<android.media.midi.MidiDeviceServer: android.media.midi.IMidiDeviceServer getBinderInterface()>();

        $i2 = lengthof r13;

        $r9 = interfaceinvoke $r7.<android.media.midi.IMidiManager: android.media.midi.MidiDeviceInfo registerDeviceServer(android.media.midi.IMidiDeviceServer,int,int,java.lang.String[],java.lang.String[],android.os.Bundle,int)>($r8, $i2, i0, r1, r2, r3, i1);

        if $r9 != null goto label4;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MidiManager", "registerVirtualDevice failed");

     label3:
        return null;

     label4:
        return r5;

     label5:
        $r10 := @caughtexception;

        r14 = $r10;

        goto label7;

     label6:
        $r12 := @caughtexception;

        r14 = $r12;

     label7:
        $r11 = virtualinvoke r14.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r11;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label2 to label3 with label5;
    }

    public android.media.midi.MidiDeviceInfo[] getDevices()
    {
        android.media.midi.MidiManager r0;
        android.media.midi.IMidiManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.media.midi.MidiDeviceInfo[] r4;

        r0 := @this: android.media.midi.MidiManager;

     label1:
        $r1 = r0.<android.media.midi.MidiManager: android.media.midi.IMidiManager mService>;

        r4 = interfaceinvoke $r1.<android.media.midi.IMidiManager: android.media.midi.MidiDeviceInfo[] getDevices()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void openBluetoothDevice(android.bluetooth.BluetoothDevice, android.media.midi.MidiManager$OnDeviceOpenedListener, android.os.Handler)
    {
        android.media.midi.MidiManager r0;
        android.os.Handler r1;
        android.media.midi.MidiManager$3 $r2;
        android.os.IBinder $r3;
        android.media.midi.IMidiManager $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.bluetooth.BluetoothDevice r7;
        android.media.midi.MidiManager$OnDeviceOpenedListener r8;

        r0 := @this: android.media.midi.MidiManager;

        r7 := @parameter0: android.bluetooth.BluetoothDevice;

        r8 := @parameter1: android.media.midi.MidiManager$OnDeviceOpenedListener;

        r1 := @parameter2: android.os.Handler;

        $r2 = new android.media.midi.MidiManager$3;

        specialinvoke $r2.<android.media.midi.MidiManager$3: void <init>(android.media.midi.MidiManager,android.media.midi.MidiManager$OnDeviceOpenedListener,android.os.Handler)>(r0, r8, r1);

     label1:
        $r4 = r0.<android.media.midi.MidiManager: android.media.midi.IMidiManager mService>;

        $r3 = r0.<android.media.midi.MidiManager: android.os.IBinder mToken>;

        interfaceinvoke $r4.<android.media.midi.IMidiManager: void openBluetoothDevice(android.os.IBinder,android.bluetooth.BluetoothDevice,android.media.midi.IMidiDeviceOpenCallback)>($r3, r7, $r2);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void openDevice(android.media.midi.MidiDeviceInfo, android.media.midi.MidiManager$OnDeviceOpenedListener, android.os.Handler)
    {
        android.media.midi.MidiManager r0;
        android.os.Handler r1;
        android.media.midi.MidiManager$2 $r2;
        android.os.IBinder $r3;
        android.media.midi.IMidiManager $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.media.midi.MidiDeviceInfo r7;
        android.media.midi.MidiManager$OnDeviceOpenedListener r8;

        r0 := @this: android.media.midi.MidiManager;

        r7 := @parameter0: android.media.midi.MidiDeviceInfo;

        r8 := @parameter1: android.media.midi.MidiManager$OnDeviceOpenedListener;

        r1 := @parameter2: android.os.Handler;

        $r2 = new android.media.midi.MidiManager$2;

        specialinvoke $r2.<android.media.midi.MidiManager$2: void <init>(android.media.midi.MidiManager,android.media.midi.MidiDeviceInfo,android.media.midi.MidiManager$OnDeviceOpenedListener,android.os.Handler)>(r0, r7, r8, r1);

     label1:
        $r4 = r0.<android.media.midi.MidiManager: android.media.midi.IMidiManager mService>;

        $r3 = r0.<android.media.midi.MidiManager: android.os.IBinder mToken>;

        interfaceinvoke $r4.<android.media.midi.IMidiManager: void openDevice(android.os.IBinder,android.media.midi.MidiDeviceInfo,android.media.midi.IMidiDeviceOpenCallback)>($r3, r7, $r2);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void registerDeviceCallback(android.media.midi.MidiManager$DeviceCallback, android.os.Handler)
    {
        android.media.midi.MidiManager r0;
        android.media.midi.MidiManager$DeviceListener $r1;
        android.os.IBinder $r2;
        android.media.midi.IMidiManager $r3;
        java.util.concurrent.ConcurrentHashMap $r4;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;
        android.media.midi.MidiManager$DeviceCallback r8;
        android.os.Handler r9;

        r0 := @this: android.media.midi.MidiManager;

        r8 := @parameter0: android.media.midi.MidiManager$DeviceCallback;

        r9 := @parameter1: android.os.Handler;

        $r1 = new android.media.midi.MidiManager$DeviceListener;

        specialinvoke $r1.<android.media.midi.MidiManager$DeviceListener: void <init>(android.media.midi.MidiManager,android.media.midi.MidiManager$DeviceCallback,android.os.Handler)>(r0, r8, r9);

     label1:
        $r3 = r0.<android.media.midi.MidiManager: android.media.midi.IMidiManager mService>;

        $r2 = r0.<android.media.midi.MidiManager: android.os.IBinder mToken>;

        interfaceinvoke $r3.<android.media.midi.IMidiManager: void registerListener(android.os.IBinder,android.media.midi.IMidiDeviceListener)>($r2, $r1);

     label2:
        $r4 = r0.<android.media.midi.MidiManager: java.util.concurrent.ConcurrentHashMap mDeviceListeners>;

        virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, $r1);

        return;

     label3:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void unregisterDeviceCallback(android.media.midi.MidiManager$DeviceCallback)
    {
        android.media.midi.MidiManager r0;
        java.util.concurrent.ConcurrentHashMap $r1;
        java.lang.Object $r2;
        android.os.IBinder $r3;
        android.media.midi.IMidiManager $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.media.midi.MidiManager$DeviceCallback r7;
        android.media.midi.MidiManager$DeviceListener r8;

        r0 := @this: android.media.midi.MidiManager;

        r7 := @parameter0: android.media.midi.MidiManager$DeviceCallback;

        $r1 = r0.<android.media.midi.MidiManager: java.util.concurrent.ConcurrentHashMap mDeviceListeners>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>(r7);

        r8 = (android.media.midi.MidiManager$DeviceListener) $r2;

        if r8 == null goto label4;

     label1:
        $r4 = r0.<android.media.midi.MidiManager: android.media.midi.IMidiManager mService>;

        $r3 = r0.<android.media.midi.MidiManager: android.os.IBinder mToken>;

        interfaceinvoke $r4.<android.media.midi.IMidiManager: void unregisterListener(android.os.IBinder,android.media.midi.IMidiDeviceListener)>($r3, r8);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <android.media.midi.MidiManager: java.lang.String TAG> = "MidiManager";

        <android.media.midi.MidiManager: java.lang.String BLUETOOTH_MIDI_SERVICE_PACKAGE> = "com.android.bluetoothmidiservice";

        <android.media.midi.MidiManager: java.lang.String BLUETOOTH_MIDI_SERVICE_INTENT> = "android.media.midi.BluetoothMidiService";

        <android.media.midi.MidiManager: java.lang.String BLUETOOTH_MIDI_SERVICE_CLASS> = "com.android.bluetoothmidiservice.BluetoothMidiService";

        return;
    }
}
