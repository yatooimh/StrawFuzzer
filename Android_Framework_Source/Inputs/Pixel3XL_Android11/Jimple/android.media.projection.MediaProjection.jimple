public final class android.media.projection.MediaProjection extends java.lang.Object
{
    private static final java.lang.String TAG;
    private final java.util.Map mCallbacks;
    private final android.content.Context mContext;
    private final android.media.projection.IMediaProjection mImpl;

    public void <init>(android.content.Context, android.media.projection.IMediaProjection)
    {
        android.media.projection.MediaProjection r0;
        android.media.projection.IMediaProjection r1;
        android.util.ArrayMap $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.Context r5;
        android.media.projection.MediaProjection$MediaProjectionCallback r6;

        r0 := @this: android.media.projection.MediaProjection;

        r5 := @parameter0: android.content.Context;

        r1 := @parameter1: android.media.projection.IMediaProjection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new android.util.ArrayMap;

        specialinvoke $r2.<android.util.ArrayMap: void <init>()>();

        r0.<android.media.projection.MediaProjection: java.util.Map mCallbacks> = $r2;

        r0.<android.media.projection.MediaProjection: android.content.Context mContext> = r5;

        r0.<android.media.projection.MediaProjection: android.media.projection.IMediaProjection mImpl> = r1;

     label1:
        r6 = new android.media.projection.MediaProjection$MediaProjectionCallback;

        specialinvoke r6.<android.media.projection.MediaProjection$MediaProjectionCallback: void <init>(android.media.projection.MediaProjection,android.media.projection.MediaProjection$1)>(r0, null);

        interfaceinvoke r1.<android.media.projection.IMediaProjection: void start(android.media.projection.IMediaProjectionCallback)>(r6);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to start media projection", $r3);

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    static java.util.Map access$100(android.media.projection.MediaProjection)
    {
        android.media.projection.MediaProjection r0;
        java.util.Map $r1;

        r0 := @parameter0: android.media.projection.MediaProjection;

        $r1 = r0.<android.media.projection.MediaProjection: java.util.Map mCallbacks>;

        return $r1;
    }

    public android.hardware.display.VirtualDisplay createVirtualDisplay(android.hardware.display.VirtualDisplayConfig, android.hardware.display.VirtualDisplay$Callback, android.os.Handler)
    {
        android.media.projection.MediaProjection r0;
        android.hardware.display.VirtualDisplayConfig r1;
        android.hardware.display.VirtualDisplay$Callback r2;
        android.os.Handler r3;
        android.content.Context $r4;
        java.lang.Object $r5;
        android.hardware.display.DisplayManager $r6;
        android.hardware.display.VirtualDisplay $r7;

        r0 := @this: android.media.projection.MediaProjection;

        r1 := @parameter0: android.hardware.display.VirtualDisplayConfig;

        r2 := @parameter1: android.hardware.display.VirtualDisplay$Callback;

        r3 := @parameter2: android.os.Handler;

        $r4 = r0.<android.media.projection.MediaProjection: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/hardware/display/DisplayManager;");

        $r6 = (android.hardware.display.DisplayManager) $r5;

        $r7 = virtualinvoke $r6.<android.hardware.display.DisplayManager: android.hardware.display.VirtualDisplay createVirtualDisplay(android.media.projection.MediaProjection,android.hardware.display.VirtualDisplayConfig,android.hardware.display.VirtualDisplay$Callback,android.os.Handler)>(r0, r1, r2, r3);

        return $r7;
    }

    public android.hardware.display.VirtualDisplay createVirtualDisplay(java.lang.String, int, int, int, int, android.view.Surface, android.hardware.display.VirtualDisplay$Callback, android.os.Handler)
    {
        android.media.projection.MediaProjection r0;
        int i0, i1, i2, i3;
        android.view.Surface r1;
        android.hardware.display.VirtualDisplay$Callback r2;
        android.os.Handler r3;
        android.hardware.display.VirtualDisplayConfig$Builder $r4;
        android.hardware.display.VirtualDisplayConfig $r6;
        android.hardware.display.VirtualDisplay $r7;
        java.lang.String r9;

        r0 := @this: android.media.projection.MediaProjection;

        r9 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r1 := @parameter5: android.view.Surface;

        r2 := @parameter6: android.hardware.display.VirtualDisplay$Callback;

        r3 := @parameter7: android.os.Handler;

        $r4 = new android.hardware.display.VirtualDisplayConfig$Builder;

        specialinvoke $r4.<android.hardware.display.VirtualDisplayConfig$Builder: void <init>(java.lang.String,int,int,int)>(r9, i0, i1, i2);

        virtualinvoke $r4.<android.hardware.display.VirtualDisplayConfig$Builder: android.hardware.display.VirtualDisplayConfig$Builder setFlags(int)>(i3);

        if r1 == null goto label1;

        virtualinvoke $r4.<android.hardware.display.VirtualDisplayConfig$Builder: android.hardware.display.VirtualDisplayConfig$Builder setSurface(android.view.Surface)>(r1);

     label1:
        $r6 = virtualinvoke $r4.<android.hardware.display.VirtualDisplayConfig$Builder: android.hardware.display.VirtualDisplayConfig build()>();

        $r7 = virtualinvoke r0.<android.media.projection.MediaProjection: android.hardware.display.VirtualDisplay createVirtualDisplay(android.hardware.display.VirtualDisplayConfig,android.hardware.display.VirtualDisplay$Callback,android.os.Handler)>($r6, r2, r3);

        return $r7;
    }

    public android.hardware.display.VirtualDisplay createVirtualDisplay(java.lang.String, int, int, int, boolean, android.view.Surface, android.hardware.display.VirtualDisplay$Callback, android.os.Handler)
    {
        android.media.projection.MediaProjection r0;
        int i0, i1, i2;
        boolean z0;
        android.view.Surface r1;
        android.hardware.display.VirtualDisplay$Callback r2;
        android.os.Handler r3;
        android.hardware.display.DisplayManager r4;
        android.content.Context $r5;
        java.lang.Object $r6;
        android.hardware.display.VirtualDisplayConfig$Builder $r7;
        android.hardware.display.VirtualDisplayConfig $r9;
        android.hardware.display.VirtualDisplay $r10;
        java.lang.String r12;
        byte b3;

        r0 := @this: android.media.projection.MediaProjection;

        r12 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        z0 := @parameter4: boolean;

        r1 := @parameter5: android.view.Surface;

        r2 := @parameter6: android.hardware.display.VirtualDisplay$Callback;

        r3 := @parameter7: android.os.Handler;

        $r5 = r0.<android.media.projection.MediaProjection: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("display");

        r4 = (android.hardware.display.DisplayManager) $r6;

        b3 = 18;

        if z0 == 0 goto label1;

        b3 = 18 | 4;

     label1:
        $r7 = new android.hardware.display.VirtualDisplayConfig$Builder;

        specialinvoke $r7.<android.hardware.display.VirtualDisplayConfig$Builder: void <init>(java.lang.String,int,int,int)>(r12, i0, i1, i2);

        virtualinvoke $r7.<android.hardware.display.VirtualDisplayConfig$Builder: android.hardware.display.VirtualDisplayConfig$Builder setFlags(int)>(b3);

        if r1 == null goto label2;

        virtualinvoke $r7.<android.hardware.display.VirtualDisplayConfig$Builder: android.hardware.display.VirtualDisplayConfig$Builder setSurface(android.view.Surface)>(r1);

     label2:
        $r9 = virtualinvoke $r7.<android.hardware.display.VirtualDisplayConfig$Builder: android.hardware.display.VirtualDisplayConfig build()>();

        $r10 = virtualinvoke r4.<android.hardware.display.DisplayManager: android.hardware.display.VirtualDisplay createVirtualDisplay(android.media.projection.MediaProjection,android.hardware.display.VirtualDisplayConfig,android.hardware.display.VirtualDisplay$Callback,android.os.Handler)>(r0, $r9, r2, r3);

        return $r10;
    }

    public android.media.projection.IMediaProjection getProjection()
    {
        android.media.projection.MediaProjection r0;
        android.media.projection.IMediaProjection $r1;

        r0 := @this: android.media.projection.MediaProjection;

        $r1 = r0.<android.media.projection.MediaProjection: android.media.projection.IMediaProjection mImpl>;

        return $r1;
    }

    public void registerCallback(android.media.projection.MediaProjection$Callback, android.os.Handler)
    {
        android.media.projection.MediaProjection r0;
        android.media.projection.MediaProjection$Callback r1;
        android.os.Handler r2, $r7, r8;
        java.lang.IllegalArgumentException $r3;
        android.media.projection.MediaProjection$CallbackRecord $r4;
        java.util.Map $r5;

        r0 := @this: android.media.projection.MediaProjection;

        r1 := @parameter0: android.media.projection.MediaProjection$Callback;

        r2 := @parameter1: android.os.Handler;

        if r1 == null goto label2;

        r8 = r2;

        if r2 != null goto label1;

        $r7 = new android.os.Handler;

        specialinvoke $r7.<android.os.Handler: void <init>()>();

        r8 = $r7;

     label1:
        $r5 = r0.<android.media.projection.MediaProjection: java.util.Map mCallbacks>;

        $r4 = new android.media.projection.MediaProjection$CallbackRecord;

        specialinvoke $r4.<android.media.projection.MediaProjection$CallbackRecord: void <init>(android.media.projection.MediaProjection$Callback,android.os.Handler)>(r1, r8);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

        return;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("callback should not be null");

        throw $r3;
    }

    public void stop()
    {
        android.media.projection.MediaProjection r0;
        android.media.projection.IMediaProjection $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.media.projection.MediaProjection;

     label1:
        $r2 = r0.<android.media.projection.MediaProjection: android.media.projection.IMediaProjection mImpl>;

        interfaceinvoke $r2.<android.media.projection.IMediaProjection: void stop()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaProjection", "Unable to stop projection", $r3);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void unregisterCallback(android.media.projection.MediaProjection$Callback)
    {
        android.media.projection.MediaProjection r0;
        android.media.projection.MediaProjection$Callback r1;
        java.lang.IllegalArgumentException $r2;
        java.util.Map $r3;

        r0 := @this: android.media.projection.MediaProjection;

        r1 := @parameter0: android.media.projection.MediaProjection$Callback;

        if r1 == null goto label1;

        $r3 = r0.<android.media.projection.MediaProjection: java.util.Map mCallbacks>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("callback should not be null");

        throw $r2;
    }

    public static void <clinit>()
    {
        <android.media.projection.MediaProjection: java.lang.String TAG> = "MediaProjection";

        return;
    }
}
