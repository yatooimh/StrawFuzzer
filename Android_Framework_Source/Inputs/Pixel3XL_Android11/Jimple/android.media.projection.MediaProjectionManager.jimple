public final class android.media.projection.MediaProjectionManager extends java.lang.Object
{
    public static final java.lang.String EXTRA_APP_TOKEN;
    public static final java.lang.String EXTRA_MEDIA_PROJECTION;
    private static final java.lang.String TAG;
    public static final int TYPE_MIRRORING;
    public static final int TYPE_PRESENTATION;
    public static final int TYPE_SCREEN_CAPTURE;
    private java.util.Map mCallbacks;
    private android.content.Context mContext;
    private android.media.projection.IMediaProjectionManager mService;

    public void <init>(android.content.Context)
    {
        android.media.projection.MediaProjectionManager r0;
        android.content.Context r1;
        android.os.IBinder $r2;
        android.media.projection.IMediaProjectionManager $r3;
        android.util.ArrayMap $r4;

        r0 := @this: android.media.projection.MediaProjectionManager;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.media.projection.MediaProjectionManager: android.content.Context mContext> = r1;

        $r2 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("media_projection");

        $r3 = staticinvoke <android.media.projection.IMediaProjectionManager$Stub: android.media.projection.IMediaProjectionManager asInterface(android.os.IBinder)>($r2);

        r0.<android.media.projection.MediaProjectionManager: android.media.projection.IMediaProjectionManager mService> = $r3;

        $r4 = new android.util.ArrayMap;

        specialinvoke $r4.<android.util.ArrayMap: void <init>()>();

        r0.<android.media.projection.MediaProjectionManager: java.util.Map mCallbacks> = $r4;

        return;
    }

    public void addCallback(android.media.projection.MediaProjectionManager$Callback, android.os.Handler)
    {
        android.media.projection.MediaProjectionManager r0;
        java.lang.IllegalArgumentException $r1;
        android.media.projection.MediaProjectionManager$CallbackDelegate $r2;
        java.util.Map $r3;
        android.media.projection.IMediaProjectionManager $r5;
        android.os.RemoteException $r6;
        android.media.projection.MediaProjectionManager$Callback r7;
        android.os.Handler r8;

        r0 := @this: android.media.projection.MediaProjectionManager;

        r7 := @parameter0: android.media.projection.MediaProjectionManager$Callback;

        r8 := @parameter1: android.os.Handler;

        if r7 == null goto label5;

        $r2 = new android.media.projection.MediaProjectionManager$CallbackDelegate;

        specialinvoke $r2.<android.media.projection.MediaProjectionManager$CallbackDelegate: void <init>(android.media.projection.MediaProjectionManager$Callback,android.os.Handler)>(r7, r8);

        $r3 = r0.<android.media.projection.MediaProjectionManager: java.util.Map mCallbacks>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, $r2);

     label1:
        $r5 = r0.<android.media.projection.MediaProjectionManager: android.media.projection.IMediaProjectionManager mService>;

        interfaceinvoke $r5.<android.media.projection.IMediaProjectionManager: void addCallback(android.media.projection.IMediaProjectionWatcherCallback)>($r2);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaProjectionManager", "Unable to add callbacks to MediaProjection service", $r6);

     label4:
        return;

     label5:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("callback must not be null");

        throw $r1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.content.Intent createScreenCaptureIntent()
    {
        android.media.projection.MediaProjectionManager r0;
        android.content.Intent $r2;
        android.content.Context $r3;
        android.content.res.Resources $r4;
        java.lang.String $r5;
        android.content.ComponentName $r6;

        r0 := @this: android.media.projection.MediaProjectionManager;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>()>();

        $r3 = r0.<android.media.projection.MediaProjectionManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.res.Resources getResources()>();

        $r5 = virtualinvoke $r4.<android.content.res.Resources: java.lang.String getString(int)>(17039913);

        $r6 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>($r5);

        virtualinvoke $r2.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>($r6);

        return $r2;
    }

    public android.media.projection.MediaProjectionInfo getActiveProjectionInfo()
    {
        android.media.projection.MediaProjectionManager r0;
        android.media.projection.IMediaProjectionManager $r1;
        android.os.RemoteException $r2;
        android.media.projection.MediaProjectionInfo r3;

        r0 := @this: android.media.projection.MediaProjectionManager;

     label1:
        $r1 = r0.<android.media.projection.MediaProjectionManager: android.media.projection.IMediaProjectionManager mService>;

        r3 = interfaceinvoke $r1.<android.media.projection.IMediaProjectionManager: android.media.projection.MediaProjectionInfo getActiveProjectionInfo()>();

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaProjectionManager", "Unable to get the active projection info", $r2);

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.media.projection.MediaProjection getMediaProjection(int, android.content.Intent)
    {
        android.media.projection.MediaProjectionManager r0;
        int i0;
        android.media.projection.MediaProjection $r1;
        android.content.Context $r2;
        android.media.projection.IMediaProjection $r3;
        android.content.Intent r4;
        android.os.IBinder r5;

        r0 := @this: android.media.projection.MediaProjectionManager;

        i0 := @parameter0: int;

        r4 := @parameter1: android.content.Intent;

        if i0 != -1 goto label3;

        if r4 != null goto label1;

        goto label3;

     label1:
        r5 = virtualinvoke r4.<android.content.Intent: android.os.IBinder getIBinderExtra(java.lang.String)>("android.media.projection.extra.EXTRA_MEDIA_PROJECTION");

        if r5 != null goto label2;

        return null;

     label2:
        $r1 = new android.media.projection.MediaProjection;

        $r2 = r0.<android.media.projection.MediaProjectionManager: android.content.Context mContext>;

        $r3 = staticinvoke <android.media.projection.IMediaProjection$Stub: android.media.projection.IMediaProjection asInterface(android.os.IBinder)>(r5);

        specialinvoke $r1.<android.media.projection.MediaProjection: void <init>(android.content.Context,android.media.projection.IMediaProjection)>($r2, $r3);

        return $r1;

     label3:
        return null;
    }

    public void removeCallback(android.media.projection.MediaProjectionManager$Callback)
    {
        android.media.projection.MediaProjectionManager r0;
        java.lang.IllegalArgumentException $r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        android.media.projection.IMediaProjectionManager $r4;
        android.os.RemoteException $r5;
        android.media.projection.MediaProjectionManager$Callback r6;
        android.media.projection.MediaProjectionManager$CallbackDelegate r7;

        r0 := @this: android.media.projection.MediaProjectionManager;

        r6 := @parameter0: android.media.projection.MediaProjectionManager$Callback;

        if r6 == null goto label5;

        $r2 = r0.<android.media.projection.MediaProjectionManager: java.util.Map mCallbacks>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r6);

        r7 = (android.media.projection.MediaProjectionManager$CallbackDelegate) $r3;

        if r7 == null goto label4;

     label1:
        $r4 = r0.<android.media.projection.MediaProjectionManager: android.media.projection.IMediaProjectionManager mService>;

        interfaceinvoke $r4.<android.media.projection.IMediaProjectionManager: void removeCallback(android.media.projection.IMediaProjectionWatcherCallback)>(r7);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaProjectionManager", "Unable to add callbacks to MediaProjection service", $r5);

        goto label4;

     label4:
        return;

     label5:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("callback must not be null");

        throw $r1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void stopActiveProjection()
    {
        android.media.projection.MediaProjectionManager r0;
        android.media.projection.IMediaProjectionManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.media.projection.MediaProjectionManager;

     label1:
        $r2 = r0.<android.media.projection.MediaProjectionManager: android.media.projection.IMediaProjectionManager mService>;

        interfaceinvoke $r2.<android.media.projection.IMediaProjectionManager: void stopActiveProjection()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaProjectionManager", "Unable to stop the currently active media projection", $r3);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <android.media.projection.MediaProjectionManager: int TYPE_SCREEN_CAPTURE> = 0;

        <android.media.projection.MediaProjectionManager: int TYPE_PRESENTATION> = 2;

        <android.media.projection.MediaProjectionManager: int TYPE_MIRRORING> = 1;

        <android.media.projection.MediaProjectionManager: java.lang.String TAG> = "MediaProjectionManager";

        <android.media.projection.MediaProjectionManager: java.lang.String EXTRA_MEDIA_PROJECTION> = "android.media.projection.extra.EXTRA_MEDIA_PROJECTION";

        <android.media.projection.MediaProjectionManager: java.lang.String EXTRA_APP_TOKEN> = "android.media.projection.extra.EXTRA_APP_TOKEN";

        return;
    }
}
