public class android.media.session.ISessionManager$Default extends java.lang.Object implements android.media.session.ISessionManager
{

    public void <init>()
    {
        android.media.session.ISessionManager$Default r0;

        r0 := @this: android.media.session.ISessionManager$Default;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void addOnMediaKeyEventDispatchedListener(android.media.session.IOnMediaKeyEventDispatchedListener) throws android.os.RemoteException
    {
        android.media.session.ISessionManager$Default r0;
        android.media.session.IOnMediaKeyEventDispatchedListener r1;

        r0 := @this: android.media.session.ISessionManager$Default;

        r1 := @parameter0: android.media.session.IOnMediaKeyEventDispatchedListener;

        return;
    }

    public void addOnMediaKeyEventSessionChangedListener(android.media.session.IOnMediaKeyEventSessionChangedListener) throws android.os.RemoteException
    {
        android.media.session.ISessionManager$Default r0;
        android.media.session.IOnMediaKeyEventSessionChangedListener r1;

        r0 := @this: android.media.session.ISessionManager$Default;

        r1 := @parameter0: android.media.session.IOnMediaKeyEventSessionChangedListener;

        return;
    }

    public void addSession2TokensListener(android.media.session.ISession2TokensListener, int) throws android.os.RemoteException
    {
        android.media.session.ISessionManager$Default r0;
        android.media.session.ISession2TokensListener r1;
        int i0;

        r0 := @this: android.media.session.ISessionManager$Default;

        r1 := @parameter0: android.media.session.ISession2TokensListener;

        i0 := @parameter1: int;

        return;
    }

    public void addSessionsListener(android.media.session.IActiveSessionsListener, android.content.ComponentName, int) throws android.os.RemoteException
    {
        android.media.session.ISessionManager$Default r0;
        android.media.session.IActiveSessionsListener r1;
        android.content.ComponentName r2;
        int i0;

        r0 := @this: android.media.session.ISessionManager$Default;

        r1 := @parameter0: android.media.session.IActiveSessionsListener;

        r2 := @parameter1: android.content.ComponentName;

        i0 := @parameter2: int;

        return;
    }

    public android.os.IBinder asBinder()
    {
        android.media.session.ISessionManager$Default r0;

        r0 := @this: android.media.session.ISessionManager$Default;

        return null;
    }

    public android.media.session.ISession createSession(java.lang.String, android.media.session.ISessionCallback, java.lang.String, android.os.Bundle, int) throws android.os.RemoteException
    {
        android.media.session.ISessionManager$Default r0;
        java.lang.String r1, r3;
        android.media.session.ISessionCallback r2;
        android.os.Bundle r4;
        int i0;

        r0 := @this: android.media.session.ISessionManager$Default;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.media.session.ISessionCallback;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.os.Bundle;

        i0 := @parameter4: int;

        return null;
    }

    public void dispatchAdjustVolume(java.lang.String, java.lang.String, int, int, int) throws android.os.RemoteException
    {
        android.media.session.ISessionManager$Default r0;
        java.lang.String r1, r2;
        int i0, i1, i2;

        r0 := @this: android.media.session.ISessionManager$Default;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        return;
    }

    public void dispatchMediaKeyEvent(java.lang.String, boolean, android.view.KeyEvent, boolean) throws android.os.RemoteException
    {
        android.media.session.ISessionManager$Default r0;
        java.lang.String r1;
        boolean z0, z1;
        android.view.KeyEvent r2;

        r0 := @this: android.media.session.ISessionManager$Default;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 := @parameter2: android.view.KeyEvent;

        z1 := @parameter3: boolean;

        return;
    }

    public boolean dispatchMediaKeyEventToSessionAsSystemService(java.lang.String, android.media.session.MediaSession$Token, android.view.KeyEvent) throws android.os.RemoteException
    {
        android.media.session.ISessionManager$Default r0;
        java.lang.String r1;
        android.media.session.MediaSession$Token r2;
        android.view.KeyEvent r3;

        r0 := @this: android.media.session.ISessionManager$Default;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.media.session.MediaSession$Token;

        r3 := @parameter2: android.view.KeyEvent;

        return 0;
    }

    public void dispatchVolumeKeyEvent(java.lang.String, java.lang.String, boolean, android.view.KeyEvent, int, boolean) throws android.os.RemoteException
    {
        android.media.session.ISessionManager$Default r0;
        java.lang.String r1, r2;
        boolean z0, z1;
        android.view.KeyEvent r3;
        int i0;

        r0 := @this: android.media.session.ISessionManager$Default;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r3 := @parameter3: android.view.KeyEvent;

        i0 := @parameter4: int;

        z1 := @parameter5: boolean;

        return;
    }

    public void dispatchVolumeKeyEventToSessionAsSystemService(java.lang.String, java.lang.String, android.media.session.MediaSession$Token, android.view.KeyEvent) throws android.os.RemoteException
    {
        android.media.session.ISessionManager$Default r0;
        java.lang.String r1, r2;
        android.media.session.MediaSession$Token r3;
        android.view.KeyEvent r4;

        r0 := @this: android.media.session.ISessionManager$Default;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.media.session.MediaSession$Token;

        r4 := @parameter3: android.view.KeyEvent;

        return;
    }

    public android.content.pm.ParceledListSlice getSession2Tokens(int) throws android.os.RemoteException
    {
        android.media.session.ISessionManager$Default r0;
        int i0;

        r0 := @this: android.media.session.ISessionManager$Default;

        i0 := @parameter0: int;

        return null;
    }

    public int getSessionPolicies(android.media.session.MediaSession$Token) throws android.os.RemoteException
    {
        android.media.session.ISessionManager$Default r0;
        android.media.session.MediaSession$Token r1;

        r0 := @this: android.media.session.ISessionManager$Default;

        r1 := @parameter0: android.media.session.MediaSession$Token;

        return 0;
    }

    public java.util.List getSessions(android.content.ComponentName, int) throws android.os.RemoteException
    {
        android.media.session.ISessionManager$Default r0;
        android.content.ComponentName r1;
        int i0;

        r0 := @this: android.media.session.ISessionManager$Default;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        return null;
    }

    public boolean isGlobalPriorityActive() throws android.os.RemoteException
    {
        android.media.session.ISessionManager$Default r0;

        r0 := @this: android.media.session.ISessionManager$Default;

        return 0;
    }

    public boolean isTrusted(java.lang.String, int, int) throws android.os.RemoteException
    {
        android.media.session.ISessionManager$Default r0;
        java.lang.String r1;
        int i0, i1;

        r0 := @this: android.media.session.ISessionManager$Default;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        return 0;
    }

    public void notifySession2Created(android.media.Session2Token) throws android.os.RemoteException
    {
        android.media.session.ISessionManager$Default r0;
        android.media.Session2Token r1;

        r0 := @this: android.media.session.ISessionManager$Default;

        r1 := @parameter0: android.media.Session2Token;

        return;
    }

    public void registerRemoteVolumeController(android.media.IRemoteVolumeController) throws android.os.RemoteException
    {
        android.media.session.ISessionManager$Default r0;
        android.media.IRemoteVolumeController r1;

        r0 := @this: android.media.session.ISessionManager$Default;

        r1 := @parameter0: android.media.IRemoteVolumeController;

        return;
    }

    public void removeOnMediaKeyEventDispatchedListener(android.media.session.IOnMediaKeyEventDispatchedListener) throws android.os.RemoteException
    {
        android.media.session.ISessionManager$Default r0;
        android.media.session.IOnMediaKeyEventDispatchedListener r1;

        r0 := @this: android.media.session.ISessionManager$Default;

        r1 := @parameter0: android.media.session.IOnMediaKeyEventDispatchedListener;

        return;
    }

    public void removeOnMediaKeyEventSessionChangedListener(android.media.session.IOnMediaKeyEventSessionChangedListener) throws android.os.RemoteException
    {
        android.media.session.ISessionManager$Default r0;
        android.media.session.IOnMediaKeyEventSessionChangedListener r1;

        r0 := @this: android.media.session.ISessionManager$Default;

        r1 := @parameter0: android.media.session.IOnMediaKeyEventSessionChangedListener;

        return;
    }

    public void removeSession2TokensListener(android.media.session.ISession2TokensListener) throws android.os.RemoteException
    {
        android.media.session.ISessionManager$Default r0;
        android.media.session.ISession2TokensListener r1;

        r0 := @this: android.media.session.ISessionManager$Default;

        r1 := @parameter0: android.media.session.ISession2TokensListener;

        return;
    }

    public void removeSessionsListener(android.media.session.IActiveSessionsListener) throws android.os.RemoteException
    {
        android.media.session.ISessionManager$Default r0;
        android.media.session.IActiveSessionsListener r1;

        r0 := @this: android.media.session.ISessionManager$Default;

        r1 := @parameter0: android.media.session.IActiveSessionsListener;

        return;
    }

    public void setCustomMediaKeyDispatcherForTesting(java.lang.String) throws android.os.RemoteException
    {
        android.media.session.ISessionManager$Default r0;
        java.lang.String r1;

        r0 := @this: android.media.session.ISessionManager$Default;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void setCustomSessionPolicyProviderForTesting(java.lang.String) throws android.os.RemoteException
    {
        android.media.session.ISessionManager$Default r0;
        java.lang.String r1;

        r0 := @this: android.media.session.ISessionManager$Default;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void setOnMediaKeyListener(android.media.session.IOnMediaKeyListener) throws android.os.RemoteException
    {
        android.media.session.ISessionManager$Default r0;
        android.media.session.IOnMediaKeyListener r1;

        r0 := @this: android.media.session.ISessionManager$Default;

        r1 := @parameter0: android.media.session.IOnMediaKeyListener;

        return;
    }

    public void setOnVolumeKeyLongPressListener(android.media.session.IOnVolumeKeyLongPressListener) throws android.os.RemoteException
    {
        android.media.session.ISessionManager$Default r0;
        android.media.session.IOnVolumeKeyLongPressListener r1;

        r0 := @this: android.media.session.ISessionManager$Default;

        r1 := @parameter0: android.media.session.IOnVolumeKeyLongPressListener;

        return;
    }

    public void setSessionPolicies(android.media.session.MediaSession$Token, int) throws android.os.RemoteException
    {
        android.media.session.ISessionManager$Default r0;
        android.media.session.MediaSession$Token r1;
        int i0;

        r0 := @this: android.media.session.ISessionManager$Default;

        r1 := @parameter0: android.media.session.MediaSession$Token;

        i0 := @parameter1: int;

        return;
    }

    public void unregisterRemoteVolumeController(android.media.IRemoteVolumeController) throws android.os.RemoteException
    {
        android.media.session.ISessionManager$Default r0;
        android.media.IRemoteVolumeController r1;

        r0 := @this: android.media.session.ISessionManager$Default;

        r1 := @parameter0: android.media.IRemoteVolumeController;

        return;
    }
}
