public final class android.media.session.MediaController extends java.lang.Object
{
    private static final int MSG_DESTROYED;
    private static final int MSG_EVENT;
    private static final int MSG_UPDATE_EXTRAS;
    private static final int MSG_UPDATE_METADATA;
    private static final int MSG_UPDATE_PLAYBACK_STATE;
    private static final int MSG_UPDATE_QUEUE;
    private static final int MSG_UPDATE_QUEUE_TITLE;
    private static final int MSG_UPDATE_VOLUME;
    private static final java.lang.String TAG;
    private final java.util.ArrayList mCallbacks;
    private boolean mCbRegistered;
    private final android.media.session.MediaController$CallbackStub mCbStub;
    private final android.content.Context mContext;
    private final java.lang.Object mLock;
    private java.lang.String mPackageName;
    private final android.media.session.ISessionController mSessionBinder;
    private android.os.Bundle mSessionInfo;
    private java.lang.String mTag;
    private final android.media.session.MediaSession$Token mToken;
    private final android.media.session.MediaController$TransportControls mTransportControls;

    public void <init>(android.content.Context, android.media.session.MediaSession$Token)
    {
        android.media.session.MediaController r0;
        android.content.Context r1;
        android.media.session.MediaSession$Token r2;
        android.media.session.MediaController$CallbackStub $r3;
        java.util.ArrayList $r4;
        java.lang.Object $r5;
        java.lang.IllegalArgumentException $r6, $r7, $r9;
        android.media.session.ISessionController $r8, $r10;
        android.media.session.MediaController$TransportControls $r11;

        r0 := @this: android.media.session.MediaController;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.media.session.MediaSession$Token;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new android.media.session.MediaController$CallbackStub;

        specialinvoke $r3.<android.media.session.MediaController$CallbackStub: void <init>(android.media.session.MediaController)>(r0);

        r0.<android.media.session.MediaController: android.media.session.MediaController$CallbackStub mCbStub> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<android.media.session.MediaController: java.util.ArrayList mCallbacks> = $r4;

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<android.media.session.MediaController: java.lang.Object mLock> = $r5;

        r0.<android.media.session.MediaController: boolean mCbRegistered> = 0;

        if r1 == null goto label3;

        if r2 == null goto label2;

        $r8 = virtualinvoke r2.<android.media.session.MediaSession$Token: android.media.session.ISessionController getBinder()>();

        if $r8 == null goto label1;

        $r10 = virtualinvoke r2.<android.media.session.MediaSession$Token: android.media.session.ISessionController getBinder()>();

        r0.<android.media.session.MediaController: android.media.session.ISessionController mSessionBinder> = $r10;

        $r11 = new android.media.session.MediaController$TransportControls;

        specialinvoke $r11.<android.media.session.MediaController$TransportControls: void <init>(android.media.session.MediaController,android.media.session.MediaController$1)>(r0, null);

        r0.<android.media.session.MediaController: android.media.session.MediaController$TransportControls mTransportControls> = $r11;

        r0.<android.media.session.MediaController: android.media.session.MediaSession$Token mToken> = r2;

        r0.<android.media.session.MediaController: android.content.Context mContext> = r1;

        return;

     label1:
        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("token.getBinder() shouldn\'t be null");

        throw $r9;

     label2:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("token shouldn\'t be null");

        throw $r7;

     label3:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("context shouldn\'t be null");

        throw $r6;
    }

    static android.content.Context access$300(android.media.session.MediaController)
    {
        android.media.session.MediaController r0;
        android.content.Context $r1;

        r0 := @parameter0: android.media.session.MediaController;

        $r1 = r0.<android.media.session.MediaController: android.content.Context mContext>;

        return $r1;
    }

    static android.media.session.ISessionController access$400(android.media.session.MediaController)
    {
        android.media.session.MediaController r0;
        android.media.session.ISessionController $r1;

        r0 := @parameter0: android.media.session.MediaController;

        $r1 = r0.<android.media.session.MediaController: android.media.session.ISessionController mSessionBinder>;

        return $r1;
    }

    static void access$500(android.media.session.MediaController, int, java.lang.Object, android.os.Bundle)
    {
        android.media.session.MediaController r0;
        int i0;
        java.lang.Object r1;
        android.os.Bundle r2;

        r0 := @parameter0: android.media.session.MediaController;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.Object;

        r2 := @parameter3: android.os.Bundle;

        specialinvoke r0.<android.media.session.MediaController: void postMessage(int,java.lang.Object,android.os.Bundle)>(i0, r1, r2);

        return;
    }

    private void addCallbackLocked(android.media.session.MediaController$Callback, android.os.Handler)
    {
        android.media.session.MediaController r0;
        android.os.Handler r1;
        android.media.session.MediaController$MessageHandler $r2, $r3;
        android.os.Looper $r4;
        java.util.ArrayList $r5;
        boolean $z2;
        android.content.Context $r6;
        android.media.session.ISessionController $r7;
        java.lang.String $r8;
        android.media.session.MediaController$CallbackStub $r9;
        android.os.RemoteException $r10;
        android.media.session.MediaController$Callback r11;

        r0 := @this: android.media.session.MediaController;

        r11 := @parameter0: android.media.session.MediaController$Callback;

        r1 := @parameter1: android.os.Handler;

        $r2 = specialinvoke r0.<android.media.session.MediaController: android.media.session.MediaController$MessageHandler getHandlerForCallbackLocked(android.media.session.MediaController$Callback)>(r11);

        if $r2 == null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MediaController", "Callback is already added, ignoring");

        return;

     label1:
        $r3 = new android.media.session.MediaController$MessageHandler;

        $r4 = virtualinvoke r1.<android.os.Handler: android.os.Looper getLooper()>();

        specialinvoke $r3.<android.media.session.MediaController$MessageHandler: void <init>(android.os.Looper,android.media.session.MediaController$Callback)>($r4, r11);

        $r5 = r0.<android.media.session.MediaController: java.util.ArrayList mCallbacks>;

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        staticinvoke <android.media.session.MediaController$MessageHandler: boolean access$102(android.media.session.MediaController$MessageHandler,boolean)>($r3, 1);

        $z2 = r0.<android.media.session.MediaController: boolean mCbRegistered>;

        if $z2 != 0 goto label5;

     label2:
        $r7 = r0.<android.media.session.MediaController: android.media.session.ISessionController mSessionBinder>;

        $r6 = r0.<android.media.session.MediaController: android.content.Context mContext>;

        $r8 = virtualinvoke $r6.<android.content.Context: java.lang.String getPackageName()>();

        $r9 = r0.<android.media.session.MediaController: android.media.session.MediaController$CallbackStub mCbStub>;

        interfaceinvoke $r7.<android.media.session.ISessionController: void registerCallback(java.lang.String,android.media.session.ISessionControllerCallback)>($r8, $r9);

        r0.<android.media.session.MediaController: boolean mCbRegistered> = 1;

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaController", "Dead object in registerCallback", $r10);

     label5:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    private android.media.session.MediaController$MessageHandler getHandlerForCallbackLocked(android.media.session.MediaController$Callback)
    {
        android.media.session.MediaController r0;
        android.media.session.MediaController$Callback r1, $r7;
        android.media.session.MediaController$MessageHandler r2;
        java.lang.IllegalArgumentException $r3;
        java.util.ArrayList $r4, $r5;
        int $i0, i1;
        java.lang.Object $r6;

        r0 := @this: android.media.session.MediaController;

        r1 := @parameter0: android.media.session.MediaController$Callback;

        if r1 == null goto label4;

        $r4 = r0.<android.media.session.MediaController: java.util.ArrayList mCallbacks>;

        $i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label3;

        $r5 = r0.<android.media.session.MediaController: java.util.ArrayList mCallbacks>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r2 = (android.media.session.MediaController$MessageHandler) $r6;

        $r7 = staticinvoke <android.media.session.MediaController$MessageHandler: android.media.session.MediaController$Callback access$200(android.media.session.MediaController$MessageHandler)>(r2);

        if r1 != $r7 goto label2;

        return r2;

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        return null;

     label4:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Callback cannot be null");

        throw $r3;
    }

    private void postMessage(int, java.lang.Object, android.os.Bundle)
    {
        android.media.session.MediaController r0;
        int i0, $i1, i2;
        android.os.Bundle r1;
        java.lang.Object r2, $r5, r8;
        java.util.ArrayList $r3, $r4;
        android.media.session.MediaController$MessageHandler $r6;
        java.lang.Throwable $r7;

        r0 := @this: android.media.session.MediaController;

        i0 := @parameter0: int;

        r8 := @parameter1: java.lang.Object;

        r1 := @parameter2: android.os.Bundle;

        r2 = r0.<android.media.session.MediaController: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        $r3 = r0.<android.media.session.MediaController: java.util.ArrayList mCallbacks>;

        $i1 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        i2 = $i1 - 1;

     label2:
        if i2 < 0 goto label5;

     label3:
        $r4 = r0.<android.media.session.MediaController: java.util.ArrayList mCallbacks>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r6 = (android.media.session.MediaController$MessageHandler) $r5;

        virtualinvoke $r6.<android.media.session.MediaController$MessageHandler: void post(int,java.lang.Object,android.os.Bundle)>(i0, r8, r1);

     label4:
        i2 = i2 + -1;

        goto label2;

     label5:
        exitmonitor r2;

     label6:
        return;

     label7:
        $r7 := @caughtexception;

     label8:
        exitmonitor r2;

     label9:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private boolean removeCallbackLocked(android.media.session.MediaController$Callback)
    {
        android.media.session.MediaController r0;
        android.media.session.MediaController$MessageHandler r1;
        java.util.ArrayList $r2, $r3, $r6, $r9;
        int $i0, $i1, i3;
        boolean $z0, z2;
        android.media.session.MediaController$CallbackStub $r4;
        android.media.session.ISessionController $r5;
        java.lang.Object $r7;
        android.media.session.MediaController$Callback $r8, r12;
        android.os.RemoteException $r11;

        r0 := @this: android.media.session.MediaController;

        r12 := @parameter0: android.media.session.MediaController$Callback;

        z2 = 0;

        $r2 = r0.<android.media.session.MediaController: java.util.ArrayList mCallbacks>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        i3 = $i0 - 1;

     label1:
        if i3 < 0 goto label3;

        $r6 = r0.<android.media.session.MediaController: java.util.ArrayList mCallbacks>;

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r1 = (android.media.session.MediaController$MessageHandler) $r7;

        $r8 = staticinvoke <android.media.session.MediaController$MessageHandler: android.media.session.MediaController$Callback access$200(android.media.session.MediaController$MessageHandler)>(r1);

        if r12 != $r8 goto label2;

        $r9 = r0.<android.media.session.MediaController: java.util.ArrayList mCallbacks>;

        virtualinvoke $r9.<java.util.ArrayList: java.lang.Object remove(int)>(i3);

        z2 = 1;

        staticinvoke <android.media.session.MediaController$MessageHandler: boolean access$102(android.media.session.MediaController$MessageHandler,boolean)>(r1, 0);

     label2:
        i3 = i3 + -1;

        goto label1;

     label3:
        $z0 = r0.<android.media.session.MediaController: boolean mCbRegistered>;

        if $z0 == 0 goto label8;

        $r3 = r0.<android.media.session.MediaController: java.util.ArrayList mCallbacks>;

        $i1 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        if $i1 != 0 goto label8;

     label4:
        $r5 = r0.<android.media.session.MediaController: android.media.session.ISessionController mSessionBinder>;

        $r4 = r0.<android.media.session.MediaController: android.media.session.MediaController$CallbackStub mCbStub>;

        interfaceinvoke $r5.<android.media.session.ISessionController: void unregisterCallback(android.media.session.ISessionControllerCallback)>($r4);

     label5:
        goto label7;

     label6:
        $r11 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MediaController", "Dead object in removeCallbackLocked");

     label7:
        r0.<android.media.session.MediaController: boolean mCbRegistered> = 0;

     label8:
        return z2;

        catch android.os.RemoteException from label4 to label5 with label6;
    }

    public void adjustVolume(int, int)
    {
        android.media.session.MediaController r0;
        int i0, i1;
        android.content.Context $r2, $r5;
        android.media.session.ISessionController $r3;
        java.lang.String $r4, $r6;
        android.os.RemoteException $r7;

        r0 := @this: android.media.session.MediaController;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        $r3 = r0.<android.media.session.MediaController: android.media.session.ISessionController mSessionBinder>;

        $r2 = r0.<android.media.session.MediaController: android.content.Context mContext>;

        $r4 = virtualinvoke $r2.<android.content.Context: java.lang.String getPackageName()>();

        $r5 = r0.<android.media.session.MediaController: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke $r3.<android.media.session.ISessionController: void adjustVolume(java.lang.String,java.lang.String,int,int)>($r4, $r6, i0, i1);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaController", "Error calling adjustVolumeBy.", $r7);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean controlsSameSession(android.media.session.MediaController)
    {
        android.media.session.MediaController r0, r1;
        android.media.session.ISessionController $r2, $r4;
        android.os.IBinder $r3, $r5;
        boolean z0;

        r0 := @this: android.media.session.MediaController;

        r1 := @parameter0: android.media.session.MediaController;

        z0 = 0;

        if r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<android.media.session.MediaController: android.media.session.ISessionController mSessionBinder>;

        $r3 = interfaceinvoke $r2.<android.media.session.ISessionController: android.os.IBinder asBinder()>();

        $r4 = virtualinvoke r1.<android.media.session.MediaController: android.media.session.ISessionController getSessionBinder()>();

        $r5 = interfaceinvoke $r4.<android.media.session.ISessionController: android.os.IBinder asBinder()>();

        if $r3 != $r5 goto label2;

        z0 = 1;

     label2:
        return z0;
    }

    public boolean dispatchMediaButtonEvent(android.view.KeyEvent)
    {
        android.media.session.MediaController r0;
        boolean z0, $z1;
        java.lang.IllegalArgumentException $r1;
        int $i0;
        android.content.Context $r2;
        android.media.session.ISessionController $r3;
        java.lang.String $r4;
        android.os.RemoteException $r5;
        android.view.KeyEvent r6;

        r0 := @this: android.media.session.MediaController;

        r6 := @parameter0: android.view.KeyEvent;

        if r6 == null goto label4;

        $i0 = virtualinvoke r6.<android.view.KeyEvent: int getKeyCode()>();

        $z1 = staticinvoke <android.view.KeyEvent: boolean isMediaSessionKey(int)>($i0);

        if $z1 != 0 goto label1;

        return 0;

     label1:
        $r3 = r0.<android.media.session.MediaController: android.media.session.ISessionController mSessionBinder>;

        $r2 = r0.<android.media.session.MediaController: android.content.Context mContext>;

        $r4 = virtualinvoke $r2.<android.content.Context: java.lang.String getPackageName()>();

        z0 = interfaceinvoke $r3.<android.media.session.ISessionController: boolean sendMediaButton(java.lang.String,android.view.KeyEvent)>($r4, r6);

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

        return 0;

     label4:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("KeyEvent may not be null");

        throw $r1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.os.Bundle getExtras()
    {
        android.media.session.MediaController r0;
        android.media.session.ISessionController $r1;
        android.os.RemoteException $r2;
        android.os.Bundle r3;

        r0 := @this: android.media.session.MediaController;

     label1:
        $r1 = r0.<android.media.session.MediaController: android.media.session.ISessionController mSessionBinder>;

        r3 = interfaceinvoke $r1.<android.media.session.ISessionController: android.os.Bundle getExtras()>();

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaController", "Error calling getExtras", $r2);

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public long getFlags()
    {
        android.media.session.MediaController r0;
        long l0;
        android.media.session.ISessionController $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.media.session.MediaController;

     label1:
        $r2 = r0.<android.media.session.MediaController: android.media.session.ISessionController mSessionBinder>;

        l0 = interfaceinvoke $r2.<android.media.session.ISessionController: long getFlags()>();

     label2:
        return l0;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaController", "Error calling getFlags.", $r3);

        return 0L;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.media.MediaMetadata getMetadata()
    {
        android.media.session.MediaController r0;
        android.media.session.ISessionController $r1;
        android.os.RemoteException $r2;
        android.media.MediaMetadata r3;

        r0 := @this: android.media.session.MediaController;

     label1:
        $r1 = r0.<android.media.session.MediaController: android.media.session.ISessionController mSessionBinder>;

        r3 = interfaceinvoke $r1.<android.media.session.ISessionController: android.media.MediaMetadata getMetadata()>();

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaController", "Error calling getMetadata.", $r2);

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getPackageName()
    {
        android.media.session.MediaController r0;
        java.lang.String $r2, $r4, $r6;
        android.media.session.ISessionController $r3;
        android.os.RemoteException $r5;

        r0 := @this: android.media.session.MediaController;

        $r2 = r0.<android.media.session.MediaController: java.lang.String mPackageName>;

        if $r2 != null goto label4;

     label1:
        $r3 = r0.<android.media.session.MediaController: android.media.session.ISessionController mSessionBinder>;

        $r4 = interfaceinvoke $r3.<android.media.session.ISessionController: java.lang.String getPackageName()>();

        r0.<android.media.session.MediaController: java.lang.String mPackageName> = $r4;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaController", "Dead object in getPackageName.", $r5);

     label4:
        $r6 = r0.<android.media.session.MediaController: java.lang.String mPackageName>;

        return $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.media.session.MediaController$PlaybackInfo getPlaybackInfo()
    {
        android.media.session.MediaController r0;
        android.media.session.ISessionController $r1;
        android.os.RemoteException $r2;
        android.media.session.MediaController$PlaybackInfo r3;

        r0 := @this: android.media.session.MediaController;

     label1:
        $r1 = r0.<android.media.session.MediaController: android.media.session.ISessionController mSessionBinder>;

        r3 = interfaceinvoke $r1.<android.media.session.ISessionController: android.media.session.MediaController$PlaybackInfo getVolumeAttributes()>();

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaController", "Error calling getAudioInfo.", $r2);

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.media.session.PlaybackState getPlaybackState()
    {
        android.media.session.MediaController r0;
        android.media.session.ISessionController $r1;
        android.os.RemoteException $r2;
        android.media.session.PlaybackState r3;

        r0 := @this: android.media.session.MediaController;

     label1:
        $r1 = r0.<android.media.session.MediaController: android.media.session.ISessionController mSessionBinder>;

        r3 = interfaceinvoke $r1.<android.media.session.ISessionController: android.media.session.PlaybackState getPlaybackState()>();

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaController", "Error calling getPlaybackState.", $r2);

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getQueue()
    {
        android.media.session.MediaController r0;
        android.content.pm.ParceledListSlice r1;
        android.media.session.ISessionController $r2;
        android.os.RemoteException $r3;
        java.util.List r4;

        r0 := @this: android.media.session.MediaController;

        r4 = null;

     label1:
        $r2 = r0.<android.media.session.MediaController: android.media.session.ISessionController mSessionBinder>;

        r1 = interfaceinvoke $r2.<android.media.session.ISessionController: android.content.pm.ParceledListSlice getQueue()>();

     label2:
        if r1 != null goto label3;

        goto label4;

     label3:
        r4 = virtualinvoke r1.<android.content.pm.ParceledListSlice: java.util.List getList()>();

     label4:
        return r4;

     label5:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaController", "Error calling getQueue.", $r3);

        return null;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public java.lang.CharSequence getQueueTitle()
    {
        android.media.session.MediaController r0;
        android.media.session.ISessionController $r1;
        android.os.RemoteException $r2;
        java.lang.CharSequence r3;

        r0 := @this: android.media.session.MediaController;

     label1:
        $r1 = r0.<android.media.session.MediaController: android.media.session.ISessionController mSessionBinder>;

        r3 = interfaceinvoke $r1.<android.media.session.ISessionController: java.lang.CharSequence getQueueTitle()>();

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaController", "Error calling getQueueTitle", $r2);

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getRatingType()
    {
        android.media.session.MediaController r0;
        int i0;
        android.media.session.ISessionController $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.media.session.MediaController;

     label1:
        $r2 = r0.<android.media.session.MediaController: android.media.session.ISessionController mSessionBinder>;

        i0 = interfaceinvoke $r2.<android.media.session.ISessionController: int getRatingType()>();

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaController", "Error calling getRatingType.", $r3);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.app.PendingIntent getSessionActivity()
    {
        android.media.session.MediaController r0;
        android.media.session.ISessionController $r1;
        android.os.RemoteException $r2;
        android.app.PendingIntent r3;

        r0 := @this: android.media.session.MediaController;

     label1:
        $r1 = r0.<android.media.session.MediaController: android.media.session.ISessionController mSessionBinder>;

        r3 = interfaceinvoke $r1.<android.media.session.ISessionController: android.app.PendingIntent getLaunchPendingIntent()>();

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaController", "Error calling getPendingIntent.", $r2);

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    android.media.session.ISessionController getSessionBinder()
    {
        android.media.session.MediaController r0;
        android.media.session.ISessionController $r1;

        r0 := @this: android.media.session.MediaController;

        $r1 = r0.<android.media.session.MediaController: android.media.session.ISessionController mSessionBinder>;

        return $r1;
    }

    public android.os.Bundle getSessionInfo()
    {
        android.media.session.MediaController r0;
        android.os.Bundle $r1, $r3, $r4, $r5, $r6, $r7, r10, $r11, $r12;
        android.media.session.ISessionController $r2;
        boolean $z0;
        android.os.RemoteException $r8;

        r0 := @this: android.media.session.MediaController;

        $r1 = r0.<android.media.session.MediaController: android.os.Bundle mSessionInfo>;

        if $r1 == null goto label1;

        $r6 = new android.os.Bundle;

        $r7 = r0.<android.media.session.MediaController: android.os.Bundle mSessionInfo>;

        specialinvoke $r6.<android.os.Bundle: void <init>(android.os.Bundle)>($r7);

        return $r6;

     label1:
        $r2 = r0.<android.media.session.MediaController: android.media.session.ISessionController mSessionBinder>;

        $r3 = interfaceinvoke $r2.<android.media.session.ISessionController: android.os.Bundle getSessionInfo()>();

        r0.<android.media.session.MediaController: android.os.Bundle mSessionInfo> = $r3;

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaController", "Dead object in getSessionInfo.", $r8);

     label4:
        r10 = r0.<android.media.session.MediaController: android.os.Bundle mSessionInfo>;

        if r10 != null goto label5;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MediaController", "sessionInfo shouldn\'t be null.");

        $r5 = <android.os.Bundle: android.os.Bundle EMPTY>;

        r0.<android.media.session.MediaController: android.os.Bundle mSessionInfo> = $r5;

        goto label6;

     label5:
        $z0 = staticinvoke <android.media.session.MediaSession: boolean hasCustomParcelable(android.os.Bundle)>(r10);

        if $z0 == 0 goto label6;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MediaController", "sessionInfo contains custom parcelable. Ignoring.");

        $r4 = <android.os.Bundle: android.os.Bundle EMPTY>;

        r0.<android.media.session.MediaController: android.os.Bundle mSessionInfo> = $r4;

     label6:
        $r11 = new android.os.Bundle;

        $r12 = r0.<android.media.session.MediaController: android.os.Bundle mSessionInfo>;

        specialinvoke $r11.<android.os.Bundle: void <init>(android.os.Bundle)>($r12);

        return $r11;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.media.session.MediaSession$Token getSessionToken()
    {
        android.media.session.MediaController r0;
        android.media.session.MediaSession$Token $r1;

        r0 := @this: android.media.session.MediaController;

        $r1 = r0.<android.media.session.MediaController: android.media.session.MediaSession$Token mToken>;

        return $r1;
    }

    public java.lang.String getTag()
    {
        android.media.session.MediaController r0;
        java.lang.String $r2, $r4, $r6;
        android.media.session.ISessionController $r3;
        android.os.RemoteException $r5;

        r0 := @this: android.media.session.MediaController;

        $r2 = r0.<android.media.session.MediaController: java.lang.String mTag>;

        if $r2 != null goto label4;

     label1:
        $r3 = r0.<android.media.session.MediaController: android.media.session.ISessionController mSessionBinder>;

        $r4 = interfaceinvoke $r3.<android.media.session.ISessionController: java.lang.String getTag()>();

        r0.<android.media.session.MediaController: java.lang.String mTag> = $r4;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaController", "Dead object in getTag.", $r5);

     label4:
        $r6 = r0.<android.media.session.MediaController: java.lang.String mTag>;

        return $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.media.session.MediaController$TransportControls getTransportControls()
    {
        android.media.session.MediaController r0;
        android.media.session.MediaController$TransportControls $r1;

        r0 := @this: android.media.session.MediaController;

        $r1 = r0.<android.media.session.MediaController: android.media.session.MediaController$TransportControls mTransportControls>;

        return $r1;
    }

    public void registerCallback(android.media.session.MediaController$Callback)
    {
        android.media.session.MediaController r0;
        android.media.session.MediaController$Callback r1;

        r0 := @this: android.media.session.MediaController;

        r1 := @parameter0: android.media.session.MediaController$Callback;

        virtualinvoke r0.<android.media.session.MediaController: void registerCallback(android.media.session.MediaController$Callback,android.os.Handler)>(r1, null);

        return;
    }

    public void registerCallback(android.media.session.MediaController$Callback, android.os.Handler)
    {
        android.media.session.MediaController r0;
        java.lang.Object r1;
        java.lang.IllegalArgumentException $r2;
        android.os.Handler $r3, r6;
        java.lang.Throwable $r4;
        android.media.session.MediaController$Callback r5;

        r0 := @this: android.media.session.MediaController;

        r5 := @parameter0: android.media.session.MediaController$Callback;

        r6 := @parameter1: android.os.Handler;

        if r5 == null goto label7;

        if r6 != null goto label1;

        $r3 = new android.os.Handler;

        specialinvoke $r3.<android.os.Handler: void <init>()>();

        r6 = $r3;

        goto label1;

     label1:
        r1 = r0.<android.media.session.MediaController: java.lang.Object mLock>;

        entermonitor r1;

     label2:
        specialinvoke r0.<android.media.session.MediaController: void addCallbackLocked(android.media.session.MediaController$Callback,android.os.Handler)>(r5, r6);

        exitmonitor r1;

     label3:
        return;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

     label7:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("callback must not be null");

        throw $r2;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void sendCommand(java.lang.String, android.os.Bundle, android.os.ResultReceiver)
    {
        android.media.session.MediaController r0;
        android.os.Bundle r1;
        android.os.ResultReceiver r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        android.content.Context $r4;
        android.media.session.ISessionController $r5;
        java.lang.String $r6, r8;
        android.os.RemoteException $r7;

        r0 := @this: android.media.session.MediaController;

        r8 := @parameter0: java.lang.String;

        r1 := @parameter1: android.os.Bundle;

        r2 := @parameter2: android.os.ResultReceiver;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r8);

        if $z0 != 0 goto label5;

     label1:
        $r5 = r0.<android.media.session.MediaController: android.media.session.ISessionController mSessionBinder>;

        $r4 = r0.<android.media.session.MediaController: android.content.Context mContext>;

        $r6 = virtualinvoke $r4.<android.content.Context: java.lang.String getPackageName()>();

        interfaceinvoke $r5.<android.media.session.ISessionController: void sendCommand(java.lang.String,java.lang.String,android.os.Bundle,android.os.ResultReceiver)>($r6, r8, r1, r2);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaController", "Dead object in sendCommand.", $r7);

     label4:
        return;

     label5:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("command cannot be null or empty");

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setVolumeTo(int, int)
    {
        android.media.session.MediaController r0;
        int i0, i1;
        android.content.Context $r2, $r5;
        android.media.session.ISessionController $r3;
        java.lang.String $r4, $r6;
        android.os.RemoteException $r7;

        r0 := @this: android.media.session.MediaController;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        $r3 = r0.<android.media.session.MediaController: android.media.session.ISessionController mSessionBinder>;

        $r2 = r0.<android.media.session.MediaController: android.content.Context mContext>;

        $r4 = virtualinvoke $r2.<android.content.Context: java.lang.String getPackageName()>();

        $r5 = r0.<android.media.session.MediaController: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke $r3.<android.media.session.ISessionController: void setVolumeTo(java.lang.String,java.lang.String,int,int)>($r4, $r6, i0, i1);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaController", "Error calling setVolumeTo.", $r7);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void unregisterCallback(android.media.session.MediaController$Callback)
    {
        android.media.session.MediaController r0;
        java.lang.Object r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.Throwable $r3;
        android.media.session.MediaController$Callback r4;

        r0 := @this: android.media.session.MediaController;

        r4 := @parameter0: android.media.session.MediaController$Callback;

        if r4 == null goto label6;

        r1 = r0.<android.media.session.MediaController: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.media.session.MediaController: boolean removeCallbackLocked(android.media.session.MediaController$Callback)>(r4);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

     label6:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("callback must not be null");

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static void <clinit>()
    {
        <android.media.session.MediaController: java.lang.String TAG> = "MediaController";

        <android.media.session.MediaController: int MSG_UPDATE_VOLUME> = 4;

        <android.media.session.MediaController: int MSG_UPDATE_QUEUE_TITLE> = 6;

        <android.media.session.MediaController: int MSG_UPDATE_QUEUE> = 5;

        <android.media.session.MediaController: int MSG_UPDATE_PLAYBACK_STATE> = 2;

        <android.media.session.MediaController: int MSG_UPDATE_METADATA> = 3;

        <android.media.session.MediaController: int MSG_UPDATE_EXTRAS> = 7;

        <android.media.session.MediaController: int MSG_EVENT> = 1;

        <android.media.session.MediaController: int MSG_DESTROYED> = 8;

        return;
    }
}
