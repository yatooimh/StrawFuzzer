public final class android.media.session.MediaSession extends java.lang.Object
{
    public static final int FLAG_EXCLUSIVE_GLOBAL_PRIORITY;
    public static final int FLAG_HANDLES_MEDIA_BUTTONS;
    public static final int FLAG_HANDLES_TRANSPORT_CONTROLS;
    public static final int INVALID_PID;
    public static final int INVALID_UID;
    static final java.lang.String TAG;
    private boolean mActive;
    private final android.media.session.ISession mBinder;
    private android.media.session.MediaSession$CallbackMessageHandler mCallback;
    private final android.media.session.MediaSession$CallbackStub mCbStub;
    private final android.media.session.MediaController mController;
    private final java.lang.Object mLock;
    private final int mMaxBitmapSize;
    private android.media.session.PlaybackState mPlaybackState;
    private final android.media.session.MediaSession$Token mSessionToken;
    private android.media.VolumeProvider mVolumeProvider;

    public void <init>(android.content.Context, java.lang.String)
    {
        android.media.session.MediaSession r0;
        android.content.Context r1;
        java.lang.String r2;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<android.media.session.MediaSession: void <init>(android.content.Context,java.lang.String,android.os.Bundle)>(r1, r2, null);

        return;
    }

    public void <init>(android.content.Context, java.lang.String, android.os.Bundle)
    {
        android.media.session.MediaSession r0;
        android.media.session.MediaSessionManager r1;
        java.lang.Object $r2, $r8;
        java.lang.IllegalArgumentException $r3, $r4, $r5;
        boolean $z0, $z1;
        android.content.res.Resources $r6;
        int $i0, $i1;
        android.media.session.MediaSession$CallbackStub $r7, $r9;
        android.media.session.ISession $r10, $r11;
        android.media.session.ISessionController $r12;
        android.os.RemoteException $r13;
        java.lang.RuntimeException $r14;
        android.content.Context r15;
        java.lang.String r16;
        android.os.Bundle r17;
        android.media.session.MediaSession$Token r18;
        android.media.session.MediaController r19;

        r0 := @this: android.media.session.MediaSession;

        r15 := @parameter0: android.content.Context;

        r16 := @parameter1: java.lang.String;

        r17 := @parameter2: android.os.Bundle;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<android.media.session.MediaSession: java.lang.Object mLock> = $r2;

        r0.<android.media.session.MediaSession: boolean mActive> = 0;

        if r15 == null goto label6;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r16);

        if $z0 != 0 goto label5;

        $z1 = staticinvoke <android.media.session.MediaSession: boolean hasCustomParcelable(android.os.Bundle)>(r17);

        if $z1 != 0 goto label4;

        $r6 = virtualinvoke r15.<android.content.Context: android.content.res.Resources getResources()>();

        $i0 = virtualinvoke $r6.<android.content.res.Resources: int getDimensionPixelSize(int)>(17105064);

        r0.<android.media.session.MediaSession: int mMaxBitmapSize> = $i0;

        $r7 = new android.media.session.MediaSession$CallbackStub;

        specialinvoke $r7.<android.media.session.MediaSession$CallbackStub: void <init>(android.media.session.MediaSession)>(r0);

        r0.<android.media.session.MediaSession: android.media.session.MediaSession$CallbackStub mCbStub> = $r7;

        $r8 = virtualinvoke r15.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("media_session");

        r1 = (android.media.session.MediaSessionManager) $r8;

     label1:
        $r9 = r0.<android.media.session.MediaSession: android.media.session.MediaSession$CallbackStub mCbStub>;

        $r10 = virtualinvoke r1.<android.media.session.MediaSessionManager: android.media.session.ISession createSession(android.media.session.MediaSession$CallbackStub,java.lang.String,android.os.Bundle)>($r9, r16, r17);

        r0.<android.media.session.MediaSession: android.media.session.ISession mBinder> = $r10;

        r18 = new android.media.session.MediaSession$Token;

        $i1 = staticinvoke <android.os.Process: int myUid()>();

        $r11 = r0.<android.media.session.MediaSession: android.media.session.ISession mBinder>;

        $r12 = interfaceinvoke $r11.<android.media.session.ISession: android.media.session.ISessionController getController()>();

        specialinvoke r18.<android.media.session.MediaSession$Token: void <init>(int,android.media.session.ISessionController)>($i1, $r12);

        r0.<android.media.session.MediaSession: android.media.session.MediaSession$Token mSessionToken> = r18;

        r19 = new android.media.session.MediaController;

        specialinvoke r19.<android.media.session.MediaController: void <init>(android.content.Context,android.media.session.MediaSession$Token)>(r15, r18);

        r0.<android.media.session.MediaSession: android.media.session.MediaController mController> = r19;

     label2:
        return;

     label3:
        $r13 := @caughtexception;

        $r14 = new java.lang.RuntimeException;

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Remote error creating session.", $r13);

        throw $r14;

     label4:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sessionInfo shouldn\'t contain any custom parcelables");

        throw $r5;

     label5:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("tag cannot be null or empty");

        throw $r4;

     label6:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("context cannot be null.");

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    static android.media.session.PlaybackState access$300(android.media.session.MediaSession)
    {
        android.media.session.MediaSession r0;
        android.media.session.PlaybackState $r1;

        r0 := @parameter0: android.media.session.MediaSession;

        $r1 = r0.<android.media.session.MediaSession: android.media.session.PlaybackState mPlaybackState>;

        return $r1;
    }

    static java.lang.Object access$600(android.media.session.MediaSession)
    {
        android.media.session.MediaSession r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.media.session.MediaSession;

        $r1 = r0.<android.media.session.MediaSession: java.lang.Object mLock>;

        return $r1;
    }

    static android.media.VolumeProvider access$700(android.media.session.MediaSession)
    {
        android.media.session.MediaSession r0;
        android.media.VolumeProvider $r1;

        r0 := @parameter0: android.media.session.MediaSession;

        $r1 = r0.<android.media.session.MediaSession: android.media.VolumeProvider mVolumeProvider>;

        return $r1;
    }

    static boolean hasCustomParcelable(android.os.Bundle)
    {
        android.os.Parcel r0, r5, r6;
        android.os.Bundle $r1, r4;
        java.lang.Throwable $r2;
        android.os.BadParcelableException $r3;

        r4 := @parameter0: android.os.Bundle;

        if r4 != null goto label01;

        return 0;

     label01:
        r5 = null;

        r6 = null;

     label02:
        r0 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label03:
        r6 = r0;

        r5 = r0;

     label04:
        virtualinvoke r0.<android.os.Parcel: void writeBundle(android.os.Bundle)>(r4);

     label05:
        r6 = r0;

        r5 = r0;

     label06:
        virtualinvoke r0.<android.os.Parcel: void setDataPosition(int)>(0);

     label07:
        r6 = r0;

        r5 = r0;

     label08:
        $r1 = virtualinvoke r0.<android.os.Parcel: android.os.Bundle readBundle(java.lang.ClassLoader)>(null);

        virtualinvoke $r1.<android.os.Bundle: int size()>();

     label09:
        if r0 == null goto label10;

        virtualinvoke r0.<android.os.Parcel: void recycle()>();

     label10:
        return 0;

     label11:
        $r2 := @caughtexception;

        goto label16;

     label12:
        $r3 := @caughtexception;

        r6 = r5;

     label13:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaSession", "Custom parcelable in bundle.", $r3);

     label14:
        if r5 == null goto label15;

        virtualinvoke r5.<android.os.Parcel: void recycle()>();

     label15:
        return 1;

     label16:
        if r6 == null goto label17;

        virtualinvoke r6.<android.os.Parcel: void recycle()>();

     label17:
        throw $r2;

        catch android.os.BadParcelableException from label02 to label03 with label12;
        catch java.lang.Throwable from label02 to label03 with label11;
        catch android.os.BadParcelableException from label04 to label05 with label12;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch android.os.BadParcelableException from label06 to label07 with label12;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch android.os.BadParcelableException from label08 to label09 with label12;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label13 to label14 with label11;
    }

    public static boolean isActiveState(int)
    {
        int i0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 3: goto label2;
            case 4: goto label2;
            case 5: goto label2;
            case 6: goto label2;
            case 7: goto label1;
            case 8: goto label2;
            case 9: goto label2;
            case 10: goto label2;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        return 1;
    }

    void dispatchAdjustVolume(android.media.session.MediaSessionManager$RemoteUserInfo, int)
    {
        android.media.session.MediaSession r0;
        android.media.session.MediaSessionManager$RemoteUserInfo r1;
        int i0;
        java.lang.Integer $r2;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: android.media.session.MediaSessionManager$RemoteUserInfo;

        i0 := @parameter1: int;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke r0.<android.media.session.MediaSession: void postToCallback(android.media.session.MediaSessionManager$RemoteUserInfo,int,java.lang.Object,android.os.Bundle)>(r1, 22, $r2, null);

        return;
    }

    void dispatchCommand(android.media.session.MediaSessionManager$RemoteUserInfo, java.lang.String, android.os.Bundle, android.os.ResultReceiver)
    {
        android.media.session.MediaSession r0;
        android.media.session.MediaSessionManager$RemoteUserInfo r1;
        java.lang.String r2;
        android.os.Bundle r3;
        android.os.ResultReceiver r4;
        android.media.session.MediaSession$Command $r5;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: android.media.session.MediaSessionManager$RemoteUserInfo;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Bundle;

        r4 := @parameter3: android.os.ResultReceiver;

        $r5 = new android.media.session.MediaSession$Command;

        specialinvoke $r5.<android.media.session.MediaSession$Command: void <init>(java.lang.String,android.os.Bundle,android.os.ResultReceiver)>(r2, r3, r4);

        virtualinvoke r0.<android.media.session.MediaSession: void postToCallback(android.media.session.MediaSessionManager$RemoteUserInfo,int,java.lang.Object,android.os.Bundle)>(r1, 1, $r5, null);

        return;
    }

    void dispatchCustomAction(android.media.session.MediaSessionManager$RemoteUserInfo, java.lang.String, android.os.Bundle)
    {
        android.media.session.MediaSession r0;
        android.media.session.MediaSessionManager$RemoteUserInfo r1;
        java.lang.String r2;
        android.os.Bundle r3;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: android.media.session.MediaSessionManager$RemoteUserInfo;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Bundle;

        virtualinvoke r0.<android.media.session.MediaSession: void postToCallback(android.media.session.MediaSessionManager$RemoteUserInfo,int,java.lang.Object,android.os.Bundle)>(r1, 21, r2, r3);

        return;
    }

    void dispatchFastForward(android.media.session.MediaSessionManager$RemoteUserInfo)
    {
        android.media.session.MediaSession r0;
        android.media.session.MediaSessionManager$RemoteUserInfo r1;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: android.media.session.MediaSessionManager$RemoteUserInfo;

        virtualinvoke r0.<android.media.session.MediaSession: void postToCallback(android.media.session.MediaSessionManager$RemoteUserInfo,int,java.lang.Object,android.os.Bundle)>(r1, 16, null, null);

        return;
    }

    void dispatchMediaButton(android.media.session.MediaSessionManager$RemoteUserInfo, android.content.Intent)
    {
        android.media.session.MediaSession r0;
        android.media.session.MediaSessionManager$RemoteUserInfo r1;
        android.content.Intent r2;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: android.media.session.MediaSessionManager$RemoteUserInfo;

        r2 := @parameter1: android.content.Intent;

        virtualinvoke r0.<android.media.session.MediaSession: void postToCallback(android.media.session.MediaSessionManager$RemoteUserInfo,int,java.lang.Object,android.os.Bundle)>(r1, 2, r2, null);

        return;
    }

    void dispatchMediaButtonDelayed(android.media.session.MediaSessionManager$RemoteUserInfo, android.content.Intent, long)
    {
        android.media.session.MediaSession r0;
        android.media.session.MediaSessionManager$RemoteUserInfo r1;
        android.content.Intent r2;
        long l0;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: android.media.session.MediaSessionManager$RemoteUserInfo;

        r2 := @parameter1: android.content.Intent;

        l0 := @parameter2: long;

        virtualinvoke r0.<android.media.session.MediaSession: void postToCallbackDelayed(android.media.session.MediaSessionManager$RemoteUserInfo,int,java.lang.Object,android.os.Bundle,long)>(r1, 24, r2, null, l0);

        return;
    }

    void dispatchNext(android.media.session.MediaSessionManager$RemoteUserInfo)
    {
        android.media.session.MediaSession r0;
        android.media.session.MediaSessionManager$RemoteUserInfo r1;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: android.media.session.MediaSessionManager$RemoteUserInfo;

        virtualinvoke r0.<android.media.session.MediaSession: void postToCallback(android.media.session.MediaSessionManager$RemoteUserInfo,int,java.lang.Object,android.os.Bundle)>(r1, 14, null, null);

        return;
    }

    void dispatchPause(android.media.session.MediaSessionManager$RemoteUserInfo)
    {
        android.media.session.MediaSession r0;
        android.media.session.MediaSessionManager$RemoteUserInfo r1;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: android.media.session.MediaSessionManager$RemoteUserInfo;

        virtualinvoke r0.<android.media.session.MediaSession: void postToCallback(android.media.session.MediaSessionManager$RemoteUserInfo,int,java.lang.Object,android.os.Bundle)>(r1, 12, null, null);

        return;
    }

    void dispatchPlay(android.media.session.MediaSessionManager$RemoteUserInfo)
    {
        android.media.session.MediaSession r0;
        android.media.session.MediaSessionManager$RemoteUserInfo r1;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: android.media.session.MediaSessionManager$RemoteUserInfo;

        virtualinvoke r0.<android.media.session.MediaSession: void postToCallback(android.media.session.MediaSessionManager$RemoteUserInfo,int,java.lang.Object,android.os.Bundle)>(r1, 7, null, null);

        return;
    }

    void dispatchPlayFromMediaId(android.media.session.MediaSessionManager$RemoteUserInfo, java.lang.String, android.os.Bundle)
    {
        android.media.session.MediaSession r0;
        android.media.session.MediaSessionManager$RemoteUserInfo r1;
        java.lang.String r2;
        android.os.Bundle r3;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: android.media.session.MediaSessionManager$RemoteUserInfo;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Bundle;

        virtualinvoke r0.<android.media.session.MediaSession: void postToCallback(android.media.session.MediaSessionManager$RemoteUserInfo,int,java.lang.Object,android.os.Bundle)>(r1, 8, r2, r3);

        return;
    }

    void dispatchPlayFromSearch(android.media.session.MediaSessionManager$RemoteUserInfo, java.lang.String, android.os.Bundle)
    {
        android.media.session.MediaSession r0;
        android.media.session.MediaSessionManager$RemoteUserInfo r1;
        java.lang.String r2;
        android.os.Bundle r3;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: android.media.session.MediaSessionManager$RemoteUserInfo;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Bundle;

        virtualinvoke r0.<android.media.session.MediaSession: void postToCallback(android.media.session.MediaSessionManager$RemoteUserInfo,int,java.lang.Object,android.os.Bundle)>(r1, 9, r2, r3);

        return;
    }

    void dispatchPlayFromUri(android.media.session.MediaSessionManager$RemoteUserInfo, android.net.Uri, android.os.Bundle)
    {
        android.media.session.MediaSession r0;
        android.media.session.MediaSessionManager$RemoteUserInfo r1;
        android.net.Uri r2;
        android.os.Bundle r3;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: android.media.session.MediaSessionManager$RemoteUserInfo;

        r2 := @parameter1: android.net.Uri;

        r3 := @parameter2: android.os.Bundle;

        virtualinvoke r0.<android.media.session.MediaSession: void postToCallback(android.media.session.MediaSessionManager$RemoteUserInfo,int,java.lang.Object,android.os.Bundle)>(r1, 10, r2, r3);

        return;
    }

    void dispatchPrepare(android.media.session.MediaSessionManager$RemoteUserInfo)
    {
        android.media.session.MediaSession r0;
        android.media.session.MediaSessionManager$RemoteUserInfo r1;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: android.media.session.MediaSessionManager$RemoteUserInfo;

        virtualinvoke r0.<android.media.session.MediaSession: void postToCallback(android.media.session.MediaSessionManager$RemoteUserInfo,int,java.lang.Object,android.os.Bundle)>(r1, 3, null, null);

        return;
    }

    void dispatchPrepareFromMediaId(android.media.session.MediaSessionManager$RemoteUserInfo, java.lang.String, android.os.Bundle)
    {
        android.media.session.MediaSession r0;
        android.media.session.MediaSessionManager$RemoteUserInfo r1;
        java.lang.String r2;
        android.os.Bundle r3;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: android.media.session.MediaSessionManager$RemoteUserInfo;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Bundle;

        virtualinvoke r0.<android.media.session.MediaSession: void postToCallback(android.media.session.MediaSessionManager$RemoteUserInfo,int,java.lang.Object,android.os.Bundle)>(r1, 4, r2, r3);

        return;
    }

    void dispatchPrepareFromSearch(android.media.session.MediaSessionManager$RemoteUserInfo, java.lang.String, android.os.Bundle)
    {
        android.media.session.MediaSession r0;
        android.media.session.MediaSessionManager$RemoteUserInfo r1;
        java.lang.String r2;
        android.os.Bundle r3;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: android.media.session.MediaSessionManager$RemoteUserInfo;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Bundle;

        virtualinvoke r0.<android.media.session.MediaSession: void postToCallback(android.media.session.MediaSessionManager$RemoteUserInfo,int,java.lang.Object,android.os.Bundle)>(r1, 5, r2, r3);

        return;
    }

    void dispatchPrepareFromUri(android.media.session.MediaSessionManager$RemoteUserInfo, android.net.Uri, android.os.Bundle)
    {
        android.media.session.MediaSession r0;
        android.media.session.MediaSessionManager$RemoteUserInfo r1;
        android.net.Uri r2;
        android.os.Bundle r3;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: android.media.session.MediaSessionManager$RemoteUserInfo;

        r2 := @parameter1: android.net.Uri;

        r3 := @parameter2: android.os.Bundle;

        virtualinvoke r0.<android.media.session.MediaSession: void postToCallback(android.media.session.MediaSessionManager$RemoteUserInfo,int,java.lang.Object,android.os.Bundle)>(r1, 6, r2, r3);

        return;
    }

    void dispatchPrevious(android.media.session.MediaSessionManager$RemoteUserInfo)
    {
        android.media.session.MediaSession r0;
        android.media.session.MediaSessionManager$RemoteUserInfo r1;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: android.media.session.MediaSessionManager$RemoteUserInfo;

        virtualinvoke r0.<android.media.session.MediaSession: void postToCallback(android.media.session.MediaSessionManager$RemoteUserInfo,int,java.lang.Object,android.os.Bundle)>(r1, 15, null, null);

        return;
    }

    void dispatchRate(android.media.session.MediaSessionManager$RemoteUserInfo, android.media.Rating)
    {
        android.media.session.MediaSession r0;
        android.media.session.MediaSessionManager$RemoteUserInfo r1;
        android.media.Rating r2;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: android.media.session.MediaSessionManager$RemoteUserInfo;

        r2 := @parameter1: android.media.Rating;

        virtualinvoke r0.<android.media.session.MediaSession: void postToCallback(android.media.session.MediaSessionManager$RemoteUserInfo,int,java.lang.Object,android.os.Bundle)>(r1, 19, r2, null);

        return;
    }

    void dispatchRewind(android.media.session.MediaSessionManager$RemoteUserInfo)
    {
        android.media.session.MediaSession r0;
        android.media.session.MediaSessionManager$RemoteUserInfo r1;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: android.media.session.MediaSessionManager$RemoteUserInfo;

        virtualinvoke r0.<android.media.session.MediaSession: void postToCallback(android.media.session.MediaSessionManager$RemoteUserInfo,int,java.lang.Object,android.os.Bundle)>(r1, 17, null, null);

        return;
    }

    void dispatchSeekTo(android.media.session.MediaSessionManager$RemoteUserInfo, long)
    {
        android.media.session.MediaSession r0;
        android.media.session.MediaSessionManager$RemoteUserInfo r1;
        long l0;
        java.lang.Long $r2;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: android.media.session.MediaSessionManager$RemoteUserInfo;

        l0 := @parameter1: long;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        virtualinvoke r0.<android.media.session.MediaSession: void postToCallback(android.media.session.MediaSessionManager$RemoteUserInfo,int,java.lang.Object,android.os.Bundle)>(r1, 18, $r2, null);

        return;
    }

    void dispatchSetPlaybackSpeed(android.media.session.MediaSessionManager$RemoteUserInfo, float)
    {
        android.media.session.MediaSession r0;
        android.media.session.MediaSessionManager$RemoteUserInfo r1;
        float f0;
        java.lang.Float $r2;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: android.media.session.MediaSessionManager$RemoteUserInfo;

        f0 := @parameter1: float;

        $r2 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        virtualinvoke r0.<android.media.session.MediaSession: void postToCallback(android.media.session.MediaSessionManager$RemoteUserInfo,int,java.lang.Object,android.os.Bundle)>(r1, 20, $r2, null);

        return;
    }

    void dispatchSetVolumeTo(android.media.session.MediaSessionManager$RemoteUserInfo, int)
    {
        android.media.session.MediaSession r0;
        android.media.session.MediaSessionManager$RemoteUserInfo r1;
        int i0;
        java.lang.Integer $r2;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: android.media.session.MediaSessionManager$RemoteUserInfo;

        i0 := @parameter1: int;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke r0.<android.media.session.MediaSession: void postToCallback(android.media.session.MediaSessionManager$RemoteUserInfo,int,java.lang.Object,android.os.Bundle)>(r1, 23, $r2, null);

        return;
    }

    void dispatchSkipToItem(android.media.session.MediaSessionManager$RemoteUserInfo, long)
    {
        android.media.session.MediaSession r0;
        android.media.session.MediaSessionManager$RemoteUserInfo r1;
        long l0;
        java.lang.Long $r2;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: android.media.session.MediaSessionManager$RemoteUserInfo;

        l0 := @parameter1: long;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        virtualinvoke r0.<android.media.session.MediaSession: void postToCallback(android.media.session.MediaSessionManager$RemoteUserInfo,int,java.lang.Object,android.os.Bundle)>(r1, 11, $r2, null);

        return;
    }

    void dispatchStop(android.media.session.MediaSessionManager$RemoteUserInfo)
    {
        android.media.session.MediaSession r0;
        android.media.session.MediaSessionManager$RemoteUserInfo r1;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: android.media.session.MediaSessionManager$RemoteUserInfo;

        virtualinvoke r0.<android.media.session.MediaSession: void postToCallback(android.media.session.MediaSessionManager$RemoteUserInfo,int,java.lang.Object,android.os.Bundle)>(r1, 13, null, null);

        return;
    }

    public java.lang.String getCallingPackage()
    {
        android.media.session.MediaSession r0;
        android.media.session.MediaSession$CallbackMessageHandler r1, $r3;
        android.media.session.MediaSessionManager$RemoteUserInfo $r2, $r4;
        java.lang.String $r5;

        r0 := @this: android.media.session.MediaSession;

        r1 = r0.<android.media.session.MediaSession: android.media.session.MediaSession$CallbackMessageHandler mCallback>;

        if r1 == null goto label1;

        $r2 = staticinvoke <android.media.session.MediaSession$CallbackMessageHandler: android.media.session.MediaSessionManager$RemoteUserInfo access$200(android.media.session.MediaSession$CallbackMessageHandler)>(r1);

        if $r2 == null goto label1;

        $r3 = r0.<android.media.session.MediaSession: android.media.session.MediaSession$CallbackMessageHandler mCallback>;

        $r4 = staticinvoke <android.media.session.MediaSession$CallbackMessageHandler: android.media.session.MediaSessionManager$RemoteUserInfo access$200(android.media.session.MediaSession$CallbackMessageHandler)>($r3);

        $r5 = virtualinvoke $r4.<android.media.session.MediaSessionManager$RemoteUserInfo: java.lang.String getPackageName()>();

        return $r5;

     label1:
        return null;
    }

    public android.media.session.MediaController getController()
    {
        android.media.session.MediaSession r0;
        android.media.session.MediaController $r1;

        r0 := @this: android.media.session.MediaSession;

        $r1 = r0.<android.media.session.MediaSession: android.media.session.MediaController mController>;

        return $r1;
    }

    public final android.media.session.MediaSessionManager$RemoteUserInfo getCurrentControllerInfo()
    {
        android.media.session.MediaSession r0;
        android.media.session.MediaSession$CallbackMessageHandler r1, $r4;
        java.lang.IllegalStateException $r2;
        android.media.session.MediaSessionManager$RemoteUserInfo $r3, $r5;

        r0 := @this: android.media.session.MediaSession;

        r1 = r0.<android.media.session.MediaSession: android.media.session.MediaSession$CallbackMessageHandler mCallback>;

        if r1 == null goto label1;

        $r3 = staticinvoke <android.media.session.MediaSession$CallbackMessageHandler: android.media.session.MediaSessionManager$RemoteUserInfo access$200(android.media.session.MediaSession$CallbackMessageHandler)>(r1);

        if $r3 == null goto label1;

        $r4 = r0.<android.media.session.MediaSession: android.media.session.MediaSession$CallbackMessageHandler mCallback>;

        $r5 = staticinvoke <android.media.session.MediaSession$CallbackMessageHandler: android.media.session.MediaSessionManager$RemoteUserInfo access$200(android.media.session.MediaSession$CallbackMessageHandler)>($r4);

        return $r5;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This should be called inside of MediaSession.Callback methods");

        throw $r2;
    }

    public android.media.session.MediaSession$Token getSessionToken()
    {
        android.media.session.MediaSession r0;
        android.media.session.MediaSession$Token $r1;

        r0 := @this: android.media.session.MediaSession;

        $r1 = r0.<android.media.session.MediaSession: android.media.session.MediaSession$Token mSessionToken>;

        return $r1;
    }

    public boolean isActive()
    {
        android.media.session.MediaSession r0;
        boolean $z0;

        r0 := @this: android.media.session.MediaSession;

        $z0 = r0.<android.media.session.MediaSession: boolean mActive>;

        return $z0;
    }

    public void notifyRemoteVolumeChanged(android.media.VolumeProvider)
    {
        android.media.session.MediaSession r0;
        java.lang.Object r1;
        android.media.VolumeProvider $r2, r6;
        android.media.session.ISession $r3;
        int $i1;
        java.lang.Throwable $r4;
        android.os.RemoteException $r5;

        r0 := @this: android.media.session.MediaSession;

        r6 := @parameter0: android.media.VolumeProvider;

        r1 = r0.<android.media.session.MediaSession: java.lang.Object mLock>;

        entermonitor r1;

        if r6 == null goto label08;

     label01:
        $r2 = r0.<android.media.session.MediaSession: android.media.VolumeProvider mVolumeProvider>;

        if r6 == $r2 goto label03;

     label02:
        goto label08;

     label03:
        exitmonitor r1;

     label04:
        $r3 = r0.<android.media.session.MediaSession: android.media.session.ISession mBinder>;

        $i1 = virtualinvoke r6.<android.media.VolumeProvider: int getCurrentVolume()>();

        interfaceinvoke $r3.<android.media.session.ISession: void setCurrentVolume(int)>($i1);

     label05:
        goto label07;

     label06:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaSession", "Error in notifyVolumeChanged", $r5);

     label07:
        return;

     label08:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("MediaSession", "Received update from stale volume provider");

        exitmonitor r1;

     label09:
        return;

     label10:
        $r4 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch android.os.RemoteException from label04 to label05 with label06;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    void postToCallback(android.media.session.MediaSessionManager$RemoteUserInfo, int, java.lang.Object, android.os.Bundle)
    {
        android.media.session.MediaSession r0;
        android.media.session.MediaSessionManager$RemoteUserInfo r1;
        int i0;
        java.lang.Object r2;
        android.os.Bundle r3;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: android.media.session.MediaSessionManager$RemoteUserInfo;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: android.os.Bundle;

        virtualinvoke r0.<android.media.session.MediaSession: void postToCallbackDelayed(android.media.session.MediaSessionManager$RemoteUserInfo,int,java.lang.Object,android.os.Bundle,long)>(r1, i0, r2, r3, 0L);

        return;
    }

    void postToCallbackDelayed(android.media.session.MediaSessionManager$RemoteUserInfo, int, java.lang.Object, android.os.Bundle, long)
    {
        android.media.session.MediaSession r0;
        int i0;
        java.lang.Object r1, r3;
        android.os.Bundle r2;
        long l1;
        android.media.session.MediaSession$CallbackMessageHandler $r4, $r5;
        java.lang.Throwable $r6;
        android.media.session.MediaSessionManager$RemoteUserInfo r7;

        r0 := @this: android.media.session.MediaSession;

        r7 := @parameter0: android.media.session.MediaSessionManager$RemoteUserInfo;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.Object;

        r2 := @parameter3: android.os.Bundle;

        l1 := @parameter4: long;

        r3 = r0.<android.media.session.MediaSession: java.lang.Object mLock>;

        entermonitor r3;

     label1:
        $r4 = r0.<android.media.session.MediaSession: android.media.session.MediaSession$CallbackMessageHandler mCallback>;

        if $r4 == null goto label2;

        $r5 = r0.<android.media.session.MediaSession: android.media.session.MediaSession$CallbackMessageHandler mCallback>;

        virtualinvoke $r5.<android.media.session.MediaSession$CallbackMessageHandler: void post(android.media.session.MediaSessionManager$RemoteUserInfo,int,java.lang.Object,android.os.Bundle,long)>(r7, i0, r1, r2, l1);

     label2:
        exitmonitor r3;

     label3:
        return;

     label4:
        $r6 := @caughtexception;

     label5:
        exitmonitor r3;

     label6:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void release()
    {
        android.media.session.MediaSession r0;
        android.media.session.ISession $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.media.session.MediaSession;

     label1:
        $r2 = r0.<android.media.session.MediaSession: android.media.session.ISession mBinder>;

        interfaceinvoke $r2.<android.media.session.ISession: void destroySession()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaSession", "Error releasing session: ", $r3);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void sendSessionEvent(java.lang.String, android.os.Bundle)
    {
        android.media.session.MediaSession r0;
        android.os.Bundle r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        android.media.session.ISession $r3;
        android.os.RemoteException $r4;
        java.lang.String r5;

        r0 := @this: android.media.session.MediaSession;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: android.os.Bundle;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r5);

        if $z0 != 0 goto label5;

     label1:
        $r3 = r0.<android.media.session.MediaSession: android.media.session.ISession mBinder>;

        interfaceinvoke $r3.<android.media.session.ISession: void sendEvent(java.lang.String,android.os.Bundle)>(r5, r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaSession", "Error sending event", $r4);

     label4:
        return;

     label5:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("event cannot be null or empty");

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setActive(boolean)
    {
        android.media.session.MediaSession r0;
        boolean z0, $z1;
        android.media.session.ISession $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.media.session.MediaSession;

        z0 := @parameter0: boolean;

        $z1 = r0.<android.media.session.MediaSession: boolean mActive>;

        if $z1 != z0 goto label1;

        return;

     label1:
        $r2 = r0.<android.media.session.MediaSession: android.media.session.ISession mBinder>;

        interfaceinvoke $r2.<android.media.session.ISession: void setActive(boolean)>(z0);

        r0.<android.media.session.MediaSession: boolean mActive> = z0;

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaSession", "Failure in setActive.", $r3);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setCallback(android.media.session.MediaSession$Callback)
    {
        android.media.session.MediaSession r0;
        android.media.session.MediaSession$Callback r1;

        r0 := @this: android.media.session.MediaSession;

        r1 := @parameter0: android.media.session.MediaSession$Callback;

        virtualinvoke r0.<android.media.session.MediaSession: void setCallback(android.media.session.MediaSession$Callback,android.os.Handler)>(r1, null);

        return;
    }

    public void setCallback(android.media.session.MediaSession$Callback, android.os.Handler)
    {
        android.media.session.MediaSession r0;
        java.lang.Object r1;
        android.media.session.MediaSession$CallbackMessageHandler $r2, $r5, $r8, r13;
        android.os.Looper $r4;
        android.media.session.MediaSession$Callback $r6, r10;
        java.lang.Throwable $r9;
        android.os.Handler r11, r12;

        r0 := @this: android.media.session.MediaSession;

        r10 := @parameter0: android.media.session.MediaSession$Callback;

        r11 := @parameter1: android.os.Handler;

        r1 = r0.<android.media.session.MediaSession: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r2 = r0.<android.media.session.MediaSession: android.media.session.MediaSession$CallbackMessageHandler mCallback>;

        if $r2 == null goto label02;

        $r5 = r0.<android.media.session.MediaSession: android.media.session.MediaSession$CallbackMessageHandler mCallback>;

        $r6 = staticinvoke <android.media.session.MediaSession$CallbackMessageHandler: android.media.session.MediaSession$Callback access$000(android.media.session.MediaSession$CallbackMessageHandler)>($r5);

        staticinvoke <android.media.session.MediaSession$Callback: android.media.session.MediaSession access$102(android.media.session.MediaSession$Callback,android.media.session.MediaSession)>($r6, null);

        $r8 = r0.<android.media.session.MediaSession: android.media.session.MediaSession$CallbackMessageHandler mCallback>;

        virtualinvoke $r8.<android.media.session.MediaSession$CallbackMessageHandler: void removeCallbacksAndMessages(java.lang.Object)>(null);

     label02:
        if r10 != null goto label05;

     label03:
        r0.<android.media.session.MediaSession: android.media.session.MediaSession$CallbackMessageHandler mCallback> = null;

        exitmonitor r1;

     label04:
        return;

     label05:
        r12 = r11;

        if r11 != null goto label07;

     label06:
        r12 = new android.os.Handler;

        specialinvoke r12.<android.os.Handler: void <init>()>();

     label07:
        staticinvoke <android.media.session.MediaSession$Callback: android.media.session.MediaSession access$102(android.media.session.MediaSession$Callback,android.media.session.MediaSession)>(r10, r0);

        r13 = new android.media.session.MediaSession$CallbackMessageHandler;

        $r4 = virtualinvoke r12.<android.os.Handler: android.os.Looper getLooper()>();

        specialinvoke r13.<android.media.session.MediaSession$CallbackMessageHandler: void <init>(android.media.session.MediaSession,android.os.Looper,android.media.session.MediaSession$Callback)>(r0, $r4, r10);

        r0.<android.media.session.MediaSession: android.media.session.MediaSession$CallbackMessageHandler mCallback> = r13;

        exitmonitor r1;

     label08:
        return;

     label09:
        $r9 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void setExtras(android.os.Bundle)
    {
        android.media.session.MediaSession r0;
        android.media.session.ISession $r1;
        android.os.RemoteException $r2;
        android.os.Bundle r3;

        r0 := @this: android.media.session.MediaSession;

        r3 := @parameter0: android.os.Bundle;

     label1:
        $r1 = r0.<android.media.session.MediaSession: android.media.session.ISession mBinder>;

        interfaceinvoke $r1.<android.media.session.ISession: void setExtras(android.os.Bundle)>(r3);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.Throwable)>("Dead object in setExtras.", $r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setFlags(int)
    {
        android.media.session.MediaSession r0;
        int i0;
        android.media.session.ISession $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.media.session.MediaSession;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.media.session.MediaSession: android.media.session.ISession mBinder>;

        interfaceinvoke $r2.<android.media.session.ISession: void setFlags(int)>(i0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaSession", "Failure in setFlags.", $r3);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setMediaButtonReceiver(android.app.PendingIntent)
    {
        android.media.session.MediaSession r0;
        android.media.session.ISession $r1;
        android.os.RemoteException $r2;
        android.app.PendingIntent r3;

        r0 := @this: android.media.session.MediaSession;

        r3 := @parameter0: android.app.PendingIntent;

     label1:
        $r1 = r0.<android.media.session.MediaSession: android.media.session.ISession mBinder>;

        interfaceinvoke $r1.<android.media.session.ISession: void setMediaButtonReceiver(android.app.PendingIntent)>(r3);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaSession", "Failure in setMediaButtonReceiver.", $r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setMetadata(android.media.MediaMetadata)
    {
        android.media.session.MediaSession r0;
        android.media.MediaMetadata$Builder $r5;
        int $i0, i3;
        boolean $z0;
        android.os.RemoteException $r6;
        android.media.MediaMetadata r7, r9;
        long l2, l4;
        android.media.MediaDescription r8;
        java.lang.StringBuilder $r10;
        java.lang.String r12;
        android.media.session.ISession $r13;

        r0 := @this: android.media.session.MediaSession;

        r7 := @parameter0: android.media.MediaMetadata;

        l2 = -1L;

        i3 = 0;

        r8 = null;

        l4 = -1L;

        r9 = r7;

        if r7 == null goto label2;

        $r5 = new android.media.MediaMetadata$Builder;

        $i0 = r0.<android.media.session.MediaSession: int mMaxBitmapSize>;

        specialinvoke $r5.<android.media.MediaMetadata$Builder: void <init>(android.media.MediaMetadata,int)>(r7, $i0);

        r9 = virtualinvoke $r5.<android.media.MediaMetadata$Builder: android.media.MediaMetadata build()>();

        $z0 = virtualinvoke r9.<android.media.MediaMetadata: boolean containsKey(java.lang.String)>("android.media.metadata.DURATION");

        if $z0 == 0 goto label1;

        l2 = virtualinvoke r9.<android.media.MediaMetadata: long getLong(java.lang.String)>("android.media.metadata.DURATION");

     label1:
        i3 = virtualinvoke r9.<android.media.MediaMetadata: int size()>();

        r8 = virtualinvoke r9.<android.media.MediaMetadata: android.media.MediaDescription getDescription()>();

        l4 = l2;

     label2:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("size=");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", description=");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);

        r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        $r13 = r0.<android.media.session.MediaSession: android.media.session.ISession mBinder>;

        interfaceinvoke $r13.<android.media.session.ISession: void setMetadata(android.media.MediaMetadata,long,java.lang.String)>(r9, l4, r12);

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaSession", "Dead object in setPlaybackState.", $r6);

     label6:
        return;

        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void setPlaybackState(android.media.session.PlaybackState)
    {
        android.media.session.MediaSession r0;
        android.media.session.ISession $r1;
        android.os.RemoteException $r2;
        android.media.session.PlaybackState r3;

        r0 := @this: android.media.session.MediaSession;

        r3 := @parameter0: android.media.session.PlaybackState;

        r0.<android.media.session.MediaSession: android.media.session.PlaybackState mPlaybackState> = r3;

     label1:
        $r1 = r0.<android.media.session.MediaSession: android.media.session.ISession mBinder>;

        interfaceinvoke $r1.<android.media.session.ISession: void setPlaybackState(android.media.session.PlaybackState)>(r3);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaSession", "Dead object in setPlaybackState.", $r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setPlaybackToLocal(android.media.AudioAttributes)
    {
        android.media.session.MediaSession r0;
        java.lang.IllegalArgumentException $r1;
        android.media.session.ISession $r2;
        android.os.RemoteException $r3;
        android.media.AudioAttributes r4;

        r0 := @this: android.media.session.MediaSession;

        r4 := @parameter0: android.media.AudioAttributes;

        if r4 == null goto label5;

     label1:
        $r2 = r0.<android.media.session.MediaSession: android.media.session.ISession mBinder>;

        interfaceinvoke $r2.<android.media.session.ISession: void setPlaybackToLocal(android.media.AudioAttributes)>(r4);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaSession", "Failure in setPlaybackToLocal.", $r3);

     label4:
        return;

     label5:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Attributes cannot be null for local playback.");

        throw $r1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setPlaybackToRemote(android.media.VolumeProvider)
    {
        android.media.session.MediaSession r0;
        java.lang.Object r1;
        java.lang.IllegalArgumentException $r2;
        android.media.session.MediaSession$1 $r3;
        android.media.session.ISession $r4, $r6;
        int $i0, $i1, $i2;
        java.lang.String $r5;
        android.os.RemoteException $r7;
        java.lang.Throwable $r8;
        android.media.VolumeProvider r9;

        r0 := @this: android.media.session.MediaSession;

        r9 := @parameter0: android.media.VolumeProvider;

        if r9 == null goto label10;

        r1 = r0.<android.media.session.MediaSession: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        r0.<android.media.session.MediaSession: android.media.VolumeProvider mVolumeProvider> = r9;

        exitmonitor r1;

     label02:
        $r3 = new android.media.session.MediaSession$1;

        specialinvoke $r3.<android.media.session.MediaSession$1: void <init>(android.media.session.MediaSession)>(r0);

        virtualinvoke r9.<android.media.VolumeProvider: void setCallback(android.media.VolumeProvider$Callback)>($r3);

     label03:
        $r4 = r0.<android.media.session.MediaSession: android.media.session.ISession mBinder>;

        $i0 = virtualinvoke r9.<android.media.VolumeProvider: int getVolumeControl()>();

        $i1 = virtualinvoke r9.<android.media.VolumeProvider: int getMaxVolume()>();

        $r5 = virtualinvoke r9.<android.media.VolumeProvider: java.lang.String getVolumeControlId()>();

        interfaceinvoke $r4.<android.media.session.ISession: void setPlaybackToRemote(int,int,java.lang.String)>($i0, $i1, $r5);

        $r6 = r0.<android.media.session.MediaSession: android.media.session.ISession mBinder>;

        $i2 = virtualinvoke r9.<android.media.VolumeProvider: int getCurrentVolume()>();

        interfaceinvoke $r6.<android.media.session.ISession: void setCurrentVolume(int)>($i2);

     label04:
        goto label06;

     label05:
        $r7 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaSession", "Failure in setPlaybackToRemote.", $r7);

     label06:
        return;

     label07:
        $r8 := @caughtexception;

     label08:
        exitmonitor r1;

     label09:
        throw $r8;

     label10:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("volumeProvider may not be null!");

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    public void setQueue(java.util.List)
    {
        android.media.session.MediaSession r0;
        android.media.session.ISession r1;
        android.content.pm.ParceledListSlice $r2, r5;
        android.os.RemoteException $r3;
        java.util.List r4;

        r0 := @this: android.media.session.MediaSession;

        r4 := @parameter0: java.util.List;

     label1:
        r1 = r0.<android.media.session.MediaSession: android.media.session.ISession mBinder>;

     label2:
        if r4 != null goto label3;

        r5 = null;

        goto label4;

     label3:
        $r2 = new android.content.pm.ParceledListSlice;

        specialinvoke $r2.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>(r4);

        r5 = $r2;

     label4:
        interfaceinvoke r1.<android.media.session.ISession: void setQueue(android.content.pm.ParceledListSlice)>(r5);

     label5:
        goto label7;

     label6:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.Throwable)>("Dead object in setQueue.", $r3);

     label7:
        return;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    public void setQueueTitle(java.lang.CharSequence)
    {
        android.media.session.MediaSession r0;
        android.media.session.ISession $r1;
        android.os.RemoteException $r2;
        java.lang.CharSequence r3;

        r0 := @this: android.media.session.MediaSession;

        r3 := @parameter0: java.lang.CharSequence;

     label1:
        $r1 = r0.<android.media.session.MediaSession: android.media.session.ISession mBinder>;

        interfaceinvoke $r1.<android.media.session.ISession: void setQueueTitle(java.lang.CharSequence)>(r3);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.Throwable)>("Dead object in setQueueTitle.", $r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setRatingType(int)
    {
        android.media.session.MediaSession r0;
        int i0;
        android.media.session.ISession $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.media.session.MediaSession;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.media.session.MediaSession: android.media.session.ISession mBinder>;

        interfaceinvoke $r2.<android.media.session.ISession: void setRatingType(int)>(i0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaSession", "Error in setRatingType.", $r3);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setSessionActivity(android.app.PendingIntent)
    {
        android.media.session.MediaSession r0;
        android.media.session.ISession $r1;
        android.os.RemoteException $r2;
        android.app.PendingIntent r3;

        r0 := @this: android.media.session.MediaSession;

        r3 := @parameter0: android.app.PendingIntent;

     label1:
        $r1 = r0.<android.media.session.MediaSession: android.media.session.ISession mBinder>;

        interfaceinvoke $r1.<android.media.session.ISession: void setLaunchPendingIntent(android.app.PendingIntent)>(r3);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaSession", "Failure in setLaunchPendingIntent.", $r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <android.media.session.MediaSession: java.lang.String TAG> = "MediaSession";

        <android.media.session.MediaSession: int INVALID_UID> = -1;

        <android.media.session.MediaSession: int INVALID_PID> = -1;

        <android.media.session.MediaSession: int FLAG_HANDLES_TRANSPORT_CONTROLS> = 2;

        <android.media.session.MediaSession: int FLAG_HANDLES_MEDIA_BUTTONS> = 1;

        <android.media.session.MediaSession: int FLAG_EXCLUSIVE_GLOBAL_PRIORITY> = 65536;

        return;
    }
}
