public final class android.media.session.MediaSessionManager extends java.lang.Object
{
    public static final int RESULT_MEDIA_KEY_HANDLED;
    public static final int RESULT_MEDIA_KEY_NOT_HANDLED;
    private static final java.lang.String TAG;
    private android.content.Context mContext;
    private android.media.session.MediaSession$Token mCurMediaKeyEventSession;
    private java.lang.String mCurMediaKeyEventSessionPackage;
    private final android.util.ArrayMap mListeners;
    private final java.lang.Object mLock;
    private final java.util.Map mMediaKeyEventSessionChangedCallbacks;
    private final android.media.session.MediaSessionManager$OnMediaKeyEventDispatchedListenerStub mOnMediaKeyEventDispatchedListenerStub;
    private final java.util.Map mOnMediaKeyEventDispatchedListeners;
    private final android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListenerStub mOnMediaKeyEventSessionChangedListenerStub;
    private android.media.session.MediaSessionManager$OnMediaKeyListenerImpl mOnMediaKeyListener;
    private android.media.session.MediaSessionManager$OnVolumeKeyLongPressListenerImpl mOnVolumeKeyLongPressListener;
    private final android.media.session.ISessionManager mService;
    private final android.util.ArrayMap mSession2TokensListeners;

    public void <init>(android.content.Context)
    {
        android.media.session.MediaSessionManager r0;
        android.content.Context r1;
        android.media.session.MediaSessionManager$OnMediaKeyEventDispatchedListenerStub $r2;
        android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListenerStub $r3;
        java.lang.Object $r4;
        android.util.ArrayMap $r5, $r6;
        java.util.HashMap $r7, $r8;
        android.os.IBinder $r9;
        android.media.session.ISessionManager $r10;

        r0 := @this: android.media.session.MediaSessionManager;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new android.media.session.MediaSessionManager$OnMediaKeyEventDispatchedListenerStub;

        specialinvoke $r2.<android.media.session.MediaSessionManager$OnMediaKeyEventDispatchedListenerStub: void <init>(android.media.session.MediaSessionManager,android.media.session.MediaSessionManager$1)>(r0, null);

        r0.<android.media.session.MediaSessionManager: android.media.session.MediaSessionManager$OnMediaKeyEventDispatchedListenerStub mOnMediaKeyEventDispatchedListenerStub> = $r2;

        $r3 = new android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListenerStub;

        specialinvoke $r3.<android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListenerStub: void <init>(android.media.session.MediaSessionManager,android.media.session.MediaSessionManager$1)>(r0, null);

        r0.<android.media.session.MediaSessionManager: android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListenerStub mOnMediaKeyEventSessionChangedListenerStub> = $r3;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<android.media.session.MediaSessionManager: java.lang.Object mLock> = $r4;

        $r5 = new android.util.ArrayMap;

        specialinvoke $r5.<android.util.ArrayMap: void <init>()>();

        r0.<android.media.session.MediaSessionManager: android.util.ArrayMap mListeners> = $r5;

        $r6 = new android.util.ArrayMap;

        specialinvoke $r6.<android.util.ArrayMap: void <init>()>();

        r0.<android.media.session.MediaSessionManager: android.util.ArrayMap mSession2TokensListeners> = $r6;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r0.<android.media.session.MediaSessionManager: java.util.Map mOnMediaKeyEventDispatchedListeners> = $r7;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        r0.<android.media.session.MediaSessionManager: java.util.Map mMediaKeyEventSessionChangedCallbacks> = $r8;

        r0.<android.media.session.MediaSessionManager: android.content.Context mContext> = r1;

        $r9 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("media_session");

        $r10 = staticinvoke <android.media.session.ISessionManager$Stub: android.media.session.ISessionManager asInterface(android.os.IBinder)>($r9);

        r0.<android.media.session.MediaSessionManager: android.media.session.ISessionManager mService> = $r10;

        return;
    }

    static java.lang.Object access$1100(android.media.session.MediaSessionManager)
    {
        android.media.session.MediaSessionManager r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.media.session.MediaSessionManager;

        $r1 = r0.<android.media.session.MediaSessionManager: java.lang.Object mLock>;

        return $r1;
    }

    static java.util.Map access$1200(android.media.session.MediaSessionManager)
    {
        android.media.session.MediaSessionManager r0;
        java.util.Map $r1;

        r0 := @parameter0: android.media.session.MediaSessionManager;

        $r1 = r0.<android.media.session.MediaSessionManager: java.util.Map mOnMediaKeyEventDispatchedListeners>;

        return $r1;
    }

    static java.lang.String access$1302(android.media.session.MediaSessionManager, java.lang.String)
    {
        android.media.session.MediaSessionManager r0;
        java.lang.String r1;

        r0 := @parameter0: android.media.session.MediaSessionManager;

        r1 := @parameter1: java.lang.String;

        r0.<android.media.session.MediaSessionManager: java.lang.String mCurMediaKeyEventSessionPackage> = r1;

        return r1;
    }

    static android.media.session.MediaSession$Token access$1402(android.media.session.MediaSessionManager, android.media.session.MediaSession$Token)
    {
        android.media.session.MediaSessionManager r0;
        android.media.session.MediaSession$Token r1;

        r0 := @parameter0: android.media.session.MediaSessionManager;

        r1 := @parameter1: android.media.session.MediaSession$Token;

        r0.<android.media.session.MediaSessionManager: android.media.session.MediaSession$Token mCurMediaKeyEventSession> = r1;

        return r1;
    }

    static java.util.Map access$1500(android.media.session.MediaSessionManager)
    {
        android.media.session.MediaSessionManager r0;
        java.util.Map $r1;

        r0 := @parameter0: android.media.session.MediaSessionManager;

        $r1 = r0.<android.media.session.MediaSessionManager: java.util.Map mMediaKeyEventSessionChangedCallbacks>;

        return $r1;
    }

    private void dispatchMediaKeyEventInternal(boolean, android.view.KeyEvent, boolean)
    {
        android.media.session.MediaSessionManager r0;
        boolean z0, z1;
        android.content.Context $r1;
        android.media.session.ISessionManager $r2;
        java.lang.String $r3;
        android.os.RemoteException $r4;
        android.view.KeyEvent r5;

        r0 := @this: android.media.session.MediaSessionManager;

        z0 := @parameter0: boolean;

        r5 := @parameter1: android.view.KeyEvent;

        z1 := @parameter2: boolean;

     label1:
        $r2 = r0.<android.media.session.MediaSessionManager: android.media.session.ISessionManager mService>;

        $r1 = r0.<android.media.session.MediaSessionManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r1.<android.content.Context: java.lang.String getPackageName()>();

        interfaceinvoke $r2.<android.media.session.ISessionManager: void dispatchMediaKeyEvent(java.lang.String,boolean,android.view.KeyEvent,boolean)>($r3, z0, r5, z1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SessionManager", "Failed to send key event.", $r4);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void dispatchVolumeKeyEventInternal(boolean, android.view.KeyEvent, int, boolean)
    {
        android.media.session.MediaSessionManager r0;
        boolean z0, z1;
        int i0;
        android.content.Context $r1, $r4;
        android.media.session.ISessionManager $r2;
        java.lang.String $r3, $r5;
        android.os.RemoteException $r6;
        android.view.KeyEvent r7;

        r0 := @this: android.media.session.MediaSessionManager;

        z0 := @parameter0: boolean;

        r7 := @parameter1: android.view.KeyEvent;

        i0 := @parameter2: int;

        z1 := @parameter3: boolean;

     label1:
        $r2 = r0.<android.media.session.MediaSessionManager: android.media.session.ISessionManager mService>;

        $r1 = r0.<android.media.session.MediaSessionManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r1.<android.content.Context: java.lang.String getPackageName()>();

        $r4 = r0.<android.media.session.MediaSessionManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke $r2.<android.media.session.ISessionManager: void dispatchVolumeKeyEvent(java.lang.String,java.lang.String,boolean,android.view.KeyEvent,int,boolean)>($r3, $r5, z0, r7, i0, z1);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SessionManager", "Failed to send volume key event.", $r6);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void addOnActiveSessionsChangedListener(android.media.session.MediaSessionManager$OnActiveSessionsChangedListener, android.content.ComponentName)
    {
        android.media.session.MediaSessionManager r0;
        android.media.session.MediaSessionManager$OnActiveSessionsChangedListener r1;
        android.content.ComponentName r2;

        r0 := @this: android.media.session.MediaSessionManager;

        r1 := @parameter0: android.media.session.MediaSessionManager$OnActiveSessionsChangedListener;

        r2 := @parameter1: android.content.ComponentName;

        virtualinvoke r0.<android.media.session.MediaSessionManager: void addOnActiveSessionsChangedListener(android.media.session.MediaSessionManager$OnActiveSessionsChangedListener,android.content.ComponentName,android.os.Handler)>(r1, r2, null);

        return;
    }

    public void addOnActiveSessionsChangedListener(android.media.session.MediaSessionManager$OnActiveSessionsChangedListener, android.content.ComponentName, int, android.os.Handler)
    {
        android.media.session.MediaSessionManager r0;
        android.content.ComponentName r1;
        int i0;
        java.lang.Object r2, $r6;
        android.media.session.MediaSessionManager$SessionsChangedWrapper r3;
        java.lang.IllegalArgumentException $r4;
        android.util.ArrayMap $r5, $r10;
        android.content.Context $r7;
        android.media.session.ISessionManager $r8;
        android.media.session.IActiveSessionsListener$Stub $r9;
        android.os.Handler $r12, r16;
        android.os.RemoteException $r13;
        java.lang.Throwable $r14;
        android.media.session.MediaSessionManager$OnActiveSessionsChangedListener r15;

        r0 := @this: android.media.session.MediaSessionManager;

        r15 := @parameter0: android.media.session.MediaSessionManager$OnActiveSessionsChangedListener;

        r1 := @parameter1: android.content.ComponentName;

        i0 := @parameter2: int;

        r16 := @parameter3: android.os.Handler;

        if r15 == null goto label14;

        if r16 != null goto label01;

        $r12 = new android.os.Handler;

        specialinvoke $r12.<android.os.Handler: void <init>()>();

        r16 = $r12;

        goto label01;

     label01:
        r2 = r0.<android.media.session.MediaSessionManager: java.lang.Object mLock>;

        entermonitor r2;

     label02:
        $r5 = r0.<android.media.session.MediaSessionManager: android.util.ArrayMap mListeners>;

        $r6 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r15);

        if $r6 == null goto label04;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("SessionManager", "Attempted to add session listener twice, ignoring.");

        exitmonitor r2;

     label03:
        return;

     label04:
        r3 = new android.media.session.MediaSessionManager$SessionsChangedWrapper;

        $r7 = r0.<android.media.session.MediaSessionManager: android.content.Context mContext>;

        specialinvoke r3.<android.media.session.MediaSessionManager$SessionsChangedWrapper: void <init>(android.content.Context,android.media.session.MediaSessionManager$OnActiveSessionsChangedListener,android.os.Handler)>($r7, r15, r16);

     label05:
        $r8 = r0.<android.media.session.MediaSessionManager: android.media.session.ISessionManager mService>;

        $r9 = staticinvoke <android.media.session.MediaSessionManager$SessionsChangedWrapper: android.media.session.IActiveSessionsListener$Stub access$200(android.media.session.MediaSessionManager$SessionsChangedWrapper)>(r3);

        interfaceinvoke $r8.<android.media.session.ISessionManager: void addSessionsListener(android.media.session.IActiveSessionsListener,android.content.ComponentName,int)>($r9, r1, i0);

        $r10 = r0.<android.media.session.MediaSessionManager: android.util.ArrayMap mListeners>;

        virtualinvoke $r10.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r15, r3);

     label06:
        goto label09;

     label07:
        $r13 := @caughtexception;

     label08:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SessionManager", "Error in addOnActiveSessionsChangedListener.", $r13);

     label09:
        exitmonitor r2;

     label10:
        return;

     label11:
        $r14 := @caughtexception;

     label12:
        exitmonitor r2;

     label13:
        throw $r14;

     label14:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("listener may not be null");

        throw $r4;

        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch android.os.RemoteException from label05 to label06 with label07;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public void addOnActiveSessionsChangedListener(android.media.session.MediaSessionManager$OnActiveSessionsChangedListener, android.content.ComponentName, android.os.Handler)
    {
        android.media.session.MediaSessionManager r0;
        android.media.session.MediaSessionManager$OnActiveSessionsChangedListener r1;
        android.content.ComponentName r2;
        android.os.Handler r3;
        int $i0;

        r0 := @this: android.media.session.MediaSessionManager;

        r1 := @parameter0: android.media.session.MediaSessionManager$OnActiveSessionsChangedListener;

        r2 := @parameter1: android.content.ComponentName;

        r3 := @parameter2: android.os.Handler;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        virtualinvoke r0.<android.media.session.MediaSessionManager: void addOnActiveSessionsChangedListener(android.media.session.MediaSessionManager$OnActiveSessionsChangedListener,android.content.ComponentName,int,android.os.Handler)>(r1, r2, $i0, r3);

        return;
    }

    public void addOnMediaKeyEventDispatchedListener(java.util.concurrent.Executor, android.media.session.MediaSessionManager$OnMediaKeyEventDispatchedListener)
    {
        android.media.session.MediaSessionManager r0;
        android.media.session.MediaSessionManager$OnMediaKeyEventDispatchedListener r1;
        java.lang.Object r2;
        java.lang.NullPointerException $r3, $r4;
        java.util.Map $r5, $r7;
        int $i0;
        android.media.session.MediaSessionManager$OnMediaKeyEventDispatchedListenerStub $r8;
        android.media.session.ISessionManager $r9;
        java.lang.Throwable $r10;
        android.os.RemoteException $r11;
        java.util.concurrent.Executor r12;

        r0 := @this: android.media.session.MediaSessionManager;

        r12 := @parameter0: java.util.concurrent.Executor;

        r1 := @parameter1: android.media.session.MediaSessionManager$OnMediaKeyEventDispatchedListener;

        if r12 == null goto label11;

        if r1 == null goto label10;

        r2 = r0.<android.media.session.MediaSessionManager: java.lang.Object mLock>;

        entermonitor r2;

     label01:
        $r5 = r0.<android.media.session.MediaSessionManager: java.util.Map mOnMediaKeyEventDispatchedListeners>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r12);

        $r7 = r0.<android.media.session.MediaSessionManager: java.util.Map mOnMediaKeyEventDispatchedListeners>;

        $i0 = interfaceinvoke $r7.<java.util.Map: int size()>();

        if $i0 != 1 goto label02;

        $r9 = r0.<android.media.session.MediaSessionManager: android.media.session.ISessionManager mService>;

        $r8 = r0.<android.media.session.MediaSessionManager: android.media.session.MediaSessionManager$OnMediaKeyEventDispatchedListenerStub mOnMediaKeyEventDispatchedListenerStub>;

        interfaceinvoke $r9.<android.media.session.ISessionManager: void addOnMediaKeyEventDispatchedListener(android.media.session.IOnMediaKeyEventDispatchedListener)>($r8);

     label02:
        goto label06;

     label03:
        $r10 := @caughtexception;

        goto label08;

     label04:
        $r11 := @caughtexception;

     label05:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SessionManager", "Failed to set media key listener", $r11);

     label06:
        exitmonitor r2;

     label07:
        return;

     label08:
        exitmonitor r2;

     label09:
        throw $r10;

     label10:
        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("listener shouldn\'t be null");

        throw $r4;

     label11:
        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("executor shouldn\'t be null");

        throw $r3;

        catch android.os.RemoteException from label01 to label02 with label04;
        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label06 with label03;
        catch java.lang.Throwable from label06 to label07 with label03;
        catch java.lang.Throwable from label08 to label09 with label03;
    }

    public void addOnMediaKeyEventSessionChangedListener(java.util.concurrent.Executor, android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListener)
    {
        android.media.session.MediaSessionManager r0;
        android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListener r1;
        java.lang.Object r2;
        android.media.session._$$Lambda$MediaSessionManager$IEuWPZ528guBgmyKPMUWhBwnMCE r3;
        java.lang.NullPointerException $r4, $r5;
        java.util.Map $r6, $r8;
        int $i0;
        android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListenerStub $r9;
        android.media.session.ISessionManager $r10;
        android.os.RemoteException $r11;
        java.lang.Throwable $r12;
        java.util.concurrent.Executor r13;

        r0 := @this: android.media.session.MediaSessionManager;

        r13 := @parameter0: java.util.concurrent.Executor;

        r1 := @parameter1: android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListener;

        if r13 == null goto label11;

        if r1 == null goto label10;

        r2 = r0.<android.media.session.MediaSessionManager: java.lang.Object mLock>;

        entermonitor r2;

     label01:
        $r6 = r0.<android.media.session.MediaSessionManager: java.util.Map mMediaKeyEventSessionChangedCallbacks>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r13);

        r3 = new android.media.session._$$Lambda$MediaSessionManager$IEuWPZ528guBgmyKPMUWhBwnMCE;

        specialinvoke r3.<android.media.session._$$Lambda$MediaSessionManager$IEuWPZ528guBgmyKPMUWhBwnMCE: void <init>(android.media.session.MediaSessionManager,android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListener)>(r0, r1);

        interfaceinvoke r13.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r3);

        $r8 = r0.<android.media.session.MediaSessionManager: java.util.Map mMediaKeyEventSessionChangedCallbacks>;

        $i0 = interfaceinvoke $r8.<java.util.Map: int size()>();

        if $i0 != 1 goto label02;

        $r10 = r0.<android.media.session.MediaSessionManager: android.media.session.ISessionManager mService>;

        $r9 = r0.<android.media.session.MediaSessionManager: android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListenerStub mOnMediaKeyEventSessionChangedListenerStub>;

        interfaceinvoke $r10.<android.media.session.ISessionManager: void addOnMediaKeyEventSessionChangedListener(android.media.session.IOnMediaKeyEventSessionChangedListener)>($r9);

     label02:
        goto label06;

     label03:
        $r12 := @caughtexception;

        goto label08;

     label04:
        $r11 := @caughtexception;

     label05:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SessionManager", "Failed to set media key listener", $r11);

     label06:
        exitmonitor r2;

     label07:
        return;

     label08:
        exitmonitor r2;

     label09:
        throw $r12;

     label10:
        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("listener shouldn\'t be null");

        throw $r5;

     label11:
        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("executor shouldn\'t be null");

        throw $r4;

        catch android.os.RemoteException from label01 to label02 with label04;
        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label06 with label03;
        catch java.lang.Throwable from label06 to label07 with label03;
        catch java.lang.Throwable from label08 to label09 with label03;
    }

    public void addOnSession2TokensChangedListener(int, android.media.session.MediaSessionManager$OnSession2TokensChangedListener, android.os.Handler)
    {
        android.media.session.MediaSessionManager r0;
        int i0;
        android.os.Handler r1;
        java.lang.Object r2, $r6;
        android.media.session.MediaSessionManager$Session2TokensChangedWrapper r3;
        java.lang.IllegalArgumentException $r4;
        android.util.ArrayMap $r5, $r9;
        android.media.session.ISessionManager $r7;
        android.media.session.ISession2TokensListener$Stub $r8;
        android.os.RemoteException $r11;
        java.lang.Throwable $r13;
        android.media.session.MediaSessionManager$OnSession2TokensChangedListener r14;

        r0 := @this: android.media.session.MediaSessionManager;

        i0 := @parameter0: int;

        r14 := @parameter1: android.media.session.MediaSessionManager$OnSession2TokensChangedListener;

        r1 := @parameter2: android.os.Handler;

        if r14 == null goto label13;

        r2 = r0.<android.media.session.MediaSessionManager: java.lang.Object mLock>;

        entermonitor r2;

     label01:
        $r5 = r0.<android.media.session.MediaSessionManager: android.util.ArrayMap mSession2TokensListeners>;

        $r6 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r14);

        if $r6 == null goto label03;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("SessionManager", "Attempted to add session listener twice, ignoring.");

        exitmonitor r2;

     label02:
        return;

     label03:
        r3 = new android.media.session.MediaSessionManager$Session2TokensChangedWrapper;

        specialinvoke r3.<android.media.session.MediaSessionManager$Session2TokensChangedWrapper: void <init>(android.media.session.MediaSessionManager$OnSession2TokensChangedListener,android.os.Handler)>(r14, r1);

     label04:
        $r7 = r0.<android.media.session.MediaSessionManager: android.media.session.ISessionManager mService>;

        $r8 = virtualinvoke r3.<android.media.session.MediaSessionManager$Session2TokensChangedWrapper: android.media.session.ISession2TokensListener$Stub getStub()>();

        interfaceinvoke $r7.<android.media.session.ISessionManager: void addSession2TokensListener(android.media.session.ISession2TokensListener,int)>($r8, i0);

        $r9 = r0.<android.media.session.MediaSessionManager: android.util.ArrayMap mSession2TokensListeners>;

        virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r14, r3);

     label05:
        goto label08;

     label06:
        $r11 := @caughtexception;

     label07:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SessionManager", "Error in addSessionTokensListener.", $r11);

        virtualinvoke $r11.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

     label08:
        exitmonitor r2;

     label09:
        return;

     label10:
        $r13 := @caughtexception;

     label11:
        exitmonitor r2;

     label12:
        throw $r13;

     label13:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("listener shouldn\'t be null");

        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch android.os.RemoteException from label04 to label05 with label06;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public void addOnSession2TokensChangedListener(android.media.session.MediaSessionManager$OnSession2TokensChangedListener)
    {
        android.media.session.MediaSessionManager r0;
        android.media.session.MediaSessionManager$OnSession2TokensChangedListener r1;
        int $i0;
        android.os.Handler $r2;

        r0 := @this: android.media.session.MediaSessionManager;

        r1 := @parameter0: android.media.session.MediaSessionManager$OnSession2TokensChangedListener;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $r2 = new android.os.Handler;

        specialinvoke $r2.<android.os.Handler: void <init>()>();

        virtualinvoke r0.<android.media.session.MediaSessionManager: void addOnSession2TokensChangedListener(int,android.media.session.MediaSessionManager$OnSession2TokensChangedListener,android.os.Handler)>($i0, r1, $r2);

        return;
    }

    public void addOnSession2TokensChangedListener(android.media.session.MediaSessionManager$OnSession2TokensChangedListener, android.os.Handler)
    {
        android.media.session.MediaSessionManager r0;
        android.media.session.MediaSessionManager$OnSession2TokensChangedListener r1;
        android.os.Handler r2;
        int $i0;

        r0 := @this: android.media.session.MediaSessionManager;

        r1 := @parameter0: android.media.session.MediaSessionManager$OnSession2TokensChangedListener;

        r2 := @parameter1: android.os.Handler;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        virtualinvoke r0.<android.media.session.MediaSessionManager: void addOnSession2TokensChangedListener(int,android.media.session.MediaSessionManager$OnSession2TokensChangedListener,android.os.Handler)>($i0, r1, r2);

        return;
    }

    public android.media.session.ISession createSession(android.media.session.MediaSession$CallbackStub, java.lang.String, android.os.Bundle)
    {
        android.media.session.MediaSessionManager r0;
        java.lang.String r1, $r5;
        android.os.Bundle r2;
        android.content.Context $r3;
        android.media.session.ISessionManager $r4;
        int $i0;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;
        android.media.session.MediaSession$CallbackStub r8;
        android.media.session.ISession r9;

        r0 := @this: android.media.session.MediaSessionManager;

        r8 := @parameter0: android.media.session.MediaSession$CallbackStub;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.os.Bundle;

     label1:
        $r4 = r0.<android.media.session.MediaSessionManager: android.media.session.ISessionManager mService>;

        $r3 = r0.<android.media.session.MediaSessionManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r3.<android.content.Context: java.lang.String getPackageName()>();

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        r9 = interfaceinvoke $r4.<android.media.session.ISessionManager: android.media.session.ISession createSession(java.lang.String,android.media.session.ISessionCallback,java.lang.String,android.os.Bundle,int)>($r5, r8, r1, r2, $i0);

     label2:
        return r9;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r6);

        throw $r7;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void dispatchAdjustVolume(int, int, int)
    {
        android.media.session.MediaSessionManager r0;
        int i0, i1, i2;
        android.content.Context $r2, $r5;
        android.media.session.ISessionManager $r3;
        java.lang.String $r4, $r6;
        android.os.RemoteException $r7;

        r0 := @this: android.media.session.MediaSessionManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

     label1:
        $r3 = r0.<android.media.session.MediaSessionManager: android.media.session.ISessionManager mService>;

        $r2 = r0.<android.media.session.MediaSessionManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r2.<android.content.Context: java.lang.String getPackageName()>();

        $r5 = r0.<android.media.session.MediaSessionManager: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke $r3.<android.media.session.ISessionManager: void dispatchAdjustVolume(java.lang.String,java.lang.String,int,int,int)>($r4, $r6, i0, i1, i2);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SessionManager", "Failed to send adjust volume.", $r7);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void dispatchMediaKeyEvent(android.view.KeyEvent)
    {
        android.media.session.MediaSessionManager r0;
        android.view.KeyEvent r1;

        r0 := @this: android.media.session.MediaSessionManager;

        r1 := @parameter0: android.view.KeyEvent;

        virtualinvoke r0.<android.media.session.MediaSessionManager: void dispatchMediaKeyEvent(android.view.KeyEvent,boolean)>(r1, 0);

        return;
    }

    public void dispatchMediaKeyEvent(android.view.KeyEvent, boolean)
    {
        android.media.session.MediaSessionManager r0;
        android.view.KeyEvent r1;
        boolean z0;

        r0 := @this: android.media.session.MediaSessionManager;

        r1 := @parameter0: android.view.KeyEvent;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.media.session.MediaSessionManager: void dispatchMediaKeyEventInternal(boolean,android.view.KeyEvent,boolean)>(0, r1, z0);

        return;
    }

    public void dispatchMediaKeyEventAsSystemService(android.view.KeyEvent)
    {
        android.media.session.MediaSessionManager r0;
        android.view.KeyEvent r1;

        r0 := @this: android.media.session.MediaSessionManager;

        r1 := @parameter0: android.view.KeyEvent;

        specialinvoke r0.<android.media.session.MediaSessionManager: void dispatchMediaKeyEventInternal(boolean,android.view.KeyEvent,boolean)>(1, r1, 0);

        return;
    }

    public boolean dispatchMediaKeyEventAsSystemService(android.media.session.MediaSession$Token, android.view.KeyEvent)
    {
        android.media.session.MediaSessionManager r0;
        android.view.KeyEvent r1;
        boolean z0, $z1;
        java.lang.IllegalArgumentException $r2, $r3;
        int $i0;
        android.content.Context $r4;
        android.media.session.ISessionManager $r5;
        java.lang.String $r6;
        android.os.RemoteException $r7;
        android.media.session.MediaSession$Token r8;

        r0 := @this: android.media.session.MediaSessionManager;

        r8 := @parameter0: android.media.session.MediaSession$Token;

        r1 := @parameter1: android.view.KeyEvent;

        if r8 == null goto label5;

        if r1 == null goto label4;

        $i0 = virtualinvoke r1.<android.view.KeyEvent: int getKeyCode()>();

        $z1 = staticinvoke <android.view.KeyEvent: boolean isMediaSessionKey(int)>($i0);

        if $z1 != 0 goto label1;

        return 0;

     label1:
        $r5 = r0.<android.media.session.MediaSessionManager: android.media.session.ISessionManager mService>;

        $r4 = r0.<android.media.session.MediaSessionManager: android.content.Context mContext>;

        $r6 = virtualinvoke $r4.<android.content.Context: java.lang.String getPackageName()>();

        z0 = interfaceinvoke $r5.<android.media.session.ISessionManager: boolean dispatchMediaKeyEventToSessionAsSystemService(java.lang.String,android.media.session.MediaSession$Token,android.view.KeyEvent)>($r6, r8, r1);

     label2:
        return z0;

     label3:
        $r7 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SessionManager", "Failed to send key event.", $r7);

        return 0;

     label4:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("keyEvent shouldn\'t be null");

        throw $r3;

     label5:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sessionToken shouldn\'t be null");

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void dispatchVolumeKeyEvent(android.view.KeyEvent, int, boolean)
    {
        android.media.session.MediaSessionManager r0;
        android.view.KeyEvent r1;
        int i0;
        boolean z0;

        r0 := @this: android.media.session.MediaSessionManager;

        r1 := @parameter0: android.view.KeyEvent;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<android.media.session.MediaSessionManager: void dispatchVolumeKeyEventInternal(boolean,android.view.KeyEvent,int,boolean)>(0, r1, i0, z0);

        return;
    }

    public void dispatchVolumeKeyEventAsSystemService(android.media.session.MediaSession$Token, android.view.KeyEvent)
    {
        android.media.session.MediaSessionManager r0;
        android.view.KeyEvent r1;
        java.lang.IllegalArgumentException $r2, $r3;
        android.content.Context $r4, $r7;
        android.media.session.ISessionManager $r5;
        java.lang.String $r6, $r8;
        android.os.RemoteException $r9;
        android.media.session.MediaSession$Token r10;

        r0 := @this: android.media.session.MediaSessionManager;

        r10 := @parameter0: android.media.session.MediaSession$Token;

        r1 := @parameter1: android.view.KeyEvent;

        if r10 == null goto label6;

        if r1 == null goto label5;

     label1:
        $r5 = r0.<android.media.session.MediaSessionManager: android.media.session.ISessionManager mService>;

        $r4 = r0.<android.media.session.MediaSessionManager: android.content.Context mContext>;

        $r6 = virtualinvoke $r4.<android.content.Context: java.lang.String getPackageName()>();

        $r7 = r0.<android.media.session.MediaSessionManager: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke $r5.<android.media.session.ISessionManager: void dispatchVolumeKeyEventToSessionAsSystemService(java.lang.String,java.lang.String,android.media.session.MediaSession$Token,android.view.KeyEvent)>($r6, $r8, r10, r1);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("SessionManager", "Error calling dispatchVolumeKeyEventAsSystemService", $r9);

     label4:
        return;

     label5:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("keyEvent shouldn\'t be null");

        throw $r3;

     label6:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sessionToken shouldn\'t be null");

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void dispatchVolumeKeyEventAsSystemService(android.view.KeyEvent, int)
    {
        android.media.session.MediaSessionManager r0;
        android.view.KeyEvent r1;
        int i0;

        r0 := @this: android.media.session.MediaSessionManager;

        r1 := @parameter0: android.view.KeyEvent;

        i0 := @parameter1: int;

        specialinvoke r0.<android.media.session.MediaSessionManager: void dispatchVolumeKeyEventInternal(boolean,android.view.KeyEvent,int,boolean)>(1, r1, i0, 0);

        return;
    }

    public java.util.List getActiveSessions(android.content.ComponentName)
    {
        android.media.session.MediaSessionManager r0;
        android.content.ComponentName r1;
        int $i0;
        java.util.List $r2;

        r0 := @this: android.media.session.MediaSessionManager;

        r1 := @parameter0: android.content.ComponentName;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $r2 = virtualinvoke r0.<android.media.session.MediaSessionManager: java.util.List getActiveSessionsForUser(android.content.ComponentName,int)>(r1, $i0);

        return $r2;
    }

    public java.util.List getActiveSessionsForUser(android.content.ComponentName, int)
    {
        android.media.session.MediaSessionManager r0;
        int i0, i2, i3;
        android.media.session.MediaController r2;
        java.util.ArrayList $r3;
        android.media.session.ISessionManager $r4;
        android.content.Context $r5;
        java.lang.Object $r6;
        android.media.session.MediaSession$Token $r7;
        android.os.RemoteException $r8;
        android.content.ComponentName r9;
        java.util.List r10;

        r0 := @this: android.media.session.MediaSessionManager;

        r9 := @parameter0: android.content.ComponentName;

        i2 := @parameter1: int;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

     label1:
        $r4 = r0.<android.media.session.MediaSessionManager: android.media.session.ISessionManager mService>;

        r10 = interfaceinvoke $r4.<android.media.session.ISessionManager: java.util.List getSessions(android.content.ComponentName,int)>(r9, i2);

        i0 = interfaceinvoke r10.<java.util.List: int size()>();

     label2:
        i3 = 0;

     label3:
        if i3 >= i0 goto label6;

     label4:
        r2 = new android.media.session.MediaController;

        $r5 = r0.<android.media.session.MediaSessionManager: android.content.Context mContext>;

        $r6 = interfaceinvoke r10.<java.util.List: java.lang.Object get(int)>(i3);

        $r7 = (android.media.session.MediaSession$Token) $r6;

        specialinvoke r2.<android.media.session.MediaController: void <init>(android.content.Context,android.media.session.MediaSession$Token)>($r5, $r7);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

     label5:
        i3 = i3 + 1;

        goto label3;

     label6:
        goto label8;

     label7:
        $r8 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SessionManager", "Failed to get active sessions: ", $r8);

     label8:
        return $r3;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch android.os.RemoteException from label4 to label5 with label7;
    }

    public java.util.List getSession2Tokens()
    {
        android.media.session.MediaSessionManager r0;
        int $i0;
        java.util.List $r1;

        r0 := @this: android.media.session.MediaSessionManager;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $r1 = virtualinvoke r0.<android.media.session.MediaSessionManager: java.util.List getSession2Tokens(int)>($i0);

        return $r1;
    }

    public java.util.List getSession2Tokens(int)
    {
        android.media.session.MediaSessionManager r0;
        int i0;
        android.media.session.ISessionManager $r1;
        android.os.RemoteException $r3;
        android.content.pm.ParceledListSlice r5;
        java.lang.Object r6;
        java.util.ArrayList r8, r9;
        java.util.List r10;

        r0 := @this: android.media.session.MediaSessionManager;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<android.media.session.MediaSessionManager: android.media.session.ISessionManager mService>;

        r5 = interfaceinvoke $r1.<android.media.session.ISessionManager: android.content.pm.ParceledListSlice getSession2Tokens(int)>(i0);

     label2:
        if r5 != null goto label5;

     label3:
        r8 = new java.util.ArrayList;

        specialinvoke r8.<java.util.ArrayList: void <init>()>();

        r6 = r8;

     label4:
        goto label6;

     label5:
        r6 = virtualinvoke r5.<android.content.pm.ParceledListSlice: java.util.List getList()>();

     label6:
        r10 = (java.util.List) r6;

        return r10;

     label7:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SessionManager", "Failed to get session tokens", $r3);

        r9 = new java.util.ArrayList;

        specialinvoke r9.<java.util.ArrayList: void <init>()>();

        return r9;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch android.os.RemoteException from label5 to label6 with label7;
    }

    public int getSessionPolicies(android.media.session.MediaSession$Token)
    {
        android.media.session.MediaSessionManager r0;
        int i0;
        android.media.session.ISessionManager $r1;
        android.os.RemoteException $r2;
        android.media.session.MediaSession$Token r3;

        r0 := @this: android.media.session.MediaSessionManager;

        r3 := @parameter0: android.media.session.MediaSession$Token;

     label1:
        $r1 = r0.<android.media.session.MediaSessionManager: android.media.session.ISessionManager mService>;

        i0 = interfaceinvoke $r1.<android.media.session.ISessionManager: int getSessionPolicies(android.media.session.MediaSession$Token)>(r3);

     label2:
        return i0;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SessionManager", "Failed to get session policies", $r2);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isGlobalPriorityActive()
    {
        android.media.session.MediaSessionManager r0;
        boolean z0;
        android.media.session.ISessionManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.media.session.MediaSessionManager;

     label1:
        $r2 = r0.<android.media.session.MediaSessionManager: android.media.session.ISessionManager mService>;

        z0 = interfaceinvoke $r2.<android.media.session.ISessionManager: boolean isGlobalPriorityActive()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SessionManager", "Failed to check if the global priority is active.", $r3);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isTrustedForMediaControl(android.media.session.MediaSessionManager$RemoteUserInfo)
    {
        android.media.session.MediaSessionManager r0;
        boolean z0;
        java.lang.IllegalArgumentException $r1;
        java.lang.String $r2, $r4;
        android.media.session.ISessionManager $r3;
        int $i0, $i1;
        android.os.RemoteException $r5;
        android.media.session.MediaSessionManager$RemoteUserInfo r6;

        r0 := @this: android.media.session.MediaSessionManager;

        r6 := @parameter0: android.media.session.MediaSessionManager$RemoteUserInfo;

        if r6 == null goto label4;

        $r2 = virtualinvoke r6.<android.media.session.MediaSessionManager$RemoteUserInfo: java.lang.String getPackageName()>();

        if $r2 != null goto label1;

        return 0;

     label1:
        $r3 = r0.<android.media.session.MediaSessionManager: android.media.session.ISessionManager mService>;

        $r4 = virtualinvoke r6.<android.media.session.MediaSessionManager$RemoteUserInfo: java.lang.String getPackageName()>();

        $i0 = virtualinvoke r6.<android.media.session.MediaSessionManager$RemoteUserInfo: int getPid()>();

        $i1 = virtualinvoke r6.<android.media.session.MediaSessionManager$RemoteUserInfo: int getUid()>();

        z0 = interfaceinvoke $r3.<android.media.session.ISessionManager: boolean isTrusted(java.lang.String,int,int)>($r4, $i0, $i1);

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("SessionManager", "Cannot communicate with the service.", $r5);

        return 0;

     label4:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("userInfo may not be null");

        throw $r1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void lambda$addOnMediaKeyEventSessionChangedListener$0$MediaSessionManager(android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListener)
    {
        android.media.session.MediaSessionManager r0;
        android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListener r1;
        android.media.session.MediaSession$Token $r2;
        java.lang.String $r3;

        r0 := @this: android.media.session.MediaSessionManager;

        r1 := @parameter0: android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListener;

        $r3 = r0.<android.media.session.MediaSessionManager: java.lang.String mCurMediaKeyEventSessionPackage>;

        $r2 = r0.<android.media.session.MediaSessionManager: android.media.session.MediaSession$Token mCurMediaKeyEventSession>;

        interfaceinvoke r1.<android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListener: void onMediaKeyEventSessionChanged(java.lang.String,android.media.session.MediaSession$Token)>($r3, $r2);

        return;
    }

    public void notifySession2Created(android.media.Session2Token)
    {
        android.media.session.MediaSessionManager r0;
        java.lang.IllegalArgumentException $r1, $r2;
        int $i0;
        android.media.session.ISessionManager $r3;
        android.os.RemoteException $r4;
        android.media.Session2Token r6;

        r0 := @this: android.media.session.MediaSessionManager;

        r6 := @parameter0: android.media.Session2Token;

        if r6 == null goto label6;

        $i0 = virtualinvoke r6.<android.media.Session2Token: int getType()>();

        if $i0 != 0 goto label5;

     label1:
        $r3 = r0.<android.media.session.MediaSessionManager: android.media.session.ISessionManager mService>;

        interfaceinvoke $r3.<android.media.session.ISessionManager: void notifySession2Created(android.media.Session2Token)>(r6);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

     label4:
        return;

     label5:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("token\'s type should be TYPE_SESSION");

        throw $r2;

     label6:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("token shouldn\'t be null");

        throw $r1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void registerRemoteVolumeController(android.media.IRemoteVolumeController)
    {
        android.media.session.MediaSessionManager r0;
        android.media.session.ISessionManager $r1;
        android.os.RemoteException $r2;
        android.media.IRemoteVolumeController r3;

        r0 := @this: android.media.session.MediaSessionManager;

        r3 := @parameter0: android.media.IRemoteVolumeController;

     label1:
        $r1 = r0.<android.media.session.MediaSessionManager: android.media.session.ISessionManager mService>;

        interfaceinvoke $r1.<android.media.session.ISessionManager: void registerRemoteVolumeController(android.media.IRemoteVolumeController)>(r3);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SessionManager", "Error in registerRemoteVolumeController.", $r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void removeOnActiveSessionsChangedListener(android.media.session.MediaSessionManager$OnActiveSessionsChangedListener)
    {
        android.media.session.MediaSessionManager r0;
        java.lang.Object r1, $r4;
        java.lang.IllegalArgumentException $r2;
        android.util.ArrayMap $r3;
        android.media.session.ISessionManager $r5;
        android.media.session.IActiveSessionsListener$Stub $r6;
        java.lang.Throwable $r7, $r8;
        android.os.RemoteException $r9;
        android.media.session.MediaSessionManager$OnActiveSessionsChangedListener r10;
        android.media.session.MediaSessionManager$SessionsChangedWrapper r11;

        r0 := @this: android.media.session.MediaSessionManager;

        r10 := @parameter0: android.media.session.MediaSessionManager$OnActiveSessionsChangedListener;

        if r10 == null goto label17;

        r1 = r0.<android.media.session.MediaSessionManager: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<android.media.session.MediaSessionManager: android.util.ArrayMap mListeners>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r10);

        r11 = (android.media.session.MediaSessionManager$SessionsChangedWrapper) $r4;

     label02:
        if r11 == null goto label12;

     label03:
        $r5 = r0.<android.media.session.MediaSessionManager: android.media.session.ISessionManager mService>;

        $r6 = staticinvoke <android.media.session.MediaSessionManager$SessionsChangedWrapper: android.media.session.IActiveSessionsListener$Stub access$200(android.media.session.MediaSessionManager$SessionsChangedWrapper)>(r11);

        interfaceinvoke $r5.<android.media.session.ISessionManager: void removeSessionsListener(android.media.session.IActiveSessionsListener)>($r6);

     label04:
        staticinvoke <android.media.session.MediaSessionManager$SessionsChangedWrapper: void access$300(android.media.session.MediaSessionManager$SessionsChangedWrapper)>(r11);

     label05:
        goto label12;

     label06:
        $r7 := @caughtexception;

        goto label10;

     label07:
        $r9 := @caughtexception;

     label08:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SessionManager", "Error in removeOnActiveSessionsChangedListener.", $r9);

     label09:
        goto label04;

     label10:
        staticinvoke <android.media.session.MediaSessionManager$SessionsChangedWrapper: void access$300(android.media.session.MediaSessionManager$SessionsChangedWrapper)>(r11);

     label11:
        throw $r7;

     label12:
        exitmonitor r1;

     label13:
        return;

     label14:
        $r8 := @caughtexception;

     label15:
        exitmonitor r1;

     label16:
        throw $r8;

     label17:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("listener may not be null");

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch android.os.RemoteException from label03 to label04 with label07;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label08 to label09 with label06;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public void removeOnMediaKeyEventDispatchedListener(android.media.session.MediaSessionManager$OnMediaKeyEventDispatchedListener)
    {
        android.media.session.MediaSessionManager r0;
        java.lang.Object r1;
        java.lang.NullPointerException $r2;
        java.util.Map $r3, $r5;
        int $i0;
        android.media.session.MediaSessionManager$OnMediaKeyEventDispatchedListenerStub $r6;
        android.media.session.ISessionManager $r7;
        android.os.RemoteException $r8;
        java.lang.Throwable $r9;
        android.media.session.MediaSessionManager$OnMediaKeyEventDispatchedListener r10;

        r0 := @this: android.media.session.MediaSessionManager;

        r10 := @parameter0: android.media.session.MediaSessionManager$OnMediaKeyEventDispatchedListener;

        if r10 == null goto label10;

        r1 = r0.<android.media.session.MediaSessionManager: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<android.media.session.MediaSessionManager: java.util.Map mOnMediaKeyEventDispatchedListeners>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r10);

        $r5 = r0.<android.media.session.MediaSessionManager: java.util.Map mOnMediaKeyEventDispatchedListeners>;

        $i0 = interfaceinvoke $r5.<java.util.Map: int size()>();

        if $i0 != 0 goto label02;

        $r7 = r0.<android.media.session.MediaSessionManager: android.media.session.ISessionManager mService>;

        $r6 = r0.<android.media.session.MediaSessionManager: android.media.session.MediaSessionManager$OnMediaKeyEventDispatchedListenerStub mOnMediaKeyEventDispatchedListenerStub>;

        interfaceinvoke $r7.<android.media.session.ISessionManager: void removeOnMediaKeyEventDispatchedListener(android.media.session.IOnMediaKeyEventDispatchedListener)>($r6);

     label02:
        goto label06;

     label03:
        $r9 := @caughtexception;

        goto label08;

     label04:
        $r8 := @caughtexception;

     label05:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SessionManager", "Failed to set media key event dispatched listener", $r8);

     label06:
        exitmonitor r1;

     label07:
        return;

     label08:
        exitmonitor r1;

     label09:
        throw $r9;

     label10:
        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("listener shouldn\'t be null");

        throw $r2;

        catch android.os.RemoteException from label01 to label02 with label04;
        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label06 with label03;
        catch java.lang.Throwable from label06 to label07 with label03;
        catch java.lang.Throwable from label08 to label09 with label03;
    }

    public void removeOnMediaKeyEventSessionChangedListener(android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListener)
    {
        android.media.session.MediaSessionManager r0;
        java.lang.Object r1;
        java.lang.NullPointerException $r2;
        java.util.Map $r3, $r5;
        int $i0;
        android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListenerStub $r6;
        android.media.session.ISessionManager $r7;
        java.lang.Throwable $r8;
        android.os.RemoteException $r9;
        android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListener r10;

        r0 := @this: android.media.session.MediaSessionManager;

        r10 := @parameter0: android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListener;

        if r10 == null goto label10;

        r1 = r0.<android.media.session.MediaSessionManager: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<android.media.session.MediaSessionManager: java.util.Map mMediaKeyEventSessionChangedCallbacks>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r10);

        $r5 = r0.<android.media.session.MediaSessionManager: java.util.Map mMediaKeyEventSessionChangedCallbacks>;

        $i0 = interfaceinvoke $r5.<java.util.Map: int size()>();

        if $i0 != 0 goto label02;

        $r7 = r0.<android.media.session.MediaSessionManager: android.media.session.ISessionManager mService>;

        $r6 = r0.<android.media.session.MediaSessionManager: android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListenerStub mOnMediaKeyEventSessionChangedListenerStub>;

        interfaceinvoke $r7.<android.media.session.ISessionManager: void removeOnMediaKeyEventSessionChangedListener(android.media.session.IOnMediaKeyEventSessionChangedListener)>($r6);

     label02:
        goto label06;

     label03:
        $r8 := @caughtexception;

        goto label08;

     label04:
        $r9 := @caughtexception;

     label05:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SessionManager", "Failed to set media key listener", $r9);

     label06:
        exitmonitor r1;

     label07:
        return;

     label08:
        exitmonitor r1;

     label09:
        throw $r8;

     label10:
        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("listener shouldn\'t be null");

        throw $r2;

        catch android.os.RemoteException from label01 to label02 with label04;
        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label06 with label03;
        catch java.lang.Throwable from label06 to label07 with label03;
        catch java.lang.Throwable from label08 to label09 with label03;
    }

    public void removeOnSession2TokensChangedListener(android.media.session.MediaSessionManager$OnSession2TokensChangedListener)
    {
        android.media.session.MediaSessionManager r0;
        java.lang.Object r1, $r4;
        java.lang.IllegalArgumentException $r2;
        android.util.ArrayMap $r3;
        android.media.session.ISessionManager $r5;
        android.media.session.ISession2TokensListener$Stub $r6;
        java.lang.Throwable $r7;
        android.os.RemoteException $r8;
        android.media.session.MediaSessionManager$OnSession2TokensChangedListener r10;
        android.media.session.MediaSessionManager$Session2TokensChangedWrapper r11;

        r0 := @this: android.media.session.MediaSessionManager;

        r10 := @parameter0: android.media.session.MediaSessionManager$OnSession2TokensChangedListener;

        if r10 == null goto label10;

        r1 = r0.<android.media.session.MediaSessionManager: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<android.media.session.MediaSessionManager: android.util.ArrayMap mSession2TokensListeners>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r10);

        r11 = (android.media.session.MediaSessionManager$Session2TokensChangedWrapper) $r4;

        exitmonitor r1;

     label02:
        if r11 == null goto label06;

     label03:
        $r5 = r0.<android.media.session.MediaSessionManager: android.media.session.ISessionManager mService>;

        $r6 = virtualinvoke r11.<android.media.session.MediaSessionManager$Session2TokensChangedWrapper: android.media.session.ISession2TokensListener$Stub getStub()>();

        interfaceinvoke $r5.<android.media.session.ISessionManager: void removeSession2TokensListener(android.media.session.ISession2TokensListener)>($r6);

     label04:
        goto label06;

     label05:
        $r8 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SessionManager", "Error in removeSessionTokensListener.", $r8);

        virtualinvoke $r8.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

     label06:
        return;

     label07:
        $r7 := @caughtexception;

     label08:
        exitmonitor r1;

     label09:
        throw $r7;

     label10:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("listener may not be null");

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    public void setCustomMediaKeyDispatcherForTesting(java.lang.String)
    {
        android.media.session.MediaSessionManager r0;
        android.media.session.ISessionManager $r1;
        android.os.RemoteException $r2;
        java.lang.String r3;

        r0 := @this: android.media.session.MediaSessionManager;

        r3 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<android.media.session.MediaSessionManager: android.media.session.ISessionManager mService>;

        interfaceinvoke $r1.<android.media.session.ISessionManager: void setCustomMediaKeyDispatcherForTesting(java.lang.String)>(r3);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SessionManager", "Failed to set custom media key dispatcher name", $r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setCustomSessionPolicyProviderForTesting(java.lang.String)
    {
        android.media.session.MediaSessionManager r0;
        android.media.session.ISessionManager $r1;
        android.os.RemoteException $r2;
        java.lang.String r3;

        r0 := @this: android.media.session.MediaSessionManager;

        r3 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<android.media.session.MediaSessionManager: android.media.session.ISessionManager mService>;

        interfaceinvoke $r1.<android.media.session.ISessionManager: void setCustomSessionPolicyProviderForTesting(java.lang.String)>(r3);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SessionManager", "Failed to set custom session policy provider name", $r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setOnMediaKeyListener(android.media.session.MediaSessionManager$OnMediaKeyListener, android.os.Handler)
    {
        android.media.session.MediaSessionManager r0;
        java.lang.Object r1;
        android.media.session.ISessionManager $r2, $r3;
        android.os.RemoteException $r4;
        java.lang.Throwable $r5;
        android.media.session.MediaSessionManager$OnMediaKeyListener r6;
        android.os.Handler r7, r10;
        android.media.session.MediaSessionManager$OnMediaKeyListenerImpl r11;

        r0 := @this: android.media.session.MediaSessionManager;

        r6 := @parameter0: android.media.session.MediaSessionManager$OnMediaKeyListener;

        r7 := @parameter1: android.os.Handler;

        r1 = r0.<android.media.session.MediaSessionManager: java.lang.Object mLock>;

        entermonitor r1;

        if r6 != null goto label05;

     label01:
        r0.<android.media.session.MediaSessionManager: android.media.session.MediaSessionManager$OnMediaKeyListenerImpl mOnMediaKeyListener> = null;

        $r3 = r0.<android.media.session.MediaSessionManager: android.media.session.ISessionManager mService>;

        interfaceinvoke $r3.<android.media.session.ISessionManager: void setOnMediaKeyListener(android.media.session.IOnMediaKeyListener)>(null);

     label02:
        goto label08;

     label03:
        $r5 := @caughtexception;

        goto label12;

     label04:
        $r4 := @caughtexception;

        goto label09;

     label05:
        r10 = r7;

        if r7 != null goto label07;

     label06:
        r10 = new android.os.Handler;

        specialinvoke r10.<android.os.Handler: void <init>()>();

     label07:
        r11 = new android.media.session.MediaSessionManager$OnMediaKeyListenerImpl;

        specialinvoke r11.<android.media.session.MediaSessionManager$OnMediaKeyListenerImpl: void <init>(android.media.session.MediaSessionManager$OnMediaKeyListener,android.os.Handler)>(r6, r10);

        r0.<android.media.session.MediaSessionManager: android.media.session.MediaSessionManager$OnMediaKeyListenerImpl mOnMediaKeyListener> = r11;

        $r2 = r0.<android.media.session.MediaSessionManager: android.media.session.ISessionManager mService>;

        interfaceinvoke $r2.<android.media.session.ISessionManager: void setOnMediaKeyListener(android.media.session.IOnMediaKeyListener)>(r11);

     label08:
        goto label10;

     label09:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SessionManager", "Failed to set media key listener", $r4);

     label10:
        exitmonitor r1;

     label11:
        return;

     label12:
        exitmonitor r1;

     label13:
        throw $r5;

        catch android.os.RemoteException from label01 to label02 with label04;
        catch java.lang.Throwable from label01 to label02 with label03;
        catch android.os.RemoteException from label06 to label07 with label04;
        catch java.lang.Throwable from label06 to label07 with label03;
        catch android.os.RemoteException from label07 to label08 with label04;
        catch java.lang.Throwable from label07 to label08 with label03;
        catch java.lang.Throwable from label09 to label10 with label03;
        catch java.lang.Throwable from label10 to label11 with label03;
        catch java.lang.Throwable from label12 to label13 with label03;
    }

    public void setOnVolumeKeyLongPressListener(android.media.session.MediaSessionManager$OnVolumeKeyLongPressListener, android.os.Handler)
    {
        android.media.session.MediaSessionManager r0;
        java.lang.Object r1;
        android.media.session.ISessionManager $r2, $r3;
        android.os.RemoteException $r4;
        java.lang.Throwable $r5;
        android.media.session.MediaSessionManager$OnVolumeKeyLongPressListener r6;
        android.os.Handler r7, r10;
        android.media.session.MediaSessionManager$OnVolumeKeyLongPressListenerImpl r11;

        r0 := @this: android.media.session.MediaSessionManager;

        r6 := @parameter0: android.media.session.MediaSessionManager$OnVolumeKeyLongPressListener;

        r7 := @parameter1: android.os.Handler;

        r1 = r0.<android.media.session.MediaSessionManager: java.lang.Object mLock>;

        entermonitor r1;

        if r6 != null goto label05;

     label01:
        r0.<android.media.session.MediaSessionManager: android.media.session.MediaSessionManager$OnVolumeKeyLongPressListenerImpl mOnVolumeKeyLongPressListener> = null;

        $r3 = r0.<android.media.session.MediaSessionManager: android.media.session.ISessionManager mService>;

        interfaceinvoke $r3.<android.media.session.ISessionManager: void setOnVolumeKeyLongPressListener(android.media.session.IOnVolumeKeyLongPressListener)>(null);

     label02:
        goto label08;

     label03:
        $r5 := @caughtexception;

        goto label12;

     label04:
        $r4 := @caughtexception;

        goto label09;

     label05:
        r10 = r7;

        if r7 != null goto label07;

     label06:
        r10 = new android.os.Handler;

        specialinvoke r10.<android.os.Handler: void <init>()>();

     label07:
        r11 = new android.media.session.MediaSessionManager$OnVolumeKeyLongPressListenerImpl;

        specialinvoke r11.<android.media.session.MediaSessionManager$OnVolumeKeyLongPressListenerImpl: void <init>(android.media.session.MediaSessionManager$OnVolumeKeyLongPressListener,android.os.Handler)>(r6, r10);

        r0.<android.media.session.MediaSessionManager: android.media.session.MediaSessionManager$OnVolumeKeyLongPressListenerImpl mOnVolumeKeyLongPressListener> = r11;

        $r2 = r0.<android.media.session.MediaSessionManager: android.media.session.ISessionManager mService>;

        interfaceinvoke $r2.<android.media.session.ISessionManager: void setOnVolumeKeyLongPressListener(android.media.session.IOnVolumeKeyLongPressListener)>(r11);

     label08:
        goto label10;

     label09:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SessionManager", "Failed to set volume key long press listener", $r4);

     label10:
        exitmonitor r1;

     label11:
        return;

     label12:
        exitmonitor r1;

     label13:
        throw $r5;

        catch android.os.RemoteException from label01 to label02 with label04;
        catch java.lang.Throwable from label01 to label02 with label03;
        catch android.os.RemoteException from label06 to label07 with label04;
        catch java.lang.Throwable from label06 to label07 with label03;
        catch android.os.RemoteException from label07 to label08 with label04;
        catch java.lang.Throwable from label07 to label08 with label03;
        catch java.lang.Throwable from label09 to label10 with label03;
        catch java.lang.Throwable from label10 to label11 with label03;
        catch java.lang.Throwable from label12 to label13 with label03;
    }

    public void setSessionPolicies(android.media.session.MediaSession$Token, int)
    {
        android.media.session.MediaSessionManager r0;
        int i0;
        android.media.session.ISessionManager $r1;
        android.os.RemoteException $r2;
        android.media.session.MediaSession$Token r3;

        r0 := @this: android.media.session.MediaSessionManager;

        r3 := @parameter0: android.media.session.MediaSession$Token;

        i0 := @parameter1: int;

     label1:
        $r1 = r0.<android.media.session.MediaSessionManager: android.media.session.ISessionManager mService>;

        interfaceinvoke $r1.<android.media.session.ISessionManager: void setSessionPolicies(android.media.session.MediaSession$Token,int)>(r3, i0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SessionManager", "Failed to set session policies", $r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void unregisterRemoteVolumeController(android.media.IRemoteVolumeController)
    {
        android.media.session.MediaSessionManager r0;
        android.media.session.ISessionManager $r1;
        android.os.RemoteException $r2;
        android.media.IRemoteVolumeController r3;

        r0 := @this: android.media.session.MediaSessionManager;

        r3 := @parameter0: android.media.IRemoteVolumeController;

     label1:
        $r1 = r0.<android.media.session.MediaSessionManager: android.media.session.ISessionManager mService>;

        interfaceinvoke $r1.<android.media.session.ISessionManager: void unregisterRemoteVolumeController(android.media.IRemoteVolumeController)>(r3);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SessionManager", "Error in unregisterRemoteVolumeController.", $r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <android.media.session.MediaSessionManager: java.lang.String TAG> = "SessionManager";

        <android.media.session.MediaSessionManager: int RESULT_MEDIA_KEY_NOT_HANDLED> = 0;

        <android.media.session.MediaSessionManager: int RESULT_MEDIA_KEY_HANDLED> = 1;

        return;
    }
}
