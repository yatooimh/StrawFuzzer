public abstract class android.media.soundtrigger.SoundTriggerDetectionService extends android.app.Service
{
    private static final boolean DEBUG;
    private static final java.lang.String LOG_TAG;
    private final android.util.ArrayMap mClients;
    private android.os.Handler mHandler;
    private final java.lang.Object mLock;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        <android.media.soundtrigger.SoundTriggerDetectionService: boolean DEBUG> = 0;

        $r0 = class "Landroid/media/soundtrigger/SoundTriggerDetectionService;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <android.media.soundtrigger.SoundTriggerDetectionService: java.lang.String LOG_TAG> = $r1;

        return;
    }

    public void <init>()
    {
        android.media.soundtrigger.SoundTriggerDetectionService r0;
        java.lang.Object $r1;
        android.util.ArrayMap $r2;

        r0 := @this: android.media.soundtrigger.SoundTriggerDetectionService;

        specialinvoke r0.<android.app.Service: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<android.media.soundtrigger.SoundTriggerDetectionService: java.lang.Object mLock> = $r1;

        $r2 = new android.util.ArrayMap;

        specialinvoke $r2.<android.util.ArrayMap: void <init>()>();

        r0.<android.media.soundtrigger.SoundTriggerDetectionService: android.util.ArrayMap mClients> = $r2;

        return;
    }

    static android.os.Handler access$000(android.media.soundtrigger.SoundTriggerDetectionService)
    {
        android.media.soundtrigger.SoundTriggerDetectionService r0;
        android.os.Handler $r1;

        r0 := @parameter0: android.media.soundtrigger.SoundTriggerDetectionService;

        $r1 = r0.<android.media.soundtrigger.SoundTriggerDetectionService: android.os.Handler mHandler>;

        return $r1;
    }

    static void access$100(android.media.soundtrigger.SoundTriggerDetectionService, java.util.UUID, android.os.Bundle)
    {
        android.media.soundtrigger.SoundTriggerDetectionService r0;
        java.util.UUID r1;
        android.os.Bundle r2;

        r0 := @parameter0: android.media.soundtrigger.SoundTriggerDetectionService;

        r1 := @parameter1: java.util.UUID;

        r2 := @parameter2: android.os.Bundle;

        specialinvoke r0.<android.media.soundtrigger.SoundTriggerDetectionService: void removeClient(java.util.UUID,android.os.Bundle)>(r1, r2);

        return;
    }

    static void access$200(android.media.soundtrigger.SoundTriggerDetectionService, java.util.UUID, android.os.Bundle, android.media.soundtrigger.ISoundTriggerDetectionServiceClient)
    {
        android.media.soundtrigger.SoundTriggerDetectionService r0;
        java.util.UUID r1;
        android.os.Bundle r2;
        android.media.soundtrigger.ISoundTriggerDetectionServiceClient r3;

        r0 := @parameter0: android.media.soundtrigger.SoundTriggerDetectionService;

        r1 := @parameter1: java.util.UUID;

        r2 := @parameter2: android.os.Bundle;

        r3 := @parameter3: android.media.soundtrigger.ISoundTriggerDetectionServiceClient;

        specialinvoke r0.<android.media.soundtrigger.SoundTriggerDetectionService: void setClient(java.util.UUID,android.os.Bundle,android.media.soundtrigger.ISoundTriggerDetectionServiceClient)>(r1, r2, r3);

        return;
    }

    private void removeClient(java.util.UUID, android.os.Bundle)
    {
        android.media.soundtrigger.SoundTriggerDetectionService r0;
        android.os.Bundle r1;
        java.lang.Object r2;
        android.util.ArrayMap $r3;
        java.lang.Throwable $r5;
        java.util.UUID r6;

        r0 := @this: android.media.soundtrigger.SoundTriggerDetectionService;

        r6 := @parameter0: java.util.UUID;

        r1 := @parameter1: android.os.Bundle;

        r2 = r0.<android.media.soundtrigger.SoundTriggerDetectionService: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        $r3 = r0.<android.media.soundtrigger.SoundTriggerDetectionService: android.util.ArrayMap mClients>;

        virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r6);

        exitmonitor r2;

     label2:
        virtualinvoke r0.<android.media.soundtrigger.SoundTriggerDetectionService: void onDisconnected(java.util.UUID,android.os.Bundle)>(r6, r1);

        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r2;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void setClient(java.util.UUID, android.os.Bundle, android.media.soundtrigger.ISoundTriggerDetectionServiceClient)
    {
        android.media.soundtrigger.SoundTriggerDetectionService r0;
        android.os.Bundle r1;
        android.media.soundtrigger.ISoundTriggerDetectionServiceClient r2;
        java.lang.Object r3;
        android.util.ArrayMap $r4;
        java.lang.Throwable $r6;
        java.util.UUID r7;

        r0 := @this: android.media.soundtrigger.SoundTriggerDetectionService;

        r7 := @parameter0: java.util.UUID;

        r1 := @parameter1: android.os.Bundle;

        r2 := @parameter2: android.media.soundtrigger.ISoundTriggerDetectionServiceClient;

        r3 = r0.<android.media.soundtrigger.SoundTriggerDetectionService: java.lang.Object mLock>;

        entermonitor r3;

     label1:
        $r4 = r0.<android.media.soundtrigger.SoundTriggerDetectionService: android.util.ArrayMap mClients>;

        virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, r2);

        exitmonitor r3;

     label2:
        virtualinvoke r0.<android.media.soundtrigger.SoundTriggerDetectionService: void onConnected(java.util.UUID,android.os.Bundle)>(r7, r1);

        return;

     label3:
        $r6 := @caughtexception;

     label4:
        exitmonitor r3;

     label5:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    protected final void attachBaseContext(android.content.Context)
    {
        android.media.soundtrigger.SoundTriggerDetectionService r0;
        android.content.Context r1;
        android.os.Handler $r2;
        android.os.Looper $r3;

        r0 := @this: android.media.soundtrigger.SoundTriggerDetectionService;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.app.Service: void attachBaseContext(android.content.Context)>(r1);

        $r2 = new android.os.Handler;

        $r3 = virtualinvoke r1.<android.content.Context: android.os.Looper getMainLooper()>();

        specialinvoke $r2.<android.os.Handler: void <init>(android.os.Looper)>($r3);

        r0.<android.media.soundtrigger.SoundTriggerDetectionService: android.os.Handler mHandler> = $r2;

        return;
    }

    public final android.os.IBinder onBind(android.content.Intent)
    {
        android.media.soundtrigger.SoundTriggerDetectionService r0;
        android.content.Intent r1;
        android.media.soundtrigger.SoundTriggerDetectionService$1 $r2;

        r0 := @this: android.media.soundtrigger.SoundTriggerDetectionService;

        r1 := @parameter0: android.content.Intent;

        $r2 = new android.media.soundtrigger.SoundTriggerDetectionService$1;

        specialinvoke $r2.<android.media.soundtrigger.SoundTriggerDetectionService$1: void <init>(android.media.soundtrigger.SoundTriggerDetectionService)>(r0);

        return $r2;
    }

    public void onConnected(java.util.UUID, android.os.Bundle)
    {
        android.media.soundtrigger.SoundTriggerDetectionService r0;
        java.util.UUID r1;
        android.os.Bundle r2;

        r0 := @this: android.media.soundtrigger.SoundTriggerDetectionService;

        r1 := @parameter0: java.util.UUID;

        r2 := @parameter1: android.os.Bundle;

        return;
    }

    public void onDisconnected(java.util.UUID, android.os.Bundle)
    {
        android.media.soundtrigger.SoundTriggerDetectionService r0;
        java.util.UUID r1;
        android.os.Bundle r2;

        r0 := @this: android.media.soundtrigger.SoundTriggerDetectionService;

        r1 := @parameter0: java.util.UUID;

        r2 := @parameter1: android.os.Bundle;

        return;
    }

    public void onError(java.util.UUID, android.os.Bundle, int, int)
    {
        android.media.soundtrigger.SoundTriggerDetectionService r0;
        java.util.UUID r1;
        android.os.Bundle r2;
        int i0, i1;

        r0 := @this: android.media.soundtrigger.SoundTriggerDetectionService;

        r1 := @parameter0: java.util.UUID;

        r2 := @parameter1: android.os.Bundle;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        virtualinvoke r0.<android.media.soundtrigger.SoundTriggerDetectionService: void operationFinished(java.util.UUID,int)>(r1, i0);

        return;
    }

    public void onGenericRecognitionEvent(java.util.UUID, android.os.Bundle, int, android.hardware.soundtrigger.SoundTrigger$RecognitionEvent)
    {
        android.media.soundtrigger.SoundTriggerDetectionService r0;
        java.util.UUID r1;
        android.os.Bundle r2;
        int i0;
        android.hardware.soundtrigger.SoundTrigger$RecognitionEvent r3;

        r0 := @this: android.media.soundtrigger.SoundTriggerDetectionService;

        r1 := @parameter0: java.util.UUID;

        r2 := @parameter1: android.os.Bundle;

        i0 := @parameter2: int;

        r3 := @parameter3: android.hardware.soundtrigger.SoundTrigger$RecognitionEvent;

        virtualinvoke r0.<android.media.soundtrigger.SoundTriggerDetectionService: void operationFinished(java.util.UUID,int)>(r1, i0);

        return;
    }

    public abstract void onStopOperation(java.util.UUID, android.os.Bundle, int);

    public boolean onUnbind(android.content.Intent)
    {
        android.media.soundtrigger.SoundTriggerDetectionService r0;
        android.content.Intent r1;
        android.util.ArrayMap $r2;

        r0 := @this: android.media.soundtrigger.SoundTriggerDetectionService;

        r1 := @parameter0: android.content.Intent;

        $r2 = r0.<android.media.soundtrigger.SoundTriggerDetectionService: android.util.ArrayMap mClients>;

        virtualinvoke $r2.<android.util.ArrayMap: void clear()>();

        return 0;
    }

    public final void operationFinished(java.util.UUID, int)
    {
        android.media.soundtrigger.SoundTriggerDetectionService r0;
        java.util.UUID r1;
        int i0;
        android.util.ArrayMap $r2;
        java.lang.Object $r3, r14;
        java.lang.String $r7, $r12, r16, r20;
        android.os.RemoteException $r8;
        java.lang.StringBuilder $r9, r17;
        java.lang.Throwable $r13;
        android.media.soundtrigger.ISoundTriggerDetectionServiceClient r15;

        r0 := @this: android.media.soundtrigger.SoundTriggerDetectionService;

        r1 := @parameter0: java.util.UUID;

        i0 := @parameter1: int;

     label01:
        r14 = r0.<android.media.soundtrigger.SoundTriggerDetectionService: java.lang.Object mLock>;

        entermonitor r14;

     label02:
        $r2 = r0.<android.media.soundtrigger.SoundTriggerDetectionService: android.util.ArrayMap mClients>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r15 = (android.media.soundtrigger.ISoundTriggerDetectionServiceClient) $r3;

     label03:
        if r15 != null goto label06;

     label04:
        r16 = <android.media.soundtrigger.SoundTriggerDetectionService: java.lang.String LOG_TAG>;

        r17 = new java.lang.StringBuilder;

        specialinvoke r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("operationFinished called, but no client for ");

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Was this called after onDisconnected?");

        $r7 = virtualinvoke r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>(r16, $r7);

        exitmonitor r14;

     label05:
        return;

     label06:
        exitmonitor r14;

     label07:
        interfaceinvoke r15.<android.media.soundtrigger.ISoundTriggerDetectionServiceClient: void onOpFinished(int)>(i0);

     label08:
        goto label13;

     label09:
        $r13 := @caughtexception;

     label10:
        exitmonitor r14;

     label11:
        throw $r13;

     label12:
        $r8 := @caughtexception;

        r20 = <android.media.soundtrigger.SoundTriggerDetectionService: java.lang.String LOG_TAG>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("operationFinished, remote exception for client ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>(r20, $r12, $r8);

     label13:
        return;

        catch android.os.RemoteException from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch android.os.RemoteException from label07 to label08 with label12;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch android.os.RemoteException from label11 to label12 with label12;
    }
}
