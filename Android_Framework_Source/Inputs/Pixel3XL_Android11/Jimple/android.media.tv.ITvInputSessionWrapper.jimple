public class android.media.tv.ITvInputSessionWrapper extends android.media.tv.ITvInputSession$Stub implements com.android.internal.os.HandlerCaller$Callback
{
    private static final int DO_APP_PRIVATE_COMMAND;
    private static final int DO_CREATE_OVERLAY_VIEW;
    private static final int DO_DISPATCH_SURFACE_CHANGED;
    private static final int DO_RELAYOUT_OVERLAY_VIEW;
    private static final int DO_RELEASE;
    private static final int DO_REMOVE_OVERLAY_VIEW;
    private static final int DO_SELECT_TRACK;
    private static final int DO_SET_CAPTION_ENABLED;
    private static final int DO_SET_MAIN;
    private static final int DO_SET_STREAM_VOLUME;
    private static final int DO_SET_SURFACE;
    private static final int DO_START_RECORDING;
    private static final int DO_STOP_RECORDING;
    private static final int DO_TIME_SHIFT_ENABLE_POSITION_TRACKING;
    private static final int DO_TIME_SHIFT_PAUSE;
    private static final int DO_TIME_SHIFT_PLAY;
    private static final int DO_TIME_SHIFT_RESUME;
    private static final int DO_TIME_SHIFT_SEEK_TO;
    private static final int DO_TIME_SHIFT_SET_PLAYBACK_PARAMS;
    private static final int DO_TUNE;
    private static final int DO_UNBLOCK_CONTENT;
    private static final int EXECUTE_MESSAGE_TIMEOUT_LONG_MILLIS;
    private static final int EXECUTE_MESSAGE_TIMEOUT_SHORT_MILLIS;
    private static final int EXECUTE_MESSAGE_TUNE_TIMEOUT_MILLIS;
    private static final java.lang.String TAG;
    private final com.android.internal.os.HandlerCaller mCaller;
    private android.view.InputChannel mChannel;
    private final boolean mIsRecordingSession;
    private android.media.tv.ITvInputSessionWrapper$TvInputEventReceiver mReceiver;
    private android.media.tv.TvInputService$RecordingSession mTvInputRecordingSessionImpl;
    private android.media.tv.TvInputService$Session mTvInputSessionImpl;

    public void <init>(android.content.Context, android.media.tv.TvInputService$RecordingSession)
    {
        android.media.tv.ITvInputSessionWrapper r0;
        android.content.Context r1;
        android.media.tv.TvInputService$RecordingSession r2;
        com.android.internal.os.HandlerCaller $r3;

        r0 := @this: android.media.tv.ITvInputSessionWrapper;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.media.tv.TvInputService$RecordingSession;

        specialinvoke r0.<android.media.tv.ITvInputSession$Stub: void <init>()>();

        r0.<android.media.tv.ITvInputSessionWrapper: boolean mIsRecordingSession> = 1;

        $r3 = new com.android.internal.os.HandlerCaller;

        specialinvoke $r3.<com.android.internal.os.HandlerCaller: void <init>(android.content.Context,android.os.Looper,com.android.internal.os.HandlerCaller$Callback,boolean)>(r1, null, r0, 1);

        r0.<android.media.tv.ITvInputSessionWrapper: com.android.internal.os.HandlerCaller mCaller> = $r3;

        r0.<android.media.tv.ITvInputSessionWrapper: android.media.tv.TvInputService$RecordingSession mTvInputRecordingSessionImpl> = r2;

        return;
    }

    public void <init>(android.content.Context, android.media.tv.TvInputService$Session, android.view.InputChannel)
    {
        android.media.tv.ITvInputSessionWrapper r0;
        android.content.Context r1;
        android.media.tv.TvInputService$Session r2;
        android.view.InputChannel r3;
        com.android.internal.os.HandlerCaller $r4;
        android.media.tv.ITvInputSessionWrapper$TvInputEventReceiver $r5;
        android.os.Looper $r6;

        r0 := @this: android.media.tv.ITvInputSessionWrapper;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.media.tv.TvInputService$Session;

        r3 := @parameter2: android.view.InputChannel;

        specialinvoke r0.<android.media.tv.ITvInputSession$Stub: void <init>()>();

        r0.<android.media.tv.ITvInputSessionWrapper: boolean mIsRecordingSession> = 0;

        $r4 = new com.android.internal.os.HandlerCaller;

        specialinvoke $r4.<com.android.internal.os.HandlerCaller: void <init>(android.content.Context,android.os.Looper,com.android.internal.os.HandlerCaller$Callback,boolean)>(r1, null, r0, 1);

        r0.<android.media.tv.ITvInputSessionWrapper: com.android.internal.os.HandlerCaller mCaller> = $r4;

        r0.<android.media.tv.ITvInputSessionWrapper: android.media.tv.TvInputService$Session mTvInputSessionImpl> = r2;

        r0.<android.media.tv.ITvInputSessionWrapper: android.view.InputChannel mChannel> = r3;

        if r3 == null goto label1;

        $r5 = new android.media.tv.ITvInputSessionWrapper$TvInputEventReceiver;

        $r6 = virtualinvoke r1.<android.content.Context: android.os.Looper getMainLooper()>();

        specialinvoke $r5.<android.media.tv.ITvInputSessionWrapper$TvInputEventReceiver: void <init>(android.media.tv.ITvInputSessionWrapper,android.view.InputChannel,android.os.Looper)>(r0, r3, $r6);

        r0.<android.media.tv.ITvInputSessionWrapper: android.media.tv.ITvInputSessionWrapper$TvInputEventReceiver mReceiver> = $r5;

     label1:
        return;
    }

    static android.media.tv.TvInputService$Session access$000(android.media.tv.ITvInputSessionWrapper)
    {
        android.media.tv.ITvInputSessionWrapper r0;
        android.media.tv.TvInputService$Session $r1;

        r0 := @parameter0: android.media.tv.ITvInputSessionWrapper;

        $r1 = r0.<android.media.tv.ITvInputSessionWrapper: android.media.tv.TvInputService$Session mTvInputSessionImpl>;

        return $r1;
    }

    public void appPrivateCommand(java.lang.String, android.os.Bundle)
    {
        android.media.tv.ITvInputSessionWrapper r0;
        java.lang.String r1;
        android.os.Bundle r2;
        com.android.internal.os.HandlerCaller r3;
        android.os.Message $r4;

        r0 := @this: android.media.tv.ITvInputSessionWrapper;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.Bundle;

        r3 = r0.<android.media.tv.ITvInputSessionWrapper: com.android.internal.os.HandlerCaller mCaller>;

        $r4 = virtualinvoke r3.<com.android.internal.os.HandlerCaller: android.os.Message obtainMessageOO(int,java.lang.Object,java.lang.Object)>(9, r1, r2);

        virtualinvoke r3.<com.android.internal.os.HandlerCaller: void executeOrSendMessage(android.os.Message)>($r4);

        return;
    }

    public void createOverlayView(android.os.IBinder, android.graphics.Rect)
    {
        android.media.tv.ITvInputSessionWrapper r0;
        android.os.IBinder r1;
        android.graphics.Rect r2;
        com.android.internal.os.HandlerCaller r3;
        android.os.Message $r4;

        r0 := @this: android.media.tv.ITvInputSessionWrapper;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: android.graphics.Rect;

        r3 = r0.<android.media.tv.ITvInputSessionWrapper: com.android.internal.os.HandlerCaller mCaller>;

        $r4 = virtualinvoke r3.<com.android.internal.os.HandlerCaller: android.os.Message obtainMessageOO(int,java.lang.Object,java.lang.Object)>(10, r1, r2);

        virtualinvoke r3.<com.android.internal.os.HandlerCaller: void executeOrSendMessage(android.os.Message)>($r4);

        return;
    }

    public void dispatchSurfaceChanged(int, int, int)
    {
        android.media.tv.ITvInputSessionWrapper r0;
        int i0, i1, i2;
        com.android.internal.os.HandlerCaller r1;
        android.os.Message $r2;

        r0 := @this: android.media.tv.ITvInputSessionWrapper;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 = r0.<android.media.tv.ITvInputSessionWrapper: com.android.internal.os.HandlerCaller mCaller>;

        $r2 = virtualinvoke r1.<com.android.internal.os.HandlerCaller: android.os.Message obtainMessageIIII(int,int,int,int,int)>(4, i0, i1, i2, 0);

        virtualinvoke r1.<com.android.internal.os.HandlerCaller: void executeOrSendMessage(android.os.Message)>($r2);

        return;
    }

    public void executeMessage(android.os.Message)
    {
        android.media.tv.ITvInputSessionWrapper r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        int $i0, $i1, $i3, $i5, $i8, $i9, $i10, $i11, $i12;
        android.media.tv.TvInputService$RecordingSession $r1, $r32, $r70, $r90, $r103, $r109;
        java.lang.StringBuilder $r2, $r9, $r19, $r104;
        java.lang.String $r8, $r18, $r26, $r48, $r64, $r69, $r76, $r107;
        byte $b4, $b6, $b18;
        java.lang.RuntimeException $r17, $r25;
        java.lang.Object $r27, $r28, $r29, $r33, $r36, $r39, $r44, $r47, $r51, $r54, $r55, $r56, $r60, $r61, $r62, $r66, $r67, $r71, $r72, $r75, $r77, $r80, $r81, $r82, $r86, $r87, $r91, $r94, $r96, $r99;
        android.os.Bundle $r30, $r63, $r68, $r83, $r88;
        android.net.Uri $r31, $r45, $r84, $r89;
        java.lang.Boolean $r34, $r78, $r100;
        android.media.tv.TvInputService$Session $r35, $r38, $r41, $r42, $r43, $r46, $r49, $r50, $r53, $r59, $r65, $r74, $r79, $r85, $r93, $r95, $r98, $r101, $r102, $r108;
        android.media.PlaybackParams $r37;
        java.lang.Long $r40;
        long $l7, l14, $l15, $l16, l17;
        android.graphics.Rect $r52, $r57;
        android.os.IBinder $r58;
        java.lang.Integer $r73;
        java.lang.Float $r92;
        float $f0;
        android.view.Surface $r97;
        android.os.Message r110;
        com.android.internal.os.SomeArgs r112, r113, r114, r115, r116, r117;
        android.media.tv.ITvInputSessionWrapper$TvInputEventReceiver r118;
        android.view.InputChannel r119;

        r0 := @this: android.media.tv.ITvInputSessionWrapper;

        r110 := @parameter0: android.os.Message;

        $z0 = r0.<android.media.tv.ITvInputSessionWrapper: boolean mIsRecordingSession>;

        if $z0 == 0 goto label01;

        $r109 = r0.<android.media.tv.ITvInputSessionWrapper: android.media.tv.TvInputService$RecordingSession mTvInputRecordingSessionImpl>;

        if $r109 == null goto label02;

     label01:
        $z1 = r0.<android.media.tv.ITvInputSessionWrapper: boolean mIsRecordingSession>;

        if $z1 != 0 goto label03;

        $r108 = r0.<android.media.tv.ITvInputSessionWrapper: android.media.tv.TvInputService$Session mTvInputSessionImpl>;

        if $r108 != null goto label03;

     label02:
        return;

     label03:
        l14 = staticinvoke <java.lang.System: long nanoTime()>();

        $i0 = r110.<android.os.Message: int what>;

        tableswitch($i0)
        {
            case 1: goto label29;
            case 2: goto label28;
            case 3: goto label27;
            case 4: goto label26;
            case 5: goto label25;
            case 6: goto label22;
            case 7: goto label21;
            case 8: goto label20;
            case 9: goto label17;
            case 10: goto label16;
            case 11: goto label15;
            case 12: goto label14;
            case 13: goto label13;
            case 14: goto label12;
            case 15: goto label11;
            case 16: goto label10;
            case 17: goto label09;
            case 18: goto label08;
            case 19: goto label07;
            case 20: goto label06;
            case 21: goto label05;
            default: goto label04;
        };

     label04:
        $r104 = new java.lang.StringBuilder;

        specialinvoke $r104.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unhandled message code: ");

        $i12 = r110.<android.os.Message: int what>;

        virtualinvoke $r104.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r107 = virtualinvoke $r104.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputSessionWrapper", $r107);

        goto label32;

     label05:
        $r1 = r0.<android.media.tv.ITvInputSessionWrapper: android.media.tv.TvInputService$RecordingSession mTvInputRecordingSessionImpl>;

        virtualinvoke $r1.<android.media.tv.TvInputService$RecordingSession: void stopRecording()>();

        goto label32;

     label06:
        $r27 = r110.<android.os.Message: java.lang.Object obj>;

        r112 = (com.android.internal.os.SomeArgs) $r27;

        $r32 = r0.<android.media.tv.ITvInputSessionWrapper: android.media.tv.TvInputService$RecordingSession mTvInputRecordingSessionImpl>;

        $r28 = r112.<com.android.internal.os.SomeArgs: java.lang.Object arg1>;

        $r31 = (android.net.Uri) $r28;

        $r29 = r112.<com.android.internal.os.SomeArgs: java.lang.Object arg2>;

        $r30 = (android.os.Bundle) $r29;

        virtualinvoke $r32.<android.media.tv.TvInputService$RecordingSession: void startRecording(android.net.Uri,android.os.Bundle)>($r31, $r30);

        goto label32;

     label07:
        $r35 = r0.<android.media.tv.ITvInputSessionWrapper: android.media.tv.TvInputService$Session mTvInputSessionImpl>;

        $r33 = r110.<android.os.Message: java.lang.Object obj>;

        $r34 = (java.lang.Boolean) $r33;

        $z2 = virtualinvoke $r34.<java.lang.Boolean: boolean booleanValue()>();

        virtualinvoke $r35.<android.media.tv.TvInputService$Session: void timeShiftEnablePositionTracking(boolean)>($z2);

        goto label32;

     label08:
        $r38 = r0.<android.media.tv.ITvInputSessionWrapper: android.media.tv.TvInputService$Session mTvInputSessionImpl>;

        $r36 = r110.<android.os.Message: java.lang.Object obj>;

        $r37 = (android.media.PlaybackParams) $r36;

        virtualinvoke $r38.<android.media.tv.TvInputService$Session: void timeShiftSetPlaybackParams(android.media.PlaybackParams)>($r37);

        goto label32;

     label09:
        $r41 = r0.<android.media.tv.ITvInputSessionWrapper: android.media.tv.TvInputService$Session mTvInputSessionImpl>;

        $r39 = r110.<android.os.Message: java.lang.Object obj>;

        $r40 = (java.lang.Long) $r39;

        $l7 = virtualinvoke $r40.<java.lang.Long: long longValue()>();

        virtualinvoke $r41.<android.media.tv.TvInputService$Session: void timeShiftSeekTo(long)>($l7);

        goto label32;

     label10:
        $r42 = r0.<android.media.tv.ITvInputSessionWrapper: android.media.tv.TvInputService$Session mTvInputSessionImpl>;

        virtualinvoke $r42.<android.media.tv.TvInputService$Session: void timeShiftResume()>();

        goto label32;

     label11:
        $r43 = r0.<android.media.tv.ITvInputSessionWrapper: android.media.tv.TvInputService$Session mTvInputSessionImpl>;

        virtualinvoke $r43.<android.media.tv.TvInputService$Session: void timeShiftPause()>();

        goto label32;

     label12:
        $r46 = r0.<android.media.tv.ITvInputSessionWrapper: android.media.tv.TvInputService$Session mTvInputSessionImpl>;

        $r44 = r110.<android.os.Message: java.lang.Object obj>;

        $r45 = (android.net.Uri) $r44;

        virtualinvoke $r46.<android.media.tv.TvInputService$Session: void timeShiftPlay(android.net.Uri)>($r45);

        goto label32;

     label13:
        $r49 = r0.<android.media.tv.ITvInputSessionWrapper: android.media.tv.TvInputService$Session mTvInputSessionImpl>;

        $r47 = r110.<android.os.Message: java.lang.Object obj>;

        $r48 = (java.lang.String) $r47;

        virtualinvoke $r49.<android.media.tv.TvInputService$Session: void unblockContent(java.lang.String)>($r48);

        goto label32;

     label14:
        $r50 = r0.<android.media.tv.ITvInputSessionWrapper: android.media.tv.TvInputService$Session mTvInputSessionImpl>;

        virtualinvoke $r50.<android.media.tv.TvInputService$Session: void removeOverlayView(boolean)>(1);

        goto label32;

     label15:
        $r53 = r0.<android.media.tv.ITvInputSessionWrapper: android.media.tv.TvInputService$Session mTvInputSessionImpl>;

        $r51 = r110.<android.os.Message: java.lang.Object obj>;

        $r52 = (android.graphics.Rect) $r51;

        virtualinvoke $r53.<android.media.tv.TvInputService$Session: void relayoutOverlayView(android.graphics.Rect)>($r52);

        goto label32;

     label16:
        $r54 = r110.<android.os.Message: java.lang.Object obj>;

        r113 = (com.android.internal.os.SomeArgs) $r54;

        $r59 = r0.<android.media.tv.ITvInputSessionWrapper: android.media.tv.TvInputService$Session mTvInputSessionImpl>;

        $r55 = r113.<com.android.internal.os.SomeArgs: java.lang.Object arg1>;

        $r58 = (android.os.IBinder) $r55;

        $r56 = r113.<com.android.internal.os.SomeArgs: java.lang.Object arg2>;

        $r57 = (android.graphics.Rect) $r56;

        virtualinvoke $r59.<android.media.tv.TvInputService$Session: void createOverlayView(android.os.IBinder,android.graphics.Rect)>($r58, $r57);

        virtualinvoke r113.<com.android.internal.os.SomeArgs: void recycle()>();

        goto label32;

     label17:
        $r60 = r110.<android.os.Message: java.lang.Object obj>;

        r114 = (com.android.internal.os.SomeArgs) $r60;

        $z3 = r0.<android.media.tv.ITvInputSessionWrapper: boolean mIsRecordingSession>;

        if $z3 == 0 goto label18;

        $r70 = r0.<android.media.tv.ITvInputSessionWrapper: android.media.tv.TvInputService$RecordingSession mTvInputRecordingSessionImpl>;

        $r66 = r114.<com.android.internal.os.SomeArgs: java.lang.Object arg1>;

        $r69 = (java.lang.String) $r66;

        $r67 = r114.<com.android.internal.os.SomeArgs: java.lang.Object arg2>;

        $r68 = (android.os.Bundle) $r67;

        virtualinvoke $r70.<android.media.tv.TvInputService$RecordingSession: void appPrivateCommand(java.lang.String,android.os.Bundle)>($r69, $r68);

        goto label19;

     label18:
        $r65 = r0.<android.media.tv.ITvInputSessionWrapper: android.media.tv.TvInputService$Session mTvInputSessionImpl>;

        $r61 = r114.<com.android.internal.os.SomeArgs: java.lang.Object arg1>;

        $r64 = (java.lang.String) $r61;

        $r62 = r114.<com.android.internal.os.SomeArgs: java.lang.Object arg2>;

        $r63 = (android.os.Bundle) $r62;

        virtualinvoke $r65.<android.media.tv.TvInputService$Session: void appPrivateCommand(java.lang.String,android.os.Bundle)>($r64, $r63);

     label19:
        virtualinvoke r114.<com.android.internal.os.SomeArgs: void recycle()>();

        goto label32;

     label20:
        $r71 = r110.<android.os.Message: java.lang.Object obj>;

        r115 = (com.android.internal.os.SomeArgs) $r71;

        $r74 = r0.<android.media.tv.ITvInputSessionWrapper: android.media.tv.TvInputService$Session mTvInputSessionImpl>;

        $r72 = r115.<com.android.internal.os.SomeArgs: java.lang.Object arg1>;

        $r73 = (java.lang.Integer) $r72;

        $i8 = virtualinvoke $r73.<java.lang.Integer: int intValue()>();

        $r75 = r115.<com.android.internal.os.SomeArgs: java.lang.Object arg2>;

        $r76 = (java.lang.String) $r75;

        virtualinvoke $r74.<android.media.tv.TvInputService$Session: void selectTrack(int,java.lang.String)>($i8, $r76);

        virtualinvoke r115.<com.android.internal.os.SomeArgs: void recycle()>();

        goto label32;

     label21:
        $r79 = r0.<android.media.tv.ITvInputSessionWrapper: android.media.tv.TvInputService$Session mTvInputSessionImpl>;

        $r77 = r110.<android.os.Message: java.lang.Object obj>;

        $r78 = (java.lang.Boolean) $r77;

        $z4 = virtualinvoke $r78.<java.lang.Boolean: boolean booleanValue()>();

        virtualinvoke $r79.<android.media.tv.TvInputService$Session: void setCaptionEnabled(boolean)>($z4);

        goto label32;

     label22:
        $r80 = r110.<android.os.Message: java.lang.Object obj>;

        r116 = (com.android.internal.os.SomeArgs) $r80;

        $z5 = r0.<android.media.tv.ITvInputSessionWrapper: boolean mIsRecordingSession>;

        if $z5 == 0 goto label23;

        $r90 = r0.<android.media.tv.ITvInputSessionWrapper: android.media.tv.TvInputService$RecordingSession mTvInputRecordingSessionImpl>;

        $r86 = r116.<com.android.internal.os.SomeArgs: java.lang.Object arg1>;

        $r89 = (android.net.Uri) $r86;

        $r87 = r116.<com.android.internal.os.SomeArgs: java.lang.Object arg2>;

        $r88 = (android.os.Bundle) $r87;

        virtualinvoke $r90.<android.media.tv.TvInputService$RecordingSession: void tune(android.net.Uri,android.os.Bundle)>($r89, $r88);

        goto label24;

     label23:
        $r85 = r0.<android.media.tv.ITvInputSessionWrapper: android.media.tv.TvInputService$Session mTvInputSessionImpl>;

        $r81 = r116.<com.android.internal.os.SomeArgs: java.lang.Object arg1>;

        $r84 = (android.net.Uri) $r81;

        $r82 = r116.<com.android.internal.os.SomeArgs: java.lang.Object arg2>;

        $r83 = (android.os.Bundle) $r82;

        virtualinvoke $r85.<android.media.tv.TvInputService$Session: void tune(android.net.Uri,android.os.Bundle)>($r84, $r83);

     label24:
        virtualinvoke r116.<com.android.internal.os.SomeArgs: void recycle()>();

        goto label32;

     label25:
        $r93 = r0.<android.media.tv.ITvInputSessionWrapper: android.media.tv.TvInputService$Session mTvInputSessionImpl>;

        $r91 = r110.<android.os.Message: java.lang.Object obj>;

        $r92 = (java.lang.Float) $r91;

        $f0 = virtualinvoke $r92.<java.lang.Float: float floatValue()>();

        virtualinvoke $r93.<android.media.tv.TvInputService$Session: void setStreamVolume(float)>($f0);

        goto label32;

     label26:
        $r94 = r110.<android.os.Message: java.lang.Object obj>;

        r117 = (com.android.internal.os.SomeArgs) $r94;

        $r95 = r0.<android.media.tv.ITvInputSessionWrapper: android.media.tv.TvInputService$Session mTvInputSessionImpl>;

        $i11 = r117.<com.android.internal.os.SomeArgs: int argi1>;

        $i10 = r117.<com.android.internal.os.SomeArgs: int argi2>;

        $i9 = r117.<com.android.internal.os.SomeArgs: int argi3>;

        virtualinvoke $r95.<android.media.tv.TvInputService$Session: void dispatchSurfaceChanged(int,int,int)>($i11, $i10, $i9);

        virtualinvoke r117.<com.android.internal.os.SomeArgs: void recycle()>();

        goto label32;

     label27:
        $r98 = r0.<android.media.tv.ITvInputSessionWrapper: android.media.tv.TvInputService$Session mTvInputSessionImpl>;

        $r96 = r110.<android.os.Message: java.lang.Object obj>;

        $r97 = (android.view.Surface) $r96;

        virtualinvoke $r98.<android.media.tv.TvInputService$Session: void setSurface(android.view.Surface)>($r97);

        goto label32;

     label28:
        $r101 = r0.<android.media.tv.ITvInputSessionWrapper: android.media.tv.TvInputService$Session mTvInputSessionImpl>;

        $r99 = r110.<android.os.Message: java.lang.Object obj>;

        $r100 = (java.lang.Boolean) $r99;

        $z6 = virtualinvoke $r100.<java.lang.Boolean: boolean booleanValue()>();

        virtualinvoke $r101.<android.media.tv.TvInputService$Session: void setMain(boolean)>($z6);

        goto label32;

     label29:
        $z7 = r0.<android.media.tv.ITvInputSessionWrapper: boolean mIsRecordingSession>;

        if $z7 == 0 goto label30;

        $r103 = r0.<android.media.tv.ITvInputSessionWrapper: android.media.tv.TvInputService$RecordingSession mTvInputRecordingSessionImpl>;

        virtualinvoke $r103.<android.media.tv.TvInputService$RecordingSession: void release()>();

        r0.<android.media.tv.ITvInputSessionWrapper: android.media.tv.TvInputService$RecordingSession mTvInputRecordingSessionImpl> = null;

        goto label32;

     label30:
        $r102 = r0.<android.media.tv.ITvInputSessionWrapper: android.media.tv.TvInputService$Session mTvInputSessionImpl>;

        virtualinvoke $r102.<android.media.tv.TvInputService$Session: void release()>();

        r0.<android.media.tv.ITvInputSessionWrapper: android.media.tv.TvInputService$Session mTvInputSessionImpl> = null;

        r118 = r0.<android.media.tv.ITvInputSessionWrapper: android.media.tv.ITvInputSessionWrapper$TvInputEventReceiver mReceiver>;

        if r118 == null goto label31;

        virtualinvoke r118.<android.media.tv.ITvInputSessionWrapper$TvInputEventReceiver: void dispose()>();

        r0.<android.media.tv.ITvInputSessionWrapper: android.media.tv.ITvInputSessionWrapper$TvInputEventReceiver mReceiver> = null;

     label31:
        r119 = r0.<android.media.tv.ITvInputSessionWrapper: android.view.InputChannel mChannel>;

        if r119 == null goto label32;

        virtualinvoke r119.<android.view.InputChannel: void dispose()>();

        r0.<android.media.tv.ITvInputSessionWrapper: android.view.InputChannel mChannel> = null;

     label32:
        $l15 = staticinvoke <java.lang.System: long nanoTime()>();

        $l16 = $l15 - l14;

        l17 = $l16 / 1000000L;

        $b18 = l17 cmp 50L;

        if $b18 <= 0 goto label36;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Handling message (");

        $i1 = r110.<android.os.Message: int what>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") took too long time (duration=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l17);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms)");

        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputSessionWrapper", $r8);

        $i3 = r110.<android.os.Message: int what>;

        if $i3 != 6 goto label34;

        $b6 = l17 cmp 2000L;

        if $b6 > 0 goto label33;

        goto label34;

     label33:
        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Too much time to handle tune request. (");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l17);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms > ");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(2000);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms) Consider handling the tune request in a separate thread.");

        $r25 = new java.lang.RuntimeException;

        $r26 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.RuntimeException: void <init>(java.lang.String)>($r26);

        throw $r25;

     label34:
        $b4 = l17 cmp 5000L;

        if $b4 > 0 goto label35;

        goto label36;

     label35:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Too much time to handle a request. (type=");

        $i5 = r110.<android.os.Message: int what>;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l17);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms > ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(5000);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms).");

        $r17 = new java.lang.RuntimeException;

        $r18 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.String)>($r18);

        throw $r17;

     label36:
        return;
    }

    public void relayoutOverlayView(android.graphics.Rect)
    {
        android.media.tv.ITvInputSessionWrapper r0;
        android.graphics.Rect r1;
        com.android.internal.os.HandlerCaller r2;
        android.os.Message $r3;

        r0 := @this: android.media.tv.ITvInputSessionWrapper;

        r1 := @parameter0: android.graphics.Rect;

        r2 = r0.<android.media.tv.ITvInputSessionWrapper: com.android.internal.os.HandlerCaller mCaller>;

        $r3 = virtualinvoke r2.<com.android.internal.os.HandlerCaller: android.os.Message obtainMessageO(int,java.lang.Object)>(11, r1);

        virtualinvoke r2.<com.android.internal.os.HandlerCaller: void executeOrSendMessage(android.os.Message)>($r3);

        return;
    }

    public void release()
    {
        android.media.tv.ITvInputSessionWrapper r0;
        com.android.internal.os.HandlerCaller r1;
        boolean $z0;
        android.os.Message $r2;
        android.media.tv.TvInputService$Session $r3;

        r0 := @this: android.media.tv.ITvInputSessionWrapper;

        $z0 = r0.<android.media.tv.ITvInputSessionWrapper: boolean mIsRecordingSession>;

        if $z0 != 0 goto label1;

        $r3 = r0.<android.media.tv.ITvInputSessionWrapper: android.media.tv.TvInputService$Session mTvInputSessionImpl>;

        virtualinvoke $r3.<android.media.tv.TvInputService$Session: void scheduleOverlayViewCleanup()>();

     label1:
        r1 = r0.<android.media.tv.ITvInputSessionWrapper: com.android.internal.os.HandlerCaller mCaller>;

        $r2 = virtualinvoke r1.<com.android.internal.os.HandlerCaller: android.os.Message obtainMessage(int)>(1);

        virtualinvoke r1.<com.android.internal.os.HandlerCaller: void executeOrSendMessage(android.os.Message)>($r2);

        return;
    }

    public void removeOverlayView()
    {
        android.media.tv.ITvInputSessionWrapper r0;
        com.android.internal.os.HandlerCaller r1;
        android.os.Message $r2;

        r0 := @this: android.media.tv.ITvInputSessionWrapper;

        r1 = r0.<android.media.tv.ITvInputSessionWrapper: com.android.internal.os.HandlerCaller mCaller>;

        $r2 = virtualinvoke r1.<com.android.internal.os.HandlerCaller: android.os.Message obtainMessage(int)>(12);

        virtualinvoke r1.<com.android.internal.os.HandlerCaller: void executeOrSendMessage(android.os.Message)>($r2);

        return;
    }

    public void selectTrack(int, java.lang.String)
    {
        android.media.tv.ITvInputSessionWrapper r0;
        int i0;
        java.lang.String r1;
        com.android.internal.os.HandlerCaller r2;
        java.lang.Integer $r3;
        android.os.Message $r4;

        r0 := @this: android.media.tv.ITvInputSessionWrapper;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 = r0.<android.media.tv.ITvInputSessionWrapper: com.android.internal.os.HandlerCaller mCaller>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = virtualinvoke r2.<com.android.internal.os.HandlerCaller: android.os.Message obtainMessageOO(int,java.lang.Object,java.lang.Object)>(8, $r3, r1);

        virtualinvoke r2.<com.android.internal.os.HandlerCaller: void executeOrSendMessage(android.os.Message)>($r4);

        return;
    }

    public void setCaptionEnabled(boolean)
    {
        android.media.tv.ITvInputSessionWrapper r0;
        boolean z0;
        com.android.internal.os.HandlerCaller r1;
        java.lang.Boolean $r2;
        android.os.Message $r3;

        r0 := @this: android.media.tv.ITvInputSessionWrapper;

        z0 := @parameter0: boolean;

        r1 = r0.<android.media.tv.ITvInputSessionWrapper: com.android.internal.os.HandlerCaller mCaller>;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r3 = virtualinvoke r1.<com.android.internal.os.HandlerCaller: android.os.Message obtainMessageO(int,java.lang.Object)>(7, $r2);

        virtualinvoke r1.<com.android.internal.os.HandlerCaller: void executeOrSendMessage(android.os.Message)>($r3);

        return;
    }

    public void setMain(boolean)
    {
        android.media.tv.ITvInputSessionWrapper r0;
        boolean z0;
        com.android.internal.os.HandlerCaller r1;
        java.lang.Boolean $r2;
        android.os.Message $r3;

        r0 := @this: android.media.tv.ITvInputSessionWrapper;

        z0 := @parameter0: boolean;

        r1 = r0.<android.media.tv.ITvInputSessionWrapper: com.android.internal.os.HandlerCaller mCaller>;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r3 = virtualinvoke r1.<com.android.internal.os.HandlerCaller: android.os.Message obtainMessageO(int,java.lang.Object)>(2, $r2);

        virtualinvoke r1.<com.android.internal.os.HandlerCaller: void executeOrSendMessage(android.os.Message)>($r3);

        return;
    }

    public void setSurface(android.view.Surface)
    {
        android.media.tv.ITvInputSessionWrapper r0;
        android.view.Surface r1;
        com.android.internal.os.HandlerCaller r2;
        android.os.Message $r3;

        r0 := @this: android.media.tv.ITvInputSessionWrapper;

        r1 := @parameter0: android.view.Surface;

        r2 = r0.<android.media.tv.ITvInputSessionWrapper: com.android.internal.os.HandlerCaller mCaller>;

        $r3 = virtualinvoke r2.<com.android.internal.os.HandlerCaller: android.os.Message obtainMessageO(int,java.lang.Object)>(3, r1);

        virtualinvoke r2.<com.android.internal.os.HandlerCaller: void executeOrSendMessage(android.os.Message)>($r3);

        return;
    }

    public final void setVolume(float)
    {
        android.media.tv.ITvInputSessionWrapper r0;
        float f0;
        com.android.internal.os.HandlerCaller r1;
        java.lang.Float $r2;
        android.os.Message $r3;

        r0 := @this: android.media.tv.ITvInputSessionWrapper;

        f0 := @parameter0: float;

        r1 = r0.<android.media.tv.ITvInputSessionWrapper: com.android.internal.os.HandlerCaller mCaller>;

        $r2 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        $r3 = virtualinvoke r1.<com.android.internal.os.HandlerCaller: android.os.Message obtainMessageO(int,java.lang.Object)>(5, $r2);

        virtualinvoke r1.<com.android.internal.os.HandlerCaller: void executeOrSendMessage(android.os.Message)>($r3);

        return;
    }

    public void startRecording(android.net.Uri, android.os.Bundle)
    {
        android.media.tv.ITvInputSessionWrapper r0;
        android.net.Uri r1;
        android.os.Bundle r2;
        com.android.internal.os.HandlerCaller r3;
        android.os.Message $r4;

        r0 := @this: android.media.tv.ITvInputSessionWrapper;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: android.os.Bundle;

        r3 = r0.<android.media.tv.ITvInputSessionWrapper: com.android.internal.os.HandlerCaller mCaller>;

        $r4 = virtualinvoke r3.<com.android.internal.os.HandlerCaller: android.os.Message obtainMessageOO(int,java.lang.Object,java.lang.Object)>(20, r1, r2);

        virtualinvoke r3.<com.android.internal.os.HandlerCaller: void executeOrSendMessage(android.os.Message)>($r4);

        return;
    }

    public void stopRecording()
    {
        android.media.tv.ITvInputSessionWrapper r0;
        com.android.internal.os.HandlerCaller r1;
        android.os.Message $r2;

        r0 := @this: android.media.tv.ITvInputSessionWrapper;

        r1 = r0.<android.media.tv.ITvInputSessionWrapper: com.android.internal.os.HandlerCaller mCaller>;

        $r2 = virtualinvoke r1.<com.android.internal.os.HandlerCaller: android.os.Message obtainMessage(int)>(21);

        virtualinvoke r1.<com.android.internal.os.HandlerCaller: void executeOrSendMessage(android.os.Message)>($r2);

        return;
    }

    public void timeShiftEnablePositionTracking(boolean)
    {
        android.media.tv.ITvInputSessionWrapper r0;
        boolean z0;
        com.android.internal.os.HandlerCaller r1;
        java.lang.Boolean $r2;
        android.os.Message $r3;

        r0 := @this: android.media.tv.ITvInputSessionWrapper;

        z0 := @parameter0: boolean;

        r1 = r0.<android.media.tv.ITvInputSessionWrapper: com.android.internal.os.HandlerCaller mCaller>;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r3 = virtualinvoke r1.<com.android.internal.os.HandlerCaller: android.os.Message obtainMessageO(int,java.lang.Object)>(19, $r2);

        virtualinvoke r1.<com.android.internal.os.HandlerCaller: void executeOrSendMessage(android.os.Message)>($r3);

        return;
    }

    public void timeShiftPause()
    {
        android.media.tv.ITvInputSessionWrapper r0;
        com.android.internal.os.HandlerCaller r1;
        android.os.Message $r2;

        r0 := @this: android.media.tv.ITvInputSessionWrapper;

        r1 = r0.<android.media.tv.ITvInputSessionWrapper: com.android.internal.os.HandlerCaller mCaller>;

        $r2 = virtualinvoke r1.<com.android.internal.os.HandlerCaller: android.os.Message obtainMessage(int)>(15);

        virtualinvoke r1.<com.android.internal.os.HandlerCaller: void executeOrSendMessage(android.os.Message)>($r2);

        return;
    }

    public void timeShiftPlay(android.net.Uri)
    {
        android.media.tv.ITvInputSessionWrapper r0;
        android.net.Uri r1;
        com.android.internal.os.HandlerCaller r2;
        android.os.Message $r3;

        r0 := @this: android.media.tv.ITvInputSessionWrapper;

        r1 := @parameter0: android.net.Uri;

        r2 = r0.<android.media.tv.ITvInputSessionWrapper: com.android.internal.os.HandlerCaller mCaller>;

        $r3 = virtualinvoke r2.<com.android.internal.os.HandlerCaller: android.os.Message obtainMessageO(int,java.lang.Object)>(14, r1);

        virtualinvoke r2.<com.android.internal.os.HandlerCaller: void executeOrSendMessage(android.os.Message)>($r3);

        return;
    }

    public void timeShiftResume()
    {
        android.media.tv.ITvInputSessionWrapper r0;
        com.android.internal.os.HandlerCaller r1;
        android.os.Message $r2;

        r0 := @this: android.media.tv.ITvInputSessionWrapper;

        r1 = r0.<android.media.tv.ITvInputSessionWrapper: com.android.internal.os.HandlerCaller mCaller>;

        $r2 = virtualinvoke r1.<com.android.internal.os.HandlerCaller: android.os.Message obtainMessage(int)>(16);

        virtualinvoke r1.<com.android.internal.os.HandlerCaller: void executeOrSendMessage(android.os.Message)>($r2);

        return;
    }

    public void timeShiftSeekTo(long)
    {
        android.media.tv.ITvInputSessionWrapper r0;
        long l0;
        com.android.internal.os.HandlerCaller r1;
        java.lang.Long $r2;
        android.os.Message $r3;

        r0 := @this: android.media.tv.ITvInputSessionWrapper;

        l0 := @parameter0: long;

        r1 = r0.<android.media.tv.ITvInputSessionWrapper: com.android.internal.os.HandlerCaller mCaller>;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r3 = virtualinvoke r1.<com.android.internal.os.HandlerCaller: android.os.Message obtainMessageO(int,java.lang.Object)>(17, $r2);

        virtualinvoke r1.<com.android.internal.os.HandlerCaller: void executeOrSendMessage(android.os.Message)>($r3);

        return;
    }

    public void timeShiftSetPlaybackParams(android.media.PlaybackParams)
    {
        android.media.tv.ITvInputSessionWrapper r0;
        android.media.PlaybackParams r1;
        com.android.internal.os.HandlerCaller r2;
        android.os.Message $r3;

        r0 := @this: android.media.tv.ITvInputSessionWrapper;

        r1 := @parameter0: android.media.PlaybackParams;

        r2 = r0.<android.media.tv.ITvInputSessionWrapper: com.android.internal.os.HandlerCaller mCaller>;

        $r3 = virtualinvoke r2.<com.android.internal.os.HandlerCaller: android.os.Message obtainMessageO(int,java.lang.Object)>(18, r1);

        virtualinvoke r2.<com.android.internal.os.HandlerCaller: void executeOrSendMessage(android.os.Message)>($r3);

        return;
    }

    public void tune(android.net.Uri, android.os.Bundle)
    {
        android.media.tv.ITvInputSessionWrapper r0;
        android.net.Uri r1;
        android.os.Bundle r2;
        com.android.internal.os.HandlerCaller r3, $r4;
        android.os.Message $r5;

        r0 := @this: android.media.tv.ITvInputSessionWrapper;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: android.os.Bundle;

        $r4 = r0.<android.media.tv.ITvInputSessionWrapper: com.android.internal.os.HandlerCaller mCaller>;

        virtualinvoke $r4.<com.android.internal.os.HandlerCaller: void removeMessages(int)>(6);

        r3 = r0.<android.media.tv.ITvInputSessionWrapper: com.android.internal.os.HandlerCaller mCaller>;

        $r5 = virtualinvoke r3.<com.android.internal.os.HandlerCaller: android.os.Message obtainMessageOO(int,java.lang.Object,java.lang.Object)>(6, r1, r2);

        virtualinvoke r3.<com.android.internal.os.HandlerCaller: void executeOrSendMessage(android.os.Message)>($r5);

        return;
    }

    public void unblockContent(java.lang.String)
    {
        android.media.tv.ITvInputSessionWrapper r0;
        java.lang.String r1;
        com.android.internal.os.HandlerCaller r2;
        android.os.Message $r3;

        r0 := @this: android.media.tv.ITvInputSessionWrapper;

        r1 := @parameter0: java.lang.String;

        r2 = r0.<android.media.tv.ITvInputSessionWrapper: com.android.internal.os.HandlerCaller mCaller>;

        $r3 = virtualinvoke r2.<com.android.internal.os.HandlerCaller: android.os.Message obtainMessageO(int,java.lang.Object)>(13, r1);

        virtualinvoke r2.<com.android.internal.os.HandlerCaller: void executeOrSendMessage(android.os.Message)>($r3);

        return;
    }

    public static void <clinit>()
    {
        <android.media.tv.ITvInputSessionWrapper: java.lang.String TAG> = "TvInputSessionWrapper";

        <android.media.tv.ITvInputSessionWrapper: int EXECUTE_MESSAGE_TUNE_TIMEOUT_MILLIS> = 2000;

        <android.media.tv.ITvInputSessionWrapper: int EXECUTE_MESSAGE_TIMEOUT_SHORT_MILLIS> = 50;

        <android.media.tv.ITvInputSessionWrapper: int EXECUTE_MESSAGE_TIMEOUT_LONG_MILLIS> = 5000;

        <android.media.tv.ITvInputSessionWrapper: int DO_UNBLOCK_CONTENT> = 13;

        <android.media.tv.ITvInputSessionWrapper: int DO_TUNE> = 6;

        <android.media.tv.ITvInputSessionWrapper: int DO_TIME_SHIFT_SET_PLAYBACK_PARAMS> = 18;

        <android.media.tv.ITvInputSessionWrapper: int DO_TIME_SHIFT_SEEK_TO> = 17;

        <android.media.tv.ITvInputSessionWrapper: int DO_TIME_SHIFT_RESUME> = 16;

        <android.media.tv.ITvInputSessionWrapper: int DO_TIME_SHIFT_PLAY> = 14;

        <android.media.tv.ITvInputSessionWrapper: int DO_TIME_SHIFT_PAUSE> = 15;

        <android.media.tv.ITvInputSessionWrapper: int DO_TIME_SHIFT_ENABLE_POSITION_TRACKING> = 19;

        <android.media.tv.ITvInputSessionWrapper: int DO_STOP_RECORDING> = 21;

        <android.media.tv.ITvInputSessionWrapper: int DO_START_RECORDING> = 20;

        <android.media.tv.ITvInputSessionWrapper: int DO_SET_SURFACE> = 3;

        <android.media.tv.ITvInputSessionWrapper: int DO_SET_STREAM_VOLUME> = 5;

        <android.media.tv.ITvInputSessionWrapper: int DO_SET_MAIN> = 2;

        <android.media.tv.ITvInputSessionWrapper: int DO_SET_CAPTION_ENABLED> = 7;

        <android.media.tv.ITvInputSessionWrapper: int DO_SELECT_TRACK> = 8;

        <android.media.tv.ITvInputSessionWrapper: int DO_REMOVE_OVERLAY_VIEW> = 12;

        <android.media.tv.ITvInputSessionWrapper: int DO_RELEASE> = 1;

        <android.media.tv.ITvInputSessionWrapper: int DO_RELAYOUT_OVERLAY_VIEW> = 11;

        <android.media.tv.ITvInputSessionWrapper: int DO_DISPATCH_SURFACE_CHANGED> = 4;

        <android.media.tv.ITvInputSessionWrapper: int DO_CREATE_OVERLAY_VIEW> = 10;

        <android.media.tv.ITvInputSessionWrapper: int DO_APP_PRIVATE_COMMAND> = 9;

        return;
    }
}
