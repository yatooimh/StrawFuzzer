public final class android.media.tv.TvContract extends java.lang.Object
{
    public static final java.lang.String ACTION_CHANNEL_BROWSABLE_REQUESTED;
    public static final java.lang.String ACTION_INITIALIZE_PROGRAMS;
    public static final java.lang.String ACTION_PREVIEW_PROGRAM_ADDED_TO_WATCH_NEXT;
    public static final java.lang.String ACTION_PREVIEW_PROGRAM_BROWSABLE_DISABLED;
    public static final java.lang.String ACTION_REQUEST_CHANNEL_BROWSABLE;
    public static final java.lang.String ACTION_WATCH_NEXT_PROGRAM_BROWSABLE_DISABLED;
    public static final java.lang.String AUTHORITY;
    public static final java.lang.String EXTRA_BLOCKED_PACKAGES;
    public static final java.lang.String EXTRA_CHANNEL_ID;
    public static final java.lang.String EXTRA_COLUMN_NAME;
    public static final java.lang.String EXTRA_DATA_TYPE;
    public static final java.lang.String EXTRA_DEFAULT_VALUE;
    public static final java.lang.String EXTRA_EXISTING_COLUMN_NAMES;
    public static final java.lang.String EXTRA_PACKAGE_NAME;
    public static final java.lang.String EXTRA_PREVIEW_PROGRAM_ID;
    public static final java.lang.String EXTRA_RESULT_CODE;
    public static final java.lang.String EXTRA_WATCH_NEXT_PROGRAM_ID;
    public static final java.lang.String METHOD_ADD_COLUMN;
    public static final java.lang.String METHOD_BLOCK_PACKAGE;
    public static final java.lang.String METHOD_GET_BLOCKED_PACKAGES;
    public static final java.lang.String METHOD_GET_COLUMNS;
    public static final java.lang.String METHOD_UNBLOCK_PACKAGE;
    public static final java.lang.String PARAM_BROWSABLE_ONLY;
    public static final java.lang.String PARAM_CANONICAL_GENRE;
    public static final java.lang.String PARAM_CHANNEL;
    public static final java.lang.String PARAM_END_TIME;
    public static final java.lang.String PARAM_INPUT;
    public static final java.lang.String PARAM_PACKAGE;
    public static final java.lang.String PARAM_PREVIEW;
    public static final java.lang.String PARAM_START_TIME;
    private static final java.lang.String PATH_CHANNEL;
    private static final java.lang.String PATH_PASSTHROUGH;
    private static final java.lang.String PATH_PREVIEW_PROGRAM;
    private static final java.lang.String PATH_PROGRAM;
    private static final java.lang.String PATH_RECORDED_PROGRAM;
    private static final java.lang.String PATH_WATCH_NEXT_PROGRAM;
    public static final java.lang.String PERMISSION_READ_TV_LISTINGS;
    public static final int RESULT_ERROR_INVALID_ARGUMENT;
    public static final int RESULT_ERROR_IO;
    public static final int RESULT_OK;

    private void <init>()
    {
        android.media.tv.TvContract r0;

        r0 := @this: android.media.tv.TvContract;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static android.net.Uri buildChannelLogoUri(long)
    {
        long l0;
        android.net.Uri $r0, $r1;

        l0 := @parameter0: long;

        $r0 = staticinvoke <android.media.tv.TvContract: android.net.Uri buildChannelUri(long)>(l0);

        $r1 = staticinvoke <android.media.tv.TvContract: android.net.Uri buildChannelLogoUri(android.net.Uri)>($r0);

        return $r1;
    }

    public static android.net.Uri buildChannelLogoUri(android.net.Uri)
    {
        android.net.Uri r0, $r7;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r6;

        r0 := @parameter0: android.net.Uri;

        $z0 = staticinvoke <android.media.tv.TvContract: boolean isChannelUriForTunerInput(android.net.Uri)>(r0);

        if $z0 == 0 goto label1;

        $r7 = staticinvoke <android.net.Uri: android.net.Uri withAppendedPath(android.net.Uri,java.lang.String)>(r0, "logo");

        return $r7;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a channel: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    public static android.net.Uri buildChannelUri(long)
    {
        long l0;
        android.net.Uri $r0, $r1;

        l0 := @parameter0: long;

        $r0 = <android.media.tv.TvContract$Channels: android.net.Uri CONTENT_URI>;

        $r1 = staticinvoke <android.content.ContentUris: android.net.Uri withAppendedId(android.net.Uri,long)>($r0, l0);

        return $r1;
    }

    public static android.net.Uri buildChannelUriForPassthroughInput(java.lang.String)
    {
        java.lang.String r0;
        android.net.Uri$Builder $r1, $r2, $r3, $r4, $r5;
        android.net.Uri $r6;

        r0 := @parameter0: java.lang.String;

        $r1 = new android.net.Uri$Builder;

        specialinvoke $r1.<android.net.Uri$Builder: void <init>()>();

        $r2 = virtualinvoke $r1.<android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)>("content");

        $r3 = virtualinvoke $r2.<android.net.Uri$Builder: android.net.Uri$Builder authority(java.lang.String)>("android.media.tv");

        $r4 = virtualinvoke $r3.<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>("passthrough");

        $r5 = virtualinvoke $r4.<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<android.net.Uri$Builder: android.net.Uri build()>();

        return $r6;
    }

    public static android.net.Uri buildChannelsUriForInput(java.lang.String)
    {
        java.lang.String r0;
        android.net.Uri $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <android.media.tv.TvContract: android.net.Uri buildChannelsUriForInput(java.lang.String,boolean)>(r0, 0);

        return $r1;
    }

    public static android.net.Uri buildChannelsUriForInput(java.lang.String, java.lang.String, boolean)
    {
        java.lang.String r0, $r6, r12;
        boolean z0, $z1;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r5;
        android.net.Uri $r7, $r10, $r11;
        android.net.Uri$Builder $r8, $r9;

        r12 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        if r0 != null goto label1;

        $r11 = staticinvoke <android.media.tv.TvContract: android.net.Uri buildChannelsUriForInput(java.lang.String,boolean)>(r12, z0);

        return $r11;

     label1:
        $z1 = staticinvoke <android.media.tv.TvContract$Programs$Genres: boolean isCanonical(java.lang.String)>(r0);

        if $z1 == 0 goto label2;

        $r7 = staticinvoke <android.media.tv.TvContract: android.net.Uri buildChannelsUriForInput(java.lang.String,boolean)>(r12, z0);

        $r8 = virtualinvoke $r7.<android.net.Uri: android.net.Uri$Builder buildUpon()>();

        $r9 = virtualinvoke $r8.<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>("canonical_genre", r0);

        $r10 = virtualinvoke $r9.<android.net.Uri$Builder: android.net.Uri build()>();

        return $r10;

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a canonical genre: \'");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    public static android.net.Uri buildChannelsUriForInput(java.lang.String, boolean)
    {
        java.lang.String r0, $r3;
        boolean z0;
        android.net.Uri$Builder r1, $r4;
        android.net.Uri $r2, $r5;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = <android.media.tv.TvContract$Channels: android.net.Uri CONTENT_URI>;

        r1 = virtualinvoke $r2.<android.net.Uri: android.net.Uri$Builder buildUpon()>();

        if r0 == null goto label1;

        virtualinvoke r1.<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>("input", r0);

     label1:
        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>(z0);

        $r4 = virtualinvoke r1.<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>("browsable_only", $r3);

        $r5 = virtualinvoke $r4.<android.net.Uri$Builder: android.net.Uri build()>();

        return $r5;
    }

    public static java.lang.String buildInputId(android.content.ComponentName)
    {
        android.content.ComponentName r0;
        java.lang.String $r1;

        r0 := @parameter0: android.content.ComponentName;

        $r1 = virtualinvoke r0.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        return $r1;
    }

    public static android.net.Uri buildPreviewProgramUri(long)
    {
        long l0;
        android.net.Uri $r0, $r1;

        l0 := @parameter0: long;

        $r0 = <android.media.tv.TvContract$PreviewPrograms: android.net.Uri CONTENT_URI>;

        $r1 = staticinvoke <android.content.ContentUris: android.net.Uri withAppendedId(android.net.Uri,long)>($r0, l0);

        return $r1;
    }

    public static android.net.Uri buildPreviewProgramsUriForChannel(long)
    {
        long l0;
        android.net.Uri $r0, $r4;
        android.net.Uri$Builder $r1, $r3;
        java.lang.String $r2;

        l0 := @parameter0: long;

        $r0 = <android.media.tv.TvContract$PreviewPrograms: android.net.Uri CONTENT_URI>;

        $r1 = virtualinvoke $r0.<android.net.Uri: android.net.Uri$Builder buildUpon()>();

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0);

        $r3 = virtualinvoke $r1.<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>("channel", $r2);

        $r4 = virtualinvoke $r3.<android.net.Uri$Builder: android.net.Uri build()>();

        return $r4;
    }

    public static android.net.Uri buildPreviewProgramsUriForChannel(android.net.Uri)
    {
        android.net.Uri r0, $r7;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r6;
        long $l0;

        r0 := @parameter0: android.net.Uri;

        $z0 = staticinvoke <android.media.tv.TvContract: boolean isChannelUriForTunerInput(android.net.Uri)>(r0);

        if $z0 == 0 goto label1;

        $l0 = staticinvoke <android.content.ContentUris: long parseId(android.net.Uri)>(r0);

        $r7 = staticinvoke <android.media.tv.TvContract: android.net.Uri buildPreviewProgramsUriForChannel(long)>($l0);

        return $r7;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a channel: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    public static android.net.Uri buildProgramUri(long)
    {
        long l0;
        android.net.Uri $r0, $r1;

        l0 := @parameter0: long;

        $r0 = <android.media.tv.TvContract$Programs: android.net.Uri CONTENT_URI>;

        $r1 = staticinvoke <android.content.ContentUris: android.net.Uri withAppendedId(android.net.Uri,long)>($r0, l0);

        return $r1;
    }

    public static android.net.Uri buildProgramsUriForChannel(long)
    {
        long l0;
        android.net.Uri $r0, $r4;
        android.net.Uri$Builder $r1, $r3;
        java.lang.String $r2;

        l0 := @parameter0: long;

        $r0 = <android.media.tv.TvContract$Programs: android.net.Uri CONTENT_URI>;

        $r1 = virtualinvoke $r0.<android.net.Uri: android.net.Uri$Builder buildUpon()>();

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0);

        $r3 = virtualinvoke $r1.<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>("channel", $r2);

        $r4 = virtualinvoke $r3.<android.net.Uri$Builder: android.net.Uri build()>();

        return $r4;
    }

    public static android.net.Uri buildProgramsUriForChannel(long, long, long)
    {
        long l0, l1, l2;
        android.net.Uri $r0, $r6;
        android.net.Uri$Builder $r1, $r3, $r5;
        java.lang.String $r2, $r4;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        $r0 = staticinvoke <android.media.tv.TvContract: android.net.Uri buildProgramsUriForChannel(long)>(l0);

        $r1 = virtualinvoke $r0.<android.net.Uri: android.net.Uri$Builder buildUpon()>();

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l1);

        $r3 = virtualinvoke $r1.<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>("start_time", $r2);

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l2);

        $r5 = virtualinvoke $r3.<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>("end_time", $r4);

        $r6 = virtualinvoke $r5.<android.net.Uri$Builder: android.net.Uri build()>();

        return $r6;
    }

    public static android.net.Uri buildProgramsUriForChannel(android.net.Uri)
    {
        android.net.Uri r0, $r7;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r6;
        long $l0;

        r0 := @parameter0: android.net.Uri;

        $z0 = staticinvoke <android.media.tv.TvContract: boolean isChannelUriForTunerInput(android.net.Uri)>(r0);

        if $z0 == 0 goto label1;

        $l0 = staticinvoke <android.content.ContentUris: long parseId(android.net.Uri)>(r0);

        $r7 = staticinvoke <android.media.tv.TvContract: android.net.Uri buildProgramsUriForChannel(long)>($l0);

        return $r7;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a channel: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    public static android.net.Uri buildProgramsUriForChannel(android.net.Uri, long, long)
    {
        android.net.Uri r0, $r7;
        long l0, l1, $l2;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r6;

        r0 := @parameter0: android.net.Uri;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $z0 = staticinvoke <android.media.tv.TvContract: boolean isChannelUriForTunerInput(android.net.Uri)>(r0);

        if $z0 == 0 goto label1;

        $l2 = staticinvoke <android.content.ContentUris: long parseId(android.net.Uri)>(r0);

        $r7 = staticinvoke <android.media.tv.TvContract: android.net.Uri buildProgramsUriForChannel(long,long,long)>($l2, l0, l1);

        return $r7;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a channel: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    public static android.net.Uri buildRecordedProgramUri(long)
    {
        long l0;
        android.net.Uri $r0, $r1;

        l0 := @parameter0: long;

        $r0 = <android.media.tv.TvContract$RecordedPrograms: android.net.Uri CONTENT_URI>;

        $r1 = staticinvoke <android.content.ContentUris: android.net.Uri withAppendedId(android.net.Uri,long)>($r0, l0);

        return $r1;
    }

    public static android.net.Uri buildWatchNextProgramUri(long)
    {
        long l0;
        android.net.Uri $r0, $r1;

        l0 := @parameter0: long;

        $r0 = <android.media.tv.TvContract$WatchNextPrograms: android.net.Uri CONTENT_URI>;

        $r1 = staticinvoke <android.content.ContentUris: android.net.Uri withAppendedId(android.net.Uri,long)>($r0, l0);

        return $r1;
    }

    public static android.net.Uri buildWatchedProgramUri(long)
    {
        long l0;
        android.net.Uri $r0, $r1;

        l0 := @parameter0: long;

        $r0 = <android.media.tv.TvContract$WatchedPrograms: android.net.Uri CONTENT_URI>;

        $r1 = staticinvoke <android.content.ContentUris: android.net.Uri withAppendedId(android.net.Uri,long)>($r0, l0);

        return $r1;
    }

    public static boolean isChannelUri(android.net.Uri)
    {
        android.net.Uri r0;
        boolean $z0, $z1, z2;

        r0 := @parameter0: android.net.Uri;

        $z0 = staticinvoke <android.media.tv.TvContract: boolean isChannelUriForTunerInput(android.net.Uri)>(r0);

        if $z0 != 0 goto label2;

        $z1 = staticinvoke <android.media.tv.TvContract: boolean isChannelUriForPassthroughInput(android.net.Uri)>(r0);

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    public static boolean isChannelUriForPassthroughInput(android.net.Uri)
    {
        android.net.Uri r0;
        boolean $z0, $z1, z2;

        r0 := @parameter0: android.net.Uri;

        $z0 = staticinvoke <android.media.tv.TvContract: boolean isTvUri(android.net.Uri)>(r0);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <android.media.tv.TvContract: boolean isTwoSegmentUriStartingWith(android.net.Uri,java.lang.String)>(r0, "passthrough");

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    public static boolean isChannelUriForTunerInput(android.net.Uri)
    {
        android.net.Uri r0;
        boolean $z0, $z1, z2;

        r0 := @parameter0: android.net.Uri;

        $z0 = staticinvoke <android.media.tv.TvContract: boolean isTvUri(android.net.Uri)>(r0);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <android.media.tv.TvContract: boolean isTwoSegmentUriStartingWith(android.net.Uri,java.lang.String)>(r0, "channel");

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    public static boolean isProgramUri(android.net.Uri)
    {
        android.net.Uri r0;
        boolean $z0, $z1, z2;

        r0 := @parameter0: android.net.Uri;

        $z0 = staticinvoke <android.media.tv.TvContract: boolean isTvUri(android.net.Uri)>(r0);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <android.media.tv.TvContract: boolean isTwoSegmentUriStartingWith(android.net.Uri,java.lang.String)>(r0, "program");

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    public static boolean isRecordedProgramUri(android.net.Uri)
    {
        android.net.Uri r0;
        boolean $z0, $z1, z2;

        r0 := @parameter0: android.net.Uri;

        $z0 = staticinvoke <android.media.tv.TvContract: boolean isTvUri(android.net.Uri)>(r0);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <android.media.tv.TvContract: boolean isTwoSegmentUriStartingWith(android.net.Uri,java.lang.String)>(r0, "recorded_program");

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    private static boolean isTvUri(android.net.Uri)
    {
        android.net.Uri r0;
        java.lang.String $r1, $r2, $r3, $r4;
        boolean $z0, $z1, z2;

        r0 := @parameter0: android.net.Uri;

        if r0 == null goto label1;

        $r1 = "content";

        $r2 = virtualinvoke r0.<android.net.Uri: java.lang.String getScheme()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $r3 = "android.media.tv";

        $r4 = virtualinvoke r0.<android.net.Uri: java.lang.String getAuthority()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    private static boolean isTwoSegmentUriStartingWith(android.net.Uri, java.lang.String)
    {
        java.lang.String r0;
        int i0;
        java.lang.Object $r1;
        boolean $z1, z2;
        android.net.Uri r2;
        java.util.List r3;

        r2 := @parameter0: android.net.Uri;

        r0 := @parameter1: java.lang.String;

        r3 = virtualinvoke r2.<android.net.Uri: java.util.List getPathSegments()>();

        i0 = interfaceinvoke r3.<java.util.List: int size()>();

        z2 = 0;

        if i0 != 2 goto label1;

        z2 = 0;

        $r1 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0);

        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z1 == 0 goto label1;

        z2 = 1;

     label1:
        return z2;
    }

    public static void requestChannelBrowsable(android.content.Context, long)
    {
        long l0;
        java.lang.Object $r0;
        android.net.Uri $r1;
        android.content.Context r2;
        android.media.tv.TvInputManager r3;

        r2 := @parameter0: android.content.Context;

        l0 := @parameter1: long;

        $r0 = virtualinvoke r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("tv_input");

        r3 = (android.media.tv.TvInputManager) $r0;

        if r3 == null goto label1;

        $r1 = staticinvoke <android.media.tv.TvContract: android.net.Uri buildChannelUri(long)>(l0);

        virtualinvoke r3.<android.media.tv.TvInputManager: void requestChannelBrowsable(android.net.Uri)>($r1);

     label1:
        return;
    }

    public static void <clinit>()
    {
        <android.media.tv.TvContract: int RESULT_OK> = 0;

        <android.media.tv.TvContract: int RESULT_ERROR_IO> = 1;

        <android.media.tv.TvContract: int RESULT_ERROR_INVALID_ARGUMENT> = 2;

        <android.media.tv.TvContract: java.lang.String PERMISSION_READ_TV_LISTINGS> = "android.permission.READ_TV_LISTINGS";

        <android.media.tv.TvContract: java.lang.String PATH_WATCH_NEXT_PROGRAM> = "watch_next_program";

        <android.media.tv.TvContract: java.lang.String PATH_RECORDED_PROGRAM> = "recorded_program";

        <android.media.tv.TvContract: java.lang.String PATH_PROGRAM> = "program";

        <android.media.tv.TvContract: java.lang.String PATH_PREVIEW_PROGRAM> = "preview_program";

        <android.media.tv.TvContract: java.lang.String PATH_PASSTHROUGH> = "passthrough";

        <android.media.tv.TvContract: java.lang.String PATH_CHANNEL> = "channel";

        <android.media.tv.TvContract: java.lang.String PARAM_START_TIME> = "start_time";

        <android.media.tv.TvContract: java.lang.String PARAM_PREVIEW> = "preview";

        <android.media.tv.TvContract: java.lang.String PARAM_PACKAGE> = "package";

        <android.media.tv.TvContract: java.lang.String PARAM_INPUT> = "input";

        <android.media.tv.TvContract: java.lang.String PARAM_END_TIME> = "end_time";

        <android.media.tv.TvContract: java.lang.String PARAM_CHANNEL> = "channel";

        <android.media.tv.TvContract: java.lang.String PARAM_CANONICAL_GENRE> = "canonical_genre";

        <android.media.tv.TvContract: java.lang.String PARAM_BROWSABLE_ONLY> = "browsable_only";

        <android.media.tv.TvContract: java.lang.String METHOD_UNBLOCK_PACKAGE> = "unblock_package";

        <android.media.tv.TvContract: java.lang.String METHOD_GET_COLUMNS> = "get_columns";

        <android.media.tv.TvContract: java.lang.String METHOD_GET_BLOCKED_PACKAGES> = "get_blocked_packages";

        <android.media.tv.TvContract: java.lang.String METHOD_BLOCK_PACKAGE> = "block_package";

        <android.media.tv.TvContract: java.lang.String METHOD_ADD_COLUMN> = "add_column";

        <android.media.tv.TvContract: java.lang.String EXTRA_WATCH_NEXT_PROGRAM_ID> = "android.media.tv.extra.WATCH_NEXT_PROGRAM_ID";

        <android.media.tv.TvContract: java.lang.String EXTRA_RESULT_CODE> = "android.media.tv.extra.RESULT_CODE";

        <android.media.tv.TvContract: java.lang.String EXTRA_PREVIEW_PROGRAM_ID> = "android.media.tv.extra.PREVIEW_PROGRAM_ID";

        <android.media.tv.TvContract: java.lang.String EXTRA_PACKAGE_NAME> = "android.media.tv.extra.PACKAGE_NAME";

        <android.media.tv.TvContract: java.lang.String EXTRA_EXISTING_COLUMN_NAMES> = "android.media.tv.extra.EXISTING_COLUMN_NAMES";

        <android.media.tv.TvContract: java.lang.String EXTRA_DEFAULT_VALUE> = "android.media.tv.extra.DEFAULT_VALUE";

        <android.media.tv.TvContract: java.lang.String EXTRA_DATA_TYPE> = "android.media.tv.extra.DATA_TYPE";

        <android.media.tv.TvContract: java.lang.String EXTRA_COLUMN_NAME> = "android.media.tv.extra.COLUMN_NAME";

        <android.media.tv.TvContract: java.lang.String EXTRA_CHANNEL_ID> = "android.media.tv.extra.CHANNEL_ID";

        <android.media.tv.TvContract: java.lang.String EXTRA_BLOCKED_PACKAGES> = "android.media.tv.extra.BLOCKED_PACKAGES";

        <android.media.tv.TvContract: java.lang.String AUTHORITY> = "android.media.tv";

        <android.media.tv.TvContract: java.lang.String ACTION_WATCH_NEXT_PROGRAM_BROWSABLE_DISABLED> = "android.media.tv.action.WATCH_NEXT_PROGRAM_BROWSABLE_DISABLED";

        <android.media.tv.TvContract: java.lang.String ACTION_REQUEST_CHANNEL_BROWSABLE> = "android.media.tv.action.REQUEST_CHANNEL_BROWSABLE";

        <android.media.tv.TvContract: java.lang.String ACTION_PREVIEW_PROGRAM_BROWSABLE_DISABLED> = "android.media.tv.action.PREVIEW_PROGRAM_BROWSABLE_DISABLED";

        <android.media.tv.TvContract: java.lang.String ACTION_PREVIEW_PROGRAM_ADDED_TO_WATCH_NEXT> = "android.media.tv.action.PREVIEW_PROGRAM_ADDED_TO_WATCH_NEXT";

        <android.media.tv.TvContract: java.lang.String ACTION_INITIALIZE_PROGRAMS> = "android.media.tv.action.INITIALIZE_PROGRAMS";

        <android.media.tv.TvContract: java.lang.String ACTION_CHANNEL_BROWSABLE_REQUESTED> = "android.media.tv.action.CHANNEL_BROWSABLE_REQUESTED";

        return;
    }
}
