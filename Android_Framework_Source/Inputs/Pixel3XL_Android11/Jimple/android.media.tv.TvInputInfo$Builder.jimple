public final class android.media.tv.TvInputInfo$Builder extends java.lang.Object
{
    private static final java.lang.String DELIMITER_INFO_IN_ID;
    private static final int LENGTH_HDMI_DEVICE_ID;
    private static final int LENGTH_HDMI_PHYSICAL_ADDRESS;
    private static final java.lang.String PREFIX_HARDWARE_DEVICE;
    private static final java.lang.String PREFIX_HDMI_DEVICE;
    private static final java.lang.String XML_START_TAG_NAME;
    private static final android.util.SparseIntArray sHardwareTypeToTvInputType;
    private java.lang.Boolean mCanRecord;
    private final android.content.Context mContext;
    private android.os.Bundle mExtras;
    private android.hardware.hdmi.HdmiDeviceInfo mHdmiDeviceInfo;
    private android.graphics.drawable.Icon mIcon;
    private android.graphics.drawable.Icon mIconDisconnected;
    private android.graphics.drawable.Icon mIconStandby;
    private java.lang.CharSequence mLabel;
    private int mLabelResId;
    private java.lang.String mParentId;
    private final android.content.pm.ResolveInfo mResolveInfo;
    private java.lang.String mSetupActivity;
    private java.lang.Integer mTunerCount;
    private android.media.tv.TvInputHardwareInfo mTvInputHardwareInfo;

    static void <clinit>()
    {
        android.util.SparseIntArray $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;

        <android.media.tv.TvInputInfo$Builder: java.lang.String XML_START_TAG_NAME> = "tv-input";

        <android.media.tv.TvInputInfo$Builder: java.lang.String PREFIX_HDMI_DEVICE> = "HDMI";

        <android.media.tv.TvInputInfo$Builder: java.lang.String PREFIX_HARDWARE_DEVICE> = "HW";

        <android.media.tv.TvInputInfo$Builder: int LENGTH_HDMI_PHYSICAL_ADDRESS> = 4;

        <android.media.tv.TvInputInfo$Builder: int LENGTH_HDMI_DEVICE_ID> = 2;

        <android.media.tv.TvInputInfo$Builder: java.lang.String DELIMITER_INFO_IN_ID> = "/";

        $r1 = new android.util.SparseIntArray;

        specialinvoke $r1.<android.util.SparseIntArray: void <init>()>();

        <android.media.tv.TvInputInfo$Builder: android.util.SparseIntArray sHardwareTypeToTvInputType> = $r1;

        virtualinvoke $r1.<android.util.SparseIntArray: void put(int,int)>(1, 1000);

        $r2 = <android.media.tv.TvInputInfo$Builder: android.util.SparseIntArray sHardwareTypeToTvInputType>;

        virtualinvoke $r2.<android.util.SparseIntArray: void put(int,int)>(2, 0);

        $r3 = <android.media.tv.TvInputInfo$Builder: android.util.SparseIntArray sHardwareTypeToTvInputType>;

        virtualinvoke $r3.<android.util.SparseIntArray: void put(int,int)>(3, 1001);

        $r4 = <android.media.tv.TvInputInfo$Builder: android.util.SparseIntArray sHardwareTypeToTvInputType>;

        virtualinvoke $r4.<android.util.SparseIntArray: void put(int,int)>(4, 1002);

        $r5 = <android.media.tv.TvInputInfo$Builder: android.util.SparseIntArray sHardwareTypeToTvInputType>;

        virtualinvoke $r5.<android.util.SparseIntArray: void put(int,int)>(5, 1003);

        $r6 = <android.media.tv.TvInputInfo$Builder: android.util.SparseIntArray sHardwareTypeToTvInputType>;

        virtualinvoke $r6.<android.util.SparseIntArray: void put(int,int)>(6, 1004);

        $r7 = <android.media.tv.TvInputInfo$Builder: android.util.SparseIntArray sHardwareTypeToTvInputType>;

        virtualinvoke $r7.<android.util.SparseIntArray: void put(int,int)>(7, 1005);

        $r8 = <android.media.tv.TvInputInfo$Builder: android.util.SparseIntArray sHardwareTypeToTvInputType>;

        virtualinvoke $r8.<android.util.SparseIntArray: void put(int,int)>(8, 1006);

        $r9 = <android.media.tv.TvInputInfo$Builder: android.util.SparseIntArray sHardwareTypeToTvInputType>;

        virtualinvoke $r9.<android.util.SparseIntArray: void put(int,int)>(9, 1007);

        $r10 = <android.media.tv.TvInputInfo$Builder: android.util.SparseIntArray sHardwareTypeToTvInputType>;

        virtualinvoke $r10.<android.util.SparseIntArray: void put(int,int)>(10, 1008);

        return;
    }

    public void <init>(android.content.Context, android.content.ComponentName)
    {
        android.media.tv.TvInputInfo$Builder r0;
        android.content.Context r1;
        java.lang.IllegalArgumentException $r2, $r5;
        android.content.Intent $r3, r7;
        android.content.pm.PackageManager $r4;
        android.content.ComponentName r6;
        android.content.pm.ResolveInfo r8;

        r0 := @this: android.media.tv.TvInputInfo$Builder;

        r1 := @parameter0: android.content.Context;

        r6 := @parameter1: android.content.ComponentName;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 == null goto label2;

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>("android.media.tv.TvInputService");

        r7 = virtualinvoke $r3.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>(r6);

        $r4 = virtualinvoke r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r8 = virtualinvoke $r4.<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveService(android.content.Intent,int)>(r7, 132);

        r0.<android.media.tv.TvInputInfo$Builder: android.content.pm.ResolveInfo mResolveInfo> = r8;

        if r8 == null goto label1;

        r0.<android.media.tv.TvInputInfo$Builder: android.content.Context mContext> = r1;

        return;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid component. Can\'t find the service.");

        throw $r5;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("context cannot be null.");

        throw $r2;
    }

    public void <init>(android.content.Context, android.content.pm.ResolveInfo)
    {
        android.media.tv.TvInputInfo$Builder r0;
        android.content.Context r1;
        android.content.pm.ResolveInfo r2;
        java.lang.IllegalArgumentException $r3, $r4;

        r0 := @this: android.media.tv.TvInputInfo$Builder;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.content.pm.ResolveInfo;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 == null goto label2;

        if r2 == null goto label1;

        r0.<android.media.tv.TvInputInfo$Builder: android.content.Context mContext> = r1;

        r0.<android.media.tv.TvInputInfo$Builder: android.content.pm.ResolveInfo mResolveInfo> = r2;

        return;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("resolveInfo cannot be null");

        throw $r4;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("context cannot be null");

        throw $r3;
    }

    private static java.lang.String generateInputId(android.content.ComponentName)
    {
        android.content.ComponentName r0;
        java.lang.String $r1;

        r0 := @parameter0: android.content.ComponentName;

        $r1 = virtualinvoke r0.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        return $r1;
    }

    private static java.lang.String generateInputId(android.content.ComponentName, android.hardware.hdmi.HdmiDeviceInfo)
    {
        android.content.ComponentName r0;
        android.hardware.hdmi.HdmiDeviceInfo r1;
        java.lang.StringBuilder $r3;
        java.lang.String $r4, $r10, $r12;
        java.lang.Object[] $r6;
        java.util.Locale $r7;
        int $i0, $i1;
        java.lang.Integer $r8, $r9;

        r0 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: android.hardware.hdmi.HdmiDeviceInfo;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r0.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r7 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r6 = newarray (java.lang.Object)[2];

        $i0 = virtualinvoke r1.<android.hardware.hdmi.HdmiDeviceInfo: int getPhysicalAddress()>();

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r6[0] = $r8;

        $i1 = virtualinvoke r1.<android.hardware.hdmi.HdmiDeviceInfo: int getId()>();

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r6[1] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r7, "/HDMI%04X%02X", $r6);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }

    private static java.lang.String generateInputId(android.content.ComponentName, android.media.tv.TvInputHardwareInfo)
    {
        android.content.ComponentName r0;
        android.media.tv.TvInputHardwareInfo r1;
        java.lang.StringBuilder $r3;
        java.lang.String $r4, $r9;
        int $i0;

        r0 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: android.media.tv.TvInputHardwareInfo;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r0.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HW");

        $i0 = virtualinvoke r1.<android.media.tv.TvInputHardwareInfo: int getDeviceId()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    private static int getRelativePosition(android.content.Context, android.hardware.hdmi.HdmiDeviceInfo)
    {
        android.hardware.hdmi.HdmiDeviceInfo r0;
        java.lang.Object $r1;
        int $i0, $i1, $i2;
        android.content.Context r2;
        android.hardware.hdmi.HdmiControlManager r3;

        r2 := @parameter0: android.content.Context;

        r0 := @parameter1: android.hardware.hdmi.HdmiDeviceInfo;

        $r1 = virtualinvoke r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("hdmi_control");

        r3 = (android.hardware.hdmi.HdmiControlManager) $r1;

        if r3 != null goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke r0.<android.hardware.hdmi.HdmiDeviceInfo: int getPhysicalAddress()>();

        $i1 = virtualinvoke r3.<android.hardware.hdmi.HdmiControlManager: int getPhysicalAddress()>();

        $i2 = staticinvoke <android.hardware.hdmi.HdmiUtils: int getHdmiAddressRelativePosition(int,int)>($i0, $i1);

        return $i2;
    }

    private void parseServiceMetadata(int)
    {
        android.media.tv.TvInputInfo$Builder r0;
        int i0, i1, $i2;
        android.content.pm.ServiceInfo r1;
        android.content.pm.ResolveInfo $r2;
        android.content.Context $r3;
        java.lang.String $r5, $r7, $r9, $r10, $r12, $r14, $r16, $r26, $r29, $r33, $r36;
        android.content.pm.ApplicationInfo $r8;
        boolean $z0, $z1;
        int[] $r15;
        java.lang.Boolean $r17, $r20;
        java.lang.Integer $r18, $r19;
        java.lang.Throwable $r21, $r22, $r23;
        java.lang.StringBuilder $r24, $r31, r43, r46;
        java.lang.IllegalStateException $r28, $r35, r42, r45;
        android.content.pm.PackageManager$NameNotFoundException $r30;
        android.content.pm.PackageManager r37;
        android.content.res.XmlResourceParser r38;
        android.content.res.Resources r39;
        android.util.AttributeSet r40;
        android.content.res.TypedArray r41;

        r0 := @this: android.media.tv.TvInputInfo$Builder;

        i0 := @parameter0: int;

        $r2 = r0.<android.media.tv.TvInputInfo$Builder: android.content.pm.ResolveInfo mResolveInfo>;

        r1 = $r2.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r3 = r0.<android.media.tv.TvInputInfo$Builder: android.content.Context mContext>;

        r37 = virtualinvoke $r3.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

     label01:
        r38 = virtualinvoke r1.<android.content.pm.ServiceInfo: android.content.res.XmlResourceParser loadXmlMetaData(android.content.pm.PackageManager,java.lang.String)>(r37, "android.media.tv.input");

     label02:
        if r38 == null goto label16;

     label03:
        $r8 = r1.<android.content.pm.ServiceInfo: android.content.pm.ApplicationInfo applicationInfo>;

        r39 = virtualinvoke r37.<android.content.pm.PackageManager: android.content.res.Resources getResourcesForApplication(android.content.pm.ApplicationInfo)>($r8);

        r40 = staticinvoke <android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>(r38);

     label04:
        i1 = interfaceinvoke r38.<android.content.res.XmlResourceParser: int next()>();

     label05:
        if i1 == 1 goto label06;

        if i1 == 2 goto label06;

        goto label04;

     label06:
        $r9 = "tv-input";

        $r10 = interfaceinvoke r38.<android.content.res.XmlResourceParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z0 == 0 goto label14;

        $r15 = <com.android.internal.R$styleable: int[] TvInputService>;

        r41 = virtualinvoke r39.<android.content.res.Resources: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])>(r40, $r15);

        $r16 = virtualinvoke r41.<android.content.res.TypedArray: java.lang.String getString(int)>(1);

        r0.<android.media.tv.TvInputInfo$Builder: java.lang.String mSetupActivity> = $r16;

        $r17 = r0.<android.media.tv.TvInputInfo$Builder: java.lang.Boolean mCanRecord>;

        if $r17 != null goto label07;

        $z1 = virtualinvoke r41.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(2, 0);

        $r20 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        r0.<android.media.tv.TvInputInfo$Builder: java.lang.Boolean mCanRecord> = $r20;

     label07:
        $r18 = r0.<android.media.tv.TvInputInfo$Builder: java.lang.Integer mTunerCount>;

        if $r18 != null goto label10;

     label08:
        if i0 != 0 goto label10;

     label09:
        $i2 = virtualinvoke r41.<android.content.res.TypedArray: int getInt(int,int)>(3, 1);

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        r0.<android.media.tv.TvInputInfo$Builder: java.lang.Integer mTunerCount> = $r19;

     label10:
        virtualinvoke r41.<android.content.res.TypedArray: void recycle()>();

     label11:
        if r38 == null goto label13;

     label12:
        interfaceinvoke r38.<android.content.res.XmlResourceParser: void close()>();

     label13:
        return;

     label14:
        r42 = new java.lang.IllegalStateException;

        r43 = new java.lang.StringBuilder;

        specialinvoke r43.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Meta-data does not start with tv-input tag for ");

        $r12 = r1.<android.content.pm.ServiceInfo: java.lang.String name>;

        virtualinvoke r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke r43.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r42.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        throw r42;

     label15:
        $r21 := @caughtexception;

        goto label17;

     label16:
        r45 = new java.lang.IllegalStateException;

        r46 = new java.lang.StringBuilder;

        specialinvoke r46.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No android.media.tv.input meta-data found for ");

        $r5 = r1.<android.content.pm.ServiceInfo: java.lang.String name>;

        virtualinvoke r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke r46.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r45.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw r45;

     label17:
        if r38 == null goto label22;

     label18:
        interfaceinvoke r38.<android.content.res.XmlResourceParser: void close()>();

     label19:
        goto label22;

     label20:
        $r22 := @caughtexception;

     label21:
        virtualinvoke $r21.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r22);

     label22:
        throw $r21;

     label23:
        $r30 := @caughtexception;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No resources found for ");

        $r33 = r1.<android.content.pm.ServiceInfo: java.lang.String packageName>;

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = new java.lang.IllegalStateException;

        $r36 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r35.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r36, $r30);

        throw $r35;

     label24:
        $r23 := @caughtexception;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed reading meta-data for ");

        $r26 = r1.<android.content.pm.ServiceInfo: java.lang.String packageName>;

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = new java.lang.IllegalStateException;

        $r29 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r29, $r23);

        throw $r28;

        catch java.io.IOException from label01 to label02 with label24;
        catch org.xmlpull.v1.XmlPullParserException from label01 to label02 with label24;
        catch android.content.pm.PackageManager$NameNotFoundException from label01 to label02 with label23;
        catch java.lang.Throwable from label03 to label04 with label15;
        catch java.lang.Throwable from label04 to label05 with label15;
        catch java.lang.Throwable from label06 to label07 with label15;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.io.IOException from label12 to label13 with label24;
        catch org.xmlpull.v1.XmlPullParserException from label12 to label13 with label24;
        catch android.content.pm.PackageManager$NameNotFoundException from label12 to label13 with label23;
        catch java.lang.Throwable from label14 to label15 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.io.IOException from label21 to label22 with label24;
        catch org.xmlpull.v1.XmlPullParserException from label21 to label22 with label24;
        catch android.content.pm.PackageManager$NameNotFoundException from label21 to label22 with label23;
        catch java.io.IOException from label22 to label23 with label24;
        catch org.xmlpull.v1.XmlPullParserException from label22 to label23 with label24;
        catch android.content.pm.PackageManager$NameNotFoundException from label22 to label23 with label23;
    }

    public android.media.tv.TvInputInfo build()
    {
        android.media.tv.TvInputInfo$Builder r0;
        android.content.pm.ResolveInfo r1, $r7, $r9;
        int i0, $i1, i2, i3, i4;
        android.graphics.drawable.Icon r2, r3, r4;
        java.lang.String r5, $r11, $r12, $r15, r23;
        android.content.ComponentName $r6;
        android.content.pm.ServiceInfo $r8, $r10;
        android.media.tv.TvInputInfo $r13;
        android.os.Bundle $r14;
        android.hardware.hdmi.HdmiDeviceInfo $r16, $r19, r22;
        android.media.tv.TvInputHardwareInfo $r17, r24;
        android.util.SparseIntArray $r18;
        android.content.Context $r20;
        boolean z0, z1, z3, z4;
        java.lang.CharSequence r25;
        java.lang.Boolean r26;
        java.lang.Integer r27;

        r0 := @this: android.media.tv.TvInputInfo$Builder;

        $r6 = new android.content.ComponentName;

        $r7 = r0.<android.media.tv.TvInputInfo$Builder: android.content.pm.ResolveInfo mResolveInfo>;

        $r8 = $r7.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r12 = $r8.<android.content.pm.ServiceInfo: java.lang.String packageName>;

        $r9 = r0.<android.media.tv.TvInputInfo$Builder: android.content.pm.ResolveInfo mResolveInfo>;

        $r10 = $r9.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r11 = $r10.<android.content.pm.ServiceInfo: java.lang.String name>;

        specialinvoke $r6.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>($r12, $r11);

        z0 = 0;

        z1 = 0;

        i2 = 0;

        r22 = r0.<android.media.tv.TvInputInfo$Builder: android.hardware.hdmi.HdmiDeviceInfo mHdmiDeviceInfo>;

        i3 = 0;

        if r22 == null goto label3;

        r23 = staticinvoke <android.media.tv.TvInputInfo$Builder: java.lang.String generateInputId(android.content.ComponentName,android.hardware.hdmi.HdmiDeviceInfo)>($r6, r22);

        i4 = 1007;

        $r20 = r0.<android.media.tv.TvInputInfo$Builder: android.content.Context mContext>;

        $r19 = r0.<android.media.tv.TvInputInfo$Builder: android.hardware.hdmi.HdmiDeviceInfo mHdmiDeviceInfo>;

        i2 = staticinvoke <android.media.tv.TvInputInfo$Builder: int getRelativePosition(android.content.Context,android.hardware.hdmi.HdmiDeviceInfo)>($r20, $r19);

        z3 = 1;

        if i2 == 1 goto label1;

        goto label2;

     label1:
        z3 = 0;

     label2:
        z1 = z3;

        z0 = 1;

        goto label5;

     label3:
        r24 = r0.<android.media.tv.TvInputInfo$Builder: android.media.tv.TvInputHardwareInfo mTvInputHardwareInfo>;

        if r24 == null goto label4;

        r23 = staticinvoke <android.media.tv.TvInputInfo$Builder: java.lang.String generateInputId(android.content.ComponentName,android.media.tv.TvInputHardwareInfo)>($r6, r24);

        $r18 = <android.media.tv.TvInputInfo$Builder: android.util.SparseIntArray sHardwareTypeToTvInputType>;

        $r17 = r0.<android.media.tv.TvInputInfo$Builder: android.media.tv.TvInputHardwareInfo mTvInputHardwareInfo>;

        $i1 = virtualinvoke $r17.<android.media.tv.TvInputHardwareInfo: int getType()>();

        i4 = virtualinvoke $r18.<android.util.SparseIntArray: int get(int,int)>($i1, 0);

        z0 = 1;

        goto label5;

     label4:
        r23 = staticinvoke <android.media.tv.TvInputInfo$Builder: java.lang.String generateInputId(android.content.ComponentName)>($r6);

        i4 = 0;

     label5:
        specialinvoke r0.<android.media.tv.TvInputInfo$Builder: void parseServiceMetadata(int)>(i4);

        r1 = r0.<android.media.tv.TvInputInfo$Builder: android.content.pm.ResolveInfo mResolveInfo>;

        r25 = r0.<android.media.tv.TvInputInfo$Builder: java.lang.CharSequence mLabel>;

        i0 = r0.<android.media.tv.TvInputInfo$Builder: int mLabelResId>;

        r2 = r0.<android.media.tv.TvInputInfo$Builder: android.graphics.drawable.Icon mIcon>;

        r3 = r0.<android.media.tv.TvInputInfo$Builder: android.graphics.drawable.Icon mIconStandby>;

        r4 = r0.<android.media.tv.TvInputInfo$Builder: android.graphics.drawable.Icon mIconDisconnected>;

        r5 = r0.<android.media.tv.TvInputInfo$Builder: java.lang.String mSetupActivity>;

        r26 = r0.<android.media.tv.TvInputInfo$Builder: java.lang.Boolean mCanRecord>;

        if r26 != null goto label6;

        z4 = 0;

        goto label7;

     label6:
        z4 = virtualinvoke r26.<java.lang.Boolean: boolean booleanValue()>();

     label7:
        r27 = r0.<android.media.tv.TvInputInfo$Builder: java.lang.Integer mTunerCount>;

        if r27 != null goto label8;

        goto label9;

     label8:
        i3 = virtualinvoke r27.<java.lang.Integer: int intValue()>();

     label9:
        $r13 = new android.media.tv.TvInputInfo;

        $r16 = r0.<android.media.tv.TvInputInfo$Builder: android.hardware.hdmi.HdmiDeviceInfo mHdmiDeviceInfo>;

        $r15 = r0.<android.media.tv.TvInputInfo$Builder: java.lang.String mParentId>;

        $r14 = r0.<android.media.tv.TvInputInfo$Builder: android.os.Bundle mExtras>;

        specialinvoke $r13.<android.media.tv.TvInputInfo: void <init>(android.content.pm.ResolveInfo,java.lang.String,int,boolean,java.lang.CharSequence,int,android.graphics.drawable.Icon,android.graphics.drawable.Icon,android.graphics.drawable.Icon,java.lang.String,boolean,int,android.hardware.hdmi.HdmiDeviceInfo,boolean,int,java.lang.String,android.os.Bundle,android.media.tv.TvInputInfo$1)>(r1, r23, i4, z0, r25, i0, r2, r3, r4, r5, z4, i3, $r16, z1, i2, $r15, $r14, null);

        return $r13;
    }

    public android.media.tv.TvInputInfo$Builder setCanRecord(boolean)
    {
        android.media.tv.TvInputInfo$Builder r0;
        boolean z0;
        java.lang.Boolean $r1;

        r0 := @this: android.media.tv.TvInputInfo$Builder;

        z0 := @parameter0: boolean;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        r0.<android.media.tv.TvInputInfo$Builder: java.lang.Boolean mCanRecord> = $r1;

        return r0;
    }

    public android.media.tv.TvInputInfo$Builder setExtras(android.os.Bundle)
    {
        android.media.tv.TvInputInfo$Builder r0;
        android.os.Bundle r1;

        r0 := @this: android.media.tv.TvInputInfo$Builder;

        r1 := @parameter0: android.os.Bundle;

        r0.<android.media.tv.TvInputInfo$Builder: android.os.Bundle mExtras> = r1;

        return r0;
    }

    public android.media.tv.TvInputInfo$Builder setHdmiDeviceInfo(android.hardware.hdmi.HdmiDeviceInfo)
    {
        android.media.tv.TvInputInfo$Builder r0;
        android.hardware.hdmi.HdmiDeviceInfo r1;
        android.media.tv.TvInputHardwareInfo $r2;

        r0 := @this: android.media.tv.TvInputInfo$Builder;

        r1 := @parameter0: android.hardware.hdmi.HdmiDeviceInfo;

        $r2 = r0.<android.media.tv.TvInputInfo$Builder: android.media.tv.TvInputHardwareInfo mTvInputHardwareInfo>;

        if $r2 == null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputInfo", "TvInputHardwareInfo will not be used to build this TvInputInfo");

        r0.<android.media.tv.TvInputInfo$Builder: android.media.tv.TvInputHardwareInfo mTvInputHardwareInfo> = null;

     label1:
        r0.<android.media.tv.TvInputInfo$Builder: android.hardware.hdmi.HdmiDeviceInfo mHdmiDeviceInfo> = r1;

        return r0;
    }

    public android.media.tv.TvInputInfo$Builder setIcon(android.graphics.drawable.Icon)
    {
        android.media.tv.TvInputInfo$Builder r0;
        android.graphics.drawable.Icon r1;

        r0 := @this: android.media.tv.TvInputInfo$Builder;

        r1 := @parameter0: android.graphics.drawable.Icon;

        r0.<android.media.tv.TvInputInfo$Builder: android.graphics.drawable.Icon mIcon> = r1;

        return r0;
    }

    public android.media.tv.TvInputInfo$Builder setIcon(android.graphics.drawable.Icon, int)
    {
        android.media.tv.TvInputInfo$Builder r0;
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5;
        android.graphics.drawable.Icon r6;

        r0 := @this: android.media.tv.TvInputInfo$Builder;

        r6 := @parameter0: android.graphics.drawable.Icon;

        i0 := @parameter1: int;

        if i0 != 0 goto label1;

        r0.<android.media.tv.TvInputInfo$Builder: android.graphics.drawable.Icon mIcon> = r6;

        goto label3;

     label1:
        if i0 != 1 goto label2;

        r0.<android.media.tv.TvInputInfo$Builder: android.graphics.drawable.Icon mIconStandby> = r6;

        goto label3;

     label2:
        if i0 != 2 goto label4;

        r0.<android.media.tv.TvInputInfo$Builder: android.graphics.drawable.Icon mIconDisconnected> = r6;

     label3:
        return r0;

     label4:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown state: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    public android.media.tv.TvInputInfo$Builder setLabel(int)
    {
        android.media.tv.TvInputInfo$Builder r0;
        int i0;
        java.lang.CharSequence $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: android.media.tv.TvInputInfo$Builder;

        i0 := @parameter0: int;

        $r1 = r0.<android.media.tv.TvInputInfo$Builder: java.lang.CharSequence mLabel>;

        if $r1 != null goto label1;

        r0.<android.media.tv.TvInputInfo$Builder: int mLabelResId> = i0;

        return r0;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Label text is already set.");

        throw $r2;
    }

    public android.media.tv.TvInputInfo$Builder setLabel(java.lang.CharSequence)
    {
        android.media.tv.TvInputInfo$Builder r0;
        java.lang.CharSequence r1;
        int $i0;
        java.lang.IllegalStateException $r2;

        r0 := @this: android.media.tv.TvInputInfo$Builder;

        r1 := @parameter0: java.lang.CharSequence;

        $i0 = r0.<android.media.tv.TvInputInfo$Builder: int mLabelResId>;

        if $i0 != 0 goto label1;

        r0.<android.media.tv.TvInputInfo$Builder: java.lang.CharSequence mLabel> = r1;

        return r0;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Resource ID for label is already set.");

        throw $r2;
    }

    public android.media.tv.TvInputInfo$Builder setParentId(java.lang.String)
    {
        android.media.tv.TvInputInfo$Builder r0;
        java.lang.String r1;

        r0 := @this: android.media.tv.TvInputInfo$Builder;

        r1 := @parameter0: java.lang.String;

        r0.<android.media.tv.TvInputInfo$Builder: java.lang.String mParentId> = r1;

        return r0;
    }

    public android.media.tv.TvInputInfo$Builder setTunerCount(int)
    {
        android.media.tv.TvInputInfo$Builder r0;
        int i0;
        java.lang.Integer $r1;

        r0 := @this: android.media.tv.TvInputInfo$Builder;

        i0 := @parameter0: int;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r0.<android.media.tv.TvInputInfo$Builder: java.lang.Integer mTunerCount> = $r1;

        return r0;
    }

    public android.media.tv.TvInputInfo$Builder setTvInputHardwareInfo(android.media.tv.TvInputHardwareInfo)
    {
        android.media.tv.TvInputInfo$Builder r0;
        android.media.tv.TvInputHardwareInfo r1;
        android.hardware.hdmi.HdmiDeviceInfo $r2;

        r0 := @this: android.media.tv.TvInputInfo$Builder;

        r1 := @parameter0: android.media.tv.TvInputHardwareInfo;

        $r2 = r0.<android.media.tv.TvInputInfo$Builder: android.hardware.hdmi.HdmiDeviceInfo mHdmiDeviceInfo>;

        if $r2 == null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputInfo", "mHdmiDeviceInfo will not be used to build this TvInputInfo");

        r0.<android.media.tv.TvInputInfo$Builder: android.hardware.hdmi.HdmiDeviceInfo mHdmiDeviceInfo> = null;

     label1:
        r0.<android.media.tv.TvInputInfo$Builder: android.media.tv.TvInputHardwareInfo mTvInputHardwareInfo> = r1;

        return r0;
    }
}
