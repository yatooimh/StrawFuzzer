public final class android.media.tv.TvInputManager$Session extends java.lang.Object
{
    static final int DISPATCH_HANDLED;
    static final int DISPATCH_IN_PROGRESS;
    static final int DISPATCH_NOT_HANDLED;
    private static final long INPUT_SESSION_NOT_RESPONDING_TIMEOUT;
    private final java.util.List mAudioTracks;
    private android.view.InputChannel mChannel;
    private final android.media.tv.TvInputManager$Session$InputEventHandler mHandler;
    private final java.lang.Object mMetadataLock;
    private final android.util.Pools$Pool mPendingEventPool;
    private final android.util.SparseArray mPendingEvents;
    private java.lang.String mSelectedAudioTrackId;
    private java.lang.String mSelectedSubtitleTrackId;
    private java.lang.String mSelectedVideoTrackId;
    private android.media.tv.TvInputManager$Session$TvInputEventSender mSender;
    private final int mSeq;
    private final android.media.tv.ITvInputManager mService;
    private final android.util.SparseArray mSessionCallbackRecordMap;
    private final java.util.List mSubtitleTracks;
    private android.os.IBinder mToken;
    private final int mUserId;
    private int mVideoHeight;
    private final java.util.List mVideoTracks;
    private int mVideoWidth;

    private void <init>(android.os.IBinder, android.view.InputChannel, android.media.tv.ITvInputManager, int, int, android.util.SparseArray)
    {
        android.media.tv.TvInputManager$Session r0;
        android.os.IBinder r1;
        android.view.InputChannel r2;
        android.media.tv.ITvInputManager r3;
        int i0, i1;
        android.util.SparseArray r4, $r8;
        android.media.tv.TvInputManager$Session$InputEventHandler $r5;
        android.os.Looper $r6;
        android.util.Pools$SimplePool $r7;
        java.lang.Object $r9;
        java.util.ArrayList $r10, $r11, $r12;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: android.view.InputChannel;

        r3 := @parameter2: android.media.tv.ITvInputManager;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        r4 := @parameter5: android.util.SparseArray;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = new android.media.tv.TvInputManager$Session$InputEventHandler;

        $r6 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r5.<android.media.tv.TvInputManager$Session$InputEventHandler: void <init>(android.media.tv.TvInputManager$Session,android.os.Looper)>(r0, $r6);

        r0.<android.media.tv.TvInputManager$Session: android.media.tv.TvInputManager$Session$InputEventHandler mHandler> = $r5;

        $r7 = new android.util.Pools$SimplePool;

        specialinvoke $r7.<android.util.Pools$SimplePool: void <init>(int)>(20);

        r0.<android.media.tv.TvInputManager$Session: android.util.Pools$Pool mPendingEventPool> = $r7;

        $r8 = new android.util.SparseArray;

        specialinvoke $r8.<android.util.SparseArray: void <init>(int)>(20);

        r0.<android.media.tv.TvInputManager$Session: android.util.SparseArray mPendingEvents> = $r8;

        $r9 = new java.lang.Object;

        specialinvoke $r9.<java.lang.Object: void <init>()>();

        r0.<android.media.tv.TvInputManager$Session: java.lang.Object mMetadataLock> = $r9;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        r0.<android.media.tv.TvInputManager$Session: java.util.List mAudioTracks> = $r10;

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        r0.<android.media.tv.TvInputManager$Session: java.util.List mVideoTracks> = $r11;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        r0.<android.media.tv.TvInputManager$Session: java.util.List mSubtitleTracks> = $r12;

        r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken> = r1;

        r0.<android.media.tv.TvInputManager$Session: android.view.InputChannel mChannel> = r2;

        r0.<android.media.tv.TvInputManager$Session: android.media.tv.ITvInputManager mService> = r3;

        r0.<android.media.tv.TvInputManager$Session: int mUserId> = i0;

        r0.<android.media.tv.TvInputManager$Session: int mSeq> = i1;

        r0.<android.media.tv.TvInputManager$Session: android.util.SparseArray mSessionCallbackRecordMap> = r4;

        return;
    }

    void <init>(android.os.IBinder, android.view.InputChannel, android.media.tv.ITvInputManager, int, int, android.util.SparseArray, android.media.tv.TvInputManager$1)
    {
        android.media.tv.TvInputManager$Session r0;
        android.os.IBinder r1;
        android.view.InputChannel r2;
        android.media.tv.ITvInputManager r3;
        int i0, i1;
        android.util.SparseArray r4;
        android.media.tv.TvInputManager$1 r5;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: android.view.InputChannel;

        r3 := @parameter2: android.media.tv.ITvInputManager;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        r4 := @parameter5: android.util.SparseArray;

        r5 := @parameter6: android.media.tv.TvInputManager$1;

        specialinvoke r0.<android.media.tv.TvInputManager$Session: void <init>(android.os.IBinder,android.view.InputChannel,android.media.tv.ITvInputManager,int,int,android.util.SparseArray)>(r1, r2, r3, i0, i1, r4);

        return;
    }

    static void access$1400(android.media.tv.TvInputManager$Session, android.media.tv.TvInputManager$Session$PendingEvent)
    {
        android.media.tv.TvInputManager$Session r0;
        android.media.tv.TvInputManager$Session$PendingEvent r1;

        r0 := @parameter0: android.media.tv.TvInputManager$Session;

        r1 := @parameter1: android.media.tv.TvInputManager$Session$PendingEvent;

        specialinvoke r0.<android.media.tv.TvInputManager$Session: void sendInputEventAndReportResultOnMainLooper(android.media.tv.TvInputManager$Session$PendingEvent)>(r1);

        return;
    }

    static void access$1500(android.media.tv.TvInputManager$Session, android.media.tv.TvInputManager$Session$PendingEvent)
    {
        android.media.tv.TvInputManager$Session r0;
        android.media.tv.TvInputManager$Session$PendingEvent r1;

        r0 := @parameter0: android.media.tv.TvInputManager$Session;

        r1 := @parameter1: android.media.tv.TvInputManager$Session$PendingEvent;

        specialinvoke r0.<android.media.tv.TvInputManager$Session: void recyclePendingEventLocked(android.media.tv.TvInputManager$Session$PendingEvent)>(r1);

        return;
    }

    static void access$700(android.media.tv.TvInputManager$Session)
    {
        android.media.tv.TvInputManager$Session r0;

        r0 := @parameter0: android.media.tv.TvInputManager$Session;

        specialinvoke r0.<android.media.tv.TvInputManager$Session: void releaseInternal()>();

        return;
    }

    private boolean containsTrack(java.util.List, java.lang.String)
    {
        android.media.tv.TvInputManager$Session r0;
        java.lang.String r1, $r4;
        boolean $z0, $z1;
        java.lang.Object $r2;
        android.media.tv.TvTrackInfo $r3;
        java.util.List r5;
        java.util.Iterator r6;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r5 := @parameter0: java.util.List;

        r1 := @parameter1: java.lang.String;

        r6 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (android.media.tv.TvTrackInfo) $r2;

        $r4 = virtualinvoke $r3.<android.media.tv.TvTrackInfo: java.lang.String getId()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    private void flushPendingEventsLocked()
    {
        android.media.tv.TvInputManager$Session r0;
        int i0, i1, i2;
        android.os.Message r1;
        android.media.tv.TvInputManager$Session$InputEventHandler $r2, $r5;
        android.util.SparseArray $r3, $r4;

        r0 := @this: android.media.tv.TvInputManager$Session;

        $r2 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.TvInputManager$Session$InputEventHandler mHandler>;

        virtualinvoke $r2.<android.media.tv.TvInputManager$Session$InputEventHandler: void removeMessages(int)>(3);

        $r3 = r0.<android.media.tv.TvInputManager$Session: android.util.SparseArray mPendingEvents>;

        i0 = virtualinvoke $r3.<android.util.SparseArray: int size()>();

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r4 = r0.<android.media.tv.TvInputManager$Session: android.util.SparseArray mPendingEvents>;

        i1 = virtualinvoke $r4.<android.util.SparseArray: int keyAt(int)>(i2);

        $r5 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.TvInputManager$Session$InputEventHandler mHandler>;

        r1 = virtualinvoke $r5.<android.media.tv.TvInputManager$Session$InputEventHandler: android.os.Message obtainMessage(int,int,int)>(3, i1, 0);

        virtualinvoke r1.<android.os.Message: void setAsynchronous(boolean)>(1);

        virtualinvoke r1.<android.os.Message: void sendToTarget()>();

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    private android.media.tv.TvInputManager$Session$PendingEvent obtainPendingEventLocked(android.view.InputEvent, java.lang.Object, android.media.tv.TvInputManager$Session$FinishedInputEventCallback, android.os.Handler)
    {
        android.media.tv.TvInputManager$Session r0;
        android.view.InputEvent r1;
        java.lang.Object r2, $r7;
        android.media.tv.TvInputManager$Session$FinishedInputEventCallback r3;
        android.os.Handler r4;
        android.media.tv.TvInputManager$Session$PendingEvent r5, $r8, r9;
        android.util.Pools$Pool $r6;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r1 := @parameter0: android.view.InputEvent;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: android.media.tv.TvInputManager$Session$FinishedInputEventCallback;

        r4 := @parameter3: android.os.Handler;

        $r6 = r0.<android.media.tv.TvInputManager$Session: android.util.Pools$Pool mPendingEventPool>;

        $r7 = interfaceinvoke $r6.<android.util.Pools$Pool: java.lang.Object acquire()>();

        r5 = (android.media.tv.TvInputManager$Session$PendingEvent) $r7;

        r9 = r5;

        if r5 != null goto label1;

        $r8 = new android.media.tv.TvInputManager$Session$PendingEvent;

        specialinvoke $r8.<android.media.tv.TvInputManager$Session$PendingEvent: void <init>(android.media.tv.TvInputManager$Session,android.media.tv.TvInputManager$1)>(r0, null);

        r9 = $r8;

     label1:
        r9.<android.media.tv.TvInputManager$Session$PendingEvent: android.view.InputEvent mEvent> = r1;

        r9.<android.media.tv.TvInputManager$Session$PendingEvent: java.lang.Object mEventToken> = r2;

        r9.<android.media.tv.TvInputManager$Session$PendingEvent: android.media.tv.TvInputManager$Session$FinishedInputEventCallback mCallback> = r3;

        r9.<android.media.tv.TvInputManager$Session$PendingEvent: android.os.Handler mEventHandler> = r4;

        return r9;
    }

    private void recyclePendingEventLocked(android.media.tv.TvInputManager$Session$PendingEvent)
    {
        android.media.tv.TvInputManager$Session r0;
        android.media.tv.TvInputManager$Session$PendingEvent r1;
        android.util.Pools$Pool $r2;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r1 := @parameter0: android.media.tv.TvInputManager$Session$PendingEvent;

        virtualinvoke r1.<android.media.tv.TvInputManager$Session$PendingEvent: void recycle()>();

        $r2 = r0.<android.media.tv.TvInputManager$Session: android.util.Pools$Pool mPendingEventPool>;

        interfaceinvoke $r2.<android.util.Pools$Pool: boolean release(java.lang.Object)>(r1);

        return;
    }

    private void releaseInternal()
    {
        android.media.tv.TvInputManager$Session r0;
        android.view.InputChannel $r1, $r3;
        android.media.tv.TvInputManager$Session$TvInputEventSender $r2, $r4;
        java.lang.Throwable $r5, $r6;
        android.media.tv.TvInputManager$Session$InputEventHandler r7;
        android.util.SparseArray r8, $r9;
        int $i0;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken> = null;

        r7 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.TvInputManager$Session$InputEventHandler mHandler>;

        entermonitor r7;

     label01:
        $r1 = r0.<android.media.tv.TvInputManager$Session: android.view.InputChannel mChannel>;

        if $r1 == null goto label03;

        $r2 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.TvInputManager$Session$TvInputEventSender mSender>;

        if $r2 == null goto label02;

        specialinvoke r0.<android.media.tv.TvInputManager$Session: void flushPendingEventsLocked()>();

        $r4 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.TvInputManager$Session$TvInputEventSender mSender>;

        virtualinvoke $r4.<android.media.tv.TvInputManager$Session$TvInputEventSender: void dispose()>();

        r0.<android.media.tv.TvInputManager$Session: android.media.tv.TvInputManager$Session$TvInputEventSender mSender> = null;

     label02:
        $r3 = r0.<android.media.tv.TvInputManager$Session: android.view.InputChannel mChannel>;

        virtualinvoke $r3.<android.view.InputChannel: void dispose()>();

        r0.<android.media.tv.TvInputManager$Session: android.view.InputChannel mChannel> = null;

     label03:
        exitmonitor r7;

     label04:
        r8 = r0.<android.media.tv.TvInputManager$Session: android.util.SparseArray mSessionCallbackRecordMap>;

        entermonitor r8;

     label05:
        $r9 = r0.<android.media.tv.TvInputManager$Session: android.util.SparseArray mSessionCallbackRecordMap>;

        $i0 = r0.<android.media.tv.TvInputManager$Session: int mSeq>;

        virtualinvoke $r9.<android.util.SparseArray: void delete(int)>($i0);

        exitmonitor r8;

     label06:
        return;

     label07:
        $r5 := @caughtexception;

     label08:
        exitmonitor r8;

     label09:
        throw $r5;

     label10:
        $r6 := @caughtexception;

     label11:
        exitmonitor r7;

     label12:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private void sendInputEventAndReportResultOnMainLooper(android.media.tv.TvInputManager$Session$PendingEvent)
    {
        android.media.tv.TvInputManager$Session r0;
        android.media.tv.TvInputManager$Session$InputEventHandler r1;
        int $i0;
        java.lang.Throwable $r2;
        android.media.tv.TvInputManager$Session$PendingEvent r3;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r3 := @parameter0: android.media.tv.TvInputManager$Session$PendingEvent;

        r1 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.TvInputManager$Session$InputEventHandler mHandler>;

        entermonitor r1;

     label1:
        $i0 = specialinvoke r0.<android.media.tv.TvInputManager$Session: int sendInputEventOnMainLooperLocked(android.media.tv.TvInputManager$Session$PendingEvent)>(r3);

        if $i0 != -1 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        exitmonitor r1;

     label4:
        virtualinvoke r0.<android.media.tv.TvInputManager$Session: void invokeFinishedInputEventCallback(android.media.tv.TvInputManager$Session$PendingEvent,boolean)>(r3, 0);

        return;

     label5:
        $r2 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private int sendInputEventOnMainLooperLocked(android.media.tv.TvInputManager$Session$PendingEvent)
    {
        android.media.tv.TvInputManager$Session r0;
        int i0;
        android.media.tv.TvInputManager$Session$TvInputEventSender $r1, $r2, $r13;
        boolean $z0;
        java.lang.StringBuilder $r3;
        android.os.IBinder $r5;
        java.lang.String $r9;
        android.util.SparseArray $r10;
        android.media.tv.TvInputManager$Session$InputEventHandler $r11, $r12, $r14;
        android.os.Looper $r15;
        android.media.tv.TvInputManager$Session$PendingEvent r16;
        android.view.InputChannel r17;
        android.view.InputEvent r18;
        android.os.Message r19;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r16 := @parameter0: android.media.tv.TvInputManager$Session$PendingEvent;

        r17 = r0.<android.media.tv.TvInputManager$Session: android.view.InputChannel mChannel>;

        if r17 == null goto label3;

        $r1 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.TvInputManager$Session$TvInputEventSender mSender>;

        if $r1 != null goto label1;

        $r13 = new android.media.tv.TvInputManager$Session$TvInputEventSender;

        $r14 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.TvInputManager$Session$InputEventHandler mHandler>;

        $r15 = virtualinvoke $r14.<android.media.tv.TvInputManager$Session$InputEventHandler: android.os.Looper getLooper()>();

        specialinvoke $r13.<android.media.tv.TvInputManager$Session$TvInputEventSender: void <init>(android.media.tv.TvInputManager$Session,android.view.InputChannel,android.os.Looper)>(r0, r17, $r15);

        r0.<android.media.tv.TvInputManager$Session: android.media.tv.TvInputManager$Session$TvInputEventSender mSender> = $r13;

     label1:
        r18 = r16.<android.media.tv.TvInputManager$Session$PendingEvent: android.view.InputEvent mEvent>;

        i0 = virtualinvoke r18.<android.view.InputEvent: int getSequenceNumber()>();

        $r2 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.TvInputManager$Session$TvInputEventSender mSender>;

        $z0 = virtualinvoke $r2.<android.media.tv.TvInputManager$Session$TvInputEventSender: boolean sendInputEvent(int,android.view.InputEvent)>(i0, r18);

        if $z0 == 0 goto label2;

        $r10 = r0.<android.media.tv.TvInputManager$Session: android.util.SparseArray mPendingEvents>;

        virtualinvoke $r10.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r16);

        $r11 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.TvInputManager$Session$InputEventHandler mHandler>;

        r19 = virtualinvoke $r11.<android.media.tv.TvInputManager$Session$InputEventHandler: android.os.Message obtainMessage(int,java.lang.Object)>(2, r16);

        virtualinvoke r19.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r12 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.TvInputManager$Session$InputEventHandler mHandler>;

        virtualinvoke $r12.<android.media.tv.TvInputManager$Session$InputEventHandler: boolean sendMessageDelayed(android.os.Message,long)>(r19, 2500L);

        return -1;

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to send input event to session: ");

        $r5 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" dropping:");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r18);

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputManager", $r9);

     label3:
        return 0;
    }

    void createOverlayView(android.view.View, android.graphics.Rect)
    {
        android.media.tv.TvInputManager$Session r0;
        android.graphics.Rect r1;
        android.os.IBinder r2, $r5, $r8;
        java.lang.IllegalStateException $r6;
        android.media.tv.ITvInputManager $r7;
        int $i0;
        android.os.RemoteException $r9;
        java.lang.RuntimeException $r10;
        android.view.View r11;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r11 := @parameter0: android.view.View;

        r1 := @parameter1: android.graphics.Rect;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r11);

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r5 = virtualinvoke r11.<android.view.View: android.os.IBinder getWindowToken()>();

        if $r5 == null goto label4;

        r2 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        if r2 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputManager", "The session has been already released");

        return;

     label1:
        $r7 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.ITvInputManager mService>;

        $r8 = virtualinvoke r11.<android.view.View: android.os.IBinder getWindowToken()>();

        $i0 = r0.<android.media.tv.TvInputManager$Session: int mUserId>;

        interfaceinvoke $r7.<android.media.tv.ITvInputManager: void createOverlayView(android.os.IBinder,android.os.IBinder,android.graphics.Rect,int)>(r2, $r8, r1, $i0);

     label2:
        return;

     label3:
        $r9 := @caughtexception;

        $r10 = virtualinvoke $r9.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r10;

     label4:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("view must be attached to a window");

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int dispatchInputEvent(android.view.InputEvent, java.lang.Object, android.media.tv.TvInputManager$Session$FinishedInputEventCallback, android.os.Handler)
    {
        android.media.tv.TvInputManager$Session r0;
        java.lang.Object r1;
        android.media.tv.TvInputManager$Session$FinishedInputEventCallback r2;
        android.os.Handler r3;
        android.media.tv.TvInputManager$Session$InputEventHandler r4, $r11, $r12;
        int i0;
        android.view.InputChannel $r8;
        android.os.Looper $r9, $r10;
        java.lang.Throwable $r13;
        android.view.InputEvent r14;
        android.media.tv.TvInputManager$Session$PendingEvent r15;
        android.os.Message r16;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r14 := @parameter0: android.view.InputEvent;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: android.media.tv.TvInputManager$Session$FinishedInputEventCallback;

        r3 := @parameter3: android.os.Handler;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r14);

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r3);

        r4 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.TvInputManager$Session$InputEventHandler mHandler>;

        entermonitor r4;

     label1:
        $r8 = r0.<android.media.tv.TvInputManager$Session: android.view.InputChannel mChannel>;

        if $r8 != null goto label3;

        exitmonitor r4;

     label2:
        return 0;

     label3:
        r15 = specialinvoke r0.<android.media.tv.TvInputManager$Session: android.media.tv.TvInputManager$Session$PendingEvent obtainPendingEventLocked(android.view.InputEvent,java.lang.Object,android.media.tv.TvInputManager$Session$FinishedInputEventCallback,android.os.Handler)>(r14, r1, r2, r3);

        $r9 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r10 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        if $r9 != $r10 goto label5;

        i0 = specialinvoke r0.<android.media.tv.TvInputManager$Session: int sendInputEventOnMainLooperLocked(android.media.tv.TvInputManager$Session$PendingEvent)>(r15);

        exitmonitor r4;

     label4:
        return i0;

     label5:
        $r11 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.TvInputManager$Session$InputEventHandler mHandler>;

        r16 = virtualinvoke $r11.<android.media.tv.TvInputManager$Session$InputEventHandler: android.os.Message obtainMessage(int,java.lang.Object)>(1, r15);

        virtualinvoke r16.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r12 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.TvInputManager$Session$InputEventHandler mHandler>;

        virtualinvoke $r12.<android.media.tv.TvInputManager$Session$InputEventHandler: boolean sendMessage(android.os.Message)>(r16);

        exitmonitor r4;

     label6:
        return -1;

     label7:
        $r13 := @caughtexception;

     label8:
        exitmonitor r4;

     label9:
        throw $r13;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void dispatchSurfaceChanged(int, int, int)
    {
        android.media.tv.TvInputManager$Session r0;
        int i0, i1, i2, $i3;
        android.media.tv.ITvInputManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.os.IBinder r4;

        r0 := @this: android.media.tv.TvInputManager$Session;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r4 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        if r4 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputManager", "The session has been already released");

        return;

     label1:
        $r1 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.ITvInputManager mService>;

        $i3 = r0.<android.media.tv.TvInputManager$Session: int mUserId>;

        interfaceinvoke $r1.<android.media.tv.ITvInputManager: void dispatchSurfaceChanged(android.os.IBinder,int,int,int,int)>(r4, i0, i1, i2, $i3);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    void finishedInputEvent(int, boolean, boolean)
    {
        android.media.tv.TvInputManager$Session r0;
        boolean z0, z1;
        android.media.tv.TvInputManager$Session$InputEventHandler r1, $r7;
        java.lang.StringBuilder r2;
        android.util.SparseArray $r3, $r4, $r6;
        java.lang.Object $r5;
        android.os.IBinder $r9;
        java.lang.String $r11;
        java.lang.Throwable $r12;
        int i1, i2;
        android.media.tv.TvInputManager$Session$PendingEvent r13;

        r0 := @this: android.media.tv.TvInputManager$Session;

        i1 := @parameter0: int;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r1 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.TvInputManager$Session$InputEventHandler mHandler>;

        entermonitor r1;

     label01:
        $r3 = r0.<android.media.tv.TvInputManager$Session: android.util.SparseArray mPendingEvents>;

        i2 = virtualinvoke $r3.<android.util.SparseArray: int indexOfKey(int)>(i1);

     label02:
        if i2 >= 0 goto label05;

     label03:
        exitmonitor r1;

     label04:
        return;

     label05:
        $r4 = r0.<android.media.tv.TvInputManager$Session: android.util.SparseArray mPendingEvents>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object valueAt(int)>(i2);

        r13 = (android.media.tv.TvInputManager$Session$PendingEvent) $r5;

        $r6 = r0.<android.media.tv.TvInputManager$Session: android.util.SparseArray mPendingEvents>;

        virtualinvoke $r6.<android.util.SparseArray: void removeAt(int)>(i2);

     label06:
        if z1 == 0 goto label09;

     label07:
        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Timeout waiting for session to handle input event after 2500 ms: ");

        $r9 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputManager", $r11);

     label08:
        goto label10;

     label09:
        $r7 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.TvInputManager$Session$InputEventHandler mHandler>;

        virtualinvoke $r7.<android.media.tv.TvInputManager$Session$InputEventHandler: void removeMessages(int,java.lang.Object)>(2, r13);

     label10:
        exitmonitor r1;

     label11:
        virtualinvoke r0.<android.media.tv.TvInputManager$Session: void invokeFinishedInputEventCallback(android.media.tv.TvInputManager$Session$PendingEvent,boolean)>(r13, z0);

        return;

     label12:
        $r12 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public java.lang.String getSelectedTrack(int)
    {
        android.media.tv.TvInputManager$Session r0;
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5, r8, r10, r11;
        java.lang.Throwable $r6;
        java.lang.Object r7;

        r0 := @this: android.media.tv.TvInputManager$Session;

        i0 := @parameter0: int;

        r7 = r0.<android.media.tv.TvInputManager$Session: java.lang.Object mMetadataLock>;

        entermonitor r7;

        if i0 != 0 goto label04;

     label01:
        r8 = r0.<android.media.tv.TvInputManager$Session: java.lang.String mSelectedAudioTrackId>;

        exitmonitor r7;

     label02:
        return r8;

     label03:
        $r6 := @caughtexception;

        goto label12;

     label04:
        if i0 != 1 goto label07;

     label05:
        r10 = r0.<android.media.tv.TvInputManager$Session: java.lang.String mSelectedVideoTrackId>;

        exitmonitor r7;

     label06:
        return r10;

     label07:
        if i0 != 2 goto label10;

     label08:
        r11 = r0.<android.media.tv.TvInputManager$Session: java.lang.String mSelectedSubtitleTrackId>;

        exitmonitor r7;

     label09:
        return r11;

     label10:
        exitmonitor r7;

     label11:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid type: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label12:
        exitmonitor r7;

     label13:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label06 with label03;
        catch java.lang.Throwable from label08 to label09 with label03;
        catch java.lang.Throwable from label10 to label11 with label03;
        catch java.lang.Throwable from label12 to label13 with label03;
    }

    android.os.IBinder getToken()
    {
        android.media.tv.TvInputManager$Session r0;
        android.os.IBinder $r1;

        r0 := @this: android.media.tv.TvInputManager$Session;

        $r1 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        return $r1;
    }

    public java.util.List getTracks(int)
    {
        android.media.tv.TvInputManager$Session r0;
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5;
        java.util.List $r6, $r7, $r8, $r9, $r10, $r11;
        java.lang.Throwable $r12;
        java.lang.Object r13;
        java.util.ArrayList r14, r16, r17;

        r0 := @this: android.media.tv.TvInputManager$Session;

        i0 := @parameter0: int;

        r13 = r0.<android.media.tv.TvInputManager$Session: java.lang.Object mMetadataLock>;

        entermonitor r13;

        if i0 != 0 goto label06;

     label01:
        $r10 = r0.<android.media.tv.TvInputManager$Session: java.util.List mAudioTracks>;

        if $r10 != null goto label03;

        exitmonitor r13;

     label02:
        return null;

     label03:
        r14 = new java.util.ArrayList;

        $r11 = r0.<android.media.tv.TvInputManager$Session: java.util.List mAudioTracks>;

        specialinvoke r14.<java.util.ArrayList: void <init>(java.util.Collection)>($r11);

        exitmonitor r13;

     label04:
        return r14;

     label05:
        $r12 := @caughtexception;

        goto label18;

     label06:
        if i0 != 1 goto label11;

     label07:
        $r8 = r0.<android.media.tv.TvInputManager$Session: java.util.List mVideoTracks>;

        if $r8 != null goto label09;

        exitmonitor r13;

     label08:
        return null;

     label09:
        r16 = new java.util.ArrayList;

        $r9 = r0.<android.media.tv.TvInputManager$Session: java.util.List mVideoTracks>;

        specialinvoke r16.<java.util.ArrayList: void <init>(java.util.Collection)>($r9);

        exitmonitor r13;

     label10:
        return r16;

     label11:
        if i0 != 2 goto label16;

     label12:
        $r6 = r0.<android.media.tv.TvInputManager$Session: java.util.List mSubtitleTracks>;

        if $r6 != null goto label14;

        exitmonitor r13;

     label13:
        return null;

     label14:
        r17 = new java.util.ArrayList;

        $r7 = r0.<android.media.tv.TvInputManager$Session: java.util.List mSubtitleTracks>;

        specialinvoke r17.<java.util.ArrayList: void <init>(java.util.Collection)>($r7);

        exitmonitor r13;

     label15:
        return r17;

     label16:
        exitmonitor r13;

     label17:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid type: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label18:
        exitmonitor r13;

     label19:
        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label07 to label08 with label05;
        catch java.lang.Throwable from label09 to label10 with label05;
        catch java.lang.Throwable from label12 to label13 with label05;
        catch java.lang.Throwable from label14 to label15 with label05;
        catch java.lang.Throwable from label16 to label17 with label05;
        catch java.lang.Throwable from label18 to label19 with label05;
    }

    android.media.tv.TvTrackInfo getVideoTrackToNotify()
    {
        android.media.tv.TvInputManager$Session r0;
        java.lang.Object r1, $r6;
        java.util.Iterator r2;
        int i0, i1, $i2, $i3;
        java.util.List $r3, $r5;
        boolean $z0, $z1, $z2;
        java.lang.String $r4, $r7, $r8;
        java.lang.Throwable $r9;
        android.media.tv.TvTrackInfo r10;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r1 = r0.<android.media.tv.TvInputManager$Session: java.lang.Object mMetadataLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<android.media.tv.TvInputManager$Session: java.util.List mVideoTracks>;

        $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label06;

        $r4 = r0.<android.media.tv.TvInputManager$Session: java.lang.String mSelectedVideoTrackId>;

        if $r4 == null goto label06;

        $r5 = r0.<android.media.tv.TvInputManager$Session: java.util.List mVideoTracks>;

        r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label06;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r10 = (android.media.tv.TvTrackInfo) $r6;

        $r7 = virtualinvoke r10.<android.media.tv.TvTrackInfo: java.lang.String getId()>();

        $r8 = r0.<android.media.tv.TvInputManager$Session: java.lang.String mSelectedVideoTrackId>;

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z2 == 0 goto label05;

        i0 = virtualinvoke r10.<android.media.tv.TvTrackInfo: int getVideoWidth()>();

        i1 = virtualinvoke r10.<android.media.tv.TvTrackInfo: int getVideoHeight()>();

        $i2 = r0.<android.media.tv.TvInputManager$Session: int mVideoWidth>;

        if $i2 != i0 goto label03;

        $i3 = r0.<android.media.tv.TvInputManager$Session: int mVideoHeight>;

        if $i3 == i1 goto label05;

     label03:
        r0.<android.media.tv.TvInputManager$Session: int mVideoWidth> = i0;

        r0.<android.media.tv.TvInputManager$Session: int mVideoHeight> = i1;

        exitmonitor r1;

     label04:
        return r10;

     label05:
        goto label02;

     label06:
        exitmonitor r1;

     label07:
        return null;

     label08:
        $r9 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    void invokeFinishedInputEventCallback(android.media.tv.TvInputManager$Session$PendingEvent, boolean)
    {
        android.media.tv.TvInputManager$Session r0;
        boolean z0, $z1;
        android.os.Handler $r1, $r3;
        android.os.Looper $r2;
        android.media.tv.TvInputManager$Session$PendingEvent r4;
        android.os.Message r5;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r4 := @parameter0: android.media.tv.TvInputManager$Session$PendingEvent;

        z0 := @parameter1: boolean;

        r4.<android.media.tv.TvInputManager$Session$PendingEvent: boolean mHandled> = z0;

        $r1 = r4.<android.media.tv.TvInputManager$Session$PendingEvent: android.os.Handler mEventHandler>;

        $r2 = virtualinvoke $r1.<android.os.Handler: android.os.Looper getLooper()>();

        $z1 = virtualinvoke $r2.<android.os.Looper: boolean isCurrentThread()>();

        if $z1 == 0 goto label1;

        virtualinvoke r4.<android.media.tv.TvInputManager$Session$PendingEvent: void run()>();

        goto label2;

     label1:
        $r3 = r4.<android.media.tv.TvInputManager$Session$PendingEvent: android.os.Handler mEventHandler>;

        r5 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,java.lang.Runnable)>($r3, r4);

        virtualinvoke r5.<android.os.Message: void setAsynchronous(boolean)>(1);

        virtualinvoke r5.<android.os.Message: void sendToTarget()>();

     label2:
        return;
    }

    void relayoutOverlayView(android.graphics.Rect)
    {
        android.media.tv.TvInputManager$Session r0;
        android.os.IBinder r1;
        int $i0;
        android.media.tv.ITvInputManager $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.graphics.Rect r6;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r6 := @parameter0: android.graphics.Rect;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r6);

        r1 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        if r1 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputManager", "The session has been already released");

        return;

     label1:
        $r3 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.ITvInputManager mService>;

        $i0 = r0.<android.media.tv.TvInputManager$Session: int mUserId>;

        interfaceinvoke $r3.<android.media.tv.ITvInputManager: void relayoutOverlayView(android.os.IBinder,android.graphics.Rect,int)>(r1, r6, $i0);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void release()
    {
        android.media.tv.TvInputManager$Session r0;
        int $i0;
        android.media.tv.ITvInputManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.os.IBinder r4;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r4 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        if r4 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputManager", "The session has been already released");

        return;

     label1:
        $r1 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.ITvInputManager mService>;

        $i0 = r0.<android.media.tv.TvInputManager$Session: int mUserId>;

        interfaceinvoke $r1.<android.media.tv.ITvInputManager: void releaseSession(android.os.IBinder,int)>(r4, $i0);

     label2:
        specialinvoke r0.<android.media.tv.TvInputManager$Session: void releaseInternal()>();

        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    void removeOverlayView()
    {
        android.media.tv.TvInputManager$Session r0;
        int $i0;
        android.media.tv.ITvInputManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.os.IBinder r4;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r4 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        if r4 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputManager", "The session has been already released");

        return;

     label1:
        $r1 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.ITvInputManager mService>;

        $i0 = r0.<android.media.tv.TvInputManager$Session: int mUserId>;

        interfaceinvoke $r1.<android.media.tv.ITvInputManager: void removeOverlayView(android.os.IBinder,int)>(r4, $i0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void selectTrack(int, java.lang.String)
    {
        android.media.tv.TvInputManager$Session r0;
        int i0, $i1;
        java.lang.String $r3, $r8, $r12, $r16, r20;
        android.media.tv.ITvInputManager $r4;
        java.util.List $r5, $r9, $r13;
        boolean $z0, $z1, $z2;
        java.lang.Throwable $r17;
        android.os.RemoteException $r18;
        java.lang.RuntimeException $r19;
        java.lang.Object r21;
        java.lang.StringBuilder r22, r23, r24, r29;
        android.os.IBinder r25;
        java.lang.IllegalArgumentException r28;

        r0 := @this: android.media.tv.TvInputManager$Session;

        i0 := @parameter0: int;

        r20 := @parameter1: java.lang.String;

        r21 = r0.<android.media.tv.TvInputManager$Session: java.lang.Object mMetadataLock>;

        entermonitor r21;

        if i0 != 0 goto label03;

        if r20 == null goto label09;

     label01:
        $r13 = r0.<android.media.tv.TvInputManager$Session: java.util.List mAudioTracks>;

        $z2 = specialinvoke r0.<android.media.tv.TvInputManager$Session: boolean containsTrack(java.util.List,java.lang.String)>($r13, r20);

        if $z2 != 0 goto label09;

        r22 = new java.lang.StringBuilder;

        specialinvoke r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid audio trackId: ");

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        $r16 = virtualinvoke r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputManager", $r16);

        exitmonitor r21;

     label02:
        return;

     label03:
        if i0 != 1 goto label06;

        if r20 == null goto label09;

     label04:
        $r9 = r0.<android.media.tv.TvInputManager$Session: java.util.List mVideoTracks>;

        $z1 = specialinvoke r0.<android.media.tv.TvInputManager$Session: boolean containsTrack(java.util.List,java.lang.String)>($r9, r20);

        if $z1 != 0 goto label09;

        r23 = new java.lang.StringBuilder;

        specialinvoke r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid video trackId: ");

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        $r12 = virtualinvoke r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputManager", $r12);

        exitmonitor r21;

     label05:
        return;

     label06:
        if i0 != 2 goto label15;

        if r20 == null goto label09;

     label07:
        $r5 = r0.<android.media.tv.TvInputManager$Session: java.util.List mSubtitleTracks>;

        $z0 = specialinvoke r0.<android.media.tv.TvInputManager$Session: boolean containsTrack(java.util.List,java.lang.String)>($r5, r20);

        if $z0 != 0 goto label09;

        r24 = new java.lang.StringBuilder;

        specialinvoke r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid subtitle trackId: ");

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        $r8 = virtualinvoke r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputManager", $r8);

        exitmonitor r21;

     label08:
        return;

     label09:
        exitmonitor r21;

     label10:
        r25 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        if r25 != null goto label11;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputManager", "The session has been already released");

        return;

     label11:
        $r4 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.ITvInputManager mService>;

        $i1 = r0.<android.media.tv.TvInputManager$Session: int mUserId>;

        interfaceinvoke $r4.<android.media.tv.ITvInputManager: void selectTrack(android.os.IBinder,int,java.lang.String,int)>(r25, i0, r20, $i1);

     label12:
        return;

     label13:
        $r18 := @caughtexception;

        $r19 = virtualinvoke $r18.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r19;

     label14:
        $r17 := @caughtexception;

        goto label16;

     label15:
        r28 = new java.lang.IllegalArgumentException;

        r29 = new java.lang.StringBuilder;

        specialinvoke r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid type: ");

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r3 = virtualinvoke r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r28.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw r28;

     label16:
        exitmonitor r21;

     label17:
        throw $r17;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch android.os.RemoteException from label11 to label12 with label13;
        catch java.lang.Throwable from label15 to label16 with label14;
        catch java.lang.Throwable from label16 to label17 with label14;
    }

    public void sendAppPrivateCommand(java.lang.String, android.os.Bundle)
    {
        android.media.tv.TvInputManager$Session r0;
        android.os.Bundle r1;
        android.os.IBinder r2;
        int $i0;
        android.media.tv.ITvInputManager $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        java.lang.String r6;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: android.os.Bundle;

        r2 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        if r2 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputManager", "The session has been already released");

        return;

     label1:
        $r3 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.ITvInputManager mService>;

        $i0 = r0.<android.media.tv.TvInputManager$Session: int mUserId>;

        interfaceinvoke $r3.<android.media.tv.ITvInputManager: void sendAppPrivateCommand(android.os.IBinder,java.lang.String,android.os.Bundle,int)>(r2, r6, r1, $i0);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setCaptionEnabled(boolean)
    {
        android.media.tv.TvInputManager$Session r0;
        boolean z0;
        int $i0;
        android.media.tv.ITvInputManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.os.IBinder r4;

        r0 := @this: android.media.tv.TvInputManager$Session;

        z0 := @parameter0: boolean;

        r4 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        if r4 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputManager", "The session has been already released");

        return;

     label1:
        $r1 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.ITvInputManager mService>;

        $i0 = r0.<android.media.tv.TvInputManager$Session: int mUserId>;

        interfaceinvoke $r1.<android.media.tv.ITvInputManager: void setCaptionEnabled(android.os.IBinder,boolean,int)>(r4, z0, $i0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    void setMain()
    {
        android.media.tv.TvInputManager$Session r0;
        int $i0;
        android.media.tv.ITvInputManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.os.IBinder r4;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r4 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        if r4 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputManager", "The session has been already released");

        return;

     label1:
        $r1 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.ITvInputManager mService>;

        $i0 = r0.<android.media.tv.TvInputManager$Session: int mUserId>;

        interfaceinvoke $r1.<android.media.tv.ITvInputManager: void setMainSession(android.os.IBinder,int)>(r4, $i0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setStreamVolume(float)
    {
        android.media.tv.TvInputManager$Session r0;
        float f0;
        byte $b0, $b1;
        int $i2;
        android.media.tv.ITvInputManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.os.IBinder r4;
        java.lang.IllegalArgumentException r5;

        r0 := @this: android.media.tv.TvInputManager$Session;

        f0 := @parameter0: float;

        r4 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        if r4 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputManager", "The session has been already released");

        return;

     label1:
        $b0 = f0 cmpg 0.0F;

        if $b0 < 0 goto label4;

        $b1 = f0 cmpl 1.0F;

        if $b1 > 0 goto label4;

     label2:
        $r1 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.ITvInputManager mService>;

        $i2 = r0.<android.media.tv.TvInputManager$Session: int mUserId>;

        interfaceinvoke $r1.<android.media.tv.ITvInputManager: void setVolume(android.os.IBinder,float,int)>(r4, f0, $i2);

     label3:
        return;

     label4:
        r5 = new java.lang.IllegalArgumentException;

        specialinvoke r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("volume should be between 0.0f and 1.0f");

        throw r5;

     label5:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label2 to label3 with label5;
        catch android.os.RemoteException from label4 to label5 with label5;
    }

    public void setSurface(android.view.Surface)
    {
        android.media.tv.TvInputManager$Session r0;
        android.os.IBinder r1;
        int $i0;
        android.media.tv.ITvInputManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.view.Surface r5;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r5 := @parameter0: android.view.Surface;

        r1 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        if r1 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputManager", "The session has been already released");

        return;

     label1:
        $r2 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.ITvInputManager mService>;

        $i0 = r0.<android.media.tv.TvInputManager$Session: int mUserId>;

        interfaceinvoke $r2.<android.media.tv.ITvInputManager: void setSurface(android.os.IBinder,android.view.Surface,int)>(r1, r5, $i0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    void startRecording(android.net.Uri)
    {
        android.media.tv.TvInputManager$Session r0;
        android.net.Uri r1;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r1 := @parameter0: android.net.Uri;

        virtualinvoke r0.<android.media.tv.TvInputManager$Session: void startRecording(android.net.Uri,android.os.Bundle)>(r1, null);

        return;
    }

    void startRecording(android.net.Uri, android.os.Bundle)
    {
        android.media.tv.TvInputManager$Session r0;
        android.os.Bundle r1;
        android.os.IBinder r2;
        int $i0;
        android.media.tv.ITvInputManager $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.net.Uri r6;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r6 := @parameter0: android.net.Uri;

        r1 := @parameter1: android.os.Bundle;

        r2 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        if r2 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputManager", "The session has been already released");

        return;

     label1:
        $r3 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.ITvInputManager mService>;

        $i0 = r0.<android.media.tv.TvInputManager$Session: int mUserId>;

        interfaceinvoke $r3.<android.media.tv.ITvInputManager: void startRecording(android.os.IBinder,android.net.Uri,android.os.Bundle,int)>(r2, r6, r1, $i0);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    void stopRecording()
    {
        android.media.tv.TvInputManager$Session r0;
        int $i0;
        android.media.tv.ITvInputManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.os.IBinder r4;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r4 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        if r4 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputManager", "The session has been already released");

        return;

     label1:
        $r1 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.ITvInputManager mService>;

        $i0 = r0.<android.media.tv.TvInputManager$Session: int mUserId>;

        interfaceinvoke $r1.<android.media.tv.ITvInputManager: void stopRecording(android.os.IBinder,int)>(r4, $i0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    void timeShiftEnablePositionTracking(boolean)
    {
        android.media.tv.TvInputManager$Session r0;
        boolean z0;
        int $i0;
        android.media.tv.ITvInputManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.os.IBinder r4;

        r0 := @this: android.media.tv.TvInputManager$Session;

        z0 := @parameter0: boolean;

        r4 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        if r4 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputManager", "The session has been already released");

        return;

     label1:
        $r1 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.ITvInputManager mService>;

        $i0 = r0.<android.media.tv.TvInputManager$Session: int mUserId>;

        interfaceinvoke $r1.<android.media.tv.ITvInputManager: void timeShiftEnablePositionTracking(android.os.IBinder,boolean,int)>(r4, z0, $i0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    void timeShiftPause()
    {
        android.media.tv.TvInputManager$Session r0;
        int $i0;
        android.media.tv.ITvInputManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.os.IBinder r4;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r4 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        if r4 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputManager", "The session has been already released");

        return;

     label1:
        $r1 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.ITvInputManager mService>;

        $i0 = r0.<android.media.tv.TvInputManager$Session: int mUserId>;

        interfaceinvoke $r1.<android.media.tv.ITvInputManager: void timeShiftPause(android.os.IBinder,int)>(r4, $i0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    void timeShiftPlay(android.net.Uri)
    {
        android.media.tv.TvInputManager$Session r0;
        android.os.IBinder r1;
        int $i0;
        android.media.tv.ITvInputManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.net.Uri r5;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r5 := @parameter0: android.net.Uri;

        r1 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        if r1 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputManager", "The session has been already released");

        return;

     label1:
        $r2 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.ITvInputManager mService>;

        $i0 = r0.<android.media.tv.TvInputManager$Session: int mUserId>;

        interfaceinvoke $r2.<android.media.tv.ITvInputManager: void timeShiftPlay(android.os.IBinder,android.net.Uri,int)>(r1, r5, $i0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    void timeShiftResume()
    {
        android.media.tv.TvInputManager$Session r0;
        int $i0;
        android.media.tv.ITvInputManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.os.IBinder r4;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r4 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        if r4 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputManager", "The session has been already released");

        return;

     label1:
        $r1 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.ITvInputManager mService>;

        $i0 = r0.<android.media.tv.TvInputManager$Session: int mUserId>;

        interfaceinvoke $r1.<android.media.tv.ITvInputManager: void timeShiftResume(android.os.IBinder,int)>(r4, $i0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    void timeShiftSeekTo(long)
    {
        android.media.tv.TvInputManager$Session r0;
        long l0;
        int $i1;
        android.media.tv.ITvInputManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.os.IBinder r4;

        r0 := @this: android.media.tv.TvInputManager$Session;

        l0 := @parameter0: long;

        r4 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        if r4 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputManager", "The session has been already released");

        return;

     label1:
        $r1 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.ITvInputManager mService>;

        $i1 = r0.<android.media.tv.TvInputManager$Session: int mUserId>;

        interfaceinvoke $r1.<android.media.tv.ITvInputManager: void timeShiftSeekTo(android.os.IBinder,long,int)>(r4, l0, $i1);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    void timeShiftSetPlaybackParams(android.media.PlaybackParams)
    {
        android.media.tv.TvInputManager$Session r0;
        android.os.IBinder r1;
        int $i0;
        android.media.tv.ITvInputManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.media.PlaybackParams r5;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r5 := @parameter0: android.media.PlaybackParams;

        r1 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        if r1 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputManager", "The session has been already released");

        return;

     label1:
        $r2 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.ITvInputManager mService>;

        $i0 = r0.<android.media.tv.TvInputManager$Session: int mUserId>;

        interfaceinvoke $r2.<android.media.tv.ITvInputManager: void timeShiftSetPlaybackParams(android.os.IBinder,android.media.PlaybackParams,int)>(r1, r5, $i0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void tune(android.net.Uri)
    {
        android.media.tv.TvInputManager$Session r0;
        android.net.Uri r1;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r1 := @parameter0: android.net.Uri;

        virtualinvoke r0.<android.media.tv.TvInputManager$Session: void tune(android.net.Uri,android.os.Bundle)>(r1, null);

        return;
    }

    public void tune(android.net.Uri, android.os.Bundle)
    {
        android.media.tv.TvInputManager$Session r0;
        android.os.Bundle r1;
        java.lang.Object r2;
        android.os.IBinder $r4, $r8;
        java.util.List $r5, $r6, $r7;
        int $i0;
        android.media.tv.ITvInputManager $r9;
        android.os.RemoteException $r10;
        java.lang.RuntimeException $r11;
        java.lang.Throwable $r12;
        android.net.Uri r13;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r13 := @parameter0: android.net.Uri;

        r1 := @parameter1: android.os.Bundle;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r13);

        $r4 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        if $r4 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputManager", "The session has been already released");

        return;

     label1:
        r2 = r0.<android.media.tv.TvInputManager$Session: java.lang.Object mMetadataLock>;

        entermonitor r2;

     label2:
        $r5 = r0.<android.media.tv.TvInputManager$Session: java.util.List mAudioTracks>;

        interfaceinvoke $r5.<java.util.List: void clear()>();

        $r6 = r0.<android.media.tv.TvInputManager$Session: java.util.List mVideoTracks>;

        interfaceinvoke $r6.<java.util.List: void clear()>();

        $r7 = r0.<android.media.tv.TvInputManager$Session: java.util.List mSubtitleTracks>;

        interfaceinvoke $r7.<java.util.List: void clear()>();

        r0.<android.media.tv.TvInputManager$Session: java.lang.String mSelectedAudioTrackId> = null;

        r0.<android.media.tv.TvInputManager$Session: java.lang.String mSelectedVideoTrackId> = null;

        r0.<android.media.tv.TvInputManager$Session: java.lang.String mSelectedSubtitleTrackId> = null;

        r0.<android.media.tv.TvInputManager$Session: int mVideoWidth> = 0;

        r0.<android.media.tv.TvInputManager$Session: int mVideoHeight> = 0;

        exitmonitor r2;

     label3:
        $r9 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.ITvInputManager mService>;

        $r8 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        $i0 = r0.<android.media.tv.TvInputManager$Session: int mUserId>;

        interfaceinvoke $r9.<android.media.tv.ITvInputManager: void tune(android.os.IBinder,android.net.Uri,android.os.Bundle,int)>($r8, r13, r1, $i0);

     label4:
        return;

     label5:
        $r10 := @caughtexception;

        $r11 = virtualinvoke $r10.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r11;

     label6:
        $r12 := @caughtexception;

     label7:
        exitmonitor r2;

     label8:
        throw $r12;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch android.os.RemoteException from label3 to label4 with label5;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    void unblockContent(android.media.tv.TvContentRating)
    {
        android.media.tv.TvInputManager$Session r0;
        android.os.IBinder r1;
        android.media.tv.ITvInputManager $r3;
        java.lang.String $r4;
        int $i0;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.media.tv.TvContentRating r7;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r7 := @parameter0: android.media.tv.TvContentRating;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r7);

        r1 = r0.<android.media.tv.TvInputManager$Session: android.os.IBinder mToken>;

        if r1 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputManager", "The session has been already released");

        return;

     label1:
        $r3 = r0.<android.media.tv.TvInputManager$Session: android.media.tv.ITvInputManager mService>;

        $r4 = virtualinvoke r7.<android.media.tv.TvContentRating: java.lang.String flattenToString()>();

        $i0 = r0.<android.media.tv.TvInputManager$Session: int mUserId>;

        interfaceinvoke $r3.<android.media.tv.ITvInputManager: void unblockContent(android.os.IBinder,java.lang.String,int)>(r1, $r4, $i0);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    boolean updateTrackSelection(int, java.lang.String)
    {
        android.media.tv.TvInputManager$Session r0;
        int i0;
        java.lang.Object r1;
        java.lang.String $r2, $r3, $r4, r6;
        boolean $z0, $z1, $z2;
        java.lang.Throwable $r5;

        r0 := @this: android.media.tv.TvInputManager$Session;

        i0 := @parameter0: int;

        r6 := @parameter1: java.lang.String;

        r1 = r0.<android.media.tv.TvInputManager$Session: java.lang.Object mMetadataLock>;

        entermonitor r1;

        if i0 != 0 goto label04;

     label01:
        $r4 = r0.<android.media.tv.TvInputManager$Session: java.lang.String mSelectedAudioTrackId>;

        $z2 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>(r6, $r4);

        if $z2 != 0 goto label04;

        r0.<android.media.tv.TvInputManager$Session: java.lang.String mSelectedAudioTrackId> = r6;

        exitmonitor r1;

     label02:
        return 1;

     label03:
        $r5 := @caughtexception;

        goto label12;

     label04:
        if i0 != 1 goto label07;

     label05:
        $r3 = r0.<android.media.tv.TvInputManager$Session: java.lang.String mSelectedVideoTrackId>;

        $z1 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>(r6, $r3);

        if $z1 != 0 goto label07;

        r0.<android.media.tv.TvInputManager$Session: java.lang.String mSelectedVideoTrackId> = r6;

        exitmonitor r1;

     label06:
        return 1;

     label07:
        if i0 != 2 goto label10;

     label08:
        $r2 = r0.<android.media.tv.TvInputManager$Session: java.lang.String mSelectedSubtitleTrackId>;

        $z0 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>(r6, $r2);

        if $z0 != 0 goto label10;

        r0.<android.media.tv.TvInputManager$Session: java.lang.String mSelectedSubtitleTrackId> = r6;

        exitmonitor r1;

     label09:
        return 1;

     label10:
        exitmonitor r1;

     label11:
        return 0;

     label12:
        exitmonitor r1;

     label13:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label06 with label03;
        catch java.lang.Throwable from label08 to label09 with label03;
        catch java.lang.Throwable from label10 to label11 with label03;
        catch java.lang.Throwable from label12 to label13 with label03;
    }

    boolean updateTracks(java.util.List)
    {
        android.media.tv.TvInputManager$Session r0;
        java.lang.Object r1, $r9;
        java.util.Iterator r2;
        boolean z0, $z1, $z2, $z3, z7;
        java.util.List $r3, $r4, $r5, $r6, $r7, $r8, $r10, $r11, $r12, r14;
        int $i0, $i1, $i2;
        java.lang.Throwable $r13;
        android.media.tv.TvTrackInfo r15;

        r0 := @this: android.media.tv.TvInputManager$Session;

        r14 := @parameter0: java.util.List;

        r1 = r0.<android.media.tv.TvInputManager$Session: java.lang.Object mMetadataLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<android.media.tv.TvInputManager$Session: java.util.List mAudioTracks>;

        interfaceinvoke $r3.<java.util.List: void clear()>();

        $r4 = r0.<android.media.tv.TvInputManager$Session: java.util.List mVideoTracks>;

        interfaceinvoke $r4.<java.util.List: void clear()>();

        $r5 = r0.<android.media.tv.TvInputManager$Session: java.util.List mSubtitleTracks>;

        interfaceinvoke $r5.<java.util.List: void clear()>();

        r2 = interfaceinvoke r14.<java.util.List: java.util.Iterator iterator()>();

     label02:
        z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

     label03:
        z7 = 1;

        if z0 == 0 goto label10;

     label04:
        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r15 = (android.media.tv.TvTrackInfo) $r9;

        $i0 = virtualinvoke r15.<android.media.tv.TvTrackInfo: int getType()>();

        if $i0 != 0 goto label06;

        $r12 = r0.<android.media.tv.TvInputManager$Session: java.util.List mAudioTracks>;

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>(r15);

     label05:
        goto label09;

     label06:
        $i1 = virtualinvoke r15.<android.media.tv.TvTrackInfo: int getType()>();

        if $i1 != 1 goto label08;

        $r11 = r0.<android.media.tv.TvInputManager$Session: java.util.List mVideoTracks>;

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>(r15);

     label07:
        goto label09;

     label08:
        $i2 = virtualinvoke r15.<android.media.tv.TvTrackInfo: int getType()>();

        if $i2 != 2 goto label09;

        $r10 = r0.<android.media.tv.TvInputManager$Session: java.util.List mSubtitleTracks>;

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>(r15);

     label09:
        goto label02;

     label10:
        $r6 = r0.<android.media.tv.TvInputManager$Session: java.util.List mAudioTracks>;

        $z1 = interfaceinvoke $r6.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label13;

        $r7 = r0.<android.media.tv.TvInputManager$Session: java.util.List mVideoTracks>;

        $z2 = interfaceinvoke $r7.<java.util.List: boolean isEmpty()>();

        if $z2 == 0 goto label13;

        $r8 = r0.<android.media.tv.TvInputManager$Session: java.util.List mSubtitleTracks>;

        $z3 = interfaceinvoke $r8.<java.util.List: boolean isEmpty()>();

        if $z3 != 0 goto label12;

     label11:
        goto label13;

     label12:
        z7 = 0;

        goto label13;

     label13:
        exitmonitor r1;

     label14:
        return z7;

     label15:
        $r13 := @caughtexception;

     label16:
        exitmonitor r1;

     label17:
        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label02 to label03 with label15;
        catch java.lang.Throwable from label04 to label05 with label15;
        catch java.lang.Throwable from label06 to label07 with label15;
        catch java.lang.Throwable from label08 to label09 with label15;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    public static void <clinit>()
    {
        <android.media.tv.TvInputManager$Session: long INPUT_SESSION_NOT_RESPONDING_TIMEOUT> = 2500L;

        <android.media.tv.TvInputManager$Session: int DISPATCH_NOT_HANDLED> = 0;

        <android.media.tv.TvInputManager$Session: int DISPATCH_IN_PROGRESS> = -1;

        <android.media.tv.TvInputManager$Session: int DISPATCH_HANDLED> = 1;

        return;
    }
}
