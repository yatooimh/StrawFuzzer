public abstract class android.media.tv.TvInputService$RecordingSession extends java.lang.Object
{
    final android.os.Handler mHandler;
    private final java.lang.Object mLock;
    private final java.util.List mPendingActions;
    private android.media.tv.ITvInputSessionCallback mSessionCallback;

    public void <init>(android.content.Context)
    {
        android.media.tv.TvInputService$RecordingSession r0;
        android.content.Context r1;
        java.lang.Object $r2;
        java.util.ArrayList $r3;
        android.os.Handler $r4;
        android.os.Looper $r5;

        r0 := @this: android.media.tv.TvInputService$RecordingSession;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<android.media.tv.TvInputService$RecordingSession: java.lang.Object mLock> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<android.media.tv.TvInputService$RecordingSession: java.util.List mPendingActions> = $r3;

        $r4 = new android.os.Handler;

        $r5 = virtualinvoke r1.<android.content.Context: android.os.Looper getMainLooper()>();

        specialinvoke $r4.<android.os.Handler: void <init>(android.os.Looper)>($r5);

        r0.<android.media.tv.TvInputService$RecordingSession: android.os.Handler mHandler> = $r4;

        return;
    }

    static android.media.tv.ITvInputSessionCallback access$1400(android.media.tv.TvInputService$RecordingSession)
    {
        android.media.tv.TvInputService$RecordingSession r0;
        android.media.tv.ITvInputSessionCallback $r1;

        r0 := @parameter0: android.media.tv.TvInputService$RecordingSession;

        $r1 = r0.<android.media.tv.TvInputService$RecordingSession: android.media.tv.ITvInputSessionCallback mSessionCallback>;

        return $r1;
    }

    static void access$2200(android.media.tv.TvInputService$RecordingSession, android.media.tv.ITvInputSessionCallback)
    {
        android.media.tv.TvInputService$RecordingSession r0;
        android.media.tv.ITvInputSessionCallback r1;

        r0 := @parameter0: android.media.tv.TvInputService$RecordingSession;

        r1 := @parameter1: android.media.tv.ITvInputSessionCallback;

        specialinvoke r0.<android.media.tv.TvInputService$RecordingSession: void initialize(android.media.tv.ITvInputSessionCallback)>(r1);

        return;
    }

    private void executeOrPostRunnableOnMainThread(java.lang.Runnable)
    {
        android.media.tv.TvInputService$RecordingSession r0;
        java.lang.Object r1;
        android.media.tv.ITvInputSessionCallback $r2;
        android.os.Handler $r3, $r5;
        android.os.Looper $r4;
        boolean $z0;
        java.util.List $r6;
        java.lang.Throwable $r7;
        java.lang.Runnable r8;

        r0 := @this: android.media.tv.TvInputService$RecordingSession;

        r8 := @parameter0: java.lang.Runnable;

        r1 = r0.<android.media.tv.TvInputService$RecordingSession: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r2 = r0.<android.media.tv.TvInputService$RecordingSession: android.media.tv.ITvInputSessionCallback mSessionCallback>;

        if $r2 != null goto label03;

        $r6 = r0.<android.media.tv.TvInputService$RecordingSession: java.util.List mPendingActions>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r8);

     label02:
        goto label06;

     label03:
        $r3 = r0.<android.media.tv.TvInputService$RecordingSession: android.os.Handler mHandler>;

        $r4 = virtualinvoke $r3.<android.os.Handler: android.os.Looper getLooper()>();

        $z0 = virtualinvoke $r4.<android.os.Looper: boolean isCurrentThread()>();

        if $z0 == 0 goto label05;

        interfaceinvoke r8.<java.lang.Runnable: void run()>();

     label04:
        goto label06;

     label05:
        $r5 = r0.<android.media.tv.TvInputService$RecordingSession: android.os.Handler mHandler>;

        virtualinvoke $r5.<android.os.Handler: boolean post(java.lang.Runnable)>(r8);

     label06:
        exitmonitor r1;

     label07:
        return;

     label08:
        $r7 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private void initialize(android.media.tv.ITvInputSessionCallback)
    {
        android.media.tv.TvInputService$RecordingSession r0;
        java.lang.Object r1, $r4;
        java.util.List $r2, $r3;
        boolean $z0;
        java.lang.Runnable $r5;
        java.lang.Throwable $r6;
        android.media.tv.ITvInputSessionCallback r7;
        java.util.Iterator r8;

        r0 := @this: android.media.tv.TvInputService$RecordingSession;

        r7 := @parameter0: android.media.tv.ITvInputSessionCallback;

        r1 = r0.<android.media.tv.TvInputService$RecordingSession: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<android.media.tv.TvInputService$RecordingSession: android.media.tv.ITvInputSessionCallback mSessionCallback> = r7;

        $r2 = r0.<android.media.tv.TvInputService$RecordingSession: java.util.List mPendingActions>;

        r8 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.Runnable) $r4;

        interfaceinvoke $r5.<java.lang.Runnable: void run()>();

     label3:
        goto label2;

     label4:
        $r3 = r0.<android.media.tv.TvInputService$RecordingSession: java.util.List mPendingActions>;

        interfaceinvoke $r3.<java.util.List: void clear()>();

        exitmonitor r1;

     label5:
        return;

     label6:
        $r6 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    void appPrivateCommand(java.lang.String, android.os.Bundle)
    {
        android.media.tv.TvInputService$RecordingSession r0;
        java.lang.String r1;
        android.os.Bundle r2;

        r0 := @this: android.media.tv.TvInputService$RecordingSession;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.Bundle;

        virtualinvoke r0.<android.media.tv.TvInputService$RecordingSession: void onAppPrivateCommand(java.lang.String,android.os.Bundle)>(r1, r2);

        return;
    }

    public void notifyError(int)
    {
        android.media.tv.TvInputService$RecordingSession r0;
        int i0, i2;
        java.lang.StringBuilder $r2;
        java.lang.String $r6;
        android.media.tv.TvInputService$RecordingSession$3 $r7;

        r0 := @this: android.media.tv.TvInputService$RecordingSession;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        i2 = i0;

        if i0 <= 2 goto label2;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("notifyError - invalid error code (");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is changed to RECORDING_ERROR_UNKNOWN.");

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvInputService", $r6);

        i2 = 0;

     label2:
        $r7 = new android.media.tv.TvInputService$RecordingSession$3;

        specialinvoke $r7.<android.media.tv.TvInputService$RecordingSession$3: void <init>(android.media.tv.TvInputService$RecordingSession,int)>(r0, i2);

        specialinvoke r0.<android.media.tv.TvInputService$RecordingSession: void executeOrPostRunnableOnMainThread(java.lang.Runnable)>($r7);

        return;
    }

    public void notifyRecordingStopped(android.net.Uri)
    {
        android.media.tv.TvInputService$RecordingSession r0;
        android.net.Uri r1;
        android.media.tv.TvInputService$RecordingSession$2 $r2;

        r0 := @this: android.media.tv.TvInputService$RecordingSession;

        r1 := @parameter0: android.net.Uri;

        $r2 = new android.media.tv.TvInputService$RecordingSession$2;

        specialinvoke $r2.<android.media.tv.TvInputService$RecordingSession$2: void <init>(android.media.tv.TvInputService$RecordingSession,android.net.Uri)>(r0, r1);

        specialinvoke r0.<android.media.tv.TvInputService$RecordingSession: void executeOrPostRunnableOnMainThread(java.lang.Runnable)>($r2);

        return;
    }

    public void notifySessionEvent(java.lang.String, android.os.Bundle)
    {
        android.media.tv.TvInputService$RecordingSession r0;
        java.lang.String r1;
        android.os.Bundle r2;
        android.media.tv.TvInputService$RecordingSession$4 $r4;

        r0 := @this: android.media.tv.TvInputService$RecordingSession;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.Bundle;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = new android.media.tv.TvInputService$RecordingSession$4;

        specialinvoke $r4.<android.media.tv.TvInputService$RecordingSession$4: void <init>(android.media.tv.TvInputService$RecordingSession,java.lang.String,android.os.Bundle)>(r0, r1, r2);

        specialinvoke r0.<android.media.tv.TvInputService$RecordingSession: void executeOrPostRunnableOnMainThread(java.lang.Runnable)>($r4);

        return;
    }

    public void notifyTuned(android.net.Uri)
    {
        android.media.tv.TvInputService$RecordingSession r0;
        android.net.Uri r1;
        android.media.tv.TvInputService$RecordingSession$1 $r2;

        r0 := @this: android.media.tv.TvInputService$RecordingSession;

        r1 := @parameter0: android.net.Uri;

        $r2 = new android.media.tv.TvInputService$RecordingSession$1;

        specialinvoke $r2.<android.media.tv.TvInputService$RecordingSession$1: void <init>(android.media.tv.TvInputService$RecordingSession,android.net.Uri)>(r0, r1);

        specialinvoke r0.<android.media.tv.TvInputService$RecordingSession: void executeOrPostRunnableOnMainThread(java.lang.Runnable)>($r2);

        return;
    }

    public void onAppPrivateCommand(java.lang.String, android.os.Bundle)
    {
        android.media.tv.TvInputService$RecordingSession r0;
        java.lang.String r1;
        android.os.Bundle r2;

        r0 := @this: android.media.tv.TvInputService$RecordingSession;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.Bundle;

        return;
    }

    public abstract void onRelease();

    public abstract void onStartRecording(android.net.Uri);

    public void onStartRecording(android.net.Uri, android.os.Bundle)
    {
        android.media.tv.TvInputService$RecordingSession r0;
        android.net.Uri r1;
        android.os.Bundle r2;

        r0 := @this: android.media.tv.TvInputService$RecordingSession;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: android.os.Bundle;

        virtualinvoke r0.<android.media.tv.TvInputService$RecordingSession: void onStartRecording(android.net.Uri)>(r1);

        return;
    }

    public abstract void onStopRecording();

    public abstract void onTune(android.net.Uri);

    public void onTune(android.net.Uri, android.os.Bundle)
    {
        android.media.tv.TvInputService$RecordingSession r0;
        android.net.Uri r1;
        android.os.Bundle r2;

        r0 := @this: android.media.tv.TvInputService$RecordingSession;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: android.os.Bundle;

        virtualinvoke r0.<android.media.tv.TvInputService$RecordingSession: void onTune(android.net.Uri)>(r1);

        return;
    }

    void release()
    {
        android.media.tv.TvInputService$RecordingSession r0;

        r0 := @this: android.media.tv.TvInputService$RecordingSession;

        virtualinvoke r0.<android.media.tv.TvInputService$RecordingSession: void onRelease()>();

        return;
    }

    void startRecording(android.net.Uri, android.os.Bundle)
    {
        android.media.tv.TvInputService$RecordingSession r0;
        android.net.Uri r1;
        android.os.Bundle r2;

        r0 := @this: android.media.tv.TvInputService$RecordingSession;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: android.os.Bundle;

        virtualinvoke r0.<android.media.tv.TvInputService$RecordingSession: void onStartRecording(android.net.Uri,android.os.Bundle)>(r1, r2);

        return;
    }

    void stopRecording()
    {
        android.media.tv.TvInputService$RecordingSession r0;

        r0 := @this: android.media.tv.TvInputService$RecordingSession;

        virtualinvoke r0.<android.media.tv.TvInputService$RecordingSession: void onStopRecording()>();

        return;
    }

    void tune(android.net.Uri, android.os.Bundle)
    {
        android.media.tv.TvInputService$RecordingSession r0;
        android.net.Uri r1;
        android.os.Bundle r2;

        r0 := @this: android.media.tv.TvInputService$RecordingSession;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: android.os.Bundle;

        virtualinvoke r0.<android.media.tv.TvInputService$RecordingSession: void onTune(android.net.Uri,android.os.Bundle)>(r1, r2);

        return;
    }
}
