public class android.media.tv.TvRecordingClient extends java.lang.Object
{
    private static final boolean DEBUG;
    private static final java.lang.String TAG;
    private final android.media.tv.TvRecordingClient$RecordingCallback mCallback;
    private final android.os.Handler mHandler;
    private boolean mIsRecordingStarted;
    private boolean mIsTuned;
    private final java.util.Queue mPendingAppPrivateCommands;
    private android.media.tv.TvInputManager$Session mSession;
    private android.media.tv.TvRecordingClient$MySessionCallback mSessionCallback;
    private final android.media.tv.TvInputManager mTvInputManager;

    public void <init>(android.content.Context, java.lang.String, android.media.tv.TvRecordingClient$RecordingCallback, android.os.Handler)
    {
        android.media.tv.TvRecordingClient r0;
        android.content.Context r1;
        java.lang.String r2;
        android.media.tv.TvRecordingClient$RecordingCallback r3;
        java.util.ArrayDeque $r4;
        java.lang.Object $r5;
        android.media.tv.TvInputManager $r6;
        android.os.Handler $r7, r9;
        android.os.Looper $r8;

        r0 := @this: android.media.tv.TvRecordingClient;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.media.tv.TvRecordingClient$RecordingCallback;

        r9 := @parameter3: android.os.Handler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new java.util.ArrayDeque;

        specialinvoke $r4.<java.util.ArrayDeque: void <init>()>();

        r0.<android.media.tv.TvRecordingClient: java.util.Queue mPendingAppPrivateCommands> = $r4;

        r0.<android.media.tv.TvRecordingClient: android.media.tv.TvRecordingClient$RecordingCallback mCallback> = r3;

        if r9 != null goto label1;

        $r7 = new android.os.Handler;

        $r8 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r7.<android.os.Handler: void <init>(android.os.Looper)>($r8);

        r9 = $r7;

        goto label1;

     label1:
        r0.<android.media.tv.TvRecordingClient: android.os.Handler mHandler> = r9;

        $r5 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("tv_input");

        $r6 = (android.media.tv.TvInputManager) $r5;

        r0.<android.media.tv.TvRecordingClient: android.media.tv.TvInputManager mTvInputManager> = $r6;

        return;
    }

    static android.media.tv.TvRecordingClient$MySessionCallback access$000(android.media.tv.TvRecordingClient)
    {
        android.media.tv.TvRecordingClient r0;
        android.media.tv.TvRecordingClient$MySessionCallback $r1;

        r0 := @parameter0: android.media.tv.TvRecordingClient;

        $r1 = r0.<android.media.tv.TvRecordingClient: android.media.tv.TvRecordingClient$MySessionCallback mSessionCallback>;

        return $r1;
    }

    static android.media.tv.TvRecordingClient$MySessionCallback access$002(android.media.tv.TvRecordingClient, android.media.tv.TvRecordingClient$MySessionCallback)
    {
        android.media.tv.TvRecordingClient r0;
        android.media.tv.TvRecordingClient$MySessionCallback r1;

        r0 := @parameter0: android.media.tv.TvRecordingClient;

        r1 := @parameter1: android.media.tv.TvRecordingClient$MySessionCallback;

        r0.<android.media.tv.TvRecordingClient: android.media.tv.TvRecordingClient$MySessionCallback mSessionCallback> = r1;

        return r1;
    }

    static android.media.tv.TvInputManager$Session access$100(android.media.tv.TvRecordingClient)
    {
        android.media.tv.TvRecordingClient r0;
        android.media.tv.TvInputManager$Session $r1;

        r0 := @parameter0: android.media.tv.TvRecordingClient;

        $r1 = r0.<android.media.tv.TvRecordingClient: android.media.tv.TvInputManager$Session mSession>;

        return $r1;
    }

    static android.media.tv.TvInputManager$Session access$102(android.media.tv.TvRecordingClient, android.media.tv.TvInputManager$Session)
    {
        android.media.tv.TvRecordingClient r0;
        android.media.tv.TvInputManager$Session r1;

        r0 := @parameter0: android.media.tv.TvRecordingClient;

        r1 := @parameter1: android.media.tv.TvInputManager$Session;

        r0.<android.media.tv.TvRecordingClient: android.media.tv.TvInputManager$Session mSession> = r1;

        return r1;
    }

    static java.util.Queue access$200(android.media.tv.TvRecordingClient)
    {
        android.media.tv.TvRecordingClient r0;
        java.util.Queue $r1;

        r0 := @parameter0: android.media.tv.TvRecordingClient;

        $r1 = r0.<android.media.tv.TvRecordingClient: java.util.Queue mPendingAppPrivateCommands>;

        return $r1;
    }

    static android.media.tv.TvRecordingClient$RecordingCallback access$300(android.media.tv.TvRecordingClient)
    {
        android.media.tv.TvRecordingClient r0;
        android.media.tv.TvRecordingClient$RecordingCallback $r1;

        r0 := @parameter0: android.media.tv.TvRecordingClient;

        $r1 = r0.<android.media.tv.TvRecordingClient: android.media.tv.TvRecordingClient$RecordingCallback mCallback>;

        return $r1;
    }

    static boolean access$402(android.media.tv.TvRecordingClient, boolean)
    {
        android.media.tv.TvRecordingClient r0;
        boolean z0;

        r0 := @parameter0: android.media.tv.TvRecordingClient;

        z0 := @parameter1: boolean;

        r0.<android.media.tv.TvRecordingClient: boolean mIsTuned> = z0;

        return z0;
    }

    static boolean access$502(android.media.tv.TvRecordingClient, boolean)
    {
        android.media.tv.TvRecordingClient r0;
        boolean z0;

        r0 := @parameter0: android.media.tv.TvRecordingClient;

        z0 := @parameter1: boolean;

        r0.<android.media.tv.TvRecordingClient: boolean mIsRecordingStarted> = z0;

        return z0;
    }

    private void resetInternal()
    {
        android.media.tv.TvRecordingClient r0;
        android.media.tv.TvInputManager$Session r1;
        java.util.Queue $r2;

        r0 := @this: android.media.tv.TvRecordingClient;

        r0.<android.media.tv.TvRecordingClient: android.media.tv.TvRecordingClient$MySessionCallback mSessionCallback> = null;

        $r2 = r0.<android.media.tv.TvRecordingClient: java.util.Queue mPendingAppPrivateCommands>;

        interfaceinvoke $r2.<java.util.Queue: void clear()>();

        r1 = r0.<android.media.tv.TvRecordingClient: android.media.tv.TvInputManager$Session mSession>;

        if r1 == null goto label1;

        virtualinvoke r1.<android.media.tv.TvInputManager$Session: void release()>();

        r0.<android.media.tv.TvRecordingClient: boolean mIsTuned> = 0;

        r0.<android.media.tv.TvRecordingClient: boolean mIsRecordingStarted> = 0;

        r0.<android.media.tv.TvRecordingClient: android.media.tv.TvInputManager$Session mSession> = null;

     label1:
        return;
    }

    public void release()
    {
        android.media.tv.TvRecordingClient r0;

        r0 := @this: android.media.tv.TvRecordingClient;

        specialinvoke r0.<android.media.tv.TvRecordingClient: void resetInternal()>();

        return;
    }

    public void sendAppPrivateCommand(java.lang.String, android.os.Bundle)
    {
        android.media.tv.TvRecordingClient r0;
        java.lang.String r1, $r8;
        android.os.Bundle r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;
        java.util.Queue $r9;
        android.util.Pair $r10;
        android.media.tv.TvInputManager$Session r11;

        r0 := @this: android.media.tv.TvRecordingClient;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.Bundle;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 != 0 goto label3;

        r11 = r0.<android.media.tv.TvRecordingClient: android.media.tv.TvInputManager$Session mSession>;

        if r11 == null goto label1;

        virtualinvoke r11.<android.media.tv.TvInputManager$Session: void sendAppPrivateCommand(java.lang.String,android.os.Bundle)>(r1, r2);

        goto label2;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sendAppPrivateCommand - session not yet created (action \"");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" pending)");

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvRecordingClient", $r8);

        $r9 = r0.<android.media.tv.TvRecordingClient: java.util.Queue mPendingAppPrivateCommands>;

        $r10 = staticinvoke <android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>(r1, r2);

        interfaceinvoke $r9.<java.util.Queue: boolean add(java.lang.Object)>($r10);

     label2:
        return;

     label3:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("action cannot be null or an empty string");

        throw $r3;
    }

    public void startRecording(android.net.Uri)
    {
        android.media.tv.TvRecordingClient r0;
        android.net.Uri r1;
        android.os.Bundle $r2;

        r0 := @this: android.media.tv.TvRecordingClient;

        r1 := @parameter0: android.net.Uri;

        $r2 = <android.os.Bundle: android.os.Bundle EMPTY>;

        virtualinvoke r0.<android.media.tv.TvRecordingClient: void startRecording(android.net.Uri,android.os.Bundle)>(r1, $r2);

        return;
    }

    public void startRecording(android.net.Uri, android.os.Bundle)
    {
        android.media.tv.TvRecordingClient r0;
        android.net.Uri r1;
        android.os.Bundle r2;
        android.media.tv.TvInputManager$Session r3;
        boolean $z0;
        java.lang.IllegalStateException $r4;

        r0 := @this: android.media.tv.TvRecordingClient;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: android.os.Bundle;

        $z0 = r0.<android.media.tv.TvRecordingClient: boolean mIsTuned>;

        if $z0 == 0 goto label2;

        r3 = r0.<android.media.tv.TvRecordingClient: android.media.tv.TvInputManager$Session mSession>;

        if r3 == null goto label1;

        virtualinvoke r3.<android.media.tv.TvInputManager$Session: void startRecording(android.net.Uri,android.os.Bundle)>(r1, r2);

        r0.<android.media.tv.TvRecordingClient: boolean mIsRecordingStarted> = 1;

     label1:
        return;

     label2:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("startRecording failed - not yet tuned");

        throw $r4;
    }

    public void stopRecording()
    {
        android.media.tv.TvRecordingClient r0;
        android.media.tv.TvInputManager$Session r1;
        boolean $z0;

        r0 := @this: android.media.tv.TvRecordingClient;

        $z0 = r0.<android.media.tv.TvRecordingClient: boolean mIsRecordingStarted>;

        if $z0 != 0 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvRecordingClient", "stopRecording failed - recording not yet started");

     label1:
        r1 = r0.<android.media.tv.TvRecordingClient: android.media.tv.TvInputManager$Session mSession>;

        if r1 == null goto label2;

        virtualinvoke r1.<android.media.tv.TvInputManager$Session: void stopRecording()>();

     label2:
        return;
    }

    public void tune(java.lang.String, android.net.Uri)
    {
        android.media.tv.TvRecordingClient r0;
        java.lang.String r1;
        android.net.Uri r2;

        r0 := @this: android.media.tv.TvRecordingClient;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.net.Uri;

        virtualinvoke r0.<android.media.tv.TvRecordingClient: void tune(java.lang.String,android.net.Uri,android.os.Bundle)>(r1, r2, null);

        return;
    }

    public void tune(java.lang.String, android.net.Uri, android.os.Bundle)
    {
        android.media.tv.TvRecordingClient r0;
        android.media.tv.TvRecordingClient$MySessionCallback r1, $r4, $r7, $r8;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r2;
        java.lang.IllegalStateException $r3;
        android.os.Handler $r5;
        java.lang.String $r6, r9;
        android.net.Uri r10;
        android.os.Bundle r11;
        android.media.tv.TvInputManager$Session r12;
        android.media.tv.TvInputManager r14;

        r0 := @this: android.media.tv.TvRecordingClient;

        r9 := @parameter0: java.lang.String;

        r10 := @parameter1: android.net.Uri;

        r11 := @parameter2: android.os.Bundle;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r9);

        if $z0 != 0 goto label5;

        $z1 = r0.<android.media.tv.TvRecordingClient: boolean mIsRecordingStarted>;

        if $z1 != 0 goto label4;

        r1 = r0.<android.media.tv.TvRecordingClient: android.media.tv.TvRecordingClient$MySessionCallback mSessionCallback>;

        if r1 == null goto label2;

        $r6 = r1.<android.media.tv.TvRecordingClient$MySessionCallback: java.lang.String mInputId>;

        $z2 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r6, r9);

        if $z2 == 0 goto label2;

        r12 = r0.<android.media.tv.TvRecordingClient: android.media.tv.TvInputManager$Session mSession>;

        if r12 == null goto label1;

        virtualinvoke r12.<android.media.tv.TvInputManager$Session: void tune(android.net.Uri,android.os.Bundle)>(r10, r11);

        goto label3;

     label1:
        $r7 = r0.<android.media.tv.TvRecordingClient: android.media.tv.TvRecordingClient$MySessionCallback mSessionCallback>;

        $r7.<android.media.tv.TvRecordingClient$MySessionCallback: android.net.Uri mChannelUri> = r10;

        $r8 = r0.<android.media.tv.TvRecordingClient: android.media.tv.TvRecordingClient$MySessionCallback mSessionCallback>;

        $r8.<android.media.tv.TvRecordingClient$MySessionCallback: android.os.Bundle mConnectionParams> = r11;

        goto label3;

     label2:
        specialinvoke r0.<android.media.tv.TvRecordingClient: void resetInternal()>();

        $r4 = new android.media.tv.TvRecordingClient$MySessionCallback;

        specialinvoke $r4.<android.media.tv.TvRecordingClient$MySessionCallback: void <init>(android.media.tv.TvRecordingClient,java.lang.String,android.net.Uri,android.os.Bundle)>(r0, r9, r10, r11);

        r0.<android.media.tv.TvRecordingClient: android.media.tv.TvRecordingClient$MySessionCallback mSessionCallback> = $r4;

        r14 = r0.<android.media.tv.TvRecordingClient: android.media.tv.TvInputManager mTvInputManager>;

        if r14 == null goto label3;

        $r5 = r0.<android.media.tv.TvRecordingClient: android.os.Handler mHandler>;

        virtualinvoke r14.<android.media.tv.TvInputManager: void createRecordingSession(java.lang.String,android.media.tv.TvInputManager$SessionCallback,android.os.Handler)>(r9, $r4, $r5);

     label3:
        return;

     label4:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("tune failed - recording already started");

        throw $r3;

     label5:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("inputId cannot be null or an empty string");

        throw $r2;
    }

    public static void <clinit>()
    {
        <android.media.tv.TvRecordingClient: java.lang.String TAG> = "TvRecordingClient";

        <android.media.tv.TvRecordingClient: boolean DEBUG> = 0;

        return;
    }
}
