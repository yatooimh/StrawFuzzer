public class android.media.tv.TvView extends android.view.ViewGroup
{
    private static final boolean DEBUG;
    private static final java.lang.ref.WeakReference NULL_TV_VIEW;
    private static final java.lang.String TAG;
    private static final int ZORDER_MEDIA;
    private static final int ZORDER_MEDIA_OVERLAY;
    private static final int ZORDER_ON_TOP;
    private static java.lang.ref.WeakReference sMainTvView;
    private static final java.lang.Object sMainTvViewLock;
    private final android.util.AttributeSet mAttrs;
    private android.media.tv.TvView$TvInputCallback mCallback;
    private java.lang.Boolean mCaptionEnabled;
    private final int mDefStyleAttr;
    private final android.media.tv.TvInputManager$Session$FinishedInputEventCallback mFinishedInputEventCallback;
    private final android.os.Handler mHandler;
    private android.media.tv.TvView$OnUnhandledInputEventListener mOnUnhandledInputEventListener;
    private boolean mOverlayViewCreated;
    private android.graphics.Rect mOverlayViewFrame;
    private final java.util.Queue mPendingAppPrivateCommands;
    private android.media.tv.TvInputManager$Session mSession;
    private android.media.tv.TvView$MySessionCallback mSessionCallback;
    private java.lang.Float mStreamVolume;
    private android.view.Surface mSurface;
    private boolean mSurfaceChanged;
    private int mSurfaceFormat;
    private int mSurfaceHeight;
    private final android.view.SurfaceHolder$Callback mSurfaceHolderCallback;
    private android.view.SurfaceView mSurfaceView;
    private int mSurfaceViewBottom;
    private int mSurfaceViewLeft;
    private int mSurfaceViewRight;
    private int mSurfaceViewTop;
    private int mSurfaceWidth;
    private android.media.tv.TvView$TimeShiftPositionCallback mTimeShiftPositionCallback;
    private final android.media.tv.TvInputManager mTvInputManager;
    private boolean mUseRequestedSurfaceLayout;
    private int mWindowZOrder;

    static void <clinit>()
    {
        java.lang.ref.WeakReference $r0, $r2;
        java.lang.Object $r1;

        <android.media.tv.TvView: int ZORDER_ON_TOP> = 2;

        <android.media.tv.TvView: int ZORDER_MEDIA_OVERLAY> = 1;

        <android.media.tv.TvView: int ZORDER_MEDIA> = 0;

        <android.media.tv.TvView: java.lang.String TAG> = "TvView";

        <android.media.tv.TvView: boolean DEBUG> = 0;

        $r0 = new java.lang.ref.WeakReference;

        specialinvoke $r0.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(null);

        <android.media.tv.TvView: java.lang.ref.WeakReference NULL_TV_VIEW> = $r0;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        <android.media.tv.TvView: java.lang.Object sMainTvViewLock> = $r1;

        $r2 = <android.media.tv.TvView: java.lang.ref.WeakReference NULL_TV_VIEW>;

        <android.media.tv.TvView: java.lang.ref.WeakReference sMainTvView> = $r2;

        return;
    }

    public void <init>(android.content.Context)
    {
        android.media.tv.TvView r0;
        android.content.Context r1;

        r0 := @this: android.media.tv.TvView;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.media.tv.TvView: void <init>(android.content.Context,android.util.AttributeSet,int)>(r1, null, 0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        android.media.tv.TvView r0;
        android.content.Context r1;
        android.util.AttributeSet r2;

        r0 := @this: android.media.tv.TvView;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<android.media.tv.TvView: void <init>(android.content.Context,android.util.AttributeSet,int)>(r1, r2, 0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int)
    {
        android.media.tv.TvView r0;
        android.content.Context r1, $r7;
        android.util.AttributeSet r2;
        int i0;
        android.os.Handler $r3;
        java.util.ArrayDeque $r4;
        android.media.tv.TvView$1 $r5;
        android.media.tv.TvView$2 $r6;
        java.lang.Object $r8;
        android.media.tv.TvInputManager $r9;

        r0 := @this: android.media.tv.TvView;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        specialinvoke r0.<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet,int)>(r1, r2, i0);

        $r3 = new android.os.Handler;

        specialinvoke $r3.<android.os.Handler: void <init>()>();

        r0.<android.media.tv.TvView: android.os.Handler mHandler> = $r3;

        $r4 = new java.util.ArrayDeque;

        specialinvoke $r4.<java.util.ArrayDeque: void <init>()>();

        r0.<android.media.tv.TvView: java.util.Queue mPendingAppPrivateCommands> = $r4;

        $r5 = new android.media.tv.TvView$1;

        specialinvoke $r5.<android.media.tv.TvView$1: void <init>(android.media.tv.TvView)>(r0);

        r0.<android.media.tv.TvView: android.view.SurfaceHolder$Callback mSurfaceHolderCallback> = $r5;

        $r6 = new android.media.tv.TvView$2;

        specialinvoke $r6.<android.media.tv.TvView$2: void <init>(android.media.tv.TvView)>(r0);

        r0.<android.media.tv.TvView: android.media.tv.TvInputManager$Session$FinishedInputEventCallback mFinishedInputEventCallback> = $r6;

        r0.<android.media.tv.TvView: android.util.AttributeSet mAttrs> = r2;

        r0.<android.media.tv.TvView: int mDefStyleAttr> = i0;

        specialinvoke r0.<android.media.tv.TvView: void resetSurfaceView()>();

        $r7 = virtualinvoke r0.<android.media.tv.TvView: android.content.Context getContext()>();

        $r8 = virtualinvoke $r7.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("tv_input");

        $r9 = (android.media.tv.TvInputManager) $r8;

        r0.<android.media.tv.TvView: android.media.tv.TvInputManager mTvInputManager> = $r9;

        return;
    }

    static int access$000(android.media.tv.TvView)
    {
        android.media.tv.TvView r0;
        int $i0;

        r0 := @parameter0: android.media.tv.TvView;

        $i0 = r0.<android.media.tv.TvView: int mSurfaceFormat>;

        return $i0;
    }

    static int access$002(android.media.tv.TvView, int)
    {
        android.media.tv.TvView r0;
        int i0;

        r0 := @parameter0: android.media.tv.TvView;

        i0 := @parameter1: int;

        r0.<android.media.tv.TvView: int mSurfaceFormat> = i0;

        return i0;
    }

    static int access$100(android.media.tv.TvView)
    {
        android.media.tv.TvView r0;
        int $i0;

        r0 := @parameter0: android.media.tv.TvView;

        $i0 = r0.<android.media.tv.TvView: int mSurfaceWidth>;

        return $i0;
    }

    static java.util.Queue access$1000(android.media.tv.TvView)
    {
        android.media.tv.TvView r0;
        java.util.Queue $r1;

        r0 := @parameter0: android.media.tv.TvView;

        $r1 = r0.<android.media.tv.TvView: java.util.Queue mPendingAppPrivateCommands>;

        return $r1;
    }

    static int access$102(android.media.tv.TvView, int)
    {
        android.media.tv.TvView r0;
        int i0;

        r0 := @parameter0: android.media.tv.TvView;

        i0 := @parameter1: int;

        r0.<android.media.tv.TvView: int mSurfaceWidth> = i0;

        return i0;
    }

    static java.lang.Object access$1100()
    {
        java.lang.Object $r0;

        $r0 = <android.media.tv.TvView: java.lang.Object sMainTvViewLock>;

        return $r0;
    }

    static java.lang.ref.WeakReference access$1200()
    {
        java.lang.ref.WeakReference $r0;

        $r0 = <android.media.tv.TvView: java.lang.ref.WeakReference sMainTvView>;

        return $r0;
    }

    static boolean access$1300(android.media.tv.TvView)
    {
        android.media.tv.TvView r0;
        boolean $z0;

        r0 := @parameter0: android.media.tv.TvView;

        $z0 = specialinvoke r0.<android.media.tv.TvView: boolean checkChangeHdmiCecActiveSourcePermission()>();

        return $z0;
    }

    static void access$1400(android.media.tv.TvView)
    {
        android.media.tv.TvView r0;

        r0 := @parameter0: android.media.tv.TvView;

        specialinvoke r0.<android.media.tv.TvView: void createSessionOverlayView()>();

        return;
    }

    static java.lang.Float access$1500(android.media.tv.TvView)
    {
        android.media.tv.TvView r0;
        java.lang.Float $r1;

        r0 := @parameter0: android.media.tv.TvView;

        $r1 = r0.<android.media.tv.TvView: java.lang.Float mStreamVolume>;

        return $r1;
    }

    static java.lang.Boolean access$1600(android.media.tv.TvView)
    {
        android.media.tv.TvView r0;
        java.lang.Boolean $r1;

        r0 := @parameter0: android.media.tv.TvView;

        $r1 = r0.<android.media.tv.TvView: java.lang.Boolean mCaptionEnabled>;

        return $r1;
    }

    static void access$1700(android.media.tv.TvView)
    {
        android.media.tv.TvView r0;

        r0 := @parameter0: android.media.tv.TvView;

        specialinvoke r0.<android.media.tv.TvView: void ensurePositionTracking()>();

        return;
    }

    static android.media.tv.TvView$TvInputCallback access$1800(android.media.tv.TvView)
    {
        android.media.tv.TvView r0;
        android.media.tv.TvView$TvInputCallback $r1;

        r0 := @parameter0: android.media.tv.TvView;

        $r1 = r0.<android.media.tv.TvView: android.media.tv.TvView$TvInputCallback mCallback>;

        return $r1;
    }

    static boolean access$1902(android.media.tv.TvView, boolean)
    {
        android.media.tv.TvView r0;
        boolean z0;

        r0 := @parameter0: android.media.tv.TvView;

        z0 := @parameter1: boolean;

        r0.<android.media.tv.TvView: boolean mOverlayViewCreated> = z0;

        return z0;
    }

    static int access$200(android.media.tv.TvView)
    {
        android.media.tv.TvView r0;
        int $i0;

        r0 := @parameter0: android.media.tv.TvView;

        $i0 = r0.<android.media.tv.TvView: int mSurfaceHeight>;

        return $i0;
    }

    static android.graphics.Rect access$2002(android.media.tv.TvView, android.graphics.Rect)
    {
        android.media.tv.TvView r0;
        android.graphics.Rect r1;

        r0 := @parameter0: android.media.tv.TvView;

        r1 := @parameter1: android.graphics.Rect;

        r0.<android.media.tv.TvView: android.graphics.Rect mOverlayViewFrame> = r1;

        return r1;
    }

    static int access$202(android.media.tv.TvView, int)
    {
        android.media.tv.TvView r0;
        int i0;

        r0 := @parameter0: android.media.tv.TvView;

        i0 := @parameter1: int;

        r0.<android.media.tv.TvView: int mSurfaceHeight> = i0;

        return i0;
    }

    static int access$2102(android.media.tv.TvView, int)
    {
        android.media.tv.TvView r0;
        int i0;

        r0 := @parameter0: android.media.tv.TvView;

        i0 := @parameter1: int;

        r0.<android.media.tv.TvView: int mSurfaceViewLeft> = i0;

        return i0;
    }

    static int access$2202(android.media.tv.TvView, int)
    {
        android.media.tv.TvView r0;
        int i0;

        r0 := @parameter0: android.media.tv.TvView;

        i0 := @parameter1: int;

        r0.<android.media.tv.TvView: int mSurfaceViewTop> = i0;

        return i0;
    }

    static int access$2302(android.media.tv.TvView, int)
    {
        android.media.tv.TvView r0;
        int i0;

        r0 := @parameter0: android.media.tv.TvView;

        i0 := @parameter1: int;

        r0.<android.media.tv.TvView: int mSurfaceViewRight> = i0;

        return i0;
    }

    static int access$2402(android.media.tv.TvView, int)
    {
        android.media.tv.TvView r0;
        int i0;

        r0 := @parameter0: android.media.tv.TvView;

        i0 := @parameter1: int;

        r0.<android.media.tv.TvView: int mSurfaceViewBottom> = i0;

        return i0;
    }

    static boolean access$2502(android.media.tv.TvView, boolean)
    {
        android.media.tv.TvView r0;
        boolean z0;

        r0 := @parameter0: android.media.tv.TvView;

        z0 := @parameter1: boolean;

        r0.<android.media.tv.TvView: boolean mUseRequestedSurfaceLayout> = z0;

        return z0;
    }

    static android.media.tv.TvView$TimeShiftPositionCallback access$2600(android.media.tv.TvView)
    {
        android.media.tv.TvView r0;
        android.media.tv.TvView$TimeShiftPositionCallback $r1;

        r0 := @parameter0: android.media.tv.TvView;

        $r1 = r0.<android.media.tv.TvView: android.media.tv.TvView$TimeShiftPositionCallback mTimeShiftPositionCallback>;

        return $r1;
    }

    static boolean access$300(android.media.tv.TvView)
    {
        android.media.tv.TvView r0;
        boolean $z0;

        r0 := @parameter0: android.media.tv.TvView;

        $z0 = r0.<android.media.tv.TvView: boolean mSurfaceChanged>;

        return $z0;
    }

    static boolean access$302(android.media.tv.TvView, boolean)
    {
        android.media.tv.TvView r0;
        boolean z0;

        r0 := @parameter0: android.media.tv.TvView;

        z0 := @parameter1: boolean;

        r0.<android.media.tv.TvView: boolean mSurfaceChanged> = z0;

        return z0;
    }

    static void access$400(android.media.tv.TvView, int, int, int)
    {
        android.media.tv.TvView r0;
        int i0, i1, i2;

        r0 := @parameter0: android.media.tv.TvView;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        specialinvoke r0.<android.media.tv.TvView: void dispatchSurfaceChanged(int,int,int)>(i0, i1, i2);

        return;
    }

    static android.view.Surface access$500(android.media.tv.TvView)
    {
        android.media.tv.TvView r0;
        android.view.Surface $r1;

        r0 := @parameter0: android.media.tv.TvView;

        $r1 = r0.<android.media.tv.TvView: android.view.Surface mSurface>;

        return $r1;
    }

    static android.view.Surface access$502(android.media.tv.TvView, android.view.Surface)
    {
        android.media.tv.TvView r0;
        android.view.Surface r1;

        r0 := @parameter0: android.media.tv.TvView;

        r1 := @parameter1: android.view.Surface;

        r0.<android.media.tv.TvView: android.view.Surface mSurface> = r1;

        return r1;
    }

    static void access$600(android.media.tv.TvView, android.view.Surface)
    {
        android.media.tv.TvView r0;
        android.view.Surface r1;

        r0 := @parameter0: android.media.tv.TvView;

        r1 := @parameter1: android.view.Surface;

        specialinvoke r0.<android.media.tv.TvView: void setSessionSurface(android.view.Surface)>(r1);

        return;
    }

    static void access$700(android.media.tv.TvView)
    {
        android.media.tv.TvView r0;

        r0 := @parameter0: android.media.tv.TvView;

        specialinvoke r0.<android.media.tv.TvView: void relayoutSessionOverlayView()>();

        return;
    }

    static android.media.tv.TvView$MySessionCallback access$800(android.media.tv.TvView)
    {
        android.media.tv.TvView r0;
        android.media.tv.TvView$MySessionCallback $r1;

        r0 := @parameter0: android.media.tv.TvView;

        $r1 = r0.<android.media.tv.TvView: android.media.tv.TvView$MySessionCallback mSessionCallback>;

        return $r1;
    }

    static android.media.tv.TvView$MySessionCallback access$802(android.media.tv.TvView, android.media.tv.TvView$MySessionCallback)
    {
        android.media.tv.TvView r0;
        android.media.tv.TvView$MySessionCallback r1;

        r0 := @parameter0: android.media.tv.TvView;

        r1 := @parameter1: android.media.tv.TvView$MySessionCallback;

        r0.<android.media.tv.TvView: android.media.tv.TvView$MySessionCallback mSessionCallback> = r1;

        return r1;
    }

    static android.media.tv.TvInputManager$Session access$900(android.media.tv.TvView)
    {
        android.media.tv.TvView r0;
        android.media.tv.TvInputManager$Session $r1;

        r0 := @parameter0: android.media.tv.TvView;

        $r1 = r0.<android.media.tv.TvView: android.media.tv.TvInputManager$Session mSession>;

        return $r1;
    }

    static android.media.tv.TvInputManager$Session access$902(android.media.tv.TvView, android.media.tv.TvInputManager$Session)
    {
        android.media.tv.TvView r0;
        android.media.tv.TvInputManager$Session r1;

        r0 := @parameter0: android.media.tv.TvView;

        r1 := @parameter1: android.media.tv.TvInputManager$Session;

        r0.<android.media.tv.TvView: android.media.tv.TvInputManager$Session mSession> = r1;

        return r1;
    }

    private boolean checkChangeHdmiCecActiveSourcePermission()
    {
        android.media.tv.TvView r0;
        android.content.Context $r1;
        int $i0;
        boolean z0;

        r0 := @this: android.media.tv.TvView;

        $r1 = virtualinvoke r0.<android.media.tv.TvView: android.content.Context getContext()>();

        $i0 = virtualinvoke $r1.<android.content.Context: int checkSelfPermission(java.lang.String)>("android.permission.CHANGE_HDMI_CEC_ACTIVE_SOURCE");

        if $i0 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private void createSessionOverlayView()
    {
        android.media.tv.TvView r0;
        android.graphics.Rect r1;
        android.media.tv.TvInputManager$Session $r2, $r3;
        boolean $z0, $z1;
        int $i0;

        r0 := @this: android.media.tv.TvView;

        $r2 = r0.<android.media.tv.TvView: android.media.tv.TvInputManager$Session mSession>;

        if $r2 == null goto label2;

        $z0 = virtualinvoke r0.<android.media.tv.TvView: boolean isAttachedToWindow()>();

        if $z0 == 0 goto label2;

        $z1 = r0.<android.media.tv.TvView: boolean mOverlayViewCreated>;

        if $z1 != 0 goto label2;

        $i0 = r0.<android.media.tv.TvView: int mWindowZOrder>;

        if $i0 == 0 goto label1;

        goto label2;

     label1:
        r1 = specialinvoke r0.<android.media.tv.TvView: android.graphics.Rect getViewFrameOnScreen()>();

        r0.<android.media.tv.TvView: android.graphics.Rect mOverlayViewFrame> = r1;

        $r3 = r0.<android.media.tv.TvView: android.media.tv.TvInputManager$Session mSession>;

        virtualinvoke $r3.<android.media.tv.TvInputManager$Session: void createOverlayView(android.view.View,android.graphics.Rect)>(r0, r1);

        r0.<android.media.tv.TvView: boolean mOverlayViewCreated> = 1;

        return;

     label2:
        return;
    }

    private void dispatchSurfaceChanged(int, int, int)
    {
        android.media.tv.TvView r0;
        int i0, i1, i2;
        android.media.tv.TvInputManager$Session r1;

        r0 := @this: android.media.tv.TvView;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 = r0.<android.media.tv.TvView: android.media.tv.TvInputManager$Session mSession>;

        if r1 != null goto label1;

        return;

     label1:
        virtualinvoke r1.<android.media.tv.TvInputManager$Session: void dispatchSurfaceChanged(int,int,int)>(i0, i1, i2);

        return;
    }

    private void ensurePositionTracking()
    {
        android.media.tv.TvView r0;
        android.media.tv.TvInputManager$Session r1;
        android.media.tv.TvView$TimeShiftPositionCallback $r2;
        boolean z0;

        r0 := @this: android.media.tv.TvView;

        r1 = r0.<android.media.tv.TvView: android.media.tv.TvInputManager$Session mSession>;

        if r1 != null goto label1;

        return;

     label1:
        $r2 = r0.<android.media.tv.TvView: android.media.tv.TvView$TimeShiftPositionCallback mTimeShiftPositionCallback>;

        if $r2 == null goto label2;

        z0 = 1;

        goto label3;

     label2:
        z0 = 0;

     label3:
        virtualinvoke r1.<android.media.tv.TvInputManager$Session: void timeShiftEnablePositionTracking(boolean)>(z0);

        return;
    }

    private android.graphics.Rect getViewFrameOnScreen()
    {
        android.media.tv.TvView r0;
        android.graphics.Rect $r3;
        android.graphics.RectF $r4;
        android.graphics.Matrix $r5;

        r0 := @this: android.media.tv.TvView;

        $r3 = new android.graphics.Rect;

        specialinvoke $r3.<android.graphics.Rect: void <init>()>();

        virtualinvoke r0.<android.media.tv.TvView: boolean getGlobalVisibleRect(android.graphics.Rect)>($r3);

        $r4 = new android.graphics.RectF;

        specialinvoke $r4.<android.graphics.RectF: void <init>(android.graphics.Rect)>($r3);

        $r5 = virtualinvoke r0.<android.media.tv.TvView: android.graphics.Matrix getMatrix()>();

        virtualinvoke $r5.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>($r4);

        virtualinvoke $r4.<android.graphics.RectF: void round(android.graphics.Rect)>($r3);

        return $r3;
    }

    private void relayoutSessionOverlayView()
    {
        android.media.tv.TvView r0;
        android.graphics.Rect r1, $r3;
        android.media.tv.TvInputManager$Session $r2, $r4;
        boolean $z0, $z1, $z2;
        int $i0;

        r0 := @this: android.media.tv.TvView;

        $r2 = r0.<android.media.tv.TvView: android.media.tv.TvInputManager$Session mSession>;

        if $r2 == null goto label3;

        $z0 = virtualinvoke r0.<android.media.tv.TvView: boolean isAttachedToWindow()>();

        if $z0 == 0 goto label3;

        $z1 = r0.<android.media.tv.TvView: boolean mOverlayViewCreated>;

        if $z1 == 0 goto label3;

        $i0 = r0.<android.media.tv.TvView: int mWindowZOrder>;

        if $i0 == 0 goto label1;

        goto label3;

     label1:
        r1 = specialinvoke r0.<android.media.tv.TvView: android.graphics.Rect getViewFrameOnScreen()>();

        $r3 = r0.<android.media.tv.TvView: android.graphics.Rect mOverlayViewFrame>;

        $z2 = virtualinvoke r1.<android.graphics.Rect: boolean equals(java.lang.Object)>($r3);

        if $z2 == 0 goto label2;

        return;

     label2:
        $r4 = r0.<android.media.tv.TvView: android.media.tv.TvInputManager$Session mSession>;

        virtualinvoke $r4.<android.media.tv.TvInputManager$Session: void relayoutOverlayView(android.graphics.Rect)>(r1);

        r0.<android.media.tv.TvView: android.graphics.Rect mOverlayViewFrame> = r1;

        return;

     label3:
        return;
    }

    private void removeSessionOverlayView()
    {
        android.media.tv.TvView r0;
        android.media.tv.TvInputManager$Session r1;
        boolean $z0;

        r0 := @this: android.media.tv.TvView;

        r1 = r0.<android.media.tv.TvView: android.media.tv.TvInputManager$Session mSession>;

        if r1 == null goto label2;

        $z0 = r0.<android.media.tv.TvView: boolean mOverlayViewCreated>;

        if $z0 != 0 goto label1;

        goto label2;

     label1:
        virtualinvoke r1.<android.media.tv.TvInputManager$Session: void removeOverlayView()>();

        r0.<android.media.tv.TvView: boolean mOverlayViewCreated> = 0;

        r0.<android.media.tv.TvView: android.graphics.Rect mOverlayViewFrame> = null;

        return;

     label2:
        return;
    }

    private void resetInternal()
    {
        android.media.tv.TvView r0;
        java.util.Queue $r1;
        android.media.tv.TvInputManager$Session $r2, $r3;

        r0 := @this: android.media.tv.TvView;

        r0.<android.media.tv.TvView: android.media.tv.TvView$MySessionCallback mSessionCallback> = null;

        $r1 = r0.<android.media.tv.TvView: java.util.Queue mPendingAppPrivateCommands>;

        interfaceinvoke $r1.<java.util.Queue: void clear()>();

        $r2 = r0.<android.media.tv.TvView: android.media.tv.TvInputManager$Session mSession>;

        if $r2 == null goto label1;

        specialinvoke r0.<android.media.tv.TvView: void setSessionSurface(android.view.Surface)>(null);

        specialinvoke r0.<android.media.tv.TvView: void removeSessionOverlayView()>();

        r0.<android.media.tv.TvView: boolean mUseRequestedSurfaceLayout> = 0;

        $r3 = r0.<android.media.tv.TvView: android.media.tv.TvInputManager$Session mSession>;

        virtualinvoke $r3.<android.media.tv.TvInputManager$Session: void release()>();

        r0.<android.media.tv.TvView: android.media.tv.TvInputManager$Session mSession> = null;

        specialinvoke r0.<android.media.tv.TvView: void resetSurfaceView()>();

     label1:
        return;
    }

    private void resetSurfaceView()
    {
        android.media.tv.TvView r0;
        int i0, $i1;
        android.media.tv.TvView$3 $r1;
        android.content.Context $r2;
        android.util.AttributeSet $r3;
        android.view.SurfaceView $r4, $r7, $r8, $r11, r12, $r14;
        android.view.SurfaceHolder $r5, $r9;
        android.view.SurfaceHolder$Callback $r6, $r10;

        r0 := @this: android.media.tv.TvView;

        r12 = r0.<android.media.tv.TvView: android.view.SurfaceView mSurfaceView>;

        if r12 == null goto label1;

        $r9 = virtualinvoke r12.<android.view.SurfaceView: android.view.SurfaceHolder getHolder()>();

        $r10 = r0.<android.media.tv.TvView: android.view.SurfaceHolder$Callback mSurfaceHolderCallback>;

        interfaceinvoke $r9.<android.view.SurfaceHolder: void removeCallback(android.view.SurfaceHolder$Callback)>($r10);

        $r11 = r0.<android.media.tv.TvView: android.view.SurfaceView mSurfaceView>;

        virtualinvoke r0.<android.media.tv.TvView: void removeView(android.view.View)>($r11);

     label1:
        r0.<android.media.tv.TvView: android.view.Surface mSurface> = null;

        $r1 = new android.media.tv.TvView$3;

        $r2 = virtualinvoke r0.<android.media.tv.TvView: android.content.Context getContext()>();

        $r3 = r0.<android.media.tv.TvView: android.util.AttributeSet mAttrs>;

        $i1 = r0.<android.media.tv.TvView: int mDefStyleAttr>;

        specialinvoke $r1.<android.media.tv.TvView$3: void <init>(android.media.tv.TvView,android.content.Context,android.util.AttributeSet,int)>(r0, $r2, $r3, $i1);

        r0.<android.media.tv.TvView: android.view.SurfaceView mSurfaceView> = $r1;

        virtualinvoke $r1.<android.view.SurfaceView: void setSecure(boolean)>(1);

        $r4 = r0.<android.media.tv.TvView: android.view.SurfaceView mSurfaceView>;

        $r5 = virtualinvoke $r4.<android.view.SurfaceView: android.view.SurfaceHolder getHolder()>();

        $r6 = r0.<android.media.tv.TvView: android.view.SurfaceHolder$Callback mSurfaceHolderCallback>;

        interfaceinvoke $r5.<android.view.SurfaceHolder: void addCallback(android.view.SurfaceHolder$Callback)>($r6);

        i0 = r0.<android.media.tv.TvView: int mWindowZOrder>;

        if i0 != 1 goto label2;

        $r8 = r0.<android.media.tv.TvView: android.view.SurfaceView mSurfaceView>;

        virtualinvoke $r8.<android.view.SurfaceView: void setZOrderMediaOverlay(boolean)>(1);

        goto label3;

     label2:
        if i0 != 2 goto label3;

        $r7 = r0.<android.media.tv.TvView: android.view.SurfaceView mSurfaceView>;

        virtualinvoke $r7.<android.view.SurfaceView: void setZOrderOnTop(boolean)>(1);

     label3:
        $r14 = r0.<android.media.tv.TvView: android.view.SurfaceView mSurfaceView>;

        virtualinvoke r0.<android.media.tv.TvView: void addView(android.view.View)>($r14);

        return;
    }

    private void setSessionSurface(android.view.Surface)
    {
        android.media.tv.TvView r0;
        android.view.Surface r1;
        android.media.tv.TvInputManager$Session r2;

        r0 := @this: android.media.tv.TvView;

        r1 := @parameter0: android.view.Surface;

        r2 = r0.<android.media.tv.TvView: android.media.tv.TvInputManager$Session mSession>;

        if r2 != null goto label1;

        return;

     label1:
        virtualinvoke r2.<android.media.tv.TvInputManager$Session: void setSurface(android.view.Surface)>(r1);

        return;
    }

    protected void dispatchDraw(android.graphics.Canvas)
    {
        android.media.tv.TvView r0;
        android.graphics.Canvas r1;
        int $i0;
        android.graphics.PorterDuff$Mode $r2;

        r0 := @this: android.media.tv.TvView;

        r1 := @parameter0: android.graphics.Canvas;

        $i0 = r0.<android.media.tv.TvView: int mWindowZOrder>;

        if $i0 == 2 goto label1;

        $r2 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode CLEAR>;

        virtualinvoke r1.<android.graphics.Canvas: void drawColor(int,android.graphics.PorterDuff$Mode)>(0, $r2);

     label1:
        specialinvoke r0.<android.view.ViewGroup: void dispatchDraw(android.graphics.Canvas)>(r1);

        return;
    }

    public boolean dispatchGenericMotionEvent(android.view.MotionEvent)
    {
        android.media.tv.TvView r0;
        boolean z0, z1;
        android.media.tv.TvInputManager$Session $r1, $r4;
        android.os.Handler $r2;
        android.media.tv.TvInputManager$Session$FinishedInputEventCallback $r3;
        int $i0;
        android.view.MotionEvent r5, r6;

        r0 := @this: android.media.tv.TvView;

        r5 := @parameter0: android.view.MotionEvent;

        z0 = specialinvoke r0.<android.view.ViewGroup: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>(r5);

        z1 = 1;

        if z0 == 0 goto label1;

        return 1;

     label1:
        $r1 = r0.<android.media.tv.TvView: android.media.tv.TvInputManager$Session mSession>;

        if $r1 != null goto label2;

        return 0;

     label2:
        r6 = virtualinvoke r5.<android.view.MotionEvent: android.view.MotionEvent copy()>();

        $r4 = r0.<android.media.tv.TvView: android.media.tv.TvInputManager$Session mSession>;

        $r3 = r0.<android.media.tv.TvView: android.media.tv.TvInputManager$Session$FinishedInputEventCallback mFinishedInputEventCallback>;

        $r2 = r0.<android.media.tv.TvView: android.os.Handler mHandler>;

        $i0 = virtualinvoke $r4.<android.media.tv.TvInputManager$Session: int dispatchInputEvent(android.view.InputEvent,java.lang.Object,android.media.tv.TvInputManager$Session$FinishedInputEventCallback,android.os.Handler)>(r6, r6, $r3, $r2);

        if $i0 == 0 goto label3;

        goto label4;

     label3:
        z1 = 0;

     label4:
        return z1;
    }

    public boolean dispatchKeyEvent(android.view.KeyEvent)
    {
        android.media.tv.TvView r0;
        boolean z0, z1;
        android.media.tv.TvInputManager$Session $r1, $r4;
        android.os.Handler $r2;
        android.media.tv.TvInputManager$Session$FinishedInputEventCallback $r3;
        int $i0;
        android.view.KeyEvent r5, r6;

        r0 := @this: android.media.tv.TvView;

        r5 := @parameter0: android.view.KeyEvent;

        z0 = specialinvoke r0.<android.view.ViewGroup: boolean dispatchKeyEvent(android.view.KeyEvent)>(r5);

        z1 = 1;

        if z0 == 0 goto label1;

        return 1;

     label1:
        $r1 = r0.<android.media.tv.TvView: android.media.tv.TvInputManager$Session mSession>;

        if $r1 != null goto label2;

        return 0;

     label2:
        r6 = virtualinvoke r5.<android.view.KeyEvent: android.view.KeyEvent copy()>();

        $r4 = r0.<android.media.tv.TvView: android.media.tv.TvInputManager$Session mSession>;

        $r3 = r0.<android.media.tv.TvView: android.media.tv.TvInputManager$Session$FinishedInputEventCallback mFinishedInputEventCallback>;

        $r2 = r0.<android.media.tv.TvView: android.os.Handler mHandler>;

        $i0 = virtualinvoke $r4.<android.media.tv.TvInputManager$Session: int dispatchInputEvent(android.view.InputEvent,java.lang.Object,android.media.tv.TvInputManager$Session$FinishedInputEventCallback,android.os.Handler)>(r6, r6, $r3, $r2);

        if $i0 == 0 goto label3;

        goto label4;

     label3:
        z1 = 0;

     label4:
        return z1;
    }

    public boolean dispatchTouchEvent(android.view.MotionEvent)
    {
        android.media.tv.TvView r0;
        boolean z0, z1;
        android.media.tv.TvInputManager$Session $r1, $r4;
        android.os.Handler $r2;
        android.media.tv.TvInputManager$Session$FinishedInputEventCallback $r3;
        int $i0;
        android.view.MotionEvent r5, r6;

        r0 := @this: android.media.tv.TvView;

        r5 := @parameter0: android.view.MotionEvent;

        z0 = specialinvoke r0.<android.view.ViewGroup: boolean dispatchTouchEvent(android.view.MotionEvent)>(r5);

        z1 = 1;

        if z0 == 0 goto label1;

        return 1;

     label1:
        $r1 = r0.<android.media.tv.TvView: android.media.tv.TvInputManager$Session mSession>;

        if $r1 != null goto label2;

        return 0;

     label2:
        r6 = virtualinvoke r5.<android.view.MotionEvent: android.view.MotionEvent copy()>();

        $r4 = r0.<android.media.tv.TvView: android.media.tv.TvInputManager$Session mSession>;

        $r3 = r0.<android.media.tv.TvView: android.media.tv.TvInputManager$Session$FinishedInputEventCallback mFinishedInputEventCallback>;

        $r2 = r0.<android.media.tv.TvView: android.os.Handler mHandler>;

        $i0 = virtualinvoke $r4.<android.media.tv.TvInputManager$Session: int dispatchInputEvent(android.view.InputEvent,java.lang.Object,android.media.tv.TvInputManager$Session$FinishedInputEventCallback,android.os.Handler)>(r6, r6, $r3, $r2);

        if $i0 == 0 goto label3;

        goto label4;

     label3:
        z1 = 0;

     label4:
        return z1;
    }

    public boolean dispatchTrackballEvent(android.view.MotionEvent)
    {
        android.media.tv.TvView r0;
        boolean z0, z1;
        android.media.tv.TvInputManager$Session $r1, $r4;
        android.os.Handler $r2;
        android.media.tv.TvInputManager$Session$FinishedInputEventCallback $r3;
        int $i0;
        android.view.MotionEvent r5, r6;

        r0 := @this: android.media.tv.TvView;

        r5 := @parameter0: android.view.MotionEvent;

        z0 = specialinvoke r0.<android.view.ViewGroup: boolean dispatchTrackballEvent(android.view.MotionEvent)>(r5);

        z1 = 1;

        if z0 == 0 goto label1;

        return 1;

     label1:
        $r1 = r0.<android.media.tv.TvView: android.media.tv.TvInputManager$Session mSession>;

        if $r1 != null goto label2;

        return 0;

     label2:
        r6 = virtualinvoke r5.<android.view.MotionEvent: android.view.MotionEvent copy()>();

        $r4 = r0.<android.media.tv.TvView: android.media.tv.TvInputManager$Session mSession>;

        $r3 = r0.<android.media.tv.TvView: android.media.tv.TvInputManager$Session$FinishedInputEventCallback mFinishedInputEventCallback>;

        $r2 = r0.<android.media.tv.TvView: android.os.Handler mHandler>;

        $i0 = virtualinvoke $r4.<android.media.tv.TvInputManager$Session: int dispatchInputEvent(android.view.InputEvent,java.lang.Object,android.media.tv.TvInputManager$Session$FinishedInputEventCallback,android.os.Handler)>(r6, r6, $r3, $r2);

        if $i0 == 0 goto label3;

        goto label4;

     label3:
        z1 = 0;

     label4:
        return z1;
    }

    public boolean dispatchUnhandledInputEvent(android.view.InputEvent)
    {
        android.media.tv.TvView r0;
        android.view.InputEvent r1;
        android.media.tv.TvView$OnUnhandledInputEventListener r2;
        boolean $z0, $z1;

        r0 := @this: android.media.tv.TvView;

        r1 := @parameter0: android.view.InputEvent;

        r2 = r0.<android.media.tv.TvView: android.media.tv.TvView$OnUnhandledInputEventListener mOnUnhandledInputEventListener>;

        if r2 == null goto label1;

        $z1 = interfaceinvoke r2.<android.media.tv.TvView$OnUnhandledInputEventListener: boolean onUnhandledInputEvent(android.view.InputEvent)>(r1);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        $z0 = virtualinvoke r0.<android.media.tv.TvView: boolean onUnhandledInputEvent(android.view.InputEvent)>(r1);

        return $z0;
    }

    public void dispatchWindowFocusChanged(boolean)
    {
        android.media.tv.TvView r0;
        boolean z0, $z1;
        java.lang.Object r1, $r4;
        java.lang.ref.WeakReference $r3;
        android.media.tv.TvInputManager$Session $r5, $r6;
        java.lang.Throwable $r7;

        r0 := @this: android.media.tv.TvView;

        z0 := @parameter0: boolean;

        specialinvoke r0.<android.view.ViewGroup: void dispatchWindowFocusChanged(boolean)>(z0);

        r1 = <android.media.tv.TvView: java.lang.Object sMainTvViewLock>;

        entermonitor r1;

        if z0 == 0 goto label2;

     label1:
        $r3 = <android.media.tv.TvView: java.lang.ref.WeakReference sMainTvView>;

        $r4 = virtualinvoke $r3.<java.lang.ref.WeakReference: java.lang.Object get()>();

        if r0 != $r4 goto label2;

        $r5 = r0.<android.media.tv.TvView: android.media.tv.TvInputManager$Session mSession>;

        if $r5 == null goto label2;

        $z1 = specialinvoke r0.<android.media.tv.TvView: boolean checkChangeHdmiCecActiveSourcePermission()>();

        if $z1 == 0 goto label2;

        $r6 = r0.<android.media.tv.TvView: android.media.tv.TvInputManager$Session mSession>;

        virtualinvoke $r6.<android.media.tv.TvInputManager$Session: void setMain()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r7 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void draw(android.graphics.Canvas)
    {
        android.media.tv.TvView r0;
        android.graphics.Canvas r1;
        int $i0;
        android.graphics.PorterDuff$Mode $r2;

        r0 := @this: android.media.tv.TvView;

        r1 := @parameter0: android.graphics.Canvas;

        $i0 = r0.<android.media.tv.TvView: int mWindowZOrder>;

        if $i0 == 2 goto label1;

        $r2 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode CLEAR>;

        virtualinvoke r1.<android.graphics.Canvas: void drawColor(int,android.graphics.PorterDuff$Mode)>(0, $r2);

     label1:
        specialinvoke r0.<android.view.ViewGroup: void draw(android.graphics.Canvas)>(r1);

        return;
    }

    public boolean gatherTransparentRegion(android.graphics.Region)
    {
        android.media.tv.TvView r0;
        android.graphics.Region r1;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        int[] r2;
        android.graphics.Region$Op $r3;
        boolean $z1;

        r0 := @this: android.media.tv.TvView;

        r1 := @parameter0: android.graphics.Region;

        $i4 = r0.<android.media.tv.TvView: int mWindowZOrder>;

        if $i4 == 2 goto label1;

        if r1 == null goto label1;

        i0 = virtualinvoke r0.<android.media.tv.TvView: int getWidth()>();

        i1 = virtualinvoke r0.<android.media.tv.TvView: int getHeight()>();

        if i0 <= 0 goto label1;

        if i1 <= 0 goto label1;

        r2 = newarray (int)[2];

        virtualinvoke r0.<android.media.tv.TvView: void getLocationInWindow(int[])>(r2);

        i2 = r2[0];

        i3 = r2[1];

        $i6 = i2 + i0;

        $i5 = i3 + i1;

        $r3 = <android.graphics.Region$Op: android.graphics.Region$Op UNION>;

        virtualinvoke r1.<android.graphics.Region: boolean op(int,int,int,int,android.graphics.Region$Op)>(i2, i3, $i6, $i5, $r3);

     label1:
        $z1 = specialinvoke r0.<android.view.ViewGroup: boolean gatherTransparentRegion(android.graphics.Region)>(r1);

        return $z1;
    }

    public java.lang.String getSelectedTrack(int)
    {
        android.media.tv.TvView r0;
        int i0;
        android.media.tv.TvInputManager$Session r1;
        java.lang.String $r2;

        r0 := @this: android.media.tv.TvView;

        i0 := @parameter0: int;

        r1 = r0.<android.media.tv.TvView: android.media.tv.TvInputManager$Session mSession>;

        if r1 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r1.<android.media.tv.TvInputManager$Session: java.lang.String getSelectedTrack(int)>(i0);

        return $r2;
    }

    public java.util.List getTracks(int)
    {
        android.media.tv.TvView r0;
        int i0;
        android.media.tv.TvInputManager$Session r1;
        java.util.List $r2;

        r0 := @this: android.media.tv.TvView;

        i0 := @parameter0: int;

        r1 = r0.<android.media.tv.TvView: android.media.tv.TvInputManager$Session mSession>;

        if r1 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r1.<android.media.tv.TvInputManager$Session: java.util.List getTracks(int)>(i0);

        return $r2;
    }

    protected void onAttachedToWindow()
    {
        android.media.tv.TvView r0;

        r0 := @this: android.media.tv.TvView;

        specialinvoke r0.<android.view.ViewGroup: void onAttachedToWindow()>();

        specialinvoke r0.<android.media.tv.TvView: void createSessionOverlayView()>();

        return;
    }

    protected void onDetachedFromWindow()
    {
        android.media.tv.TvView r0;

        r0 := @this: android.media.tv.TvView;

        specialinvoke r0.<android.media.tv.TvView: void removeSessionOverlayView()>();

        specialinvoke r0.<android.view.ViewGroup: void onDetachedFromWindow()>();

        return;
    }

    protected void onLayout(boolean, int, int, int, int)
    {
        android.media.tv.TvView r0;
        boolean z0, $z1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9;
        android.view.SurfaceView $r1, $r2;

        r0 := @this: android.media.tv.TvView;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $z1 = r0.<android.media.tv.TvView: boolean mUseRequestedSurfaceLayout>;

        if $z1 == 0 goto label1;

        $r2 = r0.<android.media.tv.TvView: android.view.SurfaceView mSurfaceView>;

        $i9 = r0.<android.media.tv.TvView: int mSurfaceViewLeft>;

        $i8 = r0.<android.media.tv.TvView: int mSurfaceViewTop>;

        $i7 = r0.<android.media.tv.TvView: int mSurfaceViewRight>;

        $i6 = r0.<android.media.tv.TvView: int mSurfaceViewBottom>;

        virtualinvoke $r2.<android.view.SurfaceView: void layout(int,int,int,int)>($i9, $i8, $i7, $i6);

        goto label2;

     label1:
        $r1 = r0.<android.media.tv.TvView: android.view.SurfaceView mSurfaceView>;

        $i5 = i2 - i0;

        $i4 = i3 - i1;

        virtualinvoke $r1.<android.view.SurfaceView: void layout(int,int,int,int)>(0, 0, $i5, $i4);

     label2:
        return;
    }

    protected void onMeasure(int, int)
    {
        android.media.tv.TvView r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7;
        android.view.SurfaceView $r1, $r2, $r3, $r4;

        r0 := @this: android.media.tv.TvView;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<android.media.tv.TvView: android.view.SurfaceView mSurfaceView>;

        virtualinvoke $r1.<android.view.SurfaceView: void measure(int,int)>(i0, i1);

        $r2 = r0.<android.media.tv.TvView: android.view.SurfaceView mSurfaceView>;

        i2 = virtualinvoke $r2.<android.view.SurfaceView: int getMeasuredWidth()>();

        $r3 = r0.<android.media.tv.TvView: android.view.SurfaceView mSurfaceView>;

        i3 = virtualinvoke $r3.<android.view.SurfaceView: int getMeasuredHeight()>();

        $r4 = r0.<android.media.tv.TvView: android.view.SurfaceView mSurfaceView>;

        i4 = virtualinvoke $r4.<android.view.SurfaceView: int getMeasuredState()>();

        $i5 = staticinvoke <android.media.tv.TvView: int resolveSizeAndState(int,int,int)>(i2, i0, i4);

        $i6 = i4 << 16;

        $i7 = staticinvoke <android.media.tv.TvView: int resolveSizeAndState(int,int,int)>(i3, i1, $i6);

        virtualinvoke r0.<android.media.tv.TvView: void setMeasuredDimension(int,int)>($i5, $i7);

        return;
    }

    public boolean onUnhandledInputEvent(android.view.InputEvent)
    {
        android.media.tv.TvView r0;
        android.view.InputEvent r1;

        r0 := @this: android.media.tv.TvView;

        r1 := @parameter0: android.view.InputEvent;

        return 0;
    }

    protected void onVisibilityChanged(android.view.View, int)
    {
        android.media.tv.TvView r0;
        android.view.View r1;
        int i0;
        android.view.SurfaceView $r2;

        r0 := @this: android.media.tv.TvView;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        specialinvoke r0.<android.view.ViewGroup: void onVisibilityChanged(android.view.View,int)>(r1, i0);

        $r2 = r0.<android.media.tv.TvView: android.view.SurfaceView mSurfaceView>;

        virtualinvoke $r2.<android.view.SurfaceView: void setVisibility(int)>(i0);

        if i0 != 0 goto label1;

        specialinvoke r0.<android.media.tv.TvView: void createSessionOverlayView()>();

        goto label2;

     label1:
        specialinvoke r0.<android.media.tv.TvView: void removeSessionOverlayView()>();

     label2:
        return;
    }

    public void requestUnblockContent(android.media.tv.TvContentRating)
    {
        android.media.tv.TvView r0;
        android.media.tv.TvContentRating r1;

        r0 := @this: android.media.tv.TvView;

        r1 := @parameter0: android.media.tv.TvContentRating;

        virtualinvoke r0.<android.media.tv.TvView: void unblockContent(android.media.tv.TvContentRating)>(r1);

        return;
    }

    public void reset()
    {
        android.media.tv.TvView r0;
        java.lang.Object r1, $r4;
        java.lang.ref.WeakReference $r3, $r5;
        java.lang.Throwable $r6;

        r0 := @this: android.media.tv.TvView;

        r1 = <android.media.tv.TvView: java.lang.Object sMainTvViewLock>;

        entermonitor r1;

     label1:
        $r3 = <android.media.tv.TvView: java.lang.ref.WeakReference sMainTvView>;

        $r4 = virtualinvoke $r3.<java.lang.ref.WeakReference: java.lang.Object get()>();

        if r0 != $r4 goto label2;

        $r5 = <android.media.tv.TvView: java.lang.ref.WeakReference NULL_TV_VIEW>;

        <android.media.tv.TvView: java.lang.ref.WeakReference sMainTvView> = $r5;

     label2:
        exitmonitor r1;

     label3:
        specialinvoke r0.<android.media.tv.TvView: void resetInternal()>();

        return;

     label4:
        $r6 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void selectTrack(int, java.lang.String)
    {
        android.media.tv.TvView r0;
        int i0;
        java.lang.String r1;
        android.media.tv.TvInputManager$Session r2;

        r0 := @this: android.media.tv.TvView;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 = r0.<android.media.tv.TvView: android.media.tv.TvInputManager$Session mSession>;

        if r2 == null goto label1;

        virtualinvoke r2.<android.media.tv.TvInputManager$Session: void selectTrack(int,java.lang.String)>(i0, r1);

     label1:
        return;
    }

    public void sendAppPrivateCommand(java.lang.String, android.os.Bundle)
    {
        android.media.tv.TvView r0;
        java.lang.String r1, $r8;
        android.os.Bundle r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;
        java.util.Queue $r9;
        android.util.Pair $r10;
        android.media.tv.TvInputManager$Session r11;

        r0 := @this: android.media.tv.TvView;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.Bundle;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 != 0 goto label3;

        r11 = r0.<android.media.tv.TvView: android.media.tv.TvInputManager$Session mSession>;

        if r11 == null goto label1;

        virtualinvoke r11.<android.media.tv.TvInputManager$Session: void sendAppPrivateCommand(java.lang.String,android.os.Bundle)>(r1, r2);

        goto label2;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sendAppPrivateCommand - session not yet created (action \"");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" pending)");

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TvView", $r8);

        $r9 = r0.<android.media.tv.TvView: java.util.Queue mPendingAppPrivateCommands>;

        $r10 = staticinvoke <android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>(r1, r2);

        interfaceinvoke $r9.<java.util.Queue: boolean add(java.lang.Object)>($r10);

     label2:
        return;

     label3:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("action cannot be null or an empty string");

        throw $r3;
    }

    public void setCallback(android.media.tv.TvView$TvInputCallback)
    {
        android.media.tv.TvView r0;
        android.media.tv.TvView$TvInputCallback r1;

        r0 := @this: android.media.tv.TvView;

        r1 := @parameter0: android.media.tv.TvView$TvInputCallback;

        r0.<android.media.tv.TvView: android.media.tv.TvView$TvInputCallback mCallback> = r1;

        return;
    }

    public void setCaptionEnabled(boolean)
    {
        android.media.tv.TvView r0;
        boolean z0;
        android.media.tv.TvInputManager$Session r1;
        java.lang.Boolean $r2;

        r0 := @this: android.media.tv.TvView;

        z0 := @parameter0: boolean;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        r0.<android.media.tv.TvView: java.lang.Boolean mCaptionEnabled> = $r2;

        r1 = r0.<android.media.tv.TvView: android.media.tv.TvInputManager$Session mSession>;

        if r1 == null goto label1;

        virtualinvoke r1.<android.media.tv.TvInputManager$Session: void setCaptionEnabled(boolean)>(z0);

     label1:
        return;
    }

    public void setMain()
    {
        android.media.tv.TvView r0;
        java.lang.Object r1;
        boolean $z0;
        android.media.tv.TvInputManager$Session $r2, $r3;
        java.lang.Throwable $r4;
        java.lang.ref.WeakReference r5;

        r0 := @this: android.media.tv.TvView;

        r1 = <android.media.tv.TvView: java.lang.Object sMainTvViewLock>;

        entermonitor r1;

     label1:
        r5 = new java.lang.ref.WeakReference;

        specialinvoke r5.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r0);

        <android.media.tv.TvView: java.lang.ref.WeakReference sMainTvView> = r5;

        $z0 = virtualinvoke r0.<android.media.tv.TvView: boolean hasWindowFocus()>();

        if $z0 == 0 goto label2;

        $r2 = r0.<android.media.tv.TvView: android.media.tv.TvInputManager$Session mSession>;

        if $r2 == null goto label2;

        $r3 = r0.<android.media.tv.TvView: android.media.tv.TvInputManager$Session mSession>;

        virtualinvoke $r3.<android.media.tv.TvInputManager$Session: void setMain()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void setOnUnhandledInputEventListener(android.media.tv.TvView$OnUnhandledInputEventListener)
    {
        android.media.tv.TvView r0;
        android.media.tv.TvView$OnUnhandledInputEventListener r1;

        r0 := @this: android.media.tv.TvView;

        r1 := @parameter0: android.media.tv.TvView$OnUnhandledInputEventListener;

        r0.<android.media.tv.TvView: android.media.tv.TvView$OnUnhandledInputEventListener mOnUnhandledInputEventListener> = r1;

        return;
    }

    public void setStreamVolume(float)
    {
        android.media.tv.TvView r0;
        float f0;
        android.media.tv.TvInputManager$Session r1;
        java.lang.Float $r2;

        r0 := @this: android.media.tv.TvView;

        f0 := @parameter0: float;

        $r2 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        r0.<android.media.tv.TvView: java.lang.Float mStreamVolume> = $r2;

        r1 = r0.<android.media.tv.TvView: android.media.tv.TvInputManager$Session mSession>;

        if r1 != null goto label1;

        return;

     label1:
        virtualinvoke r1.<android.media.tv.TvInputManager$Session: void setStreamVolume(float)>(f0);

        return;
    }

    public void setTimeShiftPositionCallback(android.media.tv.TvView$TimeShiftPositionCallback)
    {
        android.media.tv.TvView r0;
        android.media.tv.TvView$TimeShiftPositionCallback r1;

        r0 := @this: android.media.tv.TvView;

        r1 := @parameter0: android.media.tv.TvView$TimeShiftPositionCallback;

        r0.<android.media.tv.TvView: android.media.tv.TvView$TimeShiftPositionCallback mTimeShiftPositionCallback> = r1;

        specialinvoke r0.<android.media.tv.TvView: void ensurePositionTracking()>();

        return;
    }

    public void setZOrderMediaOverlay(boolean)
    {
        android.media.tv.TvView r0;
        boolean z0;
        android.view.SurfaceView r1, $r2;

        r0 := @this: android.media.tv.TvView;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        r0.<android.media.tv.TvView: int mWindowZOrder> = 1;

        specialinvoke r0.<android.media.tv.TvView: void removeSessionOverlayView()>();

        goto label2;

     label1:
        r0.<android.media.tv.TvView: int mWindowZOrder> = 0;

        specialinvoke r0.<android.media.tv.TvView: void createSessionOverlayView()>();

     label2:
        r1 = r0.<android.media.tv.TvView: android.view.SurfaceView mSurfaceView>;

        if r1 == null goto label3;

        virtualinvoke r1.<android.view.SurfaceView: void setZOrderOnTop(boolean)>(0);

        $r2 = r0.<android.media.tv.TvView: android.view.SurfaceView mSurfaceView>;

        virtualinvoke $r2.<android.view.SurfaceView: void setZOrderMediaOverlay(boolean)>(z0);

     label3:
        return;
    }

    public void setZOrderOnTop(boolean)
    {
        android.media.tv.TvView r0;
        boolean z0;
        android.view.SurfaceView r1, $r2;

        r0 := @this: android.media.tv.TvView;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        r0.<android.media.tv.TvView: int mWindowZOrder> = 2;

        specialinvoke r0.<android.media.tv.TvView: void removeSessionOverlayView()>();

        goto label2;

     label1:
        r0.<android.media.tv.TvView: int mWindowZOrder> = 0;

        specialinvoke r0.<android.media.tv.TvView: void createSessionOverlayView()>();

     label2:
        r1 = r0.<android.media.tv.TvView: android.view.SurfaceView mSurfaceView>;

        if r1 == null goto label3;

        virtualinvoke r1.<android.view.SurfaceView: void setZOrderMediaOverlay(boolean)>(0);

        $r2 = r0.<android.media.tv.TvView: android.view.SurfaceView mSurfaceView>;

        virtualinvoke $r2.<android.view.SurfaceView: void setZOrderOnTop(boolean)>(z0);

     label3:
        return;
    }

    public void timeShiftPause()
    {
        android.media.tv.TvView r0;
        android.media.tv.TvInputManager$Session r1;

        r0 := @this: android.media.tv.TvView;

        r1 = r0.<android.media.tv.TvView: android.media.tv.TvInputManager$Session mSession>;

        if r1 == null goto label1;

        virtualinvoke r1.<android.media.tv.TvInputManager$Session: void timeShiftPause()>();

     label1:
        return;
    }

    public void timeShiftPlay(java.lang.String, android.net.Uri)
    {
        android.media.tv.TvView r0;
        java.lang.ref.WeakReference r1, $r3;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r2;
        java.lang.Object $r4, r12;
        android.media.tv.TvView$MySessionCallback $r5, $r8, r13;
        android.os.Handler $r6;
        java.lang.String $r7, r10;
        java.lang.Throwable $r9;
        android.net.Uri r11;
        android.media.tv.TvInputManager$Session r14;
        android.media.tv.TvInputManager r16;

        r0 := @this: android.media.tv.TvView;

        r10 := @parameter0: java.lang.String;

        r11 := @parameter1: android.net.Uri;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r10);

        if $z0 != 0 goto label10;

        r12 = <android.media.tv.TvView: java.lang.Object sMainTvViewLock>;

        entermonitor r12;

     label01:
        $r3 = <android.media.tv.TvView: java.lang.ref.WeakReference sMainTvView>;

        $r4 = virtualinvoke $r3.<java.lang.ref.WeakReference: java.lang.Object get()>();

        if $r4 != null goto label02;

        r1 = new java.lang.ref.WeakReference;

        specialinvoke r1.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r0);

        <android.media.tv.TvView: java.lang.ref.WeakReference sMainTvView> = r1;

     label02:
        exitmonitor r12;

     label03:
        r13 = r0.<android.media.tv.TvView: android.media.tv.TvView$MySessionCallback mSessionCallback>;

        if r13 == null goto label05;

        $r7 = r13.<android.media.tv.TvView$MySessionCallback: java.lang.String mInputId>;

        $z1 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r7, r10);

        if $z1 == 0 goto label05;

        r14 = r0.<android.media.tv.TvView: android.media.tv.TvInputManager$Session mSession>;

        if r14 == null goto label04;

        virtualinvoke r14.<android.media.tv.TvInputManager$Session: void timeShiftPlay(android.net.Uri)>(r11);

        goto label06;

     label04:
        $r8 = r0.<android.media.tv.TvView: android.media.tv.TvView$MySessionCallback mSessionCallback>;

        $r8.<android.media.tv.TvView$MySessionCallback: android.net.Uri mRecordedProgramUri> = r11;

        goto label06;

     label05:
        specialinvoke r0.<android.media.tv.TvView: void resetInternal()>();

        $r5 = new android.media.tv.TvView$MySessionCallback;

        specialinvoke $r5.<android.media.tv.TvView$MySessionCallback: void <init>(android.media.tv.TvView,java.lang.String,android.net.Uri)>(r0, r10, r11);

        r0.<android.media.tv.TvView: android.media.tv.TvView$MySessionCallback mSessionCallback> = $r5;

        r16 = r0.<android.media.tv.TvView: android.media.tv.TvInputManager mTvInputManager>;

        if r16 == null goto label06;

        $r6 = r0.<android.media.tv.TvView: android.os.Handler mHandler>;

        virtualinvoke r16.<android.media.tv.TvInputManager: void createSession(java.lang.String,android.media.tv.TvInputManager$SessionCallback,android.os.Handler)>(r10, $r5, $r6);

     label06:
        return;

     label07:
        $r9 := @caughtexception;

     label08:
        exitmonitor r12;

     label09:
        throw $r9;

     label10:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("inputId cannot be null or an empty string");

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    public void timeShiftResume()
    {
        android.media.tv.TvView r0;
        android.media.tv.TvInputManager$Session r1;

        r0 := @this: android.media.tv.TvView;

        r1 = r0.<android.media.tv.TvView: android.media.tv.TvInputManager$Session mSession>;

        if r1 == null goto label1;

        virtualinvoke r1.<android.media.tv.TvInputManager$Session: void timeShiftResume()>();

     label1:
        return;
    }

    public void timeShiftSeekTo(long)
    {
        android.media.tv.TvView r0;
        long l0;
        android.media.tv.TvInputManager$Session r1;

        r0 := @this: android.media.tv.TvView;

        l0 := @parameter0: long;

        r1 = r0.<android.media.tv.TvView: android.media.tv.TvInputManager$Session mSession>;

        if r1 == null goto label1;

        virtualinvoke r1.<android.media.tv.TvInputManager$Session: void timeShiftSeekTo(long)>(l0);

     label1:
        return;
    }

    public void timeShiftSetPlaybackParams(android.media.PlaybackParams)
    {
        android.media.tv.TvView r0;
        android.media.PlaybackParams r1;
        android.media.tv.TvInputManager$Session r2;

        r0 := @this: android.media.tv.TvView;

        r1 := @parameter0: android.media.PlaybackParams;

        r2 = r0.<android.media.tv.TvView: android.media.tv.TvInputManager$Session mSession>;

        if r2 == null goto label1;

        virtualinvoke r2.<android.media.tv.TvInputManager$Session: void timeShiftSetPlaybackParams(android.media.PlaybackParams)>(r1);

     label1:
        return;
    }

    public void tune(java.lang.String, android.net.Uri)
    {
        android.media.tv.TvView r0;
        java.lang.String r1;
        android.net.Uri r2;

        r0 := @this: android.media.tv.TvView;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.net.Uri;

        virtualinvoke r0.<android.media.tv.TvView: void tune(java.lang.String,android.net.Uri,android.os.Bundle)>(r1, r2, null);

        return;
    }

    public void tune(java.lang.String, android.net.Uri, android.os.Bundle)
    {
        android.media.tv.TvView r0;
        java.lang.ref.WeakReference r1, $r3;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r2;
        java.lang.Object $r4, r14;
        android.media.tv.TvView$MySessionCallback $r5, $r8, $r9, r15;
        android.os.Handler $r6;
        java.lang.String $r7, r11;
        java.lang.Throwable $r10;
        android.net.Uri r12;
        android.os.Bundle r13;
        android.media.tv.TvInputManager$Session r16;
        android.media.tv.TvInputManager r18;

        r0 := @this: android.media.tv.TvView;

        r11 := @parameter0: java.lang.String;

        r12 := @parameter1: android.net.Uri;

        r13 := @parameter2: android.os.Bundle;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r11);

        if $z0 != 0 goto label10;

        r14 = <android.media.tv.TvView: java.lang.Object sMainTvViewLock>;

        entermonitor r14;

     label01:
        $r3 = <android.media.tv.TvView: java.lang.ref.WeakReference sMainTvView>;

        $r4 = virtualinvoke $r3.<java.lang.ref.WeakReference: java.lang.Object get()>();

        if $r4 != null goto label02;

        r1 = new java.lang.ref.WeakReference;

        specialinvoke r1.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r0);

        <android.media.tv.TvView: java.lang.ref.WeakReference sMainTvView> = r1;

     label02:
        exitmonitor r14;

     label03:
        r15 = r0.<android.media.tv.TvView: android.media.tv.TvView$MySessionCallback mSessionCallback>;

        if r15 == null goto label05;

        $r7 = r15.<android.media.tv.TvView$MySessionCallback: java.lang.String mInputId>;

        $z1 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r7, r11);

        if $z1 == 0 goto label05;

        r16 = r0.<android.media.tv.TvView: android.media.tv.TvInputManager$Session mSession>;

        if r16 == null goto label04;

        virtualinvoke r16.<android.media.tv.TvInputManager$Session: void tune(android.net.Uri,android.os.Bundle)>(r12, r13);

        goto label06;

     label04:
        $r8 = r0.<android.media.tv.TvView: android.media.tv.TvView$MySessionCallback mSessionCallback>;

        $r8.<android.media.tv.TvView$MySessionCallback: android.net.Uri mChannelUri> = r12;

        $r9 = r0.<android.media.tv.TvView: android.media.tv.TvView$MySessionCallback mSessionCallback>;

        $r9.<android.media.tv.TvView$MySessionCallback: android.os.Bundle mTuneParams> = r13;

        goto label06;

     label05:
        specialinvoke r0.<android.media.tv.TvView: void resetInternal()>();

        $r5 = new android.media.tv.TvView$MySessionCallback;

        specialinvoke $r5.<android.media.tv.TvView$MySessionCallback: void <init>(android.media.tv.TvView,java.lang.String,android.net.Uri,android.os.Bundle)>(r0, r11, r12, r13);

        r0.<android.media.tv.TvView: android.media.tv.TvView$MySessionCallback mSessionCallback> = $r5;

        r18 = r0.<android.media.tv.TvView: android.media.tv.TvInputManager mTvInputManager>;

        if r18 == null goto label06;

        $r6 = r0.<android.media.tv.TvView: android.os.Handler mHandler>;

        virtualinvoke r18.<android.media.tv.TvInputManager: void createSession(java.lang.String,android.media.tv.TvInputManager$SessionCallback,android.os.Handler)>(r11, $r5, $r6);

     label06:
        return;

     label07:
        $r10 := @caughtexception;

     label08:
        exitmonitor r14;

     label09:
        throw $r10;

     label10:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("inputId cannot be null or an empty string");

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    public void unblockContent(android.media.tv.TvContentRating)
    {
        android.media.tv.TvView r0;
        android.media.tv.TvContentRating r1;
        android.media.tv.TvInputManager$Session r2;

        r0 := @this: android.media.tv.TvView;

        r1 := @parameter0: android.media.tv.TvContentRating;

        r2 = r0.<android.media.tv.TvView: android.media.tv.TvInputManager$Session mSession>;

        if r2 == null goto label1;

        virtualinvoke r2.<android.media.tv.TvInputManager$Session: void unblockContent(android.media.tv.TvContentRating)>(r1);

     label1:
        return;
    }
}
