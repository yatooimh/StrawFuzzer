public final class android.media.tv.tuner.TunerUtils extends java.lang.Object
{

    private void <init>()
    {
        android.media.tv.tuner.TunerUtils r0;

        r0 := @this: android.media.tv.tuner.TunerUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void checkResourceState(java.lang.String, boolean)
    {
        java.lang.String r0, $r6;
        boolean z0;
        java.lang.StringBuilder $r2;
        java.lang.IllegalStateException $r5;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if z0 != 0 goto label1;

        return;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has been closed");

        $r5 = new java.lang.IllegalStateException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    public static int getFilterSubtype(int, int)
    {
        int i0, i1;
        java.lang.StringBuilder $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.String $r7;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 != 1 goto label11;

        tableswitch(i1)
        {
            case 0: goto label10;
            case 1: goto label09;
            case 2: goto label08;
            case 3: goto label07;
            case 4: goto label06;
            case 5: goto label01;
            case 6: goto label05;
            case 7: goto label04;
            case 8: goto label03;
            case 9: goto label02;
            default: goto label01;
        };

     label01:
        goto label38;

     label02:
        return 8;

     label03:
        return 6;

     label04:
        return 3;

     label05:
        return 7;

     label06:
        return 5;

     label07:
        return 4;

     label08:
        return 2;

     label09:
        return 1;

     label10:
        return 0;

     label11:
        if i0 != 2 goto label21;

        if i1 == 10 goto label20;

        tableswitch(i1)
        {
            case 0: goto label19;
            case 1: goto label18;
            case 2: goto label17;
            case 3: goto label16;
            case 4: goto label15;
            case 5: goto label14;
            case 6: goto label13;
            default: goto label12;
        };

     label12:
        goto label38;

     label13:
        return 6;

     label14:
        return 7;

     label15:
        return 5;

     label16:
        return 4;

     label17:
        return 2;

     label18:
        return 1;

     label19:
        return 0;

     label20:
        return 3;

     label21:
        if i0 != 4 goto label29;

        if i1 == 0 goto label28;

        if i1 == 1 goto label27;

        tableswitch(i1)
        {
            case 11: goto label26;
            case 12: goto label25;
            case 13: goto label24;
            case 14: goto label23;
            default: goto label22;
        };

     label22:
        goto label38;

     label23:
        return 5;

     label24:
        return 4;

     label25:
        return 3;

     label26:
        return 2;

     label27:
        return 1;

     label28:
        return 0;

     label29:
        if i0 != 8 goto label34;

        if i1 == 0 goto label33;

        if i1 == 1 goto label32;

        if i1 == 14 goto label31;

        if i1 != 15 goto label30;

        return 2;

     label30:
        goto label38;

     label31:
        return 3;

     label32:
        return 1;

     label33:
        return 0;

     label34:
        if i0 != 16 goto label38;

        if i1 == 0 goto label37;

        if i1 == 1 goto label36;

        if i1 == 14 goto label35;

        if i1 != 16 goto label38;

        return 2;

     label35:
        return 3;

     label36:
        return 1;

     label37:
        return 0;

     label38:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid filter types. Main type=");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", subtype=");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    public static void throwExceptionForResult(int, java.lang.String)
    {
        int i0;
        java.lang.StringBuilder $r0, $r8, $r13, $r18;
        java.lang.RuntimeException $r3, $r23;
        java.lang.String $r4, $r12, $r17, $r24, r25, r26;
        java.lang.OutOfMemoryError $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.IllegalStateException $r7, $r11, $r16;

        i0 := @parameter0: int;

        r25 := @parameter1: java.lang.String;

        r26 = r25;

        if r25 != null goto label1;

        r26 = "";

     label1:
        tableswitch(i0)
        {
            case 0: goto label9;
            case 1: goto label8;
            case 2: goto label7;
            case 3: goto label6;
            case 4: goto label5;
            case 5: goto label4;
            case 6: goto label3;
            default: goto label2;
        };

     label2:
        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected result ");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  ");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        $r23 = new java.lang.RuntimeException;

        $r24 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.RuntimeException: void <init>(java.lang.String)>($r24);

        throw $r23;

     label3:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown error");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        $r3 = new java.lang.RuntimeException;

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label4:
        $r5 = new java.lang.OutOfMemoryError;

        specialinvoke $r5.<java.lang.OutOfMemoryError: void <init>(java.lang.String)>(r26);

        throw $r5;

     label5:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r26);

        throw $r6;

     label6:
        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r26);

        throw $r7;

     label7:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid state: not initialized. ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        $r11 = new java.lang.IllegalStateException;

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r11;

     label8:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid state: resource unavailable. ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        $r16 = new java.lang.IllegalStateException;

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r17);

        throw $r16;

     label9:
        return;
    }
}
