public class android.media.tv.tuner.filter.Filter extends java.lang.Object implements java.lang.AutoCloseable
{
    public static final int STATUS_DATA_READY;
    public static final int STATUS_HIGH_WATER;
    public static final int STATUS_LOW_WATER;
    public static final int STATUS_OVERFLOW;
    public static final int SUBTYPE_AUDIO;
    public static final int SUBTYPE_DOWNLOAD;
    public static final int SUBTYPE_IP;
    public static final int SUBTYPE_IP_PAYLOAD;
    public static final int SUBTYPE_MMTP;
    public static final int SUBTYPE_NTP;
    public static final int SUBTYPE_PAYLOAD_THROUGH;
    public static final int SUBTYPE_PCR;
    public static final int SUBTYPE_PES;
    public static final int SUBTYPE_PTP;
    public static final int SUBTYPE_RECORD;
    public static final int SUBTYPE_SECTION;
    public static final int SUBTYPE_TEMI;
    public static final int SUBTYPE_TLV;
    public static final int SUBTYPE_TS;
    public static final int SUBTYPE_UNDEFINED;
    public static final int SUBTYPE_VIDEO;
    private static final java.lang.String TAG;
    public static final int TYPE_ALP;
    public static final int TYPE_IP;
    public static final int TYPE_MMTP;
    public static final int TYPE_TLV;
    public static final int TYPE_TS;
    public static final int TYPE_UNDEFINED;
    private android.media.tv.tuner.filter.FilterCallback mCallback;
    private java.util.concurrent.Executor mExecutor;
    private final int mId;
    private boolean mIsClosed;
    private final java.lang.Object mLock;
    private int mMainType;
    private long mNativeContext;
    private android.media.tv.tuner.filter.Filter mSource;
    private boolean mStarted;
    private int mSubtype;

    private void <init>(int)
    {
        android.media.tv.tuner.filter.Filter r0;
        int i0;
        java.lang.Object $r1;

        r0 := @this: android.media.tv.tuner.filter.Filter;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.media.tv.tuner.filter.Filter: boolean mIsClosed> = 0;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<android.media.tv.tuner.filter.Filter: java.lang.Object mLock> = $r1;

        r0.<android.media.tv.tuner.filter.Filter: int mId> = i0;

        return;
    }

    private native int nativeClose();

    private native int nativeConfigureFilter(int, int, android.media.tv.tuner.filter.FilterConfiguration);

    private native int nativeFlushFilter();

    private native int nativeGetId();

    private native int nativeRead(byte[], long, long);

    private native int nativeSetDataSource(android.media.tv.tuner.filter.Filter);

    private native int nativeStartFilter();

    private native int nativeStopFilter();

    private void onFilterEvent(android.media.tv.tuner.filter.FilterEvent[])
    {
        android.media.tv.tuner.filter.Filter r0;
        android.media.tv.tuner.filter.FilterEvent[] r1;
        java.util.concurrent.Executor r2;
        android.media.tv.tuner.filter.FilterCallback $r3;
        android.media.tv.tuner.filter._$$Lambda$Filter$zXQWPbykiN1ARGXVsCOpJkUisdU $r4;

        r0 := @this: android.media.tv.tuner.filter.Filter;

        r1 := @parameter0: android.media.tv.tuner.filter.FilterEvent[];

        $r3 = r0.<android.media.tv.tuner.filter.Filter: android.media.tv.tuner.filter.FilterCallback mCallback>;

        if $r3 == null goto label1;

        r2 = r0.<android.media.tv.tuner.filter.Filter: java.util.concurrent.Executor mExecutor>;

        if r2 == null goto label1;

        $r4 = new android.media.tv.tuner.filter._$$Lambda$Filter$zXQWPbykiN1ARGXVsCOpJkUisdU;

        specialinvoke $r4.<android.media.tv.tuner.filter._$$Lambda$Filter$zXQWPbykiN1ARGXVsCOpJkUisdU: void <init>(android.media.tv.tuner.filter.Filter,android.media.tv.tuner.filter.FilterEvent[])>(r0, r1);

        interfaceinvoke r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r4);

     label1:
        return;
    }

    private void onFilterStatus(int)
    {
        android.media.tv.tuner.filter.Filter r0;
        int i0;
        java.util.concurrent.Executor r1;
        android.media.tv.tuner.filter.FilterCallback $r2;
        android.media.tv.tuner.filter._$$Lambda$Filter$tekVOX4O5B3jAt2zQSijUdSjqNo $r3;

        r0 := @this: android.media.tv.tuner.filter.Filter;

        i0 := @parameter0: int;

        $r2 = r0.<android.media.tv.tuner.filter.Filter: android.media.tv.tuner.filter.FilterCallback mCallback>;

        if $r2 == null goto label1;

        r1 = r0.<android.media.tv.tuner.filter.Filter: java.util.concurrent.Executor mExecutor>;

        if r1 == null goto label1;

        $r3 = new android.media.tv.tuner.filter._$$Lambda$Filter$tekVOX4O5B3jAt2zQSijUdSjqNo;

        specialinvoke $r3.<android.media.tv.tuner.filter._$$Lambda$Filter$tekVOX4O5B3jAt2zQSijUdSjqNo: void <init>(android.media.tv.tuner.filter.Filter,int)>(r0, i0);

        interfaceinvoke r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r3);

     label1:
        return;
    }

    public void close()
    {
        android.media.tv.tuner.filter.Filter r0;
        java.lang.Object r1;
        int i0;
        boolean $z0;
        java.lang.Throwable $r3;

        r0 := @this: android.media.tv.tuner.filter.Filter;

        r1 = r0.<android.media.tv.tuner.filter.Filter: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $z0 = r0.<android.media.tv.tuner.filter.Filter: boolean mIsClosed>;

        if $z0 == 0 goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        i0 = specialinvoke r0.<android.media.tv.tuner.filter.Filter: int nativeClose()>();

     label04:
        if i0 == 0 goto label07;

     label05:
        staticinvoke <android.media.tv.tuner.TunerUtils: void throwExceptionForResult(int,java.lang.String)>(i0, "Failed to close filter.");

     label06:
        goto label08;

     label07:
        r0.<android.media.tv.tuner.filter.Filter: boolean mIsClosed> = 1;

     label08:
        exitmonitor r1;

     label09:
        return;

     label10:
        $r3 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public int configure(android.media.tv.tuner.filter.FilterConfiguration)
    {
        android.media.tv.tuner.filter.Filter r0;
        java.lang.Object r1;
        java.lang.IllegalArgumentException r2;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        java.lang.String $r11;
        java.lang.Throwable $r12;
        android.media.tv.tuner.filter.FilterConfiguration r13;
        android.media.tv.tuner.filter.Settings r14;
        java.lang.StringBuilder r15;

        r0 := @this: android.media.tv.tuner.filter.Filter;

        r13 := @parameter0: android.media.tv.tuner.filter.FilterConfiguration;

        r1 = r0.<android.media.tv.tuner.filter.Filter: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $z0 = r0.<android.media.tv.tuner.filter.Filter: boolean mIsClosed>;

        staticinvoke <android.media.tv.tuner.TunerUtils: void checkResourceState(java.lang.String,boolean)>("Filter", $z0);

        r14 = virtualinvoke r13.<android.media.tv.tuner.filter.FilterConfiguration: android.media.tv.tuner.filter.Settings getSettings()>();

     label02:
        if r14 != null goto label05;

     label03:
        i7 = r0.<android.media.tv.tuner.filter.Filter: int mSubtype>;

     label04:
        goto label06;

     label05:
        i7 = virtualinvoke r14.<android.media.tv.tuner.filter.Settings: int getType()>();

     label06:
        $i0 = r0.<android.media.tv.tuner.filter.Filter: int mMainType>;

        $i1 = virtualinvoke r13.<android.media.tv.tuner.filter.FilterConfiguration: int getType()>();

        if $i0 != $i1 goto label08;

        $i5 = r0.<android.media.tv.tuner.filter.Filter: int mSubtype>;

        if $i5 != i7 goto label08;

        $i6 = virtualinvoke r13.<android.media.tv.tuner.filter.FilterConfiguration: int getType()>();

        i8 = specialinvoke r0.<android.media.tv.tuner.filter.Filter: int nativeConfigureFilter(int,int,android.media.tv.tuner.filter.FilterConfiguration)>($i6, i7, r13);

        exitmonitor r1;

     label07:
        return i8;

     label08:
        r2 = new java.lang.IllegalArgumentException;

        r15 = new java.lang.StringBuilder;

        specialinvoke r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid filter config. filter main type=");

        $i2 = r0.<android.media.tv.tuner.filter.Filter: int mMainType>;

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", filter subtype=");

        $i3 = r0.<android.media.tv.tuner.filter.Filter: int mSubtype>;

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". config main type=");

        $i4 = virtualinvoke r13.<android.media.tv.tuner.filter.FilterConfiguration: int getType()>();

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", config subtype=");

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r11 = virtualinvoke r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw r2;

     label09:
        $r12 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public int flush()
    {
        android.media.tv.tuner.filter.Filter r0;
        java.lang.Object r1;
        int i0;
        boolean $z0;
        java.lang.Throwable $r3;

        r0 := @this: android.media.tv.tuner.filter.Filter;

        r1 = r0.<android.media.tv.tuner.filter.Filter: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = r0.<android.media.tv.tuner.filter.Filter: boolean mIsClosed>;

        staticinvoke <android.media.tv.tuner.TunerUtils: void checkResourceState(java.lang.String,boolean)>("Filter", $z0);

        i0 = specialinvoke r0.<android.media.tv.tuner.filter.Filter: int nativeFlushFilter()>();

        exitmonitor r1;

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.media.tv.tuner.filter.FilterCallback getCallback()
    {
        android.media.tv.tuner.filter.Filter r0;
        android.media.tv.tuner.filter.FilterCallback $r1;

        r0 := @this: android.media.tv.tuner.filter.Filter;

        $r1 = r0.<android.media.tv.tuner.filter.Filter: android.media.tv.tuner.filter.FilterCallback mCallback>;

        return $r1;
    }

    public int getId()
    {
        android.media.tv.tuner.filter.Filter r0;
        java.lang.Object r1;
        int i0;
        boolean $z0;
        java.lang.Throwable $r3;

        r0 := @this: android.media.tv.tuner.filter.Filter;

        r1 = r0.<android.media.tv.tuner.filter.Filter: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = r0.<android.media.tv.tuner.filter.Filter: boolean mIsClosed>;

        staticinvoke <android.media.tv.tuner.TunerUtils: void checkResourceState(java.lang.String,boolean)>("Filter", $z0);

        i0 = specialinvoke r0.<android.media.tv.tuner.filter.Filter: int nativeGetId()>();

        exitmonitor r1;

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void lambda$onFilterEvent$1$Filter(android.media.tv.tuner.filter.FilterEvent[])
    {
        android.media.tv.tuner.filter.Filter r0;
        android.media.tv.tuner.filter.FilterEvent[] r1;
        android.media.tv.tuner.filter.FilterCallback $r2;

        r0 := @this: android.media.tv.tuner.filter.Filter;

        r1 := @parameter0: android.media.tv.tuner.filter.FilterEvent[];

        $r2 = r0.<android.media.tv.tuner.filter.Filter: android.media.tv.tuner.filter.FilterCallback mCallback>;

        interfaceinvoke $r2.<android.media.tv.tuner.filter.FilterCallback: void onFilterEvent(android.media.tv.tuner.filter.Filter,android.media.tv.tuner.filter.FilterEvent[])>(r0, r1);

        return;
    }

    public void lambda$onFilterStatus$0$Filter(int)
    {
        android.media.tv.tuner.filter.Filter r0;
        int i0;
        android.media.tv.tuner.filter.FilterCallback $r1;

        r0 := @this: android.media.tv.tuner.filter.Filter;

        i0 := @parameter0: int;

        $r1 = r0.<android.media.tv.tuner.filter.Filter: android.media.tv.tuner.filter.FilterCallback mCallback>;

        interfaceinvoke $r1.<android.media.tv.tuner.filter.FilterCallback: void onFilterStatusChanged(android.media.tv.tuner.filter.Filter,int)>(r0, i0);

        return;
    }

    public int read(byte[], long, long)
    {
        android.media.tv.tuner.filter.Filter r0;
        long l0, $l3, $l4, l5, l6;
        java.lang.Object r1;
        int i1, $i2;
        boolean $z0;
        java.lang.Throwable $r2, $r3, r5;
        byte[] r4;

        r0 := @this: android.media.tv.tuner.filter.Filter;

        r4 := @parameter0: byte[];

        l0 := @parameter1: long;

        l5 := @parameter2: long;

        r1 = r0.<android.media.tv.tuner.filter.Filter: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = r0.<android.media.tv.tuner.filter.Filter: boolean mIsClosed>;

        staticinvoke <android.media.tv.tuner.TunerUtils: void checkResourceState(java.lang.String,boolean)>("Filter", $z0);

        $i2 = lengthof r4;

        $l3 = (long) $i2;

        $l4 = $l3 - l0;

        l6 = staticinvoke <java.lang.Math: long min(long,long)>(l5, $l4);

     label2:
        i1 = specialinvoke r0.<android.media.tv.tuner.filter.Filter: int nativeRead(byte[],long,long)>(r4, l0, l6);

        exitmonitor r1;

     label3:
        return i1;

     label4:
        $r3 := @caughtexception;

        r5 = $r3;

     label5:
        exitmonitor r1;

     label6:
        throw r5;

     label7:
        $r2 := @caughtexception;

        r5 = $r2;

        goto label5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public void setCallback(android.media.tv.tuner.filter.FilterCallback, java.util.concurrent.Executor)
    {
        android.media.tv.tuner.filter.Filter r0;
        android.media.tv.tuner.filter.FilterCallback r1;
        java.util.concurrent.Executor r2;

        r0 := @this: android.media.tv.tuner.filter.Filter;

        r1 := @parameter0: android.media.tv.tuner.filter.FilterCallback;

        r2 := @parameter1: java.util.concurrent.Executor;

        r0.<android.media.tv.tuner.filter.Filter: android.media.tv.tuner.filter.FilterCallback mCallback> = r1;

        r0.<android.media.tv.tuner.filter.Filter: java.util.concurrent.Executor mExecutor> = r2;

        return;
    }

    public int setDataSource(android.media.tv.tuner.filter.Filter)
    {
        android.media.tv.tuner.filter.Filter r0, $r2, r4;
        java.lang.Object r1;
        int i0;
        boolean $z0;
        java.lang.Throwable $r3;
        java.lang.IllegalStateException r5;

        r0 := @this: android.media.tv.tuner.filter.Filter;

        r4 := @parameter0: android.media.tv.tuner.filter.Filter;

        r1 = r0.<android.media.tv.tuner.filter.Filter: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = r0.<android.media.tv.tuner.filter.Filter: boolean mIsClosed>;

        staticinvoke <android.media.tv.tuner.TunerUtils: void checkResourceState(java.lang.String,boolean)>("Filter", $z0);

        $r2 = r0.<android.media.tv.tuner.filter.Filter: android.media.tv.tuner.filter.Filter mSource>;

        if $r2 != null goto label6;

        i0 = specialinvoke r0.<android.media.tv.tuner.filter.Filter: int nativeSetDataSource(android.media.tv.tuner.filter.Filter)>(r4);

     label2:
        if i0 != 0 goto label4;

     label3:
        r0.<android.media.tv.tuner.filter.Filter: android.media.tv.tuner.filter.Filter mSource> = r4;

     label4:
        exitmonitor r1;

     label5:
        return i0;

     label6:
        r5 = new java.lang.IllegalStateException;

        specialinvoke r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Data source is existing");

        throw r5;

     label7:
        $r3 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label6 to label7 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void setType(int, int)
    {
        android.media.tv.tuner.filter.Filter r0;
        int i0, i1, $i2;

        r0 := @this: android.media.tv.tuner.filter.Filter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0.<android.media.tv.tuner.filter.Filter: int mMainType> = i0;

        $i2 = staticinvoke <android.media.tv.tuner.TunerUtils: int getFilterSubtype(int,int)>(i0, i1);

        r0.<android.media.tv.tuner.filter.Filter: int mSubtype> = $i2;

        return;
    }

    public int start()
    {
        android.media.tv.tuner.filter.Filter r0;
        java.lang.Object r1;
        int i0;
        boolean $z0;
        java.lang.Throwable $r3;

        r0 := @this: android.media.tv.tuner.filter.Filter;

        r1 = r0.<android.media.tv.tuner.filter.Filter: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = r0.<android.media.tv.tuner.filter.Filter: boolean mIsClosed>;

        staticinvoke <android.media.tv.tuner.TunerUtils: void checkResourceState(java.lang.String,boolean)>("Filter", $z0);

        i0 = specialinvoke r0.<android.media.tv.tuner.filter.Filter: int nativeStartFilter()>();

        exitmonitor r1;

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int stop()
    {
        android.media.tv.tuner.filter.Filter r0;
        java.lang.Object r1;
        int i0;
        boolean $z0;
        java.lang.Throwable $r3;

        r0 := @this: android.media.tv.tuner.filter.Filter;

        r1 = r0.<android.media.tv.tuner.filter.Filter: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = r0.<android.media.tv.tuner.filter.Filter: boolean mIsClosed>;

        staticinvoke <android.media.tv.tuner.TunerUtils: void checkResourceState(java.lang.String,boolean)>("Filter", $z0);

        i0 = specialinvoke r0.<android.media.tv.tuner.filter.Filter: int nativeStopFilter()>();

        exitmonitor r1;

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static void <clinit>()
    {
        <android.media.tv.tuner.filter.Filter: int TYPE_UNDEFINED> = 0;

        <android.media.tv.tuner.filter.Filter: int TYPE_TS> = 1;

        <android.media.tv.tuner.filter.Filter: int TYPE_TLV> = 8;

        <android.media.tv.tuner.filter.Filter: int TYPE_MMTP> = 2;

        <android.media.tv.tuner.filter.Filter: int TYPE_IP> = 4;

        <android.media.tv.tuner.filter.Filter: int TYPE_ALP> = 16;

        <android.media.tv.tuner.filter.Filter: java.lang.String TAG> = "Filter";

        <android.media.tv.tuner.filter.Filter: int SUBTYPE_VIDEO> = 4;

        <android.media.tv.tuner.filter.Filter: int SUBTYPE_UNDEFINED> = 0;

        <android.media.tv.tuner.filter.Filter: int SUBTYPE_TS> = 7;

        <android.media.tv.tuner.filter.Filter: int SUBTYPE_TLV> = 15;

        <android.media.tv.tuner.filter.Filter: int SUBTYPE_TEMI> = 9;

        <android.media.tv.tuner.filter.Filter: int SUBTYPE_SECTION> = 1;

        <android.media.tv.tuner.filter.Filter: int SUBTYPE_RECORD> = 6;

        <android.media.tv.tuner.filter.Filter: int SUBTYPE_PTP> = 16;

        <android.media.tv.tuner.filter.Filter: int SUBTYPE_PES> = 2;

        <android.media.tv.tuner.filter.Filter: int SUBTYPE_PCR> = 8;

        <android.media.tv.tuner.filter.Filter: int SUBTYPE_PAYLOAD_THROUGH> = 14;

        <android.media.tv.tuner.filter.Filter: int SUBTYPE_NTP> = 11;

        <android.media.tv.tuner.filter.Filter: int SUBTYPE_MMTP> = 10;

        <android.media.tv.tuner.filter.Filter: int SUBTYPE_IP_PAYLOAD> = 12;

        <android.media.tv.tuner.filter.Filter: int SUBTYPE_IP> = 13;

        <android.media.tv.tuner.filter.Filter: int SUBTYPE_DOWNLOAD> = 5;

        <android.media.tv.tuner.filter.Filter: int SUBTYPE_AUDIO> = 3;

        <android.media.tv.tuner.filter.Filter: int STATUS_OVERFLOW> = 8;

        <android.media.tv.tuner.filter.Filter: int STATUS_LOW_WATER> = 2;

        <android.media.tv.tuner.filter.Filter: int STATUS_HIGH_WATER> = 4;

        <android.media.tv.tuner.filter.Filter: int STATUS_DATA_READY> = 1;

        return;
    }
}
