public final class android.mtp.MtpDevice extends java.lang.Object
{
    private static final java.lang.String TAG;
    private dalvik.system.CloseGuard mCloseGuard;
    private android.hardware.usb.UsbDeviceConnection mConnection;
    private final android.hardware.usb.UsbDevice mDevice;
    private final java.lang.Object mLock;
    private long mNativeContext;

    static void <clinit>()
    {
        <android.mtp.MtpDevice: java.lang.String TAG> = "MtpDevice";

        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("media_jni");

        return;
    }

    public void <init>(android.hardware.usb.UsbDevice)
    {
        android.mtp.MtpDevice r0;
        android.hardware.usb.UsbDevice r1;
        dalvik.system.CloseGuard $r2;
        java.lang.Object $r3;

        r0 := @this: android.mtp.MtpDevice;

        r1 := @parameter0: android.hardware.usb.UsbDevice;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.mtp.MtpDevice: dalvik.system.CloseGuard mCloseGuard> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<android.mtp.MtpDevice: java.lang.Object mLock> = $r3;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r0.<android.mtp.MtpDevice: android.hardware.usb.UsbDevice mDevice> = r1;

        return;
    }

    static void access$000(android.mtp.MtpDevice, int)
    {
        android.mtp.MtpDevice r0;
        int i0;

        r0 := @parameter0: android.mtp.MtpDevice;

        i0 := @parameter1: int;

        specialinvoke r0.<android.mtp.MtpDevice: void native_discard_event_request(int)>(i0);

        return;
    }

    private native void native_close();

    private native boolean native_delete_object(int);

    private native void native_discard_event_request(int);

    private native android.mtp.MtpDeviceInfo native_get_device_info();

    private native byte[] native_get_object(int, long);

    private native int[] native_get_object_handles(int, int, int);

    private native android.mtp.MtpObjectInfo native_get_object_info(int);

    private native long native_get_object_size_long(int, int) throws java.io.IOException;

    private native int native_get_parent(int);

    private native long native_get_partial_object(int, long, long, byte[]) throws java.io.IOException;

    private native int native_get_partial_object_64(int, long, long, byte[]) throws java.io.IOException;

    private native int native_get_storage_id(int);

    private native int[] native_get_storage_ids();

    private native android.mtp.MtpStorageInfo native_get_storage_info(int);

    private native byte[] native_get_thumbnail(int);

    private native boolean native_import_file(int, int);

    private native boolean native_import_file(int, java.lang.String);

    private native boolean native_open(java.lang.String, int);

    private native android.mtp.MtpEvent native_reap_event_request(int) throws java.io.IOException;

    private native boolean native_send_object(int, long, int);

    private native android.mtp.MtpObjectInfo native_send_object_info(android.mtp.MtpObjectInfo);

    private native int native_submit_event_request() throws java.io.IOException;

    public void close()
    {
        android.mtp.MtpDevice r0;
        java.lang.Object r1;
        android.hardware.usb.UsbDeviceConnection $r3, $r5;
        dalvik.system.CloseGuard $r4;
        java.lang.Throwable $r6;

        r0 := @this: android.mtp.MtpDevice;

        r1 = r0.<android.mtp.MtpDevice: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<android.mtp.MtpDevice: android.hardware.usb.UsbDeviceConnection mConnection>;

        if $r3 == null goto label2;

        $r4 = r0.<android.mtp.MtpDevice: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r4.<dalvik.system.CloseGuard: void close()>();

        specialinvoke r0.<android.mtp.MtpDevice: void native_close()>();

        $r5 = r0.<android.mtp.MtpDevice: android.hardware.usb.UsbDeviceConnection mConnection>;

        virtualinvoke $r5.<android.hardware.usb.UsbDeviceConnection: void close()>();

        r0.<android.mtp.MtpDevice: android.hardware.usb.UsbDeviceConnection mConnection> = null;

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r6 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public boolean deleteObject(int)
    {
        android.mtp.MtpDevice r0;
        int i0;
        boolean $z0;

        r0 := @this: android.mtp.MtpDevice;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<android.mtp.MtpDevice: boolean native_delete_object(int)>(i0);

        return $z0;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.mtp.MtpDevice r0;
        dalvik.system.CloseGuard $r2, $r3;
        java.lang.Throwable $r4;

        r0 := @this: android.mtp.MtpDevice;

     label1:
        $r2 = r0.<android.mtp.MtpDevice: dalvik.system.CloseGuard mCloseGuard>;

        if $r2 == null goto label2;

        $r3 = r0.<android.mtp.MtpDevice: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r3.<dalvik.system.CloseGuard: void warnIfOpen()>();

     label2:
        virtualinvoke r0.<android.mtp.MtpDevice: void close()>();

     label3:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label4:
        $r4 := @caughtexception;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public int getDeviceId()
    {
        android.mtp.MtpDevice r0;
        android.hardware.usb.UsbDevice $r1;
        int $i0;

        r0 := @this: android.mtp.MtpDevice;

        $r1 = r0.<android.mtp.MtpDevice: android.hardware.usb.UsbDevice mDevice>;

        $i0 = virtualinvoke $r1.<android.hardware.usb.UsbDevice: int getDeviceId()>();

        return $i0;
    }

    public android.mtp.MtpDeviceInfo getDeviceInfo()
    {
        android.mtp.MtpDevice r0;
        android.mtp.MtpDeviceInfo $r1;

        r0 := @this: android.mtp.MtpDevice;

        $r1 = specialinvoke r0.<android.mtp.MtpDevice: android.mtp.MtpDeviceInfo native_get_device_info()>();

        return $r1;
    }

    public java.lang.String getDeviceName()
    {
        android.mtp.MtpDevice r0;
        android.hardware.usb.UsbDevice $r1;
        java.lang.String $r2;

        r0 := @this: android.mtp.MtpDevice;

        $r1 = r0.<android.mtp.MtpDevice: android.hardware.usb.UsbDevice mDevice>;

        $r2 = virtualinvoke $r1.<android.hardware.usb.UsbDevice: java.lang.String getDeviceName()>();

        return $r2;
    }

    public byte[] getObject(int, int)
    {
        android.mtp.MtpDevice r0;
        int i0, i1;
        long $l3;
        byte[] $r1;

        r0 := @this: android.mtp.MtpDevice;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentNonnegative(int,java.lang.String)>(i1, "objectSize should not be negative");

        $l3 = (long) i1;

        $r1 = specialinvoke r0.<android.mtp.MtpDevice: byte[] native_get_object(int,long)>(i0, $l3);

        return $r1;
    }

    public int[] getObjectHandles(int, int, int)
    {
        android.mtp.MtpDevice r0;
        int i0, i1, i2;
        int[] $r1;

        r0 := @this: android.mtp.MtpDevice;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r1 = specialinvoke r0.<android.mtp.MtpDevice: int[] native_get_object_handles(int,int,int)>(i0, i1, i2);

        return $r1;
    }

    public android.mtp.MtpObjectInfo getObjectInfo(int)
    {
        android.mtp.MtpDevice r0;
        int i0;
        android.mtp.MtpObjectInfo $r1;

        r0 := @this: android.mtp.MtpDevice;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<android.mtp.MtpDevice: android.mtp.MtpObjectInfo native_get_object_info(int)>(i0);

        return $r1;
    }

    public long getObjectSizeLong(int, int) throws java.io.IOException
    {
        android.mtp.MtpDevice r0;
        int i0, i1;
        long $l2;

        r0 := @this: android.mtp.MtpDevice;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $l2 = specialinvoke r0.<android.mtp.MtpDevice: long native_get_object_size_long(int,int)>(i0, i1);

        return $l2;
    }

    public long getParent(int)
    {
        android.mtp.MtpDevice r0;
        int i0, $i1;
        long $l2;

        r0 := @this: android.mtp.MtpDevice;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<android.mtp.MtpDevice: int native_get_parent(int)>(i0);

        $l2 = (long) $i1;

        return $l2;
    }

    public long getPartialObject(int, long, long, byte[]) throws java.io.IOException
    {
        android.mtp.MtpDevice r0;
        int i0;
        long l1, l2, $l3;
        byte[] r1;

        r0 := @this: android.mtp.MtpDevice;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        r1 := @parameter3: byte[];

        $l3 = specialinvoke r0.<android.mtp.MtpDevice: long native_get_partial_object(int,long,long,byte[])>(i0, l1, l2, r1);

        return $l3;
    }

    public long getPartialObject64(int, long, long, byte[]) throws java.io.IOException
    {
        android.mtp.MtpDevice r0;
        int i0, $i3;
        long l1, l2, $l4;
        byte[] r1;

        r0 := @this: android.mtp.MtpDevice;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        r1 := @parameter3: byte[];

        $i3 = specialinvoke r0.<android.mtp.MtpDevice: int native_get_partial_object_64(int,long,long,byte[])>(i0, l1, l2, r1);

        $l4 = (long) $i3;

        return $l4;
    }

    public long getStorageId(int)
    {
        android.mtp.MtpDevice r0;
        int i0, $i1;
        long $l2;

        r0 := @this: android.mtp.MtpDevice;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<android.mtp.MtpDevice: int native_get_storage_id(int)>(i0);

        $l2 = (long) $i1;

        return $l2;
    }

    public int[] getStorageIds()
    {
        android.mtp.MtpDevice r0;
        int[] $r1;

        r0 := @this: android.mtp.MtpDevice;

        $r1 = specialinvoke r0.<android.mtp.MtpDevice: int[] native_get_storage_ids()>();

        return $r1;
    }

    public android.mtp.MtpStorageInfo getStorageInfo(int)
    {
        android.mtp.MtpDevice r0;
        int i0;
        android.mtp.MtpStorageInfo $r1;

        r0 := @this: android.mtp.MtpDevice;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<android.mtp.MtpDevice: android.mtp.MtpStorageInfo native_get_storage_info(int)>(i0);

        return $r1;
    }

    public byte[] getThumbnail(int)
    {
        android.mtp.MtpDevice r0;
        int i0;
        byte[] $r1;

        r0 := @this: android.mtp.MtpDevice;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<android.mtp.MtpDevice: byte[] native_get_thumbnail(int)>(i0);

        return $r1;
    }

    public boolean importFile(int, android.os.ParcelFileDescriptor)
    {
        android.mtp.MtpDevice r0;
        int i0, $i1;
        android.os.ParcelFileDescriptor r1;
        boolean $z0;

        r0 := @this: android.mtp.MtpDevice;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.ParcelFileDescriptor;

        $i1 = virtualinvoke r1.<android.os.ParcelFileDescriptor: int getFd()>();

        $z0 = specialinvoke r0.<android.mtp.MtpDevice: boolean native_import_file(int,int)>(i0, $i1);

        return $z0;
    }

    public boolean importFile(int, java.lang.String)
    {
        android.mtp.MtpDevice r0;
        int i0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: android.mtp.MtpDevice;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $z0 = specialinvoke r0.<android.mtp.MtpDevice: boolean native_import_file(int,java.lang.String)>(i0, r1);

        return $z0;
    }

    public boolean open(android.hardware.usb.UsbDeviceConnection)
    {
        android.mtp.MtpDevice r0;
        android.content.Context r1;
        java.lang.Object r2, $r4;
        dalvik.system.CloseGuard $r3;
        android.os.UserManager $r5;
        boolean $z1, z2;
        android.hardware.usb.UsbDevice $r6;
        java.lang.String $r7;
        int $i0;
        java.lang.Throwable $r8;
        android.hardware.usb.UsbDeviceConnection r9;

        r0 := @this: android.mtp.MtpDevice;

        r9 := @parameter0: android.hardware.usb.UsbDeviceConnection;

        r1 = virtualinvoke r9.<android.hardware.usb.UsbDeviceConnection: android.content.Context getContext()>();

        r2 = r0.<android.mtp.MtpDevice: java.lang.Object mLock>;

        entermonitor r2;

        z2 = 0;

        if r1 == null goto label04;

        z2 = 0;

     label01:
        $r4 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("user");

        $r5 = (android.os.UserManager) $r4;

        $z1 = virtualinvoke $r5.<android.os.UserManager: boolean hasUserRestriction(java.lang.String)>("no_usb_file_transfer");

        if $z1 != 0 goto label04;

        $r6 = r0.<android.mtp.MtpDevice: android.hardware.usb.UsbDevice mDevice>;

        $r7 = virtualinvoke $r6.<android.hardware.usb.UsbDevice: java.lang.String getDeviceName()>();

        $i0 = virtualinvoke r9.<android.hardware.usb.UsbDeviceConnection: int getFileDescriptor()>();

        z2 = specialinvoke r0.<android.mtp.MtpDevice: boolean native_open(java.lang.String,int)>($r7, $i0);

     label02:
        goto label04;

     label03:
        $r8 := @caughtexception;

        goto label10;

     label04:
        if z2 != 0 goto label07;

     label05:
        virtualinvoke r9.<android.hardware.usb.UsbDeviceConnection: void close()>();

     label06:
        goto label08;

     label07:
        r0.<android.mtp.MtpDevice: android.hardware.usb.UsbDeviceConnection mConnection> = r9;

        $r3 = r0.<android.mtp.MtpDevice: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r3.<dalvik.system.CloseGuard: void open(java.lang.String)>("close");

     label08:
        exitmonitor r2;

     label09:
        return z2;

     label10:
        exitmonitor r2;

     label11:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label06 with label03;
        catch java.lang.Throwable from label07 to label08 with label03;
        catch java.lang.Throwable from label08 to label09 with label03;
        catch java.lang.Throwable from label10 to label11 with label03;
    }

    public android.mtp.MtpEvent readEvent(android.os.CancellationSignal) throws java.io.IOException
    {
        android.mtp.MtpDevice r0;
        android.os.CancellationSignal r1;
        int i0;
        android.mtp.MtpDevice$1 $r2;
        java.lang.Throwable $r3;
        boolean z0;
        android.mtp.MtpEvent r4;

        r0 := @this: android.mtp.MtpDevice;

        r1 := @parameter0: android.os.CancellationSignal;

        i0 = specialinvoke r0.<android.mtp.MtpDevice: int native_submit_event_request()>();

        if i0 < 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>(z0, "Other thread is reading an event.");

        if r1 == null goto label3;

        $r2 = new android.mtp.MtpDevice$1;

        specialinvoke $r2.<android.mtp.MtpDevice$1: void <init>(android.mtp.MtpDevice,int)>(r0, i0);

        virtualinvoke r1.<android.os.CancellationSignal: void setOnCancelListener(android.os.CancellationSignal$OnCancelListener)>($r2);

     label3:
        r4 = specialinvoke r0.<android.mtp.MtpDevice: android.mtp.MtpEvent native_reap_event_request(int)>(i0);

     label4:
        if r1 == null goto label5;

        virtualinvoke r1.<android.os.CancellationSignal: void setOnCancelListener(android.os.CancellationSignal$OnCancelListener)>(null);

     label5:
        return r4;

     label6:
        $r3 := @caughtexception;

        if r1 == null goto label7;

        virtualinvoke r1.<android.os.CancellationSignal: void setOnCancelListener(android.os.CancellationSignal$OnCancelListener)>(null);

     label7:
        throw $r3;

        catch java.lang.Throwable from label3 to label4 with label6;
    }

    public boolean sendObject(int, long, android.os.ParcelFileDescriptor)
    {
        android.mtp.MtpDevice r0;
        int i0, $i2;
        long l1;
        android.os.ParcelFileDescriptor r1;
        boolean $z0;

        r0 := @this: android.mtp.MtpDevice;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        r1 := @parameter2: android.os.ParcelFileDescriptor;

        $i2 = virtualinvoke r1.<android.os.ParcelFileDescriptor: int getFd()>();

        $z0 = specialinvoke r0.<android.mtp.MtpDevice: boolean native_send_object(int,long,int)>(i0, l1, $i2);

        return $z0;
    }

    public android.mtp.MtpObjectInfo sendObjectInfo(android.mtp.MtpObjectInfo)
    {
        android.mtp.MtpDevice r0;
        android.mtp.MtpObjectInfo r1, $r2;

        r0 := @this: android.mtp.MtpDevice;

        r1 := @parameter0: android.mtp.MtpObjectInfo;

        $r2 = specialinvoke r0.<android.mtp.MtpDevice: android.mtp.MtpObjectInfo native_send_object_info(android.mtp.MtpObjectInfo)>(r1);

        return $r2;
    }

    public java.lang.String toString()
    {
        android.mtp.MtpDevice r0;
        android.hardware.usb.UsbDevice $r1;
        java.lang.String $r2;

        r0 := @this: android.mtp.MtpDevice;

        $r1 = r0.<android.mtp.MtpDevice: android.hardware.usb.UsbDevice mDevice>;

        $r2 = virtualinvoke $r1.<android.hardware.usb.UsbDevice: java.lang.String getDeviceName()>();

        return $r2;
    }
}
