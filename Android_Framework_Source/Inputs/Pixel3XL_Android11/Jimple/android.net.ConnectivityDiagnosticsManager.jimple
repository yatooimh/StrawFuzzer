public class android.net.ConnectivityDiagnosticsManager extends java.lang.Object
{
    public static final java.util.Map sCallbacks;
    private final android.content.Context mContext;
    private final android.net.IConnectivityManager mService;

    static void <clinit>()
    {
        java.util.concurrent.ConcurrentHashMap $r0;

        $r0 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r0.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        <android.net.ConnectivityDiagnosticsManager: java.util.Map sCallbacks> = $r0;

        return;
    }

    public void <init>(android.content.Context, android.net.IConnectivityManager)
    {
        android.net.ConnectivityDiagnosticsManager r0;
        android.content.Context r1, $r4;
        android.net.IConnectivityManager r2, $r6;
        java.lang.Object $r3, $r5;

        r0 := @this: android.net.ConnectivityDiagnosticsManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.net.IConnectivityManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "missing context");

        $r4 = (android.content.Context) $r3;

        r0.<android.net.ConnectivityDiagnosticsManager: android.content.Context mContext> = $r4;

        $r5 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "missing IConnectivityManager");

        $r6 = (android.net.IConnectivityManager) $r5;

        r0.<android.net.ConnectivityDiagnosticsManager: android.net.IConnectivityManager mService> = $r6;

        return;
    }

    public static boolean persistableBundleEquals(android.os.PersistableBundle, android.os.PersistableBundle)
    {
        android.os.PersistableBundle r0, r1;
        java.util.Iterator r2;
        java.lang.String r3;
        java.util.Set $r4, $r5, $r6;
        boolean $z0, $z1, $z2;
        java.lang.Object $r7, $r8, $r9;

        r0 := @parameter0: android.os.PersistableBundle;

        r1 := @parameter1: android.os.PersistableBundle;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r0 == null goto label7;

        if r1 != null goto label2;

        goto label7;

     label2:
        $r4 = virtualinvoke r0.<android.os.PersistableBundle: java.util.Set keySet()>();

        $r5 = virtualinvoke r1.<android.os.PersistableBundle: java.util.Set keySet()>();

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r4, $r5);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        $r6 = virtualinvoke r0.<android.os.PersistableBundle: java.util.Set keySet()>();

        r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r7;

        $r8 = virtualinvoke r0.<android.os.PersistableBundle: java.lang.Object get(java.lang.String)>(r3);

        $r9 = virtualinvoke r1.<android.os.PersistableBundle: java.lang.Object get(java.lang.String)>(r3);

        $z2 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r8, $r9);

        if $z2 != 0 goto label5;

        return 0;

     label5:
        goto label4;

     label6:
        return 1;

     label7:
        return 0;
    }

    public void registerConnectivityDiagnosticsCallback(android.net.NetworkRequest, java.util.concurrent.Executor, android.net.ConnectivityDiagnosticsManager$ConnectivityDiagnosticsCallback)
    {
        android.net.ConnectivityDiagnosticsManager r0;
        android.net.ConnectivityDiagnosticsManager$ConnectivityDiagnosticsCallback r1;
        android.net.ConnectivityDiagnosticsManager$ConnectivityDiagnosticsBinder $r2;
        java.util.Map $r3;
        java.lang.Object $r4;
        java.lang.IllegalArgumentException $r5;
        android.content.Context $r6;
        android.net.IConnectivityManager $r7;
        java.lang.String $r8;
        android.os.RemoteException $r9;
        android.net.NetworkRequest r11;
        java.util.concurrent.Executor r12;

        r0 := @this: android.net.ConnectivityDiagnosticsManager;

        r11 := @parameter0: android.net.NetworkRequest;

        r12 := @parameter1: java.util.concurrent.Executor;

        r1 := @parameter2: android.net.ConnectivityDiagnosticsManager$ConnectivityDiagnosticsCallback;

        $r2 = new android.net.ConnectivityDiagnosticsManager$ConnectivityDiagnosticsBinder;

        specialinvoke $r2.<android.net.ConnectivityDiagnosticsManager$ConnectivityDiagnosticsBinder: void <init>(android.net.ConnectivityDiagnosticsManager$ConnectivityDiagnosticsCallback,java.util.concurrent.Executor)>(r1, r12);

        $r3 = <android.net.ConnectivityDiagnosticsManager: java.util.Map sCallbacks>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r1, $r2);

        if $r4 != null goto label5;

     label1:
        $r7 = r0.<android.net.ConnectivityDiagnosticsManager: android.net.IConnectivityManager mService>;

        $r6 = r0.<android.net.ConnectivityDiagnosticsManager: android.content.Context mContext>;

        $r8 = virtualinvoke $r6.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke $r7.<android.net.IConnectivityManager: void registerConnectivityDiagnosticsCallback(android.net.IConnectivityDiagnosticsCallback,android.net.NetworkRequest,java.lang.String)>($r2, r11, $r8);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        virtualinvoke $r9.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

     label4:
        return;

     label5:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Callback is currently registered");

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void unregisterConnectivityDiagnosticsCallback(android.net.ConnectivityDiagnosticsManager$ConnectivityDiagnosticsCallback)
    {
        android.net.ConnectivityDiagnosticsManager r0;
        java.util.Map $r1;
        java.lang.Object $r2;
        android.net.IConnectivityManager $r3;
        android.os.RemoteException $r4;
        android.net.ConnectivityDiagnosticsManager$ConnectivityDiagnosticsCallback r6;
        android.net.ConnectivityDiagnosticsManager$ConnectivityDiagnosticsBinder r7;

        r0 := @this: android.net.ConnectivityDiagnosticsManager;

        r6 := @parameter0: android.net.ConnectivityDiagnosticsManager$ConnectivityDiagnosticsCallback;

        $r1 = <android.net.ConnectivityDiagnosticsManager: java.util.Map sCallbacks>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r6);

        r7 = (android.net.ConnectivityDiagnosticsManager$ConnectivityDiagnosticsBinder) $r2;

        if r7 != null goto label1;

        return;

     label1:
        $r3 = r0.<android.net.ConnectivityDiagnosticsManager: android.net.IConnectivityManager mService>;

        interfaceinvoke $r3.<android.net.IConnectivityManager: void unregisterConnectivityDiagnosticsCallback(android.net.IConnectivityDiagnosticsCallback)>(r7);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }
}
