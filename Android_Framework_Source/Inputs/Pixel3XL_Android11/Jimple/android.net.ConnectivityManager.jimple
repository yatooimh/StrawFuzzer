public class android.net.ConnectivityManager extends java.lang.Object
{
    public static final java.lang.String ACTION_BACKGROUND_DATA_SETTING_CHANGED;
    public static final java.lang.String ACTION_CAPTIVE_PORTAL_SIGN_IN;
    public static final java.lang.String ACTION_CAPTIVE_PORTAL_TEST_COMPLETED;
    public static final java.lang.String ACTION_DATA_ACTIVITY_CHANGE;
    public static final java.lang.String ACTION_PROMPT_LOST_VALIDATION;
    public static final java.lang.String ACTION_PROMPT_PARTIAL_CONNECTIVITY;
    public static final java.lang.String ACTION_PROMPT_UNVALIDATED;
    public static final java.lang.String ACTION_RESTRICT_BACKGROUND_CHANGED;
    public static final java.lang.String ACTION_TETHER_STATE_CHANGED;
    private static final android.net.NetworkRequest ALREADY_UNREGISTERED;
    private static final int BASE;
    public static final int CALLBACK_AVAILABLE;
    public static final int CALLBACK_BLK_CHANGED;
    public static final int CALLBACK_CAP_CHANGED;
    public static final int CALLBACK_IP_CHANGED;
    public static final int CALLBACK_LOSING;
    public static final int CALLBACK_LOST;
    public static final int CALLBACK_PRECHECK;
    public static final int CALLBACK_RESUMED;
    public static final int CALLBACK_SUSPENDED;
    public static final int CALLBACK_UNAVAIL;
    public static final java.lang.String CONNECTIVITY_ACTION;
    private static final boolean DEBUG;
    public static final int DEFAULT_NETWORK_PREFERENCE;
    private static final int DEPRECATED_PHONE_CONSTANT_APN_ALREADY_ACTIVE;
    private static final int DEPRECATED_PHONE_CONSTANT_APN_REQUEST_FAILED;
    private static final int DEPRECATED_PHONE_CONSTANT_APN_REQUEST_STARTED;
    private static final int EXPIRE_LEGACY_REQUEST;
    public static final java.lang.String EXTRA_ACTIVE_LOCAL_ONLY;
    public static final java.lang.String EXTRA_ACTIVE_TETHER;
    public static final java.lang.String EXTRA_ADD_TETHER_TYPE;
    public static final java.lang.String EXTRA_AVAILABLE_TETHER;
    public static final java.lang.String EXTRA_CAPTIVE_PORTAL;
    public static final java.lang.String EXTRA_CAPTIVE_PORTAL_PROBE_SPEC;
    public static final java.lang.String EXTRA_CAPTIVE_PORTAL_URL;
    public static final java.lang.String EXTRA_CAPTIVE_PORTAL_USER_AGENT;
    public static final java.lang.String EXTRA_DEVICE_TYPE;
    public static final java.lang.String EXTRA_ERRORED_TETHER;
    public static final java.lang.String EXTRA_EXTRA_INFO;
    public static final java.lang.String EXTRA_INET_CONDITION;
    public static final java.lang.String EXTRA_IS_ACTIVE;
    public static final java.lang.String EXTRA_IS_CAPTIVE_PORTAL;
    public static final java.lang.String EXTRA_IS_FAILOVER;
    public static final java.lang.String EXTRA_NETWORK;
    public static final java.lang.String EXTRA_NETWORK_INFO;
    public static final java.lang.String EXTRA_NETWORK_REQUEST;
    public static final java.lang.String EXTRA_NETWORK_TYPE;
    public static final java.lang.String EXTRA_NO_CONNECTIVITY;
    public static final java.lang.String EXTRA_OTHER_NETWORK_INFO;
    public static final java.lang.String EXTRA_PROVISION_CALLBACK;
    public static final java.lang.String EXTRA_REALTIME_NS;
    public static final java.lang.String EXTRA_REASON;
    public static final java.lang.String EXTRA_REM_TETHER_TYPE;
    public static final java.lang.String EXTRA_RUN_PROVISION;
    public static final java.lang.String EXTRA_SET_ALARM;
    public static final java.lang.String INET_CONDITION_ACTION;
    private static final int LISTEN;
    public static final int MAX_NETWORK_TYPE;
    public static final int MAX_RADIO_TYPE;
    private static final int MIN_NETWORK_TYPE;
    public static final int MULTIPATH_PREFERENCE_HANDOVER;
    public static final int MULTIPATH_PREFERENCE_PERFORMANCE;
    public static final int MULTIPATH_PREFERENCE_RELIABILITY;
    public static final int MULTIPATH_PREFERENCE_UNMETERED;
    public static final int NETID_UNSET;
    public static final java.lang.String PRIVATE_DNS_DEFAULT_MODE_FALLBACK;
    public static final java.lang.String PRIVATE_DNS_MODE_OFF;
    public static final java.lang.String PRIVATE_DNS_MODE_OPPORTUNISTIC;
    public static final java.lang.String PRIVATE_DNS_MODE_PROVIDER_HOSTNAME;
    private static final int REQUEST;
    public static final int REQUEST_ID_UNSET;
    public static final int RESTRICT_BACKGROUND_STATUS_DISABLED;
    public static final int RESTRICT_BACKGROUND_STATUS_ENABLED;
    public static final int RESTRICT_BACKGROUND_STATUS_WHITELISTED;
    private static final java.lang.String TAG;
    public static final int TETHERING_BLUETOOTH;
    public static final int TETHERING_INVALID;
    public static final int TETHERING_USB;
    public static final int TETHERING_WIFI;
    public static final int TETHERING_WIFI_P2P;
    public static final int TETHER_ERROR_DHCPSERVER_ERROR;
    public static final int TETHER_ERROR_DISABLE_NAT_ERROR;
    public static final int TETHER_ERROR_ENABLE_NAT_ERROR;
    public static final int TETHER_ERROR_ENTITLEMENT_UNKONWN;
    public static final int TETHER_ERROR_IFACE_CFG_ERROR;
    public static final int TETHER_ERROR_MASTER_ERROR;
    public static final int TETHER_ERROR_NO_ERROR;
    public static final int TETHER_ERROR_PROVISION_FAILED;
    public static final int TETHER_ERROR_SERVICE_UNAVAIL;
    public static final int TETHER_ERROR_TETHER_IFACE_ERROR;
    public static final int TETHER_ERROR_UNAVAIL_IFACE;
    public static final int TETHER_ERROR_UNKNOWN_IFACE;
    public static final int TETHER_ERROR_UNSUPPORTED;
    public static final int TETHER_ERROR_UNTETHER_IFACE_ERROR;
    public static final int TYPE_BLUETOOTH;
    public static final int TYPE_DUMMY;
    public static final int TYPE_ETHERNET;
    public static final int TYPE_MOBILE;
    public static final int TYPE_MOBILE_CBS;
    public static final int TYPE_MOBILE_DUN;
    public static final int TYPE_MOBILE_EMERGENCY;
    public static final int TYPE_MOBILE_FOTA;
    public static final int TYPE_MOBILE_HIPRI;
    public static final int TYPE_MOBILE_IA;
    public static final int TYPE_MOBILE_IMS;
    public static final int TYPE_MOBILE_MMS;
    public static final int TYPE_MOBILE_SUPL;
    public static final int TYPE_NONE;
    public static final int TYPE_PROXY;
    public static final int TYPE_TEST;
    public static final int TYPE_VPN;
    public static final int TYPE_WIFI;
    public static final int TYPE_WIFI_P2P;
    public static final int TYPE_WIMAX;
    private static android.net.ConnectivityManager$CallbackHandler sCallbackHandler;
    private static final java.util.HashMap sCallbacks;
    private static android.net.ConnectivityManager sInstance;
    private static final java.util.HashMap sLegacyRequests;
    private static final android.util.SparseIntArray sLegacyTypeToCapability;
    private static final android.util.SparseIntArray sLegacyTypeToTransport;
    private final android.content.Context mContext;
    private android.os.INetworkManagementService mNMService;
    private android.net.INetworkPolicyManager mNPManager;
    private final android.util.ArrayMap mNetworkActivityListeners;
    private final android.net.IConnectivityManager mService;
    private final android.util.ArrayMap mTetheringEventCallbacks;
    private final android.net.TetheringManager mTetheringManager;

    static void <clinit>()
    {
        boolean $z0;
        android.net.NetworkRequest$Builder $r0, $r1;
        android.net.NetworkRequest $r2;
        java.util.HashMap $r3, $r23;
        android.util.SparseIntArray $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22;

        <android.net.ConnectivityManager: int TYPE_WIMAX> = 6;

        <android.net.ConnectivityManager: int TYPE_WIFI_P2P> = 13;

        <android.net.ConnectivityManager: int TYPE_WIFI> = 1;

        <android.net.ConnectivityManager: int TYPE_VPN> = 17;

        <android.net.ConnectivityManager: int TYPE_TEST> = 18;

        <android.net.ConnectivityManager: int TYPE_PROXY> = 16;

        <android.net.ConnectivityManager: int TYPE_NONE> = -1;

        <android.net.ConnectivityManager: int TYPE_MOBILE_SUPL> = 3;

        <android.net.ConnectivityManager: int TYPE_MOBILE_MMS> = 2;

        <android.net.ConnectivityManager: int TYPE_MOBILE_IMS> = 11;

        <android.net.ConnectivityManager: int TYPE_MOBILE_IA> = 14;

        <android.net.ConnectivityManager: int TYPE_MOBILE_HIPRI> = 5;

        <android.net.ConnectivityManager: int TYPE_MOBILE_FOTA> = 10;

        <android.net.ConnectivityManager: int TYPE_MOBILE_EMERGENCY> = 15;

        <android.net.ConnectivityManager: int TYPE_MOBILE_DUN> = 4;

        <android.net.ConnectivityManager: int TYPE_MOBILE_CBS> = 12;

        <android.net.ConnectivityManager: int TYPE_MOBILE> = 0;

        <android.net.ConnectivityManager: int TYPE_ETHERNET> = 9;

        <android.net.ConnectivityManager: int TYPE_DUMMY> = 8;

        <android.net.ConnectivityManager: int TYPE_BLUETOOTH> = 7;

        <android.net.ConnectivityManager: int TETHER_ERROR_UNTETHER_IFACE_ERROR> = 7;

        <android.net.ConnectivityManager: int TETHER_ERROR_UNSUPPORTED> = 3;

        <android.net.ConnectivityManager: int TETHER_ERROR_UNKNOWN_IFACE> = 1;

        <android.net.ConnectivityManager: int TETHER_ERROR_UNAVAIL_IFACE> = 4;

        <android.net.ConnectivityManager: int TETHER_ERROR_TETHER_IFACE_ERROR> = 6;

        <android.net.ConnectivityManager: int TETHER_ERROR_SERVICE_UNAVAIL> = 2;

        <android.net.ConnectivityManager: int TETHER_ERROR_PROVISION_FAILED> = 11;

        <android.net.ConnectivityManager: int TETHER_ERROR_NO_ERROR> = 0;

        <android.net.ConnectivityManager: int TETHER_ERROR_MASTER_ERROR> = 5;

        <android.net.ConnectivityManager: int TETHER_ERROR_IFACE_CFG_ERROR> = 10;

        <android.net.ConnectivityManager: int TETHER_ERROR_ENTITLEMENT_UNKONWN> = 13;

        <android.net.ConnectivityManager: int TETHER_ERROR_ENABLE_NAT_ERROR> = 8;

        <android.net.ConnectivityManager: int TETHER_ERROR_DISABLE_NAT_ERROR> = 9;

        <android.net.ConnectivityManager: int TETHER_ERROR_DHCPSERVER_ERROR> = 12;

        <android.net.ConnectivityManager: int TETHERING_WIFI_P2P> = 3;

        <android.net.ConnectivityManager: int TETHERING_WIFI> = 0;

        <android.net.ConnectivityManager: int TETHERING_USB> = 1;

        <android.net.ConnectivityManager: int TETHERING_INVALID> = -1;

        <android.net.ConnectivityManager: int TETHERING_BLUETOOTH> = 2;

        <android.net.ConnectivityManager: java.lang.String TAG> = "ConnectivityManager";

        <android.net.ConnectivityManager: int RESTRICT_BACKGROUND_STATUS_WHITELISTED> = 2;

        <android.net.ConnectivityManager: int RESTRICT_BACKGROUND_STATUS_ENABLED> = 3;

        <android.net.ConnectivityManager: int RESTRICT_BACKGROUND_STATUS_DISABLED> = 1;

        <android.net.ConnectivityManager: int REQUEST_ID_UNSET> = 0;

        <android.net.ConnectivityManager: int REQUEST> = 2;

        <android.net.ConnectivityManager: java.lang.String PRIVATE_DNS_MODE_PROVIDER_HOSTNAME> = "hostname";

        <android.net.ConnectivityManager: java.lang.String PRIVATE_DNS_MODE_OPPORTUNISTIC> = "opportunistic";

        <android.net.ConnectivityManager: java.lang.String PRIVATE_DNS_MODE_OFF> = "off";

        <android.net.ConnectivityManager: java.lang.String PRIVATE_DNS_DEFAULT_MODE_FALLBACK> = "opportunistic";

        <android.net.ConnectivityManager: int NETID_UNSET> = 0;

        <android.net.ConnectivityManager: int MULTIPATH_PREFERENCE_UNMETERED> = 7;

        <android.net.ConnectivityManager: int MULTIPATH_PREFERENCE_RELIABILITY> = 2;

        <android.net.ConnectivityManager: int MULTIPATH_PREFERENCE_PERFORMANCE> = 4;

        <android.net.ConnectivityManager: int MULTIPATH_PREFERENCE_HANDOVER> = 1;

        <android.net.ConnectivityManager: int MIN_NETWORK_TYPE> = 0;

        <android.net.ConnectivityManager: int MAX_RADIO_TYPE> = 18;

        <android.net.ConnectivityManager: int MAX_NETWORK_TYPE> = 18;

        <android.net.ConnectivityManager: int LISTEN> = 1;

        <android.net.ConnectivityManager: java.lang.String INET_CONDITION_ACTION> = "android.net.conn.INET_CONDITION_ACTION";

        <android.net.ConnectivityManager: java.lang.String EXTRA_SET_ALARM> = "extraSetAlarm";

        <android.net.ConnectivityManager: java.lang.String EXTRA_RUN_PROVISION> = "extraRunProvision";

        <android.net.ConnectivityManager: java.lang.String EXTRA_REM_TETHER_TYPE> = "extraRemTetherType";

        <android.net.ConnectivityManager: java.lang.String EXTRA_REASON> = "reason";

        <android.net.ConnectivityManager: java.lang.String EXTRA_REALTIME_NS> = "tsNanos";

        <android.net.ConnectivityManager: java.lang.String EXTRA_PROVISION_CALLBACK> = "extraProvisionCallback";

        <android.net.ConnectivityManager: java.lang.String EXTRA_OTHER_NETWORK_INFO> = "otherNetwork";

        <android.net.ConnectivityManager: java.lang.String EXTRA_NO_CONNECTIVITY> = "noConnectivity";

        <android.net.ConnectivityManager: java.lang.String EXTRA_NETWORK_TYPE> = "networkType";

        <android.net.ConnectivityManager: java.lang.String EXTRA_NETWORK_REQUEST> = "android.net.extra.NETWORK_REQUEST";

        <android.net.ConnectivityManager: java.lang.String EXTRA_NETWORK_INFO> = "networkInfo";

        <android.net.ConnectivityManager: java.lang.String EXTRA_NETWORK> = "android.net.extra.NETWORK";

        <android.net.ConnectivityManager: java.lang.String EXTRA_IS_FAILOVER> = "isFailover";

        <android.net.ConnectivityManager: java.lang.String EXTRA_IS_CAPTIVE_PORTAL> = "captivePortal";

        <android.net.ConnectivityManager: java.lang.String EXTRA_IS_ACTIVE> = "isActive";

        <android.net.ConnectivityManager: java.lang.String EXTRA_INET_CONDITION> = "inetCondition";

        <android.net.ConnectivityManager: java.lang.String EXTRA_EXTRA_INFO> = "extraInfo";

        <android.net.ConnectivityManager: java.lang.String EXTRA_ERRORED_TETHER> = "erroredArray";

        <android.net.ConnectivityManager: java.lang.String EXTRA_DEVICE_TYPE> = "deviceType";

        <android.net.ConnectivityManager: java.lang.String EXTRA_CAPTIVE_PORTAL_USER_AGENT> = "android.net.extra.CAPTIVE_PORTAL_USER_AGENT";

        <android.net.ConnectivityManager: java.lang.String EXTRA_CAPTIVE_PORTAL_URL> = "android.net.extra.CAPTIVE_PORTAL_URL";

        <android.net.ConnectivityManager: java.lang.String EXTRA_CAPTIVE_PORTAL_PROBE_SPEC> = "android.net.extra.CAPTIVE_PORTAL_PROBE_SPEC";

        <android.net.ConnectivityManager: java.lang.String EXTRA_CAPTIVE_PORTAL> = "android.net.extra.CAPTIVE_PORTAL";

        <android.net.ConnectivityManager: java.lang.String EXTRA_AVAILABLE_TETHER> = "availableArray";

        <android.net.ConnectivityManager: java.lang.String EXTRA_ADD_TETHER_TYPE> = "extraAddTetherType";

        <android.net.ConnectivityManager: java.lang.String EXTRA_ACTIVE_TETHER> = "tetherArray";

        <android.net.ConnectivityManager: java.lang.String EXTRA_ACTIVE_LOCAL_ONLY> = "android.net.extra.ACTIVE_LOCAL_ONLY";

        <android.net.ConnectivityManager: int EXPIRE_LEGACY_REQUEST> = 524296;

        <android.net.ConnectivityManager: int DEPRECATED_PHONE_CONSTANT_APN_REQUEST_STARTED> = 1;

        <android.net.ConnectivityManager: int DEPRECATED_PHONE_CONSTANT_APN_REQUEST_FAILED> = 3;

        <android.net.ConnectivityManager: int DEPRECATED_PHONE_CONSTANT_APN_ALREADY_ACTIVE> = 0;

        <android.net.ConnectivityManager: int DEFAULT_NETWORK_PREFERENCE> = 1;

        <android.net.ConnectivityManager: java.lang.String CONNECTIVITY_ACTION> = "android.net.conn.CONNECTIVITY_CHANGE";

        <android.net.ConnectivityManager: int CALLBACK_UNAVAIL> = 524293;

        <android.net.ConnectivityManager: int CALLBACK_SUSPENDED> = 524297;

        <android.net.ConnectivityManager: int CALLBACK_RESUMED> = 524298;

        <android.net.ConnectivityManager: int CALLBACK_PRECHECK> = 524289;

        <android.net.ConnectivityManager: int CALLBACK_LOST> = 524292;

        <android.net.ConnectivityManager: int CALLBACK_LOSING> = 524291;

        <android.net.ConnectivityManager: int CALLBACK_IP_CHANGED> = 524295;

        <android.net.ConnectivityManager: int CALLBACK_CAP_CHANGED> = 524294;

        <android.net.ConnectivityManager: int CALLBACK_BLK_CHANGED> = 524299;

        <android.net.ConnectivityManager: int CALLBACK_AVAILABLE> = 524290;

        <android.net.ConnectivityManager: int BASE> = 524288;

        <android.net.ConnectivityManager: java.lang.String ACTION_TETHER_STATE_CHANGED> = "android.net.conn.TETHER_STATE_CHANGED";

        <android.net.ConnectivityManager: java.lang.String ACTION_RESTRICT_BACKGROUND_CHANGED> = "android.net.conn.RESTRICT_BACKGROUND_CHANGED";

        <android.net.ConnectivityManager: java.lang.String ACTION_PROMPT_UNVALIDATED> = "android.net.conn.PROMPT_UNVALIDATED";

        <android.net.ConnectivityManager: java.lang.String ACTION_PROMPT_PARTIAL_CONNECTIVITY> = "android.net.conn.PROMPT_PARTIAL_CONNECTIVITY";

        <android.net.ConnectivityManager: java.lang.String ACTION_PROMPT_LOST_VALIDATION> = "android.net.conn.PROMPT_LOST_VALIDATION";

        <android.net.ConnectivityManager: java.lang.String ACTION_DATA_ACTIVITY_CHANGE> = "android.net.conn.DATA_ACTIVITY_CHANGE";

        <android.net.ConnectivityManager: java.lang.String ACTION_CAPTIVE_PORTAL_TEST_COMPLETED> = "android.net.conn.CAPTIVE_PORTAL_TEST_COMPLETED";

        <android.net.ConnectivityManager: java.lang.String ACTION_CAPTIVE_PORTAL_SIGN_IN> = "android.net.conn.CAPTIVE_PORTAL";

        <android.net.ConnectivityManager: java.lang.String ACTION_BACKGROUND_DATA_SETTING_CHANGED> = "android.net.conn.BACKGROUND_DATA_SETTING_CHANGED";

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("ConnectivityManager", 3);

        <android.net.ConnectivityManager: boolean DEBUG> = $z0;

        $r0 = new android.net.NetworkRequest$Builder;

        specialinvoke $r0.<android.net.NetworkRequest$Builder: void <init>()>();

        $r1 = virtualinvoke $r0.<android.net.NetworkRequest$Builder: android.net.NetworkRequest$Builder clearCapabilities()>();

        $r2 = virtualinvoke $r1.<android.net.NetworkRequest$Builder: android.net.NetworkRequest build()>();

        <android.net.ConnectivityManager: android.net.NetworkRequest ALREADY_UNREGISTERED> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        <android.net.ConnectivityManager: java.util.HashMap sLegacyRequests> = $r3;

        $r4 = new android.util.SparseIntArray;

        specialinvoke $r4.<android.util.SparseIntArray: void <init>()>();

        <android.net.ConnectivityManager: android.util.SparseIntArray sLegacyTypeToTransport> = $r4;

        virtualinvoke $r4.<android.util.SparseIntArray: void put(int,int)>(0, 0);

        $r5 = <android.net.ConnectivityManager: android.util.SparseIntArray sLegacyTypeToTransport>;

        virtualinvoke $r5.<android.util.SparseIntArray: void put(int,int)>(12, 0);

        $r6 = <android.net.ConnectivityManager: android.util.SparseIntArray sLegacyTypeToTransport>;

        virtualinvoke $r6.<android.util.SparseIntArray: void put(int,int)>(4, 0);

        $r7 = <android.net.ConnectivityManager: android.util.SparseIntArray sLegacyTypeToTransport>;

        virtualinvoke $r7.<android.util.SparseIntArray: void put(int,int)>(10, 0);

        $r8 = <android.net.ConnectivityManager: android.util.SparseIntArray sLegacyTypeToTransport>;

        virtualinvoke $r8.<android.util.SparseIntArray: void put(int,int)>(5, 0);

        $r9 = <android.net.ConnectivityManager: android.util.SparseIntArray sLegacyTypeToTransport>;

        virtualinvoke $r9.<android.util.SparseIntArray: void put(int,int)>(11, 0);

        $r10 = <android.net.ConnectivityManager: android.util.SparseIntArray sLegacyTypeToTransport>;

        virtualinvoke $r10.<android.util.SparseIntArray: void put(int,int)>(2, 0);

        $r11 = <android.net.ConnectivityManager: android.util.SparseIntArray sLegacyTypeToTransport>;

        virtualinvoke $r11.<android.util.SparseIntArray: void put(int,int)>(3, 0);

        $r12 = <android.net.ConnectivityManager: android.util.SparseIntArray sLegacyTypeToTransport>;

        virtualinvoke $r12.<android.util.SparseIntArray: void put(int,int)>(1, 1);

        $r13 = <android.net.ConnectivityManager: android.util.SparseIntArray sLegacyTypeToTransport>;

        virtualinvoke $r13.<android.util.SparseIntArray: void put(int,int)>(13, 1);

        $r14 = <android.net.ConnectivityManager: android.util.SparseIntArray sLegacyTypeToTransport>;

        virtualinvoke $r14.<android.util.SparseIntArray: void put(int,int)>(7, 2);

        $r15 = <android.net.ConnectivityManager: android.util.SparseIntArray sLegacyTypeToTransport>;

        virtualinvoke $r15.<android.util.SparseIntArray: void put(int,int)>(9, 3);

        $r16 = new android.util.SparseIntArray;

        specialinvoke $r16.<android.util.SparseIntArray: void <init>()>();

        <android.net.ConnectivityManager: android.util.SparseIntArray sLegacyTypeToCapability> = $r16;

        virtualinvoke $r16.<android.util.SparseIntArray: void put(int,int)>(12, 5);

        $r17 = <android.net.ConnectivityManager: android.util.SparseIntArray sLegacyTypeToCapability>;

        virtualinvoke $r17.<android.util.SparseIntArray: void put(int,int)>(4, 2);

        $r18 = <android.net.ConnectivityManager: android.util.SparseIntArray sLegacyTypeToCapability>;

        virtualinvoke $r18.<android.util.SparseIntArray: void put(int,int)>(10, 3);

        $r19 = <android.net.ConnectivityManager: android.util.SparseIntArray sLegacyTypeToCapability>;

        virtualinvoke $r19.<android.util.SparseIntArray: void put(int,int)>(11, 4);

        $r20 = <android.net.ConnectivityManager: android.util.SparseIntArray sLegacyTypeToCapability>;

        virtualinvoke $r20.<android.util.SparseIntArray: void put(int,int)>(2, 0);

        $r21 = <android.net.ConnectivityManager: android.util.SparseIntArray sLegacyTypeToCapability>;

        virtualinvoke $r21.<android.util.SparseIntArray: void put(int,int)>(3, 1);

        $r22 = <android.net.ConnectivityManager: android.util.SparseIntArray sLegacyTypeToCapability>;

        virtualinvoke $r22.<android.util.SparseIntArray: void put(int,int)>(13, 6);

        $r23 = new java.util.HashMap;

        specialinvoke $r23.<java.util.HashMap: void <init>()>();

        <android.net.ConnectivityManager: java.util.HashMap sCallbacks> = $r23;

        return;
    }

    public void <init>(android.content.Context, android.net.IConnectivityManager)
    {
        android.net.ConnectivityManager r0;
        android.content.Context r1, $r6, $r9;
        android.net.IConnectivityManager r2, $r8;
        android.util.ArrayMap $r3, $r4;
        java.lang.Object $r5, $r7, $r10;
        android.net.TetheringManager $r11;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.net.IConnectivityManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new android.util.ArrayMap;

        specialinvoke $r3.<android.util.ArrayMap: void <init>()>();

        r0.<android.net.ConnectivityManager: android.util.ArrayMap mNetworkActivityListeners> = $r3;

        $r4 = new android.util.ArrayMap;

        specialinvoke $r4.<android.util.ArrayMap: void <init>()>();

        r0.<android.net.ConnectivityManager: android.util.ArrayMap mTetheringEventCallbacks> = $r4;

        $r5 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "missing context");

        $r6 = (android.content.Context) $r5;

        r0.<android.net.ConnectivityManager: android.content.Context mContext> = $r6;

        $r7 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "missing IConnectivityManager");

        $r8 = (android.net.IConnectivityManager) $r7;

        r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService> = $r8;

        $r9 = r0.<android.net.ConnectivityManager: android.content.Context mContext>;

        $r10 = virtualinvoke $r9.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("tethering");

        $r11 = (android.net.TetheringManager) $r10;

        r0.<android.net.ConnectivityManager: android.net.TetheringManager mTetheringManager> = $r11;

        <android.net.ConnectivityManager: android.net.ConnectivityManager sInstance> = r0;

        return;
    }

    static android.net.NetworkRequest access$1000()
    {
        android.net.NetworkRequest $r0;

        $r0 = <android.net.ConnectivityManager: android.net.NetworkRequest ALREADY_UNREGISTERED>;

        return $r0;
    }

    static android.net.IConnectivityManager access$400(android.net.ConnectivityManager)
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager $r1;

        r0 := @parameter0: android.net.ConnectivityManager;

        $r1 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        return $r1;
    }

    static void access$700(android.net.ConnectivityManager, android.net.NetworkCapabilities, int)
    {
        android.net.ConnectivityManager r0;
        android.net.NetworkCapabilities r1;
        int i0;

        r0 := @parameter0: android.net.ConnectivityManager;

        r1 := @parameter1: android.net.NetworkCapabilities;

        i0 := @parameter2: int;

        specialinvoke r0.<android.net.ConnectivityManager: void expireRequest(android.net.NetworkCapabilities,int)>(r1, i0);

        return;
    }

    static java.util.HashMap access$800()
    {
        java.util.HashMap $r0;

        $r0 = <android.net.ConnectivityManager: java.util.HashMap sCallbacks>;

        return $r0;
    }

    private static void checkCallbackNotNull(android.net.ConnectivityManager$NetworkCallback)
    {
        android.net.ConnectivityManager$NetworkCallback r0;

        r0 := @parameter0: android.net.ConnectivityManager$NetworkCallback;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "null NetworkCallback");

        return;
    }

    private void checkLegacyRoutingApiAccess()
    {
        android.net.ConnectivityManager r0;

        r0 := @this: android.net.ConnectivityManager;

        specialinvoke r0.<android.net.ConnectivityManager: void unsupportedStartingFrom(int)>(23);

        return;
    }

    private static void checkPendingIntentNotNull(android.app.PendingIntent)
    {
        android.app.PendingIntent r0;

        r0 := @parameter0: android.app.PendingIntent;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "PendingIntent cannot be null.");

        return;
    }

    private static void checkTimeout(int)
    {
        int i0;

        i0 := @parameter0: int;

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentPositive(int,java.lang.String)>(i0, "timeoutMs must be strictly positive.");

        return;
    }

    private static java.lang.RuntimeException convertServiceException(android.os.ServiceSpecificException)
    {
        android.os.ServiceSpecificException r0;
        int $i0, $i1;
        android.net.ConnectivityManager$TooManyRequestsException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r6;
        java.lang.RuntimeException $r7;

        r0 := @parameter0: android.os.ServiceSpecificException;

        $i0 = r0.<android.os.ServiceSpecificException: int errorCode>;

        if $i0 == 1 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown service error code ");

        $i1 = r0.<android.os.ServiceSpecificException: int errorCode>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("ConnectivityManager", $r6);

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r0);

        return $r7;

     label1:
        $r2 = new android.net.ConnectivityManager$TooManyRequestsException;

        specialinvoke $r2.<android.net.ConnectivityManager$TooManyRequestsException: void <init>()>();

        return $r2;
    }

    public static final void enforceChangePermission(android.content.Context)
    {
        android.content.Context r0;
        int i0;
        java.lang.String $r1;

        r0 := @parameter0: android.content.Context;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r1 = staticinvoke <android.provider.Settings: java.lang.String getPackageNameForUid(android.content.Context,int)>(r0, i0);

        staticinvoke <android.provider.Settings: boolean checkAndNoteChangeNetworkStateOperation(android.content.Context,int,java.lang.String,boolean)>(r0, i0, $r1, 1);

        return;
    }

    private void expireRequest(android.net.NetworkCapabilities, int)
    {
        android.net.ConnectivityManager r0;
        int i0, i1, $i2;
        java.util.HashMap r1, $r3;
        android.net.ConnectivityManager$LegacyRequest r2;
        java.lang.Object $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r10;
        java.lang.Throwable $r11;
        android.net.NetworkCapabilities r12;

        r0 := @this: android.net.ConnectivityManager;

        r12 := @parameter0: android.net.NetworkCapabilities;

        i0 := @parameter1: int;

        r1 = <android.net.ConnectivityManager: java.util.HashMap sLegacyRequests>;

        entermonitor r1;

     label01:
        $r3 = <android.net.ConnectivityManager: java.util.HashMap sLegacyRequests>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r12);

        r2 = (android.net.ConnectivityManager$LegacyRequest) $r4;

     label02:
        if r2 != null goto label05;

     label03:
        exitmonitor r1;

     label04:
        return;

     label05:
        i1 = r2.<android.net.ConnectivityManager$LegacyRequest: int expireSequenceNumber>;

        $i2 = r2.<android.net.ConnectivityManager$LegacyRequest: int expireSequenceNumber>;

        if $i2 != i0 goto label06;

        specialinvoke r0.<android.net.ConnectivityManager: boolean removeRequestForFeature(android.net.NetworkCapabilities)>(r12);

     label06:
        exitmonitor r1;

     label07:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expireRequest with ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ConnectivityManager", $r10);

        return;

     label08:
        $r11 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private android.net.NetworkRequest findRequestForFeature(android.net.NetworkCapabilities)
    {
        android.net.ConnectivityManager r0;
        java.util.HashMap r1, $r2;
        java.lang.Object $r3;
        java.lang.Throwable $r4;
        android.net.NetworkCapabilities r5;
        android.net.ConnectivityManager$LegacyRequest r6;
        android.net.NetworkRequest r7;

        r0 := @this: android.net.ConnectivityManager;

        r5 := @parameter0: android.net.NetworkCapabilities;

        r1 = <android.net.ConnectivityManager: java.util.HashMap sLegacyRequests>;

        entermonitor r1;

     label1:
        $r2 = <android.net.ConnectivityManager: java.util.HashMap sLegacyRequests>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r5);

        r6 = (android.net.ConnectivityManager$LegacyRequest) $r3;

     label2:
        if r6 == null goto label5;

     label3:
        r7 = r6.<android.net.ConnectivityManager$LegacyRequest: android.net.NetworkRequest networkRequest>;

        exitmonitor r1;

     label4:
        return r7;

     label5:
        exitmonitor r1;

     label6:
        return null;

     label7:
        $r4 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public static android.net.ConnectivityManager 'from'(android.content.Context)
    {
        android.content.Context r0;
        java.lang.Object $r1;
        android.net.ConnectivityManager $r2;

        r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("connectivity");

        $r2 = (android.net.ConnectivityManager) $r1;

        return $r2;
    }

    public static java.lang.String getCallbackName(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 524289: goto label12;
            case 524290: goto label11;
            case 524291: goto label10;
            case 524292: goto label09;
            case 524293: goto label08;
            case 524294: goto label07;
            case 524295: goto label06;
            case 524296: goto label05;
            case 524297: goto label04;
            case 524298: goto label03;
            case 524299: goto label02;
            default: goto label01;
        };

     label01:
        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;

     label02:
        return "CALLBACK_BLK_CHANGED";

     label03:
        return "CALLBACK_RESUMED";

     label04:
        return "CALLBACK_SUSPENDED";

     label05:
        return "EXPIRE_LEGACY_REQUEST";

     label06:
        return "CALLBACK_IP_CHANGED";

     label07:
        return "CALLBACK_CAP_CHANGED";

     label08:
        return "CALLBACK_UNAVAIL";

     label09:
        return "CALLBACK_LOST";

     label10:
        return "CALLBACK_LOSING";

     label11:
        return "CALLBACK_AVAILABLE";

     label12:
        return "CALLBACK_PRECHECK";
    }

    private android.net.ConnectivityManager$CallbackHandler getDefaultHandler()
    {
        android.net.ConnectivityManager r0;
        java.util.HashMap r1;
        android.net.ConnectivityManager$CallbackHandler $r2, r5, r6;
        android.os.Looper $r3;
        java.lang.Throwable $r4;

        r0 := @this: android.net.ConnectivityManager;

        r1 = <android.net.ConnectivityManager: java.util.HashMap sCallbacks>;

        entermonitor r1;

     label1:
        $r2 = <android.net.ConnectivityManager: android.net.ConnectivityManager$CallbackHandler sCallbackHandler>;

        if $r2 != null goto label2;

        r5 = new android.net.ConnectivityManager$CallbackHandler;

        $r3 = staticinvoke <android.net.ConnectivityThread: android.os.Looper getInstanceLooper()>();

        specialinvoke r5.<android.net.ConnectivityManager$CallbackHandler: void <init>(android.net.ConnectivityManager,android.os.Looper)>(r0, $r3);

        <android.net.ConnectivityManager: android.net.ConnectivityManager$CallbackHandler sCallbackHandler> = r5;

     label2:
        r6 = <android.net.ConnectivityManager: android.net.ConnectivityManager$CallbackHandler sCallbackHandler>;

        exitmonitor r1;

     label3:
        return r6;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private static android.net.ConnectivityManager getInstance()
    {
        android.net.ConnectivityManager $r0, $r2;
        java.lang.IllegalStateException $r1;

        $r0 = staticinvoke <android.net.ConnectivityManager: android.net.ConnectivityManager getInstanceOrNull()>();

        if $r0 == null goto label1;

        $r2 = staticinvoke <android.net.ConnectivityManager: android.net.ConnectivityManager getInstanceOrNull()>();

        return $r2;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No ConnectivityManager yet constructed");

        throw $r1;
    }

    static android.net.ConnectivityManager getInstanceOrNull()
    {
        android.net.ConnectivityManager $r0;

        $r0 = <android.net.ConnectivityManager: android.net.ConnectivityManager sInstance>;

        return $r0;
    }

    private android.os.INetworkManagementService getNetworkManagementService()
    {
        android.net.ConnectivityManager r0;
        android.os.INetworkManagementService $r1, r4, r5;
        android.os.IBinder $r2;
        java.lang.Throwable $r3;

        r0 := @this: android.net.ConnectivityManager;

        entermonitor r0;

     label1:
        $r1 = r0.<android.net.ConnectivityManager: android.os.INetworkManagementService mNMService>;

        if $r1 == null goto label3;

        r4 = r0.<android.net.ConnectivityManager: android.os.INetworkManagementService mNMService>;

        exitmonitor r0;

     label2:
        return r4;

     label3:
        $r2 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("network_management");

        r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService asInterface(android.os.IBinder)>($r2);

        r0.<android.net.ConnectivityManager: android.os.INetworkManagementService mNMService> = r5;

        exitmonitor r0;

     label4:
        return r5;

     label5:
        $r3 := @caughtexception;

     label6:
        exitmonitor r0;

     label7:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private android.net.INetworkPolicyManager getNetworkPolicyManager()
    {
        android.net.ConnectivityManager r0;
        android.net.INetworkPolicyManager $r1, r4, r5;
        android.os.IBinder $r2;
        java.lang.Throwable $r3;

        r0 := @this: android.net.ConnectivityManager;

        entermonitor r0;

     label1:
        $r1 = r0.<android.net.ConnectivityManager: android.net.INetworkPolicyManager mNPManager>;

        if $r1 == null goto label3;

        r4 = r0.<android.net.ConnectivityManager: android.net.INetworkPolicyManager mNPManager>;

        exitmonitor r0;

     label2:
        return r4;

     label3:
        $r2 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("netpolicy");

        r5 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager asInterface(android.os.IBinder)>($r2);

        r0.<android.net.ConnectivityManager: android.net.INetworkPolicyManager mNPManager> = r5;

        exitmonitor r0;

     label4:
        return r5;

     label5:
        $r3 := @caughtexception;

     label6:
        exitmonitor r0;

     label7:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public static java.lang.String getNetworkTypeName(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case -1: goto label20;
            case 0: goto label19;
            case 1: goto label18;
            case 2: goto label17;
            case 3: goto label16;
            case 4: goto label15;
            case 5: goto label14;
            case 6: goto label13;
            case 7: goto label12;
            case 8: goto label11;
            case 9: goto label10;
            case 10: goto label09;
            case 11: goto label08;
            case 12: goto label07;
            case 13: goto label06;
            case 14: goto label05;
            case 15: goto label04;
            case 16: goto label03;
            case 17: goto label02;
            default: goto label01;
        };

     label01:
        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;

     label02:
        return "VPN";

     label03:
        return "PROXY";

     label04:
        return "MOBILE_EMERGENCY";

     label05:
        return "MOBILE_IA";

     label06:
        return "WIFI_P2P";

     label07:
        return "MOBILE_CBS";

     label08:
        return "MOBILE_IMS";

     label09:
        return "MOBILE_FOTA";

     label10:
        return "ETHERNET";

     label11:
        return "DUMMY";

     label12:
        return "BLUETOOTH";

     label13:
        return "WIMAX";

     label14:
        return "MOBILE_HIPRI";

     label15:
        return "MOBILE_DUN";

     label16:
        return "MOBILE_SUPL";

     label17:
        return "MOBILE_MMS";

     label18:
        return "WIFI";

     label19:
        return "MOBILE";

     label20:
        return "NONE";
    }

    public static android.net.Network getProcessDefaultNetwork()
    {
        int i0;
        android.net.Network $r0;

        i0 = staticinvoke <android.net.NetworkUtils: int getBoundNetworkForProcess()>();

        if i0 != 0 goto label1;

        return null;

     label1:
        $r0 = new android.net.Network;

        specialinvoke $r0.<android.net.Network: void <init>(int)>(i0);

        return $r0;
    }

    public static boolean isNetworkTypeMobile(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 == 0 goto label2;

        if i0 == 2 goto label2;

        if i0 == 3 goto label2;

        if i0 == 4 goto label2;

        if i0 == 5 goto label2;

        if i0 == 14 goto label2;

        if i0 == 15 goto label2;

        tableswitch(i0)
        {
            case 10: goto label2;
            case 11: goto label2;
            case 12: goto label2;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        return 1;
    }

    public static boolean isNetworkTypeValid(int)
    {
        int i0;
        boolean z0;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        if i0 > 18 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static boolean isNetworkTypeWifi(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 == 1 goto label1;

        if i0 == 13 goto label1;

        return 0;

     label1:
        return 1;
    }

    private int legacyTypeForNetworkCapabilities(android.net.NetworkCapabilities)
    {
        android.net.ConnectivityManager r0;
        android.net.NetworkCapabilities r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.net.NetworkCapabilities;

        if r1 != null goto label1;

        return -1;

     label1:
        $z0 = virtualinvoke r1.<android.net.NetworkCapabilities: boolean hasCapability(int)>(5);

        if $z0 == 0 goto label2;

        return 12;

     label2:
        $z1 = virtualinvoke r1.<android.net.NetworkCapabilities: boolean hasCapability(int)>(4);

        if $z1 == 0 goto label3;

        return 11;

     label3:
        $z2 = virtualinvoke r1.<android.net.NetworkCapabilities: boolean hasCapability(int)>(3);

        if $z2 == 0 goto label4;

        return 10;

     label4:
        $z3 = virtualinvoke r1.<android.net.NetworkCapabilities: boolean hasCapability(int)>(2);

        if $z3 == 0 goto label5;

        return 4;

     label5:
        $z4 = virtualinvoke r1.<android.net.NetworkCapabilities: boolean hasCapability(int)>(1);

        if $z4 == 0 goto label6;

        return 3;

     label6:
        $z5 = virtualinvoke r1.<android.net.NetworkCapabilities: boolean hasCapability(int)>(0);

        if $z5 == 0 goto label7;

        return 2;

     label7:
        $z6 = virtualinvoke r1.<android.net.NetworkCapabilities: boolean hasCapability(int)>(12);

        if $z6 == 0 goto label8;

        return 5;

     label8:
        $z7 = virtualinvoke r1.<android.net.NetworkCapabilities: boolean hasCapability(int)>(6);

        if $z7 == 0 goto label9;

        return 13;

     label9:
        return -1;
    }

    private android.net.NetworkCapabilities networkCapabilitiesForFeature(int, java.lang.String)
    {
        android.net.ConnectivityManager r0;
        java.lang.String r1, $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        android.net.NetworkCapabilities $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        int $i1, i2;
        byte b3;

        r0 := @this: android.net.ConnectivityManager;

        i2 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        if i2 != 0 goto label20;

        $i1 = virtualinvoke r1.<java.lang.String: int hashCode()>();

        lookupswitch($i1)
        {
            case -1451370941: goto label09;
            case -631682191: goto label08;
            case -631680646: goto label07;
            case -631676084: goto label06;
            case -631672240: goto label05;
            case 1892790521: goto label04;
            case 1893183457: goto label03;
            case 1998933033: goto label02;
            default: goto label01;
        };

     label01:
        goto label10;

     label02:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("enableDUNAlways");

        if $z1 == 0 goto label01;

        b3 = 2;

        goto label11;

     label03:
        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("enableSUPL");

        if $z2 == 0 goto label01;

        b3 = 7;

        goto label11;

     label04:
        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("enableFOTA");

        if $z3 == 0 goto label01;

        b3 = 3;

        goto label11;

     label05:
        $z4 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("enableMMS");

        if $z4 == 0 goto label01;

        b3 = 6;

        goto label11;

     label06:
        $z5 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("enableIMS");

        if $z5 == 0 goto label01;

        b3 = 5;

        goto label11;

     label07:
        $z6 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("enableDUN");

        if $z6 == 0 goto label01;

        b3 = 1;

        goto label11;

     label08:
        $z7 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("enableCBS");

        if $z7 == 0 goto label01;

        b3 = 0;

        goto label11;

     label09:
        $z8 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("enableHIPRI");

        if $z8 == 0 goto label01;

        b3 = 4;

        goto label11;

     label10:
        b3 = -1;

     label11:
        tableswitch(b3)
        {
            case 0: goto label19;
            case 1: goto label18;
            case 2: goto label18;
            case 3: goto label17;
            case 4: goto label16;
            case 5: goto label15;
            case 6: goto label14;
            case 7: goto label13;
            default: goto label12;
        };

     label12:
        return null;

     label13:
        $r4 = staticinvoke <android.net.ConnectivityManager: android.net.NetworkCapabilities networkCapabilitiesForType(int)>(3);

        return $r4;

     label14:
        $r5 = staticinvoke <android.net.ConnectivityManager: android.net.NetworkCapabilities networkCapabilitiesForType(int)>(2);

        return $r5;

     label15:
        $r6 = staticinvoke <android.net.ConnectivityManager: android.net.NetworkCapabilities networkCapabilitiesForType(int)>(11);

        return $r6;

     label16:
        $r7 = staticinvoke <android.net.ConnectivityManager: android.net.NetworkCapabilities networkCapabilitiesForType(int)>(5);

        return $r7;

     label17:
        $r8 = staticinvoke <android.net.ConnectivityManager: android.net.NetworkCapabilities networkCapabilitiesForType(int)>(10);

        return $r8;

     label18:
        $r9 = staticinvoke <android.net.ConnectivityManager: android.net.NetworkCapabilities networkCapabilitiesForType(int)>(4);

        return $r9;

     label19:
        $r10 = staticinvoke <android.net.ConnectivityManager: android.net.NetworkCapabilities networkCapabilitiesForType(int)>(12);

        return $r10;

     label20:
        if i2 != 1 goto label21;

        $r2 = "p2p";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label21;

        $r3 = staticinvoke <android.net.ConnectivityManager: android.net.NetworkCapabilities networkCapabilitiesForType(int)>(13);

        return $r3;

     label21:
        return null;
    }

    public static android.net.NetworkCapabilities networkCapabilitiesForType(int)
    {
        int i0, i1, $i2;
        android.net.NetworkCapabilities $r2;
        android.util.SparseIntArray $r3, $r9;
        java.lang.StringBuilder $r4;
        java.lang.String $r7;
        boolean z0;

        i0 := @parameter0: int;

        $r2 = new android.net.NetworkCapabilities;

        specialinvoke $r2.<android.net.NetworkCapabilities: void <init>()>();

        $r3 = <android.net.ConnectivityManager: android.util.SparseIntArray sLegacyTypeToTransport>;

        i1 = virtualinvoke $r3.<android.util.SparseIntArray: int get(int,int)>(i0, -1);

        if i1 == -1 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown legacy type: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z0, $r7);

        virtualinvoke $r2.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addTransportType(int)>(i1);

        $r9 = <android.net.ConnectivityManager: android.util.SparseIntArray sLegacyTypeToCapability>;

        $i2 = virtualinvoke $r9.<android.util.SparseIntArray: int get(int,int)>(i0, 12);

        virtualinvoke $r2.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addCapability(int)>($i2);

        virtualinvoke $r2.<android.net.NetworkCapabilities: void maybeMarkCapabilitiesRestricted()>();

        return $r2;
    }

    private void printStackTrace()
    {
        android.net.ConnectivityManager r0;
        java.lang.String r2, $r14, $r15;
        boolean $z0, $z1;
        java.lang.Thread $r3;
        java.lang.StringBuffer $r4;
        int $i0, i2;
        java.lang.StackTraceElement $r7;
        java.lang.StackTraceElement[] r11;
        java.lang.StringBuilder $r12;

        r0 := @this: android.net.ConnectivityManager;

        $z0 = <android.net.ConnectivityManager: boolean DEBUG>;

        if $z0 == 0 goto label4;

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r11 = virtualinvoke $r3.<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>();

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        i2 = 3;

     label1:
        $i0 = lengthof r11;

        if i2 >= $i0 goto label3;

        $r7 = r11[i2];

        r2 = virtualinvoke $r7.<java.lang.StackTraceElement: java.lang.String toString()>();

        if r2 == null goto label3;

        $z1 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("android.os");

        if $z1 == 0 goto label2;

        goto label3;

     label2:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" [");

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        i2 = i2 + 1;

        goto label1;

     label3:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("StackLog:");

        $r14 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ConnectivityManager", $r15);

     label4:
        return;
    }

    private boolean removeRequestForFeature(android.net.NetworkCapabilities)
    {
        android.net.ConnectivityManager r0;
        java.util.HashMap r1, $r2;
        java.lang.Object $r3;
        android.net.ConnectivityManager$NetworkCallback $r4;
        java.lang.Throwable $r5;
        android.net.NetworkCapabilities r6;
        android.net.ConnectivityManager$LegacyRequest r7;

        r0 := @this: android.net.ConnectivityManager;

        r6 := @parameter0: android.net.NetworkCapabilities;

        r1 = <android.net.ConnectivityManager: java.util.HashMap sLegacyRequests>;

        entermonitor r1;

     label1:
        $r2 = <android.net.ConnectivityManager: java.util.HashMap sLegacyRequests>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r6);

        r7 = (android.net.ConnectivityManager$LegacyRequest) $r3;

        exitmonitor r1;

     label2:
        if r7 != null goto label3;

        return 0;

     label3:
        $r4 = r7.<android.net.ConnectivityManager$LegacyRequest: android.net.ConnectivityManager$NetworkCallback networkCallback>;

        virtualinvoke r0.<android.net.ConnectivityManager: void unregisterNetworkCallback(android.net.ConnectivityManager$NetworkCallback)>($r4);

        staticinvoke <android.net.ConnectivityManager$LegacyRequest: void access$000(android.net.ConnectivityManager$LegacyRequest)>(r7);

        return 1;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void renewRequestLocked(android.net.ConnectivityManager$LegacyRequest)
    {
        android.net.ConnectivityManager r0;
        android.net.ConnectivityManager$LegacyRequest r1;
        int $i0, $i1, $i2, $i4, $i5;
        java.lang.StringBuilder $r3;
        java.lang.String $r6;
        android.net.NetworkCapabilities $r7;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.net.ConnectivityManager$LegacyRequest;

        $i0 = r1.<android.net.ConnectivityManager$LegacyRequest: int expireSequenceNumber>;

        $i1 = $i0 + 1;

        r1.<android.net.ConnectivityManager$LegacyRequest: int expireSequenceNumber> = $i1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("renewing request to seqNum ");

        $i2 = r1.<android.net.ConnectivityManager$LegacyRequest: int expireSequenceNumber>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ConnectivityManager", $r6);

        $r7 = r1.<android.net.ConnectivityManager$LegacyRequest: android.net.NetworkCapabilities networkCapabilities>;

        $i5 = r1.<android.net.ConnectivityManager$LegacyRequest: int expireSequenceNumber>;

        $i4 = r1.<android.net.ConnectivityManager$LegacyRequest: int delay>;

        specialinvoke r0.<android.net.ConnectivityManager: void sendExpireMsgForFeature(android.net.NetworkCapabilities,int,int)>($r7, $i5, $i4);

        return;
    }

    private android.net.NetworkRequest requestNetworkForFeatureLocked(android.net.NetworkCapabilities)
    {
        android.net.ConnectivityManager r0;
        int i0, i1, $i2;
        android.net.IConnectivityManager $r2;
        android.net.ConnectivityManager$LegacyRequest $r3;
        android.net.ConnectivityManager$NetworkCallback $r4;
        android.net.ConnectivityManager$CallbackHandler $r5;
        android.net.NetworkRequest $r6, $r7, $r10;
        java.util.HashMap $r8;
        android.os.RemoteException $r11;
        java.lang.RuntimeException $r12;
        android.net.NetworkCapabilities r13;

        r0 := @this: android.net.ConnectivityManager;

        r13 := @parameter0: android.net.NetworkCapabilities;

        i0 = specialinvoke r0.<android.net.ConnectivityManager: int legacyTypeForNetworkCapabilities(android.net.NetworkCapabilities)>(r13);

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        i1 = interfaceinvoke $r2.<android.net.IConnectivityManager: int getRestoreDefaultNetworkDelay(int)>(i0);

     label2:
        $r3 = new android.net.ConnectivityManager$LegacyRequest;

        specialinvoke $r3.<android.net.ConnectivityManager$LegacyRequest: void <init>(android.net.ConnectivityManager$1)>(null);

        $r3.<android.net.ConnectivityManager$LegacyRequest: android.net.NetworkCapabilities networkCapabilities> = r13;

        $r3.<android.net.ConnectivityManager$LegacyRequest: int delay> = i1;

        $r3.<android.net.ConnectivityManager$LegacyRequest: int expireSequenceNumber> = 0;

        $r4 = $r3.<android.net.ConnectivityManager$LegacyRequest: android.net.ConnectivityManager$NetworkCallback networkCallback>;

        $r5 = specialinvoke r0.<android.net.ConnectivityManager: android.net.ConnectivityManager$CallbackHandler getDefaultHandler()>();

        $r6 = specialinvoke r0.<android.net.ConnectivityManager: android.net.NetworkRequest sendRequestForNetwork(android.net.NetworkCapabilities,android.net.ConnectivityManager$NetworkCallback,int,int,int,android.net.ConnectivityManager$CallbackHandler)>(r13, $r4, 0, 2, i0, $r5);

        $r3.<android.net.ConnectivityManager$LegacyRequest: android.net.NetworkRequest networkRequest> = $r6;

        $r7 = $r3.<android.net.ConnectivityManager$LegacyRequest: android.net.NetworkRequest networkRequest>;

        if $r7 != null goto label3;

        return null;

     label3:
        $r8 = <android.net.ConnectivityManager: java.util.HashMap sLegacyRequests>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r13, $r3);

        $i2 = $r3.<android.net.ConnectivityManager$LegacyRequest: int expireSequenceNumber>;

        specialinvoke r0.<android.net.ConnectivityManager: void sendExpireMsgForFeature(android.net.NetworkCapabilities,int,int)>(r13, $i2, i1);

        $r10 = $r3.<android.net.ConnectivityManager$LegacyRequest: android.net.NetworkRequest networkRequest>;

        return $r10;

     label4:
        $r11 := @caughtexception;

        $r12 = virtualinvoke $r11.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r12;

        catch android.os.RemoteException from label1 to label2 with label4;
    }

    private void sendExpireMsgForFeature(android.net.NetworkCapabilities, int, int)
    {
        android.net.ConnectivityManager r0;
        android.net.NetworkCapabilities r1;
        int i0, i1;
        java.lang.StringBuilder $r2;
        java.lang.String $r7;
        android.os.Message $r8;
        long $l3;
        android.net.ConnectivityManager$CallbackHandler r10;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.net.NetworkCapabilities;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i1 < 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sending expire msg with seqNum ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and delay ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ConnectivityManager", $r7);

        r10 = specialinvoke r0.<android.net.ConnectivityManager: android.net.ConnectivityManager$CallbackHandler getDefaultHandler()>();

        $r8 = virtualinvoke r10.<android.net.ConnectivityManager$CallbackHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(524296, i0, 0, r1);

        $l3 = (long) i1;

        virtualinvoke r10.<android.net.ConnectivityManager$CallbackHandler: boolean sendMessageDelayed(android.os.Message,long)>($r8, $l3);

     label1:
        return;
    }

    private android.net.NetworkRequest sendRequestForNetwork(android.net.NetworkCapabilities, android.net.ConnectivityManager$NetworkCallback, int, int, int, android.net.ConnectivityManager$CallbackHandler)
    {
        android.net.ConnectivityManager r0;
        android.net.ConnectivityManager$NetworkCallback r1;
        int i0, i1, i2;
        java.lang.String r2;
        java.util.HashMap r3, $r7;
        android.os.Messenger r4;
        android.net.IConnectivityManager $r5, $r9;
        android.net.NetworkRequest $r10, $r11, $r23, r25;
        android.os.ServiceSpecificException $r12, $r18, r27;
        java.lang.RuntimeException $r13, $r16;
        java.lang.Throwable $r14, $r17, r26;
        android.os.RemoteException $r15, $r19, r28;
        android.net.NetworkCapabilities r20;
        android.net.ConnectivityManager$CallbackHandler r21;
        boolean z0;
        android.content.Context $r22;
        android.os.Binder r24;

        r0 := @this: android.net.ConnectivityManager;

        r20 := @parameter0: android.net.NetworkCapabilities;

        r1 := @parameter1: android.net.ConnectivityManager$NetworkCallback;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r21 := @parameter5: android.net.ConnectivityManager$CallbackHandler;

        specialinvoke r0.<android.net.ConnectivityManager: void printStackTrace()>();

        staticinvoke <android.net.ConnectivityManager: void checkCallbackNotNull(android.net.ConnectivityManager$NetworkCallback)>(r1);

        if i1 == 2 goto label02;

        if r20 == null goto label01;

        goto label02;

     label01:
        z0 = 0;

        goto label03;

     label02:
        z0 = 1;

     label03:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z0, "null NetworkCapabilities");

        $r22 = r0.<android.net.ConnectivityManager: android.content.Context mContext>;

        r2 = virtualinvoke $r22.<android.content.Context: java.lang.String getOpPackageName()>();

     label04:
        r3 = <android.net.ConnectivityManager: java.util.HashMap sCallbacks>;

        entermonitor r3;

     label05:
        $r23 = staticinvoke <android.net.ConnectivityManager$NetworkCallback: android.net.NetworkRequest access$900(android.net.ConnectivityManager$NetworkCallback)>(r1);

        if $r23 == null goto label06;

        $r10 = staticinvoke <android.net.ConnectivityManager$NetworkCallback: android.net.NetworkRequest access$900(android.net.ConnectivityManager$NetworkCallback)>(r1);

        $r11 = <android.net.ConnectivityManager: android.net.NetworkRequest ALREADY_UNREGISTERED>;

        if $r10 == $r11 goto label06;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ConnectivityManager", "NetworkCallback was already registered");

     label06:
        r4 = new android.os.Messenger;

     label07:
        specialinvoke r4.<android.os.Messenger: void <init>(android.os.Handler)>(r21);

        r24 = new android.os.Binder;

        specialinvoke r24.<android.os.Binder: void <init>()>();

     label08:
        if i1 != 1 goto label11;

     label09:
        $r9 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r25 = interfaceinvoke $r9.<android.net.IConnectivityManager: android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities,android.os.Messenger,android.os.IBinder,java.lang.String)>(r20, r4, r24, r2);

     label10:
        goto label12;

     label11:
        $r5 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r25 = interfaceinvoke $r5.<android.net.IConnectivityManager: android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities,android.os.Messenger,int,android.os.IBinder,int,java.lang.String)>(r20, r4, i0, r24, i2, r2);

     label12:
        if r25 == null goto label14;

     label13:
        $r7 = <android.net.ConnectivityManager: java.util.HashMap sCallbacks>;

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r25, r1);

     label14:
        staticinvoke <android.net.ConnectivityManager$NetworkCallback: android.net.NetworkRequest access$902(android.net.ConnectivityManager$NetworkCallback,android.net.NetworkRequest)>(r1, r25);

     label15:
        exitmonitor r3;

     label16:
        return r25;

     label17:
        $r17 := @caughtexception;

        r26 = $r17;

     label18:
        exitmonitor r3;

     label19:
        throw r26;

     label20:
        $r12 := @caughtexception;

        r27 = $r12;

        goto label24;

     label21:
        $r15 := @caughtexception;

        r28 = $r15;

        goto label26;

     label22:
        $r14 := @caughtexception;

        r26 = $r14;

        goto label18;

     label23:
        $r18 := @caughtexception;

        r27 = $r18;

     label24:
        $r13 = staticinvoke <android.net.ConnectivityManager: java.lang.RuntimeException convertServiceException(android.os.ServiceSpecificException)>(r27);

        throw $r13;

     label25:
        $r19 := @caughtexception;

        r28 = $r19;

     label26:
        $r16 = virtualinvoke r28.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r16;

        catch android.os.RemoteException from label04 to label05 with label25;
        catch android.os.ServiceSpecificException from label04 to label05 with label23;
        catch java.lang.Throwable from label05 to label06 with label17;
        catch java.lang.Throwable from label06 to label07 with label17;
        catch java.lang.Throwable from label07 to label08 with label22;
        catch java.lang.Throwable from label09 to label10 with label22;
        catch java.lang.Throwable from label11 to label12 with label22;
        catch java.lang.Throwable from label13 to label14 with label22;
        catch java.lang.Throwable from label14 to label15 with label22;
        catch java.lang.Throwable from label15 to label16 with label22;
        catch java.lang.Throwable from label18 to label19 with label22;
        catch android.os.RemoteException from label19 to label20 with label21;
        catch android.os.ServiceSpecificException from label19 to label20 with label20;
    }

    public static boolean setProcessDefaultNetwork(android.net.Network)
    {
        int $i0, i2, i3;
        boolean $z0, z1;
        android.net.ConnectivityManager $r0;
        android.net.ProxyInfo $r1;
        libcore.net.event.NetworkEventDispatcher $r2;
        java.lang.Throwable $r3;
        android.net.Network r4;

        r4 := @parameter0: android.net.Network;

        if r4 != null goto label01;

        i2 = 0;

        goto label02;

     label01:
        i2 = r4.<android.net.Network: int netId>;

     label02:
        $i0 = staticinvoke <android.net.NetworkUtils: int getBoundNetworkForProcess()>();

        if i2 != $i0 goto label03;

        z1 = 1;

        goto label04;

     label03:
        z1 = 0;

     label04:
        i3 = i2;

        if i2 == 0 goto label05;

        i3 = virtualinvoke r4.<android.net.Network: int getNetIdForResolv()>();

     label05:
        $z0 = staticinvoke <android.net.NetworkUtils: boolean bindProcessToNetwork(int)>(i3);

        if $z0 != 0 goto label06;

        return 0;

     label06:
        if z1 != 0 goto label11;

     label07:
        $r0 = staticinvoke <android.net.ConnectivityManager: android.net.ConnectivityManager getInstance()>();

        $r1 = virtualinvoke $r0.<android.net.ConnectivityManager: android.net.ProxyInfo getDefaultProxy()>();

        staticinvoke <android.net.Proxy: void setHttpProxySystemProperty(android.net.ProxyInfo)>($r1);

     label08:
        goto label10;

     label09:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ConnectivityManager", "Can\'t set proxy properties", $r3);

     label10:
        staticinvoke <java.net.InetAddress: void clearDnsCache()>();

        $r2 = staticinvoke <libcore.net.event.NetworkEventDispatcher: libcore.net.event.NetworkEventDispatcher getInstance()>();

        virtualinvoke $r2.<libcore.net.event.NetworkEventDispatcher: void onNetworkConfigurationChanged()>();

     label11:
        return 1;

        catch java.lang.SecurityException from label07 to label08 with label09;
    }

    public static boolean setProcessDefaultNetworkForHostResolution(android.net.Network)
    {
        android.net.Network r0;
        boolean $z0;
        int i0;

        r0 := @parameter0: android.net.Network;

        if r0 != null goto label1;

        i0 = 0;

        goto label2;

     label1:
        i0 = virtualinvoke r0.<android.net.Network: int getNetIdForResolv()>();

     label2:
        $z0 = staticinvoke <android.net.NetworkUtils: boolean bindProcessToNetworkForHostResolution(int)>(i0);

        return $z0;
    }

    private void unsupportedStartingFrom(int)
    {
        android.net.ConnectivityManager r0;
        int i0, $i1, $i2;
        android.content.Context $r2;
        android.content.pm.ApplicationInfo $r3;
        java.lang.StringBuilder $r4;
        java.lang.UnsupportedOperationException $r8;
        java.lang.String $r9;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

        $i1 = staticinvoke <android.os.Process: int myUid()>();

        if $i1 != 1000 goto label1;

        return;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i2 = $r3.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i2 >= i0 goto label2;

        return;

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("This method is not supported in target SDK version ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and above");

        $r8 = new java.lang.UnsupportedOperationException;

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r9);

        throw $r8;
    }

    public void addDefaultNetworkActiveListener(android.net.ConnectivityManager$OnNetworkActiveListener)
    {
        android.net.ConnectivityManager r0;
        android.net.ConnectivityManager$1 $r2;
        android.os.INetworkManagementService $r3;
        android.util.ArrayMap $r4;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;
        android.net.ConnectivityManager$OnNetworkActiveListener r8;

        r0 := @this: android.net.ConnectivityManager;

        r8 := @parameter0: android.net.ConnectivityManager$OnNetworkActiveListener;

        $r2 = new android.net.ConnectivityManager$1;

        specialinvoke $r2.<android.net.ConnectivityManager$1: void <init>(android.net.ConnectivityManager,android.net.ConnectivityManager$OnNetworkActiveListener)>(r0, r8);

     label1:
        $r3 = specialinvoke r0.<android.net.ConnectivityManager: android.os.INetworkManagementService getNetworkManagementService()>();

        interfaceinvoke $r3.<android.os.INetworkManagementService: void registerNetworkActivityListener(android.os.INetworkActivityListener)>($r2);

        $r4 = r0.<android.net.ConnectivityManager: android.util.ArrayMap mNetworkActivityListeners>;

        virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, $r2);

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean bindProcessToNetwork(android.net.Network)
    {
        android.net.ConnectivityManager r0;
        android.net.Network r1;
        boolean $z0;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.net.Network;

        $z0 = staticinvoke <android.net.ConnectivityManager: boolean setProcessDefaultNetwork(android.net.Network)>(r1);

        return $z0;
    }

    public int checkMobileProvisioning(int)
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        int i0, i1;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        i1 = interfaceinvoke $r2.<android.net.IConnectivityManager: int checkMobileProvisioning(int)>(i0);

     label2:
        return i1;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.SocketKeepalive createNattKeepalive(android.net.Network, android.os.ParcelFileDescriptor, java.net.InetAddress, java.net.InetAddress, java.util.concurrent.Executor, android.net.SocketKeepalive$Callback)
    {
        android.net.ConnectivityManager r0;
        android.net.Network r1;
        java.net.InetAddress r2, r3;
        java.util.concurrent.Executor r4;
        android.net.SocketKeepalive$Callback r5;
        android.net.NattSocketKeepalive $r6;
        android.net.IConnectivityManager $r7;
        java.lang.Throwable $r8;
        android.os.ParcelFileDescriptor $r9, r11, r12;
        java.io.FileDescriptor $r10;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.net.Network;

        r11 := @parameter1: android.os.ParcelFileDescriptor;

        r2 := @parameter2: java.net.InetAddress;

        r3 := @parameter3: java.net.InetAddress;

        r4 := @parameter4: java.util.concurrent.Executor;

        r5 := @parameter5: android.net.SocketKeepalive$Callback;

     label1:
        r12 = virtualinvoke r11.<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup()>();

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r9 = new android.os.ParcelFileDescriptor;

        $r10 = new java.io.FileDescriptor;

        specialinvoke $r10.<java.io.FileDescriptor: void <init>()>();

        specialinvoke $r9.<android.os.ParcelFileDescriptor: void <init>(java.io.FileDescriptor)>($r10);

        r12 = $r9;

     label4:
        $r6 = new android.net.NattSocketKeepalive;

        $r7 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        specialinvoke $r6.<android.net.NattSocketKeepalive: void <init>(android.net.IConnectivityManager,android.net.Network,android.os.ParcelFileDescriptor,int,java.net.InetAddress,java.net.InetAddress,java.util.concurrent.Executor,android.net.SocketKeepalive$Callback)>($r7, r1, r12, -1, r2, r3, r4, r5);

        return $r6;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public android.net.SocketKeepalive createSocketKeepalive(android.net.Network, android.net.IpSecManager$UdpEncapsulationSocket, java.net.InetAddress, java.net.InetAddress, java.util.concurrent.Executor, android.net.SocketKeepalive$Callback)
    {
        android.net.ConnectivityManager r0;
        android.net.Network r1;
        android.net.IpSecManager$UdpEncapsulationSocket r2;
        java.net.InetAddress r3, r4;
        java.util.concurrent.Executor r5;
        android.net.SocketKeepalive$Callback r6;
        java.io.FileDescriptor $r7, $r12;
        android.net.NattSocketKeepalive $r8;
        android.net.IConnectivityManager $r9;
        int $i0;
        java.lang.Throwable $r10;
        android.os.ParcelFileDescriptor $r11, r13;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.net.Network;

        r2 := @parameter1: android.net.IpSecManager$UdpEncapsulationSocket;

        r3 := @parameter2: java.net.InetAddress;

        r4 := @parameter3: java.net.InetAddress;

        r5 := @parameter4: java.util.concurrent.Executor;

        r6 := @parameter5: android.net.SocketKeepalive$Callback;

     label1:
        $r7 = virtualinvoke r2.<android.net.IpSecManager$UdpEncapsulationSocket: java.io.FileDescriptor getFileDescriptor()>();

        r13 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup(java.io.FileDescriptor)>($r7);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        $r11 = new android.os.ParcelFileDescriptor;

        $r12 = new java.io.FileDescriptor;

        specialinvoke $r12.<java.io.FileDescriptor: void <init>()>();

        specialinvoke $r11.<android.os.ParcelFileDescriptor: void <init>(java.io.FileDescriptor)>($r12);

        r13 = $r11;

     label4:
        $r8 = new android.net.NattSocketKeepalive;

        $r9 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $i0 = virtualinvoke r2.<android.net.IpSecManager$UdpEncapsulationSocket: int getResourceId()>();

        specialinvoke $r8.<android.net.NattSocketKeepalive: void <init>(android.net.IConnectivityManager,android.net.Network,android.os.ParcelFileDescriptor,int,java.net.InetAddress,java.net.InetAddress,java.util.concurrent.Executor,android.net.SocketKeepalive$Callback)>($r9, r1, r13, $i0, r3, r4, r5, r6);

        return $r8;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public android.net.SocketKeepalive createSocketKeepalive(android.net.Network, java.net.Socket, java.util.concurrent.Executor, android.net.SocketKeepalive$Callback)
    {
        android.net.ConnectivityManager r0;
        android.net.Network r1;
        java.util.concurrent.Executor r2;
        android.net.SocketKeepalive$Callback r3;
        android.net.TcpSocketKeepalive $r4;
        android.net.IConnectivityManager $r5;
        java.lang.Throwable $r6;
        android.os.ParcelFileDescriptor $r7, r10;
        java.io.FileDescriptor $r8;
        java.net.Socket r9;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.net.Network;

        r9 := @parameter1: java.net.Socket;

        r2 := @parameter2: java.util.concurrent.Executor;

        r3 := @parameter3: android.net.SocketKeepalive$Callback;

     label1:
        r10 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromSocket(java.net.Socket)>(r9);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new android.os.ParcelFileDescriptor;

        $r8 = new java.io.FileDescriptor;

        specialinvoke $r8.<java.io.FileDescriptor: void <init>()>();

        specialinvoke $r7.<android.os.ParcelFileDescriptor: void <init>(java.io.FileDescriptor)>($r8);

        r10 = $r7;

     label4:
        $r4 = new android.net.TcpSocketKeepalive;

        $r5 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        specialinvoke $r4.<android.net.TcpSocketKeepalive: void <init>(android.net.IConnectivityManager,android.net.Network,android.os.ParcelFileDescriptor,java.util.concurrent.Executor,android.net.SocketKeepalive$Callback)>($r5, r1, r10, r2, r3);

        return $r4;

        catch java.io.UncheckedIOException from label1 to label2 with label3;
    }

    public void declareNetworkRequestUnfulfillable(android.net.NetworkRequest)
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.net.NetworkRequest r4;

        r0 := @this: android.net.ConnectivityManager;

        r4 := @parameter0: android.net.NetworkRequest;

     label1:
        $r1 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        interfaceinvoke $r1.<android.net.IConnectivityManager: void declareNetworkRequestUnfulfillable(android.net.NetworkRequest)>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void factoryReset()
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager $r2;
        android.net.TetheringManager $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        interfaceinvoke $r2.<android.net.IConnectivityManager: void factoryReset()>();

        $r3 = r0.<android.net.ConnectivityManager: android.net.TetheringManager mTetheringManager>;

        virtualinvoke $r3.<android.net.TetheringManager: void stopAllTethering()>();

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.LinkProperties getActiveLinkProperties()
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.net.LinkProperties r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r1 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r4 = interfaceinvoke $r1.<android.net.IConnectivityManager: android.net.LinkProperties getActiveLinkProperties()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.Network getActiveNetwork()
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.net.Network r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r1 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r4 = interfaceinvoke $r1.<android.net.IConnectivityManager: android.net.Network getActiveNetwork()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.Network getActiveNetworkForUid(int)
    {
        android.net.ConnectivityManager r0;
        int i0;
        android.net.Network $r1;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<android.net.ConnectivityManager: android.net.Network getActiveNetworkForUid(int,boolean)>(i0, 0);

        return $r1;
    }

    public android.net.Network getActiveNetworkForUid(int, boolean)
    {
        android.net.ConnectivityManager r0;
        int i0;
        boolean z0;
        android.net.IConnectivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.net.Network r4;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

     label1:
        $r1 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r4 = interfaceinvoke $r1.<android.net.IConnectivityManager: android.net.Network getActiveNetworkForUid(int,boolean)>(i0, z0);

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.NetworkInfo getActiveNetworkInfo()
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.net.NetworkInfo r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r1 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r4 = interfaceinvoke $r1.<android.net.IConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.NetworkInfo getActiveNetworkInfoForUid(int)
    {
        android.net.ConnectivityManager r0;
        int i0;
        android.net.NetworkInfo $r1;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfoForUid(int,boolean)>(i0, 0);

        return $r1;
    }

    public android.net.NetworkInfo getActiveNetworkInfoForUid(int, boolean)
    {
        android.net.ConnectivityManager r0;
        int i0;
        boolean z0;
        android.net.IConnectivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.net.NetworkInfo r4;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

     label1:
        $r1 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r4 = interfaceinvoke $r1.<android.net.IConnectivityManager: android.net.NetworkInfo getActiveNetworkInfoForUid(int,boolean)>(i0, z0);

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.net.NetworkQuotaInfo r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r1 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r4 = interfaceinvoke $r1.<android.net.IConnectivityManager: android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.NetworkInfo[] getAllNetworkInfo()
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.net.NetworkInfo[] r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r1 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r4 = interfaceinvoke $r1.<android.net.IConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.Network[] getAllNetworks()
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.net.Network[] r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r1 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r4 = interfaceinvoke $r1.<android.net.IConnectivityManager: android.net.Network[] getAllNetworks()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getAlwaysOnVpnPackageForUser(int)
    {
        android.net.ConnectivityManager r0;
        int i0;
        android.net.IConnectivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r4 = interfaceinvoke $r1.<android.net.IConnectivityManager: java.lang.String getAlwaysOnVpnPackage(int)>(i0);

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean getBackgroundDataSetting()
    {
        android.net.ConnectivityManager r0;

        r0 := @this: android.net.ConnectivityManager;

        return 1;
    }

    public android.net.Network getBoundNetworkForProcess()
    {
        android.net.ConnectivityManager r0;
        android.net.Network $r1;

        r0 := @this: android.net.ConnectivityManager;

        $r1 = staticinvoke <android.net.ConnectivityManager: android.net.Network getProcessDefaultNetwork()>();

        return $r1;
    }

    public java.lang.String getCaptivePortalServerUrl()
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r1 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r4 = interfaceinvoke $r1.<android.net.IConnectivityManager: java.lang.String getCaptivePortalServerUrl()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getConnectionOwnerUid(int, java.net.InetSocketAddress, java.net.InetSocketAddress)
    {
        android.net.ConnectivityManager r0;
        java.net.InetSocketAddress r1, r6;
        android.net.ConnectionInfo $r2;
        android.net.IConnectivityManager $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        int i0, i1;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

        r6 := @parameter1: java.net.InetSocketAddress;

        r1 := @parameter2: java.net.InetSocketAddress;

        $r2 = new android.net.ConnectionInfo;

        specialinvoke $r2.<android.net.ConnectionInfo: void <init>(int,java.net.InetSocketAddress,java.net.InetSocketAddress)>(i0, r6, r1);

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        i1 = interfaceinvoke $r3.<android.net.IConnectivityManager: int getConnectionOwnerUid(android.net.ConnectionInfo)>($r2);

     label2:
        return i1;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.NetworkCapabilities[] getDefaultNetworkCapabilitiesForUser(int)
    {
        android.net.ConnectivityManager r0;
        int i0;
        android.content.Context $r1;
        android.net.IConnectivityManager $r2;
        java.lang.String $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.net.NetworkCapabilities[] r6;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $r1 = r0.<android.net.ConnectivityManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        r6 = interfaceinvoke $r2.<android.net.IConnectivityManager: android.net.NetworkCapabilities[] getDefaultNetworkCapabilitiesForUser(int,java.lang.String)>(i0, $r3);

     label2:
        return r6;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.ProxyInfo getDefaultProxy()
    {
        android.net.ConnectivityManager r0;
        android.net.Network $r1;
        android.net.ProxyInfo $r2;

        r0 := @this: android.net.ConnectivityManager;

        $r1 = virtualinvoke r0.<android.net.ConnectivityManager: android.net.Network getBoundNetworkForProcess()>();

        $r2 = virtualinvoke r0.<android.net.ConnectivityManager: android.net.ProxyInfo getProxyForNetwork(android.net.Network)>($r1);

        return $r2;
    }

    public android.net.NetworkRequest getDefaultRequest()
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.net.NetworkRequest r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r1 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r4 = interfaceinvoke $r1.<android.net.IConnectivityManager: android.net.NetworkRequest getDefaultRequest()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.ProxyInfo getGlobalProxy()
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.net.ProxyInfo r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r1 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r4 = interfaceinvoke $r1.<android.net.IConnectivityManager: android.net.ProxyInfo getGlobalProxy()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getLastTetherError(java.lang.String)
    {
        android.net.ConnectivityManager r0;
        java.lang.String r1;
        int i0, i1;
        android.net.TetheringManager $r2;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.net.ConnectivityManager: android.net.TetheringManager mTetheringManager>;

        i0 = virtualinvoke $r2.<android.net.TetheringManager: int getLastTetherError(java.lang.String)>(r1);

        i1 = i0;

        if i0 != 16 goto label1;

        i1 = 1;

     label1:
        return i1;
    }

    public void getLatestTetheringEntitlementResult(int, boolean, java.util.concurrent.Executor, android.net.ConnectivityManager$OnTetheringEntitlementResultListener)
    {
        android.net.ConnectivityManager r0;
        int i0;
        boolean z0;
        android.net.ConnectivityManager$OnTetheringEntitlementResultListener r1;
        android.net.ConnectivityManager$5 $r3;
        android.net.TetheringManager $r4;
        java.util.concurrent.Executor r5;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r5 := @parameter2: java.util.concurrent.Executor;

        r1 := @parameter3: android.net.ConnectivityManager$OnTetheringEntitlementResultListener;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "TetheringEntitlementResultListener cannot be null.");

        $r3 = new android.net.ConnectivityManager$5;

        specialinvoke $r3.<android.net.ConnectivityManager$5: void <init>(android.net.ConnectivityManager,android.os.Handler,java.util.concurrent.Executor,android.net.ConnectivityManager$OnTetheringEntitlementResultListener)>(r0, null, r5, r1);

        $r4 = r0.<android.net.ConnectivityManager: android.net.TetheringManager mTetheringManager>;

        virtualinvoke $r4.<android.net.TetheringManager: void requestLatestTetheringEntitlementResult(int,android.os.ResultReceiver,boolean)>(i0, $r3, z0);

        return;
    }

    public android.net.LinkProperties getLinkProperties(int)
    {
        android.net.ConnectivityManager r0;
        int i0;
        android.net.IConnectivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.net.LinkProperties r4;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r4 = interfaceinvoke $r1.<android.net.IConnectivityManager: android.net.LinkProperties getLinkPropertiesForType(int)>(i0);

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.LinkProperties getLinkProperties(android.net.Network)
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.net.Network r4;
        android.net.LinkProperties r5;

        r0 := @this: android.net.ConnectivityManager;

        r4 := @parameter0: android.net.Network;

     label1:
        $r1 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r5 = interfaceinvoke $r1.<android.net.IConnectivityManager: android.net.LinkProperties getLinkProperties(android.net.Network)>(r4);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean getMobileDataEnabled()
    {
        android.net.ConnectivityManager r0;
        int i0;
        boolean z0;
        android.content.Context $r2;
        java.lang.Object $r3;
        java.lang.StringBuilder $r4, $r9;
        java.lang.String $r7, $r14;
        android.telephony.TelephonyManager $r8, r15;

        r0 := @this: android.net.ConnectivityManager;

        $r2 = r0.<android.net.ConnectivityManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/telephony/TelephonyManager;");

        r15 = (android.telephony.TelephonyManager) $r3;

        if r15 == null goto label1;

        i0 = staticinvoke <android.telephony.SubscriptionManager: int getDefaultDataSubscriptionId()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getMobileDataEnabled()+ subId=");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ConnectivityManager", $r7);

        $r8 = virtualinvoke r15.<android.telephony.TelephonyManager: android.telephony.TelephonyManager createForSubscriptionId(int)>(i0);

        z0 = virtualinvoke $r8.<android.telephony.TelephonyManager: boolean isDataEnabled()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getMobileDataEnabled()- subId=");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" retVal=");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r14 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ConnectivityManager", $r14);

        return z0;

     label1:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ConnectivityManager", "getMobileDataEnabled()- remote exception retVal=false");

        return 0;
    }

    public java.lang.String getMobileProvisioningUrl()
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r1 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r4 = interfaceinvoke $r1.<android.net.IConnectivityManager: java.lang.String getMobileProvisioningUrl()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getMultipathPreference(android.net.Network)
    {
        android.net.ConnectivityManager r0;
        int i0;
        android.net.IConnectivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.net.Network r4;

        r0 := @this: android.net.ConnectivityManager;

        r4 := @parameter0: android.net.Network;

     label1:
        $r1 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        i0 = interfaceinvoke $r1.<android.net.IConnectivityManager: int getMultipathPreference(android.net.Network)>(r4);

     label2:
        return i0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.NetworkCapabilities getNetworkCapabilities(android.net.Network)
    {
        android.net.ConnectivityManager r0;
        android.content.Context $r1;
        android.net.IConnectivityManager $r2;
        java.lang.String $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.net.Network r6;
        android.net.NetworkCapabilities r7;

        r0 := @this: android.net.ConnectivityManager;

        r6 := @parameter0: android.net.Network;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $r1 = r0.<android.net.ConnectivityManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        r7 = interfaceinvoke $r2.<android.net.IConnectivityManager: android.net.NetworkCapabilities getNetworkCapabilities(android.net.Network,java.lang.String)>(r6, $r3);

     label2:
        return r7;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.Network getNetworkForType(int)
    {
        android.net.ConnectivityManager r0;
        int i0;
        android.net.IConnectivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.net.Network r4;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r4 = interfaceinvoke $r1.<android.net.IConnectivityManager: android.net.Network getNetworkForType(int)>(i0);

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.NetworkInfo getNetworkInfo(int)
    {
        android.net.ConnectivityManager r0;
        int i0;
        android.net.IConnectivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.net.NetworkInfo r4;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r4 = interfaceinvoke $r1.<android.net.IConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>(i0);

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.NetworkInfo getNetworkInfo(android.net.Network)
    {
        android.net.ConnectivityManager r0;
        android.net.Network r1;
        int $i0;
        android.net.NetworkInfo $r2;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.net.Network;

        $i0 = staticinvoke <android.os.Process: int myUid()>();

        $r2 = virtualinvoke r0.<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfoForUid(android.net.Network,int,boolean)>(r1, $i0, 0);

        return $r2;
    }

    public android.net.NetworkInfo getNetworkInfoForUid(android.net.Network, int, boolean)
    {
        android.net.ConnectivityManager r0;
        int i0;
        boolean z0;
        android.net.IConnectivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.net.Network r4;
        android.net.NetworkInfo r5;

        r0 := @this: android.net.ConnectivityManager;

        r4 := @parameter0: android.net.Network;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

     label1:
        $r1 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r5 = interfaceinvoke $r1.<android.net.IConnectivityManager: android.net.NetworkInfo getNetworkInfoForUid(android.net.Network,int,boolean)>(r4, i0, z0);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getNetworkPreference()
    {
        android.net.ConnectivityManager r0;

        r0 := @this: android.net.ConnectivityManager;

        return -1;
    }

    public byte[] getNetworkWatchlistConfigHash()
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        byte[] r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r1 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r4 = interfaceinvoke $r1.<android.net.IConnectivityManager: byte[] getNetworkWatchlistConfigHash()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ConnectivityManager", "Unable to get watchlist config hash");

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.ProxyInfo getProxyForNetwork(android.net.Network)
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.net.Network r4;
        android.net.ProxyInfo r5;

        r0 := @this: android.net.ConnectivityManager;

        r4 := @parameter0: android.net.Network;

     label1:
        $r1 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r5 = interfaceinvoke $r1.<android.net.IConnectivityManager: android.net.ProxyInfo getProxyForNetwork(android.net.Network)>(r4);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getRestrictBackgroundStatus()
    {
        android.net.ConnectivityManager r0;
        int i0;
        android.net.INetworkPolicyManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r2 = specialinvoke r0.<android.net.ConnectivityManager: android.net.INetworkPolicyManager getNetworkPolicyManager()>();

        i0 = interfaceinvoke $r2.<android.net.INetworkPolicyManager: int getRestrictBackgroundByCaller()>();

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String[] getTetherableBluetoothRegexs()
    {
        android.net.ConnectivityManager r0;
        android.net.TetheringManager $r1;
        java.lang.String[] $r2;

        r0 := @this: android.net.ConnectivityManager;

        $r1 = r0.<android.net.ConnectivityManager: android.net.TetheringManager mTetheringManager>;

        $r2 = virtualinvoke $r1.<android.net.TetheringManager: java.lang.String[] getTetherableBluetoothRegexs()>();

        return $r2;
    }

    public java.lang.String[] getTetherableIfaces()
    {
        android.net.ConnectivityManager r0;
        android.net.TetheringManager $r1;
        java.lang.String[] $r2;

        r0 := @this: android.net.ConnectivityManager;

        $r1 = r0.<android.net.ConnectivityManager: android.net.TetheringManager mTetheringManager>;

        $r2 = virtualinvoke $r1.<android.net.TetheringManager: java.lang.String[] getTetherableIfaces()>();

        return $r2;
    }

    public java.lang.String[] getTetherableUsbRegexs()
    {
        android.net.ConnectivityManager r0;
        android.net.TetheringManager $r1;
        java.lang.String[] $r2;

        r0 := @this: android.net.ConnectivityManager;

        $r1 = r0.<android.net.ConnectivityManager: android.net.TetheringManager mTetheringManager>;

        $r2 = virtualinvoke $r1.<android.net.TetheringManager: java.lang.String[] getTetherableUsbRegexs()>();

        return $r2;
    }

    public java.lang.String[] getTetherableWifiRegexs()
    {
        android.net.ConnectivityManager r0;
        android.net.TetheringManager $r1;
        java.lang.String[] $r2;

        r0 := @this: android.net.ConnectivityManager;

        $r1 = r0.<android.net.ConnectivityManager: android.net.TetheringManager mTetheringManager>;

        $r2 = virtualinvoke $r1.<android.net.TetheringManager: java.lang.String[] getTetherableWifiRegexs()>();

        return $r2;
    }

    public java.lang.String[] getTetheredDhcpRanges()
    {
        android.net.ConnectivityManager r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.net.ConnectivityManager;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("getTetheredDhcpRanges is not supported");

        throw $r1;
    }

    public java.lang.String[] getTetheredIfaces()
    {
        android.net.ConnectivityManager r0;
        android.net.TetheringManager $r1;
        java.lang.String[] $r2;

        r0 := @this: android.net.ConnectivityManager;

        $r1 = r0.<android.net.ConnectivityManager: android.net.TetheringManager mTetheringManager>;

        $r2 = virtualinvoke $r1.<android.net.TetheringManager: java.lang.String[] getTetheredIfaces()>();

        return $r2;
    }

    public java.lang.String[] getTetheringErroredIfaces()
    {
        android.net.ConnectivityManager r0;
        android.net.TetheringManager $r1;
        java.lang.String[] $r2;

        r0 := @this: android.net.ConnectivityManager;

        $r1 = r0.<android.net.ConnectivityManager: android.net.TetheringManager mTetheringManager>;

        $r2 = virtualinvoke $r1.<android.net.TetheringManager: java.lang.String[] getTetheringErroredIfaces()>();

        return $r2;
    }

    public java.util.List getVpnLockdownWhitelist(int)
    {
        android.net.ConnectivityManager r0;
        int i0;
        android.net.IConnectivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.util.List r4;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r4 = interfaceinvoke $r1.<android.net.IConnectivityManager: java.util.List getVpnLockdownWhitelist(int)>(i0);

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isActiveNetworkMetered()
    {
        android.net.ConnectivityManager r0;
        boolean z0;
        android.net.IConnectivityManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        z0 = interfaceinvoke $r2.<android.net.IConnectivityManager: boolean isActiveNetworkMetered()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isAlwaysOnVpnPackageSupportedForUser(int, java.lang.String)
    {
        android.net.ConnectivityManager r0;
        int i0;
        boolean z0;
        android.net.IConnectivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

        r4 := @parameter1: java.lang.String;

     label1:
        $r1 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        z0 = interfaceinvoke $r1.<android.net.IConnectivityManager: boolean isAlwaysOnVpnPackageSupported(int,java.lang.String)>(i0, r4);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isDefaultNetworkActive()
    {
        android.net.ConnectivityManager r0;
        boolean z0;
        android.os.INetworkManagementService $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r2 = specialinvoke r0.<android.net.ConnectivityManager: android.os.INetworkManagementService getNetworkManagementService()>();

        z0 = interfaceinvoke $r2.<android.os.INetworkManagementService: boolean isNetworkActive()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isNetworkSupported(int)
    {
        android.net.ConnectivityManager r0;
        int i0;
        boolean z0;
        android.net.IConnectivityManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        z0 = interfaceinvoke $r2.<android.net.IConnectivityManager: boolean isNetworkSupported(int)>(i0);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isTetheringSupported()
    {
        android.net.ConnectivityManager r0;
        android.net.TetheringManager $r1;
        boolean $z0;

        r0 := @this: android.net.ConnectivityManager;

        $r1 = r0.<android.net.ConnectivityManager: android.net.TetheringManager mTetheringManager>;

        $z0 = virtualinvoke $r1.<android.net.TetheringManager: boolean isTetheringSupported()>();

        return $z0;
    }

    public boolean isVpnLockdownEnabled(int)
    {
        android.net.ConnectivityManager r0;
        int i0;
        boolean z0;
        android.net.IConnectivityManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        z0 = interfaceinvoke $r2.<android.net.IConnectivityManager: boolean isVpnLockdownEnabled(int)>(i0);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void registerDefaultNetworkCallback(android.net.ConnectivityManager$NetworkCallback)
    {
        android.net.ConnectivityManager r0;
        android.net.ConnectivityManager$NetworkCallback r1;
        android.net.ConnectivityManager$CallbackHandler $r2;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.net.ConnectivityManager$NetworkCallback;

        $r2 = specialinvoke r0.<android.net.ConnectivityManager: android.net.ConnectivityManager$CallbackHandler getDefaultHandler()>();

        virtualinvoke r0.<android.net.ConnectivityManager: void registerDefaultNetworkCallback(android.net.ConnectivityManager$NetworkCallback,android.os.Handler)>(r1, $r2);

        return;
    }

    public void registerDefaultNetworkCallback(android.net.ConnectivityManager$NetworkCallback, android.os.Handler)
    {
        android.net.ConnectivityManager r0;
        android.net.ConnectivityManager$NetworkCallback r1;
        android.os.Handler r2;
        android.net.ConnectivityManager$CallbackHandler $r3;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.net.ConnectivityManager$NetworkCallback;

        r2 := @parameter1: android.os.Handler;

        $r3 = new android.net.ConnectivityManager$CallbackHandler;

        specialinvoke $r3.<android.net.ConnectivityManager$CallbackHandler: void <init>(android.net.ConnectivityManager,android.os.Handler)>(r0, r2);

        specialinvoke r0.<android.net.ConnectivityManager: android.net.NetworkRequest sendRequestForNetwork(android.net.NetworkCapabilities,android.net.ConnectivityManager$NetworkCallback,int,int,int,android.net.ConnectivityManager$CallbackHandler)>(null, r1, 0, 2, -1, $r3);

        return;
    }

    public android.net.Network registerNetworkAgent(android.os.Messenger, android.net.NetworkInfo, android.net.LinkProperties, android.net.NetworkCapabilities, int, android.net.NetworkAgentConfig)
    {
        android.net.ConnectivityManager r0;
        android.os.Messenger r1;
        android.net.NetworkInfo r2;
        android.net.LinkProperties r3;
        android.net.NetworkCapabilities r4;
        int i0;
        android.net.NetworkAgentConfig r5;
        android.net.Network $r6;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.os.Messenger;

        r2 := @parameter1: android.net.NetworkInfo;

        r3 := @parameter2: android.net.LinkProperties;

        r4 := @parameter3: android.net.NetworkCapabilities;

        i0 := @parameter4: int;

        r5 := @parameter5: android.net.NetworkAgentConfig;

        $r6 = virtualinvoke r0.<android.net.ConnectivityManager: android.net.Network registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig,int)>(r1, r2, r3, r4, i0, r5, -1);

        return $r6;
    }

    public android.net.Network registerNetworkAgent(android.os.Messenger, android.net.NetworkInfo, android.net.LinkProperties, android.net.NetworkCapabilities, int, android.net.NetworkAgentConfig, int)
    {
        android.net.ConnectivityManager r0;
        android.net.NetworkInfo r1;
        android.net.LinkProperties r2;
        android.net.NetworkCapabilities r3;
        int i0, i1;
        android.net.NetworkAgentConfig r4;
        android.net.IConnectivityManager $r5;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;
        android.os.Messenger r8;
        android.net.Network r9;

        r0 := @this: android.net.ConnectivityManager;

        r8 := @parameter0: android.os.Messenger;

        r1 := @parameter1: android.net.NetworkInfo;

        r2 := @parameter2: android.net.LinkProperties;

        r3 := @parameter3: android.net.NetworkCapabilities;

        i0 := @parameter4: int;

        r4 := @parameter5: android.net.NetworkAgentConfig;

        i1 := @parameter6: int;

     label1:
        $r5 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        r9 = interfaceinvoke $r5.<android.net.IConnectivityManager: android.net.Network registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig,int)>(r8, r1, r2, r3, i0, r4, i1);

     label2:
        return r9;

     label3:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void registerNetworkCallback(android.net.NetworkRequest, android.app.PendingIntent)
    {
        android.net.ConnectivityManager r0;
        android.app.PendingIntent r1;
        android.content.Context $r2;
        android.net.IConnectivityManager $r3;
        android.net.NetworkCapabilities $r4;
        java.lang.String $r5;
        android.os.ServiceSpecificException $r6;
        java.lang.RuntimeException $r7, $r9;
        android.os.RemoteException $r8;
        android.net.NetworkRequest r10;

        r0 := @this: android.net.ConnectivityManager;

        r10 := @parameter0: android.net.NetworkRequest;

        r1 := @parameter1: android.app.PendingIntent;

        specialinvoke r0.<android.net.ConnectivityManager: void printStackTrace()>();

        staticinvoke <android.net.ConnectivityManager: void checkPendingIntentNotNull(android.app.PendingIntent)>(r1);

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $r4 = r10.<android.net.NetworkRequest: android.net.NetworkCapabilities networkCapabilities>;

        $r2 = r0.<android.net.ConnectivityManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r2.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke $r3.<android.net.IConnectivityManager: void pendingListenForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent,java.lang.String)>($r4, r1, $r5);

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        $r7 = staticinvoke <android.net.ConnectivityManager: java.lang.RuntimeException convertServiceException(android.os.ServiceSpecificException)>($r6);

        throw $r7;

     label4:
        $r8 := @caughtexception;

        $r9 = virtualinvoke $r8.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r9;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch android.os.ServiceSpecificException from label1 to label2 with label3;
    }

    public void registerNetworkCallback(android.net.NetworkRequest, android.net.ConnectivityManager$NetworkCallback)
    {
        android.net.ConnectivityManager r0;
        android.net.NetworkRequest r1;
        android.net.ConnectivityManager$NetworkCallback r2;
        android.net.ConnectivityManager$CallbackHandler $r3;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.net.NetworkRequest;

        r2 := @parameter1: android.net.ConnectivityManager$NetworkCallback;

        $r3 = specialinvoke r0.<android.net.ConnectivityManager: android.net.ConnectivityManager$CallbackHandler getDefaultHandler()>();

        virtualinvoke r0.<android.net.ConnectivityManager: void registerNetworkCallback(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback,android.os.Handler)>(r1, r2, $r3);

        return;
    }

    public void registerNetworkCallback(android.net.NetworkRequest, android.net.ConnectivityManager$NetworkCallback, android.os.Handler)
    {
        android.net.ConnectivityManager r0;
        android.net.NetworkRequest r1;
        android.net.ConnectivityManager$NetworkCallback r2;
        android.net.ConnectivityManager$CallbackHandler $r3;
        android.net.NetworkCapabilities $r4;
        android.os.Handler r6;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.net.NetworkRequest;

        r2 := @parameter1: android.net.ConnectivityManager$NetworkCallback;

        r6 := @parameter2: android.os.Handler;

        $r3 = new android.net.ConnectivityManager$CallbackHandler;

        specialinvoke $r3.<android.net.ConnectivityManager$CallbackHandler: void <init>(android.net.ConnectivityManager,android.os.Handler)>(r0, r6);

        $r4 = r1.<android.net.NetworkRequest: android.net.NetworkCapabilities networkCapabilities>;

        specialinvoke r0.<android.net.ConnectivityManager: android.net.NetworkRequest sendRequestForNetwork(android.net.NetworkCapabilities,android.net.ConnectivityManager$NetworkCallback,int,int,int,android.net.ConnectivityManager$CallbackHandler)>($r4, r2, 0, 1, -1, $r3);

        return;
    }

    public int registerNetworkFactory(android.os.Messenger, java.lang.String)
    {
        android.net.ConnectivityManager r0;
        java.lang.String r1;
        int i0;
        android.net.IConnectivityManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.os.Messenger r5;

        r0 := @this: android.net.ConnectivityManager;

        r5 := @parameter0: android.os.Messenger;

        r1 := @parameter1: java.lang.String;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        i0 = interfaceinvoke $r2.<android.net.IConnectivityManager: int registerNetworkFactory(android.os.Messenger,java.lang.String)>(r5, r1);

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int registerNetworkProvider(android.net.NetworkProvider)
    {
        android.net.ConnectivityManager r0;
        int $i0, $i1, $i2;
        java.lang.IllegalStateException $r1;
        android.net.IConnectivityManager $r2;
        android.os.Messenger $r3;
        java.lang.String $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.net.NetworkProvider r7;

        r0 := @this: android.net.ConnectivityManager;

        r7 := @parameter0: android.net.NetworkProvider;

        $i0 = virtualinvoke r7.<android.net.NetworkProvider: int getProviderId()>();

        if $i0 != -1 goto label4;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $r3 = virtualinvoke r7.<android.net.NetworkProvider: android.os.Messenger getMessenger()>();

        $r4 = virtualinvoke r7.<android.net.NetworkProvider: java.lang.String getName()>();

        $i1 = interfaceinvoke $r2.<android.net.IConnectivityManager: int registerNetworkProvider(android.os.Messenger,java.lang.String)>($r3, $r4);

        virtualinvoke r7.<android.net.NetworkProvider: void setProviderId(int)>($i1);

     label2:
        $i2 = virtualinvoke r7.<android.net.NetworkProvider: int getProviderId()>();

        return $i2;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

     label4:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("NetworkProviders can only be registered once");

        throw $r1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void registerTetheringEventCallback(java.util.concurrent.Executor, android.net.ConnectivityManager$OnTetheringEventCallback)
    {
        android.net.ConnectivityManager r0;
        android.net.ConnectivityManager$OnTetheringEventCallback r1;
        android.util.ArrayMap r3, $r6;
        android.net.ConnectivityManager$4 $r5;
        android.net.TetheringManager $r8;
        java.lang.Throwable $r9;
        java.util.concurrent.Executor r10;

        r0 := @this: android.net.ConnectivityManager;

        r10 := @parameter0: java.util.concurrent.Executor;

        r1 := @parameter1: android.net.ConnectivityManager$OnTetheringEventCallback;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "OnTetheringEventCallback cannot be null.");

        $r5 = new android.net.ConnectivityManager$4;

        specialinvoke $r5.<android.net.ConnectivityManager$4: void <init>(android.net.ConnectivityManager,android.net.ConnectivityManager$OnTetheringEventCallback)>(r0, r1);

        r3 = r0.<android.net.ConnectivityManager: android.util.ArrayMap mTetheringEventCallbacks>;

        entermonitor r3;

     label1:
        $r6 = r0.<android.net.ConnectivityManager: android.util.ArrayMap mTetheringEventCallbacks>;

        virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r5);

        $r8 = r0.<android.net.ConnectivityManager: android.net.TetheringManager mTetheringManager>;

        virtualinvoke $r8.<android.net.TetheringManager: void registerTetheringEventCallback(java.util.concurrent.Executor,android.net.TetheringManager$TetheringEventCallback)>(r10, $r5);

        exitmonitor r3;

     label2:
        return;

     label3:
        $r9 := @caughtexception;

     label4:
        exitmonitor r3;

     label5:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void releaseNetworkRequest(android.app.PendingIntent)
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.app.PendingIntent r4;

        r0 := @this: android.net.ConnectivityManager;

        r4 := @parameter0: android.app.PendingIntent;

        specialinvoke r0.<android.net.ConnectivityManager: void printStackTrace()>();

        staticinvoke <android.net.ConnectivityManager: void checkPendingIntentNotNull(android.app.PendingIntent)>(r4);

     label1:
        $r1 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        interfaceinvoke $r1.<android.net.IConnectivityManager: void releasePendingNetworkRequest(android.app.PendingIntent)>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void removeDefaultNetworkActiveListener(android.net.ConnectivityManager$OnNetworkActiveListener)
    {
        android.net.ConnectivityManager r0;
        android.util.ArrayMap $r1;
        java.lang.Object $r2;
        android.os.INetworkManagementService $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.net.ConnectivityManager$OnNetworkActiveListener r6;
        android.os.INetworkActivityListener r7;
        boolean z0;

        r0 := @this: android.net.ConnectivityManager;

        r6 := @parameter0: android.net.ConnectivityManager$OnNetworkActiveListener;

        $r1 = r0.<android.net.ConnectivityManager: android.util.ArrayMap mNetworkActivityListeners>;

        $r2 = virtualinvoke $r1.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r6);

        r7 = (android.os.INetworkActivityListener) $r2;

        if r7 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z0, "Listener was not registered.");

     label3:
        $r3 = specialinvoke r0.<android.net.ConnectivityManager: android.os.INetworkManagementService getNetworkManagementService()>();

        interfaceinvoke $r3.<android.os.INetworkManagementService: void unregisterNetworkActivityListener(android.os.INetworkActivityListener)>(r7);

     label4:
        return;

     label5:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void reportBadNetwork(android.net.Network)
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager $r1, $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.net.Network r5;

        r0 := @this: android.net.ConnectivityManager;

        r5 := @parameter0: android.net.Network;

        specialinvoke r0.<android.net.ConnectivityManager: void printStackTrace()>();

     label1:
        $r1 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        interfaceinvoke $r1.<android.net.IConnectivityManager: void reportNetworkConnectivity(android.net.Network,boolean)>(r5, 1);

        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        interfaceinvoke $r2.<android.net.IConnectivityManager: void reportNetworkConnectivity(android.net.Network,boolean)>(r5, 0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void reportInetCondition(int, int)
    {
        android.net.ConnectivityManager r0;
        int i0, i1;
        android.net.IConnectivityManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<android.net.ConnectivityManager: void printStackTrace()>();

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        interfaceinvoke $r2.<android.net.IConnectivityManager: void reportInetCondition(int,int)>(i0, i1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void reportNetworkConnectivity(android.net.Network, boolean)
    {
        android.net.ConnectivityManager r0;
        boolean z0;
        android.net.IConnectivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.net.Network r4;

        r0 := @this: android.net.ConnectivityManager;

        r4 := @parameter0: android.net.Network;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.net.ConnectivityManager: void printStackTrace()>();

     label1:
        $r1 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        interfaceinvoke $r1.<android.net.IConnectivityManager: void reportNetworkConnectivity(android.net.Network,boolean)>(r4, z0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean requestBandwidthUpdate(android.net.Network)
    {
        android.net.ConnectivityManager r0;
        boolean z0;
        android.net.IConnectivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.net.Network r4;

        r0 := @this: android.net.ConnectivityManager;

        r4 := @parameter0: android.net.Network;

     label1:
        $r1 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        z0 = interfaceinvoke $r1.<android.net.IConnectivityManager: boolean requestBandwidthUpdate(android.net.Network)>(r4);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void requestNetwork(android.net.NetworkRequest, int, int, android.os.Handler, android.net.ConnectivityManager$NetworkCallback)
    {
        android.net.ConnectivityManager r0;
        android.net.NetworkRequest r1;
        int i0, i1;
        android.net.ConnectivityManager$NetworkCallback r2;
        java.lang.IllegalArgumentException $r3;
        android.net.ConnectivityManager$CallbackHandler $r4;
        android.net.NetworkCapabilities $r5;
        android.os.Handler r7;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.net.NetworkRequest;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r7 := @parameter3: android.os.Handler;

        r2 := @parameter4: android.net.ConnectivityManager$NetworkCallback;

        if i1 == -1 goto label1;

        $r4 = new android.net.ConnectivityManager$CallbackHandler;

        specialinvoke $r4.<android.net.ConnectivityManager$CallbackHandler: void <init>(android.net.ConnectivityManager,android.os.Handler)>(r0, r7);

        $r5 = r1.<android.net.NetworkRequest: android.net.NetworkCapabilities networkCapabilities>;

        specialinvoke r0.<android.net.ConnectivityManager: android.net.NetworkRequest sendRequestForNetwork(android.net.NetworkCapabilities,android.net.ConnectivityManager$NetworkCallback,int,int,int,android.net.ConnectivityManager$CallbackHandler)>($r5, r2, i0, 2, i1, $r4);

        return;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("TYPE_NONE is meaningless legacy type");

        throw $r3;
    }

    public void requestNetwork(android.net.NetworkRequest, android.app.PendingIntent)
    {
        android.net.ConnectivityManager r0;
        android.app.PendingIntent r1;
        android.content.Context $r2;
        android.net.IConnectivityManager $r3;
        android.net.NetworkCapabilities $r4;
        java.lang.String $r5;
        android.os.ServiceSpecificException $r7;
        java.lang.RuntimeException $r8, $r10;
        android.os.RemoteException $r9;
        android.net.NetworkRequest r11;

        r0 := @this: android.net.ConnectivityManager;

        r11 := @parameter0: android.net.NetworkRequest;

        r1 := @parameter1: android.app.PendingIntent;

        specialinvoke r0.<android.net.ConnectivityManager: void printStackTrace()>();

        staticinvoke <android.net.ConnectivityManager: void checkPendingIntentNotNull(android.app.PendingIntent)>(r1);

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $r4 = r11.<android.net.NetworkRequest: android.net.NetworkCapabilities networkCapabilities>;

        $r2 = r0.<android.net.ConnectivityManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r2.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke $r3.<android.net.IConnectivityManager: android.net.NetworkRequest pendingRequestForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent,java.lang.String)>($r4, r1, $r5);

     label2:
        return;

     label3:
        $r7 := @caughtexception;

        $r8 = staticinvoke <android.net.ConnectivityManager: java.lang.RuntimeException convertServiceException(android.os.ServiceSpecificException)>($r7);

        throw $r8;

     label4:
        $r9 := @caughtexception;

        $r10 = virtualinvoke $r9.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r10;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch android.os.ServiceSpecificException from label1 to label2 with label3;
    }

    public void requestNetwork(android.net.NetworkRequest, android.net.ConnectivityManager$NetworkCallback)
    {
        android.net.ConnectivityManager r0;
        android.net.NetworkRequest r1;
        android.net.ConnectivityManager$NetworkCallback r2;
        android.net.ConnectivityManager$CallbackHandler $r3;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.net.NetworkRequest;

        r2 := @parameter1: android.net.ConnectivityManager$NetworkCallback;

        $r3 = specialinvoke r0.<android.net.ConnectivityManager: android.net.ConnectivityManager$CallbackHandler getDefaultHandler()>();

        virtualinvoke r0.<android.net.ConnectivityManager: void requestNetwork(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback,android.os.Handler)>(r1, r2, $r3);

        return;
    }

    public void requestNetwork(android.net.NetworkRequest, android.net.ConnectivityManager$NetworkCallback, int)
    {
        android.net.ConnectivityManager r0;
        android.net.ConnectivityManager$NetworkCallback r1;
        int i0;
        android.net.ConnectivityManager$CallbackHandler $r2;
        android.net.NetworkRequest r4;
        android.net.NetworkCapabilities r5;

        r0 := @this: android.net.ConnectivityManager;

        r4 := @parameter0: android.net.NetworkRequest;

        r1 := @parameter1: android.net.ConnectivityManager$NetworkCallback;

        i0 := @parameter2: int;

        staticinvoke <android.net.ConnectivityManager: void checkTimeout(int)>(i0);

        r5 = r4.<android.net.NetworkRequest: android.net.NetworkCapabilities networkCapabilities>;

        $r2 = specialinvoke r0.<android.net.ConnectivityManager: android.net.ConnectivityManager$CallbackHandler getDefaultHandler()>();

        specialinvoke r0.<android.net.ConnectivityManager: android.net.NetworkRequest sendRequestForNetwork(android.net.NetworkCapabilities,android.net.ConnectivityManager$NetworkCallback,int,int,int,android.net.ConnectivityManager$CallbackHandler)>(r5, r1, i0, 2, -1, $r2);

        return;
    }

    public void requestNetwork(android.net.NetworkRequest, android.net.ConnectivityManager$NetworkCallback, android.os.Handler)
    {
        android.net.ConnectivityManager r0;
        android.net.NetworkRequest r1;
        android.net.ConnectivityManager$NetworkCallback r2;
        android.net.ConnectivityManager$CallbackHandler $r3;
        android.net.NetworkCapabilities $r4;
        android.os.Handler r6;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.net.NetworkRequest;

        r2 := @parameter1: android.net.ConnectivityManager$NetworkCallback;

        r6 := @parameter2: android.os.Handler;

        $r3 = new android.net.ConnectivityManager$CallbackHandler;

        specialinvoke $r3.<android.net.ConnectivityManager$CallbackHandler: void <init>(android.net.ConnectivityManager,android.os.Handler)>(r0, r6);

        $r4 = r1.<android.net.NetworkRequest: android.net.NetworkCapabilities networkCapabilities>;

        specialinvoke r0.<android.net.ConnectivityManager: android.net.NetworkRequest sendRequestForNetwork(android.net.NetworkCapabilities,android.net.ConnectivityManager$NetworkCallback,int,int,int,android.net.ConnectivityManager$CallbackHandler)>($r4, r2, 0, 2, -1, $r3);

        return;
    }

    public void requestNetwork(android.net.NetworkRequest, android.net.ConnectivityManager$NetworkCallback, android.os.Handler, int)
    {
        android.net.ConnectivityManager r0;
        android.net.NetworkRequest r1;
        android.net.ConnectivityManager$NetworkCallback r2;
        int i0;
        android.net.ConnectivityManager$CallbackHandler $r3;
        android.net.NetworkCapabilities $r4;
        android.os.Handler r6;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.net.NetworkRequest;

        r2 := @parameter1: android.net.ConnectivityManager$NetworkCallback;

        r6 := @parameter2: android.os.Handler;

        i0 := @parameter3: int;

        staticinvoke <android.net.ConnectivityManager: void checkTimeout(int)>(i0);

        $r3 = new android.net.ConnectivityManager$CallbackHandler;

        specialinvoke $r3.<android.net.ConnectivityManager$CallbackHandler: void <init>(android.net.ConnectivityManager,android.os.Handler)>(r0, r6);

        $r4 = r1.<android.net.NetworkRequest: android.net.NetworkCapabilities networkCapabilities>;

        specialinvoke r0.<android.net.ConnectivityManager: android.net.NetworkRequest sendRequestForNetwork(android.net.NetworkCapabilities,android.net.ConnectivityManager$NetworkCallback,int,int,int,android.net.ConnectivityManager$CallbackHandler)>($r4, r2, i0, 2, -1, $r3);

        return;
    }

    public boolean requestRouteToHost(int, int)
    {
        android.net.ConnectivityManager r0;
        int i0, i1;
        java.net.InetAddress $r1;
        boolean $z0;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = staticinvoke <android.net.NetworkUtils: java.net.InetAddress intToInetAddress(int)>(i1);

        $z0 = virtualinvoke r0.<android.net.ConnectivityManager: boolean requestRouteToHostAddress(int,java.net.InetAddress)>(i0, $r1);

        return $z0;
    }

    public boolean requestRouteToHostAddress(int, java.net.InetAddress)
    {
        android.net.ConnectivityManager r0;
        int i0;
        boolean z0;
        android.net.IConnectivityManager $r1;
        byte[] $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.net.InetAddress r5;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

        r5 := @parameter1: java.net.InetAddress;

        specialinvoke r0.<android.net.ConnectivityManager: void checkLegacyRoutingApiAccess()>();

     label1:
        $r1 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $r2 = virtualinvoke r5.<java.net.InetAddress: byte[] getAddress()>();

        z0 = interfaceinvoke $r1.<android.net.IConnectivityManager: boolean requestRouteToHostAddress(int,byte[])>(i0, $r2);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setAcceptPartialConnectivity(android.net.Network, boolean, boolean)
    {
        android.net.ConnectivityManager r0;
        boolean z0, z1;
        android.net.IConnectivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.net.Network r4;

        r0 := @this: android.net.ConnectivityManager;

        r4 := @parameter0: android.net.Network;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

     label1:
        $r1 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        interfaceinvoke $r1.<android.net.IConnectivityManager: void setAcceptPartialConnectivity(android.net.Network,boolean,boolean)>(r4, z0, z1);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setAcceptUnvalidated(android.net.Network, boolean, boolean)
    {
        android.net.ConnectivityManager r0;
        boolean z0, z1;
        android.net.IConnectivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.net.Network r4;

        r0 := @this: android.net.ConnectivityManager;

        r4 := @parameter0: android.net.Network;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

     label1:
        $r1 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        interfaceinvoke $r1.<android.net.IConnectivityManager: void setAcceptUnvalidated(android.net.Network,boolean,boolean)>(r4, z0, z1);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setAirplaneMode(boolean)
    {
        android.net.ConnectivityManager r0;
        boolean z0;
        android.net.IConnectivityManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.net.ConnectivityManager;

        z0 := @parameter0: boolean;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        interfaceinvoke $r2.<android.net.IConnectivityManager: void setAirplaneMode(boolean)>(z0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean setAlwaysOnVpnPackageForUser(int, java.lang.String, boolean, java.util.List)
    {
        android.net.ConnectivityManager r0;
        int i0;
        java.util.List r1;
        android.net.IConnectivityManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;
        boolean z0, z1;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

        r5 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r1 := @parameter3: java.util.List;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        z1 = interfaceinvoke $r2.<android.net.IConnectivityManager: boolean setAlwaysOnVpnPackage(int,java.lang.String,boolean,java.util.List)>(i0, r5, z0, r1);

     label2:
        return z1;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setAvoidUnvalidated(android.net.Network)
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.net.Network r4;

        r0 := @this: android.net.ConnectivityManager;

        r4 := @parameter0: android.net.Network;

     label1:
        $r1 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        interfaceinvoke $r1.<android.net.IConnectivityManager: void setAvoidUnvalidated(android.net.Network)>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setBackgroundDataSetting(boolean)
    {
        android.net.ConnectivityManager r0;
        boolean z0;

        r0 := @this: android.net.ConnectivityManager;

        z0 := @parameter0: boolean;

        return;
    }

    public void setGlobalProxy(android.net.ProxyInfo)
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.net.ProxyInfo r4;

        r0 := @this: android.net.ConnectivityManager;

        r4 := @parameter0: android.net.ProxyInfo;

     label1:
        $r1 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        interfaceinvoke $r1.<android.net.IConnectivityManager: void setGlobalProxy(android.net.ProxyInfo)>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setNetworkPreference(int)
    {
        android.net.ConnectivityManager r0;
        int i0;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

        return;
    }

    public void setProvisioningNotificationVisible(boolean, int, java.lang.String)
    {
        android.net.ConnectivityManager r0;
        boolean z0;
        int i0;
        android.net.IConnectivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.net.ConnectivityManager;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r4 := @parameter2: java.lang.String;

     label1:
        $r1 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        interfaceinvoke $r1.<android.net.IConnectivityManager: void setProvisioningNotificationVisible(boolean,int,java.lang.String)>(z0, i0, r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int setUsbTethering(boolean)
    {
        android.net.ConnectivityManager r0;
        boolean z0;
        android.net.TetheringManager $r1;
        int $i0;

        r0 := @this: android.net.ConnectivityManager;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.net.ConnectivityManager: android.net.TetheringManager mTetheringManager>;

        $i0 = virtualinvoke $r1.<android.net.TetheringManager: int setUsbTethering(boolean)>(z0);

        return $i0;
    }

    public boolean shouldAvoidBadWifi()
    {
        android.net.ConnectivityManager r0;
        boolean z0;
        android.net.IConnectivityManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        z0 = interfaceinvoke $r2.<android.net.IConnectivityManager: boolean shouldAvoidBadWifi()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void simulateDataStall(int, long, android.net.Network, android.os.PersistableBundle)
    {
        android.net.ConnectivityManager r0;
        int i0;
        long l1;
        android.os.PersistableBundle r1;
        android.net.IConnectivityManager $r2;
        android.os.RemoteException $r3;
        android.net.Network r5;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        r5 := @parameter2: android.net.Network;

        r1 := @parameter3: android.os.PersistableBundle;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        interfaceinvoke $r2.<android.net.IConnectivityManager: void simulateDataStall(int,long,android.net.Network,android.os.PersistableBundle)>(i0, l1, r5, r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void startCaptivePortalApp(android.net.Network)
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.net.Network r4;

        r0 := @this: android.net.ConnectivityManager;

        r4 := @parameter0: android.net.Network;

     label1:
        $r1 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        interfaceinvoke $r1.<android.net.IConnectivityManager: void startCaptivePortalApp(android.net.Network)>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void startCaptivePortalApp(android.net.Network, android.os.Bundle)
    {
        android.net.ConnectivityManager r0;
        android.os.Bundle r1;
        android.net.IConnectivityManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.net.Network r5;

        r0 := @this: android.net.ConnectivityManager;

        r5 := @parameter0: android.net.Network;

        r1 := @parameter1: android.os.Bundle;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        interfaceinvoke $r2.<android.net.IConnectivityManager: void startCaptivePortalAppInternal(android.net.Network,android.os.Bundle)>(r5, r1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.ConnectivityManager$PacketKeepalive startNattKeepalive(android.net.Network, int, android.net.ConnectivityManager$PacketKeepaliveCallback, java.net.InetAddress, int, java.net.InetAddress)
    {
        android.net.ConnectivityManager r0;
        int i0, i1;
        java.net.InetAddress r1, r2;
        android.net.ConnectivityManager$PacketKeepalive $r3;
        android.net.IConnectivityManager $r4;
        android.net.ISocketKeepaliveCallback $r5;
        java.lang.String $r6, $r7;
        android.os.RemoteException $r8;
        java.lang.RuntimeException $r9;
        android.net.Network r10;
        android.net.ConnectivityManager$PacketKeepaliveCallback r11;

        r0 := @this: android.net.ConnectivityManager;

        r10 := @parameter0: android.net.Network;

        i0 := @parameter1: int;

        r11 := @parameter2: android.net.ConnectivityManager$PacketKeepaliveCallback;

        r1 := @parameter3: java.net.InetAddress;

        i1 := @parameter4: int;

        r2 := @parameter5: java.net.InetAddress;

        $r3 = new android.net.ConnectivityManager$PacketKeepalive;

        specialinvoke $r3.<android.net.ConnectivityManager$PacketKeepalive: void <init>(android.net.ConnectivityManager,android.net.Network,android.net.ConnectivityManager$PacketKeepaliveCallback,android.net.ConnectivityManager$1)>(r0, r10, r11, null);

     label1:
        $r4 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $r5 = staticinvoke <android.net.ConnectivityManager$PacketKeepalive: android.net.ISocketKeepaliveCallback access$600(android.net.ConnectivityManager$PacketKeepalive)>($r3);

        $r6 = virtualinvoke r1.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $r7 = virtualinvoke r2.<java.net.InetAddress: java.lang.String getHostAddress()>();

        interfaceinvoke $r4.<android.net.IConnectivityManager: void startNattKeepalive(android.net.Network,int,android.net.ISocketKeepaliveCallback,java.lang.String,int,java.lang.String)>(r10, i0, $r5, $r6, i1, $r7);

     label2:
        return $r3;

     label3:
        $r8 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ConnectivityManager", "Error starting packet keepalive: ", $r8);

        $r9 = virtualinvoke $r8.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r9;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void startTethering(int, boolean, android.net.ConnectivityManager$OnStartTetheringCallback)
    {
        android.net.ConnectivityManager r0;
        int i0;
        boolean z0;
        android.net.ConnectivityManager$OnStartTetheringCallback r1;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 := @parameter2: android.net.ConnectivityManager$OnStartTetheringCallback;

        virtualinvoke r0.<android.net.ConnectivityManager: void startTethering(int,boolean,android.net.ConnectivityManager$OnStartTetheringCallback,android.os.Handler)>(i0, z0, r1, null);

        return;
    }

    public void startTethering(int, boolean, android.net.ConnectivityManager$OnStartTetheringCallback, android.os.Handler)
    {
        android.net.ConnectivityManager r0;
        int i0;
        boolean z0;
        android.net.ConnectivityManager$2 $r3;
        android.net.ConnectivityManager$3 $r4;
        android.net.TetheringManager$TetheringRequest$Builder $r5, $r6;
        android.net.TetheringManager $r7;
        android.net.ConnectivityManager$OnStartTetheringCallback r8;
        android.os.Handler r9;
        android.net.TetheringManager$TetheringRequest r11;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r8 := @parameter2: android.net.ConnectivityManager$OnStartTetheringCallback;

        r9 := @parameter3: android.os.Handler;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r8, "OnStartTetheringCallback cannot be null.");

        $r3 = new android.net.ConnectivityManager$2;

        specialinvoke $r3.<android.net.ConnectivityManager$2: void <init>(android.net.ConnectivityManager,android.os.Handler)>(r0, r9);

        $r4 = new android.net.ConnectivityManager$3;

        specialinvoke $r4.<android.net.ConnectivityManager$3: void <init>(android.net.ConnectivityManager,android.net.ConnectivityManager$OnStartTetheringCallback)>(r0, r8);

        $r5 = new android.net.TetheringManager$TetheringRequest$Builder;

        specialinvoke $r5.<android.net.TetheringManager$TetheringRequest$Builder: void <init>(int)>(i0);

        $r6 = virtualinvoke $r5.<android.net.TetheringManager$TetheringRequest$Builder: android.net.TetheringManager$TetheringRequest$Builder setShouldShowEntitlementUi(boolean)>(z0);

        r11 = virtualinvoke $r6.<android.net.TetheringManager$TetheringRequest$Builder: android.net.TetheringManager$TetheringRequest build()>();

        $r7 = r0.<android.net.ConnectivityManager: android.net.TetheringManager mTetheringManager>;

        virtualinvoke $r7.<android.net.TetheringManager: void startTethering(android.net.TetheringManager$TetheringRequest,java.util.concurrent.Executor,android.net.TetheringManager$StartTetheringCallback)>(r11, $r3, $r4);

        return;
    }

    public int startUsingNetworkFeature(int, java.lang.String)
    {
        android.net.ConnectivityManager r0;
        int i0;
        java.util.HashMap $r1, r22;
        java.lang.Object $r2;
        java.lang.StringBuilder $r3, $r12, r24;
        java.lang.String $r6, $r10, $r17, r19;
        android.net.NetworkRequest $r8, r25;
        android.net.Network $r11;
        java.lang.Throwable $r18;
        android.net.NetworkCapabilities r20;
        android.net.ConnectivityManager$LegacyRequest r23;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

        r19 := @parameter1: java.lang.String;

        specialinvoke r0.<android.net.ConnectivityManager: void checkLegacyRoutingApiAccess()>();

        r20 = specialinvoke r0.<android.net.ConnectivityManager: android.net.NetworkCapabilities networkCapabilitiesForFeature(int,java.lang.String)>(i0, r19);

        if r20 != null goto label01;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t satisfy startUsingNetworkFeature for ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        $r17 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ConnectivityManager", $r17);

        return 3;

     label01:
        r22 = <android.net.ConnectivityManager: java.util.HashMap sLegacyRequests>;

        entermonitor r22;

     label02:
        $r1 = <android.net.ConnectivityManager: java.util.HashMap sLegacyRequests>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r20);

        r23 = (android.net.ConnectivityManager$LegacyRequest) $r2;

     label03:
        if r23 == null goto label08;

     label04:
        r24 = new java.lang.StringBuilder;

        specialinvoke r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("renewing startUsingNetworkFeature request ");

        $r8 = r23.<android.net.ConnectivityManager$LegacyRequest: android.net.NetworkRequest networkRequest>;

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ConnectivityManager", $r10);

        specialinvoke r0.<android.net.ConnectivityManager: void renewRequestLocked(android.net.ConnectivityManager$LegacyRequest)>(r23);

        $r11 = r23.<android.net.ConnectivityManager$LegacyRequest: android.net.Network currentNetwork>;

        if $r11 == null goto label06;

        exitmonitor r22;

     label05:
        return 0;

     label06:
        exitmonitor r22;

     label07:
        return 1;

     label08:
        r25 = specialinvoke r0.<android.net.ConnectivityManager: android.net.NetworkRequest requestNetworkForFeatureLocked(android.net.NetworkCapabilities)>(r20);

        exitmonitor r22;

     label09:
        if r25 == null goto label10;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("starting startUsingNetworkFeature for request ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r25);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ConnectivityManager", $r6);

        return 1;

     label10:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ConnectivityManager", " request Failed");

        return 3;

     label11:
        $r18 := @caughtexception;

     label12:
        exitmonitor r22;

     label13:
        throw $r18;

        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public void stopTethering(int)
    {
        android.net.ConnectivityManager r0;
        int i0;
        android.net.TetheringManager $r1;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

        $r1 = r0.<android.net.ConnectivityManager: android.net.TetheringManager mTetheringManager>;

        virtualinvoke $r1.<android.net.TetheringManager: void stopTethering(int)>(i0);

        return;
    }

    public int stopUsingNetworkFeature(int, java.lang.String)
    {
        android.net.ConnectivityManager r0;
        int i0;
        java.lang.String r1, $r7, $r13;
        boolean $z0;
        java.lang.StringBuilder $r2, $r8;
        android.net.NetworkCapabilities r14;

        r0 := @this: android.net.ConnectivityManager;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.net.ConnectivityManager: void checkLegacyRoutingApiAccess()>();

        r14 = specialinvoke r0.<android.net.ConnectivityManager: android.net.NetworkCapabilities networkCapabilitiesForFeature(int,java.lang.String)>(i0, r1);

        if r14 != null goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t satisfy stopUsingNetworkFeature for ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ConnectivityManager", $r13);

        return -1;

     label1:
        $z0 = specialinvoke r0.<android.net.ConnectivityManager: boolean removeRequestForFeature(android.net.NetworkCapabilities)>(r14);

        if $z0 == 0 goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stopUsingNetworkFeature for ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ConnectivityManager", $r7);

     label2:
        return 1;
    }

    public int tether(java.lang.String)
    {
        android.net.ConnectivityManager r0;
        java.lang.String r1;
        android.net.TetheringManager $r2;
        int $i0;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.net.ConnectivityManager: android.net.TetheringManager mTetheringManager>;

        $i0 = virtualinvoke $r2.<android.net.TetheringManager: int tether(java.lang.String)>(r1);

        return $i0;
    }

    public void unregisterNetworkCallback(android.app.PendingIntent)
    {
        android.net.ConnectivityManager r0;
        android.app.PendingIntent r1;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: android.app.PendingIntent;

        virtualinvoke r0.<android.net.ConnectivityManager: void releaseNetworkRequest(android.app.PendingIntent)>(r1);

        return;
    }

    public void unregisterNetworkCallback(android.net.ConnectivityManager$NetworkCallback)
    {
        android.net.ConnectivityManager r0;
        java.util.HashMap r1, $r7, $r13;
        java.util.Iterator r2, r25;
        java.util.ArrayList $r3;
        android.net.NetworkRequest $r4, $r5, $r6, $r9, $r18, r26;
        java.util.Set $r8;
        boolean $z0, $z1, z3;
        java.lang.Object $r11, $r15, $r16, $r17;
        android.net.IConnectivityManager $r12;
        java.lang.Throwable $r19;
        android.os.RemoteException $r20;
        java.lang.RuntimeException $r21;
        android.net.ConnectivityManager$NetworkCallback r22;
        java.util.Map$Entry r24;

        r0 := @this: android.net.ConnectivityManager;

        r22 := @parameter0: android.net.ConnectivityManager$NetworkCallback;

        specialinvoke r0.<android.net.ConnectivityManager: void printStackTrace()>();

        staticinvoke <android.net.ConnectivityManager: void checkCallbackNotNull(android.net.ConnectivityManager$NetworkCallback)>(r22);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r1 = <android.net.ConnectivityManager: java.util.HashMap sCallbacks>;

        entermonitor r1;

     label01:
        $r4 = staticinvoke <android.net.ConnectivityManager$NetworkCallback: android.net.NetworkRequest access$900(android.net.ConnectivityManager$NetworkCallback)>(r22);

        if $r4 == null goto label03;

     label02:
        z3 = 1;

        goto label04;

     label03:
        z3 = 0;

     label04:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z3, "NetworkCallback was not registered");

        $r5 = staticinvoke <android.net.ConnectivityManager$NetworkCallback: android.net.NetworkRequest access$900(android.net.ConnectivityManager$NetworkCallback)>(r22);

        $r6 = <android.net.ConnectivityManager: android.net.NetworkRequest ALREADY_UNREGISTERED>;

        if $r5 != $r6 goto label06;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("ConnectivityManager", "NetworkCallback was already unregistered");

        exitmonitor r1;

     label05:
        return;

     label06:
        $r7 = <android.net.ConnectivityManager: java.util.HashMap sCallbacks>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r15 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r24 = (java.util.Map$Entry) $r15;

        $r16 = interfaceinvoke r24.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $r16 != r22 goto label08;

        $r17 = interfaceinvoke r24.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r18 = (android.net.NetworkRequest) $r17;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r18);

     label08:
        goto label07;

     label09:
        r25 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z1 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label16;

        $r11 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>();

        r26 = (android.net.NetworkRequest) $r11;

     label11:
        $r12 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        interfaceinvoke $r12.<android.net.IConnectivityManager: void releaseNetworkRequest(android.net.NetworkRequest)>(r26);

     label12:
        $r13 = <android.net.ConnectivityManager: java.util.HashMap sCallbacks>;

        virtualinvoke $r13.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r26);

     label13:
        goto label10;

     label14:
        $r20 := @caughtexception;

     label15:
        $r21 = virtualinvoke $r20.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r21;

     label16:
        $r9 = <android.net.ConnectivityManager: android.net.NetworkRequest ALREADY_UNREGISTERED>;

        staticinvoke <android.net.ConnectivityManager$NetworkCallback: android.net.NetworkRequest access$902(android.net.ConnectivityManager$NetworkCallback,android.net.NetworkRequest)>(r22, $r9);

        exitmonitor r1;

     label17:
        return;

     label18:
        $r19 := @caughtexception;

     label19:
        exitmonitor r1;

     label20:
        throw $r19;

        catch java.lang.Throwable from label01 to label02 with label18;
        catch java.lang.Throwable from label04 to label05 with label18;
        catch java.lang.Throwable from label06 to label07 with label18;
        catch java.lang.Throwable from label07 to label08 with label18;
        catch java.lang.Throwable from label09 to label10 with label18;
        catch java.lang.Throwable from label10 to label11 with label18;
        catch android.os.RemoteException from label11 to label12 with label14;
        catch java.lang.Throwable from label11 to label12 with label18;
        catch java.lang.Throwable from label12 to label13 with label18;
        catch java.lang.Throwable from label15 to label16 with label18;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
    }

    public void unregisterNetworkFactory(android.os.Messenger)
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.os.Messenger r4;

        r0 := @this: android.net.ConnectivityManager;

        r4 := @parameter0: android.os.Messenger;

     label1:
        $r1 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        interfaceinvoke $r1.<android.net.IConnectivityManager: void unregisterNetworkFactory(android.os.Messenger)>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void unregisterNetworkProvider(android.net.NetworkProvider)
    {
        android.net.ConnectivityManager r0;
        android.net.IConnectivityManager $r1;
        android.os.Messenger $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.net.NetworkProvider r5;

        r0 := @this: android.net.ConnectivityManager;

        r5 := @parameter0: android.net.NetworkProvider;

     label1:
        $r1 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        $r2 = virtualinvoke r5.<android.net.NetworkProvider: android.os.Messenger getMessenger()>();

        interfaceinvoke $r1.<android.net.IConnectivityManager: void unregisterNetworkProvider(android.os.Messenger)>($r2);

     label2:
        virtualinvoke r5.<android.net.NetworkProvider: void setProviderId(int)>(-1);

        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void unregisterTetheringEventCallback(android.net.ConnectivityManager$OnTetheringEventCallback)
    {
        android.net.ConnectivityManager r0;
        android.util.ArrayMap r1, $r3;
        java.lang.Object $r4;
        android.net.TetheringManager $r5;
        java.lang.Throwable $r6;
        android.net.ConnectivityManager$OnTetheringEventCallback r7;
        android.net.TetheringManager$TetheringEventCallback r8;

        r0 := @this: android.net.ConnectivityManager;

        r7 := @parameter0: android.net.ConnectivityManager$OnTetheringEventCallback;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r7, "The callback must be non-null");

        r1 = r0.<android.net.ConnectivityManager: android.util.ArrayMap mTetheringEventCallbacks>;

        entermonitor r1;

     label1:
        $r3 = r0.<android.net.ConnectivityManager: android.util.ArrayMap mTetheringEventCallbacks>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r7);

        r8 = (android.net.TetheringManager$TetheringEventCallback) $r4;

        $r5 = r0.<android.net.ConnectivityManager: android.net.TetheringManager mTetheringManager>;

        virtualinvoke $r5.<android.net.TetheringManager: void unregisterTetheringEventCallback(android.net.TetheringManager$TetheringEventCallback)>(r8);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r6 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int untether(java.lang.String)
    {
        android.net.ConnectivityManager r0;
        java.lang.String r1;
        android.net.TetheringManager $r2;
        int $i0;

        r0 := @this: android.net.ConnectivityManager;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.net.ConnectivityManager: android.net.TetheringManager mTetheringManager>;

        $i0 = virtualinvoke $r2.<android.net.TetheringManager: int untether(java.lang.String)>(r1);

        return $i0;
    }

    public boolean updateLockdownVpn()
    {
        android.net.ConnectivityManager r0;
        boolean z0;
        android.net.IConnectivityManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.net.ConnectivityManager;

     label1:
        $r2 = r0.<android.net.ConnectivityManager: android.net.IConnectivityManager mService>;

        z0 = interfaceinvoke $r2.<android.net.IConnectivityManager: boolean updateLockdownVpn()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }
}
