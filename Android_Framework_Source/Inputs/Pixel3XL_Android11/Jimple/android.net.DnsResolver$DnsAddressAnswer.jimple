class android.net.DnsResolver$DnsAddressAnswer extends com.android.net.module.util.DnsPacket
{
    private static final boolean DBG;
    private static final java.lang.String TAG;
    private final int mQueryType;

    void <init>(byte[]) throws com.android.net.module.util.DnsPacket$ParseException
    {
        android.net.DnsResolver$DnsAddressAnswer r0;
        byte[] r1;
        com.android.net.module.util.DnsPacket$DnsHeader $r2, $r4;
        int $i0, $i1, $i2, $i3;
        com.android.net.module.util.DnsPacket$ParseException $r3, $r5;
        java.util.List[] $r6;
        java.util.List $r7;
        java.lang.Object $r8;
        com.android.net.module.util.DnsPacket$DnsRecord $r9;

        r0 := @this: android.net.DnsResolver$DnsAddressAnswer;

        r1 := @parameter0: byte[];

        specialinvoke r0.<com.android.net.module.util.DnsPacket: void <init>(byte[])>(r1);

        $r2 = r0.<android.net.DnsResolver$DnsAddressAnswer: com.android.net.module.util.DnsPacket$DnsHeader mHeader>;

        $i0 = $r2.<com.android.net.module.util.DnsPacket$DnsHeader: int flags>;

        $i1 = $i0 & 32768;

        if $i1 == 0 goto label2;

        $r4 = r0.<android.net.DnsResolver$DnsAddressAnswer: com.android.net.module.util.DnsPacket$DnsHeader mHeader>;

        $i2 = virtualinvoke $r4.<com.android.net.module.util.DnsPacket$DnsHeader: int getRecordCount(int)>(0);

        if $i2 == 0 goto label1;

        $r6 = r0.<android.net.DnsResolver$DnsAddressAnswer: java.util.List[] mRecords>;

        $r7 = $r6[0];

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(0);

        $r9 = (com.android.net.module.util.DnsPacket$DnsRecord) $r8;

        $i3 = $r9.<com.android.net.module.util.DnsPacket$DnsRecord: int nsType>;

        r0.<android.net.DnsResolver$DnsAddressAnswer: int mQueryType> = $i3;

        return;

     label1:
        $r5 = new com.android.net.module.util.DnsPacket$ParseException;

        specialinvoke $r5.<com.android.net.module.util.DnsPacket$ParseException: void <init>(java.lang.String)>("No question found");

        throw $r5;

     label2:
        $r3 = new com.android.net.module.util.DnsPacket$ParseException;

        specialinvoke $r3.<com.android.net.module.util.DnsPacket$ParseException: void <init>(java.lang.String)>("Not an answer packet");

        throw $r3;
    }

    public java.util.List getAddresses()
    {
        android.net.DnsResolver$DnsAddressAnswer r0;
        java.util.Iterator r2;
        int i0, $i1, $i2;
        java.util.ArrayList $r3;
        com.android.net.module.util.DnsPacket$DnsHeader $r4;
        java.util.List[] $r5;
        java.util.List $r6;
        java.lang.Object $r7;
        byte[] $r8;
        java.net.InetAddress $r9;
        java.lang.Throwable $r10;
        boolean $z1;
        com.android.net.module.util.DnsPacket$DnsRecord r11;

        r0 := @this: android.net.DnsResolver$DnsAddressAnswer;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = r0.<android.net.DnsResolver$DnsAddressAnswer: com.android.net.module.util.DnsPacket$DnsHeader mHeader>;

        $i1 = virtualinvoke $r4.<com.android.net.module.util.DnsPacket$DnsHeader: int getRecordCount(int)>(1);

        if $i1 != 0 goto label1;

        return $r3;

     label1:
        $r5 = r0.<android.net.DnsResolver$DnsAddressAnswer: java.util.List[] mRecords>;

        $r6 = $r5[1];

        r2 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r11 = (com.android.net.module.util.DnsPacket$DnsRecord) $r7;

        i0 = r11.<com.android.net.module.util.DnsPacket$DnsRecord: int nsType>;

        $i2 = r0.<android.net.DnsResolver$DnsAddressAnswer: int mQueryType>;

        if i0 != $i2 goto label2;

        if i0 == 1 goto label3;

        if i0 == 28 goto label3;

        goto label2;

     label3:
        $r8 = virtualinvoke r11.<com.android.net.module.util.DnsPacket$DnsRecord: byte[] getRR()>();

        $r9 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>($r8);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r9);

     label4:
        goto label6;

     label5:
        $r10 := @caughtexception;

     label6:
        goto label2;

     label7:
        return $r3;

        catch java.net.UnknownHostException from label3 to label4 with label5;
    }

    public static void <clinit>()
    {
        <android.net.DnsResolver$DnsAddressAnswer: java.lang.String TAG> = "DnsResolver.DnsAddressAnswer";

        <android.net.DnsResolver$DnsAddressAnswer: boolean DBG> = 0;

        return;
    }
}
