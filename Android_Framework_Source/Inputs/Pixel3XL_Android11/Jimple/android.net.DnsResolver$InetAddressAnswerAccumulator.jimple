class android.net.DnsResolver$InetAddressAnswerAccumulator extends java.lang.Object implements android.net.DnsResolver$Callback
{
    private final java.util.List mAllAnswers;
    private android.net.DnsResolver$DnsException mDnsException;
    private final android.net.Network mNetwork;
    private int mRcode;
    private int mReceivedAnswerCount;
    private final int mTargetAnswerCount;
    private final android.net.DnsResolver$Callback mUserCallback;
    final android.net.DnsResolver this$0;

    void <init>(android.net.DnsResolver, android.net.Network, int, android.net.DnsResolver$Callback)
    {
        android.net.DnsResolver$InetAddressAnswerAccumulator r0;
        android.net.DnsResolver r1;
        android.net.Network r2;
        int i0;
        android.net.DnsResolver$Callback r3;
        java.util.ArrayList $r4;

        r0 := @this: android.net.DnsResolver$InetAddressAnswerAccumulator;

        r1 := @parameter0: android.net.DnsResolver;

        r2 := @parameter1: android.net.Network;

        i0 := @parameter2: int;

        r3 := @parameter3: android.net.DnsResolver$Callback;

        r0.<android.net.DnsResolver$InetAddressAnswerAccumulator: android.net.DnsResolver this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.net.DnsResolver$InetAddressAnswerAccumulator: int mReceivedAnswerCount> = 0;

        r0.<android.net.DnsResolver$InetAddressAnswerAccumulator: android.net.Network mNetwork> = r2;

        r0.<android.net.DnsResolver$InetAddressAnswerAccumulator: int mTargetAnswerCount> = i0;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<android.net.DnsResolver$InetAddressAnswerAccumulator: java.util.List mAllAnswers> = $r4;

        r0.<android.net.DnsResolver$InetAddressAnswerAccumulator: android.net.DnsResolver$Callback mUserCallback> = r3;

        return;
    }

    private void maybeReportAnswer()
    {
        android.net.DnsResolver$InetAddressAnswerAccumulator r0;
        int i0, $i1, $i2, $i3;
        java.util.List $r1, $r2, $r5;
        boolean $z0, $z1;
        android.net.Network $r3;
        android.net.DnsResolver$Callback $r4;

        r0 := @this: android.net.DnsResolver$InetAddressAnswerAccumulator;

        $i1 = r0.<android.net.DnsResolver$InetAddressAnswerAccumulator: int mReceivedAnswerCount>;

        i0 = $i1 + 1;

        r0.<android.net.DnsResolver$InetAddressAnswerAccumulator: int mReceivedAnswerCount> = i0;

        $i2 = r0.<android.net.DnsResolver$InetAddressAnswerAccumulator: int mTargetAnswerCount>;

        if i0 == $i2 goto label1;

        return;

     label1:
        $r1 = r0.<android.net.DnsResolver$InetAddressAnswerAccumulator: java.util.List mAllAnswers>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $z1 = specialinvoke r0.<android.net.DnsResolver$InetAddressAnswerAccumulator: boolean maybeReportError()>();

        if $z1 == 0 goto label2;

        return;

     label2:
        $r4 = r0.<android.net.DnsResolver$InetAddressAnswerAccumulator: android.net.DnsResolver$Callback mUserCallback>;

        $r3 = r0.<android.net.DnsResolver$InetAddressAnswerAccumulator: android.net.Network mNetwork>;

        $r2 = r0.<android.net.DnsResolver$InetAddressAnswerAccumulator: java.util.List mAllAnswers>;

        $r5 = staticinvoke <android.net.util.DnsUtils: java.util.List rfc6724Sort(android.net.Network,java.util.List)>($r3, $r2);

        $i3 = r0.<android.net.DnsResolver$InetAddressAnswerAccumulator: int mRcode>;

        interfaceinvoke $r4.<android.net.DnsResolver$Callback: void onAnswer(java.lang.Object,int)>($r5, $i3);

        return;
    }

    private boolean maybeReportError()
    {
        android.net.DnsResolver$InetAddressAnswerAccumulator r0;
        int i0;
        android.net.DnsResolver$DnsException r1;
        android.net.DnsResolver$Callback $r2, $r4;
        java.util.List $r3;

        r0 := @this: android.net.DnsResolver$InetAddressAnswerAccumulator;

        i0 = r0.<android.net.DnsResolver$InetAddressAnswerAccumulator: int mRcode>;

        if i0 == 0 goto label1;

        $r4 = r0.<android.net.DnsResolver$InetAddressAnswerAccumulator: android.net.DnsResolver$Callback mUserCallback>;

        $r3 = r0.<android.net.DnsResolver$InetAddressAnswerAccumulator: java.util.List mAllAnswers>;

        interfaceinvoke $r4.<android.net.DnsResolver$Callback: void onAnswer(java.lang.Object,int)>($r3, i0);

        return 1;

     label1:
        r1 = r0.<android.net.DnsResolver$InetAddressAnswerAccumulator: android.net.DnsResolver$DnsException mDnsException>;

        if r1 == null goto label2;

        $r2 = r0.<android.net.DnsResolver$InetAddressAnswerAccumulator: android.net.DnsResolver$Callback mUserCallback>;

        interfaceinvoke $r2.<android.net.DnsResolver$Callback: void onError(android.net.DnsResolver$DnsException)>(r1);

        return 1;

     label2:
        return 0;
    }

    public volatile void onAnswer(java.lang.Object, int)
    {
        android.net.DnsResolver$InetAddressAnswerAccumulator r0;
        java.lang.Object r1;
        int i0;
        byte[] $r2;

        r0 := @this: android.net.DnsResolver$InetAddressAnswerAccumulator;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $r2 = (byte[]) r1;

        virtualinvoke r0.<android.net.DnsResolver$InetAddressAnswerAccumulator: void onAnswer(byte[],int)>($r2, i0);

        return;
    }

    public void onAnswer(byte[], int)
    {
        android.net.DnsResolver$InetAddressAnswerAccumulator r0;
        int i0, $i1;
        java.util.List r1, $r10;
        com.android.net.module.util.DnsPacket$ParseException $r2;
        android.net.ParseException $r3;
        java.lang.String $r4;
        java.lang.Throwable $r5;
        java.lang.StackTraceElement[] $r6;
        android.net.DnsResolver$DnsException $r7;
        byte[] r8;
        android.net.DnsResolver$DnsAddressAnswer r9;

        r0 := @this: android.net.DnsResolver$InetAddressAnswerAccumulator;

        r8 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i1 = r0.<android.net.DnsResolver$InetAddressAnswerAccumulator: int mReceivedAnswerCount>;

        if $i1 == 0 goto label1;

        if i0 != 0 goto label2;

     label1:
        r0.<android.net.DnsResolver$InetAddressAnswerAccumulator: int mRcode> = i0;

     label2:
        r1 = r0.<android.net.DnsResolver$InetAddressAnswerAccumulator: java.util.List mAllAnswers>;

        r9 = new android.net.DnsResolver$DnsAddressAnswer;

        specialinvoke r9.<android.net.DnsResolver$DnsAddressAnswer: void <init>(byte[])>(r8);

        $r10 = virtualinvoke r9.<android.net.DnsResolver$DnsAddressAnswer: java.util.List getAddresses()>();

        interfaceinvoke r1.<java.util.List: boolean addAll(java.util.Collection)>($r10);

     label3:
        goto label5;

     label4:
        $r2 := @caughtexception;

        $r3 = new android.net.ParseException;

        $r4 = $r2.<com.android.net.module.util.DnsPacket$ParseException: java.lang.String reason>;

        $r5 = virtualinvoke $r2.<com.android.net.module.util.DnsPacket$ParseException: java.lang.Throwable getCause()>();

        specialinvoke $r3.<android.net.ParseException: void <init>(java.lang.String,java.lang.Throwable)>($r4, $r5);

        $r6 = virtualinvoke $r2.<com.android.net.module.util.DnsPacket$ParseException: java.lang.StackTraceElement[] getStackTrace()>();

        virtualinvoke $r3.<android.net.ParseException: void setStackTrace(java.lang.StackTraceElement[])>($r6);

        $r7 = new android.net.DnsResolver$DnsException;

        specialinvoke $r7.<android.net.DnsResolver$DnsException: void <init>(int,java.lang.Throwable)>(0, $r3);

        r0.<android.net.DnsResolver$InetAddressAnswerAccumulator: android.net.DnsResolver$DnsException mDnsException> = $r7;

     label5:
        specialinvoke r0.<android.net.DnsResolver$InetAddressAnswerAccumulator: void maybeReportAnswer()>();

        return;

        catch com.android.net.module.util.DnsPacket$ParseException from label2 to label3 with label4;
    }

    public void onError(android.net.DnsResolver$DnsException)
    {
        android.net.DnsResolver$InetAddressAnswerAccumulator r0;
        android.net.DnsResolver$DnsException r1;

        r0 := @this: android.net.DnsResolver$InetAddressAnswerAccumulator;

        r1 := @parameter0: android.net.DnsResolver$DnsException;

        r0.<android.net.DnsResolver$InetAddressAnswerAccumulator: android.net.DnsResolver$DnsException mDnsException> = r1;

        specialinvoke r0.<android.net.DnsResolver$InetAddressAnswerAccumulator: void maybeReportAnswer()>();

        return;
    }
}
