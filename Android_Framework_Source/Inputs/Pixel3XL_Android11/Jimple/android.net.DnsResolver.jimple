public final class android.net.DnsResolver extends java.lang.Object
{
    public static final int CLASS_IN;
    public static final int ERROR_PARSE;
    public static final int ERROR_SYSTEM;
    private static final int FD_EVENTS;
    public static final int FLAG_EMPTY;
    public static final int FLAG_NO_CACHE_LOOKUP;
    public static final int FLAG_NO_CACHE_STORE;
    public static final int FLAG_NO_RETRY;
    private static final int MAXPACKET;
    private static final int NETID_UNSET;
    private static final int SLEEP_TIME_MS;
    private static final java.lang.String TAG;
    public static final int TYPE_A;
    public static final int TYPE_AAAA;
    private static final android.net.DnsResolver sInstance;

    static void <clinit>()
    {
        android.net.DnsResolver $r0;

        <android.net.DnsResolver: int TYPE_AAAA> = 28;

        <android.net.DnsResolver: int TYPE_A> = 1;

        <android.net.DnsResolver: java.lang.String TAG> = "DnsResolver";

        <android.net.DnsResolver: int SLEEP_TIME_MS> = 2;

        <android.net.DnsResolver: int NETID_UNSET> = 0;

        <android.net.DnsResolver: int MAXPACKET> = 8192;

        <android.net.DnsResolver: int FLAG_NO_RETRY> = 1;

        <android.net.DnsResolver: int FLAG_NO_CACHE_STORE> = 2;

        <android.net.DnsResolver: int FLAG_NO_CACHE_LOOKUP> = 4;

        <android.net.DnsResolver: int FLAG_EMPTY> = 0;

        <android.net.DnsResolver: int FD_EVENTS> = 5;

        <android.net.DnsResolver: int ERROR_SYSTEM> = 1;

        <android.net.DnsResolver: int ERROR_PARSE> = 0;

        <android.net.DnsResolver: int CLASS_IN> = 1;

        $r0 = new android.net.DnsResolver;

        specialinvoke $r0.<android.net.DnsResolver: void <init>()>();

        <android.net.DnsResolver: android.net.DnsResolver sInstance> = $r0;

        return;
    }

    private void <init>()
    {
        android.net.DnsResolver r0;

        r0 := @this: android.net.DnsResolver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private void addCancellationSignal(android.os.CancellationSignal, java.io.FileDescriptor, java.lang.Object)
    {
        android.net.DnsResolver r0;
        android.os.CancellationSignal r1;
        java.io.FileDescriptor r2;
        java.lang.Object r3;
        android.net._$$Lambda$DnsResolver$05nTktlCCI7FQsULCMbgIrjmrGc $r4;

        r0 := @this: android.net.DnsResolver;

        r1 := @parameter0: android.os.CancellationSignal;

        r2 := @parameter1: java.io.FileDescriptor;

        r3 := @parameter2: java.lang.Object;

        $r4 = new android.net._$$Lambda$DnsResolver$05nTktlCCI7FQsULCMbgIrjmrGc;

        specialinvoke $r4.<android.net._$$Lambda$DnsResolver$05nTktlCCI7FQsULCMbgIrjmrGc: void <init>(android.net.DnsResolver,java.lang.Object,java.io.FileDescriptor)>(r0, r3, r2);

        virtualinvoke r1.<android.os.CancellationSignal: void setOnCancelListener(android.os.CancellationSignal$OnCancelListener)>($r4);

        return;
    }

    private void cancelQuery(java.io.FileDescriptor)
    {
        android.net.DnsResolver r0;
        java.io.FileDescriptor r1;
        boolean $z0;
        android.os.Looper $r2;
        android.os.MessageQueue $r3;

        r0 := @this: android.net.DnsResolver;

        r1 := @parameter0: java.io.FileDescriptor;

        $z0 = virtualinvoke r1.<java.io.FileDescriptor: boolean valid()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        $r3 = virtualinvoke $r2.<android.os.Looper: android.os.MessageQueue getQueue()>();

        virtualinvoke $r3.<android.os.MessageQueue: void removeOnFileDescriptorEventListener(java.io.FileDescriptor)>(r1);

        staticinvoke <android.net.NetworkUtils: void resNetworkCancel(java.io.FileDescriptor)>(r1);

        return;
    }

    public static android.net.DnsResolver getInstance()
    {
        android.net.DnsResolver $r0;

        $r0 = <android.net.DnsResolver: android.net.DnsResolver sInstance>;

        return $r0;
    }

    static void lambda$query$2(android.net.DnsResolver$Callback, android.system.ErrnoException)
    {
        android.net.DnsResolver$Callback r0;
        android.system.ErrnoException r1;
        android.net.DnsResolver$DnsException r3;
        java.lang.Throwable r4;

        r0 := @parameter0: android.net.DnsResolver$Callback;

        r1 := @parameter1: android.system.ErrnoException;

        r3 = new android.net.DnsResolver$DnsException;

        r4 = (java.lang.Throwable) r1;

        specialinvoke r3.<android.net.DnsResolver$DnsException: void <init>(int,java.lang.Throwable)>(1, r4);

        interfaceinvoke r0.<android.net.DnsResolver$Callback: void onError(android.net.DnsResolver$DnsException)>(r3);

        return;
    }

    static void lambda$query$3(android.net.DnsResolver$Callback)
    {
        android.net.DnsResolver$Callback r0;
        int $i0;
        android.system.ErrnoException r3;
        android.net.DnsResolver$DnsException r4;
        java.lang.Throwable r5;

        r0 := @parameter0: android.net.DnsResolver$Callback;

        r4 = new android.net.DnsResolver$DnsException;

        r3 = new android.system.ErrnoException;

        $i0 = <android.system.OsConstants: int ENONET>;

        specialinvoke r3.<android.system.ErrnoException: void <init>(java.lang.String,int)>("resNetworkQuery", $i0);

        r5 = (java.lang.Throwable) r3;

        specialinvoke r4.<android.net.DnsResolver$DnsException: void <init>(int,java.lang.Throwable)>(1, r5);

        interfaceinvoke r0.<android.net.DnsResolver$Callback: void onError(android.net.DnsResolver$DnsException)>(r4);

        return;
    }

    static void lambda$query$4(android.net.DnsResolver$Callback, android.system.ErrnoException)
    {
        android.net.DnsResolver$Callback r0;
        android.system.ErrnoException r1;
        android.net.DnsResolver$DnsException r3;
        java.lang.Throwable r4;

        r0 := @parameter0: android.net.DnsResolver$Callback;

        r1 := @parameter1: android.system.ErrnoException;

        r3 = new android.net.DnsResolver$DnsException;

        r4 = (java.lang.Throwable) r1;

        specialinvoke r3.<android.net.DnsResolver$DnsException: void <init>(int,java.lang.Throwable)>(1, r4);

        interfaceinvoke r0.<android.net.DnsResolver$Callback: void onError(android.net.DnsResolver$DnsException)>(r3);

        return;
    }

    static void lambda$query$5(android.net.DnsResolver$Callback, android.system.ErrnoException)
    {
        android.net.DnsResolver$Callback r0;
        android.system.ErrnoException r1;
        android.net.DnsResolver$DnsException r3;
        java.lang.Throwable r4;

        r0 := @parameter0: android.net.DnsResolver$Callback;

        r1 := @parameter1: android.system.ErrnoException;

        r3 = new android.net.DnsResolver$DnsException;

        r4 = (java.lang.Throwable) r1;

        specialinvoke r3.<android.net.DnsResolver$DnsException: void <init>(int,java.lang.Throwable)>(1, r4);

        interfaceinvoke r0.<android.net.DnsResolver$Callback: void onError(android.net.DnsResolver$DnsException)>(r3);

        return;
    }

    static void lambda$query$7(android.net.DnsResolver$Callback, android.system.ErrnoException)
    {
        android.net.DnsResolver$Callback r0;
        android.system.ErrnoException r1;
        android.net.DnsResolver$DnsException r3;
        java.lang.Throwable r4;

        r0 := @parameter0: android.net.DnsResolver$Callback;

        r1 := @parameter1: android.system.ErrnoException;

        r3 = new android.net.DnsResolver$DnsException;

        r4 = (java.lang.Throwable) r1;

        specialinvoke r3.<android.net.DnsResolver$DnsException: void <init>(int,java.lang.Throwable)>(1, r4);

        interfaceinvoke r0.<android.net.DnsResolver$Callback: void onError(android.net.DnsResolver$DnsException)>(r3);

        return;
    }

    static void lambda$rawQuery$0(android.net.DnsResolver$Callback, android.system.ErrnoException)
    {
        android.net.DnsResolver$Callback r0;
        android.system.ErrnoException r1;
        android.net.DnsResolver$DnsException r3;
        java.lang.Throwable r4;

        r0 := @parameter0: android.net.DnsResolver$Callback;

        r1 := @parameter1: android.system.ErrnoException;

        r3 = new android.net.DnsResolver$DnsException;

        r4 = (java.lang.Throwable) r1;

        specialinvoke r3.<android.net.DnsResolver$DnsException: void <init>(int,java.lang.Throwable)>(1, r4);

        interfaceinvoke r0.<android.net.DnsResolver$Callback: void onError(android.net.DnsResolver$DnsException)>(r3);

        return;
    }

    static void lambda$rawQuery$1(android.net.DnsResolver$Callback, android.system.ErrnoException)
    {
        android.net.DnsResolver$Callback r0;
        android.system.ErrnoException r1;
        android.net.DnsResolver$DnsException r3;
        java.lang.Throwable r4;

        r0 := @parameter0: android.net.DnsResolver$Callback;

        r1 := @parameter1: android.system.ErrnoException;

        r3 = new android.net.DnsResolver$DnsException;

        r4 = (java.lang.Throwable) r1;

        specialinvoke r3.<android.net.DnsResolver$DnsException: void <init>(int,java.lang.Throwable)>(1, r4);

        interfaceinvoke r0.<android.net.DnsResolver$Callback: void onError(android.net.DnsResolver$DnsException)>(r3);

        return;
    }

    static void lambda$registerFDListener$8(java.lang.Object, android.os.CancellationSignal, java.io.FileDescriptor, android.net.DnsResolver$Callback)
    {
        java.lang.Object r0;
        android.net.DnsResolver$Callback r1;
        int $i0;
        byte[] $r2;
        boolean $z0;
        java.lang.Throwable $r4, $r5, r11;
        java.lang.String $r6, $r7;
        android.os.CancellationSignal r8;
        java.io.FileDescriptor r9;
        android.net.DnsResolver$DnsResponse r10;
        java.lang.StringBuilder r14;
        android.net.DnsResolver$DnsException r15;
        android.system.ErrnoException r16;

        r0 := @parameter0: java.lang.Object;

        r8 := @parameter1: android.os.CancellationSignal;

        r9 := @parameter2: java.io.FileDescriptor;

        r1 := @parameter3: android.net.DnsResolver$Callback;

        entermonitor r0;

        if r8 == null goto label03;

     label01:
        $z0 = virtualinvoke r8.<android.os.CancellationSignal: boolean isCanceled()>();

        if $z0 == 0 goto label03;

        exitmonitor r0;

     label02:
        return;

     label03:
        r10 = staticinvoke <android.net.NetworkUtils: android.net.DnsResolver$DnsResponse resNetworkResult(java.io.FileDescriptor)>(r9);

     label04:
        r11 = null;

        goto label09;

     label05:
        $r4 := @caughtexception;

        goto label12;

     label06:
        $r5 := @caughtexception;

        r11 = $r5;

     label07:
        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("resNetworkResult:");

        r16 = (android.system.ErrnoException) $r5;

        $r6 = virtualinvoke r16.<android.system.ErrnoException: java.lang.String toString()>();

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r7 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("DnsResolver", $r7);

     label08:
        r10 = null;

     label09:
        exitmonitor r0;

     label10:
        if r11 == null goto label11;

        r15 = new android.net.DnsResolver$DnsException;

        specialinvoke r15.<android.net.DnsResolver$DnsException: void <init>(int,java.lang.Throwable)>(1, r11);

        interfaceinvoke r1.<android.net.DnsResolver$Callback: void onError(android.net.DnsResolver$DnsException)>(r15);

        return;

     label11:
        $r2 = r10.<android.net.DnsResolver$DnsResponse: byte[] answerbuf>;

        $i0 = r10.<android.net.DnsResolver$DnsResponse: int rcode>;

        interfaceinvoke r1.<android.net.DnsResolver$Callback: void onAnswer(java.lang.Object,int)>($r2, $i0);

        return;

     label12:
        exitmonitor r0;

     label13:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch android.system.ErrnoException from label03 to label04 with label06;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label07 to label08 with label05;
        catch java.lang.Throwable from label09 to label10 with label05;
        catch java.lang.Throwable from label12 to label13 with label05;
    }

    static int lambda$registerFDListener$9(android.os.MessageQueue, java.util.concurrent.Executor, java.lang.Object, android.os.CancellationSignal, android.net.DnsResolver$Callback, java.io.FileDescriptor, int)
    {
        android.os.MessageQueue r0;
        java.util.concurrent.Executor r1;
        java.lang.Object r2;
        android.os.CancellationSignal r3;
        android.net.DnsResolver$Callback r4;
        java.io.FileDescriptor r5;
        int i0;
        android.net._$$Lambda$DnsResolver$hIO7FFv0AXN6Nj0Dzka_LD8S870 $r6;

        r0 := @parameter0: android.os.MessageQueue;

        r1 := @parameter1: java.util.concurrent.Executor;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: android.os.CancellationSignal;

        r4 := @parameter4: android.net.DnsResolver$Callback;

        r5 := @parameter5: java.io.FileDescriptor;

        i0 := @parameter6: int;

        virtualinvoke r0.<android.os.MessageQueue: void removeOnFileDescriptorEventListener(java.io.FileDescriptor)>(r5);

        $r6 = new android.net._$$Lambda$DnsResolver$hIO7FFv0AXN6Nj0Dzka_LD8S870;

        specialinvoke $r6.<android.net._$$Lambda$DnsResolver$hIO7FFv0AXN6Nj0Dzka_LD8S870: void <init>(java.lang.Object,android.os.CancellationSignal,java.io.FileDescriptor,android.net.DnsResolver$Callback)>(r2, r3, r5, r4);

        interfaceinvoke r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r6);

        return 0;
    }

    private void registerFDListener(java.util.concurrent.Executor, java.io.FileDescriptor, android.net.DnsResolver$Callback, android.os.CancellationSignal, java.lang.Object)
    {
        android.net.DnsResolver r0;
        java.util.concurrent.Executor r1;
        java.io.FileDescriptor r2;
        android.net.DnsResolver$Callback r3;
        android.os.CancellationSignal r4;
        java.lang.Object r5;
        android.os.MessageQueue r6;
        android.os.Looper $r7;
        android.net._$$Lambda$DnsResolver$kxKi6qjPYeR_SIipxW4tYpxyM50 $r8;

        r0 := @this: android.net.DnsResolver;

        r1 := @parameter0: java.util.concurrent.Executor;

        r2 := @parameter1: java.io.FileDescriptor;

        r3 := @parameter2: android.net.DnsResolver$Callback;

        r4 := @parameter3: android.os.CancellationSignal;

        r5 := @parameter4: java.lang.Object;

        $r7 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        r6 = virtualinvoke $r7.<android.os.Looper: android.os.MessageQueue getQueue()>();

        $r8 = new android.net._$$Lambda$DnsResolver$kxKi6qjPYeR_SIipxW4tYpxyM50;

        specialinvoke $r8.<android.net._$$Lambda$DnsResolver$kxKi6qjPYeR_SIipxW4tYpxyM50: void <init>(android.os.MessageQueue,java.util.concurrent.Executor,java.lang.Object,android.os.CancellationSignal,android.net.DnsResolver$Callback)>(r6, r1, r5, r4, r3);

        virtualinvoke r6.<android.os.MessageQueue: void addOnFileDescriptorEventListener(java.io.FileDescriptor,int,android.os.MessageQueue$OnFileDescriptorEventListener)>(r2, 5, $r8);

        return;
    }

    public void lambda$addCancellationSignal$10$DnsResolver(java.lang.Object, java.io.FileDescriptor)
    {
        android.net.DnsResolver r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        java.io.FileDescriptor r3;

        r0 := @this: android.net.DnsResolver;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.io.FileDescriptor;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.net.DnsResolver: void cancelQuery(java.io.FileDescriptor)>(r3);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void lambda$query$6$DnsResolver(java.lang.Object, boolean, java.io.FileDescriptor, boolean, java.io.FileDescriptor)
    {
        android.net.DnsResolver r0;
        java.lang.Object r1;
        boolean z0, z1;
        java.io.FileDescriptor r2, r4;
        java.lang.Throwable $r3;

        r0 := @this: android.net.DnsResolver;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        r4 := @parameter2: java.io.FileDescriptor;

        z1 := @parameter3: boolean;

        r2 := @parameter4: java.io.FileDescriptor;

        entermonitor r1;

        if z0 == 0 goto label4;

     label1:
        specialinvoke r0.<android.net.DnsResolver: void cancelQuery(java.io.FileDescriptor)>(r4);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        goto label8;

     label4:
        if z1 == 0 goto label6;

     label5:
        specialinvoke r0.<android.net.DnsResolver: void cancelQuery(java.io.FileDescriptor)>(r2);

     label6:
        exitmonitor r1;

     label7:
        return;

     label8:
        exitmonitor r1;

     label9:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
        catch java.lang.Throwable from label6 to label7 with label3;
        catch java.lang.Throwable from label8 to label9 with label3;
    }

    public void query(android.net.Network, java.lang.String, int, int, java.util.concurrent.Executor, android.os.CancellationSignal, android.net.DnsResolver$Callback)
    {
        android.net.DnsResolver r0;
        int i0, i1, i2;
        java.util.concurrent.Executor r1;
        android.os.CancellationSignal r2;
        android.net.DnsResolver$Callback r3;
        boolean $z0;
        java.lang.Throwable $r7, $r9, $r10, r16;
        android.net.Network r11;
        java.lang.String r12;
        java.io.FileDescriptor r13;
        java.lang.Object r17;
        android.net.DnsResolver$InetAddressAnswerAccumulator r18;
        android.net._$$Lambda$DnsResolver$wc3_cnx2aezlAHvMEbQVFaTPAcE r19;
        android.system.ErrnoException r20;

        r0 := @this: android.net.DnsResolver;

        r11 := @parameter0: android.net.Network;

        r12 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r1 := @parameter4: java.util.concurrent.Executor;

        r2 := @parameter5: android.os.CancellationSignal;

        r3 := @parameter6: android.net.DnsResolver$Callback;

        if r2 == null goto label01;

        $z0 = virtualinvoke r2.<android.os.CancellationSignal: boolean isCanceled()>();

        if $z0 == 0 goto label01;

        return;

     label01:
        r17 = new java.lang.Object;

        specialinvoke r17.<java.lang.Object: void <init>()>();

        if r11 == null goto label02;

        goto label03;

     label02:
        r11 = staticinvoke <android.net.NetworkUtils: android.net.Network getDnsNetwork()>();

     label03:
        i2 = virtualinvoke r11.<android.net.Network: int getNetIdForResolv()>();

     label04:
        r13 = staticinvoke <android.net.NetworkUtils: java.io.FileDescriptor resNetworkQuery(int,java.lang.String,int,int,int)>(i2, r12, 1, i0, i1);

     label05:
        r18 = new android.net.DnsResolver$InetAddressAnswerAccumulator;

        specialinvoke r18.<android.net.DnsResolver$InetAddressAnswerAccumulator: void <init>(android.net.DnsResolver,android.net.Network,int,android.net.DnsResolver$Callback)>(r0, r11, 1, r3);

        entermonitor r17;

     label06:
        specialinvoke r0.<android.net.DnsResolver: void registerFDListener(java.util.concurrent.Executor,java.io.FileDescriptor,android.net.DnsResolver$Callback,android.os.CancellationSignal,java.lang.Object)>(r1, r13, r18, r2, r17);

     label07:
        if r2 != null goto label10;

     label08:
        exitmonitor r17;

     label09:
        return;

     label10:
        specialinvoke r0.<android.net.DnsResolver: void addCancellationSignal(android.os.CancellationSignal,java.io.FileDescriptor,java.lang.Object)>(r2, r13, r17);

        exitmonitor r17;

     label11:
        return;

     label12:
        $r10 := @caughtexception;

     label13:
        exitmonitor r17;

     label14:
        throw $r10;

     label15:
        $r9 := @caughtexception;

        r16 = $r9;

        goto label17;

     label16:
        $r7 := @caughtexception;

        r16 = $r7;

     label17:
        r19 = new android.net._$$Lambda$DnsResolver$wc3_cnx2aezlAHvMEbQVFaTPAcE;

        r20 = (android.system.ErrnoException) r16;

        specialinvoke r19.<android.net._$$Lambda$DnsResolver$wc3_cnx2aezlAHvMEbQVFaTPAcE: void <init>(android.net.DnsResolver$Callback,android.system.ErrnoException)>(r3, r20);

        interfaceinvoke r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r19);

        return;

        catch android.system.ErrnoException from label02 to label03 with label16;
        catch android.system.ErrnoException from label03 to label04 with label16;
        catch android.system.ErrnoException from label04 to label05 with label15;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public void query(android.net.Network, java.lang.String, int, java.util.concurrent.Executor, android.os.CancellationSignal, android.net.DnsResolver$Callback)
    {
        android.net.DnsResolver r0;
        java.util.concurrent.Executor r1;
        android.os.CancellationSignal r2;
        android.net.DnsResolver$Callback r3;
        boolean z0, z1, $z2;
        int $i0, $i1, i2, i3, i4;
        java.lang.Throwable $r9, $r10, $r12, $r14, $r16, $r17, r26;
        java.lang.Thread $r11;
        android.net.Network r19;
        java.lang.String r20;
        java.io.FileDescriptor r21, r23;
        java.lang.Object r29;
        android.net._$$Lambda$DnsResolver$kjq9c3feWPGKUPV3AzJBFi1GUvw r30;
        android.net._$$Lambda$DnsResolver$uxb9gSgrd6Qyj9SLhCAtOvpxa3I r31;
        android.net._$$Lambda$DnsResolver$t5xp_fS_zTQ564hG_PIaWJdBP8c r32;
        android.net.DnsResolver$InetAddressAnswerAccumulator r33;
        android.net._$$Lambda$DnsResolver$DW9jYL2ZOH6BjebIVPhZIrrhoD8 r34;
        android.net._$$Lambda$DnsResolver$vvKhya16sREGcN1Gxnqgw_LBoV4 r35;
        android.system.ErrnoException r36, r37, r38;

        r0 := @this: android.net.DnsResolver;

        r19 := @parameter0: android.net.Network;

        r20 := @parameter1: java.lang.String;

        i2 := @parameter2: int;

        r1 := @parameter3: java.util.concurrent.Executor;

        r2 := @parameter4: android.os.CancellationSignal;

        r3 := @parameter5: android.net.DnsResolver$Callback;

        if r2 == null goto label01;

        $z2 = virtualinvoke r2.<android.os.CancellationSignal: boolean isCanceled()>();

        if $z2 == 0 goto label01;

        return;

     label01:
        r29 = new java.lang.Object;

        specialinvoke r29.<java.lang.Object: void <init>()>();

        if r19 == null goto label02;

        goto label03;

     label02:
        r19 = staticinvoke <android.net.NetworkUtils: android.net.Network getDnsNetwork()>();

     label03:
        z0 = staticinvoke <android.net.util.DnsUtils: boolean haveIpv6(android.net.Network)>(r19);

        z1 = staticinvoke <android.net.util.DnsUtils: boolean haveIpv4(android.net.Network)>(r19);

        if z0 != 0 goto label04;

        if z1 != 0 goto label04;

        r30 = new android.net._$$Lambda$DnsResolver$kjq9c3feWPGKUPV3AzJBFi1GUvw;

        specialinvoke r30.<android.net._$$Lambda$DnsResolver$kjq9c3feWPGKUPV3AzJBFi1GUvw: void <init>(android.net.DnsResolver$Callback)>(r3);

        interfaceinvoke r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r30);

        return;

     label04:
        i3 = 0;

        if z0 == 0 goto label08;

     label05:
        $i1 = virtualinvoke r19.<android.net.Network: int getNetIdForResolv()>();

        r21 = staticinvoke <android.net.NetworkUtils: java.io.FileDescriptor resNetworkQuery(int,java.lang.String,int,int,int)>($i1, r20, 1, 28, i2);

     label06:
        i3 = 0 + 1;

        goto label09;

     label07:
        $r14 := @caughtexception;

        r31 = new android.net._$$Lambda$DnsResolver$uxb9gSgrd6Qyj9SLhCAtOvpxa3I;

        r36 = (android.system.ErrnoException) $r14;

        specialinvoke r31.<android.net._$$Lambda$DnsResolver$uxb9gSgrd6Qyj9SLhCAtOvpxa3I: void <init>(android.net.DnsResolver$Callback,android.system.ErrnoException)>(r3, r36);

        interfaceinvoke r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r31);

        return;

     label08:
        r21 = null;

     label09:
        staticinvoke <java.lang.Thread: void sleep(long)>(2L);

     label10:
        goto label12;

     label11:
        $r10 := @caughtexception;

        $r11 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r11.<java.lang.Thread: void interrupt()>();

     label12:
        if z1 == 0 goto label17;

     label13:
        $i0 = virtualinvoke r19.<android.net.Network: int getNetIdForResolv()>();

        r23 = staticinvoke <android.net.NetworkUtils: java.io.FileDescriptor resNetworkQuery(int,java.lang.String,int,int,int)>($i0, r20, 1, 1, i2);

     label14:
        i4 = i3 + 1;

        goto label18;

     label15:
        $r17 := @caughtexception;

        if z0 == 0 goto label16;

        staticinvoke <android.net.NetworkUtils: void resNetworkCancel(java.io.FileDescriptor)>(r21);

     label16:
        r32 = new android.net._$$Lambda$DnsResolver$t5xp_fS_zTQ564hG_PIaWJdBP8c;

        r37 = (android.system.ErrnoException) $r17;

        specialinvoke r32.<android.net._$$Lambda$DnsResolver$t5xp_fS_zTQ564hG_PIaWJdBP8c: void <init>(android.net.DnsResolver$Callback,android.system.ErrnoException)>(r3, r37);

        interfaceinvoke r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r32);

        return;

     label17:
        r23 = null;

        i4 = i3;

     label18:
        r33 = new android.net.DnsResolver$InetAddressAnswerAccumulator;

        specialinvoke r33.<android.net.DnsResolver$InetAddressAnswerAccumulator: void <init>(android.net.DnsResolver,android.net.Network,int,android.net.DnsResolver$Callback)>(r0, r19, i4, r3);

        entermonitor r29;

        if z0 == 0 goto label22;

     label19:
        specialinvoke r0.<android.net.DnsResolver: void registerFDListener(java.util.concurrent.Executor,java.io.FileDescriptor,android.net.DnsResolver$Callback,android.os.CancellationSignal,java.lang.Object)>(r1, r21, r33, r2, r29);

     label20:
        goto label22;

     label21:
        $r16 := @caughtexception;

        r26 = $r16;

        goto label31;

     label22:
        if z1 == 0 goto label26;

     label23:
        specialinvoke r0.<android.net.DnsResolver: void registerFDListener(java.util.concurrent.Executor,java.io.FileDescriptor,android.net.DnsResolver$Callback,android.os.CancellationSignal,java.lang.Object)>(r1, r23, r33, r2, r29);

     label24:
        goto label26;

     label25:
        $r9 := @caughtexception;

        r26 = $r9;

        goto label31;

     label26:
        if r2 != null goto label29;

     label27:
        exitmonitor r29;

     label28:
        return;

     label29:
        r34 = new android.net._$$Lambda$DnsResolver$DW9jYL2ZOH6BjebIVPhZIrrhoD8;

        specialinvoke r34.<android.net._$$Lambda$DnsResolver$DW9jYL2ZOH6BjebIVPhZIrrhoD8: void <init>(android.net.DnsResolver,java.lang.Object,boolean,java.io.FileDescriptor,boolean,java.io.FileDescriptor)>(r0, r29, z1, r23, z0, r21);

        virtualinvoke r2.<android.os.CancellationSignal: void setOnCancelListener(android.os.CancellationSignal$OnCancelListener)>(r34);

        exitmonitor r29;

     label30:
        return;

     label31:
        exitmonitor r29;

     label32:
        throw r26;

     label33:
        $r12 := @caughtexception;

        r35 = new android.net._$$Lambda$DnsResolver$vvKhya16sREGcN1Gxnqgw_LBoV4;

        r38 = (android.system.ErrnoException) $r12;

        specialinvoke r35.<android.net._$$Lambda$DnsResolver$vvKhya16sREGcN1Gxnqgw_LBoV4: void <init>(android.net.DnsResolver$Callback,android.system.ErrnoException)>(r3, r38);

        interfaceinvoke r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r35);

        return;

        catch android.system.ErrnoException from label02 to label03 with label33;
        catch android.system.ErrnoException from label05 to label06 with label07;
        catch java.lang.InterruptedException from label09 to label10 with label11;
        catch android.system.ErrnoException from label13 to label14 with label15;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label23 to label24 with label25;
        catch java.lang.Throwable from label27 to label28 with label25;
        catch java.lang.Throwable from label29 to label30 with label25;
        catch java.lang.Throwable from label31 to label32 with label25;
    }

    public void rawQuery(android.net.Network, java.lang.String, int, int, int, java.util.concurrent.Executor, android.os.CancellationSignal, android.net.DnsResolver$Callback)
    {
        android.net.DnsResolver r0;
        java.lang.String r1;
        int i0, i1, i2, i3;
        java.util.concurrent.Executor r2;
        android.os.CancellationSignal r3;
        android.net.DnsResolver$Callback r4;
        boolean $z0;
        java.lang.Throwable $r7, $r9, $r10, $r11, r13, r15;
        android.net.Network r12;
        java.io.FileDescriptor r14;
        java.lang.Object r16;
        android.net._$$Lambda$DnsResolver$GTAgQiExADAzbCx0WiV_97W72_g r17;
        android.system.ErrnoException r18;

        r0 := @this: android.net.DnsResolver;

        r12 := @parameter0: android.net.Network;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r2 := @parameter5: java.util.concurrent.Executor;

        r3 := @parameter6: android.os.CancellationSignal;

        r4 := @parameter7: android.net.DnsResolver$Callback;

        if r3 == null goto label01;

        $z0 = virtualinvoke r3.<android.os.CancellationSignal: boolean isCanceled()>();

        if $z0 == 0 goto label01;

        return;

     label01:
        r16 = new java.lang.Object;

        specialinvoke r16.<java.lang.Object: void <init>()>();

        if r12 == null goto label05;

     label02:
        i3 = virtualinvoke r12.<android.net.Network: int getNetIdForResolv()>();

     label03:
        goto label06;

     label04:
        $r7 := @caughtexception;

        r13 = $r7;

        goto label19;

     label05:
        i3 = 0;

     label06:
        r14 = staticinvoke <android.net.NetworkUtils: java.io.FileDescriptor resNetworkQuery(int,java.lang.String,int,int,int)>(i3, r1, i0, i1, i2);

     label07:
        entermonitor r16;

     label08:
        specialinvoke r0.<android.net.DnsResolver: void registerFDListener(java.util.concurrent.Executor,java.io.FileDescriptor,android.net.DnsResolver$Callback,android.os.CancellationSignal,java.lang.Object)>(r2, r14, r4, r3, r16);

     label09:
        if r3 != null goto label12;

     label10:
        exitmonitor r16;

     label11:
        return;

     label12:
        specialinvoke r0.<android.net.DnsResolver: void addCancellationSignal(android.os.CancellationSignal,java.io.FileDescriptor,java.lang.Object)>(r3, r14, r16);

        exitmonitor r16;

     label13:
        return;

     label14:
        $r9 := @caughtexception;

        r15 = $r9;

     label15:
        exitmonitor r16;

     label16:
        throw r15;

     label17:
        $r11 := @caughtexception;

        r15 = $r11;

        goto label15;

     label18:
        $r10 := @caughtexception;

        r13 = $r10;

     label19:
        r17 = new android.net._$$Lambda$DnsResolver$GTAgQiExADAzbCx0WiV_97W72_g;

        r18 = (android.system.ErrnoException) r13;

        specialinvoke r17.<android.net._$$Lambda$DnsResolver$GTAgQiExADAzbCx0WiV_97W72_g: void <init>(android.net.DnsResolver$Callback,android.system.ErrnoException)>(r4, r18);

        interfaceinvoke r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r17);

        return;

        catch android.system.ErrnoException from label02 to label03 with label04;
        catch android.system.ErrnoException from label06 to label07 with label18;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
    }

    public void rawQuery(android.net.Network, byte[], int, java.util.concurrent.Executor, android.os.CancellationSignal, android.net.DnsResolver$Callback)
    {
        android.net.DnsResolver r0;
        byte[] r1;
        int i0, $i1, i2;
        java.util.concurrent.Executor r2;
        android.os.CancellationSignal r3;
        android.net.DnsResolver$Callback r4;
        boolean $z0;
        java.lang.Throwable $r7, $r8;
        android.net.Network r10;
        java.io.FileDescriptor r12;
        java.lang.Object r14;
        android.net._$$Lambda$DnsResolver$h2SsAzA5_rVr_mzxppK8PJLQe98 r15;
        android.system.ErrnoException r16;

        r0 := @this: android.net.DnsResolver;

        r10 := @parameter0: android.net.Network;

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        r2 := @parameter3: java.util.concurrent.Executor;

        r3 := @parameter4: android.os.CancellationSignal;

        r4 := @parameter5: android.net.DnsResolver$Callback;

        if r3 == null goto label01;

        $z0 = virtualinvoke r3.<android.os.CancellationSignal: boolean isCanceled()>();

        if $z0 == 0 goto label01;

        return;

     label01:
        r14 = new java.lang.Object;

        specialinvoke r14.<java.lang.Object: void <init>()>();

        if r10 == null goto label05;

     label02:
        i2 = virtualinvoke r10.<android.net.Network: int getNetIdForResolv()>();

     label03:
        goto label06;

     label04:
        $r8 := @caughtexception;

        goto label17;

     label05:
        i2 = 0;

     label06:
        $i1 = lengthof r1;

        r12 = staticinvoke <android.net.NetworkUtils: java.io.FileDescriptor resNetworkSend(int,byte[],int,int)>(i2, r1, $i1, i0);

     label07:
        entermonitor r14;

     label08:
        specialinvoke r0.<android.net.DnsResolver: void registerFDListener(java.util.concurrent.Executor,java.io.FileDescriptor,android.net.DnsResolver$Callback,android.os.CancellationSignal,java.lang.Object)>(r2, r12, r4, r3, r14);

     label09:
        if r3 != null goto label12;

     label10:
        exitmonitor r14;

     label11:
        return;

     label12:
        specialinvoke r0.<android.net.DnsResolver: void addCancellationSignal(android.os.CancellationSignal,java.io.FileDescriptor,java.lang.Object)>(r3, r12, r14);

        exitmonitor r14;

     label13:
        return;

     label14:
        $r7 := @caughtexception;

     label15:
        exitmonitor r14;

     label16:
        throw $r7;

     label17:
        r15 = new android.net._$$Lambda$DnsResolver$h2SsAzA5_rVr_mzxppK8PJLQe98;

        r16 = (android.system.ErrnoException) $r8;

        specialinvoke r15.<android.net._$$Lambda$DnsResolver$h2SsAzA5_rVr_mzxppK8PJLQe98: void <init>(android.net.DnsResolver$Callback,android.system.ErrnoException)>(r4, r16);

        interfaceinvoke r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r15);

        return;

        catch android.system.ErrnoException from label02 to label03 with label04;
        catch android.system.ErrnoException from label06 to label07 with label04;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }
}
