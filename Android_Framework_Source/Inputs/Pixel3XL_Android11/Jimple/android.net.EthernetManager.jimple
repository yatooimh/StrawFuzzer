public class android.net.EthernetManager extends java.lang.Object
{
    private static final int MSG_AVAILABILITY_CHANGED;
    private static final java.lang.String TAG;
    private final android.content.Context mContext;
    private final android.os.Handler mHandler;
    private final java.util.ArrayList mListeners;
    private final android.net.IEthernetManager mService;
    private final android.net.IEthernetServiceListener$Stub mServiceListener;

    public void <init>(android.content.Context, android.net.IEthernetManager)
    {
        android.net.EthernetManager r0;
        android.content.Context r1;
        android.net.IEthernetManager r2;
        android.net.EthernetManager$1 $r3;
        android.os.Looper $r4;
        java.util.ArrayList $r5;
        android.net.EthernetManager$2 $r6;

        r0 := @this: android.net.EthernetManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.net.IEthernetManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new android.net.EthernetManager$1;

        $r4 = staticinvoke <android.net.ConnectivityThread: android.os.Looper getInstanceLooper()>();

        specialinvoke $r3.<android.net.EthernetManager$1: void <init>(android.net.EthernetManager,android.os.Looper)>(r0, $r4);

        r0.<android.net.EthernetManager: android.os.Handler mHandler> = $r3;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<android.net.EthernetManager: java.util.ArrayList mListeners> = $r5;

        $r6 = new android.net.EthernetManager$2;

        specialinvoke $r6.<android.net.EthernetManager$2: void <init>(android.net.EthernetManager)>(r0);

        r0.<android.net.EthernetManager: android.net.IEthernetServiceListener$Stub mServiceListener> = $r6;

        r0.<android.net.EthernetManager: android.content.Context mContext> = r1;

        r0.<android.net.EthernetManager: android.net.IEthernetManager mService> = r2;

        return;
    }

    static java.util.ArrayList access$000(android.net.EthernetManager)
    {
        android.net.EthernetManager r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: android.net.EthernetManager;

        $r1 = r0.<android.net.EthernetManager: java.util.ArrayList mListeners>;

        return $r1;
    }

    static android.os.Handler access$100(android.net.EthernetManager)
    {
        android.net.EthernetManager r0;
        android.os.Handler $r1;

        r0 := @parameter0: android.net.EthernetManager;

        $r1 = r0.<android.net.EthernetManager: android.os.Handler mHandler>;

        return $r1;
    }

    public void addListener(android.net.EthernetManager$Listener)
    {
        android.net.EthernetManager r0;
        java.lang.IllegalArgumentException $r1;
        java.util.ArrayList $r2, $r3;
        int $i0;
        android.net.IEthernetServiceListener$Stub $r4;
        android.net.IEthernetManager $r5;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;
        android.net.EthernetManager$Listener r8;

        r0 := @this: android.net.EthernetManager;

        r8 := @parameter0: android.net.EthernetManager$Listener;

        if r8 == null goto label5;

        $r2 = r0.<android.net.EthernetManager: java.util.ArrayList mListeners>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r8);

        $r3 = r0.<android.net.EthernetManager: java.util.ArrayList mListeners>;

        $i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        if $i0 != 1 goto label4;

     label1:
        $r5 = r0.<android.net.EthernetManager: android.net.IEthernetManager mService>;

        $r4 = r0.<android.net.EthernetManager: android.net.IEthernetServiceListener$Stub mServiceListener>;

        interfaceinvoke $r5.<android.net.IEthernetManager: void addListener(android.net.IEthernetServiceListener)>($r4);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

     label4:
        return;

     label5:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("listener must not be null");

        throw $r1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String[] getAvailableInterfaces()
    {
        android.net.EthernetManager r0;
        android.net.IEthernetManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String[] r4;

        r0 := @this: android.net.EthernetManager;

     label1:
        $r1 = r0.<android.net.EthernetManager: android.net.IEthernetManager mService>;

        r4 = interfaceinvoke $r1.<android.net.IEthernetManager: java.lang.String[] getAvailableInterfaces()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.IpConfiguration getConfiguration(java.lang.String)
    {
        android.net.EthernetManager r0;
        android.net.IEthernetManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;
        android.net.IpConfiguration r5;

        r0 := @this: android.net.EthernetManager;

        r4 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<android.net.EthernetManager: android.net.IEthernetManager mService>;

        r5 = interfaceinvoke $r1.<android.net.IEthernetManager: android.net.IpConfiguration getConfiguration(java.lang.String)>(r4);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isAvailable()
    {
        android.net.EthernetManager r0;
        java.lang.String[] $r1;
        int $i0;
        boolean z0;

        r0 := @this: android.net.EthernetManager;

        $r1 = virtualinvoke r0.<android.net.EthernetManager: java.lang.String[] getAvailableInterfaces()>();

        $i0 = lengthof $r1;

        if $i0 <= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isAvailable(java.lang.String)
    {
        android.net.EthernetManager r0;
        boolean z0;
        android.net.IEthernetManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.net.EthernetManager;

        r4 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<android.net.EthernetManager: android.net.IEthernetManager mService>;

        z0 = interfaceinvoke $r1.<android.net.IEthernetManager: boolean isAvailable(java.lang.String)>(r4);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void removeListener(android.net.EthernetManager$Listener)
    {
        android.net.EthernetManager r0;
        java.lang.IllegalArgumentException $r1;
        java.util.ArrayList $r2, $r3;
        boolean $z1;
        android.net.IEthernetServiceListener$Stub $r4;
        android.net.IEthernetManager $r5;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;
        android.net.EthernetManager$Listener r8;

        r0 := @this: android.net.EthernetManager;

        r8 := @parameter0: android.net.EthernetManager$Listener;

        if r8 == null goto label5;

        $r2 = r0.<android.net.EthernetManager: java.util.ArrayList mListeners>;

        virtualinvoke $r2.<java.util.ArrayList: boolean remove(java.lang.Object)>(r8);

        $r3 = r0.<android.net.EthernetManager: java.util.ArrayList mListeners>;

        $z1 = virtualinvoke $r3.<java.util.ArrayList: boolean isEmpty()>();

        if $z1 == 0 goto label4;

     label1:
        $r5 = r0.<android.net.EthernetManager: android.net.IEthernetManager mService>;

        $r4 = r0.<android.net.EthernetManager: android.net.IEthernetServiceListener$Stub mServiceListener>;

        interfaceinvoke $r5.<android.net.IEthernetManager: void removeListener(android.net.IEthernetServiceListener)>($r4);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

     label4:
        return;

     label5:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("listener must not be null");

        throw $r1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.EthernetManager$TetheredInterfaceRequest requestTetheredInterface(java.util.concurrent.Executor, android.net.EthernetManager$TetheredInterfaceCallback)
    {
        android.net.EthernetManager r0;
        android.net.EthernetManager$TetheredInterfaceCallback r1;
        android.net.EthernetManager$3 $r4;
        android.net.IEthernetManager $r5, $r7;
        android.net.EthernetManager$TetheredInterfaceRequest $r6;
        android.os.RemoteException $r8;
        java.lang.RuntimeException $r9;
        java.util.concurrent.Executor r10;

        r0 := @this: android.net.EthernetManager;

        r10 := @parameter0: java.util.concurrent.Executor;

        r1 := @parameter1: android.net.EthernetManager$TetheredInterfaceCallback;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "Callback must be non-null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r10, "Executor must be non-null");

        $r4 = new android.net.EthernetManager$3;

        specialinvoke $r4.<android.net.EthernetManager$3: void <init>(android.net.EthernetManager,java.util.concurrent.Executor,android.net.EthernetManager$TetheredInterfaceCallback)>(r0, r10, r1);

     label1:
        $r5 = r0.<android.net.EthernetManager: android.net.IEthernetManager mService>;

        interfaceinvoke $r5.<android.net.IEthernetManager: void requestTetheredInterface(android.net.ITetheredInterfaceCallback)>($r4);

     label2:
        $r6 = new android.net.EthernetManager$TetheredInterfaceRequest;

        $r7 = r0.<android.net.EthernetManager: android.net.IEthernetManager mService>;

        specialinvoke $r6.<android.net.EthernetManager$TetheredInterfaceRequest: void <init>(android.net.IEthernetManager,android.net.ITetheredInterfaceCallback,android.net.EthernetManager$1)>($r7, $r4, null);

        return $r6;

     label3:
        $r8 := @caughtexception;

        $r9 = virtualinvoke $r8.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r9;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setConfiguration(java.lang.String, android.net.IpConfiguration)
    {
        android.net.EthernetManager r0;
        android.net.IpConfiguration r1;
        android.net.IEthernetManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;

        r0 := @this: android.net.EthernetManager;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: android.net.IpConfiguration;

     label1:
        $r2 = r0.<android.net.EthernetManager: android.net.IEthernetManager mService>;

        interfaceinvoke $r2.<android.net.IEthernetManager: void setConfiguration(java.lang.String,android.net.IpConfiguration)>(r5, r1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setIncludeTestInterfaces(boolean)
    {
        android.net.EthernetManager r0;
        boolean z0;
        android.net.IEthernetManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.net.EthernetManager;

        z0 := @parameter0: boolean;

     label1:
        $r2 = r0.<android.net.EthernetManager: android.net.IEthernetManager mService>;

        interfaceinvoke $r2.<android.net.IEthernetManager: void setIncludeTestInterfaces(boolean)>(z0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <android.net.EthernetManager: java.lang.String TAG> = "EthernetManager";

        <android.net.EthernetManager: int MSG_AVAILABILITY_CHANGED> = 1000;

        return;
    }
}
