public class android.net.IConnectivityManager$Default extends java.lang.Object implements android.net.IConnectivityManager
{

    public void <init>()
    {
        android.net.IConnectivityManager$Default r0;

        r0 := @this: android.net.IConnectivityManager$Default;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean addVpnAddress(java.lang.String, int) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        java.lang.String r1;
        int i0;

        r0 := @this: android.net.IConnectivityManager$Default;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        return 0;
    }

    public android.os.IBinder asBinder()
    {
        android.net.IConnectivityManager$Default r0;

        r0 := @this: android.net.IConnectivityManager$Default;

        return null;
    }

    public int checkMobileProvisioning(int) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        int i0;

        r0 := @this: android.net.IConnectivityManager$Default;

        i0 := @parameter0: int;

        return 0;
    }

    public void declareNetworkRequestUnfulfillable(android.net.NetworkRequest) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        android.net.NetworkRequest r1;

        r0 := @this: android.net.IConnectivityManager$Default;

        r1 := @parameter0: android.net.NetworkRequest;

        return;
    }

    public void deleteVpnProfile(java.lang.String) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        java.lang.String r1;

        r0 := @this: android.net.IConnectivityManager$Default;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public android.os.ParcelFileDescriptor establishVpn(com.android.internal.net.VpnConfig) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        com.android.internal.net.VpnConfig r1;

        r0 := @this: android.net.IConnectivityManager$Default;

        r1 := @parameter0: com.android.internal.net.VpnConfig;

        return null;
    }

    public void factoryReset() throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;

        r0 := @this: android.net.IConnectivityManager$Default;

        return;
    }

    public android.net.LinkProperties getActiveLinkProperties() throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;

        r0 := @this: android.net.IConnectivityManager$Default;

        return null;
    }

    public android.net.Network getActiveNetwork() throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;

        r0 := @this: android.net.IConnectivityManager$Default;

        return null;
    }

    public android.net.Network getActiveNetworkForUid(int, boolean) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        int i0;
        boolean z0;

        r0 := @this: android.net.IConnectivityManager$Default;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        return null;
    }

    public android.net.NetworkInfo getActiveNetworkInfo() throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;

        r0 := @this: android.net.IConnectivityManager$Default;

        return null;
    }

    public android.net.NetworkInfo getActiveNetworkInfoForUid(int, boolean) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        int i0;
        boolean z0;

        r0 := @this: android.net.IConnectivityManager$Default;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        return null;
    }

    public android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo() throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;

        r0 := @this: android.net.IConnectivityManager$Default;

        return null;
    }

    public android.net.NetworkInfo[] getAllNetworkInfo() throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;

        r0 := @this: android.net.IConnectivityManager$Default;

        return null;
    }

    public android.net.NetworkState[] getAllNetworkState() throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;

        r0 := @this: android.net.IConnectivityManager$Default;

        return null;
    }

    public android.net.Network[] getAllNetworks() throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;

        r0 := @this: android.net.IConnectivityManager$Default;

        return null;
    }

    public java.lang.String getAlwaysOnVpnPackage(int) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        int i0;

        r0 := @this: android.net.IConnectivityManager$Default;

        i0 := @parameter0: int;

        return null;
    }

    public java.lang.String getCaptivePortalServerUrl() throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;

        r0 := @this: android.net.IConnectivityManager$Default;

        return null;
    }

    public int getConnectionOwnerUid(android.net.ConnectionInfo) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        android.net.ConnectionInfo r1;

        r0 := @this: android.net.IConnectivityManager$Default;

        r1 := @parameter0: android.net.ConnectionInfo;

        return 0;
    }

    public android.net.NetworkCapabilities[] getDefaultNetworkCapabilitiesForUser(int, java.lang.String) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        int i0;
        java.lang.String r1;

        r0 := @this: android.net.IConnectivityManager$Default;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        return null;
    }

    public android.net.NetworkRequest getDefaultRequest() throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;

        r0 := @this: android.net.IConnectivityManager$Default;

        return null;
    }

    public android.net.ProxyInfo getGlobalProxy() throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;

        r0 := @this: android.net.IConnectivityManager$Default;

        return null;
    }

    public int getLastTetherError(java.lang.String) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        java.lang.String r1;

        r0 := @this: android.net.IConnectivityManager$Default;

        r1 := @parameter0: java.lang.String;

        return 0;
    }

    public com.android.internal.net.LegacyVpnInfo getLegacyVpnInfo(int) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        int i0;

        r0 := @this: android.net.IConnectivityManager$Default;

        i0 := @parameter0: int;

        return null;
    }

    public android.net.LinkProperties getLinkProperties(android.net.Network) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        android.net.Network r1;

        r0 := @this: android.net.IConnectivityManager$Default;

        r1 := @parameter0: android.net.Network;

        return null;
    }

    public android.net.LinkProperties getLinkPropertiesForType(int) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        int i0;

        r0 := @this: android.net.IConnectivityManager$Default;

        i0 := @parameter0: int;

        return null;
    }

    public java.lang.String getMobileProvisioningUrl() throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;

        r0 := @this: android.net.IConnectivityManager$Default;

        return null;
    }

    public int getMultipathPreference(android.net.Network) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        android.net.Network r1;

        r0 := @this: android.net.IConnectivityManager$Default;

        r1 := @parameter0: android.net.Network;

        return 0;
    }

    public android.net.NetworkCapabilities getNetworkCapabilities(android.net.Network, java.lang.String) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        android.net.Network r1;
        java.lang.String r2;

        r0 := @this: android.net.IConnectivityManager$Default;

        r1 := @parameter0: android.net.Network;

        r2 := @parameter1: java.lang.String;

        return null;
    }

    public android.net.Network getNetworkForType(int) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        int i0;

        r0 := @this: android.net.IConnectivityManager$Default;

        i0 := @parameter0: int;

        return null;
    }

    public android.net.NetworkInfo getNetworkInfo(int) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        int i0;

        r0 := @this: android.net.IConnectivityManager$Default;

        i0 := @parameter0: int;

        return null;
    }

    public android.net.NetworkInfo getNetworkInfoForUid(android.net.Network, int, boolean) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        android.net.Network r1;
        int i0;
        boolean z0;

        r0 := @this: android.net.IConnectivityManager$Default;

        r1 := @parameter0: android.net.Network;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        return null;
    }

    public byte[] getNetworkWatchlistConfigHash() throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;

        r0 := @this: android.net.IConnectivityManager$Default;

        return null;
    }

    public android.net.ProxyInfo getProxyForNetwork(android.net.Network) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        android.net.Network r1;

        r0 := @this: android.net.IConnectivityManager$Default;

        r1 := @parameter0: android.net.Network;

        return null;
    }

    public int getRestoreDefaultNetworkDelay(int) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        int i0;

        r0 := @this: android.net.IConnectivityManager$Default;

        i0 := @parameter0: int;

        return 0;
    }

    public java.lang.String[] getTetherableIfaces() throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;

        r0 := @this: android.net.IConnectivityManager$Default;

        return null;
    }

    public java.lang.String[] getTetherableUsbRegexs() throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;

        r0 := @this: android.net.IConnectivityManager$Default;

        return null;
    }

    public java.lang.String[] getTetherableWifiRegexs() throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;

        r0 := @this: android.net.IConnectivityManager$Default;

        return null;
    }

    public java.lang.String[] getTetheredIfaces() throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;

        r0 := @this: android.net.IConnectivityManager$Default;

        return null;
    }

    public java.lang.String[] getTetheringErroredIfaces() throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;

        r0 := @this: android.net.IConnectivityManager$Default;

        return null;
    }

    public com.android.internal.net.VpnConfig getVpnConfig(int) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        int i0;

        r0 := @this: android.net.IConnectivityManager$Default;

        i0 := @parameter0: int;

        return null;
    }

    public java.util.List getVpnLockdownWhitelist(int) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        int i0;

        r0 := @this: android.net.IConnectivityManager$Default;

        i0 := @parameter0: int;

        return null;
    }

    public boolean isActiveNetworkMetered() throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;

        r0 := @this: android.net.IConnectivityManager$Default;

        return 0;
    }

    public boolean isAlwaysOnVpnPackageSupported(int, java.lang.String) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        int i0;
        java.lang.String r1;

        r0 := @this: android.net.IConnectivityManager$Default;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        return 0;
    }

    public boolean isCallerCurrentAlwaysOnVpnApp() throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;

        r0 := @this: android.net.IConnectivityManager$Default;

        return 0;
    }

    public boolean isCallerCurrentAlwaysOnVpnLockdownApp() throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;

        r0 := @this: android.net.IConnectivityManager$Default;

        return 0;
    }

    public boolean isNetworkSupported(int) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        int i0;

        r0 := @this: android.net.IConnectivityManager$Default;

        i0 := @parameter0: int;

        return 0;
    }

    public boolean isVpnLockdownEnabled(int) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        int i0;

        r0 := @this: android.net.IConnectivityManager$Default;

        i0 := @parameter0: int;

        return 0;
    }

    public android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities, android.os.Messenger, android.os.IBinder, java.lang.String) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        android.net.NetworkCapabilities r1;
        android.os.Messenger r2;
        android.os.IBinder r3;
        java.lang.String r4;

        r0 := @this: android.net.IConnectivityManager$Default;

        r1 := @parameter0: android.net.NetworkCapabilities;

        r2 := @parameter1: android.os.Messenger;

        r3 := @parameter2: android.os.IBinder;

        r4 := @parameter3: java.lang.String;

        return null;
    }

    public void pendingListenForNetwork(android.net.NetworkCapabilities, android.app.PendingIntent, java.lang.String) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        android.net.NetworkCapabilities r1;
        android.app.PendingIntent r2;
        java.lang.String r3;

        r0 := @this: android.net.IConnectivityManager$Default;

        r1 := @parameter0: android.net.NetworkCapabilities;

        r2 := @parameter1: android.app.PendingIntent;

        r3 := @parameter2: java.lang.String;

        return;
    }

    public android.net.NetworkRequest pendingRequestForNetwork(android.net.NetworkCapabilities, android.app.PendingIntent, java.lang.String) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        android.net.NetworkCapabilities r1;
        android.app.PendingIntent r2;
        java.lang.String r3;

        r0 := @this: android.net.IConnectivityManager$Default;

        r1 := @parameter0: android.net.NetworkCapabilities;

        r2 := @parameter1: android.app.PendingIntent;

        r3 := @parameter2: java.lang.String;

        return null;
    }

    public boolean prepareVpn(java.lang.String, java.lang.String, int) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        java.lang.String r1, r2;
        int i0;

        r0 := @this: android.net.IConnectivityManager$Default;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        return 0;
    }

    public boolean provisionVpnProfile(com.android.internal.net.VpnProfile, java.lang.String) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        com.android.internal.net.VpnProfile r1;
        java.lang.String r2;

        r0 := @this: android.net.IConnectivityManager$Default;

        r1 := @parameter0: com.android.internal.net.VpnProfile;

        r2 := @parameter1: java.lang.String;

        return 0;
    }

    public void registerConnectivityDiagnosticsCallback(android.net.IConnectivityDiagnosticsCallback, android.net.NetworkRequest, java.lang.String) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        android.net.IConnectivityDiagnosticsCallback r1;
        android.net.NetworkRequest r2;
        java.lang.String r3;

        r0 := @this: android.net.IConnectivityManager$Default;

        r1 := @parameter0: android.net.IConnectivityDiagnosticsCallback;

        r2 := @parameter1: android.net.NetworkRequest;

        r3 := @parameter2: java.lang.String;

        return;
    }

    public android.net.Network registerNetworkAgent(android.os.Messenger, android.net.NetworkInfo, android.net.LinkProperties, android.net.NetworkCapabilities, int, android.net.NetworkAgentConfig, int) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        android.os.Messenger r1;
        android.net.NetworkInfo r2;
        android.net.LinkProperties r3;
        android.net.NetworkCapabilities r4;
        int i0, i1;
        android.net.NetworkAgentConfig r5;

        r0 := @this: android.net.IConnectivityManager$Default;

        r1 := @parameter0: android.os.Messenger;

        r2 := @parameter1: android.net.NetworkInfo;

        r3 := @parameter2: android.net.LinkProperties;

        r4 := @parameter3: android.net.NetworkCapabilities;

        i0 := @parameter4: int;

        r5 := @parameter5: android.net.NetworkAgentConfig;

        i1 := @parameter6: int;

        return null;
    }

    public int registerNetworkFactory(android.os.Messenger, java.lang.String) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        android.os.Messenger r1;
        java.lang.String r2;

        r0 := @this: android.net.IConnectivityManager$Default;

        r1 := @parameter0: android.os.Messenger;

        r2 := @parameter1: java.lang.String;

        return 0;
    }

    public int registerNetworkProvider(android.os.Messenger, java.lang.String) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        android.os.Messenger r1;
        java.lang.String r2;

        r0 := @this: android.net.IConnectivityManager$Default;

        r1 := @parameter0: android.os.Messenger;

        r2 := @parameter1: java.lang.String;

        return 0;
    }

    public void releaseNetworkRequest(android.net.NetworkRequest) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        android.net.NetworkRequest r1;

        r0 := @this: android.net.IConnectivityManager$Default;

        r1 := @parameter0: android.net.NetworkRequest;

        return;
    }

    public void releasePendingNetworkRequest(android.app.PendingIntent) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        android.app.PendingIntent r1;

        r0 := @this: android.net.IConnectivityManager$Default;

        r1 := @parameter0: android.app.PendingIntent;

        return;
    }

    public boolean removeVpnAddress(java.lang.String, int) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        java.lang.String r1;
        int i0;

        r0 := @this: android.net.IConnectivityManager$Default;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        return 0;
    }

    public void reportInetCondition(int, int) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        int i0, i1;

        r0 := @this: android.net.IConnectivityManager$Default;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return;
    }

    public void reportNetworkConnectivity(android.net.Network, boolean) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        android.net.Network r1;
        boolean z0;

        r0 := @this: android.net.IConnectivityManager$Default;

        r1 := @parameter0: android.net.Network;

        z0 := @parameter1: boolean;

        return;
    }

    public boolean requestBandwidthUpdate(android.net.Network) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        android.net.Network r1;

        r0 := @this: android.net.IConnectivityManager$Default;

        r1 := @parameter0: android.net.Network;

        return 0;
    }

    public android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities, android.os.Messenger, int, android.os.IBinder, int, java.lang.String) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        android.net.NetworkCapabilities r1;
        android.os.Messenger r2;
        int i0, i1;
        android.os.IBinder r3;
        java.lang.String r4;

        r0 := @this: android.net.IConnectivityManager$Default;

        r1 := @parameter0: android.net.NetworkCapabilities;

        r2 := @parameter1: android.os.Messenger;

        i0 := @parameter2: int;

        r3 := @parameter3: android.os.IBinder;

        i1 := @parameter4: int;

        r4 := @parameter5: java.lang.String;

        return null;
    }

    public boolean requestRouteToHostAddress(int, byte[]) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        int i0;
        byte[] r1;

        r0 := @this: android.net.IConnectivityManager$Default;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        return 0;
    }

    public void setAcceptPartialConnectivity(android.net.Network, boolean, boolean) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        android.net.Network r1;
        boolean z0, z1;

        r0 := @this: android.net.IConnectivityManager$Default;

        r1 := @parameter0: android.net.Network;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        return;
    }

    public void setAcceptUnvalidated(android.net.Network, boolean, boolean) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        android.net.Network r1;
        boolean z0, z1;

        r0 := @this: android.net.IConnectivityManager$Default;

        r1 := @parameter0: android.net.Network;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        return;
    }

    public void setAirplaneMode(boolean) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        boolean z0;

        r0 := @this: android.net.IConnectivityManager$Default;

        z0 := @parameter0: boolean;

        return;
    }

    public boolean setAlwaysOnVpnPackage(int, java.lang.String, boolean, java.util.List) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        int i0;
        java.lang.String r1;
        boolean z0;
        java.util.List r2;

        r0 := @this: android.net.IConnectivityManager$Default;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r2 := @parameter3: java.util.List;

        return 0;
    }

    public void setAvoidUnvalidated(android.net.Network) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        android.net.Network r1;

        r0 := @this: android.net.IConnectivityManager$Default;

        r1 := @parameter0: android.net.Network;

        return;
    }

    public void setGlobalProxy(android.net.ProxyInfo) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        android.net.ProxyInfo r1;

        r0 := @this: android.net.IConnectivityManager$Default;

        r1 := @parameter0: android.net.ProxyInfo;

        return;
    }

    public void setProvisioningNotificationVisible(boolean, int, java.lang.String) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        boolean z0;
        int i0;
        java.lang.String r1;

        r0 := @this: android.net.IConnectivityManager$Default;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        return;
    }

    public boolean setUnderlyingNetworksForVpn(android.net.Network[]) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        android.net.Network[] r1;

        r0 := @this: android.net.IConnectivityManager$Default;

        r1 := @parameter0: android.net.Network[];

        return 0;
    }

    public void setVpnPackageAuthorization(java.lang.String, int, int) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        java.lang.String r1;
        int i0, i1;

        r0 := @this: android.net.IConnectivityManager$Default;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        return;
    }

    public boolean shouldAvoidBadWifi() throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;

        r0 := @this: android.net.IConnectivityManager$Default;

        return 0;
    }

    public void simulateDataStall(int, long, android.net.Network, android.os.PersistableBundle) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        int i0;
        long l1;
        android.net.Network r1;
        android.os.PersistableBundle r2;

        r0 := @this: android.net.IConnectivityManager$Default;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        r1 := @parameter2: android.net.Network;

        r2 := @parameter3: android.os.PersistableBundle;

        return;
    }

    public void startCaptivePortalApp(android.net.Network) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        android.net.Network r1;

        r0 := @this: android.net.IConnectivityManager$Default;

        r1 := @parameter0: android.net.Network;

        return;
    }

    public void startCaptivePortalAppInternal(android.net.Network, android.os.Bundle) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        android.net.Network r1;
        android.os.Bundle r2;

        r0 := @this: android.net.IConnectivityManager$Default;

        r1 := @parameter0: android.net.Network;

        r2 := @parameter1: android.os.Bundle;

        return;
    }

    public void startLegacyVpn(com.android.internal.net.VpnProfile) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        com.android.internal.net.VpnProfile r1;

        r0 := @this: android.net.IConnectivityManager$Default;

        r1 := @parameter0: com.android.internal.net.VpnProfile;

        return;
    }

    public void startNattKeepalive(android.net.Network, int, android.net.ISocketKeepaliveCallback, java.lang.String, int, java.lang.String) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        android.net.Network r1;
        int i0, i1;
        android.net.ISocketKeepaliveCallback r2;
        java.lang.String r3, r4;

        r0 := @this: android.net.IConnectivityManager$Default;

        r1 := @parameter0: android.net.Network;

        i0 := @parameter1: int;

        r2 := @parameter2: android.net.ISocketKeepaliveCallback;

        r3 := @parameter3: java.lang.String;

        i1 := @parameter4: int;

        r4 := @parameter5: java.lang.String;

        return;
    }

    public void startNattKeepaliveWithFd(android.net.Network, java.io.FileDescriptor, int, int, android.net.ISocketKeepaliveCallback, java.lang.String, java.lang.String) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        android.net.Network r1;
        java.io.FileDescriptor r2;
        int i0, i1;
        android.net.ISocketKeepaliveCallback r3;
        java.lang.String r4, r5;

        r0 := @this: android.net.IConnectivityManager$Default;

        r1 := @parameter0: android.net.Network;

        r2 := @parameter1: java.io.FileDescriptor;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r3 := @parameter4: android.net.ISocketKeepaliveCallback;

        r4 := @parameter5: java.lang.String;

        r5 := @parameter6: java.lang.String;

        return;
    }

    public android.os.IBinder startOrGetTestNetworkService() throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;

        r0 := @this: android.net.IConnectivityManager$Default;

        return null;
    }

    public void startTcpKeepalive(android.net.Network, java.io.FileDescriptor, int, android.net.ISocketKeepaliveCallback) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        android.net.Network r1;
        java.io.FileDescriptor r2;
        int i0;
        android.net.ISocketKeepaliveCallback r3;

        r0 := @this: android.net.IConnectivityManager$Default;

        r1 := @parameter0: android.net.Network;

        r2 := @parameter1: java.io.FileDescriptor;

        i0 := @parameter2: int;

        r3 := @parameter3: android.net.ISocketKeepaliveCallback;

        return;
    }

    public void startVpnProfile(java.lang.String) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        java.lang.String r1;

        r0 := @this: android.net.IConnectivityManager$Default;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void stopKeepalive(android.net.Network, int) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        android.net.Network r1;
        int i0;

        r0 := @this: android.net.IConnectivityManager$Default;

        r1 := @parameter0: android.net.Network;

        i0 := @parameter1: int;

        return;
    }

    public void stopVpnProfile(java.lang.String) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        java.lang.String r1;

        r0 := @this: android.net.IConnectivityManager$Default;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void unregisterConnectivityDiagnosticsCallback(android.net.IConnectivityDiagnosticsCallback) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        android.net.IConnectivityDiagnosticsCallback r1;

        r0 := @this: android.net.IConnectivityManager$Default;

        r1 := @parameter0: android.net.IConnectivityDiagnosticsCallback;

        return;
    }

    public void unregisterNetworkFactory(android.os.Messenger) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        android.os.Messenger r1;

        r0 := @this: android.net.IConnectivityManager$Default;

        r1 := @parameter0: android.os.Messenger;

        return;
    }

    public void unregisterNetworkProvider(android.os.Messenger) throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;
        android.os.Messenger r1;

        r0 := @this: android.net.IConnectivityManager$Default;

        r1 := @parameter0: android.os.Messenger;

        return;
    }

    public boolean updateLockdownVpn() throws android.os.RemoteException
    {
        android.net.IConnectivityManager$Default r0;

        r0 := @this: android.net.IConnectivityManager$Default;

        return 0;
    }
}
