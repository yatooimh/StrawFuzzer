public interface  android.net.IDnsResolver extends java.lang.Object implements android.os.IInterface
{
    public static final int DNS_RESOLVER_LOG_DEBUG;
    public static final int DNS_RESOLVER_LOG_ERROR;
    public static final int DNS_RESOLVER_LOG_INFO;
    public static final int DNS_RESOLVER_LOG_VERBOSE;
    public static final int DNS_RESOLVER_LOG_WARNING;
    public static final java.lang.String HASH;
    public static final int RESOLVER_PARAMS_BASE_TIMEOUT_MSEC;
    public static final int RESOLVER_PARAMS_COUNT;
    public static final int RESOLVER_PARAMS_MAX_SAMPLES;
    public static final int RESOLVER_PARAMS_MIN_SAMPLES;
    public static final int RESOLVER_PARAMS_RETRY_COUNT;
    public static final int RESOLVER_PARAMS_SAMPLE_VALIDITY;
    public static final int RESOLVER_PARAMS_SUCCESS_THRESHOLD;
    public static final int RESOLVER_STATS_COUNT;
    public static final int RESOLVER_STATS_ERRORS;
    public static final int RESOLVER_STATS_INTERNAL_ERRORS;
    public static final int RESOLVER_STATS_LAST_SAMPLE_TIME;
    public static final int RESOLVER_STATS_RTT_AVG;
    public static final int RESOLVER_STATS_SUCCESSES;
    public static final int RESOLVER_STATS_TIMEOUTS;
    public static final int RESOLVER_STATS_USABLE;
    public static final int TC_MODE_DEFAULT;
    public static final int TC_MODE_UDP_TCP;
    public static final int TRANSPORT_BLUETOOTH;
    public static final int TRANSPORT_CELLULAR;
    public static final int TRANSPORT_ETHERNET;
    public static final int TRANSPORT_LOWPAN;
    public static final int TRANSPORT_TEST;
    public static final int TRANSPORT_UNKNOWN;
    public static final int TRANSPORT_VPN;
    public static final int TRANSPORT_WIFI;
    public static final int TRANSPORT_WIFI_AWARE;
    public static final int VERSION;

    public abstract void createNetworkCache(int) throws android.os.RemoteException;

    public abstract void destroyNetworkCache(int) throws android.os.RemoteException;

    public abstract void flushNetworkCache(int) throws android.os.RemoteException;

    public abstract java.lang.String getInterfaceHash() throws android.os.RemoteException;

    public abstract int getInterfaceVersion() throws android.os.RemoteException;

    public abstract java.lang.String getPrefix64(int) throws android.os.RemoteException;

    public abstract void getResolverInfo(int, java.lang.String[], java.lang.String[], java.lang.String[], int[], int[], int[]) throws android.os.RemoteException;

    public abstract boolean isAlive() throws android.os.RemoteException;

    public abstract void registerEventListener(android.net.metrics.INetdEventListener) throws android.os.RemoteException;

    public abstract void setLogSeverity(int) throws android.os.RemoteException;

    public abstract void setPrefix64(int, java.lang.String) throws android.os.RemoteException;

    public abstract void setResolverConfiguration(android.net.ResolverParamsParcel) throws android.os.RemoteException;

    public abstract void startPrefix64Discovery(int) throws android.os.RemoteException;

    public abstract void stopPrefix64Discovery(int) throws android.os.RemoteException;

    public static void <clinit>()
    {
        <android.net.IDnsResolver: int VERSION> = 6;

        <android.net.IDnsResolver: int TRANSPORT_WIFI_AWARE> = 5;

        <android.net.IDnsResolver: int TRANSPORT_WIFI> = 1;

        <android.net.IDnsResolver: int TRANSPORT_VPN> = 4;

        <android.net.IDnsResolver: int TRANSPORT_UNKNOWN> = -1;

        <android.net.IDnsResolver: int TRANSPORT_TEST> = 7;

        <android.net.IDnsResolver: int TRANSPORT_LOWPAN> = 6;

        <android.net.IDnsResolver: int TRANSPORT_ETHERNET> = 3;

        <android.net.IDnsResolver: int TRANSPORT_CELLULAR> = 0;

        <android.net.IDnsResolver: int TRANSPORT_BLUETOOTH> = 2;

        <android.net.IDnsResolver: int TC_MODE_UDP_TCP> = 1;

        <android.net.IDnsResolver: int TC_MODE_DEFAULT> = 0;

        <android.net.IDnsResolver: int RESOLVER_STATS_USABLE> = 6;

        <android.net.IDnsResolver: int RESOLVER_STATS_TIMEOUTS> = 2;

        <android.net.IDnsResolver: int RESOLVER_STATS_SUCCESSES> = 0;

        <android.net.IDnsResolver: int RESOLVER_STATS_RTT_AVG> = 4;

        <android.net.IDnsResolver: int RESOLVER_STATS_LAST_SAMPLE_TIME> = 5;

        <android.net.IDnsResolver: int RESOLVER_STATS_INTERNAL_ERRORS> = 3;

        <android.net.IDnsResolver: int RESOLVER_STATS_ERRORS> = 1;

        <android.net.IDnsResolver: int RESOLVER_STATS_COUNT> = 7;

        <android.net.IDnsResolver: int RESOLVER_PARAMS_SUCCESS_THRESHOLD> = 1;

        <android.net.IDnsResolver: int RESOLVER_PARAMS_SAMPLE_VALIDITY> = 0;

        <android.net.IDnsResolver: int RESOLVER_PARAMS_RETRY_COUNT> = 5;

        <android.net.IDnsResolver: int RESOLVER_PARAMS_MIN_SAMPLES> = 2;

        <android.net.IDnsResolver: int RESOLVER_PARAMS_MAX_SAMPLES> = 3;

        <android.net.IDnsResolver: int RESOLVER_PARAMS_COUNT> = 6;

        <android.net.IDnsResolver: int RESOLVER_PARAMS_BASE_TIMEOUT_MSEC> = 4;

        <android.net.IDnsResolver: java.lang.String HASH> = "5bc773534ffa9d7614ccd27d5de6daefdeeee2b8";

        <android.net.IDnsResolver: int DNS_RESOLVER_LOG_WARNING> = 3;

        <android.net.IDnsResolver: int DNS_RESOLVER_LOG_VERBOSE> = 0;

        <android.net.IDnsResolver: int DNS_RESOLVER_LOG_INFO> = 2;

        <android.net.IDnsResolver: int DNS_RESOLVER_LOG_ERROR> = 4;

        <android.net.IDnsResolver: int DNS_RESOLVER_LOG_DEBUG> = 1;

        return;
    }
}
