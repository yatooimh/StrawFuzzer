public class android.net.IEthernetManager$Default extends java.lang.Object implements android.net.IEthernetManager
{

    public void <init>()
    {
        android.net.IEthernetManager$Default r0;

        r0 := @this: android.net.IEthernetManager$Default;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void addListener(android.net.IEthernetServiceListener) throws android.os.RemoteException
    {
        android.net.IEthernetManager$Default r0;
        android.net.IEthernetServiceListener r1;

        r0 := @this: android.net.IEthernetManager$Default;

        r1 := @parameter0: android.net.IEthernetServiceListener;

        return;
    }

    public android.os.IBinder asBinder()
    {
        android.net.IEthernetManager$Default r0;

        r0 := @this: android.net.IEthernetManager$Default;

        return null;
    }

    public java.lang.String[] getAvailableInterfaces() throws android.os.RemoteException
    {
        android.net.IEthernetManager$Default r0;

        r0 := @this: android.net.IEthernetManager$Default;

        return null;
    }

    public android.net.IpConfiguration getConfiguration(java.lang.String) throws android.os.RemoteException
    {
        android.net.IEthernetManager$Default r0;
        java.lang.String r1;

        r0 := @this: android.net.IEthernetManager$Default;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public boolean isAvailable(java.lang.String) throws android.os.RemoteException
    {
        android.net.IEthernetManager$Default r0;
        java.lang.String r1;

        r0 := @this: android.net.IEthernetManager$Default;

        r1 := @parameter0: java.lang.String;

        return 0;
    }

    public void releaseTetheredInterface(android.net.ITetheredInterfaceCallback) throws android.os.RemoteException
    {
        android.net.IEthernetManager$Default r0;
        android.net.ITetheredInterfaceCallback r1;

        r0 := @this: android.net.IEthernetManager$Default;

        r1 := @parameter0: android.net.ITetheredInterfaceCallback;

        return;
    }

    public void removeListener(android.net.IEthernetServiceListener) throws android.os.RemoteException
    {
        android.net.IEthernetManager$Default r0;
        android.net.IEthernetServiceListener r1;

        r0 := @this: android.net.IEthernetManager$Default;

        r1 := @parameter0: android.net.IEthernetServiceListener;

        return;
    }

    public void requestTetheredInterface(android.net.ITetheredInterfaceCallback) throws android.os.RemoteException
    {
        android.net.IEthernetManager$Default r0;
        android.net.ITetheredInterfaceCallback r1;

        r0 := @this: android.net.IEthernetManager$Default;

        r1 := @parameter0: android.net.ITetheredInterfaceCallback;

        return;
    }

    public void setConfiguration(java.lang.String, android.net.IpConfiguration) throws android.os.RemoteException
    {
        android.net.IEthernetManager$Default r0;
        java.lang.String r1;
        android.net.IpConfiguration r2;

        r0 := @this: android.net.IEthernetManager$Default;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.net.IpConfiguration;

        return;
    }

    public void setIncludeTestInterfaces(boolean) throws android.os.RemoteException
    {
        android.net.IEthernetManager$Default r0;
        boolean z0;

        r0 := @this: android.net.IEthernetManager$Default;

        z0 := @parameter0: boolean;

        return;
    }
}
