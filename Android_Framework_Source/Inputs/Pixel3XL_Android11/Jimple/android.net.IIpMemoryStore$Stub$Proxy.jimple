class android.net.IIpMemoryStore$Stub$Proxy extends java.lang.Object implements android.net.IIpMemoryStore
{
    public static android.net.IIpMemoryStore sDefaultImpl;
    private java.lang.String mCachedHash;
    private int mCachedVersion;
    private android.os.IBinder mRemote;

    void <init>(android.os.IBinder)
    {
        android.net.IIpMemoryStore$Stub$Proxy r0;
        android.os.IBinder r1;

        r0 := @this: android.net.IIpMemoryStore$Stub$Proxy;

        r1 := @parameter0: android.os.IBinder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.net.IIpMemoryStore$Stub$Proxy: int mCachedVersion> = -1;

        r0.<android.net.IIpMemoryStore$Stub$Proxy: java.lang.String mCachedHash> = "-1";

        r0.<android.net.IIpMemoryStore$Stub$Proxy: android.os.IBinder mRemote> = r1;

        return;
    }

    public android.os.IBinder asBinder()
    {
        android.net.IIpMemoryStore$Stub$Proxy r0;
        android.os.IBinder $r1;

        r0 := @this: android.net.IIpMemoryStore$Stub$Proxy;

        $r1 = r0.<android.net.IIpMemoryStore$Stub$Proxy: android.os.IBinder mRemote>;

        return $r1;
    }

    public void delete(java.lang.String, boolean, android.net.ipmemorystore.IOnStatusAndCountListener) throws android.os.RemoteException
    {
        android.net.IIpMemoryStore$Stub$Proxy r0;
        boolean z0, $z1;
        android.net.ipmemorystore.IOnStatusAndCountListener r1;
        android.os.Parcel r2;
        java.lang.String $r3, r8;
        android.os.IBinder $r4, r9;
        android.net.IIpMemoryStore $r5, $r6;
        java.lang.Throwable $r7;
        byte b0;

        r0 := @this: android.net.IIpMemoryStore$Stub$Proxy;

        r8 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r1 := @parameter2: android.net.ipmemorystore.IOnStatusAndCountListener;

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label01:
        $r3 = staticinvoke <android.net.IIpMemoryStore$Stub: java.lang.String access$000()>();

        virtualinvoke r2.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>($r3);

        virtualinvoke r2.<android.os.Parcel: void writeString(java.lang.String)>(r8);

     label02:
        if z0 == 0 goto label03;

        b0 = 1;

        goto label04;

     label03:
        b0 = 0;

     label04:
        virtualinvoke r2.<android.os.Parcel: void writeInt(int)>(b0);

     label05:
        if r1 == null goto label08;

     label06:
        r9 = interfaceinvoke r1.<android.net.ipmemorystore.IOnStatusAndCountListener: android.os.IBinder asBinder()>();

     label07:
        goto label09;

     label08:
        r9 = null;

     label09:
        virtualinvoke r2.<android.os.Parcel: void writeStrongBinder(android.os.IBinder)>(r9);

        $r4 = r0.<android.net.IIpMemoryStore$Stub$Proxy: android.os.IBinder mRemote>;

        $z1 = interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(8, r2, null, 1);

        if $z1 != 0 goto label11;

        $r5 = staticinvoke <android.net.IIpMemoryStore$Stub: android.net.IIpMemoryStore getDefaultImpl()>();

        if $r5 == null goto label11;

        $r6 = staticinvoke <android.net.IIpMemoryStore$Stub: android.net.IIpMemoryStore getDefaultImpl()>();

        interfaceinvoke $r6.<android.net.IIpMemoryStore: void delete(java.lang.String,boolean,android.net.ipmemorystore.IOnStatusAndCountListener)>(r8, z0, r1);

     label10:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        return;

     label11:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        return;

     label12:
        $r7 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
    }

    public void deleteCluster(java.lang.String, boolean, android.net.ipmemorystore.IOnStatusAndCountListener) throws android.os.RemoteException
    {
        android.net.IIpMemoryStore$Stub$Proxy r0;
        boolean z0, $z1;
        android.net.ipmemorystore.IOnStatusAndCountListener r1;
        android.os.Parcel r2;
        java.lang.String $r3, r8;
        android.os.IBinder $r4, r9;
        android.net.IIpMemoryStore $r5, $r6;
        java.lang.Throwable $r7;
        byte b0;

        r0 := @this: android.net.IIpMemoryStore$Stub$Proxy;

        r8 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r1 := @parameter2: android.net.ipmemorystore.IOnStatusAndCountListener;

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label01:
        $r3 = staticinvoke <android.net.IIpMemoryStore$Stub: java.lang.String access$000()>();

        virtualinvoke r2.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>($r3);

        virtualinvoke r2.<android.os.Parcel: void writeString(java.lang.String)>(r8);

     label02:
        if z0 == 0 goto label03;

        b0 = 1;

        goto label04;

     label03:
        b0 = 0;

     label04:
        virtualinvoke r2.<android.os.Parcel: void writeInt(int)>(b0);

     label05:
        if r1 == null goto label08;

     label06:
        r9 = interfaceinvoke r1.<android.net.ipmemorystore.IOnStatusAndCountListener: android.os.IBinder asBinder()>();

     label07:
        goto label09;

     label08:
        r9 = null;

     label09:
        virtualinvoke r2.<android.os.Parcel: void writeStrongBinder(android.os.IBinder)>(r9);

        $r4 = r0.<android.net.IIpMemoryStore$Stub$Proxy: android.os.IBinder mRemote>;

        $z1 = interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(9, r2, null, 1);

        if $z1 != 0 goto label11;

        $r5 = staticinvoke <android.net.IIpMemoryStore$Stub: android.net.IIpMemoryStore getDefaultImpl()>();

        if $r5 == null goto label11;

        $r6 = staticinvoke <android.net.IIpMemoryStore$Stub: android.net.IIpMemoryStore getDefaultImpl()>();

        interfaceinvoke $r6.<android.net.IIpMemoryStore: void deleteCluster(java.lang.String,boolean,android.net.ipmemorystore.IOnStatusAndCountListener)>(r8, z0, r1);

     label10:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        return;

     label11:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        return;

     label12:
        $r7 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
    }

    public void factoryReset() throws android.os.RemoteException
    {
        android.net.IIpMemoryStore$Stub$Proxy r0;
        android.os.Parcel r1;
        java.lang.String $r3;
        android.os.IBinder $r4;
        boolean $z0;
        android.net.IIpMemoryStore $r5, $r6;
        java.lang.Throwable $r7;

        r0 := @this: android.net.IIpMemoryStore$Stub$Proxy;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        $r3 = staticinvoke <android.net.IIpMemoryStore$Stub: java.lang.String access$000()>();

        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>($r3);

        $r4 = r0.<android.net.IIpMemoryStore$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(7, r1, null, 1);

        if $z0 != 0 goto label3;

        $r5 = staticinvoke <android.net.IIpMemoryStore$Stub: android.net.IIpMemoryStore getDefaultImpl()>();

        if $r5 == null goto label3;

        $r6 = staticinvoke <android.net.IIpMemoryStore$Stub: android.net.IIpMemoryStore getDefaultImpl()>();

        interfaceinvoke $r6.<android.net.IIpMemoryStore: void factoryReset()>();

     label2:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label4:
        $r7 := @caughtexception;

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public void findL2Key(android.net.ipmemorystore.NetworkAttributesParcelable, android.net.ipmemorystore.IOnL2KeyResponseListener) throws android.os.RemoteException
    {
        android.net.IIpMemoryStore$Stub$Proxy r0;
        android.net.ipmemorystore.IOnL2KeyResponseListener r1;
        android.os.Parcel r2;
        java.lang.String $r3;
        android.os.IBinder $r4, r9;
        boolean $z0;
        android.net.IIpMemoryStore $r5, $r6;
        java.lang.Throwable $r7;
        android.net.ipmemorystore.NetworkAttributesParcelable r8;

        r0 := @this: android.net.IIpMemoryStore$Stub$Proxy;

        r8 := @parameter0: android.net.ipmemorystore.NetworkAttributesParcelable;

        r1 := @parameter1: android.net.ipmemorystore.IOnL2KeyResponseListener;

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label01:
        $r3 = staticinvoke <android.net.IIpMemoryStore$Stub: java.lang.String access$000()>();

        virtualinvoke r2.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>($r3);

     label02:
        if r8 == null goto label05;

     label03:
        virtualinvoke r2.<android.os.Parcel: void writeInt(int)>(1);

        virtualinvoke r8.<android.net.ipmemorystore.NetworkAttributesParcelable: void writeToParcel(android.os.Parcel,int)>(r2, 0);

     label04:
        goto label06;

     label05:
        virtualinvoke r2.<android.os.Parcel: void writeInt(int)>(0);

     label06:
        if r1 == null goto label09;

     label07:
        r9 = interfaceinvoke r1.<android.net.ipmemorystore.IOnL2KeyResponseListener: android.os.IBinder asBinder()>();

     label08:
        goto label10;

     label09:
        r9 = null;

     label10:
        virtualinvoke r2.<android.os.Parcel: void writeStrongBinder(android.os.IBinder)>(r9);

        $r4 = r0.<android.net.IIpMemoryStore$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(3, r2, null, 1);

        if $z0 != 0 goto label12;

        $r5 = staticinvoke <android.net.IIpMemoryStore$Stub: android.net.IIpMemoryStore getDefaultImpl()>();

        if $r5 == null goto label12;

        $r6 = staticinvoke <android.net.IIpMemoryStore$Stub: android.net.IIpMemoryStore getDefaultImpl()>();

        interfaceinvoke $r6.<android.net.IIpMemoryStore: void findL2Key(android.net.ipmemorystore.NetworkAttributesParcelable,android.net.ipmemorystore.IOnL2KeyResponseListener)>(r8, r1);

     label11:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        return;

     label12:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        return;

     label13:
        $r7 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
    }

    public java.lang.String getInterfaceDescriptor()
    {
        android.net.IIpMemoryStore$Stub$Proxy r0;
        java.lang.String $r1;

        r0 := @this: android.net.IIpMemoryStore$Stub$Proxy;

        $r1 = staticinvoke <android.net.IIpMemoryStore$Stub: java.lang.String access$000()>();

        return $r1;
    }

    public java.lang.String getInterfaceHash() throws android.os.RemoteException
    {
        android.net.IIpMemoryStore$Stub$Proxy r0;
        android.os.Parcel r1, r11;
        java.lang.String $r2, $r3, $r4, $r6, r12, r14;
        boolean $z0, $z1;
        android.os.IBinder $r5;
        android.net.IIpMemoryStore $r7, $r8;
        java.lang.Throwable $r9, $r10;

        r0 := @this: android.net.IIpMemoryStore$Stub$Proxy;

        entermonitor r0;

     label01:
        $r3 = "-1";

        $r2 = r0.<android.net.IIpMemoryStore$Stub$Proxy: java.lang.String mCachedHash>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label10;

        r11 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label02:
        $r4 = staticinvoke <android.net.IIpMemoryStore$Stub: java.lang.String access$000()>();

        virtualinvoke r11.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>($r4);

        $r5 = r0.<android.net.IIpMemoryStore$Stub$Proxy: android.os.IBinder mRemote>;

        $z1 = interfaceinvoke $r5.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(16777214, r11, r1, 0);

        if $z1 != 0 goto label05;

        $r7 = staticinvoke <android.net.IIpMemoryStore$Stub: android.net.IIpMemoryStore getDefaultImpl()>();

        if $r7 == null goto label05;

        $r8 = staticinvoke <android.net.IIpMemoryStore$Stub: android.net.IIpMemoryStore getDefaultImpl()>();

        r12 = interfaceinvoke $r8.<android.net.IIpMemoryStore: java.lang.String getInterfaceHash()>();

     label03:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        virtualinvoke r11.<android.os.Parcel: void recycle()>();

     label04:
        exitmonitor r0;

        return r12;

     label05:
        virtualinvoke r1.<android.os.Parcel: void readException()>();

        $r6 = virtualinvoke r1.<android.os.Parcel: java.lang.String readString()>();

        r0.<android.net.IIpMemoryStore$Stub$Proxy: java.lang.String mCachedHash> = $r6;

     label06:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        virtualinvoke r11.<android.os.Parcel: void recycle()>();

     label07:
        goto label10;

     label08:
        $r10 := @caughtexception;

     label09:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        virtualinvoke r11.<android.os.Parcel: void recycle()>();

        throw $r10;

     label10:
        r14 = r0.<android.net.IIpMemoryStore$Stub$Proxy: java.lang.String mCachedHash>;

     label11:
        exitmonitor r0;

        return r14;

     label12:
        $r9 := @caughtexception;

        exitmonitor r0;

        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
    }

    public int getInterfaceVersion() throws android.os.RemoteException
    {
        android.net.IIpMemoryStore$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        int i0, $i1, $i2, $i3;
        java.lang.String $r4;
        android.os.IBinder $r5;
        boolean $z0;
        android.net.IIpMemoryStore $r6, $r7;
        java.lang.Throwable $r8;

        r0 := @this: android.net.IIpMemoryStore$Stub$Proxy;

        $i1 = r0.<android.net.IIpMemoryStore$Stub$Proxy: int mCachedVersion>;

        if $i1 != -1 goto label6;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        $r4 = staticinvoke <android.net.IIpMemoryStore$Stub: java.lang.String access$000()>();

        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>($r4);

        $r5 = r0.<android.net.IIpMemoryStore$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r5.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(16777215, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r6 = staticinvoke <android.net.IIpMemoryStore$Stub: android.net.IIpMemoryStore getDefaultImpl()>();

        if $r6 == null goto label3;

        $r7 = staticinvoke <android.net.IIpMemoryStore$Stub: android.net.IIpMemoryStore getDefaultImpl()>();

        i0 = interfaceinvoke $r7.<android.net.IIpMemoryStore: int getInterfaceVersion()>();

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return i0;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

        $i3 = virtualinvoke r2.<android.os.Parcel: int readInt()>();

        r0.<android.net.IIpMemoryStore$Stub$Proxy: int mCachedVersion> = $i3;

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        goto label6;

     label5:
        $r8 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r8;

     label6:
        $i2 = r0.<android.net.IIpMemoryStore$Stub$Proxy: int mCachedVersion>;

        return $i2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void isSameNetwork(java.lang.String, java.lang.String, android.net.ipmemorystore.IOnSameL3NetworkResponseListener) throws android.os.RemoteException
    {
        android.net.IIpMemoryStore$Stub$Proxy r0;
        java.lang.String r1, $r4, r9;
        android.net.ipmemorystore.IOnSameL3NetworkResponseListener r2;
        android.os.Parcel r3;
        android.os.IBinder $r5, r10;
        boolean $z0;
        android.net.IIpMemoryStore $r6, $r7;
        java.lang.Throwable $r8;

        r0 := @this: android.net.IIpMemoryStore$Stub$Proxy;

        r9 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.net.ipmemorystore.IOnSameL3NetworkResponseListener;

        r3 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        $r4 = staticinvoke <android.net.IIpMemoryStore$Stub: java.lang.String access$000()>();

        virtualinvoke r3.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>($r4);

        virtualinvoke r3.<android.os.Parcel: void writeString(java.lang.String)>(r9);

        virtualinvoke r3.<android.os.Parcel: void writeString(java.lang.String)>(r1);

     label2:
        if r2 == null goto label5;

     label3:
        r10 = interfaceinvoke r2.<android.net.ipmemorystore.IOnSameL3NetworkResponseListener: android.os.IBinder asBinder()>();

     label4:
        goto label6;

     label5:
        r10 = null;

     label6:
        virtualinvoke r3.<android.os.Parcel: void writeStrongBinder(android.os.IBinder)>(r10);

        $r5 = r0.<android.net.IIpMemoryStore$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r5.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(4, r3, null, 1);

        if $z0 != 0 goto label8;

        $r6 = staticinvoke <android.net.IIpMemoryStore$Stub: android.net.IIpMemoryStore getDefaultImpl()>();

        if $r6 == null goto label8;

        $r7 = staticinvoke <android.net.IIpMemoryStore$Stub: android.net.IIpMemoryStore getDefaultImpl()>();

        interfaceinvoke $r7.<android.net.IIpMemoryStore: void isSameNetwork(java.lang.String,java.lang.String,android.net.ipmemorystore.IOnSameL3NetworkResponseListener)>(r9, r1, r2);

     label7:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        return;

     label8:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        return;

     label9:
        $r8 := @caughtexception;

        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label9;
        catch java.lang.Throwable from label3 to label4 with label9;
        catch java.lang.Throwable from label6 to label7 with label9;
    }

    public void retrieveBlob(java.lang.String, java.lang.String, java.lang.String, android.net.ipmemorystore.IOnBlobRetrievedListener) throws android.os.RemoteException
    {
        android.net.IIpMemoryStore$Stub$Proxy r0;
        java.lang.String r1, r2, $r5, r10;
        android.net.ipmemorystore.IOnBlobRetrievedListener r3;
        android.os.Parcel r4;
        android.os.IBinder $r6, r11;
        boolean $z0;
        android.net.IIpMemoryStore $r7, $r8;
        java.lang.Throwable $r9;

        r0 := @this: android.net.IIpMemoryStore$Stub$Proxy;

        r10 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: android.net.ipmemorystore.IOnBlobRetrievedListener;

        r4 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        $r5 = staticinvoke <android.net.IIpMemoryStore$Stub: java.lang.String access$000()>();

        virtualinvoke r4.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>($r5);

        virtualinvoke r4.<android.os.Parcel: void writeString(java.lang.String)>(r10);

        virtualinvoke r4.<android.os.Parcel: void writeString(java.lang.String)>(r1);

        virtualinvoke r4.<android.os.Parcel: void writeString(java.lang.String)>(r2);

     label2:
        if r3 == null goto label5;

     label3:
        r11 = interfaceinvoke r3.<android.net.ipmemorystore.IOnBlobRetrievedListener: android.os.IBinder asBinder()>();

     label4:
        goto label6;

     label5:
        r11 = null;

     label6:
        virtualinvoke r4.<android.os.Parcel: void writeStrongBinder(android.os.IBinder)>(r11);

        $r6 = r0.<android.net.IIpMemoryStore$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r6.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(6, r4, null, 1);

        if $z0 != 0 goto label8;

        $r7 = staticinvoke <android.net.IIpMemoryStore$Stub: android.net.IIpMemoryStore getDefaultImpl()>();

        if $r7 == null goto label8;

        $r8 = staticinvoke <android.net.IIpMemoryStore$Stub: android.net.IIpMemoryStore getDefaultImpl()>();

        interfaceinvoke $r8.<android.net.IIpMemoryStore: void retrieveBlob(java.lang.String,java.lang.String,java.lang.String,android.net.ipmemorystore.IOnBlobRetrievedListener)>(r10, r1, r2, r3);

     label7:
        virtualinvoke r4.<android.os.Parcel: void recycle()>();

        return;

     label8:
        virtualinvoke r4.<android.os.Parcel: void recycle()>();

        return;

     label9:
        $r9 := @caughtexception;

        virtualinvoke r4.<android.os.Parcel: void recycle()>();

        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label9;
        catch java.lang.Throwable from label3 to label4 with label9;
        catch java.lang.Throwable from label6 to label7 with label9;
    }

    public void retrieveNetworkAttributes(java.lang.String, android.net.ipmemorystore.IOnNetworkAttributesRetrievedListener) throws android.os.RemoteException
    {
        android.net.IIpMemoryStore$Stub$Proxy r0;
        android.net.ipmemorystore.IOnNetworkAttributesRetrievedListener r1;
        android.os.Parcel r2;
        java.lang.String $r3, r8;
        android.os.IBinder $r4, r9;
        boolean $z0;
        android.net.IIpMemoryStore $r5, $r6;
        java.lang.Throwable $r7;

        r0 := @this: android.net.IIpMemoryStore$Stub$Proxy;

        r8 := @parameter0: java.lang.String;

        r1 := @parameter1: android.net.ipmemorystore.IOnNetworkAttributesRetrievedListener;

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        $r3 = staticinvoke <android.net.IIpMemoryStore$Stub: java.lang.String access$000()>();

        virtualinvoke r2.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>($r3);

        virtualinvoke r2.<android.os.Parcel: void writeString(java.lang.String)>(r8);

     label2:
        if r1 == null goto label5;

     label3:
        r9 = interfaceinvoke r1.<android.net.ipmemorystore.IOnNetworkAttributesRetrievedListener: android.os.IBinder asBinder()>();

     label4:
        goto label6;

     label5:
        r9 = null;

     label6:
        virtualinvoke r2.<android.os.Parcel: void writeStrongBinder(android.os.IBinder)>(r9);

        $r4 = r0.<android.net.IIpMemoryStore$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(5, r2, null, 1);

        if $z0 != 0 goto label8;

        $r5 = staticinvoke <android.net.IIpMemoryStore$Stub: android.net.IIpMemoryStore getDefaultImpl()>();

        if $r5 == null goto label8;

        $r6 = staticinvoke <android.net.IIpMemoryStore$Stub: android.net.IIpMemoryStore getDefaultImpl()>();

        interfaceinvoke $r6.<android.net.IIpMemoryStore: void retrieveNetworkAttributes(java.lang.String,android.net.ipmemorystore.IOnNetworkAttributesRetrievedListener)>(r8, r1);

     label7:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        return;

     label8:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        return;

     label9:
        $r7 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label9;
        catch java.lang.Throwable from label3 to label4 with label9;
        catch java.lang.Throwable from label6 to label7 with label9;
    }

    public void storeBlob(java.lang.String, java.lang.String, java.lang.String, android.net.ipmemorystore.Blob, android.net.ipmemorystore.IOnStatusListener) throws android.os.RemoteException
    {
        android.net.IIpMemoryStore$Stub$Proxy r0;
        java.lang.String r1, r2, $r6, r11;
        android.net.ipmemorystore.Blob r3;
        android.net.ipmemorystore.IOnStatusListener r4;
        android.os.Parcel r5;
        android.os.IBinder $r7, r12;
        boolean $z0;
        android.net.IIpMemoryStore $r8, $r9;
        java.lang.Throwable $r10;

        r0 := @this: android.net.IIpMemoryStore$Stub$Proxy;

        r11 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: android.net.ipmemorystore.Blob;

        r4 := @parameter4: android.net.ipmemorystore.IOnStatusListener;

        r5 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label01:
        $r6 = staticinvoke <android.net.IIpMemoryStore$Stub: java.lang.String access$000()>();

        virtualinvoke r5.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>($r6);

        virtualinvoke r5.<android.os.Parcel: void writeString(java.lang.String)>(r11);

        virtualinvoke r5.<android.os.Parcel: void writeString(java.lang.String)>(r1);

        virtualinvoke r5.<android.os.Parcel: void writeString(java.lang.String)>(r2);

     label02:
        if r3 == null goto label05;

     label03:
        virtualinvoke r5.<android.os.Parcel: void writeInt(int)>(1);

        virtualinvoke r3.<android.net.ipmemorystore.Blob: void writeToParcel(android.os.Parcel,int)>(r5, 0);

     label04:
        goto label06;

     label05:
        virtualinvoke r5.<android.os.Parcel: void writeInt(int)>(0);

     label06:
        if r4 == null goto label09;

     label07:
        r12 = interfaceinvoke r4.<android.net.ipmemorystore.IOnStatusListener: android.os.IBinder asBinder()>();

     label08:
        goto label10;

     label09:
        r12 = null;

     label10:
        virtualinvoke r5.<android.os.Parcel: void writeStrongBinder(android.os.IBinder)>(r12);

        $r7 = r0.<android.net.IIpMemoryStore$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r7.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(2, r5, null, 1);

        if $z0 != 0 goto label12;

        $r8 = staticinvoke <android.net.IIpMemoryStore$Stub: android.net.IIpMemoryStore getDefaultImpl()>();

        if $r8 == null goto label12;

        $r9 = staticinvoke <android.net.IIpMemoryStore$Stub: android.net.IIpMemoryStore getDefaultImpl()>();

        interfaceinvoke $r9.<android.net.IIpMemoryStore: void storeBlob(java.lang.String,java.lang.String,java.lang.String,android.net.ipmemorystore.Blob,android.net.ipmemorystore.IOnStatusListener)>(r11, r1, r2, r3, r4);

     label11:
        virtualinvoke r5.<android.os.Parcel: void recycle()>();

        return;

     label12:
        virtualinvoke r5.<android.os.Parcel: void recycle()>();

        return;

     label13:
        $r10 := @caughtexception;

        virtualinvoke r5.<android.os.Parcel: void recycle()>();

        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
    }

    public void storeNetworkAttributes(java.lang.String, android.net.ipmemorystore.NetworkAttributesParcelable, android.net.ipmemorystore.IOnStatusListener) throws android.os.RemoteException
    {
        android.net.IIpMemoryStore$Stub$Proxy r0;
        android.net.ipmemorystore.NetworkAttributesParcelable r1;
        android.net.ipmemorystore.IOnStatusListener r2;
        android.os.Parcel r3;
        java.lang.String $r4, r9;
        android.os.IBinder $r5, r10;
        boolean $z0;
        android.net.IIpMemoryStore $r6, $r7;
        java.lang.Throwable $r8;

        r0 := @this: android.net.IIpMemoryStore$Stub$Proxy;

        r9 := @parameter0: java.lang.String;

        r1 := @parameter1: android.net.ipmemorystore.NetworkAttributesParcelable;

        r2 := @parameter2: android.net.ipmemorystore.IOnStatusListener;

        r3 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label01:
        $r4 = staticinvoke <android.net.IIpMemoryStore$Stub: java.lang.String access$000()>();

        virtualinvoke r3.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>($r4);

        virtualinvoke r3.<android.os.Parcel: void writeString(java.lang.String)>(r9);

     label02:
        if r1 == null goto label05;

     label03:
        virtualinvoke r3.<android.os.Parcel: void writeInt(int)>(1);

        virtualinvoke r1.<android.net.ipmemorystore.NetworkAttributesParcelable: void writeToParcel(android.os.Parcel,int)>(r3, 0);

     label04:
        goto label06;

     label05:
        virtualinvoke r3.<android.os.Parcel: void writeInt(int)>(0);

     label06:
        if r2 == null goto label09;

     label07:
        r10 = interfaceinvoke r2.<android.net.ipmemorystore.IOnStatusListener: android.os.IBinder asBinder()>();

     label08:
        goto label10;

     label09:
        r10 = null;

     label10:
        virtualinvoke r3.<android.os.Parcel: void writeStrongBinder(android.os.IBinder)>(r10);

        $r5 = r0.<android.net.IIpMemoryStore$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r5.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(1, r3, null, 1);

        if $z0 != 0 goto label12;

        $r6 = staticinvoke <android.net.IIpMemoryStore$Stub: android.net.IIpMemoryStore getDefaultImpl()>();

        if $r6 == null goto label12;

        $r7 = staticinvoke <android.net.IIpMemoryStore$Stub: android.net.IIpMemoryStore getDefaultImpl()>();

        interfaceinvoke $r7.<android.net.IIpMemoryStore: void storeNetworkAttributes(java.lang.String,android.net.ipmemorystore.NetworkAttributesParcelable,android.net.ipmemorystore.IOnStatusListener)>(r9, r1, r2);

     label11:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        return;

     label12:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        return;

     label13:
        $r8 := @caughtexception;

        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
    }
}
