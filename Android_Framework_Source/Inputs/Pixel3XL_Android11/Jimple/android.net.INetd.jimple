public interface  android.net.INetd extends java.lang.Object implements android.os.IInterface
{
    public static final int CONF;
    public static final int FIREWALL_BLACKLIST;
    public static final int FIREWALL_CHAIN_DOZABLE;
    public static final int FIREWALL_CHAIN_NONE;
    public static final int FIREWALL_CHAIN_POWERSAVE;
    public static final int FIREWALL_CHAIN_STANDBY;
    public static final int FIREWALL_RULE_ALLOW;
    public static final int FIREWALL_RULE_DENY;
    public static final int FIREWALL_WHITELIST;
    public static final java.lang.String HASH;
    public static final java.lang.String IF_FLAG_BROADCAST;
    public static final java.lang.String IF_FLAG_LOOPBACK;
    public static final java.lang.String IF_FLAG_MULTICAST;
    public static final java.lang.String IF_FLAG_POINTOPOINT;
    public static final java.lang.String IF_FLAG_RUNNING;
    public static final java.lang.String IF_STATE_DOWN;
    public static final java.lang.String IF_STATE_UP;
    public static final java.lang.String IPSEC_INTERFACE_PREFIX;
    public static final int IPV4;
    public static final int IPV6;
    public static final int IPV6_ADDR_GEN_MODE_DEFAULT;
    public static final int IPV6_ADDR_GEN_MODE_EUI64;
    public static final int IPV6_ADDR_GEN_MODE_NONE;
    public static final int IPV6_ADDR_GEN_MODE_RANDOM;
    public static final int IPV6_ADDR_GEN_MODE_STABLE_PRIVACY;
    public static final int LOCAL_NET_ID;
    public static final int NEIGH;
    public static final java.lang.String NEXTHOP_NONE;
    public static final java.lang.String NEXTHOP_THROW;
    public static final java.lang.String NEXTHOP_UNREACHABLE;
    public static final int NO_PERMISSIONS;
    public static final int PENALTY_POLICY_ACCEPT;
    public static final int PENALTY_POLICY_LOG;
    public static final int PENALTY_POLICY_REJECT;
    public static final int PERMISSION_INTERNET;
    public static final int PERMISSION_NETWORK;
    public static final int PERMISSION_NONE;
    public static final int PERMISSION_SYSTEM;
    public static final int PERMISSION_UNINSTALLED;
    public static final int PERMISSION_UPDATE_DEVICE_STATS;
    public static final int VERSION;

    public abstract void bandwidthAddNaughtyApp(int) throws android.os.RemoteException;

    public abstract void bandwidthAddNiceApp(int) throws android.os.RemoteException;

    public abstract boolean bandwidthEnableDataSaver(boolean) throws android.os.RemoteException;

    public abstract void bandwidthRemoveInterfaceAlert(java.lang.String) throws android.os.RemoteException;

    public abstract void bandwidthRemoveInterfaceQuota(java.lang.String) throws android.os.RemoteException;

    public abstract void bandwidthRemoveNaughtyApp(int) throws android.os.RemoteException;

    public abstract void bandwidthRemoveNiceApp(int) throws android.os.RemoteException;

    public abstract void bandwidthSetGlobalAlert(long) throws android.os.RemoteException;

    public abstract void bandwidthSetInterfaceAlert(java.lang.String, long) throws android.os.RemoteException;

    public abstract void bandwidthSetInterfaceQuota(java.lang.String, long) throws android.os.RemoteException;

    public abstract java.lang.String clatdStart(java.lang.String, java.lang.String) throws android.os.RemoteException;

    public abstract void clatdStop(java.lang.String) throws android.os.RemoteException;

    public abstract void firewallAddUidInterfaceRules(java.lang.String, int[]) throws android.os.RemoteException;

    public abstract void firewallEnableChildChain(int, boolean) throws android.os.RemoteException;

    public abstract void firewallRemoveUidInterfaceRules(int[]) throws android.os.RemoteException;

    public abstract boolean firewallReplaceUidChain(java.lang.String, boolean, int[]) throws android.os.RemoteException;

    public abstract void firewallSetFirewallType(int) throws android.os.RemoteException;

    public abstract void firewallSetInterfaceRule(java.lang.String, int) throws android.os.RemoteException;

    public abstract void firewallSetUidRule(int, int, int) throws android.os.RemoteException;

    public abstract android.net.MarkMaskParcel getFwmarkForNetwork(int) throws android.os.RemoteException;

    public abstract java.lang.String getInterfaceHash() throws android.os.RemoteException;

    public abstract int getInterfaceVersion() throws android.os.RemoteException;

    public abstract android.os.IBinder getOemNetd() throws android.os.RemoteException;

    public abstract java.lang.String getProcSysNet(int, int, java.lang.String, java.lang.String) throws android.os.RemoteException;

    public abstract void idletimerAddInterface(java.lang.String, int, java.lang.String) throws android.os.RemoteException;

    public abstract void idletimerRemoveInterface(java.lang.String, int, java.lang.String) throws android.os.RemoteException;

    public abstract void interfaceAddAddress(java.lang.String, java.lang.String, int) throws android.os.RemoteException;

    public abstract void interfaceClearAddrs(java.lang.String) throws android.os.RemoteException;

    public abstract void interfaceDelAddress(java.lang.String, java.lang.String, int) throws android.os.RemoteException;

    public abstract android.net.InterfaceConfigurationParcel interfaceGetCfg(java.lang.String) throws android.os.RemoteException;

    public abstract java.lang.String[] interfaceGetList() throws android.os.RemoteException;

    public abstract void interfaceSetCfg(android.net.InterfaceConfigurationParcel) throws android.os.RemoteException;

    public abstract void interfaceSetEnableIPv6(java.lang.String, boolean) throws android.os.RemoteException;

    public abstract void interfaceSetIPv6PrivacyExtensions(java.lang.String, boolean) throws android.os.RemoteException;

    public abstract void interfaceSetMtu(java.lang.String, int) throws android.os.RemoteException;

    public abstract void ipSecAddSecurityAssociation(int, int, java.lang.String, java.lang.String, int, int, int, int, java.lang.String, byte[], int, java.lang.String, byte[], int, java.lang.String, byte[], int, int, int, int, int) throws android.os.RemoteException;

    public abstract void ipSecAddSecurityPolicy(int, int, int, java.lang.String, java.lang.String, int, int, int, int) throws android.os.RemoteException;

    public abstract void ipSecAddTunnelInterface(java.lang.String, java.lang.String, java.lang.String, int, int, int) throws android.os.RemoteException;

    public abstract int ipSecAllocateSpi(int, java.lang.String, java.lang.String, int) throws android.os.RemoteException;

    public abstract void ipSecApplyTransportModeTransform(android.os.ParcelFileDescriptor, int, int, java.lang.String, java.lang.String, int) throws android.os.RemoteException;

    public abstract void ipSecDeleteSecurityAssociation(int, java.lang.String, java.lang.String, int, int, int, int) throws android.os.RemoteException;

    public abstract void ipSecDeleteSecurityPolicy(int, int, int, int, int, int) throws android.os.RemoteException;

    public abstract void ipSecRemoveTransportModeTransform(android.os.ParcelFileDescriptor) throws android.os.RemoteException;

    public abstract void ipSecRemoveTunnelInterface(java.lang.String) throws android.os.RemoteException;

    public abstract void ipSecSetEncapSocketOwner(android.os.ParcelFileDescriptor, int) throws android.os.RemoteException;

    public abstract void ipSecUpdateSecurityPolicy(int, int, int, java.lang.String, java.lang.String, int, int, int, int) throws android.os.RemoteException;

    public abstract void ipSecUpdateTunnelInterface(java.lang.String, java.lang.String, java.lang.String, int, int, int) throws android.os.RemoteException;

    public abstract void ipfwdAddInterfaceForward(java.lang.String, java.lang.String) throws android.os.RemoteException;

    public abstract void ipfwdDisableForwarding(java.lang.String) throws android.os.RemoteException;

    public abstract void ipfwdEnableForwarding(java.lang.String) throws android.os.RemoteException;

    public abstract boolean ipfwdEnabled() throws android.os.RemoteException;

    public abstract java.lang.String[] ipfwdGetRequesterList() throws android.os.RemoteException;

    public abstract void ipfwdRemoveInterfaceForward(java.lang.String, java.lang.String) throws android.os.RemoteException;

    public abstract boolean isAlive() throws android.os.RemoteException;

    public abstract void networkAddInterface(int, java.lang.String) throws android.os.RemoteException;

    public abstract void networkAddLegacyRoute(int, java.lang.String, java.lang.String, java.lang.String, int) throws android.os.RemoteException;

    public abstract void networkAddRoute(int, java.lang.String, java.lang.String, java.lang.String) throws android.os.RemoteException;

    public abstract void networkAddRouteParcel(int, android.net.RouteInfoParcel) throws android.os.RemoteException;

    public abstract void networkAddUidRanges(int, android.net.UidRangeParcel[]) throws android.os.RemoteException;

    public abstract boolean networkCanProtect(int) throws android.os.RemoteException;

    public abstract void networkClearDefault() throws android.os.RemoteException;

    public abstract void networkClearPermissionForUser(int[]) throws android.os.RemoteException;

    public abstract void networkCreatePhysical(int, int) throws android.os.RemoteException;

    public abstract void networkCreateVpn(int, boolean) throws android.os.RemoteException;

    public abstract void networkDestroy(int) throws android.os.RemoteException;

    public abstract int networkGetDefault() throws android.os.RemoteException;

    public abstract void networkRejectNonSecureVpn(boolean, android.net.UidRangeParcel[]) throws android.os.RemoteException;

    public abstract void networkRemoveInterface(int, java.lang.String) throws android.os.RemoteException;

    public abstract void networkRemoveLegacyRoute(int, java.lang.String, java.lang.String, java.lang.String, int) throws android.os.RemoteException;

    public abstract void networkRemoveRoute(int, java.lang.String, java.lang.String, java.lang.String) throws android.os.RemoteException;

    public abstract void networkRemoveRouteParcel(int, android.net.RouteInfoParcel) throws android.os.RemoteException;

    public abstract void networkRemoveUidRanges(int, android.net.UidRangeParcel[]) throws android.os.RemoteException;

    public abstract void networkSetDefault(int) throws android.os.RemoteException;

    public abstract void networkSetPermissionForNetwork(int, int) throws android.os.RemoteException;

    public abstract void networkSetPermissionForUser(int, int[]) throws android.os.RemoteException;

    public abstract void networkSetProtectAllow(int) throws android.os.RemoteException;

    public abstract void networkSetProtectDeny(int) throws android.os.RemoteException;

    public abstract void networkUpdateRouteParcel(int, android.net.RouteInfoParcel) throws android.os.RemoteException;

    public abstract void registerUnsolicitedEventListener(android.net.INetdUnsolicitedEventListener) throws android.os.RemoteException;

    public abstract void setIPv6AddrGenMode(java.lang.String, int) throws android.os.RemoteException;

    public abstract void setProcSysNet(int, int, java.lang.String, java.lang.String, java.lang.String) throws android.os.RemoteException;

    public abstract void setTcpRWmemorySize(java.lang.String, java.lang.String) throws android.os.RemoteException;

    public abstract void socketDestroy(android.net.UidRangeParcel[], int[]) throws android.os.RemoteException;

    public abstract void strictUidCleartextPenalty(int, int) throws android.os.RemoteException;

    public abstract void tetherAddForward(java.lang.String, java.lang.String) throws android.os.RemoteException;

    public abstract boolean tetherApplyDnsInterfaces() throws android.os.RemoteException;

    public abstract java.lang.String[] tetherDnsList() throws android.os.RemoteException;

    public abstract void tetherDnsSet(int, java.lang.String[]) throws android.os.RemoteException;

    public abstract android.net.TetherStatsParcel[] tetherGetStats() throws android.os.RemoteException;

    public abstract void tetherInterfaceAdd(java.lang.String) throws android.os.RemoteException;

    public abstract java.lang.String[] tetherInterfaceList() throws android.os.RemoteException;

    public abstract void tetherInterfaceRemove(java.lang.String) throws android.os.RemoteException;

    public abstract boolean tetherIsEnabled() throws android.os.RemoteException;

    public abstract android.net.TetherStatsParcel tetherOffloadGetAndClearStats(int) throws android.os.RemoteException;

    public abstract android.net.TetherStatsParcel[] tetherOffloadGetStats() throws android.os.RemoteException;

    public abstract void tetherOffloadRuleAdd(android.net.TetherOffloadRuleParcel) throws android.os.RemoteException;

    public abstract void tetherOffloadRuleRemove(android.net.TetherOffloadRuleParcel) throws android.os.RemoteException;

    public abstract void tetherOffloadSetInterfaceQuota(int, long) throws android.os.RemoteException;

    public abstract void tetherRemoveForward(java.lang.String, java.lang.String) throws android.os.RemoteException;

    public abstract void tetherStart(java.lang.String[]) throws android.os.RemoteException;

    public abstract void tetherStartWithConfiguration(android.net.TetherConfigParcel) throws android.os.RemoteException;

    public abstract void tetherStop() throws android.os.RemoteException;

    public abstract void trafficSetNetPermForUids(int, int[]) throws android.os.RemoteException;

    public abstract void trafficSwapActiveStatsMap() throws android.os.RemoteException;

    public abstract void wakeupAddInterface(java.lang.String, java.lang.String, int, int) throws android.os.RemoteException;

    public abstract void wakeupDelInterface(java.lang.String, java.lang.String, int, int) throws android.os.RemoteException;

    public static void <clinit>()
    {
        <android.net.INetd: int VERSION> = 4;

        <android.net.INetd: int PERMISSION_UPDATE_DEVICE_STATS> = 8;

        <android.net.INetd: int PERMISSION_UNINSTALLED> = -1;

        <android.net.INetd: int PERMISSION_SYSTEM> = 2;

        <android.net.INetd: int PERMISSION_NONE> = 0;

        <android.net.INetd: int PERMISSION_NETWORK> = 1;

        <android.net.INetd: int PERMISSION_INTERNET> = 4;

        <android.net.INetd: int PENALTY_POLICY_REJECT> = 3;

        <android.net.INetd: int PENALTY_POLICY_LOG> = 2;

        <android.net.INetd: int PENALTY_POLICY_ACCEPT> = 1;

        <android.net.INetd: int NO_PERMISSIONS> = 0;

        <android.net.INetd: java.lang.String NEXTHOP_UNREACHABLE> = "unreachable";

        <android.net.INetd: java.lang.String NEXTHOP_THROW> = "throw";

        <android.net.INetd: java.lang.String NEXTHOP_NONE> = "";

        <android.net.INetd: int NEIGH> = 2;

        <android.net.INetd: int LOCAL_NET_ID> = 99;

        <android.net.INetd: int IPV6_ADDR_GEN_MODE_STABLE_PRIVACY> = 2;

        <android.net.INetd: int IPV6_ADDR_GEN_MODE_RANDOM> = 3;

        <android.net.INetd: int IPV6_ADDR_GEN_MODE_NONE> = 1;

        <android.net.INetd: int IPV6_ADDR_GEN_MODE_EUI64> = 0;

        <android.net.INetd: int IPV6_ADDR_GEN_MODE_DEFAULT> = 0;

        <android.net.INetd: int IPV6> = 6;

        <android.net.INetd: int IPV4> = 4;

        <android.net.INetd: java.lang.String IPSEC_INTERFACE_PREFIX> = "ipsec";

        <android.net.INetd: java.lang.String IF_STATE_UP> = "up";

        <android.net.INetd: java.lang.String IF_STATE_DOWN> = "down";

        <android.net.INetd: java.lang.String IF_FLAG_RUNNING> = "running";

        <android.net.INetd: java.lang.String IF_FLAG_POINTOPOINT> = "point-to-point";

        <android.net.INetd: java.lang.String IF_FLAG_MULTICAST> = "multicast";

        <android.net.INetd: java.lang.String IF_FLAG_LOOPBACK> = "loopback";

        <android.net.INetd: java.lang.String IF_FLAG_BROADCAST> = "broadcast";

        <android.net.INetd: java.lang.String HASH> = "63adaa5098e4d8621e90c5a84f7cb93505c79311";

        <android.net.INetd: int FIREWALL_WHITELIST> = 0;

        <android.net.INetd: int FIREWALL_RULE_DENY> = 2;

        <android.net.INetd: int FIREWALL_RULE_ALLOW> = 1;

        <android.net.INetd: int FIREWALL_CHAIN_STANDBY> = 2;

        <android.net.INetd: int FIREWALL_CHAIN_POWERSAVE> = 3;

        <android.net.INetd: int FIREWALL_CHAIN_NONE> = 0;

        <android.net.INetd: int FIREWALL_CHAIN_DOZABLE> = 1;

        <android.net.INetd: int FIREWALL_BLACKLIST> = 1;

        <android.net.INetd: int CONF> = 1;

        return;
    }
}
