public class android.net.INetworkPolicyManager$Default extends java.lang.Object implements android.net.INetworkPolicyManager
{

    public void <init>()
    {
        android.net.INetworkPolicyManager$Default r0;

        r0 := @this: android.net.INetworkPolicyManager$Default;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void addUidPolicy(int, int) throws android.os.RemoteException
    {
        android.net.INetworkPolicyManager$Default r0;
        int i0, i1;

        r0 := @this: android.net.INetworkPolicyManager$Default;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return;
    }

    public android.os.IBinder asBinder()
    {
        android.net.INetworkPolicyManager$Default r0;

        r0 := @this: android.net.INetworkPolicyManager$Default;

        return null;
    }

    public void factoryReset(java.lang.String) throws android.os.RemoteException
    {
        android.net.INetworkPolicyManager$Default r0;
        java.lang.String r1;

        r0 := @this: android.net.INetworkPolicyManager$Default;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public android.net.NetworkPolicy[] getNetworkPolicies(java.lang.String) throws android.os.RemoteException
    {
        android.net.INetworkPolicyManager$Default r0;
        java.lang.String r1;

        r0 := @this: android.net.INetworkPolicyManager$Default;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public android.net.NetworkQuotaInfo getNetworkQuotaInfo(android.net.NetworkState) throws android.os.RemoteException
    {
        android.net.INetworkPolicyManager$Default r0;
        android.net.NetworkState r1;

        r0 := @this: android.net.INetworkPolicyManager$Default;

        r1 := @parameter0: android.net.NetworkState;

        return null;
    }

    public boolean getRestrictBackground() throws android.os.RemoteException
    {
        android.net.INetworkPolicyManager$Default r0;

        r0 := @this: android.net.INetworkPolicyManager$Default;

        return 0;
    }

    public int getRestrictBackgroundByCaller() throws android.os.RemoteException
    {
        android.net.INetworkPolicyManager$Default r0;

        r0 := @this: android.net.INetworkPolicyManager$Default;

        return 0;
    }

    public android.telephony.SubscriptionPlan[] getSubscriptionPlans(int, java.lang.String) throws android.os.RemoteException
    {
        android.net.INetworkPolicyManager$Default r0;
        int i0;
        java.lang.String r1;

        r0 := @this: android.net.INetworkPolicyManager$Default;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        return null;
    }

    public java.lang.String getSubscriptionPlansOwner(int) throws android.os.RemoteException
    {
        android.net.INetworkPolicyManager$Default r0;
        int i0;

        r0 := @this: android.net.INetworkPolicyManager$Default;

        i0 := @parameter0: int;

        return null;
    }

    public int getUidPolicy(int) throws android.os.RemoteException
    {
        android.net.INetworkPolicyManager$Default r0;
        int i0;

        r0 := @this: android.net.INetworkPolicyManager$Default;

        i0 := @parameter0: int;

        return 0;
    }

    public int[] getUidsWithPolicy(int) throws android.os.RemoteException
    {
        android.net.INetworkPolicyManager$Default r0;
        int i0;

        r0 := @this: android.net.INetworkPolicyManager$Default;

        i0 := @parameter0: int;

        return null;
    }

    public boolean isUidNetworkingBlocked(int, boolean) throws android.os.RemoteException
    {
        android.net.INetworkPolicyManager$Default r0;
        int i0;
        boolean z0;

        r0 := @this: android.net.INetworkPolicyManager$Default;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        return 0;
    }

    public void registerListener(android.net.INetworkPolicyListener) throws android.os.RemoteException
    {
        android.net.INetworkPolicyManager$Default r0;
        android.net.INetworkPolicyListener r1;

        r0 := @this: android.net.INetworkPolicyManager$Default;

        r1 := @parameter0: android.net.INetworkPolicyListener;

        return;
    }

    public void removeUidPolicy(int, int) throws android.os.RemoteException
    {
        android.net.INetworkPolicyManager$Default r0;
        int i0, i1;

        r0 := @this: android.net.INetworkPolicyManager$Default;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return;
    }

    public void setDeviceIdleMode(boolean) throws android.os.RemoteException
    {
        android.net.INetworkPolicyManager$Default r0;
        boolean z0;

        r0 := @this: android.net.INetworkPolicyManager$Default;

        z0 := @parameter0: boolean;

        return;
    }

    public void setNetworkPolicies(android.net.NetworkPolicy[]) throws android.os.RemoteException
    {
        android.net.INetworkPolicyManager$Default r0;
        android.net.NetworkPolicy[] r1;

        r0 := @this: android.net.INetworkPolicyManager$Default;

        r1 := @parameter0: android.net.NetworkPolicy[];

        return;
    }

    public void setRestrictBackground(boolean) throws android.os.RemoteException
    {
        android.net.INetworkPolicyManager$Default r0;
        boolean z0;

        r0 := @this: android.net.INetworkPolicyManager$Default;

        z0 := @parameter0: boolean;

        return;
    }

    public void setSubscriptionOverride(int, int, int, long, java.lang.String) throws android.os.RemoteException
    {
        android.net.INetworkPolicyManager$Default r0;
        int i0, i1, i2;
        long l3;
        java.lang.String r1;

        r0 := @this: android.net.INetworkPolicyManager$Default;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        l3 := @parameter3: long;

        r1 := @parameter4: java.lang.String;

        return;
    }

    public void setSubscriptionPlans(int, android.telephony.SubscriptionPlan[], java.lang.String) throws android.os.RemoteException
    {
        android.net.INetworkPolicyManager$Default r0;
        int i0;
        android.telephony.SubscriptionPlan[] r1;
        java.lang.String r2;

        r0 := @this: android.net.INetworkPolicyManager$Default;

        i0 := @parameter0: int;

        r1 := @parameter1: android.telephony.SubscriptionPlan[];

        r2 := @parameter2: java.lang.String;

        return;
    }

    public void setUidPolicy(int, int) throws android.os.RemoteException
    {
        android.net.INetworkPolicyManager$Default r0;
        int i0, i1;

        r0 := @this: android.net.INetworkPolicyManager$Default;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return;
    }

    public void setWifiMeteredOverride(java.lang.String, int) throws android.os.RemoteException
    {
        android.net.INetworkPolicyManager$Default r0;
        java.lang.String r1;
        int i0;

        r0 := @this: android.net.INetworkPolicyManager$Default;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        return;
    }

    public void snoozeLimit(android.net.NetworkTemplate) throws android.os.RemoteException
    {
        android.net.INetworkPolicyManager$Default r0;
        android.net.NetworkTemplate r1;

        r0 := @this: android.net.INetworkPolicyManager$Default;

        r1 := @parameter0: android.net.NetworkTemplate;

        return;
    }

    public void unregisterListener(android.net.INetworkPolicyListener) throws android.os.RemoteException
    {
        android.net.INetworkPolicyManager$Default r0;
        android.net.INetworkPolicyListener r1;

        r0 := @this: android.net.INetworkPolicyManager$Default;

        r1 := @parameter0: android.net.INetworkPolicyListener;

        return;
    }
}
