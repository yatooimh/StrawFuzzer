class android.net.INetworkPolicyManager$Stub$Proxy extends java.lang.Object implements android.net.INetworkPolicyManager
{
    public static android.net.INetworkPolicyManager sDefaultImpl;
    private android.os.IBinder mRemote;

    void <init>(android.os.IBinder)
    {
        android.net.INetworkPolicyManager$Stub$Proxy r0;
        android.os.IBinder r1;

        r0 := @this: android.net.INetworkPolicyManager$Stub$Proxy;

        r1 := @parameter0: android.os.IBinder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.net.INetworkPolicyManager$Stub$Proxy: android.os.IBinder mRemote> = r1;

        return;
    }

    public void addUidPolicy(int, int) throws android.os.RemoteException
    {
        android.net.INetworkPolicyManager$Stub$Proxy r0;
        int i0, i1;
        android.os.Parcel r1, r2;
        android.os.IBinder $r4;
        boolean $z0;
        android.net.INetworkPolicyManager $r5, $r6;
        java.lang.Throwable $r7;

        r0 := @this: android.net.INetworkPolicyManager$Stub$Proxy;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.net.INetworkPolicyManager");

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i0);

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i1);

        $r4 = r0.<android.net.INetworkPolicyManager$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(2, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r5 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager getDefaultImpl()>();

        if $r5 == null goto label3;

        $r6 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager getDefaultImpl()>();

        interfaceinvoke $r6.<android.net.INetworkPolicyManager: void addUidPolicy(int,int)>(i0, i1);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label5:
        $r7 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public android.os.IBinder asBinder()
    {
        android.net.INetworkPolicyManager$Stub$Proxy r0;
        android.os.IBinder $r1;

        r0 := @this: android.net.INetworkPolicyManager$Stub$Proxy;

        $r1 = r0.<android.net.INetworkPolicyManager$Stub$Proxy: android.os.IBinder mRemote>;

        return $r1;
    }

    public void factoryReset(java.lang.String) throws android.os.RemoteException
    {
        android.net.INetworkPolicyManager$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        boolean $z0;
        android.net.INetworkPolicyManager $r4, $r5;
        java.lang.Throwable $r6;
        java.lang.String r7;

        r0 := @this: android.net.INetworkPolicyManager$Stub$Proxy;

        r7 := @parameter0: java.lang.String;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.net.INetworkPolicyManager");

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>(r7);

        $r3 = r0.<android.net.INetworkPolicyManager$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(21, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r4 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager getDefaultImpl()>();

        if $r4 == null goto label3;

        $r5 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager getDefaultImpl()>();

        interfaceinvoke $r5.<android.net.INetworkPolicyManager: void factoryReset(java.lang.String)>(r7);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label5:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public java.lang.String getInterfaceDescriptor()
    {
        android.net.INetworkPolicyManager$Stub$Proxy r0;

        r0 := @this: android.net.INetworkPolicyManager$Stub$Proxy;

        return "android.net.INetworkPolicyManager";
    }

    public android.net.NetworkPolicy[] getNetworkPolicies(java.lang.String) throws android.os.RemoteException
    {
        android.net.INetworkPolicyManager$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        boolean $z0;
        android.os.Parcelable$Creator $r4;
        java.lang.Object[] $r5;
        android.net.INetworkPolicyManager $r6, $r7;
        java.lang.Throwable $r8;
        java.lang.String r9;
        android.net.NetworkPolicy[] r10, r11;

        r0 := @this: android.net.INetworkPolicyManager$Stub$Proxy;

        r9 := @parameter0: java.lang.String;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.net.INetworkPolicyManager");

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>(r9);

        $r3 = r0.<android.net.INetworkPolicyManager$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(9, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r6 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager getDefaultImpl()>();

        if $r6 == null goto label3;

        $r7 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager getDefaultImpl()>();

        r10 = interfaceinvoke $r7.<android.net.INetworkPolicyManager: android.net.NetworkPolicy[] getNetworkPolicies(java.lang.String)>(r9);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return r10;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

        $r4 = <android.net.NetworkPolicy: android.os.Parcelable$Creator CREATOR>;

        $r5 = virtualinvoke r2.<android.os.Parcel: java.lang.Object[] createTypedArray(android.os.Parcelable$Creator)>($r4);

        r11 = (android.net.NetworkPolicy[]) $r5;

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return r11;

     label5:
        $r8 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public android.net.NetworkQuotaInfo getNetworkQuotaInfo(android.net.NetworkState) throws android.os.RemoteException
    {
        android.net.INetworkPolicyManager$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        boolean $z0;
        int $i0;
        android.os.Parcelable$Creator $r4;
        java.lang.Object $r5;
        android.net.INetworkPolicyManager $r6, $r7;
        java.lang.Throwable $r8;
        android.net.NetworkState r9;
        android.net.NetworkQuotaInfo r10, r11;

        r0 := @this: android.net.INetworkPolicyManager$Stub$Proxy;

        r9 := @parameter0: android.net.NetworkState;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label01:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.net.INetworkPolicyManager");

     label02:
        if r9 == null goto label05;

     label03:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(1);

        virtualinvoke r9.<android.net.NetworkState: void writeToParcel(android.os.Parcel,int)>(r1, 0);

     label04:
        goto label06;

     label05:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(0);

     label06:
        $r3 = r0.<android.net.INetworkPolicyManager$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(16, r1, r2, 0);

        if $z0 != 0 goto label08;

        $r6 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager getDefaultImpl()>();

        if $r6 == null goto label08;

        $r7 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager getDefaultImpl()>();

        r10 = interfaceinvoke $r7.<android.net.INetworkPolicyManager: android.net.NetworkQuotaInfo getNetworkQuotaInfo(android.net.NetworkState)>(r9);

     label07:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return r10;

     label08:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

        $i0 = virtualinvoke r2.<android.os.Parcel: int readInt()>();

        if $i0 == 0 goto label10;

        $r4 = <android.net.NetworkQuotaInfo: android.os.Parcelable$Creator CREATOR>;

        $r5 = interfaceinvoke $r4.<android.os.Parcelable$Creator: java.lang.Object createFromParcel(android.os.Parcel)>(r2);

        r11 = (android.net.NetworkQuotaInfo) $r5;

     label09:
        goto label11;

     label10:
        r11 = null;

     label11:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return r11;

     label12:
        $r8 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
    }

    public boolean getRestrictBackground() throws android.os.RemoteException
    {
        android.net.INetworkPolicyManager$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        int i0;
        boolean $z0, z1, z2;
        android.net.INetworkPolicyManager $r3, $r4;
        java.lang.Throwable $r5;
        android.os.IBinder r6;

        r0 := @this: android.net.INetworkPolicyManager$Stub$Proxy;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.net.INetworkPolicyManager");

        r6 = r0.<android.net.INetworkPolicyManager$Stub$Proxy: android.os.IBinder mRemote>;

     label2:
        z1 = 0;

     label3:
        $z0 = interfaceinvoke r6.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(12, r1, r2, 0);

        if $z0 != 0 goto label5;

        $r3 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager getDefaultImpl()>();

        if $r3 == null goto label5;

        $r4 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager getDefaultImpl()>();

        z2 = interfaceinvoke $r4.<android.net.INetworkPolicyManager: boolean getRestrictBackground()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return z2;

     label5:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

        i0 = virtualinvoke r2.<android.os.Parcel: int readInt()>();

     label6:
        if i0 == 0 goto label7;

        z1 = 1;

     label7:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return z1;

     label8:
        $r5 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label3 to label4 with label8;
        catch java.lang.Throwable from label5 to label6 with label8;
    }

    public int getRestrictBackgroundByCaller() throws android.os.RemoteException
    {
        android.net.INetworkPolicyManager$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r4;
        boolean $z0;
        android.net.INetworkPolicyManager $r5, $r6;
        java.lang.Throwable $r7;
        int i0, i1;

        r0 := @this: android.net.INetworkPolicyManager$Stub$Proxy;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.net.INetworkPolicyManager");

        $r4 = r0.<android.net.INetworkPolicyManager$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(13, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r5 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager getDefaultImpl()>();

        if $r5 == null goto label3;

        $r6 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager getDefaultImpl()>();

        i0 = interfaceinvoke $r6.<android.net.INetworkPolicyManager: int getRestrictBackgroundByCaller()>();

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return i0;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

        i1 = virtualinvoke r2.<android.os.Parcel: int readInt()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return i1;

     label5:
        $r7 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public android.telephony.SubscriptionPlan[] getSubscriptionPlans(int, java.lang.String) throws android.os.RemoteException
    {
        android.net.INetworkPolicyManager$Stub$Proxy r0;
        int i0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        boolean $z0;
        android.os.Parcelable$Creator $r4;
        java.lang.Object[] $r5;
        android.net.INetworkPolicyManager $r6, $r7;
        java.lang.Throwable $r8;
        java.lang.String r9;
        android.telephony.SubscriptionPlan[] r10, r11;

        r0 := @this: android.net.INetworkPolicyManager$Stub$Proxy;

        i0 := @parameter0: int;

        r9 := @parameter1: java.lang.String;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.net.INetworkPolicyManager");

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i0);

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>(r9);

        $r3 = r0.<android.net.INetworkPolicyManager$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(17, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r6 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager getDefaultImpl()>();

        if $r6 == null goto label3;

        $r7 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager getDefaultImpl()>();

        r10 = interfaceinvoke $r7.<android.net.INetworkPolicyManager: android.telephony.SubscriptionPlan[] getSubscriptionPlans(int,java.lang.String)>(i0, r9);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return r10;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

        $r4 = <android.telephony.SubscriptionPlan: android.os.Parcelable$Creator CREATOR>;

        $r5 = virtualinvoke r2.<android.os.Parcel: java.lang.Object[] createTypedArray(android.os.Parcelable$Creator)>($r4);

        r11 = (android.telephony.SubscriptionPlan[]) $r5;

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return r11;

     label5:
        $r8 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public java.lang.String getSubscriptionPlansOwner(int) throws android.os.RemoteException
    {
        android.net.INetworkPolicyManager$Stub$Proxy r0;
        int i0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        boolean $z0;
        android.net.INetworkPolicyManager $r4, $r5;
        java.lang.Throwable $r6;
        java.lang.String r7, r8;

        r0 := @this: android.net.INetworkPolicyManager$Stub$Proxy;

        i0 := @parameter0: int;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.net.INetworkPolicyManager");

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i0);

        $r3 = r0.<android.net.INetworkPolicyManager$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(19, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r4 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager getDefaultImpl()>();

        if $r4 == null goto label3;

        $r5 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager getDefaultImpl()>();

        r7 = interfaceinvoke $r5.<android.net.INetworkPolicyManager: java.lang.String getSubscriptionPlansOwner(int)>(i0);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return r7;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

        r8 = virtualinvoke r2.<android.os.Parcel: java.lang.String readString()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return r8;

     label5:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public int getUidPolicy(int) throws android.os.RemoteException
    {
        android.net.INetworkPolicyManager$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r4;
        boolean $z0;
        android.net.INetworkPolicyManager $r5, $r6;
        java.lang.Throwable $r7;
        int i0, i1, i2;

        r0 := @this: android.net.INetworkPolicyManager$Stub$Proxy;

        i0 := @parameter0: int;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.net.INetworkPolicyManager");

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i0);

        $r4 = r0.<android.net.INetworkPolicyManager$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(4, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r5 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager getDefaultImpl()>();

        if $r5 == null goto label3;

        $r6 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager getDefaultImpl()>();

        i1 = interfaceinvoke $r6.<android.net.INetworkPolicyManager: int getUidPolicy(int)>(i0);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return i1;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

        i2 = virtualinvoke r2.<android.os.Parcel: int readInt()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return i2;

     label5:
        $r7 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public int[] getUidsWithPolicy(int) throws android.os.RemoteException
    {
        android.net.INetworkPolicyManager$Stub$Proxy r0;
        int i0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        boolean $z0;
        android.net.INetworkPolicyManager $r4, $r5;
        java.lang.Throwable $r6;
        int[] r7, r8;

        r0 := @this: android.net.INetworkPolicyManager$Stub$Proxy;

        i0 := @parameter0: int;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.net.INetworkPolicyManager");

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i0);

        $r3 = r0.<android.net.INetworkPolicyManager$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(5, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r4 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager getDefaultImpl()>();

        if $r4 == null goto label3;

        $r5 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager getDefaultImpl()>();

        r7 = interfaceinvoke $r5.<android.net.INetworkPolicyManager: int[] getUidsWithPolicy(int)>(i0);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return r7;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

        r8 = virtualinvoke r2.<android.os.Parcel: int[] createIntArray()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return r8;

     label5:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public boolean isUidNetworkingBlocked(int, boolean) throws android.os.RemoteException
    {
        android.net.INetworkPolicyManager$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r4;
        boolean $z1, z2, z3, z4;
        android.net.INetworkPolicyManager $r5, $r6;
        java.lang.Throwable $r7;
        int i0, i2;
        byte b1;

        r0 := @this: android.net.INetworkPolicyManager$Stub$Proxy;

        i0 := @parameter0: int;

        z2 := @parameter1: boolean;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label01:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.net.INetworkPolicyManager");

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i0);

     label02:
        if z2 == 0 goto label03;

        b1 = 1;

        goto label04;

     label03:
        b1 = 0;

     label04:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(b1);

        $r4 = r0.<android.net.INetworkPolicyManager$Stub$Proxy: android.os.IBinder mRemote>;

        $z1 = interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(22, r1, r2, 0);

        if $z1 != 0 goto label06;

        $r5 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager getDefaultImpl()>();

        if $r5 == null goto label06;

        $r6 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager getDefaultImpl()>();

        z3 = interfaceinvoke $r6.<android.net.INetworkPolicyManager: boolean isUidNetworkingBlocked(int,boolean)>(i0, z2);

     label05:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return z3;

     label06:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

        i2 = virtualinvoke r2.<android.os.Parcel: int readInt()>();

     label07:
        if i2 == 0 goto label08;

        z4 = 1;

        goto label09;

     label08:
        z4 = 0;

     label09:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return z4;

     label10:
        $r7 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
    }

    public void registerListener(android.net.INetworkPolicyListener) throws android.os.RemoteException
    {
        android.net.INetworkPolicyManager$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3, r8;
        boolean $z0;
        android.net.INetworkPolicyManager $r4, $r5;
        java.lang.Throwable $r6;
        android.net.INetworkPolicyListener r7;

        r0 := @this: android.net.INetworkPolicyManager$Stub$Proxy;

        r7 := @parameter0: android.net.INetworkPolicyListener;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label01:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.net.INetworkPolicyManager");

     label02:
        if r7 == null goto label05;

     label03:
        r8 = interfaceinvoke r7.<android.net.INetworkPolicyListener: android.os.IBinder asBinder()>();

     label04:
        goto label06;

     label05:
        r8 = null;

     label06:
        virtualinvoke r1.<android.os.Parcel: void writeStrongBinder(android.os.IBinder)>(r8);

        $r3 = r0.<android.net.INetworkPolicyManager$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(6, r1, r2, 0);

        if $z0 != 0 goto label08;

        $r4 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager getDefaultImpl()>();

        if $r4 == null goto label08;

        $r5 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager getDefaultImpl()>();

        interfaceinvoke $r5.<android.net.INetworkPolicyManager: void registerListener(android.net.INetworkPolicyListener)>(r7);

     label07:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label08:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label09:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label10:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    public void removeUidPolicy(int, int) throws android.os.RemoteException
    {
        android.net.INetworkPolicyManager$Stub$Proxy r0;
        int i0, i1;
        android.os.Parcel r1, r2;
        android.os.IBinder $r4;
        boolean $z0;
        android.net.INetworkPolicyManager $r5, $r6;
        java.lang.Throwable $r7;

        r0 := @this: android.net.INetworkPolicyManager$Stub$Proxy;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.net.INetworkPolicyManager");

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i0);

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i1);

        $r4 = r0.<android.net.INetworkPolicyManager$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(3, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r5 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager getDefaultImpl()>();

        if $r5 == null goto label3;

        $r6 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager getDefaultImpl()>();

        interfaceinvoke $r6.<android.net.INetworkPolicyManager: void removeUidPolicy(int,int)>(i0, i1);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label5:
        $r7 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void setDeviceIdleMode(boolean) throws android.os.RemoteException
    {
        android.net.INetworkPolicyManager$Stub$Proxy r0;
        boolean z0, $z1;
        android.os.Parcel r1, r2;
        android.os.IBinder $r4;
        android.net.INetworkPolicyManager $r5, $r6;
        java.lang.Throwable $r7;
        byte b0;

        r0 := @this: android.net.INetworkPolicyManager$Stub$Proxy;

        z0 := @parameter0: boolean;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.net.INetworkPolicyManager");

     label2:
        if z0 == 0 goto label3;

        b0 = 1;

        goto label4;

     label3:
        b0 = 0;

     label4:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(b0);

        $r4 = r0.<android.net.INetworkPolicyManager$Stub$Proxy: android.os.IBinder mRemote>;

        $z1 = interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(14, r1, r2, 0);

        if $z1 != 0 goto label6;

        $r5 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager getDefaultImpl()>();

        if $r5 == null goto label6;

        $r6 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager getDefaultImpl()>();

        interfaceinvoke $r6.<android.net.INetworkPolicyManager: void setDeviceIdleMode(boolean)>(z0);

     label5:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label6:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label7:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label8:
        $r7 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label4 to label5 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    public void setNetworkPolicies(android.net.NetworkPolicy[]) throws android.os.RemoteException
    {
        android.net.INetworkPolicyManager$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        boolean $z0;
        android.net.INetworkPolicyManager $r4, $r5;
        java.lang.Throwable $r6;
        android.net.NetworkPolicy[] r7;

        r0 := @this: android.net.INetworkPolicyManager$Stub$Proxy;

        r7 := @parameter0: android.net.NetworkPolicy[];

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.net.INetworkPolicyManager");

        virtualinvoke r1.<android.os.Parcel: void writeTypedArray(android.os.Parcelable[],int)>(r7, 0);

        $r3 = r0.<android.net.INetworkPolicyManager$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(8, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r4 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager getDefaultImpl()>();

        if $r4 == null goto label3;

        $r5 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager getDefaultImpl()>();

        interfaceinvoke $r5.<android.net.INetworkPolicyManager: void setNetworkPolicies(android.net.NetworkPolicy[])>(r7);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label5:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void setRestrictBackground(boolean) throws android.os.RemoteException
    {
        android.net.INetworkPolicyManager$Stub$Proxy r0;
        boolean z0, $z1;
        android.os.Parcel r1, r2;
        android.os.IBinder $r4;
        android.net.INetworkPolicyManager $r5, $r6;
        java.lang.Throwable $r7;
        byte b0;

        r0 := @this: android.net.INetworkPolicyManager$Stub$Proxy;

        z0 := @parameter0: boolean;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.net.INetworkPolicyManager");

     label2:
        if z0 == 0 goto label3;

        b0 = 1;

        goto label4;

     label3:
        b0 = 0;

     label4:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(b0);

        $r4 = r0.<android.net.INetworkPolicyManager$Stub$Proxy: android.os.IBinder mRemote>;

        $z1 = interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(11, r1, r2, 0);

        if $z1 != 0 goto label6;

        $r5 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager getDefaultImpl()>();

        if $r5 == null goto label6;

        $r6 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager getDefaultImpl()>();

        interfaceinvoke $r6.<android.net.INetworkPolicyManager: void setRestrictBackground(boolean)>(z0);

     label5:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label6:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label7:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label8:
        $r7 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label4 to label5 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    public void setSubscriptionOverride(int, int, int, long, java.lang.String) throws android.os.RemoteException
    {
        android.net.INetworkPolicyManager$Stub$Proxy r0;
        int i0, i1, i2;
        long l3;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        boolean $z0;
        android.net.INetworkPolicyManager $r4, $r5;
        java.lang.Throwable $r6, $r7, $r8, $r9, $r10, $r11, r13;
        java.lang.String r12;

        r0 := @this: android.net.INetworkPolicyManager$Stub$Proxy;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        l3 := @parameter3: long;

        r12 := @parameter4: java.lang.String;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label01:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.net.INetworkPolicyManager");

     label02:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i0);

     label03:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i1);

     label04:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i2);

     label05:
        virtualinvoke r1.<android.os.Parcel: void writeLong(long)>(l3);

     label06:
        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>(r12);

        $r3 = r0.<android.net.INetworkPolicyManager$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(20, r1, r2, 0);

        if $z0 != 0 goto label08;

        $r4 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager getDefaultImpl()>();

        if $r4 == null goto label08;

        $r5 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager getDefaultImpl()>();

        interfaceinvoke $r5.<android.net.INetworkPolicyManager: void setSubscriptionOverride(int,int,int,long,java.lang.String)>(i0, i1, i2, l3, r12);

     label07:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label08:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label09:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label10:
        $r6 := @caughtexception;

        r13 = $r6;

        goto label16;

     label11:
        $r8 := @caughtexception;

        r13 = $r8;

        goto label16;

     label12:
        $r7 := @caughtexception;

        r13 = $r7;

        goto label16;

     label13:
        $r9 := @caughtexception;

        r13 = $r9;

        goto label16;

     label14:
        $r11 := @caughtexception;

        r13 = $r11;

        goto label16;

     label15:
        $r10 := @caughtexception;

        r13 = $r10;

     label16:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw r13;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    public void setSubscriptionPlans(int, android.telephony.SubscriptionPlan[], java.lang.String) throws android.os.RemoteException
    {
        android.net.INetworkPolicyManager$Stub$Proxy r0;
        int i0;
        java.lang.String r1;
        android.os.Parcel r2, r3;
        android.os.IBinder $r4;
        boolean $z0;
        android.net.INetworkPolicyManager $r5, $r6;
        java.lang.Throwable $r7;
        android.telephony.SubscriptionPlan[] r8;

        r0 := @this: android.net.INetworkPolicyManager$Stub$Proxy;

        i0 := @parameter0: int;

        r8 := @parameter1: android.telephony.SubscriptionPlan[];

        r1 := @parameter2: java.lang.String;

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r3 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r2.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.net.INetworkPolicyManager");

        virtualinvoke r2.<android.os.Parcel: void writeInt(int)>(i0);

        virtualinvoke r2.<android.os.Parcel: void writeTypedArray(android.os.Parcelable[],int)>(r8, 0);

        virtualinvoke r2.<android.os.Parcel: void writeString(java.lang.String)>(r1);

        $r4 = r0.<android.net.INetworkPolicyManager$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(18, r2, r3, 0);

        if $z0 != 0 goto label3;

        $r5 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager getDefaultImpl()>();

        if $r5 == null goto label3;

        $r6 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager getDefaultImpl()>();

        interfaceinvoke $r6.<android.net.INetworkPolicyManager: void setSubscriptionPlans(int,android.telephony.SubscriptionPlan[],java.lang.String)>(i0, r8, r1);

     label2:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r3.<android.os.Parcel: void readException()>();

     label4:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        return;

     label5:
        $r7 := @caughtexception;

        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void setUidPolicy(int, int) throws android.os.RemoteException
    {
        android.net.INetworkPolicyManager$Stub$Proxy r0;
        int i0, i1;
        android.os.Parcel r1, r2;
        android.os.IBinder $r4;
        boolean $z0;
        android.net.INetworkPolicyManager $r5, $r6;
        java.lang.Throwable $r7;

        r0 := @this: android.net.INetworkPolicyManager$Stub$Proxy;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.net.INetworkPolicyManager");

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i0);

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i1);

        $r4 = r0.<android.net.INetworkPolicyManager$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(1, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r5 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager getDefaultImpl()>();

        if $r5 == null goto label3;

        $r6 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager getDefaultImpl()>();

        interfaceinvoke $r6.<android.net.INetworkPolicyManager: void setUidPolicy(int,int)>(i0, i1);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label5:
        $r7 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void setWifiMeteredOverride(java.lang.String, int) throws android.os.RemoteException
    {
        android.net.INetworkPolicyManager$Stub$Proxy r0;
        int i0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        boolean $z0;
        android.net.INetworkPolicyManager $r4, $r5;
        java.lang.Throwable $r6;
        java.lang.String r7;

        r0 := @this: android.net.INetworkPolicyManager$Stub$Proxy;

        r7 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.net.INetworkPolicyManager");

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>(r7);

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i0);

        $r3 = r0.<android.net.INetworkPolicyManager$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(15, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r4 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager getDefaultImpl()>();

        if $r4 == null goto label3;

        $r5 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager getDefaultImpl()>();

        interfaceinvoke $r5.<android.net.INetworkPolicyManager: void setWifiMeteredOverride(java.lang.String,int)>(r7, i0);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label5:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void snoozeLimit(android.net.NetworkTemplate) throws android.os.RemoteException
    {
        android.net.INetworkPolicyManager$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        boolean $z0;
        android.net.INetworkPolicyManager $r4, $r5;
        java.lang.Throwable $r6;
        android.net.NetworkTemplate r7;

        r0 := @this: android.net.INetworkPolicyManager$Stub$Proxy;

        r7 := @parameter0: android.net.NetworkTemplate;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label01:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.net.INetworkPolicyManager");

     label02:
        if r7 == null goto label05;

     label03:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(1);

        virtualinvoke r7.<android.net.NetworkTemplate: void writeToParcel(android.os.Parcel,int)>(r1, 0);

     label04:
        goto label06;

     label05:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(0);

     label06:
        $r3 = r0.<android.net.INetworkPolicyManager$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(10, r1, r2, 0);

        if $z0 != 0 goto label08;

        $r4 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager getDefaultImpl()>();

        if $r4 == null goto label08;

        $r5 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager getDefaultImpl()>();

        interfaceinvoke $r5.<android.net.INetworkPolicyManager: void snoozeLimit(android.net.NetworkTemplate)>(r7);

     label07:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label08:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label09:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label10:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    public void unregisterListener(android.net.INetworkPolicyListener) throws android.os.RemoteException
    {
        android.net.INetworkPolicyManager$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3, r8;
        boolean $z0;
        android.net.INetworkPolicyManager $r4, $r5;
        java.lang.Throwable $r6;
        android.net.INetworkPolicyListener r7;

        r0 := @this: android.net.INetworkPolicyManager$Stub$Proxy;

        r7 := @parameter0: android.net.INetworkPolicyListener;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label01:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.net.INetworkPolicyManager");

     label02:
        if r7 == null goto label05;

     label03:
        r8 = interfaceinvoke r7.<android.net.INetworkPolicyListener: android.os.IBinder asBinder()>();

     label04:
        goto label06;

     label05:
        r8 = null;

     label06:
        virtualinvoke r1.<android.os.Parcel: void writeStrongBinder(android.os.IBinder)>(r8);

        $r3 = r0.<android.net.INetworkPolicyManager$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(7, r1, r2, 0);

        if $z0 != 0 goto label08;

        $r4 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager getDefaultImpl()>();

        if $r4 == null goto label08;

        $r5 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager getDefaultImpl()>();

        interfaceinvoke $r5.<android.net.INetworkPolicyManager: void unregisterListener(android.net.INetworkPolicyListener)>(r7);

     label07:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label08:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label09:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label10:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }
}
