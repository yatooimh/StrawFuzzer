class android.net.INetworkStackConnector$Stub$Proxy extends java.lang.Object implements android.net.INetworkStackConnector
{
    public static android.net.INetworkStackConnector sDefaultImpl;
    private java.lang.String mCachedHash;
    private int mCachedVersion;
    private android.os.IBinder mRemote;

    void <init>(android.os.IBinder)
    {
        android.net.INetworkStackConnector$Stub$Proxy r0;
        android.os.IBinder r1;

        r0 := @this: android.net.INetworkStackConnector$Stub$Proxy;

        r1 := @parameter0: android.os.IBinder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.net.INetworkStackConnector$Stub$Proxy: int mCachedVersion> = -1;

        r0.<android.net.INetworkStackConnector$Stub$Proxy: java.lang.String mCachedHash> = "-1";

        r0.<android.net.INetworkStackConnector$Stub$Proxy: android.os.IBinder mRemote> = r1;

        return;
    }

    public android.os.IBinder asBinder()
    {
        android.net.INetworkStackConnector$Stub$Proxy r0;
        android.os.IBinder $r1;

        r0 := @this: android.net.INetworkStackConnector$Stub$Proxy;

        $r1 = r0.<android.net.INetworkStackConnector$Stub$Proxy: android.os.IBinder mRemote>;

        return $r1;
    }

    public void fetchIpMemoryStore(android.net.IIpMemoryStoreCallbacks) throws android.os.RemoteException
    {
        android.net.INetworkStackConnector$Stub$Proxy r0;
        android.os.Parcel r1;
        java.lang.String $r2;
        android.os.IBinder $r3, r8;
        boolean $z0;
        android.net.INetworkStackConnector $r4, $r5;
        java.lang.Throwable $r6;
        android.net.IIpMemoryStoreCallbacks r7;

        r0 := @this: android.net.INetworkStackConnector$Stub$Proxy;

        r7 := @parameter0: android.net.IIpMemoryStoreCallbacks;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        $r2 = staticinvoke <android.net.INetworkStackConnector$Stub: java.lang.String access$000()>();

        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>($r2);

     label2:
        if r7 == null goto label5;

     label3:
        r8 = interfaceinvoke r7.<android.net.IIpMemoryStoreCallbacks: android.os.IBinder asBinder()>();

     label4:
        goto label6;

     label5:
        r8 = null;

     label6:
        virtualinvoke r1.<android.os.Parcel: void writeStrongBinder(android.os.IBinder)>(r8);

        $r3 = r0.<android.net.INetworkStackConnector$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(4, r1, null, 1);

        if $z0 != 0 goto label8;

        $r4 = staticinvoke <android.net.INetworkStackConnector$Stub: android.net.INetworkStackConnector getDefaultImpl()>();

        if $r4 == null goto label8;

        $r5 = staticinvoke <android.net.INetworkStackConnector$Stub: android.net.INetworkStackConnector getDefaultImpl()>();

        interfaceinvoke $r5.<android.net.INetworkStackConnector: void fetchIpMemoryStore(android.net.IIpMemoryStoreCallbacks)>(r7);

     label7:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label8:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label9:
        $r6 := @caughtexception;

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label9;
        catch java.lang.Throwable from label3 to label4 with label9;
        catch java.lang.Throwable from label6 to label7 with label9;
    }

    public java.lang.String getInterfaceDescriptor()
    {
        android.net.INetworkStackConnector$Stub$Proxy r0;
        java.lang.String $r1;

        r0 := @this: android.net.INetworkStackConnector$Stub$Proxy;

        $r1 = staticinvoke <android.net.INetworkStackConnector$Stub: java.lang.String access$000()>();

        return $r1;
    }

    public java.lang.String getInterfaceHash() throws android.os.RemoteException
    {
        android.net.INetworkStackConnector$Stub$Proxy r0;
        android.os.Parcel r1, r11;
        java.lang.String $r2, $r3, $r4, $r6, r12, r14;
        boolean $z0, $z1;
        android.os.IBinder $r5;
        android.net.INetworkStackConnector $r7, $r8;
        java.lang.Throwable $r9, $r10;

        r0 := @this: android.net.INetworkStackConnector$Stub$Proxy;

        entermonitor r0;

     label01:
        $r3 = "-1";

        $r2 = r0.<android.net.INetworkStackConnector$Stub$Proxy: java.lang.String mCachedHash>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label10;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r11 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label02:
        $r4 = staticinvoke <android.net.INetworkStackConnector$Stub: java.lang.String access$000()>();

        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>($r4);

        $r5 = r0.<android.net.INetworkStackConnector$Stub$Proxy: android.os.IBinder mRemote>;

        $z1 = interfaceinvoke $r5.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(16777214, r1, r11, 0);

        if $z1 != 0 goto label05;

        $r7 = staticinvoke <android.net.INetworkStackConnector$Stub: android.net.INetworkStackConnector getDefaultImpl()>();

        if $r7 == null goto label05;

        $r8 = staticinvoke <android.net.INetworkStackConnector$Stub: android.net.INetworkStackConnector getDefaultImpl()>();

        r12 = interfaceinvoke $r8.<android.net.INetworkStackConnector: java.lang.String getInterfaceHash()>();

     label03:
        virtualinvoke r11.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

     label04:
        exitmonitor r0;

        return r12;

     label05:
        virtualinvoke r11.<android.os.Parcel: void readException()>();

        $r6 = virtualinvoke r11.<android.os.Parcel: java.lang.String readString()>();

        r0.<android.net.INetworkStackConnector$Stub$Proxy: java.lang.String mCachedHash> = $r6;

     label06:
        virtualinvoke r11.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

     label07:
        goto label10;

     label08:
        $r9 := @caughtexception;

     label09:
        virtualinvoke r11.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r9;

     label10:
        r14 = r0.<android.net.INetworkStackConnector$Stub$Proxy: java.lang.String mCachedHash>;

     label11:
        exitmonitor r0;

        return r14;

     label12:
        $r10 := @caughtexception;

        exitmonitor r0;

        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
    }

    public int getInterfaceVersion() throws android.os.RemoteException
    {
        android.net.INetworkStackConnector$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        int i0, $i1, $i2, $i3;
        java.lang.String $r4;
        android.os.IBinder $r5;
        boolean $z0;
        android.net.INetworkStackConnector $r6, $r7;
        java.lang.Throwable $r8;

        r0 := @this: android.net.INetworkStackConnector$Stub$Proxy;

        $i1 = r0.<android.net.INetworkStackConnector$Stub$Proxy: int mCachedVersion>;

        if $i1 != -1 goto label6;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        $r4 = staticinvoke <android.net.INetworkStackConnector$Stub: java.lang.String access$000()>();

        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>($r4);

        $r5 = r0.<android.net.INetworkStackConnector$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r5.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(16777215, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r6 = staticinvoke <android.net.INetworkStackConnector$Stub: android.net.INetworkStackConnector getDefaultImpl()>();

        if $r6 == null goto label3;

        $r7 = staticinvoke <android.net.INetworkStackConnector$Stub: android.net.INetworkStackConnector getDefaultImpl()>();

        i0 = interfaceinvoke $r7.<android.net.INetworkStackConnector: int getInterfaceVersion()>();

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return i0;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

        $i3 = virtualinvoke r2.<android.os.Parcel: int readInt()>();

        r0.<android.net.INetworkStackConnector$Stub$Proxy: int mCachedVersion> = $i3;

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        goto label6;

     label5:
        $r8 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r8;

     label6:
        $i2 = r0.<android.net.INetworkStackConnector$Stub$Proxy: int mCachedVersion>;

        return $i2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void makeDhcpServer(java.lang.String, android.net.dhcp.DhcpServingParamsParcel, android.net.dhcp.IDhcpServerCallbacks) throws android.os.RemoteException
    {
        android.net.INetworkStackConnector$Stub$Proxy r0;
        android.net.dhcp.DhcpServingParamsParcel r1;
        android.net.dhcp.IDhcpServerCallbacks r2;
        android.os.Parcel r3;
        java.lang.String $r4, r9;
        android.os.IBinder $r5, r10;
        boolean $z0;
        android.net.INetworkStackConnector $r6, $r7;
        java.lang.Throwable $r8;

        r0 := @this: android.net.INetworkStackConnector$Stub$Proxy;

        r9 := @parameter0: java.lang.String;

        r1 := @parameter1: android.net.dhcp.DhcpServingParamsParcel;

        r2 := @parameter2: android.net.dhcp.IDhcpServerCallbacks;

        r3 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label01:
        $r4 = staticinvoke <android.net.INetworkStackConnector$Stub: java.lang.String access$000()>();

        virtualinvoke r3.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>($r4);

        virtualinvoke r3.<android.os.Parcel: void writeString(java.lang.String)>(r9);

     label02:
        if r1 == null goto label05;

     label03:
        virtualinvoke r3.<android.os.Parcel: void writeInt(int)>(1);

        virtualinvoke r1.<android.net.dhcp.DhcpServingParamsParcel: void writeToParcel(android.os.Parcel,int)>(r3, 0);

     label04:
        goto label06;

     label05:
        virtualinvoke r3.<android.os.Parcel: void writeInt(int)>(0);

     label06:
        if r2 == null goto label09;

     label07:
        r10 = interfaceinvoke r2.<android.net.dhcp.IDhcpServerCallbacks: android.os.IBinder asBinder()>();

     label08:
        goto label10;

     label09:
        r10 = null;

     label10:
        virtualinvoke r3.<android.os.Parcel: void writeStrongBinder(android.os.IBinder)>(r10);

        $r5 = r0.<android.net.INetworkStackConnector$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r5.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(1, r3, null, 1);

        if $z0 != 0 goto label12;

        $r6 = staticinvoke <android.net.INetworkStackConnector$Stub: android.net.INetworkStackConnector getDefaultImpl()>();

        if $r6 == null goto label12;

        $r7 = staticinvoke <android.net.INetworkStackConnector$Stub: android.net.INetworkStackConnector getDefaultImpl()>();

        interfaceinvoke $r7.<android.net.INetworkStackConnector: void makeDhcpServer(java.lang.String,android.net.dhcp.DhcpServingParamsParcel,android.net.dhcp.IDhcpServerCallbacks)>(r9, r1, r2);

     label11:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        return;

     label12:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        return;

     label13:
        $r8 := @caughtexception;

        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
    }

    public void makeIpClient(java.lang.String, android.net.ip.IIpClientCallbacks) throws android.os.RemoteException
    {
        android.net.INetworkStackConnector$Stub$Proxy r0;
        android.net.ip.IIpClientCallbacks r1;
        android.os.Parcel r2;
        java.lang.String $r3, r8;
        android.os.IBinder $r4, r9;
        boolean $z0;
        android.net.INetworkStackConnector $r5, $r6;
        java.lang.Throwable $r7;

        r0 := @this: android.net.INetworkStackConnector$Stub$Proxy;

        r8 := @parameter0: java.lang.String;

        r1 := @parameter1: android.net.ip.IIpClientCallbacks;

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        $r3 = staticinvoke <android.net.INetworkStackConnector$Stub: java.lang.String access$000()>();

        virtualinvoke r2.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>($r3);

        virtualinvoke r2.<android.os.Parcel: void writeString(java.lang.String)>(r8);

     label2:
        if r1 == null goto label5;

     label3:
        r9 = interfaceinvoke r1.<android.net.ip.IIpClientCallbacks: android.os.IBinder asBinder()>();

     label4:
        goto label6;

     label5:
        r9 = null;

     label6:
        virtualinvoke r2.<android.os.Parcel: void writeStrongBinder(android.os.IBinder)>(r9);

        $r4 = r0.<android.net.INetworkStackConnector$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(3, r2, null, 1);

        if $z0 != 0 goto label8;

        $r5 = staticinvoke <android.net.INetworkStackConnector$Stub: android.net.INetworkStackConnector getDefaultImpl()>();

        if $r5 == null goto label8;

        $r6 = staticinvoke <android.net.INetworkStackConnector$Stub: android.net.INetworkStackConnector getDefaultImpl()>();

        interfaceinvoke $r6.<android.net.INetworkStackConnector: void makeIpClient(java.lang.String,android.net.ip.IIpClientCallbacks)>(r8, r1);

     label7:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        return;

     label8:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        return;

     label9:
        $r7 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label9;
        catch java.lang.Throwable from label3 to label4 with label9;
        catch java.lang.Throwable from label6 to label7 with label9;
    }

    public void makeNetworkMonitor(android.net.Network, java.lang.String, android.net.INetworkMonitorCallbacks) throws android.os.RemoteException
    {
        android.net.INetworkStackConnector$Stub$Proxy r0;
        java.lang.String r1, $r4;
        android.net.INetworkMonitorCallbacks r2;
        android.os.Parcel r3;
        android.os.IBinder $r5, r10;
        boolean $z0;
        android.net.INetworkStackConnector $r6, $r7;
        java.lang.Throwable $r8;
        android.net.Network r9;

        r0 := @this: android.net.INetworkStackConnector$Stub$Proxy;

        r9 := @parameter0: android.net.Network;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.net.INetworkMonitorCallbacks;

        r3 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label01:
        $r4 = staticinvoke <android.net.INetworkStackConnector$Stub: java.lang.String access$000()>();

        virtualinvoke r3.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>($r4);

     label02:
        if r9 == null goto label05;

     label03:
        virtualinvoke r3.<android.os.Parcel: void writeInt(int)>(1);

        virtualinvoke r9.<android.net.Network: void writeToParcel(android.os.Parcel,int)>(r3, 0);

     label04:
        goto label06;

     label05:
        virtualinvoke r3.<android.os.Parcel: void writeInt(int)>(0);

     label06:
        virtualinvoke r3.<android.os.Parcel: void writeString(java.lang.String)>(r1);

     label07:
        if r2 == null goto label10;

     label08:
        r10 = interfaceinvoke r2.<android.net.INetworkMonitorCallbacks: android.os.IBinder asBinder()>();

     label09:
        goto label11;

     label10:
        r10 = null;

     label11:
        virtualinvoke r3.<android.os.Parcel: void writeStrongBinder(android.os.IBinder)>(r10);

        $r5 = r0.<android.net.INetworkStackConnector$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r5.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(2, r3, null, 1);

        if $z0 != 0 goto label13;

        $r6 = staticinvoke <android.net.INetworkStackConnector$Stub: android.net.INetworkStackConnector getDefaultImpl()>();

        if $r6 == null goto label13;

        $r7 = staticinvoke <android.net.INetworkStackConnector$Stub: android.net.INetworkStackConnector getDefaultImpl()>();

        interfaceinvoke $r7.<android.net.INetworkStackConnector: void makeNetworkMonitor(android.net.Network,java.lang.String,android.net.INetworkMonitorCallbacks)>(r9, r1, r2);

     label12:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        return;

     label13:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        return;

     label14:
        $r8 := @caughtexception;

        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
    }
}
