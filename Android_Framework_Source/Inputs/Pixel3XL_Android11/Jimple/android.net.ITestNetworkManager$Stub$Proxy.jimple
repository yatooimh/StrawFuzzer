class android.net.ITestNetworkManager$Stub$Proxy extends java.lang.Object implements android.net.ITestNetworkManager
{
    public static android.net.ITestNetworkManager sDefaultImpl;
    private android.os.IBinder mRemote;

    void <init>(android.os.IBinder)
    {
        android.net.ITestNetworkManager$Stub$Proxy r0;
        android.os.IBinder r1;

        r0 := @this: android.net.ITestNetworkManager$Stub$Proxy;

        r1 := @parameter0: android.os.IBinder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.net.ITestNetworkManager$Stub$Proxy: android.os.IBinder mRemote> = r1;

        return;
    }

    public android.os.IBinder asBinder()
    {
        android.net.ITestNetworkManager$Stub$Proxy r0;
        android.os.IBinder $r1;

        r0 := @this: android.net.ITestNetworkManager$Stub$Proxy;

        $r1 = r0.<android.net.ITestNetworkManager$Stub$Proxy: android.os.IBinder mRemote>;

        return $r1;
    }

    public android.net.TestNetworkInterface createTapInterface() throws android.os.RemoteException
    {
        android.net.ITestNetworkManager$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        boolean $z0;
        int $i0;
        android.os.Parcelable$Creator $r4;
        java.lang.Object $r5;
        android.net.ITestNetworkManager $r6, $r7;
        java.lang.Throwable $r8;
        android.net.TestNetworkInterface r9, r10;

        r0 := @this: android.net.ITestNetworkManager$Stub$Proxy;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.net.ITestNetworkManager");

        $r3 = r0.<android.net.ITestNetworkManager$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(2, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r6 = staticinvoke <android.net.ITestNetworkManager$Stub: android.net.ITestNetworkManager getDefaultImpl()>();

        if $r6 == null goto label3;

        $r7 = staticinvoke <android.net.ITestNetworkManager$Stub: android.net.ITestNetworkManager getDefaultImpl()>();

        r9 = interfaceinvoke $r7.<android.net.ITestNetworkManager: android.net.TestNetworkInterface createTapInterface()>();

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return r9;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

        $i0 = virtualinvoke r2.<android.os.Parcel: int readInt()>();

        if $i0 == 0 goto label5;

        $r4 = <android.net.TestNetworkInterface: android.os.Parcelable$Creator CREATOR>;

        $r5 = interfaceinvoke $r4.<android.os.Parcelable$Creator: java.lang.Object createFromParcel(android.os.Parcel)>(r2);

        r10 = (android.net.TestNetworkInterface) $r5;

     label4:
        goto label6;

     label5:
        r10 = null;

     label6:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return r10;

     label7:
        $r8 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
    }

    public android.net.TestNetworkInterface createTunInterface(android.net.LinkAddress[]) throws android.os.RemoteException
    {
        android.net.ITestNetworkManager$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        boolean $z0;
        int $i0;
        android.os.Parcelable$Creator $r4;
        java.lang.Object $r5;
        android.net.ITestNetworkManager $r6, $r7;
        java.lang.Throwable $r8;
        android.net.LinkAddress[] r9;
        android.net.TestNetworkInterface r10, r11;

        r0 := @this: android.net.ITestNetworkManager$Stub$Proxy;

        r9 := @parameter0: android.net.LinkAddress[];

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.net.ITestNetworkManager");

        virtualinvoke r1.<android.os.Parcel: void writeTypedArray(android.os.Parcelable[],int)>(r9, 0);

        $r3 = r0.<android.net.ITestNetworkManager$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(1, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r6 = staticinvoke <android.net.ITestNetworkManager$Stub: android.net.ITestNetworkManager getDefaultImpl()>();

        if $r6 == null goto label3;

        $r7 = staticinvoke <android.net.ITestNetworkManager$Stub: android.net.ITestNetworkManager getDefaultImpl()>();

        r10 = interfaceinvoke $r7.<android.net.ITestNetworkManager: android.net.TestNetworkInterface createTunInterface(android.net.LinkAddress[])>(r9);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return r10;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

        $i0 = virtualinvoke r2.<android.os.Parcel: int readInt()>();

        if $i0 == 0 goto label5;

        $r4 = <android.net.TestNetworkInterface: android.os.Parcelable$Creator CREATOR>;

        $r5 = interfaceinvoke $r4.<android.os.Parcelable$Creator: java.lang.Object createFromParcel(android.os.Parcel)>(r2);

        r11 = (android.net.TestNetworkInterface) $r5;

     label4:
        goto label6;

     label5:
        r11 = null;

     label6:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return r11;

     label7:
        $r8 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
    }

    public java.lang.String getInterfaceDescriptor()
    {
        android.net.ITestNetworkManager$Stub$Proxy r0;

        r0 := @this: android.net.ITestNetworkManager$Stub$Proxy;

        return "android.net.ITestNetworkManager";
    }

    public void setupTestNetwork(java.lang.String, android.net.LinkProperties, boolean, int[], android.os.IBinder) throws android.os.RemoteException
    {
        android.net.ITestNetworkManager$Stub$Proxy r0;
        android.net.LinkProperties r1;
        boolean z0, $z1;
        int[] r2;
        android.os.IBinder r3, $r6;
        android.os.Parcel r4, r5;
        android.net.ITestNetworkManager $r7, $r8;
        java.lang.Throwable $r9;
        java.lang.String r10;
        byte b0;

        r0 := @this: android.net.ITestNetworkManager$Stub$Proxy;

        r10 := @parameter0: java.lang.String;

        r1 := @parameter1: android.net.LinkProperties;

        z0 := @parameter2: boolean;

        r2 := @parameter3: int[];

        r3 := @parameter4: android.os.IBinder;

        r4 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r5 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label01:
        virtualinvoke r4.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.net.ITestNetworkManager");

        virtualinvoke r4.<android.os.Parcel: void writeString(java.lang.String)>(r10);

     label02:
        b0 = 1;

        if r1 == null goto label05;

     label03:
        virtualinvoke r4.<android.os.Parcel: void writeInt(int)>(1);

        virtualinvoke r1.<android.net.LinkProperties: void writeToParcel(android.os.Parcel,int)>(r4, 0);

     label04:
        goto label06;

     label05:
        virtualinvoke r4.<android.os.Parcel: void writeInt(int)>(0);

     label06:
        if z0 == 0 goto label07;

        goto label08;

     label07:
        b0 = 0;

     label08:
        virtualinvoke r4.<android.os.Parcel: void writeInt(int)>(b0);

        virtualinvoke r4.<android.os.Parcel: void writeIntArray(int[])>(r2);

        virtualinvoke r4.<android.os.Parcel: void writeStrongBinder(android.os.IBinder)>(r3);

        $r6 = r0.<android.net.ITestNetworkManager$Stub$Proxy: android.os.IBinder mRemote>;

        $z1 = interfaceinvoke $r6.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(3, r4, r5, 0);

        if $z1 != 0 goto label10;

        $r7 = staticinvoke <android.net.ITestNetworkManager$Stub: android.net.ITestNetworkManager getDefaultImpl()>();

        if $r7 == null goto label10;

        $r8 = staticinvoke <android.net.ITestNetworkManager$Stub: android.net.ITestNetworkManager getDefaultImpl()>();

        interfaceinvoke $r8.<android.net.ITestNetworkManager: void setupTestNetwork(java.lang.String,android.net.LinkProperties,boolean,int[],android.os.IBinder)>(r10, r1, z0, r2, r3);

     label09:
        virtualinvoke r5.<android.os.Parcel: void recycle()>();

        virtualinvoke r4.<android.os.Parcel: void recycle()>();

        return;

     label10:
        virtualinvoke r5.<android.os.Parcel: void readException()>();

     label11:
        virtualinvoke r5.<android.os.Parcel: void recycle()>();

        virtualinvoke r4.<android.os.Parcel: void recycle()>();

        return;

     label12:
        $r9 := @caughtexception;

        virtualinvoke r5.<android.os.Parcel: void recycle()>();

        virtualinvoke r4.<android.os.Parcel: void recycle()>();

        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
    }

    public void teardownTestNetwork(int) throws android.os.RemoteException
    {
        android.net.ITestNetworkManager$Stub$Proxy r0;
        int i0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r4;
        boolean $z0;
        android.net.ITestNetworkManager $r5, $r6;
        java.lang.Throwable $r7;

        r0 := @this: android.net.ITestNetworkManager$Stub$Proxy;

        i0 := @parameter0: int;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.net.ITestNetworkManager");

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i0);

        $r4 = r0.<android.net.ITestNetworkManager$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(4, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r5 = staticinvoke <android.net.ITestNetworkManager$Stub: android.net.ITestNetworkManager getDefaultImpl()>();

        if $r5 == null goto label3;

        $r6 = staticinvoke <android.net.ITestNetworkManager$Stub: android.net.ITestNetworkManager getDefaultImpl()>();

        interfaceinvoke $r6.<android.net.ITestNetworkManager: void teardownTestNetwork(int)>(i0);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label5:
        $r7 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }
}
