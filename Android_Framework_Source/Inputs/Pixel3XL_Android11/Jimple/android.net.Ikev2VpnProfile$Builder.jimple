public final class android.net.Ikev2VpnProfile$Builder extends java.lang.Object
{
    private java.util.List mAllowedAlgorithms;
    private boolean mIsBypassable;
    private boolean mIsMetered;
    private boolean mIsRestrictedToTestNetworks;
    private int mMaxMtu;
    private java.lang.String mPassword;
    private byte[] mPresharedKey;
    private android.net.ProxyInfo mProxyInfo;
    private java.security.PrivateKey mRsaPrivateKey;
    private final java.lang.String mServerAddr;
    private java.security.cert.X509Certificate mServerRootCaCert;
    private int mType;
    private java.security.cert.X509Certificate mUserCert;
    private final java.lang.String mUserIdentity;
    private java.lang.String mUsername;

    public void <init>(java.lang.String, java.lang.String)
    {
        android.net.Ikev2VpnProfile$Builder r0;
        java.lang.String r1, r2;
        java.util.List $r3;
        java.lang.Object[] $r4, $r6;

        r0 := @this: android.net.Ikev2VpnProfile$Builder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.net.Ikev2VpnProfile$Builder: int mType> = -1;

        $r3 = <android.net.Ikev2VpnProfile: java.util.List DEFAULT_ALGORITHMS>;

        r0.<android.net.Ikev2VpnProfile$Builder: java.util.List mAllowedAlgorithms> = $r3;

        r0.<android.net.Ikev2VpnProfile$Builder: boolean mIsBypassable> = 0;

        r0.<android.net.Ikev2VpnProfile$Builder: boolean mIsMetered> = 1;

        r0.<android.net.Ikev2VpnProfile$Builder: int mMaxMtu> = 1360;

        r0.<android.net.Ikev2VpnProfile$Builder: boolean mIsRestrictedToTestNetworks> = 0;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = "serverAddr";

        staticinvoke <android.net.Ikev2VpnProfile: java.lang.Object access$000(java.lang.Object,java.lang.String,java.lang.Object[])>(r1, "Required parameter was not provided: %s", $r4);

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = "identity";

        staticinvoke <android.net.Ikev2VpnProfile: java.lang.Object access$000(java.lang.Object,java.lang.String,java.lang.Object[])>(r2, "Required parameter was not provided: %s", $r6);

        r0.<android.net.Ikev2VpnProfile$Builder: java.lang.String mServerAddr> = r1;

        r0.<android.net.Ikev2VpnProfile$Builder: java.lang.String mUserIdentity> = r2;

        return;
    }

    private void resetAuthParams()
    {
        android.net.Ikev2VpnProfile$Builder r0;

        r0 := @this: android.net.Ikev2VpnProfile$Builder;

        r0.<android.net.Ikev2VpnProfile$Builder: byte[] mPresharedKey> = null;

        r0.<android.net.Ikev2VpnProfile$Builder: java.security.cert.X509Certificate mServerRootCaCert> = null;

        r0.<android.net.Ikev2VpnProfile$Builder: java.lang.String mUsername> = null;

        r0.<android.net.Ikev2VpnProfile$Builder: java.lang.String mPassword> = null;

        r0.<android.net.Ikev2VpnProfile$Builder: java.security.PrivateKey mRsaPrivateKey> = null;

        r0.<android.net.Ikev2VpnProfile$Builder: java.security.cert.X509Certificate mUserCert> = null;

        return;
    }

    public android.net.Ikev2VpnProfile build()
    {
        android.net.Ikev2VpnProfile$Builder r0;
        android.net.Ikev2VpnProfile $r1;
        boolean $z0, $z1, $z2;
        int $i0, $i1;
        java.util.List $r2;
        android.net.ProxyInfo $r3;
        java.security.cert.X509Certificate $r4, $r8;
        java.security.PrivateKey $r5;
        java.lang.String $r6, $r7, $r10, $r11;
        byte[] $r9;

        r0 := @this: android.net.Ikev2VpnProfile$Builder;

        $r1 = new android.net.Ikev2VpnProfile;

        $i1 = r0.<android.net.Ikev2VpnProfile$Builder: int mType>;

        $r11 = r0.<android.net.Ikev2VpnProfile$Builder: java.lang.String mServerAddr>;

        $r10 = r0.<android.net.Ikev2VpnProfile$Builder: java.lang.String mUserIdentity>;

        $r9 = r0.<android.net.Ikev2VpnProfile$Builder: byte[] mPresharedKey>;

        $r8 = r0.<android.net.Ikev2VpnProfile$Builder: java.security.cert.X509Certificate mServerRootCaCert>;

        $r7 = r0.<android.net.Ikev2VpnProfile$Builder: java.lang.String mUsername>;

        $r6 = r0.<android.net.Ikev2VpnProfile$Builder: java.lang.String mPassword>;

        $r5 = r0.<android.net.Ikev2VpnProfile$Builder: java.security.PrivateKey mRsaPrivateKey>;

        $r4 = r0.<android.net.Ikev2VpnProfile$Builder: java.security.cert.X509Certificate mUserCert>;

        $r3 = r0.<android.net.Ikev2VpnProfile$Builder: android.net.ProxyInfo mProxyInfo>;

        $r2 = r0.<android.net.Ikev2VpnProfile$Builder: java.util.List mAllowedAlgorithms>;

        $z2 = r0.<android.net.Ikev2VpnProfile$Builder: boolean mIsBypassable>;

        $z1 = r0.<android.net.Ikev2VpnProfile$Builder: boolean mIsMetered>;

        $i0 = r0.<android.net.Ikev2VpnProfile$Builder: int mMaxMtu>;

        $z0 = r0.<android.net.Ikev2VpnProfile$Builder: boolean mIsRestrictedToTestNetworks>;

        specialinvoke $r1.<android.net.Ikev2VpnProfile: void <init>(int,java.lang.String,java.lang.String,byte[],java.security.cert.X509Certificate,java.lang.String,java.lang.String,java.security.PrivateKey,java.security.cert.X509Certificate,android.net.ProxyInfo,java.util.List,boolean,boolean,int,boolean,android.net.Ikev2VpnProfile$1)>($i1, $r11, $r10, $r9, $r8, $r7, $r6, $r5, $r4, $r3, $r2, $z2, $z1, $i0, $z0, null);

        return $r1;
    }

    public android.net.Ikev2VpnProfile$Builder restrictToTestNetworks()
    {
        android.net.Ikev2VpnProfile$Builder r0;

        r0 := @this: android.net.Ikev2VpnProfile$Builder;

        r0.<android.net.Ikev2VpnProfile$Builder: boolean mIsRestrictedToTestNetworks> = 1;

        return r0;
    }

    public android.net.Ikev2VpnProfile$Builder setAllowedAlgorithms(java.util.List)
    {
        android.net.Ikev2VpnProfile$Builder r0;
        java.util.List r1;
        java.lang.Object[] $r2;

        r0 := @this: android.net.Ikev2VpnProfile$Builder;

        r1 := @parameter0: java.util.List;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = "algorithmNames";

        staticinvoke <android.net.Ikev2VpnProfile: java.lang.Object access$000(java.lang.Object,java.lang.String,java.lang.Object[])>(r1, "Required parameter was not provided: %s", $r2);

        staticinvoke <android.net.Ikev2VpnProfile: void access$200(java.util.List)>(r1);

        r0.<android.net.Ikev2VpnProfile$Builder: java.util.List mAllowedAlgorithms> = r1;

        return r0;
    }

    public android.net.Ikev2VpnProfile$Builder setAuthDigitalSignature(java.security.cert.X509Certificate, java.security.PrivateKey, java.security.cert.X509Certificate)
    {
        android.net.Ikev2VpnProfile$Builder r0;
        java.security.cert.X509Certificate r1, r3;
        java.security.PrivateKey r2;
        java.lang.Object[] $r4, $r6;

        r0 := @this: android.net.Ikev2VpnProfile$Builder;

        r1 := @parameter0: java.security.cert.X509Certificate;

        r2 := @parameter1: java.security.PrivateKey;

        r3 := @parameter2: java.security.cert.X509Certificate;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = "userCert";

        staticinvoke <android.net.Ikev2VpnProfile: java.lang.Object access$000(java.lang.Object,java.lang.String,java.lang.Object[])>(r1, "Required parameter was not provided: %s", $r4);

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = "key";

        staticinvoke <android.net.Ikev2VpnProfile: java.lang.Object access$000(java.lang.Object,java.lang.String,java.lang.Object[])>(r2, "Required parameter was not provided: %s", $r6);

        staticinvoke <android.net.Ikev2VpnProfile: void access$100(java.security.cert.X509Certificate)>(r1);

        if r3 == null goto label1;

        staticinvoke <android.net.Ikev2VpnProfile: void access$100(java.security.cert.X509Certificate)>(r3);

     label1:
        specialinvoke r0.<android.net.Ikev2VpnProfile$Builder: void resetAuthParams()>();

        r0.<android.net.Ikev2VpnProfile$Builder: java.security.cert.X509Certificate mUserCert> = r1;

        r0.<android.net.Ikev2VpnProfile$Builder: java.security.PrivateKey mRsaPrivateKey> = r2;

        r0.<android.net.Ikev2VpnProfile$Builder: java.security.cert.X509Certificate mServerRootCaCert> = r3;

        r0.<android.net.Ikev2VpnProfile$Builder: int mType> = 8;

        return r0;
    }

    public android.net.Ikev2VpnProfile$Builder setAuthPsk(byte[])
    {
        android.net.Ikev2VpnProfile$Builder r0;
        byte[] r1;
        java.lang.Object[] $r2;

        r0 := @this: android.net.Ikev2VpnProfile$Builder;

        r1 := @parameter0: byte[];

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = "psk";

        staticinvoke <android.net.Ikev2VpnProfile: java.lang.Object access$000(java.lang.Object,java.lang.String,java.lang.Object[])>(r1, "Required parameter was not provided: %s", $r2);

        specialinvoke r0.<android.net.Ikev2VpnProfile$Builder: void resetAuthParams()>();

        r0.<android.net.Ikev2VpnProfile$Builder: byte[] mPresharedKey> = r1;

        r0.<android.net.Ikev2VpnProfile$Builder: int mType> = 7;

        return r0;
    }

    public android.net.Ikev2VpnProfile$Builder setAuthUsernamePassword(java.lang.String, java.lang.String, java.security.cert.X509Certificate)
    {
        android.net.Ikev2VpnProfile$Builder r0;
        java.lang.String r1, r2;
        java.security.cert.X509Certificate r3;
        java.lang.Object[] $r4, $r6;

        r0 := @this: android.net.Ikev2VpnProfile$Builder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.security.cert.X509Certificate;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = "user";

        staticinvoke <android.net.Ikev2VpnProfile: java.lang.Object access$000(java.lang.Object,java.lang.String,java.lang.Object[])>(r1, "Required parameter was not provided: %s", $r4);

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = "pass";

        staticinvoke <android.net.Ikev2VpnProfile: java.lang.Object access$000(java.lang.Object,java.lang.String,java.lang.Object[])>(r2, "Required parameter was not provided: %s", $r6);

        if r3 == null goto label1;

        staticinvoke <android.net.Ikev2VpnProfile: void access$100(java.security.cert.X509Certificate)>(r3);

     label1:
        specialinvoke r0.<android.net.Ikev2VpnProfile$Builder: void resetAuthParams()>();

        r0.<android.net.Ikev2VpnProfile$Builder: java.lang.String mUsername> = r1;

        r0.<android.net.Ikev2VpnProfile$Builder: java.lang.String mPassword> = r2;

        r0.<android.net.Ikev2VpnProfile$Builder: java.security.cert.X509Certificate mServerRootCaCert> = r3;

        r0.<android.net.Ikev2VpnProfile$Builder: int mType> = 6;

        return r0;
    }

    public android.net.Ikev2VpnProfile$Builder setBypassable(boolean)
    {
        android.net.Ikev2VpnProfile$Builder r0;
        boolean z0;

        r0 := @this: android.net.Ikev2VpnProfile$Builder;

        z0 := @parameter0: boolean;

        r0.<android.net.Ikev2VpnProfile$Builder: boolean mIsBypassable> = z0;

        return r0;
    }

    public android.net.Ikev2VpnProfile$Builder setMaxMtu(int)
    {
        android.net.Ikev2VpnProfile$Builder r0;
        int i0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: android.net.Ikev2VpnProfile$Builder;

        i0 := @parameter0: int;

        if i0 < 1280 goto label1;

        r0.<android.net.Ikev2VpnProfile$Builder: int mMaxMtu> = i0;

        return r0;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Max MTU must be at least 1280");

        throw $r1;
    }

    public android.net.Ikev2VpnProfile$Builder setMetered(boolean)
    {
        android.net.Ikev2VpnProfile$Builder r0;
        boolean z0;

        r0 := @this: android.net.Ikev2VpnProfile$Builder;

        z0 := @parameter0: boolean;

        r0.<android.net.Ikev2VpnProfile$Builder: boolean mIsMetered> = z0;

        return r0;
    }

    public android.net.Ikev2VpnProfile$Builder setProxy(android.net.ProxyInfo)
    {
        android.net.Ikev2VpnProfile$Builder r0;
        android.net.ProxyInfo r1;

        r0 := @this: android.net.Ikev2VpnProfile$Builder;

        r1 := @parameter0: android.net.ProxyInfo;

        r0.<android.net.Ikev2VpnProfile$Builder: android.net.ProxyInfo mProxyInfo> = r1;

        return r0;
    }
}
