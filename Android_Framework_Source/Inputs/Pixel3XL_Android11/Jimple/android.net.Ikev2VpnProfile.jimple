public final class android.net.Ikev2VpnProfile extends android.net.PlatformVpnProfile
{
    public static final java.util.List DEFAULT_ALGORITHMS;
    private static final java.lang.String EMPTY_CERT;
    private static final java.lang.String MISSING_PARAM_MSG_TMPL;
    public static final java.lang.String PREFIX_INLINE;
    public static final java.lang.String PREFIX_KEYSTORE_ALIAS;
    private final java.util.List mAllowedAlgorithms;
    private final boolean mIsBypassable;
    private final boolean mIsMetered;
    private final boolean mIsRestrictedToTestNetworks;
    private final int mMaxMtu;
    private final java.lang.String mPassword;
    private final byte[] mPresharedKey;
    private final android.net.ProxyInfo mProxyInfo;
    private final java.security.PrivateKey mRsaPrivateKey;
    private final java.lang.String mServerAddr;
    private final java.security.cert.X509Certificate mServerRootCaCert;
    private final java.security.cert.X509Certificate mUserCert;
    private final java.lang.String mUserIdentity;
    private final java.lang.String mUsername;

    static void <clinit>()
    {
        java.lang.String[] $r0;
        java.util.List $r1, $r2;

        <android.net.Ikev2VpnProfile: java.lang.String PREFIX_KEYSTORE_ALIAS> = "KEYSTORE_ALIAS:";

        <android.net.Ikev2VpnProfile: java.lang.String PREFIX_INLINE> = "INLINE:";

        <android.net.Ikev2VpnProfile: java.lang.String MISSING_PARAM_MSG_TMPL> = "Required parameter was not provided: %s";

        <android.net.Ikev2VpnProfile: java.lang.String EMPTY_CERT> = "";

        $r0 = newarray (java.lang.String)[5];

        $r0[0] = "cbc(aes)";

        $r0[1] = "hmac(sha256)";

        $r0[2] = "hmac(sha384)";

        $r0[3] = "hmac(sha512)";

        $r0[4] = "rfc4106(gcm(aes))";

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        <android.net.Ikev2VpnProfile: java.util.List DEFAULT_ALGORITHMS> = $r2;

        return;
    }

    private void <init>(int, java.lang.String, java.lang.String, byte[], java.security.cert.X509Certificate, java.lang.String, java.lang.String, java.security.PrivateKey, java.security.cert.X509Certificate, android.net.ProxyInfo, java.util.List, boolean, boolean, int, boolean)
    {
        android.net.Ikev2VpnProfile r0;
        int i0, i1, $i2;
        java.lang.String r1, r4, r5, r19;
        byte[] r2, r20;
        java.security.cert.X509Certificate r3, r7;
        java.security.PrivateKey r6;
        android.net.ProxyInfo r8, $r16;
        java.util.List r9, $r18;
        boolean z0, z1, z2;
        java.lang.Object[] $r10, $r12, $r14;
        java.util.ArrayList $r17;

        r0 := @this: android.net.Ikev2VpnProfile;

        i0 := @parameter0: int;

        r19 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: byte[];

        r3 := @parameter4: java.security.cert.X509Certificate;

        r4 := @parameter5: java.lang.String;

        r5 := @parameter6: java.lang.String;

        r6 := @parameter7: java.security.PrivateKey;

        r7 := @parameter8: java.security.cert.X509Certificate;

        r8 := @parameter9: android.net.ProxyInfo;

        r9 := @parameter10: java.util.List;

        z0 := @parameter11: boolean;

        z1 := @parameter12: boolean;

        i1 := @parameter13: int;

        z2 := @parameter14: boolean;

        specialinvoke r0.<android.net.PlatformVpnProfile: void <init>(int)>(i0);

        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = "Server address";

        staticinvoke <android.net.Ikev2VpnProfile: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object[])>(r19, "Required parameter was not provided: %s", $r10);

        $r12 = newarray (java.lang.Object)[1];

        $r12[0] = "User Identity";

        staticinvoke <android.net.Ikev2VpnProfile: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object[])>(r1, "Required parameter was not provided: %s", $r12);

        $r14 = newarray (java.lang.Object)[1];

        $r14[0] = "Allowed Algorithms";

        staticinvoke <android.net.Ikev2VpnProfile: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object[])>(r9, "Required parameter was not provided: %s", $r14);

        r0.<android.net.Ikev2VpnProfile: java.lang.String mServerAddr> = r19;

        r0.<android.net.Ikev2VpnProfile: java.lang.String mUserIdentity> = r1;

        if r2 != null goto label1;

        r20 = null;

        goto label2;

     label1:
        $i2 = lengthof r2;

        r20 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>(r2, $i2);

     label2:
        r0.<android.net.Ikev2VpnProfile: byte[] mPresharedKey> = r20;

        r0.<android.net.Ikev2VpnProfile: java.security.cert.X509Certificate mServerRootCaCert> = r3;

        r0.<android.net.Ikev2VpnProfile: java.lang.String mUsername> = r4;

        r0.<android.net.Ikev2VpnProfile: java.lang.String mPassword> = r5;

        r0.<android.net.Ikev2VpnProfile: java.security.PrivateKey mRsaPrivateKey> = r6;

        r0.<android.net.Ikev2VpnProfile: java.security.cert.X509Certificate mUserCert> = r7;

        $r16 = new android.net.ProxyInfo;

        specialinvoke $r16.<android.net.ProxyInfo: void <init>(android.net.ProxyInfo)>(r8);

        r0.<android.net.Ikev2VpnProfile: android.net.ProxyInfo mProxyInfo> = $r16;

        $r17 = new java.util.ArrayList;

        specialinvoke $r17.<java.util.ArrayList: void <init>(java.util.Collection)>(r9);

        $r18 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r17);

        r0.<android.net.Ikev2VpnProfile: java.util.List mAllowedAlgorithms> = $r18;

        r0.<android.net.Ikev2VpnProfile: boolean mIsBypassable> = z0;

        r0.<android.net.Ikev2VpnProfile: boolean mIsMetered> = z1;

        r0.<android.net.Ikev2VpnProfile: int mMaxMtu> = i1;

        r0.<android.net.Ikev2VpnProfile: boolean mIsRestrictedToTestNetworks> = z2;

        specialinvoke r0.<android.net.Ikev2VpnProfile: void validate()>();

        return;
    }

    void <init>(int, java.lang.String, java.lang.String, byte[], java.security.cert.X509Certificate, java.lang.String, java.lang.String, java.security.PrivateKey, java.security.cert.X509Certificate, android.net.ProxyInfo, java.util.List, boolean, boolean, int, boolean, android.net.Ikev2VpnProfile$1)
    {
        android.net.Ikev2VpnProfile r0;
        int i0, i1;
        java.lang.String r1, r2, r5, r6;
        byte[] r3;
        java.security.cert.X509Certificate r4, r8;
        java.security.PrivateKey r7;
        android.net.ProxyInfo r9;
        java.util.List r10;
        boolean z0, z1, z2;
        android.net.Ikev2VpnProfile$1 r11;

        r0 := @this: android.net.Ikev2VpnProfile;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: byte[];

        r4 := @parameter4: java.security.cert.X509Certificate;

        r5 := @parameter5: java.lang.String;

        r6 := @parameter6: java.lang.String;

        r7 := @parameter7: java.security.PrivateKey;

        r8 := @parameter8: java.security.cert.X509Certificate;

        r9 := @parameter9: android.net.ProxyInfo;

        r10 := @parameter10: java.util.List;

        z0 := @parameter11: boolean;

        z1 := @parameter12: boolean;

        i1 := @parameter13: int;

        z2 := @parameter14: boolean;

        r11 := @parameter15: android.net.Ikev2VpnProfile$1;

        specialinvoke r0.<android.net.Ikev2VpnProfile: void <init>(int,java.lang.String,java.lang.String,byte[],java.security.cert.X509Certificate,java.lang.String,java.lang.String,java.security.PrivateKey,java.security.cert.X509Certificate,android.net.ProxyInfo,java.util.List,boolean,boolean,int,boolean)>(i0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, z0, z1, i1, z2);

        return;
    }

    static java.lang.Object access$000(java.lang.Object, java.lang.String, java.lang.Object[])
    {
        java.lang.Object r0, $r3;
        java.lang.String r1;
        java.lang.Object[] r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object[];

        $r3 = staticinvoke <android.net.Ikev2VpnProfile: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, r1, r2);

        return $r3;
    }

    static void access$100(java.security.cert.X509Certificate)
    {
        java.security.cert.X509Certificate r0;

        r0 := @parameter0: java.security.cert.X509Certificate;

        staticinvoke <android.net.Ikev2VpnProfile: void checkCert(java.security.cert.X509Certificate)>(r0);

        return;
    }

    static void access$200(java.util.List)
    {
        java.util.List r0;

        r0 := @parameter0: java.util.List;

        staticinvoke <android.net.Ikev2VpnProfile: void validateAllowedAlgorithms(java.util.List)>(r0);

        return;
    }

    private static java.security.cert.X509Certificate certificateFromPemString(java.lang.String) throws java.security.cert.CertificateException
    {
        java.lang.String $r0, r6;
        boolean $z0, $z1;
        java.nio.charset.Charset $r1;
        byte[] $r2;
        java.lang.Object $r3;
        java.lang.Throwable $r4;
        java.security.cert.CertificateException $r5;
        java.util.List r7;
        java.security.cert.X509Certificate r8;

        r6 := @parameter0: java.lang.String;

        if r6 == null goto label8;

        $r0 = "";

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z0 == 0 goto label1;

        goto label8;

     label1:
        $r1 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset US_ASCII>;

        $r2 = virtualinvoke r6.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r1);

        r7 = staticinvoke <android.security.Credentials: java.util.List convertFromPem(byte[])>($r2);

        $z1 = interfaceinvoke r7.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label4;

     label2:
        r8 = null;

     label3:
        goto label6;

     label4:
        $r3 = interfaceinvoke r7.<java.util.List: java.lang.Object get(int)>(0);

        r8 = (java.security.cert.X509Certificate) $r3;

     label5:
        goto label3;

     label6:
        return r8;

     label7:
        $r4 := @caughtexception;

        $r5 = new java.security.cert.CertificateException;

        specialinvoke $r5.<java.security.cert.CertificateException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

     label8:
        return null;

        catch java.io.IOException from label1 to label2 with label7;
        catch java.io.IOException from label4 to label5 with label7;
    }

    public static java.lang.String certificateToPemString(java.security.cert.X509Certificate) throws java.io.IOException, java.security.cert.CertificateEncodingException
    {
        java.security.cert.X509Certificate r0;
        java.lang.Object[] $r2;
        byte[] $r3;
        java.nio.charset.Charset $r4;
        java.lang.String r5;
        java.security.cert.Certificate[] r6;

        r0 := @parameter0: java.security.cert.X509Certificate;

        if r0 != null goto label1;

        return "";

     label1:
        r5 = new java.lang.String;

        $r2 = newarray (java.security.cert.Certificate)[1];

        $r2[0] = r0;

        r6 = (java.security.cert.Certificate[]) $r2;

        $r3 = staticinvoke <android.security.Credentials: byte[] convertToPem(java.security.cert.Certificate[])>(r6);

        $r4 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset US_ASCII>;

        specialinvoke r5.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>($r3, $r4);

        return r5;
    }

    private static void checkCert(java.security.cert.X509Certificate)
    {
        java.lang.Throwable $r1;
        java.lang.IllegalArgumentException $r2;
        java.security.cert.X509Certificate r3;

        r3 := @parameter0: java.security.cert.X509Certificate;

     label1:
        staticinvoke <android.net.Ikev2VpnProfile: java.lang.String certificateToPemString(java.security.cert.X509Certificate)>(r3);

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Certificate could not be encoded");

        throw $r2;

        catch java.security.GeneralSecurityException from label1 to label2 with label3;
        catch java.io.IOException from label1 to label2 with label3;
    }

    private static transient java.lang.Object checkNotNull(java.lang.Object, java.lang.String, java.lang.Object[])
    {
        java.lang.Object r0;
        java.lang.String r1, $r3;
        java.lang.Object[] r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object[];

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, r2);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r0, $r3);

        return r0;
    }

    private static byte[] decodeFromIpsecSecret(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Object[] $r1;
        java.util.Base64$Decoder $r3;
        byte[] $r4;

        r0 := @parameter0: java.lang.String;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = "encoded";

        staticinvoke <android.net.Ikev2VpnProfile: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "Required parameter was not provided: %s", $r1);

        $r3 = staticinvoke <java.util.Base64: java.util.Base64$Decoder getDecoder()>();

        $r4 = virtualinvoke $r3.<java.util.Base64$Decoder: byte[] decode(java.lang.String)>(r0);

        return $r4;
    }

    public static java.lang.String encodeForIpsecSecret(byte[])
    {
        byte[] r0;
        java.lang.Object[] $r1;
        java.util.Base64$Encoder $r3;
        java.lang.String $r4;

        r0 := @parameter0: byte[];

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = "secret";

        staticinvoke <android.net.Ikev2VpnProfile: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "Required parameter was not provided: %s", $r1);

        $r3 = staticinvoke <java.util.Base64: java.util.Base64$Encoder getEncoder()>();

        $r4 = virtualinvoke $r3.<java.util.Base64$Encoder: java.lang.String encodeToString(byte[])>(r0);

        return $r4;
    }

    public static android.net.Ikev2VpnProfile fromVpnProfile(com.android.internal.net.VpnProfile) throws java.io.IOException, java.security.GeneralSecurityException
    {
        com.android.internal.net.VpnProfile r0;
        android.net.Ikev2VpnProfile $r1;

        r0 := @parameter0: com.android.internal.net.VpnProfile;

        $r1 = staticinvoke <android.net.Ikev2VpnProfile: android.net.Ikev2VpnProfile fromVpnProfile(com.android.internal.net.VpnProfile,android.security.KeyStore)>(r0, null);

        return $r1;
    }

    public static android.net.Ikev2VpnProfile fromVpnProfile(com.android.internal.net.VpnProfile, android.security.KeyStore) throws java.io.IOException, java.security.GeneralSecurityException
    {
        com.android.internal.net.VpnProfile r0;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.String r2, $r4, $r5, $r13, $r14, $r15, $r18, $r22, $r23, $r25, $r26, $r27, $r28, $r30, $r34, $r35;
        android.net.ProxyInfo $r6;
        java.util.List $r8;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.security.cert.X509Certificate $r16, $r29, $r31;
        byte[] $r19;
        android.security.KeyStore r37;
        java.lang.Object r38;
        android.net.Ikev2VpnProfile $r39;
        android.net.Ikev2VpnProfile$Builder r40;
        java.lang.IllegalArgumentException r41, r42;
        java.security.PrivateKey r43;

        r0 := @parameter0: com.android.internal.net.VpnProfile;

        r37 := @parameter1: android.security.KeyStore;

        r40 = new android.net.Ikev2VpnProfile$Builder;

        $r5 = r0.<com.android.internal.net.VpnProfile: java.lang.String server>;

        $r4 = r0.<com.android.internal.net.VpnProfile: java.lang.String ipsecIdentifier>;

        specialinvoke r40.<android.net.Ikev2VpnProfile$Builder: void <init>(java.lang.String,java.lang.String)>($r5, $r4);

        $r6 = r0.<com.android.internal.net.VpnProfile: android.net.ProxyInfo proxy>;

        virtualinvoke r40.<android.net.Ikev2VpnProfile$Builder: android.net.Ikev2VpnProfile$Builder setProxy(android.net.ProxyInfo)>($r6);

        $r8 = virtualinvoke r0.<com.android.internal.net.VpnProfile: java.util.List getAllowedAlgorithms()>();

        virtualinvoke r40.<android.net.Ikev2VpnProfile$Builder: android.net.Ikev2VpnProfile$Builder setAllowedAlgorithms(java.util.List)>($r8);

        $z0 = r0.<com.android.internal.net.VpnProfile: boolean isBypassable>;

        virtualinvoke r40.<android.net.Ikev2VpnProfile$Builder: android.net.Ikev2VpnProfile$Builder setBypassable(boolean)>($z0);

        $z1 = r0.<com.android.internal.net.VpnProfile: boolean isMetered>;

        virtualinvoke r40.<android.net.Ikev2VpnProfile$Builder: android.net.Ikev2VpnProfile$Builder setMetered(boolean)>($z1);

        $i1 = r0.<com.android.internal.net.VpnProfile: int maxMtu>;

        virtualinvoke r40.<android.net.Ikev2VpnProfile$Builder: android.net.Ikev2VpnProfile$Builder setMaxMtu(int)>($i1);

        $z2 = r0.<com.android.internal.net.VpnProfile: boolean isRestrictedToTestNetworks>;

        if $z2 == 0 goto label1;

        virtualinvoke r40.<android.net.Ikev2VpnProfile$Builder: android.net.Ikev2VpnProfile$Builder restrictToTestNetworks()>();

     label1:
        i0 = r0.<com.android.internal.net.VpnProfile: int type>;

        if i0 == 6 goto label7;

        if i0 == 7 goto label6;

        if i0 != 8 goto label5;

        $r22 = r0.<com.android.internal.net.VpnProfile: java.lang.String ipsecSecret>;

        $z3 = virtualinvoke $r22.<java.lang.String: boolean startsWith(java.lang.String)>("KEYSTORE_ALIAS:");

        if $z3 == 0 goto label2;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r37, "Missing Keystore for aliased PrivateKey");

        $r35 = r0.<com.android.internal.net.VpnProfile: java.lang.String ipsecSecret>;

        $r34 = "KEYSTORE_ALIAS:";

        $i3 = virtualinvoke $r34.<java.lang.String: int length()>();

        r2 = virtualinvoke $r35.<java.lang.String: java.lang.String substring(int)>($i3);

        $i4 = staticinvoke <android.os.Process: int myUid()>();

        r38 = staticinvoke <android.security.keystore.AndroidKeyStoreProvider: android.security.keystore.AndroidKeyStorePrivateKey loadAndroidKeyStorePrivateKeyFromKeystore(android.security.KeyStore,java.lang.String,int)>(r37, r2, $i4);

        goto label3;

     label2:
        $r23 = r0.<com.android.internal.net.VpnProfile: java.lang.String ipsecSecret>;

        $z4 = virtualinvoke $r23.<java.lang.String: boolean startsWith(java.lang.String)>("INLINE:");

        if $z4 == 0 goto label4;

        $r26 = r0.<com.android.internal.net.VpnProfile: java.lang.String ipsecSecret>;

        $r25 = "INLINE:";

        $i2 = virtualinvoke $r25.<java.lang.String: int length()>();

        $r27 = virtualinvoke $r26.<java.lang.String: java.lang.String substring(int)>($i2);

        r38 = staticinvoke <android.net.Ikev2VpnProfile: java.security.PrivateKey getPrivateKey(java.lang.String)>($r27);

     label3:
        $r28 = r0.<com.android.internal.net.VpnProfile: java.lang.String ipsecUserCert>;

        $r29 = staticinvoke <android.net.Ikev2VpnProfile: java.security.cert.X509Certificate certificateFromPemString(java.lang.String)>($r28);

        $r30 = r0.<com.android.internal.net.VpnProfile: java.lang.String ipsecCaCert>;

        $r31 = staticinvoke <android.net.Ikev2VpnProfile: java.security.cert.X509Certificate certificateFromPemString(java.lang.String)>($r30);

        r43 = (java.security.PrivateKey) r38;

        virtualinvoke r40.<android.net.Ikev2VpnProfile$Builder: android.net.Ikev2VpnProfile$Builder setAuthDigitalSignature(java.security.cert.X509Certificate,java.security.PrivateKey,java.security.cert.X509Certificate)>($r29, r43, $r31);

        goto label8;

     label4:
        r41 = new java.lang.IllegalArgumentException;

        specialinvoke r41.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid RSA private key prefix");

        throw r41;

     label5:
        r42 = new java.lang.IllegalArgumentException;

        specialinvoke r42.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid auth method set");

        throw r42;

     label6:
        $r18 = r0.<com.android.internal.net.VpnProfile: java.lang.String ipsecSecret>;

        $r19 = staticinvoke <android.net.Ikev2VpnProfile: byte[] decodeFromIpsecSecret(java.lang.String)>($r18);

        virtualinvoke r40.<android.net.Ikev2VpnProfile$Builder: android.net.Ikev2VpnProfile$Builder setAuthPsk(byte[])>($r19);

        goto label8;

     label7:
        $r14 = r0.<com.android.internal.net.VpnProfile: java.lang.String username>;

        $r15 = r0.<com.android.internal.net.VpnProfile: java.lang.String password>;

        $r13 = r0.<com.android.internal.net.VpnProfile: java.lang.String ipsecCaCert>;

        $r16 = staticinvoke <android.net.Ikev2VpnProfile: java.security.cert.X509Certificate certificateFromPemString(java.lang.String)>($r13);

        virtualinvoke r40.<android.net.Ikev2VpnProfile$Builder: android.net.Ikev2VpnProfile$Builder setAuthUsernamePassword(java.lang.String,java.lang.String,java.security.cert.X509Certificate)>($r14, $r15, $r16);

     label8:
        $r39 = virtualinvoke r40.<android.net.Ikev2VpnProfile$Builder: android.net.Ikev2VpnProfile build()>();

        return $r39;
    }

    private static java.security.PrivateKey getPrivateKey(java.lang.String) throws java.security.spec.InvalidKeySpecException, java.security.NoSuchAlgorithmException
    {
        java.security.spec.PKCS8EncodedKeySpec $r0;
        byte[] $r1;
        java.security.KeyFactory $r2;
        java.security.PrivateKey $r3;
        java.lang.String r4;

        r4 := @parameter0: java.lang.String;

        $r0 = new java.security.spec.PKCS8EncodedKeySpec;

        $r1 = staticinvoke <android.net.Ikev2VpnProfile: byte[] decodeFromIpsecSecret(java.lang.String)>(r4);

        specialinvoke $r0.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>($r1);

        $r2 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>("RSA");

        $r3 = virtualinvoke $r2.<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>($r0);

        return $r3;
    }

    public static boolean hasAeadAlgorithms(java.util.List)
    {
        java.util.List r0;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        $z0 = interfaceinvoke r0.<java.util.List: boolean contains(java.lang.Object)>("rfc4106(gcm(aes))");

        return $z0;
    }

    public static boolean hasNormalModeAlgorithms(java.util.List)
    {
        java.util.List r0;
        boolean z0, $z2, $z3, z4, z5, z6;

        r0 := @parameter0: java.util.List;

        z0 = interfaceinvoke r0.<java.util.List: boolean contains(java.lang.Object)>("cbc(aes)");

        z4 = interfaceinvoke r0.<java.util.List: boolean contains(java.lang.Object)>("hmac(sha256)");

        if z4 != 0 goto label2;

        $z2 = interfaceinvoke r0.<java.util.List: boolean contains(java.lang.Object)>("hmac(sha384)");

        if $z2 != 0 goto label2;

        $z3 = interfaceinvoke r0.<java.util.List: boolean contains(java.lang.Object)>("hmac(sha512)");

        if $z3 == 0 goto label1;

        goto label2;

     label1:
        z5 = 0;

        goto label3;

     label2:
        z5 = 1;

     label3:
        z6 = 0;

        if z0 == 0 goto label4;

        z6 = 0;

        if z5 == 0 goto label4;

        z6 = 1;

     label4:
        return z6;
    }

    public static boolean isValidVpnProfile(com.android.internal.net.VpnProfile)
    {
        com.android.internal.net.VpnProfile r0;
        int i0;
        java.lang.String $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @parameter0: com.android.internal.net.VpnProfile;

        $r1 = r0.<com.android.internal.net.VpnProfile: java.lang.String server>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label8;

        $r2 = r0.<com.android.internal.net.VpnProfile: java.lang.String ipsecIdentifier>;

        $z1 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        goto label8;

     label1:
        i0 = r0.<com.android.internal.net.VpnProfile: int type>;

        if i0 == 6 goto label5;

        if i0 == 7 goto label4;

        if i0 == 8 goto label2;

        return 0;

     label2:
        $r6 = r0.<com.android.internal.net.VpnProfile: java.lang.String ipsecSecret>;

        $z5 = virtualinvoke $r6.<java.lang.String: boolean isEmpty()>();

        if $z5 != 0 goto label3;

        $r7 = r0.<com.android.internal.net.VpnProfile: java.lang.String ipsecUserCert>;

        $z6 = virtualinvoke $r7.<java.lang.String: boolean isEmpty()>();

        if $z6 == 0 goto label6;

     label3:
        return 0;

     label4:
        $r5 = r0.<com.android.internal.net.VpnProfile: java.lang.String ipsecSecret>;

        $z4 = virtualinvoke $r5.<java.lang.String: boolean isEmpty()>();

        if $z4 == 0 goto label6;

        return 0;

     label5:
        $r3 = r0.<com.android.internal.net.VpnProfile: java.lang.String username>;

        $z2 = virtualinvoke $r3.<java.lang.String: boolean isEmpty()>();

        if $z2 != 0 goto label7;

        $r4 = r0.<com.android.internal.net.VpnProfile: java.lang.String password>;

        $z3 = virtualinvoke $r4.<java.lang.String: boolean isEmpty()>();

        if $z3 == 0 goto label6;

        goto label7;

     label6:
        return 1;

     label7:
        return 0;

     label8:
        return 0;
    }

    private void validate()
    {
        android.net.Ikev2VpnProfile r0;
        int i0, $i1;
        java.lang.Object[] $r1, $r4, $r8, $r11, $r14, $r18, $r21;
        java.lang.String $r2, $r5, $r9, $r12;
        java.lang.IllegalArgumentException $r7, $r17;
        byte[] $r15;
        java.security.cert.X509Certificate $r19, $r24, r25, r26;
        java.security.PrivateKey $r22;
        java.util.List $r27;

        r0 := @this: android.net.Ikev2VpnProfile;

        $r2 = r0.<android.net.Ikev2VpnProfile: java.lang.String mServerAddr>;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = "Server Address";

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence,java.lang.String,java.lang.Object[])>($r2, "Required parameter was not provided: %s", $r1);

        $r5 = r0.<android.net.Ikev2VpnProfile: java.lang.String mUserIdentity>;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = "User Identity";

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence,java.lang.String,java.lang.Object[])>($r5, "Required parameter was not provided: %s", $r4);

        $i1 = r0.<android.net.Ikev2VpnProfile: int mMaxMtu>;

        if $i1 < 1280 goto label5;

        i0 = r0.<android.net.Ikev2VpnProfile: int mType>;

        if i0 == 6 goto label3;

        if i0 == 7 goto label2;

        if i0 != 8 goto label1;

        $r19 = r0.<android.net.Ikev2VpnProfile: java.security.cert.X509Certificate mUserCert>;

        $r18 = newarray (java.lang.Object)[1];

        $r18[0] = "User cert";

        staticinvoke <android.net.Ikev2VpnProfile: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object[])>($r19, "Required parameter was not provided: %s", $r18);

        $r22 = r0.<android.net.Ikev2VpnProfile: java.security.PrivateKey mRsaPrivateKey>;

        $r21 = newarray (java.lang.Object)[1];

        $r21[0] = "RSA Private key";

        staticinvoke <android.net.Ikev2VpnProfile: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object[])>($r22, "Required parameter was not provided: %s", $r21);

        $r24 = r0.<android.net.Ikev2VpnProfile: java.security.cert.X509Certificate mUserCert>;

        staticinvoke <android.net.Ikev2VpnProfile: void checkCert(java.security.cert.X509Certificate)>($r24);

        r25 = r0.<android.net.Ikev2VpnProfile: java.security.cert.X509Certificate mServerRootCaCert>;

        if r25 == null goto label4;

        staticinvoke <android.net.Ikev2VpnProfile: void checkCert(java.security.cert.X509Certificate)>(r25);

        goto label4;

     label1:
        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid auth method set");

        throw $r17;

     label2:
        $r15 = r0.<android.net.Ikev2VpnProfile: byte[] mPresharedKey>;

        $r14 = newarray (java.lang.Object)[1];

        $r14[0] = "Preshared Key";

        staticinvoke <android.net.Ikev2VpnProfile: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object[])>($r15, "Required parameter was not provided: %s", $r14);

        goto label4;

     label3:
        $r9 = r0.<android.net.Ikev2VpnProfile: java.lang.String mUsername>;

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = "Username";

        staticinvoke <android.net.Ikev2VpnProfile: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object[])>($r9, "Required parameter was not provided: %s", $r8);

        $r12 = r0.<android.net.Ikev2VpnProfile: java.lang.String mPassword>;

        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = "Password";

        staticinvoke <android.net.Ikev2VpnProfile: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object[])>($r12, "Required parameter was not provided: %s", $r11);

        r26 = r0.<android.net.Ikev2VpnProfile: java.security.cert.X509Certificate mServerRootCaCert>;

        if r26 == null goto label4;

        staticinvoke <android.net.Ikev2VpnProfile: void checkCert(java.security.cert.X509Certificate)>(r26);

     label4:
        $r27 = r0.<android.net.Ikev2VpnProfile: java.util.List mAllowedAlgorithms>;

        staticinvoke <android.net.Ikev2VpnProfile: void validateAllowedAlgorithms(java.util.List)>($r27);

        return;

     label5:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Max MTU must be at least1280");

        throw $r7;
    }

    private static void validateAllowedAlgorithms(java.util.List)
    {
        java.util.List r0;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalArgumentException $r1, $r2;

        r0 := @parameter0: java.util.List;

        staticinvoke <com.android.internal.net.VpnProfile: void validateAllowedAlgorithms(java.util.List)>(r0);

        $z0 = interfaceinvoke r0.<java.util.List: boolean contains(java.lang.Object)>("hmac(md5)");

        if $z0 != 0 goto label3;

        $z1 = interfaceinvoke r0.<java.util.List: boolean contains(java.lang.Object)>("hmac(sha1)");

        if $z1 != 0 goto label3;

        $z2 = staticinvoke <android.net.Ikev2VpnProfile: boolean hasAeadAlgorithms(java.util.List)>(r0);

        if $z2 != 0 goto label2;

        $z3 = staticinvoke <android.net.Ikev2VpnProfile: boolean hasNormalModeAlgorithms(java.util.List)>(r0);

        if $z3 == 0 goto label1;

        goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Algorithm set missing support for Auth, Crypt or both");

        throw $r2;

     label2:
        return;

     label3:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Algorithm not supported for IKEv2 VPN profiles");

        throw $r1;
    }

    public boolean equals(java.lang.Object)
    {
        android.net.Ikev2VpnProfile r0, r22;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, z17;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r1, $r2, $r3, $r4, $r9, $r10, $r11, $r12;
        byte[] $r5, $r6;
        java.security.cert.X509Certificate $r7, $r8, $r15, $r16;
        java.security.PrivateKey $r13, $r14;
        android.net.ProxyInfo $r17, $r18;
        java.util.List $r19, $r20;
        java.lang.Object r21;

        r0 := @this: android.net.Ikev2VpnProfile;

        r21 := @parameter0: java.lang.Object;

        z0 = r21 instanceof android.net.Ikev2VpnProfile;

        z17 = 0;

        if z0 != 0 goto label1;

        return 0;

     label1:
        r22 = (android.net.Ikev2VpnProfile) r21;

        $i1 = r0.<android.net.Ikev2VpnProfile: int mType>;

        $i0 = r22.<android.net.Ikev2VpnProfile: int mType>;

        if $i1 != $i0 goto label2;

        $r2 = r0.<android.net.Ikev2VpnProfile: java.lang.String mServerAddr>;

        $r1 = r22.<android.net.Ikev2VpnProfile: java.lang.String mServerAddr>;

        $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r2, $r1);

        if $z1 == 0 goto label2;

        $r4 = r0.<android.net.Ikev2VpnProfile: java.lang.String mUserIdentity>;

        $r3 = r22.<android.net.Ikev2VpnProfile: java.lang.String mUserIdentity>;

        $z2 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r4, $r3);

        if $z2 == 0 goto label2;

        $r6 = r0.<android.net.Ikev2VpnProfile: byte[] mPresharedKey>;

        $r5 = r22.<android.net.Ikev2VpnProfile: byte[] mPresharedKey>;

        $z3 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r6, $r5);

        if $z3 == 0 goto label2;

        $r8 = r0.<android.net.Ikev2VpnProfile: java.security.cert.X509Certificate mServerRootCaCert>;

        $r7 = r22.<android.net.Ikev2VpnProfile: java.security.cert.X509Certificate mServerRootCaCert>;

        $z4 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r8, $r7);

        if $z4 == 0 goto label2;

        $r10 = r0.<android.net.Ikev2VpnProfile: java.lang.String mUsername>;

        $r9 = r22.<android.net.Ikev2VpnProfile: java.lang.String mUsername>;

        $z5 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r10, $r9);

        if $z5 == 0 goto label2;

        $r12 = r0.<android.net.Ikev2VpnProfile: java.lang.String mPassword>;

        $r11 = r22.<android.net.Ikev2VpnProfile: java.lang.String mPassword>;

        $z6 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r12, $r11);

        if $z6 == 0 goto label2;

        $r14 = r0.<android.net.Ikev2VpnProfile: java.security.PrivateKey mRsaPrivateKey>;

        $r13 = r22.<android.net.Ikev2VpnProfile: java.security.PrivateKey mRsaPrivateKey>;

        $z7 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r14, $r13);

        if $z7 == 0 goto label2;

        $r16 = r0.<android.net.Ikev2VpnProfile: java.security.cert.X509Certificate mUserCert>;

        $r15 = r22.<android.net.Ikev2VpnProfile: java.security.cert.X509Certificate mUserCert>;

        $z8 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r16, $r15);

        if $z8 == 0 goto label2;

        $r18 = r0.<android.net.Ikev2VpnProfile: android.net.ProxyInfo mProxyInfo>;

        $r17 = r22.<android.net.Ikev2VpnProfile: android.net.ProxyInfo mProxyInfo>;

        $z9 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r18, $r17);

        if $z9 == 0 goto label2;

        $r20 = r0.<android.net.Ikev2VpnProfile: java.util.List mAllowedAlgorithms>;

        $r19 = r22.<android.net.Ikev2VpnProfile: java.util.List mAllowedAlgorithms>;

        $z10 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r20, $r19);

        if $z10 == 0 goto label2;

        $z12 = r0.<android.net.Ikev2VpnProfile: boolean mIsBypassable>;

        $z11 = r22.<android.net.Ikev2VpnProfile: boolean mIsBypassable>;

        if $z12 != $z11 goto label2;

        $z14 = r0.<android.net.Ikev2VpnProfile: boolean mIsMetered>;

        $z13 = r22.<android.net.Ikev2VpnProfile: boolean mIsMetered>;

        if $z14 != $z13 goto label2;

        $i3 = r0.<android.net.Ikev2VpnProfile: int mMaxMtu>;

        $i2 = r22.<android.net.Ikev2VpnProfile: int mMaxMtu>;

        if $i3 != $i2 goto label2;

        $z16 = r0.<android.net.Ikev2VpnProfile: boolean mIsRestrictedToTestNetworks>;

        $z15 = r22.<android.net.Ikev2VpnProfile: boolean mIsRestrictedToTestNetworks>;

        if $z16 != $z15 goto label2;

        z17 = 1;

        goto label2;

     label2:
        return z17;
    }

    public java.util.List getAllowedAlgorithms()
    {
        android.net.Ikev2VpnProfile r0;
        java.util.List $r1;

        r0 := @this: android.net.Ikev2VpnProfile;

        $r1 = r0.<android.net.Ikev2VpnProfile: java.util.List mAllowedAlgorithms>;

        return $r1;
    }

    public int getMaxMtu()
    {
        android.net.Ikev2VpnProfile r0;
        int $i0;

        r0 := @this: android.net.Ikev2VpnProfile;

        $i0 = r0.<android.net.Ikev2VpnProfile: int mMaxMtu>;

        return $i0;
    }

    public java.lang.String getPassword()
    {
        android.net.Ikev2VpnProfile r0;
        java.lang.String $r1;

        r0 := @this: android.net.Ikev2VpnProfile;

        $r1 = r0.<android.net.Ikev2VpnProfile: java.lang.String mPassword>;

        return $r1;
    }

    public byte[] getPresharedKey()
    {
        android.net.Ikev2VpnProfile r0;
        int $i0;
        byte[] r1, r2;

        r0 := @this: android.net.Ikev2VpnProfile;

        r1 = r0.<android.net.Ikev2VpnProfile: byte[] mPresharedKey>;

        if r1 != null goto label1;

        r2 = null;

        goto label2;

     label1:
        $i0 = lengthof r1;

        r2 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>(r1, $i0);

     label2:
        return r2;
    }

    public android.net.ProxyInfo getProxyInfo()
    {
        android.net.Ikev2VpnProfile r0;
        android.net.ProxyInfo $r1;

        r0 := @this: android.net.Ikev2VpnProfile;

        $r1 = r0.<android.net.Ikev2VpnProfile: android.net.ProxyInfo mProxyInfo>;

        return $r1;
    }

    public java.security.PrivateKey getRsaPrivateKey()
    {
        android.net.Ikev2VpnProfile r0;
        java.security.PrivateKey $r1;

        r0 := @this: android.net.Ikev2VpnProfile;

        $r1 = r0.<android.net.Ikev2VpnProfile: java.security.PrivateKey mRsaPrivateKey>;

        return $r1;
    }

    public java.lang.String getServerAddr()
    {
        android.net.Ikev2VpnProfile r0;
        java.lang.String $r1;

        r0 := @this: android.net.Ikev2VpnProfile;

        $r1 = r0.<android.net.Ikev2VpnProfile: java.lang.String mServerAddr>;

        return $r1;
    }

    public java.security.cert.X509Certificate getServerRootCaCert()
    {
        android.net.Ikev2VpnProfile r0;
        java.security.cert.X509Certificate $r1;

        r0 := @this: android.net.Ikev2VpnProfile;

        $r1 = r0.<android.net.Ikev2VpnProfile: java.security.cert.X509Certificate mServerRootCaCert>;

        return $r1;
    }

    public java.security.cert.X509Certificate getUserCert()
    {
        android.net.Ikev2VpnProfile r0;
        java.security.cert.X509Certificate $r1;

        r0 := @this: android.net.Ikev2VpnProfile;

        $r1 = r0.<android.net.Ikev2VpnProfile: java.security.cert.X509Certificate mUserCert>;

        return $r1;
    }

    public java.lang.String getUserIdentity()
    {
        android.net.Ikev2VpnProfile r0;
        java.lang.String $r1;

        r0 := @this: android.net.Ikev2VpnProfile;

        $r1 = r0.<android.net.Ikev2VpnProfile: java.lang.String mUserIdentity>;

        return $r1;
    }

    public java.lang.String getUsername()
    {
        android.net.Ikev2VpnProfile r0;
        java.lang.String $r1;

        r0 := @this: android.net.Ikev2VpnProfile;

        $r1 = r0.<android.net.Ikev2VpnProfile: java.lang.String mUsername>;

        return $r1;
    }

    public int hashCode()
    {
        android.net.Ikev2VpnProfile r0;
        java.lang.Object[] $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.Integer $r2, $r6, $r16;
        java.lang.String $r3, $r4, $r8, $r9;
        byte[] $r5;
        java.security.cert.X509Certificate $r7, $r11;
        java.security.PrivateKey $r10;
        android.net.ProxyInfo $r12;
        java.util.List $r13;
        boolean $z0, $z1, $z2;
        java.lang.Boolean $r14, $r15, $r17;

        r0 := @this: android.net.Ikev2VpnProfile;

        $r1 = newarray (java.lang.Object)[15];

        $i0 = r0.<android.net.Ikev2VpnProfile: int mType>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[0] = $r2;

        $r3 = r0.<android.net.Ikev2VpnProfile: java.lang.String mServerAddr>;

        $r1[1] = $r3;

        $r4 = r0.<android.net.Ikev2VpnProfile: java.lang.String mUserIdentity>;

        $r1[2] = $r4;

        $r5 = r0.<android.net.Ikev2VpnProfile: byte[] mPresharedKey>;

        $i1 = staticinvoke <java.util.Arrays: int hashCode(byte[])>($r5);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r1[3] = $r6;

        $r7 = r0.<android.net.Ikev2VpnProfile: java.security.cert.X509Certificate mServerRootCaCert>;

        $r1[4] = $r7;

        $r8 = r0.<android.net.Ikev2VpnProfile: java.lang.String mUsername>;

        $r1[5] = $r8;

        $r9 = r0.<android.net.Ikev2VpnProfile: java.lang.String mPassword>;

        $r1[6] = $r9;

        $r10 = r0.<android.net.Ikev2VpnProfile: java.security.PrivateKey mRsaPrivateKey>;

        $r1[7] = $r10;

        $r11 = r0.<android.net.Ikev2VpnProfile: java.security.cert.X509Certificate mUserCert>;

        $r1[8] = $r11;

        $r12 = r0.<android.net.Ikev2VpnProfile: android.net.ProxyInfo mProxyInfo>;

        $r1[9] = $r12;

        $r13 = r0.<android.net.Ikev2VpnProfile: java.util.List mAllowedAlgorithms>;

        $r1[10] = $r13;

        $z0 = r0.<android.net.Ikev2VpnProfile: boolean mIsBypassable>;

        $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r1[11] = $r14;

        $z1 = r0.<android.net.Ikev2VpnProfile: boolean mIsMetered>;

        $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        $r1[12] = $r15;

        $i2 = r0.<android.net.Ikev2VpnProfile: int mMaxMtu>;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r1[13] = $r16;

        $z2 = r0.<android.net.Ikev2VpnProfile: boolean mIsRestrictedToTestNetworks>;

        $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        $r1[14] = $r17;

        $i3 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>($r1);

        return $i3;
    }

    public boolean isBypassable()
    {
        android.net.Ikev2VpnProfile r0;
        boolean $z0;

        r0 := @this: android.net.Ikev2VpnProfile;

        $z0 = r0.<android.net.Ikev2VpnProfile: boolean mIsBypassable>;

        return $z0;
    }

    public boolean isMetered()
    {
        android.net.Ikev2VpnProfile r0;
        boolean $z0;

        r0 := @this: android.net.Ikev2VpnProfile;

        $z0 = r0.<android.net.Ikev2VpnProfile: boolean mIsMetered>;

        return $z0;
    }

    public boolean isRestrictedToTestNetworks()
    {
        android.net.Ikev2VpnProfile r0;
        boolean $z0;

        r0 := @this: android.net.Ikev2VpnProfile;

        $z0 = r0.<android.net.Ikev2VpnProfile: boolean mIsRestrictedToTestNetworks>;

        return $z0;
    }

    public com.android.internal.net.VpnProfile toVpnProfile() throws java.io.IOException, java.security.GeneralSecurityException
    {
        android.net.Ikev2VpnProfile r0;
        boolean z0, $z1, $z2;
        int i0, $i1, $i2;
        com.android.internal.net.VpnProfile $r2;
        java.lang.String $r3, $r4, $r7, $r8, $r10, $r13, $r18, $r20, r21;
        android.net.ProxyInfo $r5;
        java.util.List $r6;
        byte[] $r9, $r17;
        java.lang.IllegalArgumentException $r11;
        java.security.cert.X509Certificate $r12, r23, r24;
        java.lang.StringBuilder $r14;
        java.security.PrivateKey $r16;

        r0 := @this: android.net.Ikev2VpnProfile;

        z0 = r0.<android.net.Ikev2VpnProfile: boolean mIsRestrictedToTestNetworks>;

        r21 = "";

        $r2 = new com.android.internal.net.VpnProfile;

        specialinvoke $r2.<com.android.internal.net.VpnProfile: void <init>(java.lang.String,boolean)>("", z0);

        $i1 = r0.<android.net.Ikev2VpnProfile: int mType>;

        $r2.<com.android.internal.net.VpnProfile: int type> = $i1;

        $r3 = r0.<android.net.Ikev2VpnProfile: java.lang.String mServerAddr>;

        $r2.<com.android.internal.net.VpnProfile: java.lang.String server> = $r3;

        $r4 = r0.<android.net.Ikev2VpnProfile: java.lang.String mUserIdentity>;

        $r2.<com.android.internal.net.VpnProfile: java.lang.String ipsecIdentifier> = $r4;

        $r5 = r0.<android.net.Ikev2VpnProfile: android.net.ProxyInfo mProxyInfo>;

        $r2.<com.android.internal.net.VpnProfile: android.net.ProxyInfo proxy> = $r5;

        $r6 = r0.<android.net.Ikev2VpnProfile: java.util.List mAllowedAlgorithms>;

        virtualinvoke $r2.<com.android.internal.net.VpnProfile: void setAllowedAlgorithms(java.util.List)>($r6);

        $z1 = r0.<android.net.Ikev2VpnProfile: boolean mIsBypassable>;

        $r2.<com.android.internal.net.VpnProfile: boolean isBypassable> = $z1;

        $z2 = r0.<android.net.Ikev2VpnProfile: boolean mIsMetered>;

        $r2.<com.android.internal.net.VpnProfile: boolean isMetered> = $z2;

        $i2 = r0.<android.net.Ikev2VpnProfile: int mMaxMtu>;

        $r2.<com.android.internal.net.VpnProfile: int maxMtu> = $i2;

        $r2.<com.android.internal.net.VpnProfile: boolean areAuthParamsInline> = 1;

        $r2.<com.android.internal.net.VpnProfile: boolean saveLogin> = 1;

        i0 = r0.<android.net.Ikev2VpnProfile: int mType>;

        if i0 == 6 goto label5;

        if i0 == 7 goto label4;

        if i0 != 8 goto label3;

        $r12 = r0.<android.net.Ikev2VpnProfile: java.security.cert.X509Certificate mUserCert>;

        $r13 = staticinvoke <android.net.Ikev2VpnProfile: java.lang.String certificateToPemString(java.security.cert.X509Certificate)>($r12);

        $r2.<com.android.internal.net.VpnProfile: java.lang.String ipsecUserCert> = $r13;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("INLINE:");

        $r16 = r0.<android.net.Ikev2VpnProfile: java.security.PrivateKey mRsaPrivateKey>;

        $r17 = interfaceinvoke $r16.<java.security.PrivateKey: byte[] getEncoded()>();

        $r18 = staticinvoke <android.net.Ikev2VpnProfile: java.lang.String encodeForIpsecSecret(byte[])>($r17);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r2.<com.android.internal.net.VpnProfile: java.lang.String ipsecSecret> = $r20;

        r23 = r0.<android.net.Ikev2VpnProfile: java.security.cert.X509Certificate mServerRootCaCert>;

        if r23 != null goto label1;

        goto label2;

     label1:
        r21 = staticinvoke <android.net.Ikev2VpnProfile: java.lang.String certificateToPemString(java.security.cert.X509Certificate)>(r23);

     label2:
        $r2.<com.android.internal.net.VpnProfile: java.lang.String ipsecCaCert> = r21;

        goto label8;

     label3:
        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid auth method set");

        throw $r11;

     label4:
        $r9 = r0.<android.net.Ikev2VpnProfile: byte[] mPresharedKey>;

        $r10 = staticinvoke <android.net.Ikev2VpnProfile: java.lang.String encodeForIpsecSecret(byte[])>($r9);

        $r2.<com.android.internal.net.VpnProfile: java.lang.String ipsecSecret> = $r10;

        goto label8;

     label5:
        $r7 = r0.<android.net.Ikev2VpnProfile: java.lang.String mUsername>;

        $r2.<com.android.internal.net.VpnProfile: java.lang.String username> = $r7;

        $r8 = r0.<android.net.Ikev2VpnProfile: java.lang.String mPassword>;

        $r2.<com.android.internal.net.VpnProfile: java.lang.String password> = $r8;

        r24 = r0.<android.net.Ikev2VpnProfile: java.security.cert.X509Certificate mServerRootCaCert>;

        if r24 != null goto label6;

        goto label7;

     label6:
        r21 = staticinvoke <android.net.Ikev2VpnProfile: java.lang.String certificateToPemString(java.security.cert.X509Certificate)>(r24);

     label7:
        $r2.<com.android.internal.net.VpnProfile: java.lang.String ipsecCaCert> = r21;

     label8:
        return $r2;
    }
}
