public class android.net.IpMemoryStore extends android.net.IpMemoryStoreClient
{
    private static final java.lang.String TAG;
    private final java.util.concurrent.CompletableFuture mService;
    private final java.util.concurrent.atomic.AtomicReference mTailNode;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        $r0 = class "Landroid/net/IpMemoryStore;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <android.net.IpMemoryStore: java.lang.String TAG> = $r1;

        return;
    }

    public void <init>(android.content.Context)
    {
        android.net.IpMemoryStore r0;
        android.content.Context r1;
        java.util.concurrent.CompletableFuture $r2, $r4;
        java.util.concurrent.atomic.AtomicReference $r3;
        android.net.networkstack.ModuleNetworkStackClient $r5;
        android.net.IpMemoryStore$1 $r6;

        r0 := @this: android.net.IpMemoryStore;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.net.IpMemoryStoreClient: void <init>(android.content.Context)>(r1);

        $r2 = new java.util.concurrent.CompletableFuture;

        specialinvoke $r2.<java.util.concurrent.CompletableFuture: void <init>()>();

        r0.<android.net.IpMemoryStore: java.util.concurrent.CompletableFuture mService> = $r2;

        $r3 = new java.util.concurrent.atomic.AtomicReference;

        $r4 = r0.<android.net.IpMemoryStore: java.util.concurrent.CompletableFuture mService>;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>($r4);

        r0.<android.net.IpMemoryStore: java.util.concurrent.atomic.AtomicReference mTailNode> = $r3;

        $r5 = virtualinvoke r0.<android.net.IpMemoryStore: android.net.networkstack.ModuleNetworkStackClient getModuleNetworkStackClient(android.content.Context)>(r1);

        $r6 = new android.net.IpMemoryStore$1;

        specialinvoke $r6.<android.net.IpMemoryStore$1: void <init>(android.net.IpMemoryStore)>(r0);

        virtualinvoke $r5.<android.net.networkstack.ModuleNetworkStackClient: void fetchIpMemoryStore(android.net.IIpMemoryStoreCallbacks)>($r6);

        return;
    }

    static java.util.concurrent.CompletableFuture access$000(android.net.IpMemoryStore)
    {
        android.net.IpMemoryStore r0;
        java.util.concurrent.CompletableFuture $r1;

        r0 := @parameter0: android.net.IpMemoryStore;

        $r1 = r0.<android.net.IpMemoryStore: java.util.concurrent.CompletableFuture mService>;

        return $r1;
    }

    public static android.net.IpMemoryStore getMemoryStore(android.content.Context)
    {
        android.content.Context r0;
        android.net.IpMemoryStore $r1;

        r0 := @parameter0: android.content.Context;

        $r1 = new android.net.IpMemoryStore;

        specialinvoke $r1.<android.net.IpMemoryStore: void <init>(android.content.Context)>(r0);

        return $r1;
    }

    static android.net.IIpMemoryStore lambda$runWhenServiceReady$0(java.util.function.Consumer, android.net.IIpMemoryStore, java.lang.Throwable)
    {
        android.net.IIpMemoryStore r0;
        java.lang.String $r2, $r6, $r8, r12;
        java.lang.Exception $r3;
        java.lang.StringBuilder $r4;
        java.util.function.Consumer r9;
        java.lang.Throwable r10;

        r9 := @parameter0: java.util.function.Consumer;

        r0 := @parameter1: android.net.IIpMemoryStore;

        r10 := @parameter2: java.lang.Throwable;

        if r10 == null goto label1;

        $r2 = <android.net.IpMemoryStore: java.lang.String TAG>;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>($r2, "Error fetching IpMemoryStore", r10);

        return r0;

     label1:
        interfaceinvoke r9.<java.util.function.Consumer: void accept(java.lang.Object)>(r0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r12 = <android.net.IpMemoryStore: java.lang.String TAG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception occured: ");

        $r6 = virtualinvoke $r3.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>(r12, $r8);

     label4:
        return r0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    static java.util.concurrent.CompletableFuture lambda$runWhenServiceReady$1(java.util.function.Consumer, java.util.concurrent.CompletableFuture)
    {
        java.util.function.Consumer r0;
        java.util.concurrent.CompletableFuture r1, $r3;
        android.net._$$Lambda$IpMemoryStore$pFctTFAvh_Nxb_aTb0gjNsixGeM $r2;

        r0 := @parameter0: java.util.function.Consumer;

        r1 := @parameter1: java.util.concurrent.CompletableFuture;

        $r2 = new android.net._$$Lambda$IpMemoryStore$pFctTFAvh_Nxb_aTb0gjNsixGeM;

        specialinvoke $r2.<android.net._$$Lambda$IpMemoryStore$pFctTFAvh_Nxb_aTb0gjNsixGeM: void <init>(java.util.function.Consumer)>(r0);

        $r3 = virtualinvoke r1.<java.util.concurrent.CompletableFuture: java.util.concurrent.CompletableFuture handle(java.util.function.BiFunction)>($r2);

        return $r3;
    }

    protected android.net.networkstack.ModuleNetworkStackClient getModuleNetworkStackClient(android.content.Context)
    {
        android.net.IpMemoryStore r0;
        android.content.Context r1;
        android.net.networkstack.ModuleNetworkStackClient $r2;

        r0 := @this: android.net.IpMemoryStore;

        r1 := @parameter0: android.content.Context;

        $r2 = staticinvoke <android.net.networkstack.ModuleNetworkStackClient: android.net.networkstack.ModuleNetworkStackClient getInstance(android.content.Context)>(r1);

        return $r2;
    }

    protected void runWhenServiceReady(java.util.function.Consumer) throws java.util.concurrent.ExecutionException
    {
        android.net.IpMemoryStore r0;
        java.util.function.Consumer r1;
        android.net._$$Lambda$IpMemoryStore$LPW97BoNSL4rh_RVPiAHfCbmGHU $r2;
        java.util.concurrent.atomic.AtomicReference $r3;

        r0 := @this: android.net.IpMemoryStore;

        r1 := @parameter0: java.util.function.Consumer;

        $r3 = r0.<android.net.IpMemoryStore: java.util.concurrent.atomic.AtomicReference mTailNode>;

        $r2 = new android.net._$$Lambda$IpMemoryStore$LPW97BoNSL4rh_RVPiAHfCbmGHU;

        specialinvoke $r2.<android.net._$$Lambda$IpMemoryStore$LPW97BoNSL4rh_RVPiAHfCbmGHU: void <init>(java.util.function.Consumer)>(r1);

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndUpdate(java.util.function.UnaryOperator)>($r2);

        return;
    }
}
