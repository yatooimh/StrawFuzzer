public final class android.net.IpPrefix extends java.lang.Object implements android.os.Parcelable
{
    public static final android.os.Parcelable$Creator CREATOR;
    private final byte[] address;
    private final int prefixLength;

    static void <clinit>()
    {
        android.net.IpPrefix$2 $r0;

        $r0 = new android.net.IpPrefix$2;

        specialinvoke $r0.<android.net.IpPrefix$2: void <init>()>();

        <android.net.IpPrefix: android.os.Parcelable$Creator CREATOR> = $r0;

        return;
    }

    public void <init>(java.lang.String)
    {
        android.net.IpPrefix r0;
        java.lang.Object $r1, $r4;
        java.net.InetAddress $r2;
        byte[] $r3;
        java.lang.Integer $r5;
        int $i0;
        java.lang.String r6;
        android.util.Pair r7;

        r0 := @this: android.net.IpPrefix;

        r6 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r7 = staticinvoke <android.net.NetworkUtils: android.util.Pair parseIpAndMask(java.lang.String)>(r6);

        $r1 = r7.<android.util.Pair: java.lang.Object first>;

        $r2 = (java.net.InetAddress) $r1;

        $r3 = virtualinvoke $r2.<java.net.InetAddress: byte[] getAddress()>();

        r0.<android.net.IpPrefix: byte[] address> = $r3;

        $r4 = r7.<android.util.Pair: java.lang.Object second>;

        $r5 = (java.lang.Integer) $r4;

        $i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        r0.<android.net.IpPrefix: int prefixLength> = $i0;

        specialinvoke r0.<android.net.IpPrefix: void checkAndMaskAddressAndPrefixLength()>();

        return;
    }

    public void <init>(java.net.InetAddress, int)
    {
        android.net.IpPrefix r0;
        java.net.InetAddress r1;
        int i0;
        byte[] $r2;

        r0 := @this: android.net.IpPrefix;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke r1.<java.net.InetAddress: byte[] getAddress()>();

        r0.<android.net.IpPrefix: byte[] address> = $r2;

        r0.<android.net.IpPrefix: int prefixLength> = i0;

        specialinvoke r0.<android.net.IpPrefix: void checkAndMaskAddressAndPrefixLength()>();

        return;
    }

    public void <init>(byte[], int)
    {
        android.net.IpPrefix r0;
        byte[] r1, $r3;
        int i0;
        java.lang.Object $r2;

        r0 := @this: android.net.IpPrefix;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (byte[]) $r2;

        r0.<android.net.IpPrefix: byte[] address> = $r3;

        r0.<android.net.IpPrefix: int prefixLength> = i0;

        specialinvoke r0.<android.net.IpPrefix: void checkAndMaskAddressAndPrefixLength()>();

        return;
    }

    static byte[] access$000(android.net.IpPrefix)
    {
        android.net.IpPrefix r0;
        byte[] $r1;

        r0 := @parameter0: android.net.IpPrefix;

        $r1 = r0.<android.net.IpPrefix: byte[] address>;

        return $r1;
    }

    private void checkAndMaskAddressAndPrefixLength()
    {
        android.net.IpPrefix r0;
        int $i0, $i1, $i2, $i3;
        byte[] $r1, $r4, r9;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r7;
        java.lang.String $r8;

        r0 := @this: android.net.IpPrefix;

        r9 = r0.<android.net.IpPrefix: byte[] address>;

        $i0 = lengthof r9;

        if $i0 == 4 goto label2;

        $i2 = lengthof r9;

        if $i2 != 16 goto label1;

        goto label2;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IpPrefix has ");

        $r4 = r0.<android.net.IpPrefix: byte[] address>;

        $i3 = lengthof $r4;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes which is neither 4 nor 16");

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label2:
        $r1 = r0.<android.net.IpPrefix: byte[] address>;

        $i1 = r0.<android.net.IpPrefix: int prefixLength>;

        staticinvoke <android.net.NetworkUtils: void maskRawAddress(byte[],int)>($r1, $i1);

        return;
    }

    public static java.util.Comparator lengthComparator()
    {
        android.net.IpPrefix$1 $r0;

        $r0 = new android.net.IpPrefix$1;

        specialinvoke $r0.<android.net.IpPrefix$1: void <init>()>();

        return $r0;
    }

    public boolean contains(java.net.InetAddress)
    {
        android.net.IpPrefix r0;
        byte[] $r1, $r2, r4;
        int $i0, $i1, $i2;
        boolean $z0;
        java.net.InetAddress r3;

        r0 := @this: android.net.IpPrefix;

        r3 := @parameter0: java.net.InetAddress;

        r4 = virtualinvoke r3.<java.net.InetAddress: byte[] getAddress()>();

        if r4 == null goto label2;

        $i1 = lengthof r4;

        $r1 = r0.<android.net.IpPrefix: byte[] address>;

        $i0 = lengthof $r1;

        if $i1 == $i0 goto label1;

        goto label2;

     label1:
        $i2 = r0.<android.net.IpPrefix: int prefixLength>;

        staticinvoke <android.net.NetworkUtils: void maskRawAddress(byte[],int)>(r4, $i2);

        $r2 = r0.<android.net.IpPrefix: byte[] address>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r2, r4);

        return $z0;

     label2:
        return 0;
    }

    public boolean containsPrefix(android.net.IpPrefix)
    {
        android.net.IpPrefix r0, r2;
        int $i0, $i1, $i2;
        byte[] $r1, r3;
        boolean $z0;

        r0 := @this: android.net.IpPrefix;

        r2 := @parameter0: android.net.IpPrefix;

        $i0 = virtualinvoke r2.<android.net.IpPrefix: int getPrefixLength()>();

        $i1 = r0.<android.net.IpPrefix: int prefixLength>;

        if $i0 >= $i1 goto label1;

        return 0;

     label1:
        r3 = virtualinvoke r2.<android.net.IpPrefix: byte[] getRawAddress()>();

        $i2 = r0.<android.net.IpPrefix: int prefixLength>;

        staticinvoke <android.net.NetworkUtils: void maskRawAddress(byte[],int)>(r3, $i2);

        $r1 = r0.<android.net.IpPrefix: byte[] address>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r3, $r1);

        return $z0;
    }

    public int describeContents()
    {
        android.net.IpPrefix r0;

        r0 := @this: android.net.IpPrefix;

        return 0;
    }

    public boolean equals(java.lang.Object)
    {
        android.net.IpPrefix r0, r4;
        byte[] $r1, $r2;
        boolean $z1, z2, z3;
        int $i0, $i1;
        java.lang.Object r3;

        r0 := @this: android.net.IpPrefix;

        r3 := @parameter0: java.lang.Object;

        z2 = r3 instanceof android.net.IpPrefix;

        if z2 != 0 goto label1;

        return 0;

     label1:
        r4 = (android.net.IpPrefix) r3;

        z3 = 0;

        $r2 = r0.<android.net.IpPrefix: byte[] address>;

        $r1 = r4.<android.net.IpPrefix: byte[] address>;

        $z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r2, $r1);

        if $z1 == 0 goto label2;

        z3 = 0;

        $i1 = r0.<android.net.IpPrefix: int prefixLength>;

        $i0 = r4.<android.net.IpPrefix: int prefixLength>;

        if $i1 != $i0 goto label2;

        z3 = 1;

     label2:
        return z3;
    }

    public java.net.InetAddress getAddress()
    {
        android.net.IpPrefix r0;
        byte[] $r1;
        java.lang.Throwable $r2;
        java.lang.IllegalArgumentException $r3;
        java.net.InetAddress r4;

        r0 := @this: android.net.IpPrefix;

     label1:
        $r1 = r0.<android.net.IpPrefix: byte[] address>;

        r4 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>($r1);

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Address is invalid");

        throw $r3;

        catch java.net.UnknownHostException from label1 to label2 with label3;
    }

    public int getPrefixLength()
    {
        android.net.IpPrefix r0;
        int $i0;

        r0 := @this: android.net.IpPrefix;

        $i0 = r0.<android.net.IpPrefix: int prefixLength>;

        return $i0;
    }

    public byte[] getRawAddress()
    {
        android.net.IpPrefix r0;
        byte[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: android.net.IpPrefix;

        $r1 = r0.<android.net.IpPrefix: byte[] address>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (byte[]) $r2;

        return $r3;
    }

    public int hashCode()
    {
        android.net.IpPrefix r0;
        byte[] $r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.net.IpPrefix;

        $r1 = r0.<android.net.IpPrefix: byte[] address>;

        $i0 = staticinvoke <java.util.Arrays: int hashCode(byte[])>($r1);

        $i1 = r0.<android.net.IpPrefix: int prefixLength>;

        $i2 = $i1 * 11;

        $i3 = $i0 + $i2;

        return $i3;
    }

    public boolean isIPv4()
    {
        android.net.IpPrefix r0;
        java.net.InetAddress $r1;
        boolean $z0;

        r0 := @this: android.net.IpPrefix;

        $r1 = virtualinvoke r0.<android.net.IpPrefix: java.net.InetAddress getAddress()>();

        $z0 = $r1 instanceof java.net.Inet4Address;

        return $z0;
    }

    public boolean isIPv6()
    {
        android.net.IpPrefix r0;
        java.net.InetAddress $r1;
        boolean $z0;

        r0 := @this: android.net.IpPrefix;

        $r1 = virtualinvoke r0.<android.net.IpPrefix: java.net.InetAddress getAddress()>();

        $z0 = $r1 instanceof java.net.Inet6Address;

        return $z0;
    }

    public java.lang.String toString()
    {
        android.net.IpPrefix r0;
        byte[] $r1;
        java.net.InetAddress $r2;
        java.lang.String $r3, r10;
        int $i0;
        java.lang.Throwable $r7;
        java.lang.IllegalStateException $r8;
        java.lang.StringBuilder r9;

        r0 := @this: android.net.IpPrefix;

     label1:
        r9 = new java.lang.StringBuilder;

        specialinvoke r9.<java.lang.StringBuilder: void <init>()>();

        $r1 = r0.<android.net.IpPrefix: byte[] address>;

        $r2 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>($r1);

        $r3 = virtualinvoke $r2.<java.net.InetAddress: java.lang.String getHostAddress()>();

        virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $i0 = r0.<android.net.IpPrefix: int prefixLength>;

        virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        r10 = virtualinvoke r9.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        return r10;

     label3:
        $r7 := @caughtexception;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("IpPrefix with invalid address! Shouldn\'t happen.", $r7);

        throw $r8;

        catch java.net.UnknownHostException from label1 to label2 with label3;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        android.net.IpPrefix r0;
        android.os.Parcel r1;
        int i0, $i1;
        byte[] $r2;

        r0 := @this: android.net.IpPrefix;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        $r2 = r0.<android.net.IpPrefix: byte[] address>;

        virtualinvoke r1.<android.os.Parcel: void writeByteArray(byte[])>($r2);

        $i1 = r0.<android.net.IpPrefix: int prefixLength>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i1);

        return;
    }
}
