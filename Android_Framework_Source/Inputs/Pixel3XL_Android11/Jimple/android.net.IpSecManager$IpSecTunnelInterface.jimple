public final class android.net.IpSecManager$IpSecTunnelInterface extends java.lang.Object implements java.lang.AutoCloseable
{
    private final dalvik.system.CloseGuard mCloseGuard;
    private java.lang.String mInterfaceName;
    private final java.net.InetAddress mLocalAddress;
    private final java.lang.String mOpPackageName;
    private final java.net.InetAddress mRemoteAddress;
    private int mResourceId;
    private final android.net.IIpSecService mService;
    private final android.net.Network mUnderlyingNetwork;

    private void <init>(android.content.Context, android.net.IIpSecService, java.net.InetAddress, java.net.InetAddress, android.net.Network) throws android.net.IpSecManager$ResourceUnavailableException, java.io.IOException
    {
        android.net.IpSecManager$IpSecTunnelInterface r0;
        android.net.Network r1;
        int i0, $i1, $i2;
        dalvik.system.CloseGuard $r2, $r6;
        java.lang.String $r3, $r4, $r5, $r9, r16, r17;
        android.os.RemoteException $r10;
        java.lang.RuntimeException $r11, r20;
        android.content.Context r12;
        android.net.IIpSecService r13;
        java.net.InetAddress r14, r15;
        android.os.Binder r18;
        android.net.IpSecTunnelInterfaceResponse r19;
        java.lang.StringBuilder r21;
        android.net.IpSecManager$ResourceUnavailableException r22;

        r0 := @this: android.net.IpSecManager$IpSecTunnelInterface;

        r12 := @parameter0: android.content.Context;

        r13 := @parameter1: android.net.IIpSecService;

        r14 := @parameter2: java.net.InetAddress;

        r15 := @parameter3: java.net.InetAddress;

        r1 := @parameter4: android.net.Network;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.net.IpSecManager$IpSecTunnelInterface: dalvik.system.CloseGuard mCloseGuard> = $r2;

        r0.<android.net.IpSecManager$IpSecTunnelInterface: int mResourceId> = -1;

        $r3 = virtualinvoke r12.<android.content.Context: java.lang.String getOpPackageName()>();

        r0.<android.net.IpSecManager$IpSecTunnelInterface: java.lang.String mOpPackageName> = $r3;

        r0.<android.net.IpSecManager$IpSecTunnelInterface: android.net.IIpSecService mService> = r13;

        r0.<android.net.IpSecManager$IpSecTunnelInterface: java.net.InetAddress mLocalAddress> = r14;

        r0.<android.net.IpSecManager$IpSecTunnelInterface: java.net.InetAddress mRemoteAddress> = r15;

        r0.<android.net.IpSecManager$IpSecTunnelInterface: android.net.Network mUnderlyingNetwork> = r1;

     label1:
        r16 = virtualinvoke r14.<java.net.InetAddress: java.lang.String getHostAddress()>();

        r17 = virtualinvoke r15.<java.net.InetAddress: java.lang.String getHostAddress()>();

        r18 = new android.os.Binder;

        specialinvoke r18.<android.os.Binder: void <init>()>();

        $r4 = r0.<android.net.IpSecManager$IpSecTunnelInterface: java.lang.String mOpPackageName>;

        r19 = interfaceinvoke r13.<android.net.IIpSecService: android.net.IpSecTunnelInterfaceResponse createTunnelInterface(java.lang.String,java.lang.String,android.net.Network,android.os.IBinder,java.lang.String)>(r16, r17, r1, r18, $r4);

        i0 = r19.<android.net.IpSecTunnelInterfaceResponse: int status>;

     label2:
        if i0 == 0 goto label5;

        if i0 == 1 goto label4;

     label3:
        r20 = new java.lang.RuntimeException;

        r21 = new java.lang.StringBuilder;

        specialinvoke r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown status returned by IpSecService: ");

        $i2 = r19.<android.net.IpSecTunnelInterfaceResponse: int status>;

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r9 = virtualinvoke r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r20.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9);

        throw r20;

     label4:
        r22 = new android.net.IpSecManager$ResourceUnavailableException;

        specialinvoke r22.<android.net.IpSecManager$ResourceUnavailableException: void <init>(java.lang.String)>("No more tunnel interfaces may be allocated by this requester.");

        throw r22;

     label5:
        $i1 = r19.<android.net.IpSecTunnelInterfaceResponse: int resourceId>;

        r0.<android.net.IpSecManager$IpSecTunnelInterface: int mResourceId> = $i1;

        $r5 = r19.<android.net.IpSecTunnelInterfaceResponse: java.lang.String interfaceName>;

        r0.<android.net.IpSecManager$IpSecTunnelInterface: java.lang.String mInterfaceName> = $r5;

     label6:
        $r6 = r0.<android.net.IpSecManager$IpSecTunnelInterface: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r6.<dalvik.system.CloseGuard: void open(java.lang.String)>("constructor");

        return;

     label7:
        $r10 := @caughtexception;

        $r11 = virtualinvoke $r10.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r11;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch android.os.RemoteException from label4 to label5 with label7;
        catch android.os.RemoteException from label5 to label6 with label7;
    }

    void <init>(android.content.Context, android.net.IIpSecService, java.net.InetAddress, java.net.InetAddress, android.net.Network, android.net.IpSecManager$1) throws android.net.IpSecManager$ResourceUnavailableException, java.io.IOException
    {
        android.net.IpSecManager$IpSecTunnelInterface r0;
        android.content.Context r1;
        android.net.IIpSecService r2;
        java.net.InetAddress r3, r4;
        android.net.Network r5;
        android.net.IpSecManager$1 r6;

        r0 := @this: android.net.IpSecManager$IpSecTunnelInterface;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.net.IIpSecService;

        r3 := @parameter2: java.net.InetAddress;

        r4 := @parameter3: java.net.InetAddress;

        r5 := @parameter4: android.net.Network;

        r6 := @parameter5: android.net.IpSecManager$1;

        specialinvoke r0.<android.net.IpSecManager$IpSecTunnelInterface: void <init>(android.content.Context,android.net.IIpSecService,java.net.InetAddress,java.net.InetAddress,android.net.Network)>(r1, r2, r3, r4, r5);

        return;
    }

    public void addAddress(java.net.InetAddress, int) throws java.io.IOException
    {
        android.net.IpSecManager$IpSecTunnelInterface r0;
        int i0, i1;
        android.net.IIpSecService r1;
        android.net.LinkAddress r2;
        java.lang.String $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.os.ServiceSpecificException $r6;
        java.io.IOException $r7;
        java.net.InetAddress r8;

        r0 := @this: android.net.IpSecManager$IpSecTunnelInterface;

        r8 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

     label1:
        r1 = r0.<android.net.IpSecManager$IpSecTunnelInterface: android.net.IIpSecService mService>;

        i1 = r0.<android.net.IpSecManager$IpSecTunnelInterface: int mResourceId>;

        r2 = new android.net.LinkAddress;

        specialinvoke r2.<android.net.LinkAddress: void <init>(java.net.InetAddress,int)>(r8, i0);

        $r3 = r0.<android.net.IpSecManager$IpSecTunnelInterface: java.lang.String mOpPackageName>;

        interfaceinvoke r1.<android.net.IIpSecService: void addAddressToTunnelInterface(int,android.net.LinkAddress,java.lang.String)>(i1, r2, $r3);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

     label4:
        $r6 := @caughtexception;

        $r7 = staticinvoke <android.net.IpSecManager: java.io.IOException rethrowCheckedExceptionFromServiceSpecificException(android.os.ServiceSpecificException)>($r6);

        throw $r7;

        catch android.os.ServiceSpecificException from label1 to label2 with label4;
        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void close()
    {
        android.net.IpSecManager$IpSecTunnelInterface r0;
        java.lang.StringBuilder r1;
        java.lang.String $r2, $r14;
        int $i0;
        android.net.IIpSecService $r3;
        dalvik.system.CloseGuard $r4, $r8;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        java.lang.Throwable $r7;
        java.lang.Exception $r9;

        r0 := @this: android.net.IpSecManager$IpSecTunnelInterface;

     label01:
        $r3 = r0.<android.net.IpSecManager$IpSecTunnelInterface: android.net.IIpSecService mService>;

        $i0 = r0.<android.net.IpSecManager$IpSecTunnelInterface: int mResourceId>;

        $r2 = r0.<android.net.IpSecManager$IpSecTunnelInterface: java.lang.String mOpPackageName>;

        interfaceinvoke $r3.<android.net.IIpSecService: void deleteTunnelInterface(int,java.lang.String)>($i0, $r2);

     label02:
        r0.<android.net.IpSecManager$IpSecTunnelInterface: int mResourceId> = -1;

        $r4 = r0.<android.net.IpSecManager$IpSecTunnelInterface: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r4.<dalvik.system.CloseGuard: void close()>();

        goto label07;

     label03:
        $r7 := @caughtexception;

        goto label10;

     label04:
        $r9 := @caughtexception;

     label05:
        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to close ");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", Exception=");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r14 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("IpSecManager", $r14);

     label06:
        goto label02;

     label07:
        return;

     label08:
        $r5 := @caughtexception;

     label09:
        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

     label10:
        r0.<android.net.IpSecManager$IpSecTunnelInterface: int mResourceId> = -1;

        $r8 = r0.<android.net.IpSecManager$IpSecTunnelInterface: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r8.<dalvik.system.CloseGuard: void close()>();

        throw $r7;

        catch android.os.RemoteException from label01 to label02 with label08;
        catch java.lang.Exception from label01 to label02 with label04;
        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label06 with label03;
        catch java.lang.Throwable from label09 to label10 with label03;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.net.IpSecManager$IpSecTunnelInterface r0;
        dalvik.system.CloseGuard r1;

        r0 := @this: android.net.IpSecManager$IpSecTunnelInterface;

        r1 = r0.<android.net.IpSecManager$IpSecTunnelInterface: dalvik.system.CloseGuard mCloseGuard>;

        if r1 == null goto label1;

        virtualinvoke r1.<dalvik.system.CloseGuard: void warnIfOpen()>();

     label1:
        virtualinvoke r0.<android.net.IpSecManager$IpSecTunnelInterface: void close()>();

        return;
    }

    public java.lang.String getInterfaceName()
    {
        android.net.IpSecManager$IpSecTunnelInterface r0;
        java.lang.String $r1;

        r0 := @this: android.net.IpSecManager$IpSecTunnelInterface;

        $r1 = r0.<android.net.IpSecManager$IpSecTunnelInterface: java.lang.String mInterfaceName>;

        return $r1;
    }

    public int getResourceId()
    {
        android.net.IpSecManager$IpSecTunnelInterface r0;
        int $i0;

        r0 := @this: android.net.IpSecManager$IpSecTunnelInterface;

        $i0 = r0.<android.net.IpSecManager$IpSecTunnelInterface: int mResourceId>;

        return $i0;
    }

    public void removeAddress(java.net.InetAddress, int) throws java.io.IOException
    {
        android.net.IpSecManager$IpSecTunnelInterface r0;
        int i0, i1;
        android.net.IIpSecService r1;
        android.net.LinkAddress r2;
        java.lang.String $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.os.ServiceSpecificException $r6;
        java.io.IOException $r7;
        java.net.InetAddress r8;

        r0 := @this: android.net.IpSecManager$IpSecTunnelInterface;

        r8 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

     label1:
        r1 = r0.<android.net.IpSecManager$IpSecTunnelInterface: android.net.IIpSecService mService>;

        i1 = r0.<android.net.IpSecManager$IpSecTunnelInterface: int mResourceId>;

        r2 = new android.net.LinkAddress;

        specialinvoke r2.<android.net.LinkAddress: void <init>(java.net.InetAddress,int)>(r8, i0);

        $r3 = r0.<android.net.IpSecManager$IpSecTunnelInterface: java.lang.String mOpPackageName>;

        interfaceinvoke r1.<android.net.IIpSecService: void removeAddressFromTunnelInterface(int,android.net.LinkAddress,java.lang.String)>(i1, r2, $r3);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

     label4:
        $r6 := @caughtexception;

        $r7 = staticinvoke <android.net.IpSecManager: java.io.IOException rethrowCheckedExceptionFromServiceSpecificException(android.os.ServiceSpecificException)>($r6);

        throw $r7;

        catch android.os.ServiceSpecificException from label1 to label2 with label4;
        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String toString()
    {
        android.net.IpSecManager$IpSecTunnelInterface r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r4, $r9;
        int $i0;

        r0 := @this: android.net.IpSecManager$IpSecTunnelInterface;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IpSecTunnelInterface{ifname=");

        $r4 = r0.<android.net.IpSecManager$IpSecTunnelInterface: java.lang.String mInterfaceName>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",resourceId=");

        $i0 = r0.<android.net.IpSecManager$IpSecTunnelInterface: int mResourceId>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r9 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }
}
