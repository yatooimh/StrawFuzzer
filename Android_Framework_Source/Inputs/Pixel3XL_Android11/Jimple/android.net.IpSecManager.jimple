public final class android.net.IpSecManager extends java.lang.Object
{
    public static final int DIRECTION_IN;
    public static final int DIRECTION_OUT;
    public static final int INVALID_RESOURCE_ID;
    public static final int INVALID_SECURITY_PARAMETER_INDEX;
    private static final java.lang.String TAG;
    private final android.content.Context mContext;
    private final android.net.IIpSecService mService;

    public void <init>(android.content.Context, android.net.IIpSecService)
    {
        android.net.IpSecManager r0;
        android.content.Context r1;
        android.net.IIpSecService r2, $r4;
        java.lang.Object $r3;

        r0 := @this: android.net.IpSecManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.net.IIpSecService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.net.IpSecManager: android.content.Context mContext> = r1;

        $r3 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "missing service");

        $r4 = (android.net.IIpSecService) $r3;

        r0.<android.net.IpSecManager: android.net.IIpSecService mService> = $r4;

        return;
    }

    private static void maybeHandleServiceSpecificException(android.os.ServiceSpecificException)
    {
        android.os.ServiceSpecificException r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.IllegalArgumentException $r1;
        java.lang.IllegalStateException $r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @parameter0: android.os.ServiceSpecificException;

        $i1 = r0.<android.os.ServiceSpecificException: int errorCode>;

        $i0 = <android.system.OsConstants: int EINVAL>;

        if $i1 == $i0 goto label3;

        $i3 = r0.<android.os.ServiceSpecificException: int errorCode>;

        $i2 = <android.system.OsConstants: int EAGAIN>;

        if $i3 == $i2 goto label2;

        $i5 = r0.<android.os.ServiceSpecificException: int errorCode>;

        $i4 = <android.system.OsConstants: int EOPNOTSUPP>;

        if $i5 == $i4 goto label1;

        $i7 = r0.<android.os.ServiceSpecificException: int errorCode>;

        $i6 = <android.system.OsConstants: int EPROTONOSUPPORT>;

        if $i7 == $i6 goto label1;

        return;

     label1:
        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.Throwable)>(r0);

        throw $r3;

     label2:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(r0);

        throw $r2;

     label3:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>(r0);

        throw $r1;
    }

    static java.io.IOException rethrowCheckedExceptionFromServiceSpecificException(android.os.ServiceSpecificException) throws java.io.IOException
    {
        android.os.ServiceSpecificException r0;
        java.lang.StringBuilder $r2;
        int $i0, $i1;
        android.system.ErrnoException $r5;
        java.lang.String $r6;
        java.io.IOException $r7;

        r0 := @parameter0: android.os.ServiceSpecificException;

        staticinvoke <android.net.IpSecManager: void maybeHandleServiceSpecificException(android.os.ServiceSpecificException)>(r0);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IpSec encountered errno=");

        $i0 = r0.<android.os.ServiceSpecificException: int errorCode>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = new android.system.ErrnoException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = r0.<android.os.ServiceSpecificException: int errorCode>;

        specialinvoke $r5.<android.system.ErrnoException: void <init>(java.lang.String,int)>($r6, $i1);

        $r7 = virtualinvoke $r5.<android.system.ErrnoException: java.io.IOException rethrowAsIOException()>();

        throw $r7;
    }

    static java.lang.RuntimeException rethrowUncheckedExceptionFromServiceSpecificException(android.os.ServiceSpecificException)
    {
        android.os.ServiceSpecificException r0;
        java.lang.RuntimeException $r1;

        r0 := @parameter0: android.os.ServiceSpecificException;

        staticinvoke <android.net.IpSecManager: void maybeHandleServiceSpecificException(android.os.ServiceSpecificException)>(r0);

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r0);

        throw $r1;
    }

    public android.net.IpSecManager$SecurityParameterIndex allocateSecurityParameterIndex(java.net.InetAddress) throws android.net.IpSecManager$ResourceUnavailableException
    {
        android.net.IpSecManager r0;
        android.net.IpSecManager$SecurityParameterIndex $r1;
        android.net.IIpSecService $r2;
        android.net.IpSecManager$SpiUnavailableException $r3;
        android.net.IpSecManager$ResourceUnavailableException $r4;
        android.os.ServiceSpecificException $r5;
        java.lang.RuntimeException $r6;
        java.net.InetAddress r7;

        r0 := @this: android.net.IpSecManager;

        r7 := @parameter0: java.net.InetAddress;

     label1:
        $r1 = new android.net.IpSecManager$SecurityParameterIndex;

        $r2 = r0.<android.net.IpSecManager: android.net.IIpSecService mService>;

        specialinvoke $r1.<android.net.IpSecManager$SecurityParameterIndex: void <init>(android.net.IIpSecService,java.net.InetAddress,int,android.net.IpSecManager$1)>($r2, r7, 0, null);

     label2:
        return $r1;

     label3:
        $r3 := @caughtexception;

        $r4 = new android.net.IpSecManager$ResourceUnavailableException;

        specialinvoke $r4.<android.net.IpSecManager$ResourceUnavailableException: void <init>(java.lang.String)>("No SPIs available");

        throw $r4;

     label4:
        $r5 := @caughtexception;

        $r6 = staticinvoke <android.net.IpSecManager: java.lang.RuntimeException rethrowUncheckedExceptionFromServiceSpecificException(android.os.ServiceSpecificException)>($r5);

        throw $r6;

        catch android.os.ServiceSpecificException from label1 to label2 with label4;
        catch android.net.IpSecManager$SpiUnavailableException from label1 to label2 with label3;
    }

    public android.net.IpSecManager$SecurityParameterIndex allocateSecurityParameterIndex(java.net.InetAddress, int) throws android.net.IpSecManager$SpiUnavailableException, android.net.IpSecManager$ResourceUnavailableException
    {
        android.net.IpSecManager r0;
        int i0;
        java.lang.IllegalArgumentException $r1;
        android.net.IpSecManager$SecurityParameterIndex $r2;
        android.net.IIpSecService $r3;
        android.os.ServiceSpecificException $r4;
        java.lang.RuntimeException $r5;
        java.net.InetAddress r6;

        r0 := @this: android.net.IpSecManager;

        r6 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        if i0 == 0 goto label4;

     label1:
        $r2 = new android.net.IpSecManager$SecurityParameterIndex;

        $r3 = r0.<android.net.IpSecManager: android.net.IIpSecService mService>;

        specialinvoke $r2.<android.net.IpSecManager$SecurityParameterIndex: void <init>(android.net.IIpSecService,java.net.InetAddress,int,android.net.IpSecManager$1)>($r3, r6, i0, null);

     label2:
        return $r2;

     label3:
        $r4 := @caughtexception;

        $r5 = staticinvoke <android.net.IpSecManager: java.lang.RuntimeException rethrowUncheckedExceptionFromServiceSpecificException(android.os.ServiceSpecificException)>($r4);

        throw $r5;

     label4:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Requested SPI must be a valid (non-zero) SPI");

        throw $r1;

        catch android.os.ServiceSpecificException from label1 to label2 with label3;
    }

    public void applyTransportModeTransform(java.io.FileDescriptor, int, android.net.IpSecTransform) throws java.io.IOException
    {
        android.net.IpSecManager r0;
        int i0, $i1;
        android.net.IIpSecService $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.Throwable $r4, $r5;
        android.os.ServiceSpecificException $r6;
        java.io.IOException $r7;
        java.io.FileDescriptor r8;
        android.net.IpSecTransform r9;
        android.os.ParcelFileDescriptor r10;

        r0 := @this: android.net.IpSecManager;

        r8 := @parameter0: java.io.FileDescriptor;

        i0 := @parameter1: int;

        r9 := @parameter2: android.net.IpSecTransform;

     label01:
        r10 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup(java.io.FileDescriptor)>(r8);

     label02:
        $r1 = r0.<android.net.IpSecManager: android.net.IIpSecService mService>;

        $i1 = virtualinvoke r9.<android.net.IpSecTransform: int getResourceId()>();

        interfaceinvoke $r1.<android.net.IIpSecService: void applyTransportModeTransform(android.os.ParcelFileDescriptor,int,int)>(r10, i0, $i1);

     label03:
        if r10 == null goto label05;

     label04:
        virtualinvoke r10.<android.os.ParcelFileDescriptor: void close()>();

     label05:
        return;

     label06:
        $r4 := @caughtexception;

        if r10 == null goto label11;

     label07:
        virtualinvoke r10.<android.os.ParcelFileDescriptor: void close()>();

     label08:
        goto label11;

     label09:
        $r5 := @caughtexception;

     label10:
        virtualinvoke $r4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r5);

     label11:
        throw $r4;

     label12:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label13:
        $r6 := @caughtexception;

        $r7 = staticinvoke <android.net.IpSecManager: java.io.IOException rethrowCheckedExceptionFromServiceSpecificException(android.os.ServiceSpecificException)>($r6);

        throw $r7;

        catch android.os.ServiceSpecificException from label01 to label02 with label13;
        catch android.os.RemoteException from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch android.os.ServiceSpecificException from label04 to label05 with label13;
        catch android.os.RemoteException from label04 to label05 with label12;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch android.os.ServiceSpecificException from label10 to label11 with label13;
        catch android.os.RemoteException from label10 to label11 with label12;
        catch android.os.ServiceSpecificException from label11 to label12 with label13;
        catch android.os.RemoteException from label11 to label12 with label12;
    }

    public void applyTransportModeTransform(java.net.DatagramSocket, int, android.net.IpSecTransform) throws java.io.IOException
    {
        android.net.IpSecManager r0;
        java.net.DatagramSocket r1;
        int i0;
        android.net.IpSecTransform r2;
        java.io.FileDescriptor $r3;

        r0 := @this: android.net.IpSecManager;

        r1 := @parameter0: java.net.DatagramSocket;

        i0 := @parameter1: int;

        r2 := @parameter2: android.net.IpSecTransform;

        $r3 = virtualinvoke r1.<java.net.DatagramSocket: java.io.FileDescriptor getFileDescriptor$()>();

        virtualinvoke r0.<android.net.IpSecManager: void applyTransportModeTransform(java.io.FileDescriptor,int,android.net.IpSecTransform)>($r3, i0, r2);

        return;
    }

    public void applyTransportModeTransform(java.net.Socket, int, android.net.IpSecTransform) throws java.io.IOException
    {
        android.net.IpSecManager r0;
        java.net.Socket r1;
        int i0;
        android.net.IpSecTransform r2;
        java.io.FileDescriptor $r3;

        r0 := @this: android.net.IpSecManager;

        r1 := @parameter0: java.net.Socket;

        i0 := @parameter1: int;

        r2 := @parameter2: android.net.IpSecTransform;

        virtualinvoke r1.<java.net.Socket: int getSoLinger()>();

        $r3 = virtualinvoke r1.<java.net.Socket: java.io.FileDescriptor getFileDescriptor$()>();

        virtualinvoke r0.<android.net.IpSecManager: void applyTransportModeTransform(java.io.FileDescriptor,int,android.net.IpSecTransform)>($r3, i0, r2);

        return;
    }

    public void applyTunnelModeTransform(android.net.IpSecManager$IpSecTunnelInterface, int, android.net.IpSecTransform) throws java.io.IOException
    {
        android.net.IpSecManager r0;
        int i0, $i1, $i2;
        android.net.IpSecTransform r1;
        android.net.IIpSecService $r2;
        android.content.Context $r3;
        java.lang.String $r4;
        android.os.ServiceSpecificException $r5;
        java.io.IOException $r6;
        android.os.RemoteException $r7;
        java.lang.RuntimeException $r8;
        android.net.IpSecManager$IpSecTunnelInterface r9;

        r0 := @this: android.net.IpSecManager;

        r9 := @parameter0: android.net.IpSecManager$IpSecTunnelInterface;

        i0 := @parameter1: int;

        r1 := @parameter2: android.net.IpSecTransform;

     label1:
        $r2 = r0.<android.net.IpSecManager: android.net.IIpSecService mService>;

        $i1 = virtualinvoke r9.<android.net.IpSecManager$IpSecTunnelInterface: int getResourceId()>();

        $i2 = virtualinvoke r1.<android.net.IpSecTransform: int getResourceId()>();

        $r3 = r0.<android.net.IpSecManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke $r2.<android.net.IIpSecService: void applyTunnelModeTransform(int,int,int,java.lang.String)>($i1, i0, $i2, $r4);

     label2:
        return;

     label3:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r8;

     label4:
        $r5 := @caughtexception;

        $r6 = staticinvoke <android.net.IpSecManager: java.io.IOException rethrowCheckedExceptionFromServiceSpecificException(android.os.ServiceSpecificException)>($r5);

        throw $r6;

        catch android.os.ServiceSpecificException from label1 to label2 with label4;
        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.IpSecManager$IpSecTunnelInterface createIpSecTunnelInterface(java.net.InetAddress, java.net.InetAddress, android.net.Network) throws android.net.IpSecManager$ResourceUnavailableException, java.io.IOException
    {
        android.net.IpSecManager r0;
        java.net.InetAddress r1, r8;
        android.net.Network r2;
        android.net.IpSecManager$IpSecTunnelInterface $r3;
        android.net.IIpSecService $r4;
        android.content.Context $r5;
        android.os.ServiceSpecificException $r6;
        java.io.IOException $r7;

        r0 := @this: android.net.IpSecManager;

        r8 := @parameter0: java.net.InetAddress;

        r1 := @parameter1: java.net.InetAddress;

        r2 := @parameter2: android.net.Network;

     label1:
        $r3 = new android.net.IpSecManager$IpSecTunnelInterface;

        $r5 = r0.<android.net.IpSecManager: android.content.Context mContext>;

        $r4 = r0.<android.net.IpSecManager: android.net.IIpSecService mService>;

        specialinvoke $r3.<android.net.IpSecManager$IpSecTunnelInterface: void <init>(android.content.Context,android.net.IIpSecService,java.net.InetAddress,java.net.InetAddress,android.net.Network,android.net.IpSecManager$1)>($r5, $r4, r8, r1, r2, null);

     label2:
        return $r3;

     label3:
        $r6 := @caughtexception;

        $r7 = staticinvoke <android.net.IpSecManager: java.io.IOException rethrowCheckedExceptionFromServiceSpecificException(android.os.ServiceSpecificException)>($r6);

        throw $r7;

        catch android.os.ServiceSpecificException from label1 to label2 with label3;
    }

    public android.net.IpSecManager$UdpEncapsulationSocket openUdpEncapsulationSocket() throws java.io.IOException, android.net.IpSecManager$ResourceUnavailableException
    {
        android.net.IpSecManager r0;
        android.net.IpSecManager$UdpEncapsulationSocket $r1;
        android.net.IIpSecService $r2;
        android.os.ServiceSpecificException $r3;
        java.io.IOException $r4;

        r0 := @this: android.net.IpSecManager;

     label1:
        $r1 = new android.net.IpSecManager$UdpEncapsulationSocket;

        $r2 = r0.<android.net.IpSecManager: android.net.IIpSecService mService>;

        specialinvoke $r1.<android.net.IpSecManager$UdpEncapsulationSocket: void <init>(android.net.IIpSecService,int,android.net.IpSecManager$1)>($r2, 0, null);

     label2:
        return $r1;

     label3:
        $r3 := @caughtexception;

        $r4 = staticinvoke <android.net.IpSecManager: java.io.IOException rethrowCheckedExceptionFromServiceSpecificException(android.os.ServiceSpecificException)>($r3);

        throw $r4;

        catch android.os.ServiceSpecificException from label1 to label2 with label3;
    }

    public android.net.IpSecManager$UdpEncapsulationSocket openUdpEncapsulationSocket(int) throws java.io.IOException, android.net.IpSecManager$ResourceUnavailableException
    {
        android.net.IpSecManager r0;
        int i0;
        java.lang.IllegalArgumentException $r1;
        android.net.IpSecManager$UdpEncapsulationSocket $r2;
        android.net.IIpSecService $r3;
        android.os.ServiceSpecificException $r4;
        java.io.IOException $r5;

        r0 := @this: android.net.IpSecManager;

        i0 := @parameter0: int;

        if i0 == 0 goto label4;

     label1:
        $r2 = new android.net.IpSecManager$UdpEncapsulationSocket;

        $r3 = r0.<android.net.IpSecManager: android.net.IIpSecService mService>;

        specialinvoke $r2.<android.net.IpSecManager$UdpEncapsulationSocket: void <init>(android.net.IIpSecService,int,android.net.IpSecManager$1)>($r3, i0, null);

     label2:
        return $r2;

     label3:
        $r4 := @caughtexception;

        $r5 = staticinvoke <android.net.IpSecManager: java.io.IOException rethrowCheckedExceptionFromServiceSpecificException(android.os.ServiceSpecificException)>($r4);

        throw $r5;

     label4:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Specified port must be a valid port number!");

        throw $r1;

        catch android.os.ServiceSpecificException from label1 to label2 with label3;
    }

    public void removeTransportModeTransforms(java.io.FileDescriptor) throws java.io.IOException
    {
        android.net.IpSecManager r0;
        android.net.IIpSecService $r1;
        android.os.ServiceSpecificException $r2;
        java.io.IOException $r3;
        java.lang.Throwable $r4, $r5;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;
        java.io.FileDescriptor r8;
        android.os.ParcelFileDescriptor r9;

        r0 := @this: android.net.IpSecManager;

        r8 := @parameter0: java.io.FileDescriptor;

     label01:
        r9 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup(java.io.FileDescriptor)>(r8);

     label02:
        $r1 = r0.<android.net.IpSecManager: android.net.IIpSecService mService>;

        interfaceinvoke $r1.<android.net.IIpSecService: void removeTransportModeTransforms(android.os.ParcelFileDescriptor)>(r9);

     label03:
        if r9 == null goto label05;

     label04:
        virtualinvoke r9.<android.os.ParcelFileDescriptor: void close()>();

     label05:
        return;

     label06:
        $r5 := @caughtexception;

        if r9 == null goto label11;

     label07:
        virtualinvoke r9.<android.os.ParcelFileDescriptor: void close()>();

     label08:
        goto label11;

     label09:
        $r4 := @caughtexception;

     label10:
        virtualinvoke $r5.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r4);

     label11:
        throw $r5;

     label12:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

     label13:
        $r2 := @caughtexception;

        $r3 = staticinvoke <android.net.IpSecManager: java.io.IOException rethrowCheckedExceptionFromServiceSpecificException(android.os.ServiceSpecificException)>($r2);

        throw $r3;

        catch android.os.ServiceSpecificException from label01 to label02 with label13;
        catch android.os.RemoteException from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch android.os.ServiceSpecificException from label04 to label05 with label13;
        catch android.os.RemoteException from label04 to label05 with label12;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch android.os.ServiceSpecificException from label10 to label11 with label13;
        catch android.os.RemoteException from label10 to label11 with label12;
        catch android.os.ServiceSpecificException from label11 to label12 with label13;
        catch android.os.RemoteException from label11 to label12 with label12;
    }

    public void removeTransportModeTransforms(java.net.DatagramSocket) throws java.io.IOException
    {
        android.net.IpSecManager r0;
        java.net.DatagramSocket r1;
        java.io.FileDescriptor $r2;

        r0 := @this: android.net.IpSecManager;

        r1 := @parameter0: java.net.DatagramSocket;

        $r2 = virtualinvoke r1.<java.net.DatagramSocket: java.io.FileDescriptor getFileDescriptor$()>();

        virtualinvoke r0.<android.net.IpSecManager: void removeTransportModeTransforms(java.io.FileDescriptor)>($r2);

        return;
    }

    public void removeTransportModeTransforms(java.net.Socket) throws java.io.IOException
    {
        android.net.IpSecManager r0;
        java.net.Socket r1;
        java.io.FileDescriptor $r2;

        r0 := @this: android.net.IpSecManager;

        r1 := @parameter0: java.net.Socket;

        virtualinvoke r1.<java.net.Socket: int getSoLinger()>();

        $r2 = virtualinvoke r1.<java.net.Socket: java.io.FileDescriptor getFileDescriptor$()>();

        virtualinvoke r0.<android.net.IpSecManager: void removeTransportModeTransforms(java.io.FileDescriptor)>($r2);

        return;
    }

    public void removeTunnelModeTransform(android.net.Network, android.net.IpSecTransform)
    {
        android.net.IpSecManager r0;
        android.net.Network r1;
        android.net.IpSecTransform r2;

        r0 := @this: android.net.IpSecManager;

        r1 := @parameter0: android.net.Network;

        r2 := @parameter1: android.net.IpSecTransform;

        return;
    }

    public static void <clinit>()
    {
        <android.net.IpSecManager: java.lang.String TAG> = "IpSecManager";

        <android.net.IpSecManager: int INVALID_SECURITY_PARAMETER_INDEX> = 0;

        <android.net.IpSecManager: int INVALID_RESOURCE_ID> = -1;

        <android.net.IpSecManager: int DIRECTION_OUT> = 1;

        <android.net.IpSecManager: int DIRECTION_IN> = 0;

        return;
    }
}
