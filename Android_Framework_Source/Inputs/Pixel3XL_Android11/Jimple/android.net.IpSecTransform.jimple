public final class android.net.IpSecTransform extends java.lang.Object implements java.lang.AutoCloseable
{
    public static final int ENCAP_ESPINUDP;
    public static final int ENCAP_ESPINUDP_NON_IKE;
    public static final int ENCAP_NONE;
    public static final int MODE_TRANSPORT;
    public static final int MODE_TUNNEL;
    private static final java.lang.String TAG;
    private android.os.Handler mCallbackHandler;
    private final dalvik.system.CloseGuard mCloseGuard;
    private final android.net.IpSecConfig mConfig;
    private final android.content.Context mContext;
    private android.net.ConnectivityManager$PacketKeepalive mKeepalive;
    private final android.net.ConnectivityManager$PacketKeepaliveCallback mKeepaliveCallback;
    private int mResourceId;
    private android.net.IpSecTransform$NattKeepaliveCallback mUserKeepaliveCallback;

    public void <init>(android.content.Context, android.net.IpSecConfig)
    {
        android.net.IpSecTransform r0;
        android.content.Context r1;
        android.net.IpSecConfig r2, $r5;
        dalvik.system.CloseGuard $r3;
        android.net.IpSecTransform$1 $r4;

        r0 := @this: android.net.IpSecTransform;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.net.IpSecConfig;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.net.IpSecTransform: dalvik.system.CloseGuard mCloseGuard> = $r3;

        $r4 = new android.net.IpSecTransform$1;

        specialinvoke $r4.<android.net.IpSecTransform$1: void <init>(android.net.IpSecTransform)>(r0);

        r0.<android.net.IpSecTransform: android.net.ConnectivityManager$PacketKeepaliveCallback mKeepaliveCallback> = $r4;

        r0.<android.net.IpSecTransform: android.content.Context mContext> = r1;

        $r5 = new android.net.IpSecConfig;

        specialinvoke $r5.<android.net.IpSecConfig: void <init>(android.net.IpSecConfig)>(r2);

        r0.<android.net.IpSecTransform: android.net.IpSecConfig mConfig> = $r5;

        r0.<android.net.IpSecTransform: int mResourceId> = -1;

        return;
    }

    static android.os.Handler access$000(android.net.IpSecTransform)
    {
        android.net.IpSecTransform r0;
        android.os.Handler $r1;

        r0 := @parameter0: android.net.IpSecTransform;

        $r1 = r0.<android.net.IpSecTransform: android.os.Handler mCallbackHandler>;

        return $r1;
    }

    static android.net.ConnectivityManager$PacketKeepalive access$102(android.net.IpSecTransform, android.net.ConnectivityManager$PacketKeepalive)
    {
        android.net.IpSecTransform r0;
        android.net.ConnectivityManager$PacketKeepalive r1;

        r0 := @parameter0: android.net.IpSecTransform;

        r1 := @parameter1: android.net.ConnectivityManager$PacketKeepalive;

        r0.<android.net.IpSecTransform: android.net.ConnectivityManager$PacketKeepalive mKeepalive> = r1;

        return r1;
    }

    static android.net.IpSecTransform$NattKeepaliveCallback access$200(android.net.IpSecTransform)
    {
        android.net.IpSecTransform r0;
        android.net.IpSecTransform$NattKeepaliveCallback $r1;

        r0 := @parameter0: android.net.IpSecTransform;

        $r1 = r0.<android.net.IpSecTransform: android.net.IpSecTransform$NattKeepaliveCallback mUserKeepaliveCallback>;

        return $r1;
    }

    static android.net.IpSecTransform access$300(android.net.IpSecTransform) throws java.io.IOException, android.net.IpSecManager$ResourceUnavailableException, android.net.IpSecManager$SpiUnavailableException
    {
        android.net.IpSecTransform r0, $r1;

        r0 := @parameter0: android.net.IpSecTransform;

        $r1 = specialinvoke r0.<android.net.IpSecTransform: android.net.IpSecTransform activate()>();

        return $r1;
    }

    private android.net.IpSecTransform activate() throws java.io.IOException, android.net.IpSecManager$ResourceUnavailableException, android.net.IpSecManager$SpiUnavailableException
    {
        android.net.IpSecTransform r0;
        android.net.IpSecConfig r1;
        android.os.Binder r2;
        android.content.Context $r3;
        java.lang.String $r4, $r7;
        int $i0, $i1, $i2;
        dalvik.system.CloseGuard $r8;
        android.os.RemoteException $r9;
        java.lang.RuntimeException $r10, $r13;
        java.lang.Throwable $r11;
        android.os.ServiceSpecificException $r12;
        android.net.IIpSecService r14;
        android.net.IpSecTransformResponse r15;
        java.lang.StringBuilder r16;

        r0 := @this: android.net.IpSecTransform;

        entermonitor r0;

     label01:
        r14 = specialinvoke r0.<android.net.IpSecTransform: android.net.IIpSecService getIpSecService()>();

        r1 = r0.<android.net.IpSecTransform: android.net.IpSecConfig mConfig>;

        r2 = new android.os.Binder;

        specialinvoke r2.<android.os.Binder: void <init>()>();

        $r3 = r0.<android.net.IpSecTransform: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getOpPackageName()>();

        r15 = interfaceinvoke r14.<android.net.IIpSecService: android.net.IpSecTransformResponse createTransform(android.net.IpSecConfig,android.os.IBinder,java.lang.String)>(r1, r2, $r4);

        $i0 = r15.<android.net.IpSecTransformResponse: int status>;

        specialinvoke r0.<android.net.IpSecTransform: void checkResultStatus(int)>($i0);

        $i1 = r15.<android.net.IpSecTransformResponse: int resourceId>;

        r0.<android.net.IpSecTransform: int mResourceId> = $i1;

        r16 = new java.lang.StringBuilder;

        specialinvoke r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Added Transform with Id ");

        $i2 = r0.<android.net.IpSecTransform: int mResourceId>;

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r7 = virtualinvoke r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("IpSecTransform", $r7);

        $r8 = r0.<android.net.IpSecTransform: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r8.<dalvik.system.CloseGuard: void open(java.lang.String)>("build");

     label02:
        exitmonitor r0;

     label03:
        return r0;

     label04:
        $r11 := @caughtexception;

        goto label09;

     label05:
        $r9 := @caughtexception;

     label06:
        $r10 = virtualinvoke $r9.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r10;

     label07:
        $r12 := @caughtexception;

     label08:
        $r13 = staticinvoke <android.net.IpSecManager: java.lang.RuntimeException rethrowUncheckedExceptionFromServiceSpecificException(android.os.ServiceSpecificException)>($r12);

        throw $r13;

     label09:
        exitmonitor r0;

     label10:
        throw $r11;

        catch android.os.ServiceSpecificException from label01 to label02 with label07;
        catch android.os.RemoteException from label01 to label02 with label05;
        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label06 to label07 with label04;
        catch java.lang.Throwable from label08 to label09 with label04;
        catch java.lang.Throwable from label09 to label10 with label04;
    }

    private void checkResultStatus(int) throws java.io.IOException, android.net.IpSecManager$ResourceUnavailableException, android.net.IpSecManager$SpiUnavailableException
    {
        android.net.IpSecTransform r0;
        int i0;
        android.net.IpSecManager$ResourceUnavailableException $r2;
        java.lang.StringBuilder $r3;
        java.lang.IllegalStateException $r6;
        java.lang.String $r7;

        r0 := @this: android.net.IpSecTransform;

        i0 := @parameter0: int;

        if i0 == 0 goto label4;

        if i0 == 1 goto label3;

        if i0 == 2 goto label1;

        goto label2;

     label1:
        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>("IpSecTransform", "Attempting to use an SPI that was somehow not reserved");

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to Create a Transform with status code ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = new java.lang.IllegalStateException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label3:
        $r2 = new android.net.IpSecManager$ResourceUnavailableException;

        specialinvoke $r2.<android.net.IpSecManager$ResourceUnavailableException: void <init>(java.lang.String)>("Failed to allocate a new IpSecTransform");

        throw $r2;

     label4:
        return;
    }

    private android.net.IIpSecService getIpSecService()
    {
        android.net.IpSecTransform r0;
        android.os.IBinder r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.net.IIpSecService $r4;

        r0 := @this: android.net.IpSecTransform;

        r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("ipsec");

        if r1 == null goto label1;

        $r4 = staticinvoke <android.net.IIpSecService$Stub: android.net.IIpSecService asInterface(android.os.IBinder)>(r1);

        return $r4;

     label1:
        $r2 = new android.os.RemoteException;

        specialinvoke $r2.<android.os.RemoteException: void <init>(java.lang.String)>("Failed to connect to IpSecService");

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r3;
    }

    public void close()
    {
        android.net.IpSecTransform r0;
        java.lang.StringBuilder r1, $r2;
        int $i0, $i2, $i3;
        java.lang.String $r5, $r14;
        android.net.IIpSecService $r6;
        dalvik.system.CloseGuard $r7, $r8, $r16;
        java.lang.Exception $r9;
        java.lang.Throwable $r15;
        android.os.RemoteException $r17;
        java.lang.RuntimeException $r18;

        r0 := @this: android.net.IpSecTransform;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removing Transform with Id ");

        $i0 = r0.<android.net.IpSecTransform: int mResourceId>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("IpSecTransform", $r5);

        $i2 = r0.<android.net.IpSecTransform: int mResourceId>;

        if $i2 != -1 goto label01;

        $r8 = r0.<android.net.IpSecTransform: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r8.<dalvik.system.CloseGuard: void close()>();

        return;

     label01:
        $r6 = specialinvoke r0.<android.net.IpSecTransform: android.net.IIpSecService getIpSecService()>();

        $i3 = r0.<android.net.IpSecTransform: int mResourceId>;

        interfaceinvoke $r6.<android.net.IIpSecService: void deleteTransform(int)>($i3);

        virtualinvoke r0.<android.net.IpSecTransform: void stopNattKeepalive()>();

     label02:
        r0.<android.net.IpSecTransform: int mResourceId> = -1;

        $r7 = r0.<android.net.IpSecTransform: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r7.<dalvik.system.CloseGuard: void close()>();

        goto label07;

     label03:
        $r15 := @caughtexception;

        goto label10;

     label04:
        $r9 := @caughtexception;

     label05:
        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to close ");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", Exception=");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r14 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("IpSecTransform", $r14);

     label06:
        goto label02;

     label07:
        return;

     label08:
        $r17 := @caughtexception;

     label09:
        $r18 = virtualinvoke $r17.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r18;

     label10:
        r0.<android.net.IpSecTransform: int mResourceId> = -1;

        $r16 = r0.<android.net.IpSecTransform: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r16.<dalvik.system.CloseGuard: void close()>();

        throw $r15;

        catch android.os.RemoteException from label01 to label02 with label08;
        catch java.lang.Exception from label01 to label02 with label04;
        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label06 with label03;
        catch java.lang.Throwable from label09 to label10 with label03;
    }

    public boolean equals(java.lang.Object)
    {
        android.net.IpSecTransform r0, r4;
        boolean $z0, $z1, z2;
        android.net.IpSecConfig $r1, $r2;
        int $i0, $i1;
        java.lang.Object r3;

        r0 := @this: android.net.IpSecTransform;

        r3 := @parameter0: java.lang.Object;

        z2 = 1;

        if r0 != r3 goto label1;

        return 1;

     label1:
        $z0 = r3 instanceof android.net.IpSecTransform;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r4 = (android.net.IpSecTransform) r3;

        $r1 = virtualinvoke r0.<android.net.IpSecTransform: android.net.IpSecConfig getConfig()>();

        $r2 = virtualinvoke r4.<android.net.IpSecTransform: android.net.IpSecConfig getConfig()>();

        $z1 = virtualinvoke $r1.<android.net.IpSecConfig: boolean equals(java.lang.Object)>($r2);

        if $z1 == 0 goto label3;

        $i1 = r0.<android.net.IpSecTransform: int mResourceId>;

        $i0 = r4.<android.net.IpSecTransform: int mResourceId>;

        if $i1 != $i0 goto label3;

        goto label4;

     label3:
        z2 = 0;

     label4:
        return z2;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.net.IpSecTransform r0;
        dalvik.system.CloseGuard r1;

        r0 := @this: android.net.IpSecTransform;

        r1 = r0.<android.net.IpSecTransform: dalvik.system.CloseGuard mCloseGuard>;

        if r1 == null goto label1;

        virtualinvoke r1.<dalvik.system.CloseGuard: void warnIfOpen()>();

     label1:
        virtualinvoke r0.<android.net.IpSecTransform: void close()>();

        return;
    }

    android.net.IpSecConfig getConfig()
    {
        android.net.IpSecTransform r0;
        android.net.IpSecConfig $r1;

        r0 := @this: android.net.IpSecTransform;

        $r1 = r0.<android.net.IpSecTransform: android.net.IpSecConfig mConfig>;

        return $r1;
    }

    public int getResourceId()
    {
        android.net.IpSecTransform r0;
        int $i0;

        r0 := @this: android.net.IpSecTransform;

        $i0 = r0.<android.net.IpSecTransform: int mResourceId>;

        return $i0;
    }

    public void startNattKeepalive(android.net.IpSecTransform$NattKeepaliveCallback, int, android.os.Handler) throws java.io.IOException
    {
        android.net.IpSecTransform r0;
        int i0, $i1;
        android.os.Handler r1;
        android.net.ConnectivityManager$PacketKeepaliveCallback r2, $r7, $r14;
        java.lang.IllegalArgumentException $r4;
        java.lang.IllegalStateException $r6, r23;
        android.content.Context $r8;
        java.lang.Object $r9;
        android.net.IpSecConfig $r10, $r13, $r17;
        android.net.ConnectivityManager $r11;
        android.net.Network $r12;
        java.lang.String $r15, $r18;
        java.net.InetAddress $r16, $r19;
        android.net.ConnectivityManager$PacketKeepalive $r20;
        java.lang.Throwable $r21;
        android.net.IpSecTransform$NattKeepaliveCallback r22;

        r0 := @this: android.net.IpSecTransform;

        r22 := @parameter0: android.net.IpSecTransform$NattKeepaliveCallback;

        i0 := @parameter1: int;

        r1 := @parameter2: android.os.Handler;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r22);

        if i0 < 20 goto label8;

        if i0 > 3600 goto label8;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $i1 = r0.<android.net.IpSecTransform: int mResourceId>;

        if $i1 == -1 goto label7;

        r2 = r0.<android.net.IpSecTransform: android.net.ConnectivityManager$PacketKeepaliveCallback mKeepaliveCallback>;

        entermonitor r2;

     label1:
        $r7 = r0.<android.net.IpSecTransform: android.net.ConnectivityManager$PacketKeepaliveCallback mKeepaliveCallback>;

        if $r7 != null goto label3;

        r0.<android.net.IpSecTransform: android.net.IpSecTransform$NattKeepaliveCallback mUserKeepaliveCallback> = r22;

        $r8 = r0.<android.net.IpSecTransform: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("connectivity");

        $r11 = (android.net.ConnectivityManager) $r9;

        $r10 = r0.<android.net.IpSecTransform: android.net.IpSecConfig mConfig>;

        $r12 = virtualinvoke $r10.<android.net.IpSecConfig: android.net.Network getNetwork()>();

        $r14 = r0.<android.net.IpSecTransform: android.net.ConnectivityManager$PacketKeepaliveCallback mKeepaliveCallback>;

        $r13 = r0.<android.net.IpSecTransform: android.net.IpSecConfig mConfig>;

        $r15 = virtualinvoke $r13.<android.net.IpSecConfig: java.lang.String getSourceAddress()>();

        $r16 = staticinvoke <android.net.NetworkUtils: java.net.InetAddress numericToInetAddress(java.lang.String)>($r15);

        $r17 = r0.<android.net.IpSecTransform: android.net.IpSecConfig mConfig>;

        $r18 = virtualinvoke $r17.<android.net.IpSecConfig: java.lang.String getDestinationAddress()>();

        $r19 = staticinvoke <android.net.NetworkUtils: java.net.InetAddress numericToInetAddress(java.lang.String)>($r18);

        $r20 = virtualinvoke $r11.<android.net.ConnectivityManager: android.net.ConnectivityManager$PacketKeepalive startNattKeepalive(android.net.Network,int,android.net.ConnectivityManager$PacketKeepaliveCallback,java.net.InetAddress,int,java.net.InetAddress)>($r12, i0, $r14, $r16, 4500, $r19);

        r0.<android.net.IpSecTransform: android.net.ConnectivityManager$PacketKeepalive mKeepalive> = $r20;

        r0.<android.net.IpSecTransform: android.os.Handler mCallbackHandler> = r1;

        exitmonitor r2;

     label2:
        return;

     label3:
        r23 = new java.lang.IllegalStateException;

        specialinvoke r23.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Keepalive already active");

        throw r23;

     label4:
        $r21 := @caughtexception;

     label5:
        exitmonitor r2;

     label6:
        throw $r21;

     label7:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Packet keepalive cannot be started for an inactive transform");

        throw $r6;

     label8:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid NAT-T keepalive interval");

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void stopNattKeepalive()
    {
        android.net.IpSecTransform r0;
        android.net.ConnectivityManager$PacketKeepaliveCallback r1;
        android.net.ConnectivityManager$PacketKeepalive $r3, $r4;
        java.lang.Throwable $r5;

        r0 := @this: android.net.IpSecTransform;

        r1 = r0.<android.net.IpSecTransform: android.net.ConnectivityManager$PacketKeepaliveCallback mKeepaliveCallback>;

        entermonitor r1;

     label1:
        $r3 = r0.<android.net.IpSecTransform: android.net.ConnectivityManager$PacketKeepalive mKeepalive>;

        if $r3 != null goto label3;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("IpSecTransform", "No active keepalive to stop");

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 = r0.<android.net.IpSecTransform: android.net.ConnectivityManager$PacketKeepalive mKeepalive>;

        virtualinvoke $r4.<android.net.ConnectivityManager$PacketKeepalive: void stop()>();

        exitmonitor r1;

     label4:
        return;

     label5:
        $r5 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public java.lang.String toString()
    {
        android.net.IpSecTransform r0;
        java.lang.StringBuilder $r2;
        int $i0;
        java.lang.String $r6;

        r0 := @this: android.net.IpSecTransform;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IpSecTransform{resourceId=");

        $i0 = r0.<android.net.IpSecTransform: int mResourceId>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static void <clinit>()
    {
        <android.net.IpSecTransform: java.lang.String TAG> = "IpSecTransform";

        <android.net.IpSecTransform: int MODE_TUNNEL> = 1;

        <android.net.IpSecTransform: int MODE_TRANSPORT> = 0;

        <android.net.IpSecTransform: int ENCAP_NONE> = 0;

        <android.net.IpSecTransform: int ENCAP_ESPINUDP_NON_IKE> = 1;

        <android.net.IpSecTransform: int ENCAP_ESPINUDP> = 2;

        return;
    }
}
