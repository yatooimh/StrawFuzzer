public final class android.net.MacAddress extends java.lang.Object implements android.os.Parcelable
{
    public static final android.net.MacAddress ALL_ZEROS_ADDRESS;
    private static final android.net.MacAddress BASE_GOOGLE_MAC;
    public static final android.net.MacAddress BROADCAST_ADDRESS;
    public static final android.os.Parcelable$Creator CREATOR;
    private static final android.net.MacAddress DEFAULT_MAC_ADDRESS;
    private static final byte[] ETHER_ADDR_BROADCAST;
    private static final int ETHER_ADDR_LEN;
    private static final long LOCALLY_ASSIGNED_MASK;
    private static final long MULTICAST_MASK;
    private static final long NIC_MASK;
    private static final long OUI_MASK;
    public static final int TYPE_BROADCAST;
    public static final int TYPE_MULTICAST;
    public static final int TYPE_UNICAST;
    public static final int TYPE_UNKNOWN;
    private static final long VALID_LONG_MASK;
    private final long mAddr;

    static void <clinit>()
    {
        byte[] r0;
        int[] $r1;
        android.net.MacAddress $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        long $l0, $l1, $l2, $l3;
        android.net.MacAddress$1 $r10;

        <android.net.MacAddress: long VALID_LONG_MASK> = 281474976710655L;

        <android.net.MacAddress: int TYPE_UNKNOWN> = 0;

        <android.net.MacAddress: int TYPE_UNICAST> = 1;

        <android.net.MacAddress: int TYPE_MULTICAST> = 2;

        <android.net.MacAddress: int TYPE_BROADCAST> = 3;

        <android.net.MacAddress: int ETHER_ADDR_LEN> = 6;

        $r1 = newarray (int)[6];

        $r1[0] = 255;

        $r1[1] = 255;

        $r1[2] = 255;

        $r1[3] = 255;

        $r1[4] = 255;

        $r1[5] = 255;

        r0 = staticinvoke <android.net.MacAddress: byte[] addr(int[])>($r1);

        <android.net.MacAddress: byte[] ETHER_ADDR_BROADCAST> = r0;

        $r2 = staticinvoke <android.net.MacAddress: android.net.MacAddress fromBytes(byte[])>(r0);

        <android.net.MacAddress: android.net.MacAddress BROADCAST_ADDRESS> = $r2;

        $r3 = new android.net.MacAddress;

        specialinvoke $r3.<android.net.MacAddress: void <init>(long)>(0L);

        <android.net.MacAddress: android.net.MacAddress ALL_ZEROS_ADDRESS> = $r3;

        $r4 = staticinvoke <android.net.MacAddress: android.net.MacAddress fromString(java.lang.String)>("2:0:0:0:0:0");

        $l0 = $r4.<android.net.MacAddress: long mAddr>;

        <android.net.MacAddress: long LOCALLY_ASSIGNED_MASK> = $l0;

        $r5 = staticinvoke <android.net.MacAddress: android.net.MacAddress fromString(java.lang.String)>("1:0:0:0:0:0");

        $l1 = $r5.<android.net.MacAddress: long mAddr>;

        <android.net.MacAddress: long MULTICAST_MASK> = $l1;

        $r6 = staticinvoke <android.net.MacAddress: android.net.MacAddress fromString(java.lang.String)>("ff:ff:ff:0:0:0");

        $l2 = $r6.<android.net.MacAddress: long mAddr>;

        <android.net.MacAddress: long OUI_MASK> = $l2;

        $r7 = staticinvoke <android.net.MacAddress: android.net.MacAddress fromString(java.lang.String)>("0:0:0:ff:ff:ff");

        $l3 = $r7.<android.net.MacAddress: long mAddr>;

        <android.net.MacAddress: long NIC_MASK> = $l3;

        $r8 = staticinvoke <android.net.MacAddress: android.net.MacAddress fromString(java.lang.String)>("da:a1:19:0:0:0");

        <android.net.MacAddress: android.net.MacAddress BASE_GOOGLE_MAC> = $r8;

        $r9 = staticinvoke <android.net.MacAddress: android.net.MacAddress fromString(java.lang.String)>("02:00:00:00:00:00");

        <android.net.MacAddress: android.net.MacAddress DEFAULT_MAC_ADDRESS> = $r9;

        $r10 = new android.net.MacAddress$1;

        specialinvoke $r10.<android.net.MacAddress$1: void <init>()>();

        <android.net.MacAddress: android.os.Parcelable$Creator CREATOR> = $r10;

        return;
    }

    private void <init>(long)
    {
        android.net.MacAddress r0;
        long l0, $l1;

        r0 := @this: android.net.MacAddress;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $l1 = 281474976710655L & l0;

        r0.<android.net.MacAddress: long mAddr> = $l1;

        return;
    }

    void <init>(long, android.net.MacAddress$1)
    {
        android.net.MacAddress r0;
        long l0;
        android.net.MacAddress$1 r1;

        r0 := @this: android.net.MacAddress;

        l0 := @parameter0: long;

        r1 := @parameter1: android.net.MacAddress$1;

        specialinvoke r0.<android.net.MacAddress: void <init>(long)>(l0);

        return;
    }

    private static transient byte[] addr(int[])
    {
        int[] r0;
        int $i0, $i1, i4;
        java.lang.StringBuilder $r1;
        java.lang.String $r2, $r7;
        java.lang.IllegalArgumentException $r6;
        byte $b2, $b3;
        byte[] r8;

        r0 := @parameter0: int[];

        $i0 = lengthof r0;

        if $i0 != 6 goto label3;

        r8 = newarray (byte)[6];

        i4 = 0;

     label1:
        if i4 >= 6 goto label2;

        $i1 = r0[i4];

        $b2 = (byte) $i1;

        $b3 = (byte) $b2;

        r8[i4] = $b3;

        i4 = i4 + 1;

        goto label1;

     label2:
        return r8;

     label3:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = staticinvoke <java.util.Arrays: java.lang.String toString(int[])>(r0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was not an array with length equal to ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(6);

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    private static byte[] byteAddrFromLongAddr(long)
    {
        long l0;
        byte[] $r0;

        l0 := @parameter0: long;

        $r0 = staticinvoke <android.net.util.MacAddressUtils: byte[] byteAddrFromLongAddr(long)>(l0);

        return $r0;
    }

    public static byte[] byteAddrFromStringAddr(java.lang.String)
    {
        java.lang.String r0, $r7, $r8, $r14;
        byte[] r1;
        int i0, $i1, i4;
        java.lang.StringBuilder $r3, $r10;
        java.lang.IllegalArgumentException $r6, $r13;
        java.lang.Integer $r9;
        byte $b2, $b3;
        java.lang.String[] r15;

        r0 := @parameter0: java.lang.String;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        r15 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");

        $i1 = lengthof r15;

        if $i1 != 6 goto label4;

        r1 = newarray (byte)[6];

        i4 = 0;

     label1:
        if i4 >= 6 goto label3;

        $r8 = r15[i4];

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>($r8, 16);

        i0 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        if i0 < 0 goto label2;

        if 255 < i0 goto label2;

        $b2 = (byte) i0;

        $b3 = (byte) $b2;

        r1[i4] = $b3;

        i4 = i4 + 1;

        goto label1;

     label2:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("was not a valid MAC address");

        $r13 = new java.lang.IllegalArgumentException;

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r13;

     label3:
        return r1;

     label4:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was not a valid MAC address");

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    public static android.net.MacAddress createRandomUnicastAddressWithGoogleBase()
    {
        java.security.SecureRandom $r0;
        android.net.MacAddress $r1, $r2;

        $r1 = <android.net.MacAddress: android.net.MacAddress BASE_GOOGLE_MAC>;

        $r0 = new java.security.SecureRandom;

        specialinvoke $r0.<java.security.SecureRandom: void <init>()>();

        $r2 = staticinvoke <android.net.util.MacAddressUtils: android.net.MacAddress createRandomUnicastAddress(android.net.MacAddress,java.util.Random)>($r1, $r0);

        return $r2;
    }

    public static android.net.MacAddress fromBytes(byte[])
    {
        byte[] r0;
        android.net.MacAddress $r1;
        long $l0;

        r0 := @parameter0: byte[];

        $r1 = new android.net.MacAddress;

        $l0 = staticinvoke <android.net.MacAddress: long longAddrFromByteAddr(byte[])>(r0);

        specialinvoke $r1.<android.net.MacAddress: void <init>(long)>($l0);

        return $r1;
    }

    public static android.net.MacAddress fromString(java.lang.String)
    {
        java.lang.String r0;
        android.net.MacAddress $r1;
        long $l0;

        r0 := @parameter0: java.lang.String;

        $r1 = new android.net.MacAddress;

        $l0 = staticinvoke <android.net.MacAddress: long longAddrFromStringAddr(java.lang.String)>(r0);

        specialinvoke $r1.<android.net.MacAddress: void <init>(long)>($l0);

        return $r1;
    }

    public static boolean isMacAddress(byte[])
    {
        byte[] r0;
        boolean $z0;

        r0 := @parameter0: byte[];

        $z0 = staticinvoke <android.net.util.MacAddressUtils: boolean isMacAddress(byte[])>(r0);

        return $z0;
    }

    private static long longAddrFromByteAddr(byte[])
    {
        byte[] r0;
        long $l0;

        r0 := @parameter0: byte[];

        $l0 = staticinvoke <android.net.util.MacAddressUtils: long longAddrFromByteAddr(byte[])>(r0);

        return $l0;
    }

    private static long longAddrFromStringAddr(java.lang.String)
    {
        java.lang.String r0, $r6, $r7, $r13;
        int i0, $i1, $i2, i6;
        java.lang.StringBuilder $r2, $r9;
        java.lang.IllegalArgumentException $r5, $r12;
        java.lang.Integer $r8;
        long $l3, $l4, l5;
        java.lang.String[] r14;

        r0 := @parameter0: java.lang.String;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        r14 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");

        $i1 = lengthof r14;

        if $i1 != 6 goto label4;

        l5 = 0L;

        i6 = 0;

     label1:
        $i2 = lengthof r14;

        if i6 >= $i2 goto label3;

        $r7 = r14[i6];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>($r7, 16);

        i0 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        if i0 < 0 goto label2;

        if 255 < i0 goto label2;

        $l4 = (long) i0;

        $l3 = l5 << 8;

        l5 = $l4 + $l3;

        i6 = i6 + 1;

        goto label1;

     label2:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("was not a valid MAC address");

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r12;

     label3:
        return l5;

     label4:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was not a valid MAC address");

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    public static int macAddressType(byte[])
    {
        byte[] r0;
        boolean $z0;
        android.net.MacAddress $r1;
        int $i0;

        r0 := @parameter0: byte[];

        $z0 = staticinvoke <android.net.MacAddress: boolean isMacAddress(byte[])>(r0);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = staticinvoke <android.net.MacAddress: android.net.MacAddress fromBytes(byte[])>(r0);

        $i0 = virtualinvoke $r1.<android.net.MacAddress: int getAddressType()>();

        return $i0;
    }

    public static java.lang.String stringAddrFromByteAddr(byte[])
    {
        byte[] r0;
        boolean $z0;
        java.lang.Object[] $r1;
        byte $b0, $b1, $b2, $b3, $b4, $b5;
        java.lang.Byte $r2, $r3, $r4, $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @parameter0: byte[];

        $z0 = staticinvoke <android.net.MacAddress: boolean isMacAddress(byte[])>(r0);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r1 = newarray (java.lang.Object)[6];

        $b0 = r0[0];

        $r2 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b0);

        $r1[0] = $r2;

        $b1 = r0[1];

        $r3 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b1);

        $r1[1] = $r3;

        $b2 = r0[2];

        $r4 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b2);

        $r1[2] = $r4;

        $b3 = r0[3];

        $r5 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b3);

        $r1[3] = $r5;

        $b4 = r0[4];

        $r6 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b4);

        $r1[4] = $r6;

        $b5 = r0[5];

        $r7 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b5);

        $r1[5] = $r7;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%02x:%02x:%02x:%02x:%02x:%02x", $r1);

        return $r8;
    }

    private static java.lang.String stringAddrFromLongAddr(long)
    {
        long l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11;
        java.lang.Object[] $r0;
        java.lang.Long $r1, $r2, $r3, $r4, $r5, $r6;
        java.lang.String $r7;

        l0 := @parameter0: long;

        $r0 = newarray (java.lang.Object)[6];

        $l1 = l0 >> 40;

        $l2 = $l1 & 255L;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r0[0] = $r1;

        $l3 = l0 >> 32;

        $l4 = $l3 & 255L;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        $r0[1] = $r2;

        $l5 = l0 >> 24;

        $l6 = $l5 & 255L;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6);

        $r0[2] = $r3;

        $l7 = l0 >> 16;

        $l8 = $l7 & 255L;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l8);

        $r0[3] = $r4;

        $l9 = l0 >> 8;

        $l10 = $l9 & 255L;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l10);

        $r0[4] = $r5;

        $l11 = l0 & 255L;

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l11);

        $r0[5] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%02x:%02x:%02x:%02x:%02x:%02x", $r0);

        return $r7;
    }

    public int describeContents()
    {
        android.net.MacAddress r0;

        r0 := @this: android.net.MacAddress;

        return 0;
    }

    public boolean equals(java.lang.Object)
    {
        android.net.MacAddress r0, $r2;
        java.lang.Object r1;
        boolean $z0, z1;
        long $l0, $l1;
        byte $b2;

        r0 := @this: android.net.MacAddress;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof android.net.MacAddress;

        if $z0 == 0 goto label1;

        $r2 = (android.net.MacAddress) r1;

        $l1 = $r2.<android.net.MacAddress: long mAddr>;

        $l0 = r0.<android.net.MacAddress: long mAddr>;

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public int getAddressType()
    {
        android.net.MacAddress r0, $r1;
        boolean $z0;
        long $l0, $l1, $l2;
        byte $b3;

        r0 := @this: android.net.MacAddress;

        $r1 = <android.net.MacAddress: android.net.MacAddress BROADCAST_ADDRESS>;

        $z0 = virtualinvoke r0.<android.net.MacAddress: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return 3;

     label1:
        $l1 = r0.<android.net.MacAddress: long mAddr>;

        $l0 = <android.net.MacAddress: long MULTICAST_MASK>;

        $l2 = $l1 & $l0;

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label2;

        return 2;

     label2:
        return 1;
    }

    public java.net.Inet6Address getLinkLocalIpv6FromEui48Mac()
    {
        android.net.MacAddress r0;
        byte[] r1, r3;
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6, $b7, $b8, $b9, $b10, $b11, $b12, $b13, $b14, $b15, $b16, $b17;
        java.lang.Throwable $r2;
        java.net.Inet6Address r4;

        r0 := @this: android.net.MacAddress;

        r3 = virtualinvoke r0.<android.net.MacAddress: byte[] toByteArray()>();

        r1 = newarray (byte)[16];

        $b0 = (byte) -2;

        r1[0] = $b0;

        $b1 = (byte) -128;

        r1[1] = $b1;

        $b2 = r3[0];

        $b3 = $b2 ^ 2;

        $b4 = (byte) $b3;

        $b5 = (byte) $b4;

        r1[8] = $b5;

        $b6 = r3[1];

        $b7 = (byte) $b6;

        r1[9] = $b7;

        $b8 = r3[2];

        $b9 = (byte) $b8;

        r1[10] = $b9;

        $b10 = (byte) -1;

        r1[11] = $b10;

        $b11 = (byte) -2;

        r1[12] = $b11;

        $b12 = r3[3];

        $b13 = (byte) $b12;

        r1[13] = $b13;

        $b14 = r3[4];

        $b15 = (byte) $b14;

        r1[14] = $b15;

        $b16 = r3[5];

        $b17 = (byte) $b16;

        r1[15] = $b17;

     label1:
        r4 = staticinvoke <java.net.Inet6Address: java.net.Inet6Address getByAddress(java.lang.String,byte[],int)>(null, r1, 0);

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        return null;

        catch java.net.UnknownHostException from label1 to label2 with label3;
    }

    public int hashCode()
    {
        android.net.MacAddress r0;
        long l0, $l1, $l2;
        int $i3;

        r0 := @this: android.net.MacAddress;

        l0 = r0.<android.net.MacAddress: long mAddr>;

        $l1 = l0 >> 32;

        $l2 = l0 ^ $l1;

        $i3 = (int) $l2;

        return $i3;
    }

    public boolean isLocallyAssigned()
    {
        android.net.MacAddress r0;
        long $l0, $l1, $l2;
        byte $b3;
        boolean z0;

        r0 := @this: android.net.MacAddress;

        $l1 = r0.<android.net.MacAddress: long mAddr>;

        $l0 = <android.net.MacAddress: long LOCALLY_ASSIGNED_MASK>;

        $l2 = $l1 & $l0;

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean matches(android.net.MacAddress, android.net.MacAddress)
    {
        android.net.MacAddress r0, r1, r2;
        long l0, l1, $l2, $l3, $l4;
        byte $b5;
        boolean z0;

        r0 := @this: android.net.MacAddress;

        r1 := @parameter0: android.net.MacAddress;

        r2 := @parameter1: android.net.MacAddress;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        l0 = r0.<android.net.MacAddress: long mAddr>;

        l1 = r2.<android.net.MacAddress: long mAddr>;

        $l4 = l0 & l1;

        $l2 = r1.<android.net.MacAddress: long mAddr>;

        $l3 = l1 & $l2;

        $b5 = $l4 cmp $l3;

        if $b5 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public byte[] toByteArray()
    {
        android.net.MacAddress r0;
        long $l0;
        byte[] $r1;

        r0 := @this: android.net.MacAddress;

        $l0 = r0.<android.net.MacAddress: long mAddr>;

        $r1 = staticinvoke <android.net.MacAddress: byte[] byteAddrFromLongAddr(long)>($l0);

        return $r1;
    }

    public java.lang.String toOuiString()
    {
        android.net.MacAddress r0;
        java.lang.Object[] $r1;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7, $l8;
        java.lang.Long $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: android.net.MacAddress;

        $r1 = newarray (java.lang.Object)[3];

        $l0 = r0.<android.net.MacAddress: long mAddr>;

        $l1 = $l0 >> 40;

        $l2 = $l1 & 255L;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r1[0] = $r2;

        $l3 = r0.<android.net.MacAddress: long mAddr>;

        $l4 = $l3 >> 32;

        $l5 = $l4 & 255L;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5);

        $r1[1] = $r3;

        $l6 = r0.<android.net.MacAddress: long mAddr>;

        $l7 = $l6 >> 24;

        $l8 = $l7 & 255L;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l8);

        $r1[2] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%02x:%02x:%02x", $r1);

        return $r5;
    }

    public java.lang.String toString()
    {
        android.net.MacAddress r0;
        long $l0;
        java.lang.String $r1;

        r0 := @this: android.net.MacAddress;

        $l0 = r0.<android.net.MacAddress: long mAddr>;

        $r1 = staticinvoke <android.net.MacAddress: java.lang.String stringAddrFromLongAddr(long)>($l0);

        return $r1;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        android.net.MacAddress r0;
        android.os.Parcel r1;
        int i0;
        long $l1;

        r0 := @this: android.net.MacAddress;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        $l1 = r0.<android.net.MacAddress: long mAddr>;

        virtualinvoke r1.<android.os.Parcel: void writeLong(long)>($l1);

        return;
    }
}
