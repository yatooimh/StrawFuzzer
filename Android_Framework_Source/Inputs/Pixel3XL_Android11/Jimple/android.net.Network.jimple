public class android.net.Network extends java.lang.Object implements android.os.Parcelable
{
    public static final android.os.Parcelable$Creator CREATOR;
    private static final long HANDLE_MAGIC;
    private static final int HANDLE_MAGIC_SIZE;
    private static final boolean httpKeepAlive;
    private static final long httpKeepAliveDurationMs;
    private static final int httpMaxConnections;
    private final java.lang.Object mLock;
    private volatile android.net.Network$NetworkBoundSocketFactory mNetworkBoundSocketFactory;
    private final transient boolean mPrivateDnsBypass;
    private volatile com.android.okhttp.internalandroidapi.HttpURLConnectionFactory mUrlConnectionFactory;
    public final int netId;

    static void <clinit>()
    {
        boolean z0;
        java.lang.String $r0, $r1, $r3;
        long $l0;
        android.net.Network$1 $r2;
        int i1;

        <android.net.Network: int HANDLE_MAGIC_SIZE> = 32;

        <android.net.Network: long HANDLE_MAGIC> = 3405697037L;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("http.keepAlive", "true");

        z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r0);

        <android.net.Network: boolean httpKeepAlive> = z0;

        if z0 == 0 goto label1;

        $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("http.maxConnections", "5");

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        goto label2;

     label1:
        i1 = 0;

     label2:
        <android.net.Network: int httpMaxConnections> = i1;

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("http.keepAliveDuration", "300000");

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r1);

        <android.net.Network: long httpKeepAliveDurationMs> = $l0;

        $r2 = new android.net.Network$1;

        specialinvoke $r2.<android.net.Network$1: void <init>()>();

        <android.net.Network: android.os.Parcelable$Creator CREATOR> = $r2;

        return;
    }

    public void <init>(int)
    {
        android.net.Network r0;
        int i0;

        r0 := @this: android.net.Network;

        i0 := @parameter0: int;

        specialinvoke r0.<android.net.Network: void <init>(int,boolean)>(i0, 0);

        return;
    }

    public void <init>(int, boolean)
    {
        android.net.Network r0;
        int i0;
        boolean z0;
        java.lang.Object $r1;

        r0 := @this: android.net.Network;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.net.Network: android.net.Network$NetworkBoundSocketFactory mNetworkBoundSocketFactory> = null;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<android.net.Network: java.lang.Object mLock> = $r1;

        r0.<android.net.Network: int netId> = i0;

        r0.<android.net.Network: boolean mPrivateDnsBypass> = z0;

        return;
    }

    public void <init>(android.net.Network)
    {
        android.net.Network r0, r1;
        boolean $z0;
        int $i0;

        r0 := @this: android.net.Network;

        r1 := @parameter0: android.net.Network;

        $i0 = r1.<android.net.Network: int netId>;

        $z0 = r1.<android.net.Network: boolean mPrivateDnsBypass>;

        specialinvoke r0.<android.net.Network: void <init>(int,boolean)>($i0, $z0);

        return;
    }

    public static android.net.Network fromNetworkHandle(long)
    {
        long l0, $l2, $l5;
        byte $b1, $b3, $b4;
        java.lang.IllegalArgumentException $r0, $r1;
        android.net.Network $r2;
        int $i6;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 == 0 goto label2;

        $l2 = 4294967295L & l0;

        $b3 = $l2 cmp 3405697037L;

        if $b3 != 0 goto label1;

        $b4 = l0 cmp 0L;

        if $b4 < 0 goto label1;

        $r2 = new android.net.Network;

        $l5 = l0 >> 32;

        $i6 = (int) $l5;

        specialinvoke $r2.<android.net.Network: void <init>(int)>($i6);

        return $r2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Value passed to fromNetworkHandle() is not a network handle.");

        throw $r1;

     label2:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Network.fromNetworkHandle refusing to instantiate NETID_UNSET Network.");

        throw $r0;
    }

    private void maybeInitUrlConnectionFactory()
    {
        android.net.Network r0;
        java.lang.Object r1;
        com.android.okhttp.internalandroidapi.HttpURLConnectionFactory r2, $r3;
        java.util.concurrent.TimeUnit $r4;
        long $l0;
        int $i1;
        java.lang.Throwable $r5;
        android.net._$$Lambda$Network$KD6DxaMRJIcajhj36TU1K7lJnHQ r6;

        r0 := @this: android.net.Network;

        r1 = r0.<android.net.Network: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<android.net.Network: com.android.okhttp.internalandroidapi.HttpURLConnectionFactory mUrlConnectionFactory>;

        if $r3 != null goto label2;

        r6 = new android.net._$$Lambda$Network$KD6DxaMRJIcajhj36TU1K7lJnHQ;

        specialinvoke r6.<android.net._$$Lambda$Network$KD6DxaMRJIcajhj36TU1K7lJnHQ: void <init>(android.net.Network)>(r0);

        r2 = new com.android.okhttp.internalandroidapi.HttpURLConnectionFactory;

        specialinvoke r2.<com.android.okhttp.internalandroidapi.HttpURLConnectionFactory: void <init>()>();

        virtualinvoke r2.<com.android.okhttp.internalandroidapi.HttpURLConnectionFactory: void setDns(com.android.okhttp.internalandroidapi.Dns)>(r6);

        $i1 = <android.net.Network: int httpMaxConnections>;

        $l0 = <android.net.Network: long httpKeepAliveDurationMs>;

        $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        virtualinvoke r2.<com.android.okhttp.internalandroidapi.HttpURLConnectionFactory: void setNewConnectionPool(int,long,java.util.concurrent.TimeUnit)>($i1, $l0, $r4);

        r0.<android.net.Network: com.android.okhttp.internalandroidapi.HttpURLConnectionFactory mUrlConnectionFactory> = r2;

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void bindSocket(java.io.FileDescriptor) throws java.io.IOException
    {
        android.net.Network r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.net.SocketAddress $r1;
        java.net.InetSocketAddress $r2;
        java.net.InetAddress $r3;
        boolean $z0;
        java.lang.String $r8;
        java.net.SocketException $r9, $r13, r19, r20;
        java.lang.ClassCastException $r10;
        java.lang.Throwable $r12;
        java.io.FileDescriptor r14;
        java.lang.StringBuilder r21;
        android.system.ErrnoException r22, r23, r24;

        r0 := @this: android.net.Network;

        r14 := @parameter0: java.io.FileDescriptor;

     label1:
        $r1 = staticinvoke <android.system.Os: java.net.SocketAddress getpeername(java.io.FileDescriptor)>(r14);

        $r2 = (java.net.InetSocketAddress) $r1;

        $r3 = virtualinvoke $r2.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        $z0 = virtualinvoke $r3.<java.net.InetAddress: boolean isAnyLocalAddress()>();

        if $z0 == 0 goto label3;

     label2:
        goto label6;

     label3:
        r19 = new java.net.SocketException;

        specialinvoke r19.<java.net.SocketException: void <init>(java.lang.String)>("Socket is connected");

        throw r19;

     label4:
        $r10 := @caughtexception;

        r20 = new java.net.SocketException;

        specialinvoke r20.<java.net.SocketException: void <init>(java.lang.String)>("Only AF_INET/AF_INET6 sockets supported");

        throw r20;

     label5:
        $r12 := @caughtexception;

        r23 = (android.system.ErrnoException) $r12;

        $i6 = r23.<android.system.ErrnoException: int errno>;

        $i5 = <android.system.OsConstants: int ENOTCONN>;

        if $i6 != $i5 goto label8;

     label6:
        $i1 = virtualinvoke r14.<java.io.FileDescriptor: int getInt$()>();

        $i2 = r0.<android.net.Network: int netId>;

        i0 = staticinvoke <android.net.NetworkUtils: int bindSocketToNetwork(int,int)>($i1, $i2);

        if i0 != 0 goto label7;

        return;

     label7:
        r21 = new java.lang.StringBuilder;

        specialinvoke r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Binding socket to network ");

        $i3 = r0.<android.net.Network: int netId>;

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        r22 = new android.system.ErrnoException;

        $r8 = virtualinvoke r21.<java.lang.StringBuilder: java.lang.String toString()>();

        $i4 = neg i0;

        specialinvoke r22.<android.system.ErrnoException: void <init>(java.lang.String,int)>($r8, $i4);

        $r9 = virtualinvoke r22.<android.system.ErrnoException: java.net.SocketException rethrowAsSocketException()>();

        throw $r9;

     label8:
        r24 = (android.system.ErrnoException) $r12;

        $r13 = virtualinvoke r24.<android.system.ErrnoException: java.net.SocketException rethrowAsSocketException()>();

        throw $r13;

        catch android.system.ErrnoException from label1 to label2 with label5;
        catch java.lang.ClassCastException from label1 to label2 with label4;
        catch android.system.ErrnoException from label3 to label4 with label5;
        catch java.lang.ClassCastException from label3 to label4 with label4;
    }

    public void bindSocket(java.net.DatagramSocket) throws java.io.IOException
    {
        android.net.Network r0;
        java.net.DatagramSocket r1;
        java.io.FileDescriptor $r2;

        r0 := @this: android.net.Network;

        r1 := @parameter0: java.net.DatagramSocket;

        virtualinvoke r1.<java.net.DatagramSocket: boolean getReuseAddress()>();

        $r2 = virtualinvoke r1.<java.net.DatagramSocket: java.io.FileDescriptor getFileDescriptor$()>();

        virtualinvoke r0.<android.net.Network: void bindSocket(java.io.FileDescriptor)>($r2);

        return;
    }

    public void bindSocket(java.net.Socket) throws java.io.IOException
    {
        android.net.Network r0;
        java.net.Socket r1;
        java.io.FileDescriptor $r2;

        r0 := @this: android.net.Network;

        r1 := @parameter0: java.net.Socket;

        virtualinvoke r1.<java.net.Socket: boolean getReuseAddress()>();

        $r2 = virtualinvoke r1.<java.net.Socket: java.io.FileDescriptor getFileDescriptor$()>();

        virtualinvoke r0.<android.net.Network: void bindSocket(java.io.FileDescriptor)>($r2);

        return;
    }

    public int describeContents()
    {
        android.net.Network r0;

        r0 := @this: android.net.Network;

        return 0;
    }

    public void dumpDebug(android.util.proto.ProtoOutputStream, long)
    {
        android.net.Network r0;
        android.util.proto.ProtoOutputStream r1;
        int $i0;
        long l1, l2;

        r0 := @this: android.net.Network;

        r1 := @parameter0: android.util.proto.ProtoOutputStream;

        l1 := @parameter1: long;

        l2 = virtualinvoke r1.<android.util.proto.ProtoOutputStream: long start(long)>(l1);

        $i0 = r0.<android.net.Network: int netId>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464257L, $i0);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void end(long)>(l2);

        return;
    }

    public boolean equals(java.lang.Object)
    {
        android.net.Network r0, r2;
        boolean z0, z1;
        int $i0, $i1;
        java.lang.Object r1;

        r0 := @this: android.net.Network;

        r1 := @parameter0: java.lang.Object;

        z0 = r1 instanceof android.net.Network;

        z1 = 0;

        if z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (android.net.Network) r1;

        $i1 = r0.<android.net.Network: int netId>;

        $i0 = r2.<android.net.Network: int netId>;

        if $i1 != $i0 goto label2;

        z1 = 1;

     label2:
        return z1;
    }

    public java.net.InetAddress[] getAllByName(java.lang.String) throws java.net.UnknownHostException
    {
        android.net.Network r0;
        java.lang.String r1;
        int $i0;
        java.net.InetAddress[] $r2;

        r0 := @this: android.net.Network;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<android.net.Network: int getNetIdForResolv()>();

        $r2 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByNameOnNet(java.lang.String,int)>(r1, $i0);

        return $r2;
    }

    public java.net.InetAddress getByName(java.lang.String) throws java.net.UnknownHostException
    {
        android.net.Network r0;
        java.lang.String r1;
        int $i0;
        java.net.InetAddress $r2;

        r0 := @this: android.net.Network;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<android.net.Network: int getNetIdForResolv()>();

        $r2 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByNameOnNet(java.lang.String,int)>(r1, $i0);

        return $r2;
    }

    public int getNetId()
    {
        android.net.Network r0;
        int $i0;

        r0 := @this: android.net.Network;

        $i0 = r0.<android.net.Network: int netId>;

        return $i0;
    }

    public int getNetIdForResolv()
    {
        android.net.Network r0;
        boolean $z0;
        int $i0, i3;
        long $l1, $l2;

        r0 := @this: android.net.Network;

        $z0 = r0.<android.net.Network: boolean mPrivateDnsBypass>;

        if $z0 == 0 goto label1;

        $i0 = r0.<android.net.Network: int netId>;

        $l1 = (long) $i0;

        $l2 = 2147483648L | $l1;

        i3 = (int) $l2;

        goto label2;

     label1:
        i3 = r0.<android.net.Network: int netId>;

     label2:
        return i3;
    }

    public long getNetworkHandle()
    {
        android.net.Network r0;
        int i0;
        long $l1, $l2, $l3;

        r0 := @this: android.net.Network;

        i0 = r0.<android.net.Network: int netId>;

        if i0 != 0 goto label1;

        return 0L;

     label1:
        $l1 = (long) i0;

        $l2 = $l1 << 32;

        $l3 = $l2 | 3405697037L;

        return $l3;
    }

    public android.net.Network getPrivateDnsBypassingCopy()
    {
        android.net.Network r0, $r1;
        int $i0;

        r0 := @this: android.net.Network;

        $r1 = new android.net.Network;

        $i0 = r0.<android.net.Network: int netId>;

        specialinvoke $r1.<android.net.Network: void <init>(int,boolean)>($i0, 1);

        return $r1;
    }

    public javax.net.SocketFactory getSocketFactory()
    {
        android.net.Network r0;
        java.lang.Object r1;
        android.net.Network$NetworkBoundSocketFactory $r2, $r3, $r4, r6;
        java.lang.Throwable $r5;

        r0 := @this: android.net.Network;

        $r2 = r0.<android.net.Network: android.net.Network$NetworkBoundSocketFactory mNetworkBoundSocketFactory>;

        if $r2 != null goto label7;

        r1 = r0.<android.net.Network: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r4 = r0.<android.net.Network: android.net.Network$NetworkBoundSocketFactory mNetworkBoundSocketFactory>;

        if $r4 != null goto label2;

        r6 = new android.net.Network$NetworkBoundSocketFactory;

        specialinvoke r6.<android.net.Network$NetworkBoundSocketFactory: void <init>(android.net.Network,android.net.Network$1)>(r0, null);

        r0.<android.net.Network: android.net.Network$NetworkBoundSocketFactory mNetworkBoundSocketFactory> = r6;

     label2:
        exitmonitor r1;

     label3:
        goto label7;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

     label7:
        $r3 = r0.<android.net.Network: android.net.Network$NetworkBoundSocketFactory mNetworkBoundSocketFactory>;

        return $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public int hashCode()
    {
        android.net.Network r0;
        int $i0, $i1;

        r0 := @this: android.net.Network;

        $i0 = r0.<android.net.Network: int netId>;

        $i1 = $i0 * 11;

        return $i1;
    }

    public java.util.List lambda$maybeInitUrlConnectionFactory$0$Network(java.lang.String) throws java.net.UnknownHostException
    {
        android.net.Network r0;
        java.lang.String r1;
        java.net.InetAddress[] $r2;
        java.util.List $r3;

        r0 := @this: android.net.Network;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<android.net.Network: java.net.InetAddress[] getAllByName(java.lang.String)>(r1);

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        return $r3;
    }

    public java.net.URLConnection openConnection(java.net.URL) throws java.io.IOException
    {
        android.net.Network r0;
        java.net.URL r1;
        java.io.IOException $r2;
        java.net.URLConnection $r3;
        android.net.ConnectivityManager r4;
        android.net.ProxyInfo r5;
        java.net.Proxy r6;

        r0 := @this: android.net.Network;

        r1 := @parameter0: java.net.URL;

        r4 = staticinvoke <android.net.ConnectivityManager: android.net.ConnectivityManager getInstanceOrNull()>();

        if r4 == null goto label3;

        r5 = virtualinvoke r4.<android.net.ConnectivityManager: android.net.ProxyInfo getProxyForNetwork(android.net.Network)>(r0);

        if r5 == null goto label1;

        r6 = virtualinvoke r5.<android.net.ProxyInfo: java.net.Proxy makeProxy()>();

        goto label2;

     label1:
        r6 = <java.net.Proxy: java.net.Proxy NO_PROXY>;

     label2:
        $r3 = virtualinvoke r0.<android.net.Network: java.net.URLConnection openConnection(java.net.URL,java.net.Proxy)>(r1, r6);

        return $r3;

     label3:
        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("No ConnectivityManager yet constructed, please construct one");

        throw $r2;
    }

    public java.net.URLConnection openConnection(java.net.URL, java.net.Proxy) throws java.io.IOException
    {
        android.net.Network r0;
        java.net.URL r1;
        java.net.Proxy r2;
        javax.net.SocketFactory r3;
        java.lang.IllegalArgumentException $r4;
        com.android.okhttp.internalandroidapi.HttpURLConnectionFactory $r5;
        java.net.URLConnection $r6;

        r0 := @this: android.net.Network;

        r1 := @parameter0: java.net.URL;

        r2 := @parameter1: java.net.Proxy;

        if r2 == null goto label1;

        specialinvoke r0.<android.net.Network: void maybeInitUrlConnectionFactory()>();

        r3 = virtualinvoke r0.<android.net.Network: javax.net.SocketFactory getSocketFactory()>();

        $r5 = r0.<android.net.Network: com.android.okhttp.internalandroidapi.HttpURLConnectionFactory mUrlConnectionFactory>;

        $r6 = virtualinvoke $r5.<com.android.okhttp.internalandroidapi.HttpURLConnectionFactory: java.net.URLConnection openConnection(java.net.URL,javax.net.SocketFactory,java.net.Proxy)>(r1, r3, r2);

        return $r6;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("proxy is null");

        throw $r4;
    }

    public java.lang.String toString()
    {
        android.net.Network r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: android.net.Network;

        $i0 = r0.<android.net.Network: int netId>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        return $r1;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        android.net.Network r0;
        android.os.Parcel r1;
        int i0, $i1;

        r0 := @this: android.net.Network;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        $i1 = r0.<android.net.Network: int netId>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i1);

        return;
    }
}
