public final class android.net.NetworkCapabilities extends java.lang.Object implements android.os.Parcelable
{
    private static final long CONNECTIVITY_MANAGED_CAPABILITIES;
    public static final android.os.Parcelable$Creator CREATOR;
    private static final long DEFAULT_CAPABILITIES;
    private static final long FORCE_RESTRICTED_CAPABILITIES;
    public static final int LINK_BANDWIDTH_UNSPECIFIED;
    private static final int MAX_NET_CAPABILITY;
    public static final int MAX_TRANSPORT;
    private static final int MIN_NET_CAPABILITY;
    public static final int MIN_TRANSPORT;
    private static final long MUTABLE_CAPABILITIES;
    public static final int NET_CAPABILITY_CAPTIVE_PORTAL;
    public static final int NET_CAPABILITY_CBS;
    public static final int NET_CAPABILITY_DUN;
    public static final int NET_CAPABILITY_EIMS;
    public static final int NET_CAPABILITY_FOREGROUND;
    public static final int NET_CAPABILITY_FOTA;
    public static final int NET_CAPABILITY_IA;
    public static final int NET_CAPABILITY_IMS;
    public static final int NET_CAPABILITY_INTERNET;
    public static final int NET_CAPABILITY_MCX;
    public static final int NET_CAPABILITY_MMS;
    public static final int NET_CAPABILITY_NOT_CONGESTED;
    public static final int NET_CAPABILITY_NOT_METERED;
    public static final int NET_CAPABILITY_NOT_RESTRICTED;
    public static final int NET_CAPABILITY_NOT_ROAMING;
    public static final int NET_CAPABILITY_NOT_SUSPENDED;
    public static final int NET_CAPABILITY_NOT_VPN;
    public static final int NET_CAPABILITY_OEM_PAID;
    public static final int NET_CAPABILITY_PARTIAL_CONNECTIVITY;
    public static final int NET_CAPABILITY_RCS;
    public static final int NET_CAPABILITY_SUPL;
    public static final int NET_CAPABILITY_TEMPORARILY_NOT_METERED;
    public static final int NET_CAPABILITY_TRUSTED;
    public static final int NET_CAPABILITY_VALIDATED;
    public static final int NET_CAPABILITY_WIFI_P2P;
    public static final int NET_CAPABILITY_XCAP;
    private static final long NON_REQUESTABLE_CAPABILITIES;
    static final long RESTRICTED_CAPABILITIES;
    public static final int SIGNAL_STRENGTH_UNSPECIFIED;
    private static final java.lang.String TAG;
    private static final long TEST_NETWORKS_ALLOWED_CAPABILITIES;
    private static final int TEST_NETWORKS_ALLOWED_TRANSPORTS;
    public static final int TRANSPORT_BLUETOOTH;
    public static final int TRANSPORT_CELLULAR;
    public static final int TRANSPORT_ETHERNET;
    public static final int TRANSPORT_LOWPAN;
    private static final java.lang.String[] TRANSPORT_NAMES;
    public static final int TRANSPORT_TEST;
    public static final int TRANSPORT_VPN;
    public static final int TRANSPORT_WIFI;
    public static final int TRANSPORT_WIFI_AWARE;
    static final long UNRESTRICTED_CAPABILITIES;
    private int[] mAdministratorUids;
    private int mLinkDownBandwidthKbps;
    private int mLinkUpBandwidthKbps;
    private long mNetworkCapabilities;
    private android.net.NetworkSpecifier mNetworkSpecifier;
    private int mOwnerUid;
    private boolean mPrivateDnsBroken;
    private java.lang.String mRequestorPackageName;
    private int mRequestorUid;
    private java.lang.String mSSID;
    private int mSignalStrength;
    private android.net.TransportInfo mTransportInfo;
    private long mTransportTypes;
    private android.util.ArraySet mUids;
    private long mUnwantedNetworkCapabilities;

    static void <clinit>()
    {
        java.lang.String[] $r0;
        android.net.NetworkCapabilities$1 $r1;

        <android.net.NetworkCapabilities: long UNRESTRICTED_CAPABILITIES> = 4163L;

        <android.net.NetworkCapabilities: int TRANSPORT_WIFI_AWARE> = 5;

        <android.net.NetworkCapabilities: int TRANSPORT_WIFI> = 1;

        <android.net.NetworkCapabilities: int TRANSPORT_VPN> = 4;

        <android.net.NetworkCapabilities: int TRANSPORT_TEST> = 7;

        <android.net.NetworkCapabilities: int TRANSPORT_LOWPAN> = 6;

        <android.net.NetworkCapabilities: int TRANSPORT_ETHERNET> = 3;

        <android.net.NetworkCapabilities: int TRANSPORT_CELLULAR> = 0;

        <android.net.NetworkCapabilities: int TRANSPORT_BLUETOOTH> = 2;

        <android.net.NetworkCapabilities: int TEST_NETWORKS_ALLOWED_TRANSPORTS> = 136;

        <android.net.NetworkCapabilities: long TEST_NETWORKS_ALLOWED_CAPABILITIES> = 37005312L;

        <android.net.NetworkCapabilities: java.lang.String TAG> = "NetworkCapabilities";

        <android.net.NetworkCapabilities: int SIGNAL_STRENGTH_UNSPECIFIED> = -2147483648;

        <android.net.NetworkCapabilities: long RESTRICTED_CAPABILITIES> = 8390588L;

        <android.net.NetworkCapabilities: long NON_REQUESTABLE_CAPABILITIES> = 54460416L;

        <android.net.NetworkCapabilities: int NET_CAPABILITY_XCAP> = 9;

        <android.net.NetworkCapabilities: int NET_CAPABILITY_WIFI_P2P> = 6;

        <android.net.NetworkCapabilities: int NET_CAPABILITY_VALIDATED> = 16;

        <android.net.NetworkCapabilities: int NET_CAPABILITY_TRUSTED> = 14;

        <android.net.NetworkCapabilities: int NET_CAPABILITY_TEMPORARILY_NOT_METERED> = 25;

        <android.net.NetworkCapabilities: int NET_CAPABILITY_SUPL> = 1;

        <android.net.NetworkCapabilities: int NET_CAPABILITY_RCS> = 8;

        <android.net.NetworkCapabilities: int NET_CAPABILITY_PARTIAL_CONNECTIVITY> = 24;

        <android.net.NetworkCapabilities: int NET_CAPABILITY_OEM_PAID> = 22;

        <android.net.NetworkCapabilities: int NET_CAPABILITY_NOT_VPN> = 15;

        <android.net.NetworkCapabilities: int NET_CAPABILITY_NOT_SUSPENDED> = 21;

        <android.net.NetworkCapabilities: int NET_CAPABILITY_NOT_ROAMING> = 18;

        <android.net.NetworkCapabilities: int NET_CAPABILITY_NOT_RESTRICTED> = 13;

        <android.net.NetworkCapabilities: int NET_CAPABILITY_NOT_METERED> = 11;

        <android.net.NetworkCapabilities: int NET_CAPABILITY_NOT_CONGESTED> = 20;

        <android.net.NetworkCapabilities: int NET_CAPABILITY_MMS> = 0;

        <android.net.NetworkCapabilities: int NET_CAPABILITY_MCX> = 23;

        <android.net.NetworkCapabilities: int NET_CAPABILITY_INTERNET> = 12;

        <android.net.NetworkCapabilities: int NET_CAPABILITY_IMS> = 4;

        <android.net.NetworkCapabilities: int NET_CAPABILITY_IA> = 7;

        <android.net.NetworkCapabilities: int NET_CAPABILITY_FOTA> = 3;

        <android.net.NetworkCapabilities: int NET_CAPABILITY_FOREGROUND> = 19;

        <android.net.NetworkCapabilities: int NET_CAPABILITY_EIMS> = 10;

        <android.net.NetworkCapabilities: int NET_CAPABILITY_DUN> = 2;

        <android.net.NetworkCapabilities: int NET_CAPABILITY_CBS> = 5;

        <android.net.NetworkCapabilities: int NET_CAPABILITY_CAPTIVE_PORTAL> = 17;

        <android.net.NetworkCapabilities: long MUTABLE_CAPABILITIES> = 54476800L;

        <android.net.NetworkCapabilities: int MIN_TRANSPORT> = 0;

        <android.net.NetworkCapabilities: int MIN_NET_CAPABILITY> = 0;

        <android.net.NetworkCapabilities: int MAX_TRANSPORT> = 7;

        <android.net.NetworkCapabilities: int MAX_NET_CAPABILITY> = 25;

        <android.net.NetworkCapabilities: int LINK_BANDWIDTH_UNSPECIFIED> = 0;

        <android.net.NetworkCapabilities: long FORCE_RESTRICTED_CAPABILITIES> = 4194304L;

        <android.net.NetworkCapabilities: long DEFAULT_CAPABILITIES> = 57344L;

        <android.net.NetworkCapabilities: long CONNECTIVITY_MANAGED_CAPABILITIES> = 17498112L;

        $r0 = newarray (java.lang.String)[8];

        $r0[0] = "CELLULAR";

        $r0[1] = "WIFI";

        $r0[2] = "BLUETOOTH";

        $r0[3] = "ETHERNET";

        $r0[4] = "VPN";

        $r0[5] = "WIFI_AWARE";

        $r0[6] = "LOWPAN";

        $r0[7] = "TEST";

        <android.net.NetworkCapabilities: java.lang.String[] TRANSPORT_NAMES> = $r0;

        $r1 = new android.net.NetworkCapabilities$1;

        specialinvoke $r1.<android.net.NetworkCapabilities$1: void <init>()>();

        <android.net.NetworkCapabilities: android.os.Parcelable$Creator CREATOR> = $r1;

        return;
    }

    public void <init>()
    {
        android.net.NetworkCapabilities r0;
        int[] $r1;

        r0 := @this: android.net.NetworkCapabilities;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.net.NetworkCapabilities: int mOwnerUid> = -1;

        $r1 = newarray (int)[0];

        r0.<android.net.NetworkCapabilities: int[] mAdministratorUids> = $r1;

        r0.<android.net.NetworkCapabilities: int mLinkUpBandwidthKbps> = 0;

        r0.<android.net.NetworkCapabilities: int mLinkDownBandwidthKbps> = 0;

        r0.<android.net.NetworkCapabilities: android.net.NetworkSpecifier mNetworkSpecifier> = null;

        r0.<android.net.NetworkCapabilities: android.net.TransportInfo mTransportInfo> = null;

        r0.<android.net.NetworkCapabilities: int mSignalStrength> = -2147483648;

        r0.<android.net.NetworkCapabilities: android.util.ArraySet mUids> = null;

        virtualinvoke r0.<android.net.NetworkCapabilities: void clearAll()>();

        r0.<android.net.NetworkCapabilities: long mNetworkCapabilities> = 57344L;

        return;
    }

    public void <init>(android.net.NetworkCapabilities)
    {
        android.net.NetworkCapabilities r0, r1;
        int[] $r2;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: android.net.NetworkCapabilities;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.net.NetworkCapabilities: int mOwnerUid> = -1;

        $r2 = newarray (int)[0];

        r0.<android.net.NetworkCapabilities: int[] mAdministratorUids> = $r2;

        r0.<android.net.NetworkCapabilities: int mLinkUpBandwidthKbps> = 0;

        r0.<android.net.NetworkCapabilities: int mLinkDownBandwidthKbps> = 0;

        r0.<android.net.NetworkCapabilities: android.net.NetworkSpecifier mNetworkSpecifier> = null;

        r0.<android.net.NetworkCapabilities: android.net.TransportInfo mTransportInfo> = null;

        r0.<android.net.NetworkCapabilities: int mSignalStrength> = -2147483648;

        r0.<android.net.NetworkCapabilities: android.util.ArraySet mUids> = null;

        if r1 == null goto label1;

        virtualinvoke r0.<android.net.NetworkCapabilities: void set(android.net.NetworkCapabilities)>(r1);

     label1:
        return;
    }

    static long access$002(android.net.NetworkCapabilities, long)
    {
        android.net.NetworkCapabilities r0;
        long l0;

        r0 := @parameter0: android.net.NetworkCapabilities;

        l0 := @parameter1: long;

        r0.<android.net.NetworkCapabilities: long mNetworkCapabilities> = l0;

        return l0;
    }

    static boolean access$1002(android.net.NetworkCapabilities, boolean)
    {
        android.net.NetworkCapabilities r0;
        boolean z0;

        r0 := @parameter0: android.net.NetworkCapabilities;

        z0 := @parameter1: boolean;

        r0.<android.net.NetworkCapabilities: boolean mPrivateDnsBroken> = z0;

        return z0;
    }

    static long access$102(android.net.NetworkCapabilities, long)
    {
        android.net.NetworkCapabilities r0;
        long l0;

        r0 := @parameter0: android.net.NetworkCapabilities;

        l0 := @parameter1: long;

        r0.<android.net.NetworkCapabilities: long mUnwantedNetworkCapabilities> = l0;

        return l0;
    }

    static int access$1102(android.net.NetworkCapabilities, int)
    {
        android.net.NetworkCapabilities r0;
        int i0;

        r0 := @parameter0: android.net.NetworkCapabilities;

        i0 := @parameter1: int;

        r0.<android.net.NetworkCapabilities: int mOwnerUid> = i0;

        return i0;
    }

    static int access$1202(android.net.NetworkCapabilities, int)
    {
        android.net.NetworkCapabilities r0;
        int i0;

        r0 := @parameter0: android.net.NetworkCapabilities;

        i0 := @parameter1: int;

        r0.<android.net.NetworkCapabilities: int mRequestorUid> = i0;

        return i0;
    }

    static java.lang.String access$1302(android.net.NetworkCapabilities, java.lang.String)
    {
        android.net.NetworkCapabilities r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.NetworkCapabilities;

        r1 := @parameter1: java.lang.String;

        r0.<android.net.NetworkCapabilities: java.lang.String mRequestorPackageName> = r1;

        return r1;
    }

    static void access$1400(int)
    {
        int i0;

        i0 := @parameter0: int;

        staticinvoke <android.net.NetworkCapabilities: void checkValidTransportType(int)>(i0);

        return;
    }

    static long access$202(android.net.NetworkCapabilities, long)
    {
        android.net.NetworkCapabilities r0;
        long l0;

        r0 := @parameter0: android.net.NetworkCapabilities;

        l0 := @parameter1: long;

        r0.<android.net.NetworkCapabilities: long mTransportTypes> = l0;

        return l0;
    }

    static int access$302(android.net.NetworkCapabilities, int)
    {
        android.net.NetworkCapabilities r0;
        int i0;

        r0 := @parameter0: android.net.NetworkCapabilities;

        i0 := @parameter1: int;

        r0.<android.net.NetworkCapabilities: int mLinkUpBandwidthKbps> = i0;

        return i0;
    }

    static int access$402(android.net.NetworkCapabilities, int)
    {
        android.net.NetworkCapabilities r0;
        int i0;

        r0 := @parameter0: android.net.NetworkCapabilities;

        i0 := @parameter1: int;

        r0.<android.net.NetworkCapabilities: int mLinkDownBandwidthKbps> = i0;

        return i0;
    }

    static android.net.NetworkSpecifier access$502(android.net.NetworkCapabilities, android.net.NetworkSpecifier)
    {
        android.net.NetworkCapabilities r0;
        android.net.NetworkSpecifier r1;

        r0 := @parameter0: android.net.NetworkCapabilities;

        r1 := @parameter1: android.net.NetworkSpecifier;

        r0.<android.net.NetworkCapabilities: android.net.NetworkSpecifier mNetworkSpecifier> = r1;

        return r1;
    }

    static android.net.TransportInfo access$602(android.net.NetworkCapabilities, android.net.TransportInfo)
    {
        android.net.NetworkCapabilities r0;
        android.net.TransportInfo r1;

        r0 := @parameter0: android.net.NetworkCapabilities;

        r1 := @parameter1: android.net.TransportInfo;

        r0.<android.net.NetworkCapabilities: android.net.TransportInfo mTransportInfo> = r1;

        return r1;
    }

    static int access$702(android.net.NetworkCapabilities, int)
    {
        android.net.NetworkCapabilities r0;
        int i0;

        r0 := @parameter0: android.net.NetworkCapabilities;

        i0 := @parameter1: int;

        r0.<android.net.NetworkCapabilities: int mSignalStrength> = i0;

        return i0;
    }

    static android.util.ArraySet access$802(android.net.NetworkCapabilities, android.util.ArraySet)
    {
        android.net.NetworkCapabilities r0;
        android.util.ArraySet r1;

        r0 := @parameter0: android.net.NetworkCapabilities;

        r1 := @parameter1: android.util.ArraySet;

        r0.<android.net.NetworkCapabilities: android.util.ArraySet mUids> = r1;

        return r1;
    }

    static java.lang.String access$902(android.net.NetworkCapabilities, java.lang.String)
    {
        android.net.NetworkCapabilities r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.NetworkCapabilities;

        r1 := @parameter1: java.lang.String;

        r0.<android.net.NetworkCapabilities: java.lang.String mSSID> = r1;

        return r1;
    }

    public static void appendStringRepresentationOfBitMaskToStringBuilder(java.lang.StringBuilder, long, android.net.NetworkCapabilities$NameOf, java.lang.String)
    {
        java.lang.StringBuilder r0;
        android.net.NetworkCapabilities$NameOf r1;
        java.lang.String r2, $r3;
        byte $b0, $b2;
        long $l1, l3;
        int i4;
        boolean z0, z1;

        r0 := @parameter0: java.lang.StringBuilder;

        l3 := @parameter1: long;

        r1 := @parameter2: android.net.NetworkCapabilities$NameOf;

        r2 := @parameter3: java.lang.String;

        i4 = 0;

        z0 = 0;

     label1:
        $b0 = l3 cmp 0L;

        if $b0 == 0 goto label5;

        z1 = z0;

        $l1 = 1L & l3;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label4;

        if z0 == 0 goto label2;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        goto label3;

     label2:
        z0 = 1;

     label3:
        $r3 = interfaceinvoke r1.<android.net.NetworkCapabilities$NameOf: java.lang.String nameOf(int)>(i4);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        z1 = z0;

     label4:
        l3 = l3 >> 1;

        i4 = i4 + 1;

        z0 = z1;

        goto label1;

     label5:
        return;
    }

    public static java.lang.String capabilityNameOf(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label27;
            case 1: goto label26;
            case 2: goto label25;
            case 3: goto label24;
            case 4: goto label23;
            case 5: goto label22;
            case 6: goto label21;
            case 7: goto label20;
            case 8: goto label19;
            case 9: goto label18;
            case 10: goto label17;
            case 11: goto label16;
            case 12: goto label15;
            case 13: goto label14;
            case 14: goto label13;
            case 15: goto label12;
            case 16: goto label11;
            case 17: goto label10;
            case 18: goto label09;
            case 19: goto label08;
            case 20: goto label07;
            case 21: goto label06;
            case 22: goto label05;
            case 23: goto label04;
            case 24: goto label03;
            case 25: goto label02;
            default: goto label01;
        };

     label01:
        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;

     label02:
        return "TEMPORARILY_NOT_METERED";

     label03:
        return "PARTIAL_CONNECTIVITY";

     label04:
        return "MCX";

     label05:
        return "OEM_PAID";

     label06:
        return "NOT_SUSPENDED";

     label07:
        return "NOT_CONGESTED";

     label08:
        return "FOREGROUND";

     label09:
        return "NOT_ROAMING";

     label10:
        return "CAPTIVE_PORTAL";

     label11:
        return "VALIDATED";

     label12:
        return "NOT_VPN";

     label13:
        return "TRUSTED";

     label14:
        return "NOT_RESTRICTED";

     label15:
        return "INTERNET";

     label16:
        return "NOT_METERED";

     label17:
        return "EIMS";

     label18:
        return "XCAP";

     label19:
        return "RCS";

     label20:
        return "IA";

     label21:
        return "WIFI_P2P";

     label22:
        return "CBS";

     label23:
        return "IMS";

     label24:
        return "FOTA";

     label25:
        return "DUN";

     label26:
        return "SUPL";

     label27:
        return "MMS";
    }

    public static java.lang.String capabilityNamesOf(int[])
    {
        int[] r0;
        int i0, $i1, i2;
        java.util.StringJoiner $r2;
        java.lang.String $r3, $r4;

        r0 := @parameter0: int[];

        $r2 = new java.util.StringJoiner;

        specialinvoke $r2.<java.util.StringJoiner: void <init>(java.lang.CharSequence)>("|");

        if r0 == null goto label2;

        i0 = lengthof r0;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $i1 = r0[i2];

        $r4 = staticinvoke <android.net.NetworkCapabilities: java.lang.String capabilityNameOf(int)>($i1);

        virtualinvoke $r2.<java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>($r4);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r3 = virtualinvoke $r2.<java.util.StringJoiner: java.lang.String toString()>();

        return $r3;
    }

    private static void checkValidCapability(int)
    {
        int i0;
        boolean z0;
        java.lang.StringBuilder $r1;
        java.lang.String $r5;

        i0 := @parameter0: int;

        z0 = staticinvoke <android.net.NetworkCapabilities: boolean isValidCapability(int)>(i0);

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NetworkCapability ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("out of range");

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z0, $r5);

        return;
    }

    private static void checkValidTransportType(int)
    {
        int i0;
        boolean z0;
        java.lang.StringBuilder $r1;
        java.lang.String $r4;

        i0 := @parameter0: int;

        z0 = staticinvoke <android.net.NetworkCapabilities: boolean isValidTransport(int)>(i0);

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid TransportType ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z0, $r4);

        return;
    }

    private void combineAdministratorUids(android.net.NetworkCapabilities)
    {
        android.net.NetworkCapabilities r0, r1;
        int[] r2, $r3, $r5;
        int $i0, $i1, $i2;
        boolean $z0;
        java.lang.IllegalStateException $r4;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: android.net.NetworkCapabilities;

        r2 = r1.<android.net.NetworkCapabilities: int[] mAdministratorUids>;

        $i0 = lengthof r2;

        if $i0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<android.net.NetworkCapabilities: int[] mAdministratorUids>;

        $i1 = lengthof $r3;

        if $i1 != 0 goto label2;

        $i2 = lengthof r2;

        $r5 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>(r2, $i2);

        r0.<android.net.NetworkCapabilities: int[] mAdministratorUids> = $r5;

        return;

     label2:
        $z0 = virtualinvoke r0.<android.net.NetworkCapabilities: boolean equalsAdministratorUids(android.net.NetworkCapabilities)>(r1);

        if $z0 == 0 goto label3;

        return;

     label3:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can\'t combine two different administrator UID lists");

        throw $r4;
    }

    private void combineLinkBandwidths(android.net.NetworkCapabilities)
    {
        android.net.NetworkCapabilities r0, r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: android.net.NetworkCapabilities;

        $i1 = r0.<android.net.NetworkCapabilities: int mLinkUpBandwidthKbps>;

        $i0 = r1.<android.net.NetworkCapabilities: int mLinkUpBandwidthKbps>;

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i1, $i0);

        r0.<android.net.NetworkCapabilities: int mLinkUpBandwidthKbps> = $i2;

        $i4 = r0.<android.net.NetworkCapabilities: int mLinkDownBandwidthKbps>;

        $i3 = r1.<android.net.NetworkCapabilities: int mLinkDownBandwidthKbps>;

        $i5 = staticinvoke <java.lang.Math: int max(int,int)>($i4, $i3);

        r0.<android.net.NetworkCapabilities: int mLinkDownBandwidthKbps> = $i5;

        return;
    }

    private void combineNetCapabilities(android.net.NetworkCapabilities)
    {
        android.net.NetworkCapabilities r0, r1;
        long $l0, $l1, $l2, $l3, $l4, $l5;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: android.net.NetworkCapabilities;

        $l1 = r0.<android.net.NetworkCapabilities: long mNetworkCapabilities>;

        $l0 = r1.<android.net.NetworkCapabilities: long mNetworkCapabilities>;

        $l2 = $l1 | $l0;

        r0.<android.net.NetworkCapabilities: long mNetworkCapabilities> = $l2;

        $l4 = r0.<android.net.NetworkCapabilities: long mUnwantedNetworkCapabilities>;

        $l3 = r1.<android.net.NetworkCapabilities: long mUnwantedNetworkCapabilities>;

        $l5 = $l4 | $l3;

        r0.<android.net.NetworkCapabilities: long mUnwantedNetworkCapabilities> = $l5;

        return;
    }

    private void combineRequestor(android.net.NetworkCapabilities)
    {
        android.net.NetworkCapabilities r0, r1;
        int i0, $i1, $i2;
        java.lang.String r2, $r4, $r6;
        boolean $z0;
        java.lang.IllegalStateException $r7, $r8;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: android.net.NetworkCapabilities;

        i0 = r0.<android.net.NetworkCapabilities: int mRequestorUid>;

        if i0 == -1 goto label2;

        $i2 = r1.<android.net.NetworkCapabilities: int mOwnerUid>;

        if i0 != $i2 goto label1;

        goto label2;

     label1:
        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can\'t combine two uids");

        throw $r8;

     label2:
        r2 = r0.<android.net.NetworkCapabilities: java.lang.String mRequestorPackageName>;

        if r2 == null goto label4;

        $r6 = r1.<android.net.NetworkCapabilities: java.lang.String mRequestorPackageName>;

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label3;

        goto label4;

     label3:
        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can\'t combine two package names");

        throw $r7;

     label4:
        $i1 = r1.<android.net.NetworkCapabilities: int mRequestorUid>;

        virtualinvoke r0.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setRequestorUid(int)>($i1);

        $r4 = r1.<android.net.NetworkCapabilities: java.lang.String mRequestorPackageName>;

        virtualinvoke r0.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setRequestorPackageName(java.lang.String)>($r4);

        return;
    }

    private void combineSSIDs(android.net.NetworkCapabilities)
    {
        android.net.NetworkCapabilities r0, r1;
        java.lang.String r2, $r3, $r5;
        boolean $z0;
        java.lang.IllegalStateException $r6;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: android.net.NetworkCapabilities;

        r2 = r0.<android.net.NetworkCapabilities: java.lang.String mSSID>;

        if r2 == null goto label2;

        $r5 = r1.<android.net.NetworkCapabilities: java.lang.String mSSID>;

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can\'t combine two SSIDs");

        throw $r6;

     label2:
        $r3 = r1.<android.net.NetworkCapabilities: java.lang.String mSSID>;

        virtualinvoke r0.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setSSID(java.lang.String)>($r3);

        return;
    }

    private void combineSignalStrength(android.net.NetworkCapabilities)
    {
        android.net.NetworkCapabilities r0, r1;
        int $i0, $i1, $i2;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: android.net.NetworkCapabilities;

        $i1 = r0.<android.net.NetworkCapabilities: int mSignalStrength>;

        $i0 = r1.<android.net.NetworkCapabilities: int mSignalStrength>;

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i1, $i0);

        r0.<android.net.NetworkCapabilities: int mSignalStrength> = $i2;

        return;
    }

    private void combineSpecifiers(android.net.NetworkCapabilities)
    {
        android.net.NetworkCapabilities r0, r1;
        android.net.NetworkSpecifier r2, $r3, $r5;
        boolean $z0;
        java.lang.IllegalStateException $r6;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: android.net.NetworkCapabilities;

        r2 = r0.<android.net.NetworkCapabilities: android.net.NetworkSpecifier mNetworkSpecifier>;

        if r2 == null goto label2;

        $r5 = r1.<android.net.NetworkCapabilities: android.net.NetworkSpecifier mNetworkSpecifier>;

        $z0 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can\'t combine two networkSpecifiers");

        throw $r6;

     label2:
        $r3 = r1.<android.net.NetworkCapabilities: android.net.NetworkSpecifier mNetworkSpecifier>;

        virtualinvoke r0.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setNetworkSpecifier(android.net.NetworkSpecifier)>($r3);

        return;
    }

    private void combineTransportInfos(android.net.NetworkCapabilities)
    {
        android.net.NetworkCapabilities r0, r1;
        android.net.TransportInfo r2, $r3, $r5;
        boolean $z0;
        java.lang.IllegalStateException $r6;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: android.net.NetworkCapabilities;

        r2 = r0.<android.net.NetworkCapabilities: android.net.TransportInfo mTransportInfo>;

        if r2 == null goto label2;

        $r5 = r1.<android.net.NetworkCapabilities: android.net.TransportInfo mTransportInfo>;

        $z0 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can\'t combine two TransportInfos");

        throw $r6;

     label2:
        $r3 = r1.<android.net.NetworkCapabilities: android.net.TransportInfo mTransportInfo>;

        virtualinvoke r0.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setTransportInfo(android.net.TransportInfo)>($r3);

        return;
    }

    private void combineTransportTypes(android.net.NetworkCapabilities)
    {
        android.net.NetworkCapabilities r0, r1;
        long $l0, $l1, $l2;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: android.net.NetworkCapabilities;

        $l1 = r0.<android.net.NetworkCapabilities: long mTransportTypes>;

        $l0 = r1.<android.net.NetworkCapabilities: long mTransportTypes>;

        $l2 = $l1 | $l0;

        r0.<android.net.NetworkCapabilities: long mTransportTypes> = $l2;

        return;
    }

    private void combineUids(android.net.NetworkCapabilities)
    {
        android.net.NetworkCapabilities r0, r2;
        android.util.ArraySet r1, r3;

        r0 := @this: android.net.NetworkCapabilities;

        r2 := @parameter0: android.net.NetworkCapabilities;

        r1 = r2.<android.net.NetworkCapabilities: android.util.ArraySet mUids>;

        if r1 == null goto label2;

        r3 = r0.<android.net.NetworkCapabilities: android.util.ArraySet mUids>;

        if r3 != null goto label1;

        goto label2;

     label1:
        virtualinvoke r3.<android.util.ArraySet: void addAll(android.util.ArraySet)>(r1);

        return;

     label2:
        r0.<android.net.NetworkCapabilities: android.util.ArraySet mUids> = null;

        return;
    }

    private boolean equalsLinkBandwidths(android.net.NetworkCapabilities)
    {
        android.net.NetworkCapabilities r0, r1;
        int $i0, $i1, $i2, $i3;
        boolean z0;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: android.net.NetworkCapabilities;

        $i1 = r0.<android.net.NetworkCapabilities: int mLinkUpBandwidthKbps>;

        $i0 = r1.<android.net.NetworkCapabilities: int mLinkUpBandwidthKbps>;

        if $i1 != $i0 goto label1;

        $i3 = r0.<android.net.NetworkCapabilities: int mLinkDownBandwidthKbps>;

        $i2 = r1.<android.net.NetworkCapabilities: int mLinkDownBandwidthKbps>;

        if $i3 != $i2 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean equalsNetCapabilitiesRequestable(android.net.NetworkCapabilities)
    {
        android.net.NetworkCapabilities r0, r1;
        long $l0, $l1, $l2, $l3, $l5, $l6, $l7, $l8;
        byte $b4, $b9;
        boolean z0;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: android.net.NetworkCapabilities;

        $l0 = r0.<android.net.NetworkCapabilities: long mNetworkCapabilities>;

        $l3 = $l0 & -54460417L;

        $l1 = r1.<android.net.NetworkCapabilities: long mNetworkCapabilities>;

        $l2 = $l1 & -54460417L;

        $b4 = $l3 cmp $l2;

        if $b4 != 0 goto label1;

        $l5 = r0.<android.net.NetworkCapabilities: long mUnwantedNetworkCapabilities>;

        $l8 = $l5 & -54460417L;

        $l6 = r1.<android.net.NetworkCapabilities: long mUnwantedNetworkCapabilities>;

        $l7 = -54460417L & $l6;

        $b9 = $l8 cmp $l7;

        if $b9 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean equalsPrivateDnsBroken(android.net.NetworkCapabilities)
    {
        android.net.NetworkCapabilities r0, r1;
        boolean $z0, $z1, z2;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: android.net.NetworkCapabilities;

        $z1 = r0.<android.net.NetworkCapabilities: boolean mPrivateDnsBroken>;

        $z0 = r1.<android.net.NetworkCapabilities: boolean mPrivateDnsBroken>;

        if $z1 != $z0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    private boolean equalsRequestor(android.net.NetworkCapabilities)
    {
        android.net.NetworkCapabilities r0, r1;
        int $i0, $i1;
        java.lang.String $r2, $r3;
        boolean $z0, z1;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: android.net.NetworkCapabilities;

        $i1 = r0.<android.net.NetworkCapabilities: int mRequestorUid>;

        $i0 = r1.<android.net.NetworkCapabilities: int mRequestorUid>;

        if $i1 != $i0 goto label1;

        $r3 = r0.<android.net.NetworkCapabilities: java.lang.String mRequestorPackageName>;

        $r2 = r1.<android.net.NetworkCapabilities: java.lang.String mRequestorPackageName>;

        $z0 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r3, $r2);

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    private boolean equalsSignalStrength(android.net.NetworkCapabilities)
    {
        android.net.NetworkCapabilities r0, r1;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: android.net.NetworkCapabilities;

        $i1 = r0.<android.net.NetworkCapabilities: int mSignalStrength>;

        $i0 = r1.<android.net.NetworkCapabilities: int mSignalStrength>;

        if $i1 != $i0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean equalsSpecifier(android.net.NetworkCapabilities)
    {
        android.net.NetworkCapabilities r0, r1;
        android.net.NetworkSpecifier $r2, $r3;
        boolean $z0;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: android.net.NetworkCapabilities;

        $r3 = r0.<android.net.NetworkCapabilities: android.net.NetworkSpecifier mNetworkSpecifier>;

        $r2 = r1.<android.net.NetworkCapabilities: android.net.NetworkSpecifier mNetworkSpecifier>;

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r3, $r2);

        return $z0;
    }

    private boolean equalsTransportInfo(android.net.NetworkCapabilities)
    {
        android.net.NetworkCapabilities r0, r1;
        android.net.TransportInfo $r2, $r3;
        boolean $z0;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: android.net.NetworkCapabilities;

        $r3 = r0.<android.net.NetworkCapabilities: android.net.TransportInfo mTransportInfo>;

        $r2 = r1.<android.net.NetworkCapabilities: android.net.TransportInfo mTransportInfo>;

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r3, $r2);

        return $z0;
    }

    private static boolean isValidCapability(int)
    {
        int i0;
        boolean z0;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        if i0 > 25 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static boolean isValidTransport(int)
    {
        int i0;
        boolean z0;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        if i0 > 7 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static int maxBandwidth(int, int)
    {
        int i0, i1, $i2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>(i0, i1);

        return $i2;
    }

    public static int minBandwidth(int, int)
    {
        int i0, i1, $i2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 != 0 goto label1;

        return i1;

     label1:
        if i1 != 0 goto label2;

        return i0;

     label2:
        $i2 = staticinvoke <java.lang.Math: int min(int,int)>(i0, i1);

        return $i2;
    }

    private boolean satisfiedByLinkBandwidths(android.net.NetworkCapabilities)
    {
        android.net.NetworkCapabilities r0, r1;
        int $i0, $i1, $i2, $i3;
        boolean z0;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: android.net.NetworkCapabilities;

        $i1 = r0.<android.net.NetworkCapabilities: int mLinkUpBandwidthKbps>;

        $i0 = r1.<android.net.NetworkCapabilities: int mLinkUpBandwidthKbps>;

        if $i1 > $i0 goto label1;

        $i3 = r0.<android.net.NetworkCapabilities: int mLinkDownBandwidthKbps>;

        $i2 = r1.<android.net.NetworkCapabilities: int mLinkDownBandwidthKbps>;

        if $i3 > $i2 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean satisfiedByNetCapabilities(android.net.NetworkCapabilities, boolean)
    {
        android.net.NetworkCapabilities r0, r1;
        long l0, l1, l2, $l3, $l5, l7, l8;
        byte $b4, $b6;
        boolean z0, z1;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: android.net.NetworkCapabilities;

        z0 := @parameter1: boolean;

        l0 = r0.<android.net.NetworkCapabilities: long mNetworkCapabilities>;

        l1 = r0.<android.net.NetworkCapabilities: long mUnwantedNetworkCapabilities>;

        l2 = r1.<android.net.NetworkCapabilities: long mNetworkCapabilities>;

        l7 = l0;

        l8 = l1;

        if z0 == 0 goto label1;

        l7 = l0 & -54476801L;

        l8 = l1 & -54476801L;

     label1:
        $l3 = l2 & l7;

        $b4 = $l3 cmp l7;

        if $b4 != 0 goto label2;

        $l5 = l8 & l2;

        $b6 = $l5 cmp 0L;

        if $b6 != 0 goto label2;

        z1 = 1;

        goto label3;

     label2:
        z1 = 0;

     label3:
        return z1;
    }

    private boolean satisfiedByNetworkCapabilities(android.net.NetworkCapabilities, boolean)
    {
        android.net.NetworkCapabilities r0, r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, z9;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: android.net.NetworkCapabilities;

        z8 := @parameter1: boolean;

        if r1 == null goto label6;

        $z0 = specialinvoke r0.<android.net.NetworkCapabilities: boolean satisfiedByNetCapabilities(android.net.NetworkCapabilities,boolean)>(r1, z8);

        if $z0 == 0 goto label6;

        $z1 = specialinvoke r0.<android.net.NetworkCapabilities: boolean satisfiedByTransportTypes(android.net.NetworkCapabilities)>(r1);

        if $z1 == 0 goto label6;

        if z8 != 0 goto label1;

        $z7 = specialinvoke r0.<android.net.NetworkCapabilities: boolean satisfiedByLinkBandwidths(android.net.NetworkCapabilities)>(r1);

        if $z7 == 0 goto label6;

     label1:
        $z2 = specialinvoke r0.<android.net.NetworkCapabilities: boolean satisfiedBySpecifier(android.net.NetworkCapabilities)>(r1);

        if $z2 == 0 goto label6;

        if z8 != 0 goto label2;

        $z6 = specialinvoke r0.<android.net.NetworkCapabilities: boolean satisfiedBySignalStrength(android.net.NetworkCapabilities)>(r1);

        if $z6 == 0 goto label6;

     label2:
        if z8 != 0 goto label3;

        $z5 = virtualinvoke r0.<android.net.NetworkCapabilities: boolean satisfiedByUids(android.net.NetworkCapabilities)>(r1);

        if $z5 == 0 goto label6;

     label3:
        if z8 != 0 goto label4;

        $z4 = virtualinvoke r0.<android.net.NetworkCapabilities: boolean satisfiedBySSID(android.net.NetworkCapabilities)>(r1);

        if $z4 == 0 goto label6;

     label4:
        if z8 != 0 goto label5;

        $z3 = specialinvoke r0.<android.net.NetworkCapabilities: boolean satisfiedByRequestor(android.net.NetworkCapabilities)>(r1);

        if $z3 == 0 goto label6;

     label5:
        z9 = 1;

        goto label7;

     label6:
        z9 = 0;

     label7:
        return z9;
    }

    private boolean satisfiedByRequestor(android.net.NetworkCapabilities)
    {
        android.net.NetworkCapabilities r0, r2;
        int i0, i1;
        java.lang.String r1, r3;
        boolean $z0;

        r0 := @this: android.net.NetworkCapabilities;

        r2 := @parameter0: android.net.NetworkCapabilities;

        i0 = r0.<android.net.NetworkCapabilities: int mRequestorUid>;

        if i0 == -1 goto label5;

        i1 = r2.<android.net.NetworkCapabilities: int mRequestorUid>;

        if i1 != -1 goto label1;

        goto label5;

     label1:
        if i0 == i1 goto label2;

        return 0;

     label2:
        r1 = r2.<android.net.NetworkCapabilities: java.lang.String mRequestorPackageName>;

        if r1 == null goto label4;

        r3 = r0.<android.net.NetworkCapabilities: java.lang.String mRequestorPackageName>;

        if r3 != null goto label3;

        goto label4;

     label3:
        $z0 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>(r3, r1);

        return $z0;

     label4:
        return 1;

     label5:
        return 1;
    }

    private boolean satisfiedBySignalStrength(android.net.NetworkCapabilities)
    {
        android.net.NetworkCapabilities r0, r1;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: android.net.NetworkCapabilities;

        $i1 = r0.<android.net.NetworkCapabilities: int mSignalStrength>;

        $i0 = r1.<android.net.NetworkCapabilities: int mSignalStrength>;

        if $i1 > $i0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean satisfiedBySpecifier(android.net.NetworkCapabilities)
    {
        android.net.NetworkCapabilities r0, r1;
        android.net.NetworkSpecifier r2, $r3, $r4;
        boolean $z0, $z1, z2;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: android.net.NetworkCapabilities;

        r2 = r0.<android.net.NetworkCapabilities: android.net.NetworkSpecifier mNetworkSpecifier>;

        if r2 == null goto label2;

        $r3 = r1.<android.net.NetworkCapabilities: android.net.NetworkSpecifier mNetworkSpecifier>;

        $z0 = virtualinvoke r2.<android.net.NetworkSpecifier: boolean canBeSatisfiedBy(android.net.NetworkSpecifier)>($r3);

        if $z0 != 0 goto label2;

        $r4 = r1.<android.net.NetworkCapabilities: android.net.NetworkSpecifier mNetworkSpecifier>;

        $z1 = $r4 instanceof android.net.MatchAllNetworkSpecifier;

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    private boolean satisfiedByTransportTypes(android.net.NetworkCapabilities)
    {
        android.net.NetworkCapabilities r0, r1;
        long l0, $l2, $l3;
        byte $b1, $b4;
        boolean z0;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: android.net.NetworkCapabilities;

        l0 = r0.<android.net.NetworkCapabilities: long mTransportTypes>;

        $b1 = l0 cmp 0L;

        if $b1 == 0 goto label2;

        $l2 = r1.<android.net.NetworkCapabilities: long mTransportTypes>;

        $l3 = l0 & $l2;

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    public static java.lang.String transportNameOf(int)
    {
        int i0;
        boolean $z0;
        java.lang.String[] $r0;
        java.lang.String $r1;

        i0 := @parameter0: int;

        $z0 = staticinvoke <android.net.NetworkCapabilities: boolean isValidTransport(int)>(i0);

        if $z0 != 0 goto label1;

        return "UNKNOWN";

     label1:
        $r0 = <android.net.NetworkCapabilities: java.lang.String[] TRANSPORT_NAMES>;

        $r1 = $r0[i0];

        return $r1;
    }

    public static java.lang.String transportNamesOf(int[])
    {
        int[] r0;
        int i0, $i1, i2;
        java.util.StringJoiner $r2;
        java.lang.String $r3, $r4;

        r0 := @parameter0: int[];

        $r2 = new java.util.StringJoiner;

        specialinvoke $r2.<java.util.StringJoiner: void <init>(java.lang.CharSequence)>("|");

        if r0 == null goto label2;

        i0 = lengthof r0;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $i1 = r0[i2];

        $r4 = staticinvoke <android.net.NetworkCapabilities: java.lang.String transportNameOf(int)>($i1);

        virtualinvoke $r2.<java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>($r4);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r3 = virtualinvoke $r2.<java.util.StringJoiner: java.lang.String toString()>();

        return $r3;
    }

    public android.net.NetworkCapabilities addCapability(int)
    {
        android.net.NetworkCapabilities r0;
        int i0, $i1, $i5;
        long $l2, $l3, $l4, $l6, $l7, $l8;

        r0 := @this: android.net.NetworkCapabilities;

        i0 := @parameter0: int;

        staticinvoke <android.net.NetworkCapabilities: void checkValidCapability(int)>(i0);

        $l3 = r0.<android.net.NetworkCapabilities: long mNetworkCapabilities>;

        $i1 = 1 << i0;

        $l2 = (long) $i1;

        $l4 = $l3 | $l2;

        r0.<android.net.NetworkCapabilities: long mNetworkCapabilities> = $l4;

        $l7 = r0.<android.net.NetworkCapabilities: long mUnwantedNetworkCapabilities>;

        $i5 = 1 << i0;

        $l6 = (long) $i5;

        $l8 = $l7 & $l6;

        r0.<android.net.NetworkCapabilities: long mUnwantedNetworkCapabilities> = $l8;

        return r0;
    }

    public android.net.NetworkCapabilities addTransportType(int)
    {
        android.net.NetworkCapabilities r0;
        int i0, $i1;
        long $l2, $l3, $l4;
        android.net.NetworkSpecifier $r1;

        r0 := @this: android.net.NetworkCapabilities;

        i0 := @parameter0: int;

        staticinvoke <android.net.NetworkCapabilities: void checkValidTransportType(int)>(i0);

        $l3 = r0.<android.net.NetworkCapabilities: long mTransportTypes>;

        $i1 = 1 << i0;

        $l2 = (long) $i1;

        $l4 = $l3 | $l2;

        r0.<android.net.NetworkCapabilities: long mTransportTypes> = $l4;

        $r1 = r0.<android.net.NetworkCapabilities: android.net.NetworkSpecifier mNetworkSpecifier>;

        virtualinvoke r0.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setNetworkSpecifier(android.net.NetworkSpecifier)>($r1);

        return r0;
    }

    public void addUnwantedCapability(int)
    {
        android.net.NetworkCapabilities r0;
        int i0, $i1, $i5;
        long $l2, $l3, $l4, $l6, $l7, $l8;

        r0 := @this: android.net.NetworkCapabilities;

        i0 := @parameter0: int;

        staticinvoke <android.net.NetworkCapabilities: void checkValidCapability(int)>(i0);

        $l3 = r0.<android.net.NetworkCapabilities: long mUnwantedNetworkCapabilities>;

        $i1 = 1 << i0;

        $l2 = (long) $i1;

        $l4 = $l3 | $l2;

        r0.<android.net.NetworkCapabilities: long mUnwantedNetworkCapabilities> = $l4;

        $l7 = r0.<android.net.NetworkCapabilities: long mNetworkCapabilities>;

        $i5 = 1 << i0;

        $l6 = (long) $i5;

        $l8 = $l7 & $l6;

        r0.<android.net.NetworkCapabilities: long mNetworkCapabilities> = $l8;

        return;
    }

    public boolean appliesToUid(int)
    {
        android.net.NetworkCapabilities r0;
        int i0;
        boolean $z0, $z1;
        java.lang.Object $r1;
        android.net.UidRange $r2;
        android.util.ArraySet r3;
        java.util.Iterator r4;

        r0 := @this: android.net.NetworkCapabilities;

        i0 := @parameter0: int;

        r3 = r0.<android.net.NetworkCapabilities: android.util.ArraySet mUids>;

        if r3 != null goto label1;

        return 1;

     label1:
        r4 = virtualinvoke r3.<android.util.ArraySet: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r1 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r2 = (android.net.UidRange) $r1;

        $z1 = virtualinvoke $r2.<android.net.UidRange: boolean contains(int)>(i0);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        goto label2;

     label4:
        return 0;
    }

    public boolean appliesToUidRange(android.net.UidRange)
    {
        android.net.NetworkCapabilities r0;
        android.net.UidRange r1, $r3;
        boolean $z0, $z1;
        java.lang.Object $r2;
        android.util.ArraySet r4;
        java.util.Iterator r5;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: android.net.UidRange;

        r4 = r0.<android.net.NetworkCapabilities: android.util.ArraySet mUids>;

        if r4 != null goto label1;

        return 1;

     label1:
        r5 = virtualinvoke r4.<android.util.ArraySet: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (android.net.UidRange) $r2;

        $z1 = virtualinvoke $r3.<android.net.UidRange: boolean containsRange(android.net.UidRange)>(r1);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        goto label2;

     label4:
        return 0;
    }

    public void clearAll()
    {
        android.net.NetworkCapabilities r0;
        int[] $r1;

        r0 := @this: android.net.NetworkCapabilities;

        r0.<android.net.NetworkCapabilities: long mUnwantedNetworkCapabilities> = 0L;

        r0.<android.net.NetworkCapabilities: long mTransportTypes> = 0L;

        r0.<android.net.NetworkCapabilities: long mNetworkCapabilities> = 0L;

        r0.<android.net.NetworkCapabilities: int mLinkDownBandwidthKbps> = 0;

        r0.<android.net.NetworkCapabilities: int mLinkUpBandwidthKbps> = 0;

        r0.<android.net.NetworkCapabilities: android.net.NetworkSpecifier mNetworkSpecifier> = null;

        r0.<android.net.NetworkCapabilities: android.net.TransportInfo mTransportInfo> = null;

        r0.<android.net.NetworkCapabilities: int mSignalStrength> = -2147483648;

        r0.<android.net.NetworkCapabilities: android.util.ArraySet mUids> = null;

        $r1 = newarray (int)[0];

        r0.<android.net.NetworkCapabilities: int[] mAdministratorUids> = $r1;

        r0.<android.net.NetworkCapabilities: int mOwnerUid> = -1;

        r0.<android.net.NetworkCapabilities: java.lang.String mSSID> = null;

        r0.<android.net.NetworkCapabilities: boolean mPrivateDnsBroken> = 0;

        r0.<android.net.NetworkCapabilities: int mRequestorUid> = -1;

        r0.<android.net.NetworkCapabilities: java.lang.String mRequestorPackageName> = null;

        return;
    }

    public void combineCapabilities(android.net.NetworkCapabilities)
    {
        android.net.NetworkCapabilities r0, r1;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: android.net.NetworkCapabilities;

        specialinvoke r0.<android.net.NetworkCapabilities: void combineNetCapabilities(android.net.NetworkCapabilities)>(r1);

        specialinvoke r0.<android.net.NetworkCapabilities: void combineTransportTypes(android.net.NetworkCapabilities)>(r1);

        specialinvoke r0.<android.net.NetworkCapabilities: void combineLinkBandwidths(android.net.NetworkCapabilities)>(r1);

        specialinvoke r0.<android.net.NetworkCapabilities: void combineSpecifiers(android.net.NetworkCapabilities)>(r1);

        specialinvoke r0.<android.net.NetworkCapabilities: void combineTransportInfos(android.net.NetworkCapabilities)>(r1);

        specialinvoke r0.<android.net.NetworkCapabilities: void combineSignalStrength(android.net.NetworkCapabilities)>(r1);

        specialinvoke r0.<android.net.NetworkCapabilities: void combineUids(android.net.NetworkCapabilities)>(r1);

        specialinvoke r0.<android.net.NetworkCapabilities: void combineSSIDs(android.net.NetworkCapabilities)>(r1);

        specialinvoke r0.<android.net.NetworkCapabilities: void combineRequestor(android.net.NetworkCapabilities)>(r1);

        specialinvoke r0.<android.net.NetworkCapabilities: void combineAdministratorUids(android.net.NetworkCapabilities)>(r1);

        return;
    }

    public boolean deduceRestrictedCapability()
    {
        android.net.NetworkCapabilities r0;
        long l0, $l1, $l3, $l4, $l6, $l7;
        byte $b2, $b5, $b8;
        boolean z1, z2, z3, z4;

        r0 := @this: android.net.NetworkCapabilities;

        l0 = r0.<android.net.NetworkCapabilities: long mNetworkCapabilities>;

        $l1 = l0 & 4194304L;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        $l3 = r0.<android.net.NetworkCapabilities: long mNetworkCapabilities>;

        $l4 = $l3 & 4163L;

        $b5 = $l4 cmp 0L;

        if $b5 == 0 goto label3;

        z2 = 1;

        goto label4;

     label3:
        z2 = 0;

     label4:
        $l6 = r0.<android.net.NetworkCapabilities: long mNetworkCapabilities>;

        $l7 = $l6 & 8390588L;

        $b8 = $l7 cmp 0L;

        if $b8 == 0 goto label5;

        z3 = 1;

        goto label6;

     label5:
        z3 = 0;

     label6:
        z4 = 1;

        if z1 != 0 goto label8;

        if z3 == 0 goto label7;

        if z2 != 0 goto label7;

        z4 = 1;

        goto label8;

     label7:
        z4 = 0;

     label8:
        return z4;
    }

    public int describeContents()
    {
        android.net.NetworkCapabilities r0;

        r0 := @this: android.net.NetworkCapabilities;

        return 0;
    }

    public java.lang.String describeFirstNonRequestableCapability()
    {
        android.net.NetworkCapabilities r0;
        long l0, $l1, $l2, $l3;
        byte $b4;
        int $i5, $i6, $i7;
        boolean $z0, $z1;
        int[] $r1;
        java.lang.String $r2;

        r0 := @this: android.net.NetworkCapabilities;

        $l2 = r0.<android.net.NetworkCapabilities: long mNetworkCapabilities>;

        $l1 = r0.<android.net.NetworkCapabilities: long mUnwantedNetworkCapabilities>;

        $l3 = $l2 | $l1;

        l0 = $l3 & 54460416L;

        $b4 = l0 cmp 0L;

        if $b4 == 0 goto label1;

        $r1 = staticinvoke <com.android.internal.util.BitUtils: int[] unpackBits(long)>(l0);

        $i7 = $r1[0];

        $r2 = staticinvoke <android.net.NetworkCapabilities: java.lang.String capabilityNameOf(int)>($i7);

        return $r2;

     label1:
        $i5 = r0.<android.net.NetworkCapabilities: int mLinkUpBandwidthKbps>;

        if $i5 != 0 goto label5;

        $i6 = r0.<android.net.NetworkCapabilities: int mLinkDownBandwidthKbps>;

        if $i6 == 0 goto label2;

        goto label5;

     label2:
        $z0 = virtualinvoke r0.<android.net.NetworkCapabilities: boolean hasSignalStrength()>();

        if $z0 == 0 goto label3;

        return "signalStrength";

     label3:
        $z1 = virtualinvoke r0.<android.net.NetworkCapabilities: boolean isPrivateDnsBroken()>();

        if $z1 == 0 goto label4;

        return "privateDnsBroken";

     label4:
        return null;

     label5:
        return "link bandwidth";
    }

    public java.lang.String describeImmutableDifferences(android.net.NetworkCapabilities)
    {
        android.net.NetworkCapabilities r0, r1;
        long l0, l1, $l2, $l3;
        java.util.StringJoiner $r3;
        byte $b4;
        boolean $z0, $z1;
        java.lang.String $r4, $r7, $r9, $r10, $r15, $r19, $r21, $r22;
        java.lang.Object[] $r5, $r12, $r17;
        int[] $r6, $r8, $r18, $r20;
        android.net.NetworkSpecifier $r13, $r14;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: android.net.NetworkCapabilities;

        if r1 != null goto label1;

        return "other NetworkCapabilities was null";

     label1:
        $r3 = new java.util.StringJoiner;

        specialinvoke $r3.<java.util.StringJoiner: void <init>(java.lang.CharSequence)>(", ");

        $l2 = r0.<android.net.NetworkCapabilities: long mNetworkCapabilities>;

        l0 = $l2 & -54478849L;

        $l3 = r1.<android.net.NetworkCapabilities: long mNetworkCapabilities>;

        l1 = -54478849L & $l3;

        $b4 = l0 cmp l1;

        if $b4 == 0 goto label2;

        $r17 = newarray (java.lang.Object)[2];

        $r18 = staticinvoke <com.android.internal.util.BitUtils: int[] unpackBits(long)>(l0);

        $r19 = staticinvoke <android.net.NetworkCapabilities: java.lang.String capabilityNamesOf(int[])>($r18);

        $r17[0] = $r19;

        $r20 = staticinvoke <com.android.internal.util.BitUtils: int[] unpackBits(long)>(l1);

        $r21 = staticinvoke <android.net.NetworkCapabilities: java.lang.String capabilityNamesOf(int[])>($r20);

        $r17[1] = $r21;

        $r22 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("immutable capabilities changed: %s -> %s", $r17);

        virtualinvoke $r3.<java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>($r22);

     label2:
        $z0 = specialinvoke r0.<android.net.NetworkCapabilities: boolean equalsSpecifier(android.net.NetworkCapabilities)>(r1);

        if $z0 != 0 goto label3;

        $r12 = newarray (java.lang.Object)[2];

        $r13 = virtualinvoke r0.<android.net.NetworkCapabilities: android.net.NetworkSpecifier getNetworkSpecifier()>();

        $r12[0] = $r13;

        $r14 = virtualinvoke r1.<android.net.NetworkCapabilities: android.net.NetworkSpecifier getNetworkSpecifier()>();

        $r12[1] = $r14;

        $r15 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("specifier changed: %s -> %s", $r12);

        virtualinvoke $r3.<java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>($r15);

     label3:
        $z1 = virtualinvoke r0.<android.net.NetworkCapabilities: boolean equalsTransportTypes(android.net.NetworkCapabilities)>(r1);

        if $z1 != 0 goto label4;

        $r5 = newarray (java.lang.Object)[2];

        $r6 = virtualinvoke r0.<android.net.NetworkCapabilities: int[] getTransportTypes()>();

        $r7 = staticinvoke <android.net.NetworkCapabilities: java.lang.String transportNamesOf(int[])>($r6);

        $r5[0] = $r7;

        $r8 = virtualinvoke r1.<android.net.NetworkCapabilities: int[] getTransportTypes()>();

        $r9 = staticinvoke <android.net.NetworkCapabilities: java.lang.String transportNamesOf(int[])>($r8);

        $r5[1] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("transports changed: %s -> %s", $r5);

        virtualinvoke $r3.<java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>($r10);

     label4:
        $r4 = virtualinvoke $r3.<java.util.StringJoiner: java.lang.String toString()>();

        return $r4;
    }

    public void dumpDebug(android.util.proto.ProtoOutputStream, long)
    {
        android.net.NetworkCapabilities r0;
        android.util.proto.ProtoOutputStream r1;
        int $i1, $i2, $i3, $i4, $i5, i8, i9, i10, i11;
        boolean $z0;
        java.lang.String $r2;
        long l6, l7;
        int[] r3, r4;
        android.net.NetworkSpecifier r5;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: android.util.proto.ProtoOutputStream;

        l6 := @parameter1: long;

        l7 = virtualinvoke r1.<android.util.proto.ProtoOutputStream: long start(long)>(l6);

        r3 = virtualinvoke r0.<android.net.NetworkCapabilities: int[] getTransportTypes()>();

        i8 = lengthof r3;

        i9 = 0;

     label1:
        if i9 >= i8 goto label2;

        $i5 = r3[i9];

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(2259152797697L, $i5);

        i9 = i9 + 1;

        goto label1;

     label2:
        r4 = virtualinvoke r0.<android.net.NetworkCapabilities: int[] getCapabilities()>();

        i10 = lengthof r4;

        i11 = 0;

     label3:
        if i11 >= i10 goto label4;

        $i4 = r4[i11];

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(2259152797698L, $i4);

        i11 = i11 + 1;

        goto label3;

     label4:
        $i1 = r0.<android.net.NetworkCapabilities: int mLinkUpBandwidthKbps>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464259L, $i1);

        $i2 = r0.<android.net.NetworkCapabilities: int mLinkDownBandwidthKbps>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464260L, $i2);

        r5 = r0.<android.net.NetworkCapabilities: android.net.NetworkSpecifier mNetworkSpecifier>;

        if r5 == null goto label5;

        $r2 = virtualinvoke r5.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,java.lang.String)>(1138166333445L, $r2);

     label5:
        $z0 = virtualinvoke r0.<android.net.NetworkCapabilities: boolean hasSignalStrength()>();

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366150L, $z0);

        $i3 = r0.<android.net.NetworkCapabilities: int mSignalStrength>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1172526071815L, $i3);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void end(long)>(l7);

        return;
    }

    public boolean equalRequestableCapabilities(android.net.NetworkCapabilities)
    {
        android.net.NetworkCapabilities r0, r1;
        boolean $z0, $z1, $z2, z3;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: android.net.NetworkCapabilities;

        z3 = 0;

        if r1 != null goto label1;

        return 0;

     label1:
        $z0 = specialinvoke r0.<android.net.NetworkCapabilities: boolean equalsNetCapabilitiesRequestable(android.net.NetworkCapabilities)>(r1);

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r0.<android.net.NetworkCapabilities: boolean equalsTransportTypes(android.net.NetworkCapabilities)>(r1);

        if $z1 == 0 goto label2;

        $z2 = specialinvoke r0.<android.net.NetworkCapabilities: boolean equalsSpecifier(android.net.NetworkCapabilities)>(r1);

        if $z2 == 0 goto label2;

        z3 = 1;

        goto label2;

     label2:
        return z3;
    }

    public boolean equals(java.lang.Object)
    {
        android.net.NetworkCapabilities r0, r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, z12;
        java.lang.Object r1;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: java.lang.Object;

        z12 = 0;

        if r1 == null goto label3;

        $z0 = r1 instanceof android.net.NetworkCapabilities;

        if $z0 != 0 goto label1;

        goto label3;

     label1:
        r2 = (android.net.NetworkCapabilities) r1;

        $z1 = virtualinvoke r0.<android.net.NetworkCapabilities: boolean equalsNetCapabilities(android.net.NetworkCapabilities)>(r2);

        if $z1 == 0 goto label2;

        $z2 = virtualinvoke r0.<android.net.NetworkCapabilities: boolean equalsTransportTypes(android.net.NetworkCapabilities)>(r2);

        if $z2 == 0 goto label2;

        $z3 = specialinvoke r0.<android.net.NetworkCapabilities: boolean equalsLinkBandwidths(android.net.NetworkCapabilities)>(r2);

        if $z3 == 0 goto label2;

        $z4 = specialinvoke r0.<android.net.NetworkCapabilities: boolean equalsSignalStrength(android.net.NetworkCapabilities)>(r2);

        if $z4 == 0 goto label2;

        $z5 = specialinvoke r0.<android.net.NetworkCapabilities: boolean equalsSpecifier(android.net.NetworkCapabilities)>(r2);

        if $z5 == 0 goto label2;

        $z6 = specialinvoke r0.<android.net.NetworkCapabilities: boolean equalsTransportInfo(android.net.NetworkCapabilities)>(r2);

        if $z6 == 0 goto label2;

        $z7 = virtualinvoke r0.<android.net.NetworkCapabilities: boolean equalsUids(android.net.NetworkCapabilities)>(r2);

        if $z7 == 0 goto label2;

        $z8 = virtualinvoke r0.<android.net.NetworkCapabilities: boolean equalsSSID(android.net.NetworkCapabilities)>(r2);

        if $z8 == 0 goto label2;

        $z9 = specialinvoke r0.<android.net.NetworkCapabilities: boolean equalsPrivateDnsBroken(android.net.NetworkCapabilities)>(r2);

        if $z9 == 0 goto label2;

        $z10 = specialinvoke r0.<android.net.NetworkCapabilities: boolean equalsRequestor(android.net.NetworkCapabilities)>(r2);

        if $z10 == 0 goto label2;

        $z11 = virtualinvoke r0.<android.net.NetworkCapabilities: boolean equalsAdministratorUids(android.net.NetworkCapabilities)>(r2);

        if $z11 == 0 goto label2;

        z12 = 1;

        goto label2;

     label2:
        return z12;

     label3:
        return 0;
    }

    public boolean equalsAdministratorUids(android.net.NetworkCapabilities)
    {
        android.net.NetworkCapabilities r0, r1;
        int[] $r2, $r3;
        boolean $z0;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: android.net.NetworkCapabilities;

        $r3 = r0.<android.net.NetworkCapabilities: int[] mAdministratorUids>;

        $r2 = r1.<android.net.NetworkCapabilities: int[] mAdministratorUids>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r3, $r2);

        return $z0;
    }

    public boolean equalsNetCapabilities(android.net.NetworkCapabilities)
    {
        android.net.NetworkCapabilities r0, r1;
        long $l0, $l1, $l3, $l4;
        byte $b2, $b5;
        boolean z0;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: android.net.NetworkCapabilities;

        $l1 = r1.<android.net.NetworkCapabilities: long mNetworkCapabilities>;

        $l0 = r0.<android.net.NetworkCapabilities: long mNetworkCapabilities>;

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label1;

        $l4 = r1.<android.net.NetworkCapabilities: long mUnwantedNetworkCapabilities>;

        $l3 = r0.<android.net.NetworkCapabilities: long mUnwantedNetworkCapabilities>;

        $b5 = $l4 cmp $l3;

        if $b5 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean equalsSSID(android.net.NetworkCapabilities)
    {
        android.net.NetworkCapabilities r0, r1;
        java.lang.String $r2, $r3;
        boolean $z0;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: android.net.NetworkCapabilities;

        $r3 = r0.<android.net.NetworkCapabilities: java.lang.String mSSID>;

        $r2 = r1.<android.net.NetworkCapabilities: java.lang.String mSSID>;

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r3, $r2);

        return $z0;
    }

    public boolean equalsTransportTypes(android.net.NetworkCapabilities)
    {
        android.net.NetworkCapabilities r0, r1;
        long $l0, $l1;
        byte $b2;
        boolean z0;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: android.net.NetworkCapabilities;

        $l1 = r1.<android.net.NetworkCapabilities: long mTransportTypes>;

        $l0 = r0.<android.net.NetworkCapabilities: long mTransportTypes>;

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean equalsUids(android.net.NetworkCapabilities)
    {
        android.net.NetworkCapabilities r0, r7;
        android.net.UidRange r1;
        android.util.ArraySet $r2, $r3, $r4, $r6, r8;
        boolean $z0, $z1, $z2, z4;
        java.lang.Object $r5;
        java.util.Iterator r10;

        r0 := @this: android.net.NetworkCapabilities;

        r7 := @parameter0: android.net.NetworkCapabilities;

        r8 = r7.<android.net.NetworkCapabilities: android.util.ArraySet mUids>;

        z4 = 0;

        if r8 != null goto label2;

        $r6 = r0.<android.net.NetworkCapabilities: android.util.ArraySet mUids>;

        if $r6 != null goto label1;

        z4 = 1;

     label1:
        return z4;

     label2:
        $r2 = r0.<android.net.NetworkCapabilities: android.util.ArraySet mUids>;

        if $r2 != null goto label3;

        return 0;

     label3:
        $r3 = new android.util.ArraySet;

        $r4 = r0.<android.net.NetworkCapabilities: android.util.ArraySet mUids>;

        specialinvoke $r3.<android.util.ArraySet: void <init>(android.util.ArraySet)>($r4);

        r10 = interfaceinvoke r8.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r5 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r1 = (android.net.UidRange) $r5;

        $z2 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z2 != 0 goto label5;

        return 0;

     label5:
        interfaceinvoke $r3.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        goto label4;

     label6:
        $z1 = interfaceinvoke $r3.<java.util.Set: boolean isEmpty()>();

        return $z1;
    }

    public int[] getAdministratorUids()
    {
        android.net.NetworkCapabilities r0;
        int[] r1, $r2;
        int $i0;

        r0 := @this: android.net.NetworkCapabilities;

        r1 = r0.<android.net.NetworkCapabilities: int[] mAdministratorUids>;

        $i0 = lengthof r1;

        $r2 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>(r1, $i0);

        return $r2;
    }

    public int[] getCapabilities()
    {
        android.net.NetworkCapabilities r0;
        long $l0;
        int[] $r1;

        r0 := @this: android.net.NetworkCapabilities;

        $l0 = r0.<android.net.NetworkCapabilities: long mNetworkCapabilities>;

        $r1 = staticinvoke <com.android.internal.util.BitUtils: int[] unpackBits(long)>($l0);

        return $r1;
    }

    public int getLinkDownstreamBandwidthKbps()
    {
        android.net.NetworkCapabilities r0;
        int $i0;

        r0 := @this: android.net.NetworkCapabilities;

        $i0 = r0.<android.net.NetworkCapabilities: int mLinkDownBandwidthKbps>;

        return $i0;
    }

    public int getLinkUpstreamBandwidthKbps()
    {
        android.net.NetworkCapabilities r0;
        int $i0;

        r0 := @this: android.net.NetworkCapabilities;

        $i0 = r0.<android.net.NetworkCapabilities: int mLinkUpBandwidthKbps>;

        return $i0;
    }

    public android.net.NetworkSpecifier getNetworkSpecifier()
    {
        android.net.NetworkCapabilities r0;
        android.net.NetworkSpecifier $r1;

        r0 := @this: android.net.NetworkCapabilities;

        $r1 = r0.<android.net.NetworkCapabilities: android.net.NetworkSpecifier mNetworkSpecifier>;

        return $r1;
    }

    public int getOwnerUid()
    {
        android.net.NetworkCapabilities r0;
        int $i0;

        r0 := @this: android.net.NetworkCapabilities;

        $i0 = r0.<android.net.NetworkCapabilities: int mOwnerUid>;

        return $i0;
    }

    public java.lang.String getRequestorPackageName()
    {
        android.net.NetworkCapabilities r0;
        java.lang.String $r1;

        r0 := @this: android.net.NetworkCapabilities;

        $r1 = r0.<android.net.NetworkCapabilities: java.lang.String mRequestorPackageName>;

        return $r1;
    }

    public int getRequestorUid()
    {
        android.net.NetworkCapabilities r0;
        int $i0;

        r0 := @this: android.net.NetworkCapabilities;

        $i0 = r0.<android.net.NetworkCapabilities: int mRequestorUid>;

        return $i0;
    }

    public int getSignalStrength()
    {
        android.net.NetworkCapabilities r0;
        int $i0;

        r0 := @this: android.net.NetworkCapabilities;

        $i0 = r0.<android.net.NetworkCapabilities: int mSignalStrength>;

        return $i0;
    }

    public java.lang.String getSsid()
    {
        android.net.NetworkCapabilities r0;
        java.lang.String $r1;

        r0 := @this: android.net.NetworkCapabilities;

        $r1 = r0.<android.net.NetworkCapabilities: java.lang.String mSSID>;

        return $r1;
    }

    public android.net.TransportInfo getTransportInfo()
    {
        android.net.NetworkCapabilities r0;
        android.net.TransportInfo $r1;

        r0 := @this: android.net.NetworkCapabilities;

        $r1 = r0.<android.net.NetworkCapabilities: android.net.TransportInfo mTransportInfo>;

        return $r1;
    }

    public int[] getTransportTypes()
    {
        android.net.NetworkCapabilities r0;
        long $l0;
        int[] $r1;

        r0 := @this: android.net.NetworkCapabilities;

        $l0 = r0.<android.net.NetworkCapabilities: long mTransportTypes>;

        $r1 = staticinvoke <com.android.internal.util.BitUtils: int[] unpackBits(long)>($l0);

        return $r1;
    }

    public java.util.Set getUids()
    {
        android.net.NetworkCapabilities r0;
        android.util.ArraySet $r1, $r2, $r3, r4;

        r0 := @this: android.net.NetworkCapabilities;

        $r1 = r0.<android.net.NetworkCapabilities: android.util.ArraySet mUids>;

        if $r1 != null goto label1;

        r4 = null;

        goto label2;

     label1:
        $r2 = new android.util.ArraySet;

        $r3 = r0.<android.net.NetworkCapabilities: android.util.ArraySet mUids>;

        specialinvoke $r2.<android.util.ArraySet: void <init>(android.util.ArraySet)>($r3);

        r4 = $r2;

     label2:
        return r4;
    }

    public int[] getUnwantedCapabilities()
    {
        android.net.NetworkCapabilities r0;
        long $l0;
        int[] $r1;

        r0 := @this: android.net.NetworkCapabilities;

        $l0 = r0.<android.net.NetworkCapabilities: long mUnwantedNetworkCapabilities>;

        $r1 = staticinvoke <com.android.internal.util.BitUtils: int[] unpackBits(long)>($l0);

        return $r1;
    }

    public boolean hasCapability(int)
    {
        android.net.NetworkCapabilities r0;
        int i0, $i1;
        boolean z0, z1;
        long $l2, $l3, $l4;
        byte $b5;

        r0 := @this: android.net.NetworkCapabilities;

        i0 := @parameter0: int;

        z0 = staticinvoke <android.net.NetworkCapabilities: boolean isValidCapability(int)>(i0);

        z1 = 1;

        if z0 == 0 goto label1;

        $l3 = r0.<android.net.NetworkCapabilities: long mNetworkCapabilities>;

        $i1 = 1 << i0;

        $l2 = (long) $i1;

        $l4 = $l3 & $l2;

        $b5 = $l4 cmp 0L;

        if $b5 == 0 goto label1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public boolean hasConnectivityManagedCapability()
    {
        android.net.NetworkCapabilities r0;
        long $l0, $l1;
        byte $b2;
        boolean z0;

        r0 := @this: android.net.NetworkCapabilities;

        $l0 = r0.<android.net.NetworkCapabilities: long mNetworkCapabilities>;

        $l1 = $l0 & 17498112L;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean hasSignalStrength()
    {
        android.net.NetworkCapabilities r0;
        int $i0;
        boolean z0;

        r0 := @this: android.net.NetworkCapabilities;

        $i0 = r0.<android.net.NetworkCapabilities: int mSignalStrength>;

        if $i0 <= -2147483648 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean hasTransport(int)
    {
        android.net.NetworkCapabilities r0;
        int i0, $i1;
        boolean z0, z1;
        long $l2, $l3, $l4;
        byte $b5;

        r0 := @this: android.net.NetworkCapabilities;

        i0 := @parameter0: int;

        z0 = staticinvoke <android.net.NetworkCapabilities: boolean isValidTransport(int)>(i0);

        z1 = 1;

        if z0 == 0 goto label1;

        $l3 = r0.<android.net.NetworkCapabilities: long mTransportTypes>;

        $i1 = 1 << i0;

        $l2 = (long) $i1;

        $l4 = $l3 & $l2;

        $b5 = $l4 cmp 0L;

        if $b5 == 0 goto label1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public boolean hasUnwantedCapability(int)
    {
        android.net.NetworkCapabilities r0;
        int i0, $i1;
        boolean z0, z1;
        long $l2, $l3, $l4;
        byte $b5;

        r0 := @this: android.net.NetworkCapabilities;

        i0 := @parameter0: int;

        z0 = staticinvoke <android.net.NetworkCapabilities: boolean isValidCapability(int)>(i0);

        z1 = 1;

        if z0 == 0 goto label1;

        $l3 = r0.<android.net.NetworkCapabilities: long mUnwantedNetworkCapabilities>;

        $i1 = 1 << i0;

        $l2 = (long) $i1;

        $l4 = $l3 & $l2;

        $b5 = $l4 cmp 0L;

        if $b5 == 0 goto label1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public int hashCode()
    {
        android.net.NetworkCapabilities r0;
        int i0, i1, i2, i3, $i8, $i9, $i10, $i11, $i12, $i14, $i15, $i16, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55;
        long $l4, $l5, $l6, $l7, $l13, $l17, l56, l57, l58;
        android.net.NetworkSpecifier $r1;
        android.util.ArraySet $r2;
        java.lang.String $r3, $r7;
        android.net.TransportInfo $r4;
        boolean $z0;
        java.lang.Boolean $r5;
        java.lang.Integer $r6;
        int[] $r8;

        r0 := @this: android.net.NetworkCapabilities;

        l56 = r0.<android.net.NetworkCapabilities: long mNetworkCapabilities>;

        $l4 = l56 & -1L;

        i0 = (int) $l4;

        $l5 = l56 >> 32;

        i1 = (int) $l5;

        l57 = r0.<android.net.NetworkCapabilities: long mUnwantedNetworkCapabilities>;

        $l6 = l57 & -1L;

        i2 = (int) $l6;

        $l7 = l57 >> 32;

        i3 = (int) $l7;

        l58 = r0.<android.net.NetworkCapabilities: long mTransportTypes>;

        $i8 = i1 * 3;

        $i10 = i0 + $i8;

        $i9 = i2 * 5;

        $i12 = $i10 + $i9;

        $i11 = i3 * 7;

        $i16 = $i12 + $i11;

        $l13 = -1L & l58;

        $i14 = (int) $l13;

        $i15 = $i14 * 11;

        $i20 = $i16 + $i15;

        $l17 = l58 >> 32;

        $i18 = (int) $l17;

        $i19 = $i18 * 13;

        $i23 = $i20 + $i19;

        $i21 = r0.<android.net.NetworkCapabilities: int mLinkUpBandwidthKbps>;

        $i22 = $i21 * 17;

        $i26 = $i23 + $i22;

        $i24 = r0.<android.net.NetworkCapabilities: int mLinkDownBandwidthKbps>;

        $i25 = $i24 * 19;

        $i27 = $i26 + $i25;

        $r1 = r0.<android.net.NetworkCapabilities: android.net.NetworkSpecifier mNetworkSpecifier>;

        $i28 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($r1);

        $i29 = $i28 * 23;

        $i32 = $i27 + $i29;

        $i30 = r0.<android.net.NetworkCapabilities: int mSignalStrength>;

        $i31 = $i30 * 29;

        $i33 = $i32 + $i31;

        $r2 = r0.<android.net.NetworkCapabilities: android.util.ArraySet mUids>;

        $i34 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($r2);

        $i35 = $i34 * 31;

        $i36 = $i33 + $i35;

        $r3 = r0.<android.net.NetworkCapabilities: java.lang.String mSSID>;

        $i37 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($r3);

        $i38 = $i37 * 37;

        $i39 = $i36 + $i38;

        $r4 = r0.<android.net.NetworkCapabilities: android.net.TransportInfo mTransportInfo>;

        $i40 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($r4);

        $i41 = $i40 * 41;

        $i42 = $i39 + $i41;

        $z0 = r0.<android.net.NetworkCapabilities: boolean mPrivateDnsBroken>;

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $i43 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($r5);

        $i44 = $i43 * 43;

        $i46 = $i42 + $i44;

        $i45 = r0.<android.net.NetworkCapabilities: int mRequestorUid>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i45);

        $i47 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($r6);

        $i48 = $i47 * 47;

        $i49 = $i46 + $i48;

        $r7 = r0.<android.net.NetworkCapabilities: java.lang.String mRequestorPackageName>;

        $i50 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($r7);

        $i51 = $i50 * 53;

        $i52 = $i49 + $i51;

        $r8 = r0.<android.net.NetworkCapabilities: int[] mAdministratorUids>;

        $i53 = staticinvoke <java.util.Arrays: int hashCode(int[])>($r8);

        $i54 = $i53 * 59;

        $i55 = $i52 + $i54;

        return $i55;
    }

    public boolean isMetered()
    {
        android.net.NetworkCapabilities r0;
        boolean $z0, $z1;

        r0 := @this: android.net.NetworkCapabilities;

        $z0 = virtualinvoke r0.<android.net.NetworkCapabilities: boolean hasCapability(int)>(11);

        $z1 = $z0 ^ 1;

        return $z1;
    }

    public boolean isPrivateDnsBroken()
    {
        android.net.NetworkCapabilities r0;
        boolean $z0;

        r0 := @this: android.net.NetworkCapabilities;

        $z0 = r0.<android.net.NetworkCapabilities: boolean mPrivateDnsBroken>;

        return $z0;
    }

    public void maybeMarkCapabilitiesRestricted()
    {
        android.net.NetworkCapabilities r0;
        boolean $z0;

        r0 := @this: android.net.NetworkCapabilities;

        $z0 = virtualinvoke r0.<android.net.NetworkCapabilities: boolean deduceRestrictedCapability()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<android.net.NetworkCapabilities: android.net.NetworkCapabilities removeCapability(int)>(13);

     label1:
        return;
    }

    public android.net.NetworkCapabilities removeCapability(int)
    {
        android.net.NetworkCapabilities r0;
        int i0, $i2;
        long l1, $l3, $l4, $l5, $l6;

        r0 := @this: android.net.NetworkCapabilities;

        i0 := @parameter0: int;

        staticinvoke <android.net.NetworkCapabilities: void checkValidCapability(int)>(i0);

        $i2 = 1 << i0;

        l1 = (long) $i2;

        $l3 = r0.<android.net.NetworkCapabilities: long mNetworkCapabilities>;

        $l4 = $l3 & l1;

        r0.<android.net.NetworkCapabilities: long mNetworkCapabilities> = $l4;

        $l5 = r0.<android.net.NetworkCapabilities: long mUnwantedNetworkCapabilities>;

        $l6 = $l5 & l1;

        r0.<android.net.NetworkCapabilities: long mUnwantedNetworkCapabilities> = $l6;

        return r0;
    }

    public android.net.NetworkCapabilities removeTransportType(int)
    {
        android.net.NetworkCapabilities r0;
        int i0, $i1;
        long $l2, $l3, $l4;
        android.net.NetworkSpecifier $r1;

        r0 := @this: android.net.NetworkCapabilities;

        i0 := @parameter0: int;

        staticinvoke <android.net.NetworkCapabilities: void checkValidTransportType(int)>(i0);

        $l3 = r0.<android.net.NetworkCapabilities: long mTransportTypes>;

        $i1 = 1 << i0;

        $l2 = (long) $i1;

        $l4 = $l3 & $l2;

        r0.<android.net.NetworkCapabilities: long mTransportTypes> = $l4;

        $r1 = r0.<android.net.NetworkCapabilities: android.net.NetworkSpecifier mNetworkSpecifier>;

        virtualinvoke r0.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setNetworkSpecifier(android.net.NetworkSpecifier)>($r1);

        return r0;
    }

    public void restrictCapabilitesForTestNetwork(int)
    {
        android.net.NetworkCapabilities r0;
        int i0, i3, i4;
        long l1, l2, $l5, $l6, $l7;
        android.net.NetworkSpecifier r1;
        int[] r2, $r3;
        boolean $z0;

        r0 := @this: android.net.NetworkCapabilities;

        i0 := @parameter0: int;

        l1 = r0.<android.net.NetworkCapabilities: long mNetworkCapabilities>;

        l2 = r0.<android.net.NetworkCapabilities: long mTransportTypes>;

        r1 = r0.<android.net.NetworkCapabilities: android.net.NetworkSpecifier mNetworkSpecifier>;

        i3 = r0.<android.net.NetworkCapabilities: int mSignalStrength>;

        i4 = virtualinvoke r0.<android.net.NetworkCapabilities: int getOwnerUid()>();

        r2 = virtualinvoke r0.<android.net.NetworkCapabilities: int[] getAdministratorUids()>();

        virtualinvoke r0.<android.net.NetworkCapabilities: void clearAll()>();

        $l5 = 136L & l2;

        $l6 = $l5 | 128L;

        r0.<android.net.NetworkCapabilities: long mTransportTypes> = $l6;

        $l7 = 37005312L & l1;

        r0.<android.net.NetworkCapabilities: long mNetworkCapabilities> = $l7;

        r0.<android.net.NetworkCapabilities: android.net.NetworkSpecifier mNetworkSpecifier> = r1;

        r0.<android.net.NetworkCapabilities: int mSignalStrength> = i3;

        if i4 != i0 goto label1;

        virtualinvoke r0.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setOwnerUid(int)>(i0);

     label1:
        $z0 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(int[],int)>(r2, i0);

        if $z0 == 0 goto label2;

        $r3 = newarray (int)[1];

        $r3[0] = i0;

        virtualinvoke r0.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setAdministratorUids(int[])>($r3);

     label2:
        return;
    }

    public boolean satisfiedByImmutableNetworkCapabilities(android.net.NetworkCapabilities)
    {
        android.net.NetworkCapabilities r0, r1;
        boolean $z0;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: android.net.NetworkCapabilities;

        $z0 = specialinvoke r0.<android.net.NetworkCapabilities: boolean satisfiedByNetworkCapabilities(android.net.NetworkCapabilities,boolean)>(r1, 1);

        return $z0;
    }

    public boolean satisfiedByNetworkCapabilities(android.net.NetworkCapabilities)
    {
        android.net.NetworkCapabilities r0, r1;
        boolean $z0;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: android.net.NetworkCapabilities;

        $z0 = specialinvoke r0.<android.net.NetworkCapabilities: boolean satisfiedByNetworkCapabilities(android.net.NetworkCapabilities,boolean)>(r1, 0);

        return $z0;
    }

    public boolean satisfiedBySSID(android.net.NetworkCapabilities)
    {
        android.net.NetworkCapabilities r0, r1;
        java.lang.String r2, $r3;
        boolean $z0, z1;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: android.net.NetworkCapabilities;

        r2 = r0.<android.net.NetworkCapabilities: java.lang.String mSSID>;

        if r2 == null goto label2;

        $r3 = r1.<android.net.NetworkCapabilities: java.lang.String mSSID>;

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        z1 = 0;

        goto label3;

     label2:
        z1 = 1;

     label3:
        return z1;
    }

    public boolean satisfiedByUids(android.net.NetworkCapabilities)
    {
        android.net.NetworkCapabilities r0, r1;
        android.net.UidRange r2;
        android.util.ArraySet $r3, r5;
        boolean $z0, $z1, $z2;
        java.lang.Object $r4;
        int $i0;
        java.util.Iterator r6;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: android.net.NetworkCapabilities;

        $r3 = r1.<android.net.NetworkCapabilities: android.util.ArraySet mUids>;

        if $r3 == null goto label6;

        r5 = r0.<android.net.NetworkCapabilities: android.util.ArraySet mUids>;

        if r5 != null goto label1;

        goto label6;

     label1:
        r6 = virtualinvoke r5.<android.util.ArraySet: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.net.UidRange) $r4;

        $i0 = r1.<android.net.NetworkCapabilities: int mOwnerUid>;

        $z1 = virtualinvoke r2.<android.net.UidRange: boolean contains(int)>($i0);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        $z2 = virtualinvoke r1.<android.net.NetworkCapabilities: boolean appliesToUidRange(android.net.UidRange)>(r2);

        if $z2 != 0 goto label4;

        return 0;

     label4:
        goto label2;

     label5:
        return 1;

     label6:
        return 1;
    }

    public void set(android.net.NetworkCapabilities)
    {
        android.net.NetworkCapabilities r0, r1;
        long $l0, $l1, $l6;
        int $i2, $i3, $i4, $i5, $i7;
        android.net.NetworkSpecifier $r2;
        android.net.TransportInfo $r3;
        android.util.ArraySet $r4;
        int[] $r6;
        java.lang.String $r8, $r9;
        boolean $z0;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: android.net.NetworkCapabilities;

        $l0 = r1.<android.net.NetworkCapabilities: long mNetworkCapabilities>;

        r0.<android.net.NetworkCapabilities: long mNetworkCapabilities> = $l0;

        $l1 = r1.<android.net.NetworkCapabilities: long mTransportTypes>;

        r0.<android.net.NetworkCapabilities: long mTransportTypes> = $l1;

        $i2 = r1.<android.net.NetworkCapabilities: int mLinkUpBandwidthKbps>;

        r0.<android.net.NetworkCapabilities: int mLinkUpBandwidthKbps> = $i2;

        $i3 = r1.<android.net.NetworkCapabilities: int mLinkDownBandwidthKbps>;

        r0.<android.net.NetworkCapabilities: int mLinkDownBandwidthKbps> = $i3;

        $r2 = r1.<android.net.NetworkCapabilities: android.net.NetworkSpecifier mNetworkSpecifier>;

        r0.<android.net.NetworkCapabilities: android.net.NetworkSpecifier mNetworkSpecifier> = $r2;

        $r3 = r1.<android.net.NetworkCapabilities: android.net.TransportInfo mTransportInfo>;

        r0.<android.net.NetworkCapabilities: android.net.TransportInfo mTransportInfo> = $r3;

        $i4 = r1.<android.net.NetworkCapabilities: int mSignalStrength>;

        r0.<android.net.NetworkCapabilities: int mSignalStrength> = $i4;

        $r4 = r1.<android.net.NetworkCapabilities: android.util.ArraySet mUids>;

        virtualinvoke r0.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setUids(java.util.Set)>($r4);

        $r6 = virtualinvoke r1.<android.net.NetworkCapabilities: int[] getAdministratorUids()>();

        virtualinvoke r0.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setAdministratorUids(int[])>($r6);

        $i5 = r1.<android.net.NetworkCapabilities: int mOwnerUid>;

        r0.<android.net.NetworkCapabilities: int mOwnerUid> = $i5;

        $l6 = r1.<android.net.NetworkCapabilities: long mUnwantedNetworkCapabilities>;

        r0.<android.net.NetworkCapabilities: long mUnwantedNetworkCapabilities> = $l6;

        $r8 = r1.<android.net.NetworkCapabilities: java.lang.String mSSID>;

        r0.<android.net.NetworkCapabilities: java.lang.String mSSID> = $r8;

        $z0 = r1.<android.net.NetworkCapabilities: boolean mPrivateDnsBroken>;

        r0.<android.net.NetworkCapabilities: boolean mPrivateDnsBroken> = $z0;

        $i7 = r1.<android.net.NetworkCapabilities: int mRequestorUid>;

        r0.<android.net.NetworkCapabilities: int mRequestorUid> = $i7;

        $r9 = r1.<android.net.NetworkCapabilities: java.lang.String mRequestorPackageName>;

        r0.<android.net.NetworkCapabilities: java.lang.String mRequestorPackageName> = $r9;

        return;
    }

    public android.net.NetworkCapabilities setAdministratorUids(int[])
    {
        android.net.NetworkCapabilities r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.lang.IllegalArgumentException $r1;
        int[] r2, r3, r4;

        r0 := @this: android.net.NetworkCapabilities;

        r2 := @parameter0: int[];

        $i0 = lengthof r2;

        r3 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>(r2, $i0);

        r0.<android.net.NetworkCapabilities: int[] mAdministratorUids> = r3;

        staticinvoke <java.util.Arrays: void sort(int[])>(r3);

        i6 = 0;

     label1:
        r4 = r0.<android.net.NetworkCapabilities: int[] mAdministratorUids>;

        $i1 = lengthof r4;

        $i2 = $i1 - 1;

        if i6 >= $i2 goto label3;

        $i5 = r4[i6];

        $i3 = i6 + 1;

        $i4 = r4[$i3];

        if $i5 >= $i4 goto label2;

        i6 = i6 + 1;

        goto label1;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("All administrator UIDs must be unique");

        throw $r1;

     label3:
        return r0;
    }

    public void setCapabilities(int[])
    {
        android.net.NetworkCapabilities r0;
        int[] r1, $r2;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: int[];

        $r2 = newarray (int)[0];

        virtualinvoke r0.<android.net.NetworkCapabilities: void setCapabilities(int[],int[])>(r1, $r2);

        return;
    }

    public void setCapabilities(int[], int[])
    {
        android.net.NetworkCapabilities r0;
        int[] r1, r2;
        long $l0, $l1;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: int[];

        r2 := @parameter1: int[];

        $l0 = staticinvoke <com.android.internal.util.BitUtils: long packBits(int[])>(r1);

        r0.<android.net.NetworkCapabilities: long mNetworkCapabilities> = $l0;

        $l1 = staticinvoke <com.android.internal.util.BitUtils: long packBits(int[])>(r2);

        r0.<android.net.NetworkCapabilities: long mUnwantedNetworkCapabilities> = $l1;

        return;
    }

    public android.net.NetworkCapabilities setCapability(int, boolean)
    {
        android.net.NetworkCapabilities r0;
        int i0;
        boolean z0;

        r0 := @this: android.net.NetworkCapabilities;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        virtualinvoke r0.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addCapability(int)>(i0);

        goto label2;

     label1:
        virtualinvoke r0.<android.net.NetworkCapabilities: android.net.NetworkCapabilities removeCapability(int)>(i0);

     label2:
        return r0;
    }

    public android.net.NetworkCapabilities setLinkDownstreamBandwidthKbps(int)
    {
        android.net.NetworkCapabilities r0;
        int i0;

        r0 := @this: android.net.NetworkCapabilities;

        i0 := @parameter0: int;

        r0.<android.net.NetworkCapabilities: int mLinkDownBandwidthKbps> = i0;

        return r0;
    }

    public android.net.NetworkCapabilities setLinkUpstreamBandwidthKbps(int)
    {
        android.net.NetworkCapabilities r0;
        int i0;

        r0 := @this: android.net.NetworkCapabilities;

        i0 := @parameter0: int;

        r0.<android.net.NetworkCapabilities: int mLinkUpBandwidthKbps> = i0;

        return r0;
    }

    public android.net.NetworkCapabilities setNetworkSpecifier(android.net.NetworkSpecifier)
    {
        android.net.NetworkCapabilities r0;
        android.net.NetworkSpecifier r1;
        long $l0;
        int $i1;
        java.lang.IllegalStateException $r2;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: android.net.NetworkSpecifier;

        if r1 == null goto label2;

        $l0 = r0.<android.net.NetworkCapabilities: long mTransportTypes>;

        $i1 = staticinvoke <java.lang.Long: int bitCount(long)>($l0);

        if $i1 != 1 goto label1;

        goto label2;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Must have a single transport specified to use setNetworkSpecifier");

        throw $r2;

     label2:
        r0.<android.net.NetworkCapabilities: android.net.NetworkSpecifier mNetworkSpecifier> = r1;

        return r0;
    }

    public android.net.NetworkCapabilities setOwnerUid(int)
    {
        android.net.NetworkCapabilities r0;
        int i0;

        r0 := @this: android.net.NetworkCapabilities;

        i0 := @parameter0: int;

        r0.<android.net.NetworkCapabilities: int mOwnerUid> = i0;

        return r0;
    }

    public void setPrivateDnsBroken(boolean)
    {
        android.net.NetworkCapabilities r0;
        boolean z0;

        r0 := @this: android.net.NetworkCapabilities;

        z0 := @parameter0: boolean;

        r0.<android.net.NetworkCapabilities: boolean mPrivateDnsBroken> = z0;

        return;
    }

    public android.net.NetworkCapabilities setRequestorPackageName(java.lang.String)
    {
        android.net.NetworkCapabilities r0;
        java.lang.String r1;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: java.lang.String;

        r0.<android.net.NetworkCapabilities: java.lang.String mRequestorPackageName> = r1;

        return r0;
    }

    public android.net.NetworkCapabilities setRequestorUid(int)
    {
        android.net.NetworkCapabilities r0;
        int i0;

        r0 := @this: android.net.NetworkCapabilities;

        i0 := @parameter0: int;

        r0.<android.net.NetworkCapabilities: int mRequestorUid> = i0;

        return r0;
    }

    public android.net.NetworkCapabilities setRequestorUidAndPackageName(int, java.lang.String)
    {
        android.net.NetworkCapabilities r0, $r2, $r3;
        int i0;
        java.lang.String r1;

        r0 := @this: android.net.NetworkCapabilities;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setRequestorUid(int)>(i0);

        $r3 = virtualinvoke $r2.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setRequestorPackageName(java.lang.String)>(r1);

        return $r3;
    }

    public android.net.NetworkCapabilities setSSID(java.lang.String)
    {
        android.net.NetworkCapabilities r0;
        java.lang.String r1;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: java.lang.String;

        r0.<android.net.NetworkCapabilities: java.lang.String mSSID> = r1;

        return r0;
    }

    public android.net.NetworkCapabilities setSignalStrength(int)
    {
        android.net.NetworkCapabilities r0;
        int i0;

        r0 := @this: android.net.NetworkCapabilities;

        i0 := @parameter0: int;

        r0.<android.net.NetworkCapabilities: int mSignalStrength> = i0;

        return r0;
    }

    public android.net.NetworkCapabilities setSingleUid(int)
    {
        android.net.NetworkCapabilities r0;
        int i0;
        android.util.ArraySet $r2;
        android.net.UidRange $r3;

        r0 := @this: android.net.NetworkCapabilities;

        i0 := @parameter0: int;

        $r2 = new android.util.ArraySet;

        specialinvoke $r2.<android.util.ArraySet: void <init>(int)>(1);

        $r3 = new android.net.UidRange;

        specialinvoke $r3.<android.net.UidRange: void <init>(int,int)>(i0, i0);

        virtualinvoke $r2.<android.util.ArraySet: boolean add(java.lang.Object)>($r3);

        virtualinvoke r0.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setUids(java.util.Set)>($r2);

        return r0;
    }

    public android.net.NetworkCapabilities setTransportInfo(android.net.TransportInfo)
    {
        android.net.NetworkCapabilities r0;
        android.net.TransportInfo r1;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: android.net.TransportInfo;

        r0.<android.net.NetworkCapabilities: android.net.TransportInfo mTransportInfo> = r1;

        return r0;
    }

    public android.net.NetworkCapabilities setTransportType(int, boolean)
    {
        android.net.NetworkCapabilities r0;
        int i0;
        boolean z0;

        r0 := @this: android.net.NetworkCapabilities;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        virtualinvoke r0.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addTransportType(int)>(i0);

        goto label2;

     label1:
        virtualinvoke r0.<android.net.NetworkCapabilities: android.net.NetworkCapabilities removeTransportType(int)>(i0);

     label2:
        return r0;
    }

    public void setTransportTypes(int[])
    {
        android.net.NetworkCapabilities r0;
        int[] r1;
        long $l0;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: int[];

        $l0 = staticinvoke <com.android.internal.util.BitUtils: long packBits(int[])>(r1);

        r0.<android.net.NetworkCapabilities: long mTransportTypes> = $l0;

        return;
    }

    public android.net.NetworkCapabilities setUids(java.util.Set)
    {
        android.net.NetworkCapabilities r0;
        java.util.Set r1;
        android.util.ArraySet $r2;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: java.util.Set;

        if r1 != null goto label1;

        r0.<android.net.NetworkCapabilities: android.util.ArraySet mUids> = null;

        goto label2;

     label1:
        $r2 = new android.util.ArraySet;

        specialinvoke $r2.<android.util.ArraySet: void <init>(java.util.Collection)>(r1);

        r0.<android.net.NetworkCapabilities: android.util.ArraySet mUids> = $r2;

     label2:
        return r0;
    }

    public java.lang.String toString()
    {
        android.net.NetworkCapabilities r0;
        android.util.ArraySet r2, $r26, $r29, $r33;
        long $l0, $l2, $l4, $l17, $l18, $l19;
        byte $b1, $b3, $b5;
        int $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i20;
        android.net.NetworkSpecifier $r4, $r44;
        android.net.TransportInfo $r5, $r40;
        boolean $z0, $z1;
        int[] $r6, $r20;
        java.lang.String $r7, $r11, $r14, $r17, $r21;
        java.lang.Object $r30, $r34;
        android.net.UidRange $r31, $r35;
        android.net.'-$$Lambda$p1_56lwnt1xBuY1muPblbN1Dtkw' $r54, $r56;
        android.net.'-$$Lambda$FpGXkd3pLxeXY58eJ_84mi1PLWQ' $r58;
        java.lang.StringBuilder r59;
        android.net.NetworkCapabilities$NameOf r60, r61, r62;

        r0 := @this: android.net.NetworkCapabilities;

        r59 = new java.lang.StringBuilder;

        specialinvoke r59.<java.lang.StringBuilder: void <init>(java.lang.String)>("[");

        $l0 = r0.<android.net.NetworkCapabilities: long mTransportTypes>;

        $b1 = 0L cmp $l0;

        if $b1 == 0 goto label01;

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Transports: ");

        $l19 = r0.<android.net.NetworkCapabilities: long mTransportTypes>;

        $r58 = <android.net._$$Lambda$FpGXkd3pLxeXY58eJ_84mi1PLWQ: android.net.'-$$Lambda$FpGXkd3pLxeXY58eJ_84mi1PLWQ' INSTANCE>;

        r60 = (android.net.NetworkCapabilities$NameOf) $r58;

        staticinvoke <android.net.NetworkCapabilities: void appendStringRepresentationOfBitMaskToStringBuilder(java.lang.StringBuilder,long,android.net.NetworkCapabilities$NameOf,java.lang.String)>(r59, $l19, r60, "|");

     label01:
        $l2 = r0.<android.net.NetworkCapabilities: long mNetworkCapabilities>;

        $b3 = 0L cmp $l2;

        if $b3 == 0 goto label02;

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Capabilities: ");

        $l18 = r0.<android.net.NetworkCapabilities: long mNetworkCapabilities>;

        $r56 = <android.net._$$Lambda$p1_56lwnt1xBuY1muPblbN1Dtkw: android.net.'-$$Lambda$p1_56lwnt1xBuY1muPblbN1Dtkw' INSTANCE>;

        r61 = (android.net.NetworkCapabilities$NameOf) $r56;

        staticinvoke <android.net.NetworkCapabilities: void appendStringRepresentationOfBitMaskToStringBuilder(java.lang.StringBuilder,long,android.net.NetworkCapabilities$NameOf,java.lang.String)>(r59, $l18, r61, "&");

     label02:
        $l4 = r0.<android.net.NetworkCapabilities: long mUnwantedNetworkCapabilities>;

        $b5 = 0L cmp $l4;

        if $b5 == 0 goto label03;

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Unwanted: ");

        $l17 = r0.<android.net.NetworkCapabilities: long mUnwantedNetworkCapabilities>;

        $r54 = <android.net._$$Lambda$p1_56lwnt1xBuY1muPblbN1Dtkw: android.net.'-$$Lambda$p1_56lwnt1xBuY1muPblbN1Dtkw' INSTANCE>;

        r62 = (android.net.NetworkCapabilities$NameOf) $r54;

        staticinvoke <android.net.NetworkCapabilities: void appendStringRepresentationOfBitMaskToStringBuilder(java.lang.StringBuilder,long,android.net.NetworkCapabilities$NameOf,java.lang.String)>(r59, $l17, r62, "&");

     label03:
        $i6 = r0.<android.net.NetworkCapabilities: int mLinkUpBandwidthKbps>;

        if $i6 <= 0 goto label04;

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" LinkUpBandwidth>=");

        $i16 = r0.<android.net.NetworkCapabilities: int mLinkUpBandwidthKbps>;

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i16);

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Kbps");

     label04:
        $i7 = r0.<android.net.NetworkCapabilities: int mLinkDownBandwidthKbps>;

        if $i7 <= 0 goto label05;

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" LinkDnBandwidth>=");

        $i15 = r0.<android.net.NetworkCapabilities: int mLinkDownBandwidthKbps>;

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i15);

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Kbps");

     label05:
        $r4 = r0.<android.net.NetworkCapabilities: android.net.NetworkSpecifier mNetworkSpecifier>;

        if $r4 == null goto label06;

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Specifier: <");

        $r44 = r0.<android.net.NetworkCapabilities: android.net.NetworkSpecifier mNetworkSpecifier>;

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44);

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

     label06:
        $r5 = r0.<android.net.NetworkCapabilities: android.net.TransportInfo mTransportInfo>;

        if $r5 == null goto label07;

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" TransportInfo: <");

        $r40 = r0.<android.net.NetworkCapabilities: android.net.TransportInfo mTransportInfo>;

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r40);

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

     label07:
        $z0 = virtualinvoke r0.<android.net.NetworkCapabilities: boolean hasSignalStrength()>();

        if $z0 == 0 goto label08;

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SignalStrength: ");

        $i14 = r0.<android.net.NetworkCapabilities: int mSignalStrength>;

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i14);

     label08:
        r2 = r0.<android.net.NetworkCapabilities: android.util.ArraySet mUids>;

        if r2 == null goto label10;

        $i11 = virtualinvoke r2.<android.util.ArraySet: int size()>();

        if 1 != $i11 goto label09;

        $r29 = r0.<android.net.NetworkCapabilities: android.util.ArraySet mUids>;

        $r30 = virtualinvoke $r29.<android.util.ArraySet: java.lang.Object valueAt(int)>(0);

        $r31 = (android.net.UidRange) $r30;

        $i12 = virtualinvoke $r31.<android.net.UidRange: int count()>();

        if $i12 != 1 goto label09;

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Uid: ");

        $r33 = r0.<android.net.NetworkCapabilities: android.util.ArraySet mUids>;

        $r34 = virtualinvoke $r33.<android.util.ArraySet: java.lang.Object valueAt(int)>(0);

        $r35 = (android.net.UidRange) $r34;

        $i13 = $r35.<android.net.UidRange: int start>;

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i13);

        goto label10;

     label09:
        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Uids: <");

        $r26 = r0.<android.net.NetworkCapabilities: android.util.ArraySet mUids>;

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r26);

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

     label10:
        $i20 = r0.<android.net.NetworkCapabilities: int mOwnerUid>;

        if $i20 == -1 goto label11;

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" OwnerUid: ");

        $i10 = r0.<android.net.NetworkCapabilities: int mOwnerUid>;

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

     label11:
        $r6 = r0.<android.net.NetworkCapabilities: int[] mAdministratorUids>;

        $i8 = lengthof $r6;

        if $i8 != 0 goto label12;

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AdministratorUids: ");

        $r20 = r0.<android.net.NetworkCapabilities: int[] mAdministratorUids>;

        $r21 = staticinvoke <java.util.Arrays: java.lang.String toString(int[])>($r20);

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

     label12:
        $r7 = r0.<android.net.NetworkCapabilities: java.lang.String mSSID>;

        if $r7 == null goto label13;

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SSID: ");

        $r17 = r0.<android.net.NetworkCapabilities: java.lang.String mSSID>;

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

     label13:
        $z1 = r0.<android.net.NetworkCapabilities: boolean mPrivateDnsBroken>;

        if $z1 == 0 goto label14;

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Private DNS is broken");

     label14:
        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" RequestorUid: ");

        $i9 = r0.<android.net.NetworkCapabilities: int mRequestorUid>;

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" RequestorPackageName: ");

        $r11 = r0.<android.net.NetworkCapabilities: java.lang.String mRequestorPackageName>;

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r14 = virtualinvoke r59.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r14;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        android.net.NetworkCapabilities r0;
        android.os.Parcel r1;
        int i0, $i4, $i5, $i6, $i7, $i8;
        long $l1, $l2, $l3;
        android.net.NetworkSpecifier $r2;
        android.os.Parcelable $r3, $r5;
        android.net.TransportInfo $r4;
        android.util.ArraySet $r6;
        java.lang.String $r7, $r9;
        boolean $z0;
        int[] $r8;

        r0 := @this: android.net.NetworkCapabilities;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        $l1 = r0.<android.net.NetworkCapabilities: long mNetworkCapabilities>;

        virtualinvoke r1.<android.os.Parcel: void writeLong(long)>($l1);

        $l2 = r0.<android.net.NetworkCapabilities: long mUnwantedNetworkCapabilities>;

        virtualinvoke r1.<android.os.Parcel: void writeLong(long)>($l2);

        $l3 = r0.<android.net.NetworkCapabilities: long mTransportTypes>;

        virtualinvoke r1.<android.os.Parcel: void writeLong(long)>($l3);

        $i4 = r0.<android.net.NetworkCapabilities: int mLinkUpBandwidthKbps>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i4);

        $i5 = r0.<android.net.NetworkCapabilities: int mLinkDownBandwidthKbps>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i5);

        $r2 = r0.<android.net.NetworkCapabilities: android.net.NetworkSpecifier mNetworkSpecifier>;

        $r3 = (android.os.Parcelable) $r2;

        virtualinvoke r1.<android.os.Parcel: void writeParcelable(android.os.Parcelable,int)>($r3, i0);

        $r4 = r0.<android.net.NetworkCapabilities: android.net.TransportInfo mTransportInfo>;

        $r5 = (android.os.Parcelable) $r4;

        virtualinvoke r1.<android.os.Parcel: void writeParcelable(android.os.Parcelable,int)>($r5, i0);

        $i6 = r0.<android.net.NetworkCapabilities: int mSignalStrength>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i6);

        $r6 = r0.<android.net.NetworkCapabilities: android.util.ArraySet mUids>;

        virtualinvoke r1.<android.os.Parcel: void writeArraySet(android.util.ArraySet)>($r6);

        $r7 = r0.<android.net.NetworkCapabilities: java.lang.String mSSID>;

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>($r7);

        $z0 = r0.<android.net.NetworkCapabilities: boolean mPrivateDnsBroken>;

        virtualinvoke r1.<android.os.Parcel: void writeBoolean(boolean)>($z0);

        $r8 = virtualinvoke r0.<android.net.NetworkCapabilities: int[] getAdministratorUids()>();

        virtualinvoke r1.<android.os.Parcel: void writeIntArray(int[])>($r8);

        $i7 = r0.<android.net.NetworkCapabilities: int mOwnerUid>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i7);

        $i8 = r0.<android.net.NetworkCapabilities: int mRequestorUid>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i8);

        $r9 = r0.<android.net.NetworkCapabilities: java.lang.String mRequestorPackageName>;

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>($r9);

        return;
    }
}
