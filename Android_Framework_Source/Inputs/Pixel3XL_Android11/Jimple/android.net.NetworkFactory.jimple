public class android.net.NetworkFactory extends android.os.Handler
{
    public static final int CMD_CANCEL_REQUEST;
    public static final int CMD_REQUEST_NETWORK;
    private static final int CMD_SET_FILTER;
    private static final int CMD_SET_SCORE;
    private static final boolean DBG;
    private static final boolean VDBG;
    private final java.lang.String LOG_TAG;
    private android.net.NetworkCapabilities mCapabilityFilter;
    private final android.content.Context mContext;
    private final java.util.Map mNetworkRequests;
    private android.net.NetworkProvider mProvider;
    private int mRefCount;
    private int mScore;

    public void <init>(android.os.Looper, android.content.Context, java.lang.String, android.net.NetworkCapabilities)
    {
        android.net.NetworkFactory r0;
        android.os.Looper r1;
        android.content.Context r2;
        java.lang.String r3;
        android.net.NetworkCapabilities r4;
        java.util.LinkedHashMap $r5;

        r0 := @this: android.net.NetworkFactory;

        r1 := @parameter0: android.os.Looper;

        r2 := @parameter1: android.content.Context;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.net.NetworkCapabilities;

        specialinvoke r0.<android.os.Handler: void <init>(android.os.Looper)>(r1);

        $r5 = new java.util.LinkedHashMap;

        specialinvoke $r5.<java.util.LinkedHashMap: void <init>()>();

        r0.<android.net.NetworkFactory: java.util.Map mNetworkRequests> = $r5;

        r0.<android.net.NetworkFactory: int mRefCount> = 0;

        r0.<android.net.NetworkFactory: android.net.NetworkProvider mProvider> = null;

        r0.<android.net.NetworkFactory: java.lang.String LOG_TAG> = r3;

        r0.<android.net.NetworkFactory: android.content.Context mContext> = r2;

        r0.<android.net.NetworkFactory: android.net.NetworkCapabilities mCapabilityFilter> = r4;

        return;
    }

    private void evalRequest(android.net.NetworkFactory$NetworkRequestInfo)
    {
        android.net.NetworkFactory r0;
        android.net.NetworkFactory$NetworkRequestInfo r1;
        boolean $z0, $z1;
        android.net.NetworkRequest $r2, $r3;
        int $i0;

        r0 := @this: android.net.NetworkFactory;

        r1 := @parameter0: android.net.NetworkFactory$NetworkRequestInfo;

        $z0 = specialinvoke r0.<android.net.NetworkFactory: boolean shouldNeedNetworkFor(android.net.NetworkFactory$NetworkRequestInfo)>(r1);

        if $z0 == 0 goto label1;

        $r3 = r1.<android.net.NetworkFactory$NetworkRequestInfo: android.net.NetworkRequest request>;

        $i0 = r1.<android.net.NetworkFactory$NetworkRequestInfo: int score>;

        virtualinvoke r0.<android.net.NetworkFactory: void needNetworkFor(android.net.NetworkRequest,int)>($r3, $i0);

        r1.<android.net.NetworkFactory$NetworkRequestInfo: boolean requested> = 1;

        goto label2;

     label1:
        $z1 = specialinvoke r0.<android.net.NetworkFactory: boolean shouldReleaseNetworkFor(android.net.NetworkFactory$NetworkRequestInfo)>(r1);

        if $z1 == 0 goto label2;

        $r2 = r1.<android.net.NetworkFactory$NetworkRequestInfo: android.net.NetworkRequest request>;

        virtualinvoke r0.<android.net.NetworkFactory: void releaseNetworkFor(android.net.NetworkRequest)>($r2);

        r1.<android.net.NetworkFactory$NetworkRequestInfo: boolean requested> = 0;

     label2:
        return;
    }

    private void evalRequests()
    {
        android.net.NetworkFactory r0;
        java.util.Iterator r1;
        java.util.Map $r2;
        java.util.Collection $r3;
        boolean $z0;
        java.lang.Object $r4;
        android.net.NetworkFactory$NetworkRequestInfo $r5;

        r0 := @this: android.net.NetworkFactory;

        $r2 = r0.<android.net.NetworkFactory: java.util.Map mNetworkRequests>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        r1 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (android.net.NetworkFactory$NetworkRequestInfo) $r4;

        specialinvoke r0.<android.net.NetworkFactory: void evalRequest(android.net.NetworkFactory$NetworkRequestInfo)>($r5);

        goto label1;

     label2:
        return;
    }

    private void handleSetFilter(android.net.NetworkCapabilities)
    {
        android.net.NetworkFactory r0;
        android.net.NetworkCapabilities r1;

        r0 := @this: android.net.NetworkFactory;

        r1 := @parameter0: android.net.NetworkCapabilities;

        r0.<android.net.NetworkFactory: android.net.NetworkCapabilities mCapabilityFilter> = r1;

        specialinvoke r0.<android.net.NetworkFactory: void evalRequests()>();

        return;
    }

    private void handleSetScore(int)
    {
        android.net.NetworkFactory r0;
        int i0;

        r0 := @this: android.net.NetworkFactory;

        i0 := @parameter0: int;

        r0.<android.net.NetworkFactory: int mScore> = i0;

        specialinvoke r0.<android.net.NetworkFactory: void evalRequests()>();

        return;
    }

    public static void lambda$BOTGlmxddm-dxfTs0rdTPrhrIk4(android.net.NetworkFactory)
    {
        android.net.NetworkFactory r0;

        r0 := @parameter0: android.net.NetworkFactory;

        specialinvoke r0.<android.net.NetworkFactory: void evalRequests()>();

        return;
    }

    private boolean shouldNeedNetworkFor(android.net.NetworkFactory$NetworkRequestInfo)
    {
        android.net.NetworkFactory r0;
        android.net.NetworkFactory$NetworkRequestInfo r1;
        boolean $z0, $z1, $z2, z3;
        int $i0, $i1, $i2, $i3, $i4;
        android.net.NetworkCapabilities $r2;
        android.net.NetworkRequest $r3, $r4;
        android.net.NetworkProvider $r5;

        r0 := @this: android.net.NetworkFactory;

        r1 := @parameter0: android.net.NetworkFactory$NetworkRequestInfo;

        $z0 = r1.<android.net.NetworkFactory$NetworkRequestInfo: boolean requested>;

        if $z0 != 0 goto label2;

        $i1 = r1.<android.net.NetworkFactory$NetworkRequestInfo: int score>;

        $i0 = r0.<android.net.NetworkFactory: int mScore>;

        if $i1 < $i0 goto label1;

        $i3 = r1.<android.net.NetworkFactory$NetworkRequestInfo: int providerId>;

        $r5 = r0.<android.net.NetworkFactory: android.net.NetworkProvider mProvider>;

        $i4 = virtualinvoke $r5.<android.net.NetworkProvider: int getProviderId()>();

        if $i3 != $i4 goto label2;

     label1:
        $r3 = r1.<android.net.NetworkFactory$NetworkRequestInfo: android.net.NetworkRequest request>;

        $r2 = r0.<android.net.NetworkFactory: android.net.NetworkCapabilities mCapabilityFilter>;

        $z1 = virtualinvoke $r3.<android.net.NetworkRequest: boolean canBeSatisfiedBy(android.net.NetworkCapabilities)>($r2);

        if $z1 == 0 goto label2;

        $r4 = r1.<android.net.NetworkFactory$NetworkRequestInfo: android.net.NetworkRequest request>;

        $i2 = r1.<android.net.NetworkFactory$NetworkRequestInfo: int score>;

        $z2 = virtualinvoke r0.<android.net.NetworkFactory: boolean acceptRequest(android.net.NetworkRequest,int)>($r4, $i2);

        if $z2 == 0 goto label2;

        z3 = 1;

        goto label3;

     label2:
        z3 = 0;

     label3:
        return z3;
    }

    private boolean shouldReleaseNetworkFor(android.net.NetworkFactory$NetworkRequestInfo)
    {
        android.net.NetworkFactory r0;
        android.net.NetworkFactory$NetworkRequestInfo r1;
        boolean $z0, $z1, $z2, z3;
        int $i0, $i1, $i2, $i3, $i4;
        android.net.NetworkCapabilities $r2;
        android.net.NetworkRequest $r3, $r4;
        android.net.NetworkProvider $r5;

        r0 := @this: android.net.NetworkFactory;

        r1 := @parameter0: android.net.NetworkFactory$NetworkRequestInfo;

        $z0 = r1.<android.net.NetworkFactory$NetworkRequestInfo: boolean requested>;

        if $z0 == 0 goto label3;

        $i1 = r1.<android.net.NetworkFactory$NetworkRequestInfo: int score>;

        $i0 = r0.<android.net.NetworkFactory: int mScore>;

        if $i1 <= $i0 goto label1;

        $i3 = r1.<android.net.NetworkFactory$NetworkRequestInfo: int providerId>;

        $r5 = r0.<android.net.NetworkFactory: android.net.NetworkProvider mProvider>;

        $i4 = virtualinvoke $r5.<android.net.NetworkProvider: int getProviderId()>();

        if $i3 != $i4 goto label2;

     label1:
        $r3 = r1.<android.net.NetworkFactory$NetworkRequestInfo: android.net.NetworkRequest request>;

        $r2 = r0.<android.net.NetworkFactory: android.net.NetworkCapabilities mCapabilityFilter>;

        $z1 = virtualinvoke $r3.<android.net.NetworkRequest: boolean canBeSatisfiedBy(android.net.NetworkCapabilities)>($r2);

        if $z1 == 0 goto label2;

        $r4 = r1.<android.net.NetworkFactory$NetworkRequestInfo: android.net.NetworkRequest request>;

        $i2 = r1.<android.net.NetworkFactory$NetworkRequestInfo: int score>;

        $z2 = virtualinvoke r0.<android.net.NetworkFactory: boolean acceptRequest(android.net.NetworkRequest,int)>($r4, $i2);

        if $z2 != 0 goto label3;

     label2:
        z3 = 1;

        goto label4;

     label3:
        z3 = 0;

     label4:
        return z3;
    }

    public boolean acceptRequest(android.net.NetworkRequest, int)
    {
        android.net.NetworkFactory r0;
        android.net.NetworkRequest r1;
        int i0;

        r0 := @this: android.net.NetworkFactory;

        r1 := @parameter0: android.net.NetworkRequest;

        i0 := @parameter1: int;

        return 1;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        android.net.NetworkFactory r0;
        java.io.PrintWriter r1;
        android.net.NetworkFactory$NetworkRequestInfo r2;
        java.lang.String $r3, $r10;
        java.util.Map $r4;
        java.util.Collection $r5;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.StringBuilder $r7;
        java.io.FileDescriptor r11;
        java.lang.String[] r12;
        java.util.Iterator r13;

        r0 := @this: android.net.NetworkFactory;

        r11 := @parameter0: java.io.FileDescriptor;

        r1 := @parameter1: java.io.PrintWriter;

        r12 := @parameter2: java.lang.String[];

        $r3 = virtualinvoke r0.<android.net.NetworkFactory: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r3);

        $r4 = r0.<android.net.NetworkFactory: java.util.Map mNetworkRequests>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>();

        r13 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.net.NetworkFactory$NetworkRequestInfo) $r6;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r10);

        goto label1;

     label2:
        return;
    }

    public android.net.NetworkProvider getProvider()
    {
        android.net.NetworkFactory r0;
        android.net.NetworkProvider $r1;

        r0 := @this: android.net.NetworkFactory;

        $r1 = r0.<android.net.NetworkFactory: android.net.NetworkProvider mProvider>;

        return $r1;
    }

    protected int getRequestCount()
    {
        android.net.NetworkFactory r0;
        java.util.Map $r1;
        int $i0;

        r0 := @this: android.net.NetworkFactory;

        $r1 = r0.<android.net.NetworkFactory: java.util.Map mNetworkRequests>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    public int getSerialNumber()
    {
        android.net.NetworkFactory r0;
        android.net.NetworkProvider $r1;
        int $i0;

        r0 := @this: android.net.NetworkFactory;

        $r1 = r0.<android.net.NetworkFactory: android.net.NetworkProvider mProvider>;

        $i0 = virtualinvoke $r1.<android.net.NetworkProvider: int getProviderId()>();

        return $i0;
    }

    protected void handleAddRequest(android.net.NetworkRequest, int, int)
    {
        android.net.NetworkFactory r0;
        int i0, i1;
        java.util.Map $r1, $r13;
        java.lang.Object $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r10;
        android.net.NetworkFactory$NetworkRequestInfo $r11, r16, r18;
        android.net.NetworkRequest $r12, r15;

        r0 := @this: android.net.NetworkFactory;

        r15 := @parameter0: android.net.NetworkRequest;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = r0.<android.net.NetworkFactory: java.util.Map mNetworkRequests>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r15);

        r16 = (android.net.NetworkFactory$NetworkRequestInfo) $r2;

        if r16 != null goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("got request ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r15);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with score ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and providerId ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r10 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.net.NetworkFactory: void log(java.lang.String)>($r10);

        $r11 = new android.net.NetworkFactory$NetworkRequestInfo;

        specialinvoke $r11.<android.net.NetworkFactory$NetworkRequestInfo: void <init>(android.net.NetworkRequest,int,int)>(r15, i0, i1);

        r18 = $r11;

        $r13 = r0.<android.net.NetworkFactory: java.util.Map mNetworkRequests>;

        $r12 = $r11.<android.net.NetworkFactory$NetworkRequestInfo: android.net.NetworkRequest request>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r11);

        goto label2;

     label1:
        r16.<android.net.NetworkFactory$NetworkRequestInfo: int score> = i0;

        r16.<android.net.NetworkFactory$NetworkRequestInfo: int providerId> = i1;

        r18 = r16;

     label2:
        specialinvoke r0.<android.net.NetworkFactory: void evalRequest(android.net.NetworkFactory$NetworkRequestInfo)>(r18);

        return;
    }

    public void handleMessage(android.os.Message)
    {
        android.net.NetworkFactory r0;
        android.os.Message r1;
        int i0, $i1, $i2, $i3;
        java.lang.Object $r2, $r4, $r6;
        android.net.NetworkRequest $r3, $r5;
        android.net.NetworkCapabilities $r7;

        r0 := @this: android.net.NetworkFactory;

        r1 := @parameter0: android.os.Message;

        i0 = r1.<android.os.Message: int what>;

        if i0 == 1 goto label4;

        if i0 == 2 goto label3;

        if i0 == 3 goto label2;

        if i0 == 4 goto label1;

        goto label5;

     label1:
        $r6 = r1.<android.os.Message: java.lang.Object obj>;

        $r7 = (android.net.NetworkCapabilities) $r6;

        specialinvoke r0.<android.net.NetworkFactory: void handleSetFilter(android.net.NetworkCapabilities)>($r7);

        goto label5;

     label2:
        $i3 = r1.<android.os.Message: int arg1>;

        specialinvoke r0.<android.net.NetworkFactory: void handleSetScore(int)>($i3);

        goto label5;

     label3:
        $r4 = r1.<android.os.Message: java.lang.Object obj>;

        $r5 = (android.net.NetworkRequest) $r4;

        virtualinvoke r0.<android.net.NetworkFactory: void handleRemoveRequest(android.net.NetworkRequest)>($r5);

        goto label5;

     label4:
        $r2 = r1.<android.os.Message: java.lang.Object obj>;

        $r3 = (android.net.NetworkRequest) $r2;

        $i2 = r1.<android.os.Message: int arg1>;

        $i1 = r1.<android.os.Message: int arg2>;

        virtualinvoke r0.<android.net.NetworkFactory: void handleAddRequest(android.net.NetworkRequest,int,int)>($r3, $i2, $i1);

     label5:
        return;
    }

    protected void handleRemoveRequest(android.net.NetworkRequest)
    {
        android.net.NetworkFactory r0;
        android.net.NetworkRequest r1, $r7;
        android.net.NetworkFactory$NetworkRequestInfo r2;
        java.util.Map $r3, $r5;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: android.net.NetworkFactory;

        r1 := @parameter0: android.net.NetworkRequest;

        $r3 = r0.<android.net.NetworkFactory: java.util.Map mNetworkRequests>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (android.net.NetworkFactory$NetworkRequestInfo) $r4;

        if r2 == null goto label1;

        $r5 = r0.<android.net.NetworkFactory: java.util.Map mNetworkRequests>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        $z0 = r2.<android.net.NetworkFactory$NetworkRequestInfo: boolean requested>;

        if $z0 == 0 goto label1;

        $r7 = r2.<android.net.NetworkFactory$NetworkRequestInfo: android.net.NetworkRequest request>;

        virtualinvoke r0.<android.net.NetworkFactory: void releaseNetworkFor(android.net.NetworkRequest)>($r7);

     label1:
        return;
    }

    public void lambda$releaseRequestAsUnfulfillableByAnyFactory$0$NetworkFactory(android.net.NetworkRequest)
    {
        android.net.NetworkFactory r0;
        android.net.NetworkRequest r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r5, $r6;
        android.net.NetworkProvider r8;

        r0 := @this: android.net.NetworkFactory;

        r1 := @parameter0: android.net.NetworkRequest;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("releaseRequestAsUnfulfillableByAnyFactory: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.net.NetworkFactory: void log(java.lang.String)>($r5);

        r8 = r0.<android.net.NetworkFactory: android.net.NetworkProvider mProvider>;

        if r8 != null goto label1;

        $r6 = r0.<android.net.NetworkFactory: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r6, "Ignoring attempt to release unregistered request as unfulfillable");

        return;

     label1:
        virtualinvoke r8.<android.net.NetworkProvider: void declareNetworkRequestUnfulfillable(android.net.NetworkRequest)>(r1);

        return;
    }

    protected void log(java.lang.String)
    {
        android.net.NetworkFactory r0;
        java.lang.String r1, $r2;

        r0 := @this: android.net.NetworkFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.net.NetworkFactory: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r2, r1);

        return;
    }

    protected void needNetworkFor(android.net.NetworkRequest, int)
    {
        android.net.NetworkFactory r0;
        android.net.NetworkRequest r1;
        int $i0, i1, i2;

        r0 := @this: android.net.NetworkFactory;

        r1 := @parameter0: android.net.NetworkRequest;

        i1 := @parameter1: int;

        $i0 = r0.<android.net.NetworkFactory: int mRefCount>;

        i2 = $i0 + 1;

        r0.<android.net.NetworkFactory: int mRefCount> = i2;

        if i2 != 1 goto label1;

        virtualinvoke r0.<android.net.NetworkFactory: void startNetwork()>();

     label1:
        return;
    }

    protected void reevaluateAllRequests()
    {
        android.net.NetworkFactory r0;
        android.net._$$Lambda$NetworkFactory$BOTGlmxddm_dxfTs0rdTPrhrIk4 $r1;

        r0 := @this: android.net.NetworkFactory;

        $r1 = new android.net._$$Lambda$NetworkFactory$BOTGlmxddm_dxfTs0rdTPrhrIk4;

        specialinvoke $r1.<android.net._$$Lambda$NetworkFactory$BOTGlmxddm_dxfTs0rdTPrhrIk4: void <init>(android.net.NetworkFactory)>(r0);

        virtualinvoke r0.<android.net.NetworkFactory: boolean post(java.lang.Runnable)>($r1);

        return;
    }

    public void register()
    {
        android.net.NetworkFactory r0;
        android.net.NetworkProvider $r1, $r9;
        java.lang.IllegalStateException $r2;
        android.net.NetworkFactory$1 $r3;
        android.content.Context $r4, $r7;
        android.os.Looper $r5;
        java.lang.String $r6;
        java.lang.Object $r8;
        android.net.ConnectivityManager $r10;

        r0 := @this: android.net.NetworkFactory;

        $r1 = r0.<android.net.NetworkFactory: android.net.NetworkProvider mProvider>;

        if $r1 != null goto label1;

        virtualinvoke r0.<android.net.NetworkFactory: void log(java.lang.String)>("Registering NetworkFactory");

        $r3 = new android.net.NetworkFactory$1;

        $r4 = r0.<android.net.NetworkFactory: android.content.Context mContext>;

        $r5 = virtualinvoke r0.<android.net.NetworkFactory: android.os.Looper getLooper()>();

        $r6 = r0.<android.net.NetworkFactory: java.lang.String LOG_TAG>;

        specialinvoke $r3.<android.net.NetworkFactory$1: void <init>(android.net.NetworkFactory,android.content.Context,android.os.Looper,java.lang.String)>(r0, $r4, $r5, $r6);

        r0.<android.net.NetworkFactory: android.net.NetworkProvider mProvider> = $r3;

        $r7 = r0.<android.net.NetworkFactory: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("connectivity");

        $r10 = (android.net.ConnectivityManager) $r8;

        $r9 = r0.<android.net.NetworkFactory: android.net.NetworkProvider mProvider>;

        virtualinvoke $r10.<android.net.ConnectivityManager: int registerNetworkProvider(android.net.NetworkProvider)>($r9);

        return;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("A NetworkFactory must only be registered once");

        throw $r2;
    }

    protected void releaseNetworkFor(android.net.NetworkRequest)
    {
        android.net.NetworkFactory r0;
        android.net.NetworkRequest r1;
        int i0, $i1;

        r0 := @this: android.net.NetworkFactory;

        r1 := @parameter0: android.net.NetworkRequest;

        $i1 = r0.<android.net.NetworkFactory: int mRefCount>;

        i0 = $i1 - 1;

        r0.<android.net.NetworkFactory: int mRefCount> = i0;

        if i0 != 0 goto label1;

        virtualinvoke r0.<android.net.NetworkFactory: void stopNetwork()>();

     label1:
        return;
    }

    protected void releaseRequestAsUnfulfillableByAnyFactory(android.net.NetworkRequest)
    {
        android.net.NetworkFactory r0;
        android.net.NetworkRequest r1;
        android.net._$$Lambda$NetworkFactory$6X9egP3VUFw6n6aZoN0JJN7Lxgc $r2;

        r0 := @this: android.net.NetworkFactory;

        r1 := @parameter0: android.net.NetworkRequest;

        $r2 = new android.net._$$Lambda$NetworkFactory$6X9egP3VUFw6n6aZoN0JJN7Lxgc;

        specialinvoke $r2.<android.net._$$Lambda$NetworkFactory$6X9egP3VUFw6n6aZoN0JJN7Lxgc: void <init>(android.net.NetworkFactory,android.net.NetworkRequest)>(r0, r1);

        virtualinvoke r0.<android.net.NetworkFactory: boolean post(java.lang.Runnable)>($r2);

        return;
    }

    public void setCapabilityFilter(android.net.NetworkCapabilities)
    {
        android.net.NetworkFactory r0;
        android.net.NetworkCapabilities r1, $r2;
        android.os.Message $r3;

        r0 := @this: android.net.NetworkFactory;

        r1 := @parameter0: android.net.NetworkCapabilities;

        $r2 = new android.net.NetworkCapabilities;

        specialinvoke $r2.<android.net.NetworkCapabilities: void <init>(android.net.NetworkCapabilities)>(r1);

        $r3 = virtualinvoke r0.<android.net.NetworkFactory: android.os.Message obtainMessage(int,java.lang.Object)>(4, $r2);

        virtualinvoke r0.<android.net.NetworkFactory: boolean sendMessage(android.os.Message)>($r3);

        return;
    }

    public void setScoreFilter(int)
    {
        android.net.NetworkFactory r0;
        int i0;
        android.os.Message $r1;

        r0 := @this: android.net.NetworkFactory;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<android.net.NetworkFactory: android.os.Message obtainMessage(int,int,int)>(3, i0, 0);

        virtualinvoke r0.<android.net.NetworkFactory: boolean sendMessage(android.os.Message)>($r1);

        return;
    }

    protected void startNetwork()
    {
        android.net.NetworkFactory r0;

        r0 := @this: android.net.NetworkFactory;

        return;
    }

    protected void stopNetwork()
    {
        android.net.NetworkFactory r0;

        r0 := @this: android.net.NetworkFactory;

        return;
    }

    public void terminate()
    {
        android.net.NetworkFactory r0;
        android.net.NetworkProvider $r1, $r5;
        java.lang.IllegalStateException $r2;
        android.content.Context $r3;
        java.lang.Object $r4;
        android.net.ConnectivityManager $r6;

        r0 := @this: android.net.NetworkFactory;

        $r1 = r0.<android.net.NetworkFactory: android.net.NetworkProvider mProvider>;

        if $r1 == null goto label1;

        virtualinvoke r0.<android.net.NetworkFactory: void log(java.lang.String)>("Unregistering NetworkFactory");

        $r3 = r0.<android.net.NetworkFactory: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("connectivity");

        $r6 = (android.net.ConnectivityManager) $r4;

        $r5 = r0.<android.net.NetworkFactory: android.net.NetworkProvider mProvider>;

        virtualinvoke $r6.<android.net.ConnectivityManager: void unregisterNetworkProvider(android.net.NetworkProvider)>($r5);

        virtualinvoke r0.<android.net.NetworkFactory: void removeCallbacksAndMessages(java.lang.Object)>(null);

        return;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This NetworkFactory was never registered");

        throw $r2;
    }

    public java.lang.String toString()
    {
        android.net.NetworkFactory r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r4, $r20;
        android.net.NetworkProvider $r7;
        int $i0, $i1, $i2, $i3;
        android.net.NetworkCapabilities $r12;
        java.util.Map $r15;

        r0 := @this: android.net.NetworkFactory;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{");

        $r4 = r0.<android.net.NetworkFactory: java.lang.String LOG_TAG>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - providerId=");

        $r7 = r0.<android.net.NetworkFactory: android.net.NetworkProvider mProvider>;

        $i0 = virtualinvoke $r7.<android.net.NetworkProvider: int getProviderId()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ScoreFilter=");

        $i1 = r0.<android.net.NetworkFactory: int mScore>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", Filter=");

        $r12 = r0.<android.net.NetworkFactory: android.net.NetworkCapabilities mCapabilityFilter>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", requests=");

        $r15 = r0.<android.net.NetworkFactory: java.util.Map mNetworkRequests>;

        $i2 = interfaceinvoke $r15.<java.util.Map: int size()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", refCount=");

        $i3 = r0.<android.net.NetworkFactory: int mRefCount>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r20 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r20;
    }

    public static void <clinit>()
    {
        <android.net.NetworkFactory: boolean VDBG> = 0;

        <android.net.NetworkFactory: boolean DBG> = 1;

        <android.net.NetworkFactory: int CMD_SET_SCORE> = 3;

        <android.net.NetworkFactory: int CMD_SET_FILTER> = 4;

        <android.net.NetworkFactory: int CMD_REQUEST_NETWORK> = 1;

        <android.net.NetworkFactory: int CMD_CANCEL_REQUEST> = 2;

        return;
    }
}
