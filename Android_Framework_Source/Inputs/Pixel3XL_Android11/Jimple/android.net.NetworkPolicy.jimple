public class android.net.NetworkPolicy extends java.lang.Object implements android.os.Parcelable, java.lang.Comparable
{
    public static final android.os.Parcelable$Creator CREATOR;
    public static final int CYCLE_NONE;
    private static final long DEFAULT_MTU;
    public static final long LIMIT_DISABLED;
    public static final long SNOOZE_NEVER;
    private static final int VERSION_INIT;
    private static final int VERSION_RAPID;
    private static final int VERSION_RULE;
    public static final long WARNING_DISABLED;
    public android.util.RecurrenceRule cycleRule;
    public boolean inferred;
    public long lastLimitSnooze;
    public long lastRapidSnooze;
    public long lastWarningSnooze;
    public long limitBytes;
    public boolean metered;
    public android.net.NetworkTemplate template;
    public long warningBytes;

    static void <clinit>()
    {
        android.net.NetworkPolicy$1 $r0;

        <android.net.NetworkPolicy: long WARNING_DISABLED> = -1L;

        <android.net.NetworkPolicy: int VERSION_RULE> = 2;

        <android.net.NetworkPolicy: int VERSION_RAPID> = 3;

        <android.net.NetworkPolicy: int VERSION_INIT> = 1;

        <android.net.NetworkPolicy: long SNOOZE_NEVER> = -1L;

        <android.net.NetworkPolicy: long LIMIT_DISABLED> = -1L;

        <android.net.NetworkPolicy: long DEFAULT_MTU> = 1500L;

        <android.net.NetworkPolicy: int CYCLE_NONE> = -1;

        $r0 = new android.net.NetworkPolicy$1;

        specialinvoke $r0.<android.net.NetworkPolicy$1: void <init>()>();

        <android.net.NetworkPolicy: android.os.Parcelable$Creator CREATOR> = $r0;

        return;
    }

    public void <init>(android.net.NetworkTemplate, int, java.lang.String, long, long, long, long, boolean, boolean)
    {
        android.net.NetworkPolicy r0;
        android.net.NetworkTemplate r1;
        int i0;
        java.lang.String r2;
        long l1, l2, l3, l4;
        boolean z0, z1;
        java.time.ZoneId $r3;
        android.util.RecurrenceRule $r4;

        r0 := @this: android.net.NetworkPolicy;

        r1 := @parameter0: android.net.NetworkTemplate;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        l1 := @parameter3: long;

        l2 := @parameter4: long;

        l3 := @parameter5: long;

        l4 := @parameter6: long;

        z0 := @parameter7: boolean;

        z1 := @parameter8: boolean;

        $r3 = staticinvoke <java.time.ZoneId: java.time.ZoneId of(java.lang.String)>(r2);

        $r4 = staticinvoke <android.net.NetworkPolicy: android.util.RecurrenceRule buildRule(int,java.time.ZoneId)>(i0, $r3);

        specialinvoke r0.<android.net.NetworkPolicy: void <init>(android.net.NetworkTemplate,android.util.RecurrenceRule,long,long,long,long,boolean,boolean)>(r1, $r4, l1, l2, l3, l4, z0, z1);

        return;
    }

    public void <init>(android.net.NetworkTemplate, int, java.lang.String, long, long, boolean)
    {
        android.net.NetworkPolicy r0;
        android.net.NetworkTemplate r1;
        int i0;
        java.lang.String r2;
        long l1, l2;
        boolean z0;

        r0 := @this: android.net.NetworkPolicy;

        r1 := @parameter0: android.net.NetworkTemplate;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        l1 := @parameter3: long;

        l2 := @parameter4: long;

        z0 := @parameter5: boolean;

        specialinvoke r0.<android.net.NetworkPolicy: void <init>(android.net.NetworkTemplate,int,java.lang.String,long,long,long,long,boolean,boolean)>(r1, i0, r2, l1, l2, -1L, -1L, z0, 0);

        return;
    }

    public void <init>(android.net.NetworkTemplate, android.util.RecurrenceRule, long, long, long, long, long, boolean, boolean)
    {
        android.net.NetworkPolicy r0;
        android.net.NetworkTemplate r1, $r4;
        android.util.RecurrenceRule r2, $r6;
        long l0, l1, l2, l3, l4;
        boolean z0, z1;
        java.lang.Object $r3, $r5;

        r0 := @this: android.net.NetworkPolicy;

        r1 := @parameter0: android.net.NetworkTemplate;

        r2 := @parameter1: android.util.RecurrenceRule;

        l0 := @parameter2: long;

        l1 := @parameter3: long;

        l2 := @parameter4: long;

        l3 := @parameter5: long;

        l4 := @parameter6: long;

        z0 := @parameter7: boolean;

        z1 := @parameter8: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.net.NetworkPolicy: long warningBytes> = -1L;

        r0.<android.net.NetworkPolicy: long limitBytes> = -1L;

        r0.<android.net.NetworkPolicy: long lastWarningSnooze> = -1L;

        r0.<android.net.NetworkPolicy: long lastLimitSnooze> = -1L;

        r0.<android.net.NetworkPolicy: long lastRapidSnooze> = -1L;

        r0.<android.net.NetworkPolicy: boolean metered> = 1;

        r0.<android.net.NetworkPolicy: boolean inferred> = 0;

        $r3 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "missing NetworkTemplate");

        $r4 = (android.net.NetworkTemplate) $r3;

        r0.<android.net.NetworkPolicy: android.net.NetworkTemplate template> = $r4;

        $r5 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "missing RecurrenceRule");

        $r6 = (android.util.RecurrenceRule) $r5;

        r0.<android.net.NetworkPolicy: android.util.RecurrenceRule cycleRule> = $r6;

        r0.<android.net.NetworkPolicy: long warningBytes> = l0;

        r0.<android.net.NetworkPolicy: long limitBytes> = l1;

        r0.<android.net.NetworkPolicy: long lastWarningSnooze> = l2;

        r0.<android.net.NetworkPolicy: long lastLimitSnooze> = l3;

        r0.<android.net.NetworkPolicy: long lastRapidSnooze> = l4;

        r0.<android.net.NetworkPolicy: boolean metered> = z0;

        r0.<android.net.NetworkPolicy: boolean inferred> = z1;

        return;
    }

    public void <init>(android.net.NetworkTemplate, android.util.RecurrenceRule, long, long, long, long, boolean, boolean)
    {
        android.net.NetworkPolicy r0;
        android.net.NetworkTemplate r1;
        android.util.RecurrenceRule r2;
        long l0, l1, l2, l3;
        boolean z0, z1;

        r0 := @this: android.net.NetworkPolicy;

        r1 := @parameter0: android.net.NetworkTemplate;

        r2 := @parameter1: android.util.RecurrenceRule;

        l0 := @parameter2: long;

        l1 := @parameter3: long;

        l2 := @parameter4: long;

        l3 := @parameter5: long;

        z0 := @parameter6: boolean;

        z1 := @parameter7: boolean;

        specialinvoke r0.<android.net.NetworkPolicy: void <init>(android.net.NetworkTemplate,android.util.RecurrenceRule,long,long,long,long,long,boolean,boolean)>(r1, r2, l0, l1, l2, l3, -1L, z0, z1);

        return;
    }

    private void <init>(android.os.Parcel)
    {
        android.net.NetworkPolicy r0;
        android.os.Parcel r1;
        android.os.Parcelable $r2, $r4;
        android.net.NetworkTemplate $r3;
        android.util.RecurrenceRule $r5;
        long $l0, $l1, $l2, $l3, $l4;
        int $i5, $i6;
        boolean z1, z2;

        r0 := @this: android.net.NetworkPolicy;

        r1 := @parameter0: android.os.Parcel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.net.NetworkPolicy: long warningBytes> = -1L;

        r0.<android.net.NetworkPolicy: long limitBytes> = -1L;

        r0.<android.net.NetworkPolicy: long lastWarningSnooze> = -1L;

        r0.<android.net.NetworkPolicy: long lastLimitSnooze> = -1L;

        r0.<android.net.NetworkPolicy: long lastRapidSnooze> = -1L;

        r0.<android.net.NetworkPolicy: boolean metered> = 1;

        r0.<android.net.NetworkPolicy: boolean inferred> = 0;

        $r2 = virtualinvoke r1.<android.os.Parcel: android.os.Parcelable readParcelable(java.lang.ClassLoader)>(null);

        $r3 = (android.net.NetworkTemplate) $r2;

        r0.<android.net.NetworkPolicy: android.net.NetworkTemplate template> = $r3;

        $r4 = virtualinvoke r1.<android.os.Parcel: android.os.Parcelable readParcelable(java.lang.ClassLoader)>(null);

        $r5 = (android.util.RecurrenceRule) $r4;

        r0.<android.net.NetworkPolicy: android.util.RecurrenceRule cycleRule> = $r5;

        $l0 = virtualinvoke r1.<android.os.Parcel: long readLong()>();

        r0.<android.net.NetworkPolicy: long warningBytes> = $l0;

        $l1 = virtualinvoke r1.<android.os.Parcel: long readLong()>();

        r0.<android.net.NetworkPolicy: long limitBytes> = $l1;

        $l2 = virtualinvoke r1.<android.os.Parcel: long readLong()>();

        r0.<android.net.NetworkPolicy: long lastWarningSnooze> = $l2;

        $l3 = virtualinvoke r1.<android.os.Parcel: long readLong()>();

        r0.<android.net.NetworkPolicy: long lastLimitSnooze> = $l3;

        $l4 = virtualinvoke r1.<android.os.Parcel: long readLong()>();

        r0.<android.net.NetworkPolicy: long lastRapidSnooze> = $l4;

        $i5 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        if $i5 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        r0.<android.net.NetworkPolicy: boolean metered> = z1;

        $i6 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        if $i6 == 0 goto label3;

        z2 = 1;

        goto label4;

     label3:
        z2 = 0;

     label4:
        r0.<android.net.NetworkPolicy: boolean inferred> = z2;

        return;
    }

    void <init>(android.os.Parcel, android.net.NetworkPolicy$1)
    {
        android.net.NetworkPolicy r0;
        android.os.Parcel r1;
        android.net.NetworkPolicy$1 r2;

        r0 := @this: android.net.NetworkPolicy;

        r1 := @parameter0: android.os.Parcel;

        r2 := @parameter1: android.net.NetworkPolicy$1;

        specialinvoke r0.<android.net.NetworkPolicy: void <init>(android.os.Parcel)>(r1);

        return;
    }

    public static android.util.RecurrenceRule buildRule(int, java.time.ZoneId)
    {
        int i0;
        java.time.ZoneId r0;
        android.util.RecurrenceRule $r1, $r2;

        i0 := @parameter0: int;

        r0 := @parameter1: java.time.ZoneId;

        if i0 == -1 goto label1;

        $r2 = staticinvoke <android.util.RecurrenceRule: android.util.RecurrenceRule buildRecurringMonthly(int,java.time.ZoneId)>(i0, r0);

        return $r2;

     label1:
        $r1 = staticinvoke <android.util.RecurrenceRule: android.util.RecurrenceRule buildNever()>();

        return $r1;
    }

    public static android.net.NetworkPolicy getNetworkPolicyFromBackup(java.io.DataInputStream) throws java.io.IOException, android.util.BackupUtils$BadVersionException
    {
        int i0, $i5, $i6, $i7;
        android.net.NetworkTemplate r0;
        long l1, l2, l3, l4, l8;
        java.lang.StringBuilder $r1;
        android.util.BackupUtils$BadVersionException $r4;
        java.lang.String $r5, $r6;
        java.time.ZoneId $r7;
        android.net.NetworkPolicy $r8;
        android.util.RecurrenceRule $r9, r11;
        java.io.DataInputStream r10;
        boolean z0, z1;

        r10 := @parameter0: java.io.DataInputStream;

        i0 = virtualinvoke r10.<java.io.DataInputStream: int readInt()>();

        if i0 < 1 goto label9;

        if i0 > 3 goto label9;

        r0 = staticinvoke <android.net.NetworkTemplate: android.net.NetworkTemplate getNetworkTemplateFromBackup(java.io.DataInputStream)>(r10);

        if i0 < 2 goto label1;

        $r9 = new android.util.RecurrenceRule;

        specialinvoke $r9.<android.util.RecurrenceRule: void <init>(java.io.DataInputStream)>(r10);

        r11 = $r9;

        goto label2;

     label1:
        $i5 = virtualinvoke r10.<java.io.DataInputStream: int readInt()>();

        $r6 = staticinvoke <android.util.BackupUtils: java.lang.String readString(java.io.DataInputStream)>(r10);

        $r7 = staticinvoke <java.time.ZoneId: java.time.ZoneId of(java.lang.String)>($r6);

        r11 = staticinvoke <android.net.NetworkPolicy: android.util.RecurrenceRule buildRule(int,java.time.ZoneId)>($i5, $r7);

     label2:
        l1 = virtualinvoke r10.<java.io.DataInputStream: long readLong()>();

        l2 = virtualinvoke r10.<java.io.DataInputStream: long readLong()>();

        l3 = virtualinvoke r10.<java.io.DataInputStream: long readLong()>();

        l4 = virtualinvoke r10.<java.io.DataInputStream: long readLong()>();

        if i0 < 3 goto label3;

        l8 = virtualinvoke r10.<java.io.DataInputStream: long readLong()>();

        goto label4;

     label3:
        l8 = -1L;

     label4:
        $i6 = virtualinvoke r10.<java.io.DataInputStream: int readInt()>();

        if $i6 != 1 goto label5;

        z0 = 1;

        goto label6;

     label5:
        z0 = 0;

     label6:
        $i7 = virtualinvoke r10.<java.io.DataInputStream: int readInt()>();

        if $i7 != 1 goto label7;

        z1 = 1;

        goto label8;

     label7:
        z1 = 0;

     label8:
        $r8 = new android.net.NetworkPolicy;

        specialinvoke $r8.<android.net.NetworkPolicy: void <init>(android.net.NetworkTemplate,android.util.RecurrenceRule,long,long,long,long,long,boolean,boolean)>(r0, r11, l1, l2, l3, l4, l8, z0, z1);

        return $r8;

     label9:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown backup version: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = new android.util.BackupUtils$BadVersionException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<android.util.BackupUtils$BadVersionException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    public void clearSnooze()
    {
        android.net.NetworkPolicy r0;

        r0 := @this: android.net.NetworkPolicy;

        r0.<android.net.NetworkPolicy: long lastWarningSnooze> = -1L;

        r0.<android.net.NetworkPolicy: long lastLimitSnooze> = -1L;

        r0.<android.net.NetworkPolicy: long lastRapidSnooze> = -1L;

        return;
    }

    public int compareTo(android.net.NetworkPolicy)
    {
        android.net.NetworkPolicy r0, r1;
        long l0, l1;
        byte $b2, $b3, $b4;

        r0 := @this: android.net.NetworkPolicy;

        r1 := @parameter0: android.net.NetworkPolicy;

        if r1 == null goto label4;

        l0 = r1.<android.net.NetworkPolicy: long limitBytes>;

        $b2 = l0 cmp -1L;

        if $b2 != 0 goto label1;

        goto label4;

     label1:
        l1 = r0.<android.net.NetworkPolicy: long limitBytes>;

        $b3 = l1 cmp -1L;

        if $b3 == 0 goto label3;

        $b4 = l0 cmp l1;

        if $b4 >= 0 goto label2;

        goto label3;

     label2:
        return 0;

     label3:
        return 1;

     label4:
        return -1;
    }

    public volatile int compareTo(java.lang.Object)
    {
        android.net.NetworkPolicy r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: android.net.NetworkPolicy;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.net.NetworkPolicy) r1;

        $i0 = virtualinvoke r0.<android.net.NetworkPolicy: int compareTo(android.net.NetworkPolicy)>($r2);

        return $i0;
    }

    public java.util.Iterator cycleIterator()
    {
        android.net.NetworkPolicy r0;
        android.util.RecurrenceRule $r1;
        java.util.Iterator $r2;

        r0 := @this: android.net.NetworkPolicy;

        $r1 = r0.<android.net.NetworkPolicy: android.util.RecurrenceRule cycleRule>;

        $r2 = virtualinvoke $r1.<android.util.RecurrenceRule: java.util.Iterator cycleIterator()>();

        return $r2;
    }

    public int describeContents()
    {
        android.net.NetworkPolicy r0;

        r0 := @this: android.net.NetworkPolicy;

        return 0;
    }

    public boolean equals(java.lang.Object)
    {
        android.net.NetworkPolicy r0, r6;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, z7;
        long $l0, $l1, $l3, $l4, $l6, $l7, $l9, $l10, $l12, $l13;
        byte $b2, $b5, $b8, $b11, $b14;
        android.net.NetworkTemplate $r1, $r2;
        android.util.RecurrenceRule $r3, $r4;
        java.lang.Object r5;

        r0 := @this: android.net.NetworkPolicy;

        r5 := @parameter0: java.lang.Object;

        z0 = r5 instanceof android.net.NetworkPolicy;

        z7 = 0;

        if z0 == 0 goto label2;

        r6 = (android.net.NetworkPolicy) r5;

        $l1 = r0.<android.net.NetworkPolicy: long warningBytes>;

        $l0 = r6.<android.net.NetworkPolicy: long warningBytes>;

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label1;

        $l4 = r0.<android.net.NetworkPolicy: long limitBytes>;

        $l3 = r6.<android.net.NetworkPolicy: long limitBytes>;

        $b5 = $l4 cmp $l3;

        if $b5 != 0 goto label1;

        $l7 = r0.<android.net.NetworkPolicy: long lastWarningSnooze>;

        $l6 = r6.<android.net.NetworkPolicy: long lastWarningSnooze>;

        $b8 = $l7 cmp $l6;

        if $b8 != 0 goto label1;

        $l10 = r0.<android.net.NetworkPolicy: long lastLimitSnooze>;

        $l9 = r6.<android.net.NetworkPolicy: long lastLimitSnooze>;

        $b11 = $l10 cmp $l9;

        if $b11 != 0 goto label1;

        $l13 = r0.<android.net.NetworkPolicy: long lastRapidSnooze>;

        $l12 = r6.<android.net.NetworkPolicy: long lastRapidSnooze>;

        $b14 = $l13 cmp $l12;

        if $b14 != 0 goto label1;

        $z2 = r0.<android.net.NetworkPolicy: boolean metered>;

        $z1 = r6.<android.net.NetworkPolicy: boolean metered>;

        if $z2 != $z1 goto label1;

        $z4 = r0.<android.net.NetworkPolicy: boolean inferred>;

        $z3 = r6.<android.net.NetworkPolicy: boolean inferred>;

        if $z4 != $z3 goto label1;

        $r2 = r0.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        $r1 = r6.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        $z5 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r2, $r1);

        if $z5 == 0 goto label1;

        $r4 = r0.<android.net.NetworkPolicy: android.util.RecurrenceRule cycleRule>;

        $r3 = r6.<android.net.NetworkPolicy: android.util.RecurrenceRule cycleRule>;

        $z6 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r4, $r3);

        if $z6 == 0 goto label1;

        z7 = 1;

        goto label1;

     label1:
        return z7;

     label2:
        return 0;
    }

    public byte[] getBytesForBackup() throws java.io.IOException
    {
        android.net.NetworkPolicy r0;
        java.io.ByteArrayOutputStream $r3;
        java.io.DataOutputStream $r4;
        android.net.NetworkTemplate $r5;
        byte[] $r6, $r8;
        android.util.RecurrenceRule $r7;
        long $l0, $l1, $l2, $l3, $l4;
        boolean $z0, $z1;
        int i5, i6;

        r0 := @this: android.net.NetworkPolicy;

        $r3 = new java.io.ByteArrayOutputStream;

        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>();

        $r4 = new java.io.DataOutputStream;

        specialinvoke $r4.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r3);

        virtualinvoke $r4.<java.io.DataOutputStream: void writeInt(int)>(3);

        $r5 = r0.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        $r6 = virtualinvoke $r5.<android.net.NetworkTemplate: byte[] getBytesForBackup()>();

        virtualinvoke $r4.<java.io.DataOutputStream: void write(byte[])>($r6);

        $r7 = r0.<android.net.NetworkPolicy: android.util.RecurrenceRule cycleRule>;

        virtualinvoke $r7.<android.util.RecurrenceRule: void writeToStream(java.io.DataOutputStream)>($r4);

        $l0 = r0.<android.net.NetworkPolicy: long warningBytes>;

        virtualinvoke $r4.<java.io.DataOutputStream: void writeLong(long)>($l0);

        $l1 = r0.<android.net.NetworkPolicy: long limitBytes>;

        virtualinvoke $r4.<java.io.DataOutputStream: void writeLong(long)>($l1);

        $l2 = r0.<android.net.NetworkPolicy: long lastWarningSnooze>;

        virtualinvoke $r4.<java.io.DataOutputStream: void writeLong(long)>($l2);

        $l3 = r0.<android.net.NetworkPolicy: long lastLimitSnooze>;

        virtualinvoke $r4.<java.io.DataOutputStream: void writeLong(long)>($l3);

        $l4 = r0.<android.net.NetworkPolicy: long lastRapidSnooze>;

        virtualinvoke $r4.<java.io.DataOutputStream: void writeLong(long)>($l4);

        $z0 = r0.<android.net.NetworkPolicy: boolean metered>;

        i5 = (int) $z0;

        virtualinvoke $r4.<java.io.DataOutputStream: void writeInt(int)>(i5);

        $z1 = r0.<android.net.NetworkPolicy: boolean inferred>;

        i6 = (int) $z1;

        virtualinvoke $r4.<java.io.DataOutputStream: void writeInt(int)>(i6);

        $r8 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r8;
    }

    public boolean hasCycle()
    {
        android.net.NetworkPolicy r0;
        android.util.RecurrenceRule $r1;
        java.util.Iterator $r2;
        boolean $z0;

        r0 := @this: android.net.NetworkPolicy;

        $r1 = r0.<android.net.NetworkPolicy: android.util.RecurrenceRule cycleRule>;

        $r2 = virtualinvoke $r1.<android.util.RecurrenceRule: java.util.Iterator cycleIterator()>();

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        return $z0;
    }

    public int hashCode()
    {
        android.net.NetworkPolicy r0;
        java.lang.Object[] $r1;
        android.net.NetworkTemplate $r2;
        android.util.RecurrenceRule $r3;
        long $l0, $l1, $l2, $l3, $l4;
        java.lang.Long $r4, $r5, $r6, $r7, $r8;
        boolean $z0, $z1;
        java.lang.Boolean $r9, $r10;
        int $i5;

        r0 := @this: android.net.NetworkPolicy;

        $r1 = newarray (java.lang.Object)[9];

        $r2 = r0.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        $r1[0] = $r2;

        $r3 = r0.<android.net.NetworkPolicy: android.util.RecurrenceRule cycleRule>;

        $r1[1] = $r3;

        $l0 = r0.<android.net.NetworkPolicy: long warningBytes>;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r1[2] = $r4;

        $l1 = r0.<android.net.NetworkPolicy: long limitBytes>;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r1[3] = $r5;

        $l2 = r0.<android.net.NetworkPolicy: long lastWarningSnooze>;

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r1[4] = $r6;

        $l3 = r0.<android.net.NetworkPolicy: long lastLimitSnooze>;

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        $r1[5] = $r7;

        $l4 = r0.<android.net.NetworkPolicy: long lastRapidSnooze>;

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        $r1[6] = $r8;

        $z0 = r0.<android.net.NetworkPolicy: boolean metered>;

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r1[7] = $r9;

        $z1 = r0.<android.net.NetworkPolicy: boolean inferred>;

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        $r1[8] = $r10;

        $i5 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>($r1);

        return $i5;
    }

    public boolean isOverLimit(long)
    {
        android.net.NetworkPolicy r0;
        long l0, l1, $l3;
        byte $b2, $b4;
        boolean z0;

        r0 := @this: android.net.NetworkPolicy;

        l0 := @parameter0: long;

        l1 = r0.<android.net.NetworkPolicy: long limitBytes>;

        $b2 = l1 cmp -1L;

        if $b2 == 0 goto label1;

        $l3 = l0 + 3000L;

        $b4 = $l3 cmp l1;

        if $b4 < 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isOverWarning(long)
    {
        android.net.NetworkPolicy r0;
        long l0, l1;
        byte $b2, $b3;
        boolean z0;

        r0 := @this: android.net.NetworkPolicy;

        l0 := @parameter0: long;

        l1 = r0.<android.net.NetworkPolicy: long warningBytes>;

        $b2 = l1 cmp -1L;

        if $b2 == 0 goto label1;

        $b3 = l0 cmp l1;

        if $b3 < 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public java.lang.String toString()
    {
        android.net.NetworkPolicy r0;
        java.lang.StringBuilder $r2;
        android.net.NetworkTemplate $r4;
        android.util.RecurrenceRule $r7;
        long $l0, $l1, $l2, $l3, $l4;
        boolean $z0, $z1;
        java.lang.String $r24;

        r0 := @this: android.net.NetworkPolicy;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("NetworkPolicy{");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("template=");

        $r4 = r0.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cycleRule=");

        $r7 = r0.<android.net.NetworkPolicy: android.util.RecurrenceRule cycleRule>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" warningBytes=");

        $l0 = r0.<android.net.NetworkPolicy: long warningBytes>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" limitBytes=");

        $l1 = r0.<android.net.NetworkPolicy: long limitBytes>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" lastWarningSnooze=");

        $l2 = r0.<android.net.NetworkPolicy: long lastWarningSnooze>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" lastLimitSnooze=");

        $l3 = r0.<android.net.NetworkPolicy: long lastLimitSnooze>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" lastRapidSnooze=");

        $l4 = r0.<android.net.NetworkPolicy: long lastRapidSnooze>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" metered=");

        $z0 = r0.<android.net.NetworkPolicy: boolean metered>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" inferred=");

        $z1 = r0.<android.net.NetworkPolicy: boolean inferred>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r24 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r24;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        android.net.NetworkPolicy r0;
        android.os.Parcel r1;
        int i0, i6, i7;
        android.net.NetworkTemplate $r2;
        android.util.RecurrenceRule $r3;
        long $l1, $l2, $l3, $l4, $l5;
        boolean $z0, $z1;

        r0 := @this: android.net.NetworkPolicy;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        $r2 = r0.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        virtualinvoke r1.<android.os.Parcel: void writeParcelable(android.os.Parcelable,int)>($r2, i0);

        $r3 = r0.<android.net.NetworkPolicy: android.util.RecurrenceRule cycleRule>;

        virtualinvoke r1.<android.os.Parcel: void writeParcelable(android.os.Parcelable,int)>($r3, i0);

        $l1 = r0.<android.net.NetworkPolicy: long warningBytes>;

        virtualinvoke r1.<android.os.Parcel: void writeLong(long)>($l1);

        $l2 = r0.<android.net.NetworkPolicy: long limitBytes>;

        virtualinvoke r1.<android.os.Parcel: void writeLong(long)>($l2);

        $l3 = r0.<android.net.NetworkPolicy: long lastWarningSnooze>;

        virtualinvoke r1.<android.os.Parcel: void writeLong(long)>($l3);

        $l4 = r0.<android.net.NetworkPolicy: long lastLimitSnooze>;

        virtualinvoke r1.<android.os.Parcel: void writeLong(long)>($l4);

        $l5 = r0.<android.net.NetworkPolicy: long lastRapidSnooze>;

        virtualinvoke r1.<android.os.Parcel: void writeLong(long)>($l5);

        $z0 = r0.<android.net.NetworkPolicy: boolean metered>;

        i6 = (int) $z0;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i6);

        $z1 = r0.<android.net.NetworkPolicy: boolean inferred>;

        i7 = (int) $z1;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i7);

        return;
    }
}
