public class android.net.NetworkPolicyManager extends java.lang.Object
{
    private static final boolean ALLOW_PLATFORM_APP_POLICY;
    public static final java.lang.String EXTRA_NETWORK_TEMPLATE;
    public static final java.lang.String FIREWALL_CHAIN_NAME_DOZABLE;
    public static final java.lang.String FIREWALL_CHAIN_NAME_NONE;
    public static final java.lang.String FIREWALL_CHAIN_NAME_POWERSAVE;
    public static final java.lang.String FIREWALL_CHAIN_NAME_STANDBY;
    public static final int FIREWALL_RULE_DEFAULT;
    public static final int FOREGROUND_THRESHOLD_STATE;
    public static final int MASK_ALL_NETWORKS;
    public static final int MASK_METERED_NETWORKS;
    public static final int POLICY_ALLOW_METERED_BACKGROUND;
    public static final int POLICY_NONE;
    public static final int POLICY_REJECT_METERED_BACKGROUND;
    public static final int RULE_ALLOW_ALL;
    public static final int RULE_ALLOW_METERED;
    public static final int RULE_NONE;
    public static final int RULE_REJECT_ALL;
    public static final int RULE_REJECT_METERED;
    public static final int RULE_TEMPORARY_ALLOW_METERED;
    public static final int SUBSCRIPTION_OVERRIDE_CONGESTED;
    public static final int SUBSCRIPTION_OVERRIDE_UNMETERED;
    private final java.util.Map mCallbackMap;
    private final android.content.Context mContext;
    private android.net.INetworkPolicyManager mService;

    public void <init>(android.content.Context, android.net.INetworkPolicyManager)
    {
        android.net.NetworkPolicyManager r0;
        android.content.Context r1;
        android.net.INetworkPolicyManager r2;
        java.util.concurrent.ConcurrentHashMap $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: android.net.NetworkPolicyManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.net.INetworkPolicyManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r3.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<android.net.NetworkPolicyManager: java.util.Map mCallbackMap> = $r3;

        if r2 == null goto label1;

        r0.<android.net.NetworkPolicyManager: android.content.Context mContext> = r1;

        r0.<android.net.NetworkPolicyManager: android.net.INetworkPolicyManager mService> = r2;

        return;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("missing INetworkPolicyManager");

        throw $r4;
    }

    public static java.util.Iterator cycleIterator(android.net.NetworkPolicy)
    {
        android.net.NetworkPolicy r0;
        android.net.NetworkPolicyManager$1 $r1;
        java.util.Iterator $r2;

        r0 := @parameter0: android.net.NetworkPolicy;

        $r1 = new android.net.NetworkPolicyManager$1;

        $r2 = virtualinvoke r0.<android.net.NetworkPolicy: java.util.Iterator cycleIterator()>();

        specialinvoke $r1.<android.net.NetworkPolicyManager$1: void <init>(java.util.Iterator)>($r2);

        return $r1;
    }

    public static android.net.NetworkPolicyManager 'from'(android.content.Context)
    {
        android.content.Context r0;
        java.lang.Object $r1;
        android.net.NetworkPolicyManager $r2;

        r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("netpolicy");

        $r2 = (android.net.NetworkPolicyManager) $r1;

        return $r2;
    }

    public static boolean isProcStateAllowedWhileIdleOrPowerSaveMode(int)
    {
        int i0;
        boolean z0;

        i0 := @parameter0: int;

        if i0 > 5 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static boolean isProcStateAllowedWhileOnRestrictBackground(int)
    {
        int i0;
        boolean z0;

        i0 := @parameter0: int;

        if i0 > 5 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static boolean isUidValidForPolicy(android.content.Context, int)
    {
        android.content.Context r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        $z0 = staticinvoke <android.os.UserHandle: boolean isApp(int)>(i0);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    public static java.lang.String resolveNetworkId(android.net.wifi.WifiConfiguration)
    {
        boolean $z0;
        java.lang.String $r0, r2;
        android.net.wifi.WifiConfiguration r1;

        r1 := @parameter0: android.net.wifi.WifiConfiguration;

        $z0 = virtualinvoke r1.<android.net.wifi.WifiConfiguration: boolean isPasspoint()>();

        if $z0 == 0 goto label1;

        r2 = r1.<android.net.wifi.WifiConfiguration: java.lang.String providerFriendlyName>;

        goto label2;

     label1:
        r2 = r1.<android.net.wifi.WifiConfiguration: java.lang.String SSID>;

     label2:
        $r0 = staticinvoke <android.net.wifi.WifiInfo: java.lang.String sanitizeSsid(java.lang.String)>(r2);

        return $r0;
    }

    public static java.lang.String resolveNetworkId(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <android.net.wifi.WifiInfo: java.lang.String sanitizeSsid(java.lang.String)>(r0);

        return $r1;
    }

    public static java.lang.String uidPoliciesToString(int)
    {
        int i0;
        java.lang.StringBuilder $r0, r8;
        java.lang.String $r2, $r5;

        i0 := @parameter0: int;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        r8 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        if i0 != 0 goto label1;

        virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NONE");

        goto label2;

     label1:
        $r2 = staticinvoke <android.util.DebugUtils: java.lang.String flagsToString(java.lang.Class,java.lang.String,int)>(class "Landroid/net/NetworkPolicyManager;", "POLICY_", i0);

        virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

     label2:
        virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static java.lang.String uidRulesToString(int)
    {
        int i0;
        java.lang.StringBuilder $r0, r8;
        java.lang.String $r2, $r5;

        i0 := @parameter0: int;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        r8 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        if i0 != 0 goto label1;

        virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NONE");

        goto label2;

     label1:
        $r2 = staticinvoke <android.util.DebugUtils: java.lang.String flagsToString(java.lang.Class,java.lang.String,int)>(class "Landroid/net/NetworkPolicyManager;", "RULE_", i0);

        virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

     label2:
        virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public void addUidPolicy(int, int)
    {
        android.net.NetworkPolicyManager r0;
        int i0, i1;
        android.net.INetworkPolicyManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.net.NetworkPolicyManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        $r2 = r0.<android.net.NetworkPolicyManager: android.net.INetworkPolicyManager mService>;

        interfaceinvoke $r2.<android.net.INetworkPolicyManager: void addUidPolicy(int,int)>(i0, i1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void factoryReset(java.lang.String)
    {
        android.net.NetworkPolicyManager r0;
        android.net.INetworkPolicyManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.net.NetworkPolicyManager;

        r4 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<android.net.NetworkPolicyManager: android.net.INetworkPolicyManager mService>;

        interfaceinvoke $r1.<android.net.INetworkPolicyManager: void factoryReset(java.lang.String)>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.NetworkPolicy[] getNetworkPolicies()
    {
        android.net.NetworkPolicyManager r0;
        android.content.Context $r1;
        android.net.INetworkPolicyManager $r2;
        java.lang.String $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.net.NetworkPolicy[] r6;

        r0 := @this: android.net.NetworkPolicyManager;

     label1:
        $r2 = r0.<android.net.NetworkPolicyManager: android.net.INetworkPolicyManager mService>;

        $r1 = r0.<android.net.NetworkPolicyManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        r6 = interfaceinvoke $r2.<android.net.INetworkPolicyManager: android.net.NetworkPolicy[] getNetworkPolicies(java.lang.String)>($r3);

     label2:
        return r6;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean getRestrictBackground()
    {
        android.net.NetworkPolicyManager r0;
        boolean z0;
        android.net.INetworkPolicyManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.net.NetworkPolicyManager;

     label1:
        $r2 = r0.<android.net.NetworkPolicyManager: android.net.INetworkPolicyManager mService>;

        z0 = interfaceinvoke $r2.<android.net.INetworkPolicyManager: boolean getRestrictBackground()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.telephony.SubscriptionPlan[] getSubscriptionPlans(int, java.lang.String)
    {
        android.net.NetworkPolicyManager r0;
        int i0;
        android.net.INetworkPolicyManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;
        android.telephony.SubscriptionPlan[] r5;

        r0 := @this: android.net.NetworkPolicyManager;

        i0 := @parameter0: int;

        r4 := @parameter1: java.lang.String;

     label1:
        $r1 = r0.<android.net.NetworkPolicyManager: android.net.INetworkPolicyManager mService>;

        r5 = interfaceinvoke $r1.<android.net.INetworkPolicyManager: android.telephony.SubscriptionPlan[] getSubscriptionPlans(int,java.lang.String)>(i0, r4);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getUidPolicy(int)
    {
        android.net.NetworkPolicyManager r0;
        android.net.INetworkPolicyManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        int i0, i1;

        r0 := @this: android.net.NetworkPolicyManager;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.net.NetworkPolicyManager: android.net.INetworkPolicyManager mService>;

        i1 = interfaceinvoke $r2.<android.net.INetworkPolicyManager: int getUidPolicy(int)>(i0);

     label2:
        return i1;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int[] getUidsWithPolicy(int)
    {
        android.net.NetworkPolicyManager r0;
        int i0;
        android.net.INetworkPolicyManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        int[] r4;

        r0 := @this: android.net.NetworkPolicyManager;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<android.net.NetworkPolicyManager: android.net.INetworkPolicyManager mService>;

        r4 = interfaceinvoke $r1.<android.net.INetworkPolicyManager: int[] getUidsWithPolicy(int)>(i0);

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void registerListener(android.net.INetworkPolicyListener)
    {
        android.net.NetworkPolicyManager r0;
        android.net.INetworkPolicyManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.net.INetworkPolicyListener r4;

        r0 := @this: android.net.NetworkPolicyManager;

        r4 := @parameter0: android.net.INetworkPolicyListener;

     label1:
        $r1 = r0.<android.net.NetworkPolicyManager: android.net.INetworkPolicyManager mService>;

        interfaceinvoke $r1.<android.net.INetworkPolicyManager: void registerListener(android.net.INetworkPolicyListener)>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void registerSubscriptionCallback(android.net.NetworkPolicyManager$SubscriptionCallback)
    {
        android.net.NetworkPolicyManager r0;
        android.net.NetworkPolicyManager$SubscriptionCallback r1;
        java.lang.NullPointerException $r3;
        android.net.NetworkPolicyManager$SubscriptionCallbackProxy $r4;
        java.util.Map $r5;
        java.lang.Object $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: android.net.NetworkPolicyManager;

        r1 := @parameter0: android.net.NetworkPolicyManager$SubscriptionCallback;

        if r1 == null goto label2;

        $r4 = new android.net.NetworkPolicyManager$SubscriptionCallbackProxy;

        specialinvoke $r4.<android.net.NetworkPolicyManager$SubscriptionCallbackProxy: void <init>(android.net.NetworkPolicyManager,android.net.NetworkPolicyManager$SubscriptionCallback)>(r0, r1);

        $r5 = r0.<android.net.NetworkPolicyManager: java.util.Map mCallbackMap>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r1, $r4);

        if $r6 != null goto label1;

        virtualinvoke r0.<android.net.NetworkPolicyManager: void registerListener(android.net.INetworkPolicyListener)>($r4);

        return;

     label1:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Callback is already registered.");

        throw $r7;

     label2:
        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Callback cannot be null.");

        throw $r3;
    }

    public void removeUidPolicy(int, int)
    {
        android.net.NetworkPolicyManager r0;
        int i0, i1;
        android.net.INetworkPolicyManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.net.NetworkPolicyManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        $r2 = r0.<android.net.NetworkPolicyManager: android.net.INetworkPolicyManager mService>;

        interfaceinvoke $r2.<android.net.INetworkPolicyManager: void removeUidPolicy(int,int)>(i0, i1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setNetworkPolicies(android.net.NetworkPolicy[])
    {
        android.net.NetworkPolicyManager r0;
        android.net.INetworkPolicyManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.net.NetworkPolicy[] r4;

        r0 := @this: android.net.NetworkPolicyManager;

        r4 := @parameter0: android.net.NetworkPolicy[];

     label1:
        $r1 = r0.<android.net.NetworkPolicyManager: android.net.INetworkPolicyManager mService>;

        interfaceinvoke $r1.<android.net.INetworkPolicyManager: void setNetworkPolicies(android.net.NetworkPolicy[])>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setRestrictBackground(boolean)
    {
        android.net.NetworkPolicyManager r0;
        boolean z0;
        android.net.INetworkPolicyManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.net.NetworkPolicyManager;

        z0 := @parameter0: boolean;

     label1:
        $r2 = r0.<android.net.NetworkPolicyManager: android.net.INetworkPolicyManager mService>;

        interfaceinvoke $r2.<android.net.INetworkPolicyManager: void setRestrictBackground(boolean)>(z0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setSubscriptionOverride(int, int, int, long, java.lang.String)
    {
        android.net.NetworkPolicyManager r0;
        int i0, i1, i2;
        long l3;
        android.net.INetworkPolicyManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.net.NetworkPolicyManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        l3 := @parameter3: long;

        r4 := @parameter4: java.lang.String;

     label1:
        $r1 = r0.<android.net.NetworkPolicyManager: android.net.INetworkPolicyManager mService>;

        interfaceinvoke $r1.<android.net.INetworkPolicyManager: void setSubscriptionOverride(int,int,int,long,java.lang.String)>(i0, i1, i2, l3, r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setSubscriptionPlans(int, android.telephony.SubscriptionPlan[], java.lang.String)
    {
        android.net.NetworkPolicyManager r0;
        int i0;
        java.lang.String r1;
        android.net.INetworkPolicyManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.telephony.SubscriptionPlan[] r5;

        r0 := @this: android.net.NetworkPolicyManager;

        i0 := @parameter0: int;

        r5 := @parameter1: android.telephony.SubscriptionPlan[];

        r1 := @parameter2: java.lang.String;

     label1:
        $r2 = r0.<android.net.NetworkPolicyManager: android.net.INetworkPolicyManager mService>;

        interfaceinvoke $r2.<android.net.INetworkPolicyManager: void setSubscriptionPlans(int,android.telephony.SubscriptionPlan[],java.lang.String)>(i0, r5, r1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setUidPolicy(int, int)
    {
        android.net.NetworkPolicyManager r0;
        int i0, i1;
        android.net.INetworkPolicyManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.net.NetworkPolicyManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        $r2 = r0.<android.net.NetworkPolicyManager: android.net.INetworkPolicyManager mService>;

        interfaceinvoke $r2.<android.net.INetworkPolicyManager: void setUidPolicy(int,int)>(i0, i1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void unregisterListener(android.net.INetworkPolicyListener)
    {
        android.net.NetworkPolicyManager r0;
        android.net.INetworkPolicyManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.net.INetworkPolicyListener r4;

        r0 := @this: android.net.NetworkPolicyManager;

        r4 := @parameter0: android.net.INetworkPolicyListener;

     label1:
        $r1 = r0.<android.net.NetworkPolicyManager: android.net.INetworkPolicyManager mService>;

        interfaceinvoke $r1.<android.net.INetworkPolicyManager: void unregisterListener(android.net.INetworkPolicyListener)>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void unregisterSubscriptionCallback(android.net.NetworkPolicyManager$SubscriptionCallback)
    {
        android.net.NetworkPolicyManager r0;
        java.lang.NullPointerException $r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        android.net.NetworkPolicyManager$SubscriptionCallback r4;
        android.net.NetworkPolicyManager$SubscriptionCallbackProxy r5;

        r0 := @this: android.net.NetworkPolicyManager;

        r4 := @parameter0: android.net.NetworkPolicyManager$SubscriptionCallback;

        if r4 == null goto label2;

        $r2 = r0.<android.net.NetworkPolicyManager: java.util.Map mCallbackMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r4);

        r5 = (android.net.NetworkPolicyManager$SubscriptionCallbackProxy) $r3;

        if r5 != null goto label1;

        return;

     label1:
        virtualinvoke r0.<android.net.NetworkPolicyManager: void unregisterListener(android.net.INetworkPolicyListener)>(r5);

        return;

     label2:
        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("Callback cannot be null.");

        throw $r1;
    }

    public static void <clinit>()
    {
        <android.net.NetworkPolicyManager: int SUBSCRIPTION_OVERRIDE_UNMETERED> = 1;

        <android.net.NetworkPolicyManager: int SUBSCRIPTION_OVERRIDE_CONGESTED> = 2;

        <android.net.NetworkPolicyManager: int RULE_TEMPORARY_ALLOW_METERED> = 2;

        <android.net.NetworkPolicyManager: int RULE_REJECT_METERED> = 4;

        <android.net.NetworkPolicyManager: int RULE_REJECT_ALL> = 64;

        <android.net.NetworkPolicyManager: int RULE_NONE> = 0;

        <android.net.NetworkPolicyManager: int RULE_ALLOW_METERED> = 1;

        <android.net.NetworkPolicyManager: int RULE_ALLOW_ALL> = 32;

        <android.net.NetworkPolicyManager: int POLICY_REJECT_METERED_BACKGROUND> = 1;

        <android.net.NetworkPolicyManager: int POLICY_NONE> = 0;

        <android.net.NetworkPolicyManager: int POLICY_ALLOW_METERED_BACKGROUND> = 4;

        <android.net.NetworkPolicyManager: int MASK_METERED_NETWORKS> = 15;

        <android.net.NetworkPolicyManager: int MASK_ALL_NETWORKS> = 240;

        <android.net.NetworkPolicyManager: int FOREGROUND_THRESHOLD_STATE> = 5;

        <android.net.NetworkPolicyManager: int FIREWALL_RULE_DEFAULT> = 0;

        <android.net.NetworkPolicyManager: java.lang.String FIREWALL_CHAIN_NAME_STANDBY> = "standby";

        <android.net.NetworkPolicyManager: java.lang.String FIREWALL_CHAIN_NAME_POWERSAVE> = "powersave";

        <android.net.NetworkPolicyManager: java.lang.String FIREWALL_CHAIN_NAME_NONE> = "none";

        <android.net.NetworkPolicyManager: java.lang.String FIREWALL_CHAIN_NAME_DOZABLE> = "dozable";

        <android.net.NetworkPolicyManager: java.lang.String EXTRA_NETWORK_TEMPLATE> = "android.net.NETWORK_TEMPLATE";

        <android.net.NetworkPolicyManager: boolean ALLOW_PLATFORM_APP_POLICY> = 1;

        return;
    }
}
