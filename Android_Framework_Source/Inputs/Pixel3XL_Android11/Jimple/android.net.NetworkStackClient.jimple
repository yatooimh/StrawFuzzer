public class android.net.NetworkStackClient extends java.lang.Object
{
    private static final int NETWORKSTACK_TIMEOUT_MS;
    private static final java.lang.String TAG;
    private static android.net.NetworkStackClient sInstance;
    private android.net.INetworkStackConnector mConnector;
    private final android.net.NetworkStackClient$Dependencies mDependencies;
    private final android.net.util.SharedLog mLog;
    private final java.util.ArrayList mPendingNetStackRequests;
    private volatile boolean mWasSystemServerInitialized;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        <android.net.NetworkStackClient: int NETWORKSTACK_TIMEOUT_MS> = 10000;

        $r0 = class "Landroid/net/NetworkStackClient;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <android.net.NetworkStackClient: java.lang.String TAG> = $r1;

        return;
    }

    private void <init>()
    {
        android.net.NetworkStackClient r0;
        android.net.NetworkStackClient$DependenciesImpl $r1;

        r0 := @this: android.net.NetworkStackClient;

        $r1 = new android.net.NetworkStackClient$DependenciesImpl;

        specialinvoke $r1.<android.net.NetworkStackClient$DependenciesImpl: void <init>(android.net.NetworkStackClient$1)>(null);

        specialinvoke r0.<android.net.NetworkStackClient: void <init>(android.net.NetworkStackClient$Dependencies)>($r1);

        return;
    }

    protected void <init>(android.net.NetworkStackClient$Dependencies)
    {
        android.net.NetworkStackClient r0;
        android.net.NetworkStackClient$Dependencies r1;
        java.util.ArrayList $r2;
        android.net.util.SharedLog $r3;
        java.lang.String $r4;

        r0 := @this: android.net.NetworkStackClient;

        r1 := @parameter0: android.net.NetworkStackClient$Dependencies;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<android.net.NetworkStackClient: java.util.ArrayList mPendingNetStackRequests> = $r2;

        $r3 = new android.net.util.SharedLog;

        $r4 = <android.net.NetworkStackClient: java.lang.String TAG>;

        specialinvoke $r3.<android.net.util.SharedLog: void <init>(java.lang.String)>($r4);

        r0.<android.net.NetworkStackClient: android.net.util.SharedLog mLog> = $r3;

        r0.<android.net.NetworkStackClient: boolean mWasSystemServerInitialized> = 0;

        r0.<android.net.NetworkStackClient: android.net.NetworkStackClient$Dependencies mDependencies> = r1;

        return;
    }

    static void access$100(android.net.NetworkStackClient, java.lang.String)
    {
        android.net.NetworkStackClient r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.NetworkStackClient;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.net.NetworkStackClient: void logi(java.lang.String)>(r1);

        return;
    }

    static void access$200(android.net.NetworkStackClient, android.os.IBinder)
    {
        android.net.NetworkStackClient r0;
        android.os.IBinder r1;

        r0 := @parameter0: android.net.NetworkStackClient;

        r1 := @parameter1: android.os.IBinder;

        specialinvoke r0.<android.net.NetworkStackClient: void registerNetworkStackService(android.os.IBinder)>(r1);

        return;
    }

    public static android.net.NetworkStackClient getInstance()
    {
        android.net.NetworkStackClient $r0, r2, r3;
        java.lang.Throwable $r1;

        entermonitor class "Landroid/net/NetworkStackClient;";

     label1:
        $r0 = <android.net.NetworkStackClient: android.net.NetworkStackClient sInstance>;

        if $r0 != null goto label2;

        r2 = new android.net.NetworkStackClient;

        specialinvoke r2.<android.net.NetworkStackClient: void <init>()>();

        <android.net.NetworkStackClient: android.net.NetworkStackClient sInstance> = r2;

     label2:
        r3 = <android.net.NetworkStackClient: android.net.NetworkStackClient sInstance>;

     label3:
        exitmonitor class "Landroid/net/NetworkStackClient;";

        return r3;

     label4:
        $r1 := @caughtexception;

        exitmonitor class "Landroid/net/NetworkStackClient;";

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    private android.net.INetworkStackConnector getRemoteConnector()
    {
        android.net.NetworkStackClient r0;
        long l0, $l1, $l2;
        android.net.INetworkStackConnector $r1;
        byte $b3;
        java.lang.Throwable $r2;
        android.os.IBinder r3;

        r0 := @this: android.net.NetworkStackClient;

     label1:
        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label2:
        r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("network_stack");

     label3:
        if r3 != null goto label6;

     label4:
        staticinvoke <java.lang.Thread: void sleep(long)>(20L);

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l2 = $l1 - l0;

        $b3 = $l2 cmp 10000L;

        if $b3 <= 0 goto label2;

        specialinvoke r0.<android.net.NetworkStackClient: void loge(java.lang.String,java.lang.Throwable)>("Timeout waiting for NetworkStack connector", null);

     label5:
        return null;

     label6:
        $r1 = staticinvoke <android.net.INetworkStackConnector$Stub: android.net.INetworkStackConnector asInterface(android.os.IBinder)>(r3);

        return $r1;

     label7:
        $r2 := @caughtexception;

        specialinvoke r0.<android.net.NetworkStackClient: void loge(java.lang.String,java.lang.Throwable)>("Error waiting for NetworkStack connector", $r2);

        return null;

        catch java.lang.InterruptedException from label1 to label2 with label7;
        catch java.lang.InterruptedException from label2 to label3 with label7;
        catch java.lang.InterruptedException from label4 to label5 with label7;
    }

    static void lambda$fetchIpMemoryStore$3(android.net.IIpMemoryStoreCallbacks, android.net.INetworkStackConnector)
    {
        android.net.INetworkStackConnector r0;
        android.os.RemoteException $r1;
        android.net.IIpMemoryStoreCallbacks r3;

        r3 := @parameter0: android.net.IIpMemoryStoreCallbacks;

        r0 := @parameter1: android.net.INetworkStackConnector;

     label1:
        interfaceinvoke r0.<android.net.INetworkStackConnector: void fetchIpMemoryStore(android.net.IIpMemoryStoreCallbacks)>(r3);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    static void lambda$makeDhcpServer$0(java.lang.String, android.net.dhcp.DhcpServingParamsParcel, android.net.dhcp.IDhcpServerCallbacks, android.net.INetworkStackConnector)
    {
        android.net.dhcp.DhcpServingParamsParcel r0;
        android.net.dhcp.IDhcpServerCallbacks r1;
        android.net.INetworkStackConnector r2;
        android.os.RemoteException $r3;
        java.lang.String r5;

        r5 := @parameter0: java.lang.String;

        r0 := @parameter1: android.net.dhcp.DhcpServingParamsParcel;

        r1 := @parameter2: android.net.dhcp.IDhcpServerCallbacks;

        r2 := @parameter3: android.net.INetworkStackConnector;

     label1:
        interfaceinvoke r2.<android.net.INetworkStackConnector: void makeDhcpServer(java.lang.String,android.net.dhcp.DhcpServingParamsParcel,android.net.dhcp.IDhcpServerCallbacks)>(r5, r0, r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    static void lambda$makeIpClient$1(java.lang.String, android.net.ip.IIpClientCallbacks, android.net.INetworkStackConnector)
    {
        android.net.ip.IIpClientCallbacks r0;
        android.net.INetworkStackConnector r1;
        android.os.RemoteException $r2;
        java.lang.String r4;

        r4 := @parameter0: java.lang.String;

        r0 := @parameter1: android.net.ip.IIpClientCallbacks;

        r1 := @parameter2: android.net.INetworkStackConnector;

     label1:
        interfaceinvoke r1.<android.net.INetworkStackConnector: void makeIpClient(java.lang.String,android.net.ip.IIpClientCallbacks)>(r4, r0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    static void lambda$makeNetworkMonitor$2(android.net.Network, java.lang.String, android.net.INetworkMonitorCallbacks, android.net.INetworkStackConnector)
    {
        java.lang.String r0;
        android.net.INetworkMonitorCallbacks r1;
        android.net.INetworkStackConnector r2;
        android.os.RemoteException $r3;
        android.net.Network r5;

        r5 := @parameter0: android.net.Network;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: android.net.INetworkMonitorCallbacks;

        r2 := @parameter3: android.net.INetworkStackConnector;

     label1:
        interfaceinvoke r2.<android.net.INetworkStackConnector: void makeNetworkMonitor(android.net.Network,java.lang.String,android.net.INetworkMonitorCallbacks)>(r5, r0, r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void log(java.lang.String)
    {
        android.net.NetworkStackClient r0;
        android.net.util.SharedLog r1, $r2;
        java.lang.Throwable $r3;
        java.lang.String r4;

        r0 := @this: android.net.NetworkStackClient;

        r4 := @parameter0: java.lang.String;

        r1 = r0.<android.net.NetworkStackClient: android.net.util.SharedLog mLog>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.net.NetworkStackClient: android.net.util.SharedLog mLog>;

        virtualinvoke $r2.<android.net.util.SharedLog: void log(java.lang.String)>(r4);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void logWtf(java.lang.String, java.lang.Throwable)
    {
        android.net.NetworkStackClient r0;
        java.lang.Throwable r1, $r5;
        android.net.util.SharedLog r2, $r4;
        java.lang.String $r3, r6;

        r0 := @this: android.net.NetworkStackClient;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Throwable;

        $r3 = <android.net.NetworkStackClient: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>($r3, r6);

        r2 = r0.<android.net.NetworkStackClient: android.net.util.SharedLog mLog>;

        entermonitor r2;

     label1:
        $r4 = r0.<android.net.NetworkStackClient: android.net.util.SharedLog mLog>;

        virtualinvoke $r4.<android.net.util.SharedLog: void e(java.lang.String,java.lang.Throwable)>(r6, r1);

        exitmonitor r2;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r2;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void loge(java.lang.String, java.lang.Throwable)
    {
        android.net.NetworkStackClient r0;
        java.lang.Throwable r1, $r4;
        android.net.util.SharedLog r2, $r3;
        java.lang.String r5;

        r0 := @this: android.net.NetworkStackClient;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Throwable;

        r2 = r0.<android.net.NetworkStackClient: android.net.util.SharedLog mLog>;

        entermonitor r2;

     label1:
        $r3 = r0.<android.net.NetworkStackClient: android.net.util.SharedLog mLog>;

        virtualinvoke $r3.<android.net.util.SharedLog: void e(java.lang.String,java.lang.Throwable)>(r5, r1);

        exitmonitor r2;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r2;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void logi(java.lang.String)
    {
        android.net.NetworkStackClient r0;
        android.net.util.SharedLog r1, $r2;
        java.lang.Throwable $r3;
        java.lang.String r4;

        r0 := @this: android.net.NetworkStackClient;

        r4 := @parameter0: java.lang.String;

        r1 = r0.<android.net.NetworkStackClient: android.net.util.SharedLog mLog>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.net.NetworkStackClient: android.net.util.SharedLog mLog>;

        virtualinvoke $r2.<android.net.util.SharedLog: void i(java.lang.String)>(r4);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void registerNetworkStackService(android.os.IBinder)
    {
        android.net.NetworkStackClient r0;
        java.util.ArrayList r1, $r3, $r4, r10;
        android.net.NetworkStackClient$Dependencies $r2;
        boolean $z0;
        java.lang.Object $r5;
        android.net.NetworkStackClient$NetworkStackCallback $r6;
        java.lang.Throwable $r7;
        android.os.IBinder r8;
        android.net.INetworkStackConnector r9;
        java.util.Iterator r11;

        r0 := @this: android.net.NetworkStackClient;

        r8 := @parameter0: android.os.IBinder;

        r9 = staticinvoke <android.net.INetworkStackConnector$Stub: android.net.INetworkStackConnector asInterface(android.os.IBinder)>(r8);

        $r2 = r0.<android.net.NetworkStackClient: android.net.NetworkStackClient$Dependencies mDependencies>;

        interfaceinvoke $r2.<android.net.NetworkStackClient$Dependencies: void addToServiceManager(android.os.IBinder)>(r8);

        specialinvoke r0.<android.net.NetworkStackClient: void log(java.lang.String)>("Network stack service registered");

        r10 = r0.<android.net.NetworkStackClient: java.util.ArrayList mPendingNetStackRequests>;

        entermonitor r10;

     label1:
        r1 = new java.util.ArrayList;

        $r3 = r0.<android.net.NetworkStackClient: java.util.ArrayList mPendingNetStackRequests>;

        specialinvoke r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        $r4 = r0.<android.net.NetworkStackClient: java.util.ArrayList mPendingNetStackRequests>;

        virtualinvoke $r4.<java.util.ArrayList: void clear()>();

        r0.<android.net.NetworkStackClient: android.net.INetworkStackConnector mConnector> = r9;

        exitmonitor r10;

     label2:
        r11 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (android.net.NetworkStackClient$NetworkStackCallback) $r5;

        interfaceinvoke $r6.<android.net.NetworkStackClient$NetworkStackCallback: void onNetworkStackConnected(android.net.INetworkStackConnector)>(r9);

        goto label3;

     label4:
        return;

     label5:
        $r7 := @caughtexception;

     label6:
        exitmonitor r10;

     label7:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void requestConnector(android.net.NetworkStackClient$NetworkStackCallback)
    {
        android.net.NetworkStackClient r0;
        android.net.NetworkStackClient$Dependencies $r1;
        boolean $z0;
        java.util.ArrayList $r2, r7, r9;
        java.lang.Throwable $r3, $r4;
        android.net.NetworkStackClient$NetworkStackCallback r5;
        android.net.INetworkStackConnector r6, r10;

        r0 := @this: android.net.NetworkStackClient;

        r5 := @parameter0: android.net.NetworkStackClient$NetworkStackCallback;

        $r1 = r0.<android.net.NetworkStackClient: android.net.NetworkStackClient$Dependencies mDependencies>;

        interfaceinvoke $r1.<android.net.NetworkStackClient$Dependencies: void checkCallerUid()>();

        $z0 = r0.<android.net.NetworkStackClient: boolean mWasSystemServerInitialized>;

        if $z0 != 0 goto label06;

        r6 = specialinvoke r0.<android.net.NetworkStackClient: android.net.INetworkStackConnector getRemoteConnector()>();

        r7 = r0.<android.net.NetworkStackClient: java.util.ArrayList mPendingNetStackRequests>;

        entermonitor r7;

     label01:
        r0.<android.net.NetworkStackClient: android.net.INetworkStackConnector mConnector> = r6;

        exitmonitor r7;

     label02:
        interfaceinvoke r5.<android.net.NetworkStackClient$NetworkStackCallback: void onNetworkStackConnected(android.net.INetworkStackConnector)>(r6);

        return;

     label03:
        $r4 := @caughtexception;

     label04:
        exitmonitor r7;

     label05:
        throw $r4;

     label06:
        r9 = r0.<android.net.NetworkStackClient: java.util.ArrayList mPendingNetStackRequests>;

        entermonitor r9;

     label07:
        r10 = r0.<android.net.NetworkStackClient: android.net.INetworkStackConnector mConnector>;

     label08:
        if r10 != null goto label11;

     label09:
        $r2 = r0.<android.net.NetworkStackClient: java.util.ArrayList mPendingNetStackRequests>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r5);

        exitmonitor r9;

     label10:
        return;

     label11:
        exitmonitor r9;

     label12:
        interfaceinvoke r5.<android.net.NetworkStackClient$NetworkStackCallback: void onNetworkStackConnected(android.net.INetworkStackConnector)>(r10);

        return;

     label13:
        $r3 := @caughtexception;

     label14:
        exitmonitor r9;

     label15:
        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label04 to label05 with label03;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public void dump(java.io.PrintWriter)
    {
        android.net.NetworkStackClient r0;
        int i0;
        android.net.util.SharedLog $r1;
        android.net.ConnectivityModuleConnector $r2;
        java.util.ArrayList $r3, r10;
        java.lang.StringBuilder $r4;
        java.lang.String $r7;
        java.lang.Throwable $r8;
        java.io.PrintWriter r9;

        r0 := @this: android.net.NetworkStackClient;

        r9 := @parameter0: java.io.PrintWriter;

        $r1 = r0.<android.net.NetworkStackClient: android.net.util.SharedLog mLog>;

        virtualinvoke $r1.<android.net.util.SharedLog: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(null, r9, null);

        $r2 = staticinvoke <android.net.ConnectivityModuleConnector: android.net.ConnectivityModuleConnector getInstance()>();

        virtualinvoke $r2.<android.net.ConnectivityModuleConnector: void dump(java.io.PrintWriter)>(r9);

        r10 = r0.<android.net.NetworkStackClient: java.util.ArrayList mPendingNetStackRequests>;

        entermonitor r10;

     label1:
        $r3 = r0.<android.net.NetworkStackClient: java.util.ArrayList mPendingNetStackRequests>;

        i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        exitmonitor r10;

     label2:
        virtualinvoke r9.<java.io.PrintWriter: void println()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pendingNetStackRequests length: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r9.<java.io.PrintWriter: void println(java.lang.String)>($r7);

        return;

     label3:
        $r8 := @caughtexception;

     label4:
        exitmonitor r10;

     label5:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void fetchIpMemoryStore(android.net.IIpMemoryStoreCallbacks)
    {
        android.net.NetworkStackClient r0;
        android.net.IIpMemoryStoreCallbacks r1;
        android.net._$$Lambda$NetworkStackClient$qInwLPrclXOFvKSYRjcCaCSeEhw $r2;

        r0 := @this: android.net.NetworkStackClient;

        r1 := @parameter0: android.net.IIpMemoryStoreCallbacks;

        $r2 = new android.net._$$Lambda$NetworkStackClient$qInwLPrclXOFvKSYRjcCaCSeEhw;

        specialinvoke $r2.<android.net._$$Lambda$NetworkStackClient$qInwLPrclXOFvKSYRjcCaCSeEhw: void <init>(android.net.IIpMemoryStoreCallbacks)>(r1);

        specialinvoke r0.<android.net.NetworkStackClient: void requestConnector(android.net.NetworkStackClient$NetworkStackCallback)>($r2);

        return;
    }

    public void init()
    {
        android.net.NetworkStackClient r0;

        r0 := @this: android.net.NetworkStackClient;

        specialinvoke r0.<android.net.NetworkStackClient: void log(java.lang.String)>("Network stack init");

        r0.<android.net.NetworkStackClient: boolean mWasSystemServerInitialized> = 1;

        return;
    }

    public void makeDhcpServer(java.lang.String, android.net.dhcp.DhcpServingParamsParcel, android.net.dhcp.IDhcpServerCallbacks)
    {
        android.net.NetworkStackClient r0;
        java.lang.String r1;
        android.net.dhcp.DhcpServingParamsParcel r2;
        android.net.dhcp.IDhcpServerCallbacks r3;
        android.net._$$Lambda$NetworkStackClient$tuv4lz5fwSxR2XuU69pB4cKkltA $r4;

        r0 := @this: android.net.NetworkStackClient;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.net.dhcp.DhcpServingParamsParcel;

        r3 := @parameter2: android.net.dhcp.IDhcpServerCallbacks;

        $r4 = new android.net._$$Lambda$NetworkStackClient$tuv4lz5fwSxR2XuU69pB4cKkltA;

        specialinvoke $r4.<android.net._$$Lambda$NetworkStackClient$tuv4lz5fwSxR2XuU69pB4cKkltA: void <init>(java.lang.String,android.net.dhcp.DhcpServingParamsParcel,android.net.dhcp.IDhcpServerCallbacks)>(r1, r2, r3);

        specialinvoke r0.<android.net.NetworkStackClient: void requestConnector(android.net.NetworkStackClient$NetworkStackCallback)>($r4);

        return;
    }

    public void makeIpClient(java.lang.String, android.net.ip.IIpClientCallbacks)
    {
        android.net.NetworkStackClient r0;
        java.lang.String r1;
        android.net.ip.IIpClientCallbacks r2;
        android.net._$$Lambda$NetworkStackClient$EsrnifYD8E_HxTwVQsf45HJKvtM $r3;

        r0 := @this: android.net.NetworkStackClient;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.net.ip.IIpClientCallbacks;

        $r3 = new android.net._$$Lambda$NetworkStackClient$EsrnifYD8E_HxTwVQsf45HJKvtM;

        specialinvoke $r3.<android.net._$$Lambda$NetworkStackClient$EsrnifYD8E_HxTwVQsf45HJKvtM: void <init>(java.lang.String,android.net.ip.IIpClientCallbacks)>(r1, r2);

        specialinvoke r0.<android.net.NetworkStackClient: void requestConnector(android.net.NetworkStackClient$NetworkStackCallback)>($r3);

        return;
    }

    public void makeNetworkMonitor(android.net.Network, java.lang.String, android.net.INetworkMonitorCallbacks)
    {
        android.net.NetworkStackClient r0;
        android.net.Network r1;
        java.lang.String r2;
        android.net.INetworkMonitorCallbacks r3;
        android.net._$$Lambda$NetworkStackClient$8Y7GJyozK7_xixdmgfHS4QSif_A $r4;

        r0 := @this: android.net.NetworkStackClient;

        r1 := @parameter0: android.net.Network;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.net.INetworkMonitorCallbacks;

        $r4 = new android.net._$$Lambda$NetworkStackClient$8Y7GJyozK7_xixdmgfHS4QSif_A;

        specialinvoke $r4.<android.net._$$Lambda$NetworkStackClient$8Y7GJyozK7_xixdmgfHS4QSif_A: void <init>(android.net.Network,java.lang.String,android.net.INetworkMonitorCallbacks)>(r1, r2, r3);

        specialinvoke r0.<android.net.NetworkStackClient: void requestConnector(android.net.NetworkStackClient$NetworkStackCallback)>($r4);

        return;
    }

    public void start()
    {
        android.net.NetworkStackClient r0;
        android.net.NetworkStackClient$Dependencies $r1;
        android.net.ConnectivityModuleConnector $r2;
        java.lang.Class $r3;
        java.lang.String $r4;
        android.net.NetworkStackClient$NetworkStackConnection $r5;

        r0 := @this: android.net.NetworkStackClient;

        $r1 = r0.<android.net.NetworkStackClient: android.net.NetworkStackClient$Dependencies mDependencies>;

        $r2 = interfaceinvoke $r1.<android.net.NetworkStackClient$Dependencies: android.net.ConnectivityModuleConnector getConnectivityModuleConnector()>();

        $r3 = class "Landroid/net/INetworkStackConnector;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5 = new android.net.NetworkStackClient$NetworkStackConnection;

        specialinvoke $r5.<android.net.NetworkStackClient$NetworkStackConnection: void <init>(android.net.NetworkStackClient,android.net.NetworkStackClient$1)>(r0, null);

        virtualinvoke $r2.<android.net.ConnectivityModuleConnector: void startModuleService(java.lang.String,java.lang.String,android.net.ConnectivityModuleConnector$ModuleServiceCallback)>($r4, "android.permission.MAINLINE_NETWORK_STACK", $r5);

        specialinvoke r0.<android.net.NetworkStackClient: void log(java.lang.String)>("Network stack service start requested");

        return;
    }
}
