public class android.net.NetworkUtils extends java.lang.Object
{
    private static final int[] ADDRESS_FAMILIES;
    private static final java.lang.String TAG;

    static void <clinit>()
    {
        int[] $r0;
        int $i0, $i1;

        <android.net.NetworkUtils: java.lang.String TAG> = "NetworkUtils";

        $r0 = newarray (int)[2];

        $i0 = <android.system.OsConstants: int AF_INET>;

        $r0[0] = $i0;

        $i1 = <android.system.OsConstants: int AF_INET6>;

        $r0[1] = $i1;

        <android.net.NetworkUtils: int[] ADDRESS_FAMILIES> = $r0;

        return;
    }

    public void <init>()
    {
        android.net.NetworkUtils r0;

        r0 := @this: android.net.NetworkUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static native void attachDropAllBPFFilter(java.io.FileDescriptor) throws java.net.SocketException;

    public static native boolean bindProcessToNetwork(int);

    public static native boolean bindProcessToNetworkForHostResolution(int);

    public static native int bindSocketToNetwork(int, int);

    private static java.util.TreeSet deduplicatePrefixSet(java.util.TreeSet)
    {
        java.util.Iterator r1, r9;
        android.net.IpPrefix r2, $r7;
        java.util.TreeSet $r3, r8;
        java.util.Comparator $r4;
        java.lang.Object $r5, $r6;
        boolean $z0, $z2, $z3;

        r8 := @parameter0: java.util.TreeSet;

        $r3 = new java.util.TreeSet;

        $r4 = virtualinvoke r8.<java.util.TreeSet: java.util.Comparator comparator()>();

        specialinvoke $r3.<java.util.TreeSet: void <init>(java.util.Comparator)>($r4);

        r1 = virtualinvoke r8.<java.util.TreeSet: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label5;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.net.IpPrefix) $r5;

        r9 = virtualinvoke $r3.<java.util.TreeSet: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (android.net.IpPrefix) $r6;

        $z2 = virtualinvoke $r7.<android.net.IpPrefix: boolean containsPrefix(android.net.IpPrefix)>(r2);

        if $z2 == 0 goto label3;

        goto label1;

     label3:
        goto label2;

     label4:
        virtualinvoke $r3.<java.util.TreeSet: boolean add(java.lang.Object)>(r2);

        goto label1;

     label5:
        return $r3;
    }

    public static native void detachBPFFilter(java.io.FileDescriptor) throws java.net.SocketException;

    public static native int getBoundNetworkForProcess();

    public static native android.net.Network getDnsNetwork() throws android.system.ErrnoException;

    public static int getImplicitNetmask(java.net.Inet4Address)
    {
        java.net.Inet4Address r0;
        int $i0;

        r0 := @parameter0: java.net.Inet4Address;

        $i0 = staticinvoke <com.android.net.module.util.Inet4AddressUtils: int getImplicitNetmask(java.net.Inet4Address)>(r0);

        return $i0;
    }

    public static java.net.InetAddress getNetworkPart(java.net.InetAddress, int)
    {
        int i0;
        java.lang.Throwable $r1;
        java.lang.String $r4, $r7;
        java.net.InetAddress r8, r10;
        byte[] r9;
        java.lang.StringBuilder r12;
        java.lang.RuntimeException r13;
        java.net.UnknownHostException r14;

        r8 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        r9 = virtualinvoke r8.<java.net.InetAddress: byte[] getAddress()>();

        staticinvoke <android.net.NetworkUtils: void maskRawAddress(byte[],int)>(r9, i0);

     label1:
        r10 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>(r9);

     label2:
        return r10;

     label3:
        $r1 := @caughtexception;

        r12 = new java.lang.StringBuilder;

        specialinvoke r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getNetworkPart error - ");

        r14 = (java.net.UnknownHostException) $r1;

        $r4 = virtualinvoke r14.<java.net.UnknownHostException: java.lang.String toString()>();

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        r13 = new java.lang.RuntimeException;

        $r7 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r13.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7);

        throw r13;

        catch java.net.UnknownHostException from label1 to label2 with label3;
    }

    public static native android.net.TcpRepairWindow getTcpRepairWindow(java.io.FileDescriptor) throws android.system.ErrnoException;

    public static java.net.InetAddress hexToInet6Address(java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.lang.String r0, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r19;
        java.lang.Object[] $r2;
        java.util.Locale $r3;
        java.lang.Exception $r13;
        java.lang.StringBuilder $r14;
        java.lang.IllegalArgumentException $r20;
        java.net.InetAddress r21;

        r0 := @parameter0: java.lang.String;

     label1:
        $r3 = <java.util.Locale: java.util.Locale US>;

        $r2 = newarray (java.lang.Object)[8];

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, 4);

        $r2[0] = $r4;

        $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(4, 8);

        $r2[1] = $r5;

        $r6 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(8, 12);

        $r2[2] = $r6;

        $r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(12, 16);

        $r2[3] = $r7;

        $r8 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(16, 20);

        $r2[4] = $r8;

        $r9 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(20, 24);

        $r2[5] = $r9;

        $r10 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(24, 28);

        $r2[6] = $r10;

        $r11 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(28, 32);

        $r2[7] = $r11;

        $r12 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r3, "%s:%s:%s:%s:%s:%s:%s:%s", $r2);

        r21 = staticinvoke <android.net.NetworkUtils: java.net.InetAddress numericToInetAddress(java.lang.String)>($r12);

     label2:
        return r21;

     label3:
        $r13 := @caughtexception;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("error in hexToInet6Address(");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r19 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("NetworkUtils", $r19);

        $r20 = new java.lang.IllegalArgumentException;

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r13);

        throw $r20;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static int inetAddressToInt(java.net.Inet4Address) throws java.lang.IllegalArgumentException
    {
        java.net.Inet4Address r0;
        int $i0;

        r0 := @parameter0: java.net.Inet4Address;

        $i0 = staticinvoke <com.android.net.module.util.Inet4AddressUtils: int inet4AddressToIntHTL(java.net.Inet4Address)>(r0);

        return $i0;
    }

    public static java.net.InetAddress intToInetAddress(int)
    {
        int i0;
        java.net.Inet4Address $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <com.android.net.module.util.Inet4AddressUtils: java.net.Inet4Address intToInet4AddressHTL(int)>(i0);

        return $r0;
    }

    public static boolean isWeaklyValidatedHostname(java.lang.String)
    {
        java.lang.String r0;
        int[] r1;
        int i0, $i1, i2;
        boolean $z0;
        java.net.InetAddress $r2;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("^[a-zA-Z0-9_.-]+$");

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = <android.net.NetworkUtils: int[] ADDRESS_FAMILIES>;

        i0 = lengthof r1;

        i2 = 0;

     label2:
        if i2 >= i0 goto label4;

        $i1 = r1[i2];

        $r2 = staticinvoke <android.system.Os: java.net.InetAddress inet_pton(int,java.lang.String)>($i1, r0);

        if $r2 == null goto label3;

        return 0;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        return 1;
    }

    public static java.lang.String[] makeStrings(java.util.Collection)
    {
        java.lang.String[] r0;
        int $i0, i1;
        boolean $z0;
        java.lang.Object $r1;
        java.net.InetAddress $r2;
        java.lang.String $r3;
        java.util.Collection r4;
        java.util.Iterator r5;

        r4 := @parameter0: java.util.Collection;

        $i0 = interfaceinvoke r4.<java.util.Collection: int size()>();

        r0 = newarray (java.lang.String)[$i0];

        i1 = 0;

        r5 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r1 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        $r2 = (java.net.InetAddress) $r1;

        $r3 = virtualinvoke $r2.<java.net.InetAddress: java.lang.String getHostAddress()>();

        r0[i1] = $r3;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public static void maskRawAddress(byte[], int)
    {
        byte[] r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i13, i15, $i16;
        java.lang.StringBuilder $r2;
        java.lang.RuntimeException $r7;
        java.lang.String $r8;
        byte $b8, $b9, $b10, $b11, $b12, b14;

        r0 := @parameter0: byte[];

        i13 := @parameter1: int;

        if i13 < 0 goto label4;

        $i2 = lengthof r0;

        $i3 = $i2 * 8;

        if i13 > $i3 goto label4;

        i0 = i13 / 8;

        $i4 = i13 % 8;

        $i5 = 8 - $i4;

        $i6 = 255 << $i5;

        b14 = (byte) $i6;

        $i7 = lengthof r0;

        if i0 >= $i7 goto label1;

        $b9 = r0[i0];

        $b10 = $b9 & b14;

        $b11 = (byte) $b10;

        $b12 = (byte) $b11;

        r0[i0] = $b12;

     label1:
        i15 = i0 + 1;

     label2:
        $i16 = lengthof r0;

        if i15 >= $i16 goto label3;

        $b8 = (byte) 0;

        r0[i15] = $b8;

        i15 = i15 + 1;

        goto label2;

     label3:
        return;

     label4:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IP address with ");

        $i1 = lengthof r0;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes has invalid prefix length ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i13);

        $r7 = new java.lang.RuntimeException;

        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>($r8);

        throw $r7;
    }

    public static int netmaskIntToPrefixLength(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = staticinvoke <java.lang.Integer: int bitCount(int)>(i0);

        return $i1;
    }

    public static int netmaskToPrefixLength(java.net.Inet4Address)
    {
        java.net.Inet4Address r0;
        int $i0;

        r0 := @parameter0: java.net.Inet4Address;

        $i0 = staticinvoke <com.android.net.module.util.Inet4AddressUtils: int netmaskToPrefixLength(java.net.Inet4Address)>(r0);

        return $i0;
    }

    public static java.net.InetAddress numericToInetAddress(java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.lang.String r0;
        java.net.InetAddress $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.net.InetAddress: java.net.InetAddress parseNumericAddress(java.lang.String)>(r0);

        return $r1;
    }

    public static android.util.Pair parseIpAndMask(java.lang.String)
    {
        java.lang.String r0, $r1, $r2, $r5;
        java.lang.StringBuilder $r3;
        java.lang.IllegalArgumentException $r4;
        android.util.Pair $r6;
        java.lang.Integer $r7;
        java.lang.NullPointerException $r8;
        java.lang.ArrayIndexOutOfBoundsException $r9;
        java.lang.Throwable $r10, $r11;
        java.net.InetAddress r12, r14;
        int i0, i1, i2, i3, i4;
        java.lang.String[] r13;

        r0 := @parameter0: java.lang.String;

        r12 = null;

        i0 = -1;

        i1 = -1;

        i2 = -1;

        i3 = -1;

     label01:
        r13 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>("/", 2);

     label02:
        i0 = -1;

        i1 = -1;

        i2 = -1;

        i3 = -1;

     label03:
        $r1 = r13[1];

        i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

     label04:
        i0 = i4;

        i1 = i4;

        i2 = i4;

        i3 = i4;

     label05:
        $r2 = r13[0];

        r14 = staticinvoke <java.net.InetAddress: java.net.InetAddress parseNumericAddress(java.lang.String)>($r2);

     label06:
        r12 = r14;

        goto label11;

     label07:
        $r10 := @caughtexception;

        r12 = null;

        i4 = i0;

        goto label11;

     label08:
        $r11 := @caughtexception;

        i4 = i1;

        goto label11;

     label09:
        $r9 := @caughtexception;

        i4 = i2;

        goto label11;

     label10:
        $r8 := @caughtexception;

        i4 = i3;

     label11:
        if r12 == null goto label12;

        if i4 == -1 goto label12;

        $r6 = new android.util.Pair;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        specialinvoke $r6.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>(r12, $r7);

        return $r6;

     label12:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid IP address and mask ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;

        catch java.lang.NullPointerException from label01 to label02 with label10;
        catch java.lang.ArrayIndexOutOfBoundsException from label01 to label02 with label09;
        catch java.lang.NumberFormatException from label01 to label02 with label08;
        catch java.lang.IllegalArgumentException from label01 to label02 with label07;
        catch java.lang.NullPointerException from label03 to label04 with label10;
        catch java.lang.ArrayIndexOutOfBoundsException from label03 to label04 with label09;
        catch java.lang.NumberFormatException from label03 to label04 with label08;
        catch java.lang.IllegalArgumentException from label03 to label04 with label07;
        catch java.lang.NullPointerException from label05 to label06 with label10;
        catch java.lang.ArrayIndexOutOfBoundsException from label05 to label06 with label09;
        catch java.lang.NumberFormatException from label05 to label06 with label08;
        catch java.lang.IllegalArgumentException from label05 to label06 with label07;
    }

    public static int prefixLengthToNetmaskInt(int) throws java.lang.IllegalArgumentException
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = staticinvoke <com.android.net.module.util.Inet4AddressUtils: int prefixLengthToV4NetmaskIntHTL(int)>(i0);

        return $i1;
    }

    public static native boolean protectFromVpn(int);

    public static boolean protectFromVpn(java.io.FileDescriptor)
    {
        java.io.FileDescriptor r0;
        int $i0;
        boolean $z0;

        r0 := @parameter0: java.io.FileDescriptor;

        $i0 = virtualinvoke r0.<java.io.FileDescriptor: int getInt$()>();

        $z0 = staticinvoke <android.net.NetworkUtils: boolean protectFromVpn(int)>($i0);

        return $z0;
    }

    public static native boolean queryUserAccess(int, int);

    public static native void resNetworkCancel(java.io.FileDescriptor);

    public static native java.io.FileDescriptor resNetworkQuery(int, java.lang.String, int, int, int) throws android.system.ErrnoException;

    public static native android.net.DnsResolver$DnsResponse resNetworkResult(java.io.FileDescriptor) throws android.system.ErrnoException;

    public static native java.io.FileDescriptor resNetworkSend(int, byte[], int, int) throws android.system.ErrnoException;

    public static long routedIPv4AddressCount(java.util.TreeSet)
    {
        android.net.IpPrefix r0;
        java.util.TreeSet $r1, r3;
        boolean $z0, $z1;
        java.lang.Object $r2;
        int $i0, $i1;
        long $l2, l4;
        java.util.Iterator r4;

        r3 := @parameter0: java.util.TreeSet;

        l4 = 0L;

        $r1 = staticinvoke <android.net.NetworkUtils: java.util.TreeSet deduplicatePrefixSet(java.util.TreeSet)>(r3);

        r4 = virtualinvoke $r1.<java.util.TreeSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r0 = (android.net.IpPrefix) $r2;

        $z1 = virtualinvoke r0.<android.net.IpPrefix: boolean isIPv4()>();

        if $z1 != 0 goto label2;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>("NetworkUtils", "Non-IPv4 prefix in routedIPv4AddressCount");

     label2:
        $i0 = virtualinvoke r0.<android.net.IpPrefix: int getPrefixLength()>();

        $i1 = 32 - $i0;

        $l2 = 1L << $i1;

        l4 = l4 + $l2;

        goto label1;

     label3:
        return l4;
    }

    public static java.math.BigInteger routedIPv6AddressCount(java.util.TreeSet)
    {
        java.util.Iterator r0;
        int i0, $i1;
        java.util.TreeSet $r1, r5;
        boolean $z0, $z1;
        java.lang.Object $r2;
        java.math.BigInteger $r3, $r4, r6, r7;
        android.net.IpPrefix r8;

        r5 := @parameter0: java.util.TreeSet;

        r6 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        $r1 = staticinvoke <android.net.NetworkUtils: java.util.TreeSet deduplicatePrefixSet(java.util.TreeSet)>(r5);

        r0 = virtualinvoke $r1.<java.util.TreeSet: java.util.Iterator iterator()>();

        r7 = r6;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        r8 = (android.net.IpPrefix) $r2;

        $z1 = virtualinvoke r8.<android.net.IpPrefix: boolean isIPv6()>();

        if $z1 != 0 goto label2;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>("NetworkUtils", "Non-IPv6 prefix in routedIPv6AddressCount");

     label2:
        i0 = virtualinvoke r8.<android.net.IpPrefix: int getPrefixLength()>();

        $r3 = <java.math.BigInteger: java.math.BigInteger ONE>;

        $i1 = 128 - i0;

        $r4 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>($i1);

        r7 = virtualinvoke r7.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r4);

        goto label1;

     label3:
        return r7;
    }

    public static native void setAllowNetworkingForProcess(boolean);

    public static java.lang.String trimV4AddrZeros(java.lang.String)
    {
        java.lang.String r0, $r3, $r4, $r5;
        int $i0, $i1, $i2, i3;
        java.lang.StringBuilder $r2;
        java.lang.Throwable $r8;
        java.lang.String[] r9;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label01;

        return null;

     label01:
        r9 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.");

        $i0 = lengthof r9;

        if $i0 == 4 goto label02;

        return r0;

     label02:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(16);

        i3 = 0;

     label03:
        if i3 >= 4 goto label10;

     label04:
        $r4 = r9[i3];

        $i1 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i1 <= 3 goto label06;

     label05:
        return r0;

     label06:
        $r5 = r9[i3];

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r5);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

     label07:
        if i3 >= 3 goto label08;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

     label08:
        i3 = i3 + 1;

        goto label03;

     label09:
        $r8 := @caughtexception;

        return r0;

     label10:
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

        catch java.lang.NumberFormatException from label04 to label05 with label09;
        catch java.lang.NumberFormatException from label06 to label07 with label09;
    }
}
