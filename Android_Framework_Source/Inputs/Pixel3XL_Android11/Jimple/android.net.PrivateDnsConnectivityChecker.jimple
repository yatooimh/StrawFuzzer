public class android.net.PrivateDnsConnectivityChecker extends java.lang.Object
{
    private static final int CONNECTION_TIMEOUT_MS;
    private static final int PRIVATE_DNS_PORT;
    private static final java.lang.String TAG;

    private void <init>()
    {
        android.net.PrivateDnsConnectivityChecker r0;

        r0 := @this: android.net.PrivateDnsConnectivityChecker;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean canConnectToPrivateDnsServer(java.lang.String)
    {
        java.lang.String r0, $r3, $r5, $r10;
        java.net.Socket $r1;
        boolean $z0;
        java.lang.Object[] $r2, $r4, $r9;
        java.lang.Throwable $r6, $r7, $r8;
        javax.net.SocketFactory r11;
        javax.net.ssl.SSLSocket r12;
        java.net.InetSocketAddress r13;

        r0 := @parameter0: java.lang.String;

        r11 = staticinvoke <javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>();

        staticinvoke <android.net.TrafficStats: void setThreadStatsTag(int)>(-251);

     label01:
        $r1 = virtualinvoke r11.<javax.net.SocketFactory: java.net.Socket createSocket()>();

        r12 = (javax.net.ssl.SSLSocket) $r1;

     label02:
        virtualinvoke r12.<javax.net.ssl.SSLSocket: void setSoTimeout(int)>(5000);

        r13 = new java.net.InetSocketAddress;

        specialinvoke r13.<java.net.InetSocketAddress: void <init>(java.lang.String,int)>(r0, 853);

        virtualinvoke r12.<javax.net.ssl.SSLSocket: void connect(java.net.SocketAddress)>(r13);

        $z0 = virtualinvoke r12.<javax.net.ssl.SSLSocket: boolean isConnected()>();

        if $z0 != 0 goto label06;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r0;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Connection to %s failed.", $r4);

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("NetworkUtils", $r5);

     label03:
        if r12 == null goto label05;

     label04:
        virtualinvoke r12.<javax.net.ssl.SSLSocket: void close()>();

     label05:
        return 0;

     label06:
        virtualinvoke r12.<javax.net.ssl.SSLSocket: void startHandshake()>();

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r0;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("TLS handshake to %s succeeded.", $r2);

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("NetworkUtils", $r3);

     label07:
        if r12 == null goto label09;

     label08:
        virtualinvoke r12.<javax.net.ssl.SSLSocket: void close()>();

     label09:
        return 1;

     label10:
        $r7 := @caughtexception;

        if r12 == null goto label15;

     label11:
        virtualinvoke r12.<javax.net.ssl.SSLSocket: void close()>();

     label12:
        goto label15;

     label13:
        $r6 := @caughtexception;

     label14:
        virtualinvoke $r7.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r6);

     label15:
        throw $r7;

     label16:
        $r8 := @caughtexception;

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = r0;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("TLS handshake to %s failed.", $r9);

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("NetworkUtils", $r10, $r8);

        return 0;

        catch java.io.IOException from label01 to label02 with label16;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.io.IOException from label04 to label05 with label16;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.io.IOException from label08 to label09 with label16;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.io.IOException from label14 to label15 with label16;
        catch java.io.IOException from label15 to label16 with label16;
    }

    public static void <clinit>()
    {
        <android.net.PrivateDnsConnectivityChecker: java.lang.String TAG> = "NetworkUtils";

        <android.net.PrivateDnsConnectivityChecker: int PRIVATE_DNS_PORT> = 853;

        <android.net.PrivateDnsConnectivityChecker: int CONNECTION_TIMEOUT_MS> = 5000;

        return;
    }
}
