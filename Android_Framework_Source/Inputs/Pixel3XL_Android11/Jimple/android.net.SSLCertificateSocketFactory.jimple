public class android.net.SSLCertificateSocketFactory extends javax.net.ssl.SSLSocketFactory
{
    private static final javax.net.ssl.TrustManager[] INSECURE_TRUST_MANAGER;
    private static final java.lang.String TAG;
    private byte[] mAlpnProtocols;
    private java.security.PrivateKey mChannelIdPrivateKey;
    private final int mHandshakeTimeoutMillis;
    private javax.net.ssl.SSLSocketFactory mInsecureFactory;
    private javax.net.ssl.KeyManager[] mKeyManagers;
    private byte[] mNpnProtocols;
    private final boolean mSecure;
    private javax.net.ssl.SSLSocketFactory mSecureFactory;
    private final com.android.org.conscrypt.SSLClientSessionCache mSessionCache;
    private javax.net.ssl.TrustManager[] mTrustManagers;

    static void <clinit>()
    {
        java.lang.Object[] $r0;
        android.net.SSLCertificateSocketFactory$1 r2;
        javax.net.ssl.TrustManager[] r3;

        <android.net.SSLCertificateSocketFactory: java.lang.String TAG> = "SSLCertificateSocketFactory";

        $r0 = newarray (javax.net.ssl.TrustManager)[1];

        r2 = new android.net.SSLCertificateSocketFactory$1;

        specialinvoke r2.<android.net.SSLCertificateSocketFactory$1: void <init>()>();

        $r0[0] = r2;

        r3 = (javax.net.ssl.TrustManager[]) $r0;

        <android.net.SSLCertificateSocketFactory: javax.net.ssl.TrustManager[] INSECURE_TRUST_MANAGER> = r3;

        return;
    }

    public void <init>(int)
    {
        android.net.SSLCertificateSocketFactory r0;
        int i0;

        r0 := @this: android.net.SSLCertificateSocketFactory;

        i0 := @parameter0: int;

        specialinvoke r0.<android.net.SSLCertificateSocketFactory: void <init>(int,android.net.SSLSessionCache,boolean)>(i0, null, 1);

        return;
    }

    private void <init>(int, android.net.SSLSessionCache, boolean)
    {
        android.net.SSLCertificateSocketFactory r0;
        int i0;
        boolean z0;
        android.net.SSLSessionCache r1;
        com.android.org.conscrypt.SSLClientSessionCache r2;

        r0 := @this: android.net.SSLCertificateSocketFactory;

        i0 := @parameter0: int;

        r1 := @parameter1: android.net.SSLSessionCache;

        z0 := @parameter2: boolean;

        specialinvoke r0.<javax.net.ssl.SSLSocketFactory: void <init>()>();

        r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory mInsecureFactory> = null;

        r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory mSecureFactory> = null;

        r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.TrustManager[] mTrustManagers> = null;

        r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.KeyManager[] mKeyManagers> = null;

        r0.<android.net.SSLCertificateSocketFactory: byte[] mNpnProtocols> = null;

        r0.<android.net.SSLCertificateSocketFactory: byte[] mAlpnProtocols> = null;

        r0.<android.net.SSLCertificateSocketFactory: java.security.PrivateKey mChannelIdPrivateKey> = null;

        r0.<android.net.SSLCertificateSocketFactory: int mHandshakeTimeoutMillis> = i0;

        if r1 != null goto label1;

        r2 = null;

        goto label2;

     label1:
        r2 = r1.<android.net.SSLSessionCache: com.android.org.conscrypt.SSLClientSessionCache mSessionCache>;

     label2:
        r0.<android.net.SSLCertificateSocketFactory: com.android.org.conscrypt.SSLClientSessionCache mSessionCache> = r2;

        r0.<android.net.SSLCertificateSocketFactory: boolean mSecure> = z0;

        return;
    }

    private static com.android.org.conscrypt.OpenSSLSocketImpl castToOpenSSLSocket(java.net.Socket)
    {
        java.net.Socket r0;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r6;
        com.android.org.conscrypt.OpenSSLSocketImpl $r7;

        r0 := @parameter0: java.net.Socket;

        $z0 = r0 instanceof com.android.org.conscrypt.OpenSSLSocketImpl;

        if $z0 == 0 goto label1;

        $r7 = (com.android.org.conscrypt.OpenSSLSocketImpl) r0;

        return $r7;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Socket not created by this factory: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    public static javax.net.SocketFactory getDefault(int)
    {
        int i0;
        android.net.SSLCertificateSocketFactory $r0;

        i0 := @parameter0: int;

        $r0 = new android.net.SSLCertificateSocketFactory;

        specialinvoke $r0.<android.net.SSLCertificateSocketFactory: void <init>(int,android.net.SSLSessionCache,boolean)>(i0, null, 1);

        return $r0;
    }

    public static javax.net.ssl.SSLSocketFactory getDefault(int, android.net.SSLSessionCache)
    {
        int i0;
        android.net.SSLSessionCache r0;
        android.net.SSLCertificateSocketFactory $r1;

        i0 := @parameter0: int;

        r0 := @parameter1: android.net.SSLSessionCache;

        $r1 = new android.net.SSLCertificateSocketFactory;

        specialinvoke $r1.<android.net.SSLCertificateSocketFactory: void <init>(int,android.net.SSLSessionCache,boolean)>(i0, r0, 1);

        return $r1;
    }

    private javax.net.ssl.SSLSocketFactory getDelegate()
    {
        android.net.SSLCertificateSocketFactory r0;
        boolean $z0, $z1, $z2;
        javax.net.ssl.SSLSocketFactory $r1, $r4, $r5, $r8, r10, r11;
        javax.net.ssl.TrustManager[] $r2, $r6;
        javax.net.ssl.KeyManager[] $r3, $r7;
        java.lang.Throwable $r9;

        r0 := @this: android.net.SSLCertificateSocketFactory;

        entermonitor r0;

     label01:
        $z0 = r0.<android.net.SSLCertificateSocketFactory: boolean mSecure>;

        if $z0 == 0 goto label06;

        $z2 = staticinvoke <android.net.SSLCertificateSocketFactory: boolean isSslCheckRelaxed()>();

        if $z2 == 0 goto label03;

     label02:
        goto label06;

     label03:
        $r5 = r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory mSecureFactory>;

        if $r5 != null goto label04;

        $r7 = r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.KeyManager[] mKeyManagers>;

        $r6 = r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.TrustManager[] mTrustManagers>;

        $r8 = specialinvoke r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory makeSocketFactory(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[])>($r7, $r6);

        r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory mSecureFactory> = $r8;

     label04:
        r10 = r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory mSecureFactory>;

     label05:
        exitmonitor r0;

        return r10;

     label06:
        $r1 = r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory mInsecureFactory>;

        if $r1 != null goto label10;

        $z1 = r0.<android.net.SSLCertificateSocketFactory: boolean mSecure>;

        if $z1 == 0 goto label08;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("SSLCertificateSocketFactory", "*** BYPASSING SSL SECURITY CHECKS (socket.relaxsslcheck=yes) ***");

     label07:
        goto label09;

     label08:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("SSLCertificateSocketFactory", "Bypassing SSL security checks at caller\'s request");

     label09:
        $r3 = r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.KeyManager[] mKeyManagers>;

        $r2 = <android.net.SSLCertificateSocketFactory: javax.net.ssl.TrustManager[] INSECURE_TRUST_MANAGER>;

        $r4 = specialinvoke r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory makeSocketFactory(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[])>($r3, $r2);

        r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory mInsecureFactory> = $r4;

     label10:
        r11 = r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory mInsecureFactory>;

     label11:
        exitmonitor r0;

        return r11;

     label12:
        $r9 := @caughtexception;

        exitmonitor r0;

        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
    }

    public static org.apache.http.conn.ssl.SSLSocketFactory getHttpSocketFactory(int, android.net.SSLSessionCache)
    {
        int i0;
        android.net.SSLSessionCache r0;
        org.apache.http.conn.ssl.SSLSocketFactory $r1;
        android.net.SSLCertificateSocketFactory $r2;

        i0 := @parameter0: int;

        r0 := @parameter1: android.net.SSLSessionCache;

        $r1 = new org.apache.http.conn.ssl.SSLSocketFactory;

        $r2 = new android.net.SSLCertificateSocketFactory;

        specialinvoke $r2.<android.net.SSLCertificateSocketFactory: void <init>(int,android.net.SSLSessionCache,boolean)>(i0, r0, 1);

        specialinvoke $r1.<org.apache.http.conn.ssl.SSLSocketFactory: void <init>(javax.net.ssl.SSLSocketFactory)>($r2);

        return $r1;
    }

    public static javax.net.ssl.SSLSocketFactory getInsecure(int, android.net.SSLSessionCache)
    {
        int i0;
        android.net.SSLSessionCache r0;
        android.net.SSLCertificateSocketFactory $r1;

        i0 := @parameter0: int;

        r0 := @parameter1: android.net.SSLSessionCache;

        $r1 = new android.net.SSLCertificateSocketFactory;

        specialinvoke $r1.<android.net.SSLCertificateSocketFactory: void <init>(int,android.net.SSLSessionCache,boolean)>(i0, r0, 0);

        return $r1;
    }

    private static boolean isSslCheckRelaxed()
    {
        boolean z0, $z1, z2;

        z0 = <com.android.internal.os.RoSystemProperties: boolean DEBUGGABLE>;

        z2 = 0;

        if z0 == 0 goto label1;

        $z1 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("socket.relaxsslcheck", 0);

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label1;

     label1:
        return z2;
    }

    private javax.net.ssl.SSLSocketFactory makeSocketFactory(javax.net.ssl.KeyManager[], javax.net.ssl.TrustManager[])
    {
        android.net.SSLCertificateSocketFactory r0;
        javax.net.ssl.TrustManager[] r1;
        javax.net.ssl.SSLContext r2;
        javax.net.ssl.SSLSessionContext $r3;
        com.android.org.conscrypt.SSLClientSessionCache $r4;
        com.android.org.conscrypt.ClientSessionContext $r5;
        java.lang.Throwable $r6;
        javax.net.SocketFactory $r7;
        javax.net.ssl.SSLSocketFactory $r8, r10;
        javax.net.ssl.KeyManager[] r9;

        r0 := @this: android.net.SSLCertificateSocketFactory;

        r9 := @parameter0: javax.net.ssl.KeyManager[];

        r1 := @parameter1: javax.net.ssl.TrustManager[];

     label1:
        r2 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.lang.String)>("TLS", "AndroidOpenSSL");

        virtualinvoke r2.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(r9, r1, null);

        $r3 = virtualinvoke r2.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSessionContext getClientSessionContext()>();

        $r5 = (com.android.org.conscrypt.ClientSessionContext) $r3;

        $r4 = r0.<android.net.SSLCertificateSocketFactory: com.android.org.conscrypt.SSLClientSessionCache mSessionCache>;

        virtualinvoke $r5.<com.android.org.conscrypt.ClientSessionContext: void setPersistentCache(com.android.org.conscrypt.SSLClientSessionCache)>($r4);

        r10 = virtualinvoke r2.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

     label2:
        return r10;

     label3:
        $r6 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.Throwable)>("SSLCertificateSocketFactory", $r6);

        $r7 = staticinvoke <javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>();

        $r8 = (javax.net.ssl.SSLSocketFactory) $r7;

        return $r8;

        catch java.security.KeyManagementException from label1 to label2 with label3;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch java.security.NoSuchProviderException from label1 to label2 with label3;
    }

    public static transient byte[] toLengthPrefixedList(byte[][])
    {
        int i0, i1, i2, $i3, $i4, $i9, $i10, $i11, $i12, $i13, i14, i15, i16, i17, i18, i19;
        byte[] r0, r8, r10;
        java.lang.IllegalArgumentException $r1, $r5;
        byte $b5, $b6, $b7, $b8;
        java.lang.StringBuilder $r2;
        java.lang.String $r6;
        byte[][] r7;

        r7 := @parameter0: byte[][];

        $i3 = lengthof r7;

        if $i3 == 0 goto label8;

        i14 = 0;

        i15 = lengthof r7;

        i16 = 0;

     label1:
        if i16 >= i15 goto label3;

        r8 = r7[i16];

        $i9 = lengthof r8;

        if $i9 == 0 goto label2;

        $i11 = lengthof r8;

        if $i11 > 255 goto label2;

        $i12 = lengthof r8;

        $i13 = $i12 + 1;

        i14 = i14 + $i13;

        i16 = i16 + 1;

        goto label1;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s.length == 0 || s.length > 255: ");

        $i10 = lengthof r8;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label3:
        r10 = newarray (byte)[i14];

        i17 = 0;

        i0 = lengthof r7;

        i18 = 0;

     label4:
        if i18 >= i0 goto label7;

        r0 = r7[i18];

        i1 = i17 + 1;

        $i4 = lengthof r0;

        $b5 = (byte) $i4;

        $b6 = (byte) $b5;

        r10[i17] = $b6;

        i2 = lengthof r0;

        i19 = 0;

        i17 = i1;

     label5:
        if i19 >= i2 goto label6;

        $b7 = r0[i19];

        $b8 = (byte) $b7;

        r10[i17] = $b8;

        i19 = i19 + 1;

        i17 = i17 + 1;

        goto label5;

     label6:
        i18 = i18 + 1;

        goto label4;

     label7:
        return r10;

     label8:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("items.length == 0");

        throw $r1;
    }

    public static void verifyHostname(java.net.Socket, java.lang.String) throws java.io.IOException
    {
        java.lang.String r0, $r8;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r1;
        javax.net.ssl.SSLException $r2;
        javax.net.ssl.HostnameVerifier $r3;
        java.lang.StringBuilder $r4;
        javax.net.ssl.SSLPeerUnverifiedException $r7;
        java.net.Socket r9;
        javax.net.ssl.SSLSocket r10;
        javax.net.ssl.SSLSession r11;

        r9 := @parameter0: java.net.Socket;

        r0 := @parameter1: java.lang.String;

        $z0 = r9 instanceof javax.net.ssl.SSLSocket;

        if $z0 == 0 goto label4;

        $z1 = staticinvoke <android.net.SSLCertificateSocketFactory: boolean isSslCheckRelaxed()>();

        if $z1 != 0 goto label3;

        r10 = (javax.net.ssl.SSLSocket) r9;

        virtualinvoke r10.<javax.net.ssl.SSLSocket: void startHandshake()>();

        r11 = virtualinvoke r10.<javax.net.ssl.SSLSocket: javax.net.ssl.SSLSession getSession()>();

        if r11 == null goto label2;

        $r3 = staticinvoke <javax.net.ssl.HttpsURLConnection: javax.net.ssl.HostnameVerifier getDefaultHostnameVerifier()>();

        $z2 = interfaceinvoke $r3.<javax.net.ssl.HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>(r0, r11);

        if $z2 == 0 goto label1;

        goto label3;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot verify hostname: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = new javax.net.ssl.SSLPeerUnverifiedException;

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<javax.net.ssl.SSLPeerUnverifiedException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label2:
        $r2 = new javax.net.ssl.SSLException;

        specialinvoke $r2.<javax.net.ssl.SSLException: void <init>(java.lang.String)>("Cannot verify SSL socket without session");

        throw $r2;

     label3:
        return;

     label4:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Attempt to verify non-SSL socket");

        throw $r1;
    }

    public java.net.Socket createSocket() throws java.io.IOException
    {
        android.net.SSLCertificateSocketFactory r0;
        com.android.org.conscrypt.OpenSSLSocketImpl r1;
        javax.net.ssl.SSLSocketFactory $r2;
        java.net.Socket $r3, r7;
        byte[] $r4, $r5;
        int $i0;
        java.security.PrivateKey $r6;

        r0 := @this: android.net.SSLCertificateSocketFactory;

        $r2 = specialinvoke r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory getDelegate()>();

        $r3 = virtualinvoke $r2.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket()>();

        r1 = (com.android.org.conscrypt.OpenSSLSocketImpl) $r3;

        $r4 = r0.<android.net.SSLCertificateSocketFactory: byte[] mNpnProtocols>;

        virtualinvoke r1.<com.android.org.conscrypt.OpenSSLSocketImpl: void setNpnProtocols(byte[])>($r4);

        $r5 = r0.<android.net.SSLCertificateSocketFactory: byte[] mAlpnProtocols>;

        virtualinvoke r1.<com.android.org.conscrypt.OpenSSLSocketImpl: void setAlpnProtocols(byte[])>($r5);

        $i0 = r0.<android.net.SSLCertificateSocketFactory: int mHandshakeTimeoutMillis>;

        virtualinvoke r1.<com.android.org.conscrypt.OpenSSLSocketImpl: void setHandshakeTimeout(int)>($i0);

        $r6 = r0.<android.net.SSLCertificateSocketFactory: java.security.PrivateKey mChannelIdPrivateKey>;

        virtualinvoke r1.<com.android.org.conscrypt.OpenSSLSocketImpl: void setChannelIdPrivateKey(java.security.PrivateKey)>($r6);

        r7 = (java.net.Socket) r1;

        return r7;
    }

    public java.net.Socket createSocket(java.lang.String, int) throws java.io.IOException
    {
        android.net.SSLCertificateSocketFactory r0;
        java.lang.String r1;
        int i0, $i1;
        com.android.org.conscrypt.OpenSSLSocketImpl r2;
        javax.net.ssl.SSLSocketFactory $r3;
        java.net.Socket $r4, r8, r9;
        byte[] $r5, $r6;
        java.security.PrivateKey $r7;
        boolean $z0;

        r0 := @this: android.net.SSLCertificateSocketFactory;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r3 = specialinvoke r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory getDelegate()>();

        $r4 = virtualinvoke $r3.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.lang.String,int)>(r1, i0);

        r2 = (com.android.org.conscrypt.OpenSSLSocketImpl) $r4;

        $r5 = r0.<android.net.SSLCertificateSocketFactory: byte[] mNpnProtocols>;

        virtualinvoke r2.<com.android.org.conscrypt.OpenSSLSocketImpl: void setNpnProtocols(byte[])>($r5);

        $r6 = r0.<android.net.SSLCertificateSocketFactory: byte[] mAlpnProtocols>;

        virtualinvoke r2.<com.android.org.conscrypt.OpenSSLSocketImpl: void setAlpnProtocols(byte[])>($r6);

        $i1 = r0.<android.net.SSLCertificateSocketFactory: int mHandshakeTimeoutMillis>;

        virtualinvoke r2.<com.android.org.conscrypt.OpenSSLSocketImpl: void setHandshakeTimeout(int)>($i1);

        $r7 = r0.<android.net.SSLCertificateSocketFactory: java.security.PrivateKey mChannelIdPrivateKey>;

        virtualinvoke r2.<com.android.org.conscrypt.OpenSSLSocketImpl: void setChannelIdPrivateKey(java.security.PrivateKey)>($r7);

        $z0 = r0.<android.net.SSLCertificateSocketFactory: boolean mSecure>;

        if $z0 == 0 goto label1;

        r8 = (java.net.Socket) r2;

        staticinvoke <android.net.SSLCertificateSocketFactory: void verifyHostname(java.net.Socket,java.lang.String)>(r8, r1);

     label1:
        r9 = (java.net.Socket) r2;

        return r9;
    }

    public java.net.Socket createSocket(java.lang.String, int, java.net.InetAddress, int) throws java.io.IOException
    {
        android.net.SSLCertificateSocketFactory r0;
        java.lang.String r1;
        int i0, i1, $i2;
        javax.net.ssl.SSLSocketFactory $r2;
        java.net.Socket $r3, r9, r10;
        byte[] $r4, $r5;
        java.security.PrivateKey $r6;
        boolean $z0;
        java.net.InetAddress r7;
        com.android.org.conscrypt.OpenSSLSocketImpl r8;

        r0 := @this: android.net.SSLCertificateSocketFactory;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r7 := @parameter2: java.net.InetAddress;

        i1 := @parameter3: int;

        $r2 = specialinvoke r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory getDelegate()>();

        $r3 = virtualinvoke $r2.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int)>(r1, i0, r7, i1);

        r8 = (com.android.org.conscrypt.OpenSSLSocketImpl) $r3;

        $r4 = r0.<android.net.SSLCertificateSocketFactory: byte[] mNpnProtocols>;

        virtualinvoke r8.<com.android.org.conscrypt.OpenSSLSocketImpl: void setNpnProtocols(byte[])>($r4);

        $r5 = r0.<android.net.SSLCertificateSocketFactory: byte[] mAlpnProtocols>;

        virtualinvoke r8.<com.android.org.conscrypt.OpenSSLSocketImpl: void setAlpnProtocols(byte[])>($r5);

        $i2 = r0.<android.net.SSLCertificateSocketFactory: int mHandshakeTimeoutMillis>;

        virtualinvoke r8.<com.android.org.conscrypt.OpenSSLSocketImpl: void setHandshakeTimeout(int)>($i2);

        $r6 = r0.<android.net.SSLCertificateSocketFactory: java.security.PrivateKey mChannelIdPrivateKey>;

        virtualinvoke r8.<com.android.org.conscrypt.OpenSSLSocketImpl: void setChannelIdPrivateKey(java.security.PrivateKey)>($r6);

        $z0 = r0.<android.net.SSLCertificateSocketFactory: boolean mSecure>;

        if $z0 == 0 goto label1;

        r9 = (java.net.Socket) r8;

        staticinvoke <android.net.SSLCertificateSocketFactory: void verifyHostname(java.net.Socket,java.lang.String)>(r9, r1);

     label1:
        r10 = (java.net.Socket) r8;

        return r10;
    }

    public java.net.Socket createSocket(java.net.InetAddress, int) throws java.io.IOException
    {
        android.net.SSLCertificateSocketFactory r0;
        int i0, $i1;
        javax.net.ssl.SSLSocketFactory $r1;
        java.net.Socket $r2, r8;
        byte[] $r3, $r4;
        java.security.PrivateKey $r5;
        java.net.InetAddress r6;
        com.android.org.conscrypt.OpenSSLSocketImpl r7;

        r0 := @this: android.net.SSLCertificateSocketFactory;

        r6 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory getDelegate()>();

        $r2 = virtualinvoke $r1.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.InetAddress,int)>(r6, i0);

        r7 = (com.android.org.conscrypt.OpenSSLSocketImpl) $r2;

        $r3 = r0.<android.net.SSLCertificateSocketFactory: byte[] mNpnProtocols>;

        virtualinvoke r7.<com.android.org.conscrypt.OpenSSLSocketImpl: void setNpnProtocols(byte[])>($r3);

        $r4 = r0.<android.net.SSLCertificateSocketFactory: byte[] mAlpnProtocols>;

        virtualinvoke r7.<com.android.org.conscrypt.OpenSSLSocketImpl: void setAlpnProtocols(byte[])>($r4);

        $i1 = r0.<android.net.SSLCertificateSocketFactory: int mHandshakeTimeoutMillis>;

        virtualinvoke r7.<com.android.org.conscrypt.OpenSSLSocketImpl: void setHandshakeTimeout(int)>($i1);

        $r5 = r0.<android.net.SSLCertificateSocketFactory: java.security.PrivateKey mChannelIdPrivateKey>;

        virtualinvoke r7.<com.android.org.conscrypt.OpenSSLSocketImpl: void setChannelIdPrivateKey(java.security.PrivateKey)>($r5);

        r8 = (java.net.Socket) r7;

        return r8;
    }

    public java.net.Socket createSocket(java.net.InetAddress, int, java.net.InetAddress, int) throws java.io.IOException
    {
        android.net.SSLCertificateSocketFactory r0;
        int i0, i1, $i2;
        java.net.InetAddress r1, r7;
        javax.net.ssl.SSLSocketFactory $r2;
        java.net.Socket $r3, r9;
        byte[] $r4, $r5;
        java.security.PrivateKey $r6;
        com.android.org.conscrypt.OpenSSLSocketImpl r8;

        r0 := @this: android.net.SSLCertificateSocketFactory;

        r7 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        r1 := @parameter2: java.net.InetAddress;

        i1 := @parameter3: int;

        $r2 = specialinvoke r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory getDelegate()>();

        $r3 = virtualinvoke $r2.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)>(r7, i0, r1, i1);

        r8 = (com.android.org.conscrypt.OpenSSLSocketImpl) $r3;

        $r4 = r0.<android.net.SSLCertificateSocketFactory: byte[] mNpnProtocols>;

        virtualinvoke r8.<com.android.org.conscrypt.OpenSSLSocketImpl: void setNpnProtocols(byte[])>($r4);

        $r5 = r0.<android.net.SSLCertificateSocketFactory: byte[] mAlpnProtocols>;

        virtualinvoke r8.<com.android.org.conscrypt.OpenSSLSocketImpl: void setAlpnProtocols(byte[])>($r5);

        $i2 = r0.<android.net.SSLCertificateSocketFactory: int mHandshakeTimeoutMillis>;

        virtualinvoke r8.<com.android.org.conscrypt.OpenSSLSocketImpl: void setHandshakeTimeout(int)>($i2);

        $r6 = r0.<android.net.SSLCertificateSocketFactory: java.security.PrivateKey mChannelIdPrivateKey>;

        virtualinvoke r8.<com.android.org.conscrypt.OpenSSLSocketImpl: void setChannelIdPrivateKey(java.security.PrivateKey)>($r6);

        r9 = (java.net.Socket) r8;

        return r9;
    }

    public java.net.Socket createSocket(java.net.Socket, java.lang.String, int, boolean) throws java.io.IOException
    {
        android.net.SSLCertificateSocketFactory r0;
        java.lang.String r1;
        int i0, $i1;
        boolean z0, $z1;
        javax.net.ssl.SSLSocketFactory $r2;
        java.net.Socket $r3, r7, r9, r10;
        byte[] $r4, $r5;
        java.security.PrivateKey $r6;
        com.android.org.conscrypt.OpenSSLSocketImpl r8;

        r0 := @this: android.net.SSLCertificateSocketFactory;

        r7 := @parameter0: java.net.Socket;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        $r2 = specialinvoke r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory getDelegate()>();

        $r3 = virtualinvoke $r2.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>(r7, r1, i0, z0);

        r8 = (com.android.org.conscrypt.OpenSSLSocketImpl) $r3;

        $r4 = r0.<android.net.SSLCertificateSocketFactory: byte[] mNpnProtocols>;

        virtualinvoke r8.<com.android.org.conscrypt.OpenSSLSocketImpl: void setNpnProtocols(byte[])>($r4);

        $r5 = r0.<android.net.SSLCertificateSocketFactory: byte[] mAlpnProtocols>;

        virtualinvoke r8.<com.android.org.conscrypt.OpenSSLSocketImpl: void setAlpnProtocols(byte[])>($r5);

        $i1 = r0.<android.net.SSLCertificateSocketFactory: int mHandshakeTimeoutMillis>;

        virtualinvoke r8.<com.android.org.conscrypt.OpenSSLSocketImpl: void setHandshakeTimeout(int)>($i1);

        $r6 = r0.<android.net.SSLCertificateSocketFactory: java.security.PrivateKey mChannelIdPrivateKey>;

        virtualinvoke r8.<com.android.org.conscrypt.OpenSSLSocketImpl: void setChannelIdPrivateKey(java.security.PrivateKey)>($r6);

        $z1 = r0.<android.net.SSLCertificateSocketFactory: boolean mSecure>;

        if $z1 == 0 goto label1;

        r9 = (java.net.Socket) r8;

        staticinvoke <android.net.SSLCertificateSocketFactory: void verifyHostname(java.net.Socket,java.lang.String)>(r9, r1);

     label1:
        r10 = (java.net.Socket) r8;

        return r10;
    }

    public byte[] getAlpnSelectedProtocol(java.net.Socket)
    {
        android.net.SSLCertificateSocketFactory r0;
        java.net.Socket r1;
        com.android.org.conscrypt.OpenSSLSocketImpl $r2;
        byte[] $r3;

        r0 := @this: android.net.SSLCertificateSocketFactory;

        r1 := @parameter0: java.net.Socket;

        $r2 = staticinvoke <android.net.SSLCertificateSocketFactory: com.android.org.conscrypt.OpenSSLSocketImpl castToOpenSSLSocket(java.net.Socket)>(r1);

        $r3 = virtualinvoke $r2.<com.android.org.conscrypt.OpenSSLSocketImpl: byte[] getAlpnSelectedProtocol()>();

        return $r3;
    }

    public java.lang.String[] getDefaultCipherSuites()
    {
        android.net.SSLCertificateSocketFactory r0;
        javax.net.ssl.SSLSocketFactory $r1;
        java.lang.String[] $r2;

        r0 := @this: android.net.SSLCertificateSocketFactory;

        $r1 = specialinvoke r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory getDelegate()>();

        $r2 = virtualinvoke $r1.<javax.net.ssl.SSLSocketFactory: java.lang.String[] getDefaultCipherSuites()>();

        return $r2;
    }

    public byte[] getNpnSelectedProtocol(java.net.Socket)
    {
        android.net.SSLCertificateSocketFactory r0;
        java.net.Socket r1;
        com.android.org.conscrypt.OpenSSLSocketImpl $r2;
        byte[] $r3;

        r0 := @this: android.net.SSLCertificateSocketFactory;

        r1 := @parameter0: java.net.Socket;

        $r2 = staticinvoke <android.net.SSLCertificateSocketFactory: com.android.org.conscrypt.OpenSSLSocketImpl castToOpenSSLSocket(java.net.Socket)>(r1);

        $r3 = virtualinvoke $r2.<com.android.org.conscrypt.OpenSSLSocketImpl: byte[] getNpnSelectedProtocol()>();

        return $r3;
    }

    public java.lang.String[] getSupportedCipherSuites()
    {
        android.net.SSLCertificateSocketFactory r0;
        javax.net.ssl.SSLSocketFactory $r1;
        java.lang.String[] $r2;

        r0 := @this: android.net.SSLCertificateSocketFactory;

        $r1 = specialinvoke r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory getDelegate()>();

        $r2 = virtualinvoke $r1.<javax.net.ssl.SSLSocketFactory: java.lang.String[] getSupportedCipherSuites()>();

        return $r2;
    }

    public void setAlpnProtocols(byte[][])
    {
        android.net.SSLCertificateSocketFactory r0;
        byte[][] r1;
        byte[] $r2;

        r0 := @this: android.net.SSLCertificateSocketFactory;

        r1 := @parameter0: byte[][];

        $r2 = staticinvoke <android.net.SSLCertificateSocketFactory: byte[] toLengthPrefixedList(byte[][])>(r1);

        r0.<android.net.SSLCertificateSocketFactory: byte[] mAlpnProtocols> = $r2;

        return;
    }

    public void setChannelIdPrivateKey(java.security.PrivateKey)
    {
        android.net.SSLCertificateSocketFactory r0;
        java.security.PrivateKey r1;

        r0 := @this: android.net.SSLCertificateSocketFactory;

        r1 := @parameter0: java.security.PrivateKey;

        r0.<android.net.SSLCertificateSocketFactory: java.security.PrivateKey mChannelIdPrivateKey> = r1;

        return;
    }

    public void setHostname(java.net.Socket, java.lang.String)
    {
        android.net.SSLCertificateSocketFactory r0;
        java.net.Socket r1;
        java.lang.String r2;
        com.android.org.conscrypt.OpenSSLSocketImpl $r3;

        r0 := @this: android.net.SSLCertificateSocketFactory;

        r1 := @parameter0: java.net.Socket;

        r2 := @parameter1: java.lang.String;

        $r3 = staticinvoke <android.net.SSLCertificateSocketFactory: com.android.org.conscrypt.OpenSSLSocketImpl castToOpenSSLSocket(java.net.Socket)>(r1);

        virtualinvoke $r3.<com.android.org.conscrypt.OpenSSLSocketImpl: void setHostname(java.lang.String)>(r2);

        return;
    }

    public void setKeyManagers(javax.net.ssl.KeyManager[])
    {
        android.net.SSLCertificateSocketFactory r0;
        javax.net.ssl.KeyManager[] r1;

        r0 := @this: android.net.SSLCertificateSocketFactory;

        r1 := @parameter0: javax.net.ssl.KeyManager[];

        r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.KeyManager[] mKeyManagers> = r1;

        r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory mSecureFactory> = null;

        r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory mInsecureFactory> = null;

        return;
    }

    public void setNpnProtocols(byte[][])
    {
        android.net.SSLCertificateSocketFactory r0;
        byte[][] r1;
        byte[] $r2;

        r0 := @this: android.net.SSLCertificateSocketFactory;

        r1 := @parameter0: byte[][];

        $r2 = staticinvoke <android.net.SSLCertificateSocketFactory: byte[] toLengthPrefixedList(byte[][])>(r1);

        r0.<android.net.SSLCertificateSocketFactory: byte[] mNpnProtocols> = $r2;

        return;
    }

    public void setSoWriteTimeout(java.net.Socket, int) throws java.net.SocketException
    {
        android.net.SSLCertificateSocketFactory r0;
        java.net.Socket r1;
        int i0;
        com.android.org.conscrypt.OpenSSLSocketImpl $r2;

        r0 := @this: android.net.SSLCertificateSocketFactory;

        r1 := @parameter0: java.net.Socket;

        i0 := @parameter1: int;

        $r2 = staticinvoke <android.net.SSLCertificateSocketFactory: com.android.org.conscrypt.OpenSSLSocketImpl castToOpenSSLSocket(java.net.Socket)>(r1);

        virtualinvoke $r2.<com.android.org.conscrypt.OpenSSLSocketImpl: void setSoWriteTimeout(int)>(i0);

        return;
    }

    public void setTrustManagers(javax.net.ssl.TrustManager[])
    {
        android.net.SSLCertificateSocketFactory r0;
        javax.net.ssl.TrustManager[] r1;

        r0 := @this: android.net.SSLCertificateSocketFactory;

        r1 := @parameter0: javax.net.ssl.TrustManager[];

        r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.TrustManager[] mTrustManagers> = r1;

        r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory mSecureFactory> = null;

        return;
    }

    public void setUseSessionTickets(java.net.Socket, boolean)
    {
        android.net.SSLCertificateSocketFactory r0;
        java.net.Socket r1;
        boolean z0;
        com.android.org.conscrypt.OpenSSLSocketImpl $r2;

        r0 := @this: android.net.SSLCertificateSocketFactory;

        r1 := @parameter0: java.net.Socket;

        z0 := @parameter1: boolean;

        $r2 = staticinvoke <android.net.SSLCertificateSocketFactory: com.android.org.conscrypt.OpenSSLSocketImpl castToOpenSSLSocket(java.net.Socket)>(r1);

        virtualinvoke $r2.<com.android.org.conscrypt.OpenSSLSocketImpl: void setUseSessionTickets(boolean)>(z0);

        return;
    }
}
