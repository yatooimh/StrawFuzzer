public class android.net.TestNetworkManager extends java.lang.Object
{
    private static final java.lang.String TAG;
    public static final java.lang.String TEST_TAP_PREFIX;
    public static final java.lang.String TEST_TUN_PREFIX;
    private final android.net.ITestNetworkManager mService;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        <android.net.TestNetworkManager: java.lang.String TEST_TUN_PREFIX> = "testtun";

        <android.net.TestNetworkManager: java.lang.String TEST_TAP_PREFIX> = "testtap";

        $r0 = class "Landroid/net/TestNetworkManager;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <android.net.TestNetworkManager: java.lang.String TAG> = $r1;

        return;
    }

    public void <init>(android.net.ITestNetworkManager)
    {
        android.net.TestNetworkManager r0;
        android.net.ITestNetworkManager r1, $r3;
        java.lang.Object $r2;

        r0 := @this: android.net.TestNetworkManager;

        r1 := @parameter0: android.net.ITestNetworkManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "missing ITestNetworkManager");

        $r3 = (android.net.ITestNetworkManager) $r2;

        r0.<android.net.TestNetworkManager: android.net.ITestNetworkManager mService> = $r3;

        return;
    }

    private void setupTestNetwork(java.lang.String, android.net.LinkProperties, boolean, int[], android.os.IBinder)
    {
        android.net.TestNetworkManager r0;
        android.net.LinkProperties r1;
        boolean z0;
        int[] r2;
        android.os.IBinder r3;
        android.net.ITestNetworkManager $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        java.lang.String r7;

        r0 := @this: android.net.TestNetworkManager;

        r7 := @parameter0: java.lang.String;

        r1 := @parameter1: android.net.LinkProperties;

        z0 := @parameter2: boolean;

        r2 := @parameter3: int[];

        r3 := @parameter4: android.os.IBinder;

     label1:
        $r4 = r0.<android.net.TestNetworkManager: android.net.ITestNetworkManager mService>;

        interfaceinvoke $r4.<android.net.ITestNetworkManager: void setupTestNetwork(java.lang.String,android.net.LinkProperties,boolean,int[],android.os.IBinder)>(r7, r1, z0, r2, r3);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.TestNetworkInterface createTapInterface()
    {
        android.net.TestNetworkManager r0;
        android.net.ITestNetworkManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.net.TestNetworkInterface r4;

        r0 := @this: android.net.TestNetworkManager;

     label1:
        $r1 = r0.<android.net.TestNetworkManager: android.net.ITestNetworkManager mService>;

        r4 = interfaceinvoke $r1.<android.net.ITestNetworkManager: android.net.TestNetworkInterface createTapInterface()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.TestNetworkInterface createTunInterface(android.net.LinkAddress[])
    {
        android.net.TestNetworkManager r0;
        android.net.ITestNetworkManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.net.LinkAddress[] r4;
        android.net.TestNetworkInterface r5;

        r0 := @this: android.net.TestNetworkManager;

        r4 := @parameter0: android.net.LinkAddress[];

     label1:
        $r1 = r0.<android.net.TestNetworkManager: android.net.ITestNetworkManager mService>;

        r5 = interfaceinvoke $r1.<android.net.ITestNetworkManager: android.net.TestNetworkInterface createTunInterface(android.net.LinkAddress[])>(r4);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setupTestNetwork(android.net.LinkProperties, boolean, android.os.IBinder)
    {
        android.net.TestNetworkManager r0;
        android.net.LinkProperties r1;
        boolean z0;
        android.os.IBinder r2;
        java.lang.String $r4;
        int[] $r5;

        r0 := @this: android.net.TestNetworkManager;

        r1 := @parameter0: android.net.LinkProperties;

        z0 := @parameter1: boolean;

        r2 := @parameter2: android.os.IBinder;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "Invalid LinkProperties");

        $r4 = virtualinvoke r1.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        $r5 = newarray (int)[0];

        specialinvoke r0.<android.net.TestNetworkManager: void setupTestNetwork(java.lang.String,android.net.LinkProperties,boolean,int[],android.os.IBinder)>($r4, r1, z0, $r5, r2);

        return;
    }

    public void setupTestNetwork(java.lang.String, android.os.IBinder)
    {
        android.net.TestNetworkManager r0;
        java.lang.String r1;
        android.os.IBinder r2;
        int[] $r3;

        r0 := @this: android.net.TestNetworkManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.IBinder;

        $r3 = newarray (int)[0];

        specialinvoke r0.<android.net.TestNetworkManager: void setupTestNetwork(java.lang.String,android.net.LinkProperties,boolean,int[],android.os.IBinder)>(r1, null, 1, $r3, r2);

        return;
    }

    public void setupTestNetwork(java.lang.String, int[], android.os.IBinder)
    {
        android.net.TestNetworkManager r0;
        java.lang.String r1;
        int[] r2;
        android.os.IBinder r3;

        r0 := @this: android.net.TestNetworkManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: int[];

        r3 := @parameter2: android.os.IBinder;

        specialinvoke r0.<android.net.TestNetworkManager: void setupTestNetwork(java.lang.String,android.net.LinkProperties,boolean,int[],android.os.IBinder)>(r1, null, 1, r2, r3);

        return;
    }

    public void teardownTestNetwork(android.net.Network)
    {
        android.net.TestNetworkManager r0;
        int $i0;
        android.net.ITestNetworkManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.net.Network r4;

        r0 := @this: android.net.TestNetworkManager;

        r4 := @parameter0: android.net.Network;

     label1:
        $r1 = r0.<android.net.TestNetworkManager: android.net.ITestNetworkManager mService>;

        $i0 = r4.<android.net.Network: int netId>;

        interfaceinvoke $r1.<android.net.ITestNetworkManager: void teardownTestNetwork(int)>($i0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }
}
