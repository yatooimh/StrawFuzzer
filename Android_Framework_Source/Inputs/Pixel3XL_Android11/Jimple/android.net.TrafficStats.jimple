public class android.net.TrafficStats extends java.lang.Object
{
    public static final long GB_IN_BYTES;
    public static final long KB_IN_BYTES;
    private static final java.lang.String LOOPBACK_IFACE;
    public static final long MB_IN_BYTES;
    public static final long PB_IN_BYTES;
    public static final int TAG_NETWORK_STACK_IMPERSONATION_RANGE_END;
    public static final int TAG_NETWORK_STACK_IMPERSONATION_RANGE_START;
    public static final int TAG_NETWORK_STACK_RANGE_END;
    public static final int TAG_NETWORK_STACK_RANGE_START;
    public static final int TAG_SYSTEM_APP;
    public static final int TAG_SYSTEM_BACKUP;
    public static final int TAG_SYSTEM_DOWNLOAD;
    public static final int TAG_SYSTEM_IMPERSONATION_RANGE_END;
    public static final int TAG_SYSTEM_IMPERSONATION_RANGE_START;
    public static final int TAG_SYSTEM_MEDIA;
    public static final int TAG_SYSTEM_PROBE;
    public static final int TAG_SYSTEM_RESTORE;
    public static final long TB_IN_BYTES;
    private static final int TYPE_RX_BYTES;
    private static final int TYPE_RX_PACKETS;
    private static final int TYPE_TCP_RX_PACKETS;
    private static final int TYPE_TCP_TX_PACKETS;
    private static final int TYPE_TX_BYTES;
    private static final int TYPE_TX_PACKETS;
    public static final int UID_REMOVED;
    public static final int UID_TETHERING;
    public static final int UNSUPPORTED;
    private static android.net.NetworkStats sActiveProfilingStart;
    private static java.lang.Object sProfilingLock;
    private static android.net.INetworkStatsService sStatsService;

    static void <clinit>()
    {
        java.lang.Object $r0;

        <android.net.TrafficStats: int UNSUPPORTED> = -1;

        <android.net.TrafficStats: int UID_TETHERING> = -5;

        <android.net.TrafficStats: int UID_REMOVED> = -4;

        <android.net.TrafficStats: int TYPE_TX_PACKETS> = 3;

        <android.net.TrafficStats: int TYPE_TX_BYTES> = 2;

        <android.net.TrafficStats: int TYPE_TCP_TX_PACKETS> = 5;

        <android.net.TrafficStats: int TYPE_TCP_RX_PACKETS> = 4;

        <android.net.TrafficStats: int TYPE_RX_PACKETS> = 1;

        <android.net.TrafficStats: int TYPE_RX_BYTES> = 0;

        <android.net.TrafficStats: long TB_IN_BYTES> = 1099511627776L;

        <android.net.TrafficStats: int TAG_SYSTEM_RESTORE> = -252;

        <android.net.TrafficStats: int TAG_SYSTEM_PROBE> = -190;

        <android.net.TrafficStats: int TAG_SYSTEM_MEDIA> = -254;

        <android.net.TrafficStats: int TAG_SYSTEM_IMPERSONATION_RANGE_START> = -256;

        <android.net.TrafficStats: int TAG_SYSTEM_IMPERSONATION_RANGE_END> = -241;

        <android.net.TrafficStats: int TAG_SYSTEM_DOWNLOAD> = -255;

        <android.net.TrafficStats: int TAG_SYSTEM_BACKUP> = -253;

        <android.net.TrafficStats: int TAG_SYSTEM_APP> = -251;

        <android.net.TrafficStats: int TAG_NETWORK_STACK_RANGE_START> = -768;

        <android.net.TrafficStats: int TAG_NETWORK_STACK_RANGE_END> = -257;

        <android.net.TrafficStats: int TAG_NETWORK_STACK_IMPERSONATION_RANGE_START> = -128;

        <android.net.TrafficStats: int TAG_NETWORK_STACK_IMPERSONATION_RANGE_END> = -113;

        <android.net.TrafficStats: long PB_IN_BYTES> = 1125899906842624L;

        <android.net.TrafficStats: long MB_IN_BYTES> = 1048576L;

        <android.net.TrafficStats: java.lang.String LOOPBACK_IFACE> = "lo";

        <android.net.TrafficStats: long KB_IN_BYTES> = 1024L;

        <android.net.TrafficStats: long GB_IN_BYTES> = 1073741824L;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <android.net.TrafficStats: java.lang.Object sProfilingLock> = $r0;

        return;
    }

    public void <init>()
    {
        android.net.TrafficStats r0;

        r0 := @this: android.net.TrafficStats;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static long addIfSupported(long)
    {
        byte $b0;
        long l1;

        l1 := @parameter0: long;

        $b0 = l1 cmp -1L;

        if $b0 != 0 goto label1;

        l1 = 0L;

        goto label1;

     label1:
        return l1;
    }

    public static void clearThreadStatsTag()
    {
        staticinvoke <com.android.server.NetworkManagementSocketTagger: int setThreadSocketStatsTag(int)>(-1);

        return;
    }

    public static void clearThreadStatsUid()
    {
        staticinvoke <com.android.server.NetworkManagementSocketTagger: int setThreadSocketStatsUid(int)>(-1);

        return;
    }

    public static void closeQuietly(android.net.INetworkStatsSession)
    {
        java.lang.Exception $r0;
        java.lang.RuntimeException $r1;
        android.net.INetworkStatsSession r2;

        r2 := @parameter0: android.net.INetworkStatsSession;

        if r2 == null goto label5;

     label1:
        interfaceinvoke r2.<android.net.INetworkStatsSession: void close()>();

     label2:
        goto label5;

     label3:
        $r0 := @caughtexception;

        goto label5;

     label4:
        $r1 := @caughtexception;

        throw $r1;

     label5:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label4;
        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static int getAndSetThreadStatsTag(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = staticinvoke <com.android.server.NetworkManagementSocketTagger: int setThreadSocketStatsTag(int)>(i0);

        return $i1;
    }

    private static android.net.NetworkStats getDataLayerSnapshotForUid(android.content.Context)
    {
        int i0;
        android.net.INetworkStatsService $r0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.content.Context r3;
        android.net.NetworkStats r4;

        r3 := @parameter0: android.content.Context;

        i0 = staticinvoke <android.os.Process: int myUid()>();

     label1:
        $r0 = staticinvoke <android.net.TrafficStats: android.net.INetworkStatsService getStatsService()>();

        r4 = interfaceinvoke $r0.<android.net.INetworkStatsService: android.net.NetworkStats getDataLayerSnapshotForUid(int)>(i0);

     label2:
        return r4;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static long getLoopbackRxBytes()
    {
        long l0;
        android.net.INetworkStatsService $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;

     label1:
        $r1 = staticinvoke <android.net.TrafficStats: android.net.INetworkStatsService getStatsService()>();

        l0 = interfaceinvoke $r1.<android.net.INetworkStatsService: long getIfaceStats(java.lang.String,int)>("lo", 0);

     label2:
        return l0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static long getLoopbackRxPackets()
    {
        long l0;
        android.net.INetworkStatsService $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;

     label1:
        $r1 = staticinvoke <android.net.TrafficStats: android.net.INetworkStatsService getStatsService()>();

        l0 = interfaceinvoke $r1.<android.net.INetworkStatsService: long getIfaceStats(java.lang.String,int)>("lo", 1);

     label2:
        return l0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static long getLoopbackTxBytes()
    {
        long l0;
        android.net.INetworkStatsService $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;

     label1:
        $r1 = staticinvoke <android.net.TrafficStats: android.net.INetworkStatsService getStatsService()>();

        l0 = interfaceinvoke $r1.<android.net.INetworkStatsService: long getIfaceStats(java.lang.String,int)>("lo", 2);

     label2:
        return l0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static long getLoopbackTxPackets()
    {
        long l0;
        android.net.INetworkStatsService $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;

     label1:
        $r1 = staticinvoke <android.net.TrafficStats: android.net.INetworkStatsService getStatsService()>();

        l0 = interfaceinvoke $r1.<android.net.INetworkStatsService: long getIfaceStats(java.lang.String,int)>("lo", 3);

     label2:
        return l0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private static java.lang.String[] getMobileIfaces()
    {
        android.net.INetworkStatsService $r0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        java.lang.String[] r3;

     label1:
        $r0 = staticinvoke <android.net.TrafficStats: android.net.INetworkStatsService getStatsService()>();

        r3 = interfaceinvoke $r0.<android.net.INetworkStatsService: java.lang.String[] getMobileIfaces()>();

     label2:
        return r3;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static long getMobileRxBytes()
    {
        java.lang.String[] r0;
        int i0, i4;
        java.lang.String $r1;
        long $l1, $l2, l3;

        l3 = 0L;

        r0 = staticinvoke <android.net.TrafficStats: java.lang.String[] getMobileIfaces()>();

        i0 = lengthof r0;

        i4 = 0;

     label1:
        if i4 >= i0 goto label2;

        $r1 = r0[i4];

        $l1 = staticinvoke <android.net.TrafficStats: long getRxBytes(java.lang.String)>($r1);

        $l2 = staticinvoke <android.net.TrafficStats: long addIfSupported(long)>($l1);

        l3 = l3 + $l2;

        i4 = i4 + 1;

        goto label1;

     label2:
        return l3;
    }

    public static long getMobileRxPackets()
    {
        java.lang.String[] r0;
        int i0, i4;
        java.lang.String $r1;
        long $l1, $l2, l3;

        l3 = 0L;

        r0 = staticinvoke <android.net.TrafficStats: java.lang.String[] getMobileIfaces()>();

        i0 = lengthof r0;

        i4 = 0;

     label1:
        if i4 >= i0 goto label2;

        $r1 = r0[i4];

        $l1 = staticinvoke <android.net.TrafficStats: long getRxPackets(java.lang.String)>($r1);

        $l2 = staticinvoke <android.net.TrafficStats: long addIfSupported(long)>($l1);

        l3 = l3 + $l2;

        i4 = i4 + 1;

        goto label1;

     label2:
        return l3;
    }

    public static long getMobileTcpRxPackets()
    {
        java.lang.String[] r0;
        int i0, i4;
        long l1, $l2, l3;
        android.net.INetworkStatsService $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        l3 = 0L;

        r0 = staticinvoke <android.net.TrafficStats: java.lang.String[] getMobileIfaces()>();

        i0 = lengthof r0;

        i4 = 0;

     label1:
        if i4 >= i0 goto label5;

        r4 = r0[i4];

     label2:
        $r1 = staticinvoke <android.net.TrafficStats: android.net.INetworkStatsService getStatsService()>();

        l1 = interfaceinvoke $r1.<android.net.INetworkStatsService: long getIfaceStats(java.lang.String,int)>(r4, 4);

     label3:
        $l2 = staticinvoke <android.net.TrafficStats: long addIfSupported(long)>(l1);

        l3 = l3 + $l2;

        i4 = i4 + 1;

        goto label1;

     label4:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label5:
        return l3;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public static long getMobileTcpTxPackets()
    {
        java.lang.String[] r0;
        int i0, i4;
        long l1, $l2, l3;
        android.net.INetworkStatsService $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        l3 = 0L;

        r0 = staticinvoke <android.net.TrafficStats: java.lang.String[] getMobileIfaces()>();

        i0 = lengthof r0;

        i4 = 0;

     label1:
        if i4 >= i0 goto label5;

        r4 = r0[i4];

     label2:
        $r1 = staticinvoke <android.net.TrafficStats: android.net.INetworkStatsService getStatsService()>();

        l1 = interfaceinvoke $r1.<android.net.INetworkStatsService: long getIfaceStats(java.lang.String,int)>(r4, 5);

     label3:
        $l2 = staticinvoke <android.net.TrafficStats: long addIfSupported(long)>(l1);

        l3 = l3 + $l2;

        i4 = i4 + 1;

        goto label1;

     label4:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

     label5:
        return l3;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public static long getMobileTxBytes()
    {
        java.lang.String[] r0;
        int i0, i4;
        java.lang.String $r1;
        long $l1, $l2, l3;

        l3 = 0L;

        r0 = staticinvoke <android.net.TrafficStats: java.lang.String[] getMobileIfaces()>();

        i0 = lengthof r0;

        i4 = 0;

     label1:
        if i4 >= i0 goto label2;

        $r1 = r0[i4];

        $l1 = staticinvoke <android.net.TrafficStats: long getTxBytes(java.lang.String)>($r1);

        $l2 = staticinvoke <android.net.TrafficStats: long addIfSupported(long)>($l1);

        l3 = l3 + $l2;

        i4 = i4 + 1;

        goto label1;

     label2:
        return l3;
    }

    public static long getMobileTxPackets()
    {
        java.lang.String[] r0;
        int i0, i4;
        java.lang.String $r1;
        long $l1, $l2, l3;

        l3 = 0L;

        r0 = staticinvoke <android.net.TrafficStats: java.lang.String[] getMobileIfaces()>();

        i0 = lengthof r0;

        i4 = 0;

     label1:
        if i4 >= i0 goto label2;

        $r1 = r0[i4];

        $l1 = staticinvoke <android.net.TrafficStats: long getTxPackets(java.lang.String)>($r1);

        $l2 = staticinvoke <android.net.TrafficStats: long addIfSupported(long)>($l1);

        l3 = l3 + $l2;

        i4 = i4 + 1;

        goto label1;

     label2:
        return l3;
    }

    public static long getRxBytes(java.lang.String)
    {
        long l0;
        android.net.INetworkStatsService $r0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        java.lang.String r3;

        r3 := @parameter0: java.lang.String;

     label1:
        $r0 = staticinvoke <android.net.TrafficStats: android.net.INetworkStatsService getStatsService()>();

        l0 = interfaceinvoke $r0.<android.net.INetworkStatsService: long getIfaceStats(java.lang.String,int)>(r3, 0);

     label2:
        return l0;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static long getRxPackets(java.lang.String)
    {
        long l0;
        android.net.INetworkStatsService $r0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        java.lang.String r3;

        r3 := @parameter0: java.lang.String;

     label1:
        $r0 = staticinvoke <android.net.TrafficStats: android.net.INetworkStatsService getStatsService()>();

        l0 = interfaceinvoke $r0.<android.net.INetworkStatsService: long getIfaceStats(java.lang.String,int)>(r3, 1);

     label2:
        return l0;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private static android.net.INetworkStatsService getStatsService()
    {
        android.net.INetworkStatsService $r0, $r2, r4;
        android.os.IBinder $r1;
        java.lang.Throwable $r3;

        entermonitor class "Landroid/net/TrafficStats;";

     label1:
        $r0 = <android.net.TrafficStats: android.net.INetworkStatsService sStatsService>;

        if $r0 != null goto label2;

        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("netstats");

        $r2 = staticinvoke <android.net.INetworkStatsService$Stub: android.net.INetworkStatsService asInterface(android.os.IBinder)>($r1);

        <android.net.TrafficStats: android.net.INetworkStatsService sStatsService> = $r2;

     label2:
        r4 = <android.net.TrafficStats: android.net.INetworkStatsService sStatsService>;

     label3:
        exitmonitor class "Landroid/net/TrafficStats;";

        return r4;

     label4:
        $r3 := @caughtexception;

        exitmonitor class "Landroid/net/TrafficStats;";

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public static int getThreadStatsTag()
    {
        int $i0;

        $i0 = staticinvoke <com.android.server.NetworkManagementSocketTagger: int getThreadSocketStatsTag()>();

        return $i0;
    }

    public static int getThreadStatsUid()
    {
        int $i0;

        $i0 = staticinvoke <com.android.server.NetworkManagementSocketTagger: int getThreadSocketStatsUid()>();

        return $i0;
    }

    public static long getTotalRxBytes()
    {
        long l0;
        android.net.INetworkStatsService $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;

     label1:
        $r1 = staticinvoke <android.net.TrafficStats: android.net.INetworkStatsService getStatsService()>();

        l0 = interfaceinvoke $r1.<android.net.INetworkStatsService: long getTotalStats(int)>(0);

     label2:
        return l0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static long getTotalRxPackets()
    {
        long l0;
        android.net.INetworkStatsService $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;

     label1:
        $r1 = staticinvoke <android.net.TrafficStats: android.net.INetworkStatsService getStatsService()>();

        l0 = interfaceinvoke $r1.<android.net.INetworkStatsService: long getTotalStats(int)>(1);

     label2:
        return l0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static long getTotalTxBytes()
    {
        long l0;
        android.net.INetworkStatsService $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;

     label1:
        $r1 = staticinvoke <android.net.TrafficStats: android.net.INetworkStatsService getStatsService()>();

        l0 = interfaceinvoke $r1.<android.net.INetworkStatsService: long getTotalStats(int)>(2);

     label2:
        return l0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static long getTotalTxPackets()
    {
        long l0;
        android.net.INetworkStatsService $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;

     label1:
        $r1 = staticinvoke <android.net.TrafficStats: android.net.INetworkStatsService getStatsService()>();

        l0 = interfaceinvoke $r1.<android.net.INetworkStatsService: long getTotalStats(int)>(3);

     label2:
        return l0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static long getTxBytes(java.lang.String)
    {
        long l0;
        android.net.INetworkStatsService $r0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        java.lang.String r3;

        r3 := @parameter0: java.lang.String;

     label1:
        $r0 = staticinvoke <android.net.TrafficStats: android.net.INetworkStatsService getStatsService()>();

        l0 = interfaceinvoke $r0.<android.net.INetworkStatsService: long getIfaceStats(java.lang.String,int)>(r3, 2);

     label2:
        return l0;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static long getTxPackets(java.lang.String)
    {
        long l0;
        android.net.INetworkStatsService $r0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        java.lang.String r3;

        r3 := @parameter0: java.lang.String;

     label1:
        $r0 = staticinvoke <android.net.TrafficStats: android.net.INetworkStatsService getStatsService()>();

        l0 = interfaceinvoke $r0.<android.net.INetworkStatsService: long getIfaceStats(java.lang.String,int)>(r3, 3);

     label2:
        return l0;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static long getUidRxBytes(int)
    {
        int i0;
        long l1;
        android.net.INetworkStatsService $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;

        i0 := @parameter0: int;

     label1:
        $r1 = staticinvoke <android.net.TrafficStats: android.net.INetworkStatsService getStatsService()>();

        l1 = interfaceinvoke $r1.<android.net.INetworkStatsService: long getUidStats(int,int)>(i0, 0);

     label2:
        return l1;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static long getUidRxPackets(int)
    {
        int i0;
        long l1;
        android.net.INetworkStatsService $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;

        i0 := @parameter0: int;

     label1:
        $r1 = staticinvoke <android.net.TrafficStats: android.net.INetworkStatsService getStatsService()>();

        l1 = interfaceinvoke $r1.<android.net.INetworkStatsService: long getUidStats(int,int)>(i0, 1);

     label2:
        return l1;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static long getUidTcpRxBytes(int)
    {
        int i0;

        i0 := @parameter0: int;

        return -1L;
    }

    public static long getUidTcpRxSegments(int)
    {
        int i0;

        i0 := @parameter0: int;

        return -1L;
    }

    public static long getUidTcpTxBytes(int)
    {
        int i0;

        i0 := @parameter0: int;

        return -1L;
    }

    public static long getUidTcpTxSegments(int)
    {
        int i0;

        i0 := @parameter0: int;

        return -1L;
    }

    public static long getUidTxBytes(int)
    {
        int i0;
        long l1;
        android.net.INetworkStatsService $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;

        i0 := @parameter0: int;

     label1:
        $r1 = staticinvoke <android.net.TrafficStats: android.net.INetworkStatsService getStatsService()>();

        l1 = interfaceinvoke $r1.<android.net.INetworkStatsService: long getUidStats(int,int)>(i0, 2);

     label2:
        return l1;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static long getUidTxPackets(int)
    {
        int i0;
        long l1;
        android.net.INetworkStatsService $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;

        i0 := @parameter0: int;

     label1:
        $r1 = staticinvoke <android.net.TrafficStats: android.net.INetworkStatsService getStatsService()>();

        l1 = interfaceinvoke $r1.<android.net.INetworkStatsService: long getUidStats(int,int)>(i0, 3);

     label2:
        return l1;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static long getUidUdpRxBytes(int)
    {
        int i0;

        i0 := @parameter0: int;

        return -1L;
    }

    public static long getUidUdpRxPackets(int)
    {
        int i0;

        i0 := @parameter0: int;

        return -1L;
    }

    public static long getUidUdpTxBytes(int)
    {
        int i0;

        i0 := @parameter0: int;

        return -1L;
    }

    public static long getUidUdpTxPackets(int)
    {
        int i0;

        i0 := @parameter0: int;

        return -1L;
    }

    public static void incrementOperationCount(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = staticinvoke <android.net.TrafficStats: int getThreadStatsTag()>();

        staticinvoke <android.net.TrafficStats: void incrementOperationCount(int,int)>($i1, i0);

        return;
    }

    public static void incrementOperationCount(int, int)
    {
        int i0, i1, i2;
        android.net.INetworkStatsService $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = staticinvoke <android.os.Process: int myUid()>();

     label1:
        $r1 = staticinvoke <android.net.TrafficStats: android.net.INetworkStatsService getStatsService()>();

        interfaceinvoke $r1.<android.net.INetworkStatsService: void incrementOperationCount(int,int,int)>(i2, i0, i1);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static void setThreadStatsTag(int)
    {
        int i0;

        i0 := @parameter0: int;

        staticinvoke <com.android.server.NetworkManagementSocketTagger: int setThreadSocketStatsTag(int)>(i0);

        return;
    }

    public static void setThreadStatsTagApp()
    {
        staticinvoke <android.net.TrafficStats: void setThreadStatsTag(int)>(-251);

        return;
    }

    public static void setThreadStatsTagBackup()
    {
        staticinvoke <android.net.TrafficStats: void setThreadStatsTag(int)>(-253);

        return;
    }

    public static void setThreadStatsTagRestore()
    {
        staticinvoke <android.net.TrafficStats: void setThreadStatsTag(int)>(-252);

        return;
    }

    public static void setThreadStatsUid(int)
    {
        int i0;

        i0 := @parameter0: int;

        staticinvoke <com.android.server.NetworkManagementSocketTagger: int setThreadSocketStatsUid(int)>(i0);

        return;
    }

    public static void setThreadStatsUidSelf()
    {
        int $i0;

        $i0 = staticinvoke <android.os.Process: int myUid()>();

        staticinvoke <android.net.TrafficStats: void setThreadStatsUid(int)>($i0);

        return;
    }

    public static void startDataProfiling(android.content.Context)
    {
        java.lang.Object r0;
        android.net.NetworkStats $r1, $r2;
        java.lang.Throwable $r3;
        android.content.Context r4;
        java.lang.IllegalStateException r5;

        r4 := @parameter0: android.content.Context;

        r0 = <android.net.TrafficStats: java.lang.Object sProfilingLock>;

        entermonitor r0;

     label1:
        $r1 = <android.net.TrafficStats: android.net.NetworkStats sActiveProfilingStart>;

        if $r1 != null goto label3;

        $r2 = staticinvoke <android.net.TrafficStats: android.net.NetworkStats getDataLayerSnapshotForUid(android.content.Context)>(r4);

        <android.net.TrafficStats: android.net.NetworkStats sActiveProfilingStart> = $r2;

        exitmonitor r0;

     label2:
        return;

     label3:
        r5 = new java.lang.IllegalStateException;

        specialinvoke r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("already profiling data");

        throw r5;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r0;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public static android.net.NetworkStats stopDataProfiling(android.content.Context)
    {
        java.lang.Object r0;
        android.net.NetworkStats $r1, $r2, $r3, r6;
        java.lang.Throwable $r4;
        android.content.Context r5;
        java.lang.IllegalStateException r7;

        r5 := @parameter0: android.content.Context;

        r0 = <android.net.TrafficStats: java.lang.Object sProfilingLock>;

        entermonitor r0;

     label1:
        $r1 = <android.net.TrafficStats: android.net.NetworkStats sActiveProfilingStart>;

        if $r1 == null goto label3;

        $r2 = staticinvoke <android.net.TrafficStats: android.net.NetworkStats getDataLayerSnapshotForUid(android.content.Context)>(r5);

        $r3 = <android.net.TrafficStats: android.net.NetworkStats sActiveProfilingStart>;

        r6 = staticinvoke <android.net.NetworkStats: android.net.NetworkStats subtract(android.net.NetworkStats,android.net.NetworkStats,android.net.NetworkStats$NonMonotonicObserver,java.lang.Object)>($r2, $r3, null, null);

        <android.net.TrafficStats: android.net.NetworkStats sActiveProfilingStart> = null;

        exitmonitor r0;

     label2:
        return r6;

     label3:
        r7 = new java.lang.IllegalStateException;

        specialinvoke r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("not profiling data");

        throw r7;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r0;

     label6:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public static void tagDatagramSocket(java.net.DatagramSocket) throws java.net.SocketException
    {
        java.net.DatagramSocket r0;
        dalvik.system.SocketTagger $r1;

        r0 := @parameter0: java.net.DatagramSocket;

        $r1 = staticinvoke <dalvik.system.SocketTagger: dalvik.system.SocketTagger get()>();

        virtualinvoke $r1.<dalvik.system.SocketTagger: void tag(java.net.DatagramSocket)>(r0);

        return;
    }

    public static void tagFileDescriptor(java.io.FileDescriptor) throws java.io.IOException
    {
        java.io.FileDescriptor r0;
        dalvik.system.SocketTagger $r1;

        r0 := @parameter0: java.io.FileDescriptor;

        $r1 = staticinvoke <dalvik.system.SocketTagger: dalvik.system.SocketTagger get()>();

        virtualinvoke $r1.<dalvik.system.SocketTagger: void tag(java.io.FileDescriptor)>(r0);

        return;
    }

    public static void tagSocket(java.net.Socket) throws java.net.SocketException
    {
        java.net.Socket r0;
        dalvik.system.SocketTagger $r1;

        r0 := @parameter0: java.net.Socket;

        $r1 = staticinvoke <dalvik.system.SocketTagger: dalvik.system.SocketTagger get()>();

        virtualinvoke $r1.<dalvik.system.SocketTagger: void tag(java.net.Socket)>(r0);

        return;
    }

    public static void untagDatagramSocket(java.net.DatagramSocket) throws java.net.SocketException
    {
        java.net.DatagramSocket r0;
        dalvik.system.SocketTagger $r1;

        r0 := @parameter0: java.net.DatagramSocket;

        $r1 = staticinvoke <dalvik.system.SocketTagger: dalvik.system.SocketTagger get()>();

        virtualinvoke $r1.<dalvik.system.SocketTagger: void untag(java.net.DatagramSocket)>(r0);

        return;
    }

    public static void untagFileDescriptor(java.io.FileDescriptor) throws java.io.IOException
    {
        java.io.FileDescriptor r0;
        dalvik.system.SocketTagger $r1;

        r0 := @parameter0: java.io.FileDescriptor;

        $r1 = staticinvoke <dalvik.system.SocketTagger: dalvik.system.SocketTagger get()>();

        virtualinvoke $r1.<dalvik.system.SocketTagger: void untag(java.io.FileDescriptor)>(r0);

        return;
    }

    public static void untagSocket(java.net.Socket) throws java.net.SocketException
    {
        java.net.Socket r0;
        dalvik.system.SocketTagger $r1;

        r0 := @parameter0: java.net.Socket;

        $r1 = staticinvoke <dalvik.system.SocketTagger: dalvik.system.SocketTagger get()>();

        virtualinvoke $r1.<dalvik.system.SocketTagger: void untag(java.net.Socket)>(r0);

        return;
    }
}
