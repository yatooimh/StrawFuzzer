public class android.net.VpnService extends android.app.Service
{
    public static final java.lang.String SERVICE_INTERFACE;
    public static final java.lang.String SERVICE_META_DATA_SUPPORTS_ALWAYS_ON;

    public void <init>()
    {
        android.net.VpnService r0;

        r0 := @this: android.net.VpnService;

        specialinvoke r0.<android.app.Service: void <init>()>();

        return;
    }

    static void access$100(java.net.InetAddress, int)
    {
        java.net.InetAddress r0;
        int i0;

        r0 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        staticinvoke <android.net.VpnService: void check(java.net.InetAddress,int)>(r0, i0);

        return;
    }

    static android.net.IConnectivityManager access$200()
    {
        android.net.IConnectivityManager $r0;

        $r0 = staticinvoke <android.net.VpnService: android.net.IConnectivityManager getService()>();

        return $r0;
    }

    private static void check(java.net.InetAddress, int)
    {
        java.net.InetAddress r0;
        int i0;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r1, $r2, $r3, $r4;

        r0 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<java.net.InetAddress: boolean isLoopbackAddress()>();

        if $z0 != 0 goto label6;

        $z1 = r0 instanceof java.net.Inet4Address;

        if $z1 == 0 goto label2;

        if i0 < 0 goto label1;

        if i0 > 32 goto label1;

        goto label3;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bad prefixLength");

        throw $r4;

     label2:
        $z2 = r0 instanceof java.net.Inet6Address;

        if $z2 == 0 goto label5;

        if i0 < 0 goto label4;

        if i0 > 128 goto label4;

     label3:
        return;

     label4:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bad prefixLength");

        throw $r3;

     label5:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unsupported family");

        throw $r2;

     label6:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bad address");

        throw $r1;
    }

    private static android.net.IConnectivityManager getService()
    {
        android.os.IBinder $r0;
        android.net.IConnectivityManager $r1;

        $r0 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("connectivity");

        $r1 = staticinvoke <android.net.IConnectivityManager$Stub: android.net.IConnectivityManager asInterface(android.os.IBinder)>($r0);

        return $r1;
    }

    public static android.content.Intent prepare(android.content.Context)
    {
        boolean z0;
        android.net.IConnectivityManager $r0;
        java.lang.String $r1;
        int $i0;
        android.content.Intent $r2;
        android.os.RemoteException $r3;
        android.content.Context r4;

        r4 := @parameter0: android.content.Context;

     label1:
        $r0 = staticinvoke <android.net.VpnService: android.net.IConnectivityManager getService()>();

        $r1 = virtualinvoke r4.<android.content.Context: java.lang.String getPackageName()>();

        $i0 = virtualinvoke r4.<android.content.Context: int getUserId()>();

        z0 = interfaceinvoke $r0.<android.net.IConnectivityManager: boolean prepareVpn(java.lang.String,java.lang.String,int)>($r1, null, $i0);

     label2:
        if z0 == 0 goto label3;

        return null;

     label3:
        goto label5;

     label4:
        $r3 := @caughtexception;

     label5:
        $r2 = staticinvoke <com.android.internal.net.VpnConfig: android.content.Intent getIntentForConfirmation()>();

        return $r2;

        catch android.os.RemoteException from label1 to label2 with label4;
    }

    public static void prepareAndAuthorize(android.content.Context)
    {
        android.net.IConnectivityManager r0;
        java.lang.String r1;
        int i0;
        boolean $z0;
        android.os.RemoteException $r2;
        android.content.Context r3;

        r3 := @parameter0: android.content.Context;

        r0 = staticinvoke <android.net.VpnService: android.net.IConnectivityManager getService()>();

        r1 = virtualinvoke r3.<android.content.Context: java.lang.String getPackageName()>();

     label1:
        i0 = virtualinvoke r3.<android.content.Context: int getUserId()>();

        $z0 = interfaceinvoke r0.<android.net.IConnectivityManager: boolean prepareVpn(java.lang.String,java.lang.String,int)>(r1, null, i0);

        if $z0 != 0 goto label2;

        interfaceinvoke r0.<android.net.IConnectivityManager: boolean prepareVpn(java.lang.String,java.lang.String,int)>(null, r1, i0);

     label2:
        interfaceinvoke r0.<android.net.IConnectivityManager: void setVpnPackageAuthorization(java.lang.String,int,int)>(r1, i0, 1);

     label3:
        goto label5;

     label4:
        $r2 := @caughtexception;

     label5:
        return;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public boolean addAddress(java.net.InetAddress, int)
    {
        android.net.VpnService r0;
        int i0;
        boolean z0;
        android.net.IConnectivityManager $r1;
        java.lang.String $r2;
        android.os.RemoteException $r3;
        java.lang.IllegalStateException $r4;
        java.net.InetAddress r5;

        r0 := @this: android.net.VpnService;

        r5 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        staticinvoke <android.net.VpnService: void check(java.net.InetAddress,int)>(r5, i0);

     label1:
        $r1 = staticinvoke <android.net.VpnService: android.net.IConnectivityManager getService()>();

        $r2 = virtualinvoke r5.<java.net.InetAddress: java.lang.String getHostAddress()>();

        z0 = interfaceinvoke $r1.<android.net.IConnectivityManager: boolean addVpnAddress(java.lang.String,int)>($r2, i0);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public final boolean isAlwaysOn()
    {
        android.net.VpnService r0;
        boolean z0;
        android.net.IConnectivityManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.net.VpnService;

     label1:
        $r2 = staticinvoke <android.net.VpnService: android.net.IConnectivityManager getService()>();

        z0 = interfaceinvoke $r2.<android.net.IConnectivityManager: boolean isCallerCurrentAlwaysOnVpnApp()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public final boolean isLockdownEnabled()
    {
        android.net.VpnService r0;
        boolean z0;
        android.net.IConnectivityManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.net.VpnService;

     label1:
        $r2 = staticinvoke <android.net.VpnService: android.net.IConnectivityManager getService()>();

        z0 = interfaceinvoke $r2.<android.net.IConnectivityManager: boolean isCallerCurrentAlwaysOnVpnLockdownApp()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.os.IBinder onBind(android.content.Intent)
    {
        android.net.VpnService r0;
        android.content.Intent r1;
        java.lang.String $r2, $r3;
        boolean $z0;
        android.net.VpnService$Callback $r4;

        r0 := @this: android.net.VpnService;

        r1 := @parameter0: android.content.Intent;

        if r1 == null goto label1;

        $r2 = "android.net.VpnService";

        $r3 = virtualinvoke r1.<android.content.Intent: java.lang.String getAction()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $r4 = new android.net.VpnService$Callback;

        specialinvoke $r4.<android.net.VpnService$Callback: void <init>(android.net.VpnService,android.net.VpnService$1)>(r0, null);

        return $r4;

     label1:
        return null;
    }

    public void onRevoke()
    {
        android.net.VpnService r0;

        r0 := @this: android.net.VpnService;

        virtualinvoke r0.<android.net.VpnService: void stopSelf()>();

        return;
    }

    public boolean protect(int)
    {
        android.net.VpnService r0;
        int i0;
        boolean $z0;

        r0 := @this: android.net.VpnService;

        i0 := @parameter0: int;

        $z0 = staticinvoke <android.net.NetworkUtils: boolean protectFromVpn(int)>(i0);

        return $z0;
    }

    public boolean protect(java.net.DatagramSocket)
    {
        android.net.VpnService r0;
        java.net.DatagramSocket r1;
        java.io.FileDescriptor $r2;
        int $i0;
        boolean $z0;

        r0 := @this: android.net.VpnService;

        r1 := @parameter0: java.net.DatagramSocket;

        $r2 = virtualinvoke r1.<java.net.DatagramSocket: java.io.FileDescriptor getFileDescriptor$()>();

        $i0 = virtualinvoke $r2.<java.io.FileDescriptor: int getInt$()>();

        $z0 = virtualinvoke r0.<android.net.VpnService: boolean protect(int)>($i0);

        return $z0;
    }

    public boolean protect(java.net.Socket)
    {
        android.net.VpnService r0;
        java.net.Socket r1;
        java.io.FileDescriptor $r2;
        int $i0;
        boolean $z0;

        r0 := @this: android.net.VpnService;

        r1 := @parameter0: java.net.Socket;

        $r2 = virtualinvoke r1.<java.net.Socket: java.io.FileDescriptor getFileDescriptor$()>();

        $i0 = virtualinvoke $r2.<java.io.FileDescriptor: int getInt$()>();

        $z0 = virtualinvoke r0.<android.net.VpnService: boolean protect(int)>($i0);

        return $z0;
    }

    public boolean removeAddress(java.net.InetAddress, int)
    {
        android.net.VpnService r0;
        int i0;
        boolean z0;
        android.net.IConnectivityManager $r1;
        java.lang.String $r2;
        android.os.RemoteException $r3;
        java.lang.IllegalStateException $r4;
        java.net.InetAddress r5;

        r0 := @this: android.net.VpnService;

        r5 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        staticinvoke <android.net.VpnService: void check(java.net.InetAddress,int)>(r5, i0);

     label1:
        $r1 = staticinvoke <android.net.VpnService: android.net.IConnectivityManager getService()>();

        $r2 = virtualinvoke r5.<java.net.InetAddress: java.lang.String getHostAddress()>();

        z0 = interfaceinvoke $r1.<android.net.IConnectivityManager: boolean removeVpnAddress(java.lang.String,int)>($r2, i0);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean setUnderlyingNetworks(android.net.Network[])
    {
        android.net.VpnService r0;
        boolean z0;
        android.net.IConnectivityManager $r1;
        android.os.RemoteException $r2;
        java.lang.IllegalStateException $r3;
        android.net.Network[] r4;

        r0 := @this: android.net.VpnService;

        r4 := @parameter0: android.net.Network[];

     label1:
        $r1 = staticinvoke <android.net.VpnService: android.net.IConnectivityManager getService()>();

        z0 = interfaceinvoke $r1.<android.net.IConnectivityManager: boolean setUnderlyingNetworksForVpn(android.net.Network[])>(r4);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r2);

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <android.net.VpnService: java.lang.String SERVICE_META_DATA_SUPPORTS_ALWAYS_ON> = "android.net.VpnService.SUPPORTS_ALWAYS_ON";

        <android.net.VpnService: java.lang.String SERVICE_INTERFACE> = "android.net.VpnService";

        return;
    }
}
