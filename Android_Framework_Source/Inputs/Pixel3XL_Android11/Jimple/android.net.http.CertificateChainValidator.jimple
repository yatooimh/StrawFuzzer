public class android.net.http.CertificateChainValidator extends java.lang.Object
{
    private static final java.lang.String TAG;
    private javax.net.ssl.X509TrustManager mTrustManager;

    private void <init>()
    {
        android.net.http.CertificateChainValidator r0;
        int i0, i1;
        javax.net.ssl.TrustManager r1;
        java.security.KeyStore $r2;
        javax.net.ssl.X509TrustManager $r3, $r5;
        java.lang.RuntimeException $r4, $r7, $r9;
        boolean $z0;
        java.lang.Throwable $r6, $r8;
        javax.net.ssl.TrustManagerFactory r10;
        javax.net.ssl.TrustManager[] r11;

        r0 := @this: android.net.http.CertificateChainValidator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

     label1:
        r10 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>("X.509");

        $r2 = (java.security.KeyStore) null;

        virtualinvoke r10.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>($r2);

        r11 = virtualinvoke r10.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>();

        i0 = lengthof r11;

     label2:
        i1 = 0;

     label3:
        if i1 >= i0 goto label6;

        r1 = r11[i1];

     label4:
        $z0 = r1 instanceof javax.net.ssl.X509TrustManager;

        if $z0 == 0 goto label5;

        $r5 = (javax.net.ssl.X509TrustManager) r1;

        r0.<android.net.http.CertificateChainValidator: javax.net.ssl.X509TrustManager mTrustManager> = $r5;

     label5:
        i1 = i1 + 1;

        goto label3;

     label6:
        $r3 = r0.<android.net.http.CertificateChainValidator: javax.net.ssl.X509TrustManager mTrustManager>;

        if $r3 == null goto label7;

        return;

     label7:
        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("None of the X.509 TrustManagers are X509TrustManager");

        throw $r4;

     label8:
        $r6 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("X.509 TrustManagerFactory cannot be initialized", $r6);

        throw $r7;

     label9:
        $r8 := @caughtexception;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("X.509 TrustManagerFactory must be available", $r8);

        throw $r9;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label9;
        catch java.security.KeyStoreException from label1 to label2 with label8;
        catch java.security.NoSuchAlgorithmException from label4 to label5 with label9;
        catch java.security.KeyStoreException from label4 to label5 with label8;
    }

    void <init>(android.net.http.CertificateChainValidator$1)
    {
        android.net.http.CertificateChainValidator r0;
        android.net.http.CertificateChainValidator$1 r1;

        r0 := @this: android.net.http.CertificateChainValidator;

        r1 := @parameter0: android.net.http.CertificateChainValidator$1;

        specialinvoke r0.<android.net.http.CertificateChainValidator: void <init>()>();

        return;
    }

    private void closeSocketThrowException(javax.net.ssl.SSLSocket, java.lang.String) throws java.io.IOException
    {
        android.net.http.CertificateChainValidator r0;
        javax.net.ssl.SSLSocket r1;
        java.lang.String r2;
        javax.net.ssl.SSLSession r3;
        javax.net.ssl.SSLHandshakeException $r4;

        r0 := @this: android.net.http.CertificateChainValidator;

        r1 := @parameter0: javax.net.ssl.SSLSocket;

        r2 := @parameter1: java.lang.String;

        if r1 == null goto label2;

        r3 = virtualinvoke r1.<javax.net.ssl.SSLSocket: javax.net.ssl.SSLSession getSession()>();

        if r3 == null goto label1;

        interfaceinvoke r3.<javax.net.ssl.SSLSession: void invalidate()>();

     label1:
        virtualinvoke r1.<javax.net.ssl.SSLSocket: void close()>();

     label2:
        $r4 = new javax.net.ssl.SSLHandshakeException;

        specialinvoke $r4.<javax.net.ssl.SSLHandshakeException: void <init>(java.lang.String)>(r2);

        throw $r4;
    }

    private void closeSocketThrowException(javax.net.ssl.SSLSocket, java.lang.String, java.lang.String) throws java.io.IOException
    {
        android.net.http.CertificateChainValidator r0;
        javax.net.ssl.SSLSocket r1;
        java.lang.String r2, r3;

        r0 := @this: android.net.http.CertificateChainValidator;

        r1 := @parameter0: javax.net.ssl.SSLSocket;

        r3 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        if r3 == null goto label1;

        goto label2;

     label1:
        r3 = r2;

     label2:
        specialinvoke r0.<android.net.http.CertificateChainValidator: void closeSocketThrowException(javax.net.ssl.SSLSocket,java.lang.String)>(r1, r3);

        return;
    }

    public static android.net.http.CertificateChainValidator getInstance()
    {
        android.net.http.CertificateChainValidator $r0;

        $r0 = staticinvoke <android.net.http.CertificateChainValidator$NoPreloadHolder: android.net.http.CertificateChainValidator access$100()>();

        return $r0;
    }

    private javax.net.ssl.X509TrustManager getTrustManager()
    {
        android.net.http.CertificateChainValidator r0;
        javax.net.ssl.X509TrustManager $r1;

        r0 := @this: android.net.http.CertificateChainValidator;

        $r1 = r0.<android.net.http.CertificateChainValidator: javax.net.ssl.X509TrustManager mTrustManager>;

        return $r1;
    }

    public static void handleTrustStorageUpdate()
    {
        int i0, i4;
        javax.net.ssl.TrustManager r0;
        java.security.KeyStore $r1;
        java.lang.Class $r2;
        java.lang.Class[] $r3;
        java.lang.Object[] $r4;
        java.lang.Exception $r6;
        java.lang.Throwable $r7, $r8;
        javax.net.ssl.TrustManagerFactory r9;
        javax.net.ssl.TrustManager[] r10;
        boolean z0;
        java.lang.reflect.Method r11;

     label01:
        r9 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>("X.509");

        $r1 = (java.security.KeyStore) null;

        virtualinvoke r9.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>($r1);

     label02:
        r10 = virtualinvoke r9.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>();

        z0 = 0;

        i0 = lengthof r10;

        i4 = 0;

     label03:
        if i4 >= i0 goto label08;

        r0 = r10[i4];

     label04:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = newarray (java.lang.Class)[0];

        r11 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("handleTrustStorageUpdate", $r3);

        virtualinvoke r11.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

        $r4 = newarray (java.lang.Object)[0];

        virtualinvoke r11.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r4);

     label05:
        z0 = 1;

        goto label07;

     label06:
        $r6 := @caughtexception;

     label07:
        i4 = i4 + 1;

        goto label03;

     label08:
        if z0 != 0 goto label09;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("CertificateChainValidator", "Didn\'t find a TrustManager to handle CA list update");

     label09:
        return;

     label10:
        $r8 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("CertificateChainValidator", "Couldn\'t initialize default X.509 TrustManagerFactory", $r8);

        return;

     label11:
        $r7 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("CertificateChainValidator", "Couldn\'t find default X.509 TrustManagerFactory");

        return;

        catch java.security.NoSuchAlgorithmException from label01 to label02 with label11;
        catch java.security.KeyStoreException from label01 to label02 with label10;
        catch java.lang.Exception from label04 to label05 with label06;
    }

    public static android.net.http.SslError verifyServerCertificates(byte[][], java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.lang.String r0, r1;
        java.security.cert.X509Certificate[] r2;
        java.security.cert.CertificateFactory r3;
        java.io.ByteArrayInputStream r4;
        java.lang.IllegalArgumentException $r5;
        int $i0, $i1, $i2, i3;
        android.net.http.SslError $r6;
        byte[] $r7;
        java.security.cert.Certificate $r8;
        java.security.cert.X509Certificate $r9;
        java.lang.Throwable $r10;
        java.io.IOException $r11;
        byte[][] r12;

        r12 := @parameter0: byte[][];

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        if r12 == null goto label7;

        $i0 = lengthof r12;

        if $i0 == 0 goto label7;

        $i1 = lengthof r12;

        r2 = newarray (java.security.cert.X509Certificate)[$i1];

     label1:
        r3 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");

     label2:
        i3 = 0;

     label3:
        $i2 = lengthof r12;

        if i3 >= $i2 goto label5;

        r4 = new java.io.ByteArrayInputStream;

        $r7 = r12[i3];

        specialinvoke r4.<java.io.ByteArrayInputStream: void <init>(byte[])>($r7);

        $r8 = virtualinvoke r3.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>(r4);

        $r9 = (java.security.cert.X509Certificate) $r8;

        r2[i3] = $r9;

     label4:
        i3 = i3 + 1;

        goto label3;

     label5:
        $r6 = staticinvoke <android.net.http.CertificateChainValidator: android.net.http.SslError verifyServerDomainAndCertificates(java.security.cert.X509Certificate[],java.lang.String,java.lang.String)>(r2, r0, r1);

        return $r6;

     label6:
        $r10 := @caughtexception;

        $r11 = new java.io.IOException;

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>("can\'t read certificate", $r10);

        throw $r11;

     label7:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("bad certificate chain");

        throw $r5;

        catch java.security.cert.CertificateException from label1 to label2 with label6;
        catch java.security.cert.CertificateException from label3 to label4 with label6;
    }

    private static android.net.http.SslError verifyServerDomainAndCertificates(java.security.cert.X509Certificate[], java.lang.String, java.lang.String) throws java.io.IOException
    {
        java.lang.String r0, r21;
        java.security.cert.X509Certificate r1;
        javax.net.ssl.X509TrustManager r2;
        java.lang.Class $r4;
        java.lang.Class[] $r5;
        java.lang.reflect.Method $r6;
        java.lang.Object[] $r7;
        boolean $z0, $z1, $z2, z3;
        javax.net.ssl.HostnameVerifier $r10;
        java.lang.Throwable $r12, $r14, $r15, $r16, $r17, $r18;
        java.security.cert.CertificateException $r19;
        java.security.cert.X509Certificate[] r20;
        android.net.http.DelegatingSSLSession$CertificateWrap r26;
        android.net.http.SslError r27, r29;
        java.lang.RuntimeException r28;
        java.lang.IllegalArgumentException r30;
        java.lang.reflect.InvocationTargetException r31, r32, r33;

        r20 := @parameter0: java.security.cert.X509Certificate[];

        r21 := @parameter1: java.lang.String;

        r0 := @parameter2: java.lang.String;

        r1 = r20[0];

        if r1 == null goto label13;

        if r21 == null goto label01;

        $z0 = virtualinvoke r21.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label01;

        $r10 = staticinvoke <android.net.http.CertificateChainValidator$NoPreloadHolder: javax.net.ssl.HostnameVerifier access$200()>();

        r26 = new android.net.http.DelegatingSSLSession$CertificateWrap;

        specialinvoke r26.<android.net.http.DelegatingSSLSession$CertificateWrap: void <init>(java.security.cert.Certificate)>(r1);

        $z1 = interfaceinvoke $r10.<javax.net.ssl.HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>(r21, r26);

        if $z1 == 0 goto label01;

        z3 = 1;

        goto label02;

     label01:
        z3 = 0;

     label02:
        if z3 != 0 goto label03;

        r27 = new android.net.http.SslError;

        specialinvoke r27.<android.net.http.SslError: void <init>(int,java.security.cert.X509Certificate)>(2, r1);

        return r27;

     label03:
        r2 = staticinvoke <com.android.org.conscrypt.Conscrypt: javax.net.ssl.X509TrustManager getDefaultX509TrustManager()>();

     label04:
        $r4 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = newarray (java.lang.Class)[3];

        $r5[0] = class "[Ljava/security/cert/X509Certificate;";

        $r5[1] = class "Ljava/lang/String;";

        $r5[2] = class "Ljava/lang/String;";

        $r6 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("checkServerTrusted", $r5);

        $r7 = newarray (java.lang.Object)[3];

        $r7[0] = r20;

        $r7[1] = r0;

        $r7[2] = r21;

        virtualinvoke $r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r2, $r7);

     label05:
        goto label11;

     label06:
        $r15 := @caughtexception;

     label07:
        r31 = (java.lang.reflect.InvocationTargetException) $r15;

        $r16 = virtualinvoke r31.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        $z2 = $r16 instanceof java.security.cert.CertificateException;

        if $z2 == 0 goto label08;

        r32 = (java.lang.reflect.InvocationTargetException) $r15;

        $r18 = virtualinvoke r32.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        $r19 = (java.security.cert.CertificateException) $r18;

        throw $r19;

     label08:
        r28 = new java.lang.RuntimeException;

        r33 = (java.lang.reflect.InvocationTargetException) $r15;

        $r17 = virtualinvoke r33.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        specialinvoke r28.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r17);

        throw r28;

     label09:
        $r14 := @caughtexception;

     label10:
        interfaceinvoke r2.<javax.net.ssl.X509TrustManager: void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)>(r20, r0);

     label11:
        return null;

     label12:
        $r12 := @caughtexception;

        r29 = new android.net.http.SslError;

        specialinvoke r29.<android.net.http.SslError: void <init>(int,java.security.cert.X509Certificate)>(3, r1);

        return r29;

     label13:
        r30 = new java.lang.IllegalArgumentException;

        specialinvoke r30.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("certificate for this site is null");

        throw r30;

        catch java.security.GeneralSecurityException from label03 to label04 with label12;
        catch java.lang.NoSuchMethodException from label04 to label05 with label09;
        catch java.lang.IllegalAccessException from label04 to label05 with label09;
        catch java.lang.reflect.InvocationTargetException from label04 to label05 with label06;
        catch java.security.GeneralSecurityException from label04 to label05 with label12;
        catch java.security.GeneralSecurityException from label07 to label08 with label12;
        catch java.security.GeneralSecurityException from label08 to label09 with label12;
        catch java.security.GeneralSecurityException from label10 to label11 with label12;
    }

    public android.net.http.SslError doHandshakeAndValidateServerCertificates(android.net.http.HttpsConnection, javax.net.ssl.SSLSocket, java.lang.String) throws java.io.IOException
    {
        android.net.http.CertificateChainValidator r0;
        android.net.http.HttpsConnection r1;
        javax.net.ssl.SSLSocket r2;
        java.lang.String r3;
        java.security.cert.Certificate[] r4;
        javax.net.ssl.SSLSession $r5, $r6;
        boolean $z0;
        int $i0;
        java.security.cert.Certificate $r7, $r9;
        android.net.http.SslCertificate $r8;
        java.security.cert.X509Certificate $r10;
        java.security.cert.X509Certificate[] $r11;
        android.net.http.SslError $r12;

        r0 := @this: android.net.http.CertificateChainValidator;

        r1 := @parameter0: android.net.http.HttpsConnection;

        r2 := @parameter1: javax.net.ssl.SSLSocket;

        r3 := @parameter2: java.lang.String;

        $r5 = virtualinvoke r2.<javax.net.ssl.SSLSocket: javax.net.ssl.SSLSession getSession()>();

        $z0 = interfaceinvoke $r5.<javax.net.ssl.SSLSession: boolean isValid()>();

        if $z0 != 0 goto label1;

        specialinvoke r0.<android.net.http.CertificateChainValidator: void closeSocketThrowException(javax.net.ssl.SSLSocket,java.lang.String)>(r2, "failed to perform SSL handshake");

     label1:
        $r6 = virtualinvoke r2.<javax.net.ssl.SSLSocket: javax.net.ssl.SSLSession getSession()>();

        r4 = interfaceinvoke $r6.<javax.net.ssl.SSLSession: java.security.cert.Certificate[] getPeerCertificates()>();

        if r4 == null goto label3;

        $i0 = lengthof r4;

        if $i0 != 0 goto label2;

        goto label3;

     label2:
        if r1 == null goto label4;

        $r7 = r4[0];

        if $r7 == null goto label4;

        $r8 = new android.net.http.SslCertificate;

        $r9 = r4[0];

        $r10 = (java.security.cert.X509Certificate) $r9;

        specialinvoke $r8.<android.net.http.SslCertificate: void <init>(java.security.cert.X509Certificate)>($r10);

        virtualinvoke r1.<android.net.http.HttpsConnection: void setCertificate(android.net.http.SslCertificate)>($r8);

        goto label4;

     label3:
        specialinvoke r0.<android.net.http.CertificateChainValidator: void closeSocketThrowException(javax.net.ssl.SSLSocket,java.lang.String)>(r2, "failed to retrieve peer certificates");

     label4:
        $r11 = (java.security.cert.X509Certificate[]) r4;

        $r12 = staticinvoke <android.net.http.CertificateChainValidator: android.net.http.SslError verifyServerDomainAndCertificates(java.security.cert.X509Certificate[],java.lang.String,java.lang.String)>($r11, r3, "RSA");

        return $r12;
    }

    public static void <clinit>()
    {
        <android.net.http.CertificateChainValidator: java.lang.String TAG> = "CertificateChainValidator";

        return;
    }
}
