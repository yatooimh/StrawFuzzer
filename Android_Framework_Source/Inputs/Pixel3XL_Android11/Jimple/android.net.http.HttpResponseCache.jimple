public final class android.net.http.HttpResponseCache extends java.net.ResponseCache implements com.android.okhttp.internalandroidapi.HasCacheHolder, java.io.Closeable
{
    private final com.android.okhttp.internalandroidapi.AndroidResponseCacheAdapter mDelegate;

    private void <init>(com.android.okhttp.internalandroidapi.AndroidResponseCacheAdapter)
    {
        android.net.http.HttpResponseCache r0;
        com.android.okhttp.internalandroidapi.AndroidResponseCacheAdapter r1;

        r0 := @this: android.net.http.HttpResponseCache;

        r1 := @parameter0: com.android.okhttp.internalandroidapi.AndroidResponseCacheAdapter;

        specialinvoke r0.<java.net.ResponseCache: void <init>()>();

        r0.<android.net.http.HttpResponseCache: com.android.okhttp.internalandroidapi.AndroidResponseCacheAdapter mDelegate> = r1;

        return;
    }

    public static android.net.http.HttpResponseCache getInstalled()
    {
        java.net.ResponseCache r0;
        boolean $z0;
        android.net.http.HttpResponseCache $r1;

        r0 = staticinvoke <java.net.ResponseCache: java.net.ResponseCache getDefault()>();

        $z0 = r0 instanceof android.net.http.HttpResponseCache;

        if $z0 == 0 goto label1;

        $r1 = (android.net.http.HttpResponseCache) r0;

        return $r1;

     label1:
        return null;
    }

    public static android.net.http.HttpResponseCache install(java.io.File, long) throws java.io.IOException
    {
        long l0;
        boolean z0, $z1;
        com.android.okhttp.internalandroidapi.HasCacheHolder$CacheHolder $r0, r5;
        java.lang.Throwable $r1;
        java.io.File r2;
        java.net.ResponseCache r3;
        android.net.http.HttpResponseCache r4, r7;
        com.android.okhttp.internalandroidapi.AndroidResponseCacheAdapter r6;

        r2 := @parameter0: java.io.File;

        l0 := @parameter1: long;

        entermonitor class "Landroid/net/http/HttpResponseCache;";

     label1:
        r3 = staticinvoke <java.net.ResponseCache: java.net.ResponseCache getDefault()>();

        $z1 = r3 instanceof android.net.http.HttpResponseCache;

        if $z1 == 0 goto label4;

        r4 = (android.net.http.HttpResponseCache) r3;

        $r0 = virtualinvoke r4.<android.net.http.HttpResponseCache: com.android.okhttp.internalandroidapi.HasCacheHolder$CacheHolder getCacheHolder()>();

        z0 = virtualinvoke $r0.<com.android.okhttp.internalandroidapi.HasCacheHolder$CacheHolder: boolean isEquivalent(java.io.File,long)>(r2, l0);

     label2:
        if z0 == 0 goto label3;

        exitmonitor class "Landroid/net/http/HttpResponseCache;";

        return r4;

     label3:
        virtualinvoke r4.<android.net.http.HttpResponseCache: void close()>();

     label4:
        r5 = staticinvoke <com.android.okhttp.internalandroidapi.HasCacheHolder$CacheHolder: com.android.okhttp.internalandroidapi.HasCacheHolder$CacheHolder create(java.io.File,long)>(r2, l0);

        r6 = new com.android.okhttp.internalandroidapi.AndroidResponseCacheAdapter;

        specialinvoke r6.<com.android.okhttp.internalandroidapi.AndroidResponseCacheAdapter: void <init>(com.android.okhttp.internalandroidapi.HasCacheHolder$CacheHolder)>(r5);

        r7 = new android.net.http.HttpResponseCache;

        specialinvoke r7.<android.net.http.HttpResponseCache: void <init>(com.android.okhttp.internalandroidapi.AndroidResponseCacheAdapter)>(r6);

        staticinvoke <java.net.ResponseCache: void setDefault(java.net.ResponseCache)>(r7);

     label5:
        exitmonitor class "Landroid/net/http/HttpResponseCache;";

        return r7;

     label6:
        $r1 := @caughtexception;

        exitmonitor class "Landroid/net/http/HttpResponseCache;";

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public void close() throws java.io.IOException
    {
        android.net.http.HttpResponseCache r0;
        java.net.ResponseCache $r1;
        com.android.okhttp.internalandroidapi.AndroidResponseCacheAdapter $r2;

        r0 := @this: android.net.http.HttpResponseCache;

        $r1 = staticinvoke <java.net.ResponseCache: java.net.ResponseCache getDefault()>();

        if $r1 != r0 goto label1;

        staticinvoke <java.net.ResponseCache: void setDefault(java.net.ResponseCache)>(null);

     label1:
        $r2 = r0.<android.net.http.HttpResponseCache: com.android.okhttp.internalandroidapi.AndroidResponseCacheAdapter mDelegate>;

        virtualinvoke $r2.<com.android.okhttp.internalandroidapi.AndroidResponseCacheAdapter: void close()>();

        return;
    }

    public void delete() throws java.io.IOException
    {
        android.net.http.HttpResponseCache r0;
        java.net.ResponseCache $r1;
        com.android.okhttp.internalandroidapi.AndroidResponseCacheAdapter $r2;

        r0 := @this: android.net.http.HttpResponseCache;

        $r1 = staticinvoke <java.net.ResponseCache: java.net.ResponseCache getDefault()>();

        if $r1 != r0 goto label1;

        staticinvoke <java.net.ResponseCache: void setDefault(java.net.ResponseCache)>(null);

     label1:
        $r2 = r0.<android.net.http.HttpResponseCache: com.android.okhttp.internalandroidapi.AndroidResponseCacheAdapter mDelegate>;

        virtualinvoke $r2.<com.android.okhttp.internalandroidapi.AndroidResponseCacheAdapter: void delete()>();

        return;
    }

    public void flush()
    {
        android.net.http.HttpResponseCache r0;
        com.android.okhttp.internalandroidapi.AndroidResponseCacheAdapter $r2;
        java.lang.Throwable $r3;

        r0 := @this: android.net.http.HttpResponseCache;

     label1:
        $r2 = r0.<android.net.http.HttpResponseCache: com.android.okhttp.internalandroidapi.AndroidResponseCacheAdapter mDelegate>;

        virtualinvoke $r2.<com.android.okhttp.internalandroidapi.AndroidResponseCacheAdapter: void flush()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.net.CacheResponse get(java.net.URI, java.lang.String, java.util.Map) throws java.io.IOException
    {
        android.net.http.HttpResponseCache r0;
        java.net.URI r1;
        java.lang.String r2;
        java.util.Map r3;
        com.android.okhttp.internalandroidapi.AndroidResponseCacheAdapter $r4;
        java.net.CacheResponse $r5;

        r0 := @this: android.net.http.HttpResponseCache;

        r1 := @parameter0: java.net.URI;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.Map;

        $r4 = r0.<android.net.http.HttpResponseCache: com.android.okhttp.internalandroidapi.AndroidResponseCacheAdapter mDelegate>;

        $r5 = virtualinvoke $r4.<com.android.okhttp.internalandroidapi.AndroidResponseCacheAdapter: java.net.CacheResponse get(java.net.URI,java.lang.String,java.util.Map)>(r1, r2, r3);

        return $r5;
    }

    public com.android.okhttp.internalandroidapi.HasCacheHolder$CacheHolder getCacheHolder()
    {
        android.net.http.HttpResponseCache r0;
        com.android.okhttp.internalandroidapi.AndroidResponseCacheAdapter $r1;
        com.android.okhttp.internalandroidapi.HasCacheHolder$CacheHolder $r2;

        r0 := @this: android.net.http.HttpResponseCache;

        $r1 = r0.<android.net.http.HttpResponseCache: com.android.okhttp.internalandroidapi.AndroidResponseCacheAdapter mDelegate>;

        $r2 = virtualinvoke $r1.<com.android.okhttp.internalandroidapi.AndroidResponseCacheAdapter: com.android.okhttp.internalandroidapi.HasCacheHolder$CacheHolder getCacheHolder()>();

        return $r2;
    }

    public int getHitCount()
    {
        android.net.http.HttpResponseCache r0;
        com.android.okhttp.internalandroidapi.AndroidResponseCacheAdapter $r1;
        int $i0;

        r0 := @this: android.net.http.HttpResponseCache;

        $r1 = r0.<android.net.http.HttpResponseCache: com.android.okhttp.internalandroidapi.AndroidResponseCacheAdapter mDelegate>;

        $i0 = virtualinvoke $r1.<com.android.okhttp.internalandroidapi.AndroidResponseCacheAdapter: int getHitCount()>();

        return $i0;
    }

    public int getNetworkCount()
    {
        android.net.http.HttpResponseCache r0;
        com.android.okhttp.internalandroidapi.AndroidResponseCacheAdapter $r1;
        int $i0;

        r0 := @this: android.net.http.HttpResponseCache;

        $r1 = r0.<android.net.http.HttpResponseCache: com.android.okhttp.internalandroidapi.AndroidResponseCacheAdapter mDelegate>;

        $i0 = virtualinvoke $r1.<com.android.okhttp.internalandroidapi.AndroidResponseCacheAdapter: int getNetworkCount()>();

        return $i0;
    }

    public int getRequestCount()
    {
        android.net.http.HttpResponseCache r0;
        com.android.okhttp.internalandroidapi.AndroidResponseCacheAdapter $r1;
        int $i0;

        r0 := @this: android.net.http.HttpResponseCache;

        $r1 = r0.<android.net.http.HttpResponseCache: com.android.okhttp.internalandroidapi.AndroidResponseCacheAdapter mDelegate>;

        $i0 = virtualinvoke $r1.<com.android.okhttp.internalandroidapi.AndroidResponseCacheAdapter: int getRequestCount()>();

        return $i0;
    }

    public long maxSize()
    {
        android.net.http.HttpResponseCache r0;
        com.android.okhttp.internalandroidapi.AndroidResponseCacheAdapter $r1;
        long $l0;

        r0 := @this: android.net.http.HttpResponseCache;

        $r1 = r0.<android.net.http.HttpResponseCache: com.android.okhttp.internalandroidapi.AndroidResponseCacheAdapter mDelegate>;

        $l0 = virtualinvoke $r1.<com.android.okhttp.internalandroidapi.AndroidResponseCacheAdapter: long getMaxSize()>();

        return $l0;
    }

    public java.net.CacheRequest put(java.net.URI, java.net.URLConnection) throws java.io.IOException
    {
        android.net.http.HttpResponseCache r0;
        java.net.URI r1;
        java.net.URLConnection r2;
        com.android.okhttp.internalandroidapi.AndroidResponseCacheAdapter $r3;
        java.net.CacheRequest $r4;

        r0 := @this: android.net.http.HttpResponseCache;

        r1 := @parameter0: java.net.URI;

        r2 := @parameter1: java.net.URLConnection;

        $r3 = r0.<android.net.http.HttpResponseCache: com.android.okhttp.internalandroidapi.AndroidResponseCacheAdapter mDelegate>;

        $r4 = virtualinvoke $r3.<com.android.okhttp.internalandroidapi.AndroidResponseCacheAdapter: java.net.CacheRequest put(java.net.URI,java.net.URLConnection)>(r1, r2);

        return $r4;
    }

    public long size()
    {
        android.net.http.HttpResponseCache r0;
        long l0;
        com.android.okhttp.internalandroidapi.AndroidResponseCacheAdapter $r2;
        java.lang.Throwable $r3;

        r0 := @this: android.net.http.HttpResponseCache;

     label1:
        $r2 = r0.<android.net.http.HttpResponseCache: com.android.okhttp.internalandroidapi.AndroidResponseCacheAdapter mDelegate>;

        l0 = virtualinvoke $r2.<com.android.okhttp.internalandroidapi.AndroidResponseCacheAdapter: long getSize()>();

     label2:
        return l0;

     label3:
        $r3 := @caughtexception;

        return -1L;

        catch java.io.IOException from label1 to label2 with label3;
    }
}
