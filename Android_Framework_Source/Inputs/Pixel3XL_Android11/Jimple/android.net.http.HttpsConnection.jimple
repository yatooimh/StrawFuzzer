public class android.net.http.HttpsConnection extends android.net.http.Connection
{
    private static javax.net.ssl.SSLSocketFactory mSslSocketFactory;
    private boolean mAborted;
    private org.apache.http.HttpHost mProxyHost;
    private java.lang.Object mSuspendLock;
    private boolean mSuspended;

    static void <clinit>()
    {
        <android.net.http.HttpsConnection: javax.net.ssl.SSLSocketFactory mSslSocketFactory> = null;

        staticinvoke <android.net.http.HttpsConnection: void initializeEngine(java.io.File)>(null);

        return;
    }

    void <init>(android.content.Context, org.apache.http.HttpHost, org.apache.http.HttpHost, android.net.http.RequestFeeder)
    {
        android.net.http.HttpsConnection r0;
        android.content.Context r1;
        org.apache.http.HttpHost r2, r3;
        android.net.http.RequestFeeder r4;
        java.lang.Object $r5;

        r0 := @this: android.net.http.HttpsConnection;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: org.apache.http.HttpHost;

        r3 := @parameter2: org.apache.http.HttpHost;

        r4 := @parameter3: android.net.http.RequestFeeder;

        specialinvoke r0.<android.net.http.Connection: void <init>(android.content.Context,org.apache.http.HttpHost,android.net.http.RequestFeeder)>(r1, r2, r4);

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<android.net.http.HttpsConnection: java.lang.Object mSuspendLock> = $r5;

        r0.<android.net.http.HttpsConnection: boolean mSuspended> = 0;

        r0.<android.net.http.HttpsConnection: boolean mAborted> = 0;

        r0.<android.net.http.HttpsConnection: org.apache.http.HttpHost mProxyHost> = r3;

        return;
    }

    private static javax.net.ssl.SSLSocketFactory getSocketFactory()
    {
        java.lang.Throwable $r0;
        javax.net.ssl.SSLSocketFactory r1;

        entermonitor class "Landroid/net/http/HttpsConnection;";

     label1:
        r1 = <android.net.http.HttpsConnection: javax.net.ssl.SSLSocketFactory mSslSocketFactory>;

     label2:
        exitmonitor class "Landroid/net/http/HttpsConnection;";

        return r1;

     label3:
        $r0 := @caughtexception;

        exitmonitor class "Landroid/net/http/HttpsConnection;";

        throw $r0;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static void initializeEngine(java.io.File)
    {
        javax.net.ssl.SSLContext r0;
        java.lang.Object[] $r1;
        javax.net.ssl.SSLSessionContext $r2;
        com.android.org.conscrypt.ClientSessionContext $r3;
        javax.net.ssl.SSLSocketFactory $r4;
        java.lang.String $r8;
        java.lang.Throwable $r9, $r11, $r12;
        java.io.File r14;
        com.android.org.conscrypt.SSLClientSessionCache r15;
        java.lang.StringBuilder r21;
        android.net.http.HttpsConnection$1 r22;
        java.lang.RuntimeException r23, r24;
        javax.net.ssl.TrustManager[] r25;

        r14 := @parameter0: java.io.File;

        r15 = null;

        if r14 == null goto label2;

     label1:
        r21 = new java.lang.StringBuilder;

        specialinvoke r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caching SSL sessions in ");

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r14);

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r8 = virtualinvoke r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("HttpsConnection", $r8);

        r15 = staticinvoke <com.android.org.conscrypt.FileClientSessionCache: com.android.org.conscrypt.SSLClientSessionCache usingDirectory(java.io.File)>(r14);

     label2:
        r0 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.lang.String)>("TLS", "AndroidOpenSSL");

        r22 = new android.net.http.HttpsConnection$1;

        specialinvoke r22.<android.net.http.HttpsConnection$1: void <init>()>();

        $r1 = newarray (javax.net.ssl.TrustManager)[1];

        $r1[0] = r22;

        r25 = (javax.net.ssl.TrustManager[]) $r1;

        virtualinvoke r0.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(null, r25, null);

        $r2 = virtualinvoke r0.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSessionContext getClientSessionContext()>();

        $r3 = (com.android.org.conscrypt.ClientSessionContext) $r2;

        virtualinvoke $r3.<com.android.org.conscrypt.ClientSessionContext: void setPersistentCache(com.android.org.conscrypt.SSLClientSessionCache)>(r15);

        entermonitor class "Landroid/net/http/HttpsConnection;";

     label3:
        $r4 = virtualinvoke r0.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        <android.net.http.HttpsConnection: javax.net.ssl.SSLSocketFactory mSslSocketFactory> = $r4;

        exitmonitor class "Landroid/net/http/HttpsConnection;";

     label4:
        return;

     label5:
        $r11 := @caughtexception;

     label6:
        exitmonitor class "Landroid/net/http/HttpsConnection;";

     label7:
        throw $r11;

     label8:
        $r12 := @caughtexception;

        r23 = new java.lang.RuntimeException;

        specialinvoke r23.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r12);

        throw r23;

     label9:
        $r9 := @caughtexception;

        r24 = new java.lang.RuntimeException;

        specialinvoke r24.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r9);

        throw r24;

        catch java.security.KeyManagementException from label1 to label2 with label9;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label9;
        catch java.security.NoSuchProviderException from label1 to label2 with label9;
        catch java.io.IOException from label1 to label2 with label8;
        catch java.security.KeyManagementException from label2 to label3 with label9;
        catch java.security.NoSuchAlgorithmException from label2 to label3 with label9;
        catch java.security.NoSuchProviderException from label2 to label3 with label9;
        catch java.io.IOException from label2 to label3 with label8;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
        catch java.security.KeyManagementException from label7 to label8 with label9;
        catch java.security.NoSuchAlgorithmException from label7 to label8 with label9;
        catch java.security.NoSuchProviderException from label7 to label8 with label9;
        catch java.io.IOException from label7 to label8 with label8;
    }

    void closeConnection()
    {
        android.net.http.HttpsConnection r0;
        boolean $z0, $z1;
        android.net.http.AndroidHttpClientConnection $r2, $r3, $r4;
        java.lang.Throwable $r5;
        java.io.IOException r6;

        r0 := @this: android.net.http.HttpsConnection;

        $z0 = r0.<android.net.http.HttpsConnection: boolean mSuspended>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<android.net.http.HttpsConnection: void restartConnection(boolean)>(0);

     label1:
        $r2 = r0.<android.net.http.HttpsConnection: android.net.http.AndroidHttpClientConnection mHttpClientConnection>;

        if $r2 == null goto label2;

        $r3 = r0.<android.net.http.HttpsConnection: android.net.http.AndroidHttpClientConnection mHttpClientConnection>;

        $z1 = virtualinvoke $r3.<android.net.http.AndroidHttpClientConnection: boolean isOpen()>();

        if $z1 == 0 goto label2;

        $r4 = r0.<android.net.http.HttpsConnection: android.net.http.AndroidHttpClientConnection mHttpClientConnection>;

        virtualinvoke $r4.<android.net.http.AndroidHttpClientConnection: void close()>();

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r6 = (java.io.IOException) $r5;

        virtualinvoke r6.<java.io.IOException: void printStackTrace()>();

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    java.lang.String getScheme()
    {
        android.net.http.HttpsConnection r0;

        r0 := @this: android.net.http.HttpsConnection;

        return "https";
    }

    android.net.http.AndroidHttpClientConnection openConnection(android.net.http.Request) throws java.io.IOException
    {
        android.net.http.HttpsConnection r0;
        org.apache.http.Header[] r1;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        org.apache.http.Header r2;
        java.lang.String r3, $r7, $r12, $r18, $r21, $r25, $r28, $r33, $r36, r66, r67, r70, r71, r73, r74, r76, r77, r79, r80, r92, r93;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.apache.http.HttpHost $r4, $r6, $r8, $r11, $r20, $r22, $r24, $r32, $r34;
        javax.net.ssl.SSLSocketFactory $r5, $r31;
        java.net.Socket $r9, $r35, r94;
        android.net.http.CertificateChainValidator $r10;
        android.net.http.EventHandler $r15, $r27, $r29, $r30;
        java.lang.Object $r19, r83, r84;
        org.apache.http.message.BasicHttpRequest $r26, r98;
        java.util.Locale $r37;
        java.lang.Throwable $r38, $r41, $r42, $r44, $r49, $r51, $r52;
        org.apache.http.ParseException $r39;
        org.apache.http.HttpException $r47;
        android.net.http.Request r54;
        javax.net.ssl.SSLSocket r55, r64, r81;
        android.net.http.AndroidHttpClientConnection r56, r95, r108;
        org.apache.http.StatusLine r63;
        org.apache.http.ProtocolVersion r68;
        android.net.http.SslError r82;
        org.apache.http.params.BasicHttpParams r96, r109;
        android.net.http.Headers r97;
        java.io.IOException r100, r101, r102, r103, r104, r107, r110, r111, r112, r113, r114;
        android.net.http.SSLConnectionClosedByUserException r105;
        java.lang.StringBuilder r106;

        r0 := @this: android.net.http.HttpsConnection;

        r54 := @parameter0: android.net.http.Request;

        r55 = null;

        $r4 = r0.<android.net.http.HttpsConnection: org.apache.http.HttpHost mProxyHost>;

        if $r4 == null goto label43;

        r56 = null;

     label01:
        r94 = new java.net.Socket;

     label02:
        r56 = null;

     label03:
        $r20 = r0.<android.net.http.HttpsConnection: org.apache.http.HttpHost mProxyHost>;

        $r21 = virtualinvoke $r20.<org.apache.http.HttpHost: java.lang.String getHostName()>();

        $r22 = r0.<android.net.http.HttpsConnection: org.apache.http.HttpHost mProxyHost>;

        $i2 = virtualinvoke $r22.<org.apache.http.HttpHost: int getPort()>();

        specialinvoke r94.<java.net.Socket: void <init>(java.lang.String,int)>($r21, $i2);

     label04:
        r56 = null;

     label05:
        virtualinvoke r94.<java.net.Socket: void setSoTimeout(int)>(60000);

     label06:
        r56 = null;

     label07:
        r95 = new android.net.http.AndroidHttpClientConnection;

     label08:
        r56 = null;

     label09:
        specialinvoke r95.<android.net.http.AndroidHttpClientConnection: void <init>()>();

     label10:
        r56 = r95;

     label11:
        r96 = new org.apache.http.params.BasicHttpParams;

     label12:
        r56 = r95;

     label13:
        specialinvoke r96.<org.apache.http.params.BasicHttpParams: void <init>()>();

     label14:
        r56 = r95;

     label15:
        staticinvoke <org.apache.http.params.HttpConnectionParams: void setSocketBufferSize(org.apache.http.params.HttpParams,int)>(r96, 8192);

     label16:
        r56 = r95;

     label17:
        virtualinvoke r95.<android.net.http.AndroidHttpClientConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)>(r94, r96);

     label18:
        r97 = new android.net.http.Headers;

        specialinvoke r97.<android.net.http.Headers: void <init>()>();

     label19:
        r98 = new org.apache.http.message.BasicHttpRequest;

        $r24 = r0.<android.net.http.HttpsConnection: org.apache.http.HttpHost mHost>;

        $r25 = virtualinvoke $r24.<org.apache.http.HttpHost: java.lang.String toHostString()>();

        specialinvoke r98.<org.apache.http.message.BasicHttpRequest: void <init>(java.lang.String,java.lang.String)>("CONNECT", $r25);

        $r26 = r54.<android.net.http.Request: org.apache.http.message.BasicHttpRequest mHttpRequest>;

        r1 = virtualinvoke $r26.<org.apache.http.message.BasicHttpRequest: org.apache.http.Header[] getAllHeaders()>();

        i0 = lengthof r1;

     label20:
        i6 = 0;

     label21:
        if i6 >= i0 goto label25;

        r2 = r1[i6];

     label22:
        $r36 = interfaceinvoke r2.<org.apache.http.Header: java.lang.String getName()>();

        $r37 = <java.util.Locale: java.util.Locale ROOT>;

        r3 = virtualinvoke $r36.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r37);

        $z3 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>("proxy");

        if $z3 != 0 goto label23;

        $z4 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("keep-alive");

        if $z4 != 0 goto label23;

        $z5 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("host");

        if $z5 == 0 goto label24;

     label23:
        virtualinvoke r98.<org.apache.http.message.BasicHttpRequest: void addHeader(org.apache.http.Header)>(r2);

     label24:
        i6 = i6 + 1;

        goto label21;

     label25:
        virtualinvoke r95.<android.net.http.AndroidHttpClientConnection: void sendRequestHeader(org.apache.http.HttpRequest)>(r98);

        virtualinvoke r95.<android.net.http.AndroidHttpClientConnection: void flush()>();

     label26:
        r63 = virtualinvoke r95.<android.net.http.AndroidHttpClientConnection: org.apache.http.StatusLine parseResponseHeader(android.net.http.Headers)>(r97);

        i7 = interfaceinvoke r63.<org.apache.http.StatusLine: int getStatusCode()>();

     label27:
        if i7 < 200 goto label26;

        if i7 != 200 goto label33;

     label28:
        $r31 = staticinvoke <android.net.http.HttpsConnection: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        $r32 = r0.<android.net.http.HttpsConnection: org.apache.http.HttpHost mHost>;

        $r33 = virtualinvoke $r32.<org.apache.http.HttpHost: java.lang.String getHostName()>();

        $r34 = r0.<android.net.http.HttpsConnection: org.apache.http.HttpHost mHost>;

        $i5 = virtualinvoke $r34.<org.apache.http.HttpHost: int getPort()>();

        $r35 = virtualinvoke $r31.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>(r94, $r33, $i5, 1);

        r64 = (javax.net.ssl.SSLSocket) $r35;

     label29:
        goto label47;

     label30:
        $r44 := @caughtexception;

        goto label31;

     label31:
        r111 = (java.io.IOException) $r44;

        r66 = virtualinvoke r111.<java.io.IOException: java.lang.String getMessage()>();

        r67 = r66;

        if r66 != null goto label32;

        r67 = "failed to create an SSL socket";

     label32:
        r100 = new java.io.IOException;

        specialinvoke r100.<java.io.IOException: void <init>(java.lang.String)>(r67);

        throw r100;

     label33:
        r68 = interfaceinvoke r63.<org.apache.http.StatusLine: org.apache.http.ProtocolVersion getProtocolVersion()>();

        $r27 = r54.<android.net.http.Request: android.net.http.EventHandler mEventHandler>;

        $i3 = virtualinvoke r68.<org.apache.http.ProtocolVersion: int getMajor()>();

        $i4 = virtualinvoke r68.<org.apache.http.ProtocolVersion: int getMinor()>();

        $r28 = interfaceinvoke r63.<org.apache.http.StatusLine: java.lang.String getReasonPhrase()>();

        interfaceinvoke $r27.<android.net.http.EventHandler: void status(int,int,int,java.lang.String)>($i3, $i4, i7, $r28);

        $r29 = r54.<android.net.http.Request: android.net.http.EventHandler mEventHandler>;

        interfaceinvoke $r29.<android.net.http.EventHandler: void headers(android.net.http.Headers)>(r97);

        $r30 = r54.<android.net.http.Request: android.net.http.EventHandler mEventHandler>;

        interfaceinvoke $r30.<android.net.http.EventHandler: void endData()>();

        virtualinvoke r95.<android.net.http.AndroidHttpClientConnection: void close()>();

        return null;

     label34:
        $r42 := @caughtexception;

        r112 = (java.io.IOException) $r42;

        r70 = virtualinvoke r112.<java.io.IOException: java.lang.String getMessage()>();

        r71 = r70;

        if r70 != null goto label35;

        r71 = "failed to send a CONNECT request";

     label35:
        r101 = new java.io.IOException;

        specialinvoke r101.<java.io.IOException: void <init>(java.lang.String)>(r71);

        throw r101;

     label36:
        $r47 := @caughtexception;

        r73 = virtualinvoke $r47.<org.apache.http.HttpException: java.lang.String getMessage()>();

        r74 = r73;

        if r73 != null goto label37;

        r74 = "failed to send a CONNECT request";

     label37:
        r102 = new java.io.IOException;

        specialinvoke r102.<java.io.IOException: void <init>(java.lang.String)>(r74);

        throw r102;

     label38:
        $r39 := @caughtexception;

        r76 = virtualinvoke $r39.<org.apache.http.ParseException: java.lang.String getMessage()>();

        r77 = r76;

        if r76 != null goto label39;

        r77 = "failed to send a CONNECT request";

     label39:
        r103 = new java.io.IOException;

        specialinvoke r103.<java.io.IOException: void <init>(java.lang.String)>(r77);

        throw r103;

     label40:
        $r52 := @caughtexception;

        if r56 == null goto label41;

        virtualinvoke r56.<android.net.http.AndroidHttpClientConnection: void close()>();

     label41:
        r113 = (java.io.IOException) $r52;

        r79 = virtualinvoke r113.<java.io.IOException: java.lang.String getMessage()>();

        r80 = r79;

        if r79 != null goto label42;

        r80 = "failed to establish a connection to the proxy";

     label42:
        r104 = new java.io.IOException;

        specialinvoke r104.<java.io.IOException: void <init>(java.lang.String)>(r80);

        throw r104;

     label43:
        $r5 = staticinvoke <android.net.http.HttpsConnection: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        $r6 = r0.<android.net.http.HttpsConnection: org.apache.http.HttpHost mHost>;

        $r7 = virtualinvoke $r6.<org.apache.http.HttpHost: java.lang.String getHostName()>();

        $r8 = r0.<android.net.http.HttpsConnection: org.apache.http.HttpHost mHost>;

        $i1 = virtualinvoke $r8.<org.apache.http.HttpHost: int getPort()>();

        $r9 = virtualinvoke $r5.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.lang.String,int)>($r7, $i1);

        r81 = (javax.net.ssl.SSLSocket) $r9;

     label44:
        r55 = r81;

     label45:
        virtualinvoke r81.<javax.net.ssl.SSLSocket: void setSoTimeout(int)>(60000);

     label46:
        r64 = r81;

     label47:
        $r10 = staticinvoke <android.net.http.CertificateChainValidator: android.net.http.CertificateChainValidator getInstance()>();

        $r11 = r0.<android.net.http.HttpsConnection: org.apache.http.HttpHost mHost>;

        $r12 = virtualinvoke $r11.<org.apache.http.HttpHost: java.lang.String getHostName()>();

        r82 = virtualinvoke $r10.<android.net.http.CertificateChainValidator: android.net.http.SslError doHandshakeAndValidateServerCertificates(android.net.http.HttpsConnection,javax.net.ssl.SSLSocket,java.lang.String)>(r0, r64, $r12);

        if r82 == null goto label65;

        r83 = r0.<android.net.http.HttpsConnection: java.lang.Object mSuspendLock>;

        entermonitor r83;

     label48:
        r0.<android.net.http.HttpsConnection: boolean mSuspended> = 1;

        exitmonitor r83;

     label49:
        $r15 = virtualinvoke r54.<android.net.http.Request: android.net.http.EventHandler getEventHandler()>();

        $z1 = interfaceinvoke $r15.<android.net.http.EventHandler: boolean handleSslErrorRequest(android.net.http.SslError)>(r82);

        if $z1 == 0 goto label61;

        r84 = r0.<android.net.http.HttpsConnection: java.lang.Object mSuspendLock>;

        entermonitor r84;

     label50:
        z0 = r0.<android.net.http.HttpsConnection: boolean mSuspended>;

     label51:
        if z0 == 0 goto label55;

     label52:
        $r19 = r0.<android.net.http.HttpsConnection: java.lang.Object mSuspendLock>;

        virtualinvoke $r19.<java.lang.Object: void wait(long)>(600000L);

        $z2 = r0.<android.net.http.HttpsConnection: boolean mSuspended>;

        if $z2 == 0 goto label53;

        r0.<android.net.http.HttpsConnection: boolean mSuspended> = 0;

        r0.<android.net.http.HttpsConnection: boolean mAborted> = 1;

     label53:
        goto label55;

     label54:
        $r38 := @caughtexception;

     label55:
        $z6 = r0.<android.net.http.HttpsConnection: boolean mAborted>;

        if $z6 != 0 goto label57;

        exitmonitor r84;

     label56:
        goto label65;

     label57:
        virtualinvoke r64.<javax.net.ssl.SSLSocket: void close()>();

        r105 = new android.net.http.SSLConnectionClosedByUserException;

        specialinvoke r105.<android.net.http.SSLConnectionClosedByUserException: void <init>(java.lang.String)>("connection closed by the user");

        throw r105;

     label58:
        $r51 := @caughtexception;

     label59:
        exitmonitor r84;

     label60:
        throw $r51;

     label61:
        r106 = new java.lang.StringBuilder;

        specialinvoke r106.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed to handle ");

        virtualinvoke r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r82);

        r107 = new java.io.IOException;

        $r18 = virtualinvoke r106.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r107.<java.io.IOException: void <init>(java.lang.String)>($r18);

        throw r107;

     label62:
        $r41 := @caughtexception;

     label63:
        exitmonitor r83;

     label64:
        throw $r41;

     label65:
        r108 = new android.net.http.AndroidHttpClientConnection;

        specialinvoke r108.<android.net.http.AndroidHttpClientConnection: void <init>()>();

        r109 = new org.apache.http.params.BasicHttpParams;

        specialinvoke r109.<org.apache.http.params.BasicHttpParams: void <init>()>();

        virtualinvoke r109.<org.apache.http.params.BasicHttpParams: org.apache.http.params.HttpParams setIntParameter(java.lang.String,int)>("http.socket.buffer-size", 8192);

        virtualinvoke r108.<android.net.http.AndroidHttpClientConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)>(r64, r109);

        return r108;

     label66:
        $r49 := @caughtexception;

        if r55 == null goto label67;

        virtualinvoke r55.<javax.net.ssl.SSLSocket: void close()>();

     label67:
        r114 = (java.io.IOException) $r49;

        r92 = virtualinvoke r114.<java.io.IOException: java.lang.String getMessage()>();

        r93 = r92;

        if r92 != null goto label68;

        r93 = "failed to create an SSL socket";

     label68:
        r110 = new java.io.IOException;

        specialinvoke r110.<java.io.IOException: void <init>(java.lang.String)>(r93);

        throw r110;

        catch java.io.IOException from label01 to label02 with label40;
        catch java.io.IOException from label03 to label04 with label40;
        catch java.io.IOException from label05 to label06 with label40;
        catch java.io.IOException from label07 to label08 with label40;
        catch java.io.IOException from label09 to label10 with label40;
        catch java.io.IOException from label11 to label12 with label40;
        catch java.io.IOException from label13 to label14 with label40;
        catch java.io.IOException from label15 to label16 with label40;
        catch java.io.IOException from label17 to label18 with label40;
        catch org.apache.http.ParseException from label19 to label20 with label38;
        catch org.apache.http.HttpException from label19 to label20 with label36;
        catch java.io.IOException from label19 to label20 with label34;
        catch org.apache.http.ParseException from label22 to label23 with label38;
        catch org.apache.http.HttpException from label22 to label23 with label36;
        catch java.io.IOException from label22 to label23 with label34;
        catch org.apache.http.ParseException from label23 to label24 with label38;
        catch org.apache.http.HttpException from label23 to label24 with label36;
        catch java.io.IOException from label23 to label24 with label34;
        catch org.apache.http.ParseException from label25 to label26 with label38;
        catch org.apache.http.HttpException from label25 to label26 with label36;
        catch java.io.IOException from label25 to label26 with label34;
        catch org.apache.http.ParseException from label26 to label27 with label38;
        catch org.apache.http.HttpException from label26 to label27 with label36;
        catch java.io.IOException from label26 to label27 with label34;
        catch java.io.IOException from label28 to label29 with label30;
        catch java.io.IOException from label43 to label44 with label66;
        catch java.io.IOException from label45 to label46 with label66;
        catch java.lang.Throwable from label48 to label49 with label62;
        catch java.lang.Throwable from label50 to label51 with label58;
        catch java.lang.InterruptedException from label52 to label53 with label54;
        catch java.lang.Throwable from label52 to label53 with label58;
        catch java.lang.Throwable from label55 to label56 with label58;
        catch java.lang.Throwable from label57 to label58 with label58;
        catch java.lang.Throwable from label59 to label60 with label58;
        catch java.lang.Throwable from label63 to label64 with label62;
    }

    void restartConnection(boolean)
    {
        android.net.http.HttpsConnection r0;
        boolean z0, $z1, z2;
        java.lang.Object r1, $r3;
        java.lang.Throwable $r4;

        r0 := @this: android.net.http.HttpsConnection;

        z0 := @parameter0: boolean;

        r1 = r0.<android.net.http.HttpsConnection: java.lang.Object mSuspendLock>;

        entermonitor r1;

     label01:
        $z1 = r0.<android.net.http.HttpsConnection: boolean mSuspended>;

        if $z1 == 0 goto label06;

     label02:
        z2 = 0;

     label03:
        r0.<android.net.http.HttpsConnection: boolean mSuspended> = 0;

     label04:
        if z0 != 0 goto label05;

        z2 = 1;

     label05:
        r0.<android.net.http.HttpsConnection: boolean mAborted> = z2;

        $r3 = r0.<android.net.http.HttpsConnection: java.lang.Object mSuspendLock>;

        virtualinvoke $r3.<java.lang.Object: void notify()>();

     label06:
        exitmonitor r1;

     label07:
        return;

     label08:
        $r4 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    void setCertificate(android.net.http.SslCertificate)
    {
        android.net.http.HttpsConnection r0;
        android.net.http.SslCertificate r1;

        r0 := @this: android.net.http.HttpsConnection;

        r1 := @parameter0: android.net.http.SslCertificate;

        r0.<android.net.http.HttpsConnection: android.net.http.SslCertificate mCertificate> = r1;

        return;
    }

    public volatile java.lang.String toString()
    {
        android.net.http.HttpsConnection r0;
        java.lang.String $r1;

        r0 := @this: android.net.http.HttpsConnection;

        $r1 = specialinvoke r0.<android.net.http.Connection: java.lang.String toString()>();

        return $r1;
    }
}
