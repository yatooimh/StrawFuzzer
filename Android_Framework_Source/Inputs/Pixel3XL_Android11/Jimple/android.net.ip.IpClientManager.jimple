public class android.net.ip.IpClientManager extends java.lang.Object
{
    private final android.net.ip.IIpClient mIpClient;
    private final java.lang.String mTag;

    public void <init>(android.net.ip.IIpClient)
    {
        android.net.ip.IpClientManager r0;
        android.net.ip.IIpClient r1;
        java.lang.Class $r2;
        java.lang.String $r3;

        r0 := @this: android.net.ip.IpClientManager;

        r1 := @parameter0: android.net.ip.IIpClient;

        $r2 = class "Landroid/net/ip/IpClientManager;";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getSimpleName()>();

        specialinvoke r0.<android.net.ip.IpClientManager: void <init>(android.net.ip.IIpClient,java.lang.String)>(r1, $r3);

        return;
    }

    public void <init>(android.net.ip.IIpClient, java.lang.String)
    {
        android.net.ip.IpClientManager r0;
        android.net.ip.IIpClient r1;
        java.lang.String r2;

        r0 := @this: android.net.ip.IpClientManager;

        r1 := @parameter0: android.net.ip.IIpClient;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.net.ip.IpClientManager: android.net.ip.IIpClient mIpClient> = r1;

        r0.<android.net.ip.IpClientManager: java.lang.String mTag> = r2;

        return;
    }

    private void log(java.lang.String, java.lang.Throwable)
    {
        android.net.ip.IpClientManager r0;
        java.lang.String r1, $r3;
        java.lang.Throwable r2;

        r0 := @this: android.net.ip.IpClientManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        $r3 = r0.<android.net.ip.IpClientManager: java.lang.String mTag>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r3, r1, r2);

        return;
    }

    public boolean addKeepalivePacketFilter(int, android.net.NattKeepalivePacketData)
    {
        android.net.ip.IpClientManager r0;
        int i0;
        long l1;
        android.net.ip.IIpClient $r1;
        android.net.NattKeepalivePacketDataParcelable $r2;
        java.lang.Throwable $r3;
        android.os.RemoteException $r4;
        android.net.NattKeepalivePacketData r5;

        r0 := @this: android.net.ip.IpClientManager;

        i0 := @parameter0: int;

        r5 := @parameter1: android.net.NattKeepalivePacketData;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = r0.<android.net.ip.IpClientManager: android.net.ip.IIpClient mIpClient>;

        $r2 = staticinvoke <android.net.util.KeepalivePacketDataUtil: android.net.NattKeepalivePacketDataParcelable toStableParcelable(android.net.NattKeepalivePacketData)>(r5);

        interfaceinvoke $r1.<android.net.ip.IIpClient: void addNattKeepalivePacketFilter(int,android.net.NattKeepalivePacketDataParcelable)>(i0, $r2);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 1;

     label3:
        $r3 := @caughtexception;

        goto label7;

     label4:
        $r4 := @caughtexception;

     label5:
        specialinvoke r0.<android.net.ip.IpClientManager: void log(java.lang.String,java.lang.Throwable)>("Error adding NAT-T Keepalive Packet Filter ", $r4);

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 0;

     label7:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
    }

    public boolean addKeepalivePacketFilter(int, android.net.TcpKeepalivePacketData)
    {
        android.net.ip.IpClientManager r0;
        int i0;
        long l1;
        android.net.ip.IIpClient $r1;
        android.net.TcpKeepalivePacketDataParcelable $r2;
        android.os.RemoteException $r3;
        java.lang.Throwable $r4;
        android.net.TcpKeepalivePacketData r5;

        r0 := @this: android.net.ip.IpClientManager;

        i0 := @parameter0: int;

        r5 := @parameter1: android.net.TcpKeepalivePacketData;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = r0.<android.net.ip.IpClientManager: android.net.ip.IIpClient mIpClient>;

        $r2 = virtualinvoke r5.<android.net.TcpKeepalivePacketData: android.net.TcpKeepalivePacketDataParcelable toStableParcelable()>();

        interfaceinvoke $r1.<android.net.ip.IIpClient: void addKeepalivePacketFilter(int,android.net.TcpKeepalivePacketDataParcelable)>(i0, $r2);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 1;

     label3:
        $r4 := @caughtexception;

        goto label7;

     label4:
        $r3 := @caughtexception;

     label5:
        specialinvoke r0.<android.net.ip.IpClientManager: void log(java.lang.String,java.lang.Throwable)>("Error adding Keepalive Packet Filter ", $r3);

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 0;

     label7:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
    }

    public boolean completedPreDhcpAction()
    {
        android.net.ip.IpClientManager r0;
        long l0;
        android.net.ip.IIpClient $r1;
        java.lang.Throwable $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.ip.IpClientManager;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = r0.<android.net.ip.IpClientManager: android.net.ip.IIpClient mIpClient>;

        interfaceinvoke $r1.<android.net.ip.IIpClient: void completedPreDhcpAction()>();

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 1;

     label3:
        $r2 := @caughtexception;

        goto label7;

     label4:
        $r3 := @caughtexception;

     label5:
        specialinvoke r0.<android.net.ip.IpClientManager: void log(java.lang.String,java.lang.Throwable)>("Error completing PreDhcpAction", $r3);

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 0;

     label7:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
    }

    public boolean confirmConfiguration()
    {
        android.net.ip.IpClientManager r0;
        android.net.ip.IIpClient $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.ip.IpClientManager;

        staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r2 = r0.<android.net.ip.IpClientManager: android.net.ip.IIpClient mIpClient>;

        interfaceinvoke $r2.<android.net.ip.IIpClient: void confirmConfiguration()>();

     label2:
        return 1;

     label3:
        $r3 := @caughtexception;

        specialinvoke r0.<android.net.ip.IpClientManager: void log(java.lang.String,java.lang.Throwable)>("Error confirming IpClient configuration", $r3);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean notifyPreconnectionComplete(boolean)
    {
        android.net.ip.IpClientManager r0;
        boolean z0;
        long l0;
        android.net.ip.IIpClient $r1;
        java.lang.Throwable $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.ip.IpClientManager;

        z0 := @parameter0: boolean;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = r0.<android.net.ip.IpClientManager: android.net.ip.IIpClient mIpClient>;

        interfaceinvoke $r1.<android.net.ip.IIpClient: void notifyPreconnectionComplete(boolean)>(z0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 1;

     label3:
        $r2 := @caughtexception;

        goto label7;

     label4:
        $r3 := @caughtexception;

     label5:
        specialinvoke r0.<android.net.ip.IpClientManager: void log(java.lang.String,java.lang.Throwable)>("Error notifying IpClient Preconnection completed", $r3);

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 0;

     label7:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
    }

    public boolean readPacketFilterComplete(byte[])
    {
        android.net.ip.IpClientManager r0;
        long l0;
        android.net.ip.IIpClient $r1;
        java.lang.Throwable $r2;
        android.os.RemoteException $r3;
        byte[] r4;

        r0 := @this: android.net.ip.IpClientManager;

        r4 := @parameter0: byte[];

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = r0.<android.net.ip.IpClientManager: android.net.ip.IIpClient mIpClient>;

        interfaceinvoke $r1.<android.net.ip.IIpClient: void readPacketFilterComplete(byte[])>(r4);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 1;

     label3:
        $r2 := @caughtexception;

        goto label7;

     label4:
        $r3 := @caughtexception;

     label5:
        specialinvoke r0.<android.net.ip.IpClientManager: void log(java.lang.String,java.lang.Throwable)>("Error notifying IpClient of packet filter read", $r3);

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 0;

     label7:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
    }

    public boolean removeKeepalivePacketFilter(int)
    {
        android.net.ip.IpClientManager r0;
        int i0;
        long l1;
        android.net.ip.IIpClient $r1;
        java.lang.Throwable $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.ip.IpClientManager;

        i0 := @parameter0: int;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = r0.<android.net.ip.IpClientManager: android.net.ip.IIpClient mIpClient>;

        interfaceinvoke $r1.<android.net.ip.IIpClient: void removeKeepalivePacketFilter(int)>(i0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 1;

     label3:
        $r2 := @caughtexception;

        goto label7;

     label4:
        $r3 := @caughtexception;

     label5:
        specialinvoke r0.<android.net.ip.IpClientManager: void log(java.lang.String,java.lang.Throwable)>("Error removing Keepalive Packet Filter ", $r3);

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 0;

     label7:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
    }

    public boolean setHttpProxy(android.net.ProxyInfo)
    {
        android.net.ip.IpClientManager r0;
        long l0;
        android.net.ip.IIpClient $r1;
        java.lang.Throwable $r2;
        android.os.RemoteException $r3;
        android.net.ProxyInfo r4;

        r0 := @this: android.net.ip.IpClientManager;

        r4 := @parameter0: android.net.ProxyInfo;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = r0.<android.net.ip.IpClientManager: android.net.ip.IIpClient mIpClient>;

        interfaceinvoke $r1.<android.net.ip.IIpClient: void setHttpProxy(android.net.ProxyInfo)>(r4);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 1;

     label3:
        $r2 := @caughtexception;

        goto label7;

     label4:
        $r3 := @caughtexception;

     label5:
        specialinvoke r0.<android.net.ip.IpClientManager: void log(java.lang.String,java.lang.Throwable)>("Error setting IpClient proxy", $r3);

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 0;

     label7:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
    }

    public boolean setL2KeyAndGroupHint(java.lang.String, java.lang.String)
    {
        android.net.ip.IpClientManager r0;
        java.lang.String r1, r5;
        long l0;
        android.net.ip.IIpClient $r2;
        java.lang.Throwable $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.net.ip.IpClientManager;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r2 = r0.<android.net.ip.IpClientManager: android.net.ip.IIpClient mIpClient>;

        interfaceinvoke $r2.<android.net.ip.IIpClient: void setL2KeyAndGroupHint(java.lang.String,java.lang.String)>(r5, r1);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 1;

     label3:
        $r3 := @caughtexception;

        goto label7;

     label4:
        $r4 := @caughtexception;

     label5:
        specialinvoke r0.<android.net.ip.IpClientManager: void log(java.lang.String,java.lang.Throwable)>("Failed setL2KeyAndGroupHint", $r4);

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 0;

     label7:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
    }

    public boolean setMulticastFilter(boolean)
    {
        android.net.ip.IpClientManager r0;
        boolean z0;
        long l0;
        android.net.ip.IIpClient $r1;
        java.lang.Throwable $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.ip.IpClientManager;

        z0 := @parameter0: boolean;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = r0.<android.net.ip.IpClientManager: android.net.ip.IIpClient mIpClient>;

        interfaceinvoke $r1.<android.net.ip.IIpClient: void setMulticastFilter(boolean)>(z0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 1;

     label3:
        $r2 := @caughtexception;

        goto label7;

     label4:
        $r3 := @caughtexception;

     label5:
        specialinvoke r0.<android.net.ip.IpClientManager: void log(java.lang.String,java.lang.Throwable)>("Error setting multicast filter", $r3);

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 0;

     label7:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
    }

    public boolean setTcpBufferSizes(java.lang.String)
    {
        android.net.ip.IpClientManager r0;
        long l0;
        android.net.ip.IIpClient $r1;
        java.lang.Throwable $r2;
        android.os.RemoteException $r3;
        java.lang.String r4;

        r0 := @this: android.net.ip.IpClientManager;

        r4 := @parameter0: java.lang.String;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = r0.<android.net.ip.IpClientManager: android.net.ip.IIpClient mIpClient>;

        interfaceinvoke $r1.<android.net.ip.IIpClient: void setTcpBufferSizes(java.lang.String)>(r4);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 1;

     label3:
        $r2 := @caughtexception;

        goto label7;

     label4:
        $r3 := @caughtexception;

     label5:
        specialinvoke r0.<android.net.ip.IpClientManager: void log(java.lang.String,java.lang.Throwable)>("Error setting IpClient TCP buffer sizes", $r3);

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 0;

     label7:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
    }

    public boolean shutdown()
    {
        android.net.ip.IpClientManager r0;
        long l0;
        android.net.ip.IIpClient $r1;
        java.lang.Throwable $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.ip.IpClientManager;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = r0.<android.net.ip.IpClientManager: android.net.ip.IIpClient mIpClient>;

        interfaceinvoke $r1.<android.net.ip.IIpClient: void shutdown()>();

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 1;

     label3:
        $r2 := @caughtexception;

        goto label7;

     label4:
        $r3 := @caughtexception;

     label5:
        specialinvoke r0.<android.net.ip.IpClientManager: void log(java.lang.String,java.lang.Throwable)>("Error shutting down IpClient", $r3);

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 0;

     label7:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
    }

    public boolean startProvisioning(android.net.shared.ProvisioningConfiguration)
    {
        android.net.ip.IpClientManager r0;
        long l0;
        android.net.ip.IIpClient $r1;
        android.net.ProvisioningConfigurationParcelable $r2;
        java.lang.Throwable $r3;
        android.os.RemoteException $r4;
        android.net.shared.ProvisioningConfiguration r5;

        r0 := @this: android.net.ip.IpClientManager;

        r5 := @parameter0: android.net.shared.ProvisioningConfiguration;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = r0.<android.net.ip.IpClientManager: android.net.ip.IIpClient mIpClient>;

        $r2 = virtualinvoke r5.<android.net.shared.ProvisioningConfiguration: android.net.ProvisioningConfigurationParcelable toStableParcelable()>();

        interfaceinvoke $r1.<android.net.ip.IIpClient: void startProvisioning(android.net.ProvisioningConfigurationParcelable)>($r2);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 1;

     label3:
        $r3 := @caughtexception;

        goto label7;

     label4:
        $r4 := @caughtexception;

     label5:
        specialinvoke r0.<android.net.ip.IpClientManager: void log(java.lang.String,java.lang.Throwable)>("Error starting IpClient provisioning", $r4);

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 0;

     label7:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
    }

    public boolean stop()
    {
        android.net.ip.IpClientManager r0;
        long l0;
        android.net.ip.IIpClient $r1;
        android.os.RemoteException $r2;
        java.lang.Throwable $r3;

        r0 := @this: android.net.ip.IpClientManager;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = r0.<android.net.ip.IpClientManager: android.net.ip.IIpClient mIpClient>;

        interfaceinvoke $r1.<android.net.ip.IIpClient: void stop()>();

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 1;

     label3:
        $r3 := @caughtexception;

        goto label7;

     label4:
        $r2 := @caughtexception;

     label5:
        specialinvoke r0.<android.net.ip.IpClientManager: void log(java.lang.String,java.lang.Throwable)>("Error stopping IpClient", $r2);

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 0;

     label7:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
    }

    public boolean updateLayer2Information(android.net.shared.Layer2Information)
    {
        android.net.ip.IpClientManager r0;
        long l0;
        android.net.ip.IIpClient $r1;
        android.net.Layer2InformationParcelable $r2;
        java.lang.Throwable $r3;
        android.os.RemoteException $r4;
        android.net.shared.Layer2Information r5;

        r0 := @this: android.net.ip.IpClientManager;

        r5 := @parameter0: android.net.shared.Layer2Information;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = r0.<android.net.ip.IpClientManager: android.net.ip.IIpClient mIpClient>;

        $r2 = virtualinvoke r5.<android.net.shared.Layer2Information: android.net.Layer2InformationParcelable toStableParcelable()>();

        interfaceinvoke $r1.<android.net.ip.IIpClient: void updateLayer2Information(android.net.Layer2InformationParcelable)>($r2);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 1;

     label3:
        $r3 := @caughtexception;

        goto label7;

     label4:
        $r4 := @caughtexception;

     label5:
        specialinvoke r0.<android.net.ip.IpClientManager: void log(java.lang.String,java.lang.Throwable)>("Error updating layer2 information", $r4);

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 0;

     label7:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
    }
}
