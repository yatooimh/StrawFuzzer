public abstract class android.net.netstats.provider.NetworkStatsProvider extends java.lang.Object
{
    public static final int QUOTA_UNLIMITED;
    private final android.net.netstats.provider.INetworkStatsProvider mProviderBinder;
    private android.net.netstats.provider.INetworkStatsProviderCallback mProviderCbBinder;

    public void <init>()
    {
        android.net.netstats.provider.NetworkStatsProvider r0;
        android.net.netstats.provider.NetworkStatsProvider$1 $r1;

        r0 := @this: android.net.netstats.provider.NetworkStatsProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new android.net.netstats.provider.NetworkStatsProvider$1;

        specialinvoke $r1.<android.net.netstats.provider.NetworkStatsProvider$1: void <init>(android.net.netstats.provider.NetworkStatsProvider)>(r0);

        r0.<android.net.netstats.provider.NetworkStatsProvider: android.net.netstats.provider.INetworkStatsProvider mProviderBinder> = $r1;

        return;
    }

    public android.net.netstats.provider.INetworkStatsProvider getProviderBinder()
    {
        android.net.netstats.provider.NetworkStatsProvider r0;
        android.net.netstats.provider.INetworkStatsProvider $r1;

        r0 := @this: android.net.netstats.provider.NetworkStatsProvider;

        $r1 = r0.<android.net.netstats.provider.NetworkStatsProvider: android.net.netstats.provider.INetworkStatsProvider mProviderBinder>;

        return $r1;
    }

    public android.net.netstats.provider.INetworkStatsProviderCallback getProviderCallbackBinder()
    {
        android.net.netstats.provider.NetworkStatsProvider r0;
        android.net.netstats.provider.INetworkStatsProviderCallback $r1;

        r0 := @this: android.net.netstats.provider.NetworkStatsProvider;

        $r1 = r0.<android.net.netstats.provider.NetworkStatsProvider: android.net.netstats.provider.INetworkStatsProviderCallback mProviderCbBinder>;

        return $r1;
    }

    public android.net.netstats.provider.INetworkStatsProviderCallback getProviderCallbackBinderOrThrow()
    {
        android.net.netstats.provider.NetworkStatsProvider r0;
        android.net.netstats.provider.INetworkStatsProviderCallback r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: android.net.netstats.provider.NetworkStatsProvider;

        r1 = r0.<android.net.netstats.provider.NetworkStatsProvider: android.net.netstats.provider.INetworkStatsProviderCallback mProviderCbBinder>;

        if r1 == null goto label1;

        return r1;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("the provider is not registered");

        throw $r2;
    }

    public void notifyAlertReached()
    {
        android.net.netstats.provider.NetworkStatsProvider r0;
        android.net.netstats.provider.INetworkStatsProviderCallback $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.netstats.provider.NetworkStatsProvider;

     label1:
        $r2 = virtualinvoke r0.<android.net.netstats.provider.NetworkStatsProvider: android.net.netstats.provider.INetworkStatsProviderCallback getProviderCallbackBinderOrThrow()>();

        interfaceinvoke $r2.<android.net.netstats.provider.INetworkStatsProviderCallback: void notifyAlertReached()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void notifyLimitReached()
    {
        android.net.netstats.provider.NetworkStatsProvider r0;
        android.net.netstats.provider.INetworkStatsProviderCallback $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.netstats.provider.NetworkStatsProvider;

     label1:
        $r2 = virtualinvoke r0.<android.net.netstats.provider.NetworkStatsProvider: android.net.netstats.provider.INetworkStatsProviderCallback getProviderCallbackBinderOrThrow()>();

        interfaceinvoke $r2.<android.net.netstats.provider.INetworkStatsProviderCallback: void notifyLimitReached()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void notifyStatsUpdated(int, android.net.NetworkStats, android.net.NetworkStats)
    {
        android.net.netstats.provider.NetworkStatsProvider r0;
        int i0;
        android.net.NetworkStats r1, r5;
        android.net.netstats.provider.INetworkStatsProviderCallback $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.net.netstats.provider.NetworkStatsProvider;

        i0 := @parameter0: int;

        r5 := @parameter1: android.net.NetworkStats;

        r1 := @parameter2: android.net.NetworkStats;

     label1:
        $r2 = virtualinvoke r0.<android.net.netstats.provider.NetworkStatsProvider: android.net.netstats.provider.INetworkStatsProviderCallback getProviderCallbackBinderOrThrow()>();

        interfaceinvoke $r2.<android.net.netstats.provider.INetworkStatsProviderCallback: void notifyStatsUpdated(int,android.net.NetworkStats,android.net.NetworkStats)>(i0, r5, r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public abstract void onRequestStatsUpdate(int);

    public abstract void onSetAlert(long);

    public abstract void onSetLimit(java.lang.String, long);

    public void setProviderCallbackBinder(android.net.netstats.provider.INetworkStatsProviderCallback)
    {
        android.net.netstats.provider.NetworkStatsProvider r0;
        android.net.netstats.provider.INetworkStatsProviderCallback r1, $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: android.net.netstats.provider.NetworkStatsProvider;

        r1 := @parameter0: android.net.netstats.provider.INetworkStatsProviderCallback;

        $r2 = r0.<android.net.netstats.provider.NetworkStatsProvider: android.net.netstats.provider.INetworkStatsProviderCallback mProviderCbBinder>;

        if $r2 != null goto label1;

        r0.<android.net.netstats.provider.NetworkStatsProvider: android.net.netstats.provider.INetworkStatsProviderCallback mProviderCbBinder> = r1;

        return;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("provider is already registered");

        throw $r3;
    }

    public static void <clinit>()
    {
        <android.net.netstats.provider.NetworkStatsProvider: int QUOTA_UNLIMITED> = -1;

        return;
    }
}
