public abstract class android.net.networkstack.NetworkStackClientBase extends java.lang.Object
{
    private android.net.INetworkStackConnector mConnector;
    private final java.util.ArrayList mPendingNetStackRequests;

    public void <init>()
    {
        android.net.networkstack.NetworkStackClientBase r0;
        java.util.ArrayList $r1;

        r0 := @this: android.net.networkstack.NetworkStackClientBase;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<android.net.networkstack.NetworkStackClientBase: java.util.ArrayList mPendingNetStackRequests> = $r1;

        return;
    }

    static void lambda$fetchIpMemoryStore$3(android.net.IIpMemoryStoreCallbacks, android.net.INetworkStackConnector)
    {
        android.net.INetworkStackConnector r0;
        android.os.RemoteException $r1;
        java.lang.IllegalStateException $r2;
        android.net.IIpMemoryStoreCallbacks r3;

        r3 := @parameter0: android.net.IIpMemoryStoreCallbacks;

        r0 := @parameter1: android.net.INetworkStackConnector;

     label1:
        interfaceinvoke r0.<android.net.INetworkStackConnector: void fetchIpMemoryStore(android.net.IIpMemoryStoreCallbacks)>(r3);

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Could not fetch IpMemoryStore", $r1);

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    static void lambda$makeDhcpServer$0(java.lang.String, android.net.dhcp.DhcpServingParamsParcel, android.net.dhcp.IDhcpServerCallbacks, android.net.INetworkStackConnector)
    {
        android.net.dhcp.DhcpServingParamsParcel r0;
        android.net.dhcp.IDhcpServerCallbacks r1;
        android.net.INetworkStackConnector r2;
        android.os.RemoteException $r3;
        java.lang.IllegalStateException $r4;
        java.lang.String r5;

        r5 := @parameter0: java.lang.String;

        r0 := @parameter1: android.net.dhcp.DhcpServingParamsParcel;

        r1 := @parameter2: android.net.dhcp.IDhcpServerCallbacks;

        r2 := @parameter3: android.net.INetworkStackConnector;

     label1:
        interfaceinvoke r2.<android.net.INetworkStackConnector: void makeDhcpServer(java.lang.String,android.net.dhcp.DhcpServingParamsParcel,android.net.dhcp.IDhcpServerCallbacks)>(r5, r0, r1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Could not create DhcpServer", $r3);

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    static void lambda$makeIpClient$1(java.lang.String, android.net.ip.IIpClientCallbacks, android.net.INetworkStackConnector)
    {
        android.net.ip.IIpClientCallbacks r0;
        android.net.INetworkStackConnector r1;
        android.os.RemoteException $r2;
        java.lang.IllegalStateException $r3;
        java.lang.String r4;

        r4 := @parameter0: java.lang.String;

        r0 := @parameter1: android.net.ip.IIpClientCallbacks;

        r1 := @parameter2: android.net.INetworkStackConnector;

     label1:
        interfaceinvoke r1.<android.net.INetworkStackConnector: void makeIpClient(java.lang.String,android.net.ip.IIpClientCallbacks)>(r4, r0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Could not create IpClient", $r2);

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    static void lambda$makeNetworkMonitor$2(android.net.Network, java.lang.String, android.net.INetworkMonitorCallbacks, android.net.INetworkStackConnector)
    {
        java.lang.String r0;
        android.net.INetworkMonitorCallbacks r1;
        android.net.INetworkStackConnector r2;
        android.os.RemoteException $r3;
        java.lang.IllegalStateException $r4;
        android.net.Network r5;

        r5 := @parameter0: android.net.Network;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: android.net.INetworkMonitorCallbacks;

        r2 := @parameter3: android.net.INetworkStackConnector;

     label1:
        interfaceinvoke r2.<android.net.INetworkStackConnector: void makeNetworkMonitor(android.net.Network,java.lang.String,android.net.INetworkMonitorCallbacks)>(r5, r0, r1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Could not create NetworkMonitor", $r3);

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void fetchIpMemoryStore(android.net.IIpMemoryStoreCallbacks)
    {
        android.net.networkstack.NetworkStackClientBase r0;
        android.net.IIpMemoryStoreCallbacks r1;
        android.net.networkstack._$$Lambda$NetworkStackClientBase$okdj3YJsErzDSIpQV_9KsxdCYmM $r2;

        r0 := @this: android.net.networkstack.NetworkStackClientBase;

        r1 := @parameter0: android.net.IIpMemoryStoreCallbacks;

        $r2 = new android.net.networkstack._$$Lambda$NetworkStackClientBase$okdj3YJsErzDSIpQV_9KsxdCYmM;

        specialinvoke $r2.<android.net.networkstack._$$Lambda$NetworkStackClientBase$okdj3YJsErzDSIpQV_9KsxdCYmM: void <init>(android.net.IIpMemoryStoreCallbacks)>(r1);

        virtualinvoke r0.<android.net.networkstack.NetworkStackClientBase: void requestConnector(java.util.function.Consumer)>($r2);

        return;
    }

    protected int getQueueLength()
    {
        android.net.networkstack.NetworkStackClientBase r0;
        java.util.ArrayList r1, $r3;
        int i0;
        java.lang.Throwable $r4;

        r0 := @this: android.net.networkstack.NetworkStackClientBase;

        r1 = r0.<android.net.networkstack.NetworkStackClientBase: java.util.ArrayList mPendingNetStackRequests>;

        entermonitor r1;

     label1:
        $r3 = r0.<android.net.networkstack.NetworkStackClientBase: java.util.ArrayList mPendingNetStackRequests>;

        i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        exitmonitor r1;

     label2:
        return i0;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void makeDhcpServer(java.lang.String, android.net.dhcp.DhcpServingParamsParcel, android.net.dhcp.IDhcpServerCallbacks)
    {
        android.net.networkstack.NetworkStackClientBase r0;
        java.lang.String r1;
        android.net.dhcp.DhcpServingParamsParcel r2;
        android.net.dhcp.IDhcpServerCallbacks r3;
        android.net.networkstack._$$Lambda$NetworkStackClientBase$KFueb5ux_Y29dHAgr1C312iTfY8 $r4;

        r0 := @this: android.net.networkstack.NetworkStackClientBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.net.dhcp.DhcpServingParamsParcel;

        r3 := @parameter2: android.net.dhcp.IDhcpServerCallbacks;

        $r4 = new android.net.networkstack._$$Lambda$NetworkStackClientBase$KFueb5ux_Y29dHAgr1C312iTfY8;

        specialinvoke $r4.<android.net.networkstack._$$Lambda$NetworkStackClientBase$KFueb5ux_Y29dHAgr1C312iTfY8: void <init>(java.lang.String,android.net.dhcp.DhcpServingParamsParcel,android.net.dhcp.IDhcpServerCallbacks)>(r1, r2, r3);

        virtualinvoke r0.<android.net.networkstack.NetworkStackClientBase: void requestConnector(java.util.function.Consumer)>($r4);

        return;
    }

    public void makeIpClient(java.lang.String, android.net.ip.IIpClientCallbacks)
    {
        android.net.networkstack.NetworkStackClientBase r0;
        java.lang.String r1;
        android.net.ip.IIpClientCallbacks r2;
        android.net.networkstack._$$Lambda$NetworkStackClientBase$OwDc2jxNNxij2DwZJOxHrSIkT4w $r3;

        r0 := @this: android.net.networkstack.NetworkStackClientBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.net.ip.IIpClientCallbacks;

        $r3 = new android.net.networkstack._$$Lambda$NetworkStackClientBase$OwDc2jxNNxij2DwZJOxHrSIkT4w;

        specialinvoke $r3.<android.net.networkstack._$$Lambda$NetworkStackClientBase$OwDc2jxNNxij2DwZJOxHrSIkT4w: void <init>(java.lang.String,android.net.ip.IIpClientCallbacks)>(r1, r2);

        virtualinvoke r0.<android.net.networkstack.NetworkStackClientBase: void requestConnector(java.util.function.Consumer)>($r3);

        return;
    }

    public void makeNetworkMonitor(android.net.Network, java.lang.String, android.net.INetworkMonitorCallbacks)
    {
        android.net.networkstack.NetworkStackClientBase r0;
        android.net.Network r1;
        java.lang.String r2;
        android.net.INetworkMonitorCallbacks r3;
        android.net.networkstack._$$Lambda$NetworkStackClientBase$xmhbZP7V8GFtCN9z63d8LazFkUM $r4;

        r0 := @this: android.net.networkstack.NetworkStackClientBase;

        r1 := @parameter0: android.net.Network;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.net.INetworkMonitorCallbacks;

        $r4 = new android.net.networkstack._$$Lambda$NetworkStackClientBase$xmhbZP7V8GFtCN9z63d8LazFkUM;

        specialinvoke $r4.<android.net.networkstack._$$Lambda$NetworkStackClientBase$xmhbZP7V8GFtCN9z63d8LazFkUM: void <init>(android.net.Network,java.lang.String,android.net.INetworkMonitorCallbacks)>(r1, r2, r3);

        virtualinvoke r0.<android.net.networkstack.NetworkStackClientBase: void requestConnector(java.util.function.Consumer)>($r4);

        return;
    }

    protected void onNetworkStackConnected(android.net.INetworkStackConnector)
    {
        android.net.networkstack.NetworkStackClientBase r0;
        java.util.ArrayList r1, $r2, $r3, $r4, r10, r12;
        int $i0;
        java.lang.Object $r5;
        java.util.function.Consumer $r6;
        java.lang.Throwable $r7, $r8;
        android.net.INetworkStackConnector r9;
        java.util.Iterator r11;
        boolean $z0;

        r0 := @this: android.net.networkstack.NetworkStackClientBase;

        r9 := @parameter0: android.net.INetworkStackConnector;

     label01:
        r10 = r0.<android.net.networkstack.NetworkStackClientBase: java.util.ArrayList mPendingNetStackRequests>;

        entermonitor r10;

     label02:
        r1 = new java.util.ArrayList;

        $r2 = r0.<android.net.networkstack.NetworkStackClientBase: java.util.ArrayList mPendingNetStackRequests>;

        specialinvoke r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        $r3 = r0.<android.net.networkstack.NetworkStackClientBase: java.util.ArrayList mPendingNetStackRequests>;

        virtualinvoke $r3.<java.util.ArrayList: void clear()>();

        exitmonitor r10;

     label03:
        r11 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        $r5 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.util.function.Consumer) $r5;

        interfaceinvoke $r6.<java.util.function.Consumer: void accept(java.lang.Object)>(r9);

        goto label04;

     label05:
        r12 = r0.<android.net.networkstack.NetworkStackClientBase: java.util.ArrayList mPendingNetStackRequests>;

        entermonitor r12;

     label06:
        $r4 = r0.<android.net.networkstack.NetworkStackClientBase: java.util.ArrayList mPendingNetStackRequests>;

        $i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        if $i0 != 0 goto label08;

        r0.<android.net.networkstack.NetworkStackClientBase: android.net.INetworkStackConnector mConnector> = r9;

        exitmonitor r12;

     label07:
        return;

     label08:
        exitmonitor r12;

     label09:
        goto label01;

     label10:
        $r8 := @caughtexception;

     label11:
        exitmonitor r12;

     label12:
        throw $r8;

     label13:
        $r7 := @caughtexception;

     label14:
        exitmonitor r10;

     label15:
        throw $r7;

        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    protected void requestConnector(java.util.function.Consumer)
    {
        android.net.networkstack.NetworkStackClientBase r0;
        java.util.ArrayList r1, $r3;
        android.net.INetworkStackConnector r2;
        java.lang.Throwable $r4;
        java.util.function.Consumer r5;

        r0 := @this: android.net.networkstack.NetworkStackClientBase;

        r5 := @parameter0: java.util.function.Consumer;

        r1 = r0.<android.net.networkstack.NetworkStackClientBase: java.util.ArrayList mPendingNetStackRequests>;

        entermonitor r1;

     label1:
        r2 = r0.<android.net.networkstack.NetworkStackClientBase: android.net.INetworkStackConnector mConnector>;

     label2:
        if r2 != null goto label5;

     label3:
        $r3 = r0.<android.net.networkstack.NetworkStackClientBase: java.util.ArrayList mPendingNetStackRequests>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r5);

        exitmonitor r1;

     label4:
        return;

     label5:
        exitmonitor r1;

     label6:
        interfaceinvoke r5.<java.util.function.Consumer: void accept(java.lang.Object)>(r2);

        return;

     label7:
        $r4 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }
}
