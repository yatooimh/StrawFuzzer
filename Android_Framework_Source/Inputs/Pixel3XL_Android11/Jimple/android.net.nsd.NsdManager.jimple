public final class android.net.nsd.NsdManager extends java.lang.Object
{
    public static final java.lang.String ACTION_NSD_STATE_CHANGED;
    private static final int BASE;
    private static final boolean DBG;
    public static final int DISABLE;
    public static final int DISCOVER_SERVICES;
    public static final int DISCOVER_SERVICES_FAILED;
    public static final int DISCOVER_SERVICES_STARTED;
    public static final int ENABLE;
    private static final android.util.SparseArray EVENT_NAMES;
    public static final java.lang.String EXTRA_NSD_STATE;
    public static final int FAILURE_ALREADY_ACTIVE;
    public static final int FAILURE_INTERNAL_ERROR;
    public static final int FAILURE_MAX_LIMIT;
    private static final int FIRST_LISTENER_KEY;
    public static final int NATIVE_DAEMON_EVENT;
    public static final int NSD_STATE_DISABLED;
    public static final int NSD_STATE_ENABLED;
    public static final int PROTOCOL_DNS_SD;
    public static final int REGISTER_SERVICE;
    public static final int REGISTER_SERVICE_FAILED;
    public static final int REGISTER_SERVICE_SUCCEEDED;
    public static final int RESOLVE_SERVICE;
    public static final int RESOLVE_SERVICE_FAILED;
    public static final int RESOLVE_SERVICE_SUCCEEDED;
    public static final int SERVICE_FOUND;
    public static final int SERVICE_LOST;
    public static final int STOP_DISCOVERY;
    public static final int STOP_DISCOVERY_FAILED;
    public static final int STOP_DISCOVERY_SUCCEEDED;
    private static final java.lang.String TAG;
    public static final int UNREGISTER_SERVICE;
    public static final int UNREGISTER_SERVICE_FAILED;
    public static final int UNREGISTER_SERVICE_SUCCEEDED;
    private final com.android.internal.util.AsyncChannel mAsyncChannel;
    private final java.util.concurrent.CountDownLatch mConnected;
    private final android.content.Context mContext;
    private android.net.nsd.NsdManager$ServiceHandler mHandler;
    private int mListenerKey;
    private final android.util.SparseArray mListenerMap;
    private final java.lang.Object mMapLock;
    private final android.net.nsd.INsdManager mService;
    private final android.util.SparseArray mServiceMap;

    static void <clinit>()
    {
        java.lang.Class $r1;
        java.lang.String $r2;
        android.util.SparseArray $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22;

        <android.net.nsd.NsdManager: int UNREGISTER_SERVICE_SUCCEEDED> = 393230;

        <android.net.nsd.NsdManager: int UNREGISTER_SERVICE_FAILED> = 393229;

        <android.net.nsd.NsdManager: int UNREGISTER_SERVICE> = 393228;

        <android.net.nsd.NsdManager: int STOP_DISCOVERY_SUCCEEDED> = 393224;

        <android.net.nsd.NsdManager: int STOP_DISCOVERY_FAILED> = 393223;

        <android.net.nsd.NsdManager: int STOP_DISCOVERY> = 393222;

        <android.net.nsd.NsdManager: int SERVICE_LOST> = 393221;

        <android.net.nsd.NsdManager: int SERVICE_FOUND> = 393220;

        <android.net.nsd.NsdManager: int RESOLVE_SERVICE_SUCCEEDED> = 393236;

        <android.net.nsd.NsdManager: int RESOLVE_SERVICE_FAILED> = 393235;

        <android.net.nsd.NsdManager: int RESOLVE_SERVICE> = 393234;

        <android.net.nsd.NsdManager: int REGISTER_SERVICE_SUCCEEDED> = 393227;

        <android.net.nsd.NsdManager: int REGISTER_SERVICE_FAILED> = 393226;

        <android.net.nsd.NsdManager: int REGISTER_SERVICE> = 393225;

        <android.net.nsd.NsdManager: int PROTOCOL_DNS_SD> = 1;

        <android.net.nsd.NsdManager: int NSD_STATE_ENABLED> = 2;

        <android.net.nsd.NsdManager: int NSD_STATE_DISABLED> = 1;

        <android.net.nsd.NsdManager: int NATIVE_DAEMON_EVENT> = 393242;

        <android.net.nsd.NsdManager: int FIRST_LISTENER_KEY> = 1;

        <android.net.nsd.NsdManager: int FAILURE_MAX_LIMIT> = 4;

        <android.net.nsd.NsdManager: int FAILURE_INTERNAL_ERROR> = 0;

        <android.net.nsd.NsdManager: int FAILURE_ALREADY_ACTIVE> = 3;

        <android.net.nsd.NsdManager: java.lang.String EXTRA_NSD_STATE> = "nsd_state";

        <android.net.nsd.NsdManager: int ENABLE> = 393240;

        <android.net.nsd.NsdManager: int DISCOVER_SERVICES_STARTED> = 393218;

        <android.net.nsd.NsdManager: int DISCOVER_SERVICES_FAILED> = 393219;

        <android.net.nsd.NsdManager: int DISCOVER_SERVICES> = 393217;

        <android.net.nsd.NsdManager: int DISABLE> = 393241;

        <android.net.nsd.NsdManager: boolean DBG> = 0;

        <android.net.nsd.NsdManager: int BASE> = 393216;

        <android.net.nsd.NsdManager: java.lang.String ACTION_NSD_STATE_CHANGED> = "android.net.nsd.STATE_CHANGED";

        $r1 = class "Landroid/net/nsd/NsdManager;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getSimpleName()>();

        <android.net.nsd.NsdManager: java.lang.String TAG> = $r2;

        $r3 = new android.util.SparseArray;

        specialinvoke $r3.<android.util.SparseArray: void <init>()>();

        <android.net.nsd.NsdManager: android.util.SparseArray EVENT_NAMES> = $r3;

        virtualinvoke $r3.<android.util.SparseArray: void put(int,java.lang.Object)>(393217, "DISCOVER_SERVICES");

        $r4 = <android.net.nsd.NsdManager: android.util.SparseArray EVENT_NAMES>;

        virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>(393218, "DISCOVER_SERVICES_STARTED");

        $r5 = <android.net.nsd.NsdManager: android.util.SparseArray EVENT_NAMES>;

        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(393219, "DISCOVER_SERVICES_FAILED");

        $r6 = <android.net.nsd.NsdManager: android.util.SparseArray EVENT_NAMES>;

        virtualinvoke $r6.<android.util.SparseArray: void put(int,java.lang.Object)>(393220, "SERVICE_FOUND");

        $r7 = <android.net.nsd.NsdManager: android.util.SparseArray EVENT_NAMES>;

        virtualinvoke $r7.<android.util.SparseArray: void put(int,java.lang.Object)>(393221, "SERVICE_LOST");

        $r8 = <android.net.nsd.NsdManager: android.util.SparseArray EVENT_NAMES>;

        virtualinvoke $r8.<android.util.SparseArray: void put(int,java.lang.Object)>(393222, "STOP_DISCOVERY");

        $r9 = <android.net.nsd.NsdManager: android.util.SparseArray EVENT_NAMES>;

        virtualinvoke $r9.<android.util.SparseArray: void put(int,java.lang.Object)>(393223, "STOP_DISCOVERY_FAILED");

        $r10 = <android.net.nsd.NsdManager: android.util.SparseArray EVENT_NAMES>;

        virtualinvoke $r10.<android.util.SparseArray: void put(int,java.lang.Object)>(393224, "STOP_DISCOVERY_SUCCEEDED");

        $r11 = <android.net.nsd.NsdManager: android.util.SparseArray EVENT_NAMES>;

        virtualinvoke $r11.<android.util.SparseArray: void put(int,java.lang.Object)>(393225, "REGISTER_SERVICE");

        $r12 = <android.net.nsd.NsdManager: android.util.SparseArray EVENT_NAMES>;

        virtualinvoke $r12.<android.util.SparseArray: void put(int,java.lang.Object)>(393226, "REGISTER_SERVICE_FAILED");

        $r13 = <android.net.nsd.NsdManager: android.util.SparseArray EVENT_NAMES>;

        virtualinvoke $r13.<android.util.SparseArray: void put(int,java.lang.Object)>(393227, "REGISTER_SERVICE_SUCCEEDED");

        $r14 = <android.net.nsd.NsdManager: android.util.SparseArray EVENT_NAMES>;

        virtualinvoke $r14.<android.util.SparseArray: void put(int,java.lang.Object)>(393228, "UNREGISTER_SERVICE");

        $r15 = <android.net.nsd.NsdManager: android.util.SparseArray EVENT_NAMES>;

        virtualinvoke $r15.<android.util.SparseArray: void put(int,java.lang.Object)>(393229, "UNREGISTER_SERVICE_FAILED");

        $r16 = <android.net.nsd.NsdManager: android.util.SparseArray EVENT_NAMES>;

        virtualinvoke $r16.<android.util.SparseArray: void put(int,java.lang.Object)>(393230, "UNREGISTER_SERVICE_SUCCEEDED");

        $r17 = <android.net.nsd.NsdManager: android.util.SparseArray EVENT_NAMES>;

        virtualinvoke $r17.<android.util.SparseArray: void put(int,java.lang.Object)>(393234, "RESOLVE_SERVICE");

        $r18 = <android.net.nsd.NsdManager: android.util.SparseArray EVENT_NAMES>;

        virtualinvoke $r18.<android.util.SparseArray: void put(int,java.lang.Object)>(393235, "RESOLVE_SERVICE_FAILED");

        $r19 = <android.net.nsd.NsdManager: android.util.SparseArray EVENT_NAMES>;

        virtualinvoke $r19.<android.util.SparseArray: void put(int,java.lang.Object)>(393236, "RESOLVE_SERVICE_SUCCEEDED");

        $r20 = <android.net.nsd.NsdManager: android.util.SparseArray EVENT_NAMES>;

        virtualinvoke $r20.<android.util.SparseArray: void put(int,java.lang.Object)>(393240, "ENABLE");

        $r21 = <android.net.nsd.NsdManager: android.util.SparseArray EVENT_NAMES>;

        virtualinvoke $r21.<android.util.SparseArray: void put(int,java.lang.Object)>(393241, "DISABLE");

        $r22 = <android.net.nsd.NsdManager: android.util.SparseArray EVENT_NAMES>;

        virtualinvoke $r22.<android.util.SparseArray: void put(int,java.lang.Object)>(393242, "NATIVE_DAEMON_EVENT");

        return;
    }

    public void <init>(android.content.Context, android.net.nsd.INsdManager)
    {
        android.net.nsd.NsdManager r0;
        android.content.Context r1;
        android.net.nsd.INsdManager r2;
        android.util.SparseArray $r3, $r4;
        java.lang.Object $r5;
        com.android.internal.util.AsyncChannel $r6;
        java.util.concurrent.CountDownLatch $r7;

        r0 := @this: android.net.nsd.NsdManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.net.nsd.INsdManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.net.nsd.NsdManager: int mListenerKey> = 1;

        $r3 = new android.util.SparseArray;

        specialinvoke $r3.<android.util.SparseArray: void <init>()>();

        r0.<android.net.nsd.NsdManager: android.util.SparseArray mListenerMap> = $r3;

        $r4 = new android.util.SparseArray;

        specialinvoke $r4.<android.util.SparseArray: void <init>()>();

        r0.<android.net.nsd.NsdManager: android.util.SparseArray mServiceMap> = $r4;

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<android.net.nsd.NsdManager: java.lang.Object mMapLock> = $r5;

        $r6 = new com.android.internal.util.AsyncChannel;

        specialinvoke $r6.<com.android.internal.util.AsyncChannel: void <init>()>();

        r0.<android.net.nsd.NsdManager: com.android.internal.util.AsyncChannel mAsyncChannel> = $r6;

        $r7 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r7.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r0.<android.net.nsd.NsdManager: java.util.concurrent.CountDownLatch mConnected> = $r7;

        r0.<android.net.nsd.NsdManager: android.net.nsd.INsdManager mService> = r2;

        r0.<android.net.nsd.NsdManager: android.content.Context mContext> = r1;

        specialinvoke r0.<android.net.nsd.NsdManager: void init()>();

        return;
    }

    static com.android.internal.util.AsyncChannel access$000(android.net.nsd.NsdManager)
    {
        android.net.nsd.NsdManager r0;
        com.android.internal.util.AsyncChannel $r1;

        r0 := @parameter0: android.net.nsd.NsdManager;

        $r1 = r0.<android.net.nsd.NsdManager: com.android.internal.util.AsyncChannel mAsyncChannel>;

        return $r1;
    }

    static java.util.concurrent.CountDownLatch access$100(android.net.nsd.NsdManager)
    {
        android.net.nsd.NsdManager r0;
        java.util.concurrent.CountDownLatch $r1;

        r0 := @parameter0: android.net.nsd.NsdManager;

        $r1 = r0.<android.net.nsd.NsdManager: java.util.concurrent.CountDownLatch mConnected>;

        return $r1;
    }

    static java.lang.String access$200()
    {
        java.lang.String $r0;

        $r0 = <android.net.nsd.NsdManager: java.lang.String TAG>;

        return $r0;
    }

    static java.lang.Object access$300(android.net.nsd.NsdManager)
    {
        android.net.nsd.NsdManager r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.net.nsd.NsdManager;

        $r1 = r0.<android.net.nsd.NsdManager: java.lang.Object mMapLock>;

        return $r1;
    }

    static android.util.SparseArray access$400(android.net.nsd.NsdManager)
    {
        android.net.nsd.NsdManager r0;
        android.util.SparseArray $r1;

        r0 := @parameter0: android.net.nsd.NsdManager;

        $r1 = r0.<android.net.nsd.NsdManager: android.util.SparseArray mListenerMap>;

        return $r1;
    }

    static android.util.SparseArray access$500(android.net.nsd.NsdManager)
    {
        android.net.nsd.NsdManager r0;
        android.util.SparseArray $r1;

        r0 := @parameter0: android.net.nsd.NsdManager;

        $r1 = r0.<android.net.nsd.NsdManager: android.util.SparseArray mServiceMap>;

        return $r1;
    }

    static java.lang.String access$600(android.net.nsd.NsdServiceInfo)
    {
        android.net.nsd.NsdServiceInfo r0;
        java.lang.String $r1;

        r0 := @parameter0: android.net.nsd.NsdServiceInfo;

        $r1 = staticinvoke <android.net.nsd.NsdManager: java.lang.String getNsdServiceInfoType(android.net.nsd.NsdServiceInfo)>(r0);

        return $r1;
    }

    static void access$700(android.net.nsd.NsdManager, int)
    {
        android.net.nsd.NsdManager r0;
        int i0;

        r0 := @parameter0: android.net.nsd.NsdManager;

        i0 := @parameter1: int;

        specialinvoke r0.<android.net.nsd.NsdManager: void removeListener(int)>(i0);

        return;
    }

    private static void checkListener(java.lang.Object)
    {
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "listener cannot be null");

        return;
    }

    private static void checkProtocol(int)
    {
        int i0;
        boolean z0;

        i0 := @parameter0: int;

        z0 = 1;

        if i0 != 1 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z0, "Unsupported protocol");

        return;
    }

    private static void checkServiceInfo(android.net.nsd.NsdServiceInfo)
    {
        android.net.nsd.NsdServiceInfo r0;
        java.lang.String $r2, $r4;

        r0 := @parameter0: android.net.nsd.NsdServiceInfo;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "NsdServiceInfo cannot be null");

        $r2 = virtualinvoke r0.<android.net.nsd.NsdServiceInfo: java.lang.String getServiceName()>();

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence,java.lang.Object)>($r2, "Service name cannot be empty");

        $r4 = virtualinvoke r0.<android.net.nsd.NsdServiceInfo: java.lang.String getServiceType()>();

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence,java.lang.Object)>($r4, "Service type cannot be empty");

        return;
    }

    private static void fatal(java.lang.String)
    {
        java.lang.String r0, $r1;
        java.lang.RuntimeException $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = <android.net.nsd.NsdManager: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r1, r0);

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>(r0);

        throw $r2;
    }

    private int getListenerKey(java.lang.Object)
    {
        android.net.nsd.NsdManager r0;
        java.lang.Object r1, r5;
        android.util.SparseArray $r2, $r3;
        java.lang.Throwable $r4;
        int i0, i1;
        boolean z0;

        r0 := @this: android.net.nsd.NsdManager;

        r5 := @parameter0: java.lang.Object;

        staticinvoke <android.net.nsd.NsdManager: void checkListener(java.lang.Object)>(r5);

        r1 = r0.<android.net.nsd.NsdManager: java.lang.Object mMapLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.net.nsd.NsdManager: android.util.SparseArray mListenerMap>;

        i0 = virtualinvoke $r2.<android.util.SparseArray: int indexOfValue(java.lang.Object)>(r5);

     label2:
        if i0 == -1 goto label3;

        z0 = 1;

        goto label4;

     label3:
        z0 = 0;

     label4:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z0, "listener not registered");

        $r3 = r0.<android.net.nsd.NsdManager: android.util.SparseArray mListenerMap>;

        i1 = virtualinvoke $r3.<android.util.SparseArray: int keyAt(int)>(i0);

        exitmonitor r1;

     label5:
        return i1;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private android.os.Messenger getMessenger()
    {
        android.net.nsd.NsdManager r0;
        android.net.nsd.INsdManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.os.Messenger r4;

        r0 := @this: android.net.nsd.NsdManager;

     label1:
        $r1 = r0.<android.net.nsd.NsdManager: android.net.nsd.INsdManager mService>;

        r4 = interfaceinvoke $r1.<android.net.nsd.INsdManager: android.os.Messenger getMessenger()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private static java.lang.String getNsdServiceInfoType(android.net.nsd.NsdServiceInfo)
    {
        android.net.nsd.NsdServiceInfo r0;
        java.lang.String $r1;

        r0 := @parameter0: android.net.nsd.NsdServiceInfo;

        if r0 != null goto label1;

        return "?";

     label1:
        $r1 = virtualinvoke r0.<android.net.nsd.NsdServiceInfo: java.lang.String getServiceType()>();

        return $r1;
    }

    private void init()
    {
        android.net.nsd.NsdManager r0;
        android.os.HandlerThread $r1;
        android.net.nsd.NsdManager$ServiceHandler $r2;
        android.os.Looper $r3;
        android.content.Context $r4;
        com.android.internal.util.AsyncChannel $r5;
        java.util.concurrent.CountDownLatch $r6;
        java.lang.Throwable $r7;
        android.os.Messenger r8;

        r0 := @this: android.net.nsd.NsdManager;

        r8 = specialinvoke r0.<android.net.nsd.NsdManager: android.os.Messenger getMessenger()>();

        if r8 != null goto label1;

        staticinvoke <android.net.nsd.NsdManager: void fatal(java.lang.String)>("Failed to obtain service Messenger");

     label1:
        $r1 = new android.os.HandlerThread;

        specialinvoke $r1.<android.os.HandlerThread: void <init>(java.lang.String)>("NsdManager");

        virtualinvoke $r1.<android.os.HandlerThread: void start()>();

        $r2 = new android.net.nsd.NsdManager$ServiceHandler;

        $r3 = virtualinvoke $r1.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r2.<android.net.nsd.NsdManager$ServiceHandler: void <init>(android.net.nsd.NsdManager,android.os.Looper)>(r0, $r3);

        r0.<android.net.nsd.NsdManager: android.net.nsd.NsdManager$ServiceHandler mHandler> = $r2;

        $r5 = r0.<android.net.nsd.NsdManager: com.android.internal.util.AsyncChannel mAsyncChannel>;

        $r4 = r0.<android.net.nsd.NsdManager: android.content.Context mContext>;

        virtualinvoke $r5.<com.android.internal.util.AsyncChannel: void connect(android.content.Context,android.os.Handler,android.os.Messenger)>($r4, $r2, r8);

     label2:
        $r6 = r0.<android.net.nsd.NsdManager: java.util.concurrent.CountDownLatch mConnected>;

        virtualinvoke $r6.<java.util.concurrent.CountDownLatch: void await()>();

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        staticinvoke <android.net.nsd.NsdManager: void fatal(java.lang.String)>("Interrupted wait at init");

     label5:
        return;

        catch java.lang.InterruptedException from label2 to label3 with label4;
    }

    public static java.lang.String nameOf(int)
    {
        int i0;
        java.lang.String r0, $r3;
        android.util.SparseArray $r1;
        java.lang.Object $r2;

        i0 := @parameter0: int;

        $r1 = <android.net.nsd.NsdManager: android.util.SparseArray EVENT_NAMES>;

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r0 = (java.lang.String) $r2;

        if r0 != null goto label1;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r3;

     label1:
        return r0;
    }

    private int nextListenerKey()
    {
        android.net.nsd.NsdManager r0;
        int i0, $i1, $i2;

        r0 := @this: android.net.nsd.NsdManager;

        $i1 = r0.<android.net.nsd.NsdManager: int mListenerKey>;

        $i2 = $i1 + 1;

        i0 = staticinvoke <java.lang.Math: int max(int,int)>(1, $i2);

        r0.<android.net.nsd.NsdManager: int mListenerKey> = i0;

        return i0;
    }

    private int putListener(java.lang.Object, android.net.nsd.NsdServiceInfo)
    {
        android.net.nsd.NsdManager r0;
        android.net.nsd.NsdServiceInfo r1;
        java.lang.Object r2, r7;
        int i0, $i1;
        android.util.SparseArray $r3, $r4, $r5;
        java.lang.Throwable $r6;
        boolean z0;

        r0 := @this: android.net.nsd.NsdManager;

        r7 := @parameter0: java.lang.Object;

        r1 := @parameter1: android.net.nsd.NsdServiceInfo;

        staticinvoke <android.net.nsd.NsdManager: void checkListener(java.lang.Object)>(r7);

        r2 = r0.<android.net.nsd.NsdManager: java.lang.Object mMapLock>;

        entermonitor r2;

     label1:
        $r3 = r0.<android.net.nsd.NsdManager: android.util.SparseArray mListenerMap>;

        $i1 = virtualinvoke $r3.<android.util.SparseArray: int indexOfValue(java.lang.Object)>(r7);

        if $i1 != -1 goto label3;

     label2:
        z0 = 1;

        goto label4;

     label3:
        z0 = 0;

     label4:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z0, "listener already in use");

        i0 = specialinvoke r0.<android.net.nsd.NsdManager: int nextListenerKey()>();

        $r4 = r0.<android.net.nsd.NsdManager: android.util.SparseArray mListenerMap>;

        virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r7);

        $r5 = r0.<android.net.nsd.NsdManager: android.util.SparseArray mServiceMap>;

        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r1);

        exitmonitor r2;

     label5:
        return i0;

     label6:
        $r6 := @caughtexception;

     label7:
        exitmonitor r2;

     label8:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void removeListener(int)
    {
        android.net.nsd.NsdManager r0;
        int i0;
        java.lang.Object r1;
        android.util.SparseArray $r3, $r4;
        java.lang.Throwable $r5;

        r0 := @this: android.net.nsd.NsdManager;

        i0 := @parameter0: int;

        r1 = r0.<android.net.nsd.NsdManager: java.lang.Object mMapLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<android.net.nsd.NsdManager: android.util.SparseArray mListenerMap>;

        virtualinvoke $r3.<android.util.SparseArray: void remove(int)>(i0);

        $r4 = r0.<android.net.nsd.NsdManager: android.util.SparseArray mServiceMap>;

        virtualinvoke $r4.<android.util.SparseArray: void remove(int)>(i0);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void disconnect()
    {
        android.net.nsd.NsdManager r0;
        com.android.internal.util.AsyncChannel $r1;
        android.net.nsd.NsdManager$ServiceHandler $r2;
        android.os.Looper $r3;

        r0 := @this: android.net.nsd.NsdManager;

        $r1 = r0.<android.net.nsd.NsdManager: com.android.internal.util.AsyncChannel mAsyncChannel>;

        virtualinvoke $r1.<com.android.internal.util.AsyncChannel: void disconnect()>();

        $r2 = r0.<android.net.nsd.NsdManager: android.net.nsd.NsdManager$ServiceHandler mHandler>;

        $r3 = virtualinvoke $r2.<android.net.nsd.NsdManager$ServiceHandler: android.os.Looper getLooper()>();

        virtualinvoke $r3.<android.os.Looper: void quitSafely()>();

        return;
    }

    public void discoverServices(java.lang.String, int, android.net.nsd.NsdManager$DiscoveryListener)
    {
        android.net.nsd.NsdManager r0;
        java.lang.String r1;
        android.net.nsd.NsdManager$DiscoveryListener r2;
        android.net.nsd.NsdServiceInfo $r5;
        com.android.internal.util.AsyncChannel $r6;
        int i0, i1;

        r0 := @this: android.net.nsd.NsdManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.net.nsd.NsdManager$DiscoveryListener;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence,java.lang.Object)>(r1, "Service type cannot be empty");

        staticinvoke <android.net.nsd.NsdManager: void checkProtocol(int)>(i0);

        $r5 = new android.net.nsd.NsdServiceInfo;

        specialinvoke $r5.<android.net.nsd.NsdServiceInfo: void <init>()>();

        virtualinvoke $r5.<android.net.nsd.NsdServiceInfo: void setServiceType(java.lang.String)>(r1);

        i1 = specialinvoke r0.<android.net.nsd.NsdManager: int putListener(java.lang.Object,android.net.nsd.NsdServiceInfo)>(r2, $r5);

        $r6 = r0.<android.net.nsd.NsdManager: com.android.internal.util.AsyncChannel mAsyncChannel>;

        virtualinvoke $r6.<com.android.internal.util.AsyncChannel: void sendMessage(int,int,int,java.lang.Object)>(393217, 0, i1, $r5);

        return;
    }

    public void registerService(android.net.nsd.NsdServiceInfo, int, android.net.nsd.NsdManager$RegistrationListener)
    {
        android.net.nsd.NsdManager r0;
        android.net.nsd.NsdServiceInfo r1;
        android.net.nsd.NsdManager$RegistrationListener r2;
        int $i0, i1, i2;
        com.android.internal.util.AsyncChannel $r3;
        boolean z0;

        r0 := @this: android.net.nsd.NsdManager;

        r1 := @parameter0: android.net.nsd.NsdServiceInfo;

        i1 := @parameter1: int;

        r2 := @parameter2: android.net.nsd.NsdManager$RegistrationListener;

        $i0 = virtualinvoke r1.<android.net.nsd.NsdServiceInfo: int getPort()>();

        if $i0 <= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z0, "Invalid port number");

        staticinvoke <android.net.nsd.NsdManager: void checkServiceInfo(android.net.nsd.NsdServiceInfo)>(r1);

        staticinvoke <android.net.nsd.NsdManager: void checkProtocol(int)>(i1);

        i2 = specialinvoke r0.<android.net.nsd.NsdManager: int putListener(java.lang.Object,android.net.nsd.NsdServiceInfo)>(r2, r1);

        $r3 = r0.<android.net.nsd.NsdManager: com.android.internal.util.AsyncChannel mAsyncChannel>;

        virtualinvoke $r3.<com.android.internal.util.AsyncChannel: void sendMessage(int,int,int,java.lang.Object)>(393225, 0, i2, r1);

        return;
    }

    public void resolveService(android.net.nsd.NsdServiceInfo, android.net.nsd.NsdManager$ResolveListener)
    {
        android.net.nsd.NsdManager r0;
        android.net.nsd.NsdServiceInfo r1;
        android.net.nsd.NsdManager$ResolveListener r2;
        int i0;
        com.android.internal.util.AsyncChannel $r3;

        r0 := @this: android.net.nsd.NsdManager;

        r1 := @parameter0: android.net.nsd.NsdServiceInfo;

        r2 := @parameter1: android.net.nsd.NsdManager$ResolveListener;

        staticinvoke <android.net.nsd.NsdManager: void checkServiceInfo(android.net.nsd.NsdServiceInfo)>(r1);

        i0 = specialinvoke r0.<android.net.nsd.NsdManager: int putListener(java.lang.Object,android.net.nsd.NsdServiceInfo)>(r2, r1);

        $r3 = r0.<android.net.nsd.NsdManager: com.android.internal.util.AsyncChannel mAsyncChannel>;

        virtualinvoke $r3.<com.android.internal.util.AsyncChannel: void sendMessage(int,int,int,java.lang.Object)>(393234, 0, i0, r1);

        return;
    }

    public void setEnabled(boolean)
    {
        android.net.nsd.NsdManager r0;
        boolean z0;
        android.net.nsd.INsdManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.net.nsd.NsdManager;

        z0 := @parameter0: boolean;

     label1:
        $r2 = r0.<android.net.nsd.NsdManager: android.net.nsd.INsdManager mService>;

        interfaceinvoke $r2.<android.net.nsd.INsdManager: void setEnabled(boolean)>(z0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void stopServiceDiscovery(android.net.nsd.NsdManager$DiscoveryListener)
    {
        android.net.nsd.NsdManager r0;
        android.net.nsd.NsdManager$DiscoveryListener r1;
        int i0;
        com.android.internal.util.AsyncChannel $r2;

        r0 := @this: android.net.nsd.NsdManager;

        r1 := @parameter0: android.net.nsd.NsdManager$DiscoveryListener;

        i0 = specialinvoke r0.<android.net.nsd.NsdManager: int getListenerKey(java.lang.Object)>(r1);

        $r2 = r0.<android.net.nsd.NsdManager: com.android.internal.util.AsyncChannel mAsyncChannel>;

        virtualinvoke $r2.<com.android.internal.util.AsyncChannel: void sendMessage(int,int,int)>(393222, 0, i0);

        return;
    }

    public void unregisterService(android.net.nsd.NsdManager$RegistrationListener)
    {
        android.net.nsd.NsdManager r0;
        android.net.nsd.NsdManager$RegistrationListener r1;
        int i0;
        com.android.internal.util.AsyncChannel $r2;

        r0 := @this: android.net.nsd.NsdManager;

        r1 := @parameter0: android.net.nsd.NsdManager$RegistrationListener;

        i0 = specialinvoke r0.<android.net.nsd.NsdManager: int getListenerKey(java.lang.Object)>(r1);

        $r2 = r0.<android.net.nsd.NsdManager: com.android.internal.util.AsyncChannel mAsyncChannel>;

        virtualinvoke $r2.<com.android.internal.util.AsyncChannel: void sendMessage(int,int,int)>(393228, 0, i0);

        return;
    }
}
