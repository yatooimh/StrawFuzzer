public class android.net.shared.NetdUtils extends java.lang.Object
{
    private static final java.lang.String TAG;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        $r0 = class "Landroid/net/shared/NetdUtils;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <android.net.shared.NetdUtils: java.lang.String TAG> = $r1;

        return;
    }

    public void <init>()
    {
        android.net.shared.NetdUtils r0;

        r0 := @this: android.net.shared.NetdUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static void networkAddInterface(android.net.INetd, java.lang.String, int, int) throws android.os.ServiceSpecificException, android.os.RemoteException
    {
        int i0, i1, $i2, $i3, i6;
        android.os.ServiceSpecificException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r5, r7, r8;
        long $l5;
        android.net.INetd r6;

        r6 := @parameter0: android.net.INetd;

        r7 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i6 = 1;

     label1:
        if i6 > i0 goto label6;

     label2:
        interfaceinvoke r6.<android.net.INetd: void networkAddInterface(int,java.lang.String)>(99, r7);

     label3:
        return;

     label4:
        $r1 := @caughtexception;

        $i3 = $r1.<android.os.ServiceSpecificException: int errorCode>;

        $i2 = <android.system.OsConstants: int EBUSY>;

        if $i3 != $i2 goto label5;

        if i6 >= i0 goto label5;

        $l5 = (long) i1;

        staticinvoke <android.os.SystemClock: void sleep(long)>($l5);

        i6 = i6 + 1;

        goto label1;

     label5:
        r8 = <android.net.shared.NetdUtils: java.lang.String TAG>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Retry Netd#networkAddInterface failure: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>(r8, $r5);

        throw $r1;

     label6:
        return;

        catch android.os.ServiceSpecificException from label2 to label3 with label4;
    }

    public static void tetherInterface(android.net.INetd, java.lang.String, android.net.IpPrefix) throws android.os.RemoteException, android.os.ServiceSpecificException
    {
        android.net.INetd r0;
        java.lang.String r1;
        android.net.IpPrefix r2;

        r0 := @parameter0: android.net.INetd;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.net.IpPrefix;

        staticinvoke <android.net.shared.NetdUtils: void tetherInterface(android.net.INetd,java.lang.String,android.net.IpPrefix,int,int)>(r0, r1, r2, 20, 50);

        return;
    }

    public static void tetherInterface(android.net.INetd, java.lang.String, android.net.IpPrefix, int, int) throws android.os.RemoteException, android.os.ServiceSpecificException
    {
        android.net.INetd r0;
        java.lang.String r1;
        android.net.IpPrefix r2;
        int i0, i1;
        java.util.ArrayList $r4;
        android.net.RouteInfo $r5;

        r0 := @parameter0: android.net.INetd;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.net.IpPrefix;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        interfaceinvoke r0.<android.net.INetd: void tetherInterfaceAdd(java.lang.String)>(r1);

        staticinvoke <android.net.shared.NetdUtils: void networkAddInterface(android.net.INetd,java.lang.String,int,int)>(r0, r1, i0, i1);

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = new android.net.RouteInfo;

        specialinvoke $r5.<android.net.RouteInfo: void <init>(android.net.IpPrefix,java.net.InetAddress,java.lang.String,int)>(r2, null, r1, 1);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r5);

        staticinvoke <android.net.shared.RouteUtils: void addRoutesToLocalNetwork(android.net.INetd,java.lang.String,java.util.List)>(r0, r1, $r4);

        return;
    }

    public static void tetherStart(android.net.INetd, boolean, java.lang.String[]) throws android.os.RemoteException, android.os.ServiceSpecificException
    {
        android.net.INetd r0;
        boolean z0;
        java.lang.String[] r1;
        android.net.TetherConfigParcel $r3;

        r0 := @parameter0: android.net.INetd;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.lang.String[];

        $r3 = new android.net.TetherConfigParcel;

        specialinvoke $r3.<android.net.TetherConfigParcel: void <init>()>();

        $r3.<android.net.TetherConfigParcel: boolean usingLegacyDnsProxy> = z0;

        $r3.<android.net.TetherConfigParcel: java.lang.String[] dhcpRanges> = r1;

        interfaceinvoke r0.<android.net.INetd: void tetherStartWithConfiguration(android.net.TetherConfigParcel)>($r3);

        return;
    }

    public static void untetherInterface(android.net.INetd, java.lang.String) throws android.os.RemoteException, android.os.ServiceSpecificException
    {
        android.net.INetd r0;
        java.lang.String r1;
        java.lang.Throwable $r3;

        r0 := @parameter0: android.net.INetd;

        r1 := @parameter1: java.lang.String;

     label1:
        interfaceinvoke r0.<android.net.INetd: void tetherInterfaceRemove(java.lang.String)>(r1);

     label2:
        interfaceinvoke r0.<android.net.INetd: void networkRemoveInterface(int,java.lang.String)>(99, r1);

        return;

     label3:
        $r3 := @caughtexception;

        interfaceinvoke r0.<android.net.INetd: void networkRemoveInterface(int,java.lang.String)>(99, r1);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
