public final class android.net.shared.ParcelableUtil extends java.lang.Object
{

    public void <init>()
    {
        android.net.shared.ParcelableUtil r0;

        r0 := @this: android.net.shared.ParcelableUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.ArrayList fromParcelableArray(java.lang.Object[], java.util.function.Function)
    {
        java.lang.Object[] r0;
        java.util.function.Function r1;
        int i0, $i1, i2;
        java.util.ArrayList $r3;
        java.lang.Object $r4, $r5;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.util.function.Function;

        $r3 = new java.util.ArrayList;

        $i1 = lengthof r0;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i1);

        i0 = lengthof r0;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r4 = r0[i2];

        $r5 = interfaceinvoke r1.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>($r4);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        i2 = i2 + 1;

        goto label1;

     label2:
        return $r3;
    }

    public static java.lang.Object[] toParcelableArray(java.util.Collection, java.util.function.Function, java.lang.Class)
    {
        java.util.function.Function r0;
        int $i0, i1;
        java.lang.Object $r1, $r2, $r3;
        boolean $z0;
        java.util.Collection r4;
        java.lang.Class r5;
        java.lang.Object[] r6;
        java.util.Iterator r7;

        r4 := @parameter0: java.util.Collection;

        r0 := @parameter1: java.util.function.Function;

        r5 := @parameter2: java.lang.Class;

        $i0 = interfaceinvoke r4.<java.util.Collection: int size()>();

        $r1 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r5, $i0);

        r6 = (java.lang.Object[]) $r1;

        i1 = 0;

        r7 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        $r3 = interfaceinvoke r0.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>($r2);

        r6[i1] = $r3;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r6;
    }
}
