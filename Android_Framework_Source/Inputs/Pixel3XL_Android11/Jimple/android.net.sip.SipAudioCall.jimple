public class android.net.sip.SipAudioCall extends java.lang.Object
{
    private static final boolean DBG;
    private static final boolean DONT_RELEASE_SOCKET;
    private static final java.lang.String LOG_TAG;
    private static final boolean RELEASE_SOCKET;
    private static final int SESSION_TIMEOUT;
    private static final int TRANSFER_TIMEOUT;
    private android.net.rtp.AudioGroup mAudioGroup;
    private android.net.rtp.AudioStream mAudioStream;
    private android.content.Context mContext;
    private int mErrorCode;
    private java.lang.String mErrorMessage;
    private boolean mHold;
    private boolean mInCall;
    private android.net.sip.SipAudioCall$Listener mListener;
    private android.net.sip.SipProfile mLocalProfile;
    private final java.lang.Object mLock;
    private boolean mMuted;
    private java.lang.String mPeerSd;
    private long mSessionId;
    private android.net.sip.SipSession mSipSession;
    private android.net.sip.SipSession mTransferringSession;
    private android.net.wifi.WifiManager$WifiLock mWifiHighPerfLock;
    private android.net.wifi.WifiManager mWm;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        <android.net.sip.SipAudioCall: int TRANSFER_TIMEOUT> = 15;

        <android.net.sip.SipAudioCall: int SESSION_TIMEOUT> = 5;

        <android.net.sip.SipAudioCall: boolean RELEASE_SOCKET> = 1;

        <android.net.sip.SipAudioCall: boolean DONT_RELEASE_SOCKET> = 0;

        <android.net.sip.SipAudioCall: boolean DBG> = 1;

        $r0 = class "Landroid/net/sip/SipAudioCall;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <android.net.sip.SipAudioCall: java.lang.String LOG_TAG> = $r1;

        return;
    }

    public void <init>(android.content.Context, android.net.sip.SipProfile)
    {
        android.net.sip.SipAudioCall r0;
        android.content.Context r1;
        android.net.sip.SipProfile r2;
        long $l0;
        java.lang.Object $r3, $r5;
        android.net.wifi.WifiManager $r4;

        r0 := @this: android.net.sip.SipAudioCall;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.net.sip.SipProfile;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<android.net.sip.SipAudioCall: long mSessionId> = $l0;

        r0.<android.net.sip.SipAudioCall: boolean mInCall> = 0;

        r0.<android.net.sip.SipAudioCall: boolean mMuted> = 0;

        r0.<android.net.sip.SipAudioCall: boolean mHold> = 0;

        r0.<android.net.sip.SipAudioCall: int mErrorCode> = 0;

        r0.<android.net.sip.SipAudioCall: android.content.Context mContext> = r1;

        r0.<android.net.sip.SipAudioCall: android.net.sip.SipProfile mLocalProfile> = r2;

        $r3 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("wifi");

        $r4 = (android.net.wifi.WifiManager) $r3;

        r0.<android.net.sip.SipAudioCall: android.net.wifi.WifiManager mWm> = $r4;

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<android.net.sip.SipAudioCall: java.lang.Object mLock> = $r5;

        return;
    }

    static void access$000(android.net.sip.SipAudioCall, java.lang.String)
    {
        android.net.sip.SipAudioCall r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.sip.SipAudioCall;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.net.sip.SipAudioCall: void log(java.lang.String)>(r1);

        return;
    }

    static android.net.sip.SipAudioCall$Listener access$100(android.net.sip.SipAudioCall)
    {
        android.net.sip.SipAudioCall r0;
        android.net.sip.SipAudioCall$Listener $r1;

        r0 := @parameter0: android.net.sip.SipAudioCall;

        $r1 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipAudioCall$Listener mListener>;

        return $r1;
    }

    static boolean access$1000(android.net.sip.SipAudioCall)
    {
        android.net.sip.SipAudioCall r0;
        boolean $z0;

        r0 := @parameter0: android.net.sip.SipAudioCall;

        $z0 = r0.<android.net.sip.SipAudioCall: boolean mHold>;

        return $z0;
    }

    static void access$1100(android.net.sip.SipAudioCall, boolean)
    {
        android.net.sip.SipAudioCall r0;
        boolean z0;

        r0 := @parameter0: android.net.sip.SipAudioCall;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.net.sip.SipAudioCall: void close(boolean)>(z0);

        return;
    }

    static int access$1200(android.net.sip.SipAudioCall)
    {
        android.net.sip.SipAudioCall r0;
        int $i0;

        r0 := @parameter0: android.net.sip.SipAudioCall;

        $i0 = r0.<android.net.sip.SipAudioCall: int mErrorCode>;

        return $i0;
    }

    static int access$1202(android.net.sip.SipAudioCall, int)
    {
        android.net.sip.SipAudioCall r0;
        int i0;

        r0 := @parameter0: android.net.sip.SipAudioCall;

        i0 := @parameter1: int;

        r0.<android.net.sip.SipAudioCall: int mErrorCode> = i0;

        return i0;
    }

    static java.lang.String access$1302(android.net.sip.SipAudioCall, java.lang.String)
    {
        android.net.sip.SipAudioCall r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.sip.SipAudioCall;

        r1 := @parameter1: java.lang.String;

        r0.<android.net.sip.SipAudioCall: java.lang.String mErrorMessage> = r1;

        return r1;
    }

    static void access$1400(android.net.sip.SipAudioCall, int, java.lang.String)
    {
        android.net.sip.SipAudioCall r0;
        int i0;
        java.lang.String r1;

        r0 := @parameter0: android.net.sip.SipAudioCall;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        specialinvoke r0.<android.net.sip.SipAudioCall: void onError(int,java.lang.String)>(i0, r1);

        return;
    }

    static android.net.sip.SimpleSessionDescription access$1500(android.net.sip.SipAudioCall)
    {
        android.net.sip.SipAudioCall r0;
        android.net.sip.SimpleSessionDescription $r1;

        r0 := @parameter0: android.net.sip.SipAudioCall;

        $r1 = specialinvoke r0.<android.net.sip.SipAudioCall: android.net.sip.SimpleSessionDescription createOffer()>();

        return $r1;
    }

    static void access$200(android.net.sip.SipAudioCall, java.lang.String, java.lang.Throwable)
    {
        android.net.sip.SipAudioCall r0;
        java.lang.String r1;
        java.lang.Throwable r2;

        r0 := @parameter0: android.net.sip.SipAudioCall;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Throwable;

        specialinvoke r0.<android.net.sip.SipAudioCall: void loge(java.lang.String,java.lang.Throwable)>(r1, r2);

        return;
    }

    static java.lang.Object access$300(android.net.sip.SipAudioCall)
    {
        android.net.sip.SipAudioCall r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.net.sip.SipAudioCall;

        $r1 = r0.<android.net.sip.SipAudioCall: java.lang.Object mLock>;

        return $r1;
    }

    static android.net.sip.SipSession access$400(android.net.sip.SipAudioCall)
    {
        android.net.sip.SipAudioCall r0;
        android.net.sip.SipSession $r1;

        r0 := @parameter0: android.net.sip.SipAudioCall;

        $r1 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession>;

        return $r1;
    }

    static boolean access$500(android.net.sip.SipAudioCall)
    {
        android.net.sip.SipAudioCall r0;
        boolean $z0;

        r0 := @parameter0: android.net.sip.SipAudioCall;

        $z0 = r0.<android.net.sip.SipAudioCall: boolean mInCall>;

        return $z0;
    }

    static android.net.sip.SimpleSessionDescription access$600(android.net.sip.SipAudioCall, java.lang.String)
    {
        android.net.sip.SipAudioCall r0;
        java.lang.String r1;
        android.net.sip.SimpleSessionDescription $r2;

        r0 := @parameter0: android.net.sip.SipAudioCall;

        r1 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<android.net.sip.SipAudioCall: android.net.sip.SimpleSessionDescription createAnswer(java.lang.String)>(r1);

        return $r2;
    }

    static java.lang.String access$700(android.net.sip.SipAudioCall)
    {
        android.net.sip.SipAudioCall r0;
        java.lang.String $r1;

        r0 := @parameter0: android.net.sip.SipAudioCall;

        $r1 = r0.<android.net.sip.SipAudioCall: java.lang.String mPeerSd>;

        return $r1;
    }

    static java.lang.String access$702(android.net.sip.SipAudioCall, java.lang.String)
    {
        android.net.sip.SipAudioCall r0;
        java.lang.String r1;

        r0 := @parameter0: android.net.sip.SipAudioCall;

        r1 := @parameter1: java.lang.String;

        r0.<android.net.sip.SipAudioCall: java.lang.String mPeerSd> = r1;

        return r1;
    }

    static android.net.sip.SipSession access$800(android.net.sip.SipAudioCall)
    {
        android.net.sip.SipAudioCall r0;
        android.net.sip.SipSession $r1;

        r0 := @parameter0: android.net.sip.SipAudioCall;

        $r1 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mTransferringSession>;

        return $r1;
    }

    static android.net.sip.SipSession access$802(android.net.sip.SipAudioCall, android.net.sip.SipSession)
    {
        android.net.sip.SipAudioCall r0;
        android.net.sip.SipSession r1;

        r0 := @parameter0: android.net.sip.SipAudioCall;

        r1 := @parameter1: android.net.sip.SipSession;

        r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mTransferringSession> = r1;

        return r1;
    }

    static void access$900(android.net.sip.SipAudioCall)
    {
        android.net.sip.SipAudioCall r0;

        r0 := @parameter0: android.net.sip.SipAudioCall;

        specialinvoke r0.<android.net.sip.SipAudioCall: void transferToNewSession()>();

        return;
    }

    private void close(boolean)
    {
        android.net.sip.SipAudioCall r0;
        boolean z0;
        long $l0;
        android.net.sip.SipSession $r2, $r3;
        java.lang.Throwable $r4;

        r0 := @this: android.net.sip.SipAudioCall;

        z0 := @parameter0: boolean;

        entermonitor r0;

        if z0 == 0 goto label2;

     label1:
        specialinvoke r0.<android.net.sip.SipAudioCall: void stopCall(boolean)>(1);

     label2:
        r0.<android.net.sip.SipAudioCall: boolean mInCall> = 0;

        r0.<android.net.sip.SipAudioCall: boolean mHold> = 0;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<android.net.sip.SipAudioCall: long mSessionId> = $l0;

        r0.<android.net.sip.SipAudioCall: int mErrorCode> = 0;

        r0.<android.net.sip.SipAudioCall: java.lang.String mErrorMessage> = null;

        $r2 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession>;

        if $r2 == null goto label3;

        $r3 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession>;

        virtualinvoke $r3.<android.net.sip.SipSession: void setListener(android.net.sip.SipSession$Listener)>(null);

        r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession> = null;

     label3:
        exitmonitor r0;

        return;

     label4:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    private android.net.sip.SimpleSessionDescription createAnswer(java.lang.String)
    {
        android.net.sip.SipAudioCall r0;
        android.net.sip.SimpleSessionDescription$Media[] r3;
        int i0, $i2, $i3, $i4, $i5, i6, i7, i8, i9, i10, i11, i12, i13, i14;
        java.lang.String r4, $r7, $r12, $r13, $r14, $r15, $r16, $r17, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, r29, $r36, $r37;
        boolean $z0, $z1, $z2, $z3;
        android.net.sip.SimpleSessionDescription $r5, $r6, $r28;
        long $l1;
        java.lang.IllegalStateException $r8;
        java.lang.StringBuilder $r9;
        android.net.rtp.AudioStream $r18;
        android.net.rtp.AudioCodec r30, r32;
        android.net.sip.SimpleSessionDescription$Media r31, r34, r38;
        int[] r33, r35;
        java.lang.String[] r39;

        r0 := @this: android.net.sip.SipAudioCall;

        r29 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r29);

        if $z0 == 0 goto label01;

        $r28 = specialinvoke r0.<android.net.sip.SipAudioCall: android.net.sip.SimpleSessionDescription createOffer()>();

        return $r28;

     label01:
        $r5 = new android.net.sip.SimpleSessionDescription;

        specialinvoke $r5.<android.net.sip.SimpleSessionDescription: void <init>(java.lang.String)>(r29);

        $r6 = new android.net.sip.SimpleSessionDescription;

        $l1 = r0.<android.net.sip.SipAudioCall: long mSessionId>;

        $r7 = specialinvoke r0.<android.net.sip.SipAudioCall: java.lang.String getLocalIp()>();

        specialinvoke $r6.<android.net.sip.SimpleSessionDescription: void <init>(long,java.lang.String)>($l1, $r7);

        r30 = null;

        r3 = virtualinvoke $r5.<android.net.sip.SimpleSessionDescription: android.net.sip.SimpleSessionDescription$Media[] getMedia()>();

        i0 = lengthof r3;

        i6 = 0;

     label02:
        if i6 >= i0 goto label16;

        r31 = r3[i6];

        r32 = r30;

        if r30 != null goto label13;

        r32 = r30;

        $i2 = virtualinvoke r31.<android.net.sip.SimpleSessionDescription$Media: int getPort()>();

        if $i2 <= 0 goto label13;

        r32 = r30;

        $r14 = "audio";

        $r15 = virtualinvoke r31.<android.net.sip.SimpleSessionDescription$Media: java.lang.String getType()>();

        $z1 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z1 == 0 goto label13;

        r32 = r30;

        $r16 = "RTP/AVP";

        $r17 = virtualinvoke r31.<android.net.sip.SimpleSessionDescription$Media: java.lang.String getProtocol()>();

        $z2 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r17);

        if $z2 == 0 goto label13;

        r33 = virtualinvoke r31.<android.net.sip.SimpleSessionDescription$Media: int[] getRtpPayloadTypes()>();

        i7 = lengthof r33;

        i8 = 0;

     label03:
        if i8 >= i7 goto label05;

        i9 = r33[i8];

        $r26 = virtualinvoke r31.<android.net.sip.SimpleSessionDescription$Media: java.lang.String getRtpmap(int)>(i9);

        $r27 = virtualinvoke r31.<android.net.sip.SimpleSessionDescription$Media: java.lang.String getFmtp(int)>(i9);

        r30 = staticinvoke <android.net.rtp.AudioCodec: android.net.rtp.AudioCodec getCodec(int,java.lang.String,java.lang.String)>(i9, $r26, $r27);

        if r30 == null goto label04;

        goto label05;

     label04:
        i8 = i8 + 1;

        goto label03;

     label05:
        r32 = r30;

        if r30 == null goto label13;

        $r18 = r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioStream mAudioStream>;

        $i3 = virtualinvoke $r18.<android.net.rtp.AudioStream: int getLocalPort()>();

        r34 = virtualinvoke $r6.<android.net.sip.SimpleSessionDescription: android.net.sip.SimpleSessionDescription$Media newMedia(java.lang.String,int,int,java.lang.String)>("audio", $i3, 1, "RTP/AVP");

        $i4 = r30.<android.net.rtp.AudioCodec: int type>;

        $r20 = r30.<android.net.rtp.AudioCodec: java.lang.String rtpmap>;

        $r19 = r30.<android.net.rtp.AudioCodec: java.lang.String fmtp>;

        virtualinvoke r34.<android.net.sip.SimpleSessionDescription$Media: void setRtpPayload(int,java.lang.String,java.lang.String)>($i4, $r20, $r19);

        r35 = virtualinvoke r31.<android.net.sip.SimpleSessionDescription$Media: int[] getRtpPayloadTypes()>();

        i10 = lengthof r35;

        i11 = 0;

     label06:
        if i11 >= i10 goto label08;

        i12 = r35[i11];

        r4 = virtualinvoke r31.<android.net.sip.SimpleSessionDescription$Media: java.lang.String getRtpmap(int)>(i12);

        $i5 = r30.<android.net.rtp.AudioCodec: int type>;

        if i12 == $i5 goto label07;

        if r4 == null goto label07;

        $z3 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("telephone-event");

        if $z3 == 0 goto label07;

        $r25 = virtualinvoke r31.<android.net.sip.SimpleSessionDescription$Media: java.lang.String getFmtp(int)>(i12);

        virtualinvoke r34.<android.net.sip.SimpleSessionDescription$Media: void setRtpPayload(int,java.lang.String,java.lang.String)>(i12, r4, $r25);

     label07:
        i11 = i11 + 1;

        goto label06;

     label08:
        $r21 = virtualinvoke r31.<android.net.sip.SimpleSessionDescription$Media: java.lang.String getAttribute(java.lang.String)>("recvonly");

        if $r21 == null goto label09;

        virtualinvoke $r6.<android.net.sip.SimpleSessionDescription: void setAttribute(java.lang.String,java.lang.String)>("sendonly", "");

        goto label12;

     label09:
        $r22 = virtualinvoke r31.<android.net.sip.SimpleSessionDescription$Media: java.lang.String getAttribute(java.lang.String)>("sendonly");

        if $r22 == null goto label10;

        virtualinvoke $r6.<android.net.sip.SimpleSessionDescription: void setAttribute(java.lang.String,java.lang.String)>("recvonly", "");

        goto label12;

     label10:
        $r23 = virtualinvoke $r5.<android.net.sip.SimpleSessionDescription: java.lang.String getAttribute(java.lang.String)>("recvonly");

        if $r23 == null goto label11;

        virtualinvoke $r6.<android.net.sip.SimpleSessionDescription: void setAttribute(java.lang.String,java.lang.String)>("sendonly", "");

        goto label12;

     label11:
        $r24 = virtualinvoke $r5.<android.net.sip.SimpleSessionDescription: java.lang.String getAttribute(java.lang.String)>("sendonly");

        if $r24 == null goto label12;

        virtualinvoke $r6.<android.net.sip.SimpleSessionDescription: void setAttribute(java.lang.String,java.lang.String)>("recvonly", "");

     label12:
        goto label15;

     label13:
        $r36 = virtualinvoke r31.<android.net.sip.SimpleSessionDescription$Media: java.lang.String getType()>();

        $r37 = virtualinvoke r31.<android.net.sip.SimpleSessionDescription$Media: java.lang.String getProtocol()>();

        r38 = virtualinvoke $r6.<android.net.sip.SimpleSessionDescription: android.net.sip.SimpleSessionDescription$Media newMedia(java.lang.String,int,int,java.lang.String)>($r36, 0, 1, $r37);

        r39 = virtualinvoke r31.<android.net.sip.SimpleSessionDescription$Media: java.lang.String[] getFormats()>();

        i13 = lengthof r39;

        i14 = 0;

     label14:
        r30 = r32;

        if i14 >= i13 goto label15;

        $r13 = r39[i14];

        virtualinvoke r38.<android.net.sip.SimpleSessionDescription$Media: void setFormat(java.lang.String,java.lang.String)>($r13, null);

        i14 = i14 + 1;

        goto label14;

     label15:
        i6 = i6 + 1;

        goto label02;

     label16:
        if r30 == null goto label17;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("createAnswer: answer=");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.net.sip.SipAudioCall: void log(java.lang.String)>($r12);

        return $r6;

     label17:
        specialinvoke r0.<android.net.sip.SipAudioCall: void loge(java.lang.String)>("createAnswer: no suitable codes");

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Reject SDP: no suitable codecs");

        throw $r8;
    }

    private android.net.sip.SimpleSessionDescription createContinueOffer()
    {
        android.net.sip.SipAudioCall r0;
        android.net.sip.SimpleSessionDescription$Media r2;
        android.net.rtp.AudioCodec r3;
        int i0, $i2, $i3;
        android.net.sip.SimpleSessionDescription $r4;
        long $l1;
        java.lang.String $r5, $r8, $r9;
        android.net.rtp.AudioStream $r6, $r7, $r10;

        r0 := @this: android.net.sip.SipAudioCall;

        specialinvoke r0.<android.net.sip.SipAudioCall: void log(java.lang.String)>("createContinueOffer");

        $r4 = new android.net.sip.SimpleSessionDescription;

        $l1 = r0.<android.net.sip.SipAudioCall: long mSessionId>;

        $r5 = specialinvoke r0.<android.net.sip.SipAudioCall: java.lang.String getLocalIp()>();

        specialinvoke $r4.<android.net.sip.SimpleSessionDescription: void <init>(long,java.lang.String)>($l1, $r5);

        $r6 = r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioStream mAudioStream>;

        $i2 = virtualinvoke $r6.<android.net.rtp.AudioStream: int getLocalPort()>();

        r2 = virtualinvoke $r4.<android.net.sip.SimpleSessionDescription: android.net.sip.SimpleSessionDescription$Media newMedia(java.lang.String,int,int,java.lang.String)>("audio", $i2, 1, "RTP/AVP");

        $r7 = r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioStream mAudioStream>;

        r3 = virtualinvoke $r7.<android.net.rtp.AudioStream: android.net.rtp.AudioCodec getCodec()>();

        $i3 = r3.<android.net.rtp.AudioCodec: int type>;

        $r9 = r3.<android.net.rtp.AudioCodec: java.lang.String rtpmap>;

        $r8 = r3.<android.net.rtp.AudioCodec: java.lang.String fmtp>;

        virtualinvoke r2.<android.net.sip.SimpleSessionDescription$Media: void setRtpPayload(int,java.lang.String,java.lang.String)>($i3, $r9, $r8);

        $r10 = r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioStream mAudioStream>;

        i0 = virtualinvoke $r10.<android.net.rtp.AudioStream: int getDtmfType()>();

        if i0 == -1 goto label1;

        virtualinvoke r2.<android.net.sip.SimpleSessionDescription$Media: void setRtpPayload(int,java.lang.String,java.lang.String)>(i0, "telephone-event/8000", "0-15");

     label1:
        return $r4;
    }

    private android.net.sip.SimpleSessionDescription createHoldOffer()
    {
        android.net.sip.SipAudioCall r0;
        android.net.sip.SimpleSessionDescription r1;
        java.lang.StringBuilder $r3;
        java.lang.String $r6;

        r0 := @this: android.net.sip.SipAudioCall;

        r1 = specialinvoke r0.<android.net.sip.SipAudioCall: android.net.sip.SimpleSessionDescription createContinueOffer()>();

        virtualinvoke r1.<android.net.sip.SimpleSessionDescription: void setAttribute(java.lang.String,java.lang.String)>("sendonly", "");

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("createHoldOffer: offer=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.net.sip.SipAudioCall: void log(java.lang.String)>($r6);

        return r1;
    }

    private android.net.sip.SipSession$Listener createListener()
    {
        android.net.sip.SipAudioCall r0;
        android.net.sip.SipAudioCall$1 $r1;

        r0 := @this: android.net.sip.SipAudioCall;

        $r1 = new android.net.sip.SipAudioCall$1;

        specialinvoke $r1.<android.net.sip.SipAudioCall$1: void <init>(android.net.sip.SipAudioCall)>(r0);

        return $r1;
    }

    private android.net.sip.SimpleSessionDescription createOffer()
    {
        android.net.sip.SipAudioCall r0;
        android.net.sip.SimpleSessionDescription$Media r2;
        int i0, $i2, $i3, i4;
        android.net.rtp.AudioCodec r3;
        android.net.sip.SimpleSessionDescription $r4;
        long $l1;
        java.lang.String $r5, $r11, $r12, $r13;
        android.net.rtp.AudioStream $r7;
        java.lang.StringBuilder $r8;
        android.net.rtp.AudioCodec[] r14;

        r0 := @this: android.net.sip.SipAudioCall;

        $r4 = new android.net.sip.SimpleSessionDescription;

        $l1 = r0.<android.net.sip.SipAudioCall: long mSessionId>;

        $r5 = specialinvoke r0.<android.net.sip.SipAudioCall: java.lang.String getLocalIp()>();

        specialinvoke $r4.<android.net.sip.SimpleSessionDescription: void <init>(long,java.lang.String)>($l1, $r5);

        staticinvoke <android.net.rtp.AudioCodec: android.net.rtp.AudioCodec[] getCodecs()>();

        $r7 = r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioStream mAudioStream>;

        $i2 = virtualinvoke $r7.<android.net.rtp.AudioStream: int getLocalPort()>();

        r2 = virtualinvoke $r4.<android.net.sip.SimpleSessionDescription: android.net.sip.SimpleSessionDescription$Media newMedia(java.lang.String,int,int,java.lang.String)>("audio", $i2, 1, "RTP/AVP");

        r14 = staticinvoke <android.net.rtp.AudioCodec: android.net.rtp.AudioCodec[] getCodecs()>();

        i0 = lengthof r14;

        i4 = 0;

     label1:
        if i4 >= i0 goto label2;

        r3 = r14[i4];

        $i3 = r3.<android.net.rtp.AudioCodec: int type>;

        $r13 = r3.<android.net.rtp.AudioCodec: java.lang.String rtpmap>;

        $r12 = r3.<android.net.rtp.AudioCodec: java.lang.String fmtp>;

        virtualinvoke r2.<android.net.sip.SimpleSessionDescription$Media: void setRtpPayload(int,java.lang.String,java.lang.String)>($i3, $r13, $r12);

        i4 = i4 + 1;

        goto label1;

     label2:
        virtualinvoke r2.<android.net.sip.SimpleSessionDescription$Media: void setRtpPayload(int,java.lang.String,java.lang.String)>(127, "telephone-event/8000", "0-15");

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("createOffer: offer=");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.net.sip.SipAudioCall: void log(java.lang.String)>($r11);

        return $r4;
    }

    private java.lang.String getLocalIp()
    {
        android.net.sip.SipAudioCall r0;
        android.net.sip.SipSession $r1;
        java.lang.String $r2;

        r0 := @this: android.net.sip.SipAudioCall;

        $r1 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession>;

        $r2 = virtualinvoke $r1.<android.net.sip.SipSession: java.lang.String getLocalIp()>();

        return $r2;
    }

    private void grabWifiHighPerfLock()
    {
        android.net.sip.SipAudioCall r0;
        android.net.wifi.WifiManager$WifiLock r1, $r2;
        android.content.Context $r3;
        java.lang.Object $r4;
        java.lang.String $r5;
        android.net.wifi.WifiManager $r6;

        r0 := @this: android.net.sip.SipAudioCall;

        $r2 = r0.<android.net.sip.SipAudioCall: android.net.wifi.WifiManager$WifiLock mWifiHighPerfLock>;

        if $r2 != null goto label1;

        specialinvoke r0.<android.net.sip.SipAudioCall: void log(java.lang.String)>("grabWifiHighPerfLock:");

        $r3 = r0.<android.net.sip.SipAudioCall: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("wifi");

        $r6 = (android.net.wifi.WifiManager) $r4;

        $r5 = <android.net.sip.SipAudioCall: java.lang.String LOG_TAG>;

        r1 = virtualinvoke $r6.<android.net.wifi.WifiManager: android.net.wifi.WifiManager$WifiLock createWifiLock(int,java.lang.String)>(3, $r5);

        r0.<android.net.sip.SipAudioCall: android.net.wifi.WifiManager$WifiLock mWifiHighPerfLock> = r1;

        virtualinvoke r1.<android.net.wifi.WifiManager$WifiLock: void acquire()>();

     label1:
        return;
    }

    private boolean isSpeakerOn()
    {
        android.net.sip.SipAudioCall r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.media.AudioManager $r3;
        boolean $z0;

        r0 := @this: android.net.sip.SipAudioCall;

        $r1 = r0.<android.net.sip.SipAudioCall: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("audio");

        $r3 = (android.media.AudioManager) $r2;

        $z0 = virtualinvoke $r3.<android.media.AudioManager: boolean isSpeakerphoneOn()>();

        return $z0;
    }

    private boolean isWifiOn()
    {
        android.net.sip.SipAudioCall r0;
        android.net.wifi.WifiManager $r1;
        android.net.wifi.WifiInfo $r2;
        java.lang.String $r3;
        boolean z0;

        r0 := @this: android.net.sip.SipAudioCall;

        $r1 = r0.<android.net.sip.SipAudioCall: android.net.wifi.WifiManager mWm>;

        $r2 = virtualinvoke $r1.<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()>();

        $r3 = virtualinvoke $r2.<android.net.wifi.WifiInfo: java.lang.String getBSSID()>();

        if $r3 != null goto label1;

        z0 = 0;

        goto label2;

     label1:
        z0 = 1;

     label2:
        return z0;
    }

    private void log(java.lang.String)
    {
        android.net.sip.SipAudioCall r0;
        java.lang.String r1, $r2;

        r0 := @this: android.net.sip.SipAudioCall;

        r1 := @parameter0: java.lang.String;

        $r2 = <android.net.sip.SipAudioCall: java.lang.String LOG_TAG>;

        staticinvoke <android.telephony.Rlog: int d(java.lang.String,java.lang.String)>($r2, r1);

        return;
    }

    private void loge(java.lang.String)
    {
        android.net.sip.SipAudioCall r0;
        java.lang.String r1, $r2;

        r0 := @this: android.net.sip.SipAudioCall;

        r1 := @parameter0: java.lang.String;

        $r2 = <android.net.sip.SipAudioCall: java.lang.String LOG_TAG>;

        staticinvoke <android.telephony.Rlog: int e(java.lang.String,java.lang.String)>($r2, r1);

        return;
    }

    private void loge(java.lang.String, java.lang.Throwable)
    {
        android.net.sip.SipAudioCall r0;
        java.lang.String r1, $r3;
        java.lang.Throwable r2;

        r0 := @this: android.net.sip.SipAudioCall;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        $r3 = <android.net.sip.SipAudioCall: java.lang.String LOG_TAG>;

        staticinvoke <android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r3, r1, r2);

        return;
    }

    private void onError(int, java.lang.String)
    {
        android.net.sip.SipAudioCall r0;
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r3, $r7, r10;
        boolean $z0;
        java.lang.Throwable $r8, $r9;
        android.net.sip.SipAudioCall$Listener r12;
        java.lang.Object r14;

        r0 := @this: android.net.sip.SipAudioCall;

        i0 := @parameter0: int;

        r10 := @parameter1: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onError: ");

        $r3 = staticinvoke <android.net.sip.SipErrorCode: java.lang.String toString(int)>(i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r7 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.net.sip.SipAudioCall: void log(java.lang.String)>($r7);

        r0.<android.net.sip.SipAudioCall: int mErrorCode> = i0;

        r0.<android.net.sip.SipAudioCall: java.lang.String mErrorMessage> = r10;

        r12 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipAudioCall$Listener mListener>;

        if r12 == null goto label04;

     label01:
        virtualinvoke r12.<android.net.sip.SipAudioCall$Listener: void onError(android.net.sip.SipAudioCall,int,java.lang.String)>(r0, i0, r10);

     label02:
        goto label04;

     label03:
        $r9 := @caughtexception;

        specialinvoke r0.<android.net.sip.SipAudioCall: void loge(java.lang.String,java.lang.Throwable)>("onError():", $r9);

     label04:
        r14 = r0.<android.net.sip.SipAudioCall: java.lang.Object mLock>;

        entermonitor r14;

        if i0 == -10 goto label06;

     label05:
        $z0 = virtualinvoke r0.<android.net.sip.SipAudioCall: boolean isInCall()>();

        if $z0 != 0 goto label07;

     label06:
        specialinvoke r0.<android.net.sip.SipAudioCall: void close(boolean)>(1);

     label07:
        exitmonitor r14;

     label08:
        return;

     label09:
        $r8 := @caughtexception;

     label10:
        exitmonitor r14;

     label11:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    private void releaseWifiHighPerfLock()
    {
        android.net.sip.SipAudioCall r0;
        android.net.wifi.WifiManager$WifiLock $r1, $r2;

        r0 := @this: android.net.sip.SipAudioCall;

        $r1 = r0.<android.net.sip.SipAudioCall: android.net.wifi.WifiManager$WifiLock mWifiHighPerfLock>;

        if $r1 == null goto label1;

        specialinvoke r0.<android.net.sip.SipAudioCall: void log(java.lang.String)>("releaseWifiHighPerfLock:");

        $r2 = r0.<android.net.sip.SipAudioCall: android.net.wifi.WifiManager$WifiLock mWifiHighPerfLock>;

        virtualinvoke $r2.<android.net.wifi.WifiManager$WifiLock: void release()>();

        r0.<android.net.sip.SipAudioCall: android.net.wifi.WifiManager$WifiLock mWifiHighPerfLock> = null;

     label1:
        return;
    }

    private void setAudioGroupMode()
    {
        android.net.sip.SipAudioCall r0;
        android.net.rtp.AudioGroup r1;
        java.lang.StringBuilder $r3;
        java.lang.String $r6;
        boolean $z0, $z1, $z2;

        r0 := @this: android.net.sip.SipAudioCall;

        r1 = virtualinvoke r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioGroup getAudioGroup()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setAudioGroupMode: audioGroup=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.net.sip.SipAudioCall: void log(java.lang.String)>($r6);

        if r1 == null goto label4;

        $z0 = r0.<android.net.sip.SipAudioCall: boolean mHold>;

        if $z0 == 0 goto label1;

        virtualinvoke r1.<android.net.rtp.AudioGroup: void setMode(int)>(0);

        goto label4;

     label1:
        $z1 = r0.<android.net.sip.SipAudioCall: boolean mMuted>;

        if $z1 == 0 goto label2;

        virtualinvoke r1.<android.net.rtp.AudioGroup: void setMode(int)>(1);

        goto label4;

     label2:
        $z2 = specialinvoke r0.<android.net.sip.SipAudioCall: boolean isSpeakerOn()>();

        if $z2 == 0 goto label3;

        virtualinvoke r1.<android.net.rtp.AudioGroup: void setMode(int)>(3);

        goto label4;

     label3:
        virtualinvoke r1.<android.net.rtp.AudioGroup: void setMode(int)>(2);

     label4:
        return;
    }

    private void startAudioInternal() throws java.net.UnknownHostException
    {
        android.net.sip.SipAudioCall r0;
        android.net.sip.SimpleSessionDescription r1;
        android.net.rtp.AudioStream r2;
        android.net.sip.SimpleSessionDescription$Media r3;
        int i0, i1, $i2, $i3, $i4, i5, i6, i7, i8, i9, i10;
        java.lang.String $r5, $r7, $r8, $r9, $r11, $r12, $r13, $r14, $r16, $r17, $r18, $r19, $r20, $r21, r29, r30, r32;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        android.content.Context $r10;
        java.net.InetAddress $r15;
        java.lang.Throwable $r22;
        java.lang.StringBuilder r23;
        android.net.rtp.AudioCodec r24, r26, r27;
        android.net.sip.SimpleSessionDescription$Media[] r25;
        int[] r28, r31;
        android.net.rtp.AudioGroup r33, r34;
        java.lang.IllegalStateException r35, r36;

        r0 := @this: android.net.sip.SipAudioCall;

        entermonitor r0;

     label01:
        r23 = new java.lang.StringBuilder;

        specialinvoke r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("startAudioInternal: mPeerSd=");

        $r5 = r0.<android.net.sip.SipAudioCall: java.lang.String mPeerSd>;

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.net.sip.SipAudioCall: void loge(java.lang.String)>($r7);

        $r8 = r0.<android.net.sip.SipAudioCall: java.lang.String mPeerSd>;

        if $r8 == null goto label50;

        specialinvoke r0.<android.net.sip.SipAudioCall: void stopCall(boolean)>(0);

        r0.<android.net.sip.SipAudioCall: boolean mInCall> = 1;

        r1 = new android.net.sip.SimpleSessionDescription;

        $r9 = r0.<android.net.sip.SipAudioCall: java.lang.String mPeerSd>;

        specialinvoke r1.<android.net.sip.SimpleSessionDescription: void <init>(java.lang.String)>($r9);

        r2 = r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioStream mAudioStream>;

     label02:
        r24 = null;

     label03:
        r25 = virtualinvoke r1.<android.net.sip.SimpleSessionDescription: android.net.sip.SimpleSessionDescription$Media[] getMedia()>();

        i5 = lengthof r25;

     label04:
        i6 = 0;

     label05:
        r26 = r24;

        if i6 >= i5 goto label40;

        r3 = r25[i6];

        r27 = r24;

        if r24 != null goto label39;

        r27 = r24;

     label06:
        $i2 = virtualinvoke r3.<android.net.sip.SimpleSessionDescription$Media: int getPort()>();

        if $i2 <= 0 goto label39;

     label07:
        r27 = r24;

     label08:
        $r11 = "audio";

        $r12 = virtualinvoke r3.<android.net.sip.SimpleSessionDescription$Media: java.lang.String getType()>();

        $z2 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z2 == 0 goto label39;

     label09:
        r27 = r24;

     label10:
        $r13 = "RTP/AVP";

        $r14 = virtualinvoke r3.<android.net.sip.SimpleSessionDescription$Media: java.lang.String getProtocol()>();

        $z3 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z3 == 0 goto label39;

        r28 = virtualinvoke r3.<android.net.sip.SimpleSessionDescription$Media: int[] getRtpPayloadTypes()>();

        i0 = lengthof r28;

     label11:
        i7 = 0;

     label12:
        if i7 >= i0 goto label16;

        i1 = r28[i7];

     label13:
        $r20 = virtualinvoke r3.<android.net.sip.SimpleSessionDescription$Media: java.lang.String getRtpmap(int)>(i1);

        $r21 = virtualinvoke r3.<android.net.sip.SimpleSessionDescription$Media: java.lang.String getFmtp(int)>(i1);

        r24 = staticinvoke <android.net.rtp.AudioCodec: android.net.rtp.AudioCodec getCodec(int,java.lang.String,java.lang.String)>(i1, $r20, $r21);

     label14:
        if r24 == null goto label15;

        goto label16;

     label15:
        i7 = i7 + 1;

        goto label12;

     label16:
        r27 = r24;

        if r24 == null goto label39;

     label17:
        r29 = virtualinvoke r3.<android.net.sip.SimpleSessionDescription$Media: java.lang.String getAddress()>();

     label18:
        r30 = r29;

        if r29 != null goto label20;

     label19:
        r30 = virtualinvoke r1.<android.net.sip.SimpleSessionDescription: java.lang.String getAddress()>();

     label20:
        $r15 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>(r30);

        $i3 = virtualinvoke r3.<android.net.sip.SimpleSessionDescription$Media: int getPort()>();

        virtualinvoke r2.<android.net.rtp.AudioStream: void associate(java.net.InetAddress,int)>($r15, $i3);

        virtualinvoke r2.<android.net.rtp.AudioStream: void setDtmfType(int)>(-1);

        virtualinvoke r2.<android.net.rtp.AudioStream: void setCodec(android.net.rtp.AudioCodec)>(r24);

        r31 = virtualinvoke r3.<android.net.sip.SimpleSessionDescription$Media: int[] getRtpPayloadTypes()>();

        i8 = lengthof r31;

     label21:
        i9 = 0;

     label22:
        if i9 >= i8 goto label27;

        i10 = r31[i9];

     label23:
        r32 = virtualinvoke r3.<android.net.sip.SimpleSessionDescription$Media: java.lang.String getRtpmap(int)>(i10);

        $i4 = r24.<android.net.rtp.AudioCodec: int type>;

        if i10 == $i4 goto label26;

     label24:
        if r32 == null goto label26;

     label25:
        $z5 = virtualinvoke r32.<java.lang.String: boolean startsWith(java.lang.String)>("telephone-event");

        if $z5 == 0 goto label26;

        virtualinvoke r2.<android.net.rtp.AudioStream: void setDtmfType(int)>(i10);

     label26:
        i9 = i9 + 1;

        goto label22;

     label27:
        $z4 = r0.<android.net.sip.SipAudioCall: boolean mHold>;

        if $z4 == 0 goto label29;

        virtualinvoke r2.<android.net.rtp.AudioStream: void setMode(int)>(0);

     label28:
        r26 = r24;

        goto label40;

     label29:
        $r16 = virtualinvoke r3.<android.net.sip.SimpleSessionDescription$Media: java.lang.String getAttribute(java.lang.String)>("recvonly");

        if $r16 == null goto label31;

        virtualinvoke r2.<android.net.rtp.AudioStream: void setMode(int)>(1);

     label30:
        r26 = r24;

        goto label40;

     label31:
        $r17 = virtualinvoke r3.<android.net.sip.SimpleSessionDescription$Media: java.lang.String getAttribute(java.lang.String)>("sendonly");

        if $r17 == null goto label33;

        virtualinvoke r2.<android.net.rtp.AudioStream: void setMode(int)>(2);

     label32:
        r26 = r24;

        goto label40;

     label33:
        $r18 = virtualinvoke r1.<android.net.sip.SimpleSessionDescription: java.lang.String getAttribute(java.lang.String)>("recvonly");

        if $r18 == null goto label35;

        virtualinvoke r2.<android.net.rtp.AudioStream: void setMode(int)>(1);

     label34:
        r26 = r24;

        goto label40;

     label35:
        $r19 = virtualinvoke r1.<android.net.sip.SimpleSessionDescription: java.lang.String getAttribute(java.lang.String)>("sendonly");

        if $r19 == null goto label37;

        virtualinvoke r2.<android.net.rtp.AudioStream: void setMode(int)>(2);

     label36:
        r26 = r24;

        goto label40;

     label37:
        virtualinvoke r2.<android.net.rtp.AudioStream: void setMode(int)>(0);

     label38:
        r26 = r24;

        goto label40;

     label39:
        i6 = i6 + 1;

        r24 = r27;

        goto label05;

     label40:
        if r26 == null goto label49;

     label41:
        $z0 = specialinvoke r0.<android.net.sip.SipAudioCall: boolean isWifiOn()>();

        if $z0 == 0 goto label42;

        specialinvoke r0.<android.net.sip.SipAudioCall: void grabWifiHighPerfLock()>();

     label42:
        r33 = virtualinvoke r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioGroup getAudioGroup()>();

        $z1 = r0.<android.net.sip.SipAudioCall: boolean mHold>;

        if $z1 == 0 goto label44;

     label43:
        goto label47;

     label44:
        r34 = r33;

        if r33 != null goto label46;

     label45:
        r34 = new android.net.rtp.AudioGroup;

        $r10 = r0.<android.net.sip.SipAudioCall: android.content.Context mContext>;

        specialinvoke r34.<android.net.rtp.AudioGroup: void <init>(android.content.Context)>($r10);

     label46:
        virtualinvoke r2.<android.net.rtp.AudioStream: void join(android.net.rtp.AudioGroup)>(r34);

     label47:
        specialinvoke r0.<android.net.sip.SipAudioCall: void setAudioGroupMode()>();

     label48:
        exitmonitor r0;

        return;

     label49:
        r35 = new java.lang.IllegalStateException;

        specialinvoke r35.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Reject SDP: no suitable codecs");

        throw r35;

     label50:
        r36 = new java.lang.IllegalStateException;

        specialinvoke r36.<java.lang.IllegalStateException: void <init>(java.lang.String)>("mPeerSd = null");

        throw r36;

     label51:
        $r22 := @caughtexception;

        exitmonitor r0;

        throw $r22;

        catch java.lang.Throwable from label01 to label02 with label51;
        catch java.lang.Throwable from label03 to label04 with label51;
        catch java.lang.Throwable from label06 to label07 with label51;
        catch java.lang.Throwable from label08 to label09 with label51;
        catch java.lang.Throwable from label10 to label11 with label51;
        catch java.lang.Throwable from label13 to label14 with label51;
        catch java.lang.Throwable from label17 to label18 with label51;
        catch java.lang.Throwable from label19 to label20 with label51;
        catch java.lang.Throwable from label20 to label21 with label51;
        catch java.lang.Throwable from label23 to label24 with label51;
        catch java.lang.Throwable from label25 to label26 with label51;
        catch java.lang.Throwable from label27 to label28 with label51;
        catch java.lang.Throwable from label29 to label30 with label51;
        catch java.lang.Throwable from label31 to label32 with label51;
        catch java.lang.Throwable from label33 to label34 with label51;
        catch java.lang.Throwable from label35 to label36 with label51;
        catch java.lang.Throwable from label37 to label38 with label51;
        catch java.lang.Throwable from label41 to label42 with label51;
        catch java.lang.Throwable from label42 to label43 with label51;
        catch java.lang.Throwable from label45 to label46 with label51;
        catch java.lang.Throwable from label46 to label47 with label51;
        catch java.lang.Throwable from label47 to label48 with label51;
        catch java.lang.Throwable from label49 to label50 with label51;
        catch java.lang.Throwable from label50 to label51 with label51;
    }

    private void stopCall(boolean)
    {
        android.net.sip.SipAudioCall r0;
        boolean z0;
        java.lang.StringBuilder $r1;
        java.lang.String $r4;
        android.net.rtp.AudioStream $r5, r7;

        r0 := @this: android.net.sip.SipAudioCall;

        z0 := @parameter0: boolean;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stopCall: releaseSocket=");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.net.sip.SipAudioCall: void log(java.lang.String)>($r4);

        specialinvoke r0.<android.net.sip.SipAudioCall: void releaseWifiHighPerfLock()>();

        r7 = r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioStream mAudioStream>;

        if r7 == null goto label1;

        virtualinvoke r7.<android.net.rtp.AudioStream: void join(android.net.rtp.AudioGroup)>(null);

        if z0 == 0 goto label1;

        $r5 = r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioStream mAudioStream>;

        virtualinvoke $r5.<android.net.rtp.AudioStream: void release()>();

        r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioStream mAudioStream> = null;

     label1:
        return;
    }

    private void throwSipException(java.lang.Throwable) throws android.net.sip.SipException
    {
        android.net.sip.SipAudioCall r0;
        java.lang.Throwable r1;
        boolean $z0;
        android.net.sip.SipException $r2, $r3;

        r0 := @this: android.net.sip.SipAudioCall;

        r1 := @parameter0: java.lang.Throwable;

        $z0 = r1 instanceof android.net.sip.SipException;

        if $z0 == 0 goto label1;

        $r3 = (android.net.sip.SipException) r1;

        throw $r3;

     label1:
        $r2 = new android.net.sip.SipException;

        specialinvoke $r2.<android.net.sip.SipException: void <init>(java.lang.String,java.lang.Throwable)>("", r1);

        throw $r2;
    }

    private void transferToNewSession()
    {
        android.net.sip.SipAudioCall r0;
        android.net.sip.SipSession $r1, r8, r9;
        android.net.rtp.AudioStream $r2, $r5, r10;
        java.lang.String $r3;
        java.net.InetAddress $r4;
        java.lang.Throwable $r6, $r7;

        r0 := @this: android.net.sip.SipAudioCall;

        entermonitor r0;

     label01:
        r8 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mTransferringSession>;

     label02:
        if r8 != null goto label03;

        exitmonitor r0;

        return;

     label03:
        r9 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession>;

        $r1 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mTransferringSession>;

        r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession> = $r1;

        r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mTransferringSession> = null;

        $r2 = r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioStream mAudioStream>;

        if $r2 == null goto label05;

        $r5 = r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioStream mAudioStream>;

        virtualinvoke $r5.<android.net.rtp.AudioStream: void join(android.net.rtp.AudioGroup)>(null);

     label04:
        goto label09;

     label05:
        r10 = new android.net.rtp.AudioStream;

        $r3 = specialinvoke r0.<android.net.sip.SipAudioCall: java.lang.String getLocalIp()>();

        $r4 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>($r3);

        specialinvoke r10.<android.net.rtp.AudioStream: void <init>(java.net.InetAddress)>($r4);

        r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioStream mAudioStream> = r10;

     label06:
        goto label09;

     label07:
        $r7 := @caughtexception;

     label08:
        specialinvoke r0.<android.net.sip.SipAudioCall: void loge(java.lang.String,java.lang.Throwable)>("transferToNewSession():", $r7);

     label09:
        if r9 == null goto label11;

     label10:
        virtualinvoke r9.<android.net.sip.SipSession: void endCall()>();

     label11:
        virtualinvoke r0.<android.net.sip.SipAudioCall: void startAudio()>();

     label12:
        exitmonitor r0;

        return;

     label13:
        $r6 := @caughtexception;

        exitmonitor r0;

        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
    }

    public void answerCall(int) throws android.net.sip.SipException
    {
        android.net.sip.SipAudioCall r0;
        int i0;
        android.net.sip.SipException r1, r22;
        java.lang.StringBuilder $r2;
        android.net.sip.SipSession $r4, $r12, r19;
        java.lang.String $r8, $r9, $r11, $r14;
        java.net.InetAddress $r10;
        android.net.sip.SimpleSessionDescription $r13;
        java.lang.Throwable $r15, $r16;
        java.lang.Object r18;
        android.net.rtp.AudioStream r20;

        r0 := @this: android.net.sip.SipAudioCall;

        i0 := @parameter0: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("answerCall: mSipSession");

        $r4 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" timeout=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.net.sip.SipAudioCall: void log(java.lang.String)>($r8);

        r18 = r0.<android.net.sip.SipAudioCall: java.lang.Object mLock>;

        entermonitor r18;

     label01:
        r19 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession>;

     label02:
        if r19 == null goto label08;

     label03:
        r20 = new android.net.rtp.AudioStream;

        $r9 = specialinvoke r0.<android.net.sip.SipAudioCall: java.lang.String getLocalIp()>();

        $r10 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>($r9);

        specialinvoke r20.<android.net.rtp.AudioStream: void <init>(java.net.InetAddress)>($r10);

        r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioStream mAudioStream> = r20;

        $r12 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession>;

        $r11 = r0.<android.net.sip.SipAudioCall: java.lang.String mPeerSd>;

        $r13 = specialinvoke r0.<android.net.sip.SipAudioCall: android.net.sip.SimpleSessionDescription createAnswer(java.lang.String)>($r11);

        $r14 = virtualinvoke $r13.<android.net.sip.SimpleSessionDescription: java.lang.String encode()>();

        virtualinvoke $r12.<android.net.sip.SipSession: void answerCall(java.lang.String,int)>($r14, i0);

     label04:
        exitmonitor r18;

     label05:
        return;

     label06:
        $r16 := @caughtexception;

     label07:
        specialinvoke r0.<android.net.sip.SipAudioCall: void loge(java.lang.String,java.lang.Throwable)>("answerCall:", $r16);

        r1 = new android.net.sip.SipException;

        specialinvoke r1.<android.net.sip.SipException: void <init>(java.lang.String,java.lang.Throwable)>("answerCall()", $r16);

        throw r1;

     label08:
        r22 = new android.net.sip.SipException;

        specialinvoke r22.<android.net.sip.SipException: void <init>(java.lang.String)>("No call to answer");

        throw r22;

     label09:
        $r15 := @caughtexception;

     label10:
        exitmonitor r18;

     label11:
        throw $r15;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.io.IOException from label03 to label04 with label06;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void attachCall(android.net.sip.SipSession, java.lang.String) throws android.net.sip.SipException
    {
        android.net.sip.SipAudioCall r0;
        java.lang.Object r1;
        android.content.Context $r2;
        boolean $z0;
        android.net.sip.SipException $r3;
        java.lang.String $r5, $r7, r12;
        android.net.sip.SipSession$Listener $r8;
        java.lang.Throwable $r9, $r10;
        android.net.sip.SipSession r11;
        java.lang.StringBuilder r13;

        r0 := @this: android.net.sip.SipAudioCall;

        r11 := @parameter0: android.net.sip.SipSession;

        r12 := @parameter1: java.lang.String;

        $r2 = r0.<android.net.sip.SipAudioCall: android.content.Context mContext>;

        $z0 = staticinvoke <android.net.sip.SipManager: boolean isVoipSupported(android.content.Context)>($r2);

        if $z0 == 0 goto label11;

        r1 = r0.<android.net.sip.SipAudioCall: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession> = r11;

        r0.<android.net.sip.SipAudioCall: java.lang.String mPeerSd> = r12;

        r13 = new java.lang.StringBuilder;

        specialinvoke r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("attachCall(): ");

        $r5 = r0.<android.net.sip.SipAudioCall: java.lang.String mPeerSd>;

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.net.sip.SipAudioCall: void log(java.lang.String)>($r7);

     label02:
        $r8 = specialinvoke r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession$Listener createListener()>();

        virtualinvoke r11.<android.net.sip.SipSession: void setListener(android.net.sip.SipSession$Listener)>($r8);

     label03:
        goto label06;

     label04:
        $r10 := @caughtexception;

     label05:
        specialinvoke r0.<android.net.sip.SipAudioCall: void loge(java.lang.String,java.lang.Throwable)>("attachCall()", $r10);

        specialinvoke r0.<android.net.sip.SipAudioCall: void throwSipException(java.lang.Throwable)>($r10);

     label06:
        exitmonitor r1;

     label07:
        return;

     label08:
        $r9 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r9;

     label11:
        $r3 = new android.net.sip.SipException;

        specialinvoke $r3.<android.net.sip.SipException: void <init>(java.lang.String)>("VOIP API is not supported");

        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void close()
    {
        android.net.sip.SipAudioCall r0;

        r0 := @this: android.net.sip.SipAudioCall;

        specialinvoke r0.<android.net.sip.SipAudioCall: void close(boolean)>(1);

        return;
    }

    public void continueCall(int) throws android.net.sip.SipException
    {
        android.net.sip.SipAudioCall r0;
        int i0;
        java.lang.Object r1;
        java.lang.StringBuilder $r2;
        android.net.sip.SipSession $r4, $r9;
        java.lang.String $r8, $r11;
        boolean $z0;
        android.net.sip.SimpleSessionDescription $r10;
        java.lang.Throwable $r12;

        r0 := @this: android.net.sip.SipAudioCall;

        i0 := @parameter0: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("continueCall: mSipSession");

        $r4 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" timeout=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.net.sip.SipAudioCall: void log(java.lang.String)>($r8);

        r1 = r0.<android.net.sip.SipAudioCall: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = r0.<android.net.sip.SipAudioCall: boolean mHold>;

        if $z0 != 0 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r9 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession>;

        $r10 = specialinvoke r0.<android.net.sip.SipAudioCall: android.net.sip.SimpleSessionDescription createContinueOffer()>();

        $r11 = virtualinvoke $r10.<android.net.sip.SimpleSessionDescription: java.lang.String encode()>();

        virtualinvoke $r9.<android.net.sip.SipSession: void changeCall(java.lang.String,int)>($r11, i0);

        r0.<android.net.sip.SipAudioCall: boolean mHold> = 0;

        specialinvoke r0.<android.net.sip.SipAudioCall: void setAudioGroupMode()>();

        exitmonitor r1;

     label4:
        return;

     label5:
        $r12 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r12;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void endCall() throws android.net.sip.SipException
    {
        android.net.sip.SipAudioCall r0;
        java.lang.StringBuilder $r2;
        android.net.sip.SipSession $r4, $r7, $r8;
        java.lang.String $r6;
        java.lang.Throwable $r9;
        java.lang.Object r11;

        r0 := @this: android.net.sip.SipAudioCall;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("endCall: mSipSession");

        $r4 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.net.sip.SipAudioCall: void log(java.lang.String)>($r6);

        r11 = r0.<android.net.sip.SipAudioCall: java.lang.Object mLock>;

        entermonitor r11;

     label1:
        specialinvoke r0.<android.net.sip.SipAudioCall: void stopCall(boolean)>(1);

        r0.<android.net.sip.SipAudioCall: boolean mInCall> = 0;

        $r7 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession>;

        if $r7 == null goto label2;

        $r8 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession>;

        virtualinvoke $r8.<android.net.sip.SipSession: void endCall()>();

     label2:
        exitmonitor r11;

     label3:
        return;

     label4:
        $r9 := @caughtexception;

     label5:
        exitmonitor r11;

     label6:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public android.net.rtp.AudioGroup getAudioGroup()
    {
        android.net.sip.SipAudioCall r0;
        java.lang.Object r1;
        android.net.rtp.AudioGroup $r2, r6, r7;
        android.net.rtp.AudioStream $r3, $r4;
        java.lang.Throwable $r5;

        r0 := @this: android.net.sip.SipAudioCall;

        r1 = r0.<android.net.sip.SipAudioCall: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r2 = r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioGroup mAudioGroup>;

        if $r2 == null goto label03;

        r6 = r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioGroup mAudioGroup>;

        exitmonitor r1;

     label02:
        return r6;

     label03:
        $r3 = r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioStream mAudioStream>;

        if $r3 != null goto label05;

     label04:
        r7 = null;

        goto label06;

     label05:
        $r4 = r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioStream mAudioStream>;

        r7 = virtualinvoke $r4.<android.net.rtp.AudioStream: android.net.rtp.AudioGroup getGroup()>();

     label06:
        exitmonitor r1;

     label07:
        return r7;

     label08:
        $r5 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public android.net.rtp.AudioStream getAudioStream()
    {
        android.net.sip.SipAudioCall r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        android.net.rtp.AudioStream r3;

        r0 := @this: android.net.sip.SipAudioCall;

        r1 = r0.<android.net.sip.SipAudioCall: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r3 = r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioStream mAudioStream>;

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.net.sip.SipProfile getLocalProfile()
    {
        android.net.sip.SipAudioCall r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        android.net.sip.SipProfile r3;

        r0 := @this: android.net.sip.SipAudioCall;

        r1 = r0.<android.net.sip.SipAudioCall: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r3 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipProfile mLocalProfile>;

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.net.sip.SipProfile getPeerProfile()
    {
        android.net.sip.SipAudioCall r0;
        java.lang.Object r1;
        android.net.sip.SipSession $r2, $r3;
        java.lang.Throwable $r4;
        android.net.sip.SipProfile r5;

        r0 := @this: android.net.sip.SipAudioCall;

        r1 = r0.<android.net.sip.SipAudioCall: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession>;

        if $r2 != null goto label3;

     label2:
        r5 = null;

        goto label4;

     label3:
        $r3 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession>;

        r5 = virtualinvoke $r3.<android.net.sip.SipSession: android.net.sip.SipProfile getPeerProfile()>();

     label4:
        exitmonitor r1;

     label5:
        return r5;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public android.net.sip.SipSession getSipSession()
    {
        android.net.sip.SipAudioCall r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        android.net.sip.SipSession r3;

        r0 := @this: android.net.sip.SipAudioCall;

        r1 = r0.<android.net.sip.SipAudioCall: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r3 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession>;

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int getState()
    {
        android.net.sip.SipAudioCall r0;
        java.lang.Object r1;
        int i0;
        android.net.sip.SipSession $r3, $r4;
        java.lang.Throwable $r5;

        r0 := @this: android.net.sip.SipAudioCall;

        r1 = r0.<android.net.sip.SipAudioCall: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession>;

        if $r3 != null goto label3;

        exitmonitor r1;

     label2:
        return 0;

     label3:
        $r4 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession>;

        i0 = virtualinvoke $r4.<android.net.sip.SipSession: int getState()>();

        exitmonitor r1;

     label4:
        return i0;

     label5:
        $r5 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void holdCall(int) throws android.net.sip.SipException
    {
        android.net.sip.SipAudioCall r0;
        int i0;
        java.lang.StringBuilder $r1;
        android.net.sip.SipSession $r3, $r8, $r9;
        java.lang.String $r7, $r11;
        boolean $z0;
        android.net.sip.SimpleSessionDescription $r10;
        java.lang.Throwable $r12;
        java.lang.Object r14;
        android.net.sip.SipException r15;

        r0 := @this: android.net.sip.SipAudioCall;

        i0 := @parameter0: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("holdCall: mSipSession");

        $r3 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" timeout=");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.net.sip.SipAudioCall: void log(java.lang.String)>($r7);

        r14 = r0.<android.net.sip.SipAudioCall: java.lang.Object mLock>;

        entermonitor r14;

     label1:
        $z0 = r0.<android.net.sip.SipAudioCall: boolean mHold>;

        if $z0 == 0 goto label3;

        exitmonitor r14;

     label2:
        return;

     label3:
        $r8 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession>;

        if $r8 == null goto label5;

        $r9 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession>;

        $r10 = specialinvoke r0.<android.net.sip.SipAudioCall: android.net.sip.SimpleSessionDescription createHoldOffer()>();

        $r11 = virtualinvoke $r10.<android.net.sip.SimpleSessionDescription: java.lang.String encode()>();

        virtualinvoke $r9.<android.net.sip.SipSession: void changeCall(java.lang.String,int)>($r11, i0);

        r0.<android.net.sip.SipAudioCall: boolean mHold> = 1;

        specialinvoke r0.<android.net.sip.SipAudioCall: void setAudioGroupMode()>();

        exitmonitor r14;

     label4:
        return;

     label5:
        specialinvoke r0.<android.net.sip.SipAudioCall: void loge(java.lang.String)>("holdCall:");

        r15 = new android.net.sip.SipException;

        specialinvoke r15.<android.net.sip.SipException: void <init>(java.lang.String)>("Not in a call to hold call");

        throw r15;

     label6:
        $r12 := @caughtexception;

     label7:
        exitmonitor r14;

     label8:
        throw $r12;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public boolean isInCall()
    {
        android.net.sip.SipAudioCall r0;
        java.lang.Object r1;
        boolean z0;
        java.lang.Throwable $r3;

        r0 := @this: android.net.sip.SipAudioCall;

        r1 = r0.<android.net.sip.SipAudioCall: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        z0 = r0.<android.net.sip.SipAudioCall: boolean mInCall>;

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isMuted()
    {
        android.net.sip.SipAudioCall r0;
        java.lang.Object r1;
        boolean z0;
        java.lang.Throwable $r3;

        r0 := @this: android.net.sip.SipAudioCall;

        r1 = r0.<android.net.sip.SipAudioCall: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        z0 = r0.<android.net.sip.SipAudioCall: boolean mMuted>;

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isOnHold()
    {
        android.net.sip.SipAudioCall r0;
        java.lang.Object r1;
        boolean z0;
        java.lang.Throwable $r3;

        r0 := @this: android.net.sip.SipAudioCall;

        r1 = r0.<android.net.sip.SipAudioCall: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        z0 = r0.<android.net.sip.SipAudioCall: boolean mHold>;

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void makeCall(android.net.sip.SipProfile, android.net.sip.SipSession, int) throws android.net.sip.SipException
    {
        android.net.sip.SipAudioCall r0;
        int i0;
        android.net.rtp.AudioStream r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r9, $r12, $r16;
        android.content.Context $r10;
        boolean $z0;
        android.net.sip.SipException $r11, r24;
        java.net.InetAddress $r13;
        android.net.sip.SipSession$Listener $r14;
        android.net.sip.SimpleSessionDescription $r15;
        java.lang.Throwable $r17, $r18;
        android.net.sip.SipProfile r19;
        android.net.sip.SipSession r20;
        java.lang.Object r22;

        r0 := @this: android.net.sip.SipAudioCall;

        r19 := @parameter0: android.net.sip.SipProfile;

        r20 := @parameter1: android.net.sip.SipSession;

        i0 := @parameter2: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("makeCall: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r19);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" session=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r20);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" timeout=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.net.sip.SipAudioCall: void log(java.lang.String)>($r9);

        $r10 = r0.<android.net.sip.SipAudioCall: android.content.Context mContext>;

        $z0 = staticinvoke <android.net.sip.SipManager: boolean isVoipSupported(android.content.Context)>($r10);

        if $z0 == 0 goto label10;

        r22 = r0.<android.net.sip.SipAudioCall: java.lang.Object mLock>;

        entermonitor r22;

     label01:
        r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession> = r20;

     label02:
        r1 = new android.net.rtp.AudioStream;

        $r12 = specialinvoke r0.<android.net.sip.SipAudioCall: java.lang.String getLocalIp()>();

        $r13 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>($r12);

        specialinvoke r1.<android.net.rtp.AudioStream: void <init>(java.net.InetAddress)>($r13);

        r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioStream mAudioStream> = r1;

        $r14 = specialinvoke r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession$Listener createListener()>();

        virtualinvoke r20.<android.net.sip.SipSession: void setListener(android.net.sip.SipSession$Listener)>($r14);

        $r15 = specialinvoke r0.<android.net.sip.SipAudioCall: android.net.sip.SimpleSessionDescription createOffer()>();

        $r16 = virtualinvoke $r15.<android.net.sip.SimpleSessionDescription: java.lang.String encode()>();

        virtualinvoke r20.<android.net.sip.SipSession: void makeCall(android.net.sip.SipProfile,java.lang.String,int)>(r19, $r16, i0);

     label03:
        exitmonitor r22;

     label04:
        return;

     label05:
        $r18 := @caughtexception;

     label06:
        specialinvoke r0.<android.net.sip.SipAudioCall: void loge(java.lang.String,java.lang.Throwable)>("makeCall:", $r18);

        r24 = new android.net.sip.SipException;

        specialinvoke r24.<android.net.sip.SipException: void <init>(java.lang.String,java.lang.Throwable)>("makeCall()", $r18);

        throw r24;

     label07:
        $r17 := @caughtexception;

     label08:
        exitmonitor r22;

     label09:
        throw $r17;

     label10:
        $r11 = new android.net.sip.SipException;

        specialinvoke $r11.<android.net.sip.SipException: void <init>(java.lang.String)>("VOIP API is not supported");

        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.io.IOException from label02 to label03 with label05;
        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label06 to label07 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    public void sendDtmf(int)
    {
        android.net.sip.SipAudioCall r0;
        int i0;

        r0 := @this: android.net.sip.SipAudioCall;

        i0 := @parameter0: int;

        virtualinvoke r0.<android.net.sip.SipAudioCall: void sendDtmf(int,android.os.Message)>(i0, null);

        return;
    }

    public void sendDtmf(int, android.os.Message)
    {
        android.net.sip.SipAudioCall r0;
        int i0, $i1;
        java.lang.Object r1;
        android.net.rtp.AudioGroup r2;
        java.lang.StringBuilder r3;
        android.net.sip.SipSession $r4;
        java.lang.String $r9;
        java.lang.Throwable $r10;
        android.os.Message r11;

        r0 := @this: android.net.sip.SipAudioCall;

        i0 := @parameter0: int;

        r11 := @parameter1: android.os.Message;

        r1 = r0.<android.net.sip.SipAudioCall: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        r2 = virtualinvoke r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioGroup getAudioGroup()>();

     label02:
        if r2 == null goto label04;

     label03:
        $r4 = r0.<android.net.sip.SipAudioCall: android.net.sip.SipSession mSipSession>;

        if $r4 == null goto label04;

        $i1 = virtualinvoke r0.<android.net.sip.SipAudioCall: int getState()>();

        if 8 != $i1 goto label04;

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sendDtmf: code=");

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" result=");

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r11);

        $r9 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.net.sip.SipAudioCall: void log(java.lang.String)>($r9);

        virtualinvoke r2.<android.net.rtp.AudioGroup: void sendDtmf(int)>(i0);

     label04:
        if r11 == null goto label06;

     label05:
        virtualinvoke r11.<android.os.Message: void sendToTarget()>();

     label06:
        exitmonitor r1;

     label07:
        return;

     label08:
        $r10 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void setAudioGroup(android.net.rtp.AudioGroup)
    {
        android.net.sip.SipAudioCall r0;
        java.lang.Object r1;
        java.lang.StringBuilder r2;
        java.lang.String $r5;
        android.net.rtp.AudioStream $r6, $r7, $r9;
        android.net.rtp.AudioGroup $r8, r11;
        java.lang.Throwable $r10;

        r0 := @this: android.net.sip.SipAudioCall;

        r11 := @parameter0: android.net.rtp.AudioGroup;

        r1 = r0.<android.net.sip.SipAudioCall: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setAudioGroup: group=");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r11);

        $r5 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<android.net.sip.SipAudioCall: void log(java.lang.String)>($r5);

        $r6 = r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioStream mAudioStream>;

        if $r6 == null goto label2;

        $r7 = r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioStream mAudioStream>;

        $r8 = virtualinvoke $r7.<android.net.rtp.AudioStream: android.net.rtp.AudioGroup getGroup()>();

        if $r8 == null goto label2;

        $r9 = r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioStream mAudioStream>;

        virtualinvoke $r9.<android.net.rtp.AudioStream: void join(android.net.rtp.AudioGroup)>(r11);

     label2:
        r0.<android.net.sip.SipAudioCall: android.net.rtp.AudioGroup mAudioGroup> = r11;

        exitmonitor r1;

     label3:
        return;

     label4:
        $r10 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void setListener(android.net.sip.SipAudioCall$Listener)
    {
        android.net.sip.SipAudioCall r0;
        android.net.sip.SipAudioCall$Listener r1;

        r0 := @this: android.net.sip.SipAudioCall;

        r1 := @parameter0: android.net.sip.SipAudioCall$Listener;

        virtualinvoke r0.<android.net.sip.SipAudioCall: void setListener(android.net.sip.SipAudioCall$Listener,boolean)>(r1, 0);

        return;
    }

    public void setListener(android.net.sip.SipAudioCall$Listener, boolean)
    {
        android.net.sip.SipAudioCall r0;
        boolean z0, $z1, $z2;
        int i0, $i1, $i2;
        android.net.sip.SipProfile $r1;
        java.lang.String $r2;
        java.lang.Throwable $r3;
        android.net.sip.SipAudioCall$Listener r4;

        r0 := @this: android.net.sip.SipAudioCall;

        r4 := @parameter0: android.net.sip.SipAudioCall$Listener;

        z0 := @parameter1: boolean;

        r0.<android.net.sip.SipAudioCall: android.net.sip.SipAudioCall$Listener mListener> = r4;

        if r4 == null goto label18;

        if z0 != 0 goto label01;

        goto label18;

     label01:
        $i1 = r0.<android.net.sip.SipAudioCall: int mErrorCode>;

        if $i1 == 0 goto label03;

        $i2 = r0.<android.net.sip.SipAudioCall: int mErrorCode>;

        $r2 = r0.<android.net.sip.SipAudioCall: java.lang.String mErrorMessage>;

        virtualinvoke r4.<android.net.sip.SipAudioCall$Listener: void onError(android.net.sip.SipAudioCall,int,java.lang.String)>(r0, $i2, $r2);

     label02:
        goto label18;

     label03:
        $z1 = r0.<android.net.sip.SipAudioCall: boolean mInCall>;

        if $z1 == 0 goto label07;

        $z2 = r0.<android.net.sip.SipAudioCall: boolean mHold>;

        if $z2 == 0 goto label05;

        virtualinvoke r4.<android.net.sip.SipAudioCall$Listener: void onCallHeld(android.net.sip.SipAudioCall)>(r0);

     label04:
        goto label18;

     label05:
        virtualinvoke r4.<android.net.sip.SipAudioCall$Listener: void onCallEstablished(android.net.sip.SipAudioCall)>(r0);

     label06:
        goto label18;

     label07:
        i0 = virtualinvoke r0.<android.net.sip.SipAudioCall: int getState()>();

     label08:
        if i0 == 0 goto label15;

        if i0 == 3 goto label13;

        if i0 == 5 goto label11;

        if i0 == 6 goto label09;

        goto label18;

     label09:
        virtualinvoke r4.<android.net.sip.SipAudioCall$Listener: void onRingingBack(android.net.sip.SipAudioCall)>(r0);

     label10:
        goto label18;

     label11:
        virtualinvoke r4.<android.net.sip.SipAudioCall$Listener: void onCalling(android.net.sip.SipAudioCall)>(r0);

     label12:
        goto label18;

     label13:
        $r1 = virtualinvoke r0.<android.net.sip.SipAudioCall: android.net.sip.SipProfile getPeerProfile()>();

        virtualinvoke r4.<android.net.sip.SipAudioCall$Listener: void onRinging(android.net.sip.SipAudioCall,android.net.sip.SipProfile)>(r0, $r1);

     label14:
        goto label18;

     label15:
        virtualinvoke r4.<android.net.sip.SipAudioCall$Listener: void onReadyToCall(android.net.sip.SipAudioCall)>(r0);

     label16:
        goto label18;

     label17:
        $r3 := @caughtexception;

        specialinvoke r0.<android.net.sip.SipAudioCall: void loge(java.lang.String,java.lang.Throwable)>("setListener()", $r3);

        goto label18;

     label18:
        return;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label03 to label04 with label17;
        catch java.lang.Throwable from label05 to label06 with label17;
        catch java.lang.Throwable from label07 to label08 with label17;
        catch java.lang.Throwable from label09 to label10 with label17;
        catch java.lang.Throwable from label11 to label12 with label17;
        catch java.lang.Throwable from label13 to label14 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
    }

    public void setSpeakerMode(boolean)
    {
        android.net.sip.SipAudioCall r0;
        boolean z0;
        java.lang.Object r1, $r4;
        android.content.Context $r3;
        android.media.AudioManager $r5;
        java.lang.Throwable $r6;

        r0 := @this: android.net.sip.SipAudioCall;

        z0 := @parameter0: boolean;

        r1 = r0.<android.net.sip.SipAudioCall: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<android.net.sip.SipAudioCall: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("audio");

        $r5 = (android.media.AudioManager) $r4;

        virtualinvoke $r5.<android.media.AudioManager: void setSpeakerphoneOn(boolean)>(z0);

        specialinvoke r0.<android.net.sip.SipAudioCall: void setAudioGroupMode()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r6 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void startAudio()
    {
        android.net.sip.SipAudioCall r0;
        java.lang.Throwable $r1, $r3;
        java.lang.String $r2, $r4;
        java.net.UnknownHostException r7;

        r0 := @this: android.net.sip.SipAudioCall;

     label1:
        specialinvoke r0.<android.net.sip.SipAudioCall: void startAudioInternal()>();

     label2:
        goto label5;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke r0.<android.net.sip.SipAudioCall: void onError(int,java.lang.String)>(-4, $r2);

        goto label5;

     label4:
        $r3 := @caughtexception;

        r7 = (java.net.UnknownHostException) $r3;

        $r4 = virtualinvoke r7.<java.net.UnknownHostException: java.lang.String getMessage()>();

        specialinvoke r0.<android.net.sip.SipAudioCall: void onError(int,java.lang.String)>(-7, $r4);

        goto label2;

     label5:
        return;

        catch java.net.UnknownHostException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void toggleMute()
    {
        android.net.sip.SipAudioCall r0;
        java.lang.Object r1;
        boolean $z0, z1;
        java.lang.Throwable $r3;

        r0 := @this: android.net.sip.SipAudioCall;

        r1 = r0.<android.net.sip.SipAudioCall: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = r0.<android.net.sip.SipAudioCall: boolean mMuted>;

        if $z0 != 0 goto label3;

     label2:
        z1 = 1;

        goto label4;

     label3:
        z1 = 0;

     label4:
        r0.<android.net.sip.SipAudioCall: boolean mMuted> = z1;

        specialinvoke r0.<android.net.sip.SipAudioCall: void setAudioGroupMode()>();

        exitmonitor r1;

     label5:
        return;

     label6:
        $r3 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }
}
