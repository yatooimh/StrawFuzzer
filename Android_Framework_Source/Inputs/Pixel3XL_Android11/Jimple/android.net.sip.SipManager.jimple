public class android.net.sip.SipManager extends java.lang.Object
{
    public static final java.lang.String ACTION_SIP_ADD_PHONE;
    public static final java.lang.String ACTION_SIP_CALL_OPTION_CHANGED;
    public static final java.lang.String ACTION_SIP_INCOMING_CALL;
    public static final java.lang.String ACTION_SIP_REMOVE_PROFILE;
    public static final java.lang.String ACTION_SIP_SERVICE_UP;
    public static final java.lang.String ACTION_START_SIP;
    public static final java.lang.String EXTRA_CALL_ID;
    public static final java.lang.String EXTRA_LOCAL_URI;
    public static final java.lang.String EXTRA_OFFER_SD;
    public static final int INCOMING_CALL_RESULT_CODE;
    private static final java.lang.String TAG;
    private android.content.Context mContext;
    private android.net.sip.ISipService mSipService;

    private void <init>(android.content.Context)
    {
        android.net.sip.SipManager r0;
        android.content.Context r1;

        r0 := @this: android.net.sip.SipManager;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.net.sip.SipManager: android.content.Context mContext> = r1;

        specialinvoke r0.<android.net.sip.SipManager: void createSipService()>();

        return;
    }

    private void checkSipServiceConnection() throws android.net.sip.SipException
    {
        android.net.sip.SipManager r0;
        android.net.sip.ISipService $r1;
        android.net.sip.SipException $r2;
        java.lang.Exception $r3;

        r0 := @this: android.net.sip.SipManager;

        specialinvoke r0.<android.net.sip.SipManager: void createSipService()>();

        $r1 = r0.<android.net.sip.SipManager: android.net.sip.ISipService mSipService>;

        if $r1 == null goto label1;

        return;

     label1:
        $r2 = new android.net.sip.SipException;

        $r3 = new java.lang.Exception;

        specialinvoke $r3.<java.lang.Exception: void <init>()>();

        specialinvoke $r2.<android.net.sip.SipException: void <init>(java.lang.String,java.lang.Throwable)>("SipService is dead and is restarting...", $r3);

        throw $r2;
    }

    public static android.content.Intent createIncomingCallBroadcast(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        android.content.Intent $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>()>();

        virtualinvoke $r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("android:sipCallID", r0);

        virtualinvoke $r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("android:sipOfferSD", r1);

        return $r3;
    }

    private static android.net.sip.ISipSessionListener createRelay(android.net.sip.SipRegistrationListener, java.lang.String)
    {
        java.lang.String r0;
        android.net.sip.SipManager$ListenerRelay $r1, r3;
        android.net.sip.SipRegistrationListener r2;

        r2 := @parameter0: android.net.sip.SipRegistrationListener;

        r0 := @parameter1: java.lang.String;

        if r2 != null goto label1;

        r3 = null;

        goto label2;

     label1:
        $r1 = new android.net.sip.SipManager$ListenerRelay;

        specialinvoke $r1.<android.net.sip.SipManager$ListenerRelay: void <init>(android.net.sip.SipRegistrationListener,java.lang.String)>(r2, r0);

        r3 = $r1;

     label2:
        return r3;
    }

    private void createSipService()
    {
        android.net.sip.SipManager r0;
        android.net.sip.ISipService $r1, $r3;
        android.os.IBinder $r2;

        r0 := @this: android.net.sip.SipManager;

        $r1 = r0.<android.net.sip.SipManager: android.net.sip.ISipService mSipService>;

        if $r1 != null goto label1;

        $r2 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("sip");

        $r3 = staticinvoke <android.net.sip.ISipService$Stub: android.net.sip.ISipService asInterface(android.os.IBinder)>($r2);

        r0.<android.net.sip.SipManager: android.net.sip.ISipService mSipService> = $r3;

     label1:
        return;
    }

    public static java.lang.String getCallId(android.content.Intent)
    {
        android.content.Intent r0;
        java.lang.String $r1;

        r0 := @parameter0: android.content.Intent;

        $r1 = virtualinvoke r0.<android.content.Intent: java.lang.String getStringExtra(java.lang.String)>("android:sipCallID");

        return $r1;
    }

    public static java.lang.String getOfferSessionDescription(android.content.Intent)
    {
        android.content.Intent r0;
        java.lang.String $r1;

        r0 := @parameter0: android.content.Intent;

        $r1 = virtualinvoke r0.<android.content.Intent: java.lang.String getStringExtra(java.lang.String)>("android:sipOfferSD");

        return $r1;
    }

    public static boolean isApiSupported(android.content.Context)
    {
        android.content.Context r0;
        android.content.pm.PackageManager $r1;
        boolean $z0;

        r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z0 = virtualinvoke $r1.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.sip");

        return $z0;
    }

    public static boolean isIncomingCallIntent(android.content.Intent)
    {
        java.lang.String r0, r2;
        android.content.Intent r1;
        boolean z1;

        r1 := @parameter0: android.content.Intent;

        if r1 != null goto label1;

        return 0;

     label1:
        r0 = staticinvoke <android.net.sip.SipManager: java.lang.String getCallId(android.content.Intent)>(r1);

        r2 = staticinvoke <android.net.sip.SipManager: java.lang.String getOfferSessionDescription(android.content.Intent)>(r1);

        z1 = 0;

        if r0 == null goto label2;

        z1 = 0;

        if r2 == null goto label2;

        z1 = 1;

     label2:
        return z1;
    }

    public static boolean isSipWifiOnly(android.content.Context)
    {
        android.content.Context r0;
        android.content.res.Resources $r1;
        boolean $z0;

        r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke r0.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r1.<android.content.res.Resources: boolean getBoolean(int)>(17891529);

        return $z0;
    }

    public static boolean isVoipSupported(android.content.Context)
    {
        android.content.Context r0;
        android.content.pm.PackageManager $r1;
        boolean $z0, $z1, z2;

        r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z0 = virtualinvoke $r1.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.sip.voip");

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <android.net.sip.SipManager: boolean isApiSupported(android.content.Context)>(r0);

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    public static android.net.sip.SipManager newInstance(android.content.Context)
    {
        boolean $z0;
        android.net.sip.SipManager $r0, r2;
        android.content.Context r1;

        r1 := @parameter0: android.content.Context;

        $z0 = staticinvoke <android.net.sip.SipManager: boolean isApiSupported(android.content.Context)>(r1);

        if $z0 == 0 goto label1;

        $r0 = new android.net.sip.SipManager;

        specialinvoke $r0.<android.net.sip.SipManager: void <init>(android.content.Context)>(r1);

        r2 = $r0;

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    public void close(java.lang.String) throws android.net.sip.SipException
    {
        android.net.sip.SipManager r0;
        android.content.Context $r1;
        android.net.sip.ISipService $r2;
        java.lang.String $r3, r6;
        android.os.RemoteException $r4;
        android.net.sip.SipException $r5;

        r0 := @this: android.net.sip.SipManager;

        r6 := @parameter0: java.lang.String;

     label1:
        specialinvoke r0.<android.net.sip.SipManager: void checkSipServiceConnection()>();

        $r2 = r0.<android.net.sip.SipManager: android.net.sip.ISipService mSipService>;

        $r1 = r0.<android.net.sip.SipManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke $r2.<android.net.sip.ISipService: void close(java.lang.String,java.lang.String)>(r6, $r3);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = new android.net.sip.SipException;

        specialinvoke $r5.<android.net.sip.SipException: void <init>(java.lang.String,java.lang.Throwable)>("close()", $r4);

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.sip.SipSession createSipSession(android.net.sip.SipProfile, android.net.sip.SipSession$Listener) throws android.net.sip.SipException
    {
        android.net.sip.SipManager r0;
        android.net.sip.SipSession$Listener r1;
        android.content.Context $r2;
        android.net.sip.ISipService $r3;
        java.lang.String $r4;
        android.net.sip.SipSession $r5;
        android.os.RemoteException $r6;
        android.net.sip.SipException $r7, r10;
        android.net.sip.SipProfile r8;
        android.net.sip.ISipSession r9;

        r0 := @this: android.net.sip.SipManager;

        r8 := @parameter0: android.net.sip.SipProfile;

        r1 := @parameter1: android.net.sip.SipSession$Listener;

     label1:
        specialinvoke r0.<android.net.sip.SipManager: void checkSipServiceConnection()>();

        $r3 = r0.<android.net.sip.SipManager: android.net.sip.ISipService mSipService>;

        $r2 = r0.<android.net.sip.SipManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r2.<android.content.Context: java.lang.String getOpPackageName()>();

        r9 = interfaceinvoke $r3.<android.net.sip.ISipService: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener,java.lang.String)>(r8, null, $r4);

     label2:
        if r9 == null goto label4;

     label3:
        $r5 = new android.net.sip.SipSession;

        specialinvoke $r5.<android.net.sip.SipSession: void <init>(android.net.sip.ISipSession,android.net.sip.SipSession$Listener)>(r9, r1);

        return $r5;

     label4:
        r10 = new android.net.sip.SipException;

        specialinvoke r10.<android.net.sip.SipException: void <init>(java.lang.String)>("Failed to create SipSession; network unavailable?");

        throw r10;

     label5:
        $r6 := @caughtexception;

        $r7 = new android.net.sip.SipException;

        specialinvoke $r7.<android.net.sip.SipException: void <init>(java.lang.String,java.lang.Throwable)>("createSipSession()", $r6);

        throw $r7;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
        catch android.os.RemoteException from label4 to label5 with label5;
    }

    public java.util.List getProfiles() throws android.net.sip.SipException
    {
        android.net.sip.SipManager r0;
        android.content.Context $r1;
        android.net.sip.ISipService $r2;
        java.lang.String $r3, $r6;
        android.os.RemoteException $r4;
        android.net.sip.SipException $r5;
        java.util.List r7;

        r0 := @this: android.net.sip.SipManager;

     label1:
        specialinvoke r0.<android.net.sip.SipManager: void checkSipServiceConnection()>();

        $r2 = r0.<android.net.sip.SipManager: android.net.sip.ISipService mSipService>;

        $r1 = r0.<android.net.sip.SipManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        r7 = interfaceinvoke $r2.<android.net.sip.ISipService: java.util.List getProfiles(java.lang.String)>($r3);

     label2:
        return r7;

     label3:
        $r4 := @caughtexception;

        $r5 = new android.net.sip.SipException;

        $r6 = virtualinvoke $r4.<android.os.RemoteException: java.lang.String getMessage()>();

        specialinvoke $r5.<android.net.sip.SipException: void <init>(java.lang.String)>($r6);

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.sip.SipSession getSessionFor(android.content.Intent) throws android.net.sip.SipException
    {
        android.net.sip.SipManager r0;
        android.content.Context $r1;
        android.net.sip.ISipService $r2;
        java.lang.String $r3, r8;
        android.net.sip.SipSession $r4, r10;
        android.os.RemoteException $r5;
        android.net.sip.SipException $r6;
        android.content.Intent r7;
        android.net.sip.ISipSession r9;

        r0 := @this: android.net.sip.SipManager;

        r7 := @parameter0: android.content.Intent;

     label1:
        specialinvoke r0.<android.net.sip.SipManager: void checkSipServiceConnection()>();

        r8 = staticinvoke <android.net.sip.SipManager: java.lang.String getCallId(android.content.Intent)>(r7);

        $r2 = r0.<android.net.sip.SipManager: android.net.sip.ISipService mSipService>;

        $r1 = r0.<android.net.sip.SipManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        r9 = interfaceinvoke $r2.<android.net.sip.ISipService: android.net.sip.ISipSession getPendingSession(java.lang.String,java.lang.String)>(r8, $r3);

     label2:
        if r9 != null goto label3;

        r10 = null;

        goto label4;

     label3:
        $r4 = new android.net.sip.SipSession;

        specialinvoke $r4.<android.net.sip.SipSession: void <init>(android.net.sip.ISipSession)>(r9);

        r10 = $r4;

     label4:
        return r10;

     label5:
        $r5 := @caughtexception;

        $r6 = new android.net.sip.SipException;

        specialinvoke $r6.<android.net.sip.SipException: void <init>(java.lang.String,java.lang.Throwable)>("getSessionFor()", $r5);

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public boolean isOpened(java.lang.String) throws android.net.sip.SipException
    {
        android.net.sip.SipManager r0;
        boolean z0;
        android.content.Context $r1;
        android.net.sip.ISipService $r2;
        java.lang.String $r3, r6;
        android.os.RemoteException $r4;
        android.net.sip.SipException $r5;

        r0 := @this: android.net.sip.SipManager;

        r6 := @parameter0: java.lang.String;

     label1:
        specialinvoke r0.<android.net.sip.SipManager: void checkSipServiceConnection()>();

        $r2 = r0.<android.net.sip.SipManager: android.net.sip.ISipService mSipService>;

        $r1 = r0.<android.net.sip.SipManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        z0 = interfaceinvoke $r2.<android.net.sip.ISipService: boolean isOpened(java.lang.String,java.lang.String)>(r6, $r3);

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        $r5 = new android.net.sip.SipException;

        specialinvoke $r5.<android.net.sip.SipException: void <init>(java.lang.String,java.lang.Throwable)>("isOpened()", $r4);

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isRegistered(java.lang.String) throws android.net.sip.SipException
    {
        android.net.sip.SipManager r0;
        boolean z0;
        android.content.Context $r1;
        android.net.sip.ISipService $r2;
        java.lang.String $r3, r6;
        android.os.RemoteException $r4;
        android.net.sip.SipException $r5;

        r0 := @this: android.net.sip.SipManager;

        r6 := @parameter0: java.lang.String;

     label1:
        specialinvoke r0.<android.net.sip.SipManager: void checkSipServiceConnection()>();

        $r2 = r0.<android.net.sip.SipManager: android.net.sip.ISipService mSipService>;

        $r1 = r0.<android.net.sip.SipManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        z0 = interfaceinvoke $r2.<android.net.sip.ISipService: boolean isRegistered(java.lang.String,java.lang.String)>(r6, $r3);

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        $r5 = new android.net.sip.SipException;

        specialinvoke $r5.<android.net.sip.SipException: void <init>(java.lang.String,java.lang.Throwable)>("isRegistered()", $r4);

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.sip.SipAudioCall makeAudioCall(android.net.sip.SipProfile, android.net.sip.SipProfile, android.net.sip.SipAudioCall$Listener, int) throws android.net.sip.SipException
    {
        android.net.sip.SipManager r0;
        android.net.sip.SipProfile r1, r2;
        android.net.sip.SipAudioCall$Listener r3;
        int i0;
        android.content.Context $r5, $r8;
        boolean $z0;
        android.net.sip.SipException $r6;
        android.net.sip.SipAudioCall $r7;
        android.net.sip.SipSession $r9;

        r0 := @this: android.net.sip.SipManager;

        r1 := @parameter0: android.net.sip.SipProfile;

        r2 := @parameter1: android.net.sip.SipProfile;

        r3 := @parameter2: android.net.sip.SipAudioCall$Listener;

        i0 := @parameter3: int;

        $r5 = r0.<android.net.sip.SipManager: android.content.Context mContext>;

        $z0 = staticinvoke <android.net.sip.SipManager: boolean isVoipSupported(android.content.Context)>($r5);

        if $z0 == 0 goto label1;

        $r7 = new android.net.sip.SipAudioCall;

        $r8 = r0.<android.net.sip.SipManager: android.content.Context mContext>;

        specialinvoke $r7.<android.net.sip.SipAudioCall: void <init>(android.content.Context,android.net.sip.SipProfile)>($r8, r1);

        virtualinvoke $r7.<android.net.sip.SipAudioCall: void setListener(android.net.sip.SipAudioCall$Listener)>(r3);

        $r9 = virtualinvoke r0.<android.net.sip.SipManager: android.net.sip.SipSession createSipSession(android.net.sip.SipProfile,android.net.sip.SipSession$Listener)>(r1, null);

        virtualinvoke $r7.<android.net.sip.SipAudioCall: void makeCall(android.net.sip.SipProfile,android.net.sip.SipSession,int)>(r2, $r9, i0);

        return $r7;

     label1:
        $r6 = new android.net.sip.SipException;

        specialinvoke $r6.<android.net.sip.SipException: void <init>(java.lang.String)>("VOIP API is not supported");

        throw $r6;
    }

    public android.net.sip.SipAudioCall makeAudioCall(java.lang.String, java.lang.String, android.net.sip.SipAudioCall$Listener, int) throws android.net.sip.SipException
    {
        android.net.sip.SipManager r0;
        java.lang.String r1, r8;
        android.net.sip.SipAudioCall$Listener r2;
        int i0;
        android.content.Context $r3;
        boolean $z0;
        android.net.sip.SipException $r4, $r7;
        android.net.sip.SipProfile $r5, r10;
        java.lang.Throwable $r6;
        android.net.sip.SipProfile$Builder r9, r11;
        android.net.sip.SipAudioCall r12;

        r0 := @this: android.net.sip.SipManager;

        r8 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.net.sip.SipAudioCall$Listener;

        i0 := @parameter3: int;

        $r3 = r0.<android.net.sip.SipManager: android.content.Context mContext>;

        $z0 = staticinvoke <android.net.sip.SipManager: boolean isVoipSupported(android.content.Context)>($r3);

        if $z0 == 0 goto label4;

     label1:
        r9 = new android.net.sip.SipProfile$Builder;

        specialinvoke r9.<android.net.sip.SipProfile$Builder: void <init>(java.lang.String)>(r8);

        r10 = virtualinvoke r9.<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile build()>();

        r11 = new android.net.sip.SipProfile$Builder;

        specialinvoke r11.<android.net.sip.SipProfile$Builder: void <init>(java.lang.String)>(r1);

        $r5 = virtualinvoke r11.<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile build()>();

        r12 = virtualinvoke r0.<android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(android.net.sip.SipProfile,android.net.sip.SipProfile,android.net.sip.SipAudioCall$Listener,int)>(r10, $r5, r2, i0);

     label2:
        return r12;

     label3:
        $r6 := @caughtexception;

        $r7 = new android.net.sip.SipException;

        specialinvoke $r7.<android.net.sip.SipException: void <init>(java.lang.String,java.lang.Throwable)>("build SipProfile", $r6);

        throw $r7;

     label4:
        $r4 = new android.net.sip.SipException;

        specialinvoke $r4.<android.net.sip.SipException: void <init>(java.lang.String)>("VOIP API is not supported");

        throw $r4;

        catch java.text.ParseException from label1 to label2 with label3;
    }

    public void open(android.net.sip.SipProfile) throws android.net.sip.SipException
    {
        android.net.sip.SipManager r0;
        android.content.Context $r1;
        android.net.sip.ISipService $r2;
        java.lang.String $r3;
        android.os.RemoteException $r4;
        android.net.sip.SipException $r5;
        android.net.sip.SipProfile r6;

        r0 := @this: android.net.sip.SipManager;

        r6 := @parameter0: android.net.sip.SipProfile;

     label1:
        specialinvoke r0.<android.net.sip.SipManager: void checkSipServiceConnection()>();

        $r2 = r0.<android.net.sip.SipManager: android.net.sip.ISipService mSipService>;

        $r1 = r0.<android.net.sip.SipManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke $r2.<android.net.sip.ISipService: void open(android.net.sip.SipProfile,java.lang.String)>(r6, $r3);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = new android.net.sip.SipException;

        specialinvoke $r5.<android.net.sip.SipException: void <init>(java.lang.String,java.lang.Throwable)>("open()", $r4);

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void open(android.net.sip.SipProfile, android.app.PendingIntent, android.net.sip.SipRegistrationListener) throws android.net.sip.SipException
    {
        android.net.sip.SipManager r0;
        android.app.PendingIntent r1;
        android.net.sip.SipRegistrationListener r2;
        java.lang.NullPointerException $r3;
        android.net.sip.ISipService $r4;
        java.lang.String $r5, $r8;
        android.net.sip.ISipSessionListener $r6;
        android.content.Context $r7;
        android.os.RemoteException $r9;
        android.net.sip.SipException $r10;
        android.net.sip.SipProfile r11;

        r0 := @this: android.net.sip.SipManager;

        r11 := @parameter0: android.net.sip.SipProfile;

        r1 := @parameter1: android.app.PendingIntent;

        r2 := @parameter2: android.net.sip.SipRegistrationListener;

        if r1 == null goto label4;

     label1:
        specialinvoke r0.<android.net.sip.SipManager: void checkSipServiceConnection()>();

        $r4 = r0.<android.net.sip.SipManager: android.net.sip.ISipService mSipService>;

        $r5 = virtualinvoke r11.<android.net.sip.SipProfile: java.lang.String getUriString()>();

        $r6 = staticinvoke <android.net.sip.SipManager: android.net.sip.ISipSessionListener createRelay(android.net.sip.SipRegistrationListener,java.lang.String)>(r2, $r5);

        $r7 = r0.<android.net.sip.SipManager: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke $r4.<android.net.sip.ISipService: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener,java.lang.String)>(r11, r1, $r6, $r8);

     label2:
        return;

     label3:
        $r9 := @caughtexception;

        $r10 = new android.net.sip.SipException;

        specialinvoke $r10.<android.net.sip.SipException: void <init>(java.lang.String,java.lang.Throwable)>("open()", $r9);

        throw $r10;

     label4:
        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("incomingCallPendingIntent cannot be null");

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void register(android.net.sip.SipProfile, int, android.net.sip.SipRegistrationListener) throws android.net.sip.SipException
    {
        android.net.sip.SipManager r0;
        int i0;
        android.net.sip.SipRegistrationListener r1;
        android.net.sip.ISipService $r2;
        java.lang.String $r3, $r6;
        android.net.sip.ISipSessionListener $r4;
        android.content.Context $r5;
        android.os.RemoteException $r7;
        android.net.sip.SipException $r8, r11;
        android.net.sip.SipProfile r9;
        android.net.sip.ISipSession r10;

        r0 := @this: android.net.sip.SipManager;

        r9 := @parameter0: android.net.sip.SipProfile;

        i0 := @parameter1: int;

        r1 := @parameter2: android.net.sip.SipRegistrationListener;

     label1:
        specialinvoke r0.<android.net.sip.SipManager: void checkSipServiceConnection()>();

        $r2 = r0.<android.net.sip.SipManager: android.net.sip.ISipService mSipService>;

        $r3 = virtualinvoke r9.<android.net.sip.SipProfile: java.lang.String getUriString()>();

        $r4 = staticinvoke <android.net.sip.SipManager: android.net.sip.ISipSessionListener createRelay(android.net.sip.SipRegistrationListener,java.lang.String)>(r1, $r3);

        $r5 = r0.<android.net.sip.SipManager: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.String getOpPackageName()>();

        r10 = interfaceinvoke $r2.<android.net.sip.ISipService: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener,java.lang.String)>(r9, $r4, $r6);

     label2:
        if r10 == null goto label5;

     label3:
        interfaceinvoke r10.<android.net.sip.ISipSession: void register(int)>(i0);

     label4:
        return;

     label5:
        r11 = new android.net.sip.SipException;

        specialinvoke r11.<android.net.sip.SipException: void <init>(java.lang.String)>("SipService.createSession() returns null");

        throw r11;

     label6:
        $r7 := @caughtexception;

        $r8 = new android.net.sip.SipException;

        specialinvoke $r8.<android.net.sip.SipException: void <init>(java.lang.String,java.lang.Throwable)>("register()", $r7);

        throw $r8;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch android.os.RemoteException from label5 to label6 with label6;
    }

    public void setRegistrationListener(java.lang.String, android.net.sip.SipRegistrationListener) throws android.net.sip.SipException
    {
        android.net.sip.SipManager r0;
        android.net.sip.SipRegistrationListener r1;
        android.net.sip.ISipService $r2;
        android.net.sip.ISipSessionListener $r3;
        android.content.Context $r4;
        java.lang.String $r5, r8;
        android.os.RemoteException $r6;
        android.net.sip.SipException $r7;

        r0 := @this: android.net.sip.SipManager;

        r8 := @parameter0: java.lang.String;

        r1 := @parameter1: android.net.sip.SipRegistrationListener;

     label1:
        specialinvoke r0.<android.net.sip.SipManager: void checkSipServiceConnection()>();

        $r2 = r0.<android.net.sip.SipManager: android.net.sip.ISipService mSipService>;

        $r3 = staticinvoke <android.net.sip.SipManager: android.net.sip.ISipSessionListener createRelay(android.net.sip.SipRegistrationListener,java.lang.String)>(r1, r8);

        $r4 = r0.<android.net.sip.SipManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke $r2.<android.net.sip.ISipService: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener,java.lang.String)>(r8, $r3, $r5);

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        $r7 = new android.net.sip.SipException;

        specialinvoke $r7.<android.net.sip.SipException: void <init>(java.lang.String,java.lang.Throwable)>("setRegistrationListener()", $r6);

        throw $r7;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.sip.SipAudioCall takeAudioCall(android.content.Intent, android.net.sip.SipAudioCall$Listener) throws android.net.sip.SipException
    {
        android.net.sip.SipManager r0;
        android.net.sip.SipAudioCall$Listener r1;
        android.net.sip.ISipSession r2;
        android.net.sip.SipSession r3;
        android.net.sip.SipException $r4, $r5, $r6, $r13, r18;
        android.content.Context $r7, $r10;
        android.net.sip.ISipService $r8;
        java.lang.String $r9, r15, r16;
        android.net.sip.SipProfile $r11;
        java.lang.Throwable $r12;
        android.content.Intent r14;
        android.net.sip.SipAudioCall r17;

        r0 := @this: android.net.sip.SipManager;

        r14 := @parameter0: android.content.Intent;

        r1 := @parameter1: android.net.sip.SipAudioCall$Listener;

        if r14 == null goto label9;

        r15 = staticinvoke <android.net.sip.SipManager: java.lang.String getCallId(android.content.Intent)>(r14);

        if r15 == null goto label8;

        r16 = staticinvoke <android.net.sip.SipManager: java.lang.String getOfferSessionDescription(android.content.Intent)>(r14);

        if r16 == null goto label7;

     label1:
        specialinvoke r0.<android.net.sip.SipManager: void checkSipServiceConnection()>();

        $r8 = r0.<android.net.sip.SipManager: android.net.sip.ISipService mSipService>;

        $r7 = r0.<android.net.sip.SipManager: android.content.Context mContext>;

        $r9 = virtualinvoke $r7.<android.content.Context: java.lang.String getOpPackageName()>();

        r2 = interfaceinvoke $r8.<android.net.sip.ISipService: android.net.sip.ISipSession getPendingSession(java.lang.String,java.lang.String)>(r15, $r9);

     label2:
        if r2 == null goto label5;

     label3:
        r17 = new android.net.sip.SipAudioCall;

        $r10 = r0.<android.net.sip.SipManager: android.content.Context mContext>;

        $r11 = interfaceinvoke r2.<android.net.sip.ISipSession: android.net.sip.SipProfile getLocalProfile()>();

        specialinvoke r17.<android.net.sip.SipAudioCall: void <init>(android.content.Context,android.net.sip.SipProfile)>($r10, $r11);

        r3 = new android.net.sip.SipSession;

        specialinvoke r3.<android.net.sip.SipSession: void <init>(android.net.sip.ISipSession)>(r2);

        virtualinvoke r17.<android.net.sip.SipAudioCall: void attachCall(android.net.sip.SipSession,java.lang.String)>(r3, r16);

        virtualinvoke r17.<android.net.sip.SipAudioCall: void setListener(android.net.sip.SipAudioCall$Listener)>(r1);

     label4:
        return r17;

     label5:
        r18 = new android.net.sip.SipException;

        specialinvoke r18.<android.net.sip.SipException: void <init>(java.lang.String)>("No pending session for the call");

        throw r18;

     label6:
        $r12 := @caughtexception;

        $r13 = new android.net.sip.SipException;

        specialinvoke $r13.<android.net.sip.SipException: void <init>(java.lang.String,java.lang.Throwable)>("takeAudioCall()", $r12);

        throw $r13;

     label7:
        $r6 = new android.net.sip.SipException;

        specialinvoke $r6.<android.net.sip.SipException: void <init>(java.lang.String)>("Session description missing in incoming call intent");

        throw $r6;

     label8:
        $r5 = new android.net.sip.SipException;

        specialinvoke $r5.<android.net.sip.SipException: void <init>(java.lang.String)>("Call ID missing in incoming call intent");

        throw $r5;

     label9:
        $r4 = new android.net.sip.SipException;

        specialinvoke $r4.<android.net.sip.SipException: void <init>(java.lang.String)>("Cannot retrieve session with null intent");

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
    }

    public void unregister(android.net.sip.SipProfile, android.net.sip.SipRegistrationListener) throws android.net.sip.SipException
    {
        android.net.sip.SipManager r0;
        android.net.sip.SipRegistrationListener r1;
        android.net.sip.ISipService $r2;
        java.lang.String $r3, $r6;
        android.net.sip.ISipSessionListener $r4;
        android.content.Context $r5;
        android.os.RemoteException $r7;
        android.net.sip.SipException $r8, r11;
        android.net.sip.SipProfile r9;
        android.net.sip.ISipSession r10;

        r0 := @this: android.net.sip.SipManager;

        r9 := @parameter0: android.net.sip.SipProfile;

        r1 := @parameter1: android.net.sip.SipRegistrationListener;

     label1:
        specialinvoke r0.<android.net.sip.SipManager: void checkSipServiceConnection()>();

        $r2 = r0.<android.net.sip.SipManager: android.net.sip.ISipService mSipService>;

        $r3 = virtualinvoke r9.<android.net.sip.SipProfile: java.lang.String getUriString()>();

        $r4 = staticinvoke <android.net.sip.SipManager: android.net.sip.ISipSessionListener createRelay(android.net.sip.SipRegistrationListener,java.lang.String)>(r1, $r3);

        $r5 = r0.<android.net.sip.SipManager: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.String getOpPackageName()>();

        r10 = interfaceinvoke $r2.<android.net.sip.ISipService: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener,java.lang.String)>(r9, $r4, $r6);

     label2:
        if r10 == null goto label5;

     label3:
        interfaceinvoke r10.<android.net.sip.ISipSession: void unregister()>();

     label4:
        return;

     label5:
        r11 = new android.net.sip.SipException;

        specialinvoke r11.<android.net.sip.SipException: void <init>(java.lang.String)>("SipService.createSession() returns null");

        throw r11;

     label6:
        $r7 := @caughtexception;

        $r8 = new android.net.sip.SipException;

        specialinvoke $r8.<android.net.sip.SipException: void <init>(java.lang.String,java.lang.Throwable)>("unregister()", $r7);

        throw $r8;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch android.os.RemoteException from label5 to label6 with label6;
    }

    public static void <clinit>()
    {
        <android.net.sip.SipManager: java.lang.String TAG> = "SipManager";

        <android.net.sip.SipManager: int INCOMING_CALL_RESULT_CODE> = 101;

        <android.net.sip.SipManager: java.lang.String EXTRA_OFFER_SD> = "android:sipOfferSD";

        <android.net.sip.SipManager: java.lang.String EXTRA_LOCAL_URI> = "android:localSipUri";

        <android.net.sip.SipManager: java.lang.String EXTRA_CALL_ID> = "android:sipCallID";

        <android.net.sip.SipManager: java.lang.String ACTION_START_SIP> = "android.net.sip.action.START_SIP";

        <android.net.sip.SipManager: java.lang.String ACTION_SIP_SERVICE_UP> = "android.net.sip.action.SIP_SERVICE_UP";

        <android.net.sip.SipManager: java.lang.String ACTION_SIP_REMOVE_PROFILE> = "android.net.sip.action.SIP_REMOVE_PROFILE";

        <android.net.sip.SipManager: java.lang.String ACTION_SIP_INCOMING_CALL> = "android.net.sip.action.SIP_INCOMING_CALL";

        <android.net.sip.SipManager: java.lang.String ACTION_SIP_CALL_OPTION_CHANGED> = "android.net.sip.action.SIP_CALL_OPTION_CHANGED";

        <android.net.sip.SipManager: java.lang.String ACTION_SIP_ADD_PHONE> = "com.android.phone.SIP_ADD_PHONE";

        return;
    }
}
