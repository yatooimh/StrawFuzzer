public class android.net.util.DnsUtils extends java.lang.Object
{
    private static final int CHAR_BIT;
    public static final int IPV6_ADDR_SCOPE_GLOBAL;
    public static final int IPV6_ADDR_SCOPE_LINKLOCAL;
    public static final int IPV6_ADDR_SCOPE_NODELOCAL;
    public static final int IPV6_ADDR_SCOPE_SITELOCAL;
    private static final java.lang.String TAG;
    private static final java.util.Comparator sRfc6724Comparator;

    static void <clinit>()
    {
        android.net.util.DnsUtils$Rfc6724Comparator $r0;

        <android.net.util.DnsUtils: java.lang.String TAG> = "DnsUtils";

        <android.net.util.DnsUtils: int IPV6_ADDR_SCOPE_SITELOCAL> = 5;

        <android.net.util.DnsUtils: int IPV6_ADDR_SCOPE_NODELOCAL> = 1;

        <android.net.util.DnsUtils: int IPV6_ADDR_SCOPE_LINKLOCAL> = 2;

        <android.net.util.DnsUtils: int IPV6_ADDR_SCOPE_GLOBAL> = 14;

        <android.net.util.DnsUtils: int CHAR_BIT> = 8;

        $r0 = new android.net.util.DnsUtils$Rfc6724Comparator;

        specialinvoke $r0.<android.net.util.DnsUtils$Rfc6724Comparator: void <init>()>();

        <android.net.util.DnsUtils: java.util.Comparator sRfc6724Comparator> = $r0;

        return;
    }

    public void <init>()
    {
        android.net.util.DnsUtils r0;

        r0 := @this: android.net.util.DnsUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static int access$000(java.net.InetAddress)
    {
        java.net.InetAddress r0;
        int $i0;

        r0 := @parameter0: java.net.InetAddress;

        $i0 = staticinvoke <android.net.util.DnsUtils: int findLabel(java.net.InetAddress)>(r0);

        return $i0;
    }

    static int access$100(java.net.InetAddress)
    {
        java.net.InetAddress r0;
        int $i0;

        r0 := @parameter0: java.net.InetAddress;

        $i0 = staticinvoke <android.net.util.DnsUtils: int findScope(java.net.InetAddress)>(r0);

        return $i0;
    }

    static int access$200(java.net.InetAddress)
    {
        java.net.InetAddress r0;
        int $i0;

        r0 := @parameter0: java.net.InetAddress;

        $i0 = staticinvoke <android.net.util.DnsUtils: int findPrecedence(java.net.InetAddress)>(r0);

        return $i0;
    }

    static boolean access$300(java.net.InetAddress)
    {
        java.net.InetAddress r0;
        boolean $z0;

        r0 := @parameter0: java.net.InetAddress;

        $z0 = staticinvoke <android.net.util.DnsUtils: boolean isIpv6Address(java.net.InetAddress)>(r0);

        return $z0;
    }

    static int access$400(java.net.InetAddress, java.net.InetAddress)
    {
        java.net.InetAddress r0, r1;
        int $i0;

        r0 := @parameter0: java.net.InetAddress;

        r1 := @parameter1: java.net.InetAddress;

        $i0 = staticinvoke <android.net.util.DnsUtils: int compareIpv6PrefixMatchLen(java.net.InetAddress,java.net.InetAddress)>(r0, r1);

        return $i0;
    }

    private static boolean checkConnectivity(android.net.Network, int, java.net.SocketAddress)
    {
        int i0, $i1, $i2;
        java.net.SocketAddress r0;
        java.io.FileDescriptor r1;
        java.lang.Throwable $r2, $r3, $r4;
        android.net.Network r5;

        r5 := @parameter0: android.net.Network;

        i0 := @parameter1: int;

        r0 := @parameter2: java.net.SocketAddress;

     label1:
        $i2 = <android.system.OsConstants: int SOCK_DGRAM>;

        $i1 = <android.system.OsConstants: int IPPROTO_UDP>;

        r1 = staticinvoke <android.system.Os: java.io.FileDescriptor socket(int,int,int)>(i0, $i2, $i1);

     label2:
        if r5 == null goto label4;

     label3:
        virtualinvoke r5.<android.net.Network: void bindSocket(java.io.FileDescriptor)>(r1);

     label4:
        staticinvoke <android.system.Os: void connect(java.io.FileDescriptor,java.net.SocketAddress)>(r1, r0);

     label5:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.io.FileDescriptor)>(r1);

        return 1;

     label6:
        $r2 := @caughtexception;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.io.FileDescriptor)>(r1);

        throw $r2;

     label7:
        $r4 := @caughtexception;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.io.FileDescriptor)>(r1);

        return 0;

     label8:
        $r3 := @caughtexception;

        return 0;

        catch android.system.ErrnoException from label1 to label2 with label8;
        catch java.io.IOException from label3 to label4 with label7;
        catch android.system.ErrnoException from label3 to label4 with label7;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.io.IOException from label4 to label5 with label7;
        catch android.system.ErrnoException from label4 to label5 with label7;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    private static int compareIpv6PrefixMatchLen(java.net.InetAddress, java.net.InetAddress)
    {
        int $i0, $i1, $i2, $i3, $i4, $i8, $i9, $i11, $i12, $i13, $i14, $i15, i16;
        byte $b5, $b6, $b7, $b10;
        java.net.InetAddress r0, r1;
        byte[] r2, r3;

        r0 := @parameter0: java.net.InetAddress;

        r1 := @parameter1: java.net.InetAddress;

        r2 = virtualinvoke r0.<java.net.InetAddress: byte[] getAddress()>();

        r3 = virtualinvoke r1.<java.net.InetAddress: byte[] getAddress()>();

        $i1 = lengthof r2;

        $i0 = lengthof r3;

        if $i1 == $i0 goto label1;

        return 0;

     label1:
        i16 = 0;

     label2:
        $i2 = lengthof r3;

        if i16 >= $i2 goto label4;

        $b6 = r2[i16];

        $b5 = r3[i16];

        if $b6 != $b5 goto label3;

        i16 = i16 + 1;

        goto label2;

     label3:
        $i8 = i16 * 8;

        $b7 = r2[i16];

        $i9 = staticinvoke <com.android.internal.util.BitUtils: int uint8(byte)>($b7);

        $b10 = r3[i16];

        $i11 = staticinvoke <com.android.internal.util.BitUtils: int uint8(byte)>($b10);

        $i12 = $i9 ^ $i11;

        $i13 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i12);

        $i14 = $i13 - 24;

        $i15 = $i8 + $i14;

        return $i15;

     label4:
        $i3 = lengthof r3;

        $i4 = $i3 * 8;

        return $i4;
    }

    private static int findLabel(java.net.InetAddress)
    {
        java.net.InetAddress r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.net.Inet6Address $r1;

        r0 := @parameter0: java.net.InetAddress;

        $z0 = staticinvoke <android.net.util.DnsUtils: boolean isIpv4Address(java.net.InetAddress)>(r0);

        if $z0 == 0 goto label1;

        return 4;

     label1:
        $z1 = staticinvoke <android.net.util.DnsUtils: boolean isIpv6Address(java.net.InetAddress)>(r0);

        if $z1 == 0 goto label9;

        $z2 = virtualinvoke r0.<java.net.InetAddress: boolean isLoopbackAddress()>();

        if $z2 == 0 goto label2;

        return 0;

     label2:
        $z3 = staticinvoke <android.net.util.DnsUtils: boolean isIpv6Address6To4(java.net.InetAddress)>(r0);

        if $z3 == 0 goto label3;

        return 2;

     label3:
        $z4 = staticinvoke <android.net.util.DnsUtils: boolean isIpv6AddressTeredo(java.net.InetAddress)>(r0);

        if $z4 == 0 goto label4;

        return 5;

     label4:
        $z5 = staticinvoke <android.net.util.DnsUtils: boolean isIpv6AddressULA(java.net.InetAddress)>(r0);

        if $z5 == 0 goto label5;

        return 13;

     label5:
        $r1 = (java.net.Inet6Address) r0;

        $z6 = virtualinvoke $r1.<java.net.Inet6Address: boolean isIPv4CompatibleAddress()>();

        if $z6 == 0 goto label6;

        return 3;

     label6:
        $z7 = virtualinvoke r0.<java.net.InetAddress: boolean isSiteLocalAddress()>();

        if $z7 == 0 goto label7;

        return 11;

     label7:
        $z8 = staticinvoke <android.net.util.DnsUtils: boolean isIpv6Address6Bone(java.net.InetAddress)>(r0);

        if $z8 == 0 goto label8;

        return 12;

     label8:
        return 1;

     label9:
        return 1;
    }

    private static int findPrecedence(java.net.InetAddress)
    {
        java.net.InetAddress r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.net.Inet6Address $r1;

        r0 := @parameter0: java.net.InetAddress;

        $z0 = staticinvoke <android.net.util.DnsUtils: boolean isIpv4Address(java.net.InetAddress)>(r0);

        if $z0 == 0 goto label1;

        return 35;

     label1:
        $z1 = staticinvoke <android.net.util.DnsUtils: boolean isIpv6Address(java.net.InetAddress)>(r0);

        if $z1 == 0 goto label8;

        $z2 = virtualinvoke r0.<java.net.InetAddress: boolean isLoopbackAddress()>();

        if $z2 == 0 goto label2;

        return 50;

     label2:
        $z3 = staticinvoke <android.net.util.DnsUtils: boolean isIpv6Address6To4(java.net.InetAddress)>(r0);

        if $z3 == 0 goto label3;

        return 30;

     label3:
        $z4 = staticinvoke <android.net.util.DnsUtils: boolean isIpv6AddressTeredo(java.net.InetAddress)>(r0);

        if $z4 == 0 goto label4;

        return 5;

     label4:
        $z5 = staticinvoke <android.net.util.DnsUtils: boolean isIpv6AddressULA(java.net.InetAddress)>(r0);

        if $z5 == 0 goto label5;

        return 3;

     label5:
        $r1 = (java.net.Inet6Address) r0;

        $z6 = virtualinvoke $r1.<java.net.Inet6Address: boolean isIPv4CompatibleAddress()>();

        if $z6 != 0 goto label7;

        $z7 = virtualinvoke r0.<java.net.InetAddress: boolean isSiteLocalAddress()>();

        if $z7 != 0 goto label7;

        $z8 = staticinvoke <android.net.util.DnsUtils: boolean isIpv6Address6Bone(java.net.InetAddress)>(r0);

        if $z8 == 0 goto label6;

        goto label7;

     label6:
        return 40;

     label7:
        return 1;

     label8:
        return 1;
    }

    private static int findScope(java.net.InetAddress)
    {
        java.net.InetAddress r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        int $i0;

        r0 := @parameter0: java.net.InetAddress;

        $z0 = staticinvoke <android.net.util.DnsUtils: boolean isIpv6Address(java.net.InetAddress)>(r0);

        if $z0 == 0 goto label5;

        $z4 = virtualinvoke r0.<java.net.InetAddress: boolean isMulticastAddress()>();

        if $z4 == 0 goto label1;

        $i0 = staticinvoke <android.net.util.DnsUtils: int getIpv6MulticastScope(java.net.InetAddress)>(r0);

        return $i0;

     label1:
        $z5 = virtualinvoke r0.<java.net.InetAddress: boolean isLoopbackAddress()>();

        if $z5 != 0 goto label4;

        $z6 = virtualinvoke r0.<java.net.InetAddress: boolean isLinkLocalAddress()>();

        if $z6 == 0 goto label2;

        goto label4;

     label2:
        $z7 = virtualinvoke r0.<java.net.InetAddress: boolean isSiteLocalAddress()>();

        if $z7 == 0 goto label3;

        return 5;

     label3:
        return 14;

     label4:
        return 2;

     label5:
        $z1 = staticinvoke <android.net.util.DnsUtils: boolean isIpv4Address(java.net.InetAddress)>(r0);

        if $z1 == 0 goto label8;

        $z2 = virtualinvoke r0.<java.net.InetAddress: boolean isLoopbackAddress()>();

        if $z2 != 0 goto label7;

        $z3 = virtualinvoke r0.<java.net.InetAddress: boolean isLinkLocalAddress()>();

        if $z3 == 0 goto label6;

        goto label7;

     label6:
        return 14;

     label7:
        return 2;

     label8:
        return 1;
    }

    private static java.net.InetAddress findSrcAddress(android.net.Network, java.net.InetAddress)
    {
        java.io.FileDescriptor r0;
        boolean $z0, $z1;
        int $i0, $i1, i3;
        java.net.SocketAddress $r1;
        java.net.InetSocketAddress $r2, r19;
        java.lang.Throwable $r3, $r4, $r10;
        java.lang.String $r7, $r9;
        android.net.Network r11;
        java.net.InetAddress r12, r14;
        java.lang.StringBuilder r20;
        android.system.ErrnoException r21;

        r11 := @parameter0: android.net.Network;

        r12 := @parameter1: java.net.InetAddress;

        $z0 = staticinvoke <android.net.util.DnsUtils: boolean isIpv4Address(java.net.InetAddress)>(r12);

        if $z0 == 0 goto label01;

        i3 = <android.system.OsConstants: int AF_INET>;

        goto label02;

     label01:
        $z1 = staticinvoke <android.net.util.DnsUtils: boolean isIpv6Address(java.net.InetAddress)>(r12);

        if $z1 == 0 goto label10;

        i3 = <android.system.OsConstants: int AF_INET6>;

     label02:
        $i1 = <android.system.OsConstants: int SOCK_DGRAM>;

        $i0 = <android.system.OsConstants: int IPPROTO_UDP>;

        r0 = staticinvoke <android.system.Os: java.io.FileDescriptor socket(int,int,int)>(i3, $i1, $i0);

     label03:
        if r11 == null goto label05;

     label04:
        virtualinvoke r11.<android.net.Network: void bindSocket(java.io.FileDescriptor)>(r0);

     label05:
        r19 = new java.net.InetSocketAddress;

        specialinvoke r19.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>(r12, 0);

        staticinvoke <android.system.Os: void connect(java.io.FileDescriptor,java.net.SocketAddress)>(r0, r19);

        $r1 = staticinvoke <android.system.Os: java.net.SocketAddress getsockname(java.io.FileDescriptor)>(r0);

        $r2 = (java.net.InetSocketAddress) $r1;

        r14 = virtualinvoke $r2.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

     label06:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.io.FileDescriptor)>(r0);

        return r14;

     label07:
        $r10 := @caughtexception;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.io.FileDescriptor)>(r0);

        throw $r10;

     label08:
        $r3 := @caughtexception;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.io.FileDescriptor)>(r0);

        return null;

     label09:
        $r4 := @caughtexception;

        r20 = new java.lang.StringBuilder;

        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("findSrcAddress:");

        r21 = (android.system.ErrnoException) $r4;

        $r7 = virtualinvoke r21.<android.system.ErrnoException: java.lang.String toString()>();

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("DnsUtils", $r9);

        return null;

     label10:
        return null;

        catch android.system.ErrnoException from label02 to label03 with label09;
        catch java.io.IOException from label04 to label05 with label08;
        catch android.system.ErrnoException from label04 to label05 with label08;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.io.IOException from label05 to label06 with label08;
        catch android.system.ErrnoException from label05 to label06 with label08;
        catch java.lang.Throwable from label05 to label06 with label07;
    }

    private static int getIpv6MulticastScope(java.net.InetAddress)
    {
        java.net.InetAddress r0;
        boolean $z0;
        byte[] $r1;
        byte $b0, b1;

        r0 := @parameter0: java.net.InetAddress;

        $z0 = staticinvoke <android.net.util.DnsUtils: boolean isIpv6Address(java.net.InetAddress)>(r0);

        if $z0 != 0 goto label1;

        b1 = 0;

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<java.net.InetAddress: byte[] getAddress()>();

        $b0 = $r1[1];

        b1 = $b0 & 15;

     label2:
        return b1;
    }

    public static boolean haveIpv4(android.net.Network)
    {
        android.net.Network r0;
        java.net.InetSocketAddress $r2;
        java.net.InetAddress $r3;
        int $i0;
        boolean $z0;

        r0 := @parameter0: android.net.Network;

        $r2 = new java.net.InetSocketAddress;

        $r3 = staticinvoke <android.net.InetAddresses: java.net.InetAddress parseNumericAddress(java.lang.String)>("8.8.8.8");

        specialinvoke $r2.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r3, 0);

        $i0 = <android.system.OsConstants: int AF_INET>;

        $z0 = staticinvoke <android.net.util.DnsUtils: boolean checkConnectivity(android.net.Network,int,java.net.SocketAddress)>(r0, $i0, $r2);

        return $z0;
    }

    public static boolean haveIpv6(android.net.Network)
    {
        android.net.Network r0;
        java.net.InetSocketAddress $r2;
        java.net.InetAddress $r3;
        int $i0;
        boolean $z0;

        r0 := @parameter0: android.net.Network;

        $r2 = new java.net.InetSocketAddress;

        $r3 = staticinvoke <android.net.InetAddresses: java.net.InetAddress parseNumericAddress(java.lang.String)>("2000::");

        specialinvoke $r2.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r3, 0);

        $i0 = <android.system.OsConstants: int AF_INET6>;

        $z0 = staticinvoke <android.net.util.DnsUtils: boolean checkConnectivity(android.net.Network,int,java.net.SocketAddress)>(r0, $i0, $r2);

        return $z0;
    }

    private static boolean isIpv4Address(java.net.InetAddress)
    {
        java.net.InetAddress r0;
        boolean $z0;

        r0 := @parameter0: java.net.InetAddress;

        $z0 = r0 instanceof java.net.Inet4Address;

        return $z0;
    }

    private static boolean isIpv6Address(java.net.InetAddress)
    {
        java.net.InetAddress r0;
        boolean $z0;

        r0 := @parameter0: java.net.InetAddress;

        $z0 = r0 instanceof java.net.Inet6Address;

        return $z0;
    }

    private static boolean isIpv6Address6Bone(java.net.InetAddress)
    {
        byte $b0, $b1;
        java.net.InetAddress r0;
        boolean z1, z2;
        byte[] r1;

        r0 := @parameter0: java.net.InetAddress;

        z1 = staticinvoke <android.net.util.DnsUtils: boolean isIpv6Address(java.net.InetAddress)>(r0);

        if z1 != 0 goto label1;

        return 0;

     label1:
        r1 = virtualinvoke r0.<java.net.InetAddress: byte[] getAddress()>();

        z2 = 0;

        $b0 = r1[0];

        if $b0 != 63 goto label2;

        z2 = 0;

        $b1 = r1[1];

        if $b1 != -2 goto label2;

        z2 = 1;

     label2:
        return z2;
    }

    private static boolean isIpv6Address6To4(java.net.InetAddress)
    {
        byte $b0, $b1;
        java.net.InetAddress r0;
        boolean z1, z2;
        byte[] r1;

        r0 := @parameter0: java.net.InetAddress;

        z1 = staticinvoke <android.net.util.DnsUtils: boolean isIpv6Address(java.net.InetAddress)>(r0);

        if z1 != 0 goto label1;

        return 0;

     label1:
        r1 = virtualinvoke r0.<java.net.InetAddress: byte[] getAddress()>();

        z2 = 0;

        $b0 = r1[0];

        if $b0 != 32 goto label2;

        z2 = 0;

        $b1 = r1[1];

        if $b1 != 2 goto label2;

        z2 = 1;

     label2:
        return z2;
    }

    private static boolean isIpv6AddressTeredo(java.net.InetAddress)
    {
        byte $b0, $b1, $b2, $b3;
        java.net.InetAddress r0;
        boolean z1, z2;
        byte[] r1;

        r0 := @parameter0: java.net.InetAddress;

        z1 = staticinvoke <android.net.util.DnsUtils: boolean isIpv6Address(java.net.InetAddress)>(r0);

        if z1 != 0 goto label1;

        return 0;

     label1:
        r1 = virtualinvoke r0.<java.net.InetAddress: byte[] getAddress()>();

        z2 = 0;

        $b0 = r1[0];

        if $b0 != 32 goto label2;

        z2 = 0;

        $b1 = r1[1];

        if $b1 != 1 goto label2;

        z2 = 0;

        $b2 = r1[2];

        if $b2 != 0 goto label2;

        z2 = 0;

        $b3 = r1[3];

        if $b3 != 0 goto label2;

        z2 = 1;

     label2:
        return z2;
    }

    private static boolean isIpv6AddressULA(java.net.InetAddress)
    {
        java.net.InetAddress r0;
        boolean z0, z2;
        byte[] $r1;
        byte $b0;
        short $s1;

        r0 := @parameter0: java.net.InetAddress;

        z0 = staticinvoke <android.net.util.DnsUtils: boolean isIpv6Address(java.net.InetAddress)>(r0);

        z2 = 0;

        if z0 == 0 goto label1;

        z2 = 0;

        $r1 = virtualinvoke r0.<java.net.InetAddress: byte[] getAddress()>();

        $b0 = $r1[0];

        $s1 = $b0 & 254;

        if $s1 != 252 goto label1;

        z2 = 1;

     label1:
        return z2;
    }

    public static java.util.List rfc6724Sort(android.net.Network, java.util.List)
    {
        java.net.InetAddress r1, $r7, $r10;
        java.util.ArrayList $r2, $r4;
        boolean $z0, $z1;
        java.util.Comparator $r3;
        java.lang.Object $r5, $r8;
        android.net.util.DnsUtils$SortableAddress $r6, $r9;
        android.net.Network r11;
        java.util.List r12;
        java.util.Iterator r13, r15;

        r11 := @parameter0: android.net.Network;

        r12 := @parameter1: java.util.List;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r13 = interfaceinvoke r12.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        r1 = (java.net.InetAddress) $r8;

        $r9 = new android.net.util.DnsUtils$SortableAddress;

        $r10 = staticinvoke <android.net.util.DnsUtils: java.net.InetAddress findSrcAddress(android.net.Network,java.net.InetAddress)>(r11, r1);

        specialinvoke $r9.<android.net.util.DnsUtils$SortableAddress: void <init>(java.net.InetAddress,java.net.InetAddress)>(r1, $r10);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r9);

        goto label1;

     label2:
        $r3 = <android.net.util.DnsUtils: java.util.Comparator sRfc6724Comparator>;

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r2, $r3);

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r15 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r5 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (android.net.util.DnsUtils$SortableAddress) $r5;

        $r7 = $r6.<android.net.util.DnsUtils$SortableAddress: java.net.InetAddress address>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label3;

     label4:
        return $r4;
    }
}
