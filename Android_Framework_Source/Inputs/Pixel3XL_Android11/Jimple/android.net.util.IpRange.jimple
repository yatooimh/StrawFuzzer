public final class android.net.util.IpRange extends java.lang.Object
{
    private static final int SIGNUM_POSITIVE;
    private final byte[] mEndAddr;
    private final byte[] mStartAddr;

    public void <init>(android.net.IpPrefix)
    {
        android.net.util.IpRange r0;
        int i0, $i1, $i2, $i3, i10;
        byte[] $r2, $r3, r5;
        short $s4;
        byte $b5, $b6, $b7, $b8, $b9;
        android.net.IpPrefix r4;

        r0 := @this: android.net.util.IpRange;

        r4 := @parameter0: android.net.IpPrefix;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r4, "prefix must not be null");

        $r2 = virtualinvoke r4.<android.net.IpPrefix: byte[] getRawAddress()>();

        r0.<android.net.util.IpRange: byte[] mStartAddr> = $r2;

        $r3 = virtualinvoke r4.<android.net.IpPrefix: byte[] getRawAddress()>();

        r0.<android.net.util.IpRange: byte[] mEndAddr> = $r3;

        i10 = virtualinvoke r4.<android.net.IpPrefix: int getPrefixLength()>();

     label1:
        r5 = r0.<android.net.util.IpRange: byte[] mEndAddr>;

        $i1 = lengthof r5;

        $i2 = $i1 * 8;

        if i10 >= $i2 goto label2;

        i0 = i10 / 8;

        $b6 = r5[i0];

        $i3 = i10 % 8;

        $s4 = 128 >> $i3;

        $b5 = (byte) $s4;

        $b7 = $b6 | $b5;

        $b8 = (byte) $b7;

        $b9 = (byte) $b8;

        r5[i0] = $b9;

        i10 = i10 + 1;

        goto label1;

     label2:
        return;
    }

    public void <init>(java.net.InetAddress, java.net.InetAddress)
    {
        android.net.util.IpRange r0;
        java.net.InetAddress r1, r2;
        java.lang.Class $r5, $r6;
        boolean $z0;
        java.lang.IllegalArgumentException $r7, $r12;
        byte[] $r8, $r10, $r13, $r14;
        java.math.BigInteger $r9, $r11;
        int $i0;

        r0 := @this: android.net.util.IpRange;

        r1 := @parameter0: java.net.InetAddress;

        r2 := @parameter1: java.net.InetAddress;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "startAddr must not be null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r2, "endAddr must not be null");

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label2;

        $r8 = virtualinvoke r1.<java.net.InetAddress: byte[] getAddress()>();

        $r9 = staticinvoke <android.net.util.IpRange: java.math.BigInteger addrToBigInteger(byte[])>($r8);

        $r10 = virtualinvoke r2.<java.net.InetAddress: byte[] getAddress()>();

        $r11 = staticinvoke <android.net.util.IpRange: java.math.BigInteger addrToBigInteger(byte[])>($r10);

        $i0 = virtualinvoke $r9.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r11);

        if $i0 >= 0 goto label1;

        $r13 = virtualinvoke r1.<java.net.InetAddress: byte[] getAddress()>();

        r0.<android.net.util.IpRange: byte[] mStartAddr> = $r13;

        $r14 = virtualinvoke r2.<java.net.InetAddress: byte[] getAddress()>();

        r0.<android.net.util.IpRange: byte[] mEndAddr> = $r14;

        return;

     label1:
        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid range; start address must be before end address");

        throw $r12;

     label2:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid range: Address family mismatch");

        throw $r7;
    }

    private static java.math.BigInteger addrToBigInteger(byte[])
    {
        byte[] r0;
        java.math.BigInteger $r1;

        r0 := @parameter0: byte[];

        $r1 = new java.math.BigInteger;

        specialinvoke $r1.<java.math.BigInteger: void <init>(int,byte[])>(1, r0);

        return $r1;
    }

    private static java.net.InetAddress getAsInetAddress(byte[])
    {
        java.lang.Throwable $r0;
        java.lang.IllegalArgumentException $r1;
        byte[] r2;
        java.net.InetAddress r3;

        r2 := @parameter0: byte[];

     label1:
        r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>(r2);

     label2:
        return r3;

     label3:
        $r0 := @caughtexception;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Address is invalid");

        throw $r1;

        catch java.net.UnknownHostException from label1 to label2 with label3;
    }

    private static java.util.List getSubsetPrefixes(android.net.IpPrefix)
    {
        int i0, $i1, $i2, $i3, $i9, $i10;
        java.util.ArrayList $r1;
        android.net.IpPrefix $r2, $r4, r6;
        java.net.InetAddress $r3, $r5;
        short $s4, $s6;
        byte $b5, $b7, $b8;
        byte[] r7;

        r6 := @parameter0: android.net.IpPrefix;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        i0 = virtualinvoke r6.<android.net.IpPrefix: int getPrefixLength()>();

        $r2 = new android.net.IpPrefix;

        $r3 = virtualinvoke r6.<android.net.IpPrefix: java.net.InetAddress getAddress()>();

        $i1 = i0 + 1;

        specialinvoke $r2.<android.net.IpPrefix: void <init>(java.net.InetAddress,int)>($r3, $i1);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        r7 = virtualinvoke r6.<android.net.IpPrefix: byte[] getRawAddress()>();

        $i9 = i0 / 8;

        $i2 = i0 / 8;

        $b5 = r7[$i2];

        $i3 = i0 % 8;

        $s4 = 128 >> $i3;

        $s6 = $b5 ^ $s4;

        $b7 = (byte) $s6;

        $b8 = (byte) $b7;

        r7[$i9] = $b8;

        $r4 = new android.net.IpPrefix;

        $r5 = staticinvoke <android.net.util.IpRange: java.net.InetAddress getAsInetAddress(byte[])>(r7);

        $i10 = i0 + 1;

        specialinvoke $r4.<android.net.IpPrefix: void <init>(java.net.InetAddress,int)>($r5, $i10);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r4);

        return $r1;
    }

    public java.util.List asIpPrefixes()
    {
        android.net.util.IpRange r0, $r10;
        android.net.IpPrefix r3, $r8;
        byte[] $r4, $r7, $r12;
        int $i0;
        java.util.ArrayList $r5;
        java.util.LinkedList $r6;
        java.lang.Object $r9;
        boolean $z1, $z2, z5, $z6;
        java.util.List $r11;
        java.net.InetAddress r13;

        r0 := @this: android.net.util.IpRange;

        $r4 = r0.<android.net.util.IpRange: byte[] mStartAddr>;

        $i0 = lengthof $r4;

        if $i0 != 16 goto label1;

        z5 = 1;

        goto label2;

     label1:
        z5 = 0;

     label2:
        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = new java.util.LinkedList;

        specialinvoke $r6.<java.util.LinkedList: void <init>()>();

        if z5 == 0 goto label3;

        $r12 = newarray (byte)[16];

        r13 = staticinvoke <android.net.util.IpRange: java.net.InetAddress getAsInetAddress(byte[])>($r12);

        goto label4;

     label3:
        $r7 = newarray (byte)[4];

        r13 = staticinvoke <android.net.util.IpRange: java.net.InetAddress getAsInetAddress(byte[])>($r7);

     label4:
        $r8 = new android.net.IpPrefix;

        specialinvoke $r8.<android.net.IpPrefix: void <init>(java.net.InetAddress,int)>(r13, 0);

        interfaceinvoke $r6.<java.util.Queue: boolean add(java.lang.Object)>($r8);

     label5:
        $z6 = interfaceinvoke $r6.<java.util.Queue: boolean isEmpty()>();

        if $z6 != 0 goto label8;

        $r9 = interfaceinvoke $r6.<java.util.Queue: java.lang.Object poll()>();

        r3 = (android.net.IpPrefix) $r9;

        $r10 = new android.net.util.IpRange;

        specialinvoke $r10.<android.net.util.IpRange: void <init>(android.net.IpPrefix)>(r3);

        $z1 = virtualinvoke r0.<android.net.util.IpRange: boolean containsRange(android.net.util.IpRange)>($r10);

        if $z1 == 0 goto label6;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r3);

        goto label5;

     label6:
        $z2 = virtualinvoke r0.<android.net.util.IpRange: boolean overlapsRange(android.net.util.IpRange)>($r10);

        if $z2 == 0 goto label7;

        $r11 = staticinvoke <android.net.util.IpRange: java.util.List getSubsetPrefixes(android.net.IpPrefix)>(r3);

        interfaceinvoke $r6.<java.util.Queue: boolean addAll(java.util.Collection)>($r11);

     label7:
        goto label5;

     label8:
        return $r5;
    }

    public boolean containsRange(android.net.util.IpRange)
    {
        android.net.util.IpRange r0, r1;
        byte[] $r2, $r4, $r6, $r8;
        java.math.BigInteger $r3, $r5, $r7, $r9;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.net.util.IpRange;

        r1 := @parameter0: android.net.util.IpRange;

        $r2 = r0.<android.net.util.IpRange: byte[] mStartAddr>;

        $r3 = staticinvoke <android.net.util.IpRange: java.math.BigInteger addrToBigInteger(byte[])>($r2);

        $r4 = r1.<android.net.util.IpRange: byte[] mStartAddr>;

        $r5 = staticinvoke <android.net.util.IpRange: java.math.BigInteger addrToBigInteger(byte[])>($r4);

        $i0 = virtualinvoke $r3.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r5);

        if $i0 > 0 goto label1;

        $r6 = r0.<android.net.util.IpRange: byte[] mEndAddr>;

        $r7 = staticinvoke <android.net.util.IpRange: java.math.BigInteger addrToBigInteger(byte[])>($r6);

        $r8 = r1.<android.net.util.IpRange: byte[] mEndAddr>;

        $r9 = staticinvoke <android.net.util.IpRange: java.math.BigInteger addrToBigInteger(byte[])>($r8);

        $i1 = virtualinvoke $r7.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r9);

        if $i1 < 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean equals(java.lang.Object)
    {
        android.net.util.IpRange r0, r6;
        boolean z0, $z1, $z2, z3;
        byte[] $r1, $r2, $r3, $r4;
        java.lang.Object r5;

        r0 := @this: android.net.util.IpRange;

        r5 := @parameter0: java.lang.Object;

        z0 = r5 instanceof android.net.util.IpRange;

        z3 = 0;

        if z0 != 0 goto label1;

        return 0;

     label1:
        r6 = (android.net.util.IpRange) r5;

        $r2 = r0.<android.net.util.IpRange: byte[] mStartAddr>;

        $r1 = r6.<android.net.util.IpRange: byte[] mStartAddr>;

        $z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r2, $r1);

        if $z1 == 0 goto label2;

        $r4 = r0.<android.net.util.IpRange: byte[] mEndAddr>;

        $r3 = r6.<android.net.util.IpRange: byte[] mEndAddr>;

        $z2 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r4, $r3);

        if $z2 == 0 goto label2;

        z3 = 1;

        goto label2;

     label2:
        return z3;
    }

    public java.net.InetAddress getEndAddr()
    {
        android.net.util.IpRange r0;
        byte[] $r1;
        java.net.InetAddress $r2;

        r0 := @this: android.net.util.IpRange;

        $r1 = r0.<android.net.util.IpRange: byte[] mEndAddr>;

        $r2 = staticinvoke <android.net.util.IpRange: java.net.InetAddress getAsInetAddress(byte[])>($r1);

        return $r2;
    }

    public java.net.InetAddress getStartAddr()
    {
        android.net.util.IpRange r0;
        byte[] $r1;
        java.net.InetAddress $r2;

        r0 := @this: android.net.util.IpRange;

        $r1 = r0.<android.net.util.IpRange: byte[] mStartAddr>;

        $r2 = staticinvoke <android.net.util.IpRange: java.net.InetAddress getAsInetAddress(byte[])>($r1);

        return $r2;
    }

    public int hashCode()
    {
        android.net.util.IpRange r0;
        java.lang.Object[] $r1;
        byte[] $r2, $r3;
        int $i0;

        r0 := @this: android.net.util.IpRange;

        $r1 = newarray (java.lang.Object)[2];

        $r2 = r0.<android.net.util.IpRange: byte[] mStartAddr>;

        $r1[0] = $r2;

        $r3 = r0.<android.net.util.IpRange: byte[] mEndAddr>;

        $r1[1] = $r3;

        $i0 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>($r1);

        return $i0;
    }

    public boolean overlapsRange(android.net.util.IpRange)
    {
        android.net.util.IpRange r0, r1;
        byte[] $r2, $r4, $r6, $r8;
        java.math.BigInteger $r3, $r5, $r7, $r9;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.net.util.IpRange;

        r1 := @parameter0: android.net.util.IpRange;

        $r2 = r0.<android.net.util.IpRange: byte[] mStartAddr>;

        $r3 = staticinvoke <android.net.util.IpRange: java.math.BigInteger addrToBigInteger(byte[])>($r2);

        $r4 = r1.<android.net.util.IpRange: byte[] mEndAddr>;

        $r5 = staticinvoke <android.net.util.IpRange: java.math.BigInteger addrToBigInteger(byte[])>($r4);

        $i0 = virtualinvoke $r3.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r5);

        if $i0 > 0 goto label1;

        $r6 = r1.<android.net.util.IpRange: byte[] mStartAddr>;

        $r7 = staticinvoke <android.net.util.IpRange: java.math.BigInteger addrToBigInteger(byte[])>($r6);

        $r8 = r0.<android.net.util.IpRange: byte[] mEndAddr>;

        $r9 = staticinvoke <android.net.util.IpRange: java.math.BigInteger addrToBigInteger(byte[])>($r8);

        $i1 = virtualinvoke $r7.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r9);

        if $i1 > 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static void <clinit>()
    {
        <android.net.util.IpRange: int SIGNUM_POSITIVE> = 1;

        return;
    }
}
