public class android.net.util.MultinetworkPolicyTracker extends java.lang.Object
{
    private static java.lang.String TAG;
    private int mActiveSubId;
    private volatile boolean mAvoidBadWifi;
    private final java.lang.Runnable mAvoidBadWifiCallback;
    private final android.content.BroadcastReceiver mBroadcastReceiver;
    private final android.content.Context mContext;
    private final android.os.Handler mHandler;
    private volatile int mMeteredMultipathPreference;
    private final android.content.ContentResolver mResolver;
    private final android.net.util.MultinetworkPolicyTracker$SettingObserver mSettingObserver;
    private final java.util.List mSettingsUris;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        $r0 = class "Landroid/net/util/MultinetworkPolicyTracker;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <android.net.util.MultinetworkPolicyTracker: java.lang.String TAG> = $r1;

        return;
    }

    public void <init>(android.content.Context, android.os.Handler)
    {
        android.net.util.MultinetworkPolicyTracker r0;
        android.content.Context r1;
        android.os.Handler r2;

        r0 := @this: android.net.util.MultinetworkPolicyTracker;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.Handler;

        specialinvoke r0.<android.net.util.MultinetworkPolicyTracker: void <init>(android.content.Context,android.os.Handler,java.lang.Runnable)>(r1, r2, null);

        return;
    }

    public void <init>(android.content.Context, android.os.Handler, java.lang.Runnable)
    {
        android.net.util.MultinetworkPolicyTracker r0;
        android.content.Context r1, $r8;
        android.os.Handler r2;
        java.lang.Runnable r3;
        android.net.Uri[] $r4;
        android.net.Uri $r5, $r6;
        java.util.List $r7;
        android.content.ContentResolver $r9;
        android.net.util.MultinetworkPolicyTracker$SettingObserver $r10;
        android.net.util.MultinetworkPolicyTracker$1 $r11;
        java.lang.Object $r12;
        android.net.util.MultinetworkPolicyTracker$2 $r13;
        android.telephony.TelephonyManager $r14;
        android.os.Looper $r15;

        r0 := @this: android.net.util.MultinetworkPolicyTracker;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.Handler;

        r3 := @parameter2: java.lang.Runnable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.net.util.MultinetworkPolicyTracker: boolean mAvoidBadWifi> = 1;

        r0.<android.net.util.MultinetworkPolicyTracker: int mActiveSubId> = -1;

        r0.<android.net.util.MultinetworkPolicyTracker: android.content.Context mContext> = r1;

        r0.<android.net.util.MultinetworkPolicyTracker: android.os.Handler mHandler> = r2;

        r0.<android.net.util.MultinetworkPolicyTracker: java.lang.Runnable mAvoidBadWifiCallback> = r3;

        $r4 = newarray (android.net.Uri)[2];

        $r5 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("network_avoid_bad_wifi");

        $r4[0] = $r5;

        $r6 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("network_metered_multipath_preference");

        $r4[1] = $r6;

        $r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        r0.<android.net.util.MultinetworkPolicyTracker: java.util.List mSettingsUris> = $r7;

        $r8 = r0.<android.net.util.MultinetworkPolicyTracker: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r0.<android.net.util.MultinetworkPolicyTracker: android.content.ContentResolver mResolver> = $r9;

        $r10 = new android.net.util.MultinetworkPolicyTracker$SettingObserver;

        specialinvoke $r10.<android.net.util.MultinetworkPolicyTracker$SettingObserver: void <init>(android.net.util.MultinetworkPolicyTracker)>(r0);

        r0.<android.net.util.MultinetworkPolicyTracker: android.net.util.MultinetworkPolicyTracker$SettingObserver mSettingObserver> = $r10;

        $r11 = new android.net.util.MultinetworkPolicyTracker$1;

        specialinvoke $r11.<android.net.util.MultinetworkPolicyTracker$1: void <init>(android.net.util.MultinetworkPolicyTracker)>(r0);

        r0.<android.net.util.MultinetworkPolicyTracker: android.content.BroadcastReceiver mBroadcastReceiver> = $r11;

        $r12 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/telephony/TelephonyManager;");

        $r14 = (android.telephony.TelephonyManager) $r12;

        $r13 = new android.net.util.MultinetworkPolicyTracker$2;

        $r15 = virtualinvoke r2.<android.os.Handler: android.os.Looper getLooper()>();

        specialinvoke $r13.<android.net.util.MultinetworkPolicyTracker$2: void <init>(android.net.util.MultinetworkPolicyTracker,android.os.Looper)>(r0, $r15);

        virtualinvoke $r14.<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)>($r13, 4194304);

        virtualinvoke r0.<android.net.util.MultinetworkPolicyTracker: boolean updateAvoidBadWifi()>();

        virtualinvoke r0.<android.net.util.MultinetworkPolicyTracker: void updateMeteredMultipathPreference()>();

        return;
    }

    static void access$000(android.net.util.MultinetworkPolicyTracker)
    {
        android.net.util.MultinetworkPolicyTracker r0;

        r0 := @parameter0: android.net.util.MultinetworkPolicyTracker;

        specialinvoke r0.<android.net.util.MultinetworkPolicyTracker: void reevaluateInternal()>();

        return;
    }

    static int access$102(android.net.util.MultinetworkPolicyTracker, int)
    {
        android.net.util.MultinetworkPolicyTracker r0;
        int i0;

        r0 := @parameter0: android.net.util.MultinetworkPolicyTracker;

        i0 := @parameter1: int;

        r0.<android.net.util.MultinetworkPolicyTracker: int mActiveSubId> = i0;

        return i0;
    }

    static java.lang.String access$200()
    {
        java.lang.String $r0;

        $r0 = <android.net.util.MultinetworkPolicyTracker: java.lang.String TAG>;

        return $r0;
    }

    static java.util.List access$300(android.net.util.MultinetworkPolicyTracker)
    {
        android.net.util.MultinetworkPolicyTracker r0;
        java.util.List $r1;

        r0 := @parameter0: android.net.util.MultinetworkPolicyTracker;

        $r1 = r0.<android.net.util.MultinetworkPolicyTracker: java.util.List mSettingsUris>;

        return $r1;
    }

    private android.content.res.Resources getResourcesForActiveSubId()
    {
        android.net.util.MultinetworkPolicyTracker r0;
        int $i0;
        android.content.Context $r1;
        android.content.res.Resources $r2;

        r0 := @this: android.net.util.MultinetworkPolicyTracker;

        $r1 = r0.<android.net.util.MultinetworkPolicyTracker: android.content.Context mContext>;

        $i0 = r0.<android.net.util.MultinetworkPolicyTracker: int mActiveSubId>;

        $r2 = staticinvoke <android.telephony.SubscriptionManager: android.content.res.Resources getResourcesForSubId(android.content.Context,int)>($r1, $i0);

        return $r2;
    }

    public static void lambda$8YMQ0fPTKk7Fw-_gJjln0JT-g8E(android.net.util.MultinetworkPolicyTracker)
    {
        android.net.util.MultinetworkPolicyTracker r0;

        r0 := @parameter0: android.net.util.MultinetworkPolicyTracker;

        specialinvoke r0.<android.net.util.MultinetworkPolicyTracker: void reevaluateInternal()>();

        return;
    }

    private void reevaluateInternal()
    {
        android.net.util.MultinetworkPolicyTracker r0;
        java.lang.Runnable r1;
        boolean $z0;

        r0 := @this: android.net.util.MultinetworkPolicyTracker;

        $z0 = virtualinvoke r0.<android.net.util.MultinetworkPolicyTracker: boolean updateAvoidBadWifi()>();

        if $z0 == 0 goto label1;

        r1 = r0.<android.net.util.MultinetworkPolicyTracker: java.lang.Runnable mAvoidBadWifiCallback>;

        if r1 == null goto label1;

        interfaceinvoke r1.<java.lang.Runnable: void run()>();

     label1:
        virtualinvoke r0.<android.net.util.MultinetworkPolicyTracker: void updateMeteredMultipathPreference()>();

        return;
    }

    public int configMeteredMultipathPreference()
    {
        android.net.util.MultinetworkPolicyTracker r0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        int $i0;

        r0 := @this: android.net.util.MultinetworkPolicyTracker;

        $r1 = r0.<android.net.util.MultinetworkPolicyTracker: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $i0 = virtualinvoke $r2.<android.content.res.Resources: int getInteger(int)>(17694854);

        return $i0;
    }

    public boolean configRestrictsAvoidBadWifi()
    {
        android.net.util.MultinetworkPolicyTracker r0;
        android.content.res.Resources $r1;
        int $i0;
        boolean z0;

        r0 := @this: android.net.util.MultinetworkPolicyTracker;

        $r1 = specialinvoke r0.<android.net.util.MultinetworkPolicyTracker: android.content.res.Resources getResourcesForActiveSubId()>();

        $i0 = virtualinvoke $r1.<android.content.res.Resources: int getInteger(int)>(17694852);

        if $i0 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean getAvoidBadWifi()
    {
        android.net.util.MultinetworkPolicyTracker r0;
        boolean $z0;

        r0 := @this: android.net.util.MultinetworkPolicyTracker;

        $z0 = r0.<android.net.util.MultinetworkPolicyTracker: boolean mAvoidBadWifi>;

        return $z0;
    }

    public java.lang.String getAvoidBadWifiSetting()
    {
        android.net.util.MultinetworkPolicyTracker r0;
        android.content.ContentResolver $r1;
        java.lang.String $r2;

        r0 := @this: android.net.util.MultinetworkPolicyTracker;

        $r1 = r0.<android.net.util.MultinetworkPolicyTracker: android.content.ContentResolver mResolver>;

        $r2 = staticinvoke <android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r1, "network_avoid_bad_wifi");

        return $r2;
    }

    public int getMeteredMultipathPreference()
    {
        android.net.util.MultinetworkPolicyTracker r0;
        int $i0;

        r0 := @this: android.net.util.MultinetworkPolicyTracker;

        $i0 = r0.<android.net.util.MultinetworkPolicyTracker: int mMeteredMultipathPreference>;

        return $i0;
    }

    public void reevaluate()
    {
        android.net.util.MultinetworkPolicyTracker r0;
        android.net.util._$$Lambda$MultinetworkPolicyTracker$8YMQ0fPTKk7Fw__gJjln0JT_g8E $r1;
        android.os.Handler $r2;

        r0 := @this: android.net.util.MultinetworkPolicyTracker;

        $r2 = r0.<android.net.util.MultinetworkPolicyTracker: android.os.Handler mHandler>;

        $r1 = new android.net.util._$$Lambda$MultinetworkPolicyTracker$8YMQ0fPTKk7Fw__gJjln0JT_g8E;

        specialinvoke $r1.<android.net.util._$$Lambda$MultinetworkPolicyTracker$8YMQ0fPTKk7Fw__gJjln0JT_g8E: void <init>(android.net.util.MultinetworkPolicyTracker)>(r0);

        virtualinvoke $r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r1);

        return;
    }

    public boolean shouldNotifyWifiUnvalidated()
    {
        android.net.util.MultinetworkPolicyTracker r0;
        boolean $z0, z1;
        java.lang.String $r1;

        r0 := @this: android.net.util.MultinetworkPolicyTracker;

        $z0 = virtualinvoke r0.<android.net.util.MultinetworkPolicyTracker: boolean configRestrictsAvoidBadWifi()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<android.net.util.MultinetworkPolicyTracker: java.lang.String getAvoidBadWifiSetting()>();

        if $r1 != null goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public void shutdown()
    {
        android.net.util.MultinetworkPolicyTracker r0;
        android.net.util.MultinetworkPolicyTracker$SettingObserver $r1;
        android.content.ContentResolver $r2;
        android.content.BroadcastReceiver $r3;
        android.content.Context $r4;

        r0 := @this: android.net.util.MultinetworkPolicyTracker;

        $r2 = r0.<android.net.util.MultinetworkPolicyTracker: android.content.ContentResolver mResolver>;

        $r1 = r0.<android.net.util.MultinetworkPolicyTracker: android.net.util.MultinetworkPolicyTracker$SettingObserver mSettingObserver>;

        virtualinvoke $r2.<android.content.ContentResolver: void unregisterContentObserver(android.database.ContentObserver)>($r1);

        $r4 = r0.<android.net.util.MultinetworkPolicyTracker: android.content.Context mContext>;

        $r3 = r0.<android.net.util.MultinetworkPolicyTracker: android.content.BroadcastReceiver mBroadcastReceiver>;

        virtualinvoke $r4.<android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)>($r3);

        return;
    }

    public void start()
    {
        android.net.util.MultinetworkPolicyTracker r0;
        java.util.Iterator r1;
        java.util.List $r2;
        boolean $z0;
        android.content.IntentFilter $r3;
        android.os.Handler $r4;
        android.os.UserHandle $r5;
        android.content.BroadcastReceiver $r6;
        android.content.Context $r7;
        java.lang.Object $r9;
        android.net.util.MultinetworkPolicyTracker$SettingObserver $r10;
        android.content.ContentResolver $r11;
        android.net.Uri r12;

        r0 := @this: android.net.util.MultinetworkPolicyTracker;

        $r2 = r0.<android.net.util.MultinetworkPolicyTracker: java.util.List mSettingsUris>;

        r1 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r12 = (android.net.Uri) $r9;

        $r11 = r0.<android.net.util.MultinetworkPolicyTracker: android.content.ContentResolver mResolver>;

        $r10 = r0.<android.net.util.MultinetworkPolicyTracker: android.net.util.MultinetworkPolicyTracker$SettingObserver mSettingObserver>;

        virtualinvoke $r11.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>(r12, 0, $r10);

        goto label1;

     label2:
        $r3 = new android.content.IntentFilter;

        specialinvoke $r3.<android.content.IntentFilter: void <init>()>();

        virtualinvoke $r3.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.CONFIGURATION_CHANGED");

        $r7 = r0.<android.net.util.MultinetworkPolicyTracker: android.content.Context mContext>;

        $r6 = r0.<android.net.util.MultinetworkPolicyTracker: android.content.BroadcastReceiver mBroadcastReceiver>;

        $r5 = <android.os.UserHandle: android.os.UserHandle ALL>;

        $r4 = r0.<android.net.util.MultinetworkPolicyTracker: android.os.Handler mHandler>;

        virtualinvoke $r7.<android.content.Context: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r6, $r5, $r3, null, $r4);

        virtualinvoke r0.<android.net.util.MultinetworkPolicyTracker: void reevaluate()>();

        return;
    }

    public boolean updateAvoidBadWifi()
    {
        android.net.util.MultinetworkPolicyTracker r0;
        boolean z0, $z2, z3, z4, z5, $z6;
        java.lang.String $r1, $r2;

        r0 := @this: android.net.util.MultinetworkPolicyTracker;

        $r1 = "1";

        $r2 = virtualinvoke r0.<android.net.util.MultinetworkPolicyTracker: java.lang.String getAvoidBadWifiSetting()>();

        z3 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        z0 = r0.<android.net.util.MultinetworkPolicyTracker: boolean mAvoidBadWifi>;

        if z3 != 0 goto label2;

        $z2 = virtualinvoke r0.<android.net.util.MultinetworkPolicyTracker: boolean configRestrictsAvoidBadWifi()>();

        if $z2 != 0 goto label1;

        goto label2;

     label1:
        z4 = 0;

        goto label3;

     label2:
        z4 = 1;

     label3:
        r0.<android.net.util.MultinetworkPolicyTracker: boolean mAvoidBadWifi> = z4;

        z5 = 0;

        $z6 = r0.<android.net.util.MultinetworkPolicyTracker: boolean mAvoidBadWifi>;

        if $z6 == z0 goto label4;

        z5 = 1;

     label4:
        return z5;
    }

    public void updateMeteredMultipathPreference()
    {
        android.net.util.MultinetworkPolicyTracker r0;
        android.content.ContentResolver $r1;
        int $i0, $i1;
        java.lang.Throwable $r2;
        java.lang.String r3;

        r0 := @this: android.net.util.MultinetworkPolicyTracker;

        $r1 = r0.<android.net.util.MultinetworkPolicyTracker: android.content.ContentResolver mResolver>;

        r3 = staticinvoke <android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r1, "network_metered_multipath_preference");

     label1:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r3);

        r0.<android.net.util.MultinetworkPolicyTracker: int mMeteredMultipathPreference> = $i0;

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $i1 = virtualinvoke r0.<android.net.util.MultinetworkPolicyTracker: int configMeteredMultipathPreference()>();

        r0.<android.net.util.MultinetworkPolicyTracker: int mMeteredMultipathPreference> = $i1;

     label4:
        return;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }
}
