public final class android.net.wifi.SoftApConfToXmlMigrationUtil extends java.lang.Object
{
    private static final int CONFIG_STORE_DATA_VERSION;
    private static final java.lang.String LEGACY_AP_CONFIG_FILE;
    private static final java.lang.String LEGACY_WIFI_STORE_DIRECTORY_NAME;
    private static final java.lang.String TAG;
    private static final int WIFICONFIG_AP_BAND_2GHZ;
    private static final int WIFICONFIG_AP_BAND_5GHZ;
    private static final int WIFICONFIG_AP_BAND_ANY;
    private static final java.lang.String XML_TAG_ALLOWED_CLIENT_LIST;
    private static final java.lang.String XML_TAG_AP_BAND;
    private static final java.lang.String XML_TAG_AUTO_SHUTDOWN_ENABLED;
    private static final java.lang.String XML_TAG_BLOCKED_CLIENT_LIST;
    private static final java.lang.String XML_TAG_BSSID;
    private static final java.lang.String XML_TAG_CHANNEL;
    private static final java.lang.String XML_TAG_CLIENT_CONTROL_BY_USER;
    public static final java.lang.String XML_TAG_CLIENT_MACADDRESS;
    private static final java.lang.String XML_TAG_DOCUMENT_HEADER;
    private static final java.lang.String XML_TAG_HIDDEN_SSID;
    private static final java.lang.String XML_TAG_MAX_NUMBER_OF_CLIENTS;
    private static final java.lang.String XML_TAG_PASSPHRASE;
    private static final java.lang.String XML_TAG_SECTION_HEADER_SOFTAP;
    private static final java.lang.String XML_TAG_SECURITY_TYPE;
    private static final java.lang.String XML_TAG_SHUTDOWN_TIMEOUT_MILLIS;
    private static final java.lang.String XML_TAG_SSID;
    private static final java.lang.String XML_TAG_VERSION;

    private void <init>()
    {
        android.net.wifi.SoftApConfToXmlMigrationUtil r0;

        r0 := @this: android.net.wifi.SoftApConfToXmlMigrationUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.io.InputStream convert()
    {
        java.io.File $r0, $r1;
        java.io.FileInputStream $r2;
        java.io.InputStream $r3;
        java.lang.Throwable $r4;

        $r0 = new java.io.File;

        $r1 = staticinvoke <android.net.wifi.SoftApConfToXmlMigrationUtil: java.io.File getLegacyWifiSharedDirectory()>();

        specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, "softap.conf");

     label1:
        $r2 = new java.io.FileInputStream;

        specialinvoke $r2.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

     label2:
        $r3 = staticinvoke <android.net.wifi.SoftApConfToXmlMigrationUtil: java.io.InputStream convert(java.io.InputStream)>($r2);

        return $r3;

     label3:
        $r4 := @caughtexception;

        return null;

        catch java.io.FileNotFoundException from label1 to label2 with label3;
    }

    public static java.io.InputStream convert(java.io.InputStream)
    {
        java.io.ByteArrayInputStream $r0;
        java.io.InputStream r1;
        android.net.wifi.SoftApConfiguration r2;
        byte[] r3;

        r1 := @parameter0: java.io.InputStream;

        r2 = staticinvoke <android.net.wifi.SoftApConfToXmlMigrationUtil: android.net.wifi.SoftApConfiguration loadFromLegacyFile(java.io.InputStream)>(r1);

        if r2 != null goto label1;

        return null;

     label1:
        r3 = staticinvoke <android.net.wifi.SoftApConfToXmlMigrationUtil: byte[] convertConfToXml(android.net.wifi.SoftApConfiguration)>(r2);

        if r3 != null goto label2;

        return null;

     label2:
        $r0 = new java.io.ByteArrayInputStream;

        specialinvoke $r0.<java.io.ByteArrayInputStream: void <init>(byte[])>(r3);

        return $r0;
    }

    private static byte[] convertConfToXml(android.net.wifi.SoftApConfiguration)
    {
        com.android.internal.util.FastXmlSerializer r0;
        java.io.ByteArrayOutputStream r1;
        java.util.Iterator r2, r38;
        boolean z0, $z1, $z2, $z3, $z4;
        java.nio.charset.Charset $r3;
        java.lang.String $r4, $r9, $r29, $r32, $r33, $r35;
        java.lang.Boolean $r5, $r13, $r16, $r17;
        java.lang.Integer $r7, $r11, $r12, $r14, $r15;
        android.net.MacAddress $r10, $r28, $r31, $r34;
        int $i0, $i1, $i2, $i3, $i4;
        long $l5;
        java.lang.Long $r18;
        java.util.List $r20, $r23;
        java.lang.Object $r27, $r30;
        java.lang.Throwable $r36;
        android.net.wifi.SoftApConfiguration r37;
        byte[] r39;

        r37 := @parameter0: android.net.wifi.SoftApConfiguration;

     label01:
        r0 = new com.android.internal.util.FastXmlSerializer;

        specialinvoke r0.<com.android.internal.util.FastXmlSerializer: void <init>()>();

        r1 = new java.io.ByteArrayOutputStream;

        specialinvoke r1.<java.io.ByteArrayOutputStream: void <init>()>();

        $r3 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r4 = virtualinvoke $r3.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r0.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>(r1, $r4);

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r0.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>(null, $r5);

        interfaceinvoke r0.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "WifiConfigStoreData");

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        staticinvoke <com.android.internal.util.XmlUtils: void writeValueXml(java.lang.Object,java.lang.String,org.xmlpull.v1.XmlSerializer)>($r7, "Version", r0);

        interfaceinvoke r0.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "SoftAp");

        $r9 = virtualinvoke r37.<android.net.wifi.SoftApConfiguration: java.lang.String getSsid()>();

        staticinvoke <com.android.internal.util.XmlUtils: void writeValueXml(java.lang.Object,java.lang.String,org.xmlpull.v1.XmlSerializer)>($r9, "SSID", r0);

        $r10 = virtualinvoke r37.<android.net.wifi.SoftApConfiguration: android.net.MacAddress getBssid()>();

        if $r10 == null goto label02;

        $r34 = virtualinvoke r37.<android.net.wifi.SoftApConfiguration: android.net.MacAddress getBssid()>();

        $r35 = virtualinvoke $r34.<android.net.MacAddress: java.lang.String toString()>();

        staticinvoke <com.android.internal.util.XmlUtils: void writeValueXml(java.lang.Object,java.lang.String,org.xmlpull.v1.XmlSerializer)>($r35, "Bssid", r0);

     label02:
        $i0 = virtualinvoke r37.<android.net.wifi.SoftApConfiguration: int getBand()>();

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        staticinvoke <com.android.internal.util.XmlUtils: void writeValueXml(java.lang.Object,java.lang.String,org.xmlpull.v1.XmlSerializer)>($r11, "ApBand", r0);

        $i1 = virtualinvoke r37.<android.net.wifi.SoftApConfiguration: int getChannel()>();

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        staticinvoke <com.android.internal.util.XmlUtils: void writeValueXml(java.lang.Object,java.lang.String,org.xmlpull.v1.XmlSerializer)>($r12, "Channel", r0);

        $z1 = virtualinvoke r37.<android.net.wifi.SoftApConfiguration: boolean isHiddenSsid()>();

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        staticinvoke <com.android.internal.util.XmlUtils: void writeValueXml(java.lang.Object,java.lang.String,org.xmlpull.v1.XmlSerializer)>($r13, "HiddenSSID", r0);

        $i2 = virtualinvoke r37.<android.net.wifi.SoftApConfiguration: int getSecurityType()>();

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        staticinvoke <com.android.internal.util.XmlUtils: void writeValueXml(java.lang.Object,java.lang.String,org.xmlpull.v1.XmlSerializer)>($r14, "SecurityType", r0);

        $i3 = virtualinvoke r37.<android.net.wifi.SoftApConfiguration: int getSecurityType()>();

        if $i3 == 0 goto label03;

        $r33 = virtualinvoke r37.<android.net.wifi.SoftApConfiguration: java.lang.String getPassphrase()>();

        staticinvoke <com.android.internal.util.XmlUtils: void writeValueXml(java.lang.Object,java.lang.String,org.xmlpull.v1.XmlSerializer)>($r33, "Passphrase", r0);

     label03:
        $i4 = virtualinvoke r37.<android.net.wifi.SoftApConfiguration: int getMaxNumberOfClients()>();

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        staticinvoke <com.android.internal.util.XmlUtils: void writeValueXml(java.lang.Object,java.lang.String,org.xmlpull.v1.XmlSerializer)>($r15, "MaxNumberOfClients", r0);

        $z2 = virtualinvoke r37.<android.net.wifi.SoftApConfiguration: boolean isClientControlByUserEnabled()>();

        $r16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        staticinvoke <com.android.internal.util.XmlUtils: void writeValueXml(java.lang.Object,java.lang.String,org.xmlpull.v1.XmlSerializer)>($r16, "ClientControlByUser", r0);

        $z3 = virtualinvoke r37.<android.net.wifi.SoftApConfiguration: boolean isAutoShutdownEnabled()>();

        $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3);

        staticinvoke <com.android.internal.util.XmlUtils: void writeValueXml(java.lang.Object,java.lang.String,org.xmlpull.v1.XmlSerializer)>($r17, "AutoShutdownEnabled", r0);

        $l5 = virtualinvoke r37.<android.net.wifi.SoftApConfiguration: long getShutdownTimeoutMillis()>();

        $r18 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5);

        staticinvoke <com.android.internal.util.XmlUtils: void writeValueXml(java.lang.Object,java.lang.String,org.xmlpull.v1.XmlSerializer)>($r18, "ShutdownTimeoutMillis", r0);

        interfaceinvoke r0.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "BlockedClientList");

        $r20 = virtualinvoke r37.<android.net.wifi.SoftApConfiguration: java.util.List getBlockedClientList()>();

        r2 = interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>();

     label04:
        z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

     label05:
        if z0 == 0 goto label08;

     label06:
        $r30 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r31 = (android.net.MacAddress) $r30;

        $r32 = virtualinvoke $r31.<android.net.MacAddress: java.lang.String toString()>();

        staticinvoke <com.android.internal.util.XmlUtils: void writeValueXml(java.lang.Object,java.lang.String,org.xmlpull.v1.XmlSerializer)>($r32, "ClientMacAddress", r0);

     label07:
        goto label04;

     label08:
        interfaceinvoke r0.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "BlockedClientList");

        interfaceinvoke r0.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "AllowedClientList");

        $r23 = virtualinvoke r37.<android.net.wifi.SoftApConfiguration: java.util.List getAllowedClientList()>();

        r38 = interfaceinvoke $r23.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z4 = interfaceinvoke r38.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label11;

        $r27 = interfaceinvoke r38.<java.util.Iterator: java.lang.Object next()>();

        $r28 = (android.net.MacAddress) $r27;

        $r29 = virtualinvoke $r28.<android.net.MacAddress: java.lang.String toString()>();

        staticinvoke <com.android.internal.util.XmlUtils: void writeValueXml(java.lang.Object,java.lang.String,org.xmlpull.v1.XmlSerializer)>($r29, "ClientMacAddress", r0);

     label10:
        goto label09;

     label11:
        interfaceinvoke r0.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "AllowedClientList");

        interfaceinvoke r0.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "SoftAp");

        interfaceinvoke r0.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "WifiConfigStoreData");

        interfaceinvoke r0.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

        r39 = virtualinvoke r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label12:
        return r39;

     label13:
        $r36 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SoftApConfToXmlMigrationUtil", "Failed to convert softap conf to XML", $r36);

        return null;

        catch java.io.IOException from label01 to label02 with label13;
        catch org.xmlpull.v1.XmlPullParserException from label01 to label02 with label13;
        catch java.io.IOException from label02 to label03 with label13;
        catch org.xmlpull.v1.XmlPullParserException from label02 to label03 with label13;
        catch java.io.IOException from label03 to label04 with label13;
        catch org.xmlpull.v1.XmlPullParserException from label03 to label04 with label13;
        catch java.io.IOException from label04 to label05 with label13;
        catch org.xmlpull.v1.XmlPullParserException from label04 to label05 with label13;
        catch java.io.IOException from label06 to label07 with label13;
        catch org.xmlpull.v1.XmlPullParserException from label06 to label07 with label13;
        catch java.io.IOException from label08 to label09 with label13;
        catch org.xmlpull.v1.XmlPullParserException from label08 to label09 with label13;
        catch java.io.IOException from label09 to label10 with label13;
        catch org.xmlpull.v1.XmlPullParserException from label09 to label10 with label13;
        catch java.io.IOException from label11 to label12 with label13;
        catch org.xmlpull.v1.XmlPullParserException from label11 to label12 with label13;
    }

    public static int convertWifiConfigBandToSoftApConfigBand(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 == -1 goto label2;

        if i0 == 1 goto label1;

        return 1;

     label1:
        return 2;

     label2:
        return 3;
    }

    private static java.io.File getLegacyWifiSharedDirectory()
    {
        java.io.File $r0, $r1;

        $r0 = new java.io.File;

        $r1 = staticinvoke <android.os.Environment: java.io.File getDataMiscDirectory()>();

        specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, "wifi");

        return $r0;
    }

    private static android.net.wifi.SoftApConfiguration loadFromLegacyFile(java.io.InputStream)
    {
        android.net.wifi.SoftApConfiguration$Builder r0;
        java.io.BufferedInputStream r1;
        int i0, i1, i2, $i3, $i4, $i5;
        java.lang.String $r2, $r3;
        boolean $z0;
        java.lang.Throwable $r4, $r5, $r6, $r7, $r8, $r9;
        java.io.InputStream r10;
        java.io.DataInputStream r11, r12, r13, r14;
        android.net.wifi.SoftApConfiguration r15, r17;

        r10 := @parameter0: java.io.InputStream;

        r11 = null;

        r12 = null;

        r13 = null;

     label01:
        r0 = new android.net.wifi.SoftApConfiguration$Builder;

     label02:
        r11 = null;

        r12 = null;

        r13 = null;

     label03:
        specialinvoke r0.<android.net.wifi.SoftApConfiguration$Builder: void <init>()>();

     label04:
        r11 = null;

        r12 = null;

        r13 = null;

     label05:
        r14 = new java.io.DataInputStream;

     label06:
        r11 = null;

        r12 = null;

        r13 = null;

     label07:
        r1 = new java.io.BufferedInputStream;

     label08:
        r11 = null;

        r12 = null;

        r13 = null;

     label09:
        specialinvoke r1.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(r10);

     label10:
        r11 = null;

        r12 = null;

        r13 = null;

     label11:
        specialinvoke r14.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r1);

     label12:
        r11 = r14;

        r12 = r14;

        r13 = r14;

     label13:
        i0 = virtualinvoke r14.<java.io.DataInputStream: int readInt()>();

     label14:
        if i0 < 1 goto label39;

        if i0 <= 3 goto label15;

        goto label39;

     label15:
        r11 = r14;

        r12 = r14;

        r13 = r14;

     label16:
        $r2 = virtualinvoke r14.<java.io.DataInputStream: java.lang.String readUTF()>();

        virtualinvoke r0.<android.net.wifi.SoftApConfiguration$Builder: android.net.wifi.SoftApConfiguration$Builder setSsid(java.lang.String)>($r2);

     label17:
        if i0 < 2 goto label26;

        r11 = r14;

        r12 = r14;

        r13 = r14;

     label18:
        i1 = virtualinvoke r14.<java.io.DataInputStream: int readInt()>();

     label19:
        r11 = r14;

        r12 = r14;

        r13 = r14;

     label20:
        i2 = virtualinvoke r14.<java.io.DataInputStream: int readInt()>();

     label21:
        if i2 != 0 goto label24;

        r11 = r14;

        r12 = r14;

        r13 = r14;

     label22:
        $i5 = staticinvoke <android.net.wifi.SoftApConfToXmlMigrationUtil: int convertWifiConfigBandToSoftApConfigBand(int)>(i1);

        virtualinvoke r0.<android.net.wifi.SoftApConfiguration$Builder: android.net.wifi.SoftApConfiguration$Builder setBand(int)>($i5);

     label23:
        goto label26;

     label24:
        r11 = r14;

        r12 = r14;

        r13 = r14;

     label25:
        $i4 = staticinvoke <android.net.wifi.SoftApConfToXmlMigrationUtil: int convertWifiConfigBandToSoftApConfigBand(int)>(i1);

        virtualinvoke r0.<android.net.wifi.SoftApConfiguration$Builder: android.net.wifi.SoftApConfiguration$Builder setChannel(int,int)>(i2, $i4);

     label26:
        if i0 < 3 goto label28;

        r11 = r14;

        r12 = r14;

        r13 = r14;

     label27:
        $z0 = virtualinvoke r14.<java.io.DataInputStream: boolean readBoolean()>();

        virtualinvoke r0.<android.net.wifi.SoftApConfiguration$Builder: android.net.wifi.SoftApConfiguration$Builder setHiddenSsid(boolean)>($z0);

     label28:
        r11 = r14;

        r12 = r14;

        r13 = r14;

     label29:
        $i3 = virtualinvoke r14.<java.io.DataInputStream: int readInt()>();

        if $i3 != 4 goto label32;

     label30:
        r11 = r14;

        r12 = r14;

        r13 = r14;

     label31:
        $r3 = virtualinvoke r14.<java.io.DataInputStream: java.lang.String readUTF()>();

        virtualinvoke r0.<android.net.wifi.SoftApConfiguration$Builder: android.net.wifi.SoftApConfiguration$Builder setPassphrase(java.lang.String,int)>($r3, 1);

     label32:
        r11 = r14;

        r12 = r14;

        r13 = r14;

     label33:
        r15 = virtualinvoke r0.<android.net.wifi.SoftApConfiguration$Builder: android.net.wifi.SoftApConfiguration build()>();

     label34:
        r17 = r15;

     label35:
        virtualinvoke r14.<java.io.DataInputStream: void close()>();

     label36:
        r17 = r15;

     label37:
        goto label56;

     label38:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SoftApConfToXmlMigrationUtil", "Error closing hotspot configuration during read", $r5);

        goto label37;

     label39:
        r11 = r14;

        r12 = r14;

        r13 = r14;

     label40:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("SoftApConfToXmlMigrationUtil", "Bad version on hotspot configuration file");

     label41:
        virtualinvoke r14.<java.io.DataInputStream: void close()>();

     label42:
        goto label44;

     label43:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SoftApConfToXmlMigrationUtil", "Error closing hotspot configuration during read", $r4);

     label44:
        return null;

     label45:
        $r6 := @caughtexception;

        goto label57;

     label46:
        $r7 := @caughtexception;

        r11 = r12;

     label47:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SoftApConfToXmlMigrationUtil", "Invalid hotspot configuration ", $r7);

     label48:
        r17 = null;

        if r12 == null goto label56;

        r17 = null;

     label49:
        virtualinvoke r12.<java.io.DataInputStream: void close()>();

     label50:
        r17 = null;

        goto label37;

     label51:
        $r8 := @caughtexception;

        r11 = r13;

     label52:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SoftApConfToXmlMigrationUtil", "Error reading hotspot configuration ", $r8);

     label53:
        r17 = null;

        if r13 == null goto label56;

        r17 = null;

     label54:
        virtualinvoke r13.<java.io.DataInputStream: void close()>();

     label55:
        r17 = null;

        goto label37;

     label56:
        return r17;

     label57:
        if r11 == null goto label61;

     label58:
        virtualinvoke r11.<java.io.DataInputStream: void close()>();

     label59:
        goto label61;

     label60:
        $r9 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SoftApConfToXmlMigrationUtil", "Error closing hotspot configuration during read", $r9);

     label61:
        throw $r6;

        catch java.io.IOException from label01 to label02 with label51;
        catch java.lang.IllegalArgumentException from label01 to label02 with label46;
        catch java.lang.Throwable from label01 to label02 with label45;
        catch java.io.IOException from label03 to label04 with label51;
        catch java.lang.IllegalArgumentException from label03 to label04 with label46;
        catch java.lang.Throwable from label03 to label04 with label45;
        catch java.io.IOException from label05 to label06 with label51;
        catch java.lang.IllegalArgumentException from label05 to label06 with label46;
        catch java.lang.Throwable from label05 to label06 with label45;
        catch java.io.IOException from label07 to label08 with label51;
        catch java.lang.IllegalArgumentException from label07 to label08 with label46;
        catch java.lang.Throwable from label07 to label08 with label45;
        catch java.io.IOException from label09 to label10 with label51;
        catch java.lang.IllegalArgumentException from label09 to label10 with label46;
        catch java.lang.Throwable from label09 to label10 with label45;
        catch java.io.IOException from label11 to label12 with label51;
        catch java.lang.IllegalArgumentException from label11 to label12 with label46;
        catch java.lang.Throwable from label11 to label12 with label45;
        catch java.io.IOException from label13 to label14 with label51;
        catch java.lang.IllegalArgumentException from label13 to label14 with label46;
        catch java.lang.Throwable from label13 to label14 with label45;
        catch java.io.IOException from label16 to label17 with label51;
        catch java.lang.IllegalArgumentException from label16 to label17 with label46;
        catch java.lang.Throwable from label16 to label17 with label45;
        catch java.io.IOException from label18 to label19 with label51;
        catch java.lang.IllegalArgumentException from label18 to label19 with label46;
        catch java.lang.Throwable from label18 to label19 with label45;
        catch java.io.IOException from label20 to label21 with label51;
        catch java.lang.IllegalArgumentException from label20 to label21 with label46;
        catch java.lang.Throwable from label20 to label21 with label45;
        catch java.io.IOException from label22 to label23 with label51;
        catch java.lang.IllegalArgumentException from label22 to label23 with label46;
        catch java.lang.Throwable from label22 to label23 with label45;
        catch java.io.IOException from label25 to label26 with label51;
        catch java.lang.IllegalArgumentException from label25 to label26 with label46;
        catch java.lang.Throwable from label25 to label26 with label45;
        catch java.io.IOException from label27 to label28 with label51;
        catch java.lang.IllegalArgumentException from label27 to label28 with label46;
        catch java.lang.Throwable from label27 to label28 with label45;
        catch java.io.IOException from label29 to label30 with label51;
        catch java.lang.IllegalArgumentException from label29 to label30 with label46;
        catch java.lang.Throwable from label29 to label30 with label45;
        catch java.io.IOException from label31 to label32 with label51;
        catch java.lang.IllegalArgumentException from label31 to label32 with label46;
        catch java.lang.Throwable from label31 to label32 with label45;
        catch java.io.IOException from label33 to label34 with label51;
        catch java.lang.IllegalArgumentException from label33 to label34 with label46;
        catch java.lang.Throwable from label33 to label34 with label45;
        catch java.io.IOException from label35 to label36 with label38;
        catch java.io.IOException from label40 to label41 with label51;
        catch java.lang.IllegalArgumentException from label40 to label41 with label46;
        catch java.lang.Throwable from label40 to label41 with label45;
        catch java.io.IOException from label41 to label42 with label43;
        catch java.lang.Throwable from label47 to label48 with label45;
        catch java.io.IOException from label49 to label50 with label38;
        catch java.lang.Throwable from label52 to label53 with label45;
        catch java.io.IOException from label54 to label55 with label38;
        catch java.io.IOException from label58 to label59 with label60;
    }

    public static void remove()
    {
        java.io.File $r0, $r1;

        $r0 = new java.io.File;

        $r1 = staticinvoke <android.net.wifi.SoftApConfToXmlMigrationUtil: java.io.File getLegacyWifiSharedDirectory()>();

        specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, "softap.conf");

        virtualinvoke $r0.<java.io.File: boolean delete()>();

        return;
    }

    public static void <clinit>()
    {
        <android.net.wifi.SoftApConfToXmlMigrationUtil: java.lang.String XML_TAG_VERSION> = "Version";

        <android.net.wifi.SoftApConfToXmlMigrationUtil: java.lang.String XML_TAG_SSID> = "SSID";

        <android.net.wifi.SoftApConfToXmlMigrationUtil: java.lang.String XML_TAG_SHUTDOWN_TIMEOUT_MILLIS> = "ShutdownTimeoutMillis";

        <android.net.wifi.SoftApConfToXmlMigrationUtil: java.lang.String XML_TAG_SECURITY_TYPE> = "SecurityType";

        <android.net.wifi.SoftApConfToXmlMigrationUtil: java.lang.String XML_TAG_SECTION_HEADER_SOFTAP> = "SoftAp";

        <android.net.wifi.SoftApConfToXmlMigrationUtil: java.lang.String XML_TAG_PASSPHRASE> = "Passphrase";

        <android.net.wifi.SoftApConfToXmlMigrationUtil: java.lang.String XML_TAG_MAX_NUMBER_OF_CLIENTS> = "MaxNumberOfClients";

        <android.net.wifi.SoftApConfToXmlMigrationUtil: java.lang.String XML_TAG_HIDDEN_SSID> = "HiddenSSID";

        <android.net.wifi.SoftApConfToXmlMigrationUtil: java.lang.String XML_TAG_DOCUMENT_HEADER> = "WifiConfigStoreData";

        <android.net.wifi.SoftApConfToXmlMigrationUtil: java.lang.String XML_TAG_CLIENT_MACADDRESS> = "ClientMacAddress";

        <android.net.wifi.SoftApConfToXmlMigrationUtil: java.lang.String XML_TAG_CLIENT_CONTROL_BY_USER> = "ClientControlByUser";

        <android.net.wifi.SoftApConfToXmlMigrationUtil: java.lang.String XML_TAG_CHANNEL> = "Channel";

        <android.net.wifi.SoftApConfToXmlMigrationUtil: java.lang.String XML_TAG_BSSID> = "Bssid";

        <android.net.wifi.SoftApConfToXmlMigrationUtil: java.lang.String XML_TAG_BLOCKED_CLIENT_LIST> = "BlockedClientList";

        <android.net.wifi.SoftApConfToXmlMigrationUtil: java.lang.String XML_TAG_AUTO_SHUTDOWN_ENABLED> = "AutoShutdownEnabled";

        <android.net.wifi.SoftApConfToXmlMigrationUtil: java.lang.String XML_TAG_AP_BAND> = "ApBand";

        <android.net.wifi.SoftApConfToXmlMigrationUtil: java.lang.String XML_TAG_ALLOWED_CLIENT_LIST> = "AllowedClientList";

        <android.net.wifi.SoftApConfToXmlMigrationUtil: int WIFICONFIG_AP_BAND_ANY> = -1;

        <android.net.wifi.SoftApConfToXmlMigrationUtil: int WIFICONFIG_AP_BAND_5GHZ> = 1;

        <android.net.wifi.SoftApConfToXmlMigrationUtil: int WIFICONFIG_AP_BAND_2GHZ> = 0;

        <android.net.wifi.SoftApConfToXmlMigrationUtil: java.lang.String TAG> = "SoftApConfToXmlMigrationUtil";

        <android.net.wifi.SoftApConfToXmlMigrationUtil: java.lang.String LEGACY_WIFI_STORE_DIRECTORY_NAME> = "wifi";

        <android.net.wifi.SoftApConfToXmlMigrationUtil: java.lang.String LEGACY_AP_CONFIG_FILE> = "softap.conf";

        <android.net.wifi.SoftApConfToXmlMigrationUtil: int CONFIG_STORE_DATA_VERSION> = 3;

        return;
    }
}
