public final class android.net.wifi.WifiMigration extends java.lang.Object
{
    private static final java.lang.String LEGACY_WIFI_STORE_DIRECTORY_NAME;
    public static final int STORE_FILE_SHARED_GENERAL;
    public static final int STORE_FILE_SHARED_SOFTAP;
    public static final int STORE_FILE_USER_GENERAL;
    public static final int STORE_FILE_USER_NETWORK_SUGGESTIONS;
    private static final android.util.SparseArray STORE_ID_TO_FILE_NAME;

    static void <clinit>()
    {
        android.net.wifi.WifiMigration$1 $r0;

        <android.net.wifi.WifiMigration: int STORE_FILE_USER_NETWORK_SUGGESTIONS> = 3;

        <android.net.wifi.WifiMigration: int STORE_FILE_USER_GENERAL> = 2;

        <android.net.wifi.WifiMigration: int STORE_FILE_SHARED_SOFTAP> = 1;

        <android.net.wifi.WifiMigration: int STORE_FILE_SHARED_GENERAL> = 0;

        <android.net.wifi.WifiMigration: java.lang.String LEGACY_WIFI_STORE_DIRECTORY_NAME> = "wifi";

        $r0 = new android.net.wifi.WifiMigration$1;

        specialinvoke $r0.<android.net.wifi.WifiMigration$1: void <init>()>();

        <android.net.wifi.WifiMigration: android.util.SparseArray STORE_ID_TO_FILE_NAME> = $r0;

        return;
    }

    private void <init>()
    {
        android.net.wifi.WifiMigration r0;

        r0 := @this: android.net.wifi.WifiMigration;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.io.InputStream convertAndRetrieveSharedConfigStoreFile(int)
    {
        int i0;
        android.util.AtomicFile $r0;
        java.lang.IllegalArgumentException $r1;
        java.lang.Throwable $r2;
        java.io.InputStream $r3;
        java.io.FileInputStream r4;

        i0 := @parameter0: int;

        if i0 == 0 goto label2;

        if i0 != 1 goto label1;

        goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid shared store file id");

        throw $r1;

     label2:
        $r0 = staticinvoke <android.net.wifi.WifiMigration: android.util.AtomicFile getSharedAtomicFile(int)>(i0);

        r4 = virtualinvoke $r0.<android.util.AtomicFile: java.io.FileInputStream openRead()>();

     label3:
        return r4;

     label4:
        $r2 := @caughtexception;

        if i0 != 1 goto label5;

        $r3 = staticinvoke <android.net.wifi.SoftApConfToXmlMigrationUtil: java.io.InputStream convert()>();

        return $r3;

     label5:
        return null;

        catch java.io.FileNotFoundException from label2 to label3 with label4;
    }

    public static java.io.InputStream convertAndRetrieveUserConfigStoreFile(int, android.os.UserHandle)
    {
        int i0, $i1;
        android.util.AtomicFile $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.Throwable $r3;
        android.os.UserHandle r4;
        java.io.FileInputStream r5;

        i0 := @parameter0: int;

        r4 := @parameter1: android.os.UserHandle;

        if i0 == 2 goto label2;

        if i0 != 3 goto label1;

        goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid user store file id");

        throw $r2;

     label2:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r4);

     label3:
        $i1 = virtualinvoke r4.<android.os.UserHandle: int getIdentifier()>();

        $r1 = staticinvoke <android.net.wifi.WifiMigration: android.util.AtomicFile getUserAtomicFile(int,int)>(i0, $i1);

        r5 = virtualinvoke $r1.<android.util.AtomicFile: java.io.FileInputStream openRead()>();

     label4:
        return r5;

     label5:
        $r3 := @caughtexception;

        return null;

        catch java.io.FileNotFoundException from label3 to label4 with label5;
    }

    private static java.io.File getLegacyWifiSharedDirectory()
    {
        java.io.File $r0, $r1;

        $r0 = new java.io.File;

        $r1 = staticinvoke <android.os.Environment: java.io.File getDataMiscDirectory()>();

        specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, "wifi");

        return $r0;
    }

    private static java.io.File getLegacyWifiUserDirectory(int)
    {
        int i0;
        java.io.File $r0, $r1;

        i0 := @parameter0: int;

        $r0 = new java.io.File;

        $r1 = staticinvoke <android.os.Environment: java.io.File getDataMiscCeDirectory(int)>(i0);

        specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, "wifi");

        return $r0;
    }

    private static android.util.AtomicFile getSharedAtomicFile(int)
    {
        int i0;
        android.util.AtomicFile $r0;
        java.io.File $r1, $r2;
        android.util.SparseArray $r3;
        java.lang.Object $r4;
        java.lang.String $r5;

        i0 := @parameter0: int;

        $r0 = new android.util.AtomicFile;

        $r1 = new java.io.File;

        $r2 = staticinvoke <android.net.wifi.WifiMigration: java.io.File getLegacyWifiSharedDirectory()>();

        $r3 = <android.net.wifi.WifiMigration: android.util.SparseArray STORE_ID_TO_FILE_NAME>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        $r5 = (java.lang.String) $r4;

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, $r5);

        specialinvoke $r0.<android.util.AtomicFile: void <init>(java.io.File)>($r1);

        return $r0;
    }

    private static android.util.AtomicFile getUserAtomicFile(int, int)
    {
        int i0, i1;
        android.util.AtomicFile $r0;
        java.io.File $r1, $r2;
        android.util.SparseArray $r3;
        java.lang.Object $r4;
        java.lang.String $r5;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new android.util.AtomicFile;

        $r1 = new java.io.File;

        $r2 = staticinvoke <android.net.wifi.WifiMigration: java.io.File getLegacyWifiUserDirectory(int)>(i1);

        $r3 = <android.net.wifi.WifiMigration: android.util.SparseArray STORE_ID_TO_FILE_NAME>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        $r5 = (java.lang.String) $r4;

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, $r5);

        specialinvoke $r0.<android.util.AtomicFile: void <init>(java.io.File)>($r1);

        return $r0;
    }

    public static android.net.wifi.WifiMigration$SettingsMigrationData loadFromSettings(android.content.Context)
    {
        android.content.Context r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        android.net.wifi.WifiMigration$SettingsMigrationData$Builder $r1, $r4, $r11, r15, r16, r17, r18, r19;
        android.content.ContentResolver $r2, $r3, $r5, $r7, $r8, $r9, $r10, $r12, r13;
        java.lang.String $r6;
        boolean z2, z3, z4, z5, z6, z7;
        android.net.wifi.WifiMigration$SettingsMigrationData r20;

        r0 := @parameter0: android.content.Context;

        r13 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r13, "wifi_migration_completed", 0);

        if $i0 != 1 goto label01;

        return null;

     label01:
        $r1 = new android.net.wifi.WifiMigration$SettingsMigrationData$Builder;

        specialinvoke $r1.<android.net.wifi.WifiMigration$SettingsMigrationData$Builder: void <init>()>();

        $r2 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i1 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r2, "wifi_scan_always_enabled", 0);

        if $i1 != 1 goto label02;

        z2 = 1;

        goto label03;

     label02:
        z2 = 0;

     label03:
        r15 = virtualinvoke $r1.<android.net.wifi.WifiMigration$SettingsMigrationData$Builder: android.net.wifi.WifiMigration$SettingsMigrationData$Builder setScanAlwaysAvailable(boolean)>(z2);

        $r3 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i2 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r3, "wifi_p2p_pending_factory_reset", 0);

        if $i2 != 1 goto label04;

        z3 = 1;

        goto label05;

     label04:
        z3 = 0;

     label05:
        $r4 = virtualinvoke r15.<android.net.wifi.WifiMigration$SettingsMigrationData$Builder: android.net.wifi.WifiMigration$SettingsMigrationData$Builder setP2pFactoryResetPending(boolean)>(z3);

        $r5 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r6 = staticinvoke <android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r5, "wifi_p2p_device_name");

        r16 = virtualinvoke $r4.<android.net.wifi.WifiMigration$SettingsMigrationData$Builder: android.net.wifi.WifiMigration$SettingsMigrationData$Builder setP2pDeviceName(java.lang.String)>($r6);

        $r7 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i3 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r7, "soft_ap_timeout_enabled", 1);

        if $i3 != 1 goto label06;

        z4 = 1;

        goto label07;

     label06:
        z4 = 0;

     label07:
        r17 = virtualinvoke r16.<android.net.wifi.WifiMigration$SettingsMigrationData$Builder: android.net.wifi.WifiMigration$SettingsMigrationData$Builder setSoftApTimeoutEnabled(boolean)>(z4);

        $r8 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i4 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r8, "wifi_wakeup_enabled", 0);

        if $i4 != 1 goto label08;

        z5 = 1;

        goto label09;

     label08:
        z5 = 0;

     label09:
        r18 = virtualinvoke r17.<android.net.wifi.WifiMigration$SettingsMigrationData$Builder: android.net.wifi.WifiMigration$SettingsMigrationData$Builder setWakeUpEnabled(boolean)>(z5);

        $r9 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i5 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r9, "wifi_scan_throttle_enabled", 1);

        if $i5 != 1 goto label10;

        z6 = 1;

        goto label11;

     label10:
        z6 = 0;

     label11:
        r19 = virtualinvoke r18.<android.net.wifi.WifiMigration$SettingsMigrationData$Builder: android.net.wifi.WifiMigration$SettingsMigrationData$Builder setScanThrottleEnabled(boolean)>(z6);

        z7 = 0;

        $r10 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i6 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r10, "wifi_verbose_logging_enabled", 0);

        if $i6 != 1 goto label12;

        z7 = 1;

     label12:
        $r11 = virtualinvoke r19.<android.net.wifi.WifiMigration$SettingsMigrationData$Builder: android.net.wifi.WifiMigration$SettingsMigrationData$Builder setVerboseLoggingEnabled(boolean)>(z7);

        r20 = virtualinvoke $r11.<android.net.wifi.WifiMigration$SettingsMigrationData$Builder: android.net.wifi.WifiMigration$SettingsMigrationData build()>();

        $r12 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>($r12, "wifi_migration_completed", 1);

        return r20;
    }

    public static void removeSharedConfigStoreFile(int)
    {
        int i0;
        android.util.AtomicFile r0;
        boolean $z0;
        java.lang.IllegalArgumentException $r1;

        i0 := @parameter0: int;

        if i0 == 0 goto label2;

        if i0 != 1 goto label1;

        goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid shared store file id");

        throw $r1;

     label2:
        r0 = staticinvoke <android.net.wifi.WifiMigration: android.util.AtomicFile getSharedAtomicFile(int)>(i0);

        $z0 = virtualinvoke r0.<android.util.AtomicFile: boolean exists()>();

        if $z0 == 0 goto label3;

        virtualinvoke r0.<android.util.AtomicFile: void delete()>();

        return;

     label3:
        if i0 != 1 goto label4;

        staticinvoke <android.net.wifi.SoftApConfToXmlMigrationUtil: void remove()>();

     label4:
        return;
    }

    public static void removeUserConfigStoreFile(int, android.os.UserHandle)
    {
        int i0, $i1;
        boolean $z0;
        java.lang.IllegalArgumentException $r1;
        android.os.UserHandle r2;
        android.util.AtomicFile r3;

        i0 := @parameter0: int;

        r2 := @parameter1: android.os.UserHandle;

        if i0 == 2 goto label2;

        if i0 != 3 goto label1;

        goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid user store file id");

        throw $r1;

     label2:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        $i1 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        r3 = staticinvoke <android.net.wifi.WifiMigration: android.util.AtomicFile getUserAtomicFile(int,int)>(i0, $i1);

        $z0 = virtualinvoke r3.<android.util.AtomicFile: boolean exists()>();

        if $z0 == 0 goto label3;

        virtualinvoke r3.<android.util.AtomicFile: void delete()>();

     label3:
        return;
    }
}
