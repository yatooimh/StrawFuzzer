public class android.net.wifi.nl80211.WifiNl80211Manager extends java.lang.Object
{
    public static final int SCAN_TYPE_PNO_SCAN;
    public static final int SCAN_TYPE_SINGLE_SCAN;
    public static final int SEND_MGMT_FRAME_ERROR_ALREADY_STARTED;
    public static final int SEND_MGMT_FRAME_ERROR_MCS_UNSUPPORTED;
    public static final int SEND_MGMT_FRAME_ERROR_NO_ACK;
    public static final int SEND_MGMT_FRAME_ERROR_TIMEOUT;
    public static final int SEND_MGMT_FRAME_ERROR_UNKNOWN;
    private static final int SEND_MGMT_FRAME_TIMEOUT_MS;
    private static final java.lang.String TAG;
    private static final java.lang.String TIMEOUT_ALARM_TAG;
    private android.app.AlarmManager mAlarmManager;
    private java.util.HashMap mApInterfaceListeners;
    private java.util.HashMap mApInterfaces;
    private java.util.HashMap mClientInterfaces;
    private java.lang.Runnable mDeathEventHandler;
    private android.os.Handler mEventHandler;
    private java.util.HashMap mPnoScanEventHandlers;
    private java.util.HashMap mScanEventHandlers;
    private java.util.concurrent.atomic.AtomicBoolean mSendMgmtFrameInProgress;
    private boolean mVerboseLoggingEnabled;
    private android.net.wifi.nl80211.IWificond mWificond;
    private java.util.HashMap mWificondScanners;

    public void <init>(android.content.Context)
    {
        android.net.wifi.nl80211.WifiNl80211Manager r0;
        android.content.Context r1;
        java.util.HashMap $r2, $r3, $r4, $r5, $r6, $r7;
        java.util.concurrent.atomic.AtomicBoolean $r8;
        java.lang.Object $r9;
        android.app.AlarmManager $r10;
        android.os.Handler $r11;
        android.os.Looper $r12;

        r0 := @this: android.net.wifi.nl80211.WifiNl80211Manager;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.net.wifi.nl80211.WifiNl80211Manager: boolean mVerboseLoggingEnabled> = 0;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<android.net.wifi.nl80211.WifiNl80211Manager: java.util.HashMap mClientInterfaces> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<android.net.wifi.nl80211.WifiNl80211Manager: java.util.HashMap mApInterfaces> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<android.net.wifi.nl80211.WifiNl80211Manager: java.util.HashMap mWificondScanners> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<android.net.wifi.nl80211.WifiNl80211Manager: java.util.HashMap mScanEventHandlers> = $r5;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<android.net.wifi.nl80211.WifiNl80211Manager: java.util.HashMap mPnoScanEventHandlers> = $r6;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r0.<android.net.wifi.nl80211.WifiNl80211Manager: java.util.HashMap mApInterfaceListeners> = $r7;

        $r8 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r8.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<android.net.wifi.nl80211.WifiNl80211Manager: java.util.concurrent.atomic.AtomicBoolean mSendMgmtFrameInProgress> = $r8;

        $r9 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/AlarmManager;");

        $r10 = (android.app.AlarmManager) $r9;

        r0.<android.net.wifi.nl80211.WifiNl80211Manager: android.app.AlarmManager mAlarmManager> = $r10;

        $r11 = new android.os.Handler;

        $r12 = virtualinvoke r1.<android.content.Context: android.os.Looper getMainLooper()>();

        specialinvoke $r11.<android.os.Handler: void <init>(android.os.Looper)>($r12);

        r0.<android.net.wifi.nl80211.WifiNl80211Manager: android.os.Handler mEventHandler> = $r11;

        return;
    }

    public void <init>(android.content.Context, android.net.wifi.nl80211.IWificond)
    {
        android.net.wifi.nl80211.WifiNl80211Manager r0;
        android.content.Context r1;
        android.net.wifi.nl80211.IWificond r2;

        r0 := @this: android.net.wifi.nl80211.WifiNl80211Manager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.net.wifi.nl80211.IWificond;

        specialinvoke r0.<android.net.wifi.nl80211.WifiNl80211Manager: void <init>(android.content.Context)>(r1);

        r0.<android.net.wifi.nl80211.WifiNl80211Manager: android.net.wifi.nl80211.IWificond mWificond> = r2;

        return;
    }

    static boolean access$000(android.net.wifi.nl80211.WifiNl80211Manager)
    {
        android.net.wifi.nl80211.WifiNl80211Manager r0;
        boolean $z0;

        r0 := @parameter0: android.net.wifi.nl80211.WifiNl80211Manager;

        $z0 = r0.<android.net.wifi.nl80211.WifiNl80211Manager: boolean mVerboseLoggingEnabled>;

        return $z0;
    }

    static java.util.concurrent.atomic.AtomicBoolean access$100(android.net.wifi.nl80211.WifiNl80211Manager)
    {
        android.net.wifi.nl80211.WifiNl80211Manager r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @parameter0: android.net.wifi.nl80211.WifiNl80211Manager;

        $r1 = r0.<android.net.wifi.nl80211.WifiNl80211Manager: java.util.concurrent.atomic.AtomicBoolean mSendMgmtFrameInProgress>;

        return $r1;
    }

    static android.os.Handler access$200(android.net.wifi.nl80211.WifiNl80211Manager)
    {
        android.net.wifi.nl80211.WifiNl80211Manager r0;
        android.os.Handler $r1;

        r0 := @parameter0: android.net.wifi.nl80211.WifiNl80211Manager;

        $r1 = r0.<android.net.wifi.nl80211.WifiNl80211Manager: android.os.Handler mEventHandler>;

        return $r1;
    }

    static android.app.AlarmManager access$300(android.net.wifi.nl80211.WifiNl80211Manager)
    {
        android.net.wifi.nl80211.WifiNl80211Manager r0;
        android.app.AlarmManager $r1;

        r0 := @parameter0: android.net.wifi.nl80211.WifiNl80211Manager;

        $r1 = r0.<android.net.wifi.nl80211.WifiNl80211Manager: android.app.AlarmManager mAlarmManager>;

        return $r1;
    }

    private void clearState()
    {
        android.net.wifi.nl80211.WifiNl80211Manager r0;
        java.util.HashMap $r1, $r2, $r3, $r4, $r5, $r6;
        java.util.concurrent.atomic.AtomicBoolean $r7;

        r0 := @this: android.net.wifi.nl80211.WifiNl80211Manager;

        $r1 = r0.<android.net.wifi.nl80211.WifiNl80211Manager: java.util.HashMap mClientInterfaces>;

        virtualinvoke $r1.<java.util.HashMap: void clear()>();

        $r2 = r0.<android.net.wifi.nl80211.WifiNl80211Manager: java.util.HashMap mWificondScanners>;

        virtualinvoke $r2.<java.util.HashMap: void clear()>();

        $r3 = r0.<android.net.wifi.nl80211.WifiNl80211Manager: java.util.HashMap mPnoScanEventHandlers>;

        virtualinvoke $r3.<java.util.HashMap: void clear()>();

        $r4 = r0.<android.net.wifi.nl80211.WifiNl80211Manager: java.util.HashMap mScanEventHandlers>;

        virtualinvoke $r4.<java.util.HashMap: void clear()>();

        $r5 = r0.<android.net.wifi.nl80211.WifiNl80211Manager: java.util.HashMap mApInterfaces>;

        virtualinvoke $r5.<java.util.HashMap: void clear()>();

        $r6 = r0.<android.net.wifi.nl80211.WifiNl80211Manager: java.util.HashMap mApInterfaceListeners>;

        virtualinvoke $r6.<java.util.HashMap: void clear()>();

        $r7 = r0.<android.net.wifi.nl80211.WifiNl80211Manager: java.util.concurrent.atomic.AtomicBoolean mSendMgmtFrameInProgress>;

        virtualinvoke $r7.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

        return;
    }

    private android.net.wifi.nl80211.IApInterface getApInterface(java.lang.String)
    {
        android.net.wifi.nl80211.WifiNl80211Manager r0;
        java.lang.String r1;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        android.net.wifi.nl80211.IApInterface $r4;

        r0 := @this: android.net.wifi.nl80211.WifiNl80211Manager;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.net.wifi.nl80211.WifiNl80211Manager: java.util.HashMap mApInterfaces>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (android.net.wifi.nl80211.IApInterface) $r3;

        return $r4;
    }

    private android.net.wifi.nl80211.IClientInterface getClientInterface(java.lang.String)
    {
        android.net.wifi.nl80211.WifiNl80211Manager r0;
        java.lang.String r1;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        android.net.wifi.nl80211.IClientInterface $r4;

        r0 := @this: android.net.wifi.nl80211.WifiNl80211Manager;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.net.wifi.nl80211.WifiNl80211Manager: java.util.HashMap mClientInterfaces>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (android.net.wifi.nl80211.IClientInterface) $r3;

        return $r4;
    }

    private static int getScanType(int)
    {
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5;

        i0 := @parameter0: int;

        if i0 == 0 goto label3;

        if i0 == 1 goto label2;

        if i0 != 2 goto label1;

        return 2;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid scan type ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label2:
        return 1;

     label3:
        return 0;
    }

    private android.net.wifi.nl80211.IWifiScannerImpl getScannerImpl(java.lang.String)
    {
        android.net.wifi.nl80211.WifiNl80211Manager r0;
        java.lang.String r1;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        android.net.wifi.nl80211.IWifiScannerImpl $r4;

        r0 := @this: android.net.wifi.nl80211.WifiNl80211Manager;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.net.wifi.nl80211.WifiNl80211Manager: java.util.HashMap mWificondScanners>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (android.net.wifi.nl80211.IWifiScannerImpl) $r3;

        return $r4;
    }

    static void lambda$sendMgmtFrame$2(android.net.wifi.nl80211.WifiNl80211Manager$SendMgmtFrameCallback)
    {
        android.net.wifi.nl80211.WifiNl80211Manager$SendMgmtFrameCallback r0;

        r0 := @parameter0: android.net.wifi.nl80211.WifiNl80211Manager$SendMgmtFrameCallback;

        interfaceinvoke r0.<android.net.wifi.nl80211.WifiNl80211Manager$SendMgmtFrameCallback: void onFailure(int)>(1);

        return;
    }

    static void lambda$sendMgmtFrame$3(android.net.wifi.nl80211.WifiNl80211Manager$SendMgmtFrameCallback)
    {
        android.net.wifi.nl80211.WifiNl80211Manager$SendMgmtFrameCallback r0;

        r0 := @parameter0: android.net.wifi.nl80211.WifiNl80211Manager$SendMgmtFrameCallback;

        interfaceinvoke r0.<android.net.wifi.nl80211.WifiNl80211Manager$SendMgmtFrameCallback: void onFailure(int)>(1);

        return;
    }

    static void lambda$sendMgmtFrame$4(android.net.wifi.nl80211.WifiNl80211Manager$SendMgmtFrameCallback)
    {
        android.net.wifi.nl80211.WifiNl80211Manager$SendMgmtFrameCallback r0;

        r0 := @parameter0: android.net.wifi.nl80211.WifiNl80211Manager$SendMgmtFrameCallback;

        interfaceinvoke r0.<android.net.wifi.nl80211.WifiNl80211Manager$SendMgmtFrameCallback: void onFailure(int)>(5);

        return;
    }

    public static android.net.wifi.nl80211.WifiNl80211Manager$OemSecurityType parseOemSecurityTypeElement(int, int, byte[])
    {
        int i0, i1;
        byte[] r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: byte[];

        return null;
    }

    private boolean retrieveWificondAndRegisterForDeath()
    {
        android.net.wifi.nl80211.WifiNl80211Manager r0;
        android.os.IBinder r1, $r3;
        android.net.wifi.nl80211.IWificond $r2, r5;
        boolean $z0;
        android.os.RemoteException $r4;
        android.net.wifi.nl80211._$$Lambda$WifiNl80211Manager$gj_UWkRFMZyZJomZvcvMZmTFj_E r6;

        r0 := @this: android.net.wifi.nl80211.WifiNl80211Manager;

        $r2 = r0.<android.net.wifi.nl80211.WifiNl80211Manager: android.net.wifi.nl80211.IWificond mWificond>;

        if $r2 == null goto label2;

        $z0 = r0.<android.net.wifi.nl80211.WifiNl80211Manager: boolean mVerboseLoggingEnabled>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("WifiNl80211Manager", "Wificond handle already retrieved");

     label1:
        return 1;

     label2:
        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("wifinl80211");

        r5 = staticinvoke <android.net.wifi.nl80211.IWificond$Stub: android.net.wifi.nl80211.IWificond asInterface(android.os.IBinder)>($r3);

        r0.<android.net.wifi.nl80211.WifiNl80211Manager: android.net.wifi.nl80211.IWificond mWificond> = r5;

        if r5 != null goto label3;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "Failed to get reference to wificond");

        return 0;

     label3:
        r1 = interfaceinvoke r5.<android.net.wifi.nl80211.IWificond: android.os.IBinder asBinder()>();

        r6 = new android.net.wifi.nl80211._$$Lambda$WifiNl80211Manager$gj_UWkRFMZyZJomZvcvMZmTFj_E;

        specialinvoke r6.<android.net.wifi.nl80211._$$Lambda$WifiNl80211Manager$gj_UWkRFMZyZJomZvcvMZmTFj_E: void <init>(android.net.wifi.nl80211.WifiNl80211Manager)>(r0);

        interfaceinvoke r1.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r6, 0);

     label4:
        return 1;

     label5:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "Failed to register death notification for wificond");

        return 0;

        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void abortScan(java.lang.String)
    {
        android.net.wifi.nl80211.WifiNl80211Manager r0;
        android.os.RemoteException $r1;
        java.lang.String r2;
        android.net.wifi.nl80211.IWifiScannerImpl r3;

        r0 := @this: android.net.wifi.nl80211.WifiNl80211Manager;

        r2 := @parameter0: java.lang.String;

        r3 = specialinvoke r0.<android.net.wifi.nl80211.WifiNl80211Manager: android.net.wifi.nl80211.IWifiScannerImpl getScannerImpl(java.lang.String)>(r2);

        if r3 != null goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "No valid wificond scanner interface handler");

        return;

     label1:
        interfaceinvoke r3.<android.net.wifi.nl80211.IWifiScannerImpl: void abortScan()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "Failed to request abortScan due to remote exception");

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void binderDied()
    {
        android.net.wifi.nl80211.WifiNl80211Manager r0;
        android.net.wifi.nl80211._$$Lambda$WifiNl80211Manager$ShMFa3boc_GR969SdMRhe9INA5A $r1;
        android.os.Handler $r2;

        r0 := @this: android.net.wifi.nl80211.WifiNl80211Manager;

        $r2 = r0.<android.net.wifi.nl80211.WifiNl80211Manager: android.os.Handler mEventHandler>;

        $r1 = new android.net.wifi.nl80211._$$Lambda$WifiNl80211Manager$ShMFa3boc_GR969SdMRhe9INA5A;

        specialinvoke $r1.<android.net.wifi.nl80211._$$Lambda$WifiNl80211Manager$ShMFa3boc_GR969SdMRhe9INA5A: void <init>(android.net.wifi.nl80211.WifiNl80211Manager)>(r0);

        virtualinvoke $r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r1);

        return;
    }

    public void enableVerboseLogging(boolean)
    {
        android.net.wifi.nl80211.WifiNl80211Manager r0;
        boolean z0;

        r0 := @this: android.net.wifi.nl80211.WifiNl80211Manager;

        z0 := @parameter0: boolean;

        r0.<android.net.wifi.nl80211.WifiNl80211Manager: boolean mVerboseLoggingEnabled> = z0;

        return;
    }

    public int[] getChannelsMhzForBand(int)
    {
        android.net.wifi.nl80211.WifiNl80211Manager r0;
        int i0;
        java.lang.StringBuilder r1;
        java.lang.String $r4;
        int[] $r5, r8, r9, r12, r13, r14, r15;
        android.os.RemoteException $r6;
        android.net.wifi.nl80211.IWificond r7;
        java.lang.IllegalArgumentException r10;

        r0 := @this: android.net.wifi.nl80211.WifiNl80211Manager;

        i0 := @parameter0: int;

        r7 = r0.<android.net.wifi.nl80211.WifiNl80211Manager: android.net.wifi.nl80211.IWificond mWificond>;

        if r7 != null goto label01;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "No valid wificond scanner interface handler");

        $r5 = newarray (int)[0];

        return $r5;

     label01:
        r8 = null;

        if i0 == 1 goto label10;

        if i0 == 2 goto label08;

        if i0 == 4 goto label06;

        if i0 != 8 goto label04;

     label02:
        r9 = interfaceinvoke r7.<android.net.wifi.nl80211.IWificond: int[] getAvailable6gChannels()>();

     label03:
        r8 = r9;

        goto label12;

     label04:
        r10 = new java.lang.IllegalArgumentException;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unsupported band ");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw r10;

     label05:
        $r6 := @caughtexception;

        goto label13;

     label06:
        r12 = interfaceinvoke r7.<android.net.wifi.nl80211.IWificond: int[] getAvailableDFSChannels()>();

     label07:
        r8 = r12;

        goto label12;

     label08:
        r13 = interfaceinvoke r7.<android.net.wifi.nl80211.IWificond: int[] getAvailable5gNonDFSChannels()>();

     label09:
        r8 = r13;

        goto label12;

     label10:
        r14 = interfaceinvoke r7.<android.net.wifi.nl80211.IWificond: int[] getAvailable2gChannels()>();

     label11:
        r8 = r14;

     label12:
        goto label14;

     label13:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "Failed to request getChannelsForBand due to remote exception");

     label14:
        r15 = r8;

        if r8 != null goto label15;

        r15 = newarray (int)[0];

     label15:
        return r15;

        catch android.os.RemoteException from label02 to label03 with label05;
        catch android.os.RemoteException from label04 to label05 with label05;
        catch android.os.RemoteException from label06 to label07 with label05;
        catch android.os.RemoteException from label08 to label09 with label05;
        catch android.os.RemoteException from label10 to label11 with label05;
    }

    public android.net.wifi.nl80211.DeviceWiphyCapabilities getDeviceWiphyCapabilities(java.lang.String)
    {
        android.net.wifi.nl80211.WifiNl80211Manager r0;
        android.net.wifi.nl80211.IWificond r1;
        android.os.RemoteException $r2;
        java.lang.String r3;
        android.net.wifi.nl80211.DeviceWiphyCapabilities r4;

        r0 := @this: android.net.wifi.nl80211.WifiNl80211Manager;

        r3 := @parameter0: java.lang.String;

        r1 = r0.<android.net.wifi.nl80211.WifiNl80211Manager: android.net.wifi.nl80211.IWificond mWificond>;

        if r1 != null goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "Can not query for device wiphy capabilities at this time");

        return null;

     label1:
        r4 = interfaceinvoke r1.<android.net.wifi.nl80211.IWificond: android.net.wifi.nl80211.DeviceWiphyCapabilities getDeviceWiphyCapabilities(java.lang.String)>(r3);

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getScanResults(java.lang.String, int)
    {
        android.net.wifi.nl80211.WifiNl80211Manager r0;
        int i0, $i1;
        android.net.wifi.nl80211.NativeScanResult[] $r1, $r8;
        boolean $z0;
        java.lang.String $r6, r11;
        android.os.RemoteException $r10;
        android.net.wifi.nl80211.IWifiScannerImpl r12;
        java.util.List r13, r14, r15, r22, r23;
        java.lang.Object r17;
        java.util.ArrayList r19, r20;
        java.lang.StringBuilder r21;

        r0 := @this: android.net.wifi.nl80211.WifiNl80211Manager;

        r11 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r12 = specialinvoke r0.<android.net.wifi.nl80211.WifiNl80211Manager: android.net.wifi.nl80211.IWifiScannerImpl getScannerImpl(java.lang.String)>(r11);

        if r12 != null goto label01;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "No valid wificond scanner interface handler");

        r19 = new java.util.ArrayList;

        specialinvoke r19.<java.util.ArrayList: void <init>()>();

        return r19;

     label01:
        r13 = null;

        if i0 != 0 goto label04;

     label02:
        $r8 = interfaceinvoke r12.<android.net.wifi.nl80211.IWifiScannerImpl: android.net.wifi.nl80211.NativeScanResult[] getScanResults()>();

        r14 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r8);

     label03:
        r13 = r14;

        goto label06;

     label04:
        $r1 = interfaceinvoke r12.<android.net.wifi.nl80211.IWifiScannerImpl: android.net.wifi.nl80211.NativeScanResult[] getPnoScanResults()>();

        r15 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

     label05:
        r13 = r15;

     label06:
        goto label08;

     label07:
        $r10 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "Failed to create ScanDetail ArrayList");

     label08:
        r17 = r13;

        if r13 != null goto label09;

        r20 = new java.util.ArrayList;

        specialinvoke r20.<java.util.ArrayList: void <init>()>();

        r17 = r20;

     label09:
        $z0 = r0.<android.net.wifi.nl80211.WifiNl80211Manager: boolean mVerboseLoggingEnabled>;

        if $z0 == 0 goto label10;

        r21 = new java.lang.StringBuilder;

        specialinvoke r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("get ");

        r22 = (java.util.List) r17;

        $i1 = interfaceinvoke r22.<java.util.List: int size()>();

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" scan results from wificond");

        $r6 = virtualinvoke r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("WifiNl80211Manager", $r6);

     label10:
        r23 = (java.util.List) r17;

        return r23;

        catch android.os.RemoteException from label02 to label03 with label07;
        catch android.os.RemoteException from label04 to label05 with label07;
    }

    public android.net.wifi.nl80211.WifiNl80211Manager$TxPacketCounters getTxPacketCounters(java.lang.String)
    {
        android.net.wifi.nl80211.WifiNl80211Manager r0;
        int i0, $i2, $i3;
        android.net.wifi.nl80211.WifiNl80211Manager$TxPacketCounters $r1;
        android.os.RemoteException $r2;
        java.lang.String r3;
        android.net.wifi.nl80211.IClientInterface r4;
        int[] r5;

        r0 := @this: android.net.wifi.nl80211.WifiNl80211Manager;

        r3 := @parameter0: java.lang.String;

        r4 = specialinvoke r0.<android.net.wifi.nl80211.WifiNl80211Manager: android.net.wifi.nl80211.IClientInterface getClientInterface(java.lang.String)>(r3);

        if r4 != null goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "No valid wificond client interface handler");

        return null;

     label1:
        r5 = interfaceinvoke r4.<android.net.wifi.nl80211.IClientInterface: int[] getPacketCounters()>();

     label2:
        if r5 == null goto label6;

     label3:
        i0 = lengthof r5;

     label4:
        if i0 == 2 goto label5;

        goto label6;

     label5:
        $r1 = new android.net.wifi.nl80211.WifiNl80211Manager$TxPacketCounters;

        $i3 = r5[0];

        $i2 = r5[1];

        specialinvoke $r1.<android.net.wifi.nl80211.WifiNl80211Manager$TxPacketCounters: void <init>(int,int)>($i3, $i2);

        return $r1;

     label6:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "Invalid signal poll result from wificond");

     label7:
        return null;

     label8:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "Failed to do signal polling due to remote exception");

        return null;

        catch android.os.RemoteException from label1 to label2 with label8;
        catch android.os.RemoteException from label3 to label4 with label8;
        catch android.os.RemoteException from label6 to label7 with label8;
    }

    public void lambda$binderDied$0$WifiNl80211Manager()
    {
        android.net.wifi.nl80211.WifiNl80211Manager r0;
        java.lang.Runnable r1;

        r0 := @this: android.net.wifi.nl80211.WifiNl80211Manager;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "Wificond died!");

        specialinvoke r0.<android.net.wifi.nl80211.WifiNl80211Manager: void clearState()>();

        r0.<android.net.wifi.nl80211.WifiNl80211Manager: android.net.wifi.nl80211.IWificond mWificond> = null;

        r1 = r0.<android.net.wifi.nl80211.WifiNl80211Manager: java.lang.Runnable mDeathEventHandler>;

        if r1 == null goto label1;

        interfaceinvoke r1.<java.lang.Runnable: void run()>();

     label1:
        return;
    }

    public void lambda$retrieveWificondAndRegisterForDeath$1$WifiNl80211Manager()
    {
        android.net.wifi.nl80211.WifiNl80211Manager r0;

        r0 := @this: android.net.wifi.nl80211.WifiNl80211Manager;

        virtualinvoke r0.<android.net.wifi.nl80211.WifiNl80211Manager: void binderDied()>();

        return;
    }

    public boolean registerApCallback(java.lang.String, java.util.concurrent.Executor, android.net.wifi.nl80211.WifiNl80211Manager$SoftApCallback)
    {
        android.net.wifi.nl80211.WifiNl80211Manager r0;
        android.net.wifi.nl80211.WifiNl80211Manager$SoftApCallback r1;
        android.net.wifi.nl80211.IApInterface r2;
        android.net.wifi.nl80211.WifiNl80211Manager$ApInterfaceEventCallback r3;
        java.util.HashMap $r4;
        boolean $z0;
        android.os.RemoteException $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r10, r11;
        java.util.concurrent.Executor r12;

        r0 := @this: android.net.wifi.nl80211.WifiNl80211Manager;

        r11 := @parameter0: java.lang.String;

        r12 := @parameter1: java.util.concurrent.Executor;

        r1 := @parameter2: android.net.wifi.nl80211.WifiNl80211Manager$SoftApCallback;

        r2 = specialinvoke r0.<android.net.wifi.nl80211.WifiNl80211Manager: android.net.wifi.nl80211.IApInterface getApInterface(java.lang.String)>(r11);

        if r2 != null goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "No valid ap interface handler");

        return 0;

     label1:
        if r1 == null goto label6;

        if r12 != null goto label2;

        goto label6;

     label2:
        r3 = new android.net.wifi.nl80211.WifiNl80211Manager$ApInterfaceEventCallback;

        specialinvoke r3.<android.net.wifi.nl80211.WifiNl80211Manager$ApInterfaceEventCallback: void <init>(android.net.wifi.nl80211.WifiNl80211Manager,java.util.concurrent.Executor,android.net.wifi.nl80211.WifiNl80211Manager$SoftApCallback)>(r0, r12, r1);

        $r4 = r0.<android.net.wifi.nl80211.WifiNl80211Manager: java.util.HashMap mApInterfaceListeners>;

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, r3);

        $z0 = interfaceinvoke r2.<android.net.wifi.nl80211.IApInterface: boolean registerCallback(android.net.wifi.nl80211.IApInterfaceEventCallback)>(r3);

        if $z0 != 0 goto label4;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "Failed to register ap callback.");

     label3:
        return 0;

     label4:
        return 1;

     label5:
        $r6 := @caughtexception;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in registering AP callback: ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", $r10);

        return 0;

     label6:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "registerApCallback called with a null callback");

        return 0;

        catch android.os.RemoteException from label2 to label3 with label5;
    }

    public void sendMgmtFrame(java.lang.String, byte[], int, java.util.concurrent.Executor, android.net.wifi.nl80211.WifiNl80211Manager$SendMgmtFrameCallback)
    {
        android.net.wifi.nl80211.WifiNl80211Manager r0;
        int i0;
        android.net.wifi.nl80211.WifiNl80211Manager$SendMgmtFrameCallback r1;
        android.net.wifi.nl80211.IClientInterface r2;
        java.util.concurrent.atomic.AtomicBoolean $r3;
        boolean $z0;
        android.net.wifi.nl80211.WifiNl80211Manager$SendMgmtFrameEvent $r4;
        android.net.wifi.nl80211._$$Lambda$WifiNl80211Manager$_84sQMp93x3MR5HbAeuP427nm0g $r5;
        android.net.wifi.nl80211._$$Lambda$WifiNl80211Manager$jQofYBr8nr0eWIuyBBzw2O7pcw8 $r6;
        android.net.wifi.nl80211._$$Lambda$WifiNl80211Manager$px5c9lsbhVJXt3KKfBEFiQ_k20E $r7;
        android.os.RemoteException $r8;
        java.lang.StringBuilder $r9;
        java.lang.String $r12, r13;
        byte[] r14;
        java.util.concurrent.Executor r15;

        r0 := @this: android.net.wifi.nl80211.WifiNl80211Manager;

        r13 := @parameter0: java.lang.String;

        r14 := @parameter1: byte[];

        i0 := @parameter2: int;

        r15 := @parameter3: java.util.concurrent.Executor;

        r1 := @parameter4: android.net.wifi.nl80211.WifiNl80211Manager$SendMgmtFrameCallback;

        if r1 == null goto label9;

        if r15 != null goto label1;

        goto label9;

     label1:
        if r14 != null goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "frame cannot be null!");

        $r7 = new android.net.wifi.nl80211._$$Lambda$WifiNl80211Manager$px5c9lsbhVJXt3KKfBEFiQ_k20E;

        specialinvoke $r7.<android.net.wifi.nl80211._$$Lambda$WifiNl80211Manager$px5c9lsbhVJXt3KKfBEFiQ_k20E: void <init>(android.net.wifi.nl80211.WifiNl80211Manager$SendMgmtFrameCallback)>(r1);

        interfaceinvoke r15.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r7);

        return;

     label2:
        r2 = specialinvoke r0.<android.net.wifi.nl80211.WifiNl80211Manager: android.net.wifi.nl80211.IClientInterface getClientInterface(java.lang.String)>(r13);

        if r2 != null goto label3;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "No valid wificond client interface handler");

        $r6 = new android.net.wifi.nl80211._$$Lambda$WifiNl80211Manager$jQofYBr8nr0eWIuyBBzw2O7pcw8;

        specialinvoke $r6.<android.net.wifi.nl80211._$$Lambda$WifiNl80211Manager$jQofYBr8nr0eWIuyBBzw2O7pcw8: void <init>(android.net.wifi.nl80211.WifiNl80211Manager$SendMgmtFrameCallback)>(r1);

        interfaceinvoke r15.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r6);

        return;

     label3:
        $r3 = r0.<android.net.wifi.nl80211.WifiNl80211Manager: java.util.concurrent.atomic.AtomicBoolean mSendMgmtFrameInProgress>;

        $z0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);

        if $z0 != 0 goto label4;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "An existing management frame transmission is in progress!");

        $r5 = new android.net.wifi.nl80211._$$Lambda$WifiNl80211Manager$_84sQMp93x3MR5HbAeuP427nm0g;

        specialinvoke $r5.<android.net.wifi.nl80211._$$Lambda$WifiNl80211Manager$_84sQMp93x3MR5HbAeuP427nm0g: void <init>(android.net.wifi.nl80211.WifiNl80211Manager$SendMgmtFrameCallback)>(r1);

        interfaceinvoke r15.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r5);

        return;

     label4:
        $r4 = new android.net.wifi.nl80211.WifiNl80211Manager$SendMgmtFrameEvent;

        specialinvoke $r4.<android.net.wifi.nl80211.WifiNl80211Manager$SendMgmtFrameEvent: void <init>(android.net.wifi.nl80211.WifiNl80211Manager,java.util.concurrent.Executor,android.net.wifi.nl80211.WifiNl80211Manager$SendMgmtFrameCallback)>(r0, r15, r1);

     label5:
        interfaceinvoke r2.<android.net.wifi.nl80211.IClientInterface: void SendMgmtFrame(byte[],android.net.wifi.nl80211.ISendMgmtFrameEvent,int)>(r14, $r4, i0);

     label6:
        goto label8;

     label7:
        $r8 := @caughtexception;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception while starting link probe: ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", $r12);

        virtualinvoke $r4.<android.net.wifi.nl80211.WifiNl80211Manager$SendMgmtFrameEvent: void OnFailure(int)>(1);

     label8:
        return;

     label9:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "callback cannot be null!");

        return;

        catch android.os.RemoteException from label5 to label6 with label7;
    }

    public void setOnServiceDeadCallback(java.lang.Runnable)
    {
        android.net.wifi.nl80211.WifiNl80211Manager r0;
        java.lang.Runnable r1, $r2;

        r0 := @this: android.net.wifi.nl80211.WifiNl80211Manager;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = r0.<android.net.wifi.nl80211.WifiNl80211Manager: java.lang.Runnable mDeathEventHandler>;

        if $r2 == null goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "Death handler already present");

     label1:
        r0.<android.net.wifi.nl80211.WifiNl80211Manager: java.lang.Runnable mDeathEventHandler> = r1;

        return;
    }

    public boolean setupInterfaceForClientMode(java.lang.String, java.util.concurrent.Executor, android.net.wifi.nl80211.WifiNl80211Manager$ScanEventCallback, android.net.wifi.nl80211.WifiNl80211Manager$ScanEventCallback)
    {
        android.net.wifi.nl80211.WifiNl80211Manager r0;
        java.util.concurrent.Executor r1;
        android.net.wifi.nl80211.WifiNl80211Manager$ScanEventCallback r2, r20;
        android.net.wifi.nl80211.WifiNl80211Manager$ScanEventHandler r3;
        boolean $z0;
        android.net.wifi.nl80211.IWificond $r4;
        android.os.IBinder $r5, $r11;
        java.util.HashMap $r7, $r9, $r13, $r15;
        android.os.RemoteException $r17, $r18;
        java.lang.String r19;
        android.net.wifi.nl80211.IClientInterface r21;
        android.net.wifi.nl80211.IWifiScannerImpl r22;
        android.net.wifi.nl80211.WifiNl80211Manager$PnoScanEventHandler r23;

        r0 := @this: android.net.wifi.nl80211.WifiNl80211Manager;

        r19 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.concurrent.Executor;

        r20 := @parameter2: android.net.wifi.nl80211.WifiNl80211Manager$ScanEventCallback;

        r2 := @parameter3: android.net.wifi.nl80211.WifiNl80211Manager$ScanEventCallback;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("WifiNl80211Manager", "Setting up interface for client mode");

        $z0 = specialinvoke r0.<android.net.wifi.nl80211.WifiNl80211Manager: boolean retrieveWificondAndRegisterForDeath()>();

        if $z0 != 0 goto label01;

        return 0;

     label01:
        if r20 == null goto label14;

        if r2 == null goto label14;

        if r1 != null goto label02;

        goto label14;

     label02:
        $r4 = r0.<android.net.wifi.nl80211.WifiNl80211Manager: android.net.wifi.nl80211.IWificond mWificond>;

        r21 = interfaceinvoke $r4.<android.net.wifi.nl80211.IWificond: android.net.wifi.nl80211.IClientInterface createClientInterface(java.lang.String)>(r19);

     label03:
        if r21 != null goto label04;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "Could not get IClientInterface instance from wificond");

        return 0;

     label04:
        $r5 = interfaceinvoke r21.<android.net.wifi.nl80211.IClientInterface: android.os.IBinder asBinder()>();

        staticinvoke <android.os.Binder: android.os.IBinder allowBlocking(android.os.IBinder)>($r5);

        $r7 = r0.<android.net.wifi.nl80211.WifiNl80211Manager: java.util.HashMap mClientInterfaces>;

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r19, r21);

     label05:
        r22 = interfaceinvoke r21.<android.net.wifi.nl80211.IClientInterface: android.net.wifi.nl80211.IWifiScannerImpl getWifiScannerImpl()>();

     label06:
        if r22 != null goto label09;

     label07:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "Failed to get WificondScannerImpl");

     label08:
        return 0;

     label09:
        $r9 = r0.<android.net.wifi.nl80211.WifiNl80211Manager: java.util.HashMap mWificondScanners>;

        virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r19, r22);

        $r11 = interfaceinvoke r22.<android.net.wifi.nl80211.IWifiScannerImpl: android.os.IBinder asBinder()>();

        staticinvoke <android.os.Binder: android.os.IBinder allowBlocking(android.os.IBinder)>($r11);

        r3 = new android.net.wifi.nl80211.WifiNl80211Manager$ScanEventHandler;

        specialinvoke r3.<android.net.wifi.nl80211.WifiNl80211Manager$ScanEventHandler: void <init>(android.net.wifi.nl80211.WifiNl80211Manager,java.util.concurrent.Executor,android.net.wifi.nl80211.WifiNl80211Manager$ScanEventCallback)>(r0, r1, r20);

        $r13 = r0.<android.net.wifi.nl80211.WifiNl80211Manager: java.util.HashMap mScanEventHandlers>;

        virtualinvoke $r13.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r19, r3);

        interfaceinvoke r22.<android.net.wifi.nl80211.IWifiScannerImpl: void subscribeScanEvents(android.net.wifi.nl80211.IScanEvent)>(r3);

        r23 = new android.net.wifi.nl80211.WifiNl80211Manager$PnoScanEventHandler;

        specialinvoke r23.<android.net.wifi.nl80211.WifiNl80211Manager$PnoScanEventHandler: void <init>(android.net.wifi.nl80211.WifiNl80211Manager,java.util.concurrent.Executor,android.net.wifi.nl80211.WifiNl80211Manager$ScanEventCallback)>(r0, r1, r2);

        $r15 = r0.<android.net.wifi.nl80211.WifiNl80211Manager: java.util.HashMap mPnoScanEventHandlers>;

        virtualinvoke $r15.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r19, r23);

        interfaceinvoke r22.<android.net.wifi.nl80211.IWifiScannerImpl: void subscribePnoScanEvents(android.net.wifi.nl80211.IPnoScanEvent)>(r23);

     label10:
        goto label12;

     label11:
        $r17 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "Failed to refresh wificond scanner due to remote exception");

     label12:
        return 1;

     label13:
        $r18 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "Failed to get IClientInterface due to remote exception");

        return 0;

     label14:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "setupInterfaceForClientMode invoked with null callbacks");

        return 0;

        catch android.os.RemoteException from label02 to label03 with label13;
        catch android.os.RemoteException from label05 to label06 with label11;
        catch android.os.RemoteException from label07 to label08 with label11;
        catch android.os.RemoteException from label09 to label10 with label11;
    }

    public boolean setupInterfaceForSoftApMode(java.lang.String)
    {
        android.net.wifi.nl80211.WifiNl80211Manager r0;
        android.net.wifi.nl80211.IApInterface r1;
        boolean $z0;
        android.net.wifi.nl80211.IWificond $r2;
        android.os.IBinder $r3;
        java.util.HashMap $r5;
        android.os.RemoteException $r7;
        java.lang.String r8;

        r0 := @this: android.net.wifi.nl80211.WifiNl80211Manager;

        r8 := @parameter0: java.lang.String;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("WifiNl80211Manager", "Setting up interface for soft ap mode");

        $z0 = specialinvoke r0.<android.net.wifi.nl80211.WifiNl80211Manager: boolean retrieveWificondAndRegisterForDeath()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = r0.<android.net.wifi.nl80211.WifiNl80211Manager: android.net.wifi.nl80211.IWificond mWificond>;

        r1 = interfaceinvoke $r2.<android.net.wifi.nl80211.IWificond: android.net.wifi.nl80211.IApInterface createApInterface(java.lang.String)>(r8);

     label2:
        if r1 != null goto label3;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "Could not get IApInterface instance from wificond");

        return 0;

     label3:
        $r3 = interfaceinvoke r1.<android.net.wifi.nl80211.IApInterface: android.os.IBinder asBinder()>();

        staticinvoke <android.os.Binder: android.os.IBinder allowBlocking(android.os.IBinder)>($r3);

        $r5 = r0.<android.net.wifi.nl80211.WifiNl80211Manager: java.util.HashMap mApInterfaces>;

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r1);

        return 1;

     label4:
        $r7 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "Failed to get IApInterface due to remote exception");

        return 0;

        catch android.os.RemoteException from label1 to label2 with label4;
    }

    public android.net.wifi.nl80211.WifiNl80211Manager$SignalPollResult signalPoll(java.lang.String)
    {
        android.net.wifi.nl80211.WifiNl80211Manager r0;
        int i0, $i2, $i3, $i4, $i5;
        android.net.wifi.nl80211.WifiNl80211Manager$SignalPollResult $r1;
        android.os.RemoteException $r2;
        java.lang.String r3;
        android.net.wifi.nl80211.IClientInterface r4;
        int[] r5;

        r0 := @this: android.net.wifi.nl80211.WifiNl80211Manager;

        r3 := @parameter0: java.lang.String;

        r4 = specialinvoke r0.<android.net.wifi.nl80211.WifiNl80211Manager: android.net.wifi.nl80211.IClientInterface getClientInterface(java.lang.String)>(r3);

        if r4 != null goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "No valid wificond client interface handler");

        return null;

     label1:
        r5 = interfaceinvoke r4.<android.net.wifi.nl80211.IClientInterface: int[] signalPoll()>();

     label2:
        if r5 == null goto label6;

     label3:
        i0 = lengthof r5;

     label4:
        if i0 == 4 goto label5;

        goto label6;

     label5:
        $r1 = new android.net.wifi.nl80211.WifiNl80211Manager$SignalPollResult;

        $i5 = r5[0];

        $i4 = r5[1];

        $i3 = r5[3];

        $i2 = r5[2];

        specialinvoke $r1.<android.net.wifi.nl80211.WifiNl80211Manager$SignalPollResult: void <init>(int,int,int,int)>($i5, $i4, $i3, $i2);

        return $r1;

     label6:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "Invalid signal poll result from wificond");

     label7:
        return null;

     label8:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "Failed to do signal polling due to remote exception");

        return null;

        catch android.os.RemoteException from label1 to label2 with label8;
        catch android.os.RemoteException from label3 to label4 with label8;
        catch android.os.RemoteException from label6 to label7 with label8;
    }

    public boolean startPnoScan(java.lang.String, android.net.wifi.nl80211.PnoSettings, java.util.concurrent.Executor, android.net.wifi.nl80211.WifiNl80211Manager$PnoScanRequestCallback)
    {
        android.net.wifi.nl80211.WifiNl80211Manager r0;
        android.net.wifi.nl80211.PnoSettings r1;
        java.util.concurrent.Executor r2;
        android.net.wifi.nl80211.WifiNl80211Manager$PnoScanRequestCallback r3;
        boolean z0;
        android.os.RemoteException $r6;
        java.lang.String r7;
        android.net.wifi.nl80211.IWifiScannerImpl r8;
        android.net.wifi.nl80211._$$Lambda$ZG2hKx497SbMnsFFcQwIH8UGwrM r9;
        android.net.wifi.nl80211._$$Lambda$eTziUIMwBgXfmQ_0cHdT_qNhkIU r10;

        r0 := @this: android.net.wifi.nl80211.WifiNl80211Manager;

        r7 := @parameter0: java.lang.String;

        r1 := @parameter1: android.net.wifi.nl80211.PnoSettings;

        r2 := @parameter2: java.util.concurrent.Executor;

        r3 := @parameter3: android.net.wifi.nl80211.WifiNl80211Manager$PnoScanRequestCallback;

        r8 = specialinvoke r0.<android.net.wifi.nl80211.WifiNl80211Manager: android.net.wifi.nl80211.IWifiScannerImpl getScannerImpl(java.lang.String)>(r7);

        if r8 != null goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "No valid wificond scanner interface handler");

        return 0;

     label1:
        if r3 == null goto label9;

        if r2 != null goto label2;

        goto label9;

     label2:
        z0 = interfaceinvoke r8.<android.net.wifi.nl80211.IWifiScannerImpl: boolean startPnoScan(android.net.wifi.nl80211.PnoSettings)>(r1);

     label3:
        if z0 == 0 goto label6;

     label4:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r3);

        r9 = new android.net.wifi.nl80211._$$Lambda$ZG2hKx497SbMnsFFcQwIH8UGwrM;

        specialinvoke r9.<android.net.wifi.nl80211._$$Lambda$ZG2hKx497SbMnsFFcQwIH8UGwrM: void <init>(android.net.wifi.nl80211.WifiNl80211Manager$PnoScanRequestCallback)>(r3);

        interfaceinvoke r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r9);

     label5:
        goto label7;

     label6:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r3);

        r10 = new android.net.wifi.nl80211._$$Lambda$eTziUIMwBgXfmQ_0cHdT_qNhkIU;

        specialinvoke r10.<android.net.wifi.nl80211._$$Lambda$eTziUIMwBgXfmQ_0cHdT_qNhkIU: void <init>(android.net.wifi.nl80211.WifiNl80211Manager$PnoScanRequestCallback)>(r3);

        interfaceinvoke r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r10);

     label7:
        return z0;

     label8:
        $r6 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "Failed to start pno scan due to remote exception");

        return 0;

     label9:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "startPnoScan called with a null callback");

        return 0;

        catch android.os.RemoteException from label2 to label3 with label8;
        catch android.os.RemoteException from label4 to label5 with label8;
        catch android.os.RemoteException from label6 to label7 with label8;
    }

    public boolean startScan(java.lang.String, int, java.util.Set, java.util.List)
    {
        android.net.wifi.nl80211.WifiNl80211Manager r0;
        int i0, $i1, $i2;
        android.net.wifi.nl80211.IWifiScannerImpl r1;
        java.util.Iterator r2, r21;
        boolean z0, $z1, $z2, $z4;
        android.net.wifi.nl80211.SingleScanSettings $r3;
        java.util.ArrayList $r4, $r5, $r8, $r9, $r12;
        java.lang.Object $r6, $r10;
        android.net.wifi.nl80211.HiddenNetwork $r7;
        android.net.wifi.nl80211.ChannelSettings $r11;
        android.os.RemoteException $r13;
        java.lang.Throwable $r14;
        java.lang.String r15;
        java.util.Set r16;
        java.util.List r17;
        java.lang.Integer r19;
        byte[] r22;

        r0 := @this: android.net.wifi.nl80211.WifiNl80211Manager;

        r15 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r16 := @parameter2: java.util.Set;

        r17 := @parameter3: java.util.List;

        r1 = specialinvoke r0.<android.net.wifi.nl80211.WifiNl80211Manager: android.net.wifi.nl80211.IWifiScannerImpl getScannerImpl(java.lang.String)>(r15);

        if r1 != null goto label01;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "No valid wificond scanner interface handler");

        return 0;

     label01:
        $r3 = new android.net.wifi.nl80211.SingleScanSettings;

        specialinvoke $r3.<android.net.wifi.nl80211.SingleScanSettings: void <init>()>();

     label02:
        $i1 = staticinvoke <android.net.wifi.nl80211.WifiNl80211Manager: int getScanType(int)>(i0);

        $r3.<android.net.wifi.nl80211.SingleScanSettings: int scanType> = $i1;

     label03:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r3.<android.net.wifi.nl80211.SingleScanSettings: java.util.ArrayList channelSettings> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r3.<android.net.wifi.nl80211.SingleScanSettings: java.util.ArrayList hiddenNetworks> = $r5;

        if r16 == null goto label05;

        r2 = interfaceinvoke r16.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        $z4 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label05;

        $r10 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r19 = (java.lang.Integer) $r10;

        $r11 = new android.net.wifi.nl80211.ChannelSettings;

        specialinvoke $r11.<android.net.wifi.nl80211.ChannelSettings: void <init>()>();

        $i2 = virtualinvoke r19.<java.lang.Integer: int intValue()>();

        $r11.<android.net.wifi.nl80211.ChannelSettings: int frequency> = $i2;

        $r12 = $r3.<android.net.wifi.nl80211.SingleScanSettings: java.util.ArrayList channelSettings>;

        virtualinvoke $r12.<java.util.ArrayList: boolean add(java.lang.Object)>($r11);

        goto label04;

     label05:
        if r17 == null goto label08;

        r21 = interfaceinvoke r17.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z1 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label08;

        $r6 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>();

        r22 = (byte[]) $r6;

        $r7 = new android.net.wifi.nl80211.HiddenNetwork;

        specialinvoke $r7.<android.net.wifi.nl80211.HiddenNetwork: void <init>()>();

        $r7.<android.net.wifi.nl80211.HiddenNetwork: byte[] ssid> = r22;

        $r8 = $r3.<android.net.wifi.nl80211.SingleScanSettings: java.util.ArrayList hiddenNetworks>;

        $z2 = virtualinvoke $r8.<java.util.ArrayList: boolean contains(java.lang.Object)>($r7);

        if $z2 != 0 goto label07;

        $r9 = $r3.<android.net.wifi.nl80211.SingleScanSettings: java.util.ArrayList hiddenNetworks>;

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

     label07:
        goto label06;

     label08:
        z0 = interfaceinvoke r1.<android.net.wifi.nl80211.IWifiScannerImpl: boolean scan(android.net.wifi.nl80211.SingleScanSettings)>($r3);

     label09:
        return z0;

     label10:
        $r13 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "Failed to request scan due to remote exception");

        return 0;

     label11:
        $r14 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WifiNl80211Manager", "Invalid scan type ", $r14);

        return 0;

        catch java.lang.IllegalArgumentException from label02 to label03 with label11;
        catch android.os.RemoteException from label08 to label09 with label10;
    }

    public boolean stopPnoScan(java.lang.String)
    {
        android.net.wifi.nl80211.WifiNl80211Manager r0;
        boolean z0;
        android.os.RemoteException $r1;
        java.lang.String r2;
        android.net.wifi.nl80211.IWifiScannerImpl r3;

        r0 := @this: android.net.wifi.nl80211.WifiNl80211Manager;

        r2 := @parameter0: java.lang.String;

        r3 = specialinvoke r0.<android.net.wifi.nl80211.WifiNl80211Manager: android.net.wifi.nl80211.IWifiScannerImpl getScannerImpl(java.lang.String)>(r2);

        if r3 != null goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "No valid wificond scanner interface handler");

        return 0;

     label1:
        z0 = interfaceinvoke r3.<android.net.wifi.nl80211.IWifiScannerImpl: boolean stopPnoScan()>();

     label2:
        return z0;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "Failed to stop pno scan due to remote exception");

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean tearDownClientInterface(java.lang.String)
    {
        android.net.wifi.nl80211.WifiNl80211Manager r0;
        boolean z0;
        android.net.wifi.nl80211.IClientInterface $r1;
        java.util.HashMap $r2, $r4, $r6, $r8, $r10;
        java.lang.Object $r3;
        android.os.RemoteException $r12, $r13;
        java.lang.String r14;
        android.net.wifi.nl80211.IWifiScannerImpl r15;
        android.net.wifi.nl80211.IWificond r16;

        r0 := @this: android.net.wifi.nl80211.WifiNl80211Manager;

        r14 := @parameter0: java.lang.String;

        $r1 = specialinvoke r0.<android.net.wifi.nl80211.WifiNl80211Manager: android.net.wifi.nl80211.IClientInterface getClientInterface(java.lang.String)>(r14);

        if $r1 != null goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "No valid wificond client interface handler");

        return 0;

     label1:
        $r2 = r0.<android.net.wifi.nl80211.WifiNl80211Manager: java.util.HashMap mWificondScanners>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r14);

        r15 = (android.net.wifi.nl80211.IWifiScannerImpl) $r3;

     label2:
        if r15 == null goto label4;

     label3:
        interfaceinvoke r15.<android.net.wifi.nl80211.IWifiScannerImpl: void unsubscribeScanEvents()>();

        interfaceinvoke r15.<android.net.wifi.nl80211.IWifiScannerImpl: void unsubscribePnoScanEvents()>();

     label4:
        r16 = r0.<android.net.wifi.nl80211.WifiNl80211Manager: android.net.wifi.nl80211.IWificond mWificond>;

        if r16 != null goto label5;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "Reference to wifiCond is null");

        return 0;

     label5:
        z0 = interfaceinvoke r16.<android.net.wifi.nl80211.IWificond: boolean tearDownClientInterface(java.lang.String)>(r14);

     label6:
        if z0 != 0 goto label7;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "Failed to teardown client interface");

        return 0;

     label7:
        $r4 = r0.<android.net.wifi.nl80211.WifiNl80211Manager: java.util.HashMap mClientInterfaces>;

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r14);

        $r6 = r0.<android.net.wifi.nl80211.WifiNl80211Manager: java.util.HashMap mWificondScanners>;

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r14);

        $r8 = r0.<android.net.wifi.nl80211.WifiNl80211Manager: java.util.HashMap mScanEventHandlers>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r14);

        $r10 = r0.<android.net.wifi.nl80211.WifiNl80211Manager: java.util.HashMap mPnoScanEventHandlers>;

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r14);

        return 1;

     label8:
        $r12 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "Failed to teardown client interface due to remote exception");

        return 0;

     label9:
        $r13 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "Failed to unsubscribe wificond scanner due to remote exception");

        return 0;

        catch android.os.RemoteException from label1 to label2 with label9;
        catch android.os.RemoteException from label3 to label4 with label9;
        catch android.os.RemoteException from label5 to label6 with label8;
    }

    public boolean tearDownInterfaces()
    {
        android.net.wifi.nl80211.WifiNl80211Manager r0;
        java.util.Iterator r1;
        boolean $z0, $z1;
        java.util.HashMap $r2;
        java.util.Set $r3;
        android.net.wifi.nl80211.IWificond $r4;
        java.lang.Object $r5, $r6, $r8;
        android.net.wifi.nl80211.IWifiScannerImpl $r7, $r9;
        android.os.RemoteException $r10;
        java.util.Map$Entry r11;

        r0 := @this: android.net.wifi.nl80211.WifiNl80211Manager;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("WifiNl80211Manager", "tearing down interfaces in wificond");

        $z0 = specialinvoke r0.<android.net.wifi.nl80211.WifiNl80211Manager: boolean retrieveWificondAndRegisterForDeath()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = r0.<android.net.wifi.nl80211.WifiNl80211Manager: java.util.HashMap mWificondScanners>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.util.Set entrySet()>();

        r1 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r11 = (java.util.Map$Entry) $r5;

        $r6 = interfaceinvoke r11.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r7 = (android.net.wifi.nl80211.IWifiScannerImpl) $r6;

        interfaceinvoke $r7.<android.net.wifi.nl80211.IWifiScannerImpl: void unsubscribeScanEvents()>();

        $r8 = interfaceinvoke r11.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = (android.net.wifi.nl80211.IWifiScannerImpl) $r8;

        interfaceinvoke $r9.<android.net.wifi.nl80211.IWifiScannerImpl: void unsubscribePnoScanEvents()>();

     label3:
        goto label2;

     label4:
        $r4 = r0.<android.net.wifi.nl80211.WifiNl80211Manager: android.net.wifi.nl80211.IWificond mWificond>;

        interfaceinvoke $r4.<android.net.wifi.nl80211.IWificond: void tearDownInterfaces()>();

        specialinvoke r0.<android.net.wifi.nl80211.WifiNl80211Manager: void clearState()>();

     label5:
        return 1;

     label6:
        $r10 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "Failed to tear down interfaces due to remote exception");

        return 0;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label2 to label3 with label6;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    public boolean tearDownSoftApInterface(java.lang.String)
    {
        android.net.wifi.nl80211.WifiNl80211Manager r0;
        android.net.wifi.nl80211.IWificond r1;
        boolean z0;
        android.net.wifi.nl80211.IApInterface $r2;
        java.util.HashMap $r3, $r5;
        android.os.RemoteException $r7;
        java.lang.String r8;

        r0 := @this: android.net.wifi.nl80211.WifiNl80211Manager;

        r8 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<android.net.wifi.nl80211.WifiNl80211Manager: android.net.wifi.nl80211.IApInterface getApInterface(java.lang.String)>(r8);

        if $r2 != null goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "No valid wificond ap interface handler");

        return 0;

     label1:
        r1 = r0.<android.net.wifi.nl80211.WifiNl80211Manager: android.net.wifi.nl80211.IWificond mWificond>;

        if r1 != null goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "Reference to wifiCond is null");

        return 0;

     label2:
        z0 = interfaceinvoke r1.<android.net.wifi.nl80211.IWificond: boolean tearDownApInterface(java.lang.String)>(r8);

     label3:
        if z0 != 0 goto label4;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "Failed to teardown AP interface");

        return 0;

     label4:
        $r3 = r0.<android.net.wifi.nl80211.WifiNl80211Manager: java.util.HashMap mApInterfaces>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r8);

        $r5 = r0.<android.net.wifi.nl80211.WifiNl80211Manager: java.util.HashMap mApInterfaceListeners>;

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r8);

        return 1;

     label5:
        $r7 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiNl80211Manager", "Failed to teardown AP interface due to remote exception");

        return 0;

        catch android.os.RemoteException from label2 to label3 with label5;
    }

    public static void <clinit>()
    {
        <android.net.wifi.nl80211.WifiNl80211Manager: java.lang.String TIMEOUT_ALARM_TAG> = "WifiNl80211Manager Send Management Frame Timeout";

        <android.net.wifi.nl80211.WifiNl80211Manager: java.lang.String TAG> = "WifiNl80211Manager";

        <android.net.wifi.nl80211.WifiNl80211Manager: int SEND_MGMT_FRAME_TIMEOUT_MS> = 1000;

        <android.net.wifi.nl80211.WifiNl80211Manager: int SEND_MGMT_FRAME_ERROR_UNKNOWN> = 1;

        <android.net.wifi.nl80211.WifiNl80211Manager: int SEND_MGMT_FRAME_ERROR_TIMEOUT> = 4;

        <android.net.wifi.nl80211.WifiNl80211Manager: int SEND_MGMT_FRAME_ERROR_NO_ACK> = 3;

        <android.net.wifi.nl80211.WifiNl80211Manager: int SEND_MGMT_FRAME_ERROR_MCS_UNSUPPORTED> = 2;

        <android.net.wifi.nl80211.WifiNl80211Manager: int SEND_MGMT_FRAME_ERROR_ALREADY_STARTED> = 5;

        <android.net.wifi.nl80211.WifiNl80211Manager: int SCAN_TYPE_SINGLE_SCAN> = 0;

        <android.net.wifi.nl80211.WifiNl80211Manager: int SCAN_TYPE_PNO_SCAN> = 1;

        return;
    }
}
