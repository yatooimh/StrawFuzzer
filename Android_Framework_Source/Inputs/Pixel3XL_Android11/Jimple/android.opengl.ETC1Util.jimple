public class android.opengl.ETC1Util extends java.lang.Object
{

    public void <init>()
    {
        android.opengl.ETC1Util r0;

        r0 := @this: android.opengl.ETC1Util;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static android.opengl.ETC1Util$ETC1Texture compressTexture(java.nio.Buffer, int, int, int, int)
    {
        java.nio.Buffer r0;
        int i0, i1, i2, i3, $i4;
        java.nio.ByteBuffer r1, $r2;
        java.nio.ByteOrder $r3;
        android.opengl.ETC1Util$ETC1Texture $r4;

        r0 := @parameter0: java.nio.Buffer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $i4 = staticinvoke <android.opengl.ETC1: int getEncodedDataSize(int,int)>(i0, i1);

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>($i4);

        $r3 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        r1 = virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r3);

        staticinvoke <android.opengl.ETC1: void encodeImage(java.nio.Buffer,int,int,int,int,java.nio.Buffer)>(r0, i0, i1, i2, i3, r1);

        $r4 = new android.opengl.ETC1Util$ETC1Texture;

        specialinvoke $r4.<android.opengl.ETC1Util$ETC1Texture: void <init>(int,int,java.nio.ByteBuffer)>(i0, i1, r1);

        return $r4;
    }

    public static android.opengl.ETC1Util$ETC1Texture createTexture(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        byte[] r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, i8;
        java.io.IOException $r2, $r7, $r12;
        java.nio.ByteBuffer $r3, $r5, $r8, r14, r15;
        java.nio.ByteOrder $r4, $r9;
        boolean $z0;
        android.opengl.ETC1Util$ETC1Texture $r11;

        r0 := @parameter0: java.io.InputStream;

        r1 = newarray (byte)[4096];

        $i4 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>(r1, 0, 16);

        if $i4 != 16 goto label5;

        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(16);

        $r4 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        r14 = virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r4);

        $r5 = virtualinvoke r14.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>(r1, 0, 16);

        virtualinvoke $r5.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0);

        $z0 = staticinvoke <android.opengl.ETC1: boolean isValid(java.nio.Buffer)>(r14);

        if $z0 == 0 goto label4;

        i0 = staticinvoke <android.opengl.ETC1: int getWidth(java.nio.Buffer)>(r14);

        i1 = staticinvoke <android.opengl.ETC1: int getHeight(java.nio.Buffer)>(r14);

        i2 = staticinvoke <android.opengl.ETC1: int getEncodedDataSize(int,int)>(i0, i1);

        $r8 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(i2);

        $r9 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        r15 = virtualinvoke $r8.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r9);

        i8 = 0;

     label1:
        if i8 >= i2 goto label3;

        $i6 = lengthof r1;

        $i5 = i2 - i8;

        i3 = staticinvoke <java.lang.Math: int min(int,int)>($i6, $i5);

        $i7 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>(r1, 0, i3);

        if $i7 != i3 goto label2;

        virtualinvoke r15.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>(r1, 0, i3);

        i8 = i8 + i3;

        goto label1;

     label2:
        $r12 = new java.io.IOException;

        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>("Unable to read PKM file data.");

        throw $r12;

     label3:
        virtualinvoke r15.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0);

        $r11 = new android.opengl.ETC1Util$ETC1Texture;

        specialinvoke $r11.<android.opengl.ETC1Util$ETC1Texture: void <init>(int,int,java.nio.ByteBuffer)>(i0, i1, r15);

        return $r11;

     label4:
        $r7 = new java.io.IOException;

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>("Not a PKM file.");

        throw $r7;

     label5:
        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Unable to read PKM file header.");

        throw $r2;
    }

    public static boolean isETC1Supported()
    {
        int[] r0, r1;
        int i0, $i1, $i2, i3;

        r0 = newarray (int)[20];

        staticinvoke <android.opengl.GLES10: void glGetIntegerv(int,int[],int)>(34466, r0, 0);

        i0 = r0[0];

        r1 = r0;

        $i1 = lengthof r0;

        if i0 <= $i1 goto label1;

        r1 = newarray (int)[i0];

     label1:
        staticinvoke <android.opengl.GLES10: void glGetIntegerv(int,int[],int)>(34467, r1, 0);

        i3 = 0;

     label2:
        if i3 >= i0 goto label4;

        $i2 = r1[i3];

        if $i2 != 36196 goto label3;

        return 1;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 0;
    }

    public static void loadTexture(int, int, int, int, int, android.opengl.ETC1Util$ETC1Texture)
    {
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9;
        java.nio.ByteBuffer r0, $r2, r6;
        java.lang.IllegalArgumentException $r1, $r4;
        boolean $z0, z1;
        java.nio.ByteOrder $r3;
        android.opengl.ETC1Util$ETC1Texture r5;
        byte b10;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        r5 := @parameter5: android.opengl.ETC1Util$ETC1Texture;

        if i3 != 6407 goto label9;

        if i4 == 33635 goto label2;

        if i4 != 5121 goto label1;

        goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unsupported fallbackType");

        throw $r4;

     label2:
        i5 = virtualinvoke r5.<android.opengl.ETC1Util$ETC1Texture: int getWidth()>();

        i6 = virtualinvoke r5.<android.opengl.ETC1Util$ETC1Texture: int getHeight()>();

        r6 = virtualinvoke r5.<android.opengl.ETC1Util$ETC1Texture: java.nio.ByteBuffer getData()>();

        $z0 = staticinvoke <android.opengl.ETC1Util: boolean isETC1Supported()>();

        if $z0 == 0 goto label3;

        $i9 = virtualinvoke r6.<java.nio.Buffer: int remaining()>();

        staticinvoke <android.opengl.GLES10: void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer)>(i0, i1, 36196, i5, i6, i2, $i9, r6);

        goto label8;

     label3:
        if i4 == 5121 goto label4;

        z1 = 1;

        goto label5;

     label4:
        z1 = 0;

     label5:
        if z1 == 0 goto label6;

        b10 = 2;

        goto label7;

     label6:
        b10 = 3;

     label7:
        i7 = b10 * i5;

        $i8 = i7 * i6;

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>($i8);

        $r3 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        r0 = virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r3);

        staticinvoke <android.opengl.ETC1: void decodeImage(java.nio.Buffer,java.nio.Buffer,int,int,int,int)>(r6, r0, i5, i6, b10, i7);

        staticinvoke <android.opengl.GLES10: void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)>(i0, i1, i3, i5, i6, i2, i3, i4, r0);

     label8:
        return;

     label9:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("fallbackFormat must be GL_RGB");

        throw $r1;
    }

    public static void loadTexture(int, int, int, int, int, java.io.InputStream) throws java.io.IOException
    {
        int i0, i1, i2, i3, i4;
        java.io.InputStream r0;
        android.opengl.ETC1Util$ETC1Texture $r1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        r0 := @parameter5: java.io.InputStream;

        $r1 = staticinvoke <android.opengl.ETC1Util: android.opengl.ETC1Util$ETC1Texture createTexture(java.io.InputStream)>(r0);

        staticinvoke <android.opengl.ETC1Util: void loadTexture(int,int,int,int,int,android.opengl.ETC1Util$ETC1Texture)>(i0, i1, i2, i3, i4, $r1);

        return;
    }

    public static void writeTexture(android.opengl.ETC1Util$ETC1Texture, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r0;
        java.nio.ByteBuffer r1, r2, $r3;
        int i0, i1, $i2, $i3, i4, i5, i6, i7;
        java.nio.ByteOrder $r4;
        java.lang.Throwable $r8;
        android.opengl.ETC1Util$ETC1Texture r10;
        byte[] r11;

        r10 := @parameter0: android.opengl.ETC1Util$ETC1Texture;

        r0 := @parameter1: java.io.OutputStream;

        r1 = virtualinvoke r10.<android.opengl.ETC1Util$ETC1Texture: java.nio.ByteBuffer getData()>();

        i0 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

     label1:
        i4 = virtualinvoke r10.<android.opengl.ETC1Util$ETC1Texture: int getWidth()>();

        i5 = virtualinvoke r10.<android.opengl.ETC1Util$ETC1Texture: int getHeight()>();

        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(16);

        $r4 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        r2 = virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r4);

        staticinvoke <android.opengl.ETC1: void formatHeader(java.nio.Buffer,int,int)>(r2, i4, i5);

        r11 = newarray (byte)[4096];

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r11, 0, 16);

        virtualinvoke r0.<java.io.OutputStream: void write(byte[],int,int)>(r11, 0, 16);

        i6 = staticinvoke <android.opengl.ETC1: int getEncodedDataSize(int,int)>(i4, i5);

     label2:
        i7 = 0;

     label3:
        if i7 >= i6 goto label6;

     label4:
        $i3 = lengthof r11;

        $i2 = i6 - i7;

        i1 = staticinvoke <java.lang.Math: int min(int,int)>($i3, $i2);

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r11, 0, i1);

        virtualinvoke r0.<java.io.OutputStream: void write(byte[],int,int)>(r11, 0, i1);

     label5:
        i7 = i7 + i1;

        goto label3;

     label6:
        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i0);

        return;

     label7:
        $r8 := @caughtexception;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i0);

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
    }
}
