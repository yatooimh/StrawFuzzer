public class android.opengl.Matrix extends java.lang.Object
{
    private static final float[] sTemp;

    static void <clinit>()
    {
        float[] $r0;

        $r0 = newarray (float)[32];

        <android.opengl.Matrix: float[] sTemp> = $r0;

        return;
    }

    public void <init>()
    {
        android.opengl.Matrix r0;

        r0 := @this: android.opengl.Matrix;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void frustumM(float[], int, float, float, float, float, float, float)
    {
        float[] r0;
        int i0, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21;
        float f0, f1, f2, f3, f4, f5, f6, f7, f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24;
        byte $b1, $b2, $b3, $b4, $b5;
        java.lang.IllegalArgumentException $r1, $r2, $r3, $r4, $r5;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        f2 := @parameter4: float;

        f3 := @parameter5: float;

        f4 := @parameter6: float;

        f5 := @parameter7: float;

        $b1 = f0 cmpl f1;

        if $b1 == 0 goto label5;

        $b2 = f3 cmpl f2;

        if $b2 == 0 goto label4;

        $b3 = f4 cmpl f5;

        if $b3 == 0 goto label3;

        $b4 = f4 cmpg 0.0F;

        if $b4 <= 0 goto label2;

        $b5 = f5 cmpg 0.0F;

        if $b5 <= 0 goto label1;

        $f9 = f1 - f0;

        f6 = 1.0F / $f9;

        $f10 = f3 - f2;

        f7 = 1.0F / $f10;

        $f11 = f4 - f5;

        f8 = 1.0F / $f11;

        $i6 = i0 + 0;

        $f12 = f4 * f6;

        $f13 = $f12 * 2.0F;

        r0[$i6] = $f13;

        $i7 = i0 + 5;

        $f14 = f4 * f7;

        $f15 = $f14 * 2.0F;

        r0[$i7] = $f15;

        $i8 = i0 + 8;

        $f16 = f1 + f0;

        $f17 = $f16 * f6;

        r0[$i8] = $f17;

        $i9 = i0 + 9;

        $f18 = f3 + f2;

        $f19 = $f18 * f7;

        r0[$i9] = $f19;

        $i10 = i0 + 10;

        $f20 = f5 + f4;

        $f21 = $f20 * f8;

        r0[$i10] = $f21;

        $i11 = i0 + 14;

        $f22 = f5 * f4;

        $f23 = $f22 * f8;

        $f24 = $f23 * 2.0F;

        r0[$i11] = $f24;

        $i12 = i0 + 11;

        r0[$i12] = -1.0F;

        $i13 = i0 + 1;

        r0[$i13] = 0.0F;

        $i14 = i0 + 2;

        r0[$i14] = 0.0F;

        $i15 = i0 + 3;

        r0[$i15] = 0.0F;

        $i16 = i0 + 4;

        r0[$i16] = 0.0F;

        $i17 = i0 + 6;

        r0[$i17] = 0.0F;

        $i18 = i0 + 7;

        r0[$i18] = 0.0F;

        $i19 = i0 + 12;

        r0[$i19] = 0.0F;

        $i20 = i0 + 13;

        r0[$i20] = 0.0F;

        $i21 = i0 + 15;

        r0[$i21] = 0.0F;

        return;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("far <= 0.0f");

        throw $r5;

     label2:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("near <= 0.0f");

        throw $r4;

     label3:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("near == far");

        throw $r3;

     label4:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("top == bottom");

        throw $r2;

     label5:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("left == right");

        throw $r1;
    }

    public static boolean invertM(float[], int, float[], int)
    {
        float[] r0, r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33;
        float f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, $f36, $f37, $f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45, $f46, $f47, $f48, $f49, $f50, $f51, $f52, $f53, $f54, $f55, $f56, $f57, $f58, $f59, $f60, $f61, $f62, $f63, $f64, $f65, $f66, $f67, $f68, $f69, $f70, $f71, $f72, $f73, $f74, $f75, $f76, $f77, $f78, $f79, $f80, $f81, $f82, $f83, $f84, $f85, $f86, $f87, $f88, $f89, $f90, $f91, $f92, $f93, $f94, $f95, $f96, $f97, $f98, $f99, $f100, $f101, $f102, $f103, $f104, $f105, $f106, $f107, $f108, $f109, $f110, $f111, $f112, $f113, $f114, $f115, $f116, $f117, $f118, $f119, $f120, $f121, $f122, $f123, $f124, $f125, $f126, $f127, $f128, $f129, $f130, $f131, $f132, $f133, $f134, $f135, $f136, $f137, $f138, $f139, $f140, $f141, $f142, $f143, $f144, $f145, $f146, $f147, $f148, $f149, $f150, $f151, $f152, $f153, $f154, $f155, $f156, $f157, $f158, $f159, $f160, $f161, $f162, $f163, $f164, $f165, $f166, $f167, $f168, $f169, $f170, $f171, $f172, $f173, $f174, $f175, $f176, $f177, $f178, $f179, $f180, $f181, $f182, $f183, $f184, $f185, $f186, $f187, $f188, $f189, $f190, $f191, $f192, $f193, $f194, $f195, $f196, $f197, $f198, $f199, $f200, $f201, $f202, $f203, $f204, $f205, $f206, $f207, $f208, $f209, $f210, $f211, $f212, $f213, $f214, $f215, $f216, $f217, $f218, $f219, $f220, $f221, $f222, $f223, $f224, $f225, $f226, $f227, $f228, $f229, f230, f231, f232, f233, f234, f235, f236, f237, f238, f239;
        byte $b18;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        r1 := @parameter2: float[];

        i1 := @parameter3: int;

        $i2 = i1 + 0;

        f0 = r1[$i2];

        $i3 = i1 + 1;

        f230 = r1[$i3];

        $i4 = i1 + 2;

        f1 = r1[$i4];

        $i5 = i1 + 3;

        f2 = r1[$i5];

        $i6 = i1 + 4;

        f3 = r1[$i6];

        $i7 = i1 + 5;

        f231 = r1[$i7];

        $i8 = i1 + 6;

        f4 = r1[$i8];

        $i9 = i1 + 7;

        f5 = r1[$i9];

        $i10 = i1 + 8;

        f6 = r1[$i10];

        $i11 = i1 + 9;

        f232 = r1[$i11];

        $i12 = i1 + 10;

        f7 = r1[$i12];

        $i13 = i1 + 11;

        f8 = r1[$i13];

        $i14 = i1 + 12;

        f9 = r1[$i14];

        $i15 = i1 + 13;

        f233 = r1[$i15];

        $i16 = i1 + 14;

        f10 = r1[$i16];

        $i17 = i1 + 15;

        f11 = r1[$i17];

        f12 = f7 * f11;

        f13 = f10 * f8;

        f14 = f4 * f11;

        f15 = f10 * f5;

        f16 = f4 * f8;

        f17 = f7 * f5;

        f18 = f1 * f11;

        f19 = f10 * f2;

        f20 = f1 * f8;

        f21 = f7 * f2;

        f22 = f1 * f5;

        f23 = f4 * f2;

        $f37 = f12 * f231;

        $f36 = f15 * f232;

        $f39 = $f37 + $f36;

        $f38 = f16 * f233;

        $f45 = $f39 + $f38;

        $f41 = f13 * f231;

        $f40 = f14 * f232;

        $f43 = $f41 + $f40;

        $f42 = f17 * f233;

        $f44 = $f43 + $f42;

        f24 = $f45 - $f44;

        $f47 = f13 * f230;

        $f46 = f18 * f232;

        $f49 = $f47 + $f46;

        $f48 = f21 * f233;

        $f55 = $f49 + $f48;

        $f51 = f12 * f230;

        $f50 = f19 * f232;

        $f53 = $f51 + $f50;

        $f52 = f20 * f233;

        $f54 = $f53 + $f52;

        f25 = $f55 - $f54;

        $f57 = f14 * f230;

        $f56 = f19 * f231;

        $f59 = $f57 + $f56;

        $f58 = f22 * f233;

        $f65 = $f59 + $f58;

        $f61 = f15 * f230;

        $f60 = f18 * f231;

        $f63 = $f61 + $f60;

        $f62 = f23 * f233;

        $f64 = $f63 + $f62;

        f26 = $f65 - $f64;

        $f67 = f17 * f230;

        $f66 = f20 * f231;

        $f69 = $f67 + $f66;

        $f68 = f23 * f232;

        $f75 = $f69 + $f68;

        $f71 = f16 * f230;

        $f70 = f21 * f231;

        $f73 = $f71 + $f70;

        $f72 = f22 * f232;

        $f74 = $f73 + $f72;

        f27 = $f75 - $f74;

        f28 = f6 * f233;

        f29 = f9 * f232;

        f30 = f3 * f233;

        f31 = f9 * f231;

        f32 = f3 * f232;

        f33 = f6 * f231;

        f234 = f0 * f233;

        f34 = f9 * f230;

        f235 = f0 * f232;

        f35 = f6 * f230;

        f236 = f0 * f231;

        f237 = f3 * f230;

        $f77 = f0 * f24;

        $f76 = f3 * f25;

        $f79 = $f77 + $f76;

        $f78 = f6 * f26;

        $f81 = $f79 + $f78;

        $f80 = f9 * f27;

        f238 = $f81 + $f80;

        $b18 = f238 cmpl 0.0F;

        if $b18 != 0 goto label1;

        return 0;

     label1:
        f239 = 1.0F / f238;

        $f82 = f24 * f239;

        r0[i0] = $f82;

        $i19 = i0 + 1;

        $f83 = f25 * f239;

        r0[$i19] = $f83;

        $i20 = i0 + 2;

        $f84 = f26 * f239;

        r0[$i20] = $f84;

        $i21 = i0 + 3;

        $f85 = f27 * f239;

        r0[$i21] = $f85;

        $i22 = i0 + 4;

        $f87 = f13 * f3;

        $f86 = f14 * f6;

        $f89 = $f87 + $f86;

        $f88 = f17 * f9;

        $f95 = $f89 + $f88;

        $f91 = f12 * f3;

        $f90 = f15 * f6;

        $f93 = $f91 + $f90;

        $f92 = f16 * f9;

        $f94 = $f93 + $f92;

        $f96 = $f95 - $f94;

        $f97 = $f96 * f239;

        r0[$i22] = $f97;

        $i23 = i0 + 5;

        $f99 = f12 * f0;

        $f98 = f19 * f6;

        $f101 = $f99 + $f98;

        $f100 = f20 * f9;

        $f107 = $f101 + $f100;

        $f103 = f13 * f0;

        $f102 = f18 * f6;

        $f105 = $f103 + $f102;

        $f104 = f21 * f9;

        $f106 = $f105 + $f104;

        $f108 = $f107 - $f106;

        $f109 = $f108 * f239;

        r0[$i23] = $f109;

        $i24 = i0 + 6;

        $f111 = f15 * f0;

        $f110 = f18 * f3;

        $f113 = $f111 + $f110;

        $f112 = f23 * f9;

        $f119 = $f113 + $f112;

        $f115 = f14 * f0;

        $f114 = f19 * f3;

        $f117 = $f115 + $f114;

        $f116 = f22 * f9;

        $f118 = $f117 + $f116;

        $f120 = $f119 - $f118;

        $f121 = $f120 * f239;

        r0[$i24] = $f121;

        $i25 = i0 + 7;

        $f123 = f16 * f0;

        $f122 = f21 * f3;

        $f125 = $f123 + $f122;

        $f124 = f22 * f6;

        $f131 = $f125 + $f124;

        $f127 = f17 * f0;

        $f126 = f20 * f3;

        $f129 = $f127 + $f126;

        $f128 = f23 * f6;

        $f130 = $f129 + $f128;

        $f132 = $f131 - $f130;

        $f133 = $f132 * f239;

        r0[$i25] = $f133;

        $i26 = i0 + 8;

        $f135 = f28 * f5;

        $f134 = f31 * f8;

        $f137 = $f135 + $f134;

        $f136 = f32 * f11;

        $f143 = $f137 + $f136;

        $f139 = f29 * f5;

        $f138 = f30 * f8;

        $f141 = $f139 + $f138;

        $f140 = f33 * f11;

        $f142 = $f141 + $f140;

        $f144 = $f143 - $f142;

        $f145 = $f144 * f239;

        r0[$i26] = $f145;

        $i27 = i0 + 9;

        $f147 = f29 * f2;

        $f146 = f234 * f8;

        $f149 = $f147 + $f146;

        $f148 = f35 * f11;

        $f155 = $f149 + $f148;

        $f151 = f28 * f2;

        $f150 = f34 * f8;

        $f153 = $f151 + $f150;

        $f152 = f235 * f11;

        $f154 = $f153 + $f152;

        $f156 = $f155 - $f154;

        $f157 = $f156 * f239;

        r0[$i27] = $f157;

        $i28 = i0 + 10;

        $f159 = f30 * f2;

        $f158 = f34 * f5;

        $f161 = $f159 + $f158;

        $f160 = f236 * f11;

        $f167 = $f161 + $f160;

        $f163 = f31 * f2;

        $f162 = f234 * f5;

        $f165 = $f163 + $f162;

        $f164 = f237 * f11;

        $f166 = $f165 + $f164;

        $f168 = $f167 - $f166;

        $f169 = $f168 * f239;

        r0[$i28] = $f169;

        $i29 = i0 + 11;

        $f171 = f33 * f2;

        $f170 = f235 * f5;

        $f173 = $f171 + $f170;

        $f172 = f237 * f8;

        $f179 = $f173 + $f172;

        $f175 = f32 * f2;

        $f174 = f35 * f5;

        $f177 = $f175 + $f174;

        $f176 = f236 * f8;

        $f178 = $f177 + $f176;

        $f180 = $f179 - $f178;

        $f181 = $f180 * f239;

        r0[$i29] = $f181;

        $i30 = i0 + 12;

        $f183 = f30 * f7;

        $f182 = f33 * f10;

        $f185 = $f183 + $f182;

        $f184 = f29 * f4;

        $f191 = $f185 + $f184;

        $f187 = f32 * f10;

        $f186 = f28 * f4;

        $f189 = $f187 + $f186;

        $f188 = f31 * f7;

        $f190 = $f189 + $f188;

        $f192 = $f191 - $f190;

        $f193 = $f192 * f239;

        r0[$i30] = $f193;

        $i31 = i0 + 13;

        $f195 = f235 * f10;

        $f194 = f28 * f1;

        $f197 = $f195 + $f194;

        $f196 = f34 * f7;

        $f203 = $f197 + $f196;

        $f199 = f234 * f7;

        $f198 = f35 * f10;

        $f201 = $f199 + $f198;

        $f200 = f29 * f1;

        $f202 = $f201 + $f200;

        $f204 = $f203 - $f202;

        $f205 = $f204 * f239;

        r0[$i31] = $f205;

        $i32 = i0 + 14;

        $f207 = f234 * f4;

        $f206 = f237 * f10;

        $f209 = $f207 + $f206;

        $f208 = f31 * f1;

        $f215 = $f209 + $f208;

        $f211 = f236 * f10;

        $f210 = f30 * f1;

        $f213 = $f211 + $f210;

        $f212 = f34 * f4;

        $f214 = $f213 + $f212;

        $f216 = $f215 - $f214;

        $f217 = $f216 * f239;

        r0[$i32] = $f217;

        $i33 = i0 + 15;

        $f219 = f236 * f7;

        $f218 = f32 * f1;

        $f221 = $f219 + $f218;

        $f220 = f35 * f4;

        $f227 = $f221 + $f220;

        $f223 = f235 * f4;

        $f222 = f237 * f7;

        $f225 = $f223 + $f222;

        $f224 = f33 * f1;

        $f226 = $f225 + $f224;

        $f228 = $f227 - $f226;

        $f229 = $f228 * f239;

        r0[$i33] = $f229;

        return 1;
    }

    public static float length(float, float, float)
    {
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8;
        double $d0, $d1;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        $f4 = f0 * f0;

        $f3 = f1 * f1;

        $f6 = $f4 + $f3;

        $f5 = f2 * f2;

        $f7 = $f6 + $f5;

        $d0 = (double) $f7;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $f8 = (float) $d1;

        return $f8;
    }

    public static native void multiplyMM(float[], int, float[], int, float[], int);

    public static native void multiplyMV(float[], int, float[], int, float[], int);

    public static void orthoM(float[], int, float, float, float, float, float, float)
    {
        float[] r0;
        int i0, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        float f0, f1, f2, f3, f4, f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, f18, f19, f20, f21, f22, f23;
        byte $b1, $b2, $b3;
        java.lang.IllegalArgumentException $r1, $r2, $r3;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        f18 := @parameter2: float;

        f19 := @parameter3: float;

        f20 := @parameter4: float;

        f0 := @parameter5: float;

        f1 := @parameter6: float;

        f2 := @parameter7: float;

        $b1 = f18 cmpl f19;

        if $b1 == 0 goto label3;

        $b2 = f20 cmpl f0;

        if $b2 == 0 goto label2;

        $b3 = f1 cmpl f2;

        if $b3 == 0 goto label1;

        $f6 = f19 - f18;

        f3 = 1.0F / $f6;

        $f7 = f0 - f20;

        f4 = 1.0F / $f7;

        $f8 = f2 - f1;

        f5 = 1.0F / $f8;

        $f9 = f19 + f18;

        f21 = neg $f9;

        $f10 = f0 + f20;

        f22 = neg $f10;

        $f11 = f2 + f1;

        f23 = neg $f11;

        $i4 = i0 + 0;

        $f12 = f3 * 2.0F;

        r0[$i4] = $f12;

        $i5 = i0 + 5;

        $f13 = 2.0F * f4;

        r0[$i5] = $f13;

        $i6 = i0 + 10;

        $f14 = -2.0F * f5;

        r0[$i6] = $f14;

        $i7 = i0 + 12;

        $f15 = f21 * f3;

        r0[$i7] = $f15;

        $i8 = i0 + 13;

        $f16 = f22 * f4;

        r0[$i8] = $f16;

        $i9 = i0 + 14;

        $f17 = f23 * f5;

        r0[$i9] = $f17;

        $i10 = i0 + 15;

        r0[$i10] = 1.0F;

        $i11 = i0 + 1;

        r0[$i11] = 0.0F;

        $i12 = i0 + 2;

        r0[$i12] = 0.0F;

        $i13 = i0 + 3;

        r0[$i13] = 0.0F;

        $i14 = i0 + 4;

        r0[$i14] = 0.0F;

        $i15 = i0 + 6;

        r0[$i15] = 0.0F;

        $i16 = i0 + 7;

        r0[$i16] = 0.0F;

        $i17 = i0 + 8;

        r0[$i17] = 0.0F;

        $i18 = i0 + 9;

        r0[$i18] = 0.0F;

        $i19 = i0 + 11;

        r0[$i19] = 0.0F;

        return;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("near == far");

        throw $r3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("bottom == top");

        throw $r2;

     label3:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("left == right");

        throw $r1;
    }

    public static void perspectiveM(float[], int, float, float, float, float)
    {
        float[] r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        float f0, f1, f2, f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, f12, f13;
        double $d0, $d1, $d2;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        f12 := @parameter2: float;

        f0 := @parameter3: float;

        f1 := @parameter4: float;

        f2 := @parameter5: float;

        $d0 = (double) f12;

        $d1 = $d0 * 0.008726646259971648;

        $d2 = staticinvoke <java.lang.Math: double tan(double)>($d1);

        $f4 = (float) $d2;

        f13 = 1.0F / $f4;

        $f5 = f1 - f2;

        f3 = 1.0F / $f5;

        $i1 = i0 + 0;

        $f6 = f13 / f0;

        r0[$i1] = $f6;

        $i2 = i0 + 1;

        r0[$i2] = 0.0F;

        $i3 = i0 + 2;

        r0[$i3] = 0.0F;

        $i4 = i0 + 3;

        r0[$i4] = 0.0F;

        $i5 = i0 + 4;

        r0[$i5] = 0.0F;

        $i6 = i0 + 5;

        r0[$i6] = f13;

        $i7 = i0 + 6;

        r0[$i7] = 0.0F;

        $i8 = i0 + 7;

        r0[$i8] = 0.0F;

        $i9 = i0 + 8;

        r0[$i9] = 0.0F;

        $i10 = i0 + 9;

        r0[$i10] = 0.0F;

        $i11 = i0 + 10;

        $f7 = f2 + f1;

        $f8 = $f7 * f3;

        r0[$i11] = $f8;

        $i12 = i0 + 11;

        r0[$i12] = -1.0F;

        $i13 = i0 + 12;

        r0[$i13] = 0.0F;

        $i14 = i0 + 13;

        r0[$i14] = 0.0F;

        $i15 = i0 + 14;

        $f9 = 2.0F * f2;

        $f10 = $f9 * f1;

        $f11 = $f10 * f3;

        r0[$i15] = $f11;

        $i16 = i0 + 15;

        r0[$i16] = 0.0F;

        return;
    }

    public static void rotateM(float[], int, float, float, float, float)
    {
        int i0;
        float f0, f1, f2, f3;
        float[] r0, $r1, $r2, $r3, $r4, r6;
        java.lang.Throwable $r5;

        r6 := @parameter0: float[];

        i0 := @parameter1: int;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        f2 := @parameter4: float;

        f3 := @parameter5: float;

        r0 = <android.opengl.Matrix: float[] sTemp>;

        entermonitor r0;

     label1:
        $r1 = <android.opengl.Matrix: float[] sTemp>;

        staticinvoke <android.opengl.Matrix: void setRotateM(float[],int,float,float,float,float)>($r1, 0, f0, f1, f2, f3);

        $r3 = <android.opengl.Matrix: float[] sTemp>;

        $r2 = <android.opengl.Matrix: float[] sTemp>;

        staticinvoke <android.opengl.Matrix: void multiplyMM(float[],int,float[],int,float[],int)>($r3, 16, r6, i0, $r2, 0);

        $r4 = <android.opengl.Matrix: float[] sTemp>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 16, r6, i0, 16);

        exitmonitor r0;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static void rotateM(float[], int, float[], int, float, float, float, float)
    {
        int i0, i1;
        float[] r0, r1, $r2, $r3, r5;
        float f0, f1, f2, f3;
        java.lang.Throwable $r4;

        r5 := @parameter0: float[];

        i0 := @parameter1: int;

        r0 := @parameter2: float[];

        i1 := @parameter3: int;

        f0 := @parameter4: float;

        f1 := @parameter5: float;

        f2 := @parameter6: float;

        f3 := @parameter7: float;

        r1 = <android.opengl.Matrix: float[] sTemp>;

        entermonitor r1;

     label1:
        $r2 = <android.opengl.Matrix: float[] sTemp>;

        staticinvoke <android.opengl.Matrix: void setRotateM(float[],int,float,float,float,float)>($r2, 0, f0, f1, f2, f3);

        $r3 = <android.opengl.Matrix: float[] sTemp>;

        staticinvoke <android.opengl.Matrix: void multiplyMM(float[],int,float[],int,float[],int)>(r5, i0, r0, i1, $r3, 0);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static void scaleM(float[], int, float, float, float)
    {
        float[] r0;
        int i0, i1, i2, i3, i4;
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        f2 := @parameter4: float;

        i2 = 0;

     label1:
        if i2 >= 4 goto label2;

        i1 = i0 + i2;

        $f3 = r0[i1];

        $f4 = $f3 * f0;

        r0[i1] = $f4;

        i3 = i1 + 4;

        $f5 = r0[i3];

        $f6 = $f5 * f1;

        r0[i3] = $f6;

        i4 = i1 + 8;

        $f7 = r0[i4];

        $f8 = $f7 * f2;

        r0[i4] = $f8;

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public static void scaleM(float[], int, float[], int, float, float, float)
    {
        float[] r0, r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, i10;
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        r1 := @parameter2: float[];

        i1 := @parameter3: int;

        f0 := @parameter4: float;

        f1 := @parameter5: float;

        f2 := @parameter6: float;

        i10 = 0;

     label1:
        if i10 >= 4 goto label2;

        i2 = i0 + i10;

        i3 = i1 + i10;

        $f3 = r1[i3];

        $f4 = $f3 * f0;

        r0[i2] = $f4;

        $i5 = i2 + 4;

        $i4 = i3 + 4;

        $f5 = r1[$i4];

        $f6 = $f5 * f1;

        r0[$i5] = $f6;

        $i7 = i2 + 8;

        $i6 = i3 + 8;

        $f7 = r1[$i6];

        $f8 = $f7 * f2;

        r0[$i7] = $f8;

        $i9 = i2 + 12;

        $i8 = i3 + 12;

        $f9 = r1[$i8];

        r0[$i9] = $f9;

        i10 = i10 + 1;

        goto label1;

     label2:
        return;
    }

    public static void setIdentityM(float[], int)
    {
        float[] r0;
        int i0, $i1, $i2, i3, i4;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        i3 = 0;

     label1:
        if i3 >= 16 goto label2;

        $i2 = i0 + i3;

        r0[$i2] = 0.0F;

        i3 = i3 + 1;

        goto label1;

     label2:
        i4 = 0;

     label3:
        if i4 >= 16 goto label4;

        $i1 = i0 + i4;

        r0[$i1] = 1.0F;

        i4 = i4 + 5;

        goto label3;

     label4:
        return;
    }

    public static void setLookAtM(float[], int, float, float, float, float, float, float, float, float, float)
    {
        float[] r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        float f0, f1, f2, f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, f44, f45;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        f2 := @parameter4: float;

        f27 := @parameter5: float;

        f28 := @parameter6: float;

        f29 := @parameter7: float;

        f30 := @parameter8: float;

        f31 := @parameter9: float;

        f32 := @parameter10: float;

        f33 = f27 - f0;

        f34 = f28 - f1;

        f35 = f29 - f2;

        $f4 = staticinvoke <android.opengl.Matrix: float length(float,float,float)>(f33, f34, f35);

        f36 = 1.0F / $f4;

        f37 = f33 * f36;

        f38 = f34 * f36;

        f39 = f35 * f36;

        $f6 = f38 * f32;

        $f5 = f39 * f31;

        f40 = $f6 - $f5;

        $f8 = f39 * f30;

        $f7 = f37 * f32;

        f41 = $f8 - $f7;

        $f10 = f37 * f31;

        $f9 = f38 * f30;

        f42 = $f10 - $f9;

        $f11 = staticinvoke <android.opengl.Matrix: float length(float,float,float)>(f40, f41, f42);

        f3 = 1.0F / $f11;

        f43 = f40 * f3;

        f44 = f41 * f3;

        f45 = f42 * f3;

        $i1 = i0 + 0;

        r0[$i1] = f43;

        $i2 = i0 + 1;

        $f13 = f44 * f39;

        $f12 = f45 * f38;

        $f14 = $f13 - $f12;

        r0[$i2] = $f14;

        $i3 = i0 + 2;

        $f15 = neg f37;

        r0[$i3] = $f15;

        $i4 = i0 + 3;

        r0[$i4] = 0.0F;

        $i5 = i0 + 4;

        r0[$i5] = f44;

        $i6 = i0 + 5;

        $f17 = f45 * f37;

        $f16 = f43 * f39;

        $f18 = $f17 - $f16;

        r0[$i6] = $f18;

        $i7 = i0 + 6;

        $f19 = neg f38;

        r0[$i7] = $f19;

        $i8 = i0 + 7;

        r0[$i8] = 0.0F;

        $i9 = i0 + 8;

        r0[$i9] = f45;

        $i10 = i0 + 9;

        $f21 = f43 * f38;

        $f20 = f44 * f37;

        $f22 = $f21 - $f20;

        r0[$i10] = $f22;

        $i11 = i0 + 10;

        $f23 = neg f39;

        r0[$i11] = $f23;

        $i12 = i0 + 11;

        r0[$i12] = 0.0F;

        $i13 = i0 + 12;

        r0[$i13] = 0.0F;

        $i14 = i0 + 13;

        r0[$i14] = 0.0F;

        $i15 = i0 + 14;

        r0[$i15] = 0.0F;

        $i16 = i0 + 15;

        r0[$i16] = 1.0F;

        $f26 = neg f0;

        $f25 = neg f1;

        $f24 = neg f2;

        staticinvoke <android.opengl.Matrix: void translateM(float[],int,float,float,float)>(r0, i0, $f26, $f25, $f24);

        return;
    }

    public static void setRotateEulerM(float[], int, float, float, float)
    {
        float[] r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, f22, f23, f24, f25, f26, f27, f28, f29, f30, f31, f32, f33;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        f22 := @parameter2: float;

        f23 := @parameter3: float;

        f24 := @parameter4: float;

        f25 = f22 * 0.017453292F;

        f26 = f23 * 0.017453292F;

        f27 = 0.017453292F * f24;

        $d0 = (double) f25;

        $d1 = staticinvoke <java.lang.Math: double cos(double)>($d0);

        f28 = (float) $d1;

        $d2 = (double) f25;

        $d3 = staticinvoke <java.lang.Math: double sin(double)>($d2);

        f29 = (float) $d3;

        $d4 = (double) f26;

        $d5 = staticinvoke <java.lang.Math: double cos(double)>($d4);

        f30 = (float) $d5;

        $d6 = (double) f26;

        $d7 = staticinvoke <java.lang.Math: double sin(double)>($d6);

        f31 = (float) $d7;

        $d8 = (double) f27;

        $d9 = staticinvoke <java.lang.Math: double cos(double)>($d8);

        f32 = (float) $d9;

        $d10 = (double) f27;

        $d11 = staticinvoke <java.lang.Math: double sin(double)>($d10);

        f0 = (float) $d11;

        f1 = f28 * f31;

        f33 = f29 * f31;

        $i1 = i0 + 0;

        $f2 = f30 * f32;

        r0[$i1] = $f2;

        $i2 = i0 + 1;

        $f3 = neg f30;

        $f4 = $f3 * f0;

        r0[$i2] = $f4;

        $i3 = i0 + 2;

        r0[$i3] = f31;

        $i4 = i0 + 3;

        r0[$i4] = 0.0F;

        $i5 = i0 + 4;

        $f6 = f1 * f32;

        $f5 = f28 * f0;

        $f7 = $f6 + $f5;

        r0[$i5] = $f7;

        $i6 = i0 + 5;

        $f8 = neg f1;

        $f10 = $f8 * f0;

        $f9 = f28 * f32;

        $f11 = $f10 + $f9;

        r0[$i6] = $f11;

        $i7 = i0 + 6;

        $f12 = neg f29;

        $f13 = $f12 * f30;

        r0[$i7] = $f13;

        $i8 = i0 + 7;

        r0[$i8] = 0.0F;

        $i9 = i0 + 8;

        $f14 = neg f33;

        $f16 = $f14 * f32;

        $f15 = f29 * f0;

        $f17 = $f16 + $f15;

        r0[$i9] = $f17;

        $i10 = i0 + 9;

        $f19 = f33 * f0;

        $f18 = f29 * f32;

        $f20 = $f19 + $f18;

        r0[$i10] = $f20;

        $i11 = i0 + 10;

        $f21 = f28 * f30;

        r0[$i11] = $f21;

        $i12 = i0 + 11;

        r0[$i12] = 0.0F;

        $i13 = i0 + 12;

        r0[$i13] = 0.0F;

        $i14 = i0 + 13;

        r0[$i14] = 0.0F;

        $i15 = i0 + 14;

        r0[$i15] = 0.0F;

        $i16 = i0 + 15;

        r0[$i16] = 1.0F;

        return;
    }

    public static void setRotateM(float[], int, float, float, float, float)
    {
        float[] r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50;
        float f0, f1, f2, f3, f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40, f41, f43, f44, f45;
        double $d0, $d1, $d2, $d3;
        byte $b8, $b18, $b19, $b29, $b30, $b40, $b41, $b51, $b52, $b53;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        f29 := @parameter2: float;

        f30 := @parameter3: float;

        f31 := @parameter4: float;

        f32 := @parameter5: float;

        $i1 = i0 + 3;

        r0[$i1] = 0.0F;

        $i2 = i0 + 7;

        r0[$i2] = 0.0F;

        $i3 = i0 + 11;

        r0[$i3] = 0.0F;

        $i4 = i0 + 12;

        r0[$i4] = 0.0F;

        $i5 = i0 + 13;

        r0[$i5] = 0.0F;

        $i6 = i0 + 14;

        r0[$i6] = 0.0F;

        $i7 = i0 + 15;

        r0[$i7] = 1.0F;

        f33 = 0.017453292F * f29;

        $d0 = (double) f33;

        $d1 = staticinvoke <java.lang.Math: double sin(double)>($d0);

        f34 = (float) $d1;

        $d2 = (double) f33;

        $d3 = staticinvoke <java.lang.Math: double cos(double)>($d2);

        f0 = (float) $d3;

        $b8 = 1.0F cmpl f30;

        if $b8 != 0 goto label1;

        $b40 = 0.0F cmpl f31;

        if $b40 != 0 goto label1;

        $b41 = 0.0F cmpl f32;

        if $b41 != 0 goto label1;

        $i42 = i0 + 5;

        r0[$i42] = f0;

        $i43 = i0 + 10;

        r0[$i43] = f0;

        $i44 = i0 + 6;

        r0[$i44] = f34;

        $i45 = i0 + 9;

        $f28 = neg f34;

        r0[$i45] = $f28;

        $i46 = i0 + 1;

        r0[$i46] = 0.0F;

        $i47 = i0 + 2;

        r0[$i47] = 0.0F;

        $i48 = i0 + 4;

        r0[$i48] = 0.0F;

        $i49 = i0 + 8;

        r0[$i49] = 0.0F;

        $i50 = i0 + 0;

        r0[$i50] = 1.0F;

        goto label3;

     label1:
        $b51 = 0.0F cmpl f30;

        if $b51 != 0 goto label2;

        $b29 = 1.0F cmpl f31;

        if $b29 != 0 goto label2;

        $b30 = 0.0F cmpl f32;

        if $b30 != 0 goto label2;

        $i31 = i0 + 0;

        r0[$i31] = f0;

        $i32 = i0 + 10;

        r0[$i32] = f0;

        $i33 = i0 + 8;

        r0[$i33] = f34;

        $i34 = i0 + 2;

        $f27 = neg f34;

        r0[$i34] = $f27;

        $i35 = i0 + 1;

        r0[$i35] = 0.0F;

        $i36 = i0 + 4;

        r0[$i36] = 0.0F;

        $i37 = i0 + 6;

        r0[$i37] = 0.0F;

        $i38 = i0 + 9;

        r0[$i38] = 0.0F;

        $i39 = i0 + 5;

        r0[$i39] = 1.0F;

        goto label3;

     label2:
        $b52 = 0.0F cmpl f30;

        if $b52 != 0 goto label4;

        $b18 = 0.0F cmpl f31;

        if $b18 != 0 goto label4;

        $b19 = 1.0F cmpl f32;

        if $b19 != 0 goto label4;

        $i20 = i0 + 0;

        r0[$i20] = f0;

        $i21 = i0 + 5;

        r0[$i21] = f0;

        $i22 = i0 + 1;

        r0[$i22] = f34;

        $i23 = i0 + 4;

        $f26 = neg f34;

        r0[$i23] = $f26;

        $i24 = i0 + 2;

        r0[$i24] = 0.0F;

        $i25 = i0 + 6;

        r0[$i25] = 0.0F;

        $i26 = i0 + 8;

        r0[$i26] = 0.0F;

        $i27 = i0 + 9;

        r0[$i27] = 0.0F;

        $i28 = i0 + 10;

        r0[$i28] = 1.0F;

     label3:
        goto label7;

     label4:
        f35 = staticinvoke <android.opengl.Matrix: float length(float,float,float)>(f30, f31, f32);

        $b53 = 1.0F cmpl f35;

        if $b53 == 0 goto label5;

        f36 = 1.0F / f35;

        f37 = f30 * f36;

        f38 = f31 * f36;

        f39 = f32 * f36;

        f40 = f37;

        f41 = f39;

        goto label6;

     label5:
        f38 = f31;

        f41 = f32;

        f40 = f30;

     label6:
        f43 = 1.0F - f0;

        f1 = f40 * f38;

        f2 = f38 * f41;

        f3 = f41 * f40;

        f4 = f40 * f34;

        f44 = f38 * f34;

        f45 = f41 * f34;

        $i9 = i0 + 0;

        $f5 = f40 * f40;

        $f6 = $f5 * f43;

        $f7 = $f6 + f0;

        r0[$i9] = $f7;

        $i10 = i0 + 4;

        $f8 = f1 * f43;

        $f9 = $f8 - f45;

        r0[$i10] = $f9;

        $i11 = i0 + 8;

        $f10 = f3 * f43;

        $f11 = $f10 + f44;

        r0[$i11] = $f11;

        $i12 = i0 + 1;

        $f12 = f1 * f43;

        $f13 = $f12 + f45;

        r0[$i12] = $f13;

        $i13 = i0 + 5;

        $f14 = f38 * f38;

        $f15 = $f14 * f43;

        $f16 = $f15 + f0;

        r0[$i13] = $f16;

        $i14 = i0 + 9;

        $f17 = f2 * f43;

        $f18 = $f17 - f4;

        r0[$i14] = $f18;

        $i15 = i0 + 2;

        $f19 = f3 * f43;

        $f20 = $f19 - f44;

        r0[$i15] = $f20;

        $i16 = i0 + 6;

        $f21 = f2 * f43;

        $f22 = $f21 + f4;

        r0[$i16] = $f22;

        $i17 = i0 + 10;

        $f23 = f41 * f41;

        $f24 = $f23 * f43;

        $f25 = $f24 + f0;

        r0[$i17] = $f25;

     label7:
        return;
    }

    public static void translateM(float[], int, float, float, float)
    {
        float[] r0;
        int i0, i1, i2, $i3, $i4, i5;
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        f2 := @parameter4: float;

        i5 = 0;

     label1:
        if i5 >= 4 goto label2;

        i1 = i0 + i5;

        i2 = i1 + 12;

        $f11 = r0[i2];

        $f3 = r0[i1];

        $f6 = $f3 * f0;

        $i3 = i1 + 4;

        $f4 = r0[$i3];

        $f5 = $f4 * f1;

        $f9 = $f6 + $f5;

        $i4 = i1 + 8;

        $f7 = r0[$i4];

        $f8 = $f7 * f2;

        $f10 = $f9 + $f8;

        $f12 = $f11 + $f10;

        r0[i2] = $f12;

        i5 = i5 + 1;

        goto label1;

     label2:
        return;
    }

    public static void translateM(float[], int, float[], int, float, float, float)
    {
        float[] r0, r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11;
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        r1 := @parameter2: float[];

        i1 := @parameter3: int;

        f0 := @parameter4: float;

        f1 := @parameter5: float;

        f2 := @parameter6: float;

        i10 = 0;

     label1:
        if i10 >= 12 goto label2;

        $i9 = i0 + i10;

        $i8 = i1 + i10;

        $f13 = r1[$i8];

        r0[$i9] = $f13;

        i10 = i10 + 1;

        goto label1;

     label2:
        i11 = 0;

     label3:
        if i11 >= 4 goto label4;

        i2 = i1 + i11;

        $i3 = i0 + i11;

        $i7 = $i3 + 12;

        $f3 = r1[i2];

        $f6 = $f3 * f0;

        $i4 = i2 + 4;

        $f4 = r1[$i4];

        $f5 = $f4 * f1;

        $f9 = $f6 + $f5;

        $i5 = i2 + 8;

        $f7 = r1[$i5];

        $f8 = $f7 * f2;

        $f11 = $f9 + $f8;

        $i6 = i2 + 12;

        $f10 = r1[$i6];

        $f12 = $f11 + $f10;

        r0[$i7] = $f12;

        i11 = i11 + 1;

        goto label3;

     label4:
        return;
    }

    public static void transposeM(float[], int, float[], int)
    {
        float[] r0, r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14;
        float $f0, $f1, $f2, $f3;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        r1 := @parameter2: float[];

        i1 := @parameter3: int;

        i14 = 0;

     label1:
        if i14 >= 4 goto label2;

        $i3 = i14 * 4;

        i2 = $i3 + i1;

        $i4 = i14 + i0;

        $f0 = r1[i2];

        r0[$i4] = $f0;

        $i5 = i14 + 4;

        $i7 = $i5 + i0;

        $i6 = i2 + 1;

        $f1 = r1[$i6];

        r0[$i7] = $f1;

        $i8 = i14 + 8;

        $i10 = $i8 + i0;

        $i9 = i2 + 2;

        $f2 = r1[$i9];

        r0[$i10] = $f2;

        $i11 = i14 + 12;

        $i13 = $i11 + i0;

        $i12 = i2 + 3;

        $f3 = r1[$i12];

        r0[$i13] = $f3;

        i14 = i14 + 1;

        goto label1;

     label2:
        return;
    }
}
