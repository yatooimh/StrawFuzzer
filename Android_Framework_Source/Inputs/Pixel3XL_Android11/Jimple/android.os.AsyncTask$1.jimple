class android.os.AsyncTask$1 extends java.lang.Object implements java.util.concurrent.ThreadFactory
{
    private final java.util.concurrent.atomic.AtomicInteger mCount;

    void <init>()
    {
        android.os.AsyncTask$1 r0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @this: android.os.AsyncTask$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(1);

        r0.<android.os.AsyncTask$1: java.util.concurrent.atomic.AtomicInteger mCount> = $r1;

        return;
    }

    public java.lang.Thread newThread(java.lang.Runnable)
    {
        android.os.AsyncTask$1 r0;
        java.lang.Runnable r1;
        java.lang.StringBuilder $r3;
        java.util.concurrent.atomic.AtomicInteger $r5;
        int $i0;
        java.lang.Thread $r7;
        java.lang.String $r8;

        r0 := @this: android.os.AsyncTask$1;

        r1 := @parameter0: java.lang.Runnable;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AsyncTask #");

        $r5 = r0.<android.os.AsyncTask$1: java.util.concurrent.atomic.AtomicInteger mCount>;

        $i0 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = new java.lang.Thread;

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>(r1, $r8);

        return $r7;
    }
}
