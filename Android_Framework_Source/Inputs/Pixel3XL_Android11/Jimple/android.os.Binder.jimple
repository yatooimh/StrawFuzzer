public class android.os.Binder extends java.lang.Object implements android.os.IBinder
{
    public static final boolean CHECK_PARCEL_SIZE;
    private static final boolean FIND_POTENTIAL_LEAKS;
    public static boolean LOG_RUNTIME_EXCEPTION;
    private static final int NATIVE_ALLOCATION_SIZE;
    static final java.lang.String TAG;
    public static final int UNSET_WORKSOURCE;
    private static volatile java.lang.String sDumpDisabled;
    private static com.android.internal.os.BinderInternal$Observer sObserver;
    private static volatile boolean sTracingEnabled;
    private static volatile android.os.TransactionTracker sTransactionTracker;
    static volatile boolean sWarnOnBlocking;
    static java.lang.ThreadLocal sWarnOnBlockingOnCurrentThread;
    private static volatile com.android.internal.os.BinderInternal$WorkSourceProvider sWorkSourceProvider;
    private java.lang.String mDescriptor;
    private final long mObject;
    private android.os.IInterface mOwner;

    static void <clinit>()
    {
        android.os.'-$$Lambda$Binder$aNRcHb8WfLrWjcSlV42Wu5psFwU' $r0;
        java.lang.ThreadLocal $r1;
        android.os.'-$$Lambda$Binder$sHSgT14Q7D-inZx204V4-ect-uA' $r2;
        java.util.function.Supplier r3;
        com.android.internal.os.BinderInternal$WorkSourceProvider r4;

        <android.os.Binder: int UNSET_WORKSOURCE> = -1;

        <android.os.Binder: java.lang.String TAG> = "Binder";

        <android.os.Binder: int NATIVE_ALLOCATION_SIZE> = 500;

        <android.os.Binder: boolean FIND_POTENTIAL_LEAKS> = 0;

        <android.os.Binder: boolean CHECK_PARCEL_SIZE> = 0;

        <android.os.Binder: boolean LOG_RUNTIME_EXCEPTION> = 0;

        <android.os.Binder: java.lang.String sDumpDisabled> = null;

        <android.os.Binder: android.os.TransactionTracker sTransactionTracker> = null;

        <android.os.Binder: com.android.internal.os.BinderInternal$Observer sObserver> = null;

        <android.os.Binder: boolean sTracingEnabled> = 0;

        <android.os.Binder: boolean sWarnOnBlocking> = 0;

        $r0 = <android.os._$$Lambda$Binder$aNRcHb8WfLrWjcSlV42Wu5psFwU: android.os.'-$$Lambda$Binder$aNRcHb8WfLrWjcSlV42Wu5psFwU' INSTANCE>;

        r3 = (java.util.function.Supplier) $r0;

        $r1 = staticinvoke <java.lang.ThreadLocal: java.lang.ThreadLocal withInitial(java.util.function.Supplier)>(r3);

        <android.os.Binder: java.lang.ThreadLocal sWarnOnBlockingOnCurrentThread> = $r1;

        $r2 = <android.os._$$Lambda$Binder$sHSgT14Q7D_inZx204V4_ect_uA: android.os.'-$$Lambda$Binder$sHSgT14Q7D-inZx204V4-ect-uA' INSTANCE>;

        r4 = (com.android.internal.os.BinderInternal$WorkSourceProvider) $r2;

        <android.os.Binder: com.android.internal.os.BinderInternal$WorkSourceProvider sWorkSourceProvider> = r4;

        return;
    }

    public void <init>()
    {
        android.os.Binder r0;

        r0 := @this: android.os.Binder;

        specialinvoke r0.<android.os.Binder: void <init>(java.lang.String)>(null);

        return;
    }

    public void <init>(java.lang.String)
    {
        android.os.Binder r0;
        java.lang.String r1;
        long $l0, $l1;
        libcore.util.NativeAllocationRegistry $r2;

        r0 := @this: android.os.Binder;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $l0 = staticinvoke <android.os.Binder: long getNativeBBinderHolder()>();

        r0.<android.os.Binder: long mObject> = $l0;

        $r2 = <android.os.Binder$NoImagePreloadHolder: libcore.util.NativeAllocationRegistry sRegistry>;

        $l1 = r0.<android.os.Binder: long mObject>;

        virtualinvoke $r2.<libcore.util.NativeAllocationRegistry: java.lang.Runnable registerNativeAllocation(java.lang.Object,long)>(r0, $l1);

        r0.<android.os.Binder: java.lang.String mDescriptor> = r1;

        return;
    }

    static long access$000()
    {
        long $l0;

        $l0 = staticinvoke <android.os.Binder: long getNativeFinalizer()>();

        return $l0;
    }

    public static android.os.IBinder allowBlocking(android.os.IBinder)
    {
        android.os.IBinder r0;
        boolean $z0;
        java.lang.String $r1, $r2, $r6;
        android.os.IInterface $r3;
        android.os.BinderProxy $r7;
        android.os.RemoteException $r8;
        java.lang.StringBuilder r9;

        r0 := @parameter0: android.os.IBinder;

     label1:
        $z0 = r0 instanceof android.os.BinderProxy;

        if $z0 == 0 goto label3;

        $r7 = (android.os.BinderProxy) r0;

        $r7.<android.os.BinderProxy: boolean mWarnOnBlocking> = 0;

     label2:
        goto label5;

     label3:
        if r0 == null goto label5;

     label4:
        $r1 = interfaceinvoke r0.<android.os.IBinder: java.lang.String getInterfaceDescriptor()>();

        if $r1 == null goto label5;

        $r2 = interfaceinvoke r0.<android.os.IBinder: java.lang.String getInterfaceDescriptor()>();

        $r3 = interfaceinvoke r0.<android.os.IBinder: android.os.IInterface queryLocalInterface(java.lang.String)>($r2);

        if $r3 != null goto label5;

        r9 = new java.lang.StringBuilder;

        specialinvoke r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to allow blocking on interface ");

        virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Binder", $r6);

     label5:
        goto label7;

     label6:
        $r8 := @caughtexception;

     label7:
        return r0;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    public static void allowBlockingForCurrentThread()
    {
        java.lang.ThreadLocal $r0;
        java.lang.Boolean $r1;

        $r0 = <android.os.Binder: java.lang.ThreadLocal sWarnOnBlockingOnCurrentThread>;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        virtualinvoke $r0.<java.lang.ThreadLocal: void set(java.lang.Object)>($r1);

        return;
    }

    public static final native void blockUntilThreadAvailable();

    static void checkParcel(android.os.IBinder, int, android.os.Parcel, java.lang.String)
    {
        android.os.IBinder r0;
        int i0;
        android.os.Parcel r1;
        java.lang.String r2;

        r0 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        r1 := @parameter2: android.os.Parcel;

        r2 := @parameter3: java.lang.String;

        return;
    }

    public static final native long clearCallingIdentity();

    public static final native long clearCallingWorkSource();

    public static void copyAllowBlocking(android.os.IBinder, android.os.IBinder)
    {
        android.os.IBinder r0, r1;
        boolean $z0, $z1, $z2;
        android.os.BinderProxy $r2, $r3;

        r0 := @parameter0: android.os.IBinder;

        r1 := @parameter1: android.os.IBinder;

        $z0 = r0 instanceof android.os.BinderProxy;

        if $z0 == 0 goto label1;

        $z1 = r1 instanceof android.os.BinderProxy;

        if $z1 == 0 goto label1;

        $r3 = (android.os.BinderProxy) r1;

        $r2 = (android.os.BinderProxy) r0;

        $z2 = $r2.<android.os.BinderProxy: boolean mWarnOnBlocking>;

        $r3.<android.os.BinderProxy: boolean mWarnOnBlocking> = $z2;

     label1:
        return;
    }

    public static android.os.IBinder defaultBlocking(android.os.IBinder)
    {
        android.os.IBinder r0;
        boolean $z0, $z1;
        android.os.BinderProxy $r1;

        r0 := @parameter0: android.os.IBinder;

        $z0 = r0 instanceof android.os.BinderProxy;

        if $z0 == 0 goto label1;

        $r1 = (android.os.BinderProxy) r0;

        $z1 = <android.os.Binder: boolean sWarnOnBlocking>;

        $r1.<android.os.BinderProxy: boolean mWarnOnBlocking> = $z1;

     label1:
        return r0;
    }

    public static void defaultBlockingForCurrentThread()
    {
        boolean $z0;
        java.lang.ThreadLocal $r0;
        java.lang.Boolean $r1;

        $r0 = <android.os.Binder: java.lang.ThreadLocal sWarnOnBlockingOnCurrentThread>;

        $z0 = <android.os.Binder: boolean sWarnOnBlocking>;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        virtualinvoke $r0.<java.lang.ThreadLocal: void set(java.lang.Object)>($r1);

        return;
    }

    public static void disableTracing()
    {
        <android.os.Binder: boolean sTracingEnabled> = 0;

        return;
    }

    public static void enableTracing()
    {
        <android.os.Binder: boolean sTracingEnabled> = 1;

        return;
    }

    private boolean execTransact(int, long, long, int)
    {
        android.os.Binder r0;
        int i0, i3, i4;
        long l1, l2, l5;
        boolean z0;
        java.lang.Throwable $r2;

        r0 := @this: android.os.Binder;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        i3 := @parameter3: int;

        i4 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l5 = staticinvoke <android.os.ThreadLocalWorkSource: long setUid(int)>(i4);

     label1:
        z0 = specialinvoke r0.<android.os.Binder: boolean execTransactInternal(int,long,long,int,int)>(i0, l1, l2, i3, i4);

     label2:
        staticinvoke <android.os.ThreadLocalWorkSource: void restore(long)>(l5);

        return z0;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.os.ThreadLocalWorkSource: void restore(long)>(l5);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private boolean execTransactInternal(int, long, long, int, int)
    {
        android.os.Binder r0;
        long l0, l1;
        int i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i14, i15, i16, i17;
        com.android.internal.os.BinderInternal$Observer r1;
        android.os.Parcel r2, r3;
        boolean z0, $z1, z2, z3, z4;
        java.lang.StringBuilder r4;
        com.android.internal.os.BinderInternal$WorkSourceProvider $r5, $r14;
        java.lang.Class $r6;
        java.lang.String $r7, $r11;
        java.lang.Throwable $r12, $r13;
        java.lang.Exception $r15;
        com.android.internal.os.BinderInternal$CallSession r16;
        java.io.Serializable r17;

        r0 := @this: android.os.Binder;

        i14 := @parameter0: int;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        i15 := @parameter3: int;

        i2 := @parameter4: int;

        r1 = <android.os.Binder: com.android.internal.os.BinderInternal$Observer sObserver>;

        if r1 == null goto label01;

        r16 = interfaceinvoke r1.<com.android.internal.os.BinderInternal$Observer: com.android.internal.os.BinderInternal$CallSession callStarted(android.os.Binder,int,int)>(r0, i14, -1);

        goto label02;

     label01:
        r16 = null;

     label02:
        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain(long)>(l0);

        r3 = staticinvoke <android.os.Parcel: android.os.Parcel obtain(long)>(l1);

        z0 = staticinvoke <android.os.Binder: boolean isTracingEnabled()>();

        if z0 == 0 goto label10;

     label03:
        r17 = virtualinvoke r0.<android.os.Binder: java.lang.String getTransactionName(int)>(i14);

        r4 = new java.lang.StringBuilder;

        specialinvoke r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

     label04:
        if r17 == null goto label05;

        goto label06;

     label05:
        r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i14);

     label06:
        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r17);

        $r11 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(1L, $r11);

     label07:
        goto label10;

     label08:
        $r13 := @caughtexception;

        goto label36;

     label09:
        $r15 := @caughtexception;

        goto label22;

     label10:
        $i3 = i15 & 2;

        if $i3 == 0 goto label18;

     label11:
        staticinvoke <android.app.AppOpsManager: void startNotedAppOpsCollection(int)>(i2);

     label12:
        z2 = virtualinvoke r0.<android.os.Binder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>(i14, r2, r3, i15);

     label13:
        staticinvoke <android.app.AppOpsManager: void finishNotedAppOpsCollection()>();

     label14:
        goto label19;

     label15:
        $r12 := @caughtexception;

     label16:
        staticinvoke <android.app.AppOpsManager: void finishNotedAppOpsCollection()>();

     label17:
        throw $r12;

     label18:
        z2 = virtualinvoke r0.<android.os.Binder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>(i14, r2, r3, i15);

     label19:
        if z0 == 0 goto label20;

        staticinvoke <android.os.Trace: void traceEnd(long)>(1L);

     label20:
        z3 = z2;

        if r1 == null goto label35;

     label21:
        $r5 = <android.os.Binder: com.android.internal.os.BinderInternal$WorkSourceProvider sWorkSourceProvider>;

        $i4 = virtualinvoke r2.<android.os.Parcel: int readCallingWorkSourceUid()>();

        i16 = interfaceinvoke $r5.<com.android.internal.os.BinderInternal$WorkSourceProvider: int resolveWorkSourceUid(int)>($i4);

        $i5 = virtualinvoke r2.<android.os.Parcel: int dataSize()>();

        $i6 = virtualinvoke r3.<android.os.Parcel: int dataSize()>();

        interfaceinvoke r1.<com.android.internal.os.BinderInternal$Observer: void callEnded(com.android.internal.os.BinderInternal$CallSession,int,int,int)>(r16, $i5, $i6, i16);

        z3 = z2;

        goto label35;

     label22:
        if r1 == null goto label24;

     label23:
        interfaceinvoke r1.<com.android.internal.os.BinderInternal$Observer: void callThrewException(com.android.internal.os.BinderInternal$CallSession,java.lang.Exception)>(r16, $r15);

     label24:
        z4 = <android.os.Binder: boolean LOG_RUNTIME_EXCEPTION>;

     label25:
        if z4 == 0 goto label27;

     label26:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("Binder", "Caught a RuntimeException from the binder stub implementation.", $r15);

     label27:
        $i10 = i15 & 1;

        if $i10 == 0 goto label32;

     label28:
        $z1 = $r15 instanceof android.os.RemoteException;

        if $z1 == 0 goto label30;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("Binder", "Binder call failed.", $r15);

     label29:
        goto label33;

     label30:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("Binder", "Caught a RuntimeException from the binder stub implementation.", $r15);

     label31:
        goto label33;

     label32:
        virtualinvoke r3.<android.os.Parcel: void setDataSize(int)>(0);

        virtualinvoke r3.<android.os.Parcel: void setDataPosition(int)>(0);

        virtualinvoke r3.<android.os.Parcel: void writeException(java.lang.Exception)>($r15);

     label33:
        z3 = 1;

        z2 = 1;

        if z0 == 0 goto label34;

        staticinvoke <android.os.Trace: void traceEnd(long)>(1L);

     label34:
        if r1 == null goto label35;

        goto label21;

     label35:
        staticinvoke <android.os.Binder: void checkParcel(android.os.IBinder,int,android.os.Parcel,java.lang.String)>(r0, i14, r3, "Unreasonably large binder reply buffer");

        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        staticinvoke <android.os.StrictMode: void clearGatheredViolations()>();

        return z3;

     label36:
        if z0 == 0 goto label37;

        staticinvoke <android.os.Trace: void traceEnd(long)>(1L);

     label37:
        if r1 == null goto label38;

        $r14 = <android.os.Binder: com.android.internal.os.BinderInternal$WorkSourceProvider sWorkSourceProvider>;

        $i7 = virtualinvoke r2.<android.os.Parcel: int readCallingWorkSourceUid()>();

        i17 = interfaceinvoke $r14.<com.android.internal.os.BinderInternal$WorkSourceProvider: int resolveWorkSourceUid(int)>($i7);

        $i8 = virtualinvoke r2.<android.os.Parcel: int dataSize()>();

        $i9 = virtualinvoke r3.<android.os.Parcel: int dataSize()>();

        interfaceinvoke r1.<com.android.internal.os.BinderInternal$Observer: void callEnded(com.android.internal.os.BinderInternal$CallSession,int,int,int)>(r16, $i8, $i9, i17);

     label38:
        throw $r13;

        catch android.os.RemoteException from label03 to label04 with label09;
        catch java.lang.RuntimeException from label03 to label04 with label09;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch android.os.RemoteException from label05 to label06 with label09;
        catch java.lang.RuntimeException from label05 to label06 with label09;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch android.os.RemoteException from label06 to label07 with label09;
        catch java.lang.RuntimeException from label06 to label07 with label09;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch android.os.RemoteException from label11 to label12 with label09;
        catch java.lang.RuntimeException from label11 to label12 with label09;
        catch java.lang.Throwable from label11 to label12 with label08;
        catch java.lang.Throwable from label12 to label13 with label15;
        catch android.os.RemoteException from label13 to label14 with label09;
        catch java.lang.RuntimeException from label13 to label14 with label09;
        catch java.lang.Throwable from label13 to label14 with label08;
        catch android.os.RemoteException from label16 to label17 with label09;
        catch java.lang.RuntimeException from label16 to label17 with label09;
        catch java.lang.Throwable from label16 to label17 with label08;
        catch android.os.RemoteException from label17 to label18 with label09;
        catch java.lang.RuntimeException from label17 to label18 with label09;
        catch java.lang.Throwable from label17 to label18 with label08;
        catch android.os.RemoteException from label18 to label19 with label09;
        catch java.lang.RuntimeException from label18 to label19 with label09;
        catch java.lang.Throwable from label18 to label19 with label08;
        catch java.lang.Throwable from label23 to label24 with label08;
        catch java.lang.Throwable from label24 to label25 with label08;
        catch java.lang.Throwable from label26 to label27 with label08;
        catch java.lang.Throwable from label28 to label29 with label08;
        catch java.lang.Throwable from label30 to label31 with label08;
        catch java.lang.Throwable from label32 to label33 with label08;
    }

    public static final native void flushPendingCommands();

    public static final native int getCallingPid();

    public static final native int getCallingUid();

    public static final int getCallingUidOrThrow()
    {
        boolean $z0;
        java.lang.IllegalStateException $r0;
        int $i0;

        $z0 = staticinvoke <android.os.Binder: boolean isHandlingTransaction()>();

        if $z0 == 0 goto label1;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        return $i0;

     label1:
        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Thread is not in a binder transcation");

        throw $r0;
    }

    public static final android.os.UserHandle getCallingUserHandle()
    {
        int $i0, $i1;
        android.os.UserHandle $r0;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i0);

        $r0 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>($i1);

        return $r0;
    }

    public static final native int getCallingWorkSourceUid();

    private static native long getFinalizer();

    private static native long getNativeBBinderHolder();

    private static native long getNativeFinalizer();

    public static final native int getThreadStrictModePolicy();

    public static android.os.TransactionTracker getTransactionTracker()
    {
        android.os.TransactionTracker $r0, r2, r3;
        java.lang.Throwable $r1;

        entermonitor class "Landroid/os/Binder;";

     label1:
        $r0 = <android.os.Binder: android.os.TransactionTracker sTransactionTracker>;

        if $r0 != null goto label2;

        r2 = new android.os.TransactionTracker;

        specialinvoke r2.<android.os.TransactionTracker: void <init>()>();

        <android.os.Binder: android.os.TransactionTracker sTransactionTracker> = r2;

     label2:
        r3 = <android.os.Binder: android.os.TransactionTracker sTransactionTracker>;

     label3:
        exitmonitor class "Landroid/os/Binder;";

        return r3;

     label4:
        $r1 := @caughtexception;

        exitmonitor class "Landroid/os/Binder;";

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public static final native boolean isHandlingTransaction();

    public static final boolean isProxy(android.os.IInterface)
    {
        android.os.IInterface r0;
        android.os.IBinder $r1;
        boolean z0;

        r0 := @parameter0: android.os.IInterface;

        $r1 = interfaceinvoke r0.<android.os.IInterface: android.os.IBinder asBinder()>();

        if $r1 == r0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static boolean isTracingEnabled()
    {
        boolean $z0;

        $z0 = <android.os.Binder: boolean sTracingEnabled>;

        return $z0;
    }

    public static final void joinThreadPool()
    {
        staticinvoke <com.android.internal.os.BinderInternal: void joinThreadPool()>();

        return;
    }

    static java.lang.Boolean lambda$static$0()
    {
        boolean $z0;
        java.lang.Boolean $r0;

        $z0 = <android.os.Binder: boolean sWarnOnBlocking>;

        $r0 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r0;
    }

    static int lambda$static$1(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        return $i1;
    }

    public static final native void restoreCallingIdentity(long);

    public static final native void restoreCallingWorkSource(long);

    public static final native long setCallingWorkSourceUid(int);

    public static void setDumpDisabled(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        <android.os.Binder: java.lang.String sDumpDisabled> = r0;

        return;
    }

    public static void setObserver(com.android.internal.os.BinderInternal$Observer)
    {
        com.android.internal.os.BinderInternal$Observer r0;

        r0 := @parameter0: com.android.internal.os.BinderInternal$Observer;

        <android.os.Binder: com.android.internal.os.BinderInternal$Observer sObserver> = r0;

        return;
    }

    public static void setProxyTransactListener(android.os.Binder$ProxyTransactListener)
    {
        android.os.Binder$ProxyTransactListener r0;

        r0 := @parameter0: android.os.Binder$ProxyTransactListener;

        staticinvoke <android.os.BinderProxy: void setTransactListener(android.os.Binder$ProxyTransactListener)>(r0);

        return;
    }

    public static final native void setThreadStrictModePolicy(int);

    public static void setWarnOnBlocking(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        <android.os.Binder: boolean sWarnOnBlocking> = z0;

        return;
    }

    public static void setWorkSourceProvider(com.android.internal.os.BinderInternal$WorkSourceProvider)
    {
        com.android.internal.os.BinderInternal$WorkSourceProvider r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: com.android.internal.os.BinderInternal$WorkSourceProvider;

        if r0 == null goto label1;

        <android.os.Binder: com.android.internal.os.BinderInternal$WorkSourceProvider sWorkSourceProvider> = r0;

        return;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("workSourceProvider cannot be null");

        throw $r1;
    }

    public static final java.lang.Object withCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)
    {
        long l0;
        java.lang.Throwable $r1;
        java.lang.RuntimeException $r2;
        com.android.internal.util.FunctionalUtils$ThrowingSupplier r3;
        java.lang.Object r4;

        r3 := @parameter0: com.android.internal.util.FunctionalUtils$ThrowingSupplier;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r4 = interfaceinvoke r3.<com.android.internal.util.FunctionalUtils$ThrowingSupplier: java.lang.Object getOrThrow()>();

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return r4;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        $r2 = staticinvoke <android.util.ExceptionUtils: java.lang.RuntimeException propagate(java.lang.Throwable)>($r1);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static final void withCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)
    {
        long l0;
        java.lang.Throwable $r1;
        java.lang.RuntimeException $r2;
        com.android.internal.util.FunctionalUtils$ThrowingRunnable r3;

        r3 := @parameter0: com.android.internal.util.FunctionalUtils$ThrowingRunnable;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        interfaceinvoke r3.<com.android.internal.util.FunctionalUtils$ThrowingRunnable: void runOrThrow()>();

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        $r2 = staticinvoke <android.util.ExceptionUtils: java.lang.RuntimeException propagate(java.lang.Throwable)>($r1);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void attachInterface(android.os.IInterface, java.lang.String)
    {
        android.os.Binder r0;
        android.os.IInterface r1;
        java.lang.String r2;

        r0 := @this: android.os.Binder;

        r1 := @parameter0: android.os.IInterface;

        r2 := @parameter1: java.lang.String;

        r0.<android.os.Binder: android.os.IInterface mOwner> = r1;

        r0.<android.os.Binder: java.lang.String mDescriptor> = r2;

        return;
    }

    void doDump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        android.os.Binder r0;
        java.io.PrintWriter r1;
        java.lang.String $r2, $r3, $r8, $r10;
        java.lang.Throwable $r4, $r5;
        java.io.FileDescriptor r11;
        java.lang.String[] r12;
        java.lang.StringBuilder r16;
        java.lang.SecurityException r17;

        r0 := @this: android.os.Binder;

        r11 := @parameter0: java.io.FileDescriptor;

        r1 := @parameter1: java.io.PrintWriter;

        r12 := @parameter2: java.lang.String[];

        $r2 = <android.os.Binder: java.lang.String sDumpDisabled>;

        if $r2 != null goto label5;

     label1:
        virtualinvoke r0.<android.os.Binder: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r11, r1, r12);

     label2:
        goto label6;

     label3:
        $r4 := @caughtexception;

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Exception occurred while dumping:");

        virtualinvoke $r4.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>(r1);

        goto label2;

     label4:
        $r5 := @caughtexception;

        r16 = new java.lang.StringBuilder;

        specialinvoke r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Security exception: ");

        r17 = (java.lang.SecurityException) $r5;

        $r8 = virtualinvoke r17.<java.lang.SecurityException: java.lang.String getMessage()>();

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r10);

        throw $r5;

     label5:
        $r3 = <android.os.Binder: java.lang.String sDumpDisabled>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r3);

     label6:
        return;

        catch java.lang.SecurityException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        android.os.Binder r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;

        r0 := @this: android.os.Binder;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        return;
    }

    public void dump(java.io.FileDescriptor, java.lang.String[])
    {
        android.os.Binder r0;
        java.lang.String[] r1;
        com.android.internal.util.FastPrintWriter $r3;
        java.io.FileOutputStream $r4;
        java.lang.Throwable $r5;
        java.io.FileDescriptor r6;

        r0 := @this: android.os.Binder;

        r6 := @parameter0: java.io.FileDescriptor;

        r1 := @parameter1: java.lang.String[];

        $r3 = new com.android.internal.util.FastPrintWriter;

        $r4 = new java.io.FileOutputStream;

        specialinvoke $r4.<java.io.FileOutputStream: void <init>(java.io.FileDescriptor)>(r6);

        specialinvoke $r3.<com.android.internal.util.FastPrintWriter: void <init>(java.io.OutputStream)>($r4);

     label1:
        virtualinvoke r0.<android.os.Binder: void doDump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r6, $r3, r1);

     label2:
        virtualinvoke $r3.<java.io.PrintWriter: void flush()>();

        return;

     label3:
        $r5 := @caughtexception;

        virtualinvoke $r3.<java.io.PrintWriter: void flush()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void dumpAsync(java.io.FileDescriptor, java.lang.String[])
    {
        android.os.Binder r0;
        java.io.FileDescriptor r1;
        java.lang.String[] r2;
        android.os.Binder$1 $r3;
        com.android.internal.util.FastPrintWriter $r4;
        java.io.FileOutputStream $r5;

        r0 := @this: android.os.Binder;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.lang.String[];

        $r3 = new android.os.Binder$1;

        $r4 = new com.android.internal.util.FastPrintWriter;

        $r5 = new java.io.FileOutputStream;

        specialinvoke $r5.<java.io.FileOutputStream: void <init>(java.io.FileDescriptor)>(r1);

        specialinvoke $r4.<com.android.internal.util.FastPrintWriter: void <init>(java.io.OutputStream)>($r5);

        specialinvoke $r3.<android.os.Binder$1: void <init>(android.os.Binder,java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r0, "Binder.dumpAsync", r1, $r4, r2);

        virtualinvoke $r3.<java.lang.Thread: void start()>();

        return;
    }

    public final native android.os.IBinder getExtension();

    public java.lang.String getInterfaceDescriptor()
    {
        android.os.Binder r0;
        java.lang.String $r1;

        r0 := @this: android.os.Binder;

        $r1 = r0.<android.os.Binder: java.lang.String mDescriptor>;

        return $r1;
    }

    public java.lang.String getTransactionName(int)
    {
        android.os.Binder r0;
        int i0;

        r0 := @this: android.os.Binder;

        i0 := @parameter0: int;

        return null;
    }

    public int handleShellCommand(android.os.ParcelFileDescriptor, android.os.ParcelFileDescriptor, android.os.ParcelFileDescriptor, java.lang.String[])
    {
        android.os.Binder r0;
        android.os.ParcelFileDescriptor r1, r2, r7;
        java.lang.String[] r3;
        com.android.internal.util.FastPrintWriter $r4;
        java.io.FileOutputStream $r5;
        java.io.FileDescriptor $r6;

        r0 := @this: android.os.Binder;

        r7 := @parameter0: android.os.ParcelFileDescriptor;

        r1 := @parameter1: android.os.ParcelFileDescriptor;

        r2 := @parameter2: android.os.ParcelFileDescriptor;

        r3 := @parameter3: java.lang.String[];

        $r4 = new com.android.internal.util.FastPrintWriter;

        $r5 = new java.io.FileOutputStream;

        $r6 = virtualinvoke r2.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        specialinvoke $r5.<java.io.FileOutputStream: void <init>(java.io.FileDescriptor)>($r6);

        specialinvoke $r4.<com.android.internal.util.FastPrintWriter: void <init>(java.io.OutputStream)>($r5);

        virtualinvoke $r4.<java.io.PrintWriter: void println(java.lang.String)>("No shell command implementation.");

        virtualinvoke $r4.<java.io.PrintWriter: void flush()>();

        return 0;
    }

    public boolean isBinderAlive()
    {
        android.os.Binder r0;

        r0 := @this: android.os.Binder;

        return 1;
    }

    public void linkToDeath(android.os.IBinder$DeathRecipient, int)
    {
        android.os.Binder r0;
        android.os.IBinder$DeathRecipient r1;
        int i0;

        r0 := @this: android.os.Binder;

        r1 := @parameter0: android.os.IBinder$DeathRecipient;

        i0 := @parameter1: int;

        return;
    }

    public final native void markVintfStability();

    public void onShellCommand(java.io.FileDescriptor, java.io.FileDescriptor, java.io.FileDescriptor, java.lang.String[], android.os.ShellCallback, android.os.ResultReceiver) throws android.os.RemoteException
    {
        android.os.Binder r0;
        android.os.ResultReceiver r1;
        java.lang.Throwable $r3, $r4, $r9, $r10, $r18, $r19, $r20, $r21, $r22;
        java.lang.String $r6, $r8, $r15, $r17;
        java.io.FileDescriptor r23, r24, r25, r28, r31, r35;
        java.lang.String[] r26, r36;
        android.os.ShellCallback r27;
        int i0, i2, i3, i4, i5, i6;
        android.os.ParcelFileDescriptor r37, r38, r39;
        java.lang.SecurityException r51;
        java.io.FileInputStream r52;
        java.io.FileOutputStream r53, r54, r57;
        com.android.internal.util.FastPrintWriter r55, r58;
        java.lang.StringBuilder r56, r59;
        java.io.IOException r60, r61;

        r0 := @this: android.os.Binder;

        r23 := @parameter0: java.io.FileDescriptor;

        r24 := @parameter1: java.io.FileDescriptor;

        r25 := @parameter2: java.io.FileDescriptor;

        r26 := @parameter3: java.lang.String[];

        r27 := @parameter4: android.os.ShellCallback;

        r1 := @parameter5: android.os.ResultReceiver;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if i0 == 0 goto label02;

        if i0 != 2000 goto label01;

        goto label02;

     label01:
        virtualinvoke r1.<android.os.ResultReceiver: void send(int,android.os.Bundle)>(-1, null);

        r51 = new java.lang.SecurityException;

        specialinvoke r51.<java.lang.SecurityException: void <init>(java.lang.String)>("Shell commands are only callable by ADB");

        throw r51;

     label02:
        r28 = r23;

        if r23 != null goto label06;

     label03:
        r52 = new java.io.FileInputStream;

        specialinvoke r52.<java.io.FileInputStream: void <init>(java.lang.String)>("/dev/null");

        r28 = virtualinvoke r52.<java.io.FileInputStream: java.io.FileDescriptor getFD()>();

     label04:
        goto label06;

     label05:
        $r10 := @caughtexception;

        goto label09;

     label06:
        r31 = r24;

        if r24 != null goto label11;

     label07:
        r53 = new java.io.FileOutputStream;

        specialinvoke r53.<java.io.FileOutputStream: void <init>(java.lang.String)>("/dev/null");

        r31 = virtualinvoke r53.<java.io.FileOutputStream: java.io.FileDescriptor getFD()>();

     label08:
        goto label11;

     label09:
        if r25 == null goto label10;

        r24 = r25;

        goto label10;

     label10:
        r55 = new com.android.internal.util.FastPrintWriter;

        r54 = new java.io.FileOutputStream;

        specialinvoke r54.<java.io.FileOutputStream: void <init>(java.io.FileDescriptor)>(r24);

        specialinvoke r55.<com.android.internal.util.FastPrintWriter: void <init>(java.io.OutputStream)>(r54);

        r56 = new java.lang.StringBuilder;

        specialinvoke r56.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to open /dev/null: ");

        r60 = (java.io.IOException) $r10;

        $r15 = virtualinvoke r60.<java.io.IOException: java.lang.String getMessage()>();

        virtualinvoke r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke r56.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r55.<java.io.PrintWriter: void println(java.lang.String)>($r17);

        virtualinvoke r55.<java.io.PrintWriter: void flush()>();

        virtualinvoke r1.<android.os.ResultReceiver: void send(int,android.os.Bundle)>(-1, null);

        return;

     label11:
        r35 = r25;

        if r25 != null goto label12;

        r35 = r31;

     label12:
        r36 = r26;

        if r26 != null goto label13;

        r36 = newarray (java.lang.String)[0];

     label13:
        i2 = -1;

        i3 = -1;

     label14:
        r37 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup(java.io.FileDescriptor)>(r28);

     label15:
        i4 = -1;

     label16:
        r38 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup(java.io.FileDescriptor)>(r31);

     label17:
        i5 = -1;

     label18:
        r39 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup(java.io.FileDescriptor)>(r35);

     label19:
        i6 = virtualinvoke r0.<android.os.Binder: int handleShellCommand(android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,java.lang.String[])>(r37, r38, r39, r36);

     label20:
        if r39 == null goto label22;

        i5 = i6;

     label21:
        virtualinvoke r39.<android.os.ParcelFileDescriptor: void close()>();

     label22:
        if r38 == null goto label24;

        i4 = i6;

     label23:
        virtualinvoke r38.<android.os.ParcelFileDescriptor: void close()>();

     label24:
        i3 = i6;

        if r37 == null goto label27;

        i2 = i6;

        i3 = i6;

     label25:
        virtualinvoke r37.<android.os.ParcelFileDescriptor: void close()>();

     label26:
        i3 = i6;

     label27:
        virtualinvoke r1.<android.os.ResultReceiver: void send(int,android.os.Bundle)>(i3, null);

        goto label71;

     label28:
        $r21 := @caughtexception;

        if r39 == null goto label33;

     label29:
        virtualinvoke r39.<android.os.ParcelFileDescriptor: void close()>();

     label30:
        goto label33;

     label31:
        $r19 := @caughtexception;

        i5 = -1;

     label32:
        virtualinvoke $r21.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r19);

     label33:
        i5 = -1;

     label34:
        throw $r21;

     label35:
        $r22 := @caughtexception;

        if r38 == null goto label40;

     label36:
        virtualinvoke r38.<android.os.ParcelFileDescriptor: void close()>();

     label37:
        goto label40;

     label38:
        $r20 := @caughtexception;

        i4 = i5;

     label39:
        virtualinvoke $r22.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r20);

     label40:
        i4 = i5;

     label41:
        throw $r22;

     label42:
        $r9 := @caughtexception;

        if r37 == null goto label47;

     label43:
        virtualinvoke r37.<android.os.ParcelFileDescriptor: void close()>();

     label44:
        goto label47;

     label45:
        $r3 := @caughtexception;

        i2 = i4;

        i3 = i4;

     label46:
        virtualinvoke $r9.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r3);

     label47:
        i2 = i4;

        i3 = i4;

     label48:
        throw $r9;

     label49:
        $r18 := @caughtexception;

        goto label72;

     label50:
        $r4 := @caughtexception;

        i2 = i3;

     label51:
        r58 = new com.android.internal.util.FastPrintWriter;

     label52:
        i2 = i3;

     label53:
        r57 = new java.io.FileOutputStream;

     label54:
        i2 = i3;

     label55:
        specialinvoke r57.<java.io.FileOutputStream: void <init>(java.io.FileDescriptor)>(r35);

     label56:
        i2 = i3;

     label57:
        specialinvoke r58.<com.android.internal.util.FastPrintWriter: void <init>(java.io.OutputStream)>(r57);

     label58:
        i2 = i3;

     label59:
        r59 = new java.lang.StringBuilder;

     label60:
        i2 = i3;

     label61:
        specialinvoke r59.<java.lang.StringBuilder: void <init>()>();

     label62:
        i2 = i3;

     label63:
        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dup() failed: ");

     label64:
        i2 = i3;

     label65:
        r61 = (java.io.IOException) $r4;

        $r6 = virtualinvoke r61.<java.io.IOException: java.lang.String getMessage()>();

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

     label66:
        i2 = i3;

     label67:
        $r8 = virtualinvoke r59.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r58.<java.io.PrintWriter: void println(java.lang.String)>($r8);

     label68:
        i2 = i3;

     label69:
        virtualinvoke r58.<java.io.PrintWriter: void flush()>();

     label70:
        goto label27;

     label71:
        return;

     label72:
        virtualinvoke r1.<android.os.ResultReceiver: void send(int,android.os.Bundle)>(i2, null);

        throw $r18;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.io.IOException from label07 to label08 with label05;
        catch java.io.IOException from label14 to label15 with label50;
        catch java.lang.Throwable from label14 to label15 with label49;
        catch java.lang.Throwable from label16 to label17 with label42;
        catch java.lang.Throwable from label18 to label19 with label35;
        catch java.lang.Throwable from label19 to label20 with label28;
        catch java.lang.Throwable from label21 to label22 with label35;
        catch java.lang.Throwable from label23 to label24 with label42;
        catch java.io.IOException from label25 to label26 with label50;
        catch java.lang.Throwable from label25 to label26 with label49;
        catch java.lang.Throwable from label29 to label30 with label31;
        catch java.lang.Throwable from label32 to label33 with label35;
        catch java.lang.Throwable from label34 to label35 with label35;
        catch java.lang.Throwable from label36 to label37 with label38;
        catch java.lang.Throwable from label39 to label40 with label42;
        catch java.lang.Throwable from label41 to label42 with label42;
        catch java.lang.Throwable from label43 to label44 with label45;
        catch java.io.IOException from label46 to label47 with label50;
        catch java.lang.Throwable from label46 to label47 with label49;
        catch java.io.IOException from label48 to label49 with label50;
        catch java.lang.Throwable from label48 to label49 with label49;
        catch java.lang.Throwable from label51 to label52 with label49;
        catch java.lang.Throwable from label53 to label54 with label49;
        catch java.lang.Throwable from label55 to label56 with label49;
        catch java.lang.Throwable from label57 to label58 with label49;
        catch java.lang.Throwable from label59 to label60 with label49;
        catch java.lang.Throwable from label61 to label62 with label49;
        catch java.lang.Throwable from label63 to label64 with label49;
        catch java.lang.Throwable from label65 to label66 with label49;
        catch java.lang.Throwable from label67 to label68 with label49;
        catch java.lang.Throwable from label69 to label70 with label49;
    }

    protected boolean onTransact(int, android.os.Parcel, android.os.Parcel, int) throws android.os.RemoteException
    {
        android.os.Binder r0;
        int i0, i1;
        android.os.Parcel r1, r16;
        android.os.ParcelFileDescriptor r2, r3, r17, r21;
        java.lang.String[] r4, r18;
        android.os.ShellCallback r5;
        android.os.ResultReceiver r6;
        java.io.FileDescriptor r7, r19, r22, r24;
        android.os.Parcelable$Creator $r8, $r10;
        java.lang.Object $r9, $r11;
        java.lang.String $r12;
        java.lang.Throwable $r13, $r14, $r15, r20;

        r0 := @this: android.os.Binder;

        i0 := @parameter0: int;

        r16 := @parameter1: android.os.Parcel;

        r1 := @parameter2: android.os.Parcel;

        i1 := @parameter3: int;

        if i0 != 1598968902 goto label01;

        $r12 = virtualinvoke r0.<android.os.Binder: java.lang.String getInterfaceDescriptor()>();

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>($r12);

        return 1;

     label01:
        if i0 != 1598311760 goto label11;

        r17 = virtualinvoke r16.<android.os.Parcel: android.os.ParcelFileDescriptor readFileDescriptor()>();

        r18 = virtualinvoke r16.<android.os.Parcel: java.lang.String[] readStringArray()>();

        if r17 == null goto label08;

     label02:
        r19 = virtualinvoke r17.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

     label03:
        virtualinvoke r0.<android.os.Binder: void dump(java.io.FileDescriptor,java.lang.String[])>(r19, r18);

     label04:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r17);

        goto label08;

     label05:
        $r13 := @caughtexception;

        r20 = $r13;

        goto label07;

     label06:
        $r14 := @caughtexception;

        r20 = $r14;

     label07:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r17);

        throw r20;

     label08:
        if r1 == null goto label09;

        virtualinvoke r1.<android.os.Parcel: void writeNoException()>();

        goto label10;

     label09:
        staticinvoke <android.os.StrictMode: void clearGatheredViolations()>();

     label10:
        return 1;

     label11:
        if i0 != 1598246212 goto label29;

        r21 = virtualinvoke r16.<android.os.Parcel: android.os.ParcelFileDescriptor readFileDescriptor()>();

        r2 = virtualinvoke r16.<android.os.Parcel: android.os.ParcelFileDescriptor readFileDescriptor()>();

        r3 = virtualinvoke r16.<android.os.Parcel: android.os.ParcelFileDescriptor readFileDescriptor()>();

        r4 = virtualinvoke r16.<android.os.Parcel: java.lang.String[] readStringArray()>();

        $r8 = <android.os.ShellCallback: android.os.Parcelable$Creator CREATOR>;

        $r9 = interfaceinvoke $r8.<android.os.Parcelable$Creator: java.lang.Object createFromParcel(android.os.Parcel)>(r16);

        r5 = (android.os.ShellCallback) $r9;

        $r10 = <android.os.ResultReceiver: android.os.Parcelable$Creator CREATOR>;

        $r11 = interfaceinvoke $r10.<android.os.Parcelable$Creator: java.lang.Object createFromParcel(android.os.Parcel)>(r16);

        r6 = (android.os.ResultReceiver) $r11;

        if r2 == null goto label26;

        if r21 == null goto label15;

     label12:
        r22 = virtualinvoke r21.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

     label13:
        goto label16;

     label14:
        $r15 := @caughtexception;

        goto label23;

     label15:
        r22 = null;

     label16:
        r7 = virtualinvoke r2.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

     label17:
        if r3 == null goto label20;

     label18:
        r24 = virtualinvoke r3.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

     label19:
        goto label21;

     label20:
        r24 = virtualinvoke r2.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

     label21:
        virtualinvoke r0.<android.os.Binder: void shellCommand(java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[],android.os.ShellCallback,android.os.ResultReceiver)>(r22, r7, r24, r4, r5, r6);

     label22:
        goto label26;

     label23:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r21);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r2);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r3);

        if r1 == null goto label24;

        virtualinvoke r1.<android.os.Parcel: void writeNoException()>();

        goto label25;

     label24:
        staticinvoke <android.os.StrictMode: void clearGatheredViolations()>();

     label25:
        throw $r15;

     label26:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r21);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r2);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r3);

        if r1 == null goto label27;

        virtualinvoke r1.<android.os.Parcel: void writeNoException()>();

        goto label28;

     label27:
        staticinvoke <android.os.StrictMode: void clearGatheredViolations()>();

     label28:
        return 1;

     label29:
        return 0;

        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label16 to label17 with label14;
        catch java.lang.Throwable from label18 to label19 with label14;
        catch java.lang.Throwable from label20 to label21 with label14;
        catch java.lang.Throwable from label21 to label22 with label14;
    }

    public boolean pingBinder()
    {
        android.os.Binder r0;

        r0 := @this: android.os.Binder;

        return 1;
    }

    public android.os.IInterface queryLocalInterface(java.lang.String)
    {
        android.os.Binder r0;
        java.lang.String r1, r2;
        boolean $z0;
        android.os.IInterface $r3;

        r0 := @this: android.os.Binder;

        r1 := @parameter0: java.lang.String;

        r2 = r0.<android.os.Binder: java.lang.String mDescriptor>;

        if r2 == null goto label1;

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<android.os.Binder: android.os.IInterface mOwner>;

        return $r3;

     label1:
        return null;
    }

    public final native void setExtension(android.os.IBinder);

    public void shellCommand(java.io.FileDescriptor, java.io.FileDescriptor, java.io.FileDescriptor, java.lang.String[], android.os.ShellCallback, android.os.ResultReceiver) throws android.os.RemoteException
    {
        android.os.Binder r0;
        java.io.FileDescriptor r1, r2, r3;
        java.lang.String[] r4;
        android.os.ShellCallback r5;
        android.os.ResultReceiver r6;

        r0 := @this: android.os.Binder;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.FileDescriptor;

        r3 := @parameter2: java.io.FileDescriptor;

        r4 := @parameter3: java.lang.String[];

        r5 := @parameter4: android.os.ShellCallback;

        r6 := @parameter5: android.os.ResultReceiver;

        virtualinvoke r0.<android.os.Binder: void onShellCommand(java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[],android.os.ShellCallback,android.os.ResultReceiver)>(r1, r2, r3, r4, r5, r6);

        return;
    }

    public final boolean transact(int, android.os.Parcel, android.os.Parcel, int) throws android.os.RemoteException
    {
        android.os.Binder r0;
        int i0, i1;
        android.os.Parcel r1, r2;
        boolean z0;

        r0 := @this: android.os.Binder;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Parcel;

        r2 := @parameter2: android.os.Parcel;

        i1 := @parameter3: int;

        if r1 == null goto label1;

        virtualinvoke r1.<android.os.Parcel: void setDataPosition(int)>(0);

     label1:
        z0 = virtualinvoke r0.<android.os.Binder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>(i0, r1, r2, i1);

        if r2 == null goto label2;

        virtualinvoke r2.<android.os.Parcel: void setDataPosition(int)>(0);

     label2:
        return z0;
    }

    public boolean unlinkToDeath(android.os.IBinder$DeathRecipient, int)
    {
        android.os.Binder r0;
        android.os.IBinder$DeathRecipient r1;
        int i0;

        r0 := @this: android.os.Binder;

        r1 := @parameter0: android.os.IBinder$DeathRecipient;

        i0 := @parameter1: int;

        return 1;
    }
}
