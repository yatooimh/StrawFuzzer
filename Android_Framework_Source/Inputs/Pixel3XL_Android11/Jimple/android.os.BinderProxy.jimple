public final class android.os.BinderProxy extends java.lang.Object implements android.os.IBinder
{
    private static final int NATIVE_ALLOCATION_SIZE;
    private static final android.os.BinderProxy$ProxyMap sProxyMap;
    private static volatile android.os.Binder$ProxyTransactListener sTransactListener;
    private final long mNativeData;
    volatile boolean mWarnOnBlocking;

    static void <clinit>()
    {
        android.os.BinderProxy$ProxyMap $r0;

        <android.os.BinderProxy: int NATIVE_ALLOCATION_SIZE> = 1000;

        <android.os.BinderProxy: android.os.Binder$ProxyTransactListener sTransactListener> = null;

        $r0 = new android.os.BinderProxy$ProxyMap;

        specialinvoke $r0.<android.os.BinderProxy$ProxyMap: void <init>(android.os.BinderProxy$1)>(null);

        <android.os.BinderProxy: android.os.BinderProxy$ProxyMap sProxyMap> = $r0;

        return;
    }

    private void <init>(long)
    {
        android.os.BinderProxy r0;
        long l0;
        boolean $z0;

        r0 := @this: android.os.BinderProxy;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = <android.os.Binder: boolean sWarnOnBlocking>;

        r0.<android.os.BinderProxy: boolean mWarnOnBlocking> = $z0;

        r0.<android.os.BinderProxy: long mNativeData> = l0;

        return;
    }

    static android.os.BinderProxy$ProxyMap access$000()
    {
        android.os.BinderProxy$ProxyMap $r0;

        $r0 = <android.os.BinderProxy: android.os.BinderProxy$ProxyMap sProxyMap>;

        return $r0;
    }

    static long access$600()
    {
        long $l0;

        $l0 = staticinvoke <android.os.BinderProxy: long getNativeFinalizer()>();

        return $l0;
    }

    public static void dumpProxyDebugInfo()
    {
        boolean $z0;
        android.os.BinderProxy$ProxyMap $r0, $r1;

        $z0 = <android.os.Build: boolean IS_DEBUGGABLE>;

        if $z0 == 0 goto label1;

        $r0 = <android.os.BinderProxy: android.os.BinderProxy$ProxyMap sProxyMap>;

        staticinvoke <android.os.BinderProxy$ProxyMap: void access$400(android.os.BinderProxy$ProxyMap)>($r0);

        $r1 = <android.os.BinderProxy: android.os.BinderProxy$ProxyMap sProxyMap>;

        staticinvoke <android.os.BinderProxy$ProxyMap: void access$500(android.os.BinderProxy$ProxyMap)>($r1);

     label1:
        return;
    }

    private static android.os.BinderProxy getInstance(long, long)
    {
        long l0, l1, $l2;
        android.os.BinderProxy$ProxyMap r0, $r1, $r4;
        libcore.util.NativeAllocationRegistry $r2;
        java.lang.Throwable $r5, $r6;
        android.os.BinderProxy r7, r8;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r0 = <android.os.BinderProxy: android.os.BinderProxy$ProxyMap sProxyMap>;

        entermonitor r0;

     label01:
        $r1 = <android.os.BinderProxy: android.os.BinderProxy$ProxyMap sProxyMap>;

        r7 = virtualinvoke $r1.<android.os.BinderProxy$ProxyMap: android.os.BinderProxy get(long)>(l1);

     label02:
        if r7 == null goto label05;

     label03:
        exitmonitor r0;

     label04:
        return r7;

     label05:
        r8 = new android.os.BinderProxy;

        specialinvoke r8.<android.os.BinderProxy: void <init>(long)>(l0);

     label06:
        $r2 = <android.os.BinderProxy$NoImagePreloadHolder: libcore.util.NativeAllocationRegistry sRegistry>;

        virtualinvoke $r2.<libcore.util.NativeAllocationRegistry: java.lang.Runnable registerNativeAllocation(java.lang.Object,long)>(r8, l0);

        $r4 = <android.os.BinderProxy: android.os.BinderProxy$ProxyMap sProxyMap>;

        virtualinvoke $r4.<android.os.BinderProxy$ProxyMap: void set(long,android.os.BinderProxy)>(l1, r8);

        exitmonitor r0;

     label07:
        return r8;

     label08:
        $r6 := @caughtexception;

     label09:
        $l2 = <android.os.BinderProxy$NoImagePreloadHolder: long sNativeFinalizer>;

        staticinvoke <libcore.util.NativeAllocationRegistry: void applyFreeFunction(long,long)>($l2, l0);

     label10:
        throw $r6;

     label11:
        $r5 := @caughtexception;

     label12:
        exitmonitor r0;

     label13:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label10 to label11 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    private static native long getNativeFinalizer();

    public static int getProxyCount()
    {
        android.os.BinderProxy$ProxyMap r0, $r2;
        int i0;
        java.lang.Throwable $r3;

        r0 = <android.os.BinderProxy: android.os.BinderProxy$ProxyMap sProxyMap>;

        entermonitor r0;

     label1:
        $r2 = <android.os.BinderProxy: android.os.BinderProxy$ProxyMap sProxyMap>;

        i0 = staticinvoke <android.os.BinderProxy$ProxyMap: int access$300(android.os.BinderProxy$ProxyMap)>($r2);

        exitmonitor r0;

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static android.os.BinderProxy$InterfaceCount[] getSortedInterfaceCounts(int)
    {
        int i0;
        android.os.BinderProxy$ProxyMap $r0;
        android.os.BinderProxy$InterfaceCount[] $r1;

        i0 := @parameter0: int;

        $r0 = <android.os.BinderProxy: android.os.BinderProxy$ProxyMap sProxyMap>;

        $r1 = staticinvoke <android.os.BinderProxy$ProxyMap: android.os.BinderProxy$InterfaceCount[] access$200(android.os.BinderProxy$ProxyMap,int)>($r0, i0);

        return $r1;
    }

    private static void sendDeathNotice(android.os.IBinder$DeathRecipient, android.os.IBinder)
    {
        android.os.IBinder r0;
        java.lang.RuntimeException $r1;
        android.os.IBinder$DeathRecipient r2;

        r2 := @parameter0: android.os.IBinder$DeathRecipient;

        r0 := @parameter1: android.os.IBinder;

     label1:
        interfaceinvoke r2.<android.os.IBinder$DeathRecipient: void binderDied(android.os.IBinder)>(r0);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("BinderNative", "Uncaught exception from death notification", $r1);

     label4:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public static void setTransactListener(android.os.Binder$ProxyTransactListener)
    {
        android.os.Binder$ProxyTransactListener r0;

        r0 := @parameter0: android.os.Binder$ProxyTransactListener;

        <android.os.BinderProxy: android.os.Binder$ProxyTransactListener sTransactListener> = r0;

        return;
    }

    public void dump(java.io.FileDescriptor, java.lang.String[]) throws android.os.RemoteException
    {
        android.os.BinderProxy r0;
        java.lang.String[] r1;
        android.os.Parcel r2, r3;
        java.lang.Throwable $r4;
        java.io.FileDescriptor r5;

        r0 := @this: android.os.BinderProxy;

        r5 := @parameter0: java.io.FileDescriptor;

        r1 := @parameter1: java.lang.String[];

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r3 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        virtualinvoke r2.<android.os.Parcel: void writeFileDescriptor(java.io.FileDescriptor)>(r5);

        virtualinvoke r2.<android.os.Parcel: void writeStringArray(java.lang.String[])>(r1);

     label1:
        virtualinvoke r0.<android.os.BinderProxy: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(1598311760, r2, r3, 0);

        virtualinvoke r3.<android.os.Parcel: void readException()>();

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        return;

     label3:
        $r4 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void dumpAsync(java.io.FileDescriptor, java.lang.String[]) throws android.os.RemoteException
    {
        android.os.BinderProxy r0;
        java.lang.String[] r1;
        android.os.Parcel r2, r3;
        java.lang.Throwable $r4;
        java.io.FileDescriptor r5;

        r0 := @this: android.os.BinderProxy;

        r5 := @parameter0: java.io.FileDescriptor;

        r1 := @parameter1: java.lang.String[];

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r3 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        virtualinvoke r2.<android.os.Parcel: void writeFileDescriptor(java.io.FileDescriptor)>(r5);

        virtualinvoke r2.<android.os.Parcel: void writeStringArray(java.lang.String[])>(r1);

     label1:
        virtualinvoke r0.<android.os.BinderProxy: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(1598311760, r2, r3, 1);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        return;

     label3:
        $r4 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public native android.os.IBinder getExtension() throws android.os.RemoteException;

    public native java.lang.String getInterfaceDescriptor() throws android.os.RemoteException;

    public native boolean isBinderAlive();

    public native void linkToDeath(android.os.IBinder$DeathRecipient, int) throws android.os.RemoteException;

    public native boolean pingBinder();

    public android.os.IInterface queryLocalInterface(java.lang.String)
    {
        android.os.BinderProxy r0;
        java.lang.String r1;

        r0 := @this: android.os.BinderProxy;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public void shellCommand(java.io.FileDescriptor, java.io.FileDescriptor, java.io.FileDescriptor, java.lang.String[], android.os.ShellCallback, android.os.ResultReceiver) throws android.os.RemoteException
    {
        android.os.BinderProxy r0;
        java.io.FileDescriptor r1, r2, r9;
        java.lang.String[] r3;
        android.os.ShellCallback r4;
        android.os.ResultReceiver r5;
        android.os.Parcel r6, r7;
        java.lang.Throwable $r8;

        r0 := @this: android.os.BinderProxy;

        r9 := @parameter0: java.io.FileDescriptor;

        r1 := @parameter1: java.io.FileDescriptor;

        r2 := @parameter2: java.io.FileDescriptor;

        r3 := @parameter3: java.lang.String[];

        r4 := @parameter4: android.os.ShellCallback;

        r5 := @parameter5: android.os.ResultReceiver;

        r6 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r7 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        virtualinvoke r6.<android.os.Parcel: void writeFileDescriptor(java.io.FileDescriptor)>(r9);

        virtualinvoke r6.<android.os.Parcel: void writeFileDescriptor(java.io.FileDescriptor)>(r1);

        virtualinvoke r6.<android.os.Parcel: void writeFileDescriptor(java.io.FileDescriptor)>(r2);

        virtualinvoke r6.<android.os.Parcel: void writeStringArray(java.lang.String[])>(r3);

        staticinvoke <android.os.ShellCallback: void writeToParcel(android.os.ShellCallback,android.os.Parcel)>(r4, r6);

        virtualinvoke r5.<android.os.ResultReceiver: void writeToParcel(android.os.Parcel,int)>(r6, 0);

     label1:
        virtualinvoke r0.<android.os.BinderProxy: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(1598246212, r6, r7, 0);

        virtualinvoke r7.<android.os.Parcel: void readException()>();

     label2:
        virtualinvoke r6.<android.os.Parcel: void recycle()>();

        virtualinvoke r7.<android.os.Parcel: void recycle()>();

        return;

     label3:
        $r8 := @caughtexception;

        virtualinvoke r6.<android.os.Parcel: void recycle()>();

        virtualinvoke r7.<android.os.Parcel: void recycle()>();

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean transact(int, android.os.Parcel, android.os.Parcel, int) throws android.os.RemoteException
    {
        android.os.BinderProxy r0;
        int i0, i1, i2, $i3, i6, i7, $i8;
        android.os.Parcel r1, r19;
        boolean z0, z1, $z2, $z3, $z5, $z6;
        android.os.Binder$ProxyTransactListener r2;
        java.lang.Throwable $r3, $r16, $r17, $r18;
        android.os.TransactionTracker $r4;
        java.lang.StackTraceElement[] $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r7, $r10, $r12;
        java.lang.ThreadLocal $r13;
        java.lang.Object $r14, r23, r24;
        java.lang.Boolean $r15;
        java.lang.StackTraceElement r21;
        android.app.AppOpsManager$PausedNotedAppOpsCollection r25;

        r0 := @this: android.os.BinderProxy;

        i0 := @parameter0: int;

        r19 := @parameter1: android.os.Parcel;

        r1 := @parameter2: android.os.Parcel;

        i1 := @parameter3: int;

        staticinvoke <android.os.Binder: void checkParcel(android.os.IBinder,int,android.os.Parcel,java.lang.String)>(r0, i0, r19, "Unreasonably large binder buffer");

        $z2 = r0.<android.os.BinderProxy: boolean mWarnOnBlocking>;

        if $z2 == 0 goto label02;

        $i3 = i1 & 1;

        if $i3 != 0 goto label02;

        $r13 = <android.os.Binder: java.lang.ThreadLocal sWarnOnBlockingOnCurrentThread>;

        $r14 = virtualinvoke $r13.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r15 = (java.lang.Boolean) $r14;

        $z5 = virtualinvoke $r15.<java.lang.Boolean: boolean booleanValue()>();

        if $z5 == 0 goto label02;

        r0.<android.os.BinderProxy: boolean mWarnOnBlocking> = 0;

        $z6 = <android.os.Build: boolean IS_USERDEBUG>;

        if $z6 == 0 goto label01;

        $r17 = new java.lang.Throwable;

        specialinvoke $r17.<java.lang.Throwable: void <init>()>();

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("Binder", "Outgoing transactions from this process must be FLAG_ONEWAY", $r17);

        goto label02;

     label01:
        $r16 = new java.lang.Throwable;

        specialinvoke $r16.<java.lang.Throwable: void <init>()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("Binder", "Outgoing transactions from this process must be FLAG_ONEWAY", $r16);

     label02:
        z0 = staticinvoke <android.os.Binder: boolean isTracingEnabled()>();

        if z0 == 0 goto label03;

        $r3 = new java.lang.Throwable;

        specialinvoke $r3.<java.lang.Throwable: void <init>()>();

        $r4 = staticinvoke <android.os.Binder: android.os.TransactionTracker getTransactionTracker()>();

        virtualinvoke $r4.<android.os.TransactionTracker: void addTrace(java.lang.Throwable)>($r3);

        $r5 = virtualinvoke $r3.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        r21 = $r5[1];

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke r21.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r10 = virtualinvoke r21.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(1L, $r12);

     label03:
        r2 = <android.os.BinderProxy: android.os.Binder$ProxyTransactListener sTransactListener>;

        r23 = null;

        if r2 == null goto label04;

        i2 = staticinvoke <android.os.Binder: int getCallingWorkSourceUid()>();

        r24 = interfaceinvoke r2.<android.os.Binder$ProxyTransactListener: java.lang.Object onTransactStarted(android.os.IBinder,int,int)>(r0, i0, i1);

        i6 = staticinvoke <android.os.Binder: int getCallingWorkSourceUid()>();

        r23 = r24;

        if i2 == i6 goto label04;

        virtualinvoke r19.<android.os.Parcel: boolean replaceCallingWorkSourceUid(int)>(i6);

        r23 = r24;

     label04:
        r25 = staticinvoke <android.app.AppOpsManager: android.app.AppOpsManager$PausedNotedAppOpsCollection pauseNotedAppOpsCollection()>();

        i7 = i1;

        $i8 = i1 & 1;

        if $i8 != 0 goto label05;

        i7 = i1;

        $z3 = staticinvoke <android.app.AppOpsManager: boolean isListeningForOpNoted()>();

        if $z3 == 0 goto label05;

        i7 = i1 | 2;

     label05:
        z1 = virtualinvoke r0.<android.os.BinderProxy: boolean transactNative(int,android.os.Parcel,android.os.Parcel,int)>(i0, r19, r1, i7);

     label06:
        staticinvoke <android.app.AppOpsManager: void resumeNotedAppOpsCollection(android.app.AppOpsManager$PausedNotedAppOpsCollection)>(r25);

        if r2 == null goto label07;

        interfaceinvoke r2.<android.os.Binder$ProxyTransactListener: void onTransactEnded(java.lang.Object)>(r23);

     label07:
        if z0 == 0 goto label08;

        staticinvoke <android.os.Trace: void traceEnd(long)>(1L);

     label08:
        return z1;

     label09:
        $r18 := @caughtexception;

        staticinvoke <android.app.AppOpsManager: void resumeNotedAppOpsCollection(android.app.AppOpsManager$PausedNotedAppOpsCollection)>(r25);

        if r2 == null goto label10;

        interfaceinvoke r2.<android.os.Binder$ProxyTransactListener: void onTransactEnded(java.lang.Object)>(r23);

     label10:
        if z0 == 0 goto label11;

        staticinvoke <android.os.Trace: void traceEnd(long)>(1L);

     label11:
        throw $r18;

        catch java.lang.Throwable from label05 to label06 with label09;
    }

    public native boolean transactNative(int, android.os.Parcel, android.os.Parcel, int) throws android.os.RemoteException;

    public native boolean unlinkToDeath(android.os.IBinder$DeathRecipient, int);
}
