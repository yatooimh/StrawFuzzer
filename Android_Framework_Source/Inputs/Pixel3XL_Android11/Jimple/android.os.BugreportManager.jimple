public final class android.os.BugreportManager extends java.lang.Object
{
    private static final java.lang.String INTENT_UI_INTENSIVE_BUGREPORT_DUMPS_FINISHED;
    private static final java.lang.String TAG;
    private final android.os.IDumpstate mBinder;
    private final android.content.Context mContext;

    public void <init>(android.content.Context, android.os.IDumpstate)
    {
        android.os.BugreportManager r0;
        android.content.Context r1;
        android.os.IDumpstate r2;

        r0 := @this: android.os.BugreportManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.IDumpstate;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.os.BugreportManager: android.content.Context mContext> = r1;

        r0.<android.os.BugreportManager: android.os.IDumpstate mBinder> = r2;

        return;
    }

    static android.content.Context access$000(android.os.BugreportManager)
    {
        android.os.BugreportManager r0;
        android.content.Context $r1;

        r0 := @parameter0: android.os.BugreportManager;

        $r1 = r0.<android.os.BugreportManager: android.content.Context mContext>;

        return $r1;
    }

    public void cancelBugreport()
    {
        android.os.BugreportManager r0;
        android.os.IDumpstate $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.os.BugreportManager;

     label1:
        $r2 = r0.<android.os.BugreportManager: android.os.IDumpstate mBinder>;

        interfaceinvoke $r2.<android.os.IDumpstate: void cancelBugreport()>();

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void requestBugreport(android.os.BugreportParams, java.lang.CharSequence, java.lang.CharSequence)
    {
        android.os.BugreportManager r0;
        android.app.IActivityManager $r1;
        int $i0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.os.BugreportParams r4;
        java.lang.CharSequence r5, r6;
        java.lang.String r7, r8;

        r0 := @this: android.os.BugreportManager;

        r4 := @parameter0: android.os.BugreportParams;

        r5 := @parameter1: java.lang.CharSequence;

        r6 := @parameter2: java.lang.CharSequence;

        if r5 != null goto label1;

        r7 = null;

        goto label2;

     label1:
        r7 = interfaceinvoke r5.<java.lang.CharSequence: java.lang.String toString()>();

     label2:
        if r6 != null goto label3;

        r8 = null;

        goto label4;

     label3:
        r8 = interfaceinvoke r6.<java.lang.CharSequence: java.lang.String toString()>();

     label4:
        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $i0 = virtualinvoke r4.<android.os.BugreportParams: int getMode()>();

        interfaceinvoke $r1.<android.app.IActivityManager: void requestBugReportWithDescription(java.lang.String,java.lang.String,int)>(r7, r8, $i0);

     label5:
        return;

     label6:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    public void startBugreport(android.os.ParcelFileDescriptor, android.os.ParcelFileDescriptor, android.os.BugreportParams, java.util.concurrent.Executor, android.os.BugreportManager$BugreportCallback)
    {
        android.os.BugreportManager r0;
        android.os.ParcelFileDescriptor r1, r18, r19, r20, r21, r22;
        android.os.BugreportParams r2;
        java.util.concurrent.Executor r3;
        android.os.BugreportManager$BugreportCallback r4;
        android.content.Context $r9;
        android.os.IDumpstate $r10;
        java.lang.String $r11;
        java.io.FileDescriptor $r12, $r13;
        int $i0;
        java.lang.Throwable $r14, $r15;
        android.os.RemoteException $r16;
        java.lang.RuntimeException $r17;
        boolean z0;
        java.io.File r23;
        android.os.BugreportManager$DumpstateListener r24;

        r0 := @this: android.os.BugreportManager;

        r1 := @parameter0: android.os.ParcelFileDescriptor;

        r18 := @parameter1: android.os.ParcelFileDescriptor;

        r2 := @parameter2: android.os.BugreportParams;

        r3 := @parameter3: java.util.concurrent.Executor;

        r4 := @parameter4: android.os.BugreportManager$BugreportCallback;

        r19 = r18;

        r20 = r18;

        r21 = r18;

     label01:
        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

     label02:
        r19 = r18;

        r20 = r18;

        r21 = r18;

     label03:
        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

     label04:
        r19 = r18;

        r20 = r18;

        r21 = r18;

     label05:
        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r3);

     label06:
        r19 = r18;

        r20 = r18;

        r21 = r18;

     label07:
        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r4);

     label08:
        if r18 == null goto label09;

        z0 = 1;

        goto label10;

     label09:
        z0 = 0;

     label10:
        r22 = r18;

        if r18 != null goto label16;

        r19 = r18;

        r20 = r18;

        r21 = r18;

     label11:
        r23 = new java.io.File;

     label12:
        r19 = r18;

        r20 = r18;

        r21 = r18;

     label13:
        specialinvoke r23.<java.io.File: void <init>(java.lang.String)>("/dev/null");

     label14:
        r19 = r18;

        r20 = r18;

        r21 = r18;

     label15:
        r22 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int)>(r23, 268435456);

     label16:
        r19 = r22;

        r20 = r22;

        r21 = r22;

     label17:
        r24 = new android.os.BugreportManager$DumpstateListener;

     label18:
        r19 = r22;

        r20 = r22;

        r21 = r22;

     label19:
        specialinvoke r24.<android.os.BugreportManager$DumpstateListener: void <init>(android.os.BugreportManager,java.util.concurrent.Executor,android.os.BugreportManager$BugreportCallback,boolean)>(r0, r3, r4, z0);

     label20:
        r19 = r22;

        r20 = r22;

        r21 = r22;

     label21:
        $r10 = r0.<android.os.BugreportManager: android.os.IDumpstate mBinder>;

        $r9 = r0.<android.os.BugreportManager: android.content.Context mContext>;

        $r11 = virtualinvoke $r9.<android.content.Context: java.lang.String getOpPackageName()>();

        $r12 = virtualinvoke r1.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        $r13 = virtualinvoke r22.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        $i0 = virtualinvoke r2.<android.os.BugreportParams: int getMode()>();

        interfaceinvoke $r10.<android.os.IDumpstate: void startBugreport(int,java.lang.String,java.io.FileDescriptor,java.io.FileDescriptor,int,android.os.IDumpstateListener,boolean)>(-1, $r11, $r12, $r13, $i0, r24, z0);

     label22:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        if r22 == null goto label28;

     label23:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r22);

        goto label28;

     label24:
        $r14 := @caughtexception;

        goto label31;

     label25:
        $r15 := @caughtexception;

        r19 = r20;

     label26:
        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("BugreportManager", "Not able to find /dev/null file: ", $r15);

     label27:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        if r20 == null goto label28;

        r22 = r20;

        goto label23;

     label28:
        return;

     label29:
        $r16 := @caughtexception;

        r19 = r21;

     label30:
        $r17 = virtualinvoke $r16.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r17;

     label31:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        if r19 == null goto label32;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r19);

     label32:
        throw $r14;

        catch android.os.RemoteException from label01 to label02 with label29;
        catch java.io.FileNotFoundException from label01 to label02 with label25;
        catch java.lang.Throwable from label01 to label02 with label24;
        catch android.os.RemoteException from label03 to label04 with label29;
        catch java.io.FileNotFoundException from label03 to label04 with label25;
        catch java.lang.Throwable from label03 to label04 with label24;
        catch android.os.RemoteException from label05 to label06 with label29;
        catch java.io.FileNotFoundException from label05 to label06 with label25;
        catch java.lang.Throwable from label05 to label06 with label24;
        catch android.os.RemoteException from label07 to label08 with label29;
        catch java.io.FileNotFoundException from label07 to label08 with label25;
        catch java.lang.Throwable from label07 to label08 with label24;
        catch android.os.RemoteException from label11 to label12 with label29;
        catch java.io.FileNotFoundException from label11 to label12 with label25;
        catch java.lang.Throwable from label11 to label12 with label24;
        catch android.os.RemoteException from label13 to label14 with label29;
        catch java.io.FileNotFoundException from label13 to label14 with label25;
        catch java.lang.Throwable from label13 to label14 with label24;
        catch android.os.RemoteException from label15 to label16 with label29;
        catch java.io.FileNotFoundException from label15 to label16 with label25;
        catch java.lang.Throwable from label15 to label16 with label24;
        catch android.os.RemoteException from label17 to label18 with label29;
        catch java.io.FileNotFoundException from label17 to label18 with label25;
        catch java.lang.Throwable from label17 to label18 with label24;
        catch android.os.RemoteException from label19 to label20 with label29;
        catch java.io.FileNotFoundException from label19 to label20 with label25;
        catch java.lang.Throwable from label19 to label20 with label24;
        catch android.os.RemoteException from label21 to label22 with label29;
        catch java.io.FileNotFoundException from label21 to label22 with label25;
        catch java.lang.Throwable from label21 to label22 with label24;
        catch java.lang.Throwable from label26 to label27 with label24;
        catch java.lang.Throwable from label30 to label31 with label24;
    }

    public static void <clinit>()
    {
        <android.os.BugreportManager: java.lang.String TAG> = "BugreportManager";

        <android.os.BugreportManager: java.lang.String INTENT_UI_INTENSIVE_BUGREPORT_DUMPS_FINISHED> = "com.android.internal.intent.action.UI_INTENSIVE_BUGREPORT_DUMPS_FINISHED";

        return;
    }
}
