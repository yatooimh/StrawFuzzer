public class android.os.Build extends java.lang.Object
{
    public static final java.lang.String BOARD;
    public static final java.lang.String BOOTLOADER;
    public static final java.lang.String BRAND;
    public static final java.lang.String CPU_ABI;
    public static final java.lang.String CPU_ABI2;
    public static final java.lang.String DEVICE;
    public static final java.lang.String DISPLAY;
    public static final java.lang.String FINGERPRINT;
    public static final java.lang.String HARDWARE;
    public static final java.lang.String HOST;
    public static final java.lang.String ID;
    public static final boolean IS_CONTAINER;
    public static final boolean IS_DEBUGGABLE;
    public static final boolean IS_EMULATOR;
    public static final boolean IS_ENG;
    public static final boolean IS_TREBLE_ENABLED;
    public static final boolean IS_USER;
    public static final boolean IS_USERDEBUG;
    public static final java.lang.String MANUFACTURER;
    public static final java.lang.String MODEL;
    public static final boolean PERMISSIONS_REVIEW_REQUIRED;
    public static final java.lang.String PRODUCT;
    public static final java.lang.String RADIO;
    public static final java.lang.String SERIAL;
    public static final java.lang.String[] SUPPORTED_32_BIT_ABIS;
    public static final java.lang.String[] SUPPORTED_64_BIT_ABIS;
    public static final java.lang.String[] SUPPORTED_ABIS;
    private static final java.lang.String TAG;
    public static final java.lang.String TAGS;
    public static final long TIME;
    public static final java.lang.String TYPE;
    public static final java.lang.String UNKNOWN;
    public static final java.lang.String USER;

    static void <clinit>()
    {
        int i0, $i3;
        java.lang.String $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r10, $r11, $r12, $r13, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30;
        java.util.List $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7;
        java.lang.String[] $r14, $r15, $r16, r31;
        dalvik.system.VMRuntime $r17;
        long $l1, $l2;

        <android.os.Build: java.lang.String UNKNOWN> = "unknown";

        <android.os.Build: java.lang.String TAG> = "Build";

        <android.os.Build: boolean PERMISSIONS_REVIEW_REQUIRED> = 1;

        $r0 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.build.id");

        <android.os.Build: java.lang.String ID> = $r0;

        $r1 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.build.display.id");

        <android.os.Build: java.lang.String DISPLAY> = $r1;

        $r2 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.product.name");

        <android.os.Build: java.lang.String PRODUCT> = $r2;

        $r3 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.product.device");

        <android.os.Build: java.lang.String DEVICE> = $r3;

        $r4 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.product.board");

        <android.os.Build: java.lang.String BOARD> = $r4;

        $r5 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.product.manufacturer");

        <android.os.Build: java.lang.String MANUFACTURER> = $r5;

        $r6 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.product.brand");

        <android.os.Build: java.lang.String BRAND> = $r6;

        $r7 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.product.model");

        <android.os.Build: java.lang.String MODEL> = $r7;

        $r8 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.bootloader");

        <android.os.Build: java.lang.String BOOTLOADER> = $r8;

        $r9 = staticinvoke <android.sysprop.TelephonyProperties: java.util.List baseband_version()>();

        $r10 = staticinvoke <android.os.Build: java.lang.String joinListOrElse(java.util.List,java.lang.String)>($r9, "unknown");

        <android.os.Build: java.lang.String RADIO> = $r10;

        $r11 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.hardware");

        <android.os.Build: java.lang.String HARDWARE> = $r11;

        $r12 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.kernel.qemu");

        $z0 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>("1");

        <android.os.Build: boolean IS_EMULATOR> = $z0;

        $r13 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("no.such.thing");

        <android.os.Build: java.lang.String SERIAL> = $r13;

        $r14 = staticinvoke <android.os.Build: java.lang.String[] getStringList(java.lang.String,java.lang.String)>("ro.product.cpu.abilist", ",");

        <android.os.Build: java.lang.String[] SUPPORTED_ABIS> = $r14;

        $r15 = staticinvoke <android.os.Build: java.lang.String[] getStringList(java.lang.String,java.lang.String)>("ro.product.cpu.abilist32", ",");

        <android.os.Build: java.lang.String[] SUPPORTED_32_BIT_ABIS> = $r15;

        $r16 = staticinvoke <android.os.Build: java.lang.String[] getStringList(java.lang.String,java.lang.String)>("ro.product.cpu.abilist64", ",");

        <android.os.Build: java.lang.String[] SUPPORTED_64_BIT_ABIS> = $r16;

        $r17 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        $z1 = virtualinvoke $r17.<dalvik.system.VMRuntime: boolean is64Bit()>();

        if $z1 == 0 goto label1;

        r31 = <android.os.Build: java.lang.String[] SUPPORTED_64_BIT_ABIS>;

        goto label2;

     label1:
        r31 = <android.os.Build: java.lang.String[] SUPPORTED_32_BIT_ABIS>;

     label2:
        $r18 = r31[0];

        <android.os.Build: java.lang.String CPU_ABI> = $r18;

        i0 = lengthof r31;

        z7 = 1;

        if i0 <= 1 goto label3;

        $r30 = r31[1];

        <android.os.Build: java.lang.String CPU_ABI2> = $r30;

        goto label4;

     label3:
        <android.os.Build: java.lang.String CPU_ABI2> = "";

     label4:
        $r19 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.build.type");

        <android.os.Build: java.lang.String TYPE> = $r19;

        $r20 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.build.tags");

        <android.os.Build: java.lang.String TAGS> = $r20;

        $r21 = staticinvoke <android.os.Build: java.lang.String deriveFingerprint()>();

        <android.os.Build: java.lang.String FINGERPRINT> = $r21;

        $z2 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("ro.treble.enabled", 0);

        <android.os.Build: boolean IS_TREBLE_ENABLED> = $z2;

        $l1 = staticinvoke <android.os.Build: long getLong(java.lang.String)>("ro.build.date.utc");

        $l2 = $l1 * 1000L;

        <android.os.Build: long TIME> = $l2;

        $r22 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.build.user");

        <android.os.Build: java.lang.String USER> = $r22;

        $r23 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.build.host");

        <android.os.Build: java.lang.String HOST> = $r23;

        $i3 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("ro.debuggable", 0);

        if $i3 != 1 goto label5;

        goto label6;

     label5:
        z7 = 0;

     label6:
        <android.os.Build: boolean IS_DEBUGGABLE> = z7;

        $r25 = "eng";

        $r24 = <android.os.Build: java.lang.String TYPE>;

        $z3 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>($r24);

        <android.os.Build: boolean IS_ENG> = $z3;

        $r27 = "userdebug";

        $r26 = <android.os.Build: java.lang.String TYPE>;

        $z4 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>($r26);

        <android.os.Build: boolean IS_USERDEBUG> = $z4;

        $r29 = "user";

        $r28 = <android.os.Build: java.lang.String TYPE>;

        $z5 = virtualinvoke $r29.<java.lang.String: boolean equals(java.lang.Object)>($r28);

        <android.os.Build: boolean IS_USER> = $z5;

        $z6 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("ro.boot.container", 0);

        <android.os.Build: boolean IS_CONTAINER> = $z6;

        return;
    }

    public void <init>()
    {
        android.os.Build r0;

        r0 := @this: android.os.Build;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static java.lang.String access$000(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>(r0);

        return $r1;
    }

    static java.lang.String[] access$100(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        java.lang.String[] $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <android.os.Build: java.lang.String[] getStringList(java.lang.String,java.lang.String)>(r0, r1);

        return $r2;
    }

    private static java.lang.String deriveFingerprint()
    {
        java.lang.String r0, $r2, $r5, $r8, $r11, $r14, $r17, $r20, $r23, r25;
        boolean $z0;
        java.lang.StringBuilder $r1;

        r0 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.build.fingerprint");

        r25 = r0;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 == 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.product.brand");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $r5 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.product.name");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $r8 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.product.device");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $r11 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.build.version.release");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $r14 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.build.id");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $r17 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.build.version.incremental");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $r20 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.build.type");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $r23 = staticinvoke <android.os.Build: java.lang.String getString(java.lang.String)>("ro.build.tags");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        r25 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        return r25;
    }

    public static void ensureFingerprintProperty()
    {
        java.lang.String $r1, $r2;
        boolean $z0;
        java.lang.Throwable $r3;

        $r1 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.build.fingerprint");

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r1);

        if $z0 == 0 goto label4;

     label1:
        $r2 = <android.os.Build: java.lang.String FINGERPRINT>;

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("ro.build.fingerprint", $r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Build", "Failed to set fingerprint property", $r3);

     label4:
        return;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public static java.util.List getFingerprintedPartitions()
    {
        java.lang.String[] r1;
        int i0, i3;
        java.lang.String r2, r3, $r9, $r15;
        java.util.ArrayList $r4;
        java.lang.StringBuilder $r5, $r10;
        boolean $z0;
        android.os.Build$Partition $r14;
        long $l1, $l2;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r1 = newarray (java.lang.String)[6];

        r1[0] = "bootimage";

        r1[1] = "odm";

        r1[2] = "product";

        r1[3] = "system_ext";

        r1[4] = "system";

        r1[5] = "vendor";

        i0 = lengthof r1;

        i3 = 0;

     label1:
        if i3 >= i0 goto label4;

        r2 = r1[i3];

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ro.");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".build.fingerprint");

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        r3 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>($r9);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r3);

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ro.");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".build.date.utc");

        $r14 = new android.os.Build$Partition;

        $r15 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $l1 = staticinvoke <android.os.Build: long getLong(java.lang.String)>($r15);

        $l2 = $l1 * 1000L;

        specialinvoke $r14.<android.os.Build$Partition: void <init>(java.lang.String,java.lang.String,long,android.os.Build$1)>(r2, r3, $l2, null);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r14);

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        return $r4;
    }

    private static long getLong(java.lang.String)
    {
        long l0;
        java.lang.String $r0, r2;
        java.lang.Throwable $r1;

        r2 := @parameter0: java.lang.String;

     label1:
        $r0 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>(r2);

        l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r0);

     label2:
        return l0;

     label3:
        $r1 := @caughtexception;

        return -1L;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public static java.lang.String getRadioVersion()
    {
        java.util.List $r0;
        java.lang.String $r1;

        $r0 = staticinvoke <android.sysprop.TelephonyProperties: java.util.List baseband_version()>();

        $r1 = staticinvoke <android.os.Build: java.lang.String joinListOrElse(java.util.List,java.lang.String)>($r0, null);

        return $r1;
    }

    public static java.lang.String getSerial()
    {
        android.os.IDeviceIdentifiersPolicyService r0;
        android.os.IBinder $r1;
        android.os.RemoteException $r2;
        android.app.Application r4;
        java.lang.String r5, r6;

        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("device_identifiers");

        r0 = staticinvoke <android.os.IDeviceIdentifiersPolicyService$Stub: android.os.IDeviceIdentifiersPolicyService asInterface(android.os.IBinder)>($r1);

     label1:
        r4 = staticinvoke <android.app.ActivityThread: android.app.Application currentApplication()>();

     label2:
        if r4 == null goto label5;

     label3:
        r5 = virtualinvoke r4.<android.app.Application: java.lang.String getPackageName()>();

     label4:
        goto label6;

     label5:
        r5 = null;

     label6:
        r6 = interfaceinvoke r0.<android.os.IDeviceIdentifiersPolicyService: java.lang.String getSerialForPackage(java.lang.String,java.lang.String)>(r5, null);

     label7:
        return r6;

     label8:
        $r2 := @caughtexception;

        virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        return "unknown";

        catch android.os.RemoteException from label1 to label2 with label8;
        catch android.os.RemoteException from label3 to label4 with label8;
        catch android.os.RemoteException from label6 to label7 with label8;
    }

    private static java.lang.String getString(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>(r0, "unknown");

        return $r1;
    }

    private static java.lang.String[] getStringList(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r3, r4;
        boolean $z0;
        java.lang.String[] $r1, $r2;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        r4 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>(r3);

        $z0 = virtualinvoke r4.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = newarray (java.lang.String)[0];

        return $r2;

     label1:
        $r1 = virtualinvoke r4.<java.lang.String: java.lang.String[] split(java.lang.String)>(r0);

        return $r1;
    }

    public static boolean is64BitAbi(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <dalvik.system.VMRuntime: boolean is64BitAbi(java.lang.String)>(r0);

        return $z0;
    }

    public static boolean isBuildConsistent()
    {
        boolean z0, $z1, $z2, $z3, $z4, z5;
        int i0;
        java.lang.String r0, $r13, $r16, $r18, r20;
        java.util.List $r6;
        java.lang.StringBuilder $r8, $r14;

        z0 = <android.os.Build: boolean IS_ENG>;

        z5 = 1;

        if z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = <android.os.Build: boolean IS_TREBLE_ENABLED>;

        if $z1 == 0 goto label5;

        i0 = staticinvoke <android.os.VintfObject: int verifyWithoutAvb()>();

        if i0 == 0 goto label2;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Vendor interface is incompatible, error=");

        $r16 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("Build", $r18);

     label2:
        if i0 != 0 goto label3;

        goto label4;

     label3:
        z5 = 0;

     label4:
        return z5;

     label5:
        r20 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.system.build.fingerprint");

        r0 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.vendor.build.fingerprint");

        staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.bootimage.build.fingerprint");

        staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.build.expect.bootloader");

        staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.bootloader");

        staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.build.expect.baseband");

        $r6 = staticinvoke <android.sysprop.TelephonyProperties: java.util.List baseband_version()>();

        staticinvoke <android.os.Build: java.lang.String joinListOrElse(java.util.List,java.lang.String)>($r6, "");

        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r20);

        if $z2 == 0 goto label6;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("Build", "Required ro.system.build.fingerprint is empty!");

        return 0;

     label6:
        $z3 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z3 != 0 goto label7;

        $z4 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r20, r0);

        if $z4 != 0 goto label7;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mismatched fingerprints; system reported ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but vendor reported ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("Build", $r13);

        return 0;

     label7:
        return 1;
    }

    private static java.lang.String joinListOrElse(java.util.List, java.lang.String)
    {
        java.util.stream.Stream $r0, $r2;
        android.os.'-$$Lambda$Build$WrC6eL7oW2Zm9UDTcXXKr0DnOMw' $r1;
        java.util.stream.Collector $r3;
        java.lang.Object $r4;
        boolean $z0;
        java.util.List r5;
        java.lang.String r6, r7;
        java.util.function.Function r8;

        r5 := @parameter0: java.util.List;

        r6 := @parameter1: java.lang.String;

        $r0 = interfaceinvoke r5.<java.util.List: java.util.stream.Stream stream()>();

        $r1 = <android.os._$$Lambda$Build$WrC6eL7oW2Zm9UDTcXXKr0DnOMw: android.os.'-$$Lambda$Build$WrC6eL7oW2Zm9UDTcXXKr0DnOMw' INSTANCE>;

        r8 = (java.util.function.Function) $r1;

        $r2 = interfaceinvoke $r0.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(r8);

        $r3 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence)>(",");

        $r4 = interfaceinvoke $r2.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r3);

        r7 = (java.lang.String) $r4;

        $z0 = virtualinvoke r7.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        r6 = r7;

     label2:
        return r6;
    }

    static java.lang.String lambda$joinListOrElse$0(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.String r1;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        r1 = "";

        goto label2;

     label1:
        r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

     label2:
        return r1;
    }
}
