public final class android.os.Debug extends java.lang.Object
{
    private static final java.lang.String DEFAULT_TRACE_BODY;
    private static final java.lang.String DEFAULT_TRACE_EXTENSION;
    public static final int MEMINFO_BUFFERS;
    public static final int MEMINFO_CACHED;
    public static final int MEMINFO_COUNT;
    public static final int MEMINFO_FREE;
    public static final int MEMINFO_KERNEL_STACK;
    public static final int MEMINFO_KRECLAIMABLE;
    public static final int MEMINFO_MAPPED;
    public static final int MEMINFO_PAGE_TABLES;
    public static final int MEMINFO_SHMEM;
    public static final int MEMINFO_SLAB;
    public static final int MEMINFO_SLAB_RECLAIMABLE;
    public static final int MEMINFO_SLAB_UNRECLAIMABLE;
    public static final int MEMINFO_SWAP_FREE;
    public static final int MEMINFO_SWAP_TOTAL;
    public static final int MEMINFO_TOTAL;
    public static final int MEMINFO_VM_ALLOC_USED;
    public static final int MEMINFO_ZRAM_TOTAL;
    private static final int MIN_DEBUGGER_IDLE;
    public static final int SHOW_CLASSLOADER;
    public static final int SHOW_FULL_DETAIL;
    public static final int SHOW_INITIALIZED;
    private static final int SPIN_DELAY;
    private static final java.lang.String SYSFS_QEMU_TRACE_STATE;
    private static final java.lang.String TAG;
    public static final int TRACE_COUNT_ALLOCS;
    private static final com.android.internal.util.TypedProperties debugProperties;
    private static volatile boolean mWaiting;

    static void <clinit>()
    {
        <android.os.Debug: int TRACE_COUNT_ALLOCS> = 1;

        <android.os.Debug: java.lang.String TAG> = "Debug";

        <android.os.Debug: java.lang.String SYSFS_QEMU_TRACE_STATE> = "/sys/qemu_trace/state";

        <android.os.Debug: int SPIN_DELAY> = 200;

        <android.os.Debug: int SHOW_INITIALIZED> = 4;

        <android.os.Debug: int SHOW_FULL_DETAIL> = 1;

        <android.os.Debug: int SHOW_CLASSLOADER> = 2;

        <android.os.Debug: int MIN_DEBUGGER_IDLE> = 1300;

        <android.os.Debug: int MEMINFO_ZRAM_TOTAL> = 10;

        <android.os.Debug: int MEMINFO_VM_ALLOC_USED> = 12;

        <android.os.Debug: int MEMINFO_TOTAL> = 0;

        <android.os.Debug: int MEMINFO_SWAP_TOTAL> = 8;

        <android.os.Debug: int MEMINFO_SWAP_FREE> = 9;

        <android.os.Debug: int MEMINFO_SLAB_UNRECLAIMABLE> = 7;

        <android.os.Debug: int MEMINFO_SLAB_RECLAIMABLE> = 6;

        <android.os.Debug: int MEMINFO_SLAB> = 5;

        <android.os.Debug: int MEMINFO_SHMEM> = 4;

        <android.os.Debug: int MEMINFO_PAGE_TABLES> = 13;

        <android.os.Debug: int MEMINFO_MAPPED> = 11;

        <android.os.Debug: int MEMINFO_KRECLAIMABLE> = 15;

        <android.os.Debug: int MEMINFO_KERNEL_STACK> = 14;

        <android.os.Debug: int MEMINFO_FREE> = 1;

        <android.os.Debug: int MEMINFO_COUNT> = 16;

        <android.os.Debug: int MEMINFO_CACHED> = 3;

        <android.os.Debug: int MEMINFO_BUFFERS> = 2;

        <android.os.Debug: java.lang.String DEFAULT_TRACE_EXTENSION> = ".trace";

        <android.os.Debug: java.lang.String DEFAULT_TRACE_BODY> = "dmtrace";

        <android.os.Debug: boolean mWaiting> = 0;

        <android.os.Debug: com.android.internal.util.TypedProperties debugProperties> = null;

        return;
    }

    private void <init>()
    {
        android.os.Debug r0;

        r0 := @this: android.os.Debug;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void attachJvmtiAgent(java.lang.String, java.lang.String, java.lang.ClassLoader) throws java.io.IOException
    {
        java.lang.String r0, r1, $r9;
        java.lang.ClassLoader r2;
        boolean $z0, $z1;
        java.lang.StringBuilder $r5;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.ClassLoader;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $z0 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("=");

        $z1 = $z0 ^ 1;

        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean)>($z1);

        if r1 != null goto label1;

        staticinvoke <dalvik.system.VMDebug: void attachAgent(java.lang.String,java.lang.ClassLoader)>(r0, r2);

        goto label2;

     label1:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <dalvik.system.VMDebug: void attachAgent(java.lang.String,java.lang.ClassLoader)>($r9, r2);

     label2:
        return;
    }

    public static final boolean cacheRegisterMap(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <dalvik.system.VMDebug: boolean cacheRegisterMap(java.lang.String)>(r0);

        return $z0;
    }

    public static void changeDebugPort(int)
    {
        int i0;

        i0 := @parameter0: int;

        return;
    }

    public static long countInstancesOfClass(java.lang.Class)
    {
        java.lang.Class r0;
        long $l0;

        r0 := @parameter0: java.lang.Class;

        $l0 = staticinvoke <dalvik.system.VMDebug: long countInstancesOfClass(java.lang.Class,boolean)>(r0, 1);

        return $l0;
    }

    public static void dumpHprofData(java.lang.String) throws java.io.IOException
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <dalvik.system.VMDebug: void dumpHprofData(java.lang.String)>(r0);

        return;
    }

    public static void dumpHprofData(java.lang.String, java.io.FileDescriptor) throws java.io.IOException
    {
        java.lang.String r0;
        java.io.FileDescriptor r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.io.FileDescriptor;

        staticinvoke <dalvik.system.VMDebug: void dumpHprofData(java.lang.String,java.io.FileDescriptor)>(r0, r1);

        return;
    }

    public static void dumpHprofDataDdms()
    {
        staticinvoke <dalvik.system.VMDebug: void dumpHprofDataDdms()>();

        return;
    }

    public static native boolean dumpJavaBacktraceToFileTimeout(int, java.lang.String, int);

    public static native boolean dumpNativeBacktraceToFileTimeout(int, java.lang.String, int);

    public static native void dumpNativeHeap(java.io.FileDescriptor);

    public static native void dumpNativeMallocInfo(java.io.FileDescriptor);

    public static final void dumpReferenceTables()
    {
        staticinvoke <dalvik.system.VMDebug: void dumpReferenceTables()>();

        return;
    }

    public static boolean dumpService(java.lang.String, java.io.FileDescriptor, java.lang.String[])
    {
        java.lang.String r0, $r5, $r10;
        android.os.IBinder r1;
        java.lang.StringBuilder $r2, $r7;
        android.os.RemoteException $r6;
        java.io.FileDescriptor r11;
        java.lang.String[] r12;

        r0 := @parameter0: java.lang.String;

        r11 := @parameter1: java.io.FileDescriptor;

        r12 := @parameter2: java.lang.String[];

        r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>(r0);

        if r1 != null goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t find service to dump: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Debug", $r5);

        return 0;

     label1:
        interfaceinvoke r1.<android.os.IBinder: void dump(java.io.FileDescriptor,java.lang.String[])>(r11, r12);

     label2:
        return 1;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t dump service: ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Debug", $r10, $r6);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static void enableEmulatorTraceOutput()
    {
        staticinvoke <dalvik.system.VMDebug: void startEmulatorTracing()>();

        return;
    }

    private static boolean fieldTypeMatches(java.lang.reflect.Field, java.lang.Class)
    {
        java.lang.Object $r0;
        java.lang.Throwable $r1, $r2;
        java.lang.reflect.Field r3, r6;
        java.lang.Class r4, r5, r7;
        boolean z0;

        r3 := @parameter0: java.lang.reflect.Field;

        r4 := @parameter1: java.lang.Class;

        r5 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.Class getType()>();

        z0 = 1;

        if r5 != r4 goto label1;

        return 1;

     label1:
        r6 = virtualinvoke r4.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("TYPE");

     label2:
        $r0 = virtualinvoke r6.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

        r7 = (java.lang.Class) $r0;

     label3:
        if r5 != r7 goto label4;

        goto label5;

     label4:
        z0 = 0;

     label5:
        return z0;

     label6:
        $r2 := @caughtexception;

        return 0;

     label7:
        $r1 := @caughtexception;

        return 0;

        catch java.lang.NoSuchFieldException from label1 to label2 with label7;
        catch java.lang.IllegalAccessException from label2 to label3 with label6;
    }

    private static java.lang.String fixTracePath(java.lang.String)
    {
        java.io.File $r0, $r4, r8;
        java.lang.StringBuilder $r1;
        char $c0;
        java.lang.String r5, r6, r9;
        android.app.Application r7;
        boolean $z0;

        r5 := @parameter0: java.lang.String;

        if r5 == null goto label1;

        r6 = r5;

        $c0 = virtualinvoke r5.<java.lang.String: char charAt(int)>(0);

        if $c0 == 47 goto label5;

     label1:
        r7 = staticinvoke <android.app.AppGlobals: android.app.Application getInitialApplication()>();

        if r7 == null goto label2;

        r8 = virtualinvoke r7.<android.content.Context: java.io.File getExternalFilesDir(java.lang.String)>(null);

        goto label3;

     label2:
        r8 = staticinvoke <android.os.Environment: java.io.File getExternalStorageDirectory()>();

     label3:
        if r5 != null goto label4;

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>(r8, "dmtrace");

        r6 = virtualinvoke $r4.<java.io.File: java.lang.String getAbsolutePath()>();

        goto label5;

     label4:
        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>(r8, r5);

        r6 = virtualinvoke $r0.<java.io.File: java.lang.String getAbsolutePath()>();

     label5:
        r9 = r6;

        $z0 = virtualinvoke r6.<java.lang.String: boolean endsWith(java.lang.String)>(".trace");

        if $z0 != 0 goto label6;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".trace");

        r9 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

     label6:
        return r9;
    }

    public static final native int getBinderDeathObjectCount();

    public static final native int getBinderLocalObjectCount();

    public static final native int getBinderProxyObjectCount();

    public static native int getBinderReceivedTransactions();

    public static native int getBinderSentTransactions();

    public static java.lang.String getCaller()
    {
        java.lang.Thread $r0;
        java.lang.StackTraceElement[] $r1;
        java.lang.String $r2;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r1 = virtualinvoke $r0.<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>();

        $r2 = staticinvoke <android.os.Debug: java.lang.String getCaller(java.lang.StackTraceElement[],int)>($r1, 0);

        return $r2;
    }

    private static java.lang.String getCaller(java.lang.StackTraceElement[], int)
    {
        int i0, $i1, $i2, $i3, $i4;
        java.lang.StackTraceElement r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2, $r5, $r9;
        java.lang.StackTraceElement[] r10;

        r10 := @parameter0: java.lang.StackTraceElement[];

        i0 := @parameter1: int;

        $i2 = i0 + 4;

        $i1 = lengthof r10;

        if $i2 < $i1 goto label1;

        return "<bottom of call stack>";

     label1:
        $i3 = i0 + 4;

        r0 = r10[$i3];

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r5 = virtualinvoke r0.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $i4 = virtualinvoke r0.<java.lang.StackTraceElement: int getLineNumber()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r9 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public static java.lang.String getCallers(int)
    {
        int i0, i1;
        java.lang.StackTraceElement[] r0;
        java.lang.Thread $r2;
        java.lang.StringBuffer $r3;
        java.lang.String $r4, $r5;

        i0 := @parameter0: int;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r0 = virtualinvoke $r2.<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>();

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r5 = staticinvoke <android.os.Debug: java.lang.String getCaller(java.lang.StackTraceElement[],int)>(r0, i1);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        i1 = i1 + 1;

        goto label1;

     label2:
        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public static java.lang.String getCallers(int, int)
    {
        int i0, i1, $i2, i3;
        java.lang.StackTraceElement[] r0;
        java.lang.Thread $r2;
        java.lang.StringBuffer $r3;
        java.lang.String $r4, $r5;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r0 = virtualinvoke $r2.<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>();

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        i3 = i0;

     label1:
        $i2 = i1 + i0;

        if i3 >= $i2 goto label2;

        $r5 = staticinvoke <android.os.Debug: java.lang.String getCaller(java.lang.StackTraceElement[],int)>(r0, i3);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        i3 = i3 + 1;

        goto label1;

     label2:
        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public static java.lang.String getCallers(int, java.lang.String)
    {
        int i0, i1;
        java.lang.String r0, $r5, $r7;
        java.lang.StackTraceElement[] r1;
        java.lang.Thread $r3;
        java.lang.StringBuffer $r4;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r1 = virtualinvoke $r3.<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>();

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r7 = staticinvoke <android.os.Debug: java.lang.String getCaller(java.lang.StackTraceElement[],int)>(r1, i1);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        i1 = i1 + 1;

        goto label1;

     label2:
        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }

    public static int getGlobalAllocCount()
    {
        int $i0;

        $i0 = staticinvoke <dalvik.system.VMDebug: int getAllocCount(int)>(1);

        return $i0;
    }

    public static int getGlobalAllocSize()
    {
        int $i0;

        $i0 = staticinvoke <dalvik.system.VMDebug: int getAllocCount(int)>(2);

        return $i0;
    }

    public static int getGlobalClassInitCount()
    {
        int $i0;

        $i0 = staticinvoke <dalvik.system.VMDebug: int getAllocCount(int)>(32);

        return $i0;
    }

    public static int getGlobalClassInitTime()
    {
        int $i0;

        $i0 = staticinvoke <dalvik.system.VMDebug: int getAllocCount(int)>(64);

        return $i0;
    }

    public static int getGlobalExternalAllocCount()
    {
        return 0;
    }

    public static int getGlobalExternalAllocSize()
    {
        return 0;
    }

    public static int getGlobalExternalFreedCount()
    {
        return 0;
    }

    public static int getGlobalExternalFreedSize()
    {
        return 0;
    }

    public static int getGlobalFreedCount()
    {
        int $i0;

        $i0 = staticinvoke <dalvik.system.VMDebug: int getAllocCount(int)>(4);

        return $i0;
    }

    public static int getGlobalFreedSize()
    {
        int $i0;

        $i0 = staticinvoke <dalvik.system.VMDebug: int getAllocCount(int)>(8);

        return $i0;
    }

    public static int getGlobalGcInvocationCount()
    {
        int $i0;

        $i0 = staticinvoke <dalvik.system.VMDebug: int getAllocCount(int)>(16);

        return $i0;
    }

    public static native long getIonHeapsSizeKb();

    public static native long getIonMappedSizeKb();

    public static native long getIonPoolsSizeKb();

    public static int getLoadedClassCount()
    {
        int $i0;

        $i0 = staticinvoke <dalvik.system.VMDebug: int getLoadedClassCount()>();

        return $i0;
    }

    public static native void getMemInfo(long[]);

    public static native void getMemoryInfo(android.os.Debug$MemoryInfo);

    public static native boolean getMemoryInfo(int, android.os.Debug$MemoryInfo);

    public static int getMethodTracingMode()
    {
        int $i0;

        $i0 = staticinvoke <dalvik.system.VMDebug: int getMethodTracingMode()>();

        return $i0;
    }

    public static native long getNativeHeapAllocatedSize();

    public static native long getNativeHeapFreeSize();

    public static native long getNativeHeapSize();

    public static native long getPss();

    public static native long getPss(int, long[], long[]);

    public static java.lang.String getRuntimeStat(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <dalvik.system.VMDebug: java.lang.String getRuntimeStat(java.lang.String)>(r0);

        return $r1;
    }

    public static java.util.Map getRuntimeStats()
    {
        java.util.Map $r0;

        $r0 = staticinvoke <dalvik.system.VMDebug: java.util.Map getRuntimeStats()>();

        return $r0;
    }

    public static int getThreadAllocCount()
    {
        int $i0;

        $i0 = staticinvoke <dalvik.system.VMDebug: int getAllocCount(int)>(65536);

        return $i0;
    }

    public static int getThreadAllocSize()
    {
        int $i0;

        $i0 = staticinvoke <dalvik.system.VMDebug: int getAllocCount(int)>(131072);

        return $i0;
    }

    public static int getThreadExternalAllocCount()
    {
        return 0;
    }

    public static int getThreadExternalAllocSize()
    {
        return 0;
    }

    public static int getThreadGcInvocationCount()
    {
        int $i0;

        $i0 = staticinvoke <dalvik.system.VMDebug: int getAllocCount(int)>(1048576);

        return $i0;
    }

    public static native java.lang.String getUnreachableMemory(int, boolean);

    public static java.lang.String[] getVmFeatureList()
    {
        java.lang.String[] $r0;

        $r0 = staticinvoke <dalvik.system.VMDebug: java.lang.String[] getVmFeatureList()>();

        return $r0;
    }

    public static native long getZramFreeKb();

    public static boolean isDebuggerConnected()
    {
        boolean $z0;

        $z0 = staticinvoke <dalvik.system.VMDebug: boolean isDebuggerConnected()>();

        return $z0;
    }

    public static native boolean isVmapStack();

    private static void modifyFieldIfSet(java.lang.reflect.Field, com.android.internal.util.TypedProperties, java.lang.String)
    {
        java.lang.String r0, $r15, $r24, $r31, $r37, $r43;
        int i0;
        java.lang.Class $r2, $r3, $r8, $r11, $r20;
        boolean $z0;
        java.lang.StringBuilder $r4, $r16, $r25, $r33, $r39;
        java.lang.IllegalArgumentException $r14, $r23, $r36, $r42;
        java.lang.IllegalStateException $r30;
        java.lang.Throwable $r32, $r38;
        java.lang.reflect.Field r44;
        com.android.internal.util.TypedProperties r45;
        java.lang.Object r50;

        r44 := @parameter0: java.lang.reflect.Field;

        r45 := @parameter1: com.android.internal.util.TypedProperties;

        r0 := @parameter2: java.lang.String;

        $r2 = virtualinvoke r44.<java.lang.reflect.Field: java.lang.Class getType()>();

        if $r2 != class "Ljava/lang/String;" goto label07;

        i0 = virtualinvoke r45.<com.android.internal.util.TypedProperties: int getStringInfo(java.lang.String)>(r0);

        if i0 == -2 goto label06;

        if i0 == -1 goto label05;

        if i0 == 0 goto label02;

        if i0 != 1 goto label01;

        goto label07;

     label01:
        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected getStringInfo(");

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") return value ");

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r30 = new java.lang.IllegalStateException;

        $r31 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r31);

        throw $r30;

     label02:
        virtualinvoke r44.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(null, null);

     label03:
        return;

     label04:
        $r32 := @caughtexception;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot set field for ");

        virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r36 = new java.lang.IllegalArgumentException;

        $r37 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r36.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r37, $r32);

        throw $r36;

     label05:
        return;

     label06:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type of ");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  does not match field type (");

        $r20 = virtualinvoke r44.<java.lang.reflect.Field: java.lang.Class getType()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r23 = new java.lang.IllegalArgumentException;

        $r24 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r24);

        throw $r23;

     label07:
        r50 = virtualinvoke r45.<com.android.internal.util.TypedProperties: java.lang.Object get(java.lang.Object)>(r0);

        if r50 == null goto label12;

        $r3 = virtualinvoke r50.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = staticinvoke <android.os.Debug: boolean fieldTypeMatches(java.lang.reflect.Field,java.lang.Class)>(r44, $r3);

        if $z0 == 0 goto label11;

     label08:
        virtualinvoke r44.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(null, r50);

     label09:
        goto label12;

     label10:
        $r38 := @caughtexception;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot set field for ");

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r42 = new java.lang.IllegalArgumentException;

        $r43 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r42.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r43, $r38);

        throw $r42;

     label11:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type of ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r8 = virtualinvoke r50.<java.lang.Object: java.lang.Class getClass()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")  does not match field type (");

        $r11 = virtualinvoke r44.<java.lang.reflect.Field: java.lang.Class getType()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r14 = new java.lang.IllegalArgumentException;

        $r15 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r14;

     label12:
        return;

        catch java.lang.IllegalAccessException from label02 to label03 with label04;
        catch java.lang.IllegalAccessException from label08 to label09 with label10;
    }

    public static void printLoadedClasses(int)
    {
        int i0;

        i0 := @parameter0: int;

        staticinvoke <dalvik.system.VMDebug: void printLoadedClasses(int)>(i0);

        return;
    }

    public static void resetAllCounts()
    {
        staticinvoke <dalvik.system.VMDebug: void resetAllocCount(int)>(-1);

        return;
    }

    public static void resetGlobalAllocCount()
    {
        staticinvoke <dalvik.system.VMDebug: void resetAllocCount(int)>(1);

        return;
    }

    public static void resetGlobalAllocSize()
    {
        staticinvoke <dalvik.system.VMDebug: void resetAllocCount(int)>(2);

        return;
    }

    public static void resetGlobalClassInitCount()
    {
        staticinvoke <dalvik.system.VMDebug: void resetAllocCount(int)>(32);

        return;
    }

    public static void resetGlobalClassInitTime()
    {
        staticinvoke <dalvik.system.VMDebug: void resetAllocCount(int)>(64);

        return;
    }

    public static void resetGlobalExternalAllocCount()
    {
        return;
    }

    public static void resetGlobalExternalAllocSize()
    {
        return;
    }

    public static void resetGlobalExternalFreedCount()
    {
        return;
    }

    public static void resetGlobalExternalFreedSize()
    {
        return;
    }

    public static void resetGlobalFreedCount()
    {
        staticinvoke <dalvik.system.VMDebug: void resetAllocCount(int)>(4);

        return;
    }

    public static void resetGlobalFreedSize()
    {
        staticinvoke <dalvik.system.VMDebug: void resetAllocCount(int)>(8);

        return;
    }

    public static void resetGlobalGcInvocationCount()
    {
        staticinvoke <dalvik.system.VMDebug: void resetAllocCount(int)>(16);

        return;
    }

    public static void resetThreadAllocCount()
    {
        staticinvoke <dalvik.system.VMDebug: void resetAllocCount(int)>(65536);

        return;
    }

    public static void resetThreadAllocSize()
    {
        staticinvoke <dalvik.system.VMDebug: void resetAllocCount(int)>(131072);

        return;
    }

    public static void resetThreadExternalAllocCount()
    {
        return;
    }

    public static void resetThreadExternalAllocSize()
    {
        return;
    }

    public static void resetThreadGcInvocationCount()
    {
        staticinvoke <dalvik.system.VMDebug: void resetAllocCount(int)>(1048576);

        return;
    }

    public static int setAllocationLimit(int)
    {
        int i0;

        i0 := @parameter0: int;

        return -1;
    }

    public static void setFieldsOn(java.lang.Class)
    {
        java.lang.Class r0;

        r0 := @parameter0: java.lang.Class;

        staticinvoke <android.os.Debug: void setFieldsOn(java.lang.Class,boolean)>(r0, 0);

        return;
    }

    public static void setFieldsOn(java.lang.Class, boolean)
    {
        boolean z0;
        java.lang.StringBuilder $r1;
        java.lang.String $r5, r7;
        java.lang.Class r6;

        r6 := @parameter0: java.lang.Class;

        z0 := @parameter1: boolean;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setFieldsOn(");

        if r6 != null goto label1;

        r7 = "null";

        goto label2;

     label1:
        r7 = virtualinvoke r6.<java.lang.Class: java.lang.String getName()>();

     label2:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") called in non-DEBUG build");

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>("Debug", $r5);

        return;
    }

    public static int setGlobalAllocationLimit(int)
    {
        int i0;

        i0 := @parameter0: int;

        return -1;
    }

    public static void startAllocCounting()
    {
        staticinvoke <dalvik.system.VMDebug: void startAllocCounting()>();

        return;
    }

    public static void startMethodTracing()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <android.os.Debug: java.lang.String fixTracePath(java.lang.String)>(null);

        staticinvoke <dalvik.system.VMDebug: void startMethodTracing(java.lang.String,int,int,boolean,int)>($r0, 0, 0, 0, 0);

        return;
    }

    public static void startMethodTracing(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <android.os.Debug: void startMethodTracing(java.lang.String,int,int)>(r0, 0, 0);

        return;
    }

    public static void startMethodTracing(java.lang.String, int)
    {
        java.lang.String r0;
        int i0;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        staticinvoke <android.os.Debug: void startMethodTracing(java.lang.String,int,int)>(r0, i0, 0);

        return;
    }

    public static void startMethodTracing(java.lang.String, int, int)
    {
        java.lang.String r0, $r1;
        int i0, i1;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = staticinvoke <android.os.Debug: java.lang.String fixTracePath(java.lang.String)>(r0);

        staticinvoke <dalvik.system.VMDebug: void startMethodTracing(java.lang.String,int,int,boolean,int)>($r1, i0, i1, 0, 0);

        return;
    }

    public static void startMethodTracing(java.lang.String, java.io.FileDescriptor, int, int, boolean)
    {
        java.lang.String r0;
        java.io.FileDescriptor r1;
        int i0, i1;
        boolean z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.io.FileDescriptor;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        z0 := @parameter4: boolean;

        staticinvoke <dalvik.system.VMDebug: void startMethodTracing(java.lang.String,java.io.FileDescriptor,int,int,boolean,int,boolean)>(r0, r1, i0, i1, 0, 0, z0);

        return;
    }

    public static void startMethodTracingDdms(int, int, boolean, int)
    {
        int i0, i1, i2;
        boolean z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        i2 := @parameter3: int;

        staticinvoke <dalvik.system.VMDebug: void startMethodTracingDdms(int,int,boolean,int)>(i0, i1, z0, i2);

        return;
    }

    public static void startMethodTracingSampling(java.lang.String, int, int)
    {
        java.lang.String r0, $r1;
        int i0, i1;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = staticinvoke <android.os.Debug: java.lang.String fixTracePath(java.lang.String)>(r0);

        staticinvoke <dalvik.system.VMDebug: void startMethodTracing(java.lang.String,int,int,boolean,int)>($r1, i0, 0, 1, i1);

        return;
    }

    public static void startNativeTracing()
    {
        java.io.FileOutputStream r0;
        java.lang.Exception $r1;
        java.lang.Throwable $r2;
        com.android.internal.util.FastPrintWriter r3, r4, r5;

        r3 = null;

        r4 = null;

     label01:
        r0 = new java.io.FileOutputStream;

     label02:
        r3 = null;

        r4 = null;

     label03:
        specialinvoke r0.<java.io.FileOutputStream: void <init>(java.lang.String)>("/sys/qemu_trace/state");

     label04:
        r3 = null;

        r4 = null;

     label05:
        r5 = new com.android.internal.util.FastPrintWriter;

     label06:
        r3 = null;

        r4 = null;

     label07:
        specialinvoke r5.<com.android.internal.util.FastPrintWriter: void <init>(java.io.OutputStream)>(r0);

     label08:
        r3 = r5;

        r4 = r5;

     label09:
        virtualinvoke r5.<java.io.PrintWriter: void println(java.lang.String)>("1");

     label10:
        virtualinvoke r5.<java.io.PrintWriter: void close()>();

        goto label14;

     label11:
        $r2 := @caughtexception;

        if r3 == null goto label12;

        virtualinvoke r3.<java.io.PrintWriter: void close()>();

     label12:
        throw $r2;

     label13:
        $r1 := @caughtexception;

        if r4 == null goto label14;

        r5 = r4;

        goto label10;

     label14:
        staticinvoke <dalvik.system.VMDebug: void startEmulatorTracing()>();

        return;

        catch java.lang.Exception from label01 to label02 with label13;
        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Exception from label03 to label04 with label13;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Exception from label05 to label06 with label13;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Exception from label07 to label08 with label13;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Exception from label09 to label10 with label13;
        catch java.lang.Throwable from label09 to label10 with label11;
    }

    public static void stopAllocCounting()
    {
        staticinvoke <dalvik.system.VMDebug: void stopAllocCounting()>();

        return;
    }

    public static void stopMethodTracing()
    {
        staticinvoke <dalvik.system.VMDebug: void stopMethodTracing()>();

        return;
    }

    public static void stopNativeTracing()
    {
        java.io.FileOutputStream r0;
        java.lang.Exception $r1;
        java.lang.Throwable $r2;
        com.android.internal.util.FastPrintWriter r3, r4, r5;

        staticinvoke <dalvik.system.VMDebug: void stopEmulatorTracing()>();

        r3 = null;

        r4 = null;

     label01:
        r0 = new java.io.FileOutputStream;

     label02:
        r3 = null;

        r4 = null;

     label03:
        specialinvoke r0.<java.io.FileOutputStream: void <init>(java.lang.String)>("/sys/qemu_trace/state");

     label04:
        r3 = null;

        r4 = null;

     label05:
        r5 = new com.android.internal.util.FastPrintWriter;

     label06:
        r3 = null;

        r4 = null;

     label07:
        specialinvoke r5.<com.android.internal.util.FastPrintWriter: void <init>(java.io.OutputStream)>(r0);

     label08:
        r3 = r5;

        r4 = r5;

     label09:
        virtualinvoke r5.<java.io.PrintWriter: void println(java.lang.String)>("0");

     label10:
        virtualinvoke r5.<java.io.PrintWriter: void close()>();

        goto label14;

     label11:
        $r2 := @caughtexception;

        if r3 == null goto label12;

        virtualinvoke r3.<java.io.PrintWriter: void close()>();

     label12:
        throw $r2;

     label13:
        $r1 := @caughtexception;

        if r4 == null goto label14;

        r5 = r4;

        goto label10;

     label14:
        return;

        catch java.lang.Exception from label01 to label02 with label13;
        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Exception from label03 to label04 with label13;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Exception from label05 to label06 with label13;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Exception from label07 to label08 with label13;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Exception from label09 to label10 with label13;
        catch java.lang.Throwable from label09 to label10 with label11;
    }

    public static long threadCpuTimeNanos()
    {
        long $l0;

        $l0 = staticinvoke <dalvik.system.VMDebug: long threadCpuTimeNanos()>();

        return $l0;
    }

    public static void waitForDebugger()
    {
        long l0;
        boolean $z0, $z1, $z2;
        java.io.PrintStream $r1, $r4, $r10, $r11, r16;
        org.apache.harmony.dalvik.ddmc.Chunk $r2;
        int $i1;
        byte[] $r3;
        byte $b2, $b3;
        java.lang.StringBuilder $r5;
        java.lang.String $r9;
        java.lang.Throwable $r12, $r13;

        $z0 = staticinvoke <dalvik.system.VMDebug: boolean isDebuggingEnabled()>();

        if $z0 != 0 goto label01;

        return;

     label01:
        $z1 = staticinvoke <android.os.Debug: boolean isDebuggerConnected()>();

        if $z1 == 0 goto label02;

        return;

     label02:
        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("Sending WAIT chunk");

        $r2 = new org.apache.harmony.dalvik.ddmc.Chunk;

        $i1 = staticinvoke <org.apache.harmony.dalvik.ddmc.ChunkHandler: int type(java.lang.String)>("WAIT");

        $r3 = newarray (byte)[1];

        $r3[0] = 0;

        specialinvoke $r2.<org.apache.harmony.dalvik.ddmc.Chunk: void <init>(int,byte[],int,int)>($i1, $r3, 0, 1);

        staticinvoke <org.apache.harmony.dalvik.ddmc.DdmServer: void sendChunk(org.apache.harmony.dalvik.ddmc.Chunk)>($r2);

        <android.os.Debug: boolean mWaiting> = 1;

     label03:
        $z2 = staticinvoke <android.os.Debug: boolean isDebuggerConnected()>();

        if $z2 != 0 goto label07;

     label04:
        staticinvoke <java.lang.Thread: void sleep(long)>(200L);

     label05:
        goto label03;

     label06:
        $r12 := @caughtexception;

        goto label05;

     label07:
        <android.os.Debug: boolean mWaiting> = 0;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("Debugger has connected");

     label08:
        l0 = staticinvoke <dalvik.system.VMDebug: long lastDebuggerActivity()>();

        $b2 = l0 cmp 0L;

        if $b2 >= 0 goto label09;

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("debugger detached?");

        goto label15;

     label09:
        $b3 = l0 cmp 1300L;

        if $b3 >= 0 goto label14;

        $r10 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("waiting for debugger to settle...");

     label10:
        staticinvoke <java.lang.Thread: void sleep(long)>(200L);

     label11:
        goto label13;

     label12:
        $r13 := @caughtexception;

        goto label11;

     label13:
        goto label08;

     label14:
        r16 = <java.lang.System: java.io.PrintStream out>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("debugger has settled (");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r16.<java.io.PrintStream: void println(java.lang.String)>($r9);

     label15:
        return;

        catch java.lang.InterruptedException from label04 to label05 with label06;
        catch java.lang.InterruptedException from label10 to label11 with label12;
    }

    public static boolean waitingForDebugger()
    {
        boolean $z0;

        $z0 = <android.os.Debug: boolean mWaiting>;

        return $z0;
    }
}
