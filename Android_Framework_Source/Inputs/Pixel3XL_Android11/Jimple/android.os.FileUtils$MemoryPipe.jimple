public class android.os.FileUtils$MemoryPipe extends java.lang.Thread implements java.lang.AutoCloseable
{
    private final byte[] data;
    private final java.io.FileDescriptor[] pipe;
    private final boolean sink;

    private void <init>(byte[], boolean) throws java.io.IOException
    {
        android.os.FileUtils$MemoryPipe r0;
        boolean z0;
        java.io.FileDescriptor[] $r1;
        java.lang.Throwable $r2;
        java.io.IOException $r3;
        byte[] r4;
        android.system.ErrnoException r6;

        r0 := @this: android.os.FileUtils$MemoryPipe;

        r4 := @parameter0: byte[];

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Thread: void <init>()>();

     label1:
        $r1 = staticinvoke <android.system.Os: java.io.FileDescriptor[] pipe()>();

        r0.<android.os.FileUtils$MemoryPipe: java.io.FileDescriptor[] pipe> = $r1;

     label2:
        r0.<android.os.FileUtils$MemoryPipe: byte[] data> = r4;

        r0.<android.os.FileUtils$MemoryPipe: boolean sink> = z0;

        return;

     label3:
        $r2 := @caughtexception;

        r6 = (android.system.ErrnoException) $r2;

        $r3 = virtualinvoke r6.<android.system.ErrnoException: java.io.IOException rethrowAsIOException()>();

        throw $r3;

        catch android.system.ErrnoException from label1 to label2 with label3;
    }

    public static android.os.FileUtils$MemoryPipe createSink(byte[]) throws java.io.IOException
    {
        byte[] r0;
        android.os.FileUtils$MemoryPipe $r1, $r2;

        r0 := @parameter0: byte[];

        $r1 = new android.os.FileUtils$MemoryPipe;

        specialinvoke $r1.<android.os.FileUtils$MemoryPipe: void <init>(byte[],boolean)>(r0, 1);

        $r2 = specialinvoke $r1.<android.os.FileUtils$MemoryPipe: android.os.FileUtils$MemoryPipe startInternal()>();

        return $r2;
    }

    public static android.os.FileUtils$MemoryPipe createSource(byte[]) throws java.io.IOException
    {
        byte[] r0;
        android.os.FileUtils$MemoryPipe $r1, $r2;

        r0 := @parameter0: byte[];

        $r1 = new android.os.FileUtils$MemoryPipe;

        specialinvoke $r1.<android.os.FileUtils$MemoryPipe: void <init>(byte[],boolean)>(r0, 0);

        $r2 = specialinvoke $r1.<android.os.FileUtils$MemoryPipe: android.os.FileUtils$MemoryPipe startInternal()>();

        return $r2;
    }

    private android.os.FileUtils$MemoryPipe startInternal()
    {
        android.os.FileUtils$MemoryPipe r0;

        r0 := @this: android.os.FileUtils$MemoryPipe;

        specialinvoke r0.<java.lang.Thread: void start()>();

        return r0;
    }

    public void close() throws java.lang.Exception
    {
        android.os.FileUtils$MemoryPipe r0;
        java.io.FileDescriptor $r1;

        r0 := @this: android.os.FileUtils$MemoryPipe;

        $r1 = virtualinvoke r0.<android.os.FileUtils$MemoryPipe: java.io.FileDescriptor getFD()>();

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.io.FileDescriptor)>($r1);

        return;
    }

    public java.io.FileDescriptor getFD()
    {
        android.os.FileUtils$MemoryPipe r0;
        boolean $z0;
        java.io.FileDescriptor[] $r1, $r2;
        java.io.FileDescriptor r3;

        r0 := @this: android.os.FileUtils$MemoryPipe;

        $z0 = r0.<android.os.FileUtils$MemoryPipe: boolean sink>;

        if $z0 == 0 goto label1;

        $r2 = r0.<android.os.FileUtils$MemoryPipe: java.io.FileDescriptor[] pipe>;

        r3 = $r2[1];

        goto label2;

     label1:
        $r1 = r0.<android.os.FileUtils$MemoryPipe: java.io.FileDescriptor[] pipe>;

        r3 = $r1[0];

     label2:
        return r3;
    }

    public java.io.FileDescriptor getInternalFD()
    {
        android.os.FileUtils$MemoryPipe r0;
        boolean $z0;
        java.io.FileDescriptor[] $r1, $r2;
        java.io.FileDescriptor r3;

        r0 := @this: android.os.FileUtils$MemoryPipe;

        $z0 = r0.<android.os.FileUtils$MemoryPipe: boolean sink>;

        if $z0 == 0 goto label1;

        $r2 = r0.<android.os.FileUtils$MemoryPipe: java.io.FileDescriptor[] pipe>;

        r3 = $r2[0];

        goto label2;

     label1:
        $r1 = r0.<android.os.FileUtils$MemoryPipe: java.io.FileDescriptor[] pipe>;

        r3 = $r1[1];

     label2:
        return r3;
    }

    public void run()
    {
        android.os.FileUtils$MemoryPipe r0;
        java.io.FileDescriptor r1;
        int i0, $i2, $i3, $i4, $i5, $i6, i8, $i9;
        boolean $z0, $z1, $z2, $z3;
        java.util.concurrent.TimeUnit $r2, $r8;
        long $l1, $l7;
        byte[] $r3, $r4, $r5, $r6, $r10;
        java.lang.Throwable $r7, $r9;

        r0 := @this: android.os.FileUtils$MemoryPipe;

        r1 = virtualinvoke r0.<android.os.FileUtils$MemoryPipe: java.io.FileDescriptor getInternalFD()>();

        i8 = 0;

     label01:
        $r10 = r0.<android.os.FileUtils$MemoryPipe: byte[] data>;

        $i9 = lengthof $r10;

        if i8 >= $i9 goto label05;

        $z1 = r0.<android.os.FileUtils$MemoryPipe: boolean sink>;

        if $z1 == 0 goto label03;

        $r6 = r0.<android.os.FileUtils$MemoryPipe: byte[] data>;

        $r5 = r0.<android.os.FileUtils$MemoryPipe: byte[] data>;

        $i4 = lengthof $r5;

        $i5 = $i4 - i8;

        $i6 = staticinvoke <android.system.Os: int read(java.io.FileDescriptor,byte[],int,int)>(r1, $r6, i8, $i5);

        i8 = i8 + $i6;

     label02:
        goto label01;

     label03:
        $r4 = r0.<android.os.FileUtils$MemoryPipe: byte[] data>;

        $r3 = r0.<android.os.FileUtils$MemoryPipe: byte[] data>;

        $i2 = lengthof $r3;

        $i3 = $i2 - i8;

        i0 = staticinvoke <android.system.Os: int write(java.io.FileDescriptor,byte[],int,int)>(r1, $r4, i8, $i3);

     label04:
        i8 = i8 + i0;

        goto label01;

     label05:
        $z0 = r0.<android.os.FileUtils$MemoryPipe: boolean sink>;

        if $z0 == 0 goto label10;

        goto label09;

     label06:
        $r7 := @caughtexception;

        $z2 = r0.<android.os.FileUtils$MemoryPipe: boolean sink>;

        if $z2 == 0 goto label07;

        $r8 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $l7 = virtualinvoke $r8.<java.util.concurrent.TimeUnit: long toMillis(long)>(1L);

        staticinvoke <android.os.SystemClock: void sleep(long)>($l7);

     label07:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.io.FileDescriptor)>(r1);

        throw $r7;

     label08:
        $r9 := @caughtexception;

        $z3 = r0.<android.os.FileUtils$MemoryPipe: boolean sink>;

        if $z3 == 0 goto label10;

     label09:
        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $l1 = virtualinvoke $r2.<java.util.concurrent.TimeUnit: long toMillis(long)>(1L);

        staticinvoke <android.os.SystemClock: void sleep(long)>($l1);

     label10:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.io.FileDescriptor)>(r1);

        return;

        catch java.io.IOException from label01 to label02 with label08;
        catch android.system.ErrnoException from label01 to label02 with label08;
        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.io.IOException from label03 to label04 with label08;
        catch android.system.ErrnoException from label03 to label04 with label08;
        catch java.lang.Throwable from label03 to label04 with label06;
    }
}
