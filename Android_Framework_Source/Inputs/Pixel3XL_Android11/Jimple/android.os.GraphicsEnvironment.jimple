public class android.os.GraphicsEnvironment extends java.lang.Object
{
    private static final java.lang.String ACTION_ANGLE_FOR_ANDROID;
    private static final java.lang.String ACTION_ANGLE_FOR_ANDROID_TOAST_MESSAGE;
    private static final java.lang.String ANGLE_RULES_FILE;
    private static final java.lang.String ANGLE_TEMP_RULES;
    private static final boolean DEBUG;
    private static final int GAME_DRIVER_GLOBAL_OPT_IN_DEFAULT;
    private static final int GAME_DRIVER_GLOBAL_OPT_IN_GAME_DRIVER;
    private static final int GAME_DRIVER_GLOBAL_OPT_IN_OFF;
    private static final int GAME_DRIVER_GLOBAL_OPT_IN_PRERELEASE_DRIVER;
    private static final java.lang.String GAME_DRIVER_SPHAL_LIBRARIES_FILENAME;
    private static final java.lang.String GAME_DRIVER_WHITELIST_ALL;
    private static final java.lang.String INTENT_KEY_A4A_TOAST_MESSAGE;
    private static final java.lang.String METADATA_DEVELOPER_DRIVER_ENABLE;
    private static final java.lang.String METADATA_DRIVER_BUILD_TIME;
    private static final java.lang.String METADATA_INJECT_LAYERS_ENABLE;
    private static final java.lang.String PROPERTY_GFX_DRIVER;
    private static final java.lang.String PROPERTY_GFX_DRIVER_BUILD_TIME;
    private static final java.lang.String PROPERTY_GFX_DRIVER_PRERELEASE;
    private static final java.lang.String SYSTEM_DRIVER_NAME;
    private static final long SYSTEM_DRIVER_VERSION_CODE;
    private static final java.lang.String SYSTEM_DRIVER_VERSION_NAME;
    private static final java.lang.String TAG;
    private static final int VULKAN_1_0;
    private static final int VULKAN_1_1;
    private static final java.util.Map sDriverMap;
    private static final android.os.GraphicsEnvironment sInstance;
    private java.lang.ClassLoader mClassLoader;
    private java.lang.String mLibraryPermittedPaths;
    private java.lang.String mLibrarySearchPaths;

    static void <clinit>()
    {
        android.os.GraphicsEnvironment $r0;
        java.util.Map $r1;

        <android.os.GraphicsEnvironment: int VULKAN_1_1> = 4198400;

        <android.os.GraphicsEnvironment: int VULKAN_1_0> = 4194304;

        <android.os.GraphicsEnvironment: java.lang.String TAG> = "GraphicsEnvironment";

        <android.os.GraphicsEnvironment: java.lang.String SYSTEM_DRIVER_VERSION_NAME> = "";

        <android.os.GraphicsEnvironment: long SYSTEM_DRIVER_VERSION_CODE> = 0L;

        <android.os.GraphicsEnvironment: java.lang.String SYSTEM_DRIVER_NAME> = "system";

        <android.os.GraphicsEnvironment: java.lang.String PROPERTY_GFX_DRIVER_PRERELEASE> = "ro.gfx.driver.1";

        <android.os.GraphicsEnvironment: java.lang.String PROPERTY_GFX_DRIVER_BUILD_TIME> = "ro.gfx.driver_build_time";

        <android.os.GraphicsEnvironment: java.lang.String PROPERTY_GFX_DRIVER> = "ro.gfx.driver.0";

        <android.os.GraphicsEnvironment: java.lang.String METADATA_INJECT_LAYERS_ENABLE> = "com.android.graphics.injectLayers.enable";

        <android.os.GraphicsEnvironment: java.lang.String METADATA_DRIVER_BUILD_TIME> = "com.android.gamedriver.build_time";

        <android.os.GraphicsEnvironment: java.lang.String METADATA_DEVELOPER_DRIVER_ENABLE> = "com.android.graphics.developerdriver.enable";

        <android.os.GraphicsEnvironment: java.lang.String INTENT_KEY_A4A_TOAST_MESSAGE> = "A4A Toast Message";

        <android.os.GraphicsEnvironment: java.lang.String GAME_DRIVER_WHITELIST_ALL> = "*";

        <android.os.GraphicsEnvironment: java.lang.String GAME_DRIVER_SPHAL_LIBRARIES_FILENAME> = "sphal_libraries.txt";

        <android.os.GraphicsEnvironment: int GAME_DRIVER_GLOBAL_OPT_IN_PRERELEASE_DRIVER> = 2;

        <android.os.GraphicsEnvironment: int GAME_DRIVER_GLOBAL_OPT_IN_OFF> = 3;

        <android.os.GraphicsEnvironment: int GAME_DRIVER_GLOBAL_OPT_IN_GAME_DRIVER> = 1;

        <android.os.GraphicsEnvironment: int GAME_DRIVER_GLOBAL_OPT_IN_DEFAULT> = 0;

        <android.os.GraphicsEnvironment: boolean DEBUG> = 0;

        <android.os.GraphicsEnvironment: java.lang.String ANGLE_TEMP_RULES> = "debug.angle.rules";

        <android.os.GraphicsEnvironment: java.lang.String ANGLE_RULES_FILE> = "a4a_rules.json";

        <android.os.GraphicsEnvironment: java.lang.String ACTION_ANGLE_FOR_ANDROID_TOAST_MESSAGE> = "android.app.action.ANGLE_FOR_ANDROID_TOAST_MESSAGE";

        <android.os.GraphicsEnvironment: java.lang.String ACTION_ANGLE_FOR_ANDROID> = "android.app.action.ANGLE_FOR_ANDROID";

        $r0 = new android.os.GraphicsEnvironment;

        specialinvoke $r0.<android.os.GraphicsEnvironment: void <init>()>();

        <android.os.GraphicsEnvironment: android.os.GraphicsEnvironment sInstance> = $r0;

        $r1 = staticinvoke <android.os.GraphicsEnvironment: java.util.Map buildMap()>();

        <android.os.GraphicsEnvironment: java.util.Map sDriverMap> = $r1;

        return;
    }

    public void <init>()
    {
        android.os.GraphicsEnvironment r0;

        r0 := @this: android.os.GraphicsEnvironment;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static java.util.Map buildMap()
    {
        java.util.HashMap $r1;
        android.os.GraphicsEnvironment$OpenGlDriverChoice $r2, $r4, $r6;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $r2 = <android.os.GraphicsEnvironment$OpenGlDriverChoice: android.os.GraphicsEnvironment$OpenGlDriverChoice DEFAULT>;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, "default");

        $r4 = <android.os.GraphicsEnvironment$OpenGlDriverChoice: android.os.GraphicsEnvironment$OpenGlDriverChoice ANGLE>;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, "angle");

        $r6 = <android.os.GraphicsEnvironment$OpenGlDriverChoice: android.os.GraphicsEnvironment$OpenGlDriverChoice NATIVE>;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, "native");

        return $r1;
    }

    private static boolean canInjectLayers(android.content.pm.ApplicationInfo)
    {
        android.content.pm.ApplicationInfo r0;
        android.os.Bundle $r1, $r2;
        boolean $z0, $z1, z2;

        r0 := @parameter0: android.content.pm.ApplicationInfo;

        $r1 = r0.<android.content.pm.ApplicationInfo: android.os.Bundle metaData>;

        if $r1 == null goto label1;

        $r2 = r0.<android.content.pm.ApplicationInfo: android.os.Bundle metaData>;

        $z0 = virtualinvoke $r2.<android.os.Bundle: boolean getBoolean(java.lang.String)>("com.android.graphics.injectLayers.enable");

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <android.os.GraphicsEnvironment: boolean setInjectLayersPrSetDumpable()>();

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    private static boolean checkAngleWhitelist(android.content.Context, android.os.Bundle, java.lang.String)
    {
        android.os.Bundle r0;
        java.lang.String r1;
        java.util.List $r2;
        boolean $z0;
        android.content.Context r3;
        android.content.ContentResolver r4;

        r3 := @parameter0: android.content.Context;

        r0 := @parameter1: android.os.Bundle;

        r1 := @parameter2: java.lang.String;

        r4 = virtualinvoke r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r2 = staticinvoke <android.os.GraphicsEnvironment: java.util.List getGlobalSettingsString(android.content.ContentResolver,android.os.Bundle,java.lang.String)>(r4, r0, "angle_whitelist");

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    private static java.lang.String chooseAbi(android.content.pm.ApplicationInfo)
    {
        android.content.pm.ApplicationInfo r0;
        java.lang.String r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        boolean $z0, $z1;

        r0 := @parameter0: android.content.pm.ApplicationInfo;

        r1 = staticinvoke <dalvik.system.VMRuntime: java.lang.String getCurrentInstructionSet()>();

        $r2 = r0.<android.content.pm.ApplicationInfo: java.lang.String primaryCpuAbi>;

        if $r2 == null goto label1;

        $r7 = r0.<android.content.pm.ApplicationInfo: java.lang.String primaryCpuAbi>;

        $r8 = staticinvoke <dalvik.system.VMRuntime: java.lang.String getInstructionSet(java.lang.String)>($r7);

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label1;

        $r9 = r0.<android.content.pm.ApplicationInfo: java.lang.String primaryCpuAbi>;

        return $r9;

     label1:
        $r3 = r0.<android.content.pm.ApplicationInfo: java.lang.String secondaryCpuAbi>;

        if $r3 == null goto label2;

        $r4 = r0.<android.content.pm.ApplicationInfo: java.lang.String secondaryCpuAbi>;

        $r5 = staticinvoke <dalvik.system.VMRuntime: java.lang.String getInstructionSet(java.lang.String)>($r4);

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label2;

        $r6 = r0.<android.content.pm.ApplicationInfo: java.lang.String secondaryCpuAbi>;

        return $r6;

     label2:
        return null;
    }

    private static boolean chooseDriver(android.content.Context, android.os.Bundle, android.content.pm.PackageManager, java.lang.String, android.content.pm.ApplicationInfo)
    {
        java.lang.String r0, r1, $r4, $r6, $r8, $r12, $r13, $r18, $r19, $r25, r30, r33;
        int $i0;
        java.lang.StringBuilder $r3, $r21;
        android.os.Bundle $r14, $r16, r27;
        java.lang.NullPointerException $r15;
        java.lang.IllegalArgumentException $r17;
        boolean $z0;
        long $l1, $l2;
        android.content.pm.PackageManager$NameNotFoundException $r20;
        android.content.Context r26;
        android.content.pm.PackageManager r28;
        android.content.pm.ApplicationInfo r29, r32;
        android.content.pm.PackageInfo r31;

        r26 := @parameter0: android.content.Context;

        r27 := @parameter1: android.os.Bundle;

        r28 := @parameter2: android.content.pm.PackageManager;

        r0 := @parameter3: java.lang.String;

        r29 := @parameter4: android.content.pm.ApplicationInfo;

        r30 = staticinvoke <android.os.GraphicsEnvironment: java.lang.String chooseDriverInternal(android.os.Bundle,android.content.pm.ApplicationInfo)>(r27, r29);

        if r30 != null goto label1;

        return 0;

     label1:
        r31 = virtualinvoke r28.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>(r30, 1048704);

     label2:
        r32 = r31.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i0 = r32.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i0 >= 26 goto label3;

        return 0;

     label3:
        r1 = staticinvoke <android.os.GraphicsEnvironment: java.lang.String chooseAbi(android.content.pm.ApplicationInfo)>(r32);

        if r1 != null goto label4;

        return 0;

     label4:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = r32.<android.content.pm.ApplicationInfo: java.lang.String nativeLibraryDir>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = <java.io.File: java.lang.String pathSeparator>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = r32.<android.content.pm.ApplicationInfo: java.lang.String sourceDir>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!/lib/");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = staticinvoke <android.os.GraphicsEnvironment: java.lang.String getSphalLibraries(android.content.Context,java.lang.String)>(r26, r30);

        staticinvoke <android.os.GraphicsEnvironment: void setDriverPathAndSphalLibraries(java.lang.String,java.lang.String)>($r12, $r13);

        $r14 = r32.<android.content.pm.ApplicationInfo: android.os.Bundle metaData>;

        if $r14 == null goto label6;

        $r16 = r32.<android.content.pm.ApplicationInfo: android.os.Bundle metaData>;

        r33 = virtualinvoke $r16.<android.os.Bundle: java.lang.String getString(java.lang.String)>("com.android.gamedriver.build_time");

        if r33 == null goto label5;

        $z0 = virtualinvoke r33.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label5;

        $r18 = r31.<android.content.pm.PackageInfo: java.lang.String versionName>;

        $l1 = r32.<android.content.pm.ApplicationInfo: long longVersionCode>;

        $r19 = virtualinvoke r33.<java.lang.String: java.lang.String substring(int)>(1);

        $l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r19);

        staticinvoke <android.os.GraphicsEnvironment: void setGpuStats(java.lang.String,java.lang.String,long,long,java.lang.String,int)>(r30, $r18, $l1, $l2, r0, 0);

        return 1;

     label5:
        $r17 = new java.lang.IllegalArgumentException;

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("com.android.gamedriver.build_time is not set");

        throw $r17;

     label6:
        $r15 = new java.lang.NullPointerException;

        specialinvoke $r15.<java.lang.NullPointerException: void <init>(java.lang.String)>("apk\'s meta-data cannot be null");

        throw $r15;

     label7:
        $r20 := @caughtexception;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("driver package \'");

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30);

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' not installed");

        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("GraphicsEnvironment", $r25);

        return 0;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label7;
    }

    private static java.lang.String chooseDriverInternal(android.os.Bundle, android.content.pm.ApplicationInfo)
    {
        java.lang.String r0, r9, r10, r11, r13, r14;
        int i0, $i1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, z12, z13, z14;
        android.os.Bundle $r1, $r6, r7;
        java.util.List $r2, $r3, $r4, $r5, r12;
        android.content.pm.ApplicationInfo r8;

        r7 := @parameter0: android.os.Bundle;

        r8 := @parameter1: android.content.pm.ApplicationInfo;

        r0 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.gfx.driver.0");

        if r0 == null goto label01;

        $z11 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z11 != 0 goto label01;

        z12 = 1;

        goto label02;

     label01:
        z12 = 0;

     label02:
        r9 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.gfx.driver.1");

        if r9 == null goto label03;

        $z10 = virtualinvoke r9.<java.lang.String: boolean isEmpty()>();

        if $z10 != 0 goto label03;

        z13 = 1;

        goto label04;

     label03:
        z13 = 0;

     label04:
        if z12 != 0 goto label05;

        if z13 != 0 goto label05;

        return null;

     label05:
        $z1 = virtualinvoke r8.<android.content.pm.ApplicationInfo: boolean isPrivilegedApp()>();

        if $z1 != 0 goto label22;

        $z2 = virtualinvoke r8.<android.content.pm.ApplicationInfo: boolean isSystemApp()>();

        if $z2 == 0 goto label06;

        $z9 = virtualinvoke r8.<android.content.pm.ApplicationInfo: boolean isUpdatedSystemApp()>();

        if $z9 != 0 goto label06;

        goto label22;

     label06:
        $r1 = r8.<android.content.pm.ApplicationInfo: android.os.Bundle metaData>;

        if $r1 == null goto label07;

        $r6 = r8.<android.content.pm.ApplicationInfo: android.os.Bundle metaData>;

        $z8 = virtualinvoke $r6.<android.os.Bundle: boolean getBoolean(java.lang.String)>("com.android.graphics.developerdriver.enable");

        if $z8 != 0 goto label08;

     label07:
        $z3 = staticinvoke <android.os.GraphicsEnvironment: boolean isDebuggable()>();

        if $z3 == 0 goto label09;

     label08:
        z14 = 1;

        goto label10;

     label09:
        z14 = 0;

     label10:
        i0 = virtualinvoke r7.<android.os.Bundle: int getInt(java.lang.String,int)>("game_driver_all_apps", 0);

        if i0 == 1 goto label20;

        if i0 == 2 goto label18;

        if i0 == 3 goto label17;

        r10 = r8.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $r2 = staticinvoke <android.os.GraphicsEnvironment: java.util.List getGlobalSettingsString(android.content.ContentResolver,android.os.Bundle,java.lang.String)>(null, r7, "game_driver_opt_out_apps");

        $z4 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r10);

        if $z4 == 0 goto label11;

        return null;

     label11:
        $r3 = staticinvoke <android.os.GraphicsEnvironment: java.util.List getGlobalSettingsString(android.content.ContentResolver,android.os.Bundle,java.lang.String)>(null, r7, "game_driver_prerelease_opt_in_apps");

        $z5 = interfaceinvoke $r3.<java.util.List: boolean contains(java.lang.Object)>(r10);

        if $z5 == 0 goto label13;

        r11 = null;

        if z13 == 0 goto label12;

        r11 = null;

        if z14 == 0 goto label12;

        r11 = r9;

     label12:
        return r11;

     label13:
        if z12 != 0 goto label14;

        return null;

     label14:
        $r4 = staticinvoke <android.os.GraphicsEnvironment: java.util.List getGlobalSettingsString(android.content.ContentResolver,android.os.Bundle,java.lang.String)>(null, r7, "game_driver_opt_in_apps");

        z0 = interfaceinvoke $r4.<java.util.List: boolean contains(java.lang.Object)>(r10);

        r12 = staticinvoke <android.os.GraphicsEnvironment: java.util.List getGlobalSettingsString(android.content.ContentResolver,android.os.Bundle,java.lang.String)>(null, r7, "game_driver_whitelist");

        if z0 != 0 goto label15;

        $i1 = interfaceinvoke r12.<java.util.List: int indexOf(java.lang.Object)>("*");

        if $i1 == 0 goto label15;

        $z7 = interfaceinvoke r12.<java.util.List: boolean contains(java.lang.Object)>(r10);

        if $z7 != 0 goto label15;

        return null;

     label15:
        if z0 != 0 goto label16;

        $r5 = staticinvoke <android.os.GraphicsEnvironment: java.util.List getGlobalSettingsString(android.content.ContentResolver,android.os.Bundle,java.lang.String)>(null, r7, "game_driver_blacklist");

        $z6 = interfaceinvoke $r5.<java.util.List: boolean contains(java.lang.Object)>(r10);

        if $z6 == 0 goto label16;

        return null;

     label16:
        return r0;

     label17:
        return null;

     label18:
        r13 = null;

        if z13 == 0 goto label19;

        r13 = null;

        if z14 == 0 goto label19;

        r13 = r9;

     label19:
        return r13;

     label20:
        r14 = null;

        if z12 == 0 goto label21;

        r14 = r0;

     label21:
        return r14;

     label22:
        return null;
    }

    private boolean debugLayerEnabled(android.os.Bundle, java.lang.String, android.content.pm.ApplicationInfo)
    {
        android.os.GraphicsEnvironment r0;
        java.lang.String r1, r4;
        android.content.pm.ApplicationInfo r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        int $i0;
        android.os.Bundle r3;

        r0 := @this: android.os.GraphicsEnvironment;

        r3 := @parameter0: android.os.Bundle;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.content.pm.ApplicationInfo;

        $z0 = staticinvoke <android.os.GraphicsEnvironment: boolean isDebuggable()>();

        if $z0 != 0 goto label1;

        $z4 = staticinvoke <android.os.GraphicsEnvironment: boolean canInjectLayers(android.content.pm.ApplicationInfo)>(r2);

        if $z4 != 0 goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke r3.<android.os.Bundle: int getInt(java.lang.String,int)>("enable_gpu_debug_layers", 0);

        if $i0 != 0 goto label2;

        return 0;

     label2:
        r4 = virtualinvoke r3.<android.os.Bundle: java.lang.String getString(java.lang.String,java.lang.String)>("gpu_debug_app", "");

        if r1 == null goto label4;

        $z1 = virtualinvoke r4.<java.lang.String: boolean isEmpty()>();

        if $z1 != 0 goto label4;

        $z2 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z2 != 0 goto label4;

        $z3 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z3 != 0 goto label3;

        goto label4;

     label3:
        return 1;

     label4:
        return 0;
    }

    private java.lang.String getAngleDebugPackage(android.content.Context, android.os.Bundle)
    {
        android.os.GraphicsEnvironment r0;
        android.os.Bundle r1;
        boolean $z0, $z1;
        android.content.ContentResolver $r2;
        android.content.Context r3;
        java.lang.String r4;

        r0 := @this: android.os.GraphicsEnvironment;

        r3 := @parameter0: android.content.Context;

        r1 := @parameter1: android.os.Bundle;

        $z0 = staticinvoke <android.os.GraphicsEnvironment: boolean isDebuggable()>();

        if $z0 == 0 goto label3;

        if r1 == null goto label1;

        r4 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("angle_debug_package");

        goto label2;

     label1:
        $r2 = virtualinvoke r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r4 = staticinvoke <android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r2, "angle_debug_package");

     label2:
        if r4 == null goto label3;

        $z1 = virtualinvoke r4.<java.lang.String: boolean isEmpty()>();

        if $z1 != 0 goto label3;

        return r4;

     label3:
        return "";
    }

    private java.lang.String getAnglePackageName(android.content.pm.PackageManager)
    {
        android.os.GraphicsEnvironment r0;
        android.content.Intent $r2;
        int $i0, $i1;
        java.lang.Object $r3, $r11;
        android.content.pm.ResolveInfo $r4, r23;
        android.content.pm.ActivityInfo $r5, $r14;
        java.lang.String $r6, $r10, $r15, $r17;
        java.lang.StringBuilder $r7, $r12;
        boolean $z0;
        android.content.pm.PackageManager r18;
        java.util.List r20;
        java.util.Iterator r22;

        r0 := @this: android.os.GraphicsEnvironment;

        r18 := @parameter0: android.content.pm.PackageManager;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.app.action.ANGLE_FOR_ANDROID");

        r20 = virtualinvoke r18.<android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)>($r2, 1048576);

        $i0 = interfaceinvoke r20.<java.util.List: int size()>();

        if $i0 == 1 goto label3;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid number of ANGLE packages. Required: 1, Found: ");

        $i1 = interfaceinvoke r20.<java.util.List: int size()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("GraphicsEnvironment", $r10);

        r22 = interfaceinvoke r20.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r11 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>();

        r23 = (android.content.pm.ResolveInfo) $r11;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found ANGLE package: ");

        $r14 = r23.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r15 = $r14.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("GraphicsEnvironment", $r17);

        goto label1;

     label2:
        return "";

     label3:
        $r3 = interfaceinvoke r20.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (android.content.pm.ResolveInfo) $r3;

        $r5 = $r4.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r6 = $r5.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        return $r6;
    }

    private static android.content.pm.ApplicationInfo getAppInfoWithMetadata(android.content.Context, android.content.pm.PackageManager, java.lang.String)
    {
        java.lang.String r0;
        android.content.pm.PackageManager$NameNotFoundException $r1;
        android.content.Context r2;
        android.content.pm.PackageManager r3;
        android.content.pm.ApplicationInfo r4, r5;

        r2 := @parameter0: android.content.Context;

        r3 := @parameter1: android.content.pm.PackageManager;

        r0 := @parameter2: java.lang.String;

     label1:
        r4 = virtualinvoke r3.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>(r0, 128);

     label2:
        r5 = r4;

        goto label4;

     label3:
        $r1 := @caughtexception;

        r5 = virtualinvoke r2.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

     label4:
        return r5;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
    }

    private static java.lang.String getDebugLayerAppPaths(android.content.pm.IPackageManager, java.lang.String)
    {
        int $i0;
        java.lang.StringBuilder $r0, $r10;
        java.lang.String $r1, $r3, $r5, $r9, $r14, r17, r20;
        android.os.RemoteException $r15;
        android.content.pm.IPackageManager r16;
        android.content.pm.ApplicationInfo r18;

        r16 := @parameter0: android.content.pm.IPackageManager;

        r17 := @parameter1: java.lang.String;

     label1:
        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        r18 = interfaceinvoke r16.<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>(r17, 131072, $i0);

     label2:
        if r18 != null goto label3;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Debug layer app \'");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' not installed");

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("GraphicsEnvironment", $r14);

     label3:
        r20 = staticinvoke <android.os.GraphicsEnvironment: java.lang.String chooseAbi(android.content.pm.ApplicationInfo)>(r18);

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = r18.<android.content.pm.ApplicationInfo: java.lang.String nativeLibraryDir>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = <java.io.File: java.lang.String pathSeparator>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = r18.<android.content.pm.ApplicationInfo: java.lang.String sourceDir>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!/lib/");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        $r9 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;

     label4:
        $r15 := @caughtexception;

        return "";

        catch android.os.RemoteException from label1 to label2 with label4;
    }

    private static java.lang.String getDriverForPkg(android.content.Context, android.os.Bundle, java.lang.String)
    {
        int i0, $i1, $i2, $i3, $i4;
        android.content.ContentResolver $r0, r29;
        android.os.GraphicsEnvironment$OpenGlDriverChoice $r1, $r7, $r17, $r21;
        java.util.Map $r2, $r8, $r18, $r22;
        java.lang.Object $r3, $r5, $r9, $r19, $r23;
        java.lang.String $r4, $r6, $r10, $r16, $r20, $r24, r27, r28;
        boolean $z0, $z1;
        java.lang.StringBuilder $r11;
        android.content.Context r25;
        android.os.Bundle r26;
        java.util.List r30, r31;

        r25 := @parameter0: android.content.Context;

        r26 := @parameter1: android.os.Bundle;

        r27 := @parameter2: java.lang.String;

        if r26 == null goto label1;

        r28 = virtualinvoke r26.<android.os.Bundle: java.lang.String getString(java.lang.String)>("angle_gl_driver_all_angle");

        goto label2;

     label1:
        $r0 = virtualinvoke r25.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r28 = staticinvoke <android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r0, "angle_gl_driver_all_angle");

     label2:
        if r28 == null goto label3;

        $z1 = virtualinvoke r28.<java.lang.String: boolean equals(java.lang.Object)>("1");

        if $z1 == 0 goto label3;

        $r22 = <android.os.GraphicsEnvironment: java.util.Map sDriverMap>;

        $r21 = <android.os.GraphicsEnvironment$OpenGlDriverChoice: android.os.GraphicsEnvironment$OpenGlDriverChoice ANGLE>;

        $r23 = interfaceinvoke $r22.<java.util.Map: java.lang.Object get(java.lang.Object)>($r21);

        $r24 = (java.lang.String) $r23;

        return $r24;

     label3:
        r29 = virtualinvoke r25.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r30 = staticinvoke <android.os.GraphicsEnvironment: java.util.List getGlobalSettingsString(android.content.ContentResolver,android.os.Bundle,java.lang.String)>(r29, r26, "angle_gl_driver_selection_pkgs");

        r31 = staticinvoke <android.os.GraphicsEnvironment: java.util.List getGlobalSettingsString(android.content.ContentResolver,android.os.Bundle,java.lang.String)>(r29, r26, "angle_gl_driver_selection_values");

        if r27 == null goto label7;

        $z0 = virtualinvoke r27.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label4;

        goto label7;

     label4:
        $i1 = interfaceinvoke r30.<java.util.List: int size()>();

        $i2 = interfaceinvoke r31.<java.util.List: int size()>();

        if $i1 == $i2 goto label5;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Global.Settings values are invalid: globalSettingsDriverPkgs.size = ");

        $i3 = interfaceinvoke r30.<java.util.List: int size()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", globalSettingsDriverValues.size = ");

        $i4 = interfaceinvoke r31.<java.util.List: int size()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r16 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("GraphicsEnvironment", $r16);

        $r18 = <android.os.GraphicsEnvironment: java.util.Map sDriverMap>;

        $r17 = <android.os.GraphicsEnvironment$OpenGlDriverChoice: android.os.GraphicsEnvironment$OpenGlDriverChoice DEFAULT>;

        $r19 = interfaceinvoke $r18.<java.util.Map: java.lang.Object get(java.lang.Object)>($r17);

        $r20 = (java.lang.String) $r19;

        return $r20;

     label5:
        i0 = staticinvoke <android.os.GraphicsEnvironment: int getGlobalSettingsPkgIndex(java.lang.String,java.util.List)>(r27, r30);

        if i0 >= 0 goto label6;

        $r8 = <android.os.GraphicsEnvironment: java.util.Map sDriverMap>;

        $r7 = <android.os.GraphicsEnvironment$OpenGlDriverChoice: android.os.GraphicsEnvironment$OpenGlDriverChoice DEFAULT>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        $r10 = (java.lang.String) $r9;

        return $r10;

     label6:
        $r5 = interfaceinvoke r31.<java.util.List: java.lang.Object get(int)>(i0);

        $r6 = (java.lang.String) $r5;

        return $r6;

     label7:
        $r2 = <android.os.GraphicsEnvironment: java.util.Map sDriverMap>;

        $r1 = <android.os.GraphicsEnvironment$OpenGlDriverChoice: android.os.GraphicsEnvironment$OpenGlDriverChoice DEFAULT>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    private static int getGlobalSettingsPkgIndex(java.lang.String, java.util.List)
    {
        java.lang.String r0, $r3;
        java.util.List r1;
        int $i0, i1;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.List;

        i1 = 0;

     label1:
        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if i1 >= $i0 goto label3;

        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);

        $r3 = (java.lang.String) $r2;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return -1;
    }

    private static java.util.List getGlobalSettingsString(android.content.ContentResolver, android.os.Bundle, java.lang.String)
    {
        android.os.Bundle r0;
        java.lang.String r1, r7;
        java.util.ArrayList $r2, $r3, r8;
        java.lang.String[] $r4;
        java.util.List $r5;
        android.content.ContentResolver r6;

        r6 := @parameter0: android.content.ContentResolver;

        r0 := @parameter1: android.os.Bundle;

        r1 := @parameter2: java.lang.String;

        if r0 == null goto label1;

        r7 = virtualinvoke r0.<android.os.Bundle: java.lang.String getString(java.lang.String)>(r1);

        goto label2;

     label1:
        r7 = staticinvoke <android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>(r6, r1);

     label2:
        if r7 == null goto label3;

        $r3 = new java.util.ArrayList;

        $r4 = virtualinvoke r7.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>($r5);

        r8 = $r3;

        goto label4;

     label3:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r8 = $r2;

     label4:
        return r8;
    }

    public static android.os.GraphicsEnvironment getInstance()
    {
        android.os.GraphicsEnvironment $r0;

        $r0 = <android.os.GraphicsEnvironment: android.os.GraphicsEnvironment sInstance>;

        return $r0;
    }

    private static native boolean getShouldUseAngle(java.lang.String);

    private static java.lang.String getSphalLibraries(android.content.Context, java.lang.String)
    {
        android.content.res.AssetManager $r0;
        java.io.InputStream $r1;
        android.content.pm.PackageManager$NameNotFoundException $r2;
        java.lang.Throwable $r3;
        android.content.Context r4, r6;
        java.lang.String r5, r10, r11;
        java.io.BufferedReader r7;
        java.io.InputStreamReader r8;
        java.util.ArrayList r9;

        r4 := @parameter0: android.content.Context;

        r5 := @parameter1: java.lang.String;

     label01:
        r6 = virtualinvoke r4.<android.content.Context: android.content.Context createPackageContext(java.lang.String,int)>(r5, 4);

        r7 = new java.io.BufferedReader;

        r8 = new java.io.InputStreamReader;

        $r0 = virtualinvoke r6.<android.content.Context: android.content.res.AssetManager getAssets()>();

        $r1 = virtualinvoke $r0.<android.content.res.AssetManager: java.io.InputStream open(java.lang.String)>("sphal_libraries.txt");

        specialinvoke r8.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r1);

        specialinvoke r7.<java.io.BufferedReader: void <init>(java.io.Reader)>(r8);

        r9 = new java.util.ArrayList;

        specialinvoke r9.<java.util.ArrayList: void <init>()>();

     label02:
        r10 = virtualinvoke r7.<java.io.BufferedReader: java.lang.String readLine()>();

     label03:
        if r10 == null goto label06;

     label04:
        virtualinvoke r9.<java.util.ArrayList: boolean add(java.lang.Object)>(r10);

     label05:
        goto label02;

     label06:
        r11 = staticinvoke <java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>(":", r9);

     label07:
        return r11;

     label08:
        $r3 := @caughtexception;

        goto label10;

     label09:
        $r2 := @caughtexception;

     label10:
        return "";

        catch android.content.pm.PackageManager$NameNotFoundException from label01 to label02 with label09;
        catch java.io.IOException from label01 to label02 with label08;
        catch android.content.pm.PackageManager$NameNotFoundException from label02 to label03 with label09;
        catch java.io.IOException from label02 to label03 with label08;
        catch android.content.pm.PackageManager$NameNotFoundException from label04 to label05 with label09;
        catch java.io.IOException from label04 to label05 with label08;
        catch android.content.pm.PackageManager$NameNotFoundException from label06 to label07 with label09;
        catch java.io.IOException from label06 to label07 with label08;
    }

    private static int getVulkanVersion(android.content.pm.PackageManager)
    {
        android.content.pm.PackageManager r0;
        boolean $z0, $z1;

        r0 := @parameter0: android.content.pm.PackageManager;

        $z0 = virtualinvoke r0.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String,int)>("android.hardware.vulkan.version", 4198400);

        if $z0 == 0 goto label1;

        return 4198400;

     label1:
        $z1 = virtualinvoke r0.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String,int)>("android.hardware.vulkan.version", 4194304);

        if $z1 == 0 goto label2;

        return 4194304;

     label2:
        return 0;
    }

    public static native void hintActivityLaunch();

    private static native boolean isDebuggable();

    private static native void setAngleInfo(java.lang.String, java.lang.String, java.lang.String, java.io.FileDescriptor, long, long);

    private static native void setDebugLayers(java.lang.String);

    private static native void setDebugLayersGLES(java.lang.String);

    private static native void setDriverPathAndSphalLibraries(java.lang.String, java.lang.String);

    private static native void setGpuStats(java.lang.String, java.lang.String, long, long, java.lang.String, int);

    private static native boolean setInjectLayersPrSetDumpable();

    private static native void setLayerPaths(java.lang.ClassLoader, java.lang.String);

    private boolean setupAndUseAngle(android.content.Context, java.lang.String)
    {
        android.os.GraphicsEnvironment r0;
        java.lang.String r1, $r9, $r14;
        boolean z0, $z1;
        android.content.pm.PackageManager $r2;
        java.lang.StringBuilder $r3, $r10;
        android.content.Context r15;

        r0 := @this: android.os.GraphicsEnvironment;

        r15 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r15.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z1 = virtualinvoke r0.<android.os.GraphicsEnvironment: boolean setupAngle(android.content.Context,android.os.Bundle,android.content.pm.PackageManager,java.lang.String)>(r15, null, $r2, r1);

        if $z1 != 0 goto label1;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package \'");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' should not use ANGLE");

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("GraphicsEnvironment", $r14);

        return 0;

     label1:
        z0 = staticinvoke <android.os.GraphicsEnvironment: boolean getShouldUseAngle(java.lang.String)>(r1);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package \'");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' should use ANGLE = \'");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("GraphicsEnvironment", $r9);

        return z0;
    }

    private static boolean setupAngleRulesApk(java.lang.String, android.content.pm.ApplicationInfo, android.content.pm.PackageManager, java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, r2, r3, $r12, $r18;
        android.content.res.Resources $r4;
        java.io.FileDescriptor $r5;
        long $l0, $l1;
        android.content.pm.PackageManager$NameNotFoundException $r6;
        java.lang.StringBuilder $r7, r24;
        java.lang.Throwable $r13;
        android.content.pm.ApplicationInfo r19;
        android.content.pm.PackageManager r20;
        android.content.res.AssetManager r21;
        android.content.res.AssetFileDescriptor r22;

        r0 := @parameter0: java.lang.String;

        r19 := @parameter1: android.content.pm.ApplicationInfo;

        r20 := @parameter2: android.content.pm.PackageManager;

        r1 := @parameter3: java.lang.String;

        r2 := @parameter4: java.lang.String;

        r3 := @parameter5: java.lang.String;

     label1:
        $r4 = virtualinvoke r20.<android.content.pm.PackageManager: android.content.res.Resources getResourcesForApplication(android.content.pm.ApplicationInfo)>(r19);

        r21 = virtualinvoke $r4.<android.content.res.Resources: android.content.res.AssetManager getAssets()>();

     label2:
        r22 = virtualinvoke r21.<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openFd(java.lang.String)>("a4a_rules.json");

        $r5 = virtualinvoke r22.<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        $l0 = virtualinvoke r22.<android.content.res.AssetFileDescriptor: long getStartOffset()>();

        $l1 = virtualinvoke r22.<android.content.res.AssetFileDescriptor: long getLength()>();

        staticinvoke <android.os.GraphicsEnvironment: void setAngleInfo(java.lang.String,java.lang.String,java.lang.String,java.io.FileDescriptor,long,long)>(r2, r1, r3, $r5, $l0, $l1);

        virtualinvoke r22.<android.content.res.AssetFileDescriptor: void close()>();

     label3:
        return 1;

     label4:
        $r13 := @caughtexception;

     label5:
        r24 = new java.lang.StringBuilder;

        specialinvoke r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to get AssetFileDescriptor for a4a_rules.json from \'");

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ");

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r18 = virtualinvoke r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("GraphicsEnvironment", $r18);

     label6:
        goto label8;

     label7:
        $r6 := @caughtexception;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to get AssetManager for \'");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r12 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("GraphicsEnvironment", $r12);

     label8:
        return 0;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label7;
        catch java.io.IOException from label2 to label3 with label4;
        catch android.content.pm.PackageManager$NameNotFoundException from label2 to label3 with label7;
        catch android.content.pm.PackageManager$NameNotFoundException from label5 to label6 with label7;
    }

    private static boolean setupAngleWithTempRulesFile(android.content.Context, java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r7, $r12, $r16, $r20, $r25, $r30, r32, r33;
        java.io.FileInputStream r2;
        long l0;
        java.lang.StringBuilder r3, $r4, $r9, $r22, $r27, r38;
        boolean $z0, $z1, $z2;
        java.io.File $r8;
        java.nio.channels.FileChannel $r13;
        java.lang.Throwable $r17, $r21, $r26;
        android.content.Context r31;
        java.io.FileDescriptor r36;

        r31 := @parameter0: android.content.Context;

        r32 := @parameter1: java.lang.String;

        r0 := @parameter2: java.lang.String;

        r1 := @parameter3: java.lang.String;

        $z0 = staticinvoke <android.os.GraphicsEnvironment: boolean isDebuggable()>();

        if $z0 != 0 goto label01;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("GraphicsEnvironment", "Skipping loading temporary rules file");

        return 0;

     label01:
        r33 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("debug.angle.rules");

        if r33 == null goto label12;

        $z1 = virtualinvoke r33.<java.lang.String: boolean isEmpty()>();

        if $z1 == 0 goto label02;

        goto label12;

     label02:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Detected system property debug.angle.rules: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("GraphicsEnvironment", $r7);

        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>(r33);

        $z2 = virtualinvoke $r8.<java.io.File: boolean exists()>();

        if $z2 == 0 goto label11;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" exists, loading file.");

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("GraphicsEnvironment", $r12);

     label03:
        r2 = new java.io.FileInputStream;

        specialinvoke r2.<java.io.FileInputStream: void <init>(java.lang.String)>(r33);

     label04:
        r36 = virtualinvoke r2.<java.io.FileInputStream: java.io.FileDescriptor getFD()>();

        $r13 = virtualinvoke r2.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>();

        l0 = virtualinvoke $r13.<java.nio.channels.FileChannel: long size()>();

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Loaded temporary ANGLE rules from ");

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33);

        $r16 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("GraphicsEnvironment", $r16);

        staticinvoke <android.os.GraphicsEnvironment: void setAngleInfo(java.lang.String,java.lang.String,java.lang.String,java.io.FileDescriptor,long,long)>(r0, r32, r1, r36, 0L, l0);

        virtualinvoke r2.<java.io.FileInputStream: void close()>();

     label05:
        return 1;

     label06:
        $r17 := @caughtexception;

     label07:
        r38 = new java.lang.StringBuilder;

        specialinvoke r38.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Hit IOException thrown by FileInputStream: ");

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r20 = virtualinvoke r38.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("GraphicsEnvironment", $r20);

     label08:
        goto label11;

     label09:
        $r26 := @caughtexception;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Temp ANGLE rules file not accessible: ");

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r26);

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("GraphicsEnvironment", $r30);

        goto label11;

     label10:
        $r21 := @caughtexception;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Temp ANGLE rules file not found: ");

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("GraphicsEnvironment", $r25);

     label11:
        return 0;

     label12:
        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("GraphicsEnvironment", "System property \'debug.angle.rules\' is not set or is empty");

        return 0;

        catch java.io.FileNotFoundException from label03 to label04 with label10;
        catch java.lang.SecurityException from label03 to label04 with label09;
        catch java.io.IOException from label04 to label05 with label06;
        catch java.io.FileNotFoundException from label04 to label05 with label10;
        catch java.lang.SecurityException from label04 to label05 with label09;
        catch java.io.FileNotFoundException from label07 to label08 with label10;
        catch java.lang.SecurityException from label07 to label08 with label09;
    }

    private void setupGpuLayers(android.content.Context, android.os.Bundle, android.content.pm.PackageManager, java.lang.String, android.content.pm.ApplicationInfo)
    {
        android.os.GraphicsEnvironment r0;
        android.content.pm.ApplicationInfo r1;
        boolean z0, $z1, $z2;
        java.lang.StringBuilder $r4, $r19, $r22;
        java.lang.String $r7, r13, r14, r15, r16, r18, $r21, $r24, r25;
        android.content.Context r10;
        android.os.Bundle r11;
        android.content.pm.PackageManager r12;
        java.lang.ClassLoader $r26;

        r0 := @this: android.os.GraphicsEnvironment;

        r10 := @parameter0: android.content.Context;

        r11 := @parameter1: android.os.Bundle;

        r12 := @parameter2: android.content.pm.PackageManager;

        r13 := @parameter3: java.lang.String;

        r1 := @parameter4: android.content.pm.ApplicationInfo;

        z0 = specialinvoke r0.<android.os.GraphicsEnvironment: boolean debugLayerEnabled(android.os.Bundle,java.lang.String,android.content.pm.ApplicationInfo)>(r11, r13, r1);

        r14 = "";

        if z0 == 0 goto label2;

        r15 = r0.<android.os.GraphicsEnvironment: java.lang.String mLibraryPermittedPaths>;

        r16 = virtualinvoke r11.<android.os.Bundle: java.lang.String getString(java.lang.String)>("gpu_debug_layers");

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Vulkan debug layer list: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("GraphicsEnvironment", $r7);

        if r16 == null goto label1;

        $z2 = virtualinvoke r16.<java.lang.String: boolean isEmpty()>();

        if $z2 != 0 goto label1;

        staticinvoke <android.os.GraphicsEnvironment: void setDebugLayers(java.lang.String)>(r16);

     label1:
        r18 = virtualinvoke r11.<android.os.Bundle: java.lang.String getString(java.lang.String)>("gpu_debug_layers_gles");

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("GLES debug layer list: ");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("GraphicsEnvironment", $r21);

        r14 = r15;

        if r18 == null goto label2;

        r14 = r15;

        $z1 = virtualinvoke r18.<java.lang.String: boolean isEmpty()>();

        if $z1 != 0 goto label2;

        staticinvoke <android.os.GraphicsEnvironment: void setDebugLayersGLES(java.lang.String)>(r18);

        r14 = r15;

     label2:
        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        $r24 = r0.<android.os.GraphicsEnvironment: java.lang.String mLibrarySearchPaths>;

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        $r26 = r0.<android.os.GraphicsEnvironment: java.lang.ClassLoader mClassLoader>;

        staticinvoke <android.os.GraphicsEnvironment: void setLayerPaths(java.lang.ClassLoader,java.lang.String)>($r26, r25);

        return;
    }

    private boolean shouldShowAngleInUseDialogBox(android.content.Context)
    {
        android.os.GraphicsEnvironment r0;
        int i0;
        android.content.ContentResolver $r1;
        java.lang.Throwable $r2;
        android.content.Context r3;
        boolean z0;

        r0 := @this: android.os.GraphicsEnvironment;

        r3 := @parameter0: android.content.Context;

        z0 = 0;

     label1:
        $r1 = virtualinvoke r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String)>($r1, "show_angle_in_use_dialog_box");

     label2:
        if i0 != 1 goto label3;

        z0 = 1;

     label3:
        return z0;

     label4:
        $r2 := @caughtexception;

        return 0;

        catch android.provider.Settings$SettingNotFoundException from label1 to label2 with label4;
        catch java.lang.SecurityException from label1 to label2 with label4;
    }

    public static boolean shouldUseAngle(android.content.Context, android.os.Bundle, java.lang.String)
    {
        android.os.Bundle r0;
        java.lang.String r1, r2, $r11, $r15;
        boolean z0, z1, $z2, z3;
        android.os.GraphicsEnvironment$OpenGlDriverChoice $r3;
        java.util.Map $r4;
        java.lang.Object $r5;
        java.lang.StringBuilder $r6, $r12;
        android.content.Context r16;

        r16 := @parameter0: android.content.Context;

        r0 := @parameter1: android.os.Bundle;

        r1 := @parameter2: java.lang.String;

        $z2 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z2 == 0 goto label1;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("GraphicsEnvironment", "No package name available yet, ANGLE should not be used");

        return 0;

     label1:
        r2 = staticinvoke <android.os.GraphicsEnvironment: java.lang.String getDriverForPkg(android.content.Context,android.os.Bundle,java.lang.String)>(r16, r0, r1);

        z0 = staticinvoke <android.os.GraphicsEnvironment: boolean checkAngleWhitelist(android.content.Context,android.os.Bundle,java.lang.String)>(r16, r0, r1);

        $r4 = <android.os.GraphicsEnvironment: java.util.Map sDriverMap>;

        $r3 = <android.os.GraphicsEnvironment$OpenGlDriverChoice: android.os.GraphicsEnvironment$OpenGlDriverChoice ANGLE>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if z0 != 0 goto label3;

        if z1 == 0 goto label2;

        goto label3;

     label2:
        z3 = 0;

        goto label4;

     label3:
        z3 = 1;

     label4:
        if z3 != 0 goto label5;

        return 0;

     label5:
        if z0 == 0 goto label6;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ANGLE whitelist includes ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("GraphicsEnvironment", $r15);

     label6:
        if z1 == 0 goto label7;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ANGLE developer option for ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r11 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("GraphicsEnvironment", $r11);

     label7:
        return 1;
    }

    public java.lang.String getDebugLayerPathsFromSettings(android.os.Bundle, android.content.pm.IPackageManager, java.lang.String, android.content.pm.ApplicationInfo)
    {
        android.os.GraphicsEnvironment r0;
        android.content.pm.IPackageManager r1;
        java.lang.String[] r2;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r3, $r7, $r12;
        java.lang.String $r6, $r10, $r11, $r15, r18, r22, r23, r25, r26, r27;
        int $i2, i3;
        android.os.Bundle r17;
        android.content.pm.ApplicationInfo r19;

        r0 := @this: android.os.GraphicsEnvironment;

        r17 := @parameter0: android.os.Bundle;

        r1 := @parameter1: android.content.pm.IPackageManager;

        r18 := @parameter2: java.lang.String;

        r19 := @parameter3: android.content.pm.ApplicationInfo;

        $z0 = specialinvoke r0.<android.os.GraphicsEnvironment: boolean debugLayerEnabled(android.os.Bundle,java.lang.String,android.content.pm.ApplicationInfo)>(r17, r18, r19);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("GPU debug layers enabled for ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("GraphicsEnvironment", $r6);

        r22 = virtualinvoke r17.<android.os.Bundle: java.lang.String getString(java.lang.String,java.lang.String)>("gpu_debug_layer_app", "");

        r23 = "";

        $z1 = virtualinvoke r22.<java.lang.String: boolean isEmpty()>();

        if $z1 != 0 goto label4;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("GPU debug layer apps: ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("GraphicsEnvironment", $r10);

        r2 = virtualinvoke r22.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");

        i3 = 0;

        r25 = "";

     label2:
        r23 = r25;

        $i2 = lengthof r2;

        if i3 >= $i2 goto label4;

        $r11 = r2[i3];

        r26 = staticinvoke <android.os.GraphicsEnvironment: java.lang.String getDebugLayerAppPaths(android.content.pm.IPackageManager,java.lang.String)>(r1, $r11);

        r27 = r25;

        $z2 = virtualinvoke r26.<java.lang.String: boolean isEmpty()>();

        if $z2 != 0 goto label3;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        $r15 = <java.io.File: java.lang.String pathSeparator>;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        r27 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        i3 = i3 + 1;

        r25 = r27;

        goto label2;

     label4:
        return r23;
    }

    public void setLayerPaths(java.lang.ClassLoader, java.lang.String, java.lang.String)
    {
        android.os.GraphicsEnvironment r0;
        java.lang.ClassLoader r1;
        java.lang.String r2, r3;

        r0 := @this: android.os.GraphicsEnvironment;

        r1 := @parameter0: java.lang.ClassLoader;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r0.<android.os.GraphicsEnvironment: java.lang.ClassLoader mClassLoader> = r1;

        r0.<android.os.GraphicsEnvironment: java.lang.String mLibrarySearchPaths> = r2;

        r0.<android.os.GraphicsEnvironment: java.lang.String mLibraryPermittedPaths> = r3;

        return;
    }

    public void setup(android.content.Context, android.os.Bundle)
    {
        android.os.GraphicsEnvironment r0;
        android.content.Context r1;
        android.os.Bundle r2;
        android.content.pm.PackageManager r3;
        java.lang.String r4;
        android.content.pm.ApplicationInfo r5;
        boolean $z1;
        long $l0;
        int $i1;

        r0 := @this: android.os.GraphicsEnvironment;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.Bundle;

        r3 = virtualinvoke r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r4 = virtualinvoke r1.<android.content.Context: java.lang.String getPackageName()>();

        r5 = staticinvoke <android.os.GraphicsEnvironment: android.content.pm.ApplicationInfo getAppInfoWithMetadata(android.content.Context,android.content.pm.PackageManager,java.lang.String)>(r1, r3, r4);

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(2L, "setupGpuLayers");

        specialinvoke r0.<android.os.GraphicsEnvironment: void setupGpuLayers(android.content.Context,android.os.Bundle,android.content.pm.PackageManager,java.lang.String,android.content.pm.ApplicationInfo)>(r1, r2, r3, r4, r5);

        staticinvoke <android.os.Trace: void traceEnd(long)>(2L);

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(2L, "setupAngle");

        virtualinvoke r0.<android.os.GraphicsEnvironment: boolean setupAngle(android.content.Context,android.os.Bundle,android.content.pm.PackageManager,java.lang.String)>(r1, r2, r3, r4);

        staticinvoke <android.os.Trace: void traceEnd(long)>(2L);

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(2L, "chooseDriver");

        $z1 = staticinvoke <android.os.GraphicsEnvironment: boolean chooseDriver(android.content.Context,android.os.Bundle,android.content.pm.PackageManager,java.lang.String,android.content.pm.ApplicationInfo)>(r1, r2, r3, r4, r5);

        if $z1 != 0 goto label1;

        $l0 = staticinvoke <android.os.SystemProperties: long getLong(java.lang.String,long)>("ro.gfx.driver_build_time", 0L);

        $i1 = staticinvoke <android.os.GraphicsEnvironment: int getVulkanVersion(android.content.pm.PackageManager)>(r3);

        staticinvoke <android.os.GraphicsEnvironment: void setGpuStats(java.lang.String,java.lang.String,long,long,java.lang.String,int)>("system", "", 0L, $l0, r4, $i1);

        goto label1;

     label1:
        staticinvoke <android.os.Trace: void traceEnd(long)>(2L);

        return;
    }

    public boolean setupAngle(android.content.Context, android.os.Bundle, android.content.pm.PackageManager, java.lang.String)
    {
        android.os.GraphicsEnvironment r0;
        android.content.pm.PackageManager r1;
        java.lang.String r2, r3, $r5, $r7, $r9, $r16, $r20, $r26, $r32, r36, r40, r46, r47;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r4, $r13, $r17, $r22, $r28;
        android.content.pm.PackageManager$NameNotFoundException $r21, $r27;
        android.content.Context r33;
        android.os.Bundle r34;
        android.content.pm.ApplicationInfo r35, r42;

        r0 := @this: android.os.GraphicsEnvironment;

        r33 := @parameter0: android.content.Context;

        r34 := @parameter1: android.os.Bundle;

        r1 := @parameter2: android.content.pm.PackageManager;

        r2 := @parameter3: java.lang.String;

        $z0 = staticinvoke <android.os.GraphicsEnvironment: boolean shouldUseAngle(android.content.Context,android.os.Bundle,java.lang.String)>(r33, r34, r2);

        if $z0 != 0 goto label01;

        return 0;

     label01:
        r35 = null;

        r36 = specialinvoke r0.<android.os.GraphicsEnvironment: java.lang.String getAngleDebugPackage(android.content.Context,android.os.Bundle)>(r33, r34);

        $z1 = virtualinvoke r36.<java.lang.String: boolean isEmpty()>();

        if $z1 != 0 goto label05;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ANGLE debug package enabled: ");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r36);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("GraphicsEnvironment", $r20);

     label02:
        r35 = virtualinvoke r1.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>(r36, 0);

     label03:
        goto label05;

     label04:
        $r21 := @caughtexception;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ANGLE debug package \'");

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r36);

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' not installed");

        $r26 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("GraphicsEnvironment", $r26);

        return 0;

     label05:
        if r35 != null goto label10;

        r40 = specialinvoke r0.<android.os.GraphicsEnvironment: java.lang.String getAnglePackageName(android.content.pm.PackageManager)>(r1);

        $z4 = virtualinvoke r40.<java.lang.String: boolean isEmpty()>();

        if $z4 != 0 goto label09;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ANGLE package enabled: ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r40);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("GraphicsEnvironment", $r16);

     label06:
        r42 = virtualinvoke r1.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>(r40, 1048576);

     label07:
        goto label11;

     label08:
        $r27 := @caughtexception;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ANGLE package \'");

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r40);

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' not installed");

        $r32 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("GraphicsEnvironment", $r32);

        return 0;

     label09:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("GraphicsEnvironment", "Failed to find ANGLE package.");

        return 0;

     label10:
        r42 = r35;

        r40 = r36;

     label11:
        r3 = staticinvoke <android.os.GraphicsEnvironment: java.lang.String chooseAbi(android.content.pm.ApplicationInfo)>(r42);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = r42.<android.content.pm.ApplicationInfo: java.lang.String nativeLibraryDir>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = <java.io.File: java.lang.String pathSeparator>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = r42.<android.content.pm.ApplicationInfo: java.lang.String sourceDir>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!/lib/");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        r46 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        r47 = staticinvoke <android.os.GraphicsEnvironment: java.lang.String getDriverForPkg(android.content.Context,android.os.Bundle,java.lang.String)>(r33, r34, r2);

        $z2 = staticinvoke <android.os.GraphicsEnvironment: boolean setupAngleWithTempRulesFile(android.content.Context,java.lang.String,java.lang.String,java.lang.String)>(r33, r2, r46, r47);

        if $z2 == 0 goto label12;

        return 1;

     label12:
        $z3 = staticinvoke <android.os.GraphicsEnvironment: boolean setupAngleRulesApk(java.lang.String,android.content.pm.ApplicationInfo,android.content.pm.PackageManager,java.lang.String,java.lang.String,java.lang.String)>(r40, r42, r1, r2, r46, r47);

        if $z3 == 0 goto label13;

        return 1;

     label13:
        return 0;

        catch android.content.pm.PackageManager$NameNotFoundException from label02 to label03 with label04;
        catch android.content.pm.PackageManager$NameNotFoundException from label06 to label07 with label08;
    }

    public void showAngleInUseDialogBox(android.content.Context)
    {
        android.os.GraphicsEnvironment r0;
        android.content.Context r1;
        boolean $z0, $z1;
        android.content.Intent $r2;
        android.content.pm.PackageManager $r3;
        java.lang.String $r4, r7;
        android.os.GraphicsEnvironment$1 $r6;

        r0 := @this: android.os.GraphicsEnvironment;

        r1 := @parameter0: android.content.Context;

        r7 = virtualinvoke r1.<android.content.Context: java.lang.String getPackageName()>();

        $z0 = specialinvoke r0.<android.os.GraphicsEnvironment: boolean shouldShowAngleInUseDialogBox(android.content.Context)>(r1);

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<android.os.GraphicsEnvironment: boolean setupAndUseAngle(android.content.Context,java.lang.String)>(r1, r7);

        if $z1 == 0 goto label1;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.app.action.ANGLE_FOR_ANDROID_TOAST_MESSAGE");

        $r3 = virtualinvoke r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r4 = specialinvoke r0.<android.os.GraphicsEnvironment: java.lang.String getAnglePackageName(android.content.pm.PackageManager)>($r3);

        virtualinvoke $r2.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>($r4);

        $r6 = new android.os.GraphicsEnvironment$1;

        specialinvoke $r6.<android.os.GraphicsEnvironment$1: void <init>(android.os.GraphicsEnvironment)>(r0);

        virtualinvoke r1.<android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>($r2, null, $r6, null, -1, null, null);

     label1:
        return;
    }
}
