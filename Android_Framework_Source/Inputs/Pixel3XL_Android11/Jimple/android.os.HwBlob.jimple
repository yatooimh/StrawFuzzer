public class android.os.HwBlob extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final libcore.util.NativeAllocationRegistry sNativeRegistry;
    private long mNativeContext;

    static void <clinit>()
    {
        long l0;
        libcore.util.NativeAllocationRegistry $r0;
        java.lang.Class $r1;
        java.lang.ClassLoader $r2;

        <android.os.HwBlob: java.lang.String TAG> = "HwBlob";

        l0 = staticinvoke <android.os.HwBlob: long native_init()>();

        $r0 = new libcore.util.NativeAllocationRegistry;

        $r1 = class "Landroid/os/HwBlob;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        specialinvoke $r0.<libcore.util.NativeAllocationRegistry: void <init>(java.lang.ClassLoader,long,long)>($r2, l0, 128L);

        <android.os.HwBlob: libcore.util.NativeAllocationRegistry sNativeRegistry> = $r0;

        return;
    }

    public void <init>(int)
    {
        android.os.HwBlob r0;
        int i0;
        long $l1;
        libcore.util.NativeAllocationRegistry $r1;

        r0 := @this: android.os.HwBlob;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        specialinvoke r0.<android.os.HwBlob: void native_setup(int)>(i0);

        $r1 = <android.os.HwBlob: libcore.util.NativeAllocationRegistry sNativeRegistry>;

        $l1 = r0.<android.os.HwBlob: long mNativeContext>;

        virtualinvoke $r1.<libcore.util.NativeAllocationRegistry: java.lang.Runnable registerNativeAllocation(java.lang.Object,long)>(r0, $l1);

        return;
    }

    private static final native long native_init();

    private final native void native_setup(int);

    public static java.lang.Boolean[] wrapArray(boolean[])
    {
        boolean[] r0;
        int i0, i1;
        java.lang.Boolean[] r1;
        boolean $z0;
        java.lang.Boolean $r2;

        r0 := @parameter0: boolean[];

        i0 = lengthof r0;

        r1 = newarray (java.lang.Boolean)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $z0 = r0[i1];

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        r1[i1] = $r2;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r1;
    }

    public static java.lang.Byte[] wrapArray(byte[])
    {
        byte[] r0;
        int i0, i2;
        java.lang.Byte[] r1;
        byte $b1;
        java.lang.Byte $r2;

        r0 := @parameter0: byte[];

        i0 = lengthof r0;

        r1 = newarray (java.lang.Byte)[i0];

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $b1 = r0[i2];

        $r2 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b1);

        r1[i2] = $r2;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    public static java.lang.Double[] wrapArray(double[])
    {
        double[] r0;
        int i0, i1;
        java.lang.Double[] r1;
        double $d0;
        java.lang.Double $r2;

        r0 := @parameter0: double[];

        i0 = lengthof r0;

        r1 = newarray (java.lang.Double)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $d0 = r0[i1];

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        r1[i1] = $r2;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r1;
    }

    public static java.lang.Float[] wrapArray(float[])
    {
        float[] r0;
        int i0, i1;
        java.lang.Float[] r1;
        float $f0;
        java.lang.Float $r2;

        r0 := @parameter0: float[];

        i0 = lengthof r0;

        r1 = newarray (java.lang.Float)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $f0 = r0[i1];

        $r2 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        r1[i1] = $r2;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r1;
    }

    public static java.lang.Integer[] wrapArray(int[])
    {
        int[] r0;
        int i0, $i1, i2;
        java.lang.Integer[] r1;
        java.lang.Integer $r2;

        r0 := @parameter0: int[];

        i0 = lengthof r0;

        r1 = newarray (java.lang.Integer)[i0];

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $i1 = r0[i2];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        r1[i2] = $r2;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    public static java.lang.Long[] wrapArray(long[])
    {
        long[] r0;
        int i0, i2;
        java.lang.Long[] r1;
        long $l1;
        java.lang.Long $r2;

        r0 := @parameter0: long[];

        i0 = lengthof r0;

        r1 = newarray (java.lang.Long)[i0];

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $l1 = r0[i2];

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        r1[i2] = $r2;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    public static java.lang.Short[] wrapArray(short[])
    {
        short[] r0;
        int i0, i2;
        java.lang.Short[] r1;
        short $s1;
        java.lang.Short $r2;

        r0 := @parameter0: short[];

        i0 = lengthof r0;

        r1 = newarray (java.lang.Short)[i0];

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $s1 = r0[i2];

        $r2 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s1);

        r1[i2] = $r2;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    public final native void copyToBoolArray(long, boolean[], int);

    public final native void copyToDoubleArray(long, double[], int);

    public final native void copyToFloatArray(long, float[], int);

    public final native void copyToInt16Array(long, short[], int);

    public final native void copyToInt32Array(long, int[], int);

    public final native void copyToInt64Array(long, long[], int);

    public final native void copyToInt8Array(long, byte[], int);

    public final native boolean getBool(long);

    public final native double getDouble(long);

    public final native long getFieldHandle(long);

    public final native float getFloat(long);

    public final native short getInt16(long);

    public final native int getInt32(long);

    public final native long getInt64(long);

    public final native byte getInt8(long);

    public final native java.lang.String getString(long);

    public final native long handle();

    public final native void putBlob(long, android.os.HwBlob);

    public final native void putBool(long, boolean);

    public final native void putBoolArray(long, boolean[]);

    public final native void putDouble(long, double);

    public final native void putDoubleArray(long, double[]);

    public final native void putFloat(long, float);

    public final native void putFloatArray(long, float[]);

    public final void putHidlMemory(long, android.os.HidlMemory)
    {
        android.os.HwBlob r0;
        long l0, $l1, $l2, $l3, $l4;
        android.os.HidlMemory r1;
        android.os.NativeHandle $r2;
        java.lang.String $r3;

        r0 := @this: android.os.HwBlob;

        l0 := @parameter0: long;

        r1 := @parameter1: android.os.HidlMemory;

        $l1 = 0L + l0;

        $r2 = virtualinvoke r1.<android.os.HidlMemory: android.os.NativeHandle getHandle()>();

        virtualinvoke r0.<android.os.HwBlob: void putNativeHandle(long,android.os.NativeHandle)>($l1, $r2);

        $l2 = 16L + l0;

        $l3 = virtualinvoke r1.<android.os.HidlMemory: long getSize()>();

        virtualinvoke r0.<android.os.HwBlob: void putInt64(long,long)>($l2, $l3);

        $l4 = 24L + l0;

        $r3 = virtualinvoke r1.<android.os.HidlMemory: java.lang.String getName()>();

        virtualinvoke r0.<android.os.HwBlob: void putString(long,java.lang.String)>($l4, $r3);

        return;
    }

    public final native void putInt16(long, short);

    public final native void putInt16Array(long, short[]);

    public final native void putInt32(long, int);

    public final native void putInt32Array(long, int[]);

    public final native void putInt64(long, long);

    public final native void putInt64Array(long, long[]);

    public final native void putInt8(long, byte);

    public final native void putInt8Array(long, byte[]);

    public final native void putNativeHandle(long, android.os.NativeHandle);

    public final native void putString(long, java.lang.String);
}
