public class android.os.INetworkManagementService$Default extends java.lang.Object implements android.os.INetworkManagementService
{

    public void <init>()
    {
        android.os.INetworkManagementService$Default r0;

        r0 := @this: android.os.INetworkManagementService$Default;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void addIdleTimer(java.lang.String, int, int) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        java.lang.String r1;
        int i0, i1;

        r0 := @this: android.os.INetworkManagementService$Default;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        return;
    }

    public void addInterfaceToLocalNetwork(java.lang.String, java.util.List) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        java.lang.String r1;
        java.util.List r2;

        r0 := @this: android.os.INetworkManagementService$Default;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.List;

        return;
    }

    public void addInterfaceToNetwork(java.lang.String, int) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        java.lang.String r1;
        int i0;

        r0 := @this: android.os.INetworkManagementService$Default;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        return;
    }

    public void addLegacyRouteForNetId(int, android.net.RouteInfo, int) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        int i0, i1;
        android.net.RouteInfo r1;

        r0 := @this: android.os.INetworkManagementService$Default;

        i0 := @parameter0: int;

        r1 := @parameter1: android.net.RouteInfo;

        i1 := @parameter2: int;

        return;
    }

    public void addRoute(int, android.net.RouteInfo) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        int i0;
        android.net.RouteInfo r1;

        r0 := @this: android.os.INetworkManagementService$Default;

        i0 := @parameter0: int;

        r1 := @parameter1: android.net.RouteInfo;

        return;
    }

    public void addVpnUidRanges(int, android.net.UidRange[]) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        int i0;
        android.net.UidRange[] r1;

        r0 := @this: android.os.INetworkManagementService$Default;

        i0 := @parameter0: int;

        r1 := @parameter1: android.net.UidRange[];

        return;
    }

    public void allowProtect(int) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        int i0;

        r0 := @this: android.os.INetworkManagementService$Default;

        i0 := @parameter0: int;

        return;
    }

    public android.os.IBinder asBinder()
    {
        android.os.INetworkManagementService$Default r0;

        r0 := @this: android.os.INetworkManagementService$Default;

        return null;
    }

    public void clearDefaultNetId() throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;

        r0 := @this: android.os.INetworkManagementService$Default;

        return;
    }

    public void clearInterfaceAddresses(java.lang.String) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        java.lang.String r1;

        r0 := @this: android.os.INetworkManagementService$Default;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void denyProtect(int) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        int i0;

        r0 := @this: android.os.INetworkManagementService$Default;

        i0 := @parameter0: int;

        return;
    }

    public void disableIpv6(java.lang.String) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        java.lang.String r1;

        r0 := @this: android.os.INetworkManagementService$Default;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void disableNat(java.lang.String, java.lang.String) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        java.lang.String r1, r2;

        r0 := @this: android.os.INetworkManagementService$Default;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return;
    }

    public void enableIpv6(java.lang.String) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        java.lang.String r1;

        r0 := @this: android.os.INetworkManagementService$Default;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void enableNat(java.lang.String, java.lang.String) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        java.lang.String r1, r2;

        r0 := @this: android.os.INetworkManagementService$Default;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return;
    }

    public java.lang.String[] getDnsForwarders() throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;

        r0 := @this: android.os.INetworkManagementService$Default;

        return null;
    }

    public android.net.InterfaceConfiguration getInterfaceConfig(java.lang.String) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        java.lang.String r1;

        r0 := @this: android.os.INetworkManagementService$Default;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public boolean getIpForwardingEnabled() throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;

        r0 := @this: android.os.INetworkManagementService$Default;

        return 0;
    }

    public android.net.NetworkStats getNetworkStatsTethering(int) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        int i0;

        r0 := @this: android.os.INetworkManagementService$Default;

        i0 := @parameter0: int;

        return null;
    }

    public boolean isBandwidthControlEnabled() throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;

        r0 := @this: android.os.INetworkManagementService$Default;

        return 0;
    }

    public boolean isFirewallEnabled() throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;

        r0 := @this: android.os.INetworkManagementService$Default;

        return 0;
    }

    public boolean isNetworkActive() throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;

        r0 := @this: android.os.INetworkManagementService$Default;

        return 0;
    }

    public boolean isNetworkRestricted(int) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        int i0;

        r0 := @this: android.os.INetworkManagementService$Default;

        i0 := @parameter0: int;

        return 0;
    }

    public boolean isTetheringStarted() throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;

        r0 := @this: android.os.INetworkManagementService$Default;

        return 0;
    }

    public java.lang.String[] listInterfaces() throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;

        r0 := @this: android.os.INetworkManagementService$Default;

        return null;
    }

    public java.lang.String[] listTetheredInterfaces() throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;

        r0 := @this: android.os.INetworkManagementService$Default;

        return null;
    }

    public void registerNetworkActivityListener(android.os.INetworkActivityListener) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        android.os.INetworkActivityListener r1;

        r0 := @this: android.os.INetworkManagementService$Default;

        r1 := @parameter0: android.os.INetworkActivityListener;

        return;
    }

    public void registerObserver(android.net.INetworkManagementEventObserver) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        android.net.INetworkManagementEventObserver r1;

        r0 := @this: android.os.INetworkManagementService$Default;

        r1 := @parameter0: android.net.INetworkManagementEventObserver;

        return;
    }

    public void registerTetheringStatsProvider(android.net.ITetheringStatsProvider, java.lang.String) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        android.net.ITetheringStatsProvider r1;
        java.lang.String r2;

        r0 := @this: android.os.INetworkManagementService$Default;

        r1 := @parameter0: android.net.ITetheringStatsProvider;

        r2 := @parameter1: java.lang.String;

        return;
    }

    public void removeIdleTimer(java.lang.String) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        java.lang.String r1;

        r0 := @this: android.os.INetworkManagementService$Default;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void removeInterfaceAlert(java.lang.String) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        java.lang.String r1;

        r0 := @this: android.os.INetworkManagementService$Default;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void removeInterfaceFromLocalNetwork(java.lang.String) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        java.lang.String r1;

        r0 := @this: android.os.INetworkManagementService$Default;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void removeInterfaceFromNetwork(java.lang.String, int) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        java.lang.String r1;
        int i0;

        r0 := @this: android.os.INetworkManagementService$Default;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        return;
    }

    public void removeInterfaceQuota(java.lang.String) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        java.lang.String r1;

        r0 := @this: android.os.INetworkManagementService$Default;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void removeRoute(int, android.net.RouteInfo) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        int i0;
        android.net.RouteInfo r1;

        r0 := @this: android.os.INetworkManagementService$Default;

        i0 := @parameter0: int;

        r1 := @parameter1: android.net.RouteInfo;

        return;
    }

    public int removeRoutesFromLocalNetwork(java.util.List) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        java.util.List r1;

        r0 := @this: android.os.INetworkManagementService$Default;

        r1 := @parameter0: java.util.List;

        return 0;
    }

    public void removeVpnUidRanges(int, android.net.UidRange[]) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        int i0;
        android.net.UidRange[] r1;

        r0 := @this: android.os.INetworkManagementService$Default;

        i0 := @parameter0: int;

        r1 := @parameter1: android.net.UidRange[];

        return;
    }

    public void setAllowOnlyVpnForUids(boolean, android.net.UidRange[]) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        boolean z0;
        android.net.UidRange[] r1;

        r0 := @this: android.os.INetworkManagementService$Default;

        z0 := @parameter0: boolean;

        r1 := @parameter1: android.net.UidRange[];

        return;
    }

    public boolean setDataSaverModeEnabled(boolean) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        boolean z0;

        r0 := @this: android.os.INetworkManagementService$Default;

        z0 := @parameter0: boolean;

        return 0;
    }

    public void setDefaultNetId(int) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        int i0;

        r0 := @this: android.os.INetworkManagementService$Default;

        i0 := @parameter0: int;

        return;
    }

    public void setDnsForwarders(android.net.Network, java.lang.String[]) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        android.net.Network r1;
        java.lang.String[] r2;

        r0 := @this: android.os.INetworkManagementService$Default;

        r1 := @parameter0: android.net.Network;

        r2 := @parameter1: java.lang.String[];

        return;
    }

    public void setFirewallChainEnabled(int, boolean) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        int i0;
        boolean z0;

        r0 := @this: android.os.INetworkManagementService$Default;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        return;
    }

    public void setFirewallEnabled(boolean) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        boolean z0;

        r0 := @this: android.os.INetworkManagementService$Default;

        z0 := @parameter0: boolean;

        return;
    }

    public void setFirewallInterfaceRule(java.lang.String, boolean) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        java.lang.String r1;
        boolean z0;

        r0 := @this: android.os.INetworkManagementService$Default;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        return;
    }

    public void setFirewallUidRule(int, int, int) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        int i0, i1, i2;

        r0 := @this: android.os.INetworkManagementService$Default;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        return;
    }

    public void setFirewallUidRules(int, int[], int[]) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        int i0;
        int[] r1, r2;

        r0 := @this: android.os.INetworkManagementService$Default;

        i0 := @parameter0: int;

        r1 := @parameter1: int[];

        r2 := @parameter2: int[];

        return;
    }

    public void setGlobalAlert(long) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        long l0;

        r0 := @this: android.os.INetworkManagementService$Default;

        l0 := @parameter0: long;

        return;
    }

    public void setIPv6AddrGenMode(java.lang.String, int) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        java.lang.String r1;
        int i0;

        r0 := @this: android.os.INetworkManagementService$Default;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        return;
    }

    public void setInterfaceAlert(java.lang.String, long) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        java.lang.String r1;
        long l0;

        r0 := @this: android.os.INetworkManagementService$Default;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        return;
    }

    public void setInterfaceConfig(java.lang.String, android.net.InterfaceConfiguration) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        java.lang.String r1;
        android.net.InterfaceConfiguration r2;

        r0 := @this: android.os.INetworkManagementService$Default;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.net.InterfaceConfiguration;

        return;
    }

    public void setInterfaceDown(java.lang.String) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        java.lang.String r1;

        r0 := @this: android.os.INetworkManagementService$Default;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void setInterfaceIpv6PrivacyExtensions(java.lang.String, boolean) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        java.lang.String r1;
        boolean z0;

        r0 := @this: android.os.INetworkManagementService$Default;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        return;
    }

    public void setInterfaceQuota(java.lang.String, long) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        java.lang.String r1;
        long l0;

        r0 := @this: android.os.INetworkManagementService$Default;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        return;
    }

    public void setInterfaceUp(java.lang.String) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        java.lang.String r1;

        r0 := @this: android.os.INetworkManagementService$Default;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void setIpForwardingEnabled(boolean) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        boolean z0;

        r0 := @this: android.os.INetworkManagementService$Default;

        z0 := @parameter0: boolean;

        return;
    }

    public void setMtu(java.lang.String, int) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        java.lang.String r1;
        int i0;

        r0 := @this: android.os.INetworkManagementService$Default;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        return;
    }

    public void setNetworkPermission(int, int) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        int i0, i1;

        r0 := @this: android.os.INetworkManagementService$Default;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return;
    }

    public void setUidCleartextNetworkPolicy(int, int) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        int i0, i1;

        r0 := @this: android.os.INetworkManagementService$Default;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return;
    }

    public void setUidMeteredNetworkBlacklist(int, boolean) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        int i0;
        boolean z0;

        r0 := @this: android.os.INetworkManagementService$Default;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        return;
    }

    public void setUidMeteredNetworkWhitelist(int, boolean) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        int i0;
        boolean z0;

        r0 := @this: android.os.INetworkManagementService$Default;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        return;
    }

    public void shutdown() throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;

        r0 := @this: android.os.INetworkManagementService$Default;

        return;
    }

    public void startInterfaceForwarding(java.lang.String, java.lang.String) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        java.lang.String r1, r2;

        r0 := @this: android.os.INetworkManagementService$Default;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return;
    }

    public void startTethering(java.lang.String[]) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        java.lang.String[] r1;

        r0 := @this: android.os.INetworkManagementService$Default;

        r1 := @parameter0: java.lang.String[];

        return;
    }

    public void startTetheringWithConfiguration(boolean, java.lang.String[]) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        boolean z0;
        java.lang.String[] r1;

        r0 := @this: android.os.INetworkManagementService$Default;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String[];

        return;
    }

    public void stopInterfaceForwarding(java.lang.String, java.lang.String) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        java.lang.String r1, r2;

        r0 := @this: android.os.INetworkManagementService$Default;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return;
    }

    public void stopTethering() throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;

        r0 := @this: android.os.INetworkManagementService$Default;

        return;
    }

    public void tetherInterface(java.lang.String) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        java.lang.String r1;

        r0 := @this: android.os.INetworkManagementService$Default;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void tetherLimitReached(android.net.ITetheringStatsProvider) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        android.net.ITetheringStatsProvider r1;

        r0 := @this: android.os.INetworkManagementService$Default;

        r1 := @parameter0: android.net.ITetheringStatsProvider;

        return;
    }

    public void unregisterNetworkActivityListener(android.os.INetworkActivityListener) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        android.os.INetworkActivityListener r1;

        r0 := @this: android.os.INetworkManagementService$Default;

        r1 := @parameter0: android.os.INetworkActivityListener;

        return;
    }

    public void unregisterObserver(android.net.INetworkManagementEventObserver) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        android.net.INetworkManagementEventObserver r1;

        r0 := @this: android.os.INetworkManagementService$Default;

        r1 := @parameter0: android.net.INetworkManagementEventObserver;

        return;
    }

    public void unregisterTetheringStatsProvider(android.net.ITetheringStatsProvider) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        android.net.ITetheringStatsProvider r1;

        r0 := @this: android.os.INetworkManagementService$Default;

        r1 := @parameter0: android.net.ITetheringStatsProvider;

        return;
    }

    public void untetherInterface(java.lang.String) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Default r0;
        java.lang.String r1;

        r0 := @this: android.os.INetworkManagementService$Default;

        r1 := @parameter0: java.lang.String;

        return;
    }
}
