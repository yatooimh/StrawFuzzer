class android.os.INetworkManagementService$Stub$Proxy extends java.lang.Object implements android.os.INetworkManagementService
{
    public static android.os.INetworkManagementService sDefaultImpl;
    private android.os.IBinder mRemote;

    void <init>(android.os.IBinder)
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        android.os.IBinder r1;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r1 := @parameter0: android.os.IBinder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote> = r1;

        return;
    }

    public void addIdleTimer(java.lang.String, int, int) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        int i0, i1;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        boolean $z0;
        android.os.INetworkManagementService $r4, $r5;
        java.lang.Throwable $r6;
        java.lang.String r7;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r7 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>(r7);

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i0);

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i1);

        $r3 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(46, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r4 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r4 == null goto label3;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r5.<android.os.INetworkManagementService: void addIdleTimer(java.lang.String,int,int)>(r7, i0, i1);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label5:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void addInterfaceToLocalNetwork(java.lang.String, java.util.List) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        java.util.List r1;
        android.os.Parcel r2, r3;
        android.os.IBinder $r4;
        boolean $z0;
        android.os.INetworkManagementService $r5, $r6;
        java.lang.Throwable $r7;
        java.lang.String r8;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r8 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.List;

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r3 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r2.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r2.<android.os.Parcel: void writeString(java.lang.String)>(r8);

        virtualinvoke r2.<android.os.Parcel: void writeTypedList(java.util.List)>(r1);

        $r4 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(67, r2, r3, 0);

        if $z0 != 0 goto label3;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r5 == null goto label3;

        $r6 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r6.<android.os.INetworkManagementService: void addInterfaceToLocalNetwork(java.lang.String,java.util.List)>(r8, r1);

     label2:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r3.<android.os.Parcel: void readException()>();

     label4:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        return;

     label5:
        $r7 := @caughtexception;

        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void addInterfaceToNetwork(java.lang.String, int) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        int i0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        boolean $z0;
        android.os.INetworkManagementService $r4, $r5;
        java.lang.Throwable $r6;
        java.lang.String r7;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r7 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>(r7);

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i0);

        $r3 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(59, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r4 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r4 == null goto label3;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r5.<android.os.INetworkManagementService: void addInterfaceToNetwork(java.lang.String,int)>(r7, i0);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label5:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void addLegacyRouteForNetId(int, android.net.RouteInfo, int) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        int i0, i1;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        boolean $z0;
        android.os.INetworkManagementService $r4, $r5;
        java.lang.Throwable $r6;
        android.net.RouteInfo r7;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        i0 := @parameter0: int;

        r7 := @parameter1: android.net.RouteInfo;

        i1 := @parameter2: int;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label01:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i0);

     label02:
        if r7 == null goto label05;

     label03:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(1);

        virtualinvoke r7.<android.net.RouteInfo: void writeToParcel(android.os.Parcel,int)>(r1, 0);

     label04:
        goto label06;

     label05:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(0);

     label06:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i1);

        $r3 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(61, r1, r2, 0);

        if $z0 != 0 goto label08;

        $r4 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r4 == null goto label08;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r5.<android.os.INetworkManagementService: void addLegacyRouteForNetId(int,android.net.RouteInfo,int)>(i0, r7, i1);

     label07:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label08:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label09:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label10:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    public void addRoute(int, android.net.RouteInfo) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        int i0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        boolean $z0;
        android.os.INetworkManagementService $r4, $r5;
        java.lang.Throwable $r6;
        android.net.RouteInfo r7;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        i0 := @parameter0: int;

        r7 := @parameter1: android.net.RouteInfo;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label01:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i0);

     label02:
        if r7 == null goto label05;

     label03:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(1);

        virtualinvoke r7.<android.net.RouteInfo: void writeToParcel(android.os.Parcel,int)>(r1, 0);

     label04:
        goto label06;

     label05:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(0);

     label06:
        $r3 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(13, r1, r2, 0);

        if $z0 != 0 goto label08;

        $r4 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r4 == null goto label08;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r5.<android.os.INetworkManagementService: void addRoute(int,android.net.RouteInfo)>(i0, r7);

     label07:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label08:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label09:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label10:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    public void addVpnUidRanges(int, android.net.UidRange[]) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        int i0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        boolean $z0;
        android.os.INetworkManagementService $r4, $r5;
        java.lang.Throwable $r6;
        android.net.UidRange[] r7;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        i0 := @parameter0: int;

        r7 := @parameter1: android.net.UidRange[];

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i0);

        virtualinvoke r1.<android.os.Parcel: void writeTypedArray(android.os.Parcelable[],int)>(r7, 0);

        $r3 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(54, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r4 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r4 == null goto label3;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r5.<android.os.INetworkManagementService: void addVpnUidRanges(int,android.net.UidRange[])>(i0, r7);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label5:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void allowProtect(int) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        int i0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r4;
        boolean $z0;
        android.os.INetworkManagementService $r5, $r6;
        java.lang.Throwable $r7;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        i0 := @parameter0: int;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i0);

        $r4 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(65, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r5 == null goto label3;

        $r6 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r6.<android.os.INetworkManagementService: void allowProtect(int)>(i0);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label5:
        $r7 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public android.os.IBinder asBinder()
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        android.os.IBinder $r1;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        $r1 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        return $r1;
    }

    public void clearDefaultNetId() throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r4;
        boolean $z0;
        android.os.INetworkManagementService $r5, $r6;
        java.lang.Throwable $r7;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        $r4 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(63, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r5 == null goto label3;

        $r6 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r6.<android.os.INetworkManagementService: void clearDefaultNetId()>();

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label5:
        $r7 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void clearInterfaceAddresses(java.lang.String) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        boolean $z0;
        android.os.INetworkManagementService $r4, $r5;
        java.lang.Throwable $r6;
        java.lang.String r7;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r7 := @parameter0: java.lang.String;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>(r7);

        $r3 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(6, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r4 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r4 == null goto label3;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r5.<android.os.INetworkManagementService: void clearInterfaceAddresses(java.lang.String)>(r7);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label5:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void denyProtect(int) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        int i0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r4;
        boolean $z0;
        android.os.INetworkManagementService $r5, $r6;
        java.lang.Throwable $r7;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        i0 := @parameter0: int;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i0);

        $r4 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(66, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r5 == null goto label3;

        $r6 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r6.<android.os.INetworkManagementService: void denyProtect(int)>(i0);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label5:
        $r7 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void disableIpv6(java.lang.String) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        boolean $z0;
        android.os.INetworkManagementService $r4, $r5;
        java.lang.Throwable $r6;
        java.lang.String r7;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r7 := @parameter0: java.lang.String;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>(r7);

        $r3 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(10, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r4 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r4 == null goto label3;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r5.<android.os.INetworkManagementService: void disableIpv6(java.lang.String)>(r7);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label5:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void disableNat(java.lang.String, java.lang.String) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        java.lang.String r1, r8;
        android.os.Parcel r2, r3;
        android.os.IBinder $r4;
        boolean $z0;
        android.os.INetworkManagementService $r5, $r6;
        java.lang.Throwable $r7;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r8 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r3 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r2.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r2.<android.os.Parcel: void writeString(java.lang.String)>(r8);

        virtualinvoke r2.<android.os.Parcel: void writeString(java.lang.String)>(r1);

        $r4 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(31, r2, r3, 0);

        if $z0 != 0 goto label3;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r5 == null goto label3;

        $r6 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r6.<android.os.INetworkManagementService: void disableNat(java.lang.String,java.lang.String)>(r8, r1);

     label2:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r3.<android.os.Parcel: void readException()>();

     label4:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        return;

     label5:
        $r7 := @caughtexception;

        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void enableIpv6(java.lang.String) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        boolean $z0;
        android.os.INetworkManagementService $r4, $r5;
        java.lang.Throwable $r6;
        java.lang.String r7;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r7 := @parameter0: java.lang.String;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>(r7);

        $r3 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(11, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r4 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r4 == null goto label3;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r5.<android.os.INetworkManagementService: void enableIpv6(java.lang.String)>(r7);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label5:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void enableNat(java.lang.String, java.lang.String) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        java.lang.String r1, r8;
        android.os.Parcel r2, r3;
        android.os.IBinder $r4;
        boolean $z0;
        android.os.INetworkManagementService $r5, $r6;
        java.lang.Throwable $r7;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r8 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r3 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r2.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r2.<android.os.Parcel: void writeString(java.lang.String)>(r8);

        virtualinvoke r2.<android.os.Parcel: void writeString(java.lang.String)>(r1);

        $r4 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(30, r2, r3, 0);

        if $z0 != 0 goto label3;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r5 == null goto label3;

        $r6 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r6.<android.os.INetworkManagementService: void enableNat(java.lang.String,java.lang.String)>(r8, r1);

     label2:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r3.<android.os.Parcel: void readException()>();

     label4:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        return;

     label5:
        $r7 := @caughtexception;

        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public java.lang.String[] getDnsForwarders() throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        boolean $z0;
        android.os.INetworkManagementService $r4, $r5;
        java.lang.Throwable $r6;
        java.lang.String[] r7, r8;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        $r3 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(27, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r4 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r4 == null goto label3;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        r7 = interfaceinvoke $r5.<android.os.INetworkManagementService: java.lang.String[] getDnsForwarders()>();

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return r7;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

        r8 = virtualinvoke r2.<android.os.Parcel: java.lang.String[] createStringArray()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return r8;

     label5:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public android.net.InterfaceConfiguration getInterfaceConfig(java.lang.String) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        boolean $z0;
        int $i0;
        android.os.Parcelable$Creator $r4;
        java.lang.Object $r5;
        android.os.INetworkManagementService $r6, $r7;
        java.lang.Throwable $r8;
        java.lang.String r9;
        android.net.InterfaceConfiguration r10, r11;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r9 := @parameter0: java.lang.String;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>(r9);

        $r3 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(4, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r6 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r6 == null goto label3;

        $r7 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        r10 = interfaceinvoke $r7.<android.os.INetworkManagementService: android.net.InterfaceConfiguration getInterfaceConfig(java.lang.String)>(r9);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return r10;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

        $i0 = virtualinvoke r2.<android.os.Parcel: int readInt()>();

        if $i0 == 0 goto label5;

        $r4 = <android.net.InterfaceConfiguration: android.os.Parcelable$Creator CREATOR>;

        $r5 = interfaceinvoke $r4.<android.os.Parcelable$Creator: java.lang.Object createFromParcel(android.os.Parcel)>(r2);

        r11 = (android.net.InterfaceConfiguration) $r5;

     label4:
        goto label6;

     label5:
        r11 = null;

     label6:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return r11;

     label7:
        $r8 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
    }

    public java.lang.String getInterfaceDescriptor()
    {
        android.os.INetworkManagementService$Stub$Proxy r0;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        return "android.os.INetworkManagementService";
    }

    public boolean getIpForwardingEnabled() throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        int i0;
        boolean $z0, z1, z2;
        android.os.INetworkManagementService $r3, $r4;
        java.lang.Throwable $r5;
        android.os.IBinder r6;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        r6 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

     label2:
        z1 = 0;

     label3:
        $z0 = interfaceinvoke r6.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(17, r1, r2, 0);

        if $z0 != 0 goto label5;

        $r3 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r3 == null goto label5;

        $r4 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        z2 = interfaceinvoke $r4.<android.os.INetworkManagementService: boolean getIpForwardingEnabled()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return z2;

     label5:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

        i0 = virtualinvoke r2.<android.os.Parcel: int readInt()>();

     label6:
        if i0 == 0 goto label7;

        z1 = 1;

     label7:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return z1;

     label8:
        $r5 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label3 to label4 with label8;
        catch java.lang.Throwable from label5 to label6 with label8;
    }

    public android.net.NetworkStats getNetworkStatsTethering(int) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        int i0, $i1;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        boolean $z0;
        android.os.Parcelable$Creator $r4;
        java.lang.Object $r5;
        android.os.INetworkManagementService $r6, $r7;
        java.lang.Throwable $r8;
        android.net.NetworkStats r9, r10;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        i0 := @parameter0: int;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i0);

        $r3 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(35, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r6 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r6 == null goto label3;

        $r7 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        r9 = interfaceinvoke $r7.<android.os.INetworkManagementService: android.net.NetworkStats getNetworkStatsTethering(int)>(i0);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return r9;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

        $i1 = virtualinvoke r2.<android.os.Parcel: int readInt()>();

        if $i1 == 0 goto label5;

        $r4 = <android.net.NetworkStats: android.os.Parcelable$Creator CREATOR>;

        $r5 = interfaceinvoke $r4.<android.os.Parcelable$Creator: java.lang.Object createFromParcel(android.os.Parcel)>(r2);

        r10 = (android.net.NetworkStats) $r5;

     label4:
        goto label6;

     label5:
        r10 = null;

     label6:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return r10;

     label7:
        $r8 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
    }

    public boolean isBandwidthControlEnabled() throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        int i0;
        boolean $z0, z1, z2;
        android.os.INetworkManagementService $r3, $r4;
        java.lang.Throwable $r5;
        android.os.IBinder r6;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        r6 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

     label2:
        z1 = 0;

     label3:
        $z0 = interfaceinvoke r6.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(45, r1, r2, 0);

        if $z0 != 0 goto label5;

        $r3 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r3 == null goto label5;

        $r4 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        z2 = interfaceinvoke $r4.<android.os.INetworkManagementService: boolean isBandwidthControlEnabled()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return z2;

     label5:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

        i0 = virtualinvoke r2.<android.os.Parcel: int readInt()>();

     label6:
        if i0 == 0 goto label7;

        z1 = 1;

     label7:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return z1;

     label8:
        $r5 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label3 to label4 with label8;
        catch java.lang.Throwable from label5 to label6 with label8;
    }

    public boolean isFirewallEnabled() throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        int i0;
        boolean $z0, z1, z2;
        android.os.INetworkManagementService $r3, $r4;
        java.lang.Throwable $r5;
        android.os.IBinder r6;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        r6 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

     label2:
        z1 = 0;

     label3:
        $z0 = interfaceinvoke r6.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(49, r1, r2, 0);

        if $z0 != 0 goto label5;

        $r3 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r3 == null goto label5;

        $r4 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        z2 = interfaceinvoke $r4.<android.os.INetworkManagementService: boolean isFirewallEnabled()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return z2;

     label5:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

        i0 = virtualinvoke r2.<android.os.Parcel: int readInt()>();

     label6:
        if i0 == 0 goto label7;

        z1 = 1;

     label7:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return z1;

     label8:
        $r5 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label3 to label4 with label8;
        catch java.lang.Throwable from label5 to label6 with label8;
    }

    public boolean isNetworkActive() throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        int i0;
        boolean $z0, z1, z2;
        android.os.INetworkManagementService $r3, $r4;
        java.lang.Throwable $r5;
        android.os.IBinder r6;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        r6 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

     label2:
        z1 = 0;

     label3:
        $z0 = interfaceinvoke r6.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(58, r1, r2, 0);

        if $z0 != 0 goto label5;

        $r3 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r3 == null goto label5;

        $r4 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        z2 = interfaceinvoke $r4.<android.os.INetworkManagementService: boolean isNetworkActive()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return z2;

     label5:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

        i0 = virtualinvoke r2.<android.os.Parcel: int readInt()>();

     label6:
        if i0 == 0 goto label7;

        z1 = 1;

     label7:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return z1;

     label8:
        $r5 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label3 to label4 with label8;
        catch java.lang.Throwable from label5 to label6 with label8;
    }

    public boolean isNetworkRestricted(int) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        boolean $z0, z1, z2;
        android.os.INetworkManagementService $r3, $r4;
        java.lang.Throwable $r5;
        int i0, i1;
        android.os.IBinder r6;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        i0 := @parameter0: int;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i0);

        r6 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

     label2:
        z1 = 0;

     label3:
        $z0 = interfaceinvoke r6.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(71, r1, r2, 0);

        if $z0 != 0 goto label5;

        $r3 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r3 == null goto label5;

        $r4 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        z2 = interfaceinvoke $r4.<android.os.INetworkManagementService: boolean isNetworkRestricted(int)>(i0);

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return z2;

     label5:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

        i1 = virtualinvoke r2.<android.os.Parcel: int readInt()>();

     label6:
        if i1 == 0 goto label7;

        z1 = 1;

     label7:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return z1;

     label8:
        $r5 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label3 to label4 with label8;
        catch java.lang.Throwable from label5 to label6 with label8;
    }

    public boolean isTetheringStarted() throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        int i0;
        boolean $z0, z1, z2;
        android.os.INetworkManagementService $r3, $r4;
        java.lang.Throwable $r5;
        android.os.IBinder r6;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        r6 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

     label2:
        z1 = 0;

     label3:
        $z0 = interfaceinvoke r6.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(22, r1, r2, 0);

        if $z0 != 0 goto label5;

        $r3 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r3 == null goto label5;

        $r4 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        z2 = interfaceinvoke $r4.<android.os.INetworkManagementService: boolean isTetheringStarted()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return z2;

     label5:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

        i0 = virtualinvoke r2.<android.os.Parcel: int readInt()>();

     label6:
        if i0 == 0 goto label7;

        z1 = 1;

     label7:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return z1;

     label8:
        $r5 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label3 to label4 with label8;
        catch java.lang.Throwable from label5 to label6 with label8;
    }

    public java.lang.String[] listInterfaces() throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        boolean $z0;
        android.os.INetworkManagementService $r4, $r5;
        java.lang.Throwable $r6;
        java.lang.String[] r7, r8;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        $r3 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(3, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r4 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r4 == null goto label3;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        r7 = interfaceinvoke $r5.<android.os.INetworkManagementService: java.lang.String[] listInterfaces()>();

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return r7;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

        r8 = virtualinvoke r2.<android.os.Parcel: java.lang.String[] createStringArray()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return r8;

     label5:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public java.lang.String[] listTetheredInterfaces() throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        boolean $z0;
        android.os.INetworkManagementService $r4, $r5;
        java.lang.Throwable $r6;
        java.lang.String[] r7, r8;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        $r3 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(25, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r4 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r4 == null goto label3;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        r7 = interfaceinvoke $r5.<android.os.INetworkManagementService: java.lang.String[] listTetheredInterfaces()>();

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return r7;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

        r8 = virtualinvoke r2.<android.os.Parcel: java.lang.String[] createStringArray()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return r8;

     label5:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void registerNetworkActivityListener(android.os.INetworkActivityListener) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3, r8;
        boolean $z0;
        android.os.INetworkManagementService $r4, $r5;
        java.lang.Throwable $r6;
        android.os.INetworkActivityListener r7;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r7 := @parameter0: android.os.INetworkActivityListener;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label01:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

     label02:
        if r7 == null goto label05;

     label03:
        r8 = interfaceinvoke r7.<android.os.INetworkActivityListener: android.os.IBinder asBinder()>();

     label04:
        goto label06;

     label05:
        r8 = null;

     label06:
        virtualinvoke r1.<android.os.Parcel: void writeStrongBinder(android.os.IBinder)>(r8);

        $r3 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(56, r1, r2, 0);

        if $z0 != 0 goto label08;

        $r4 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r4 == null goto label08;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r5.<android.os.INetworkManagementService: void registerNetworkActivityListener(android.os.INetworkActivityListener)>(r7);

     label07:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label08:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label09:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label10:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    public void registerObserver(android.net.INetworkManagementEventObserver) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3, r8;
        boolean $z0;
        android.os.INetworkManagementService $r4, $r5;
        java.lang.Throwable $r6;
        android.net.INetworkManagementEventObserver r7;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r7 := @parameter0: android.net.INetworkManagementEventObserver;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label01:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

     label02:
        if r7 == null goto label05;

     label03:
        r8 = interfaceinvoke r7.<android.net.INetworkManagementEventObserver: android.os.IBinder asBinder()>();

     label04:
        goto label06;

     label05:
        r8 = null;

     label06:
        virtualinvoke r1.<android.os.Parcel: void writeStrongBinder(android.os.IBinder)>(r8);

        $r3 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(1, r1, r2, 0);

        if $z0 != 0 goto label08;

        $r4 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r4 == null goto label08;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r5.<android.os.INetworkManagementService: void registerObserver(android.net.INetworkManagementEventObserver)>(r7);

     label07:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label08:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label09:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label10:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    public void registerTetheringStatsProvider(android.net.ITetheringStatsProvider, java.lang.String) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        java.lang.String r1;
        android.os.Parcel r2, r3;
        android.os.IBinder $r4, r9;
        boolean $z0;
        android.os.INetworkManagementService $r5, $r6;
        java.lang.Throwable $r7;
        android.net.ITetheringStatsProvider r8;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r8 := @parameter0: android.net.ITetheringStatsProvider;

        r1 := @parameter1: java.lang.String;

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r3 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label01:
        virtualinvoke r2.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

     label02:
        if r8 == null goto label05;

     label03:
        r9 = interfaceinvoke r8.<android.net.ITetheringStatsProvider: android.os.IBinder asBinder()>();

     label04:
        goto label06;

     label05:
        r9 = null;

     label06:
        virtualinvoke r2.<android.os.Parcel: void writeStrongBinder(android.os.IBinder)>(r9);

        virtualinvoke r2.<android.os.Parcel: void writeString(java.lang.String)>(r1);

        $r4 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(32, r2, r3, 0);

        if $z0 != 0 goto label08;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r5 == null goto label08;

        $r6 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r6.<android.os.INetworkManagementService: void registerTetheringStatsProvider(android.net.ITetheringStatsProvider,java.lang.String)>(r8, r1);

     label07:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        return;

     label08:
        virtualinvoke r3.<android.os.Parcel: void readException()>();

     label09:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        return;

     label10:
        $r7 := @caughtexception;

        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    public void removeIdleTimer(java.lang.String) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        boolean $z0;
        android.os.INetworkManagementService $r4, $r5;
        java.lang.Throwable $r6;
        java.lang.String r7;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r7 := @parameter0: java.lang.String;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>(r7);

        $r3 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(47, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r4 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r4 == null goto label3;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r5.<android.os.INetworkManagementService: void removeIdleTimer(java.lang.String)>(r7);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label5:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void removeInterfaceAlert(java.lang.String) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        boolean $z0;
        android.os.INetworkManagementService $r4, $r5;
        java.lang.Throwable $r6;
        java.lang.String r7;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r7 := @parameter0: java.lang.String;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>(r7);

        $r3 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(39, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r4 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r4 == null goto label3;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r5.<android.os.INetworkManagementService: void removeInterfaceAlert(java.lang.String)>(r7);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label5:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void removeInterfaceFromLocalNetwork(java.lang.String) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        boolean $z0;
        android.os.INetworkManagementService $r4, $r5;
        java.lang.Throwable $r6;
        java.lang.String r7;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r7 := @parameter0: java.lang.String;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>(r7);

        $r3 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(68, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r4 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r4 == null goto label3;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r5.<android.os.INetworkManagementService: void removeInterfaceFromLocalNetwork(java.lang.String)>(r7);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label5:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void removeInterfaceFromNetwork(java.lang.String, int) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        int i0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        boolean $z0;
        android.os.INetworkManagementService $r4, $r5;
        java.lang.Throwable $r6;
        java.lang.String r7;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r7 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>(r7);

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i0);

        $r3 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(60, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r4 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r4 == null goto label3;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r5.<android.os.INetworkManagementService: void removeInterfaceFromNetwork(java.lang.String,int)>(r7, i0);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label5:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void removeInterfaceQuota(java.lang.String) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        boolean $z0;
        android.os.INetworkManagementService $r4, $r5;
        java.lang.Throwable $r6;
        java.lang.String r7;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r7 := @parameter0: java.lang.String;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>(r7);

        $r3 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(37, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r4 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r4 == null goto label3;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r5.<android.os.INetworkManagementService: void removeInterfaceQuota(java.lang.String)>(r7);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label5:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void removeRoute(int, android.net.RouteInfo) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        int i0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        boolean $z0;
        android.os.INetworkManagementService $r4, $r5;
        java.lang.Throwable $r6;
        android.net.RouteInfo r7;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        i0 := @parameter0: int;

        r7 := @parameter1: android.net.RouteInfo;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label01:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i0);

     label02:
        if r7 == null goto label05;

     label03:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(1);

        virtualinvoke r7.<android.net.RouteInfo: void writeToParcel(android.os.Parcel,int)>(r1, 0);

     label04:
        goto label06;

     label05:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(0);

     label06:
        $r3 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(14, r1, r2, 0);

        if $z0 != 0 goto label08;

        $r4 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r4 == null goto label08;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r5.<android.os.INetworkManagementService: void removeRoute(int,android.net.RouteInfo)>(i0, r7);

     label07:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label08:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label09:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label10:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    public int removeRoutesFromLocalNetwork(java.util.List) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        boolean $z0;
        android.os.INetworkManagementService $r4, $r5;
        java.lang.Throwable $r6;
        java.util.List r7;
        int i0, i1;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r7 := @parameter0: java.util.List;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r1.<android.os.Parcel: void writeTypedList(java.util.List)>(r7);

        $r3 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(69, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r4 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r4 == null goto label3;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        i0 = interfaceinvoke $r5.<android.os.INetworkManagementService: int removeRoutesFromLocalNetwork(java.util.List)>(r7);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return i0;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

        i1 = virtualinvoke r2.<android.os.Parcel: int readInt()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return i1;

     label5:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void removeVpnUidRanges(int, android.net.UidRange[]) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        int i0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        boolean $z0;
        android.os.INetworkManagementService $r4, $r5;
        java.lang.Throwable $r6;
        android.net.UidRange[] r7;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        i0 := @parameter0: int;

        r7 := @parameter1: android.net.UidRange[];

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i0);

        virtualinvoke r1.<android.os.Parcel: void writeTypedArray(android.os.Parcelable[],int)>(r7, 0);

        $r3 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(55, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r4 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r4 == null goto label3;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r5.<android.os.INetworkManagementService: void removeVpnUidRanges(int,android.net.UidRange[])>(i0, r7);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label5:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void setAllowOnlyVpnForUids(boolean, android.net.UidRange[]) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        boolean z0, $z1;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        android.os.INetworkManagementService $r4, $r5;
        java.lang.Throwable $r6;
        android.net.UidRange[] r7;
        byte b0;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        z0 := @parameter0: boolean;

        r7 := @parameter1: android.net.UidRange[];

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

     label2:
        if z0 == 0 goto label3;

        b0 = 1;

        goto label4;

     label3:
        b0 = 0;

     label4:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(b0);

        virtualinvoke r1.<android.os.Parcel: void writeTypedArray(android.os.Parcelable[],int)>(r7, 0);

        $r3 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z1 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(70, r1, r2, 0);

        if $z1 != 0 goto label6;

        $r4 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r4 == null goto label6;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r5.<android.os.INetworkManagementService: void setAllowOnlyVpnForUids(boolean,android.net.UidRange[])>(z0, r7);

     label5:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label6:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label7:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label8:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label4 to label5 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    public boolean setDataSaverModeEnabled(boolean) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r4;
        boolean $z1, z2, z3, z4;
        android.os.INetworkManagementService $r5, $r6;
        java.lang.Throwable $r7;
        byte b0;
        int i1;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        z2 := @parameter0: boolean;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label01:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

     label02:
        if z2 == 0 goto label03;

        b0 = 1;

        goto label04;

     label03:
        b0 = 0;

     label04:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(b0);

        $r4 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z1 = interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(43, r1, r2, 0);

        if $z1 != 0 goto label06;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r5 == null goto label06;

        $r6 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        z3 = interfaceinvoke $r6.<android.os.INetworkManagementService: boolean setDataSaverModeEnabled(boolean)>(z2);

     label05:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return z3;

     label06:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

        i1 = virtualinvoke r2.<android.os.Parcel: int readInt()>();

     label07:
        if i1 == 0 goto label08;

        z4 = 1;

        goto label09;

     label08:
        z4 = 0;

     label09:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return z4;

     label10:
        $r7 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
    }

    public void setDefaultNetId(int) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        int i0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r4;
        boolean $z0;
        android.os.INetworkManagementService $r5, $r6;
        java.lang.Throwable $r7;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        i0 := @parameter0: int;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i0);

        $r4 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(62, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r5 == null goto label3;

        $r6 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r6.<android.os.INetworkManagementService: void setDefaultNetId(int)>(i0);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label5:
        $r7 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void setDnsForwarders(android.net.Network, java.lang.String[]) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        java.lang.String[] r1;
        android.os.Parcel r2, r3;
        android.os.IBinder $r4;
        boolean $z0;
        android.os.INetworkManagementService $r5, $r6;
        java.lang.Throwable $r7;
        android.net.Network r8;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r8 := @parameter0: android.net.Network;

        r1 := @parameter1: java.lang.String[];

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r3 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label01:
        virtualinvoke r2.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

     label02:
        if r8 == null goto label05;

     label03:
        virtualinvoke r2.<android.os.Parcel: void writeInt(int)>(1);

        virtualinvoke r8.<android.net.Network: void writeToParcel(android.os.Parcel,int)>(r2, 0);

     label04:
        goto label06;

     label05:
        virtualinvoke r2.<android.os.Parcel: void writeInt(int)>(0);

     label06:
        virtualinvoke r2.<android.os.Parcel: void writeStringArray(java.lang.String[])>(r1);

        $r4 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(26, r2, r3, 0);

        if $z0 != 0 goto label08;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r5 == null goto label08;

        $r6 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r6.<android.os.INetworkManagementService: void setDnsForwarders(android.net.Network,java.lang.String[])>(r8, r1);

     label07:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        return;

     label08:
        virtualinvoke r3.<android.os.Parcel: void readException()>();

     label09:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        return;

     label10:
        $r7 := @caughtexception;

        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    public void setFirewallChainEnabled(int, boolean) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        int i0;
        boolean z0, $z1;
        android.os.Parcel r1, r2;
        android.os.IBinder $r4;
        android.os.INetworkManagementService $r5, $r6;
        java.lang.Throwable $r7;
        byte b1;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i0);

     label2:
        if z0 == 0 goto label3;

        b1 = 1;

        goto label4;

     label3:
        b1 = 0;

     label4:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(b1);

        $r4 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z1 = interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(53, r1, r2, 0);

        if $z1 != 0 goto label6;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r5 == null goto label6;

        $r6 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r6.<android.os.INetworkManagementService: void setFirewallChainEnabled(int,boolean)>(i0, z0);

     label5:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label6:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label7:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label8:
        $r7 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label4 to label5 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    public void setFirewallEnabled(boolean) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        boolean z0, $z1;
        android.os.Parcel r1, r2;
        android.os.IBinder $r4;
        android.os.INetworkManagementService $r5, $r6;
        java.lang.Throwable $r7;
        byte b0;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        z0 := @parameter0: boolean;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

     label2:
        if z0 == 0 goto label3;

        b0 = 1;

        goto label4;

     label3:
        b0 = 0;

     label4:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(b0);

        $r4 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z1 = interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(48, r1, r2, 0);

        if $z1 != 0 goto label6;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r5 == null goto label6;

        $r6 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r6.<android.os.INetworkManagementService: void setFirewallEnabled(boolean)>(z0);

     label5:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label6:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label7:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label8:
        $r7 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label4 to label5 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    public void setFirewallInterfaceRule(java.lang.String, boolean) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        boolean z0, $z1;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        android.os.INetworkManagementService $r4, $r5;
        java.lang.Throwable $r6;
        java.lang.String r7;
        byte b0;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r7 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>(r7);

     label2:
        if z0 == 0 goto label3;

        b0 = 1;

        goto label4;

     label3:
        b0 = 0;

     label4:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(b0);

        $r3 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z1 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(50, r1, r2, 0);

        if $z1 != 0 goto label6;

        $r4 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r4 == null goto label6;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r5.<android.os.INetworkManagementService: void setFirewallInterfaceRule(java.lang.String,boolean)>(r7, z0);

     label5:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label6:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label7:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label8:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label4 to label5 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    public void setFirewallUidRule(int, int, int) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        int i0, i1, i2;
        android.os.Parcel r1, r2;
        android.os.IBinder $r4;
        boolean $z0;
        android.os.INetworkManagementService $r5, $r6;
        java.lang.Throwable $r7;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i0);

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i1);

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i2);

        $r4 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(51, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r5 == null goto label3;

        $r6 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r6.<android.os.INetworkManagementService: void setFirewallUidRule(int,int,int)>(i0, i1, i2);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label5:
        $r7 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void setFirewallUidRules(int, int[], int[]) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        int i0;
        int[] r1, r8;
        android.os.Parcel r2, r3;
        android.os.IBinder $r4;
        boolean $z0;
        android.os.INetworkManagementService $r5, $r6;
        java.lang.Throwable $r7;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        i0 := @parameter0: int;

        r8 := @parameter1: int[];

        r1 := @parameter2: int[];

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r3 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r2.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r2.<android.os.Parcel: void writeInt(int)>(i0);

        virtualinvoke r2.<android.os.Parcel: void writeIntArray(int[])>(r8);

        virtualinvoke r2.<android.os.Parcel: void writeIntArray(int[])>(r1);

        $r4 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(52, r2, r3, 0);

        if $z0 != 0 goto label3;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r5 == null goto label3;

        $r6 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r6.<android.os.INetworkManagementService: void setFirewallUidRules(int,int[],int[])>(i0, r8, r1);

     label2:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r3.<android.os.Parcel: void readException()>();

     label4:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        return;

     label5:
        $r7 := @caughtexception;

        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void setGlobalAlert(long) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        long l0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r4;
        boolean $z0;
        android.os.INetworkManagementService $r5, $r6;
        java.lang.Throwable $r7;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        l0 := @parameter0: long;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r1.<android.os.Parcel: void writeLong(long)>(l0);

        $r4 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(40, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r5 == null goto label3;

        $r6 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r6.<android.os.INetworkManagementService: void setGlobalAlert(long)>(l0);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label5:
        $r7 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void setIPv6AddrGenMode(java.lang.String, int) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        int i0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        boolean $z0;
        android.os.INetworkManagementService $r4, $r5;
        java.lang.Throwable $r6;
        java.lang.String r7;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r7 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>(r7);

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i0);

        $r3 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(12, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r4 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r4 == null goto label3;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r5.<android.os.INetworkManagementService: void setIPv6AddrGenMode(java.lang.String,int)>(r7, i0);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label5:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void setInterfaceAlert(java.lang.String, long) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        long l0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        boolean $z0;
        android.os.INetworkManagementService $r4, $r5;
        java.lang.Throwable $r6;
        java.lang.String r7;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r7 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>(r7);

        virtualinvoke r1.<android.os.Parcel: void writeLong(long)>(l0);

        $r3 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(38, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r4 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r4 == null goto label3;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r5.<android.os.INetworkManagementService: void setInterfaceAlert(java.lang.String,long)>(r7, l0);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label5:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void setInterfaceConfig(java.lang.String, android.net.InterfaceConfiguration) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        android.net.InterfaceConfiguration r1;
        android.os.Parcel r2, r3;
        android.os.IBinder $r4;
        boolean $z0;
        android.os.INetworkManagementService $r5, $r6;
        java.lang.Throwable $r7;
        java.lang.String r8;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r8 := @parameter0: java.lang.String;

        r1 := @parameter1: android.net.InterfaceConfiguration;

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r3 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label01:
        virtualinvoke r2.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r2.<android.os.Parcel: void writeString(java.lang.String)>(r8);

     label02:
        if r1 == null goto label05;

     label03:
        virtualinvoke r2.<android.os.Parcel: void writeInt(int)>(1);

        virtualinvoke r1.<android.net.InterfaceConfiguration: void writeToParcel(android.os.Parcel,int)>(r2, 0);

     label04:
        goto label06;

     label05:
        virtualinvoke r2.<android.os.Parcel: void writeInt(int)>(0);

     label06:
        $r4 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(5, r2, r3, 0);

        if $z0 != 0 goto label08;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r5 == null goto label08;

        $r6 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r6.<android.os.INetworkManagementService: void setInterfaceConfig(java.lang.String,android.net.InterfaceConfiguration)>(r8, r1);

     label07:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        return;

     label08:
        virtualinvoke r3.<android.os.Parcel: void readException()>();

     label09:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        return;

     label10:
        $r7 := @caughtexception;

        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    public void setInterfaceDown(java.lang.String) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        boolean $z0;
        android.os.INetworkManagementService $r4, $r5;
        java.lang.Throwable $r6;
        java.lang.String r7;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r7 := @parameter0: java.lang.String;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>(r7);

        $r3 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(7, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r4 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r4 == null goto label3;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r5.<android.os.INetworkManagementService: void setInterfaceDown(java.lang.String)>(r7);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label5:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void setInterfaceIpv6PrivacyExtensions(java.lang.String, boolean) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        boolean z0, $z1;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        android.os.INetworkManagementService $r4, $r5;
        java.lang.Throwable $r6;
        java.lang.String r7;
        byte b0;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r7 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>(r7);

     label2:
        if z0 == 0 goto label3;

        b0 = 1;

        goto label4;

     label3:
        b0 = 0;

     label4:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(b0);

        $r3 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z1 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(9, r1, r2, 0);

        if $z1 != 0 goto label6;

        $r4 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r4 == null goto label6;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r5.<android.os.INetworkManagementService: void setInterfaceIpv6PrivacyExtensions(java.lang.String,boolean)>(r7, z0);

     label5:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label6:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label7:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label8:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label4 to label5 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    public void setInterfaceQuota(java.lang.String, long) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        long l0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        boolean $z0;
        android.os.INetworkManagementService $r4, $r5;
        java.lang.Throwable $r6;
        java.lang.String r7;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r7 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>(r7);

        virtualinvoke r1.<android.os.Parcel: void writeLong(long)>(l0);

        $r3 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(36, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r4 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r4 == null goto label3;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r5.<android.os.INetworkManagementService: void setInterfaceQuota(java.lang.String,long)>(r7, l0);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label5:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void setInterfaceUp(java.lang.String) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        boolean $z0;
        android.os.INetworkManagementService $r4, $r5;
        java.lang.Throwable $r6;
        java.lang.String r7;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r7 := @parameter0: java.lang.String;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>(r7);

        $r3 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(8, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r4 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r4 == null goto label3;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r5.<android.os.INetworkManagementService: void setInterfaceUp(java.lang.String)>(r7);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label5:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void setIpForwardingEnabled(boolean) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        boolean z0, $z1;
        android.os.Parcel r1, r2;
        android.os.IBinder $r4;
        android.os.INetworkManagementService $r5, $r6;
        java.lang.Throwable $r7;
        byte b0;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        z0 := @parameter0: boolean;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

     label2:
        if z0 == 0 goto label3;

        b0 = 1;

        goto label4;

     label3:
        b0 = 0;

     label4:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(b0);

        $r4 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z1 = interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(18, r1, r2, 0);

        if $z1 != 0 goto label6;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r5 == null goto label6;

        $r6 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r6.<android.os.INetworkManagementService: void setIpForwardingEnabled(boolean)>(z0);

     label5:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label6:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label7:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label8:
        $r7 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label4 to label5 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    public void setMtu(java.lang.String, int) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        int i0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        boolean $z0;
        android.os.INetworkManagementService $r4, $r5;
        java.lang.Throwable $r6;
        java.lang.String r7;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r7 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>(r7);

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i0);

        $r3 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(15, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r4 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r4 == null goto label3;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r5.<android.os.INetworkManagementService: void setMtu(java.lang.String,int)>(r7, i0);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label5:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void setNetworkPermission(int, int) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        int i0, i1;
        android.os.Parcel r1, r2;
        android.os.IBinder $r4;
        boolean $z0;
        android.os.INetworkManagementService $r5, $r6;
        java.lang.Throwable $r7;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i0);

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i1);

        $r4 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(64, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r5 == null goto label3;

        $r6 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r6.<android.os.INetworkManagementService: void setNetworkPermission(int,int)>(i0, i1);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label5:
        $r7 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void setUidCleartextNetworkPolicy(int, int) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        int i0, i1;
        android.os.Parcel r1, r2;
        android.os.IBinder $r4;
        boolean $z0;
        android.os.INetworkManagementService $r5, $r6;
        java.lang.Throwable $r7;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i0);

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i1);

        $r4 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(44, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r5 == null goto label3;

        $r6 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r6.<android.os.INetworkManagementService: void setUidCleartextNetworkPolicy(int,int)>(i0, i1);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label5:
        $r7 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void setUidMeteredNetworkBlacklist(int, boolean) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        int i0;
        boolean z0, $z1;
        android.os.Parcel r1, r2;
        android.os.IBinder $r4;
        android.os.INetworkManagementService $r5, $r6;
        java.lang.Throwable $r7;
        byte b1;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i0);

     label2:
        if z0 == 0 goto label3;

        b1 = 1;

        goto label4;

     label3:
        b1 = 0;

     label4:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(b1);

        $r4 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z1 = interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(41, r1, r2, 0);

        if $z1 != 0 goto label6;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r5 == null goto label6;

        $r6 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r6.<android.os.INetworkManagementService: void setUidMeteredNetworkBlacklist(int,boolean)>(i0, z0);

     label5:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label6:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label7:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label8:
        $r7 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label4 to label5 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    public void setUidMeteredNetworkWhitelist(int, boolean) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        int i0;
        boolean z0, $z1;
        android.os.Parcel r1, r2;
        android.os.IBinder $r4;
        android.os.INetworkManagementService $r5, $r6;
        java.lang.Throwable $r7;
        byte b1;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i0);

     label2:
        if z0 == 0 goto label3;

        b1 = 1;

        goto label4;

     label3:
        b1 = 0;

     label4:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(b1);

        $r4 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z1 = interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(42, r1, r2, 0);

        if $z1 != 0 goto label6;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r5 == null goto label6;

        $r6 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r6.<android.os.INetworkManagementService: void setUidMeteredNetworkWhitelist(int,boolean)>(i0, z0);

     label5:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label6:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label7:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label8:
        $r7 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label4 to label5 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    public void shutdown() throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r4;
        boolean $z0;
        android.os.INetworkManagementService $r5, $r6;
        java.lang.Throwable $r7;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        $r4 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(16, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r5 == null goto label3;

        $r6 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r6.<android.os.INetworkManagementService: void shutdown()>();

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label5:
        $r7 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void startInterfaceForwarding(java.lang.String, java.lang.String) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        java.lang.String r1, r8;
        android.os.Parcel r2, r3;
        android.os.IBinder $r4;
        boolean $z0;
        android.os.INetworkManagementService $r5, $r6;
        java.lang.Throwable $r7;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r8 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r3 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r2.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r2.<android.os.Parcel: void writeString(java.lang.String)>(r8);

        virtualinvoke r2.<android.os.Parcel: void writeString(java.lang.String)>(r1);

        $r4 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(28, r2, r3, 0);

        if $z0 != 0 goto label3;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r5 == null goto label3;

        $r6 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r6.<android.os.INetworkManagementService: void startInterfaceForwarding(java.lang.String,java.lang.String)>(r8, r1);

     label2:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r3.<android.os.Parcel: void readException()>();

     label4:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        return;

     label5:
        $r7 := @caughtexception;

        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void startTethering(java.lang.String[]) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        boolean $z0;
        android.os.INetworkManagementService $r4, $r5;
        java.lang.Throwable $r6;
        java.lang.String[] r7;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r7 := @parameter0: java.lang.String[];

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r1.<android.os.Parcel: void writeStringArray(java.lang.String[])>(r7);

        $r3 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(19, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r4 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r4 == null goto label3;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r5.<android.os.INetworkManagementService: void startTethering(java.lang.String[])>(r7);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label5:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void startTetheringWithConfiguration(boolean, java.lang.String[]) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        boolean z0, $z1;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        android.os.INetworkManagementService $r4, $r5;
        java.lang.Throwable $r6;
        java.lang.String[] r7;
        byte b0;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        z0 := @parameter0: boolean;

        r7 := @parameter1: java.lang.String[];

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

     label2:
        if z0 == 0 goto label3;

        b0 = 1;

        goto label4;

     label3:
        b0 = 0;

     label4:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(b0);

        virtualinvoke r1.<android.os.Parcel: void writeStringArray(java.lang.String[])>(r7);

        $r3 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z1 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(20, r1, r2, 0);

        if $z1 != 0 goto label6;

        $r4 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r4 == null goto label6;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r5.<android.os.INetworkManagementService: void startTetheringWithConfiguration(boolean,java.lang.String[])>(z0, r7);

     label5:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label6:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label7:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label8:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label4 to label5 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    public void stopInterfaceForwarding(java.lang.String, java.lang.String) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        java.lang.String r1, r8;
        android.os.Parcel r2, r3;
        android.os.IBinder $r4;
        boolean $z0;
        android.os.INetworkManagementService $r5, $r6;
        java.lang.Throwable $r7;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r8 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r3 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r2.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r2.<android.os.Parcel: void writeString(java.lang.String)>(r8);

        virtualinvoke r2.<android.os.Parcel: void writeString(java.lang.String)>(r1);

        $r4 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(29, r2, r3, 0);

        if $z0 != 0 goto label3;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r5 == null goto label3;

        $r6 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r6.<android.os.INetworkManagementService: void stopInterfaceForwarding(java.lang.String,java.lang.String)>(r8, r1);

     label2:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r3.<android.os.Parcel: void readException()>();

     label4:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        return;

     label5:
        $r7 := @caughtexception;

        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void stopTethering() throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r4;
        boolean $z0;
        android.os.INetworkManagementService $r5, $r6;
        java.lang.Throwable $r7;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        $r4 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r4.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(21, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r5 == null goto label3;

        $r6 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r6.<android.os.INetworkManagementService: void stopTethering()>();

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label5:
        $r7 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void tetherInterface(java.lang.String) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        boolean $z0;
        android.os.INetworkManagementService $r4, $r5;
        java.lang.Throwable $r6;
        java.lang.String r7;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r7 := @parameter0: java.lang.String;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>(r7);

        $r3 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(23, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r4 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r4 == null goto label3;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r5.<android.os.INetworkManagementService: void tetherInterface(java.lang.String)>(r7);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label5:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void tetherLimitReached(android.net.ITetheringStatsProvider) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3, r8;
        boolean $z0;
        android.os.INetworkManagementService $r4, $r5;
        java.lang.Throwable $r6;
        android.net.ITetheringStatsProvider r7;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r7 := @parameter0: android.net.ITetheringStatsProvider;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label01:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

     label02:
        if r7 == null goto label05;

     label03:
        r8 = interfaceinvoke r7.<android.net.ITetheringStatsProvider: android.os.IBinder asBinder()>();

     label04:
        goto label06;

     label05:
        r8 = null;

     label06:
        virtualinvoke r1.<android.os.Parcel: void writeStrongBinder(android.os.IBinder)>(r8);

        $r3 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(34, r1, r2, 0);

        if $z0 != 0 goto label08;

        $r4 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r4 == null goto label08;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r5.<android.os.INetworkManagementService: void tetherLimitReached(android.net.ITetheringStatsProvider)>(r7);

     label07:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label08:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label09:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label10:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    public void unregisterNetworkActivityListener(android.os.INetworkActivityListener) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3, r8;
        boolean $z0;
        android.os.INetworkManagementService $r4, $r5;
        java.lang.Throwable $r6;
        android.os.INetworkActivityListener r7;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r7 := @parameter0: android.os.INetworkActivityListener;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label01:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

     label02:
        if r7 == null goto label05;

     label03:
        r8 = interfaceinvoke r7.<android.os.INetworkActivityListener: android.os.IBinder asBinder()>();

     label04:
        goto label06;

     label05:
        r8 = null;

     label06:
        virtualinvoke r1.<android.os.Parcel: void writeStrongBinder(android.os.IBinder)>(r8);

        $r3 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(57, r1, r2, 0);

        if $z0 != 0 goto label08;

        $r4 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r4 == null goto label08;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r5.<android.os.INetworkManagementService: void unregisterNetworkActivityListener(android.os.INetworkActivityListener)>(r7);

     label07:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label08:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label09:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label10:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    public void unregisterObserver(android.net.INetworkManagementEventObserver) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3, r8;
        boolean $z0;
        android.os.INetworkManagementService $r4, $r5;
        java.lang.Throwable $r6;
        android.net.INetworkManagementEventObserver r7;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r7 := @parameter0: android.net.INetworkManagementEventObserver;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label01:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

     label02:
        if r7 == null goto label05;

     label03:
        r8 = interfaceinvoke r7.<android.net.INetworkManagementEventObserver: android.os.IBinder asBinder()>();

     label04:
        goto label06;

     label05:
        r8 = null;

     label06:
        virtualinvoke r1.<android.os.Parcel: void writeStrongBinder(android.os.IBinder)>(r8);

        $r3 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(2, r1, r2, 0);

        if $z0 != 0 goto label08;

        $r4 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r4 == null goto label08;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r5.<android.os.INetworkManagementService: void unregisterObserver(android.net.INetworkManagementEventObserver)>(r7);

     label07:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label08:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label09:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label10:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    public void unregisterTetheringStatsProvider(android.net.ITetheringStatsProvider) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3, r8;
        boolean $z0;
        android.os.INetworkManagementService $r4, $r5;
        java.lang.Throwable $r6;
        android.net.ITetheringStatsProvider r7;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r7 := @parameter0: android.net.ITetheringStatsProvider;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label01:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

     label02:
        if r7 == null goto label05;

     label03:
        r8 = interfaceinvoke r7.<android.net.ITetheringStatsProvider: android.os.IBinder asBinder()>();

     label04:
        goto label06;

     label05:
        r8 = null;

     label06:
        virtualinvoke r1.<android.os.Parcel: void writeStrongBinder(android.os.IBinder)>(r8);

        $r3 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(33, r1, r2, 0);

        if $z0 != 0 goto label08;

        $r4 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r4 == null goto label08;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r5.<android.os.INetworkManagementService: void unregisterTetheringStatsProvider(android.net.ITetheringStatsProvider)>(r7);

     label07:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label08:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label09:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label10:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    public void untetherInterface(java.lang.String) throws android.os.RemoteException
    {
        android.os.INetworkManagementService$Stub$Proxy r0;
        android.os.Parcel r1, r2;
        android.os.IBinder $r3;
        boolean $z0;
        android.os.INetworkManagementService $r4, $r5;
        java.lang.Throwable $r6;
        java.lang.String r7;

        r0 := @this: android.os.INetworkManagementService$Stub$Proxy;

        r7 := @parameter0: java.lang.String;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.os.INetworkManagementService");

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>(r7);

        $r3 = r0.<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(24, r1, r2, 0);

        if $z0 != 0 goto label3;

        $r4 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        if $r4 == null goto label3;

        $r5 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService getDefaultImpl()>();

        interfaceinvoke $r5.<android.os.INetworkManagementService: void untetherInterface(java.lang.String)>(r7);

     label2:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r2.<android.os.Parcel: void readException()>();

     label4:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label5:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }
}
