public interface  android.os.IVold extends java.lang.Object implements android.os.IInterface
{
    public static final int ENCRYPTION_FLAG_NO_UI;
    public static final int ENCRYPTION_STATE_ERROR_CORRUPT;
    public static final int ENCRYPTION_STATE_ERROR_INCOMPLETE;
    public static final int ENCRYPTION_STATE_ERROR_INCONSISTENT;
    public static final int ENCRYPTION_STATE_ERROR_UNKNOWN;
    public static final int ENCRYPTION_STATE_NONE;
    public static final int ENCRYPTION_STATE_OK;
    public static final int FSTRIM_FLAG_DEEP_TRIM;
    public static final int MOUNT_FLAG_PRIMARY;
    public static final int MOUNT_FLAG_VISIBLE;
    public static final int PARTITION_TYPE_MIXED;
    public static final int PARTITION_TYPE_PRIVATE;
    public static final int PARTITION_TYPE_PUBLIC;
    public static final int PASSWORD_TYPE_DEFAULT;
    public static final int PASSWORD_TYPE_PASSWORD;
    public static final int PASSWORD_TYPE_PATTERN;
    public static final int PASSWORD_TYPE_PIN;
    public static final int REMOUNT_MODE_ANDROID_WRITABLE;
    public static final int REMOUNT_MODE_DEFAULT;
    public static final int REMOUNT_MODE_FULL;
    public static final int REMOUNT_MODE_INSTALLER;
    public static final int REMOUNT_MODE_LEGACY;
    public static final int REMOUNT_MODE_NONE;
    public static final int REMOUNT_MODE_PASS_THROUGH;
    public static final int REMOUNT_MODE_READ;
    public static final int REMOUNT_MODE_WRITE;
    public static final int STORAGE_FLAG_CE;
    public static final int STORAGE_FLAG_DE;
    public static final int VOLUME_STATE_BAD_REMOVAL;
    public static final int VOLUME_STATE_CHECKING;
    public static final int VOLUME_STATE_EJECTING;
    public static final int VOLUME_STATE_FORMATTING;
    public static final int VOLUME_STATE_MOUNTED;
    public static final int VOLUME_STATE_MOUNTED_READ_ONLY;
    public static final int VOLUME_STATE_REMOVED;
    public static final int VOLUME_STATE_UNMOUNTABLE;
    public static final int VOLUME_STATE_UNMOUNTED;
    public static final int VOLUME_TYPE_ASEC;
    public static final int VOLUME_TYPE_EMULATED;
    public static final int VOLUME_TYPE_OBB;
    public static final int VOLUME_TYPE_PRIVATE;
    public static final int VOLUME_TYPE_PUBLIC;
    public static final int VOLUME_TYPE_STUB;

    public abstract void abortChanges(java.lang.String, boolean) throws android.os.RemoteException;

    public abstract void abortFuse() throws android.os.RemoteException;

    public abstract void abortIdleMaint(android.os.IVoldTaskListener) throws android.os.RemoteException;

    public abstract void addAppIds(java.lang.String[], int[]) throws android.os.RemoteException;

    public abstract void addSandboxIds(int[], java.lang.String[]) throws android.os.RemoteException;

    public abstract void addUserKeyAuth(int, int, java.lang.String, java.lang.String) throws android.os.RemoteException;

    public abstract void benchmark(java.lang.String, android.os.IVoldTaskListener) throws android.os.RemoteException;

    public abstract void bindMount(java.lang.String, java.lang.String) throws android.os.RemoteException;

    public abstract void checkEncryption(java.lang.String) throws android.os.RemoteException;

    public abstract void clearUserKeyAuth(int, int, java.lang.String, java.lang.String) throws android.os.RemoteException;

    public abstract void commitChanges() throws android.os.RemoteException;

    public abstract java.lang.String createObb(java.lang.String, java.lang.String, int) throws android.os.RemoteException;

    public abstract java.lang.String createStubVolume(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, int) throws android.os.RemoteException;

    public abstract void createUserKey(int, int, boolean) throws android.os.RemoteException;

    public abstract void destroyObb(java.lang.String) throws android.os.RemoteException;

    public abstract void destroySandboxForApp(java.lang.String, java.lang.String, int) throws android.os.RemoteException;

    public abstract void destroyStubVolume(java.lang.String) throws android.os.RemoteException;

    public abstract void destroyUserKey(int) throws android.os.RemoteException;

    public abstract void destroyUserStorage(java.lang.String, int, int) throws android.os.RemoteException;

    public abstract void encryptFstab(java.lang.String, java.lang.String) throws android.os.RemoteException;

    public abstract void fbeEnable() throws android.os.RemoteException;

    public abstract void fdeChangePassword(int, java.lang.String) throws android.os.RemoteException;

    public abstract void fdeCheckPassword(java.lang.String) throws android.os.RemoteException;

    public abstract void fdeClearPassword() throws android.os.RemoteException;

    public abstract int fdeComplete() throws android.os.RemoteException;

    public abstract void fdeEnable(int, java.lang.String, int) throws android.os.RemoteException;

    public abstract java.lang.String fdeGetField(java.lang.String) throws android.os.RemoteException;

    public abstract java.lang.String fdeGetPassword() throws android.os.RemoteException;

    public abstract int fdeGetPasswordType() throws android.os.RemoteException;

    public abstract void fdeRestart() throws android.os.RemoteException;

    public abstract void fdeSetField(java.lang.String, java.lang.String) throws android.os.RemoteException;

    public abstract void fdeVerifyPassword(java.lang.String) throws android.os.RemoteException;

    public abstract void fixateNewestUserKeyAuth(int) throws android.os.RemoteException;

    public abstract void fixupAppDir(java.lang.String, int) throws android.os.RemoteException;

    public abstract void forgetPartition(java.lang.String, java.lang.String) throws android.os.RemoteException;

    public abstract void format(java.lang.String, java.lang.String) throws android.os.RemoteException;

    public abstract void fstrim(int, android.os.IVoldTaskListener) throws android.os.RemoteException;

    public abstract boolean incFsEnabled() throws android.os.RemoteException;

    public abstract void initUser0() throws android.os.RemoteException;

    public abstract boolean isCheckpointing() throws android.os.RemoteException;

    public abstract boolean isConvertibleToFbe() throws android.os.RemoteException;

    public abstract void lockUserKey(int) throws android.os.RemoteException;

    public abstract void markBootAttempt() throws android.os.RemoteException;

    public abstract void monitor() throws android.os.RemoteException;

    public abstract void mount(java.lang.String, int, int, android.os.IVoldMountCallback) throws android.os.RemoteException;

    public abstract java.io.FileDescriptor mountAppFuse(int, int) throws android.os.RemoteException;

    public abstract void mountDefaultEncrypted() throws android.os.RemoteException;

    public abstract void mountFstab(java.lang.String, java.lang.String) throws android.os.RemoteException;

    public abstract android.os.incremental.IncrementalFileSystemControlParcel mountIncFs(java.lang.String, java.lang.String, int) throws android.os.RemoteException;

    public abstract void moveStorage(java.lang.String, java.lang.String, android.os.IVoldTaskListener) throws android.os.RemoteException;

    public abstract boolean needsCheckpoint() throws android.os.RemoteException;

    public abstract boolean needsRollback() throws android.os.RemoteException;

    public abstract void onSecureKeyguardStateChanged(boolean) throws android.os.RemoteException;

    public abstract void onUserAdded(int, int) throws android.os.RemoteException;

    public abstract void onUserRemoved(int) throws android.os.RemoteException;

    public abstract void onUserStarted(int) throws android.os.RemoteException;

    public abstract void onUserStopped(int) throws android.os.RemoteException;

    public abstract java.io.FileDescriptor openAppFuseFile(int, int, int, int) throws android.os.RemoteException;

    public abstract void partition(java.lang.String, int, int) throws android.os.RemoteException;

    public abstract void prepareCheckpoint() throws android.os.RemoteException;

    public abstract void prepareSandboxForApp(java.lang.String, int, java.lang.String, int) throws android.os.RemoteException;

    public abstract void prepareUserStorage(java.lang.String, int, int, int) throws android.os.RemoteException;

    public abstract void remountAppStorageDirs(int, int, java.lang.String[]) throws android.os.RemoteException;

    public abstract void remountUid(int, int) throws android.os.RemoteException;

    public abstract void reset() throws android.os.RemoteException;

    public abstract void resetCheckpoint() throws android.os.RemoteException;

    public abstract void restoreCheckpoint(java.lang.String) throws android.os.RemoteException;

    public abstract void restoreCheckpointPart(java.lang.String, int) throws android.os.RemoteException;

    public abstract void runIdleMaint(android.os.IVoldTaskListener) throws android.os.RemoteException;

    public abstract void setIncFsMountOptions(android.os.incremental.IncrementalFileSystemControlParcel, boolean) throws android.os.RemoteException;

    public abstract void setListener(android.os.IVoldListener) throws android.os.RemoteException;

    public abstract void setupAppDir(java.lang.String, int) throws android.os.RemoteException;

    public abstract void shutdown() throws android.os.RemoteException;

    public abstract void startCheckpoint(int) throws android.os.RemoteException;

    public abstract boolean supportsBlockCheckpoint() throws android.os.RemoteException;

    public abstract boolean supportsCheckpoint() throws android.os.RemoteException;

    public abstract boolean supportsFileCheckpoint() throws android.os.RemoteException;

    public abstract void unlockUserKey(int, int, java.lang.String, java.lang.String) throws android.os.RemoteException;

    public abstract void unmount(java.lang.String) throws android.os.RemoteException;

    public abstract void unmountAppFuse(int, int) throws android.os.RemoteException;

    public abstract void unmountIncFs(java.lang.String) throws android.os.RemoteException;

    public static void <clinit>()
    {
        <android.os.IVold: int VOLUME_TYPE_STUB> = 5;

        <android.os.IVold: int VOLUME_TYPE_PUBLIC> = 0;

        <android.os.IVold: int VOLUME_TYPE_PRIVATE> = 1;

        <android.os.IVold: int VOLUME_TYPE_OBB> = 4;

        <android.os.IVold: int VOLUME_TYPE_EMULATED> = 2;

        <android.os.IVold: int VOLUME_TYPE_ASEC> = 3;

        <android.os.IVold: int VOLUME_STATE_UNMOUNTED> = 0;

        <android.os.IVold: int VOLUME_STATE_UNMOUNTABLE> = 6;

        <android.os.IVold: int VOLUME_STATE_REMOVED> = 7;

        <android.os.IVold: int VOLUME_STATE_MOUNTED_READ_ONLY> = 3;

        <android.os.IVold: int VOLUME_STATE_MOUNTED> = 2;

        <android.os.IVold: int VOLUME_STATE_FORMATTING> = 4;

        <android.os.IVold: int VOLUME_STATE_EJECTING> = 5;

        <android.os.IVold: int VOLUME_STATE_CHECKING> = 1;

        <android.os.IVold: int VOLUME_STATE_BAD_REMOVAL> = 8;

        <android.os.IVold: int STORAGE_FLAG_DE> = 1;

        <android.os.IVold: int STORAGE_FLAG_CE> = 2;

        <android.os.IVold: int REMOUNT_MODE_WRITE> = 3;

        <android.os.IVold: int REMOUNT_MODE_READ> = 2;

        <android.os.IVold: int REMOUNT_MODE_PASS_THROUGH> = 7;

        <android.os.IVold: int REMOUNT_MODE_NONE> = 0;

        <android.os.IVold: int REMOUNT_MODE_LEGACY> = 4;

        <android.os.IVold: int REMOUNT_MODE_INSTALLER> = 5;

        <android.os.IVold: int REMOUNT_MODE_FULL> = 6;

        <android.os.IVold: int REMOUNT_MODE_DEFAULT> = 1;

        <android.os.IVold: int REMOUNT_MODE_ANDROID_WRITABLE> = 8;

        <android.os.IVold: int PASSWORD_TYPE_PIN> = 3;

        <android.os.IVold: int PASSWORD_TYPE_PATTERN> = 2;

        <android.os.IVold: int PASSWORD_TYPE_PASSWORD> = 0;

        <android.os.IVold: int PASSWORD_TYPE_DEFAULT> = 1;

        <android.os.IVold: int PARTITION_TYPE_PUBLIC> = 0;

        <android.os.IVold: int PARTITION_TYPE_PRIVATE> = 1;

        <android.os.IVold: int PARTITION_TYPE_MIXED> = 2;

        <android.os.IVold: int MOUNT_FLAG_VISIBLE> = 2;

        <android.os.IVold: int MOUNT_FLAG_PRIMARY> = 1;

        <android.os.IVold: int FSTRIM_FLAG_DEEP_TRIM> = 1;

        <android.os.IVold: int ENCRYPTION_STATE_OK> = 0;

        <android.os.IVold: int ENCRYPTION_STATE_NONE> = 1;

        <android.os.IVold: int ENCRYPTION_STATE_ERROR_UNKNOWN> = -1;

        <android.os.IVold: int ENCRYPTION_STATE_ERROR_INCONSISTENT> = -3;

        <android.os.IVold: int ENCRYPTION_STATE_ERROR_INCOMPLETE> = -2;

        <android.os.IVold: int ENCRYPTION_STATE_ERROR_CORRUPT> = -4;

        <android.os.IVold: int ENCRYPTION_FLAG_NO_UI> = 4;

        return;
    }
}
