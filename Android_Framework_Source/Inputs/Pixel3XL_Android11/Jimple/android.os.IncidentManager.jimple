public class android.os.IncidentManager extends java.lang.Object
{
    public static final int FLAG_CONFIRMATION_DIALOG;
    public static final int PRIVACY_POLICY_AUTO;
    public static final int PRIVACY_POLICY_EXPLICIT;
    public static final int PRIVACY_POLICY_LOCAL;
    private static final java.lang.String TAG;
    public static final java.lang.String URI_AUTHORITY;
    public static final java.lang.String URI_PARAM_CALLING_PACKAGE;
    public static final java.lang.String URI_PARAM_FLAGS;
    public static final java.lang.String URI_PARAM_ID;
    public static final java.lang.String URI_PARAM_RECEIVER_CLASS;
    public static final java.lang.String URI_PARAM_REPORT_ID;
    public static final java.lang.String URI_PARAM_TIMESTAMP;
    public static final java.lang.String URI_PATH;
    public static final java.lang.String URI_SCHEME;
    private android.os.IIncidentCompanion mCompanionService;
    private final android.content.Context mContext;
    private android.os.IIncidentManager mIncidentService;
    private java.lang.Object mLock;

    public void <init>(android.content.Context)
    {
        android.os.IncidentManager r0;
        android.content.Context r1;
        java.lang.Object $r2;

        r0 := @this: android.os.IncidentManager;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<android.os.IncidentManager: java.lang.Object mLock> = $r2;

        r0.<android.os.IncidentManager: android.content.Context mContext> = r1;

        return;
    }

    private android.os.IIncidentCompanion getCompanionServiceLocked() throws android.os.RemoteException
    {
        android.os.IncidentManager r0;
        android.os._$$Lambda$IncidentManager$mfBTEJgu7VPkoPMTQdf1KC7oi5g r1;
        android.os.IIncidentCompanion $r2, r5, r6, r7, r9;
        android.os.IBinder $r3, r8;
        java.lang.Throwable $r4;

        r0 := @this: android.os.IncidentManager;

        r5 = r0.<android.os.IncidentManager: android.os.IIncidentCompanion mCompanionService>;

        if r5 == null goto label01;

        return r5;

     label01:
        entermonitor r0;

     label02:
        $r2 = r0.<android.os.IncidentManager: android.os.IIncidentCompanion mCompanionService>;

        if $r2 == null goto label04;

        r6 = r0.<android.os.IncidentManager: android.os.IIncidentCompanion mCompanionService>;

        exitmonitor r0;

     label03:
        return r6;

     label04:
        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("incidentcompanion");

        r7 = staticinvoke <android.os.IIncidentCompanion$Stub: android.os.IIncidentCompanion asInterface(android.os.IBinder)>($r3);

        r0.<android.os.IncidentManager: android.os.IIncidentCompanion mCompanionService> = r7;

     label05:
        if r7 == null goto label07;

     label06:
        r8 = interfaceinvoke r7.<android.os.IIncidentCompanion: android.os.IBinder asBinder()>();

        r1 = new android.os._$$Lambda$IncidentManager$mfBTEJgu7VPkoPMTQdf1KC7oi5g;

        specialinvoke r1.<android.os._$$Lambda$IncidentManager$mfBTEJgu7VPkoPMTQdf1KC7oi5g: void <init>(android.os.IncidentManager)>(r0);

        interfaceinvoke r8.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r1, 0);

     label07:
        r9 = r0.<android.os.IncidentManager: android.os.IIncidentCompanion mCompanionService>;

        exitmonitor r0;

     label08:
        return r9;

     label09:
        $r4 := @caughtexception;

     label10:
        exitmonitor r0;

     label11:
        throw $r4;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    private android.os.IIncidentManager getIIncidentManagerLocked() throws android.os.RemoteException
    {
        android.os.IncidentManager r0;
        android.os._$$Lambda$IncidentManager$yGukxCMuLDmoRlrh5jGUmq5BOTk r1;
        android.os.IIncidentManager $r2, r5, r7, r8, r10;
        android.os.IBinder $r3, r9;
        java.lang.Throwable $r4;
        java.lang.Object r6;

        r0 := @this: android.os.IncidentManager;

        r5 = r0.<android.os.IncidentManager: android.os.IIncidentManager mIncidentService>;

        if r5 == null goto label01;

        return r5;

     label01:
        r6 = r0.<android.os.IncidentManager: java.lang.Object mLock>;

        entermonitor r6;

     label02:
        $r2 = r0.<android.os.IncidentManager: android.os.IIncidentManager mIncidentService>;

        if $r2 == null goto label04;

        r7 = r0.<android.os.IncidentManager: android.os.IIncidentManager mIncidentService>;

        exitmonitor r6;

     label03:
        return r7;

     label04:
        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("incident");

        r8 = staticinvoke <android.os.IIncidentManager$Stub: android.os.IIncidentManager asInterface(android.os.IBinder)>($r3);

        r0.<android.os.IncidentManager: android.os.IIncidentManager mIncidentService> = r8;

     label05:
        if r8 == null goto label07;

     label06:
        r9 = interfaceinvoke r8.<android.os.IIncidentManager: android.os.IBinder asBinder()>();

        r1 = new android.os._$$Lambda$IncidentManager$yGukxCMuLDmoRlrh5jGUmq5BOTk;

        specialinvoke r1.<android.os._$$Lambda$IncidentManager$yGukxCMuLDmoRlrh5jGUmq5BOTk: void <init>(android.os.IncidentManager)>(r0);

        interfaceinvoke r9.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r1, 0);

     label07:
        r10 = r0.<android.os.IncidentManager: android.os.IIncidentManager mIncidentService>;

        exitmonitor r6;

     label08:
        return r10;

     label09:
        $r4 := @caughtexception;

     label10:
        exitmonitor r6;

     label11:
        throw $r4;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    private void reportIncidentInternal(android.os.IncidentReportArgs)
    {
        android.os.IncidentManager r0;
        android.os.IIncidentManager r1;
        android.os.RemoteException $r2;
        android.os.IncidentReportArgs r3;

        r0 := @this: android.os.IncidentManager;

        r3 := @parameter0: android.os.IncidentReportArgs;

     label1:
        r1 = specialinvoke r0.<android.os.IncidentManager: android.os.IIncidentManager getIIncidentManagerLocked()>();

     label2:
        if r1 != null goto label5;

     label3:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("IncidentManager", "reportIncident can\'t find incident binder service");

     label4:
        return;

     label5:
        interfaceinvoke r1.<android.os.IIncidentManager: void reportIncident(android.os.IncidentReportArgs)>(r3);

     label6:
        goto label8;

     label7:
        $r2 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("IncidentManager", "reportIncident failed", $r2);

     label8:
        return;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch android.os.RemoteException from label5 to label6 with label7;
    }

    public void approveReport(android.net.Uri)
    {
        android.os.IncidentManager r0;
        android.os.IIncidentCompanion $r1;
        java.lang.String $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.net.Uri r5;

        r0 := @this: android.os.IncidentManager;

        r5 := @parameter0: android.net.Uri;

     label1:
        $r1 = specialinvoke r0.<android.os.IncidentManager: android.os.IIncidentCompanion getCompanionServiceLocked()>();

        $r2 = virtualinvoke r5.<android.net.Uri: java.lang.String toString()>();

        interfaceinvoke $r1.<android.os.IIncidentCompanion: void approveReport(java.lang.String)>($r2);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void cancelAuthorization(android.os.IncidentManager$AuthListener)
    {
        android.os.IncidentManager r0;
        android.os.IIncidentCompanion $r1;
        android.os.IIncidentAuthListener$Stub $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.os.IncidentManager$AuthListener r5;

        r0 := @this: android.os.IncidentManager;

        r5 := @parameter0: android.os.IncidentManager$AuthListener;

     label1:
        $r1 = specialinvoke r0.<android.os.IncidentManager: android.os.IIncidentCompanion getCompanionServiceLocked()>();

        $r2 = r5.<android.os.IncidentManager$AuthListener: android.os.IIncidentAuthListener$Stub mBinder>;

        interfaceinvoke $r1.<android.os.IIncidentCompanion: void cancelAuthorization(android.os.IIncidentAuthListener)>($r2);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void deleteIncidentReports(android.net.Uri)
    {
        android.os.IncidentManager r0;
        java.lang.String r1, r2, $r7, $r12, $r17, $r21, r28;
        java.lang.StringBuilder $r3, $r8, $r13;
        java.lang.RuntimeException $r6, $r11, $r16, $r23, $r25;
        android.os.IIncidentCompanion $r18, $r19;
        android.content.Context $r20;
        android.os.RemoteException $r22, $r24;
        android.net.Uri r26;

        r0 := @this: android.os.IncidentManager;

        r26 := @parameter0: android.net.Uri;

        if r26 != null goto label04;

     label01:
        $r19 = specialinvoke r0.<android.os.IncidentManager: android.os.IIncidentCompanion getCompanionServiceLocked()>();

        $r20 = r0.<android.os.IncidentManager: android.content.Context mContext>;

        $r21 = virtualinvoke $r20.<android.content.Context: java.lang.String getPackageName()>();

        interfaceinvoke $r19.<android.os.IIncidentCompanion: void deleteAllIncidentReports(java.lang.String)>($r21);

     label02:
        goto label06;

     label03:
        $r24 := @caughtexception;

        $r25 = new java.lang.RuntimeException;

        specialinvoke $r25.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("System server or incidentd going down", $r24);

        throw $r25;

     label04:
        r28 = virtualinvoke r26.<android.net.Uri: java.lang.String getQueryParameter(java.lang.String)>("pkg");

        if r28 == null goto label10;

        r1 = virtualinvoke r26.<android.net.Uri: java.lang.String getQueryParameter(java.lang.String)>("receiver");

        if r1 == null goto label09;

        r2 = virtualinvoke r26.<android.net.Uri: java.lang.String getQueryParameter(java.lang.String)>("r");

        if r2 == null goto label08;

     label05:
        $r18 = specialinvoke r0.<android.os.IncidentManager: android.os.IIncidentCompanion getCompanionServiceLocked()>();

        interfaceinvoke $r18.<android.os.IIncidentCompanion: void deleteIncidentReports(java.lang.String,java.lang.String,java.lang.String)>(r28, r1, r2);

     label06:
        return;

     label07:
        $r22 := @caughtexception;

        $r23 = new java.lang.RuntimeException;

        specialinvoke $r23.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("System server or incidentd going down", $r22);

        throw $r23;

     label08:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid URI: No r parameter. ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r26);

        $r16 = new java.lang.RuntimeException;

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.String)>($r17);

        throw $r16;

     label09:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid URI: No receiver parameter. ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r26);

        $r11 = new java.lang.RuntimeException;

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String)>($r12);

        throw $r11;

     label10:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid URI: No pkg parameter. ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r26);

        $r6 = new java.lang.RuntimeException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7);

        throw $r6;

        catch android.os.RemoteException from label01 to label02 with label03;
        catch android.os.RemoteException from label05 to label06 with label07;
    }

    public void denyReport(android.net.Uri)
    {
        android.os.IncidentManager r0;
        android.os.IIncidentCompanion $r1;
        java.lang.String $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.net.Uri r5;

        r0 := @this: android.os.IncidentManager;

        r5 := @parameter0: android.net.Uri;

     label1:
        $r1 = specialinvoke r0.<android.os.IncidentManager: android.os.IIncidentCompanion getCompanionServiceLocked()>();

        $r2 = virtualinvoke r5.<android.net.Uri: java.lang.String toString()>();

        interfaceinvoke $r1.<android.os.IIncidentCompanion: void denyReport(java.lang.String)>($r2);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.os.IncidentManager$IncidentReport getIncidentReport(android.net.Uri)
    {
        android.os.IncidentManager r0;
        java.lang.String r1, r2, $r7, $r12, r17;
        java.lang.StringBuilder $r3, $r8;
        java.lang.RuntimeException $r6, $r11, $r15;
        android.os.IIncidentCompanion $r13;
        android.os.RemoteException $r14;
        android.net.Uri r16;
        android.os.IncidentManager$IncidentReport r18;

        r0 := @this: android.os.IncidentManager;

        r16 := @parameter0: android.net.Uri;

        r1 = virtualinvoke r16.<android.net.Uri: java.lang.String getQueryParameter(java.lang.String)>("r");

        if r1 != null goto label1;

        return null;

     label1:
        r17 = virtualinvoke r16.<android.net.Uri: java.lang.String getQueryParameter(java.lang.String)>("pkg");

        if r17 == null goto label6;

        r2 = virtualinvoke r16.<android.net.Uri: java.lang.String getQueryParameter(java.lang.String)>("receiver");

        if r2 == null goto label5;

     label2:
        $r13 = specialinvoke r0.<android.os.IncidentManager: android.os.IIncidentCompanion getCompanionServiceLocked()>();

        r18 = interfaceinvoke $r13.<android.os.IIncidentCompanion: android.os.IncidentManager$IncidentReport getIncidentReport(java.lang.String,java.lang.String,java.lang.String)>(r17, r2, r1);

     label3:
        return r18;

     label4:
        $r14 := @caughtexception;

        $r15 = new java.lang.RuntimeException;

        specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("System server or incidentd going down", $r14);

        throw $r15;

     label5:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid URI: No receiver parameter. ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r16);

        $r11 = new java.lang.RuntimeException;

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String)>($r12);

        throw $r11;

     label6:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid URI: No pkg parameter. ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r16);

        $r6 = new java.lang.RuntimeException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7);

        throw $r6;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public java.util.List getIncidentReportList(java.lang.String)
    {
        android.os.IncidentManager r0;
        int i0, i1;
        android.os.IIncidentCompanion $r2;
        android.content.Context $r3;
        java.lang.String $r4, $r7, r11;
        java.util.ArrayList $r5;
        java.lang.Object $r6;
        android.net.Uri $r8;
        android.os.RemoteException $r9;
        java.lang.RuntimeException $r10;
        java.util.List r12;

        r0 := @this: android.os.IncidentManager;

        r11 := @parameter0: java.lang.String;

     label1:
        $r2 = specialinvoke r0.<android.os.IncidentManager: android.os.IIncidentCompanion getCompanionServiceLocked()>();

        $r3 = r0.<android.os.IncidentManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getPackageName()>();

        r12 = interfaceinvoke $r2.<android.os.IIncidentCompanion: java.util.List getIncidentReportList(java.lang.String,java.lang.String)>($r4, r11);

     label2:
        i0 = interfaceinvoke r12.<java.util.List: int size()>();

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>(i0);

        i1 = 0;

     label3:
        if i1 >= i0 goto label4;

        $r6 = interfaceinvoke r12.<java.util.List: java.lang.Object get(int)>(i1);

        $r7 = (java.lang.String) $r6;

        $r8 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r7);

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

        i1 = i1 + 1;

        goto label3;

     label4:
        return $r5;

     label5:
        $r9 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("System server or incidentd going down", $r9);

        throw $r10;

        catch android.os.RemoteException from label1 to label2 with label5;
    }

    public java.util.List getPendingReports()
    {
        android.os.IncidentManager r0;
        int i0, i1;
        android.os.IIncidentCompanion $r2;
        java.util.ArrayList $r3;
        android.os.IncidentManager$PendingReport $r4;
        java.lang.Object $r5;
        java.lang.String $r6;
        android.net.Uri $r7;
        android.os.RemoteException $r8;
        java.lang.RuntimeException $r9;
        java.util.List r10;

        r0 := @this: android.os.IncidentManager;

     label1:
        $r2 = specialinvoke r0.<android.os.IncidentManager: android.os.IIncidentCompanion getCompanionServiceLocked()>();

        r10 = interfaceinvoke $r2.<android.os.IIncidentCompanion: java.util.List getPendingReports()>();

     label2:
        i0 = interfaceinvoke r10.<java.util.List: int size()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>(i0);

        i1 = 0;

     label3:
        if i1 >= i0 goto label4;

        $r4 = new android.os.IncidentManager$PendingReport;

        $r5 = interfaceinvoke r10.<java.util.List: java.lang.Object get(int)>(i1);

        $r6 = (java.lang.String) $r5;

        $r7 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r6);

        specialinvoke $r4.<android.os.IncidentManager$PendingReport: void <init>(android.net.Uri)>($r7);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        i1 = i1 + 1;

        goto label3;

     label4:
        return $r3;

     label5:
        $r8 := @caughtexception;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r8);

        throw $r9;

        catch android.os.RemoteException from label1 to label2 with label5;
    }

    public void lambda$getCompanionServiceLocked$1$IncidentManager()
    {
        android.os.IncidentManager r0;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: android.os.IncidentManager;

        r1 = r0.<android.os.IncidentManager: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<android.os.IncidentManager: android.os.IIncidentCompanion mCompanionService> = null;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void lambda$getIIncidentManagerLocked$0$IncidentManager()
    {
        android.os.IncidentManager r0;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: android.os.IncidentManager;

        r1 = r0.<android.os.IncidentManager: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<android.os.IncidentManager: android.os.IIncidentManager mIncidentService> = null;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void registerSection(int, java.lang.String, java.util.concurrent.Executor, android.os.IncidentManager$DumpCallback)
    {
        android.os.IncidentManager r0;
        int i0;
        android.os.IncidentManager$DumpCallback r1;
        java.util.concurrent.Executor $r4, r9;
        android.os.IIncidentDumpCallback$Stub $r6;
        android.os.RemoteException $r7;
        java.lang.String r8;
        android.os.IIncidentManager r10;
        java.lang.RuntimeException r11;

        r0 := @this: android.os.IncidentManager;

        i0 := @parameter0: int;

        r8 := @parameter1: java.lang.String;

        r9 := @parameter2: java.util.concurrent.Executor;

        r1 := @parameter3: android.os.IncidentManager$DumpCallback;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r9, "executor cannot be null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "callback cannot be null");

     label1:
        $r4 = staticinvoke <android.os.IncidentManager$DumpCallback: java.util.concurrent.Executor access$000(android.os.IncidentManager$DumpCallback)>(r1);

        if $r4 != null goto label7;

        staticinvoke <android.os.IncidentManager$DumpCallback: java.util.concurrent.Executor access$002(android.os.IncidentManager$DumpCallback,java.util.concurrent.Executor)>(r1, r9);

        staticinvoke <android.os.IncidentManager$DumpCallback: int access$102(android.os.IncidentManager$DumpCallback,int)>(r1, i0);

        r10 = specialinvoke r0.<android.os.IncidentManager: android.os.IIncidentManager getIIncidentManagerLocked()>();

     label2:
        if r10 != null goto label5;

     label3:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("IncidentManager", "registerSection can\'t find incident binder service");

     label4:
        return;

     label5:
        $r6 = r1.<android.os.IncidentManager$DumpCallback: android.os.IIncidentDumpCallback$Stub mBinder>;

        interfaceinvoke r10.<android.os.IIncidentManager: void registerSection(int,java.lang.String,android.os.IIncidentDumpCallback)>(i0, r8, $r6);

     label6:
        goto label9;

     label7:
        r11 = new java.lang.RuntimeException;

        specialinvoke r11.<java.lang.RuntimeException: void <init>(java.lang.String)>("Do not reuse DumpCallback objects when calling registerSection");

        throw r11;

     label8:
        $r7 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("IncidentManager", "registerSection failed", $r7);

     label9:
        return;

        catch android.os.RemoteException from label1 to label2 with label8;
        catch android.os.RemoteException from label3 to label4 with label8;
        catch android.os.RemoteException from label5 to label6 with label8;
        catch android.os.RemoteException from label7 to label8 with label8;
    }

    public void reportIncident(android.os.IncidentReportArgs)
    {
        android.os.IncidentManager r0;
        android.os.IncidentReportArgs r1;

        r0 := @this: android.os.IncidentManager;

        r1 := @parameter0: android.os.IncidentReportArgs;

        specialinvoke r0.<android.os.IncidentManager: void reportIncidentInternal(android.os.IncidentReportArgs)>(r1);

        return;
    }

    public void requestAuthorization(int, java.lang.String, int, android.os.IncidentManager$AuthListener)
    {
        android.os.IncidentManager r0;
        int i0, i1;
        java.lang.String r1;
        android.os.IncidentManager$AuthListener r2;
        android.content.Context $r3;
        java.util.concurrent.Executor $r4;

        r0 := @this: android.os.IncidentManager;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        r2 := @parameter3: android.os.IncidentManager$AuthListener;

        $r3 = r0.<android.os.IncidentManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.util.concurrent.Executor getMainExecutor()>();

        virtualinvoke r0.<android.os.IncidentManager: void requestAuthorization(int,java.lang.String,int,java.util.concurrent.Executor,android.os.IncidentManager$AuthListener)>(i0, r1, i1, $r4, r2);

        return;
    }

    public void requestAuthorization(int, java.lang.String, int, java.util.concurrent.Executor, android.os.IncidentManager$AuthListener)
    {
        android.os.IncidentManager r0;
        int i0, i1;
        java.util.concurrent.Executor r1, $r3;
        android.os.IncidentManager$AuthListener r2;
        android.os.IIncidentCompanion $r4;
        android.os.IIncidentAuthListener$Stub $r5;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7, r9;
        java.lang.String r8;

        r0 := @this: android.os.IncidentManager;

        i0 := @parameter0: int;

        r8 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        r1 := @parameter3: java.util.concurrent.Executor;

        r2 := @parameter4: android.os.IncidentManager$AuthListener;

     label1:
        $r3 = r2.<android.os.IncidentManager$AuthListener: java.util.concurrent.Executor mExecutor>;

        if $r3 != null goto label3;

        r2.<android.os.IncidentManager$AuthListener: java.util.concurrent.Executor mExecutor> = r1;

        $r4 = specialinvoke r0.<android.os.IncidentManager: android.os.IIncidentCompanion getCompanionServiceLocked()>();

        $r5 = r2.<android.os.IncidentManager$AuthListener: android.os.IIncidentAuthListener$Stub mBinder>;

        interfaceinvoke $r4.<android.os.IIncidentCompanion: void authorizeReport(int,java.lang.String,java.lang.String,java.lang.String,int,android.os.IIncidentAuthListener)>(i0, r8, null, null, i1, $r5);

     label2:
        return;

     label3:
        r9 = new java.lang.RuntimeException;

        specialinvoke r9.<java.lang.RuntimeException: void <init>(java.lang.String)>("Do not reuse AuthListener objects when calling requestAuthorization");

        throw r9;

     label4:
        $r6 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r6);

        throw $r7;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch android.os.RemoteException from label3 to label4 with label4;
    }

    public void unregisterSection(int)
    {
        android.os.IncidentManager r0;
        int i0;
        android.os.RemoteException $r1;
        android.os.IIncidentManager r2;

        r0 := @this: android.os.IncidentManager;

        i0 := @parameter0: int;

     label1:
        r2 = specialinvoke r0.<android.os.IncidentManager: android.os.IIncidentManager getIIncidentManagerLocked()>();

     label2:
        if r2 != null goto label5;

     label3:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("IncidentManager", "unregisterSection can\'t find incident binder service");

     label4:
        return;

     label5:
        interfaceinvoke r2.<android.os.IIncidentManager: void unregisterSection(int)>(i0);

     label6:
        goto label8;

     label7:
        $r1 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("IncidentManager", "unregisterSection failed", $r1);

     label8:
        return;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch android.os.RemoteException from label5 to label6 with label7;
    }

    public static void <clinit>()
    {
        <android.os.IncidentManager: java.lang.String URI_SCHEME> = "content";

        <android.os.IncidentManager: java.lang.String URI_PATH> = "/pending";

        <android.os.IncidentManager: java.lang.String URI_PARAM_TIMESTAMP> = "t";

        <android.os.IncidentManager: java.lang.String URI_PARAM_REPORT_ID> = "r";

        <android.os.IncidentManager: java.lang.String URI_PARAM_RECEIVER_CLASS> = "receiver";

        <android.os.IncidentManager: java.lang.String URI_PARAM_ID> = "id";

        <android.os.IncidentManager: java.lang.String URI_PARAM_FLAGS> = "flags";

        <android.os.IncidentManager: java.lang.String URI_PARAM_CALLING_PACKAGE> = "pkg";

        <android.os.IncidentManager: java.lang.String URI_AUTHORITY> = "android.os.IncidentManager";

        <android.os.IncidentManager: java.lang.String TAG> = "IncidentManager";

        <android.os.IncidentManager: int PRIVACY_POLICY_LOCAL> = 0;

        <android.os.IncidentManager: int PRIVACY_POLICY_EXPLICIT> = 100;

        <android.os.IncidentManager: int PRIVACY_POLICY_AUTO> = 200;

        <android.os.IncidentManager: int FLAG_CONFIRMATION_DIALOG> = 1;

        return;
    }
}
