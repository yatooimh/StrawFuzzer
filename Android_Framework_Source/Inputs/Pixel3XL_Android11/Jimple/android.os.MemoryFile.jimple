public class android.os.MemoryFile extends java.lang.Object
{
    private static java.lang.String TAG;
    private boolean mAllowPurging;
    private java.nio.ByteBuffer mMapping;
    private android.os.SharedMemory mSharedMemory;

    static void <clinit>()
    {
        <android.os.MemoryFile: java.lang.String TAG> = "MemoryFile";

        return;
    }

    public void <init>(java.lang.String, int) throws java.io.IOException
    {
        android.os.MemoryFile r0;
        int i0;
        java.nio.ByteBuffer $r1;
        java.lang.Throwable $r2;
        java.lang.String r4;
        android.os.SharedMemory r5;
        android.system.ErrnoException r7;

        r0 := @this: android.os.MemoryFile;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.os.MemoryFile: boolean mAllowPurging> = 0;

     label1:
        r5 = staticinvoke <android.os.SharedMemory: android.os.SharedMemory create(java.lang.String,int)>(r4, i0);

        r0.<android.os.MemoryFile: android.os.SharedMemory mSharedMemory> = r5;

        $r1 = virtualinvoke r5.<android.os.SharedMemory: java.nio.ByteBuffer mapReadWrite()>();

        r0.<android.os.MemoryFile: java.nio.ByteBuffer mMapping> = $r1;

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        r7 = (android.system.ErrnoException) $r2;

        virtualinvoke r7.<android.system.ErrnoException: java.io.IOException rethrowAsIOException()>();

     label4:
        return;

        catch android.system.ErrnoException from label1 to label2 with label3;
    }

    static android.os.SharedMemory access$200(android.os.MemoryFile)
    {
        android.os.MemoryFile r0;
        android.os.SharedMemory $r1;

        r0 := @parameter0: android.os.MemoryFile;

        $r1 = r0.<android.os.MemoryFile: android.os.SharedMemory mSharedMemory>;

        return $r1;
    }

    private void beginAccess() throws java.io.IOException
    {
        android.os.MemoryFile r0;
        boolean $z0, $z1;
        android.os.SharedMemory $r1;
        java.io.FileDescriptor $r2;
        java.io.IOException $r3;

        r0 := @this: android.os.MemoryFile;

        specialinvoke r0.<android.os.MemoryFile: void checkActive()>();

        $z0 = r0.<android.os.MemoryFile: boolean mAllowPurging>;

        if $z0 == 0 goto label2;

        $r1 = r0.<android.os.MemoryFile: android.os.SharedMemory mSharedMemory>;

        $r2 = virtualinvoke $r1.<android.os.SharedMemory: java.io.FileDescriptor getFileDescriptor()>();

        $z1 = staticinvoke <android.os.MemoryFile: boolean native_pin(java.io.FileDescriptor,boolean)>($r2, 1);

        if $z1 != 0 goto label1;

        goto label2;

     label1:
        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("MemoryFile has been purged");

        throw $r3;

     label2:
        return;
    }

    private void checkActive() throws java.io.IOException
    {
        android.os.MemoryFile r0;
        java.nio.ByteBuffer $r1;
        java.io.IOException $r2;

        r0 := @this: android.os.MemoryFile;

        $r1 = r0.<android.os.MemoryFile: java.nio.ByteBuffer mMapping>;

        if $r1 == null goto label1;

        return;

     label1:
        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("MemoryFile has been deactivated");

        throw $r2;
    }

    private void endAccess() throws java.io.IOException
    {
        android.os.MemoryFile r0;
        boolean $z0;
        android.os.SharedMemory $r1;
        java.io.FileDescriptor $r2;

        r0 := @this: android.os.MemoryFile;

        $z0 = r0.<android.os.MemoryFile: boolean mAllowPurging>;

        if $z0 == 0 goto label1;

        $r1 = r0.<android.os.MemoryFile: android.os.SharedMemory mSharedMemory>;

        $r2 = virtualinvoke $r1.<android.os.SharedMemory: java.io.FileDescriptor getFileDescriptor()>();

        staticinvoke <android.os.MemoryFile: boolean native_pin(java.io.FileDescriptor,boolean)>($r2, 0);

     label1:
        return;
    }

    public static int getSize(java.io.FileDescriptor) throws java.io.IOException
    {
        java.io.FileDescriptor r0;
        int $i0;

        r0 := @parameter0: java.io.FileDescriptor;

        $i0 = staticinvoke <android.os.MemoryFile: int native_get_size(java.io.FileDescriptor)>(r0);

        return $i0;
    }

    private static native int native_get_size(java.io.FileDescriptor) throws java.io.IOException;

    private static native boolean native_pin(java.io.FileDescriptor, boolean) throws java.io.IOException;

    public boolean allowPurging(boolean) throws java.io.IOException
    {
        android.os.MemoryFile r0;
        boolean z0, z1, z3;
        android.os.SharedMemory $r1;
        java.lang.Throwable $r2;
        java.io.FileDescriptor r3;

        r0 := @this: android.os.MemoryFile;

        z0 := @parameter0: boolean;

        entermonitor r0;

     label1:
        z1 = r0.<android.os.MemoryFile: boolean mAllowPurging>;

     label2:
        if z1 == z0 goto label7;

     label3:
        $r1 = r0.<android.os.MemoryFile: android.os.SharedMemory mSharedMemory>;

        r3 = virtualinvoke $r1.<android.os.SharedMemory: java.io.FileDescriptor getFileDescriptor()>();

     label4:
        if z0 != 0 goto label5;

        z3 = 1;

        goto label6;

     label5:
        z3 = 0;

     label6:
        staticinvoke <android.os.MemoryFile: boolean native_pin(java.io.FileDescriptor,boolean)>(r3, z3);

        r0.<android.os.MemoryFile: boolean mAllowPurging> = z0;

     label7:
        exitmonitor r0;

        return z1;

     label8:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label3 to label4 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    public void close()
    {
        android.os.MemoryFile r0;
        android.os.SharedMemory $r1;

        r0 := @this: android.os.MemoryFile;

        virtualinvoke r0.<android.os.MemoryFile: void deactivate()>();

        $r1 = r0.<android.os.MemoryFile: android.os.SharedMemory mSharedMemory>;

        virtualinvoke $r1.<android.os.SharedMemory: void close()>();

        return;
    }

    void deactivate()
    {
        android.os.MemoryFile r0;
        java.nio.ByteBuffer r1;

        r0 := @this: android.os.MemoryFile;

        r1 = r0.<android.os.MemoryFile: java.nio.ByteBuffer mMapping>;

        if r1 == null goto label1;

        staticinvoke <android.os.SharedMemory: void unmap(java.nio.ByteBuffer)>(r1);

        r0.<android.os.MemoryFile: java.nio.ByteBuffer mMapping> = null;

     label1:
        return;
    }

    public java.io.FileDescriptor getFileDescriptor() throws java.io.IOException
    {
        android.os.MemoryFile r0;
        android.os.SharedMemory $r1;
        java.io.FileDescriptor $r2;

        r0 := @this: android.os.MemoryFile;

        $r1 = r0.<android.os.MemoryFile: android.os.SharedMemory mSharedMemory>;

        $r2 = virtualinvoke $r1.<android.os.SharedMemory: java.io.FileDescriptor getFileDescriptor()>();

        return $r2;
    }

    public java.io.InputStream getInputStream()
    {
        android.os.MemoryFile r0;
        android.os.MemoryFile$MemoryInputStream $r1;

        r0 := @this: android.os.MemoryFile;

        $r1 = new android.os.MemoryFile$MemoryInputStream;

        specialinvoke $r1.<android.os.MemoryFile$MemoryInputStream: void <init>(android.os.MemoryFile,android.os.MemoryFile$1)>(r0, null);

        return $r1;
    }

    public java.io.OutputStream getOutputStream()
    {
        android.os.MemoryFile r0;
        android.os.MemoryFile$MemoryOutputStream $r1;

        r0 := @this: android.os.MemoryFile;

        $r1 = new android.os.MemoryFile$MemoryOutputStream;

        specialinvoke $r1.<android.os.MemoryFile$MemoryOutputStream: void <init>(android.os.MemoryFile,android.os.MemoryFile$1)>(r0, null);

        return $r1;
    }

    public boolean isPurgingAllowed()
    {
        android.os.MemoryFile r0;
        boolean $z0;

        r0 := @this: android.os.MemoryFile;

        $z0 = r0.<android.os.MemoryFile: boolean mAllowPurging>;

        return $z0;
    }

    public int length()
    {
        android.os.MemoryFile r0;
        android.os.SharedMemory $r1;
        int $i0;

        r0 := @this: android.os.MemoryFile;

        $r1 = r0.<android.os.MemoryFile: android.os.SharedMemory mSharedMemory>;

        $i0 = virtualinvoke $r1.<android.os.SharedMemory: int getSize()>();

        return $i0;
    }

    public int readBytes(byte[], int, int, int) throws java.io.IOException
    {
        android.os.MemoryFile r0;
        int i0, i1, i2;
        java.nio.ByteBuffer $r1, $r3;
        java.lang.Throwable $r5;
        byte[] r6;

        r0 := @this: android.os.MemoryFile;

        r6 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        specialinvoke r0.<android.os.MemoryFile: void beginAccess()>();

     label1:
        $r1 = r0.<android.os.MemoryFile: java.nio.ByteBuffer mMapping>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i0);

        $r3 = r0.<android.os.MemoryFile: java.nio.ByteBuffer mMapping>;

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r6, i1, i2);

     label2:
        specialinvoke r0.<android.os.MemoryFile: void endAccess()>();

        return i2;

     label3:
        $r5 := @caughtexception;

        specialinvoke r0.<android.os.MemoryFile: void endAccess()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void writeBytes(byte[], int, int, int) throws java.io.IOException
    {
        android.os.MemoryFile r0;
        int i0, i1, i2;
        java.nio.ByteBuffer $r1, $r3;
        java.lang.Throwable $r5;
        byte[] r6;

        r0 := @this: android.os.MemoryFile;

        r6 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        specialinvoke r0.<android.os.MemoryFile: void beginAccess()>();

     label1:
        $r1 = r0.<android.os.MemoryFile: java.nio.ByteBuffer mMapping>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i1);

        $r3 = r0.<android.os.MemoryFile: java.nio.ByteBuffer mMapping>;

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>(r6, i0, i2);

     label2:
        specialinvoke r0.<android.os.MemoryFile: void endAccess()>();

        return;

     label3:
        $r5 := @caughtexception;

        specialinvoke r0.<android.os.MemoryFile: void endAccess()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
