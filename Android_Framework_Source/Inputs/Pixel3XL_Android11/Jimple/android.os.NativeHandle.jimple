public final class android.os.NativeHandle extends java.lang.Object implements java.io.Closeable
{
    private java.io.FileDescriptor[] mFds;
    private int[] mInts;
    private boolean mOwn;

    public void <init>()
    {
        android.os.NativeHandle r0;
        int[] $r1;
        java.io.FileDescriptor[] $r2;

        r0 := @this: android.os.NativeHandle;

        $r2 = newarray (java.io.FileDescriptor)[0];

        $r1 = newarray (int)[0];

        specialinvoke r0.<android.os.NativeHandle: void <init>(java.io.FileDescriptor[],int[],boolean)>($r2, $r1, 0);

        return;
    }

    public void <init>(java.io.FileDescriptor, boolean)
    {
        android.os.NativeHandle r0;
        java.io.FileDescriptor r1;
        boolean z0;
        java.io.FileDescriptor[] $r2;
        int[] $r3;

        r0 := @this: android.os.NativeHandle;

        r1 := @parameter0: java.io.FileDescriptor;

        z0 := @parameter1: boolean;

        $r2 = newarray (java.io.FileDescriptor)[1];

        $r2[0] = r1;

        $r3 = newarray (int)[0];

        specialinvoke r0.<android.os.NativeHandle: void <init>(java.io.FileDescriptor[],int[],boolean)>($r2, $r3, z0);

        return;
    }

    private void <init>(int[], int[], boolean)
    {
        android.os.NativeHandle r0;
        int[] r1, r2;
        boolean z0;
        java.io.FileDescriptor[] $r3;

        r0 := @this: android.os.NativeHandle;

        r1 := @parameter0: int[];

        r2 := @parameter1: int[];

        z0 := @parameter2: boolean;

        $r3 = staticinvoke <android.os.NativeHandle: java.io.FileDescriptor[] createFileDescriptorArray(int[])>(r1);

        specialinvoke r0.<android.os.NativeHandle: void <init>(java.io.FileDescriptor[],int[],boolean)>($r3, r2, z0);

        return;
    }

    public void <init>(java.io.FileDescriptor[], int[], boolean)
    {
        android.os.NativeHandle r0;
        java.io.FileDescriptor[] r1, $r4;
        int[] r2, $r6;
        boolean z0;
        java.lang.Object $r3, $r5;

        r0 := @this: android.os.NativeHandle;

        r1 := @parameter0: java.io.FileDescriptor[];

        r2 := @parameter1: int[];

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.os.NativeHandle: boolean mOwn> = 0;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (java.io.FileDescriptor[]) $r3;

        r0.<android.os.NativeHandle: java.io.FileDescriptor[] mFds> = $r4;

        $r5 = virtualinvoke r2.<java.lang.Object: java.lang.Object clone()>();

        $r6 = (int[]) $r5;

        r0.<android.os.NativeHandle: int[] mInts> = $r6;

        r0.<android.os.NativeHandle: boolean mOwn> = z0;

        return;
    }

    private void checkOpen()
    {
        android.os.NativeHandle r0;
        java.io.FileDescriptor[] $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: android.os.NativeHandle;

        $r1 = r0.<android.os.NativeHandle: java.io.FileDescriptor[] mFds>;

        if $r1 == null goto label1;

        return;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("NativeHandle is invalidated after close.");

        throw $r2;
    }

    private static java.io.FileDescriptor[] createFileDescriptorArray(int[])
    {
        int[] r0;
        java.io.FileDescriptor[] r1;
        int $i0, $i1, $i2, i3;
        java.io.FileDescriptor $r3;

        r0 := @parameter0: int[];

        $i0 = lengthof r0;

        r1 = newarray (java.io.FileDescriptor)[$i0];

        i3 = 0;

     label1:
        $i1 = lengthof r0;

        if i3 >= $i1 goto label2;

        $r3 = new java.io.FileDescriptor;

        specialinvoke $r3.<java.io.FileDescriptor: void <init>()>();

        $i2 = r0[i3];

        virtualinvoke $r3.<java.io.FileDescriptor: void setInt$(int)>($i2);

        r1[i3] = $r3;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r1;
    }

    private int[] getFdsAsIntArray()
    {
        android.os.NativeHandle r0;
        int i0, $i1, i2;
        int[] r1;
        java.io.FileDescriptor[] $r2, $r3;
        java.io.FileDescriptor $r4;

        r0 := @this: android.os.NativeHandle;

        specialinvoke r0.<android.os.NativeHandle: void checkOpen()>();

        $r2 = r0.<android.os.NativeHandle: java.io.FileDescriptor[] mFds>;

        i0 = lengthof $r2;

        r1 = newarray (int)[i0];

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r3 = r0.<android.os.NativeHandle: java.io.FileDescriptor[] mFds>;

        $r4 = $r3[i2];

        $i1 = virtualinvoke $r4.<java.io.FileDescriptor: int getInt$()>();

        r1[i2] = $i1;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    public void close() throws java.io.IOException
    {
        android.os.NativeHandle r0;
        int i0, i1;
        boolean $z0;
        java.io.FileDescriptor $r1;
        java.lang.Throwable $r2;
        java.io.FileDescriptor[] r4;
        android.system.ErrnoException r6;

        r0 := @this: android.os.NativeHandle;

        specialinvoke r0.<android.os.NativeHandle: void checkOpen()>();

        $z0 = r0.<android.os.NativeHandle: boolean mOwn>;

        if $z0 == 0 goto label9;

     label1:
        r4 = r0.<android.os.NativeHandle: java.io.FileDescriptor[] mFds>;

        i0 = lengthof r4;

     label2:
        i1 = 0;

     label3:
        if i1 >= i0 goto label6;

     label4:
        $r1 = r4[i1];

        staticinvoke <android.system.Os: void close(java.io.FileDescriptor)>($r1);

     label5:
        i1 = i1 + 1;

        goto label3;

     label6:
        goto label8;

     label7:
        $r2 := @caughtexception;

        r6 = (android.system.ErrnoException) $r2;

        virtualinvoke r6.<android.system.ErrnoException: java.io.IOException rethrowAsIOException()>();

     label8:
        r0.<android.os.NativeHandle: boolean mOwn> = 0;

     label9:
        r0.<android.os.NativeHandle: java.io.FileDescriptor[] mFds> = null;

        r0.<android.os.NativeHandle: int[] mInts> = null;

        return;

        catch android.system.ErrnoException from label1 to label2 with label7;
        catch android.system.ErrnoException from label4 to label5 with label7;
    }

    public android.os.NativeHandle dup() throws java.io.IOException
    {
        android.os.NativeHandle r0, r13;
        java.io.FileDescriptor[] r1, $r2, $r3, $r6;
        int $i0, $i1, $i2, $i3, i4;
        int[] $r5;
        java.io.FileDescriptor $r7, r12;
        java.lang.Throwable $r8;
        android.system.ErrnoException r14;

        r0 := @this: android.os.NativeHandle;

        $r2 = r0.<android.os.NativeHandle: java.io.FileDescriptor[] mFds>;

        $i0 = lengthof $r2;

        r1 = newarray (java.io.FileDescriptor)[$i0];

        i4 = 0;

     label1:
        $r3 = r0.<android.os.NativeHandle: java.io.FileDescriptor[] mFds>;

        $i1 = lengthof $r3;

        if i4 >= $i1 goto label3;

        r12 = new java.io.FileDescriptor;

        specialinvoke r12.<java.io.FileDescriptor: void <init>()>();

        $r6 = r0.<android.os.NativeHandle: java.io.FileDescriptor[] mFds>;

        $r7 = $r6[i4];

        $i2 = <android.system.OsConstants: int F_DUPFD_CLOEXEC>;

        $i3 = staticinvoke <android.system.Os: int fcntlInt(java.io.FileDescriptor,int,int)>($r7, $i2, 0);

        virtualinvoke r12.<java.io.FileDescriptor: void setInt$(int)>($i3);

     label2:
        r1[i4] = r12;

        i4 = i4 + 1;

        goto label1;

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

        r14 = (android.system.ErrnoException) $r8;

        virtualinvoke r14.<android.system.ErrnoException: java.io.IOException rethrowAsIOException()>();

     label5:
        r13 = new android.os.NativeHandle;

        $r5 = r0.<android.os.NativeHandle: int[] mInts>;

        specialinvoke r13.<android.os.NativeHandle: void <init>(java.io.FileDescriptor[],int[],boolean)>(r1, $r5, 1);

        return r13;

        catch android.system.ErrnoException from label1 to label2 with label4;
    }

    public java.io.FileDescriptor getFileDescriptor()
    {
        android.os.NativeHandle r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;
        java.io.FileDescriptor[] $r2;
        java.io.FileDescriptor $r3;

        r0 := @this: android.os.NativeHandle;

        specialinvoke r0.<android.os.NativeHandle: void checkOpen()>();

        $z0 = virtualinvoke r0.<android.os.NativeHandle: boolean hasSingleFileDescriptor()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<android.os.NativeHandle: java.io.FileDescriptor[] mFds>;

        $r3 = $r2[0];

        return $r3;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("NativeHandle is not single file descriptor. Contents must be retreived through getFileDescriptors and getInts.");

        throw $r1;
    }

    public java.io.FileDescriptor[] getFileDescriptors()
    {
        android.os.NativeHandle r0;
        java.io.FileDescriptor[] $r1;

        r0 := @this: android.os.NativeHandle;

        specialinvoke r0.<android.os.NativeHandle: void checkOpen()>();

        $r1 = r0.<android.os.NativeHandle: java.io.FileDescriptor[] mFds>;

        return $r1;
    }

    public int[] getInts()
    {
        android.os.NativeHandle r0;
        int[] $r1;

        r0 := @this: android.os.NativeHandle;

        specialinvoke r0.<android.os.NativeHandle: void checkOpen()>();

        $r1 = r0.<android.os.NativeHandle: int[] mInts>;

        return $r1;
    }

    public boolean hasSingleFileDescriptor()
    {
        android.os.NativeHandle r0;
        int i0, $i1;
        java.io.FileDescriptor[] $r1;
        int[] $r2;
        boolean z0;

        r0 := @this: android.os.NativeHandle;

        specialinvoke r0.<android.os.NativeHandle: void checkOpen()>();

        $r1 = r0.<android.os.NativeHandle: java.io.FileDescriptor[] mFds>;

        i0 = lengthof $r1;

        z0 = 1;

        if i0 != 1 goto label1;

        $r2 = r0.<android.os.NativeHandle: int[] mInts>;

        $i1 = lengthof $r2;

        if $i1 != 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }
}
