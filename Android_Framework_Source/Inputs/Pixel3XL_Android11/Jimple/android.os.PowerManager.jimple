public final class android.os.PowerManager extends java.lang.Object
{
    public static final int ACQUIRE_CAUSES_WAKEUP;
    public static final java.lang.String ACTION_DEVICE_IDLE_MODE_CHANGED;
    public static final java.lang.String ACTION_LIGHT_DEVICE_IDLE_MODE_CHANGED;
    public static final java.lang.String ACTION_POWER_SAVE_MODE_CHANGED;
    public static final java.lang.String ACTION_POWER_SAVE_MODE_CHANGED_INTERNAL;
    public static final java.lang.String ACTION_POWER_SAVE_MODE_CHANGING;
    public static final java.lang.String ACTION_POWER_SAVE_TEMP_WHITELIST_CHANGED;
    public static final java.lang.String ACTION_POWER_SAVE_WHITELIST_CHANGED;
    public static final int BRIGHTNESS_CONSTRAINT_TYPE_DEFAULT;
    public static final int BRIGHTNESS_CONSTRAINT_TYPE_DEFAULT_VR;
    public static final int BRIGHTNESS_CONSTRAINT_TYPE_DIM;
    public static final int BRIGHTNESS_CONSTRAINT_TYPE_DOZE;
    public static final int BRIGHTNESS_CONSTRAINT_TYPE_MAXIMUM;
    public static final int BRIGHTNESS_CONSTRAINT_TYPE_MAXIMUM_VR;
    public static final int BRIGHTNESS_CONSTRAINT_TYPE_MINIMUM;
    public static final int BRIGHTNESS_CONSTRAINT_TYPE_MINIMUM_VR;
    public static final int BRIGHTNESS_DEFAULT;
    public static final int BRIGHTNESS_INVALID;
    public static final float BRIGHTNESS_INVALID_FLOAT;
    public static final float BRIGHTNESS_MAX;
    public static final float BRIGHTNESS_MIN;
    public static final int BRIGHTNESS_OFF;
    public static final float BRIGHTNESS_OFF_FLOAT;
    public static final int BRIGHTNESS_ON;
    private static final java.lang.String CACHE_KEY_IS_INTERACTIVE_PROPERTY;
    private static final java.lang.String CACHE_KEY_IS_POWER_SAVE_MODE_PROPERTY;
    public static final int DOZE_WAKE_LOCK;
    public static final int DRAW_WAKE_LOCK;
    public static final java.lang.String EXTRA_POWER_SAVE_MODE;
    public static final int FULL_WAKE_LOCK;
    public static final int GO_TO_SLEEP_FLAG_NO_DOZE;
    public static final int GO_TO_SLEEP_REASON_ACCESSIBILITY;
    public static final int GO_TO_SLEEP_REASON_APPLICATION;
    public static final int GO_TO_SLEEP_REASON_DEVICE_ADMIN;
    public static final int GO_TO_SLEEP_REASON_FORCE_SUSPEND;
    public static final int GO_TO_SLEEP_REASON_HDMI;
    public static final int GO_TO_SLEEP_REASON_INATTENTIVE;
    public static final int GO_TO_SLEEP_REASON_LID_SWITCH;
    public static final int GO_TO_SLEEP_REASON_MAX;
    public static final int GO_TO_SLEEP_REASON_MIN;
    public static final int GO_TO_SLEEP_REASON_POWER_BUTTON;
    public static final int GO_TO_SLEEP_REASON_QUIESCENT;
    public static final int GO_TO_SLEEP_REASON_SLEEP_BUTTON;
    public static final int GO_TO_SLEEP_REASON_TIMEOUT;
    public static final int LOCATION_MODE_ALL_DISABLED_WHEN_SCREEN_OFF;
    public static final int LOCATION_MODE_FOREGROUND_ONLY;
    public static final int LOCATION_MODE_GPS_DISABLED_WHEN_SCREEN_OFF;
    public static final int LOCATION_MODE_NO_CHANGE;
    public static final int LOCATION_MODE_THROTTLE_REQUESTS_WHEN_SCREEN_OFF;
    private static final int MAX_CACHE_ENTRIES;
    public static final int MAX_LOCATION_MODE;
    private static final int MINIMUM_HEADROOM_TIME_MILLIS;
    public static final int MIN_LOCATION_MODE;
    public static final int ON_AFTER_RELEASE;
    public static final int PARTIAL_WAKE_LOCK;
    public static final int POWER_SAVE_MODE_TRIGGER_DYNAMIC;
    public static final int POWER_SAVE_MODE_TRIGGER_PERCENTAGE;
    public static final int PRE_IDLE_TIMEOUT_MODE_LONG;
    public static final int PRE_IDLE_TIMEOUT_MODE_NORMAL;
    public static final int PRE_IDLE_TIMEOUT_MODE_SHORT;
    public static final int PROXIMITY_SCREEN_OFF_WAKE_LOCK;
    public static final java.lang.String REBOOT_QUIESCENT;
    public static final java.lang.String REBOOT_RECOVERY;
    public static final java.lang.String REBOOT_RECOVERY_UPDATE;
    public static final java.lang.String REBOOT_REQUESTED_BY_DEVICE_OWNER;
    public static final java.lang.String REBOOT_SAFE_MODE;
    public static final java.lang.String REBOOT_USERSPACE;
    public static final int RELEASE_FLAG_TIMEOUT;
    public static final int RELEASE_FLAG_WAIT_FOR_NO_PROXIMITY;
    public static final int SCREEN_BRIGHT_WAKE_LOCK;
    public static final int SCREEN_DIM_WAKE_LOCK;
    public static final java.lang.String SHUTDOWN_BATTERY_THERMAL_STATE;
    public static final java.lang.String SHUTDOWN_LOW_BATTERY;
    public static final int SHUTDOWN_REASON_BATTERY_THERMAL;
    public static final int SHUTDOWN_REASON_LOW_BATTERY;
    public static final int SHUTDOWN_REASON_REBOOT;
    public static final int SHUTDOWN_REASON_SHUTDOWN;
    public static final int SHUTDOWN_REASON_THERMAL_SHUTDOWN;
    public static final int SHUTDOWN_REASON_UNKNOWN;
    public static final int SHUTDOWN_REASON_USER_REQUESTED;
    public static final java.lang.String SHUTDOWN_THERMAL_STATE;
    public static final java.lang.String SHUTDOWN_USER_REQUESTED;
    private static final java.lang.String TAG;
    public static final int THERMAL_STATUS_CRITICAL;
    public static final int THERMAL_STATUS_EMERGENCY;
    public static final int THERMAL_STATUS_LIGHT;
    public static final int THERMAL_STATUS_MODERATE;
    public static final int THERMAL_STATUS_NONE;
    public static final int THERMAL_STATUS_SEVERE;
    public static final int THERMAL_STATUS_SHUTDOWN;
    public static final int UNIMPORTANT_FOR_LOGGING;
    public static final int USER_ACTIVITY_EVENT_ACCESSIBILITY;
    public static final int USER_ACTIVITY_EVENT_ATTENTION;
    public static final int USER_ACTIVITY_EVENT_BUTTON;
    public static final int USER_ACTIVITY_EVENT_OTHER;
    public static final int USER_ACTIVITY_EVENT_TOUCH;
    public static final int USER_ACTIVITY_FLAG_INDIRECT;
    public static final int USER_ACTIVITY_FLAG_NO_CHANGE_LIGHTS;
    public static final int WAKE_LOCK_LEVEL_MASK;
    public static final int WAKE_REASON_APPLICATION;
    public static final int WAKE_REASON_CAMERA_LAUNCH;
    public static final int WAKE_REASON_GESTURE;
    public static final int WAKE_REASON_HDMI;
    public static final int WAKE_REASON_LID;
    public static final int WAKE_REASON_PLUGGED_IN;
    public static final int WAKE_REASON_POWER_BUTTON;
    public static final int WAKE_REASON_UNKNOWN;
    public static final int WAKE_REASON_WAKE_KEY;
    public static final int WAKE_REASON_WAKE_MOTION;
    final android.content.Context mContext;
    final android.os.Handler mHandler;
    private android.app.PropertyInvalidatedCache mInteractiveCache;
    private final java.util.concurrent.atomic.AtomicLong mLastHeadroomUpdate;
    private final android.util.ArrayMap mListenerMap;
    private android.app.PropertyInvalidatedCache mPowerSaveModeCache;
    private android.os.PowerWhitelistManager mPowerWhitelistManager;
    final android.os.IPowerManager mService;
    final android.os.IThermalService mThermalService;

    public void <init>(android.content.Context, android.os.IPowerManager, android.os.IThermalService, android.os.Handler)
    {
        android.os.PowerManager r0;
        android.content.Context r1;
        android.os.IPowerManager r2;
        android.os.IThermalService r3;
        android.os.Handler r4;
        android.os.PowerManager$1 $r5;
        android.os.PowerManager$2 $r6;
        android.util.ArrayMap $r7;
        java.util.concurrent.atomic.AtomicLong $r8;

        r0 := @this: android.os.PowerManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.IPowerManager;

        r3 := @parameter2: android.os.IThermalService;

        r4 := @parameter3: android.os.Handler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = new android.os.PowerManager$1;

        specialinvoke $r5.<android.os.PowerManager$1: void <init>(android.os.PowerManager,int,java.lang.String)>(r0, 1, "cache_key.is_power_save_mode");

        r0.<android.os.PowerManager: android.app.PropertyInvalidatedCache mPowerSaveModeCache> = $r5;

        $r6 = new android.os.PowerManager$2;

        specialinvoke $r6.<android.os.PowerManager$2: void <init>(android.os.PowerManager,int,java.lang.String)>(r0, 1, "cache_key.is_interactive");

        r0.<android.os.PowerManager: android.app.PropertyInvalidatedCache mInteractiveCache> = $r6;

        $r7 = new android.util.ArrayMap;

        specialinvoke $r7.<android.util.ArrayMap: void <init>()>();

        r0.<android.os.PowerManager: android.util.ArrayMap mListenerMap> = $r7;

        $r8 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r8.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        r0.<android.os.PowerManager: java.util.concurrent.atomic.AtomicLong mLastHeadroomUpdate> = $r8;

        r0.<android.os.PowerManager: android.content.Context mContext> = r1;

        r0.<android.os.PowerManager: android.os.IPowerManager mService> = r2;

        r0.<android.os.PowerManager: android.os.IThermalService mThermalService> = r3;

        r0.<android.os.PowerManager: android.os.Handler mHandler> = r4;

        return;
    }

    private android.os.PowerWhitelistManager getPowerWhitelistManager()
    {
        android.os.PowerManager r0;
        android.os.PowerWhitelistManager $r1, $r2, $r5;
        android.content.Context $r3;
        java.lang.Object $r4;

        r0 := @this: android.os.PowerManager;

        $r1 = r0.<android.os.PowerManager: android.os.PowerWhitelistManager mPowerWhitelistManager>;

        if $r1 != null goto label1;

        $r3 = r0.<android.os.PowerManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/PowerWhitelistManager;");

        $r5 = (android.os.PowerWhitelistManager) $r4;

        r0.<android.os.PowerManager: android.os.PowerWhitelistManager mPowerWhitelistManager> = $r5;

     label1:
        $r2 = r0.<android.os.PowerManager: android.os.PowerWhitelistManager mPowerWhitelistManager>;

        return $r2;
    }

    public static void invalidateIsInteractiveCaches()
    {
        staticinvoke <android.app.PropertyInvalidatedCache: void invalidateCache(java.lang.String)>("cache_key.is_interactive");

        return;
    }

    public static void invalidatePowerSaveModeCaches()
    {
        staticinvoke <android.app.PropertyInvalidatedCache: void invalidateCache(java.lang.String)>("cache_key.is_power_save_mode");

        return;
    }

    public static boolean isRebootingUserspaceSupportedImpl()
    {
        java.util.Optional $r0;
        java.lang.Boolean $r1, $r3;
        java.lang.Object $r2;
        boolean $z0;

        $r0 = staticinvoke <android.sysprop.InitProperties: java.util.Optional is_userspace_reboot_supported()>();

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r2 = virtualinvoke $r0.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>($r1);

        $r3 = (java.lang.Boolean) $r2;

        $z0 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public static java.lang.String locationPowerSaveModeToString(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        if i0 == 0 goto label5;

        if i0 == 1 goto label4;

        if i0 == 2 goto label3;

        if i0 == 3 goto label2;

        if i0 == 4 goto label1;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;

     label1:
        return "THROTTLE_REQUESTS_WHEN_SCREEN_OFF";

     label2:
        return "FOREGROUND_ONLY";

     label3:
        return "ALL_DISABLED_WHEN_SCREEN_OFF";

     label4:
        return "GPS_DISABLED_WHEN_SCREEN_OFF";

     label5:
        return "NO_CHANGE";
    }

    public static java.lang.String sleepReasonToString(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label11;
            case 1: goto label10;
            case 2: goto label09;
            case 3: goto label08;
            case 4: goto label07;
            case 5: goto label06;
            case 6: goto label05;
            case 7: goto label04;
            case 8: goto label03;
            case 9: goto label02;
            default: goto label01;
        };

     label01:
        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;

     label02:
        return "inattentive";

     label03:
        return "force_suspend";

     label04:
        return "accessibility";

     label05:
        return "sleep_button";

     label06:
        return "hdmi";

     label07:
        return "power_button";

     label08:
        return "lid_switch";

     label09:
        return "timeout";

     label10:
        return "device_admin";

     label11:
        return "application";
    }

    public static void validateWakeLockParameters(int, java.lang.String)
    {
        java.lang.String r0;
        java.lang.IllegalArgumentException $r1, $r2;
        int i0, i1;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        i1 = 65535 & i0;

        if i1 == 1 goto label2;

        if i1 == 6 goto label2;

        if i1 == 10 goto label2;

        if i1 == 26 goto label2;

        if i1 == 32 goto label2;

        if i1 == 64 goto label2;

        if i1 != 128 goto label1;

        goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must specify a valid wake lock level.");

        throw $r2;

     label2:
        if r0 == null goto label3;

        return;

     label3:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The tag must not be null.");

        throw $r1;
    }

    public static java.lang.String wakeReasonToString(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label11;
            case 1: goto label10;
            case 2: goto label09;
            case 3: goto label08;
            case 4: goto label07;
            case 5: goto label06;
            case 6: goto label05;
            case 7: goto label04;
            case 8: goto label03;
            case 9: goto label02;
            default: goto label01;
        };

     label01:
        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;

     label02:
        return "WAKE_REASON_LID";

     label03:
        return "WAKE_REASON_HDMI";

     label04:
        return "WAKE_REASON_WAKE_MOTION";

     label05:
        return "WAKE_REASON_WAKE_KEY";

     label06:
        return "WAKE_REASON_CAMERA_LAUNCH";

     label07:
        return "WAKE_REASON_GESTURE";

     label08:
        return "WAKE_REASON_PLUGGED_IN";

     label09:
        return "WAKE_REASON_APPLICATION";

     label10:
        return "WAKE_REASON_POWER_BUTTON";

     label11:
        return "WAKE_REASON_UNKNOWN";
    }

    public void addThermalStatusListener(android.os.PowerManager$OnThermalStatusChangedListener)
    {
        android.os.PowerManager r0;
        android.os.PowerManager$OnThermalStatusChangedListener r1;
        android.content.Context $r3;
        java.util.concurrent.Executor $r4;

        r0 := @this: android.os.PowerManager;

        r1 := @parameter0: android.os.PowerManager$OnThermalStatusChangedListener;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "listener cannot be null");

        $r3 = r0.<android.os.PowerManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.util.concurrent.Executor getMainExecutor()>();

        virtualinvoke r0.<android.os.PowerManager: void addThermalStatusListener(java.util.concurrent.Executor,android.os.PowerManager$OnThermalStatusChangedListener)>($r4, r1);

        return;
    }

    public void addThermalStatusListener(java.util.concurrent.Executor, android.os.PowerManager$OnThermalStatusChangedListener)
    {
        android.os.PowerManager r0;
        android.os.PowerManager$OnThermalStatusChangedListener r1;
        boolean z0, $z1, $z2;
        android.util.ArrayMap $r5, $r12;
        java.lang.StringBuilder $r6;
        java.lang.String $r9;
        android.os.PowerManager$3 $r10;
        android.os.IThermalService $r11;
        android.os.RemoteException $r14;
        java.lang.RuntimeException $r15, r18;
        java.util.concurrent.Executor r16;

        r0 := @this: android.os.PowerManager;

        r16 := @parameter0: java.util.concurrent.Executor;

        r1 := @parameter1: android.os.PowerManager$OnThermalStatusChangedListener;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "listener cannot be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r16, "executor cannot be null");

        $r5 = r0.<android.os.PowerManager: android.util.ArrayMap mListenerMap>;

        z0 = virtualinvoke $r5.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r1);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Listener already registered: ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $z1 = z0 ^ 1;

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, $r9);

        $r10 = new android.os.PowerManager$3;

        specialinvoke $r10.<android.os.PowerManager$3: void <init>(android.os.PowerManager,java.util.concurrent.Executor,android.os.PowerManager$OnThermalStatusChangedListener)>(r0, r16, r1);

     label1:
        $r11 = r0.<android.os.PowerManager: android.os.IThermalService mThermalService>;

        $z2 = interfaceinvoke $r11.<android.os.IThermalService: boolean registerThermalStatusListener(android.os.IThermalStatusListener)>($r10);

        if $z2 == 0 goto label3;

        $r12 = r0.<android.os.PowerManager: android.util.ArrayMap mListenerMap>;

        virtualinvoke $r12.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r10);

     label2:
        return;

     label3:
        r18 = new java.lang.RuntimeException;

        specialinvoke r18.<java.lang.RuntimeException: void <init>(java.lang.String)>("Listener failed to set");

        throw r18;

     label4:
        $r14 := @caughtexception;

        $r15 = virtualinvoke $r14.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r15;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch android.os.RemoteException from label3 to label4 with label4;
    }

    public void boostScreenBrightness(long)
    {
        android.os.PowerManager r0;
        long l0;
        android.os.IPowerManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.os.PowerManager;

        l0 := @parameter0: long;

     label1:
        $r2 = r0.<android.os.PowerManager: android.os.IPowerManager mService>;

        interfaceinvoke $r2.<android.os.IPowerManager: void boostScreenBrightness(long)>(l0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void dream(long)
    {
        android.os.PowerManager r0;
        long l0;
        android.content.Context $r1;

        r0 := @this: android.os.PowerManager;

        l0 := @parameter0: long;

        $r1 = r0.<android.os.PowerManager: android.content.Context mContext>;

        staticinvoke <android.service.dreams.Sandman: void startDreamByUserRequest(android.content.Context)>($r1);

        return;
    }

    public boolean forceSuspend()
    {
        android.os.PowerManager r0;
        boolean z0;
        android.os.IPowerManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.os.PowerManager;

     label1:
        $r2 = r0.<android.os.PowerManager: android.os.IPowerManager mService>;

        z0 = interfaceinvoke $r2.<android.os.IPowerManager: boolean forceSuspend()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public float getBrightnessConstraint(int)
    {
        android.os.PowerManager r0;
        int i0;
        float f0;
        android.os.IPowerManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.os.PowerManager;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.os.PowerManager: android.os.IPowerManager mService>;

        f0 = interfaceinvoke $r2.<android.os.IPowerManager: float getBrightnessConstraint(int)>(i0);

     label2:
        return f0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getCurrentThermalStatus()
    {
        android.os.PowerManager r0;
        int i0;
        android.os.IThermalService $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.os.PowerManager;

     label1:
        $r2 = r0.<android.os.PowerManager: android.os.IThermalService mThermalService>;

        i0 = interfaceinvoke $r2.<android.os.IThermalService: int getCurrentThermalStatus()>();

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getDefaultScreenBrightnessForVrSetting()
    {
        android.os.PowerManager r0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        int $i0;

        r0 := @this: android.os.PowerManager;

        $r1 = r0.<android.os.PowerManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $i0 = virtualinvoke $r2.<android.content.res.Resources: int getInteger(int)>(17694887);

        return $i0;
    }

    public int getDefaultScreenBrightnessSetting()
    {
        android.os.PowerManager r0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        int $i0;

        r0 := @this: android.os.PowerManager;

        $r1 = r0.<android.os.PowerManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $i0 = virtualinvoke $r2.<android.content.res.Resources: int getInteger(int)>(17694890);

        return $i0;
    }

    public int getLastShutdownReason()
    {
        android.os.PowerManager r0;
        int i0;
        android.os.IPowerManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.os.PowerManager;

     label1:
        $r2 = r0.<android.os.PowerManager: android.os.IPowerManager mService>;

        i0 = interfaceinvoke $r2.<android.os.IPowerManager: int getLastShutdownReason()>();

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getLastSleepReason()
    {
        android.os.PowerManager r0;
        int i0;
        android.os.IPowerManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.os.PowerManager;

     label1:
        $r2 = r0.<android.os.PowerManager: android.os.IPowerManager mService>;

        i0 = interfaceinvoke $r2.<android.os.IPowerManager: int getLastSleepReason()>();

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getLocationPowerSaveMode()
    {
        android.os.PowerManager r0;
        android.os.PowerSaveState r1;
        boolean $z0;
        int $i0;

        r0 := @this: android.os.PowerManager;

        r1 = virtualinvoke r0.<android.os.PowerManager: android.os.PowerSaveState getPowerSaveState(int)>(1);

        $z0 = r1.<android.os.PowerSaveState: boolean batterySaverEnabled>;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i0 = r1.<android.os.PowerSaveState: int locationMode>;

        return $i0;
    }

    public int getMaximumScreenBrightnessForVrSetting()
    {
        android.os.PowerManager r0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        int $i0;

        r0 := @this: android.os.PowerManager;

        $r1 = r0.<android.os.PowerManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $i0 = virtualinvoke $r2.<android.content.res.Resources: int getInteger(int)>(17694888);

        return $i0;
    }

    public int getMaximumScreenBrightnessSetting()
    {
        android.os.PowerManager r0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        int $i0;

        r0 := @this: android.os.PowerManager;

        $r1 = r0.<android.os.PowerManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $i0 = virtualinvoke $r2.<android.content.res.Resources: int getInteger(int)>(17694891);

        return $i0;
    }

    public int getMinimumScreenBrightnessForVrSetting()
    {
        android.os.PowerManager r0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        int $i0;

        r0 := @this: android.os.PowerManager;

        $r1 = r0.<android.os.PowerManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $i0 = virtualinvoke $r2.<android.content.res.Resources: int getInteger(int)>(17694889);

        return $i0;
    }

    public int getMinimumScreenBrightnessSetting()
    {
        android.os.PowerManager r0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        int $i0;

        r0 := @this: android.os.PowerManager;

        $r1 = r0.<android.os.PowerManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $i0 = virtualinvoke $r2.<android.content.res.Resources: int getInteger(int)>(17694892);

        return $i0;
    }

    public int getPowerSaveModeTrigger()
    {
        android.os.PowerManager r0;
        int i0;
        android.os.IPowerManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.os.PowerManager;

     label1:
        $r2 = r0.<android.os.PowerManager: android.os.IPowerManager mService>;

        i0 = interfaceinvoke $r2.<android.os.IPowerManager: int getPowerSaveModeTrigger()>();

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.os.PowerSaveState getPowerSaveState(int)
    {
        android.os.PowerManager r0;
        int i0;
        android.os.IPowerManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.os.PowerSaveState r4;

        r0 := @this: android.os.PowerManager;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<android.os.PowerManager: android.os.IPowerManager mService>;

        r4 = interfaceinvoke $r1.<android.os.IPowerManager: android.os.PowerSaveState getPowerSaveState(int)>(i0);

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public float getThermalHeadroom(int)
    {
        android.os.PowerManager r0;
        int i0;
        float f0;
        long $l1, $l2, $l3, $l5;
        java.util.concurrent.atomic.AtomicLong $r2, $r4;
        byte $b4;
        android.os.IThermalService $r3;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;

        r0 := @this: android.os.PowerManager;

        i0 := @parameter0: int;

        $l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $r2 = r0.<android.os.PowerManager: java.util.concurrent.atomic.AtomicLong mLastHeadroomUpdate>;

        $l2 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $l3 = $l1 - $l2;

        $b4 = $l3 cmp 500L;

        if $b4 >= 0 goto label1;

        return #NaNF;

     label1:
        $r3 = r0.<android.os.PowerManager: android.os.IThermalService mThermalService>;

        f0 = interfaceinvoke $r3.<android.os.IThermalService: float getThermalHeadroom(int)>(i0);

        $r4 = r0.<android.os.PowerManager: java.util.concurrent.atomic.AtomicLong mLastHeadroomUpdate>;

        $l5 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicLong: void set(long)>($l5);

     label2:
        return f0;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void goToSleep(long)
    {
        android.os.PowerManager r0;
        long l0;

        r0 := @this: android.os.PowerManager;

        l0 := @parameter0: long;

        virtualinvoke r0.<android.os.PowerManager: void goToSleep(long,int,int)>(l0, 0, 0);

        return;
    }

    public void goToSleep(long, int, int)
    {
        android.os.PowerManager r0;
        long l0;
        int i1, i2;
        android.os.IPowerManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.os.PowerManager;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

     label1:
        $r2 = r0.<android.os.PowerManager: android.os.IPowerManager mService>;

        interfaceinvoke $r2.<android.os.IPowerManager: void goToSleep(long,int,int)>(l0, i1, i2);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isAmbientDisplayAvailable()
    {
        android.os.PowerManager r0;
        boolean z0;
        android.os.IPowerManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.os.PowerManager;

     label1:
        $r2 = r0.<android.os.PowerManager: android.os.IPowerManager mService>;

        z0 = interfaceinvoke $r2.<android.os.IPowerManager: boolean isAmbientDisplayAvailable()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isAmbientDisplaySuppressed()
    {
        android.os.PowerManager r0;
        boolean z0;
        android.os.IPowerManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.os.PowerManager;

     label1:
        $r2 = r0.<android.os.PowerManager: android.os.IPowerManager mService>;

        z0 = interfaceinvoke $r2.<android.os.IPowerManager: boolean isAmbientDisplaySuppressed()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isAmbientDisplaySuppressedForToken(java.lang.String)
    {
        android.os.PowerManager r0;
        boolean z0;
        android.os.IPowerManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.os.PowerManager;

        r4 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<android.os.PowerManager: android.os.IPowerManager mService>;

        z0 = interfaceinvoke $r1.<android.os.IPowerManager: boolean isAmbientDisplaySuppressedForToken(java.lang.String)>(r4);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isDeviceIdleMode()
    {
        android.os.PowerManager r0;
        boolean z0;
        android.os.IPowerManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.os.PowerManager;

     label1:
        $r2 = r0.<android.os.PowerManager: android.os.IPowerManager mService>;

        z0 = interfaceinvoke $r2.<android.os.IPowerManager: boolean isDeviceIdleMode()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isIgnoringBatteryOptimizations(java.lang.String)
    {
        android.os.PowerManager r0;
        java.lang.String r1;
        android.os.PowerWhitelistManager $r2;
        boolean $z0;

        r0 := @this: android.os.PowerManager;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<android.os.PowerManager: android.os.PowerWhitelistManager getPowerWhitelistManager()>();

        $z0 = virtualinvoke $r2.<android.os.PowerWhitelistManager: boolean isWhitelisted(java.lang.String,boolean)>(r1, 1);

        return $z0;
    }

    public boolean isInteractive()
    {
        android.os.PowerManager r0;
        android.app.PropertyInvalidatedCache $r1;
        java.lang.Object $r2;
        java.lang.Boolean $r3;
        boolean $z0;

        r0 := @this: android.os.PowerManager;

        $r1 = r0.<android.os.PowerManager: android.app.PropertyInvalidatedCache mInteractiveCache>;

        $r2 = virtualinvoke $r1.<android.app.PropertyInvalidatedCache: java.lang.Object query(java.lang.Object)>(null);

        $r3 = (java.lang.Boolean) $r2;

        $z0 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public boolean isLightDeviceIdleMode()
    {
        android.os.PowerManager r0;
        boolean z0;
        android.os.IPowerManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.os.PowerManager;

     label1:
        $r2 = r0.<android.os.PowerManager: android.os.IPowerManager mService>;

        z0 = interfaceinvoke $r2.<android.os.IPowerManager: boolean isLightDeviceIdleMode()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isPowerSaveMode()
    {
        android.os.PowerManager r0;
        android.app.PropertyInvalidatedCache $r1;
        java.lang.Object $r2;
        java.lang.Boolean $r3;
        boolean $z0;

        r0 := @this: android.os.PowerManager;

        $r1 = r0.<android.os.PowerManager: android.app.PropertyInvalidatedCache mPowerSaveModeCache>;

        $r2 = virtualinvoke $r1.<android.app.PropertyInvalidatedCache: java.lang.Object query(java.lang.Object)>(null);

        $r3 = (java.lang.Boolean) $r2;

        $z0 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public boolean isRebootingUserspaceSupported()
    {
        android.os.PowerManager r0;
        boolean $z0;

        r0 := @this: android.os.PowerManager;

        $z0 = staticinvoke <android.os.PowerManager: boolean isRebootingUserspaceSupportedImpl()>();

        return $z0;
    }

    public boolean isScreenOn()
    {
        android.os.PowerManager r0;
        boolean $z0;

        r0 := @this: android.os.PowerManager;

        $z0 = virtualinvoke r0.<android.os.PowerManager: boolean isInteractive()>();

        return $z0;
    }

    public boolean isSustainedPerformanceModeSupported()
    {
        android.os.PowerManager r0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        boolean $z0;

        r0 := @this: android.os.PowerManager;

        $r1 = r0.<android.os.PowerManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r2.<android.content.res.Resources: boolean getBoolean(int)>(17891556);

        return $z0;
    }

    public boolean isWakeLockLevelSupported(int)
    {
        android.os.PowerManager r0;
        int i0;
        boolean z0;
        android.os.IPowerManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.os.PowerManager;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.os.PowerManager: android.os.IPowerManager mService>;

        z0 = interfaceinvoke $r2.<android.os.IPowerManager: boolean isWakeLockLevelSupported(int)>(i0);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void nap(long)
    {
        android.os.PowerManager r0;
        long l0;
        android.os.IPowerManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.os.PowerManager;

        l0 := @parameter0: long;

     label1:
        $r2 = r0.<android.os.PowerManager: android.os.IPowerManager mService>;

        interfaceinvoke $r2.<android.os.IPowerManager: void nap(long)>(l0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.os.PowerManager$WakeLock newWakeLock(int, java.lang.String)
    {
        android.os.PowerManager r0;
        int i0;
        java.lang.String r1, $r4;
        android.os.PowerManager$WakeLock $r2;
        android.content.Context $r3;

        r0 := @this: android.os.PowerManager;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        staticinvoke <android.os.PowerManager: void validateWakeLockParameters(int,java.lang.String)>(i0, r1);

        $r2 = new android.os.PowerManager$WakeLock;

        $r3 = r0.<android.os.PowerManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getOpPackageName()>();

        specialinvoke $r2.<android.os.PowerManager$WakeLock: void <init>(android.os.PowerManager,int,java.lang.String,java.lang.String)>(r0, i0, r1, $r4);

        return $r2;
    }

    public void reboot(java.lang.String)
    {
        android.os.PowerManager r0;
        java.lang.String $r1, r6;
        boolean $z0, $z1;
        android.os.IPowerManager $r2;
        java.lang.UnsupportedOperationException $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: android.os.PowerManager;

        r6 := @parameter0: java.lang.String;

        $r1 = "userspace";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r0.<android.os.PowerManager: boolean isRebootingUserspaceSupported()>();

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Attempted userspace reboot on a device that doesn\'t support it");

        throw $r3;

     label2:
        $r2 = r0.<android.os.PowerManager: android.os.IPowerManager mService>;

        interfaceinvoke $r2.<android.os.IPowerManager: void reboot(boolean,java.lang.String,boolean)>(0, r6, 1);

     label3:
        return;

     label4:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void rebootSafeMode()
    {
        android.os.PowerManager r0;
        android.os.IPowerManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.os.PowerManager;

     label1:
        $r2 = r0.<android.os.PowerManager: android.os.IPowerManager mService>;

        interfaceinvoke $r2.<android.os.IPowerManager: void rebootSafeMode(boolean,boolean)>(0, 1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void removeThermalStatusListener(android.os.PowerManager$OnThermalStatusChangedListener)
    {
        android.os.PowerManager r0;
        android.os.IThermalStatusListener r1;
        android.util.ArrayMap $r3, $r6;
        java.lang.Object $r4;
        android.os.IThermalService $r5;
        boolean $z0, z1;
        android.os.RemoteException $r8;
        java.lang.RuntimeException $r9, r11;
        android.os.PowerManager$OnThermalStatusChangedListener r10;

        r0 := @this: android.os.PowerManager;

        r10 := @parameter0: android.os.PowerManager$OnThermalStatusChangedListener;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r10, "listener cannot be null");

        $r3 = r0.<android.os.PowerManager: android.util.ArrayMap mListenerMap>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r10);

        r1 = (android.os.IThermalStatusListener) $r4;

        if r1 == null goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z1, "Listener was not added");

     label3:
        $r5 = r0.<android.os.PowerManager: android.os.IThermalService mThermalService>;

        $z0 = interfaceinvoke $r5.<android.os.IThermalService: boolean unregisterThermalStatusListener(android.os.IThermalStatusListener)>(r1);

        if $z0 == 0 goto label5;

        $r6 = r0.<android.os.PowerManager: android.util.ArrayMap mListenerMap>;

        virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r10);

     label4:
        return;

     label5:
        r11 = new java.lang.RuntimeException;

        specialinvoke r11.<java.lang.RuntimeException: void <init>(java.lang.String)>("Listener failed to remove");

        throw r11;

     label6:
        $r8 := @caughtexception;

        $r9 = virtualinvoke $r8.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r9;

        catch android.os.RemoteException from label3 to label4 with label6;
        catch android.os.RemoteException from label5 to label6 with label6;
    }

    public boolean setAdaptivePowerSaveEnabled(boolean)
    {
        android.os.PowerManager r0;
        android.os.IPowerManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        boolean z0, z1;

        r0 := @this: android.os.PowerManager;

        z0 := @parameter0: boolean;

     label1:
        $r2 = r0.<android.os.PowerManager: android.os.IPowerManager mService>;

        z1 = interfaceinvoke $r2.<android.os.IPowerManager: boolean setAdaptivePowerSaveEnabled(boolean)>(z0);

     label2:
        return z1;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean setAdaptivePowerSavePolicy(android.os.BatterySaverPolicyConfig)
    {
        android.os.PowerManager r0;
        boolean z0;
        android.os.IPowerManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.os.BatterySaverPolicyConfig r4;

        r0 := @this: android.os.PowerManager;

        r4 := @parameter0: android.os.BatterySaverPolicyConfig;

     label1:
        $r1 = r0.<android.os.PowerManager: android.os.IPowerManager mService>;

        z0 = interfaceinvoke $r1.<android.os.IPowerManager: boolean setAdaptivePowerSavePolicy(android.os.BatterySaverPolicyConfig)>(r4);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setDozeAfterScreenOff(boolean)
    {
        android.os.PowerManager r0;
        boolean z0;
        android.os.IPowerManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.os.PowerManager;

        z0 := @parameter0: boolean;

     label1:
        $r2 = r0.<android.os.PowerManager: android.os.IPowerManager mService>;

        interfaceinvoke $r2.<android.os.IPowerManager: void setDozeAfterScreenOff(boolean)>(z0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean setDynamicPowerSaveHint(boolean, int)
    {
        android.os.PowerManager r0;
        int i0;
        android.os.IPowerManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        boolean z0, z1;

        r0 := @this: android.os.PowerManager;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

     label1:
        $r2 = r0.<android.os.PowerManager: android.os.IPowerManager mService>;

        z1 = interfaceinvoke $r2.<android.os.IPowerManager: boolean setDynamicPowerSaveHint(boolean,int)>(z0, i0);

     label2:
        return z1;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean setPowerSaveModeEnabled(boolean)
    {
        android.os.PowerManager r0;
        android.os.IPowerManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        boolean z0, z1;

        r0 := @this: android.os.PowerManager;

        z0 := @parameter0: boolean;

     label1:
        $r2 = r0.<android.os.PowerManager: android.os.IPowerManager mService>;

        z1 = interfaceinvoke $r2.<android.os.IPowerManager: boolean setPowerSaveModeEnabled(boolean)>(z0);

     label2:
        return z1;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void shutdown(boolean, java.lang.String, boolean)
    {
        android.os.PowerManager r0;
        boolean z0, z1;
        android.os.IPowerManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.os.PowerManager;

        z0 := @parameter0: boolean;

        r4 := @parameter1: java.lang.String;

        z1 := @parameter2: boolean;

     label1:
        $r1 = r0.<android.os.PowerManager: android.os.IPowerManager mService>;

        interfaceinvoke $r1.<android.os.IPowerManager: void shutdown(boolean,java.lang.String,boolean)>(z0, r4, z1);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void suppressAmbientDisplay(java.lang.String, boolean)
    {
        android.os.PowerManager r0;
        boolean z0;
        android.os.IPowerManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.os.PowerManager;

        r4 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

     label1:
        $r1 = r0.<android.os.PowerManager: android.os.IPowerManager mService>;

        interfaceinvoke $r1.<android.os.IPowerManager: void suppressAmbientDisplay(java.lang.String,boolean)>(r4, z0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void userActivity(long, int, int)
    {
        android.os.PowerManager r0;
        long l0;
        int i1, i2;
        android.os.IPowerManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.os.PowerManager;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

     label1:
        $r2 = r0.<android.os.PowerManager: android.os.IPowerManager mService>;

        interfaceinvoke $r2.<android.os.IPowerManager: void userActivity(long,int,int)>(l0, i1, i2);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void userActivity(long, boolean)
    {
        android.os.PowerManager r0;
        long l0;
        boolean z0;
        int i1;

        r0 := @this: android.os.PowerManager;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        i1 = (int) z0;

        virtualinvoke r0.<android.os.PowerManager: void userActivity(long,int,int)>(l0, 0, i1);

        return;
    }

    public void wakeUp(long)
    {
        android.os.PowerManager r0;
        long l0;

        r0 := @this: android.os.PowerManager;

        l0 := @parameter0: long;

        virtualinvoke r0.<android.os.PowerManager: void wakeUp(long,int,java.lang.String)>(l0, 0, "wakeUp");

        return;
    }

    public void wakeUp(long, int, java.lang.String)
    {
        android.os.PowerManager r0;
        long l0;
        int i1;
        android.content.Context $r1;
        android.os.IPowerManager $r2;
        java.lang.String $r3, r6;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: android.os.PowerManager;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        r6 := @parameter2: java.lang.String;

     label1:
        $r2 = r0.<android.os.PowerManager: android.os.IPowerManager mService>;

        $r1 = r0.<android.os.PowerManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke $r2.<android.os.IPowerManager: void wakeUp(long,int,java.lang.String,java.lang.String)>(l0, i1, r6, $r3);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void wakeUp(long, java.lang.String)
    {
        android.os.PowerManager r0;
        long l0;
        java.lang.String r1;

        r0 := @this: android.os.PowerManager;

        l0 := @parameter0: long;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<android.os.PowerManager: void wakeUp(long,int,java.lang.String)>(l0, 0, r1);

        return;
    }

    public static void <clinit>()
    {
        <android.os.PowerManager: int WAKE_REASON_WAKE_MOTION> = 7;

        <android.os.PowerManager: int WAKE_REASON_WAKE_KEY> = 6;

        <android.os.PowerManager: int WAKE_REASON_UNKNOWN> = 0;

        <android.os.PowerManager: int WAKE_REASON_POWER_BUTTON> = 1;

        <android.os.PowerManager: int WAKE_REASON_PLUGGED_IN> = 3;

        <android.os.PowerManager: int WAKE_REASON_LID> = 9;

        <android.os.PowerManager: int WAKE_REASON_HDMI> = 8;

        <android.os.PowerManager: int WAKE_REASON_GESTURE> = 4;

        <android.os.PowerManager: int WAKE_REASON_CAMERA_LAUNCH> = 5;

        <android.os.PowerManager: int WAKE_REASON_APPLICATION> = 2;

        <android.os.PowerManager: int WAKE_LOCK_LEVEL_MASK> = 65535;

        <android.os.PowerManager: int USER_ACTIVITY_FLAG_NO_CHANGE_LIGHTS> = 1;

        <android.os.PowerManager: int USER_ACTIVITY_FLAG_INDIRECT> = 2;

        <android.os.PowerManager: int USER_ACTIVITY_EVENT_TOUCH> = 2;

        <android.os.PowerManager: int USER_ACTIVITY_EVENT_OTHER> = 0;

        <android.os.PowerManager: int USER_ACTIVITY_EVENT_BUTTON> = 1;

        <android.os.PowerManager: int USER_ACTIVITY_EVENT_ATTENTION> = 4;

        <android.os.PowerManager: int USER_ACTIVITY_EVENT_ACCESSIBILITY> = 3;

        <android.os.PowerManager: int UNIMPORTANT_FOR_LOGGING> = 1073741824;

        <android.os.PowerManager: int THERMAL_STATUS_SHUTDOWN> = 6;

        <android.os.PowerManager: int THERMAL_STATUS_SEVERE> = 3;

        <android.os.PowerManager: int THERMAL_STATUS_NONE> = 0;

        <android.os.PowerManager: int THERMAL_STATUS_MODERATE> = 2;

        <android.os.PowerManager: int THERMAL_STATUS_LIGHT> = 1;

        <android.os.PowerManager: int THERMAL_STATUS_EMERGENCY> = 5;

        <android.os.PowerManager: int THERMAL_STATUS_CRITICAL> = 4;

        <android.os.PowerManager: java.lang.String TAG> = "PowerManager";

        <android.os.PowerManager: java.lang.String SHUTDOWN_USER_REQUESTED> = "userrequested";

        <android.os.PowerManager: java.lang.String SHUTDOWN_THERMAL_STATE> = "thermal";

        <android.os.PowerManager: int SHUTDOWN_REASON_USER_REQUESTED> = 3;

        <android.os.PowerManager: int SHUTDOWN_REASON_UNKNOWN> = 0;

        <android.os.PowerManager: int SHUTDOWN_REASON_THERMAL_SHUTDOWN> = 4;

        <android.os.PowerManager: int SHUTDOWN_REASON_SHUTDOWN> = 1;

        <android.os.PowerManager: int SHUTDOWN_REASON_REBOOT> = 2;

        <android.os.PowerManager: int SHUTDOWN_REASON_LOW_BATTERY> = 5;

        <android.os.PowerManager: int SHUTDOWN_REASON_BATTERY_THERMAL> = 6;

        <android.os.PowerManager: java.lang.String SHUTDOWN_LOW_BATTERY> = "battery";

        <android.os.PowerManager: java.lang.String SHUTDOWN_BATTERY_THERMAL_STATE> = "thermal,battery";

        <android.os.PowerManager: int SCREEN_DIM_WAKE_LOCK> = 6;

        <android.os.PowerManager: int SCREEN_BRIGHT_WAKE_LOCK> = 10;

        <android.os.PowerManager: int RELEASE_FLAG_WAIT_FOR_NO_PROXIMITY> = 1;

        <android.os.PowerManager: int RELEASE_FLAG_TIMEOUT> = 65536;

        <android.os.PowerManager: java.lang.String REBOOT_USERSPACE> = "userspace";

        <android.os.PowerManager: java.lang.String REBOOT_SAFE_MODE> = "safemode";

        <android.os.PowerManager: java.lang.String REBOOT_REQUESTED_BY_DEVICE_OWNER> = "deviceowner";

        <android.os.PowerManager: java.lang.String REBOOT_RECOVERY_UPDATE> = "recovery-update";

        <android.os.PowerManager: java.lang.String REBOOT_RECOVERY> = "recovery";

        <android.os.PowerManager: java.lang.String REBOOT_QUIESCENT> = "quiescent";

        <android.os.PowerManager: int PROXIMITY_SCREEN_OFF_WAKE_LOCK> = 32;

        <android.os.PowerManager: int PRE_IDLE_TIMEOUT_MODE_SHORT> = 2;

        <android.os.PowerManager: int PRE_IDLE_TIMEOUT_MODE_NORMAL> = 0;

        <android.os.PowerManager: int PRE_IDLE_TIMEOUT_MODE_LONG> = 1;

        <android.os.PowerManager: int POWER_SAVE_MODE_TRIGGER_PERCENTAGE> = 0;

        <android.os.PowerManager: int POWER_SAVE_MODE_TRIGGER_DYNAMIC> = 1;

        <android.os.PowerManager: int PARTIAL_WAKE_LOCK> = 1;

        <android.os.PowerManager: int ON_AFTER_RELEASE> = 536870912;

        <android.os.PowerManager: int MIN_LOCATION_MODE> = 0;

        <android.os.PowerManager: int MINIMUM_HEADROOM_TIME_MILLIS> = 500;

        <android.os.PowerManager: int MAX_LOCATION_MODE> = 4;

        <android.os.PowerManager: int MAX_CACHE_ENTRIES> = 1;

        <android.os.PowerManager: int LOCATION_MODE_THROTTLE_REQUESTS_WHEN_SCREEN_OFF> = 4;

        <android.os.PowerManager: int LOCATION_MODE_NO_CHANGE> = 0;

        <android.os.PowerManager: int LOCATION_MODE_GPS_DISABLED_WHEN_SCREEN_OFF> = 1;

        <android.os.PowerManager: int LOCATION_MODE_FOREGROUND_ONLY> = 3;

        <android.os.PowerManager: int LOCATION_MODE_ALL_DISABLED_WHEN_SCREEN_OFF> = 2;

        <android.os.PowerManager: int GO_TO_SLEEP_REASON_TIMEOUT> = 2;

        <android.os.PowerManager: int GO_TO_SLEEP_REASON_SLEEP_BUTTON> = 6;

        <android.os.PowerManager: int GO_TO_SLEEP_REASON_QUIESCENT> = 10;

        <android.os.PowerManager: int GO_TO_SLEEP_REASON_POWER_BUTTON> = 4;

        <android.os.PowerManager: int GO_TO_SLEEP_REASON_MIN> = 0;

        <android.os.PowerManager: int GO_TO_SLEEP_REASON_MAX> = 10;

        <android.os.PowerManager: int GO_TO_SLEEP_REASON_LID_SWITCH> = 3;

        <android.os.PowerManager: int GO_TO_SLEEP_REASON_INATTENTIVE> = 9;

        <android.os.PowerManager: int GO_TO_SLEEP_REASON_HDMI> = 5;

        <android.os.PowerManager: int GO_TO_SLEEP_REASON_FORCE_SUSPEND> = 8;

        <android.os.PowerManager: int GO_TO_SLEEP_REASON_DEVICE_ADMIN> = 1;

        <android.os.PowerManager: int GO_TO_SLEEP_REASON_APPLICATION> = 0;

        <android.os.PowerManager: int GO_TO_SLEEP_REASON_ACCESSIBILITY> = 7;

        <android.os.PowerManager: int GO_TO_SLEEP_FLAG_NO_DOZE> = 1;

        <android.os.PowerManager: int FULL_WAKE_LOCK> = 26;

        <android.os.PowerManager: java.lang.String EXTRA_POWER_SAVE_MODE> = "mode";

        <android.os.PowerManager: int DRAW_WAKE_LOCK> = 128;

        <android.os.PowerManager: int DOZE_WAKE_LOCK> = 64;

        <android.os.PowerManager: java.lang.String CACHE_KEY_IS_POWER_SAVE_MODE_PROPERTY> = "cache_key.is_power_save_mode";

        <android.os.PowerManager: java.lang.String CACHE_KEY_IS_INTERACTIVE_PROPERTY> = "cache_key.is_interactive";

        <android.os.PowerManager: int BRIGHTNESS_ON> = 255;

        <android.os.PowerManager: float BRIGHTNESS_OFF_FLOAT> = -1.0F;

        <android.os.PowerManager: int BRIGHTNESS_OFF> = 0;

        <android.os.PowerManager: float BRIGHTNESS_MIN> = 0.0F;

        <android.os.PowerManager: float BRIGHTNESS_MAX> = 1.0F;

        <android.os.PowerManager: float BRIGHTNESS_INVALID_FLOAT> = #NaNF;

        <android.os.PowerManager: int BRIGHTNESS_INVALID> = -1;

        <android.os.PowerManager: int BRIGHTNESS_DEFAULT> = -1;

        <android.os.PowerManager: int BRIGHTNESS_CONSTRAINT_TYPE_MINIMUM_VR> = 5;

        <android.os.PowerManager: int BRIGHTNESS_CONSTRAINT_TYPE_MINIMUM> = 0;

        <android.os.PowerManager: int BRIGHTNESS_CONSTRAINT_TYPE_MAXIMUM_VR> = 6;

        <android.os.PowerManager: int BRIGHTNESS_CONSTRAINT_TYPE_MAXIMUM> = 1;

        <android.os.PowerManager: int BRIGHTNESS_CONSTRAINT_TYPE_DOZE> = 4;

        <android.os.PowerManager: int BRIGHTNESS_CONSTRAINT_TYPE_DIM> = 3;

        <android.os.PowerManager: int BRIGHTNESS_CONSTRAINT_TYPE_DEFAULT_VR> = 7;

        <android.os.PowerManager: int BRIGHTNESS_CONSTRAINT_TYPE_DEFAULT> = 2;

        <android.os.PowerManager: java.lang.String ACTION_POWER_SAVE_WHITELIST_CHANGED> = "android.os.action.POWER_SAVE_WHITELIST_CHANGED";

        <android.os.PowerManager: java.lang.String ACTION_POWER_SAVE_TEMP_WHITELIST_CHANGED> = "android.os.action.POWER_SAVE_TEMP_WHITELIST_CHANGED";

        <android.os.PowerManager: java.lang.String ACTION_POWER_SAVE_MODE_CHANGING> = "android.os.action.POWER_SAVE_MODE_CHANGING";

        <android.os.PowerManager: java.lang.String ACTION_POWER_SAVE_MODE_CHANGED_INTERNAL> = "android.os.action.POWER_SAVE_MODE_CHANGED_INTERNAL";

        <android.os.PowerManager: java.lang.String ACTION_POWER_SAVE_MODE_CHANGED> = "android.os.action.POWER_SAVE_MODE_CHANGED";

        <android.os.PowerManager: java.lang.String ACTION_LIGHT_DEVICE_IDLE_MODE_CHANGED> = "android.os.action.LIGHT_DEVICE_IDLE_MODE_CHANGED";

        <android.os.PowerManager: java.lang.String ACTION_DEVICE_IDLE_MODE_CHANGED> = "android.os.action.DEVICE_IDLE_MODE_CHANGED";

        <android.os.PowerManager: int ACQUIRE_CAUSES_WAKEUP> = 268435456;

        return;
    }
}
