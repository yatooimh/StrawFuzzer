public final class android.os.RemoteCallback extends java.lang.Object implements android.os.Parcelable
{
    public static final android.os.Parcelable$Creator CREATOR;
    private final android.os.IRemoteCallback mCallback;
    private final android.os.Handler mHandler;
    private final android.os.RemoteCallback$OnResultListener mListener;

    static void <clinit>()
    {
        android.os.RemoteCallback$3 $r0;

        $r0 = new android.os.RemoteCallback$3;

        specialinvoke $r0.<android.os.RemoteCallback$3: void <init>()>();

        <android.os.RemoteCallback: android.os.Parcelable$Creator CREATOR> = $r0;

        return;
    }

    void <init>(android.os.Parcel)
    {
        android.os.RemoteCallback r0;
        android.os.Parcel r1;
        android.os.IBinder $r2;
        android.os.IRemoteCallback $r3;

        r0 := @this: android.os.RemoteCallback;

        r1 := @parameter0: android.os.Parcel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.os.RemoteCallback: android.os.RemoteCallback$OnResultListener mListener> = null;

        r0.<android.os.RemoteCallback: android.os.Handler mHandler> = null;

        $r2 = virtualinvoke r1.<android.os.Parcel: android.os.IBinder readStrongBinder()>();

        $r3 = staticinvoke <android.os.IRemoteCallback$Stub: android.os.IRemoteCallback asInterface(android.os.IBinder)>($r2);

        r0.<android.os.RemoteCallback: android.os.IRemoteCallback mCallback> = $r3;

        return;
    }

    public void <init>(android.os.RemoteCallback$OnResultListener)
    {
        android.os.RemoteCallback r0;
        android.os.RemoteCallback$OnResultListener r1;

        r0 := @this: android.os.RemoteCallback;

        r1 := @parameter0: android.os.RemoteCallback$OnResultListener;

        specialinvoke r0.<android.os.RemoteCallback: void <init>(android.os.RemoteCallback$OnResultListener,android.os.Handler)>(r1, null);

        return;
    }

    public void <init>(android.os.RemoteCallback$OnResultListener, android.os.Handler)
    {
        android.os.RemoteCallback r0;
        android.os.RemoteCallback$OnResultListener r1;
        android.os.Handler r2;
        java.lang.NullPointerException $r3;
        android.os.RemoteCallback$1 $r4;

        r0 := @this: android.os.RemoteCallback;

        r1 := @parameter0: android.os.RemoteCallback$OnResultListener;

        r2 := @parameter1: android.os.Handler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 == null goto label1;

        r0.<android.os.RemoteCallback: android.os.RemoteCallback$OnResultListener mListener> = r1;

        r0.<android.os.RemoteCallback: android.os.Handler mHandler> = r2;

        $r4 = new android.os.RemoteCallback$1;

        specialinvoke $r4.<android.os.RemoteCallback$1: void <init>(android.os.RemoteCallback)>(r0);

        r0.<android.os.RemoteCallback: android.os.IRemoteCallback mCallback> = $r4;

        return;

     label1:
        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("listener cannot be null");

        throw $r3;
    }

    static android.os.RemoteCallback$OnResultListener access$000(android.os.RemoteCallback)
    {
        android.os.RemoteCallback r0;
        android.os.RemoteCallback$OnResultListener $r1;

        r0 := @parameter0: android.os.RemoteCallback;

        $r1 = r0.<android.os.RemoteCallback: android.os.RemoteCallback$OnResultListener mListener>;

        return $r1;
    }

    public int describeContents()
    {
        android.os.RemoteCallback r0;

        r0 := @this: android.os.RemoteCallback;

        return 0;
    }

    public void sendResult(android.os.Bundle)
    {
        android.os.RemoteCallback r0;
        android.os.RemoteCallback$OnResultListener r1;
        android.os.Handler r2;
        android.os.IRemoteCallback $r3;
        android.os.RemoteCallback$2 $r4;
        android.os.RemoteException $r5;
        android.os.Bundle r6;

        r0 := @this: android.os.RemoteCallback;

        r6 := @parameter0: android.os.Bundle;

        r1 = r0.<android.os.RemoteCallback: android.os.RemoteCallback$OnResultListener mListener>;

        if r1 == null goto label2;

        r2 = r0.<android.os.RemoteCallback: android.os.Handler mHandler>;

        if r2 == null goto label1;

        $r4 = new android.os.RemoteCallback$2;

        specialinvoke $r4.<android.os.RemoteCallback$2: void <init>(android.os.RemoteCallback,android.os.Bundle)>(r0, r6);

        virtualinvoke r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r4);

        goto label5;

     label1:
        interfaceinvoke r1.<android.os.RemoteCallback$OnResultListener: void onResult(android.os.Bundle)>(r6);

        goto label5;

     label2:
        $r3 = r0.<android.os.RemoteCallback: android.os.IRemoteCallback mCallback>;

        interfaceinvoke $r3.<android.os.IRemoteCallback: void sendResult(android.os.Bundle)>(r6);

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

     label5:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        android.os.RemoteCallback r0;
        android.os.Parcel r1;
        int i0;
        android.os.IRemoteCallback $r2;
        android.os.IBinder $r3;

        r0 := @this: android.os.RemoteCallback;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        $r2 = r0.<android.os.RemoteCallback: android.os.IRemoteCallback mCallback>;

        $r3 = interfaceinvoke $r2.<android.os.IRemoteCallback: android.os.IBinder asBinder()>();

        virtualinvoke r1.<android.os.Parcel: void writeStrongBinder(android.os.IBinder)>($r3);

        return;
    }
}
