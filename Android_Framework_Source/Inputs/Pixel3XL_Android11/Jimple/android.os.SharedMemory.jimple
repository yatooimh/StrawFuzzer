public final class android.os.SharedMemory extends java.lang.Object implements android.os.Parcelable, java.io.Closeable
{
    public static final android.os.Parcelable$Creator CREATOR;
    private static final int PROT_MASK;
    private sun.misc.Cleaner mCleaner;
    private final java.io.FileDescriptor mFileDescriptor;
    private final android.os.SharedMemory$MemoryRegistration mMemoryRegistration;
    private final int mSize;

    static void <clinit>()
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        android.os.SharedMemory$1 $r0;

        $i1 = <android.system.OsConstants: int PROT_READ>;

        $i0 = <android.system.OsConstants: int PROT_WRITE>;

        $i3 = $i1 | $i0;

        $i2 = <android.system.OsConstants: int PROT_EXEC>;

        $i5 = $i3 | $i2;

        $i4 = <android.system.OsConstants: int PROT_NONE>;

        $i6 = $i5 | $i4;

        <android.os.SharedMemory: int PROT_MASK> = $i6;

        $r0 = new android.os.SharedMemory$1;

        specialinvoke $r0.<android.os.SharedMemory$1: void <init>()>();

        <android.os.SharedMemory: android.os.Parcelable$Creator CREATOR> = $r0;

        return;
    }

    private void <init>(java.io.FileDescriptor)
    {
        android.os.SharedMemory r0;
        int i0;
        java.io.FileDescriptor r1, r8;
        java.lang.IllegalArgumentException $r2, $r3, $r4;
        boolean $z0;
        android.os.SharedMemory$MemoryRegistration $r5;
        android.os.SharedMemory$Closer $r6;
        sun.misc.Cleaner $r7;

        r0 := @this: android.os.SharedMemory;

        r8 := @parameter0: java.io.FileDescriptor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r8 == null goto label3;

        $z0 = virtualinvoke r8.<java.io.FileDescriptor: boolean valid()>();

        if $z0 == 0 goto label2;

        r0.<android.os.SharedMemory: java.io.FileDescriptor mFileDescriptor> = r8;

        i0 = staticinvoke <android.os.SharedMemory: int nGetSize(java.io.FileDescriptor)>(r8);

        r0.<android.os.SharedMemory: int mSize> = i0;

        if i0 <= 0 goto label1;

        $r5 = new android.os.SharedMemory$MemoryRegistration;

        specialinvoke $r5.<android.os.SharedMemory$MemoryRegistration: void <init>(int,android.os.SharedMemory$1)>(i0, null);

        r0.<android.os.SharedMemory: android.os.SharedMemory$MemoryRegistration mMemoryRegistration> = $r5;

        r1 = r0.<android.os.SharedMemory: java.io.FileDescriptor mFileDescriptor>;

        $r6 = new android.os.SharedMemory$Closer;

        specialinvoke $r6.<android.os.SharedMemory$Closer: void <init>(java.io.FileDescriptor,android.os.SharedMemory$MemoryRegistration,android.os.SharedMemory$1)>(r1, $r5, null);

        $r7 = staticinvoke <sun.misc.Cleaner: sun.misc.Cleaner create(java.lang.Object,java.lang.Runnable)>(r1, $r6);

        r0.<android.os.SharedMemory: sun.misc.Cleaner mCleaner> = $r7;

        return;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("FileDescriptor is not a valid ashmem fd");

        throw $r4;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unable to create SharedMemory from closed FileDescriptor");

        throw $r3;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unable to create SharedMemory from a null FileDescriptor");

        throw $r2;
    }

    void <init>(java.io.FileDescriptor, android.os.SharedMemory$1)
    {
        android.os.SharedMemory r0;
        java.io.FileDescriptor r1;
        android.os.SharedMemory$1 r2;

        r0 := @this: android.os.SharedMemory;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: android.os.SharedMemory$1;

        specialinvoke r0.<android.os.SharedMemory: void <init>(java.io.FileDescriptor)>(r1);

        return;
    }

    private void checkOpen()
    {
        android.os.SharedMemory r0;
        java.io.FileDescriptor $r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;

        r0 := @this: android.os.SharedMemory;

        $r1 = r0.<android.os.SharedMemory: java.io.FileDescriptor mFileDescriptor>;

        $z0 = virtualinvoke $r1.<java.io.FileDescriptor: boolean valid()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("SharedMemory is closed");

        throw $r2;
    }

    public static android.os.SharedMemory create(java.lang.String, int) throws android.system.ErrnoException
    {
        java.lang.String r0;
        int i0;
        java.lang.IllegalArgumentException $r1;
        android.os.SharedMemory $r2;
        java.io.FileDescriptor $r3;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if i0 <= 0 goto label1;

        $r2 = new android.os.SharedMemory;

        $r3 = staticinvoke <android.os.SharedMemory: java.io.FileDescriptor nCreate(java.lang.String,int)>(r0, i0);

        specialinvoke $r2.<android.os.SharedMemory: void <init>(java.io.FileDescriptor)>($r3);

        return $r2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Size must be greater than zero");

        throw $r1;
    }

    private static native java.io.FileDescriptor nCreate(java.lang.String, int) throws android.system.ErrnoException;

    private static native int nGetSize(java.io.FileDescriptor);

    private static native int nSetProt(java.io.FileDescriptor, int);

    public static void unmap(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0;
        boolean $z0;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: java.nio.ByteBuffer;

        $z0 = r0 instanceof java.nio.DirectByteBuffer;

        if $z0 == 0 goto label1;

        staticinvoke <java.nio.NioUtils: void freeDirectBuffer(java.nio.ByteBuffer)>(r0);

        return;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ByteBuffer wasn\'t created by #map(int, int, int); can\'t unmap");

        throw $r1;
    }

    private static void validateProt(int)
    {
        int i0, $i1, $i2;
        java.lang.IllegalArgumentException $r0;

        i0 := @parameter0: int;

        $i1 = <android.os.SharedMemory: int PROT_MASK>;

        $i2 = $i1 & i0;

        if $i2 != 0 goto label1;

        return;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid prot value");

        throw $r0;
    }

    public void close()
    {
        android.os.SharedMemory r0;
        sun.misc.Cleaner r1;

        r0 := @this: android.os.SharedMemory;

        r1 = r0.<android.os.SharedMemory: sun.misc.Cleaner mCleaner>;

        if r1 == null goto label1;

        virtualinvoke r1.<sun.misc.Cleaner: void clean()>();

        r0.<android.os.SharedMemory: sun.misc.Cleaner mCleaner> = null;

     label1:
        return;
    }

    public int describeContents()
    {
        android.os.SharedMemory r0;

        r0 := @this: android.os.SharedMemory;

        return 1;
    }

    public int getFd()
    {
        android.os.SharedMemory r0;
        java.io.FileDescriptor $r1;
        int $i0;

        r0 := @this: android.os.SharedMemory;

        $r1 = r0.<android.os.SharedMemory: java.io.FileDescriptor mFileDescriptor>;

        $i0 = virtualinvoke $r1.<java.io.FileDescriptor: int getInt$()>();

        return $i0;
    }

    public android.os.ParcelFileDescriptor getFdDup() throws java.io.IOException
    {
        android.os.SharedMemory r0;
        java.io.FileDescriptor $r1;
        android.os.ParcelFileDescriptor $r2;

        r0 := @this: android.os.SharedMemory;

        $r1 = r0.<android.os.SharedMemory: java.io.FileDescriptor mFileDescriptor>;

        $r2 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup(java.io.FileDescriptor)>($r1);

        return $r2;
    }

    public java.io.FileDescriptor getFileDescriptor()
    {
        android.os.SharedMemory r0;
        java.io.FileDescriptor $r1;

        r0 := @this: android.os.SharedMemory;

        $r1 = r0.<android.os.SharedMemory: java.io.FileDescriptor mFileDescriptor>;

        return $r1;
    }

    public int getSize()
    {
        android.os.SharedMemory r0;
        int $i0;

        r0 := @this: android.os.SharedMemory;

        specialinvoke r0.<android.os.SharedMemory: void checkOpen()>();

        $i0 = r0.<android.os.SharedMemory: int mSize>;

        return $i0;
    }

    public java.nio.ByteBuffer map(int, int, int) throws android.system.ErrnoException
    {
        android.os.SharedMemory r0;
        int i0, i1, i2, $i4, $i5, $i7, $i9, $i10;
        long l3, $l6, $l8;
        java.lang.IllegalArgumentException $r2, $r3, $r4;
        java.io.FileDescriptor $r5, $r10;
        android.os.SharedMemory$Unmapper $r6;
        android.os.SharedMemory$MemoryRegistration $r7, $r8;
        java.nio.DirectByteBuffer $r9;
        boolean z0;

        r0 := @this: android.os.SharedMemory;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        specialinvoke r0.<android.os.SharedMemory: void checkOpen()>();

        staticinvoke <android.os.SharedMemory: void validateProt(int)>(i0);

        if i1 < 0 goto label5;

        if i2 <= 0 goto label4;

        $i5 = i1 + i2;

        $i4 = r0.<android.os.SharedMemory: int mSize>;

        if $i5 > $i4 goto label3;

        $l8 = (long) i2;

        $i7 = <android.system.OsConstants: int MAP_SHARED>;

        $r5 = r0.<android.os.SharedMemory: java.io.FileDescriptor mFileDescriptor>;

        $l6 = (long) i1;

        l3 = staticinvoke <android.system.Os: long mmap(long,long,int,int,java.io.FileDescriptor,long)>(0L, $l8, i0, $i7, $r5, $l6);

        $i9 = <android.system.OsConstants: int PROT_WRITE>;

        $i10 = i0 & $i9;

        if $i10 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        $r6 = new android.os.SharedMemory$Unmapper;

        $r7 = r0.<android.os.SharedMemory: android.os.SharedMemory$MemoryRegistration mMemoryRegistration>;

        $r8 = virtualinvoke $r7.<android.os.SharedMemory$MemoryRegistration: android.os.SharedMemory$MemoryRegistration acquire()>();

        specialinvoke $r6.<android.os.SharedMemory$Unmapper: void <init>(long,int,android.os.SharedMemory$MemoryRegistration,android.os.SharedMemory$1)>(l3, i2, $r8, null);

        $r9 = new java.nio.DirectByteBuffer;

        $r10 = r0.<android.os.SharedMemory: java.io.FileDescriptor mFileDescriptor>;

        specialinvoke $r9.<java.nio.DirectByteBuffer: void <init>(int,long,java.io.FileDescriptor,java.lang.Runnable,boolean)>(i2, l3, $r10, $r6, z0);

        return $r9;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("offset + length must not exceed getSize()");

        throw $r4;

     label4:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Length must be > 0");

        throw $r3;

     label5:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Offset must be >= 0");

        throw $r2;
    }

    public java.nio.ByteBuffer mapReadOnly() throws android.system.ErrnoException
    {
        android.os.SharedMemory r0;
        int $i0, $i1;
        java.nio.ByteBuffer $r1;

        r0 := @this: android.os.SharedMemory;

        $i1 = <android.system.OsConstants: int PROT_READ>;

        $i0 = r0.<android.os.SharedMemory: int mSize>;

        $r1 = virtualinvoke r0.<android.os.SharedMemory: java.nio.ByteBuffer map(int,int,int)>($i1, 0, $i0);

        return $r1;
    }

    public java.nio.ByteBuffer mapReadWrite() throws android.system.ErrnoException
    {
        android.os.SharedMemory r0;
        int $i0, $i1, $i2, $i3;
        java.nio.ByteBuffer $r1;

        r0 := @this: android.os.SharedMemory;

        $i1 = <android.system.OsConstants: int PROT_READ>;

        $i0 = <android.system.OsConstants: int PROT_WRITE>;

        $i3 = $i1 | $i0;

        $i2 = r0.<android.os.SharedMemory: int mSize>;

        $r1 = virtualinvoke r0.<android.os.SharedMemory: java.nio.ByteBuffer map(int,int,int)>($i3, 0, $i2);

        return $r1;
    }

    public boolean setProtect(int)
    {
        android.os.SharedMemory r0;
        int i0, $i1;
        java.io.FileDescriptor $r1;
        boolean z0;

        r0 := @this: android.os.SharedMemory;

        i0 := @parameter0: int;

        specialinvoke r0.<android.os.SharedMemory: void checkOpen()>();

        staticinvoke <android.os.SharedMemory: void validateProt(int)>(i0);

        $r1 = r0.<android.os.SharedMemory: java.io.FileDescriptor mFileDescriptor>;

        $i1 = staticinvoke <android.os.SharedMemory: int nSetProt(java.io.FileDescriptor,int)>($r1, i0);

        if $i1 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        android.os.SharedMemory r0;
        android.os.Parcel r1;
        int i0;
        java.io.FileDescriptor $r2;

        r0 := @this: android.os.SharedMemory;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        specialinvoke r0.<android.os.SharedMemory: void checkOpen()>();

        $r2 = r0.<android.os.SharedMemory: java.io.FileDescriptor mFileDescriptor>;

        virtualinvoke r1.<android.os.Parcel: void writeFileDescriptor(java.io.FileDescriptor)>($r2);

        return;
    }
}
