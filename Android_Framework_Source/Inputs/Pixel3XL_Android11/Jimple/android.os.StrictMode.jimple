public final class android.os.StrictMode extends java.lang.Object
{
    private static final java.lang.String CLEARTEXT_PROPERTY;
    private static final int DETECT_THREAD_ALL;
    private static final int DETECT_THREAD_CUSTOM;
    private static final int DETECT_THREAD_DISK_READ;
    private static final int DETECT_THREAD_DISK_WRITE;
    private static final int DETECT_THREAD_EXPLICIT_GC;
    private static final int DETECT_THREAD_NETWORK;
    private static final int DETECT_THREAD_RESOURCE_MISMATCH;
    private static final int DETECT_THREAD_UNBUFFERED_IO;
    private static final int DETECT_VM_ACTIVITY_LEAKS;
    private static final int DETECT_VM_ALL;
    private static final int DETECT_VM_CLEARTEXT_NETWORK;
    private static final int DETECT_VM_CLOSABLE_LEAKS;
    private static final int DETECT_VM_CONTENT_URI_WITHOUT_PERMISSION;
    private static final int DETECT_VM_CREDENTIAL_PROTECTED_WHILE_LOCKED;
    private static final int DETECT_VM_CURSOR_LEAKS;
    private static final int DETECT_VM_FILE_URI_EXPOSURE;
    private static final int DETECT_VM_IMPLICIT_DIRECT_BOOT;
    private static final int DETECT_VM_INCORRECT_CONTEXT_USE;
    private static final int DETECT_VM_INSTANCE_LEAKS;
    private static final int DETECT_VM_NON_SDK_API_USAGE;
    private static final int DETECT_VM_REGISTRATION_LEAKS;
    private static final int DETECT_VM_UNTAGGED_SOCKET;
    private static final boolean DISABLE;
    public static final java.lang.String DISABLE_PROPERTY;
    private static final java.util.HashMap EMPTY_CLASS_LIMIT_MAP;
    private static final android.os.StrictMode$ViolationLogger LOGCAT_LOGGER;
    private static final boolean LOG_V;
    private static final int MAX_OFFENSES_PER_LOOP;
    private static final int MAX_SPAN_TAGS;
    private static final long MIN_DIALOG_INTERVAL_MS;
    private static final long MIN_DROPBOX_INTERVAL_MS;
    private static final long MIN_LOG_INTERVAL_MS;
    private static final long MIN_VM_INTERVAL_MS;
    public static final int NETWORK_POLICY_ACCEPT;
    public static final int NETWORK_POLICY_LOG;
    public static final int NETWORK_POLICY_REJECT;
    private static final android.os.StrictMode$Span NO_OP_SPAN;
    public static final int PENALTY_ALL;
    public static final int PENALTY_DEATH;
    public static final int PENALTY_DEATH_ON_CLEARTEXT_NETWORK;
    public static final int PENALTY_DEATH_ON_FILE_URI_EXPOSURE;
    public static final int PENALTY_DEATH_ON_NETWORK;
    public static final int PENALTY_DIALOG;
    public static final int PENALTY_DROPBOX;
    public static final int PENALTY_FLASH;
    public static final int PENALTY_GATHER;
    public static final int PENALTY_LOG;
    private static final java.lang.String TAG;
    private static final java.lang.ThreadLocal THREAD_ANDROID_POLICY;
    private static final java.lang.ThreadLocal THREAD_HANDLER;
    public static final java.lang.String VISUAL_PROPERTY;
    private static final dalvik.system.BlockGuard$VmPolicy VM_ANDROID_POLICY;
    private static final java.lang.ThreadLocal gatheredViolations;
    private static final java.util.concurrent.atomic.AtomicInteger sDropboxCallsInFlight;
    private static final java.util.HashMap sExpectedActivityInstanceCount;
    private static boolean sIsIdlerRegistered;
    private static long sLastInstanceCountCheckMillis;
    private static final java.util.HashMap sLastVmViolationTime;
    private static volatile android.os.StrictMode$ViolationLogger sLogger;
    private static final java.util.function.Consumer sNonSdkApiUsageConsumer;
    private static final android.os.MessageQueue$IdleHandler sProcessIdleHandler;
    private static final java.lang.ThreadLocal sThisThreadSpanState;
    private static final java.lang.ThreadLocal sThreadViolationExecutor;
    private static final java.lang.ThreadLocal sThreadViolationListener;
    private static volatile boolean sUserKeyUnlocked;
    private static volatile android.os.StrictMode$VmPolicy sVmPolicy;
    private static android.util.Singleton sWindowManager;
    private static final java.lang.ThreadLocal violationsBeingTimed;

    static void <clinit>()
    {
        android.os.'-$$Lambda$StrictMode$1yH8AK0bTwVwZOb9x8HoiSBdzr0' r0;
        boolean $z0;
        android.os.StrictMode$VmPolicy $r2;
        android.os.'-$$Lambda$StrictMode$lu9ekkHJ2HMz0jd3F8K8MnhenxQ' $r6;
        java.util.HashMap r18, r28, r32;
        java.lang.ThreadLocal r19, r20;
        java.util.concurrent.atomic.AtomicInteger r21;
        android.os.StrictMode$1 r22;
        android.os.StrictMode$2 r23;
        android.os.StrictMode$3 r24;
        android.os.StrictMode$4 r25;
        android.os.StrictMode$5 r26;
        android.os.StrictMode$6 r27;
        android.os.StrictMode$7 r29;
        android.os.StrictMode$8 r30;
        android.os.StrictMode$9 r31;
        android.os.StrictMode$ViolationLogger r33, r34;
        java.util.function.Consumer r35;

        <android.os.StrictMode: java.lang.String VISUAL_PROPERTY> = "persist.sys.strictmode.visual";

        <android.os.StrictMode: java.lang.String TAG> = "StrictMode";

        <android.os.StrictMode: int PENALTY_LOG> = 1073741824;

        <android.os.StrictMode: int PENALTY_GATHER> = -2147483648;

        <android.os.StrictMode: int PENALTY_FLASH> = 134217728;

        <android.os.StrictMode: int PENALTY_DROPBOX> = 67108864;

        <android.os.StrictMode: int PENALTY_DIALOG> = 536870912;

        <android.os.StrictMode: int PENALTY_DEATH_ON_NETWORK> = 33554432;

        <android.os.StrictMode: int PENALTY_DEATH_ON_FILE_URI_EXPOSURE> = 8388608;

        <android.os.StrictMode: int PENALTY_DEATH_ON_CLEARTEXT_NETWORK> = 16777216;

        <android.os.StrictMode: int PENALTY_DEATH> = 268435456;

        <android.os.StrictMode: int PENALTY_ALL> = -65536;

        <android.os.StrictMode: int NETWORK_POLICY_REJECT> = 2;

        <android.os.StrictMode: int NETWORK_POLICY_LOG> = 1;

        <android.os.StrictMode: int NETWORK_POLICY_ACCEPT> = 0;

        <android.os.StrictMode: long MIN_VM_INTERVAL_MS> = 1000L;

        <android.os.StrictMode: long MIN_LOG_INTERVAL_MS> = 1000L;

        <android.os.StrictMode: long MIN_DROPBOX_INTERVAL_MS> = 3000L;

        <android.os.StrictMode: long MIN_DIALOG_INTERVAL_MS> = 30000L;

        <android.os.StrictMode: int MAX_SPAN_TAGS> = 20;

        <android.os.StrictMode: int MAX_OFFENSES_PER_LOOP> = 10;

        <android.os.StrictMode: java.lang.String DISABLE_PROPERTY> = "persist.sys.strictmode.disable";

        <android.os.StrictMode: boolean DISABLE> = 0;

        <android.os.StrictMode: int DETECT_VM_UNTAGGED_SOCKET> = 256;

        <android.os.StrictMode: int DETECT_VM_REGISTRATION_LEAKS> = 16;

        <android.os.StrictMode: int DETECT_VM_NON_SDK_API_USAGE> = 512;

        <android.os.StrictMode: int DETECT_VM_INSTANCE_LEAKS> = 8;

        <android.os.StrictMode: int DETECT_VM_INCORRECT_CONTEXT_USE> = 4096;

        <android.os.StrictMode: int DETECT_VM_IMPLICIT_DIRECT_BOOT> = 1024;

        <android.os.StrictMode: int DETECT_VM_FILE_URI_EXPOSURE> = 32;

        <android.os.StrictMode: int DETECT_VM_CURSOR_LEAKS> = 1;

        <android.os.StrictMode: int DETECT_VM_CREDENTIAL_PROTECTED_WHILE_LOCKED> = 2048;

        <android.os.StrictMode: int DETECT_VM_CONTENT_URI_WITHOUT_PERMISSION> = 128;

        <android.os.StrictMode: int DETECT_VM_CLOSABLE_LEAKS> = 2;

        <android.os.StrictMode: int DETECT_VM_CLEARTEXT_NETWORK> = 64;

        <android.os.StrictMode: int DETECT_VM_ALL> = 65535;

        <android.os.StrictMode: int DETECT_VM_ACTIVITY_LEAKS> = 4;

        <android.os.StrictMode: int DETECT_THREAD_UNBUFFERED_IO> = 32;

        <android.os.StrictMode: int DETECT_THREAD_RESOURCE_MISMATCH> = 16;

        <android.os.StrictMode: int DETECT_THREAD_NETWORK> = 4;

        <android.os.StrictMode: int DETECT_THREAD_EXPLICIT_GC> = 64;

        <android.os.StrictMode: int DETECT_THREAD_DISK_WRITE> = 1;

        <android.os.StrictMode: int DETECT_THREAD_DISK_READ> = 2;

        <android.os.StrictMode: int DETECT_THREAD_CUSTOM> = 8;

        <android.os.StrictMode: int DETECT_THREAD_ALL> = 65535;

        <android.os.StrictMode: java.lang.String CLEARTEXT_PROPERTY> = "persist.sys.strictmode.clear";

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("StrictMode", 2);

        <android.os.StrictMode: boolean LOG_V> = $z0;

        r18 = new java.util.HashMap;

        specialinvoke r18.<java.util.HashMap: void <init>()>();

        <android.os.StrictMode: java.util.HashMap EMPTY_CLASS_LIMIT_MAP> = r18;

        $r2 = <android.os.StrictMode$VmPolicy: android.os.StrictMode$VmPolicy LAX>;

        <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy> = $r2;

        r0 = <android.os._$$Lambda$StrictMode$1yH8AK0bTwVwZOb9x8HoiSBdzr0: android.os.'-$$Lambda$StrictMode$1yH8AK0bTwVwZOb9x8HoiSBdzr0' INSTANCE>;

        r33 = (android.os.StrictMode$ViolationLogger) r0;

        <android.os.StrictMode: android.os.StrictMode$ViolationLogger LOGCAT_LOGGER> = r33;

        r34 = (android.os.StrictMode$ViolationLogger) r0;

        <android.os.StrictMode: android.os.StrictMode$ViolationLogger sLogger> = r34;

        r19 = new java.lang.ThreadLocal;

        specialinvoke r19.<java.lang.ThreadLocal: void <init>()>();

        <android.os.StrictMode: java.lang.ThreadLocal sThreadViolationListener> = r19;

        r20 = new java.lang.ThreadLocal;

        specialinvoke r20.<java.lang.ThreadLocal: void <init>()>();

        <android.os.StrictMode: java.lang.ThreadLocal sThreadViolationExecutor> = r20;

        r21 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke r21.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        <android.os.StrictMode: java.util.concurrent.atomic.AtomicInteger sDropboxCallsInFlight> = r21;

        $r6 = <android.os._$$Lambda$StrictMode$lu9ekkHJ2HMz0jd3F8K8MnhenxQ: android.os.'-$$Lambda$StrictMode$lu9ekkHJ2HMz0jd3F8K8MnhenxQ' INSTANCE>;

        r35 = (java.util.function.Consumer) $r6;

        <android.os.StrictMode: java.util.function.Consumer sNonSdkApiUsageConsumer> = r35;

        r22 = new android.os.StrictMode$1;

        specialinvoke r22.<android.os.StrictMode$1: void <init>()>();

        <android.os.StrictMode: java.lang.ThreadLocal gatheredViolations> = r22;

        r23 = new android.os.StrictMode$2;

        specialinvoke r23.<android.os.StrictMode$2: void <init>()>();

        <android.os.StrictMode: java.lang.ThreadLocal violationsBeingTimed> = r23;

        r24 = new android.os.StrictMode$3;

        specialinvoke r24.<android.os.StrictMode$3: void <init>()>();

        <android.os.StrictMode: java.lang.ThreadLocal THREAD_HANDLER> = r24;

        r25 = new android.os.StrictMode$4;

        specialinvoke r25.<android.os.StrictMode$4: void <init>()>();

        <android.os.StrictMode: java.lang.ThreadLocal THREAD_ANDROID_POLICY> = r25;

        r26 = new android.os.StrictMode$5;

        specialinvoke r26.<android.os.StrictMode$5: void <init>()>();

        <android.os.StrictMode: dalvik.system.BlockGuard$VmPolicy VM_ANDROID_POLICY> = r26;

        <android.os.StrictMode: long sLastInstanceCountCheckMillis> = 0L;

        <android.os.StrictMode: boolean sIsIdlerRegistered> = 0;

        r27 = new android.os.StrictMode$6;

        specialinvoke r27.<android.os.StrictMode$6: void <init>()>();

        <android.os.StrictMode: android.os.MessageQueue$IdleHandler sProcessIdleHandler> = r27;

        <android.os.StrictMode: boolean sUserKeyUnlocked> = 0;

        r28 = new java.util.HashMap;

        specialinvoke r28.<java.util.HashMap: void <init>()>();

        <android.os.StrictMode: java.util.HashMap sLastVmViolationTime> = r28;

        r29 = new android.os.StrictMode$7;

        specialinvoke r29.<android.os.StrictMode$7: void <init>()>();

        <android.os.StrictMode: android.os.StrictMode$Span NO_OP_SPAN> = r29;

        r30 = new android.os.StrictMode$8;

        specialinvoke r30.<android.os.StrictMode$8: void <init>()>();

        <android.os.StrictMode: java.lang.ThreadLocal sThisThreadSpanState> = r30;

        r31 = new android.os.StrictMode$9;

        specialinvoke r31.<android.os.StrictMode$9: void <init>()>();

        <android.os.StrictMode: android.util.Singleton sWindowManager> = r31;

        r32 = new java.util.HashMap;

        specialinvoke r32.<java.util.HashMap: void <init>()>();

        <android.os.StrictMode: java.util.HashMap sExpectedActivityInstanceCount> = r32;

        return;
    }

    private void <init>()
    {
        android.os.StrictMode r0;

        r0 := @this: android.os.StrictMode;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static java.util.HashMap access$100()
    {
        java.util.HashMap $r0;

        $r0 = <android.os.StrictMode: java.util.HashMap EMPTY_CLASS_LIMIT_MAP>;

        return $r0;
    }

    static boolean access$1000()
    {
        boolean $z0;

        $z0 = <android.os.StrictMode: boolean LOG_V>;

        return $z0;
    }

    static java.lang.ThreadLocal access$1100()
    {
        java.lang.ThreadLocal $r0;

        $r0 = <android.os.StrictMode: java.lang.ThreadLocal gatheredViolations>;

        return $r0;
    }

    static android.os.StrictMode$ViolationLogger access$1200()
    {
        android.os.StrictMode$ViolationLogger $r0;

        $r0 = <android.os.StrictMode: android.os.StrictMode$ViolationLogger sLogger>;

        return $r0;
    }

    static android.os.StrictMode$ViolationLogger access$1300()
    {
        android.os.StrictMode$ViolationLogger $r0;

        $r0 = <android.os.StrictMode: android.os.StrictMode$ViolationLogger LOGCAT_LOGGER>;

        return $r0;
    }

    static void access$1400(java.util.Map, long)
    {
        java.util.Map r0;
        long l0;

        r0 := @parameter0: java.util.Map;

        l0 := @parameter1: long;

        staticinvoke <android.os.StrictMode: void clampViolationTimeMap(java.util.Map,long)>(r0, l0);

        return;
    }

    static void access$1600(int, android.os.StrictMode$ViolationInfo)
    {
        int i0;
        android.os.StrictMode$ViolationInfo r0;

        i0 := @parameter0: int;

        r0 := @parameter1: android.os.StrictMode$ViolationInfo;

        staticinvoke <android.os.StrictMode: void dropboxViolationAsync(int,android.os.StrictMode$ViolationInfo)>(i0, r0);

        return;
    }

    static void access$1700(int, android.os.StrictMode$ViolationInfo)
    {
        int i0;
        android.os.StrictMode$ViolationInfo r0;

        i0 := @parameter0: int;

        r0 := @parameter1: android.os.StrictMode$ViolationInfo;

        staticinvoke <android.os.StrictMode: void handleApplicationStrictModeViolation(int,android.os.StrictMode$ViolationInfo)>(i0, r0);

        return;
    }

    static java.lang.ThreadLocal access$1800()
    {
        java.lang.ThreadLocal $r0;

        $r0 = <android.os.StrictMode: java.lang.ThreadLocal sThreadViolationListener>;

        return $r0;
    }

    static java.lang.ThreadLocal access$1900()
    {
        java.lang.ThreadLocal $r0;

        $r0 = <android.os.StrictMode: java.lang.ThreadLocal sThreadViolationExecutor>;

        return $r0;
    }

    static java.util.HashMap access$200()
    {
        java.util.HashMap $r0;

        $r0 = <android.os.StrictMode: java.util.HashMap sExpectedActivityInstanceCount>;

        return $r0;
    }

    static void access$2000(java.lang.String, int)
    {
        java.lang.String r0;
        int i0;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        staticinvoke <android.os.StrictMode: void onCredentialProtectedPathAccess(java.lang.String,int)>(r0, i0);

        return;
    }

    static long access$2100()
    {
        long $l0;

        $l0 = <android.os.StrictMode: long sLastInstanceCountCheckMillis>;

        return $l0;
    }

    static long access$2102(long)
    {
        long l0;

        l0 := @parameter0: long;

        <android.os.StrictMode: long sLastInstanceCountCheckMillis> = l0;

        return l0;
    }

    static java.lang.ThreadLocal access$2700()
    {
        java.lang.ThreadLocal $r0;

        $r0 = <android.os.StrictMode: java.lang.ThreadLocal sThisThreadSpanState>;

        return $r0;
    }

    static boolean access$500()
    {
        boolean $z0;

        $z0 = staticinvoke <android.os.StrictMode: boolean tooManyViolationsThisLoop()>();

        return $z0;
    }

    static java.lang.ThreadLocal access$700()
    {
        java.lang.ThreadLocal $r0;

        $r0 = <android.os.StrictMode: java.lang.ThreadLocal violationsBeingTimed>;

        return $r0;
    }

    static android.util.Singleton access$800()
    {
        android.util.Singleton $r0;

        $r0 = <android.os.StrictMode: android.util.Singleton sWindowManager>;

        return $r0;
    }

    static java.lang.ThreadLocal access$900()
    {
        java.lang.ThreadLocal $r0;

        $r0 = <android.os.StrictMode: java.lang.ThreadLocal THREAD_HANDLER>;

        return $r0;
    }

    public static android.os.StrictMode$ThreadPolicy allowThreadDiskReads()
    {
        android.os.StrictMode$ThreadPolicy $r0;
        int $i0;
        java.lang.ThreadLocal $r1, $r3;
        java.lang.Object $r2, $r5;
        android.os.StrictMode$OnThreadViolationListener $r4;
        java.util.concurrent.Executor $r6;

        $r0 = new android.os.StrictMode$ThreadPolicy;

        $i0 = staticinvoke <android.os.StrictMode: int allowThreadDiskReadsMask()>();

        $r1 = <android.os.StrictMode: java.lang.ThreadLocal sThreadViolationListener>;

        $r2 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r4 = (android.os.StrictMode$OnThreadViolationListener) $r2;

        $r3 = <android.os.StrictMode: java.lang.ThreadLocal sThreadViolationExecutor>;

        $r5 = virtualinvoke $r3.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r6 = (java.util.concurrent.Executor) $r5;

        specialinvoke $r0.<android.os.StrictMode$ThreadPolicy: void <init>(int,android.os.StrictMode$OnThreadViolationListener,java.util.concurrent.Executor,android.os.StrictMode$1)>($i0, $r4, $r6, null);

        return $r0;
    }

    public static int allowThreadDiskReadsMask()
    {
        int i0, i1;

        i0 = staticinvoke <android.os.StrictMode: int getThreadPolicyMask()>();

        i1 = i0 & -3;

        if i1 == i0 goto label1;

        staticinvoke <android.os.StrictMode: void setThreadPolicyMask(int)>(i1);

     label1:
        return i0;
    }

    public static android.os.StrictMode$ThreadPolicy allowThreadDiskWrites()
    {
        android.os.StrictMode$ThreadPolicy $r0;
        int $i0;
        java.lang.ThreadLocal $r1, $r3;
        java.lang.Object $r2, $r5;
        android.os.StrictMode$OnThreadViolationListener $r4;
        java.util.concurrent.Executor $r6;

        $r0 = new android.os.StrictMode$ThreadPolicy;

        $i0 = staticinvoke <android.os.StrictMode: int allowThreadDiskWritesMask()>();

        $r1 = <android.os.StrictMode: java.lang.ThreadLocal sThreadViolationListener>;

        $r2 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r4 = (android.os.StrictMode$OnThreadViolationListener) $r2;

        $r3 = <android.os.StrictMode: java.lang.ThreadLocal sThreadViolationExecutor>;

        $r5 = virtualinvoke $r3.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r6 = (java.util.concurrent.Executor) $r5;

        specialinvoke $r0.<android.os.StrictMode$ThreadPolicy: void <init>(int,android.os.StrictMode$OnThreadViolationListener,java.util.concurrent.Executor,android.os.StrictMode$1)>($i0, $r4, $r6, null);

        return $r0;
    }

    public static int allowThreadDiskWritesMask()
    {
        int i0, i1;

        i0 = staticinvoke <android.os.StrictMode: int getThreadPolicyMask()>();

        i1 = i0 & -4;

        if i1 == i0 goto label1;

        staticinvoke <android.os.StrictMode: void setThreadPolicyMask(int)>(i1);

     label1:
        return i0;
    }

    public static android.os.StrictMode$ThreadPolicy allowThreadViolations()
    {
        android.os.StrictMode$ThreadPolicy r0;

        r0 = staticinvoke <android.os.StrictMode: android.os.StrictMode$ThreadPolicy getThreadPolicy()>();

        staticinvoke <android.os.StrictMode: void setThreadPolicyMask(int)>(0);

        return r0;
    }

    public static android.os.StrictMode$VmPolicy allowVmViolations()
    {
        android.os.StrictMode$VmPolicy r0, $r1;

        r0 = staticinvoke <android.os.StrictMode: android.os.StrictMode$VmPolicy getVmPolicy()>();

        $r1 = <android.os.StrictMode$VmPolicy: android.os.StrictMode$VmPolicy LAX>;

        <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy> = $r1;

        return r0;
    }

    private static void clampViolationTimeMap(java.util.Map, long)
    {
        long l0, $l1;
        java.util.Set $r0;
        boolean $z0;
        java.lang.Object $r1, $r3;
        java.util.Map$Entry $r2;
        java.lang.Long $r4;
        byte $b2;
        java.util.Map r5;
        java.util.Iterator r6;

        r5 := @parameter0: java.util.Map;

        l0 := @parameter1: long;

        $r0 = interfaceinvoke r5.<java.util.Map: java.util.Set entrySet()>();

        r6 = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r1 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        $r2 = (java.util.Map$Entry) $r1;

        $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r4 = (java.lang.Long) $r3;

        $l1 = virtualinvoke $r4.<java.lang.Long: long longValue()>();

        $b2 = $l1 cmp l0;

        if $b2 >= 0 goto label2;

        interfaceinvoke r6.<java.util.Iterator: void remove()>();

     label2:
        goto label1;

     label3:
        return;
    }

    static void clearGatheredViolations()
    {
        java.lang.ThreadLocal $r0;

        $r0 = <android.os.StrictMode: java.lang.ThreadLocal gatheredViolations>;

        virtualinvoke $r0.<java.lang.ThreadLocal: void set(java.lang.Object)>(null);

        return;
    }

    public static void conditionallyCheckInstanceCounts()
    {
        android.os.StrictMode$VmPolicy r0;
        java.lang.Class[] r1, $r7;
        long[] r2;
        java.lang.Class r3;
        int i0, $i2, i5, i6;
        long l1, $l3;
        java.util.HashMap $r4, $r5, $r9;
        java.util.Set $r6;
        java.lang.Object[] $r8;
        java.lang.Object $r10;
        java.lang.Integer $r11;
        byte $b4;
        android.os.strictmode.InstanceCountViolation $r12;

        r0 = staticinvoke <android.os.StrictMode: android.os.StrictMode$VmPolicy getVmPolicy()>();

        $r4 = r0.<android.os.StrictMode$VmPolicy: java.util.HashMap classInstanceLimit>;

        i5 = virtualinvoke $r4.<java.util.HashMap: int size()>();

        if i5 != 0 goto label1;

        return;

     label1:
        staticinvoke <java.lang.System: void gc()>();

        staticinvoke <java.lang.System: void runFinalization()>();

        staticinvoke <java.lang.System: void gc()>();

        $r5 = r0.<android.os.StrictMode$VmPolicy: java.util.HashMap classInstanceLimit>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.util.Set keySet()>();

        $r7 = newarray (java.lang.Class)[i5];

        $r8 = interfaceinvoke $r6.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        r1 = (java.lang.Class[]) $r8;

        r2 = staticinvoke <dalvik.system.VMDebug: long[] countInstancesOfClasses(java.lang.Class[],boolean)>(r1, 0);

        i6 = 0;

     label2:
        $i2 = lengthof r1;

        if i6 >= $i2 goto label4;

        r3 = r1[i6];

        $r9 = r0.<android.os.StrictMode$VmPolicy: java.util.HashMap classInstanceLimit>;

        $r10 = virtualinvoke $r9.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r3);

        $r11 = (java.lang.Integer) $r10;

        i0 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();

        l1 = r2[i6];

        $l3 = (long) i0;

        $b4 = l1 cmp $l3;

        if $b4 <= 0 goto label3;

        $r12 = new android.os.strictmode.InstanceCountViolation;

        specialinvoke $r12.<android.os.strictmode.InstanceCountViolation: void <init>(java.lang.Class,long,int)>(r3, l1, i0);

        staticinvoke <android.os.StrictMode: void onVmPolicyViolation(android.os.strictmode.Violation)>($r12);

     label3:
        i6 = i6 + 1;

        goto label2;

     label4:
        return;
    }

    public static void decrementExpectedActivityCount(java.lang.Class)
    {
        java.lang.Integer r0, $r5;
        long l0, $l4;
        android.os.StrictMode$VmPolicy $r1;
        int $i1, $i2, $i3, $i6, $i7, i8, i9;
        java.util.HashMap $r2, $r4, $r8;
        java.lang.Object $r3;
        byte $b5;
        android.os.strictmode.InstanceCountViolation $r7;
        java.lang.Throwable $r10;
        java.lang.Class r11;

        r11 := @parameter0: java.lang.Class;

        if r11 != null goto label01;

        return;

     label01:
        entermonitor class "Landroid/os/StrictMode;";

     label02:
        $r1 = <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy>;

        $i1 = $r1.<android.os.StrictMode$VmPolicy: int mask>;

        $i2 = $i1 & 4;

        if $i2 != 0 goto label04;

        exitmonitor class "Landroid/os/StrictMode;";

     label03:
        return;

     label04:
        $r2 = <android.os.StrictMode: java.util.HashMap sExpectedActivityInstanceCount>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r11);

        r0 = (java.lang.Integer) $r3;

     label05:
        if r0 == null goto label10;

     label06:
        $i6 = virtualinvoke r0.<java.lang.Integer: int intValue()>();

        if $i6 != 0 goto label08;

     label07:
        goto label10;

     label08:
        $i7 = virtualinvoke r0.<java.lang.Integer: int intValue()>();

        i8 = $i7 - 1;

     label09:
        goto label11;

     label10:
        i8 = 0;

     label11:
        if i8 != 0 goto label14;

     label12:
        $r8 = <android.os.StrictMode: java.util.HashMap sExpectedActivityInstanceCount>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r11);

     label13:
        goto label15;

     label14:
        $r4 = <android.os.StrictMode: java.util.HashMap sExpectedActivityInstanceCount>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i8);

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, $r5);

     label15:
        i9 = i8 + 1;

     label16:
        exitmonitor class "Landroid/os/StrictMode;";

     label17:
        $i3 = staticinvoke <android.os.StrictMode$InstanceTracker: int getInstanceCount(java.lang.Class)>(r11);

        if $i3 > i9 goto label18;

        return;

     label18:
        staticinvoke <java.lang.System: void gc()>();

        staticinvoke <java.lang.System: void runFinalization()>();

        staticinvoke <java.lang.System: void gc()>();

        l0 = staticinvoke <dalvik.system.VMDebug: long countInstancesOfClass(java.lang.Class,boolean)>(r11, 0);

        $l4 = (long) i9;

        $b5 = l0 cmp $l4;

        if $b5 <= 0 goto label19;

        $r7 = new android.os.strictmode.InstanceCountViolation;

        specialinvoke $r7.<android.os.strictmode.InstanceCountViolation: void <init>(java.lang.Class,long,int)>(r11, l0, i9);

        staticinvoke <android.os.StrictMode: void onVmPolicyViolation(android.os.strictmode.Violation)>($r7);

     label19:
        return;

     label20:
        $r10 := @caughtexception;

     label21:
        exitmonitor class "Landroid/os/StrictMode;";

     label22:
        throw $r10;

        catch java.lang.Throwable from label02 to label03 with label20;
        catch java.lang.Throwable from label04 to label05 with label20;
        catch java.lang.Throwable from label06 to label07 with label20;
        catch java.lang.Throwable from label08 to label09 with label20;
        catch java.lang.Throwable from label12 to label13 with label20;
        catch java.lang.Throwable from label14 to label15 with label20;
        catch java.lang.Throwable from label16 to label17 with label20;
        catch java.lang.Throwable from label21 to label22 with label20;
    }

    public static void disableDeathOnFileUriExposure()
    {
        android.os.StrictMode$VmPolicy $r0, $r1, $r2, $r3, $r4;
        int $i0, $i1;
        java.util.concurrent.Executor $r5;
        android.os.StrictMode$OnVmViolationListener $r6;
        java.util.HashMap $r7;

        $r0 = new android.os.StrictMode$VmPolicy;

        $r1 = <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy>;

        $i0 = $r1.<android.os.StrictMode$VmPolicy: int mask>;

        $i1 = -8388641 & $i0;

        $r2 = <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy>;

        $r7 = $r2.<android.os.StrictMode$VmPolicy: java.util.HashMap classInstanceLimit>;

        $r3 = <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy>;

        $r6 = $r3.<android.os.StrictMode$VmPolicy: android.os.StrictMode$OnVmViolationListener mListener>;

        $r4 = <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy>;

        $r5 = $r4.<android.os.StrictMode$VmPolicy: java.util.concurrent.Executor mCallbackExecutor>;

        specialinvoke $r0.<android.os.StrictMode$VmPolicy: void <init>(int,java.util.HashMap,android.os.StrictMode$OnVmViolationListener,java.util.concurrent.Executor,android.os.StrictMode$1)>($i1, $r7, $r6, $r5, null);

        <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy> = $r0;

        return;
    }

    private static void dropboxViolationAsync(int, android.os.StrictMode$ViolationInfo)
    {
        int i0, i1;
        android.os.StrictMode$ViolationInfo r0;
        java.util.concurrent.atomic.AtomicInteger $r2, $r9;
        boolean $z0;
        android.os.Handler $r3;
        android.os._$$Lambda$StrictMode$yZJXPvy2veRNA_xL_SWdXzX_OLg $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r8;

        i0 := @parameter0: int;

        r0 := @parameter1: android.os.StrictMode$ViolationInfo;

        $r2 = <android.os.StrictMode: java.util.concurrent.atomic.AtomicInteger sDropboxCallsInFlight>;

        i1 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        if i1 <= 20 goto label1;

        $r9 = <android.os.StrictMode: java.util.concurrent.atomic.AtomicInteger sDropboxCallsInFlight>;

        virtualinvoke $r9.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        return;

     label1:
        $z0 = <android.os.StrictMode: boolean LOG_V>;

        if $z0 == 0 goto label2;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dropboxing async; in-flight=");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("StrictMode", $r8);

     label2:
        $r3 = staticinvoke <com.android.internal.os.BackgroundThread: android.os.Handler getHandler()>();

        $r4 = new android.os._$$Lambda$StrictMode$yZJXPvy2veRNA_xL_SWdXzX_OLg;

        specialinvoke $r4.<android.os._$$Lambda$StrictMode$yZJXPvy2veRNA_xL_SWdXzX_OLg: void <init>(int,android.os.StrictMode$ViolationInfo)>(i0, r0);

        virtualinvoke $r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r4);

        return;
    }

    public static void enableDeathOnFileUriExposure()
    {
        android.os.StrictMode$VmPolicy $r0, $r1, $r2, $r3, $r4;
        int $i0, $i1, $i2;
        java.util.concurrent.Executor $r5;
        android.os.StrictMode$OnVmViolationListener $r6;
        java.util.HashMap $r7;

        $r0 = new android.os.StrictMode$VmPolicy;

        $r1 = <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy>;

        $i0 = $r1.<android.os.StrictMode$VmPolicy: int mask>;

        $i1 = $i0 | 32;

        $i2 = 8388608 | $i1;

        $r2 = <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy>;

        $r7 = $r2.<android.os.StrictMode$VmPolicy: java.util.HashMap classInstanceLimit>;

        $r3 = <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy>;

        $r6 = $r3.<android.os.StrictMode$VmPolicy: android.os.StrictMode$OnVmViolationListener mListener>;

        $r4 = <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy>;

        $r5 = $r4.<android.os.StrictMode$VmPolicy: java.util.concurrent.Executor mCallbackExecutor>;

        specialinvoke $r0.<android.os.StrictMode$VmPolicy: void <init>(int,java.util.HashMap,android.os.StrictMode$OnVmViolationListener,java.util.concurrent.Executor,android.os.StrictMode$1)>($i2, $r7, $r6, $r5, null);

        <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy> = $r0;

        return;
    }

    public static void enableDefaults()
    {
        android.os.StrictMode$ThreadPolicy$Builder $r0, $r1, $r2;
        android.os.StrictMode$ThreadPolicy $r3;
        android.os.StrictMode$VmPolicy$Builder $r4, $r5, $r6;
        android.os.StrictMode$VmPolicy $r7;

        $r0 = new android.os.StrictMode$ThreadPolicy$Builder;

        specialinvoke $r0.<android.os.StrictMode$ThreadPolicy$Builder: void <init>()>();

        $r1 = virtualinvoke $r0.<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder detectAll()>();

        $r2 = virtualinvoke $r1.<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder penaltyLog()>();

        $r3 = virtualinvoke $r2.<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy build()>();

        staticinvoke <android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>($r3);

        $r4 = new android.os.StrictMode$VmPolicy$Builder;

        specialinvoke $r4.<android.os.StrictMode$VmPolicy$Builder: void <init>()>();

        $r5 = virtualinvoke $r4.<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder detectAll()>();

        $r6 = virtualinvoke $r5.<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder penaltyLog()>();

        $r7 = virtualinvoke $r6.<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy build()>();

        staticinvoke <android.os.StrictMode: void setVmPolicy(android.os.StrictMode$VmPolicy)>($r7);

        return;
    }

    public static android.os.StrictMode$Span enterCriticalSpan(java.lang.String)
    {
        android.os.StrictMode$ThreadSpanState r0;
        java.lang.StringBuilder r1;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r2;
        java.lang.ThreadLocal $r3;
        java.lang.Object $r4;
        android.os.StrictMode$Span $r5, $r6, $r8, $r11, $r17, $r19, $r20, r23;
        long $l0;
        int $i2, $i3, $i4, $i6, $i7;
        java.lang.String $r16, r22;
        java.lang.Throwable $r21;

        r22 := @parameter0: java.lang.String;

        $z0 = <android.os.Build: boolean IS_USER>;

        if $z0 == 0 goto label01;

        $r20 = <android.os.StrictMode: android.os.StrictMode$Span NO_OP_SPAN>;

        return $r20;

     label01:
        if r22 == null goto label12;

        $z1 = virtualinvoke r22.<java.lang.String: boolean isEmpty()>();

        if $z1 != 0 goto label12;

        $r3 = <android.os.StrictMode: java.lang.ThreadLocal sThisThreadSpanState>;

        $r4 = virtualinvoke $r3.<java.lang.ThreadLocal: java.lang.Object get()>();

        r0 = (android.os.StrictMode$ThreadSpanState) $r4;

        entermonitor r0;

     label02:
        $r5 = r0.<android.os.StrictMode$ThreadSpanState: android.os.StrictMode$Span mFreeListHead>;

        if $r5 == null goto label04;

        r23 = r0.<android.os.StrictMode$ThreadSpanState: android.os.StrictMode$Span mFreeListHead>;

        $r19 = staticinvoke <android.os.StrictMode$Span: android.os.StrictMode$Span access$2300(android.os.StrictMode$Span)>(r23);

        r0.<android.os.StrictMode$ThreadSpanState: android.os.StrictMode$Span mFreeListHead> = $r19;

        $i6 = r0.<android.os.StrictMode$ThreadSpanState: int mFreeListSize>;

        $i7 = $i6 - 1;

        r0.<android.os.StrictMode$ThreadSpanState: int mFreeListSize> = $i7;

     label03:
        goto label05;

     label04:
        $r6 = new android.os.StrictMode$Span;

        specialinvoke $r6.<android.os.StrictMode$Span: void <init>(android.os.StrictMode$ThreadSpanState)>(r0);

        r23 = $r6;

     label05:
        staticinvoke <android.os.StrictMode$Span: java.lang.String access$2402(android.os.StrictMode$Span,java.lang.String)>(r23, r22);

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        staticinvoke <android.os.StrictMode$Span: long access$2502(android.os.StrictMode$Span,long)>(r23, $l0);

        $r8 = r0.<android.os.StrictMode$ThreadSpanState: android.os.StrictMode$Span mActiveHead>;

        staticinvoke <android.os.StrictMode$Span: android.os.StrictMode$Span access$2302(android.os.StrictMode$Span,android.os.StrictMode$Span)>(r23, $r8);

        staticinvoke <android.os.StrictMode$Span: android.os.StrictMode$Span access$2602(android.os.StrictMode$Span,android.os.StrictMode$Span)>(r23, null);

        r0.<android.os.StrictMode$ThreadSpanState: android.os.StrictMode$Span mActiveHead> = r23;

        $i2 = r0.<android.os.StrictMode$ThreadSpanState: int mActiveSize>;

        $i3 = $i2 + 1;

        r0.<android.os.StrictMode$ThreadSpanState: int mActiveSize> = $i3;

        $r11 = staticinvoke <android.os.StrictMode$Span: android.os.StrictMode$Span access$2300(android.os.StrictMode$Span)>(r23);

        if $r11 == null goto label06;

        $r17 = staticinvoke <android.os.StrictMode$Span: android.os.StrictMode$Span access$2300(android.os.StrictMode$Span)>(r23);

        staticinvoke <android.os.StrictMode$Span: android.os.StrictMode$Span access$2602(android.os.StrictMode$Span,android.os.StrictMode$Span)>($r17, r23);

     label06:
        $z2 = <android.os.StrictMode: boolean LOG_V>;

        if $z2 == 0 goto label07;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Span enter=");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; size=");

        $i4 = r0.<android.os.StrictMode$ThreadSpanState: int mActiveSize>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r16 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("StrictMode", $r16);

     label07:
        exitmonitor r0;

     label08:
        return r23;

     label09:
        $r21 := @caughtexception;

     label10:
        exitmonitor r0;

     label11:
        throw $r21;

     label12:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("name must be non-null and non-empty");

        throw $r2;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public static android.os.StrictMode$ThreadPolicy getThreadPolicy()
    {
        android.os.StrictMode$ThreadPolicy $r0;
        int $i0;
        java.lang.ThreadLocal $r1, $r3;
        java.lang.Object $r2, $r5;
        android.os.StrictMode$OnThreadViolationListener $r4;
        java.util.concurrent.Executor $r6;

        $r0 = new android.os.StrictMode$ThreadPolicy;

        $i0 = staticinvoke <android.os.StrictMode: int getThreadPolicyMask()>();

        $r1 = <android.os.StrictMode: java.lang.ThreadLocal sThreadViolationListener>;

        $r2 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r4 = (android.os.StrictMode$OnThreadViolationListener) $r2;

        $r3 = <android.os.StrictMode: java.lang.ThreadLocal sThreadViolationExecutor>;

        $r5 = virtualinvoke $r3.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r6 = (java.util.concurrent.Executor) $r5;

        specialinvoke $r0.<android.os.StrictMode$ThreadPolicy: void <init>(int,android.os.StrictMode$OnThreadViolationListener,java.util.concurrent.Executor,android.os.StrictMode$1)>($i0, $r4, $r6, null);

        return $r0;
    }

    public static int getThreadPolicyMask()
    {
        dalvik.system.BlockGuard$Policy r0;
        boolean $z0;
        android.os.StrictMode$AndroidBlockGuardPolicy $r1;
        int $i0;

        r0 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        $z0 = r0 instanceof android.os.StrictMode$AndroidBlockGuardPolicy;

        if $z0 == 0 goto label1;

        $r1 = (android.os.StrictMode$AndroidBlockGuardPolicy) r0;

        $i0 = virtualinvoke $r1.<android.os.StrictMode$AndroidBlockGuardPolicy: int getThreadPolicyMask()>();

        return $i0;

     label1:
        return 0;
    }

    public static android.os.StrictMode$VmPolicy getVmPolicy()
    {
        java.lang.Throwable $r0;
        android.os.StrictMode$VmPolicy r1;

        entermonitor class "Landroid/os/StrictMode;";

     label1:
        r1 = <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy>;

        exitmonitor class "Landroid/os/StrictMode;";

     label2:
        return r1;

     label3:
        $r0 := @caughtexception;

     label4:
        exitmonitor class "Landroid/os/StrictMode;";

     label5:
        throw $r0;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private static void handleApplicationStrictModeViolation(int, android.os.StrictMode$ViolationInfo)
    {
        int i0, i1;
        android.app.IActivityManager r0;
        android.os.IBinder $r1;
        java.lang.Throwable $r2;
        android.os.RemoteException $r3;
        boolean $z0;
        android.os.StrictMode$ViolationInfo r4;

        i0 := @parameter0: int;

        r4 := @parameter1: android.os.StrictMode$ViolationInfo;

        i1 = staticinvoke <android.os.StrictMode: int getThreadPolicyMask()>();

     label01:
        staticinvoke <android.os.StrictMode: void setThreadPolicyMask(int)>(0);

        r0 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

     label02:
        if r0 != null goto label05;

     label03:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("StrictMode", "No activity manager; failed to Dropbox violation.");

     label04:
        goto label12;

     label05:
        $r1 = staticinvoke <com.android.internal.os.RuntimeInit: android.os.IBinder getApplicationObject()>();

        interfaceinvoke r0.<android.app.IActivityManager: void handleApplicationStrictModeViolation(android.os.IBinder,int,android.os.StrictMode$ViolationInfo)>($r1, i0, r4);

     label06:
        goto label12;

     label07:
        $r2 := @caughtexception;

        goto label13;

     label08:
        $r3 := @caughtexception;

     label09:
        $z0 = $r3 instanceof android.os.DeadObjectException;

        if $z0 == 0 goto label11;

     label10:
        goto label12;

     label11:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StrictMode", "RemoteException handling StrictMode violation", $r3);

     label12:
        staticinvoke <android.os.StrictMode: void setThreadPolicyMask(int)>(i1);

        return;

     label13:
        staticinvoke <android.os.StrictMode: void setThreadPolicyMask(int)>(i1);

        throw $r2;

        catch android.os.RemoteException from label01 to label02 with label08;
        catch java.lang.Throwable from label01 to label02 with label07;
        catch android.os.RemoteException from label03 to label04 with label08;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch android.os.RemoteException from label05 to label06 with label08;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label09 to label10 with label07;
        catch java.lang.Throwable from label11 to label12 with label07;
    }

    static boolean hasGatheredViolations()
    {
        java.lang.ThreadLocal $r0;
        java.lang.Object $r1;
        boolean z0;

        $r0 = <android.os.StrictMode: java.lang.ThreadLocal gatheredViolations>;

        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        if $r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static void incrementExpectedActivityCount(java.lang.Class)
    {
        java.lang.Integer r0, $r5;
        android.os.StrictMode$VmPolicy $r1;
        int $i0, $i1, $i2, $i3, i4;
        java.util.HashMap $r2, $r4;
        java.lang.Object $r3;
        java.lang.Throwable $r7;
        java.lang.Class r8;

        r8 := @parameter0: java.lang.Class;

        if r8 != null goto label01;

        return;

     label01:
        entermonitor class "Landroid/os/StrictMode;";

     label02:
        $r1 = <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy>;

        $i0 = $r1.<android.os.StrictMode$VmPolicy: int mask>;

        $i1 = $i0 & 4;

        if $i1 != 0 goto label04;

        exitmonitor class "Landroid/os/StrictMode;";

     label03:
        return;

     label04:
        $r2 = <android.os.StrictMode: java.util.HashMap sExpectedActivityInstanceCount>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r8);

        r0 = (java.lang.Integer) $r3;

     label05:
        if r0 != null goto label08;

     label06:
        $i3 = staticinvoke <android.os.StrictMode$InstanceTracker: int getInstanceCount(java.lang.Class)>(r8);

        i4 = $i3 + 1;

     label07:
        goto label09;

     label08:
        $i2 = virtualinvoke r0.<java.lang.Integer: int intValue()>();

        i4 = $i2 + 1;

     label09:
        $r4 = <android.os.StrictMode: java.util.HashMap sExpectedActivityInstanceCount>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, $r5);

     label10:
        exitmonitor class "Landroid/os/StrictMode;";

     label11:
        return;

     label12:
        $r7 := @caughtexception;

     label13:
        exitmonitor class "Landroid/os/StrictMode;";

     label14:
        throw $r7;

        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public static void initThreadDefaults(android.content.pm.ApplicationInfo)
    {
        android.content.pm.ApplicationInfo r0;
        android.os.StrictMode$ThreadPolicy$Builder $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        int i0;
        android.os.StrictMode$ThreadPolicy $r12;

        r0 := @parameter0: android.content.pm.ApplicationInfo;

        $r2 = new android.os.StrictMode$ThreadPolicy$Builder;

        specialinvoke $r2.<android.os.StrictMode$ThreadPolicy$Builder: void <init>()>();

        if r0 == null goto label1;

        i0 = r0.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        goto label2;

     label1:
        i0 = 10000;

     label2:
        if i0 < 11 goto label3;

        virtualinvoke $r2.<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder detectNetwork()>();

        virtualinvoke $r2.<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder penaltyDeathOnNetwork()>();

     label3:
        $z0 = <android.os.Build: boolean IS_USER>;

        if $z0 != 0 goto label6;

        $z1 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("persist.sys.strictmode.disable", 0);

        if $z1 == 0 goto label4;

        goto label6;

     label4:
        $z2 = <android.os.Build: boolean IS_USERDEBUG>;

        if $z2 == 0 goto label5;

        $z5 = staticinvoke <android.os.StrictMode: boolean isBundledSystemApp(android.content.pm.ApplicationInfo)>(r0);

        if $z5 == 0 goto label6;

        virtualinvoke $r2.<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder detectAll()>();

        virtualinvoke $r2.<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder penaltyDropBox()>();

        $z6 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("persist.sys.strictmode.visual", 0);

        if $z6 == 0 goto label6;

        virtualinvoke $r2.<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder penaltyFlashScreen()>();

        goto label6;

     label5:
        $z3 = <android.os.Build: boolean IS_ENG>;

        if $z3 == 0 goto label6;

        $z4 = staticinvoke <android.os.StrictMode: boolean isBundledSystemApp(android.content.pm.ApplicationInfo)>(r0);

        if $z4 == 0 goto label6;

        virtualinvoke $r2.<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder detectAll()>();

        virtualinvoke $r2.<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder penaltyDropBox()>();

        virtualinvoke $r2.<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder penaltyLog()>();

        virtualinvoke $r2.<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder penaltyFlashScreen()>();

     label6:
        $r12 = virtualinvoke $r2.<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy build()>();

        staticinvoke <android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>($r12);

        return;
    }

    public static void initVmDefaults(android.content.pm.ApplicationInfo)
    {
        android.content.pm.ApplicationInfo r0;
        android.os.StrictMode$VmPolicy$Builder $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        int i0;
        android.os.StrictMode$VmPolicy $r11;

        r0 := @parameter0: android.content.pm.ApplicationInfo;

        $r2 = new android.os.StrictMode$VmPolicy$Builder;

        specialinvoke $r2.<android.os.StrictMode$VmPolicy$Builder: void <init>()>();

        if r0 == null goto label1;

        i0 = r0.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        goto label2;

     label1:
        i0 = 10000;

     label2:
        if i0 < 24 goto label3;

        virtualinvoke $r2.<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder detectFileUriExposure()>();

        virtualinvoke $r2.<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder penaltyDeathOnFileUriExposure()>();

     label3:
        $z0 = <android.os.Build: boolean IS_USER>;

        if $z0 != 0 goto label6;

        $z1 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("persist.sys.strictmode.disable", 0);

        if $z1 == 0 goto label4;

        goto label6;

     label4:
        $z2 = <android.os.Build: boolean IS_USERDEBUG>;

        if $z2 == 0 goto label5;

        $z5 = staticinvoke <android.os.StrictMode: boolean isBundledSystemApp(android.content.pm.ApplicationInfo)>(r0);

        if $z5 == 0 goto label6;

        virtualinvoke $r2.<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder detectAll()>();

        virtualinvoke $r2.<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder permitActivityLeaks()>();

        virtualinvoke $r2.<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder penaltyDropBox()>();

        goto label6;

     label5:
        $z3 = <android.os.Build: boolean IS_ENG>;

        if $z3 == 0 goto label6;

        $z4 = staticinvoke <android.os.StrictMode: boolean isBundledSystemApp(android.content.pm.ApplicationInfo)>(r0);

        if $z4 == 0 goto label6;

        virtualinvoke $r2.<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder detectAll()>();

        virtualinvoke $r2.<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder penaltyDropBox()>();

        virtualinvoke $r2.<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder penaltyLog()>();

     label6:
        $r11 = virtualinvoke $r2.<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy build()>();

        staticinvoke <android.os.StrictMode: void setVmPolicy(android.os.StrictMode$VmPolicy)>($r11);

        return;
    }

    public static boolean isBundledSystemApp(android.content.pm.ApplicationInfo)
    {
        android.content.pm.ApplicationInfo r0;
        java.lang.String $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @parameter0: android.content.pm.ApplicationInfo;

        if r0 == null goto label7;

        $r1 = r0.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        if $r1 != null goto label1;

        goto label7;

     label1:
        $z0 = virtualinvoke r0.<android.content.pm.ApplicationInfo: boolean isSystemApp()>();

        if $z0 == 0 goto label6;

        $r2 = r0.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("com.android.vending");

        if $z1 != 0 goto label5;

        $r3 = r0.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("com.android.chrome");

        if $z2 == 0 goto label2;

        goto label5;

     label2:
        $r4 = r0.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("com.android.phone");

        if $z3 == 0 goto label3;

        return 0;

     label3:
        $r5 = r0.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $z4 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("android");

        if $z4 != 0 goto label4;

        $r6 = r0.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $z5 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>("android.");

        if $z5 != 0 goto label4;

        $r7 = r0.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $z6 = virtualinvoke $r7.<java.lang.String: boolean startsWith(java.lang.String)>("com.android.");

        if $z6 == 0 goto label6;

     label4:
        return 1;

     label5:
        return 0;

     label6:
        return 0;

     label7:
        return 1;
    }

    private static boolean isUserKeyUnlocked(int)
    {
        int i0;
        boolean z0;
        android.os.IBinder $r0;
        android.os.RemoteException $r1;
        android.os.storage.IStorageManager r2;

        i0 := @parameter0: int;

        $r0 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("mount");

        r2 = staticinvoke <android.os.storage.IStorageManager$Stub: android.os.storage.IStorageManager asInterface(android.os.IBinder)>($r0);

        if r2 == null goto label4;

     label1:
        z0 = interfaceinvoke r2.<android.os.storage.IStorageManager: boolean isUserKeyUnlocked(int)>(i0);

     label2:
        return z0;

     label3:
        $r1 := @caughtexception;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    static void lambda$dropboxViolationAsync$2(int, android.os.StrictMode$ViolationInfo)
    {
        java.util.concurrent.atomic.AtomicInteger $r0;
        boolean $z0;
        java.lang.StringBuilder $r1;
        java.lang.String $r4;
        int i1, i2;
        android.os.StrictMode$ViolationInfo r5;

        i1 := @parameter0: int;

        r5 := @parameter1: android.os.StrictMode$ViolationInfo;

        staticinvoke <android.os.StrictMode: void handleApplicationStrictModeViolation(int,android.os.StrictMode$ViolationInfo)>(i1, r5);

        $r0 = <android.os.StrictMode: java.util.concurrent.atomic.AtomicInteger sDropboxCallsInFlight>;

        i2 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        $z0 = <android.os.StrictMode: boolean LOG_V>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dropbox complete; in-flight=");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("StrictMode", $r4);

     label1:
        return;
    }

    static void lambda$onVmPolicyViolation$3(android.os.StrictMode$OnVmViolationListener, android.os.strictmode.Violation)
    {
        android.os.strictmode.Violation r0;
        android.os.StrictMode$VmPolicy r1;
        java.lang.Throwable $r2;
        android.os.StrictMode$OnVmViolationListener r3;

        r3 := @parameter0: android.os.StrictMode$OnVmViolationListener;

        r0 := @parameter1: android.os.strictmode.Violation;

        r1 = staticinvoke <android.os.StrictMode: android.os.StrictMode$VmPolicy allowVmViolations()>();

     label1:
        interfaceinvoke r3.<android.os.StrictMode$OnVmViolationListener: void onVmViolation(android.os.strictmode.Violation)>(r0);

     label2:
        staticinvoke <android.os.StrictMode: void setVmPolicy(android.os.StrictMode$VmPolicy)>(r1);

        return;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.os.StrictMode: void setVmPolicy(android.os.StrictMode$VmPolicy)>(r1);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    static void lambda$static$0(android.os.StrictMode$ViolationInfo)
    {
        android.os.StrictMode$ViolationInfo r0;
        int $i0, $i2;
        java.lang.StringBuilder $r2, $r8;
        java.lang.String $r5, $r7, r13;

        r0 := @parameter0: android.os.StrictMode$ViolationInfo;

        $i0 = r0.<android.os.StrictMode$ViolationInfo: int durationMillis>;

        if $i0 == -1 goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("StrictMode policy violation; ~duration=");

        $i2 = r0.<android.os.StrictMode$ViolationInfo: int durationMillis>;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms:");

        r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        r13 = "StrictMode policy violation:";

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r5 = virtualinvoke r0.<android.os.StrictMode$ViolationInfo: java.lang.String getStackTrace()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("StrictMode", $r7);

        return;
    }

    static void lambda$static$1(java.lang.String)
    {
        java.lang.String r0;
        android.os.strictmode.NonSdkApiUsedViolation $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = new android.os.strictmode.NonSdkApiUsedViolation;

        specialinvoke $r1.<android.os.strictmode.NonSdkApiUsedViolation: void <init>(java.lang.String)>(r0);

        staticinvoke <android.os.StrictMode: void onVmPolicyViolation(android.os.strictmode.Violation)>($r1);

        return;
    }

    public static void noteDiskRead()
    {
        dalvik.system.BlockGuard$Policy r0;
        boolean $z0;

        r0 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        $z0 = r0 instanceof android.os.StrictMode$AndroidBlockGuardPolicy;

        if $z0 != 0 goto label1;

        return;

     label1:
        interfaceinvoke r0.<dalvik.system.BlockGuard$Policy: void onReadFromDisk()>();

        return;
    }

    public static void noteDiskWrite()
    {
        dalvik.system.BlockGuard$Policy r0;
        boolean $z0;

        r0 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        $z0 = r0 instanceof android.os.StrictMode$AndroidBlockGuardPolicy;

        if $z0 != 0 goto label1;

        return;

     label1:
        interfaceinvoke r0.<dalvik.system.BlockGuard$Policy: void onWriteToDisk()>();

        return;
    }

    public static void noteResourceMismatch(java.lang.Object)
    {
        java.lang.Object r0;
        dalvik.system.BlockGuard$Policy r1;
        boolean $z0;
        android.os.StrictMode$AndroidBlockGuardPolicy $r2;

        r0 := @parameter0: java.lang.Object;

        r1 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        $z0 = r1 instanceof android.os.StrictMode$AndroidBlockGuardPolicy;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = (android.os.StrictMode$AndroidBlockGuardPolicy) r1;

        virtualinvoke $r2.<android.os.StrictMode$AndroidBlockGuardPolicy: void onResourceMismatch(java.lang.Object)>(r0);

        return;
    }

    public static void noteSlowCall(java.lang.String)
    {
        java.lang.String r0;
        dalvik.system.BlockGuard$Policy r1;
        boolean $z0;
        android.os.StrictMode$AndroidBlockGuardPolicy $r2;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        $z0 = r1 instanceof android.os.StrictMode$AndroidBlockGuardPolicy;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = (android.os.StrictMode$AndroidBlockGuardPolicy) r1;

        virtualinvoke $r2.<android.os.StrictMode$AndroidBlockGuardPolicy: void onCustomSlowCall(java.lang.String)>(r0);

        return;
    }

    public static void noteUnbufferedIO()
    {
        dalvik.system.BlockGuard$Policy r0;
        boolean $z0;

        r0 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        $z0 = r0 instanceof android.os.StrictMode$AndroidBlockGuardPolicy;

        if $z0 != 0 goto label1;

        return;

     label1:
        interfaceinvoke r0.<dalvik.system.BlockGuard$Policy: void onUnbufferedIO()>();

        return;
    }

    private static void onBinderStrictModePolicyChange(int)
    {
        int i0;

        i0 := @parameter0: int;

        staticinvoke <android.os.StrictMode: void setBlockGuardPolicy(int)>(i0);

        return;
    }

    public static void onCleartextNetworkDetected(byte[])
    {
        int i0, $i1, $i2, $i7, $i8;
        java.lang.String r0, r8, $r12, $r13, r14;
        android.os.strictmode.CleartextNetworkViolation $r1;
        java.net.InetAddress $r2;
        byte $b3, $b5;
        short $s4, $s6;
        java.lang.Throwable $r3;
        byte[] r4, r5;
        boolean z0;
        java.lang.StringBuilder $r6, r9, $r10;
        android.os.StrictMode$VmPolicy $r15;

        r4 := @parameter0: byte[];

        z0 = 0;

        r5 = null;

        if r4 == null goto label2;

        $i1 = lengthof r4;

        if $i1 < 20 goto label1;

        $b5 = r4[0];

        $s6 = $b5 & 240;

        if $s6 != 64 goto label1;

        r5 = newarray (byte)[4];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 16, r5, 0, 4);

        goto label2;

     label1:
        r5 = null;

        $i2 = lengthof r4;

        if $i2 < 40 goto label2;

        r5 = null;

        $b3 = r4[0];

        $s4 = $b3 & 240;

        if $s4 != 96 goto label2;

        r5 = newarray (byte)[16];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 24, r5, 0, 16);

     label2:
        i0 = staticinvoke <android.os.Process: int myUid()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Detected cleartext network traffic from UID ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        r0 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        r8 = r0;

        if r5 == null goto label6;

     label3:
        r9 = new java.lang.StringBuilder;

        specialinvoke r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r2 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>(r5);

        virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        r8 = virtualinvoke r9.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        goto label6;

     label5:
        $r3 := @caughtexception;

        r8 = r0;

     label6:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r12 = staticinvoke <com.android.internal.util.HexDump: java.lang.String dumpHexString(byte[])>(r4);

        $r13 = virtualinvoke $r12.<java.lang.String: java.lang.String trim()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy>;

        $i7 = $r15.<android.os.StrictMode$VmPolicy: int mask>;

        $i8 = $i7 & 16777216;

        if $i8 == 0 goto label7;

        z0 = 1;

     label7:
        $r1 = new android.os.strictmode.CleartextNetworkViolation;

        specialinvoke $r1.<android.os.strictmode.CleartextNetworkViolation: void <init>(java.lang.String)>(r14);

        staticinvoke <android.os.StrictMode: void onVmPolicyViolation(android.os.strictmode.Violation,boolean)>($r1, z0);

        return;

        catch java.net.UnknownHostException from label3 to label4 with label5;
    }

    public static void onContentUriWithoutPermission(android.net.Uri, java.lang.String)
    {
        android.net.Uri r0;
        java.lang.String r1;
        android.os.strictmode.ContentUriWithoutPermissionViolation $r2;

        r0 := @parameter0: android.net.Uri;

        r1 := @parameter1: java.lang.String;

        $r2 = new android.os.strictmode.ContentUriWithoutPermissionViolation;

        specialinvoke $r2.<android.os.strictmode.ContentUriWithoutPermissionViolation: void <init>(android.net.Uri,java.lang.String)>(r0, r1);

        staticinvoke <android.os.StrictMode: void onVmPolicyViolation(android.os.strictmode.Violation)>($r2);

        return;
    }

    private static void onCredentialProtectedPathAccess(java.lang.String, int)
    {
        java.lang.String r0, $r9;
        int i0, $i1;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r2;
        android.os.strictmode.CredentialProtectedWhileLockedViolation $r8;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i1 = staticinvoke <android.os.UserHandle: int myUserId()>();

        if i0 != $i1 goto label2;

        $z1 = <android.os.StrictMode: boolean sUserKeyUnlocked>;

        if $z1 == 0 goto label1;

        return;

     label1:
        $z2 = staticinvoke <android.os.StrictMode: boolean isUserKeyUnlocked(int)>(i0);

        if $z2 == 0 goto label3;

        <android.os.StrictMode: boolean sUserKeyUnlocked> = 1;

        return;

     label2:
        $z0 = staticinvoke <android.os.StrictMode: boolean isUserKeyUnlocked(int)>(i0);

        if $z0 == 0 goto label3;

        return;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Accessed credential protected path ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" while user ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was locked");

        $r8 = new android.os.strictmode.CredentialProtectedWhileLockedViolation;

        $r9 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<android.os.strictmode.CredentialProtectedWhileLockedViolation: void <init>(java.lang.String)>($r9);

        staticinvoke <android.os.StrictMode: void onVmPolicyViolation(android.os.strictmode.Violation)>($r8);

        return;
    }

    public static void onFileUriExposed(android.net.Uri, java.lang.String)
    {
        java.lang.String r0, r10;
        java.lang.StringBuilder $r2;
        android.os.StrictMode$VmPolicy $r6;
        int $i0, $i1;
        android.os.FileUriExposedException $r7;
        android.os.strictmode.FileUriExposedViolation $r8;
        android.net.Uri r9;

        r9 := @parameter0: android.net.Uri;

        r0 := @parameter1: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" exposed beyond app through ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        r10 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy>;

        $i0 = $r6.<android.os.StrictMode$VmPolicy: int mask>;

        $i1 = $i0 & 8388608;

        if $i1 != 0 goto label1;

        $r8 = new android.os.strictmode.FileUriExposedViolation;

        specialinvoke $r8.<android.os.strictmode.FileUriExposedViolation: void <init>(java.lang.String)>(r10);

        staticinvoke <android.os.StrictMode: void onVmPolicyViolation(android.os.strictmode.Violation)>($r8);

        return;

     label1:
        $r7 = new android.os.FileUriExposedException;

        specialinvoke $r7.<android.os.FileUriExposedException: void <init>(java.lang.String)>(r10);

        throw $r7;
    }

    public static void onImplicitDirectBoot()
    {
        android.os.strictmode.ImplicitDirectBootViolation $r0;

        $r0 = new android.os.strictmode.ImplicitDirectBootViolation;

        specialinvoke $r0.<android.os.strictmode.ImplicitDirectBootViolation: void <init>()>();

        staticinvoke <android.os.StrictMode: void onVmPolicyViolation(android.os.strictmode.Violation)>($r0);

        return;
    }

    public static void onIncorrectContextUsed(java.lang.String, java.lang.Throwable)
    {
        java.lang.String r0;
        java.lang.Throwable r1;
        android.os.strictmode.IncorrectContextUseViolation $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Throwable;

        $r2 = new android.os.strictmode.IncorrectContextUseViolation;

        specialinvoke $r2.<android.os.strictmode.IncorrectContextUseViolation: void <init>(java.lang.String,java.lang.Throwable)>(r0, r1);

        staticinvoke <android.os.StrictMode: void onVmPolicyViolation(android.os.strictmode.Violation)>($r2);

        return;
    }

    public static void onIntentReceiverLeaked(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        android.os.strictmode.IntentReceiverLeakedViolation $r1;

        r0 := @parameter0: java.lang.Throwable;

        $r1 = new android.os.strictmode.IntentReceiverLeakedViolation;

        specialinvoke $r1.<android.os.strictmode.IntentReceiverLeakedViolation: void <init>(java.lang.Throwable)>(r0);

        staticinvoke <android.os.StrictMode: void onVmPolicyViolation(android.os.strictmode.Violation)>($r1);

        return;
    }

    public static void onServiceConnectionLeaked(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        android.os.strictmode.ServiceConnectionLeakedViolation $r1;

        r0 := @parameter0: java.lang.Throwable;

        $r1 = new android.os.strictmode.ServiceConnectionLeakedViolation;

        specialinvoke $r1.<android.os.strictmode.ServiceConnectionLeakedViolation: void <init>(java.lang.Throwable)>(r0);

        staticinvoke <android.os.StrictMode: void onVmPolicyViolation(android.os.strictmode.Violation)>($r1);

        return;
    }

    public static void onSqliteObjectLeaked(java.lang.String, java.lang.Throwable)
    {
        java.lang.String r0;
        java.lang.Throwable r1;
        android.os.strictmode.SqliteObjectLeakedViolation $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Throwable;

        $r2 = new android.os.strictmode.SqliteObjectLeakedViolation;

        specialinvoke $r2.<android.os.strictmode.SqliteObjectLeakedViolation: void <init>(java.lang.String,java.lang.Throwable)>(r0, r1);

        staticinvoke <android.os.StrictMode: void onVmPolicyViolation(android.os.strictmode.Violation)>($r2);

        return;
    }

    public static void onUntaggedSocket()
    {
        android.os.strictmode.UntaggedSocketViolation $r0;

        $r0 = new android.os.strictmode.UntaggedSocketViolation;

        specialinvoke $r0.<android.os.strictmode.UntaggedSocketViolation: void <init>()>();

        staticinvoke <android.os.StrictMode: void onVmPolicyViolation(android.os.strictmode.Violation)>($r0);

        return;
    }

    public static void onVmPolicyViolation(android.os.strictmode.Violation)
    {
        android.os.strictmode.Violation r0;

        r0 := @parameter0: android.os.strictmode.Violation;

        staticinvoke <android.os.StrictMode: void onVmPolicyViolation(android.os.strictmode.Violation,boolean)>(r0, 0);

        return;
    }

    public static void onVmPolicyViolation(android.os.strictmode.Violation, boolean)
    {
        boolean z0, $z1, z2, z3, z4;
        long l0, $l11, $l12, $l13, l18, l19;
        android.os.StrictMode$VmPolicy $r0, $r1, $r3, $r6, $r8, $r10, $r11, $r26;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i8, i15, $i16, $i17;
        android.os.StrictMode$ViolationInfo $r2;
        android.os.StrictMode$ViolationLogger $r4, $r5, $r13, $r14;
        byte $b7, $b9, $b10;
        android.os.StrictMode$OnVmViolationListener $r7, r31;
        java.util.concurrent.Executor $r9, r32;
        java.io.PrintStream $r12;
        java.util.HashMap $r15, $r16, $r17, $r20, r29;
        java.lang.Long $r18, $r22;
        java.lang.Object $r21;
        java.lang.Throwable $r23, $r24;
        android.os.strictmode.Violation r25;
        java.lang.Integer r28;
        android.os._$$Lambda$StrictMode$UFC_nI1x6u8ZwMQmA7bmj9NHZz4 r33;

        r25 := @parameter0: android.os.strictmode.Violation;

        z0 := @parameter1: boolean;

        $r0 = <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy>;

        i15 = $r0.<android.os.StrictMode$VmPolicy: int mask>;

        z2 = 1;

        $i1 = i15 & 67108864;

        if $i1 == 0 goto label01;

        z3 = 1;

        goto label02;

     label01:
        z3 = 0;

     label02:
        $r1 = <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy>;

        $i2 = $r1.<android.os.StrictMode$VmPolicy: int mask>;

        $i3 = $i2 & 268435456;

        if $i3 != 0 goto label04;

        if z0 == 0 goto label03;

        goto label04;

     label03:
        z4 = 0;

        goto label05;

     label04:
        z4 = 1;

     label05:
        $r26 = <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy>;

        $i16 = $r26.<android.os.StrictMode$VmPolicy: int mask>;

        $i17 = $i16 & 1073741824;

        if $i17 == 0 goto label06;

        goto label07;

     label06:
        z2 = 0;

     label07:
        $r2 = new android.os.StrictMode$ViolationInfo;

        $r3 = <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy>;

        $i4 = $r3.<android.os.StrictMode$VmPolicy: int mask>;

        $i5 = -65536 & $i4;

        specialinvoke $r2.<android.os.StrictMode$ViolationInfo: void <init>(android.os.strictmode.Violation,int)>(r25, $i5);

        $r2.<android.os.StrictMode$ViolationInfo: int numAnimationsRunning> = 0;

        $r2.<android.os.StrictMode$ViolationInfo: java.lang.String[] tags> = null;

        $r2.<android.os.StrictMode$ViolationInfo: java.lang.String broadcastIntentAction> = null;

        $i6 = virtualinvoke $r2.<android.os.StrictMode$ViolationInfo: int hashCode()>();

        r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        l18 = 9223372036854775807L;

        l19 = 9223372036854775807L;

        $r5 = <android.os.StrictMode: android.os.StrictMode$ViolationLogger sLogger>;

        $r4 = <android.os.StrictMode: android.os.StrictMode$ViolationLogger LOGCAT_LOGGER>;

        if $r5 != $r4 goto label16;

        r29 = <android.os.StrictMode: java.util.HashMap sLastVmViolationTime>;

        entermonitor r29;

     label08:
        $r15 = <android.os.StrictMode: java.util.HashMap sLastVmViolationTime>;

        $z1 = virtualinvoke $r15.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r28);

        if $z1 == 0 goto label09;

        $r20 = <android.os.StrictMode: java.util.HashMap sLastVmViolationTime>;

        $r21 = virtualinvoke $r20.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r28);

        $r22 = (java.lang.Long) $r21;

        $l13 = virtualinvoke $r22.<java.lang.Long: long longValue()>();

        l18 = l0 - $l13;

     label09:
        $b10 = l18 cmp 1000L;

        if $b10 <= 0 goto label11;

     label10:
        $r17 = <android.os.StrictMode: java.util.HashMap sLastVmViolationTime>;

        $r18 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        virtualinvoke $r17.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r28, $r18);

     label11:
        $r16 = <android.os.StrictMode: java.util.HashMap sLastVmViolationTime>;

        $l11 = staticinvoke <java.lang.Math: long max(long,long)>(1000L, 1000L);

        $l12 = l0 - $l11;

        staticinvoke <android.os.StrictMode: void clampViolationTimeMap(java.util.Map,long)>($r16, $l12);

        exitmonitor r29;

     label12:
        l19 = l18;

        goto label16;

     label13:
        $r23 := @caughtexception;

     label14:
        exitmonitor r29;

     label15:
        throw $r23;

     label16:
        $b7 = l19 cmp 1000L;

        if $b7 > 0 goto label17;

        return;

     label17:
        if z2 == 0 goto label18;

        $r13 = <android.os.StrictMode: android.os.StrictMode$ViolationLogger sLogger>;

        if $r13 == null goto label18;

        $b9 = l19 cmp 1000L;

        if $b9 <= 0 goto label18;

        $r14 = <android.os.StrictMode: android.os.StrictMode$ViolationLogger sLogger>;

        interfaceinvoke $r14.<android.os.StrictMode$ViolationLogger: void log(android.os.StrictMode$ViolationInfo)>($r2);

     label18:
        if z3 == 0 goto label20;

        if z4 == 0 goto label19;

        staticinvoke <android.os.StrictMode: void handleApplicationStrictModeViolation(int,android.os.StrictMode$ViolationInfo)>(67108864, $r2);

        goto label20;

     label19:
        staticinvoke <android.os.StrictMode: void dropboxViolationAsync(int,android.os.StrictMode$ViolationInfo)>(67108864, $r2);

     label20:
        if z4 == 0 goto label21;

        $r12 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>("StrictMode VmPolicy violation with POLICY_DEATH; shutting down.");

        $i8 = staticinvoke <android.os.Process: int myPid()>();

        staticinvoke <android.os.Process: void killProcess(int)>($i8);

        staticinvoke <java.lang.System: void exit(int)>(10);

     label21:
        $r6 = <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy>;

        $r7 = $r6.<android.os.StrictMode$VmPolicy: android.os.StrictMode$OnVmViolationListener mListener>;

        if $r7 == null goto label25;

        $r8 = <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy>;

        $r9 = $r8.<android.os.StrictMode$VmPolicy: java.util.concurrent.Executor mCallbackExecutor>;

        if $r9 == null goto label25;

        $r10 = <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy>;

        r31 = $r10.<android.os.StrictMode$VmPolicy: android.os.StrictMode$OnVmViolationListener mListener>;

     label22:
        $r11 = <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy>;

        r32 = $r11.<android.os.StrictMode$VmPolicy: java.util.concurrent.Executor mCallbackExecutor>;

        r33 = new android.os._$$Lambda$StrictMode$UFC_nI1x6u8ZwMQmA7bmj9NHZz4;

        specialinvoke r33.<android.os._$$Lambda$StrictMode$UFC_nI1x6u8ZwMQmA7bmj9NHZz4: void <init>(android.os.StrictMode$OnVmViolationListener,android.os.strictmode.Violation)>(r31, r25);

        interfaceinvoke r32.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r33);

     label23:
        goto label25;

     label24:
        $r24 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StrictMode", "VmPolicy penaltyCallback failed", $r24);

     label25:
        return;

        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
        catch java.util.concurrent.RejectedExecutionException from label22 to label23 with label24;
    }

    public static void onWebViewMethodCalledOnWrongThread(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        android.os.strictmode.WebViewMethodCalledOnWrongThreadViolation $r1;

        r0 := @parameter0: java.lang.Throwable;

        $r1 = new android.os.strictmode.WebViewMethodCalledOnWrongThreadViolation;

        specialinvoke $r1.<android.os.strictmode.WebViewMethodCalledOnWrongThreadViolation: void <init>(java.lang.Throwable)>(r0);

        staticinvoke <android.os.StrictMode: void onVmPolicyViolation(android.os.strictmode.Violation)>($r1);

        return;
    }

    static void readAndHandleBinderCallViolations(android.os.Parcel)
    {
        android.os.Parcel r0;
        int i0, $i1, $i2, i3;
        dalvik.system.BlockGuard$Policy r3;
        java.lang.Throwable $r4;
        android.os.StrictMode$ViolationInfo $r5;
        boolean $z0, z1, z2;
        android.os.StrictMode$AndroidBlockGuardPolicy $r6;

        r0 := @parameter0: android.os.Parcel;

        $r4 = new java.lang.Throwable;

        specialinvoke $r4.<java.lang.Throwable: void <init>()>();

        $i1 = staticinvoke <android.os.StrictMode: int getThreadPolicyMask()>();

        $i2 = -2147483648 & $i1;

        if $i2 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        i0 = virtualinvoke r0.<android.os.Parcel: int readInt()>();

        i3 = 0;

     label3:
        if i3 >= i0 goto label7;

        if z1 != 0 goto label4;

        z2 = 1;

        goto label5;

     label4:
        z2 = 0;

     label5:
        $r5 = new android.os.StrictMode$ViolationInfo;

        specialinvoke $r5.<android.os.StrictMode$ViolationInfo: void <init>(android.os.Parcel,boolean)>(r0, z2);

        virtualinvoke $r5.<android.os.StrictMode$ViolationInfo: void addLocalStack(java.lang.Throwable)>($r4);

        r3 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        $z0 = r3 instanceof android.os.StrictMode$AndroidBlockGuardPolicy;

        if $z0 == 0 goto label6;

        $r6 = (android.os.StrictMode$AndroidBlockGuardPolicy) r3;

        virtualinvoke $r6.<android.os.StrictMode$AndroidBlockGuardPolicy: void handleViolationWithTimingAttempt(android.os.StrictMode$ViolationInfo)>($r5);

     label6:
        i3 = i3 + 1;

        goto label3;

     label7:
        return;
    }

    private static void setBlockGuardPolicy(int)
    {
        int i0;
        boolean $z0;
        java.lang.ThreadLocal $r0;
        java.lang.Object $r1;
        dalvik.system.BlockGuard$Policy $r2, r3;
        android.os.StrictMode$AndroidBlockGuardPolicy r4;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        $r2 = <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy LAX_POLICY>;

        staticinvoke <dalvik.system.BlockGuard: void setThreadPolicy(dalvik.system.BlockGuard$Policy)>($r2);

        return;

     label1:
        r3 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        $z0 = r3 instanceof android.os.StrictMode$AndroidBlockGuardPolicy;

        if $z0 == 0 goto label2;

        r4 = (android.os.StrictMode$AndroidBlockGuardPolicy) r3;

        goto label3;

     label2:
        $r0 = <android.os.StrictMode: java.lang.ThreadLocal THREAD_ANDROID_POLICY>;

        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        r4 = (android.os.StrictMode$AndroidBlockGuardPolicy) $r1;

        staticinvoke <dalvik.system.BlockGuard: void setThreadPolicy(dalvik.system.BlockGuard$Policy)>(r4);

     label3:
        virtualinvoke r4.<android.os.StrictMode$AndroidBlockGuardPolicy: void setThreadPolicyMask(int)>(i0);

        return;
    }

    private static void setBlockGuardVmPolicy(int)
    {
        int i0, $i1;
        dalvik.system.BlockGuard$VmPolicy $r0, $r1;

        i0 := @parameter0: int;

        $i1 = i0 & 2048;

        if $i1 == 0 goto label1;

        $r1 = <android.os.StrictMode: dalvik.system.BlockGuard$VmPolicy VM_ANDROID_POLICY>;

        staticinvoke <dalvik.system.BlockGuard: void setVmPolicy(dalvik.system.BlockGuard$VmPolicy)>($r1);

        goto label2;

     label1:
        $r0 = <dalvik.system.BlockGuard: dalvik.system.BlockGuard$VmPolicy LAX_VM_POLICY>;

        staticinvoke <dalvik.system.BlockGuard: void setVmPolicy(dalvik.system.BlockGuard$VmPolicy)>($r0);

     label2:
        return;
    }

    private static void setCloseGuardEnabled(boolean)
    {
        boolean z0, $z1;
        dalvik.system.CloseGuard$Reporter $r0;
        android.os.StrictMode$AndroidCloseGuardReporter $r1;

        z0 := @parameter0: boolean;

        $r0 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard$Reporter getReporter()>();

        $z1 = $r0 instanceof android.os.StrictMode$AndroidCloseGuardReporter;

        if $z1 != 0 goto label1;

        $r1 = new android.os.StrictMode$AndroidCloseGuardReporter;

        specialinvoke $r1.<android.os.StrictMode$AndroidCloseGuardReporter: void <init>(android.os.StrictMode$1)>(null);

        staticinvoke <dalvik.system.CloseGuard: void setReporter(dalvik.system.CloseGuard$Reporter)>($r1);

     label1:
        staticinvoke <dalvik.system.CloseGuard: void setEnabled(boolean)>(z0);

        return;
    }

    public static void setThreadPolicy(android.os.StrictMode$ThreadPolicy)
    {
        android.os.StrictMode$ThreadPolicy r0;
        int $i0;
        android.os.StrictMode$OnThreadViolationListener $r1;
        java.lang.ThreadLocal $r2, $r4;
        java.util.concurrent.Executor $r3;

        r0 := @parameter0: android.os.StrictMode$ThreadPolicy;

        $i0 = r0.<android.os.StrictMode$ThreadPolicy: int mask>;

        staticinvoke <android.os.StrictMode: void setThreadPolicyMask(int)>($i0);

        $r2 = <android.os.StrictMode: java.lang.ThreadLocal sThreadViolationListener>;

        $r1 = r0.<android.os.StrictMode$ThreadPolicy: android.os.StrictMode$OnThreadViolationListener mListener>;

        virtualinvoke $r2.<java.lang.ThreadLocal: void set(java.lang.Object)>($r1);

        $r4 = <android.os.StrictMode: java.lang.ThreadLocal sThreadViolationExecutor>;

        $r3 = r0.<android.os.StrictMode$ThreadPolicy: java.util.concurrent.Executor mCallbackExecutor>;

        virtualinvoke $r4.<java.lang.ThreadLocal: void set(java.lang.Object)>($r3);

        return;
    }

    public static void setThreadPolicyMask(int)
    {
        int i0;

        i0 := @parameter0: int;

        staticinvoke <android.os.StrictMode: void setBlockGuardPolicy(int)>(i0);

        staticinvoke <android.os.Binder: void setThreadStrictModePolicy(int)>(i0);

        return;
    }

    public static void setViolationLogger(android.os.StrictMode$ViolationLogger)
    {
        android.os.StrictMode$ViolationLogger r0, r1;

        r0 := @parameter0: android.os.StrictMode$ViolationLogger;

        r1 = r0;

        if r0 != null goto label1;

        r1 = <android.os.StrictMode: android.os.StrictMode$ViolationLogger LOGCAT_LOGGER>;

     label1:
        <android.os.StrictMode: android.os.StrictMode$ViolationLogger sLogger> = r1;

        return;
    }

    public static void setVmPolicy(android.os.StrictMode$VmPolicy)
    {
        boolean $z0, $z1;
        android.os.StrictMode$VmPolicy $r0, $r2, $r3, $r6, r10, $r13, $r17;
        int $i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14;
        java.util.function.Consumer $r1;
        java.util.HashMap $r4;
        android.os.MessageQueue$IdleHandler $r5, $r7;
        java.lang.Throwable $r8;
        android.os.RemoteException $r9;
        android.os.Looper r11;
        android.os.MessageQueue r12;
        byte b10;
        android.os.IBinder $r14;
        android.os.INetworkManagementService r15;

        r10 := @parameter0: android.os.StrictMode$VmPolicy;

        entermonitor class "Landroid/os/StrictMode;";

     label01:
        <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy> = r10;

        $z0 = staticinvoke <android.os.StrictMode: boolean vmClosableObjectLeaksEnabled()>();

        staticinvoke <android.os.StrictMode: void setCloseGuardEnabled(boolean)>($z0);

        r11 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

     label02:
        if r11 == null goto label08;

     label03:
        r12 = r11.<android.os.Looper: android.os.MessageQueue mQueue>;

        $r4 = r10.<android.os.StrictMode$VmPolicy: java.util.HashMap classInstanceLimit>;

        $i7 = virtualinvoke $r4.<java.util.HashMap: int size()>();

        if $i7 == 0 goto label07;

        $r6 = <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy>;

        $i8 = $r6.<android.os.StrictMode$VmPolicy: int mask>;

        $i9 = $i8 & -65536;

        if $i9 != 0 goto label05;

     label04:
        goto label07;

     label05:
        $z1 = <android.os.StrictMode: boolean sIsIdlerRegistered>;

        if $z1 != 0 goto label08;

        $r7 = <android.os.StrictMode: android.os.MessageQueue$IdleHandler sProcessIdleHandler>;

        virtualinvoke r12.<android.os.MessageQueue: void addIdleHandler(android.os.MessageQueue$IdleHandler)>($r7);

        <android.os.StrictMode: boolean sIsIdlerRegistered> = 1;

     label06:
        goto label08;

     label07:
        $r5 = <android.os.StrictMode: android.os.MessageQueue$IdleHandler sProcessIdleHandler>;

        virtualinvoke r12.<android.os.MessageQueue: void removeIdleHandler(android.os.MessageQueue$IdleHandler)>($r5);

        <android.os.StrictMode: boolean sIsIdlerRegistered> = 0;

     label08:
        b10 = 0;

     label09:
        $r13 = <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy>;

        $i11 = $r13.<android.os.StrictMode$VmPolicy: int mask>;

        $i12 = $i11 & 64;

        if $i12 == 0 goto label13;

        $r2 = <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy>;

        $i3 = $r2.<android.os.StrictMode$VmPolicy: int mask>;

        $i4 = $i3 & 268435456;

        if $i4 != 0 goto label12;

        $r3 = <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy>;

        $i5 = $r3.<android.os.StrictMode$VmPolicy: int mask>;

        $i6 = $i5 & 16777216;

        if $i6 == 0 goto label11;

     label10:
        goto label12;

     label11:
        b10 = 1;

        goto label13;

     label12:
        b10 = 2;

     label13:
        $r14 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("network_management");

        r15 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService asInterface(android.os.IBinder)>($r14);

     label14:
        if r15 == null goto label19;

     label15:
        $i2 = staticinvoke <android.os.Process: int myUid()>();

        interfaceinvoke r15.<android.os.INetworkManagementService: void setUidCleartextNetworkPolicy(int,int)>($i2, b10);

     label16:
        goto label18;

     label17:
        $r9 := @caughtexception;

     label18:
        goto label21;

     label19:
        if b10 == 0 goto label21;

     label20:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("StrictMode", "Dropping requested network policy due to missing service!");

     label21:
        $r17 = <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy>;

        $i13 = $r17.<android.os.StrictMode$VmPolicy: int mask>;

        $i14 = $i13 & 512;

        if $i14 == 0 goto label23;

        $r1 = <android.os.StrictMode: java.util.function.Consumer sNonSdkApiUsageConsumer>;

        staticinvoke <dalvik.system.VMRuntime: void setNonSdkApiUsageConsumer(java.util.function.Consumer)>($r1);

        staticinvoke <dalvik.system.VMRuntime: void setDedupeHiddenApiWarnings(boolean)>(0);

     label22:
        goto label24;

     label23:
        staticinvoke <dalvik.system.VMRuntime: void setNonSdkApiUsageConsumer(java.util.function.Consumer)>(null);

        staticinvoke <dalvik.system.VMRuntime: void setDedupeHiddenApiWarnings(boolean)>(1);

     label24:
        $r0 = <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy>;

        $i0 = $r0.<android.os.StrictMode$VmPolicy: int mask>;

        staticinvoke <android.os.StrictMode: void setBlockGuardVmPolicy(int)>($i0);

        exitmonitor class "Landroid/os/StrictMode;";

     label25:
        return;

     label26:
        $r8 := @caughtexception;

     label27:
        exitmonitor class "Landroid/os/StrictMode;";

     label28:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label26;
        catch java.lang.Throwable from label03 to label04 with label26;
        catch java.lang.Throwable from label05 to label06 with label26;
        catch java.lang.Throwable from label07 to label08 with label26;
        catch java.lang.Throwable from label09 to label10 with label26;
        catch java.lang.Throwable from label13 to label14 with label26;
        catch android.os.RemoteException from label15 to label16 with label17;
        catch java.lang.Throwable from label15 to label16 with label26;
        catch java.lang.Throwable from label20 to label21 with label26;
        catch java.lang.Throwable from label21 to label22 with label26;
        catch java.lang.Throwable from label23 to label24 with label26;
        catch java.lang.Throwable from label24 to label25 with label26;
        catch java.lang.Throwable from label27 to label28 with label26;
    }

    private static boolean tooManyViolationsThisLoop()
    {
        java.lang.ThreadLocal $r0;
        java.lang.Object $r1;
        java.util.ArrayList $r2;
        int $i0;
        boolean z0;

        $r0 = <android.os.StrictMode: java.lang.ThreadLocal violationsBeingTimed>;

        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r2 = (java.util.ArrayList) $r1;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if $i0 < 10 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static java.lang.Object trackActivity(java.lang.Object)
    {
        java.lang.Object r0;
        android.os.StrictMode$InstanceTracker $r1;

        r0 := @parameter0: java.lang.Object;

        $r1 = new android.os.StrictMode$InstanceTracker;

        specialinvoke $r1.<android.os.StrictMode$InstanceTracker: void <init>(java.lang.Object)>(r0);

        return $r1;
    }

    public static boolean vmCleartextNetworkEnabled()
    {
        android.os.StrictMode$VmPolicy $r0;
        int $i0, $i1;
        boolean z0;

        $r0 = <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy>;

        $i0 = $r0.<android.os.StrictMode$VmPolicy: int mask>;

        $i1 = $i0 & 64;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static boolean vmClosableObjectLeaksEnabled()
    {
        android.os.StrictMode$VmPolicy $r0;
        int $i0, $i1;
        boolean z0;

        $r0 = <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy>;

        $i0 = $r0.<android.os.StrictMode$VmPolicy: int mask>;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static boolean vmContentUriWithoutPermissionEnabled()
    {
        android.os.StrictMode$VmPolicy $r0;
        int $i0, $i1;
        boolean z0;

        $r0 = <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy>;

        $i0 = $r0.<android.os.StrictMode$VmPolicy: int mask>;

        $i1 = $i0 & 128;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static boolean vmCredentialProtectedWhileLockedEnabled()
    {
        android.os.StrictMode$VmPolicy $r0;
        int $i0, $i1;
        boolean z0;

        $r0 = <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy>;

        $i0 = $r0.<android.os.StrictMode$VmPolicy: int mask>;

        $i1 = $i0 & 2048;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static boolean vmFileUriExposureEnabled()
    {
        android.os.StrictMode$VmPolicy $r0;
        int $i0, $i1;
        boolean z0;

        $r0 = <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy>;

        $i0 = $r0.<android.os.StrictMode$VmPolicy: int mask>;

        $i1 = $i0 & 32;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static boolean vmImplicitDirectBootEnabled()
    {
        android.os.StrictMode$VmPolicy $r0;
        int $i0, $i1;
        boolean z0;

        $r0 = <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy>;

        $i0 = $r0.<android.os.StrictMode$VmPolicy: int mask>;

        $i1 = $i0 & 1024;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static boolean vmIncorrectContextUseEnabled()
    {
        android.os.StrictMode$VmPolicy $r0;
        int $i0, $i1;
        boolean z0;

        $r0 = <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy>;

        $i0 = $r0.<android.os.StrictMode$VmPolicy: int mask>;

        $i1 = $i0 & 4096;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static boolean vmRegistrationLeaksEnabled()
    {
        android.os.StrictMode$VmPolicy $r0;
        int $i0, $i1;
        boolean z0;

        $r0 = <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy>;

        $i0 = $r0.<android.os.StrictMode$VmPolicy: int mask>;

        $i1 = $i0 & 16;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static boolean vmSqliteObjectLeaksEnabled()
    {
        int i0, $i1;
        android.os.StrictMode$VmPolicy $r0;
        boolean z0;

        $r0 = <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy>;

        i0 = $r0.<android.os.StrictMode$VmPolicy: int mask>;

        z0 = 1;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static boolean vmUntaggedSocketEnabled()
    {
        android.os.StrictMode$VmPolicy $r0;
        int $i0, $i1;
        boolean z0;

        $r0 = <android.os.StrictMode: android.os.StrictMode$VmPolicy sVmPolicy>;

        $i0 = $r0.<android.os.StrictMode$VmPolicy: int mask>;

        $i1 = $i0 & 256;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    static void writeGatheredViolationsToParcel(android.os.Parcel)
    {
        android.os.Parcel r0;
        java.util.ArrayList r1;
        int i0, $i1, i2;
        java.lang.ThreadLocal $r2, $r4;
        java.lang.Object $r3, $r5;
        android.os.StrictMode$ViolationInfo $r6;

        r0 := @parameter0: android.os.Parcel;

        $r2 = <android.os.StrictMode: java.lang.ThreadLocal gatheredViolations>;

        $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        r1 = (java.util.ArrayList) $r3;

        if r1 != null goto label1;

        virtualinvoke r0.<android.os.Parcel: void writeInt(int)>(0);

        goto label3;

     label1:
        $i1 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        i0 = staticinvoke <java.lang.Math: int min(int,int)>($i1, 3);

        virtualinvoke r0.<android.os.Parcel: void writeInt(int)>(i0);

        i2 = 0;

     label2:
        if i2 >= i0 goto label3;

        $r5 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r6 = (android.os.StrictMode$ViolationInfo) $r5;

        virtualinvoke $r6.<android.os.StrictMode$ViolationInfo: void writeToParcel(android.os.Parcel,int)>(r0, 0);

        i2 = i2 + 1;

        goto label2;

     label3:
        $r4 = <android.os.StrictMode: java.lang.ThreadLocal gatheredViolations>;

        virtualinvoke $r4.<java.lang.ThreadLocal: void set(java.lang.Object)>(null);

        return;
    }
}
