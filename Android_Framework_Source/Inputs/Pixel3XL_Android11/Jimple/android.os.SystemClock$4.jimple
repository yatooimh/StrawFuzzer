class android.os.SystemClock$4 extends android.os.SimpleClock
{
    private final android.location.ILocationManager mMgr;

    void <init>(java.time.ZoneId)
    {
        android.os.SystemClock$4 r0;
        java.time.ZoneId r1;
        android.os.IBinder $r2;
        android.location.ILocationManager $r3;

        r0 := @this: android.os.SystemClock$4;

        r1 := @parameter0: java.time.ZoneId;

        specialinvoke r0.<android.os.SimpleClock: void <init>(java.time.ZoneId)>(r1);

        $r2 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("location");

        $r3 = staticinvoke <android.location.ILocationManager$Stub: android.location.ILocationManager asInterface(android.os.IBinder)>($r2);

        r0.<android.os.SystemClock$4: android.location.ILocationManager mMgr> = $r3;

        return;
    }

    public long millis()
    {
        android.os.SystemClock$4 r0;
        long l0, $l1, $l2, $l3, $l4, $l5;
        android.location.ILocationManager $r1;
        java.time.DateTimeException $r2;
        android.os.RemoteException $r3;
        android.location.LocationTime r5;

        r0 := @this: android.os.SystemClock$4;

     label1:
        $r1 = r0.<android.os.SystemClock$4: android.location.ILocationManager mMgr>;

        r5 = interfaceinvoke $r1.<android.location.ILocationManager: android.location.LocationTime getGnssTimeMillis()>();

     label2:
        if r5 == null goto label3;

        $l1 = staticinvoke <android.os.SystemClock: long elapsedRealtimeNanos()>();

        $l2 = virtualinvoke r5.<android.location.LocationTime: long getElapsedRealtimeNanos()>();

        $l3 = $l1 - $l2;

        l0 = $l3 / 1000000L;

        $l4 = virtualinvoke r5.<android.location.LocationTime: long getTime()>();

        $l5 = $l4 + l0;

        return $l5;

     label3:
        $r2 = new java.time.DateTimeException;

        specialinvoke $r2.<java.time.DateTimeException: void <init>(java.lang.String)>("Gnss based time is not available.");

        throw $r2;

     label4:
        $r3 := @caughtexception;

        virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        return 0L;

        catch android.os.RemoteException from label1 to label2 with label4;
    }
}
