public final class android.os.SystemClock extends java.lang.Object
{
    private static final java.lang.String TAG;

    private void <init>()
    {
        android.os.SystemClock r0;

        r0 := @this: android.os.SystemClock;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.time.Clock currentGnssTimeClock()
    {
        android.os.SystemClock$4 $r0;
        java.time.ZoneOffset $r1;

        $r0 = new android.os.SystemClock$4;

        $r1 = <java.time.ZoneOffset: java.time.ZoneOffset UTC>;

        specialinvoke $r0.<android.os.SystemClock$4: void <init>(java.time.ZoneId)>($r1);

        return $r0;
    }

    public static java.time.Clock currentNetworkTimeClock()
    {
        android.os.SystemClock$3 $r0;
        java.time.ZoneOffset $r1;

        $r0 = new android.os.SystemClock$3;

        $r1 = <java.time.ZoneOffset: java.time.ZoneOffset UTC>;

        specialinvoke $r0.<android.os.SystemClock$3: void <init>(java.time.ZoneId)>($r1);

        return $r0;
    }

    public static long currentNetworkTimeMillis()
    {
        long l0;
        android.os.IBinder $r0;
        java.lang.RuntimeException $r1, $r4, $r6;
        android.os.DeadSystemException $r2;
        android.os.RemoteException $r3;
        android.os.ParcelableException $r5;
        android.app.IAlarmManager r7;

        $r0 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("alarm");

        r7 = staticinvoke <android.app.IAlarmManager$Stub: android.app.IAlarmManager asInterface(android.os.IBinder)>($r0);

        if r7 == null goto label5;

     label1:
        l0 = interfaceinvoke r7.<android.app.IAlarmManager: long currentNetworkTimeMillis()>();

     label2:
        return l0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        $r5 := @caughtexception;

        virtualinvoke $r5.<android.os.ParcelableException: void maybeRethrow(java.lang.Class)>(class "Ljava/time/DateTimeException;");

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

     label5:
        $r1 = new java.lang.RuntimeException;

        $r2 = new android.os.DeadSystemException;

        specialinvoke $r2.<android.os.DeadSystemException: void <init>()>();

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r2);

        throw $r1;

        catch android.os.ParcelableException from label1 to label2 with label4;
        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static native long currentThreadTimeMicro();

    public static native long currentThreadTimeMillis();

    public static native long currentTimeMicro();

    public static native long elapsedRealtime();

    public static java.time.Clock elapsedRealtimeClock()
    {
        android.os.SystemClock$2 $r0;
        java.time.ZoneOffset $r1;

        $r0 = new android.os.SystemClock$2;

        $r1 = <java.time.ZoneOffset: java.time.ZoneOffset UTC>;

        specialinvoke $r0.<android.os.SystemClock$2: void <init>(java.time.ZoneId)>($r1);

        return $r0;
    }

    public static native long elapsedRealtimeNanos();

    public static boolean setCurrentTimeMillis(long)
    {
        long l0;
        boolean z0;
        android.os.IBinder $r0;
        android.os.RemoteException $r1;
        java.lang.Throwable $r2;
        android.app.IAlarmManager r3;

        l0 := @parameter0: long;

        $r0 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("alarm");

        r3 = staticinvoke <android.app.IAlarmManager$Stub: android.app.IAlarmManager asInterface(android.os.IBinder)>($r0);

        if r3 != null goto label1;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("SystemClock", "Unable to set RTC: mgr == null");

        return 0;

     label1:
        z0 = interfaceinvoke r3.<android.app.IAlarmManager: boolean setTime(long)>(l0);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SystemClock", "Unable to set RTC", $r2);

        goto label5;

     label4:
        $r1 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SystemClock", "Unable to set RTC", $r1);

     label5:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.SecurityException from label1 to label2 with label3;
    }

    public static void sleep(long)
    {
        long l0, l1, $l2, $l3, l5;
        byte $b4;
        java.lang.Thread $r1;
        java.lang.Throwable $r2;
        boolean z0;

        l0 := @parameter0: long;

        l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        l5 = l0;

        z0 = 0;

     label1:
        staticinvoke <java.lang.Thread: void sleep(long)>(l5);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        z0 = 1;

     label4:
        $l2 = l1 + l0;

        $l3 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        l5 = $l2 - $l3;

        $b4 = l5 cmp 0L;

        if $b4 > 0 goto label6;

        if z0 == 0 goto label5;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r1.<java.lang.Thread: void interrupt()>();

     label5:
        return;

     label6:
        goto label1;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public static java.time.Clock uptimeClock()
    {
        android.os.SystemClock$1 $r0;
        java.time.ZoneOffset $r1;

        $r0 = new android.os.SystemClock$1;

        $r1 = <java.time.ZoneOffset: java.time.ZoneOffset UTC>;

        specialinvoke $r0.<android.os.SystemClock$1: void <init>(java.time.ZoneId)>($r1);

        return $r0;
    }

    public static native long uptimeMillis();

    public static void <clinit>()
    {
        <android.os.SystemClock: java.lang.String TAG> = "SystemClock";

        return;
    }
}
