public class android.os.SystemVibrator extends android.os.Vibrator
{
    private static final java.lang.String TAG;
    private final android.content.Context mContext;
    private final android.util.ArrayMap mDelegates;
    private final android.os.IVibratorService mService;
    private final android.os.Binder mToken;

    public void <init>()
    {
        android.os.SystemVibrator r0;
        android.os.Binder $r1;
        android.util.ArrayMap $r2;
        android.os.IBinder $r3;
        android.os.IVibratorService $r4;

        r0 := @this: android.os.SystemVibrator;

        specialinvoke r0.<android.os.Vibrator: void <init>()>();

        $r1 = new android.os.Binder;

        specialinvoke $r1.<android.os.Binder: void <init>()>();

        r0.<android.os.SystemVibrator: android.os.Binder mToken> = $r1;

        $r2 = new android.util.ArrayMap;

        specialinvoke $r2.<android.util.ArrayMap: void <init>()>();

        r0.<android.os.SystemVibrator: android.util.ArrayMap mDelegates> = $r2;

        r0.<android.os.SystemVibrator: android.content.Context mContext> = null;

        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("vibrator");

        $r4 = staticinvoke <android.os.IVibratorService$Stub: android.os.IVibratorService asInterface(android.os.IBinder)>($r3);

        r0.<android.os.SystemVibrator: android.os.IVibratorService mService> = $r4;

        return;
    }

    public void <init>(android.content.Context)
    {
        android.os.SystemVibrator r0;
        android.content.Context r1;
        android.os.Binder $r2;
        android.util.ArrayMap $r3;
        android.os.IBinder $r4;
        android.os.IVibratorService $r5;

        r0 := @this: android.os.SystemVibrator;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.os.Vibrator: void <init>(android.content.Context)>(r1);

        $r2 = new android.os.Binder;

        specialinvoke $r2.<android.os.Binder: void <init>()>();

        r0.<android.os.SystemVibrator: android.os.Binder mToken> = $r2;

        $r3 = new android.util.ArrayMap;

        specialinvoke $r3.<android.util.ArrayMap: void <init>()>();

        r0.<android.os.SystemVibrator: android.util.ArrayMap mDelegates> = $r3;

        r0.<android.os.SystemVibrator: android.content.Context mContext> = r1;

        $r4 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("vibrator");

        $r5 = staticinvoke <android.os.IVibratorService$Stub: android.os.IVibratorService asInterface(android.os.IBinder)>($r4);

        r0.<android.os.SystemVibrator: android.os.IVibratorService mService> = $r5;

        return;
    }

    public void addVibratorStateListener(android.os.Vibrator$OnVibratorStateChangedListener)
    {
        android.os.SystemVibrator r0;
        android.os.Vibrator$OnVibratorStateChangedListener r1;
        android.content.Context r2;
        java.util.concurrent.Executor $r4;

        r0 := @this: android.os.SystemVibrator;

        r1 := @parameter0: android.os.Vibrator$OnVibratorStateChangedListener;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        r2 = r0.<android.os.SystemVibrator: android.content.Context mContext>;

        if r2 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Vibrator", "Failed to add vibrate state listener; no vibrator context.");

        return;

     label1:
        $r4 = virtualinvoke r2.<android.content.Context: java.util.concurrent.Executor getMainExecutor()>();

        virtualinvoke r0.<android.os.SystemVibrator: void addVibratorStateListener(java.util.concurrent.Executor,android.os.Vibrator$OnVibratorStateChangedListener)>($r4, r1);

        return;
    }

    public void addVibratorStateListener(java.util.concurrent.Executor, android.os.Vibrator$OnVibratorStateChangedListener)
    {
        android.os.SystemVibrator r0;
        android.os.Vibrator$OnVibratorStateChangedListener r1;
        android.util.ArrayMap r2, $r7, $r9;
        android.os.SystemVibrator$OnVibratorStateChangedListenerDelegate r3;
        android.os.IVibratorService $r6, $r8;
        boolean $z0, $z1;
        android.os.RemoteException $r11;
        java.lang.RuntimeException $r12;
        java.lang.Throwable $r13;
        java.util.concurrent.Executor r14;

        r0 := @this: android.os.SystemVibrator;

        r14 := @parameter0: java.util.concurrent.Executor;

        r1 := @parameter1: android.os.Vibrator$OnVibratorStateChangedListener;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r14);

        $r6 = r0.<android.os.SystemVibrator: android.os.IVibratorService mService>;

        if $r6 != null goto label01;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Vibrator", "Failed to add vibrate state listener; no vibrator service.");

        return;

     label01:
        r2 = r0.<android.os.SystemVibrator: android.util.ArrayMap mDelegates>;

        entermonitor r2;

     label02:
        $r7 = r0.<android.os.SystemVibrator: android.util.ArrayMap mDelegates>;

        $z0 = virtualinvoke $r7.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label04;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Vibrator", "Listener already registered.");

        exitmonitor r2;

     label03:
        return;

     label04:
        r3 = new android.os.SystemVibrator$OnVibratorStateChangedListenerDelegate;

        specialinvoke r3.<android.os.SystemVibrator$OnVibratorStateChangedListenerDelegate: void <init>(android.os.SystemVibrator,android.os.Vibrator$OnVibratorStateChangedListener,java.util.concurrent.Executor)>(r0, r1, r14);

        $r8 = r0.<android.os.SystemVibrator: android.os.IVibratorService mService>;

        $z1 = interfaceinvoke $r8.<android.os.IVibratorService: boolean registerVibratorStateListener(android.os.IVibratorStateListener)>(r3);

        if $z1 != 0 goto label07;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Vibrator", "Failed to register vibrate state listener");

     label05:
        exitmonitor r2;

     label06:
        return;

     label07:
        $r9 = r0.<android.os.SystemVibrator: android.util.ArrayMap mDelegates>;

        virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3);

     label08:
        exitmonitor r2;

     label09:
        return;

     label10:
        $r11 := @caughtexception;

     label11:
        $r12 = virtualinvoke $r11.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r12;

     label12:
        $r13 := @caughtexception;

     label13:
        exitmonitor r2;

     label14:
        throw $r13;

        catch java.lang.Throwable from label02 to label03 with label12;
        catch android.os.RemoteException from label04 to label05 with label10;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch android.os.RemoteException from label07 to label08 with label10;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label11 to label12 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public transient int[] areEffectsSupported(int[])
    {
        android.os.SystemVibrator r0;
        android.os.IVibratorService $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        int[] r4, r5;

        r0 := @this: android.os.SystemVibrator;

        r4 := @parameter0: int[];

     label1:
        $r1 = r0.<android.os.SystemVibrator: android.os.IVibratorService mService>;

        r5 = interfaceinvoke $r1.<android.os.IVibratorService: int[] areEffectsSupported(int[])>(r4);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Vibrator", "Failed to query effect support");

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public transient boolean[] arePrimitivesSupported(int[])
    {
        android.os.SystemVibrator r0;
        android.os.IVibratorService $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        int[] r4;
        boolean[] r5;

        r0 := @this: android.os.SystemVibrator;

        r4 := @parameter0: int[];

     label1:
        $r1 = r0.<android.os.SystemVibrator: android.os.IVibratorService mService>;

        r5 = interfaceinvoke $r1.<android.os.IVibratorService: boolean[] arePrimitivesSupported(int[])>(r4);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Vibrator", "Failed to query effect support");

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void cancel()
    {
        android.os.SystemVibrator r0;
        android.os.Binder $r1;
        android.os.RemoteException $r2;
        android.os.IVibratorService r3;

        r0 := @this: android.os.SystemVibrator;

        r3 = r0.<android.os.SystemVibrator: android.os.IVibratorService mService>;

        if r3 != null goto label1;

        return;

     label1:
        $r1 = r0.<android.os.SystemVibrator: android.os.Binder mToken>;

        interfaceinvoke r3.<android.os.IVibratorService: void cancelVibrate(android.os.IBinder)>($r1);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("Vibrator", "Failed to cancel vibration.", $r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean hasAmplitudeControl()
    {
        android.os.SystemVibrator r0;
        boolean z0;
        android.os.RemoteException $r1;
        android.os.IVibratorService r2;

        r0 := @this: android.os.SystemVibrator;

        r2 = r0.<android.os.SystemVibrator: android.os.IVibratorService mService>;

        if r2 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Vibrator", "Failed to check amplitude control; no vibrator service.");

        return 0;

     label1:
        z0 = interfaceinvoke r2.<android.os.IVibratorService: boolean hasAmplitudeControl()>();

     label2:
        return z0;

     label3:
        $r1 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean hasVibrator()
    {
        android.os.SystemVibrator r0;
        boolean z0;
        android.os.RemoteException $r1;
        android.os.IVibratorService r2;

        r0 := @this: android.os.SystemVibrator;

        r2 = r0.<android.os.SystemVibrator: android.os.IVibratorService mService>;

        if r2 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Vibrator", "Failed to vibrate; no vibrator service.");

        return 0;

     label1:
        z0 = interfaceinvoke r2.<android.os.IVibratorService: boolean hasVibrator()>();

     label2:
        return z0;

     label3:
        $r1 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isVibrating()
    {
        android.os.SystemVibrator r0;
        boolean z0;
        android.os.RemoteException $r1;
        android.os.IVibratorService r3;

        r0 := @this: android.os.SystemVibrator;

        r3 = r0.<android.os.SystemVibrator: android.os.IVibratorService mService>;

        if r3 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Vibrator", "Failed to vibrate; no vibrator service.");

        return 0;

     label1:
        z0 = interfaceinvoke r3.<android.os.IVibratorService: boolean isVibrating()>();

     label2:
        return z0;

     label3:
        $r1 := @caughtexception;

        virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void removeVibratorStateListener(android.os.Vibrator$OnVibratorStateChangedListener)
    {
        android.os.SystemVibrator r0;
        android.util.ArrayMap r1, $r5, $r6, $r9;
        android.os.SystemVibrator$OnVibratorStateChangedListenerDelegate r2;
        android.os.IVibratorService $r4, $r8;
        boolean $z0, $z1;
        java.lang.Object $r7;
        android.os.RemoteException $r11;
        java.lang.RuntimeException $r12;
        java.lang.Throwable $r13;
        android.os.Vibrator$OnVibratorStateChangedListener r14;

        r0 := @this: android.os.SystemVibrator;

        r14 := @parameter0: android.os.Vibrator$OnVibratorStateChangedListener;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r14);

        $r4 = r0.<android.os.SystemVibrator: android.os.IVibratorService mService>;

        if $r4 != null goto label01;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Vibrator", "Failed to remove vibrate state listener; no vibrator service.");

        return;

     label01:
        r1 = r0.<android.os.SystemVibrator: android.util.ArrayMap mDelegates>;

        entermonitor r1;

     label02:
        $r5 = r0.<android.os.SystemVibrator: android.util.ArrayMap mDelegates>;

        $z0 = virtualinvoke $r5.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r14);

        if $z0 == 0 goto label10;

        $r6 = r0.<android.os.SystemVibrator: android.util.ArrayMap mDelegates>;

        $r7 = virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r14);

        r2 = (android.os.SystemVibrator$OnVibratorStateChangedListenerDelegate) $r7;

     label03:
        $r8 = r0.<android.os.SystemVibrator: android.os.IVibratorService mService>;

        $z1 = interfaceinvoke $r8.<android.os.IVibratorService: boolean unregisterVibratorStateListener(android.os.IVibratorStateListener)>(r2);

        if $z1 != 0 goto label06;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Vibrator", "Failed to unregister vibrate state listener");

     label04:
        exitmonitor r1;

     label05:
        return;

     label06:
        $r9 = r0.<android.os.SystemVibrator: android.util.ArrayMap mDelegates>;

        virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r14);

     label07:
        goto label10;

     label08:
        $r11 := @caughtexception;

     label09:
        $r12 = virtualinvoke $r11.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r12;

     label10:
        exitmonitor r1;

     label11:
        return;

     label12:
        $r13 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r13;

        catch java.lang.Throwable from label02 to label03 with label12;
        catch android.os.RemoteException from label03 to label04 with label08;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch android.os.RemoteException from label06 to label07 with label08;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public boolean setAlwaysOnEffect(int, java.lang.String, int, android.os.VibrationEffect, android.media.AudioAttributes)
    {
        android.os.SystemVibrator r0;
        int i0, i1;
        android.os.VibrationEffect r1;
        android.os.VibrationAttributes$Builder r2;
        boolean z0;
        android.os.IVibratorService $r3, $r4;
        android.os.RemoteException $r5;
        java.lang.String r6;
        android.media.AudioAttributes r7;
        android.os.VibrationAttributes r8;

        r0 := @this: android.os.SystemVibrator;

        i0 := @parameter0: int;

        r6 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        r1 := @parameter3: android.os.VibrationEffect;

        r7 := @parameter4: android.media.AudioAttributes;

        $r3 = r0.<android.os.SystemVibrator: android.os.IVibratorService mService>;

        if $r3 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Vibrator", "Failed to set always-on effect; no vibrator service.");

        return 0;

     label1:
        r2 = new android.os.VibrationAttributes$Builder;

        specialinvoke r2.<android.os.VibrationAttributes$Builder: void <init>(android.media.AudioAttributes,android.os.VibrationEffect)>(r7, r1);

        r8 = virtualinvoke r2.<android.os.VibrationAttributes$Builder: android.os.VibrationAttributes build()>();

        $r4 = r0.<android.os.SystemVibrator: android.os.IVibratorService mService>;

        z0 = interfaceinvoke $r4.<android.os.IVibratorService: boolean setAlwaysOnEffect(int,java.lang.String,int,android.os.VibrationEffect,android.os.VibrationAttributes)>(i0, r6, i1, r1, r8);

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("Vibrator", "Failed to set always-on effect.", $r5);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void vibrate(int, java.lang.String, android.os.VibrationEffect, java.lang.String, android.media.AudioAttributes)
    {
        android.os.SystemVibrator r0;
        int i0;
        android.os.VibrationEffect r1;
        java.lang.String r2, r7;
        android.os.IVibratorService $r3, $r5;
        android.os.Binder $r4;
        android.os.RemoteException $r6;
        android.media.AudioAttributes r8, r9;
        android.media.AudioAttributes$Builder r10;
        android.os.VibrationAttributes$Builder r11;
        android.os.VibrationAttributes r12;

        r0 := @this: android.os.SystemVibrator;

        i0 := @parameter0: int;

        r7 := @parameter1: java.lang.String;

        r1 := @parameter2: android.os.VibrationEffect;

        r2 := @parameter3: java.lang.String;

        r8 := @parameter4: android.media.AudioAttributes;

        $r3 = r0.<android.os.SystemVibrator: android.os.IVibratorService mService>;

        if $r3 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Vibrator", "Failed to vibrate; no vibrator service.");

        return;

     label1:
        r9 = r8;

        if r8 != null goto label3;

     label2:
        r10 = new android.media.AudioAttributes$Builder;

        specialinvoke r10.<android.media.AudioAttributes$Builder: void <init>()>();

        r9 = virtualinvoke r10.<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>();

     label3:
        r11 = new android.os.VibrationAttributes$Builder;

        specialinvoke r11.<android.os.VibrationAttributes$Builder: void <init>(android.media.AudioAttributes,android.os.VibrationEffect)>(r9, r1);

        r12 = virtualinvoke r11.<android.os.VibrationAttributes$Builder: android.os.VibrationAttributes build()>();

        $r5 = r0.<android.os.SystemVibrator: android.os.IVibratorService mService>;

        $r4 = r0.<android.os.SystemVibrator: android.os.Binder mToken>;

        interfaceinvoke $r5.<android.os.IVibratorService: void vibrate(int,java.lang.String,android.os.VibrationEffect,android.os.VibrationAttributes,java.lang.String,android.os.IBinder)>(i0, r7, r1, r12, r2, $r4);

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("Vibrator", "Failed to vibrate.", $r6);

     label6:
        return;

        catch android.os.RemoteException from label2 to label3 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public static void <clinit>()
    {
        <android.os.SystemVibrator: java.lang.String TAG> = "Vibrator";

        return;
    }
}
