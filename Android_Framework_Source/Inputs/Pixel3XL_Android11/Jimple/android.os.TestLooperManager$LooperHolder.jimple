class android.os.TestLooperManager$LooperHolder extends java.lang.Object implements java.lang.Runnable
{
    final android.os.TestLooperManager this$0;

    private void <init>(android.os.TestLooperManager)
    {
        android.os.TestLooperManager$LooperHolder r0;
        android.os.TestLooperManager r1;

        r0 := @this: android.os.TestLooperManager$LooperHolder;

        r1 := @parameter0: android.os.TestLooperManager;

        r0.<android.os.TestLooperManager$LooperHolder: android.os.TestLooperManager this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    void <init>(android.os.TestLooperManager, android.os.TestLooperManager$1)
    {
        android.os.TestLooperManager$LooperHolder r0;
        android.os.TestLooperManager r1;
        android.os.TestLooperManager$1 r2;

        r0 := @this: android.os.TestLooperManager$LooperHolder;

        r1 := @parameter0: android.os.TestLooperManager;

        r2 := @parameter1: android.os.TestLooperManager$1;

        specialinvoke r0.<android.os.TestLooperManager$LooperHolder: void <init>(android.os.TestLooperManager)>(r1);

        return;
    }

    private void processMessage(android.os.TestLooperManager$MessageExecution)
    {
        android.os.TestLooperManager$LooperHolder r0;
        android.os.TestLooperManager$MessageExecution r1;
        android.os.Message $r2, $r4;
        android.os.Handler $r3;
        java.lang.Throwable $r6, $r7;

        r0 := @this: android.os.TestLooperManager$LooperHolder;

        r1 := @parameter0: android.os.TestLooperManager$MessageExecution;

        entermonitor r1;

     label1:
        $r2 = staticinvoke <android.os.TestLooperManager$MessageExecution: android.os.Message access$200(android.os.TestLooperManager$MessageExecution)>(r1);

        $r3 = $r2.<android.os.Message: android.os.Handler target>;

        $r4 = staticinvoke <android.os.TestLooperManager$MessageExecution: android.os.Message access$200(android.os.TestLooperManager$MessageExecution)>(r1);

        virtualinvoke $r3.<android.os.Handler: void dispatchMessage(android.os.Message)>($r4);

        staticinvoke <android.os.TestLooperManager$MessageExecution: java.lang.Throwable access$302(android.os.TestLooperManager$MessageExecution,java.lang.Throwable)>(r1, null);

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

     label4:
        staticinvoke <android.os.TestLooperManager$MessageExecution: java.lang.Throwable access$302(android.os.TestLooperManager$MessageExecution,java.lang.Throwable)>(r1, $r7);

     label5:
        virtualinvoke r1.<java.lang.Object: void notifyAll()>();

        exitmonitor r1;

     label6:
        return;

     label7:
        $r6 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void run()
    {
        android.os.TestLooperManager$LooperHolder r0;
        android.os.TestLooperManager $r1, $r2, $r3, $r4, $r5, r12, r15;
        boolean $z1;
        java.util.concurrent.LinkedBlockingQueue $r6;
        java.lang.Object $r7;
        android.os.Message $r8;
        java.lang.Throwable $r9, $r10, $r11;
        android.os.TestLooperManager$MessageExecution r13;

        r0 := @this: android.os.TestLooperManager$LooperHolder;

        r12 = r0.<android.os.TestLooperManager$LooperHolder: android.os.TestLooperManager this$0>;

        entermonitor r12;

     label01:
        $r1 = r0.<android.os.TestLooperManager$LooperHolder: android.os.TestLooperManager this$0>;

        staticinvoke <android.os.TestLooperManager: boolean access$402(android.os.TestLooperManager,boolean)>($r1, 1);

        $r2 = r0.<android.os.TestLooperManager$LooperHolder: android.os.TestLooperManager this$0>;

        virtualinvoke $r2.<java.lang.Object: void notify()>();

        exitmonitor r12;

     label02:
        $r3 = r0.<android.os.TestLooperManager$LooperHolder: android.os.TestLooperManager this$0>;

        $z1 = staticinvoke <android.os.TestLooperManager: boolean access$500(android.os.TestLooperManager)>($r3);

        if $z1 != 0 goto label07;

     label03:
        $r5 = r0.<android.os.TestLooperManager$LooperHolder: android.os.TestLooperManager this$0>;

        $r6 = staticinvoke <android.os.TestLooperManager: java.util.concurrent.LinkedBlockingQueue access$600(android.os.TestLooperManager)>($r5);

        $r7 = virtualinvoke $r6.<java.util.concurrent.LinkedBlockingQueue: java.lang.Object take()>();

        r13 = (android.os.TestLooperManager$MessageExecution) $r7;

        $r8 = staticinvoke <android.os.TestLooperManager$MessageExecution: android.os.Message access$200(android.os.TestLooperManager$MessageExecution)>(r13);

        if $r8 == null goto label06;

        specialinvoke r0.<android.os.TestLooperManager$LooperHolder: void processMessage(android.os.TestLooperManager$MessageExecution)>(r13);

     label04:
        goto label06;

     label05:
        $r9 := @caughtexception;

     label06:
        goto label02;

     label07:
        r15 = r0.<android.os.TestLooperManager$LooperHolder: android.os.TestLooperManager this$0>;

        entermonitor r15;

     label08:
        $r4 = r0.<android.os.TestLooperManager$LooperHolder: android.os.TestLooperManager this$0>;

        staticinvoke <android.os.TestLooperManager: boolean access$402(android.os.TestLooperManager,boolean)>($r4, 0);

        exitmonitor r15;

     label09:
        return;

     label10:
        $r11 := @caughtexception;

     label11:
        exitmonitor r15;

     label12:
        throw $r11;

     label13:
        $r10 := @caughtexception;

     label14:
        exitmonitor r12;

     label15:
        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.InterruptedException from label03 to label04 with label05;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
        catch java.lang.Throwable from label14 to label15 with label13;
    }
}
