public class android.os.TestLooperManager extends java.lang.Object
{
    private static final android.util.ArraySet sHeldLoopers;
    private final java.util.concurrent.LinkedBlockingQueue mExecuteQueue;
    private final android.os.Looper mLooper;
    private boolean mLooperBlocked;
    private final android.os.MessageQueue mQueue;
    private boolean mReleased;

    static void <clinit>()
    {
        android.util.ArraySet $r0;

        $r0 = new android.util.ArraySet;

        specialinvoke $r0.<android.util.ArraySet: void <init>()>();

        <android.os.TestLooperManager: android.util.ArraySet sHeldLoopers> = $r0;

        return;
    }

    public void <init>(android.os.Looper)
    {
        android.os.TestLooperManager r0;
        android.util.ArraySet r1, $r3, $r4;
        java.util.concurrent.LinkedBlockingQueue $r2;
        boolean $z0;
        android.os.MessageQueue $r5;
        android.os.Handler $r6;
        android.os.TestLooperManager$LooperHolder $r7;
        java.lang.Throwable $r8;
        android.os.Looper r9;
        java.lang.RuntimeException r10;

        r0 := @this: android.os.TestLooperManager;

        r9 := @parameter0: android.os.Looper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r2.<java.util.concurrent.LinkedBlockingQueue: void <init>()>();

        r0.<android.os.TestLooperManager: java.util.concurrent.LinkedBlockingQueue mExecuteQueue> = $r2;

        r1 = <android.os.TestLooperManager: android.util.ArraySet sHeldLoopers>;

        entermonitor r1;

     label1:
        $r3 = <android.os.TestLooperManager: android.util.ArraySet sHeldLoopers>;

        $z0 = virtualinvoke $r3.<android.util.ArraySet: boolean contains(java.lang.Object)>(r9);

        if $z0 != 0 goto label3;

        $r4 = <android.os.TestLooperManager: android.util.ArraySet sHeldLoopers>;

        virtualinvoke $r4.<android.util.ArraySet: boolean add(java.lang.Object)>(r9);

        exitmonitor r1;

     label2:
        r0.<android.os.TestLooperManager: android.os.Looper mLooper> = r9;

        $r5 = virtualinvoke r9.<android.os.Looper: android.os.MessageQueue getQueue()>();

        r0.<android.os.TestLooperManager: android.os.MessageQueue mQueue> = $r5;

        $r6 = new android.os.Handler;

        specialinvoke $r6.<android.os.Handler: void <init>(android.os.Looper)>(r9);

        $r7 = new android.os.TestLooperManager$LooperHolder;

        specialinvoke $r7.<android.os.TestLooperManager$LooperHolder: void <init>(android.os.TestLooperManager,android.os.TestLooperManager$1)>(r0, null);

        virtualinvoke $r6.<android.os.Handler: boolean post(java.lang.Runnable)>($r7);

        return;

     label3:
        r10 = new java.lang.RuntimeException;

        specialinvoke r10.<java.lang.RuntimeException: void <init>(java.lang.String)>("TestLooperManager already held for this looper");

        throw r10;

     label4:
        $r8 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    static boolean access$402(android.os.TestLooperManager, boolean)
    {
        android.os.TestLooperManager r0;
        boolean z0;

        r0 := @parameter0: android.os.TestLooperManager;

        z0 := @parameter1: boolean;

        r0.<android.os.TestLooperManager: boolean mLooperBlocked> = z0;

        return z0;
    }

    static boolean access$500(android.os.TestLooperManager)
    {
        android.os.TestLooperManager r0;
        boolean $z0;

        r0 := @parameter0: android.os.TestLooperManager;

        $z0 = r0.<android.os.TestLooperManager: boolean mReleased>;

        return $z0;
    }

    static java.util.concurrent.LinkedBlockingQueue access$600(android.os.TestLooperManager)
    {
        android.os.TestLooperManager r0;
        java.util.concurrent.LinkedBlockingQueue $r1;

        r0 := @parameter0: android.os.TestLooperManager;

        $r1 = r0.<android.os.TestLooperManager: java.util.concurrent.LinkedBlockingQueue mExecuteQueue>;

        return $r1;
    }

    private void checkReleased()
    {
        android.os.TestLooperManager r0;
        boolean $z0;
        java.lang.RuntimeException $r1;

        r0 := @this: android.os.TestLooperManager;

        $z0 = r0.<android.os.TestLooperManager: boolean mReleased>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("release() has already be called");

        throw $r1;
    }

    public void execute(android.os.Message)
    {
        android.os.TestLooperManager r0;
        android.os.Looper $r2, $r3;
        android.os.TestLooperManager$MessageExecution $r4;
        java.util.concurrent.LinkedBlockingQueue $r6;
        java.lang.Throwable $r7, $r8, $r10, $r11;
        android.os.Handler $r9;
        android.os.Message r12;
        java.lang.RuntimeException r14;

        r0 := @this: android.os.TestLooperManager;

        r12 := @parameter0: android.os.Message;

        specialinvoke r0.<android.os.TestLooperManager: void checkReleased()>();

        $r2 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r3 = r0.<android.os.TestLooperManager: android.os.Looper mLooper>;

        if $r2 != $r3 goto label01;

        $r9 = r12.<android.os.Message: android.os.Handler target>;

        virtualinvoke $r9.<android.os.Handler: void dispatchMessage(android.os.Message)>(r12);

        goto label07;

     label01:
        $r4 = new android.os.TestLooperManager$MessageExecution;

        specialinvoke $r4.<android.os.TestLooperManager$MessageExecution: void <init>(android.os.TestLooperManager$1)>(null);

        staticinvoke <android.os.TestLooperManager$MessageExecution: android.os.Message access$202(android.os.TestLooperManager$MessageExecution,android.os.Message)>($r4, r12);

        entermonitor $r4;

     label02:
        $r6 = r0.<android.os.TestLooperManager: java.util.concurrent.LinkedBlockingQueue mExecuteQueue>;

        virtualinvoke $r6.<java.util.concurrent.LinkedBlockingQueue: boolean add(java.lang.Object)>($r4);

     label03:
        virtualinvoke $r4.<java.lang.Object: void wait()>();

     label04:
        goto label06;

     label05:
        $r11 := @caughtexception;

     label06:
        $r7 = staticinvoke <android.os.TestLooperManager$MessageExecution: java.lang.Throwable access$300(android.os.TestLooperManager$MessageExecution)>($r4);

        if $r7 != null goto label08;

        exitmonitor $r4;

     label07:
        return;

     label08:
        r14 = new java.lang.RuntimeException;

        $r8 = staticinvoke <android.os.TestLooperManager$MessageExecution: java.lang.Throwable access$300(android.os.TestLooperManager$MessageExecution)>($r4);

        specialinvoke r14.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r8);

        throw r14;

     label09:
        $r10 := @caughtexception;

     label10:
        exitmonitor $r4;

     label11:
        throw $r10;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.InterruptedException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public android.os.MessageQueue getMessageQueue()
    {
        android.os.TestLooperManager r0;
        android.os.MessageQueue $r1;

        r0 := @this: android.os.TestLooperManager;

        specialinvoke r0.<android.os.TestLooperManager: void checkReleased()>();

        $r1 = r0.<android.os.TestLooperManager: android.os.MessageQueue mQueue>;

        return $r1;
    }

    public android.os.MessageQueue getQueue()
    {
        android.os.TestLooperManager r0;
        android.os.MessageQueue $r1;

        r0 := @this: android.os.TestLooperManager;

        $r1 = virtualinvoke r0.<android.os.TestLooperManager: android.os.MessageQueue getMessageQueue()>();

        return $r1;
    }

    public boolean hasMessages(android.os.Handler, java.lang.Object, int)
    {
        android.os.TestLooperManager r0;
        android.os.Handler r1;
        java.lang.Object r2;
        int i0;
        android.os.MessageQueue $r3;
        boolean $z0;

        r0 := @this: android.os.TestLooperManager;

        r1 := @parameter0: android.os.Handler;

        r2 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        specialinvoke r0.<android.os.TestLooperManager: void checkReleased()>();

        $r3 = r0.<android.os.TestLooperManager: android.os.MessageQueue mQueue>;

        $z0 = virtualinvoke $r3.<android.os.MessageQueue: boolean hasMessages(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return $z0;
    }

    public boolean hasMessages(android.os.Handler, java.lang.Object, java.lang.Runnable)
    {
        android.os.TestLooperManager r0;
        android.os.Handler r1;
        java.lang.Object r2;
        java.lang.Runnable r3;
        android.os.MessageQueue $r4;
        boolean $z0;

        r0 := @this: android.os.TestLooperManager;

        r1 := @parameter0: android.os.Handler;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Runnable;

        specialinvoke r0.<android.os.TestLooperManager: void checkReleased()>();

        $r4 = r0.<android.os.TestLooperManager: android.os.MessageQueue mQueue>;

        $z0 = virtualinvoke $r4.<android.os.MessageQueue: boolean hasMessages(android.os.Handler,java.lang.Runnable,java.lang.Object)>(r1, r3, r2);

        return $z0;
    }

    public android.os.Message next()
    {
        android.os.TestLooperManager r0;
        boolean $z0;
        android.os.MessageQueue $r1;
        android.os.Message $r2;
        java.lang.Throwable $r3, $r4;

        r0 := @this: android.os.TestLooperManager;

     label01:
        $z0 = r0.<android.os.TestLooperManager: boolean mLooperBlocked>;

        if $z0 != 0 goto label10;

        entermonitor r0;

     label02:
        virtualinvoke r0.<java.lang.Object: void wait()>();

     label03:
        goto label06;

     label04:
        $r3 := @caughtexception;

        goto label08;

     label05:
        $r4 := @caughtexception;

     label06:
        exitmonitor r0;

     label07:
        goto label01;

     label08:
        exitmonitor r0;

     label09:
        throw $r3;

     label10:
        specialinvoke r0.<android.os.TestLooperManager: void checkReleased()>();

        $r1 = r0.<android.os.TestLooperManager: android.os.MessageQueue mQueue>;

        $r2 = virtualinvoke $r1.<android.os.MessageQueue: android.os.Message next()>();

        return $r2;

        catch java.lang.InterruptedException from label02 to label03 with label05;
        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label06 to label07 with label04;
        catch java.lang.Throwable from label08 to label09 with label04;
    }

    public void recycle(android.os.Message)
    {
        android.os.TestLooperManager r0;
        android.os.Message r1;

        r0 := @this: android.os.TestLooperManager;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<android.os.TestLooperManager: void checkReleased()>();

        virtualinvoke r1.<android.os.Message: void recycleUnchecked()>();

        return;
    }

    public void release()
    {
        android.os.TestLooperManager r0;
        android.util.ArraySet r1, $r4;
        android.os.Looper $r3;
        android.os.TestLooperManager$MessageExecution $r5;
        java.util.concurrent.LinkedBlockingQueue $r6;
        java.lang.Throwable $r7;

        r0 := @this: android.os.TestLooperManager;

        r1 = <android.os.TestLooperManager: android.util.ArraySet sHeldLoopers>;

        entermonitor r1;

     label1:
        $r4 = <android.os.TestLooperManager: android.util.ArraySet sHeldLoopers>;

        $r3 = r0.<android.os.TestLooperManager: android.os.Looper mLooper>;

        virtualinvoke $r4.<android.util.ArraySet: boolean remove(java.lang.Object)>($r3);

        exitmonitor r1;

     label2:
        specialinvoke r0.<android.os.TestLooperManager: void checkReleased()>();

        r0.<android.os.TestLooperManager: boolean mReleased> = 1;

        $r6 = r0.<android.os.TestLooperManager: java.util.concurrent.LinkedBlockingQueue mExecuteQueue>;

        $r5 = new android.os.TestLooperManager$MessageExecution;

        specialinvoke $r5.<android.os.TestLooperManager$MessageExecution: void <init>(android.os.TestLooperManager$1)>(null);

        virtualinvoke $r6.<java.util.concurrent.LinkedBlockingQueue: boolean add(java.lang.Object)>($r5);

        return;

     label3:
        $r7 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }
}
