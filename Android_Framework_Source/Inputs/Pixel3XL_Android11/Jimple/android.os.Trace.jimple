public final class android.os.Trace extends java.lang.Object
{
    private static final int MAX_SECTION_NAME_LEN;
    private static final java.lang.String TAG;
    public static final long TRACE_TAG_ACTIVITY_MANAGER;
    public static final long TRACE_TAG_ADB;
    public static final long TRACE_TAG_AIDL;
    public static final long TRACE_TAG_ALWAYS;
    public static final long TRACE_TAG_APEX_MANAGER;
    public static final long TRACE_TAG_APP;
    public static final long TRACE_TAG_AUDIO;
    public static final long TRACE_TAG_BIONIC;
    public static final long TRACE_TAG_CAMERA;
    public static final long TRACE_TAG_DALVIK;
    public static final long TRACE_TAG_DATABASE;
    public static final long TRACE_TAG_GRAPHICS;
    public static final long TRACE_TAG_HAL;
    public static final long TRACE_TAG_INPUT;
    public static final long TRACE_TAG_NETWORK;
    public static final long TRACE_TAG_NEVER;
    public static final long TRACE_TAG_NNAPI;
    private static final long TRACE_TAG_NOT_READY;
    public static final long TRACE_TAG_PACKAGE_MANAGER;
    public static final long TRACE_TAG_POWER;
    public static final long TRACE_TAG_RESOURCES;
    public static final long TRACE_TAG_RRO;
    public static final long TRACE_TAG_RS;
    public static final long TRACE_TAG_SYNC_MANAGER;
    public static final long TRACE_TAG_SYSTEM_SERVER;
    public static final long TRACE_TAG_VIBRATOR;
    public static final long TRACE_TAG_VIDEO;
    public static final long TRACE_TAG_VIEW;
    public static final long TRACE_TAG_WEBVIEW;
    public static final long TRACE_TAG_WINDOW_MANAGER;
    private static volatile long sEnabledTags;
    private static int sZygoteDebugFlags;

    static void <clinit>()
    {
        <android.os.Trace: long TRACE_TAG_WINDOW_MANAGER> = 32L;

        <android.os.Trace: long TRACE_TAG_WEBVIEW> = 16L;

        <android.os.Trace: long TRACE_TAG_VIEW> = 8L;

        <android.os.Trace: long TRACE_TAG_VIDEO> = 512L;

        <android.os.Trace: long TRACE_TAG_VIBRATOR> = 8388608L;

        <android.os.Trace: long TRACE_TAG_SYSTEM_SERVER> = 524288L;

        <android.os.Trace: long TRACE_TAG_SYNC_MANAGER> = 128L;

        <android.os.Trace: long TRACE_TAG_RS> = 32768L;

        <android.os.Trace: long TRACE_TAG_RRO> = 67108864L;

        <android.os.Trace: long TRACE_TAG_RESOURCES> = 8192L;

        <android.os.Trace: long TRACE_TAG_POWER> = 131072L;

        <android.os.Trace: long TRACE_TAG_PACKAGE_MANAGER> = 262144L;

        <android.os.Trace: long TRACE_TAG_NOT_READY> = -9223372036854775808L;

        <android.os.Trace: long TRACE_TAG_NNAPI> = 33554432L;

        <android.os.Trace: long TRACE_TAG_NEVER> = 0L;

        <android.os.Trace: long TRACE_TAG_NETWORK> = 2097152L;

        <android.os.Trace: long TRACE_TAG_INPUT> = 4L;

        <android.os.Trace: long TRACE_TAG_HAL> = 2048L;

        <android.os.Trace: long TRACE_TAG_GRAPHICS> = 2L;

        <android.os.Trace: long TRACE_TAG_DATABASE> = 1048576L;

        <android.os.Trace: long TRACE_TAG_DALVIK> = 16384L;

        <android.os.Trace: long TRACE_TAG_CAMERA> = 1024L;

        <android.os.Trace: long TRACE_TAG_BIONIC> = 65536L;

        <android.os.Trace: long TRACE_TAG_AUDIO> = 256L;

        <android.os.Trace: long TRACE_TAG_APP> = 4096L;

        <android.os.Trace: long TRACE_TAG_APEX_MANAGER> = 262144L;

        <android.os.Trace: long TRACE_TAG_ALWAYS> = 1L;

        <android.os.Trace: long TRACE_TAG_AIDL> = 16777216L;

        <android.os.Trace: long TRACE_TAG_ADB> = 4194304L;

        <android.os.Trace: long TRACE_TAG_ACTIVITY_MANAGER> = 64L;

        <android.os.Trace: java.lang.String TAG> = "Trace";

        <android.os.Trace: int MAX_SECTION_NAME_LEN> = 127;

        <android.os.Trace: long sEnabledTags> = -9223372036854775808L;

        <android.os.Trace: int sZygoteDebugFlags> = 0;

        return;
    }

    private void <init>()
    {
        android.os.Trace r0;

        r0 := @this: android.os.Trace;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void asyncTraceBegin(long, java.lang.String, int)
    {
        long l0;
        java.lang.String r0;
        int i1;
        boolean $z0;

        l0 := @parameter0: long;

        r0 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        $z0 = staticinvoke <android.os.Trace: boolean isTagEnabled(long)>(l0);

        if $z0 == 0 goto label1;

        staticinvoke <android.os.Trace: void nativeAsyncTraceBegin(long,java.lang.String,int)>(l0, r0, i1);

     label1:
        return;
    }

    public static void asyncTraceEnd(long, java.lang.String, int)
    {
        long l0;
        java.lang.String r0;
        int i1;
        boolean $z0;

        l0 := @parameter0: long;

        r0 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        $z0 = staticinvoke <android.os.Trace: boolean isTagEnabled(long)>(l0);

        if $z0 == 0 goto label1;

        staticinvoke <android.os.Trace: void nativeAsyncTraceEnd(long,java.lang.String,int)>(l0, r0, i1);

     label1:
        return;
    }

    public static void beginAsyncSection(java.lang.String, int)
    {
        java.lang.String r0;
        int i0;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        staticinvoke <android.os.Trace: void asyncTraceBegin(long,java.lang.String,int)>(4096L, r0, i0);

        return;
    }

    public static void beginSection(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;
        int $i0;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.os.Trace: boolean isTagEnabled(long)>(4096L);

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 > 127 goto label1;

        staticinvoke <android.os.Trace: void nativeTraceBegin(long,java.lang.String)>(4096L, r0);

        goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sectionName is too long");

        throw $r1;

     label2:
        return;
    }

    public static void endAsyncSection(java.lang.String, int)
    {
        java.lang.String r0;
        int i0;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        staticinvoke <android.os.Trace: void asyncTraceEnd(long,java.lang.String,int)>(4096L, r0, i0);

        return;
    }

    public static void endSection()
    {
        boolean $z0;

        $z0 = staticinvoke <android.os.Trace: boolean isTagEnabled(long)>(4096L);

        if $z0 == 0 goto label1;

        staticinvoke <android.os.Trace: void nativeTraceEnd(long)>(4096L);

     label1:
        return;
    }

    public static boolean isEnabled()
    {
        boolean $z0;

        $z0 = staticinvoke <android.os.Trace: boolean isTagEnabled(long)>(4096L);

        return $z0;
    }

    public static boolean isTagEnabled(long)
    {
        long l0, $l1, $l2;
        byte $b3;
        boolean z0;

        l0 := @parameter0: long;

        $l1 = staticinvoke <android.os.Trace: long nativeGetEnabledTags()>();

        $l2 = $l1 & l0;

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private static native void nativeAsyncTraceBegin(long, java.lang.String, int);

    private static native void nativeAsyncTraceEnd(long, java.lang.String, int);

    private static native long nativeGetEnabledTags();

    private static native void nativeSetAppTracingAllowed(boolean);

    private static native void nativeSetTracingEnabled(boolean);

    private static native void nativeTraceBegin(long, java.lang.String);

    private static native void nativeTraceCounter(long, java.lang.String, long);

    private static native void nativeTraceEnd(long);

    public static void setAppTracingAllowed(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        staticinvoke <android.os.Trace: void nativeSetAppTracingAllowed(boolean)>(z0);

        return;
    }

    public static void setCounter(java.lang.String, long)
    {
        java.lang.String r0;
        long l0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $z0 = staticinvoke <android.os.Trace: boolean isTagEnabled(long)>(4096L);

        if $z0 == 0 goto label1;

        staticinvoke <android.os.Trace: void nativeTraceCounter(long,java.lang.String,long)>(4096L, r0, l0);

     label1:
        return;
    }

    public static void setTracingEnabled(boolean, int)
    {
        boolean z0;
        int i0;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        staticinvoke <android.os.Trace: void nativeSetTracingEnabled(boolean)>(z0);

        <android.os.Trace: int sZygoteDebugFlags> = i0;

        return;
    }

    public static void traceBegin(long, java.lang.String)
    {
        long l0;
        java.lang.String r0;
        boolean $z0;

        l0 := @parameter0: long;

        r0 := @parameter1: java.lang.String;

        $z0 = staticinvoke <android.os.Trace: boolean isTagEnabled(long)>(l0);

        if $z0 == 0 goto label1;

        staticinvoke <android.os.Trace: void nativeTraceBegin(long,java.lang.String)>(l0, r0);

     label1:
        return;
    }

    public static void traceCounter(long, java.lang.String, int)
    {
        long l0, $l2;
        java.lang.String r0;
        int i1;
        boolean $z0;

        l0 := @parameter0: long;

        r0 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        $z0 = staticinvoke <android.os.Trace: boolean isTagEnabled(long)>(l0);

        if $z0 == 0 goto label1;

        $l2 = (long) i1;

        staticinvoke <android.os.Trace: void nativeTraceCounter(long,java.lang.String,long)>(l0, r0, $l2);

     label1:
        return;
    }

    public static void traceEnd(long)
    {
        long l0;
        boolean $z0;

        l0 := @parameter0: long;

        $z0 = staticinvoke <android.os.Trace: boolean isTagEnabled(long)>(l0);

        if $z0 == 0 goto label1;

        staticinvoke <android.os.Trace: void nativeTraceEnd(long)>(l0);

     label1:
        return;
    }
}
