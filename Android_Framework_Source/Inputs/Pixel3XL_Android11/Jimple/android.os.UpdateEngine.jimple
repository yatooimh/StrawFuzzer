public class android.os.UpdateEngine extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final java.lang.String UPDATE_ENGINE_SERVICE;
    private android.os.IUpdateEngine mUpdateEngine;
    private android.os.IUpdateEngineCallback mUpdateEngineCallback;
    private final java.lang.Object mUpdateEngineCallbackLock;

    public void <init>()
    {
        android.os.UpdateEngine r0;
        java.lang.Object $r1;
        android.os.IBinder $r2;
        android.os.IUpdateEngine $r3;

        r0 := @this: android.os.UpdateEngine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.os.UpdateEngine: android.os.IUpdateEngineCallback mUpdateEngineCallback> = null;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<android.os.UpdateEngine: java.lang.Object mUpdateEngineCallbackLock> = $r1;

        $r2 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("android.os.UpdateEngineService");

        $r3 = staticinvoke <android.os.IUpdateEngine$Stub: android.os.IUpdateEngine asInterface(android.os.IBinder)>($r2);

        r0.<android.os.UpdateEngine: android.os.IUpdateEngine mUpdateEngine> = $r3;

        return;
    }

    public android.os.UpdateEngine$AllocateSpaceResult allocateSpace(java.lang.String, java.lang.String[])
    {
        android.os.UpdateEngine r0;
        java.lang.String[] r1;
        android.os.UpdateEngine$AllocateSpaceResult $r3;
        android.os.IUpdateEngine $r4;
        long $l0, $l2;
        byte $b3, b8;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.os.ServiceSpecificException $r7;
        int $i5;
        java.lang.String r8;

        r0 := @this: android.os.UpdateEngine;

        r8 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String[];

        $r3 = new android.os.UpdateEngine$AllocateSpaceResult;

        specialinvoke $r3.<android.os.UpdateEngine$AllocateSpaceResult: void <init>(android.os.UpdateEngine$1)>(null);

     label1:
        $r4 = r0.<android.os.UpdateEngine: android.os.IUpdateEngine mUpdateEngine>;

        $l0 = interfaceinvoke $r4.<android.os.IUpdateEngine: long allocateSpaceForPayload(java.lang.String,java.lang.String[])>(r8, r1);

        staticinvoke <android.os.UpdateEngine$AllocateSpaceResult: long access$102(android.os.UpdateEngine$AllocateSpaceResult,long)>($r3, $l0);

        $l2 = staticinvoke <android.os.UpdateEngine$AllocateSpaceResult: long access$100(android.os.UpdateEngine$AllocateSpaceResult)>($r3);

        $b3 = $l2 cmp 0L;

        if $b3 != 0 goto label3;

     label2:
        b8 = 0;

        goto label4;

     label3:
        b8 = 60;

     label4:
        staticinvoke <android.os.UpdateEngine$AllocateSpaceResult: int access$202(android.os.UpdateEngine$AllocateSpaceResult,int)>($r3, b8);

     label5:
        return $r3;

     label6:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

     label7:
        $r7 := @caughtexception;

        $i5 = $r7.<android.os.ServiceSpecificException: int errorCode>;

        staticinvoke <android.os.UpdateEngine$AllocateSpaceResult: int access$202(android.os.UpdateEngine$AllocateSpaceResult,int)>($r3, $i5);

        staticinvoke <android.os.UpdateEngine$AllocateSpaceResult: long access$102(android.os.UpdateEngine$AllocateSpaceResult,long)>($r3, 0L);

        return $r3;

        catch android.os.ServiceSpecificException from label1 to label2 with label7;
        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.ServiceSpecificException from label4 to label5 with label7;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    public void applyPayload(android.content.res.AssetFileDescriptor, java.lang.String[])
    {
        android.os.UpdateEngine r0;
        java.lang.String[] r1;
        android.os.IUpdateEngine $r2;
        android.os.ParcelFileDescriptor $r3;
        long $l0, $l1;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.content.res.AssetFileDescriptor r6;

        r0 := @this: android.os.UpdateEngine;

        r6 := @parameter0: android.content.res.AssetFileDescriptor;

        r1 := @parameter1: java.lang.String[];

     label1:
        $r2 = r0.<android.os.UpdateEngine: android.os.IUpdateEngine mUpdateEngine>;

        $r3 = virtualinvoke r6.<android.content.res.AssetFileDescriptor: android.os.ParcelFileDescriptor getParcelFileDescriptor()>();

        $l0 = virtualinvoke r6.<android.content.res.AssetFileDescriptor: long getStartOffset()>();

        $l1 = virtualinvoke r6.<android.content.res.AssetFileDescriptor: long getLength()>();

        interfaceinvoke $r2.<android.os.IUpdateEngine: void applyPayloadFd(android.os.ParcelFileDescriptor,long,long,java.lang.String[])>($r3, $l0, $l1, r1);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void applyPayload(java.lang.String, long, long, java.lang.String[])
    {
        android.os.UpdateEngine r0;
        long l0, l1;
        java.lang.String[] r1;
        android.os.IUpdateEngine $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;

        r0 := @this: android.os.UpdateEngine;

        r5 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        r1 := @parameter3: java.lang.String[];

     label1:
        $r2 = r0.<android.os.UpdateEngine: android.os.IUpdateEngine mUpdateEngine>;

        interfaceinvoke $r2.<android.os.IUpdateEngine: void applyPayload(java.lang.String,long,long,java.lang.String[])>(r5, l0, l1, r1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean bind(android.os.UpdateEngineCallback)
    {
        android.os.UpdateEngine r0;
        android.os.UpdateEngineCallback r1;
        boolean $z0;

        r0 := @this: android.os.UpdateEngine;

        r1 := @parameter0: android.os.UpdateEngineCallback;

        $z0 = virtualinvoke r0.<android.os.UpdateEngine: boolean bind(android.os.UpdateEngineCallback,android.os.Handler)>(r1, null);

        return $z0;
    }

    public boolean bind(android.os.UpdateEngineCallback, android.os.Handler)
    {
        android.os.UpdateEngine r0;
        android.os.Handler r1;
        java.lang.Object r2;
        android.os.UpdateEngine$1 r3;
        boolean z0;
        android.os.IUpdateEngine $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        java.lang.Throwable $r7;
        android.os.UpdateEngineCallback r8;

        r0 := @this: android.os.UpdateEngine;

        r8 := @parameter0: android.os.UpdateEngineCallback;

        r1 := @parameter1: android.os.Handler;

        r2 = r0.<android.os.UpdateEngine: java.lang.Object mUpdateEngineCallbackLock>;

        entermonitor r2;

     label1:
        r3 = new android.os.UpdateEngine$1;

        specialinvoke r3.<android.os.UpdateEngine$1: void <init>(android.os.UpdateEngine,android.os.Handler,android.os.UpdateEngineCallback)>(r0, r1, r8);

        r0.<android.os.UpdateEngine: android.os.IUpdateEngineCallback mUpdateEngineCallback> = r3;

     label2:
        $r4 = r0.<android.os.UpdateEngine: android.os.IUpdateEngine mUpdateEngine>;

        z0 = interfaceinvoke $r4.<android.os.IUpdateEngine: boolean bind(android.os.IUpdateEngineCallback)>(r3);

     label3:
        exitmonitor r2;

     label4:
        return z0;

     label5:
        $r5 := @caughtexception;

     label6:
        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

     label7:
        $r7 := @caughtexception;

     label8:
        exitmonitor r2;

     label9:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch android.os.RemoteException from label2 to label3 with label5;
        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label6 to label7 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void cancel()
    {
        android.os.UpdateEngine r0;
        android.os.IUpdateEngine $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.os.UpdateEngine;

     label1:
        $r2 = r0.<android.os.UpdateEngine: android.os.IUpdateEngine mUpdateEngine>;

        interfaceinvoke $r2.<android.os.IUpdateEngine: void cancel()>();

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int cleanupAppliedPayload()
    {
        android.os.UpdateEngine r0;
        int i0;
        android.os.UpdateEngine$CleanupAppliedPayloadCallback $r1;
        android.os.IUpdateEngine $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.os.UpdateEngine;

        $r1 = new android.os.UpdateEngine$CleanupAppliedPayloadCallback;

        specialinvoke $r1.<android.os.UpdateEngine$CleanupAppliedPayloadCallback: void <init>(android.os.UpdateEngine$1)>(null);

     label1:
        $r2 = r0.<android.os.UpdateEngine: android.os.IUpdateEngine mUpdateEngine>;

        interfaceinvoke $r2.<android.os.IUpdateEngine: void cleanupSuccessfulUpdate(android.os.IUpdateEngineCallback)>($r1);

        i0 = staticinvoke <android.os.UpdateEngine$CleanupAppliedPayloadCallback: int access$400(android.os.UpdateEngine$CleanupAppliedPayloadCallback)>($r1);

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void resetStatus()
    {
        android.os.UpdateEngine r0;
        android.os.IUpdateEngine $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.os.UpdateEngine;

     label1:
        $r2 = r0.<android.os.UpdateEngine: android.os.IUpdateEngine mUpdateEngine>;

        interfaceinvoke $r2.<android.os.IUpdateEngine: void resetStatus()>();

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void resume()
    {
        android.os.UpdateEngine r0;
        android.os.IUpdateEngine $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.os.UpdateEngine;

     label1:
        $r2 = r0.<android.os.UpdateEngine: android.os.IUpdateEngine mUpdateEngine>;

        interfaceinvoke $r2.<android.os.IUpdateEngine: void resume()>();

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void suspend()
    {
        android.os.UpdateEngine r0;
        android.os.IUpdateEngine $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.os.UpdateEngine;

     label1:
        $r2 = r0.<android.os.UpdateEngine: android.os.IUpdateEngine mUpdateEngine>;

        interfaceinvoke $r2.<android.os.IUpdateEngine: void suspend()>();

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean unbind()
    {
        android.os.UpdateEngine r0;
        java.lang.Object r1;
        boolean z0;
        android.os.IUpdateEngineCallback $r2, $r3;
        android.os.IUpdateEngine $r4;
        java.lang.Throwable $r5;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;

        r0 := @this: android.os.UpdateEngine;

        r1 = r0.<android.os.UpdateEngine: java.lang.Object mUpdateEngineCallbackLock>;

        entermonitor r1;

     label01:
        $r2 = r0.<android.os.UpdateEngine: android.os.IUpdateEngineCallback mUpdateEngineCallback>;

        if $r2 != null goto label03;

        exitmonitor r1;

     label02:
        return 1;

     label03:
        $r4 = r0.<android.os.UpdateEngine: android.os.IUpdateEngine mUpdateEngine>;

        $r3 = r0.<android.os.UpdateEngine: android.os.IUpdateEngineCallback mUpdateEngineCallback>;

        z0 = interfaceinvoke $r4.<android.os.IUpdateEngine: boolean unbind(android.os.IUpdateEngineCallback)>($r3);

        r0.<android.os.UpdateEngine: android.os.IUpdateEngineCallback mUpdateEngineCallback> = null;

     label04:
        exitmonitor r1;

     label05:
        return z0;

     label06:
        $r6 := @caughtexception;

     label07:
        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

     label08:
        $r5 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch android.os.RemoteException from label03 to label04 with label06;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public boolean verifyPayloadMetadata(java.lang.String)
    {
        android.os.UpdateEngine r0;
        boolean z0;
        android.os.IUpdateEngine $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.os.UpdateEngine;

        r4 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<android.os.UpdateEngine: android.os.IUpdateEngine mUpdateEngine>;

        z0 = interfaceinvoke $r1.<android.os.IUpdateEngine: boolean verifyPayloadApplicable(java.lang.String)>(r4);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <android.os.UpdateEngine: java.lang.String UPDATE_ENGINE_SERVICE> = "android.os.UpdateEngineService";

        <android.os.UpdateEngine: java.lang.String TAG> = "UpdateEngine";

        return;
    }
}
