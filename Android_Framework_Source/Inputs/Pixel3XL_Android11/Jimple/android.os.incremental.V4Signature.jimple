public class android.os.incremental.V4Signature extends java.lang.Object
{
    public static final java.lang.String EXT;
    public static final int HASHING_ALGORITHM_SHA256;
    public static final byte LOG2_BLOCK_SIZE_4096_BYTES;
    public static final int SUPPORTED_VERSION;
    public final byte[] hashingInfo;
    public final byte[] signingInfo;
    public final int version;

    private void <init>(int, byte[], byte[])
    {
        android.os.incremental.V4Signature r0;
        int i0;
        byte[] r1, r2;

        r0 := @this: android.os.incremental.V4Signature;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        r2 := @parameter2: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.os.incremental.V4Signature: int version> = i0;

        r0.<android.os.incremental.V4Signature: byte[] hashingInfo> = r1;

        r0.<android.os.incremental.V4Signature: byte[] signingInfo> = r2;

        return;
    }

    static byte[] access$000(java.nio.ByteBuffer) throws java.io.IOException
    {
        java.nio.ByteBuffer r0;
        byte[] $r1;

        r0 := @parameter0: java.nio.ByteBuffer;

        $r1 = staticinvoke <android.os.incremental.V4Signature: byte[] readBytes(java.nio.ByteBuffer)>(r0);

        return $r1;
    }

    private static int bytesSize(byte[])
    {
        byte[] r0;
        int $i0, i1;

        r0 := @parameter0: byte[];

        if r0 != null goto label1;

        i1 = 0;

        goto label2;

     label1:
        i1 = lengthof r0;

     label2:
        $i0 = i1 + 4;

        return $i0;
    }

    public static byte[] getSigningData(long, android.os.incremental.V4Signature$HashingInfo, android.os.incremental.V4Signature$SigningInfo)
    {
        long l0;
        android.os.incremental.V4Signature$HashingInfo r0;
        android.os.incremental.V4Signature$SigningInfo r1;
        int i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.nio.ByteBuffer r2, $r8;
        byte[] $r3, $r4, $r5, $r6, $r7, $r14, $r15, $r16, $r17, $r18, $r19;
        java.nio.ByteOrder $r9;
        byte $b12;

        l0 := @parameter0: long;

        r0 := @parameter1: android.os.incremental.V4Signature$HashingInfo;

        r1 := @parameter2: android.os.incremental.V4Signature$SigningInfo;

        $r3 = r0.<android.os.incremental.V4Signature$HashingInfo: byte[] salt>;

        $i2 = staticinvoke <android.os.incremental.V4Signature: int bytesSize(byte[])>($r3);

        $i3 = $i2 + 17;

        $r4 = r0.<android.os.incremental.V4Signature$HashingInfo: byte[] rawRootHash>;

        $i4 = staticinvoke <android.os.incremental.V4Signature: int bytesSize(byte[])>($r4);

        $i5 = $i3 + $i4;

        $r5 = r1.<android.os.incremental.V4Signature$SigningInfo: byte[] apkDigest>;

        $i6 = staticinvoke <android.os.incremental.V4Signature: int bytesSize(byte[])>($r5);

        $i7 = $i5 + $i6;

        $r6 = r1.<android.os.incremental.V4Signature$SigningInfo: byte[] certificate>;

        $i8 = staticinvoke <android.os.incremental.V4Signature: int bytesSize(byte[])>($r6);

        $i9 = $i7 + $i8;

        $r7 = r1.<android.os.incremental.V4Signature$SigningInfo: byte[] additionalData>;

        $i10 = staticinvoke <android.os.incremental.V4Signature: int bytesSize(byte[])>($r7);

        i1 = $i9 + $i10;

        $r8 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(i1);

        $r9 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        r2 = virtualinvoke $r8.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r9);

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>(i1);

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(long)>(l0);

        $i11 = r0.<android.os.incremental.V4Signature$HashingInfo: int hashAlgorithm>;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i11);

        $b12 = r0.<android.os.incremental.V4Signature$HashingInfo: byte log2BlockSize>;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b12);

        $r14 = r0.<android.os.incremental.V4Signature$HashingInfo: byte[] salt>;

        staticinvoke <android.os.incremental.V4Signature: void writeBytes(java.nio.ByteBuffer,byte[])>(r2, $r14);

        $r15 = r0.<android.os.incremental.V4Signature$HashingInfo: byte[] rawRootHash>;

        staticinvoke <android.os.incremental.V4Signature: void writeBytes(java.nio.ByteBuffer,byte[])>(r2, $r15);

        $r16 = r1.<android.os.incremental.V4Signature$SigningInfo: byte[] apkDigest>;

        staticinvoke <android.os.incremental.V4Signature: void writeBytes(java.nio.ByteBuffer,byte[])>(r2, $r16);

        $r17 = r1.<android.os.incremental.V4Signature$SigningInfo: byte[] certificate>;

        staticinvoke <android.os.incremental.V4Signature: void writeBytes(java.nio.ByteBuffer,byte[])>(r2, $r17);

        $r18 = r1.<android.os.incremental.V4Signature$SigningInfo: byte[] additionalData>;

        staticinvoke <android.os.incremental.V4Signature: void writeBytes(java.nio.ByteBuffer,byte[])>(r2, $r18);

        $r19 = virtualinvoke r2.<java.nio.ByteBuffer: byte[] array()>();

        return $r19;
    }

    private static byte[] readBytes(java.io.InputStream) throws java.io.IOException
    {
        byte[] r0;
        int $i0;
        java.lang.Throwable $r1;
        java.io.InputStream r2;

        r2 := @parameter0: java.io.InputStream;

     label1:
        $i0 = staticinvoke <android.os.incremental.V4Signature: int readIntLE(java.io.InputStream)>(r2);

        r0 = newarray (byte)[$i0];

        staticinvoke <android.os.incremental.V4Signature: void readFully(java.io.InputStream,byte[])>(r2, r0);

     label2:
        return r0;

     label3:
        $r1 := @caughtexception;

        return null;

        catch java.io.EOFException from label1 to label2 with label3;
    }

    private static byte[] readBytes(java.nio.ByteBuffer) throws java.io.IOException
    {
        java.nio.ByteBuffer r0;
        int i0, $i1, $i2;
        byte[] r1;
        java.io.EOFException $r2, $r3;

        r0 := @parameter0: java.nio.ByteBuffer;

        $i1 = virtualinvoke r0.<java.nio.ByteBuffer: int remaining()>();

        if $i1 < 4 goto label2;

        i0 = virtualinvoke r0.<java.nio.ByteBuffer: int getInt()>();

        $i2 = virtualinvoke r0.<java.nio.ByteBuffer: int remaining()>();

        if $i2 < i0 goto label1;

        r1 = newarray (byte)[i0];

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r1);

        return r1;

     label1:
        $r3 = new java.io.EOFException;

        specialinvoke $r3.<java.io.EOFException: void <init>()>();

        throw $r3;

     label2:
        $r2 = new java.io.EOFException;

        specialinvoke $r2.<java.io.EOFException: void <init>()>();

        throw $r2;
    }

    public static android.os.incremental.V4Signature readFrom(android.os.ParcelFileDescriptor) throws java.io.IOException
    {
        android.os.ParcelFileDescriptor$AutoCloseInputStream $r0;
        android.os.ParcelFileDescriptor $r1, r4;
        java.lang.Throwable $r2, $r3;
        android.os.incremental.V4Signature r6;

        r4 := @parameter0: android.os.ParcelFileDescriptor;

        $r0 = new android.os.ParcelFileDescriptor$AutoCloseInputStream;

        $r1 = virtualinvoke r4.<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup()>();

        specialinvoke $r0.<android.os.ParcelFileDescriptor$AutoCloseInputStream: void <init>(android.os.ParcelFileDescriptor)>($r1);

     label1:
        r6 = staticinvoke <android.os.incremental.V4Signature: android.os.incremental.V4Signature readFrom(java.io.InputStream)>($r0);

     label2:
        virtualinvoke $r0.<java.io.InputStream: void close()>();

        return r6;

     label3:
        $r3 := @caughtexception;

     label4:
        virtualinvoke $r0.<java.io.InputStream: void close()>();

     label5:
        goto label7;

     label6:
        $r2 := @caughtexception;

        virtualinvoke $r3.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r2);

     label7:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    private static android.os.incremental.V4Signature readFrom(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        android.os.incremental.V4Signature $r1;
        int $i0;
        byte[] $r2, $r3;

        r0 := @parameter0: java.io.InputStream;

        $r1 = new android.os.incremental.V4Signature;

        $i0 = staticinvoke <android.os.incremental.V4Signature: int readIntLE(java.io.InputStream)>(r0);

        $r2 = staticinvoke <android.os.incremental.V4Signature: byte[] readBytes(java.io.InputStream)>(r0);

        $r3 = staticinvoke <android.os.incremental.V4Signature: byte[] readBytes(java.io.InputStream)>(r0);

        specialinvoke $r1.<android.os.incremental.V4Signature: void <init>(int,byte[],byte[])>($i0, $r2, $r3);

        return $r1;
    }

    public static android.os.incremental.V4Signature readFrom(byte[]) throws java.io.IOException
    {
        java.io.ByteArrayInputStream $r0;
        java.lang.Throwable $r1, $r2;
        byte[] r3;
        android.os.incremental.V4Signature r5;

        r3 := @parameter0: byte[];

        $r0 = new java.io.ByteArrayInputStream;

        specialinvoke $r0.<java.io.ByteArrayInputStream: void <init>(byte[])>(r3);

     label1:
        r5 = staticinvoke <android.os.incremental.V4Signature: android.os.incremental.V4Signature readFrom(java.io.InputStream)>($r0);

     label2:
        virtualinvoke $r0.<java.io.InputStream: void close()>();

        return r5;

     label3:
        $r2 := @caughtexception;

     label4:
        virtualinvoke $r0.<java.io.InputStream: void close()>();

     label5:
        goto label7;

     label6:
        $r1 := @caughtexception;

        virtualinvoke $r2.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r1);

     label7:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    private static void readFully(java.io.InputStream, byte[]) throws java.io.IOException
    {
        java.io.InputStream r0;
        byte[] r1;
        int i0, i1, $i2, i3;
        java.io.EOFException $r2;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: byte[];

        i0 = lengthof r1;

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        $i2 = i0 - i3;

        i1 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>(r1, i3, $i2);

        if i1 < 0 goto label2;

        i3 = i3 + i1;

        goto label1;

     label2:
        $r2 = new java.io.EOFException;

        specialinvoke $r2.<java.io.EOFException: void <init>()>();

        throw $r2;

     label3:
        return;
    }

    private static int readIntLE(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        byte[] r1;
        java.nio.ByteBuffer $r2, $r4;
        java.nio.ByteOrder $r3;
        int $i0;

        r0 := @parameter0: java.io.InputStream;

        r1 = newarray (byte)[4];

        staticinvoke <android.os.incremental.V4Signature: void readFully(java.io.InputStream,byte[])>(r0, r1);

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r1);

        $r3 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        $r4 = virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r3);

        $i0 = virtualinvoke $r4.<java.nio.ByteBuffer: int getInt()>();

        return $i0;
    }

    private static void writeBytes(java.io.OutputStream, byte[]) throws java.io.IOException
    {
        java.io.OutputStream r0;
        byte[] r1;
        int $i0;

        r0 := @parameter0: java.io.OutputStream;

        r1 := @parameter1: byte[];

        if r1 != null goto label1;

        staticinvoke <android.os.incremental.V4Signature: void writeIntLE(java.io.OutputStream,int)>(r0, 0);

        return;

     label1:
        $i0 = lengthof r1;

        staticinvoke <android.os.incremental.V4Signature: void writeIntLE(java.io.OutputStream,int)>(r0, $i0);

        virtualinvoke r0.<java.io.OutputStream: void write(byte[])>(r1);

        return;
    }

    private static void writeBytes(java.nio.ByteBuffer, byte[])
    {
        java.nio.ByteBuffer r0;
        byte[] r1;
        int $i0;

        r0 := @parameter0: java.nio.ByteBuffer;

        r1 := @parameter1: byte[];

        if r1 != null goto label1;

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>(0);

        return;

     label1:
        $i0 = lengthof r1;

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i0);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>(r1);

        return;
    }

    private static void writeIntLE(java.io.OutputStream, int) throws java.io.IOException
    {
        java.io.OutputStream r0;
        int i0;
        byte[] $r1, $r6;
        java.nio.ByteBuffer $r2, $r4, $r5;
        java.nio.ByteOrder $r3;

        r0 := @parameter0: java.io.OutputStream;

        i0 := @parameter1: int;

        $r1 = newarray (byte)[4];

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r1);

        $r3 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        $r4 = virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r3);

        $r5 = virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>(i0);

        $r6 = virtualinvoke $r5.<java.nio.ByteBuffer: byte[] array()>();

        virtualinvoke r0.<java.io.OutputStream: void write(byte[])>($r6);

        return;
    }

    private void writeTo(java.io.OutputStream) throws java.io.IOException
    {
        android.os.incremental.V4Signature r0;
        java.io.OutputStream r1;
        int $i0;
        byte[] $r2, $r3;

        r0 := @this: android.os.incremental.V4Signature;

        r1 := @parameter0: java.io.OutputStream;

        $i0 = r0.<android.os.incremental.V4Signature: int version>;

        staticinvoke <android.os.incremental.V4Signature: void writeIntLE(java.io.OutputStream,int)>(r1, $i0);

        $r2 = r0.<android.os.incremental.V4Signature: byte[] hashingInfo>;

        staticinvoke <android.os.incremental.V4Signature: void writeBytes(java.io.OutputStream,byte[])>(r1, $r2);

        $r3 = r0.<android.os.incremental.V4Signature: byte[] signingInfo>;

        staticinvoke <android.os.incremental.V4Signature: void writeBytes(java.io.OutputStream,byte[])>(r1, $r3);

        return;
    }

    public boolean isVersionSupported()
    {
        android.os.incremental.V4Signature r0;
        int $i0;
        boolean z0;

        r0 := @this: android.os.incremental.V4Signature;

        $i0 = r0.<android.os.incremental.V4Signature: int version>;

        if $i0 != 2 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public byte[] toByteArray()
    {
        android.os.incremental.V4Signature r0;
        java.lang.Throwable $r1, $r2, $r3;
        java.io.ByteArrayOutputStream r4;
        byte[] r5;

        r0 := @this: android.os.incremental.V4Signature;

     label01:
        r4 = new java.io.ByteArrayOutputStream;

        specialinvoke r4.<java.io.ByteArrayOutputStream: void <init>()>();

     label02:
        specialinvoke r0.<android.os.incremental.V4Signature: void writeTo(java.io.OutputStream)>(r4);

        r5 = virtualinvoke r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label03:
        virtualinvoke r4.<java.io.ByteArrayOutputStream: void close()>();

     label04:
        return r5;

     label05:
        $r3 := @caughtexception;

     label06:
        virtualinvoke r4.<java.io.ByteArrayOutputStream: void close()>();

     label07:
        goto label10;

     label08:
        $r2 := @caughtexception;

     label09:
        virtualinvoke $r3.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r2);

     label10:
        throw $r3;

     label11:
        $r1 := @caughtexception;

        return null;

        catch java.io.IOException from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.io.IOException from label03 to label04 with label11;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.io.IOException from label09 to label10 with label11;
        catch java.io.IOException from label10 to label11 with label11;
    }

    public static void <clinit>()
    {
        <android.os.incremental.V4Signature: int SUPPORTED_VERSION> = 2;

        <android.os.incremental.V4Signature: byte LOG2_BLOCK_SIZE_4096_BYTES> = 12;

        <android.os.incremental.V4Signature: int HASHING_ALGORITHM_SHA256> = 1;

        <android.os.incremental.V4Signature: java.lang.String EXT> = ".idsig";

        return;
    }
}
