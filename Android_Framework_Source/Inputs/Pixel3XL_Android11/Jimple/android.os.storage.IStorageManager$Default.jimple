public class android.os.storage.IStorageManager$Default extends java.lang.Object implements android.os.storage.IStorageManager
{

    public void <init>()
    {
        android.os.storage.IStorageManager$Default r0;

        r0 := @this: android.os.storage.IStorageManager$Default;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void abortChanges(java.lang.String, boolean) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        java.lang.String r1;
        boolean z0;

        r0 := @this: android.os.storage.IStorageManager$Default;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        return;
    }

    public void abortIdleMaintenance() throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;

        r0 := @this: android.os.storage.IStorageManager$Default;

        return;
    }

    public void addUserKeyAuth(int, int, byte[], byte[]) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        int i0, i1;
        byte[] r1, r2;

        r0 := @this: android.os.storage.IStorageManager$Default;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: byte[];

        r2 := @parameter3: byte[];

        return;
    }

    public void allocateBytes(java.lang.String, long, int, java.lang.String) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        java.lang.String r1, r2;
        long l0;
        int i1;

        r0 := @this: android.os.storage.IStorageManager$Default;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        return;
    }

    public android.os.IBinder asBinder()
    {
        android.os.storage.IStorageManager$Default r0;

        r0 := @this: android.os.storage.IStorageManager$Default;

        return null;
    }

    public void benchmark(java.lang.String, android.os.IVoldTaskListener) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        java.lang.String r1;
        android.os.IVoldTaskListener r2;

        r0 := @this: android.os.storage.IStorageManager$Default;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.IVoldTaskListener;

        return;
    }

    public int changeEncryptionPassword(int, java.lang.String) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        int i0;
        java.lang.String r1;

        r0 := @this: android.os.storage.IStorageManager$Default;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        return 0;
    }

    public void clearPassword() throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;

        r0 := @this: android.os.storage.IStorageManager$Default;

        return;
    }

    public void clearUserKeyAuth(int, int, byte[], byte[]) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        int i0, i1;
        byte[] r1, r2;

        r0 := @this: android.os.storage.IStorageManager$Default;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: byte[];

        r2 := @parameter3: byte[];

        return;
    }

    public void commitChanges() throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;

        r0 := @this: android.os.storage.IStorageManager$Default;

        return;
    }

    public void createUserKey(int, int, boolean) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        int i0, i1;
        boolean z0;

        r0 := @this: android.os.storage.IStorageManager$Default;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        return;
    }

    public int decryptStorage(java.lang.String) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        java.lang.String r1;

        r0 := @this: android.os.storage.IStorageManager$Default;

        r1 := @parameter0: java.lang.String;

        return 0;
    }

    public void destroyUserKey(int) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        int i0;

        r0 := @this: android.os.storage.IStorageManager$Default;

        i0 := @parameter0: int;

        return;
    }

    public void destroyUserStorage(java.lang.String, int, int) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        java.lang.String r1;
        int i0, i1;

        r0 := @this: android.os.storage.IStorageManager$Default;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        return;
    }

    public int encryptStorage(int, java.lang.String) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        int i0;
        java.lang.String r1;

        r0 := @this: android.os.storage.IStorageManager$Default;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        return 0;
    }

    public void fixateNewestUserKeyAuth(int) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        int i0;

        r0 := @this: android.os.storage.IStorageManager$Default;

        i0 := @parameter0: int;

        return;
    }

    public void fixupAppDir(java.lang.String) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        java.lang.String r1;

        r0 := @this: android.os.storage.IStorageManager$Default;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void forgetAllVolumes() throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;

        r0 := @this: android.os.storage.IStorageManager$Default;

        return;
    }

    public void forgetVolume(java.lang.String) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        java.lang.String r1;

        r0 := @this: android.os.storage.IStorageManager$Default;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void format(java.lang.String) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        java.lang.String r1;

        r0 := @this: android.os.storage.IStorageManager$Default;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void fstrim(int, android.os.IVoldTaskListener) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        int i0;
        android.os.IVoldTaskListener r1;

        r0 := @this: android.os.storage.IStorageManager$Default;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.IVoldTaskListener;

        return;
    }

    public long getAllocatableBytes(java.lang.String, int, java.lang.String) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        java.lang.String r1, r2;
        int i0;

        r0 := @this: android.os.storage.IStorageManager$Default;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        return 0L;
    }

    public long getCacheQuotaBytes(java.lang.String, int) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        java.lang.String r1;
        int i0;

        r0 := @this: android.os.storage.IStorageManager$Default;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        return 0L;
    }

    public long getCacheSizeBytes(java.lang.String, int) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        java.lang.String r1;
        int i0;

        r0 := @this: android.os.storage.IStorageManager$Default;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        return 0L;
    }

    public android.os.storage.DiskInfo[] getDisks() throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;

        r0 := @this: android.os.storage.IStorageManager$Default;

        return null;
    }

    public int getEncryptionState() throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;

        r0 := @this: android.os.storage.IStorageManager$Default;

        return 0;
    }

    public java.lang.String getField(java.lang.String) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        java.lang.String r1;

        r0 := @this: android.os.storage.IStorageManager$Default;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public java.lang.String getMountedObbPath(java.lang.String) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        java.lang.String r1;

        r0 := @this: android.os.storage.IStorageManager$Default;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public java.lang.String getPassword() throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;

        r0 := @this: android.os.storage.IStorageManager$Default;

        return null;
    }

    public int getPasswordType() throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;

        r0 := @this: android.os.storage.IStorageManager$Default;

        return 0;
    }

    public java.lang.String getPrimaryStorageUuid() throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;

        r0 := @this: android.os.storage.IStorageManager$Default;

        return null;
    }

    public android.os.storage.StorageVolume[] getVolumeList(int, java.lang.String, int) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        int i0, i1;
        java.lang.String r1;

        r0 := @this: android.os.storage.IStorageManager$Default;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        return null;
    }

    public android.os.storage.VolumeRecord[] getVolumeRecords(int) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        int i0;

        r0 := @this: android.os.storage.IStorageManager$Default;

        i0 := @parameter0: int;

        return null;
    }

    public android.os.storage.VolumeInfo[] getVolumes(int) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        int i0;

        r0 := @this: android.os.storage.IStorageManager$Default;

        i0 := @parameter0: int;

        return null;
    }

    public boolean isConvertibleToFBE() throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;

        r0 := @this: android.os.storage.IStorageManager$Default;

        return 0;
    }

    public boolean isObbMounted(java.lang.String) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        java.lang.String r1;

        r0 := @this: android.os.storage.IStorageManager$Default;

        r1 := @parameter0: java.lang.String;

        return 0;
    }

    public boolean isUserKeyUnlocked(int) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        int i0;

        r0 := @this: android.os.storage.IStorageManager$Default;

        i0 := @parameter0: int;

        return 0;
    }

    public long lastMaintenance() throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;

        r0 := @this: android.os.storage.IStorageManager$Default;

        return 0L;
    }

    public void lockUserKey(int) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        int i0;

        r0 := @this: android.os.storage.IStorageManager$Default;

        i0 := @parameter0: int;

        return;
    }

    public void mkdirs(java.lang.String, java.lang.String) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        java.lang.String r1, r2;

        r0 := @this: android.os.storage.IStorageManager$Default;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return;
    }

    public void mount(java.lang.String) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        java.lang.String r1;

        r0 := @this: android.os.storage.IStorageManager$Default;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void mountObb(java.lang.String, java.lang.String, java.lang.String, android.os.storage.IObbActionListener, int, android.content.res.ObbInfo) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        java.lang.String r1, r2, r3;
        android.os.storage.IObbActionListener r4;
        int i0;
        android.content.res.ObbInfo r5;

        r0 := @this: android.os.storage.IStorageManager$Default;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.os.storage.IObbActionListener;

        i0 := @parameter4: int;

        r5 := @parameter5: android.content.res.ObbInfo;

        return;
    }

    public com.android.internal.os.AppFuseMount mountProxyFileDescriptorBridge() throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;

        r0 := @this: android.os.storage.IStorageManager$Default;

        return null;
    }

    public boolean needsCheckpoint() throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;

        r0 := @this: android.os.storage.IStorageManager$Default;

        return 0;
    }

    public android.os.ParcelFileDescriptor openProxyFileDescriptor(int, int, int) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        int i0, i1, i2;

        r0 := @this: android.os.storage.IStorageManager$Default;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        return null;
    }

    public void partitionMixed(java.lang.String, int) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        java.lang.String r1;
        int i0;

        r0 := @this: android.os.storage.IStorageManager$Default;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        return;
    }

    public void partitionPrivate(java.lang.String) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        java.lang.String r1;

        r0 := @this: android.os.storage.IStorageManager$Default;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void partitionPublic(java.lang.String) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        java.lang.String r1;

        r0 := @this: android.os.storage.IStorageManager$Default;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void prepareUserStorage(java.lang.String, int, int, int) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        java.lang.String r1;
        int i0, i1, i2;

        r0 := @this: android.os.storage.IStorageManager$Default;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        return;
    }

    public void registerListener(android.os.storage.IStorageEventListener) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        android.os.storage.IStorageEventListener r1;

        r0 := @this: android.os.storage.IStorageManager$Default;

        r1 := @parameter0: android.os.storage.IStorageEventListener;

        return;
    }

    public void runIdleMaintenance() throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;

        r0 := @this: android.os.storage.IStorageManager$Default;

        return;
    }

    public void runMaintenance() throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;

        r0 := @this: android.os.storage.IStorageManager$Default;

        return;
    }

    public void setDebugFlags(int, int) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        int i0, i1;

        r0 := @this: android.os.storage.IStorageManager$Default;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return;
    }

    public void setField(java.lang.String, java.lang.String) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        java.lang.String r1, r2;

        r0 := @this: android.os.storage.IStorageManager$Default;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return;
    }

    public void setPrimaryStorageUuid(java.lang.String, android.content.pm.IPackageMoveObserver) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        java.lang.String r1;
        android.content.pm.IPackageMoveObserver r2;

        r0 := @this: android.os.storage.IStorageManager$Default;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.content.pm.IPackageMoveObserver;

        return;
    }

    public void setVolumeNickname(java.lang.String, java.lang.String) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        java.lang.String r1, r2;

        r0 := @this: android.os.storage.IStorageManager$Default;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return;
    }

    public void setVolumeUserFlags(java.lang.String, int, int) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        java.lang.String r1;
        int i0, i1;

        r0 := @this: android.os.storage.IStorageManager$Default;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        return;
    }

    public void shutdown(android.os.storage.IStorageShutdownObserver) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        android.os.storage.IStorageShutdownObserver r1;

        r0 := @this: android.os.storage.IStorageManager$Default;

        r1 := @parameter0: android.os.storage.IStorageShutdownObserver;

        return;
    }

    public void startCheckpoint(int) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        int i0;

        r0 := @this: android.os.storage.IStorageManager$Default;

        i0 := @parameter0: int;

        return;
    }

    public boolean supportsCheckpoint() throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;

        r0 := @this: android.os.storage.IStorageManager$Default;

        return 0;
    }

    public void unlockUserKey(int, int, byte[], byte[]) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        int i0, i1;
        byte[] r1, r2;

        r0 := @this: android.os.storage.IStorageManager$Default;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: byte[];

        r2 := @parameter3: byte[];

        return;
    }

    public void unmount(java.lang.String) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        java.lang.String r1;

        r0 := @this: android.os.storage.IStorageManager$Default;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void unmountObb(java.lang.String, boolean, android.os.storage.IObbActionListener, int) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        java.lang.String r1;
        boolean z0;
        android.os.storage.IObbActionListener r2;
        int i0;

        r0 := @this: android.os.storage.IStorageManager$Default;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 := @parameter2: android.os.storage.IObbActionListener;

        i0 := @parameter3: int;

        return;
    }

    public void unregisterListener(android.os.storage.IStorageEventListener) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        android.os.storage.IStorageEventListener r1;

        r0 := @this: android.os.storage.IStorageManager$Default;

        r1 := @parameter0: android.os.storage.IStorageEventListener;

        return;
    }

    public int verifyEncryptionPassword(java.lang.String) throws android.os.RemoteException
    {
        android.os.storage.IStorageManager$Default r0;
        java.lang.String r1;

        r0 := @this: android.os.storage.IStorageManager$Default;

        r1 := @parameter0: java.lang.String;

        return 0;
    }
}
