public class android.os.storage.StorageManager extends java.lang.Object
{
    public static final java.lang.String ACTION_CLEAR_APP_CACHE;
    public static final java.lang.String ACTION_MANAGE_STORAGE;
    public static final int CRYPT_TYPE_DEFAULT;
    public static final int CRYPT_TYPE_PASSWORD;
    public static final int CRYPT_TYPE_PATTERN;
    public static final int CRYPT_TYPE_PIN;
    public static final int DEBUG_ADOPTABLE_FORCE_OFF;
    public static final int DEBUG_ADOPTABLE_FORCE_ON;
    public static final int DEBUG_EMULATE_FBE;
    public static final int DEBUG_ISOLATED_STORAGE_FORCE_OFF;
    public static final int DEBUG_ISOLATED_STORAGE_FORCE_ON;
    public static final int DEBUG_SDCARDFS_FORCE_OFF;
    public static final int DEBUG_SDCARDFS_FORCE_ON;
    public static final int DEBUG_VIRTUAL_DISK;
    private static final long DEFAULT_CACHE_MAX_BYTES;
    private static final int DEFAULT_CACHE_PERCENTAGE;
    private static final long DEFAULT_FULL_THRESHOLD_BYTES;
    private static final long DEFAULT_THRESHOLD_MAX_BYTES;
    private static final int DEFAULT_THRESHOLD_PERCENTAGE;
    public static final int ENCRYPTION_STATE_ERROR_CORRUPT;
    public static final int ENCRYPTION_STATE_ERROR_INCOMPLETE;
    public static final int ENCRYPTION_STATE_ERROR_INCONSISTENT;
    public static final int ENCRYPTION_STATE_ERROR_UNKNOWN;
    public static final int ENCRYPTION_STATE_NONE;
    public static final int ENCRYPTION_STATE_OK;
    public static final java.lang.String EXTRA_REQUESTED_BYTES;
    public static final java.lang.String EXTRA_UUID;
    public static final int FLAG_ALLOCATE_AGGRESSIVE;
    public static final int FLAG_ALLOCATE_CACHE_ONLY;
    public static final int FLAG_ALLOCATE_DEFY_ALL_RESERVED;
    public static final int FLAG_ALLOCATE_DEFY_HALF_RESERVED;
    public static final int FLAG_ALLOCATE_NON_CACHE_ONLY;
    public static final int FLAG_FOR_WRITE;
    public static final int FLAG_INCLUDE_INVISIBLE;
    public static final int FLAG_INCLUDE_RECENT;
    public static final int FLAG_REAL_STATE;
    public static final int FLAG_STORAGE_CE;
    public static final int FLAG_STORAGE_DE;
    public static final int FLAG_STORAGE_EXTERNAL;
    public static final int FSTRIM_FLAG_DEEP;
    private static final boolean LOCAL_LOGV;
    public static final java.lang.String OWNER_INFO_KEY;
    public static final java.lang.String PASSWORD_VISIBLE_KEY;
    public static final java.lang.String PATTERN_VISIBLE_KEY;
    public static final int PROJECT_ID_EXT_DEFAULT;
    public static final int PROJECT_ID_EXT_MEDIA_AUDIO;
    public static final int PROJECT_ID_EXT_MEDIA_IMAGE;
    public static final int PROJECT_ID_EXT_MEDIA_VIDEO;
    public static final java.lang.String PROP_ADOPTABLE;
    public static final java.lang.String PROP_EMULATE_FBE;
    public static final java.lang.String PROP_FORCED_SCOPED_STORAGE_WHITELIST;
    public static final java.lang.String PROP_FUSE;
    public static final java.lang.String PROP_HAS_ADOPTABLE;
    public static final java.lang.String PROP_HAS_RESERVED;
    public static final java.lang.String PROP_ISOLATED_STORAGE;
    public static final java.lang.String PROP_ISOLATED_STORAGE_SNAPSHOT;
    public static final java.lang.String PROP_PRIMARY_PHYSICAL;
    public static final java.lang.String PROP_SDCARDFS;
    public static final java.lang.String PROP_SETTINGS_FUSE;
    public static final java.lang.String PROP_VIRTUAL_DISK;
    public static final int QUOTA_TYPE_MEDIA_AUDIO;
    public static final int QUOTA_TYPE_MEDIA_IMAGE;
    public static final int QUOTA_TYPE_MEDIA_NONE;
    public static final int QUOTA_TYPE_MEDIA_VIDEO;
    public static final java.lang.String SYSTEM_LOCALE_KEY;
    private static final java.lang.String TAG;
    public static final java.util.UUID UUID_DEFAULT;
    public static final java.lang.String UUID_PRIMARY_PHYSICAL;
    public static final java.util.UUID UUID_PRIMARY_PHYSICAL_;
    public static final java.lang.String UUID_PRIVATE_INTERNAL;
    public static final java.lang.String UUID_SYSTEM;
    public static final java.util.UUID UUID_SYSTEM_;
    private static final java.lang.String XATTR_CACHE_GROUP;
    private static final java.lang.String XATTR_CACHE_TOMBSTONE;
    private static volatile android.os.storage.IStorageManager sStorageManager;
    private final android.app.AppOpsManager mAppOps;
    private final android.content.Context mContext;
    private final java.util.ArrayList mDelegates;
    private com.android.internal.os.FuseAppLoop mFuseAppLoop;
    private final java.lang.Object mFuseAppLoopLock;
    private final android.os.Looper mLooper;
    private final java.util.concurrent.atomic.AtomicInteger mNextNonce;
    private final android.os.storage.StorageManager$ObbActionListener mObbActionListener;
    private final android.content.ContentResolver mResolver;
    private final android.os.storage.IStorageManager mStorageManager;

    static void <clinit>()
    {
        boolean $z0;
        java.util.UUID $r0, $r1, $r2;
        android.util.DataUnit $r3, $r4, $r5;
        long $l0, $l1, $l2;

        <android.os.storage.StorageManager: java.lang.String XATTR_CACHE_TOMBSTONE> = "user.cache_tombstone";

        <android.os.storage.StorageManager: java.lang.String XATTR_CACHE_GROUP> = "user.cache_group";

        <android.os.storage.StorageManager: java.lang.String UUID_SYSTEM> = "system";

        <android.os.storage.StorageManager: java.lang.String UUID_PRIMARY_PHYSICAL> = "primary_physical";

        <android.os.storage.StorageManager: java.lang.String TAG> = "StorageManager";

        <android.os.storage.StorageManager: java.lang.String SYSTEM_LOCALE_KEY> = "SystemLocale";

        <android.os.storage.StorageManager: int QUOTA_TYPE_MEDIA_VIDEO> = 3;

        <android.os.storage.StorageManager: int QUOTA_TYPE_MEDIA_NONE> = 0;

        <android.os.storage.StorageManager: int QUOTA_TYPE_MEDIA_IMAGE> = 1;

        <android.os.storage.StorageManager: int QUOTA_TYPE_MEDIA_AUDIO> = 2;

        <android.os.storage.StorageManager: java.lang.String PROP_VIRTUAL_DISK> = "persist.sys.virtual_disk";

        <android.os.storage.StorageManager: java.lang.String PROP_SETTINGS_FUSE> = "persist.sys.fflag.override.settings_fuse";

        <android.os.storage.StorageManager: java.lang.String PROP_SDCARDFS> = "persist.sys.sdcardfs";

        <android.os.storage.StorageManager: java.lang.String PROP_PRIMARY_PHYSICAL> = "ro.vold.primary_physical";

        <android.os.storage.StorageManager: java.lang.String PROP_ISOLATED_STORAGE_SNAPSHOT> = "sys.isolated_storage_snapshot";

        <android.os.storage.StorageManager: java.lang.String PROP_ISOLATED_STORAGE> = "persist.sys.isolated_storage";

        <android.os.storage.StorageManager: java.lang.String PROP_HAS_RESERVED> = "vold.has_reserved";

        <android.os.storage.StorageManager: java.lang.String PROP_HAS_ADOPTABLE> = "vold.has_adoptable";

        <android.os.storage.StorageManager: java.lang.String PROP_FUSE> = "persist.sys.fuse";

        <android.os.storage.StorageManager: java.lang.String PROP_FORCED_SCOPED_STORAGE_WHITELIST> = "forced_scoped_storage_whitelist";

        <android.os.storage.StorageManager: java.lang.String PROP_EMULATE_FBE> = "persist.sys.emulate_fbe";

        <android.os.storage.StorageManager: java.lang.String PROP_ADOPTABLE> = "persist.sys.adoptable";

        <android.os.storage.StorageManager: int PROJECT_ID_EXT_MEDIA_VIDEO> = 1002;

        <android.os.storage.StorageManager: int PROJECT_ID_EXT_MEDIA_IMAGE> = 1003;

        <android.os.storage.StorageManager: int PROJECT_ID_EXT_MEDIA_AUDIO> = 1001;

        <android.os.storage.StorageManager: int PROJECT_ID_EXT_DEFAULT> = 1000;

        <android.os.storage.StorageManager: java.lang.String PATTERN_VISIBLE_KEY> = "PatternVisible";

        <android.os.storage.StorageManager: java.lang.String PASSWORD_VISIBLE_KEY> = "PasswordVisible";

        <android.os.storage.StorageManager: java.lang.String OWNER_INFO_KEY> = "OwnerInfo";

        <android.os.storage.StorageManager: int FSTRIM_FLAG_DEEP> = 1;

        <android.os.storage.StorageManager: int FLAG_STORAGE_EXTERNAL> = 4;

        <android.os.storage.StorageManager: int FLAG_STORAGE_DE> = 1;

        <android.os.storage.StorageManager: int FLAG_STORAGE_CE> = 2;

        <android.os.storage.StorageManager: int FLAG_REAL_STATE> = 512;

        <android.os.storage.StorageManager: int FLAG_INCLUDE_RECENT> = 2048;

        <android.os.storage.StorageManager: int FLAG_INCLUDE_INVISIBLE> = 1024;

        <android.os.storage.StorageManager: int FLAG_FOR_WRITE> = 256;

        <android.os.storage.StorageManager: int FLAG_ALLOCATE_NON_CACHE_ONLY> = 8;

        <android.os.storage.StorageManager: int FLAG_ALLOCATE_DEFY_HALF_RESERVED> = 4;

        <android.os.storage.StorageManager: int FLAG_ALLOCATE_DEFY_ALL_RESERVED> = 2;

        <android.os.storage.StorageManager: int FLAG_ALLOCATE_CACHE_ONLY> = 16;

        <android.os.storage.StorageManager: int FLAG_ALLOCATE_AGGRESSIVE> = 1;

        <android.os.storage.StorageManager: java.lang.String EXTRA_UUID> = "android.os.storage.extra.UUID";

        <android.os.storage.StorageManager: java.lang.String EXTRA_REQUESTED_BYTES> = "android.os.storage.extra.REQUESTED_BYTES";

        <android.os.storage.StorageManager: int ENCRYPTION_STATE_OK> = 0;

        <android.os.storage.StorageManager: int ENCRYPTION_STATE_NONE> = 1;

        <android.os.storage.StorageManager: int ENCRYPTION_STATE_ERROR_UNKNOWN> = -1;

        <android.os.storage.StorageManager: int ENCRYPTION_STATE_ERROR_INCONSISTENT> = -3;

        <android.os.storage.StorageManager: int ENCRYPTION_STATE_ERROR_INCOMPLETE> = -2;

        <android.os.storage.StorageManager: int ENCRYPTION_STATE_ERROR_CORRUPT> = -4;

        <android.os.storage.StorageManager: int DEFAULT_THRESHOLD_PERCENTAGE> = 5;

        <android.os.storage.StorageManager: int DEFAULT_CACHE_PERCENTAGE> = 10;

        <android.os.storage.StorageManager: int DEBUG_VIRTUAL_DISK> = 32;

        <android.os.storage.StorageManager: int DEBUG_SDCARDFS_FORCE_ON> = 8;

        <android.os.storage.StorageManager: int DEBUG_SDCARDFS_FORCE_OFF> = 16;

        <android.os.storage.StorageManager: int DEBUG_ISOLATED_STORAGE_FORCE_ON> = 64;

        <android.os.storage.StorageManager: int DEBUG_ISOLATED_STORAGE_FORCE_OFF> = 128;

        <android.os.storage.StorageManager: int DEBUG_EMULATE_FBE> = 4;

        <android.os.storage.StorageManager: int DEBUG_ADOPTABLE_FORCE_ON> = 1;

        <android.os.storage.StorageManager: int DEBUG_ADOPTABLE_FORCE_OFF> = 2;

        <android.os.storage.StorageManager: int CRYPT_TYPE_PIN> = 3;

        <android.os.storage.StorageManager: int CRYPT_TYPE_PATTERN> = 2;

        <android.os.storage.StorageManager: int CRYPT_TYPE_PASSWORD> = 0;

        <android.os.storage.StorageManager: int CRYPT_TYPE_DEFAULT> = 1;

        <android.os.storage.StorageManager: java.lang.String ACTION_MANAGE_STORAGE> = "android.os.storage.action.MANAGE_STORAGE";

        <android.os.storage.StorageManager: java.lang.String ACTION_CLEAR_APP_CACHE> = "android.os.storage.action.CLEAR_APP_CACHE";

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("StorageManager", 2);

        <android.os.storage.StorageManager: boolean LOCAL_LOGV> = $z0;

        <android.os.storage.StorageManager: java.lang.String UUID_PRIVATE_INTERNAL> = null;

        $r0 = staticinvoke <java.util.UUID: java.util.UUID fromString(java.lang.String)>("41217664-9172-527a-b3d5-edabb50a7d69");

        <android.os.storage.StorageManager: java.util.UUID UUID_DEFAULT> = $r0;

        $r1 = staticinvoke <java.util.UUID: java.util.UUID fromString(java.lang.String)>("0f95a519-dae7-5abf-9519-fbd6209e05fd");

        <android.os.storage.StorageManager: java.util.UUID UUID_PRIMARY_PHYSICAL_> = $r1;

        $r2 = staticinvoke <java.util.UUID: java.util.UUID fromString(java.lang.String)>("5d258386-e60d-59e3-826d-0089cdd42cc0");

        <android.os.storage.StorageManager: java.util.UUID UUID_SYSTEM_> = $r2;

        <android.os.storage.StorageManager: android.os.storage.IStorageManager sStorageManager> = null;

        $r3 = <android.util.DataUnit: android.util.DataUnit MEBIBYTES>;

        $l0 = virtualinvoke $r3.<android.util.DataUnit: long toBytes(long)>(500L);

        <android.os.storage.StorageManager: long DEFAULT_THRESHOLD_MAX_BYTES> = $l0;

        $r4 = <android.util.DataUnit: android.util.DataUnit GIBIBYTES>;

        $l1 = virtualinvoke $r4.<android.util.DataUnit: long toBytes(long)>(5L);

        <android.os.storage.StorageManager: long DEFAULT_CACHE_MAX_BYTES> = $l1;

        $r5 = <android.util.DataUnit: android.util.DataUnit MEBIBYTES>;

        $l2 = virtualinvoke $r5.<android.util.DataUnit: long toBytes(long)>(1L);

        <android.os.storage.StorageManager: long DEFAULT_FULL_THRESHOLD_BYTES> = $l2;

        return;
    }

    public void <init>(android.content.Context, android.os.Looper) throws android.os.ServiceManager$ServiceNotFoundException
    {
        android.os.storage.StorageManager r0;
        android.content.Context r1, $r10;
        android.os.Looper r2;
        java.util.concurrent.atomic.AtomicInteger $r3;
        java.util.ArrayList $r4;
        android.os.storage.StorageManager$ObbActionListener $r5;
        java.lang.Object $r6, $r11;
        android.content.ContentResolver $r7;
        android.os.IBinder $r8;
        android.os.storage.IStorageManager $r9;
        android.app.AppOpsManager $r12;

        r0 := @this: android.os.storage.StorageManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.Looper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        r0.<android.os.storage.StorageManager: java.util.concurrent.atomic.AtomicInteger mNextNonce> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<android.os.storage.StorageManager: java.util.ArrayList mDelegates> = $r4;

        $r5 = new android.os.storage.StorageManager$ObbActionListener;

        specialinvoke $r5.<android.os.storage.StorageManager$ObbActionListener: void <init>(android.os.storage.StorageManager,android.os.storage.StorageManager$1)>(r0, null);

        r0.<android.os.storage.StorageManager: android.os.storage.StorageManager$ObbActionListener mObbActionListener> = $r5;

        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        r0.<android.os.storage.StorageManager: java.lang.Object mFuseAppLoopLock> = $r6;

        r0.<android.os.storage.StorageManager: com.android.internal.os.FuseAppLoop mFuseAppLoop> = null;

        r0.<android.os.storage.StorageManager: android.content.Context mContext> = r1;

        $r7 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r0.<android.os.storage.StorageManager: android.content.ContentResolver mResolver> = $r7;

        r0.<android.os.storage.StorageManager: android.os.Looper mLooper> = r2;

        $r8 = staticinvoke <android.os.ServiceManager: android.os.IBinder getServiceOrThrow(java.lang.String)>("mount");

        $r9 = staticinvoke <android.os.storage.IStorageManager$Stub: android.os.storage.IStorageManager asInterface(android.os.IBinder)>($r8);

        r0.<android.os.storage.StorageManager: android.os.storage.IStorageManager mStorageManager> = $r9;

        $r10 = r0.<android.os.storage.StorageManager: android.content.Context mContext>;

        $r11 = virtualinvoke $r10.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/AppOpsManager;");

        $r12 = (android.app.AppOpsManager) $r11;

        r0.<android.os.storage.StorageManager: android.app.AppOpsManager mAppOps> = $r12;

        return;
    }

    static int access$200(android.os.storage.StorageManager)
    {
        android.os.storage.StorageManager r0;
        int $i0;

        r0 := @parameter0: android.os.storage.StorageManager;

        $i0 = specialinvoke r0.<android.os.storage.StorageManager: int getNextNonce()>();

        return $i0;
    }

    static android.os.Looper access$300(android.os.storage.StorageManager)
    {
        android.os.storage.StorageManager r0;
        android.os.Looper $r1;

        r0 := @parameter0: android.os.storage.StorageManager;

        $r1 = r0.<android.os.storage.StorageManager: android.os.Looper mLooper>;

        return $r1;
    }

    private boolean checkExternalStoragePermissionAndAppOp(boolean, int, int, java.lang.String, java.lang.String, java.lang.String, int)
    {
        android.os.storage.StorageManager r0;
        boolean z0, $z1;
        int i0, i1, i2, i3, $i4;
        java.lang.String r1, r2, r3;
        android.app.AppOpsManager $r4;
        android.content.Context $r5;

        r0 := @this: android.os.storage.StorageManager;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        r2 := @parameter4: java.lang.String;

        r3 := @parameter5: java.lang.String;

        i2 := @parameter6: int;

        $r4 = r0.<android.os.storage.StorageManager: android.app.AppOpsManager mAppOps>;

        i3 = virtualinvoke $r4.<android.app.AppOpsManager: int noteOpNoThrow(int,int,java.lang.String,java.lang.String,java.lang.String)>(92, i1, r1, r2, null);

        if i3 != 0 goto label1;

        return 1;

     label1:
        if i3 != 3 goto label2;

        $r5 = r0.<android.os.storage.StorageManager: android.content.Context mContext>;

        $i4 = virtualinvoke $r5.<android.content.Context: int checkPermission(java.lang.String,int,int)>("android.permission.MANAGE_EXTERNAL_STORAGE", i0, i1);

        if $i4 != 0 goto label2;

        return 1;

     label2:
        $z1 = specialinvoke r0.<android.os.storage.StorageManager: boolean checkPermissionAndAppOp(boolean,int,int,java.lang.String,java.lang.String,java.lang.String,int)>(z0, i0, i1, r1, r2, r3, i2);

        return $z1;
    }

    public static boolean checkPermissionAndAppOp(android.content.Context, boolean, int, int, java.lang.String, java.lang.String, java.lang.String, int)
    {
        android.content.Context r0;
        boolean z0, $z1;
        int i0, i1, i2;
        java.lang.String r1, r2, r3;

        r0 := @parameter0: android.content.Context;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r1 := @parameter4: java.lang.String;

        r2 := @parameter5: java.lang.String;

        r3 := @parameter6: java.lang.String;

        i2 := @parameter7: int;

        $z1 = staticinvoke <android.os.storage.StorageManager: boolean checkPermissionAndAppOp(android.content.Context,boolean,int,int,java.lang.String,java.lang.String,java.lang.String,int,boolean)>(r0, z0, i0, i1, r1, r2, r3, i2, 1);

        return $z1;
    }

    private static boolean checkPermissionAndAppOp(android.content.Context, boolean, int, int, java.lang.String, java.lang.String, java.lang.String, int, boolean)
    {
        boolean z0, z1;
        int i0, i1, $i2, i3, i4;
        java.lang.String r0, r1, r2, $r6, $r9, $r14, $r16, $r19, $r22, $r29;
        java.lang.Object $r3;
        java.lang.StringBuilder $r4, $r15, $r23;
        java.lang.SecurityException $r13, $r28;
        java.lang.IllegalStateException $r21;
        java.lang.Throwable $r30;
        android.content.Context r31;
        android.app.AppOpsManager r33;

        r31 := @parameter0: android.content.Context;

        z0 := @parameter1: boolean;

        i3 := @parameter2: int;

        i0 := @parameter3: int;

        r0 := @parameter4: java.lang.String;

        r1 := @parameter5: java.lang.String;

        r2 := @parameter6: java.lang.String;

        i1 := @parameter7: int;

        z1 := @parameter8: boolean;

        $i2 = virtualinvoke r31.<android.content.Context: int checkPermission(java.lang.String,int,int)>(r2, i3, i0);

        if $i2 == 0 goto label02;

        if z0 != 0 goto label01;

        return 0;

     label01:
        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission ");

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" denied for package ");

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r28 = new java.lang.SecurityException;

        $r29 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<java.lang.SecurityException: void <init>(java.lang.String)>($r29);

        throw $r28;

     label02:
        $r3 = virtualinvoke r31.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/AppOpsManager;");

        r33 = (android.app.AppOpsManager) $r3;

        if z1 == 0 goto label03;

        i4 = virtualinvoke r33.<android.app.AppOpsManager: int noteOpNoThrow(int,int,java.lang.String,java.lang.String,java.lang.String)>(i1, i0, r0, r1, null);

        goto label05;

     label03:
        virtualinvoke r33.<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>(i0, r0);

     label04:
        i4 = virtualinvoke r33.<android.app.AppOpsManager: int checkOpNoThrow(int,int,java.lang.String)>(i1, i0, r0);

     label05:
        if i4 == 0 goto label09;

        if i4 == 1 goto label07;

        if i4 == 2 goto label07;

        if i4 != 3 goto label06;

        goto label07;

     label06:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = staticinvoke <android.app.AppOpsManager: java.lang.String opToName(int)>(i1);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has unknown mode ");

        $r19 = staticinvoke <android.app.AppOpsManager: java.lang.String modeToName(int)>(i4);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = new java.lang.IllegalStateException;

        $r22 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r22);

        throw $r21;

     label07:
        if z0 != 0 goto label08;

        return 0;

     label08:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Op ");

        $r6 = staticinvoke <android.app.AppOpsManager: java.lang.String opToName(int)>(i1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r9 = staticinvoke <android.app.AppOpsManager: java.lang.String modeToName(int)>(i4);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for package ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r13 = new java.lang.SecurityException;

        $r14 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.SecurityException: void <init>(java.lang.String)>($r14);

        throw $r13;

     label09:
        return 1;

     label10:
        $r30 := @caughtexception;

        if z0 != 0 goto label11;

        return 0;

     label11:
        throw $r30;

        catch java.lang.SecurityException from label03 to label04 with label10;
    }

    private boolean checkPermissionAndAppOp(boolean, int, int, java.lang.String, java.lang.String, java.lang.String, int)
    {
        android.os.storage.StorageManager r0;
        boolean z0, $z1;
        int i0, i1, i2;
        java.lang.String r1, r2, r3;
        android.content.Context $r4;

        r0 := @this: android.os.storage.StorageManager;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        r2 := @parameter4: java.lang.String;

        r3 := @parameter5: java.lang.String;

        i2 := @parameter6: int;

        $r4 = r0.<android.os.storage.StorageManager: android.content.Context mContext>;

        $z1 = staticinvoke <android.os.storage.StorageManager: boolean checkPermissionAndAppOp(android.content.Context,boolean,int,int,java.lang.String,java.lang.String,java.lang.String,int)>($r4, z0, i0, i1, r1, r2, r3, i2);

        return $z1;
    }

    public static boolean checkPermissionAndCheckOp(android.content.Context, boolean, int, int, java.lang.String, java.lang.String, int)
    {
        android.content.Context r0;
        boolean z0, $z1;
        int i0, i1, i2;
        java.lang.String r1, r2;

        r0 := @parameter0: android.content.Context;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r1 := @parameter4: java.lang.String;

        r2 := @parameter5: java.lang.String;

        i2 := @parameter6: int;

        $z1 = staticinvoke <android.os.storage.StorageManager: boolean checkPermissionAndAppOp(android.content.Context,boolean,int,int,java.lang.String,java.lang.String,java.lang.String,int,boolean)>(r0, z0, i0, i1, r1, null, r2, i2, 0);

        return $z1;
    }

    public static java.lang.String convert(java.util.UUID)
    {
        java.util.UUID r0, $r1, $r2, $r3;
        boolean $z0, $z1, $z2;
        java.lang.String $r4, $r5;

        r0 := @parameter0: java.util.UUID;

        $r1 = <android.os.storage.StorageManager: java.util.UUID UUID_DEFAULT>;

        $z0 = virtualinvoke $r1.<java.util.UUID: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $r5 = <android.os.storage.StorageManager: java.lang.String UUID_PRIVATE_INTERNAL>;

        return $r5;

     label1:
        $r2 = <android.os.storage.StorageManager: java.util.UUID UUID_PRIMARY_PHYSICAL_>;

        $z1 = virtualinvoke $r2.<java.util.UUID: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

        return "primary_physical";

     label2:
        $r3 = <android.os.storage.StorageManager: java.util.UUID UUID_SYSTEM_>;

        $z2 = virtualinvoke $r3.<java.util.UUID: boolean equals(java.lang.Object)>(r0);

        if $z2 == 0 goto label3;

        return "system";

     label3:
        $r4 = virtualinvoke r0.<java.util.UUID: java.lang.String toString()>();

        return $r4;
    }

    public static java.util.UUID convert(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0, $z1, $z2;
        java.util.UUID $r2, $r3, $r4, $r5;

        r0 := @parameter0: java.lang.String;

        $r1 = <android.os.storage.StorageManager: java.lang.String UUID_PRIVATE_INTERNAL>;

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r0, $r1);

        if $z0 == 0 goto label1;

        $r5 = <android.os.storage.StorageManager: java.util.UUID UUID_DEFAULT>;

        return $r5;

     label1:
        $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r0, "primary_physical");

        if $z1 == 0 goto label2;

        $r4 = <android.os.storage.StorageManager: java.util.UUID UUID_PRIMARY_PHYSICAL_>;

        return $r4;

     label2:
        $z2 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r0, "system");

        if $z2 == 0 goto label3;

        $r3 = <android.os.storage.StorageManager: java.util.UUID UUID_SYSTEM_>;

        return $r3;

     label3:
        $r2 = staticinvoke <java.util.UUID: java.util.UUID fromString(java.lang.String)>(r0);

        return $r2;
    }

    public static android.os.storage.StorageManager 'from'(android.content.Context)
    {
        android.content.Context r0;
        java.lang.Object $r1;
        android.os.storage.StorageManager $r2;

        r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke r0.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/storage/StorageManager;");

        $r2 = (android.os.storage.StorageManager) $r1;

        return $r2;
    }

    private int getNextNonce()
    {
        android.os.storage.StorageManager r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0;

        r0 := @this: android.os.storage.StorageManager;

        $r1 = r0.<android.os.storage.StorageManager: java.util.concurrent.atomic.AtomicInteger mNextNonce>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        return $i0;
    }

    private android.content.res.ObbInfo getObbInfo(java.lang.String)
    {
        android.os.storage.StorageManager r0;
        java.lang.String r1, $r8;
        java.lang.Throwable $r3;
        java.lang.StringBuilder $r4;
        java.lang.IllegalArgumentException $r7;
        android.content.res.ObbInfo r9;

        r0 := @this: android.os.storage.StorageManager;

        r1 := @parameter0: java.lang.String;

     label1:
        r9 = staticinvoke <android.content.res.ObbScanner: android.content.res.ObbInfo getObbInfo(java.lang.String)>(r1);

     label2:
        return r9;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t get OBB info for ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r8, $r3);

        throw $r7;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static android.util.Pair getPrimaryStoragePathAndSize()
    {
        java.io.File $r0, $r1;
        long $l0, $l1, $l2, $l3;
        java.lang.Long $r2;
        android.util.Pair $r3;

        $r0 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        $l0 = virtualinvoke $r0.<java.io.File: long getTotalSpace()>();

        $r1 = staticinvoke <android.os.Environment: java.io.File getRootDirectory()>();

        $l1 = virtualinvoke $r1.<java.io.File: long getTotalSpace()>();

        $l2 = $l0 + $l1;

        $l3 = staticinvoke <android.os.FileUtils: long roundStorageSize(long)>($l2);

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        $r3 = staticinvoke <android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>(null, $r2);

        return $r3;
    }

    public static android.os.storage.StorageVolume getPrimaryVolume(android.os.storage.StorageVolume[])
    {
        android.os.storage.StorageVolume[] r0;
        int i0, i1;
        android.os.storage.StorageVolume r1;
        java.lang.IllegalStateException $r2;
        boolean $z0;

        r0 := @parameter0: android.os.storage.StorageVolume[];

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r1 = r0[i1];

        $z0 = virtualinvoke r1.<android.os.storage.StorageVolume: boolean isPrimary()>();

        if $z0 == 0 goto label2;

        return r1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Missing primary storage");

        throw $r2;
    }

    private static long getProjectIdForUser(int, int)
    {
        int i0, i1, $i2, $i3;
        long $l4;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = 100000 * i0;

        $i3 = $i2 + i1;

        $l4 = (long) $i3;

        return $l4;
    }

    public static android.os.storage.StorageVolume getStorageVolume(java.io.File, int)
    {
        java.io.File r0;
        int i0;
        android.os.storage.StorageVolume[] $r1;
        android.os.storage.StorageVolume $r2;

        r0 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        $r1 = staticinvoke <android.os.storage.StorageManager: android.os.storage.StorageVolume[] getVolumeList(int,int)>(i0, 0);

        $r2 = staticinvoke <android.os.storage.StorageManager: android.os.storage.StorageVolume getStorageVolume(android.os.storage.StorageVolume[],java.io.File)>($r1, r0);

        return $r2;
    }

    private static android.os.storage.StorageVolume getStorageVolume(android.os.storage.StorageVolume[], java.io.File)
    {
        int i0, i2;
        boolean $z0, $z1;
        android.app.Application $r0;
        java.lang.Object $r1;
        android.os.storage.StorageManager $r2;
        android.os.storage.StorageVolume $r3, r15;
        java.lang.Throwable $r4, $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r9, r12;
        android.os.storage.StorageVolume[] r10;
        java.io.File r11, r14, r16, r17;
        android.net.Uri r13;

        r10 := @parameter0: android.os.storage.StorageVolume[];

        r11 := @parameter1: java.io.File;

        if r11 != null goto label01;

        return null;

     label01:
        r12 = virtualinvoke r11.<java.io.File: java.lang.String getAbsolutePath()>();

        $z0 = virtualinvoke r12.<java.lang.String: boolean startsWith(java.lang.String)>("/mnt/content/");

        if $z0 == 0 goto label02;

        r13 = staticinvoke <android.content.ContentResolver: android.net.Uri translateDeprecatedDataPath(java.lang.String)>(r12);

        $r0 = staticinvoke <android.app.AppGlobals: android.app.Application getInitialApplication()>();

        $r1 = virtualinvoke $r0.<android.app.Application: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/storage/StorageManager;");

        $r2 = (android.os.storage.StorageManager) $r1;

        $r3 = virtualinvoke $r2.<android.os.storage.StorageManager: android.os.storage.StorageVolume getStorageVolume(android.net.Uri)>(r13);

        return $r3;

     label02:
        r14 = virtualinvoke r11.<java.io.File: java.io.File getCanonicalFile()>();

     label03:
        i0 = lengthof r10;

        i2 = 0;

     label04:
        if i2 >= i0 goto label09;

        r15 = r10[i2];

        r16 = virtualinvoke r15.<android.os.storage.StorageVolume: java.io.File getPathFile()>();

     label05:
        r17 = virtualinvoke r16.<java.io.File: java.io.File getCanonicalFile()>();

     label06:
        $z1 = staticinvoke <android.os.FileUtils: boolean contains(java.io.File,java.io.File)>(r17, r14);

        if $z1 == 0 goto label08;

        return r15;

     label07:
        $r4 := @caughtexception;

     label08:
        i2 = i2 + 1;

        goto label04;

     label09:
        return null;

     label10:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not get canonical path for ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r11);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("StorageManager", $r9);

        return null;

        catch java.io.IOException from label02 to label03 with label10;
        catch java.io.IOException from label05 to label06 with label07;
    }

    public static android.os.storage.StorageVolume[] getVolumeList(int, int)
    {
        int i0, $i2, $i4, i5, i6;
        android.os.storage.IStorageManager r0;
        java.lang.String r1, r9;
        android.os.IBinder $r2;
        android.content.pm.IPackageManager $r3, $r5;
        android.os.storage.StorageVolume[] $r4, $r6, r11;
        android.os.RemoteException $r7;
        java.lang.RuntimeException $r8;
        java.lang.String[] r10;

        i5 := @parameter0: int;

        i0 := @parameter1: int;

        $r2 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("mount");

        r0 = staticinvoke <android.os.storage.IStorageManager$Stub: android.os.storage.IStorageManager asInterface(android.os.IBinder)>($r2);

     label01:
        r1 = staticinvoke <android.app.ActivityThread: java.lang.String currentOpPackageName()>();

     label02:
        r9 = r1;

        if r1 != null goto label09;

     label03:
        $r5 = staticinvoke <android.app.ActivityThread: android.content.pm.IPackageManager getPackageManager()>();

        $i2 = staticinvoke <android.os.Process: int myUid()>();

        r10 = interfaceinvoke $r5.<android.content.pm.IPackageManager: java.lang.String[] getPackagesForUid(int)>($i2);

     label04:
        if r10 == null goto label08;

     label05:
        $i4 = lengthof r10;

        if $i4 > 0 goto label07;

     label06:
        goto label08;

     label07:
        r9 = r10[0];

        goto label09;

     label08:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("StorageManager", "Missing package names; no storage volumes available");

        $r6 = newarray (android.os.storage.StorageVolume)[0];

        return $r6;

     label09:
        $r3 = staticinvoke <android.app.ActivityThread: android.content.pm.IPackageManager getPackageManager()>();

        i6 = interfaceinvoke $r3.<android.content.pm.IPackageManager: int getPackageUid(java.lang.String,int,int)>(r9, 268435456, i5);

     label10:
        if i6 > 0 goto label12;

     label11:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("StorageManager", "Missing UID; no storage volumes available");

        $r4 = newarray (android.os.storage.StorageVolume)[0];

        return $r4;

     label12:
        r11 = interfaceinvoke r0.<android.os.storage.IStorageManager: android.os.storage.StorageVolume[] getVolumeList(int,java.lang.String,int)>(i6, r9, i0);

     label13:
        return r11;

     label14:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r8;

        catch android.os.RemoteException from label01 to label02 with label14;
        catch android.os.RemoteException from label03 to label04 with label14;
        catch android.os.RemoteException from label05 to label06 with label14;
        catch android.os.RemoteException from label08 to label09 with label14;
        catch android.os.RemoteException from label09 to label10 with label14;
        catch android.os.RemoteException from label11 to label12 with label14;
        catch android.os.RemoteException from label12 to label13 with label14;
    }

    public static boolean hasAdoptable()
    {
        java.lang.String r0;
        boolean $z0, $z1, $z2;
        int i0;
        byte b1;

        r0 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("persist.sys.adoptable");

        i0 = virtualinvoke r0.<java.lang.String: int hashCode()>();

        if i0 == 464944051 goto label3;

        if i0 == 1528363547 goto label2;

     label1:
        goto label4;

     label2:
        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("force_off");

        if $z2 == 0 goto label1;

        b1 = 1;

        goto label5;

     label3:
        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("force_on");

        if $z0 == 0 goto label1;

        b1 = 0;

        goto label5;

     label4:
        b1 = -1;

     label5:
        if b1 == 0 goto label7;

        if b1 == 1 goto label6;

        $z1 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("vold.has_adoptable", 0);

        return $z1;

     label6:
        return 0;

     label7:
        return 1;
    }

    public static boolean hasIsolatedStorage()
    {
        boolean $z0, $z1;

        $z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("persist.sys.isolated_storage", 1);

        $z1 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("sys.isolated_storage_snapshot", $z0);

        return $z1;
    }

    public static boolean inCryptKeeperBounce()
    {
        java.lang.String $r0, $r3;
        java.util.Optional $r1;
        java.lang.Object $r2;
        boolean $z0;

        $r0 = "trigger_restart_min_framework";

        $r1 = staticinvoke <android.sysprop.VoldProperties: java.util.Optional decrypt()>();

        $r2 = virtualinvoke $r1.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>("");

        $r3 = (java.lang.String) $r2;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        return $z0;
    }

    public static boolean isBlockEncrypted()
    {
        boolean $z0, $z1;

        $z0 = staticinvoke <android.os.storage.StorageManager: boolean isEncrypted()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $z1 = <com.android.internal.os.RoSystemProperties: boolean CRYPTO_BLOCK_ENCRYPTED>;

        return $z1;
    }

    public static boolean isBlockEncrypting()
    {
        java.lang.String $r0, $r3;
        java.util.Optional $r1;
        java.lang.Object $r2;
        boolean $z0, $z1;

        $r0 = "";

        $r1 = staticinvoke <android.sysprop.VoldProperties: java.util.Optional encrypt_progress()>();

        $r2 = virtualinvoke $r1.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>("");

        $r3 = (java.lang.String) $r2;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        $z1 = $z0 ^ 1;

        return $z1;
    }

    private static boolean isCacheBehavior(java.io.File, java.lang.String) throws java.io.IOException
    {
        java.lang.String r0, $r1;
        java.lang.Throwable $r3;
        int $i0, $i1;
        java.io.IOException $r4;
        java.io.File r5;
        android.system.ErrnoException r7, r8;

        r5 := @parameter0: java.io.File;

        r0 := @parameter1: java.lang.String;

     label1:
        $r1 = virtualinvoke r5.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <android.system.Os: byte[] getxattr(java.lang.String,java.lang.String)>($r1, r0);

     label2:
        return 1;

     label3:
        $r3 := @caughtexception;

        r7 = (android.system.ErrnoException) $r3;

        $i1 = r7.<android.system.ErrnoException: int errno>;

        $i0 = <android.system.OsConstants: int ENODATA>;

        if $i1 != $i0 goto label4;

        return 0;

     label4:
        r8 = (android.system.ErrnoException) $r3;

        $r4 = virtualinvoke r8.<android.system.ErrnoException: java.io.IOException rethrowAsIOException()>();

        throw $r4;

        catch android.system.ErrnoException from label1 to label2 with label3;
    }

    public static boolean isEncryptable()
    {
        boolean $z0;

        $z0 = <com.android.internal.os.RoSystemProperties: boolean CRYPTO_ENCRYPTABLE>;

        return $z0;
    }

    public static boolean isEncrypted()
    {
        boolean $z0;

        $z0 = <com.android.internal.os.RoSystemProperties: boolean CRYPTO_ENCRYPTED>;

        return $z0;
    }

    public static boolean isFileEncryptedEmulatedOnly()
    {
        boolean $z0;

        $z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("persist.sys.emulate_fbe", 0);

        return $z0;
    }

    public static boolean isFileEncryptedNativeOnly()
    {
        boolean $z0, $z1;

        $z0 = staticinvoke <android.os.storage.StorageManager: boolean isEncrypted()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $z1 = <com.android.internal.os.RoSystemProperties: boolean CRYPTO_FILE_ENCRYPTED>;

        return $z1;
    }

    public static boolean isFileEncryptedNativeOrEmulated()
    {
        boolean $z0, $z1, z2;

        $z0 = staticinvoke <android.os.storage.StorageManager: boolean isFileEncryptedNativeOnly()>();

        if $z0 != 0 goto label2;

        $z1 = staticinvoke <android.os.storage.StorageManager: boolean isFileEncryptedEmulatedOnly()>();

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    public static boolean isNonDefaultBlockEncrypted()
    {
        boolean z0, z1;
        int i0;
        android.os.IBinder $r1;
        android.os.storage.IStorageManager $r2;
        android.os.RemoteException $r3;

        z0 = staticinvoke <android.os.storage.StorageManager: boolean isBlockEncrypted()>();

        z1 = 0;

        if z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("mount");

        $r2 = staticinvoke <android.os.storage.IStorageManager$Stub: android.os.storage.IStorageManager asInterface(android.os.IBinder)>($r1);

        i0 = interfaceinvoke $r2.<android.os.storage.IStorageManager: int getPasswordType()>();

     label2:
        if i0 == 1 goto label3;

        z1 = 1;

     label3:
        return z1;

     label4:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("StorageManager", "Error getting encryption type");

        return 0;

        catch android.os.RemoteException from label1 to label2 with label4;
    }

    public static boolean isUserKeyUnlocked(int)
    {
        int i0;
        long l1;
        boolean z0;
        android.os.storage.IStorageManager $r0, $r1, $r2, $r4;
        android.os.IBinder $r3;
        java.lang.Throwable $r5;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;

        i0 := @parameter0: int;

        $r0 = <android.os.storage.StorageManager: android.os.storage.IStorageManager sStorageManager>;

        if $r0 != null goto label1;

        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("mount");

        $r4 = staticinvoke <android.os.storage.IStorageManager$Stub: android.os.storage.IStorageManager asInterface(android.os.IBinder)>($r3);

        <android.os.storage.StorageManager: android.os.storage.IStorageManager sStorageManager> = $r4;

     label1:
        $r1 = <android.os.storage.StorageManager: android.os.storage.IStorageManager sStorageManager>;

        if $r1 != null goto label2;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("StorageManager", "Early during boot, assuming locked");

        return 0;

     label2:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label3:
        $r2 = <android.os.storage.StorageManager: android.os.storage.IStorageManager sStorageManager>;

        z0 = interfaceinvoke $r2.<android.os.storage.IStorageManager: boolean isUserKeyUnlocked(int)>(i0);

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return z0;

     label5:
        $r5 := @caughtexception;

        goto label8;

     label6:
        $r6 := @caughtexception;

     label7:
        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r7;

     label8:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r5;

        catch android.os.RemoteException from label3 to label4 with label6;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label7 to label8 with label5;
    }

    public static java.io.File maybeTranslateEmulatedPathToInternal(java.io.File)
    {
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        return r0;
    }

    private boolean noteAppOpAllowingLegacy(boolean, int, int, java.lang.String, java.lang.String, int)
    {
        android.os.storage.StorageManager r0;
        boolean z0;
        int i0, i1, i2, i3, $i4;
        android.app.AppOpsManager $r1, $r24;
        java.lang.StringBuilder $r2, $r13;
        java.lang.String $r4, $r7, $r12, $r14, $r17, $r20, r21, r22;
        java.lang.SecurityException $r11;
        java.lang.IllegalStateException $r19;

        r0 := @this: android.os.storage.StorageManager;

        z0 := @parameter0: boolean;

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        r21 := @parameter3: java.lang.String;

        r22 := @parameter4: java.lang.String;

        i1 := @parameter5: int;

        $r1 = r0.<android.os.storage.StorageManager: android.app.AppOpsManager mAppOps>;

        i3 = virtualinvoke $r1.<android.app.AppOpsManager: int noteOpNoThrow(int,int,java.lang.String,java.lang.String,java.lang.String)>(i1, i0, r21, r22, null);

        if i3 == 0 goto label5;

        if i3 == 1 goto label2;

        if i3 == 2 goto label2;

        if i3 != 3 goto label1;

        goto label2;

     label1:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = staticinvoke <android.app.AppOpsManager: java.lang.String opToName(int)>(i1);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has unknown mode ");

        $r17 = staticinvoke <android.app.AppOpsManager: java.lang.String modeToName(int)>(i3);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = new java.lang.IllegalStateException;

        $r20 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r20);

        throw $r19;

     label2:
        $r24 = r0.<android.os.storage.StorageManager: android.app.AppOpsManager mAppOps>;

        $i4 = virtualinvoke $r24.<android.app.AppOpsManager: int checkOpNoThrow(int,int,java.lang.String)>(87, i0, r21);

        if $i4 != 0 goto label3;

        return 1;

     label3:
        if z0 != 0 goto label4;

        return 0;

     label4:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Op ");

        $r4 = staticinvoke <android.app.AppOpsManager: java.lang.String opToName(int)>(i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r7 = staticinvoke <android.app.AppOpsManager: java.lang.String modeToName(int)>(i3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for package ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        $r11 = new java.lang.SecurityException;

        $r12 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.SecurityException: void <init>(java.lang.String)>($r12);

        throw $r11;

     label5:
        return 1;
    }

    private static void setCacheBehavior(java.io.File, java.lang.String, boolean) throws java.io.IOException
    {
        java.lang.String r0, $r2, $r3, $r5;
        boolean z0, $z1;
        java.nio.charset.Charset $r4;
        byte[] $r6;
        java.lang.Throwable $r7, $r9;
        java.io.IOException $r8, $r10, r14;
        int $i0, $i1;
        java.io.File r11;
        android.system.ErrnoException r15, r16, r17;

        r11 := @parameter0: java.io.File;

        r0 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $z1 = virtualinvoke r11.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label9;

        if z0 == 0 goto label4;

     label1:
        $r3 = virtualinvoke r11.<java.io.File: java.lang.String getAbsolutePath()>();

        $r5 = "1";

        $r4 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r6 = virtualinvoke $r5.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r4);

        staticinvoke <android.system.Os: void setxattr(java.lang.String,java.lang.String,byte[],int)>($r3, r0, $r6, 0);

     label2:
        goto label7;

     label3:
        $r7 := @caughtexception;

        r15 = (android.system.ErrnoException) $r7;

        $r8 = virtualinvoke r15.<android.system.ErrnoException: java.io.IOException rethrowAsIOException()>();

        throw $r8;

     label4:
        $r2 = virtualinvoke r11.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <android.system.Os: void removexattr(java.lang.String,java.lang.String)>($r2, r0);

     label5:
        goto label7;

     label6:
        $r9 := @caughtexception;

        r16 = (android.system.ErrnoException) $r9;

        $i1 = r16.<android.system.ErrnoException: int errno>;

        $i0 = <android.system.OsConstants: int ENODATA>;

        if $i1 != $i0 goto label8;

     label7:
        return;

     label8:
        r17 = (android.system.ErrnoException) $r9;

        $r10 = virtualinvoke r17.<android.system.ErrnoException: java.io.IOException rethrowAsIOException()>();

        throw $r10;

     label9:
        r14 = new java.io.IOException;

        specialinvoke r14.<java.io.IOException: void <init>(java.lang.String)>("Cache behavior can only be set on directories");

        throw r14;

        catch android.system.ErrnoException from label1 to label2 with label3;
        catch android.system.ErrnoException from label4 to label5 with label6;
    }

    private static native boolean setQuotaProjectId(java.lang.String, long);

    public void allocateBytes(java.io.FileDescriptor, long) throws java.io.IOException
    {
        android.os.storage.StorageManager r0;
        java.io.FileDescriptor r1;
        long l0;

        r0 := @this: android.os.storage.StorageManager;

        r1 := @parameter0: java.io.FileDescriptor;

        l0 := @parameter1: long;

        virtualinvoke r0.<android.os.storage.StorageManager: void allocateBytes(java.io.FileDescriptor,long,int)>(r1, l0, 0);

        return;
    }

    public void allocateBytes(java.io.FileDescriptor, long, int) throws java.io.IOException
    {
        android.os.storage.StorageManager r0;
        long l0, l2, $l3, $l4;
        int i1, $i6, $i7, $i9, $i10, $i12, $i13, i14;
        java.io.File r1;
        java.util.UUID r2;
        java.lang.String $r9;
        android.system.StructStat $r10;
        byte $b5;
        java.lang.Throwable $r11, $r13;
        java.io.IOException $r12, r19;
        java.io.FileDescriptor r14;
        java.lang.StringBuilder r18;
        android.system.ErrnoException r20, r21, r22, r23;

        r0 := @this: android.os.storage.StorageManager;

        r14 := @parameter0: java.io.FileDescriptor;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        r1 = staticinvoke <android.os.ParcelFileDescriptor: java.io.File getFile(java.io.FileDescriptor)>(r14);

        r2 = virtualinvoke r0.<android.os.storage.StorageManager: java.util.UUID getUuidForPath(java.io.File)>(r1);

        i14 = 0;

     label01:
        if i14 >= 3 goto label15;

     label02:
        $r10 = staticinvoke <android.system.Os: android.system.StructStat fstat(java.io.FileDescriptor)>(r14);

        $l3 = $r10.<android.system.StructStat: long st_blocks>;

        $l4 = $l3 * 512L;

        l2 = l0 - $l4;

     label03:
        $b5 = l2 cmp 0L;

        if $b5 <= 0 goto label05;

     label04:
        virtualinvoke r0.<android.os.storage.StorageManager: void allocateBytes(java.util.UUID,long,int)>(r2, l2, i1);

     label05:
        staticinvoke <android.system.Os: void posix_fallocate(java.io.FileDescriptor,long,long)>(r14, 0L, l0);

     label06:
        return;

     label07:
        $r13 := @caughtexception;

     label08:
        r20 = (android.system.ErrnoException) $r13;

        $i10 = r20.<android.system.ErrnoException: int errno>;

        $i9 = <android.system.OsConstants: int ENOSYS>;

        if $i10 == $i9 goto label11;

        r21 = (android.system.ErrnoException) $r13;

        $i13 = r21.<android.system.ErrnoException: int errno>;

        $i12 = <android.system.OsConstants: int ENOTSUP>;

        if $i13 != $i12 goto label10;

     label09:
        goto label11;

     label10:
        throw $r13;

     label11:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("StorageManager", "fallocate() not supported; falling back to ftruncate()");

        staticinvoke <android.system.Os: void ftruncate(java.io.FileDescriptor,long)>(r14, l0);

     label12:
        return;

     label13:
        $r11 := @caughtexception;

        r22 = (android.system.ErrnoException) $r11;

        $i7 = r22.<android.system.ErrnoException: int errno>;

        $i6 = <android.system.OsConstants: int ENOSPC>;

        if $i7 != $i6 goto label14;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("StorageManager", "Odd, not enough space; let\'s try again?");

        i14 = i14 + 1;

        goto label01;

     label14:
        r23 = (android.system.ErrnoException) $r11;

        $r12 = virtualinvoke r23.<android.system.ErrnoException: java.io.IOException rethrowAsIOException()>();

        throw $r12;

     label15:
        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Well this is embarassing; we can\'t allocate ");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for ");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        r19 = new java.io.IOException;

        $r9 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r19.<java.io.IOException: void <init>(java.lang.String)>($r9);

        throw r19;

        catch android.system.ErrnoException from label02 to label03 with label13;
        catch android.system.ErrnoException from label04 to label05 with label13;
        catch android.system.ErrnoException from label05 to label06 with label07;
        catch android.system.ErrnoException from label08 to label09 with label13;
        catch android.system.ErrnoException from label10 to label11 with label13;
        catch android.system.ErrnoException from label11 to label12 with label13;
    }

    public void allocateBytes(java.util.UUID, long) throws java.io.IOException
    {
        android.os.storage.StorageManager r0;
        java.util.UUID r1;
        long l0;

        r0 := @this: android.os.storage.StorageManager;

        r1 := @parameter0: java.util.UUID;

        l0 := @parameter1: long;

        virtualinvoke r0.<android.os.storage.StorageManager: void allocateBytes(java.util.UUID,long,int)>(r1, l0, 0);

        return;
    }

    public void allocateBytes(java.util.UUID, long, int) throws java.io.IOException
    {
        android.os.storage.StorageManager r0;
        long l0;
        int i1;
        android.os.storage.IStorageManager $r1;
        java.lang.String $r2, $r4;
        android.content.Context $r3;
        android.os.ParcelableException $r5;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;
        java.util.UUID r8;

        r0 := @this: android.os.storage.StorageManager;

        r8 := @parameter0: java.util.UUID;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

     label1:
        $r1 = r0.<android.os.storage.StorageManager: android.os.storage.IStorageManager mStorageManager>;

        $r2 = staticinvoke <android.os.storage.StorageManager: java.lang.String convert(java.util.UUID)>(r8);

        $r3 = r0.<android.os.storage.StorageManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke $r1.<android.os.storage.IStorageManager: void allocateBytes(java.lang.String,long,int,java.lang.String)>($r2, l0, i1, $r4);

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

     label4:
        $r5 := @caughtexception;

        virtualinvoke $r5.<android.os.ParcelableException: void maybeRethrow(java.lang.Class)>(class "Ljava/io/IOException;");

     label5:
        return;

        catch android.os.ParcelableException from label1 to label2 with label4;
        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public long benchmark(java.lang.String)
    {
        android.os.storage.StorageManager r0;
        long l0, $l1;
        java.util.concurrent.CompletableFuture $r2;
        android.os.storage.StorageManager$1 $r3;
        java.util.concurrent.TimeUnit $r4;
        java.lang.Object $r5;
        android.os.PersistableBundle $r6;
        java.lang.Exception $r7;
        java.lang.String r8;

        r0 := @this: android.os.storage.StorageManager;

        r8 := @parameter0: java.lang.String;

        $r2 = new java.util.concurrent.CompletableFuture;

        specialinvoke $r2.<java.util.concurrent.CompletableFuture: void <init>()>();

        $r3 = new android.os.storage.StorageManager$1;

        specialinvoke $r3.<android.os.storage.StorageManager$1: void <init>(android.os.storage.StorageManager,java.util.concurrent.CompletableFuture)>(r0, $r2);

        virtualinvoke r0.<android.os.storage.StorageManager: void benchmark(java.lang.String,android.os.IVoldTaskListener)>(r8, $r3);

     label1:
        $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $r5 = virtualinvoke $r2.<java.util.concurrent.CompletableFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)>(3L, $r4);

        $r6 = (android.os.PersistableBundle) $r5;

        l0 = virtualinvoke $r6.<android.os.PersistableBundle: long getLong(java.lang.String,long)>("run", 9223372036854775807L);

     label2:
        $l1 = l0 * 1000000L;

        return $l1;

     label3:
        $r7 := @caughtexception;

        return 9223372036854775807L;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void benchmark(java.lang.String, android.os.IVoldTaskListener)
    {
        android.os.storage.StorageManager r0;
        android.os.IVoldTaskListener r1;
        android.os.storage.IStorageManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;

        r0 := @this: android.os.storage.StorageManager;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: android.os.IVoldTaskListener;

     label1:
        $r2 = r0.<android.os.storage.StorageManager: android.os.storage.IStorageManager mStorageManager>;

        interfaceinvoke $r2.<android.os.storage.IStorageManager: void benchmark(java.lang.String,android.os.IVoldTaskListener)>(r5, r1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean checkPermissionReadAudio(boolean, int, int, java.lang.String, java.lang.String)
    {
        android.os.storage.StorageManager r0;
        boolean z0, $z1, $z2;
        int i0, i1;
        java.lang.String r1, r2;

        r0 := @this: android.os.storage.StorageManager;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        r2 := @parameter4: java.lang.String;

        $z1 = specialinvoke r0.<android.os.storage.StorageManager: boolean checkExternalStoragePermissionAndAppOp(boolean,int,int,java.lang.String,java.lang.String,java.lang.String,int)>(z0, i0, i1, r1, r2, "android.permission.READ_EXTERNAL_STORAGE", 59);

        if $z1 != 0 goto label1;

        return 0;

     label1:
        $z2 = specialinvoke r0.<android.os.storage.StorageManager: boolean noteAppOpAllowingLegacy(boolean,int,int,java.lang.String,java.lang.String,int)>(z0, i0, i1, r1, r2, 81);

        return $z2;
    }

    public boolean checkPermissionReadImages(boolean, int, int, java.lang.String, java.lang.String)
    {
        android.os.storage.StorageManager r0;
        boolean z0, $z1, $z2;
        int i0, i1;
        java.lang.String r1, r2;

        r0 := @this: android.os.storage.StorageManager;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        r2 := @parameter4: java.lang.String;

        $z1 = specialinvoke r0.<android.os.storage.StorageManager: boolean checkExternalStoragePermissionAndAppOp(boolean,int,int,java.lang.String,java.lang.String,java.lang.String,int)>(z0, i0, i1, r1, r2, "android.permission.READ_EXTERNAL_STORAGE", 59);

        if $z1 != 0 goto label1;

        return 0;

     label1:
        $z2 = specialinvoke r0.<android.os.storage.StorageManager: boolean noteAppOpAllowingLegacy(boolean,int,int,java.lang.String,java.lang.String,int)>(z0, i0, i1, r1, r2, 85);

        return $z2;
    }

    public boolean checkPermissionReadVideo(boolean, int, int, java.lang.String, java.lang.String)
    {
        android.os.storage.StorageManager r0;
        boolean z0, $z1, $z2;
        int i0, i1;
        java.lang.String r1, r2;

        r0 := @this: android.os.storage.StorageManager;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        r2 := @parameter4: java.lang.String;

        $z1 = specialinvoke r0.<android.os.storage.StorageManager: boolean checkExternalStoragePermissionAndAppOp(boolean,int,int,java.lang.String,java.lang.String,java.lang.String,int)>(z0, i0, i1, r1, r2, "android.permission.READ_EXTERNAL_STORAGE", 59);

        if $z1 != 0 goto label1;

        return 0;

     label1:
        $z2 = specialinvoke r0.<android.os.storage.StorageManager: boolean noteAppOpAllowingLegacy(boolean,int,int,java.lang.String,java.lang.String,int)>(z0, i0, i1, r1, r2, 83);

        return $z2;
    }

    public boolean checkPermissionWriteAudio(boolean, int, int, java.lang.String, java.lang.String)
    {
        android.os.storage.StorageManager r0;
        boolean z0, $z1, $z2;
        int i0, i1;
        java.lang.String r1, r2;

        r0 := @this: android.os.storage.StorageManager;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        r2 := @parameter4: java.lang.String;

        $z1 = specialinvoke r0.<android.os.storage.StorageManager: boolean checkExternalStoragePermissionAndAppOp(boolean,int,int,java.lang.String,java.lang.String,java.lang.String,int)>(z0, i0, i1, r1, r2, "android.permission.WRITE_EXTERNAL_STORAGE", 60);

        if $z1 != 0 goto label1;

        return 0;

     label1:
        $z2 = specialinvoke r0.<android.os.storage.StorageManager: boolean noteAppOpAllowingLegacy(boolean,int,int,java.lang.String,java.lang.String,int)>(z0, i0, i1, r1, r2, 82);

        return $z2;
    }

    public boolean checkPermissionWriteImages(boolean, int, int, java.lang.String, java.lang.String)
    {
        android.os.storage.StorageManager r0;
        boolean z0, $z1, $z2;
        int i0, i1;
        java.lang.String r1, r2;

        r0 := @this: android.os.storage.StorageManager;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        r2 := @parameter4: java.lang.String;

        $z1 = specialinvoke r0.<android.os.storage.StorageManager: boolean checkExternalStoragePermissionAndAppOp(boolean,int,int,java.lang.String,java.lang.String,java.lang.String,int)>(z0, i0, i1, r1, r2, "android.permission.WRITE_EXTERNAL_STORAGE", 60);

        if $z1 != 0 goto label1;

        return 0;

     label1:
        $z2 = specialinvoke r0.<android.os.storage.StorageManager: boolean noteAppOpAllowingLegacy(boolean,int,int,java.lang.String,java.lang.String,int)>(z0, i0, i1, r1, r2, 86);

        return $z2;
    }

    public boolean checkPermissionWriteVideo(boolean, int, int, java.lang.String, java.lang.String)
    {
        android.os.storage.StorageManager r0;
        boolean z0, $z1, $z2;
        int i0, i1;
        java.lang.String r1, r2;

        r0 := @this: android.os.storage.StorageManager;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        r2 := @parameter4: java.lang.String;

        $z1 = specialinvoke r0.<android.os.storage.StorageManager: boolean checkExternalStoragePermissionAndAppOp(boolean,int,int,java.lang.String,java.lang.String,java.lang.String,int)>(z0, i0, i1, r1, r2, "android.permission.WRITE_EXTERNAL_STORAGE", 60);

        if $z1 != 0 goto label1;

        return 0;

     label1:
        $z2 = specialinvoke r0.<android.os.storage.StorageManager: boolean noteAppOpAllowingLegacy(boolean,int,int,java.lang.String,java.lang.String,int)>(z0, i0, i1, r1, r2, 84);

        return $z2;
    }

    public void createUserKey(int, int, boolean)
    {
        android.os.storage.StorageManager r0;
        int i0, i1;
        boolean z0;
        android.os.storage.IStorageManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.os.storage.StorageManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

     label1:
        $r2 = r0.<android.os.storage.StorageManager: android.os.storage.IStorageManager mStorageManager>;

        interfaceinvoke $r2.<android.os.storage.IStorageManager: void createUserKey(int,int,boolean)>(i0, i1, z0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void destroyUserKey(int)
    {
        android.os.storage.StorageManager r0;
        int i0;
        android.os.storage.IStorageManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.os.storage.StorageManager;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.os.storage.StorageManager: android.os.storage.IStorageManager mStorageManager>;

        interfaceinvoke $r2.<android.os.storage.IStorageManager: void destroyUserKey(int)>(i0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void destroyUserStorage(java.lang.String, int, int)
    {
        android.os.storage.StorageManager r0;
        int i0, i1;
        android.os.storage.IStorageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.os.storage.StorageManager;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

     label1:
        $r1 = r0.<android.os.storage.StorageManager: android.os.storage.IStorageManager mStorageManager>;

        interfaceinvoke $r1.<android.os.storage.IStorageManager: void destroyUserStorage(java.lang.String,int,int)>(r4, i0, i1);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void disableUsbMassStorage()
    {
        android.os.storage.StorageManager r0;

        r0 := @this: android.os.storage.StorageManager;

        return;
    }

    public void enableUsbMassStorage()
    {
        android.os.storage.StorageManager r0;

        r0 := @this: android.os.storage.StorageManager;

        return;
    }

    public android.os.storage.DiskInfo findDiskById(java.lang.String)
    {
        android.os.storage.StorageManager r0;
        java.lang.String r1, $r7;
        java.util.Iterator r2;
        android.os.storage.DiskInfo r3;
        java.util.List $r5;
        boolean $z0, $z1;
        java.lang.Object $r6;

        r0 := @this: android.os.storage.StorageManager;

        r1 := @parameter0: java.lang.String;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r5 = virtualinvoke r0.<android.os.storage.StorageManager: java.util.List getDisks()>();

        r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.os.storage.DiskInfo) $r6;

        $r7 = r3.<android.os.storage.DiskInfo: java.lang.String id>;

        $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r7, r1);

        if $z1 == 0 goto label2;

        return r3;

     label2:
        goto label1;

     label3:
        return null;
    }

    public android.os.storage.VolumeInfo findEmulatedForPrivate(android.os.storage.VolumeInfo)
    {
        android.os.storage.StorageManager r0;
        android.os.storage.VolumeInfo r1, $r11;
        java.lang.StringBuilder $r3;
        java.lang.String $r4, $r5, $r10;
        android.content.Context $r8;
        int $i0;

        r0 := @this: android.os.storage.StorageManager;

        r1 := @parameter0: android.os.storage.VolumeInfo;

        if r1 == null goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r1.<android.os.storage.VolumeInfo: java.lang.String getId()>();

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("private", "emulated");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r8 = r0.<android.os.storage.StorageManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r8.<android.content.Context: int getUserId()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r10 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = virtualinvoke r0.<android.os.storage.StorageManager: android.os.storage.VolumeInfo findVolumeById(java.lang.String)>($r10);

        return $r11;

     label1:
        return null;
    }

    public java.io.File findPathForUuid(java.lang.String) throws java.io.FileNotFoundException
    {
        android.os.storage.StorageManager r0;
        java.lang.String r1, $r6;
        java.lang.StringBuilder $r2;
        java.io.FileNotFoundException $r5;
        java.io.File $r7;
        android.os.storage.VolumeInfo r8;

        r0 := @this: android.os.storage.StorageManager;

        r1 := @parameter0: java.lang.String;

        r8 = virtualinvoke r0.<android.os.storage.StorageManager: android.os.storage.VolumeInfo findVolumeByQualifiedUuid(java.lang.String)>(r1);

        if r8 == null goto label1;

        $r7 = virtualinvoke r8.<android.os.storage.VolumeInfo: java.io.File getPath()>();

        return $r7;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to find a storage device for ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = new java.io.FileNotFoundException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    public android.os.storage.VolumeInfo findPrivateForEmulated(android.os.storage.VolumeInfo)
    {
        android.os.storage.StorageManager r0;
        java.lang.String r1, $r2, r5;
        int i0;
        android.os.storage.VolumeInfo $r3, r4;

        r0 := @this: android.os.storage.StorageManager;

        r4 := @parameter0: android.os.storage.VolumeInfo;

        if r4 == null goto label2;

        r1 = virtualinvoke r4.<android.os.storage.VolumeInfo: java.lang.String getId()>();

        i0 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>(";");

        r5 = r1;

        if i0 == -1 goto label1;

        r5 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

     label1:
        $r2 = virtualinvoke r5.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("emulated", "private");

        $r3 = virtualinvoke r0.<android.os.storage.StorageManager: android.os.storage.VolumeInfo findVolumeById(java.lang.String)>($r2);

        return $r3;

     label2:
        return null;
    }

    public android.os.storage.VolumeRecord findRecordByUuid(java.lang.String)
    {
        android.os.storage.StorageManager r0;
        java.lang.String r1, $r7;
        java.util.Iterator r2;
        android.os.storage.VolumeRecord r3;
        java.util.List $r5;
        boolean $z0, $z1;
        java.lang.Object $r6;

        r0 := @this: android.os.storage.StorageManager;

        r1 := @parameter0: java.lang.String;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r5 = virtualinvoke r0.<android.os.storage.StorageManager: java.util.List getVolumeRecords()>();

        r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.os.storage.VolumeRecord) $r6;

        $r7 = r3.<android.os.storage.VolumeRecord: java.lang.String fsUuid>;

        $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r7, r1);

        if $z1 == 0 goto label2;

        return r3;

     label2:
        goto label1;

     label3:
        return null;
    }

    public android.os.storage.VolumeInfo findVolumeById(java.lang.String)
    {
        android.os.storage.StorageManager r0;
        java.lang.String r1, $r7;
        java.util.Iterator r2;
        android.os.storage.VolumeInfo r3;
        java.util.List $r5;
        boolean $z0, $z1;
        java.lang.Object $r6;

        r0 := @this: android.os.storage.StorageManager;

        r1 := @parameter0: java.lang.String;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r5 = virtualinvoke r0.<android.os.storage.StorageManager: java.util.List getVolumes()>();

        r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.os.storage.VolumeInfo) $r6;

        $r7 = r3.<android.os.storage.VolumeInfo: java.lang.String id>;

        $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r7, r1);

        if $z1 == 0 goto label2;

        return r3;

     label2:
        goto label1;

     label3:
        return null;
    }

    public android.os.storage.VolumeInfo findVolumeByQualifiedUuid(java.lang.String)
    {
        android.os.storage.StorageManager r0;
        java.lang.String r1, $r2;
        boolean $z0, $z1;
        android.os.storage.VolumeInfo $r3, $r4, $r5;

        r0 := @this: android.os.storage.StorageManager;

        r1 := @parameter0: java.lang.String;

        $r2 = <android.os.storage.StorageManager: java.lang.String UUID_PRIVATE_INTERNAL>;

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r2, r1);

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke r0.<android.os.storage.StorageManager: android.os.storage.VolumeInfo findVolumeById(java.lang.String)>("private");

        return $r5;

     label1:
        $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>("primary_physical", r1);

        if $z1 == 0 goto label2;

        $r4 = virtualinvoke r0.<android.os.storage.StorageManager: android.os.storage.VolumeInfo getPrimaryPhysicalVolume()>();

        return $r4;

     label2:
        $r3 = virtualinvoke r0.<android.os.storage.StorageManager: android.os.storage.VolumeInfo findVolumeByUuid(java.lang.String)>(r1);

        return $r3;
    }

    public android.os.storage.VolumeInfo findVolumeByUuid(java.lang.String)
    {
        android.os.storage.StorageManager r0;
        java.lang.String r1, $r7;
        java.util.Iterator r2;
        android.os.storage.VolumeInfo r3;
        java.util.List $r5;
        boolean $z0, $z1;
        java.lang.Object $r6;

        r0 := @this: android.os.storage.StorageManager;

        r1 := @parameter0: java.lang.String;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r5 = virtualinvoke r0.<android.os.storage.StorageManager: java.util.List getVolumes()>();

        r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.os.storage.VolumeInfo) $r6;

        $r7 = r3.<android.os.storage.VolumeInfo: java.lang.String fsUuid>;

        $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r7, r1);

        if $z1 == 0 goto label2;

        return r3;

     label2:
        goto label1;

     label3:
        return null;
    }

    public void fixupAppDir(java.io.File)
    {
        android.os.storage.StorageManager r0;
        android.os.storage.IStorageManager $r3;
        java.lang.String $r4, $r10, $r12;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        java.lang.Throwable $r7;
        java.lang.StringBuilder $r8;
        java.io.File r13;

        r0 := @this: android.os.storage.StorageManager;

        r13 := @parameter0: java.io.File;

     label1:
        $r3 = r0.<android.os.storage.StorageManager: android.os.storage.IStorageManager mStorageManager>;

        $r4 = virtualinvoke r13.<java.io.File: java.lang.String getCanonicalPath()>();

        interfaceinvoke $r3.<android.os.storage.IStorageManager: void fixupAppDir(java.lang.String)>($r4);

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

     label4:
        $r7 := @caughtexception;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to get canonical path for ");

        $r10 = virtualinvoke r13.<java.io.File: java.lang.String getPath()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("StorageManager", $r12, $r7);

     label5:
        return;

        catch java.io.IOException from label1 to label2 with label4;
        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void forgetVolume(java.lang.String)
    {
        android.os.storage.StorageManager r0;
        android.os.storage.IStorageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.os.storage.StorageManager;

        r4 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<android.os.storage.StorageManager: android.os.storage.IStorageManager mStorageManager>;

        interfaceinvoke $r1.<android.os.storage.IStorageManager: void forgetVolume(java.lang.String)>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void format(java.lang.String)
    {
        android.os.storage.StorageManager r0;
        android.os.storage.IStorageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.os.storage.StorageManager;

        r4 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<android.os.storage.StorageManager: android.os.storage.IStorageManager mStorageManager>;

        interfaceinvoke $r1.<android.os.storage.IStorageManager: void format(java.lang.String)>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public long getAllocatableBytes(java.util.UUID) throws java.io.IOException
    {
        android.os.storage.StorageManager r0;
        java.util.UUID r1;
        long $l0;

        r0 := @this: android.os.storage.StorageManager;

        r1 := @parameter0: java.util.UUID;

        $l0 = virtualinvoke r0.<android.os.storage.StorageManager: long getAllocatableBytes(java.util.UUID,int)>(r1, 0);

        return $l0;
    }

    public long getAllocatableBytes(java.util.UUID, int) throws java.io.IOException
    {
        android.os.storage.StorageManager r0;
        int i0;
        long l1;
        android.os.storage.IStorageManager $r1;
        java.lang.String $r2, $r4;
        android.content.Context $r3;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6, $r8;
        android.os.ParcelableException $r7;
        java.util.UUID r9;

        r0 := @this: android.os.storage.StorageManager;

        r9 := @parameter0: java.util.UUID;

        i0 := @parameter1: int;

     label1:
        $r1 = r0.<android.os.storage.StorageManager: android.os.storage.IStorageManager mStorageManager>;

        $r2 = staticinvoke <android.os.storage.StorageManager: java.lang.String convert(java.util.UUID)>(r9);

        $r3 = r0.<android.os.storage.StorageManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getOpPackageName()>();

        l1 = interfaceinvoke $r1.<android.os.storage.IStorageManager: long getAllocatableBytes(java.lang.String,int,java.lang.String)>($r2, i0, $r4);

     label2:
        return l1;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

     label4:
        $r7 := @caughtexception;

        virtualinvoke $r7.<android.os.ParcelableException: void maybeRethrow(java.lang.Class)>(class "Ljava/io/IOException;");

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

        catch android.os.ParcelableException from label1 to label2 with label4;
        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getBestVolumeDescription(android.os.storage.VolumeInfo)
    {
        android.os.storage.StorageManager r0;
        android.os.storage.VolumeInfo r1;
        android.os.storage.VolumeRecord r2;
        java.lang.String $r3, $r6, $r7, $r8, $r9, $r10, $r11;
        boolean $z0, $z1, $z2;
        android.os.storage.DiskInfo $r4, $r5;

        r0 := @this: android.os.storage.StorageManager;

        r1 := @parameter0: android.os.storage.VolumeInfo;

        if r1 != null goto label1;

        return null;

     label1:
        $r3 = r1.<android.os.storage.VolumeInfo: java.lang.String fsUuid>;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r3);

        if $z0 != 0 goto label2;

        $r8 = r1.<android.os.storage.VolumeInfo: java.lang.String fsUuid>;

        r2 = virtualinvoke r0.<android.os.storage.StorageManager: android.os.storage.VolumeRecord findRecordByUuid(java.lang.String)>($r8);

        if r2 == null goto label2;

        $r9 = r2.<android.os.storage.VolumeRecord: java.lang.String nickname>;

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r9);

        if $z1 != 0 goto label2;

        $r10 = r2.<android.os.storage.VolumeRecord: java.lang.String nickname>;

        return $r10;

     label2:
        $r11 = virtualinvoke r1.<android.os.storage.VolumeInfo: java.lang.String getDescription()>();

        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r11);

        if $z2 != 0 goto label3;

        $r7 = virtualinvoke r1.<android.os.storage.VolumeInfo: java.lang.String getDescription()>();

        return $r7;

     label3:
        $r4 = r1.<android.os.storage.VolumeInfo: android.os.storage.DiskInfo disk>;

        if $r4 == null goto label4;

        $r5 = r1.<android.os.storage.VolumeInfo: android.os.storage.DiskInfo disk>;

        $r6 = virtualinvoke $r5.<android.os.storage.DiskInfo: java.lang.String getDescription()>();

        return $r6;

     label4:
        return null;
    }

    public long getCacheQuotaBytes(java.util.UUID) throws java.io.IOException
    {
        android.os.storage.StorageManager r0;
        android.content.pm.ApplicationInfo r1;
        long l0;
        android.content.Context $r2;
        android.os.storage.IStorageManager $r3;
        java.lang.String $r4;
        int $i1;
        android.os.ParcelableException $r5;
        java.lang.RuntimeException $r6, $r8;
        android.os.RemoteException $r7;
        java.util.UUID r9;

        r0 := @this: android.os.storage.StorageManager;

        r9 := @parameter0: java.util.UUID;

     label1:
        $r2 = r0.<android.os.storage.StorageManager: android.content.Context mContext>;

        r1 = virtualinvoke $r2.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $r3 = r0.<android.os.storage.StorageManager: android.os.storage.IStorageManager mStorageManager>;

        $r4 = staticinvoke <android.os.storage.StorageManager: java.lang.String convert(java.util.UUID)>(r9);

        $i1 = r1.<android.content.pm.ApplicationInfo: int uid>;

        l0 = interfaceinvoke $r3.<android.os.storage.IStorageManager: long getCacheQuotaBytes(java.lang.String,int)>($r4, $i1);

     label2:
        return l0;

     label3:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r8;

     label4:
        $r5 := @caughtexception;

        virtualinvoke $r5.<android.os.ParcelableException: void maybeRethrow(java.lang.Class)>(class "Ljava/io/IOException;");

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

        catch android.os.ParcelableException from label1 to label2 with label4;
        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public long getCacheSizeBytes(java.util.UUID) throws java.io.IOException
    {
        android.os.storage.StorageManager r0;
        android.content.pm.ApplicationInfo r1;
        long l0;
        android.content.Context $r2;
        android.os.storage.IStorageManager $r3;
        java.lang.String $r4;
        int $i1;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6, $r8;
        android.os.ParcelableException $r7;
        java.util.UUID r9;

        r0 := @this: android.os.storage.StorageManager;

        r9 := @parameter0: java.util.UUID;

     label1:
        $r2 = r0.<android.os.storage.StorageManager: android.content.Context mContext>;

        r1 = virtualinvoke $r2.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $r3 = r0.<android.os.storage.StorageManager: android.os.storage.IStorageManager mStorageManager>;

        $r4 = staticinvoke <android.os.storage.StorageManager: java.lang.String convert(java.util.UUID)>(r9);

        $i1 = r1.<android.content.pm.ApplicationInfo: int uid>;

        l0 = interfaceinvoke $r3.<android.os.storage.IStorageManager: long getCacheSizeBytes(java.lang.String,int)>($r4, $i1);

     label2:
        return l0;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

     label4:
        $r7 := @caughtexception;

        virtualinvoke $r7.<android.os.ParcelableException: void maybeRethrow(java.lang.Class)>(class "Ljava/io/IOException;");

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

        catch android.os.ParcelableException from label1 to label2 with label4;
        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getDisks()
    {
        android.os.storage.StorageManager r0;
        android.os.storage.IStorageManager $r1;
        android.os.storage.DiskInfo[] $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.util.List r5;

        r0 := @this: android.os.storage.StorageManager;

     label1:
        $r1 = r0.<android.os.storage.StorageManager: android.os.storage.IStorageManager mStorageManager>;

        $r2 = interfaceinvoke $r1.<android.os.storage.IStorageManager: android.os.storage.DiskInfo[] getDisks()>();

        r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

     label2:
        return r5;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getMountedObbPath(java.lang.String)
    {
        android.os.storage.StorageManager r0;
        android.os.storage.IStorageManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5, r6;

        r0 := @this: android.os.storage.StorageManager;

        r5 := @parameter0: java.lang.String;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r5, "rawPath cannot be null");

     label1:
        $r2 = r0.<android.os.storage.StorageManager: android.os.storage.IStorageManager mStorageManager>;

        r6 = interfaceinvoke $r2.<android.os.storage.IStorageManager: java.lang.String getMountedObbPath(java.lang.String)>(r5);

     label2:
        return r6;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.os.storage.VolumeInfo getPrimaryPhysicalVolume()
    {
        android.os.storage.StorageManager r0;
        java.util.Iterator r1;
        android.os.storage.VolumeInfo r2;
        java.util.List $r3;
        boolean $z0, $z1;
        java.lang.Object $r4;

        r0 := @this: android.os.storage.StorageManager;

        $r3 = virtualinvoke r0.<android.os.storage.StorageManager: java.util.List getVolumes()>();

        r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.os.storage.VolumeInfo) $r4;

        $z1 = virtualinvoke r2.<android.os.storage.VolumeInfo: boolean isPrimaryPhysical()>();

        if $z1 == 0 goto label2;

        return r2;

     label2:
        goto label1;

     label3:
        return null;
    }

    public long getPrimaryStorageSize()
    {
        android.os.storage.StorageManager r0;
        java.io.File $r1, $r2;
        long $l0, $l1, $l2, $l3;

        r0 := @this: android.os.storage.StorageManager;

        $r1 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        $l0 = virtualinvoke $r1.<java.io.File: long getTotalSpace()>();

        $r2 = staticinvoke <android.os.Environment: java.io.File getRootDirectory()>();

        $l1 = virtualinvoke $r2.<java.io.File: long getTotalSpace()>();

        $l2 = $l0 + $l1;

        $l3 = staticinvoke <android.os.FileUtils: long roundStorageSize(long)>($l2);

        return $l3;
    }

    public java.lang.String getPrimaryStorageUuid()
    {
        android.os.storage.StorageManager r0;
        android.os.storage.IStorageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.os.storage.StorageManager;

     label1:
        $r1 = r0.<android.os.storage.StorageManager: android.os.storage.IStorageManager mStorageManager>;

        r4 = interfaceinvoke $r1.<android.os.storage.IStorageManager: java.lang.String getPrimaryStorageUuid()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.os.storage.StorageVolume getPrimaryStorageVolume()
    {
        android.os.storage.StorageManager r0;
        android.content.Context $r1;
        int $i0;
        android.os.storage.StorageVolume[] $r2;
        android.os.storage.StorageVolume $r3;

        r0 := @this: android.os.storage.StorageManager;

        $r1 = r0.<android.os.storage.StorageManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r1.<android.content.Context: int getUserId()>();

        $r2 = staticinvoke <android.os.storage.StorageManager: android.os.storage.StorageVolume[] getVolumeList(int,int)>($i0, 1536);

        $r3 = $r2[0];

        return $r3;
    }

    public android.os.storage.StorageVolume getPrimaryVolume()
    {
        android.os.storage.StorageManager r0;
        android.os.storage.StorageVolume[] $r1;
        android.os.storage.StorageVolume $r2;

        r0 := @this: android.os.storage.StorageManager;

        $r1 = virtualinvoke r0.<android.os.storage.StorageManager: android.os.storage.StorageVolume[] getVolumeList()>();

        $r2 = staticinvoke <android.os.storage.StorageManager: android.os.storage.StorageVolume getPrimaryVolume(android.os.storage.StorageVolume[])>($r1);

        return $r2;
    }

    public int getProxyFileDescriptorMountPointId()
    {
        android.os.storage.StorageManager r0;
        java.lang.Object r1;
        com.android.internal.os.FuseAppLoop $r3, $r4;
        java.lang.Throwable $r5;
        int i0;

        r0 := @this: android.os.storage.StorageManager;

        r1 = r0.<android.os.storage.StorageManager: java.lang.Object mFuseAppLoopLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<android.os.storage.StorageManager: com.android.internal.os.FuseAppLoop mFuseAppLoop>;

        if $r3 == null goto label3;

        $r4 = r0.<android.os.storage.StorageManager: com.android.internal.os.FuseAppLoop mFuseAppLoop>;

        i0 = virtualinvoke $r4.<com.android.internal.os.FuseAppLoop: int getMountPointId()>();

     label2:
        goto label4;

     label3:
        i0 = -1;

     label4:
        exitmonitor r1;

     label5:
        return i0;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public java.util.List getRecentStorageVolumes()
    {
        android.os.storage.StorageManager r0;
        java.util.ArrayList $r2;
        android.content.Context $r3;
        int $i0;
        android.os.storage.StorageVolume[] $r4;

        r0 := @this: android.os.storage.StorageManager;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = r0.<android.os.storage.StorageManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r3.<android.content.Context: int getUserId()>();

        $r4 = staticinvoke <android.os.storage.StorageManager: android.os.storage.StorageVolume[] getVolumeList(int,int)>($i0, 3584);

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r2, $r4);

        return $r2;
    }

    public long getStorageBytesUntilLow(java.io.File)
    {
        android.os.storage.StorageManager r0;
        java.io.File r1;
        long $l0, $l1, $l2;

        r0 := @this: android.os.storage.StorageManager;

        r1 := @parameter0: java.io.File;

        $l0 = virtualinvoke r1.<java.io.File: long getUsableSpace()>();

        $l1 = virtualinvoke r0.<android.os.storage.StorageManager: long getStorageFullBytes(java.io.File)>(r1);

        $l2 = $l0 - $l1;

        return $l2;
    }

    public long getStorageCacheBytes(java.io.File, int)
    {
        android.os.storage.StorageManager r0;
        java.io.File r1;
        int i0, $i1, $i7, $i8, $i9;
        android.content.ContentResolver $r2, $r3;
        long $l2, $l3, $l4, $l5, $l6, $l10, l11, l12;

        r0 := @this: android.os.storage.StorageManager;

        r1 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        $r2 = r0.<android.os.storage.StorageManager: android.content.ContentResolver mResolver>;

        $i1 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r2, "sys_storage_cache_percentage", 10);

        l11 = (long) $i1;

        $l2 = virtualinvoke r1.<java.io.File: long getTotalSpace()>();

        $l3 = $l2 * l11;

        $l5 = $l3 / 100L;

        $r3 = r0.<android.os.storage.StorageManager: android.content.ContentResolver mResolver>;

        $l4 = <android.os.storage.StorageManager: long DEFAULT_CACHE_MAX_BYTES>;

        $l6 = staticinvoke <android.provider.Settings$Global: long getLong(android.content.ContentResolver,java.lang.String,long)>($r3, "sys_storage_cache_max_bytes", $l4);

        l12 = staticinvoke <java.lang.Math: long min(long,long)>($l5, $l6);

        $i7 = i0 & 1;

        if $i7 == 0 goto label1;

        return 0L;

     label1:
        $i8 = i0 & 2;

        if $i8 == 0 goto label2;

        return 0L;

     label2:
        $i9 = i0 & 4;

        if $i9 == 0 goto label3;

        $l10 = l12 / 2L;

        return $l10;

     label3:
        return l12;
    }

    public long getStorageFullBytes(java.io.File)
    {
        android.os.storage.StorageManager r0;
        java.io.File r1;
        long $l0, $l1;
        android.content.ContentResolver $r2;

        r0 := @this: android.os.storage.StorageManager;

        r1 := @parameter0: java.io.File;

        $r2 = r0.<android.os.storage.StorageManager: android.content.ContentResolver mResolver>;

        $l0 = <android.os.storage.StorageManager: long DEFAULT_FULL_THRESHOLD_BYTES>;

        $l1 = staticinvoke <android.provider.Settings$Global: long getLong(android.content.ContentResolver,java.lang.String,long)>($r2, "sys_storage_full_threshold_bytes", $l0);

        return $l1;
    }

    public long getStorageLowBytes(java.io.File)
    {
        android.os.storage.StorageManager r0;
        java.io.File r1;
        long l0, $l2, $l3, $l4, $l5, $l6, $l7;
        android.content.ContentResolver $r2, $r3;
        int $i1;

        r0 := @this: android.os.storage.StorageManager;

        r1 := @parameter0: java.io.File;

        $r2 = r0.<android.os.storage.StorageManager: android.content.ContentResolver mResolver>;

        $i1 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r2, "sys_storage_threshold_percentage", 5);

        l0 = (long) $i1;

        $l2 = virtualinvoke r1.<java.io.File: long getTotalSpace()>();

        $l3 = $l2 * l0;

        $l5 = $l3 / 100L;

        $r3 = r0.<android.os.storage.StorageManager: android.content.ContentResolver mResolver>;

        $l4 = <android.os.storage.StorageManager: long DEFAULT_THRESHOLD_MAX_BYTES>;

        $l6 = staticinvoke <android.provider.Settings$Global: long getLong(android.content.ContentResolver,java.lang.String,long)>($r3, "sys_storage_threshold_max_bytes", $l4);

        $l7 = staticinvoke <java.lang.Math: long min(long,long)>($l5, $l6);

        return $l7;
    }

    public android.os.storage.StorageVolume getStorageVolume(android.net.Uri)
    {
        android.os.storage.StorageManager r0;
        boolean z0, $z1, $z2, $z3, $z4;
        android.os.storage.StorageVolume $r1, r22;
        java.util.List $r2;
        java.lang.StringBuilder $r3;
        java.lang.IllegalStateException $r6;
        java.lang.String $r7, $r9, r16, r17;
        java.lang.Object $r8;
        android.content.Context $r10;
        android.content.ContentResolver $r11;
        java.lang.String[] $r12;
        java.lang.Throwable $r13, $r14;
        android.net.Uri r15;
        byte b0;
        android.database.Cursor r18;
        int $i1;
        java.util.Iterator r21;

        r0 := @this: android.os.storage.StorageManager;

        r15 := @parameter0: android.net.Uri;

        r16 = staticinvoke <android.provider.MediaStore: java.lang.String getVolumeName(android.net.Uri)>(r15);

        z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r16, "external");

        b0 = 0;

        r17 = r16;

        if z0 == 0 goto label08;

        $r10 = r0.<android.os.storage.StorageManager: android.content.Context mContext>;

        $r11 = virtualinvoke $r10.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r12 = newarray (java.lang.String)[1];

        $r12[0] = "volume_name";

        r18 = virtualinvoke $r11.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],android.os.Bundle,android.os.CancellationSignal)>(r15, $r12, null, null);

     label01:
        $z4 = interfaceinvoke r18.<android.database.Cursor: boolean moveToFirst()>();

        if $z4 == 0 goto label02;

        r16 = interfaceinvoke r18.<android.database.Cursor: java.lang.String getString(int)>(0);

     label02:
        r17 = r16;

        if r18 == null goto label08;

        interfaceinvoke r18.<android.database.Cursor: void close()>();

        r17 = r16;

        goto label08;

     label03:
        $r13 := @caughtexception;

        if r18 == null goto label07;

     label04:
        interfaceinvoke r18.<android.database.Cursor: void close()>();

     label05:
        goto label07;

     label06:
        $r14 := @caughtexception;

        virtualinvoke $r13.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r14);

     label07:
        throw $r13;

     label08:
        $i1 = virtualinvoke r17.<java.lang.String: int hashCode()>();

        if $i1 == -1921573490 goto label10;

     label09:
        goto label11;

     label10:
        $z1 = virtualinvoke r17.<java.lang.String: boolean equals(java.lang.Object)>("external_primary");

        if $z1 == 0 goto label09;

        goto label12;

     label11:
        b0 = -1;

     label12:
        if b0 == 0 goto label16;

        $r2 = virtualinvoke r0.<android.os.storage.StorageManager: java.util.List getStorageVolumes()>();

        r21 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label13:
        $z2 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label15;

        $r8 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>();

        r22 = (android.os.storage.StorageVolume) $r8;

        $r9 = virtualinvoke r22.<android.os.storage.StorageVolume: java.lang.String getMediaStoreVolumeName()>();

        $z3 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r9, r17);

        if $z3 == 0 goto label14;

        return r22;

     label14:
        goto label13;

     label15:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown volume for ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r15);

        $r6 = new java.lang.IllegalStateException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label16:
        $r1 = virtualinvoke r0.<android.os.storage.StorageManager: android.os.storage.StorageVolume getPrimaryStorageVolume()>();

        return $r1;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label04 to label05 with label06;
    }

    public android.os.storage.StorageVolume getStorageVolume(java.io.File)
    {
        android.os.storage.StorageManager r0;
        java.io.File r1;
        android.os.storage.StorageVolume[] $r2;
        android.os.storage.StorageVolume $r3;

        r0 := @this: android.os.storage.StorageManager;

        r1 := @parameter0: java.io.File;

        $r2 = virtualinvoke r0.<android.os.storage.StorageManager: android.os.storage.StorageVolume[] getVolumeList()>();

        $r3 = staticinvoke <android.os.storage.StorageManager: android.os.storage.StorageVolume getStorageVolume(android.os.storage.StorageVolume[],java.io.File)>($r2, r1);

        return $r3;
    }

    public java.util.List getStorageVolumes()
    {
        android.os.storage.StorageManager r0;
        java.util.ArrayList $r2;
        android.content.Context $r3;
        int $i0;
        android.os.storage.StorageVolume[] $r4;

        r0 := @this: android.os.storage.StorageManager;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = r0.<android.os.storage.StorageManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r3.<android.content.Context: int getUserId()>();

        $r4 = staticinvoke <android.os.storage.StorageManager: android.os.storage.StorageVolume[] getVolumeList(int,int)>($i0, 1536);

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r2, $r4);

        return $r2;
    }

    public java.util.UUID getUuidForPath(java.io.File) throws java.io.IOException
    {
        android.os.storage.StorageManager r0;
        int i0, i1, $i2, i3;
        java.io.File $r2, r16;
        java.lang.String $r3, $r8, $r9, $r10, $r11, r17;
        boolean $z0, $z1;
        java.lang.StringBuilder $r4;
        java.io.FileNotFoundException $r7;
        java.util.UUID $r12, r21;
        java.lang.Throwable $r13;
        android.os.RemoteException $r14;
        java.lang.RuntimeException $r15;
        android.os.storage.IStorageManager r18;
        android.os.storage.VolumeInfo[] r19;
        android.os.storage.VolumeInfo r20;

        r0 := @this: android.os.storage.StorageManager;

        r16 := @parameter0: java.io.File;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r16);

        r17 = virtualinvoke r16.<java.io.File: java.lang.String getCanonicalPath()>();

        $r2 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        $r3 = virtualinvoke $r2.<java.io.File: java.lang.String getAbsolutePath()>();

        $z0 = staticinvoke <android.os.FileUtils: boolean contains(java.lang.String,java.lang.String)>($r3, r17);

        if $z0 == 0 goto label01;

        $r12 = <android.os.storage.StorageManager: java.util.UUID UUID_DEFAULT>;

        return $r12;

     label01:
        r18 = r0.<android.os.storage.StorageManager: android.os.storage.IStorageManager mStorageManager>;

     label02:
        i3 = 0;

     label03:
        r19 = interfaceinvoke r18.<android.os.storage.IStorageManager: android.os.storage.VolumeInfo[] getVolumes(int)>(0);

        i0 = lengthof r19;

     label04:
        if i3 >= i0 goto label11;

        r20 = r19[i3];

     label05:
        $r9 = r20.<android.os.storage.VolumeInfo: java.lang.String path>;

        if $r9 == null goto label10;

        $r10 = r20.<android.os.storage.VolumeInfo: java.lang.String path>;

        $z1 = staticinvoke <android.os.FileUtils: boolean contains(java.lang.String,java.lang.String)>($r10, r17);

        if $z1 == 0 goto label10;

        $i2 = r20.<android.os.storage.VolumeInfo: int type>;

        if $i2 == 0 goto label10;

        i1 = r20.<android.os.storage.VolumeInfo: int type>;

     label06:
        if i1 == 5 goto label10;

     label07:
        $r11 = r20.<android.os.storage.VolumeInfo: java.lang.String fsUuid>;

        r21 = staticinvoke <android.os.storage.StorageManager: java.util.UUID convert(java.lang.String)>($r11);

     label08:
        return r21;

     label09:
        $r13 := @caughtexception;

     label10:
        i3 = i3 + 1;

        goto label04;

     label11:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to find a storage device for ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r16);

        $r7 = new java.io.FileNotFoundException;

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label12:
        $r14 := @caughtexception;

        $r15 = virtualinvoke $r14.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r15;

        catch android.os.RemoteException from label01 to label02 with label12;
        catch android.os.RemoteException from label03 to label04 with label12;
        catch android.os.RemoteException from label05 to label06 with label12;
        catch java.lang.IllegalArgumentException from label07 to label08 with label09;
        catch android.os.RemoteException from label07 to label08 with label12;
    }

    public android.os.storage.StorageVolume[] getVolumeList()
    {
        android.os.storage.StorageManager r0;
        android.content.Context $r1;
        int $i0;
        android.os.storage.StorageVolume[] $r2;

        r0 := @this: android.os.storage.StorageManager;

        $r1 = r0.<android.os.storage.StorageManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r1.<android.content.Context: int getUserId()>();

        $r2 = staticinvoke <android.os.storage.StorageManager: android.os.storage.StorageVolume[] getVolumeList(int,int)>($i0, 0);

        return $r2;
    }

    public java.lang.String[] getVolumePaths()
    {
        android.os.storage.StorageManager r0;
        android.os.storage.StorageVolume[] r1;
        int i0, i1;
        java.lang.String[] r2;
        android.os.storage.StorageVolume $r3;
        java.lang.String $r4;

        r0 := @this: android.os.storage.StorageManager;

        r1 = virtualinvoke r0.<android.os.storage.StorageManager: android.os.storage.StorageVolume[] getVolumeList()>();

        i0 = lengthof r1;

        r2 = newarray (java.lang.String)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r3 = r1[i1];

        $r4 = virtualinvoke $r3.<android.os.storage.StorageVolume: java.lang.String getPath()>();

        r2[i1] = $r4;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r2;
    }

    public java.util.List getVolumeRecords()
    {
        android.os.storage.StorageManager r0;
        android.os.storage.IStorageManager $r1;
        android.os.storage.VolumeRecord[] $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.util.List r5;

        r0 := @this: android.os.storage.StorageManager;

     label1:
        $r1 = r0.<android.os.storage.StorageManager: android.os.storage.IStorageManager mStorageManager>;

        $r2 = interfaceinvoke $r1.<android.os.storage.IStorageManager: android.os.storage.VolumeRecord[] getVolumeRecords(int)>(0);

        r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

     label2:
        return r5;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getVolumeState(java.lang.String)
    {
        android.os.storage.StorageManager r0;
        java.io.File $r1;
        java.lang.String $r2, r3;
        android.os.storage.StorageVolume r4;

        r0 := @this: android.os.storage.StorageManager;

        r3 := @parameter0: java.lang.String;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>(r3);

        r4 = virtualinvoke r0.<android.os.storage.StorageManager: android.os.storage.StorageVolume getStorageVolume(java.io.File)>($r1);

        if r4 == null goto label1;

        $r2 = virtualinvoke r4.<android.os.storage.StorageVolume: java.lang.String getState()>();

        return $r2;

     label1:
        return "unknown";
    }

    public java.util.List getVolumes()
    {
        android.os.storage.StorageManager r0;
        android.os.storage.IStorageManager $r1;
        android.os.storage.VolumeInfo[] $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.util.List r5;

        r0 := @this: android.os.storage.StorageManager;

     label1:
        $r1 = r0.<android.os.storage.StorageManager: android.os.storage.IStorageManager mStorageManager>;

        $r2 = interfaceinvoke $r1.<android.os.storage.IStorageManager: android.os.storage.VolumeInfo[] getVolumes(int)>(0);

        r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

     label2:
        return r5;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getWritablePrivateVolumes()
    {
        android.os.storage.StorageManager r0;
        android.os.storage.VolumeInfo[] r1;
        int i0, $i1, i2;
        boolean $z0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.util.ArrayList r4;
        android.os.storage.IStorageManager r5;
        android.os.storage.VolumeInfo r6;

        r0 := @this: android.os.storage.StorageManager;

     label1:
        r4 = new java.util.ArrayList;

        specialinvoke r4.<java.util.ArrayList: void <init>()>();

        r5 = r0.<android.os.storage.StorageManager: android.os.storage.IStorageManager mStorageManager>;

     label2:
        i2 = 0;

     label3:
        r1 = interfaceinvoke r5.<android.os.storage.IStorageManager: android.os.storage.VolumeInfo[] getVolumes(int)>(0);

        i0 = lengthof r1;

     label4:
        if i2 >= i0 goto label7;

        r6 = r1[i2];

     label5:
        $i1 = virtualinvoke r6.<android.os.storage.VolumeInfo: int getType()>();

        if $i1 != 1 goto label6;

        $z0 = virtualinvoke r6.<android.os.storage.VolumeInfo: boolean isMountedWritable()>();

        if $z0 == 0 goto label6;

        virtualinvoke r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

     label6:
        i2 = i2 + 1;

        goto label4;

     label7:
        return r4;

     label8:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label8;
        catch android.os.RemoteException from label3 to label4 with label8;
        catch android.os.RemoteException from label5 to label6 with label8;
    }

    public boolean isAllocationSupported(java.io.FileDescriptor)
    {
        android.os.storage.StorageManager r0;
        java.io.File $r1;
        java.lang.Throwable $r3;
        java.io.FileDescriptor r4;

        r0 := @this: android.os.storage.StorageManager;

        r4 := @parameter0: java.io.FileDescriptor;

     label1:
        $r1 = staticinvoke <android.os.ParcelFileDescriptor: java.io.File getFile(java.io.FileDescriptor)>(r4);

        virtualinvoke r0.<android.os.storage.StorageManager: java.util.UUID getUuidForPath(java.io.File)>($r1);

     label2:
        return 1;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public boolean isCacheBehaviorGroup(java.io.File) throws java.io.IOException
    {
        android.os.storage.StorageManager r0;
        java.io.File r1;
        boolean $z0;

        r0 := @this: android.os.storage.StorageManager;

        r1 := @parameter0: java.io.File;

        $z0 = staticinvoke <android.os.storage.StorageManager: boolean isCacheBehavior(java.io.File,java.lang.String)>(r1, "user.cache_group");

        return $z0;
    }

    public boolean isCacheBehaviorTombstone(java.io.File) throws java.io.IOException
    {
        android.os.storage.StorageManager r0;
        java.io.File r1;
        boolean $z0;

        r0 := @this: android.os.storage.StorageManager;

        r1 := @parameter0: java.io.File;

        $z0 = staticinvoke <android.os.storage.StorageManager: boolean isCacheBehavior(java.io.File,java.lang.String)>(r1, "user.cache_tombstone");

        return $z0;
    }

    public boolean isCheckpointSupported()
    {
        android.os.storage.StorageManager r0;
        boolean z0;
        android.os.storage.IStorageManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.os.storage.StorageManager;

     label1:
        $r2 = r0.<android.os.storage.StorageManager: android.os.storage.IStorageManager mStorageManager>;

        z0 = interfaceinvoke $r2.<android.os.storage.IStorageManager: boolean supportsCheckpoint()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isEncrypted(java.io.File)
    {
        android.os.storage.StorageManager r0;
        java.io.File r1, $r2, $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: android.os.storage.StorageManager;

        r1 := @parameter0: java.io.File;

        $r2 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        $z0 = staticinvoke <android.os.FileUtils: boolean contains(java.io.File,java.io.File)>($r2, r1);

        if $z0 == 0 goto label1;

        $z2 = staticinvoke <android.os.storage.StorageManager: boolean isEncrypted()>();

        return $z2;

     label1:
        $r3 = staticinvoke <android.os.Environment: java.io.File getExpandDirectory()>();

        $z1 = staticinvoke <android.os.FileUtils: boolean contains(java.io.File,java.io.File)>($r3, r1);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public boolean isObbMounted(java.lang.String)
    {
        android.os.storage.StorageManager r0;
        boolean z0;
        android.os.storage.IStorageManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;

        r0 := @this: android.os.storage.StorageManager;

        r5 := @parameter0: java.lang.String;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r5, "rawPath cannot be null");

     label1:
        $r2 = r0.<android.os.storage.StorageManager: android.os.storage.IStorageManager mStorageManager>;

        z0 = interfaceinvoke $r2.<android.os.storage.IStorageManager: boolean isObbMounted(java.lang.String)>(r5);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isUsbMassStorageConnected()
    {
        android.os.storage.StorageManager r0;

        r0 := @this: android.os.storage.StorageManager;

        return 0;
    }

    public boolean isUsbMassStorageEnabled()
    {
        android.os.storage.StorageManager r0;

        r0 := @this: android.os.storage.StorageManager;

        return 0;
    }

    public void lockUserKey(int)
    {
        android.os.storage.StorageManager r0;
        int i0;
        android.os.storage.IStorageManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.os.storage.StorageManager;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<android.os.storage.StorageManager: android.os.storage.IStorageManager mStorageManager>;

        interfaceinvoke $r2.<android.os.storage.IStorageManager: void lockUserKey(int)>(i0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void mkdirs(java.io.File)
    {
        android.os.storage.StorageManager r0;
        dalvik.system.BlockGuard$VmPolicy $r1;
        java.lang.String $r2, $r5, $r6;
        android.content.Context $r3;
        android.os.storage.IStorageManager $r4;
        android.os.RemoteException $r7;
        java.lang.RuntimeException $r8;
        java.io.File r9;

        r0 := @this: android.os.storage.StorageManager;

        r9 := @parameter0: java.io.File;

        $r1 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$VmPolicy getVmPolicy()>();

        $r2 = virtualinvoke r9.<java.io.File: java.lang.String getAbsolutePath()>();

        interfaceinvoke $r1.<dalvik.system.BlockGuard$VmPolicy: void onPathAccess(java.lang.String)>($r2);

     label1:
        $r4 = r0.<android.os.storage.StorageManager: android.os.storage.IStorageManager mStorageManager>;

        $r3 = r0.<android.os.storage.StorageManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r3.<android.content.Context: java.lang.String getOpPackageName()>();

        $r6 = virtualinvoke r9.<java.io.File: java.lang.String getAbsolutePath()>();

        interfaceinvoke $r4.<android.os.storage.IStorageManager: void mkdirs(java.lang.String,java.lang.String)>($r5, $r6);

     label2:
        return;

     label3:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r8;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void mount(java.lang.String)
    {
        android.os.storage.StorageManager r0;
        android.os.storage.IStorageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.os.storage.StorageManager;

        r4 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<android.os.storage.StorageManager: android.os.storage.IStorageManager mStorageManager>;

        interfaceinvoke $r1.<android.os.storage.IStorageManager: void mount(java.lang.String)>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean mountObb(java.lang.String, java.lang.String, android.os.storage.OnObbStateChangeListener)
    {
        android.os.storage.StorageManager r0;
        int i0;
        android.os.storage.StorageManager$ObbActionListener $r3, $r5;
        android.os.storage.IStorageManager $r4;
        android.content.res.ObbInfo $r6;
        android.os.RemoteException $r7;
        java.lang.RuntimeException $r8;
        java.lang.Throwable $r9;
        java.lang.StringBuilder $r10;
        java.lang.IllegalArgumentException $r13;
        java.lang.String $r14, r15, r16, r19;
        android.os.storage.OnObbStateChangeListener r17;
        java.io.File r18;

        r0 := @this: android.os.storage.StorageManager;

        r15 := @parameter0: java.lang.String;

        r16 := @parameter1: java.lang.String;

        r17 := @parameter2: android.os.storage.OnObbStateChangeListener;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r15, "rawPath cannot be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r17, "listener cannot be null");

     label1:
        r18 = new java.io.File;

        specialinvoke r18.<java.io.File: void <init>(java.lang.String)>(r15);

        r19 = virtualinvoke r18.<java.io.File: java.lang.String getCanonicalPath()>();

        $r3 = r0.<android.os.storage.StorageManager: android.os.storage.StorageManager$ObbActionListener mObbActionListener>;

        i0 = virtualinvoke $r3.<android.os.storage.StorageManager$ObbActionListener: int addListener(android.os.storage.OnObbStateChangeListener)>(r17);

        $r4 = r0.<android.os.storage.StorageManager: android.os.storage.IStorageManager mStorageManager>;

        $r5 = r0.<android.os.storage.StorageManager: android.os.storage.StorageManager$ObbActionListener mObbActionListener>;

        $r6 = specialinvoke r0.<android.os.storage.StorageManager: android.content.res.ObbInfo getObbInfo(java.lang.String)>(r19);

        interfaceinvoke $r4.<android.os.storage.IStorageManager: void mountObb(java.lang.String,java.lang.String,java.lang.String,android.os.storage.IObbActionListener,int,android.content.res.ObbInfo)>(r15, r19, r16, $r5, i0, $r6);

     label2:
        return 1;

     label3:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r8;

     label4:
        $r9 := @caughtexception;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to resolve path: ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        $r13 = new java.lang.IllegalArgumentException;

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r14, $r9);

        throw $r13;

        catch java.io.IOException from label1 to label2 with label4;
        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.os.ParcelFileDescriptor openProxyFileDescriptor(int, android.os.ProxyFileDescriptorCallback) throws java.io.IOException
    {
        android.os.storage.StorageManager r0;
        int i0;
        android.os.ProxyFileDescriptorCallback r1;
        android.os.ParcelFileDescriptor $r2;

        r0 := @this: android.os.storage.StorageManager;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.ProxyFileDescriptorCallback;

        $r2 = virtualinvoke r0.<android.os.storage.StorageManager: android.os.ParcelFileDescriptor openProxyFileDescriptor(int,android.os.ProxyFileDescriptorCallback,android.os.Handler,java.util.concurrent.ThreadFactory)>(i0, r1, null, null);

        return $r2;
    }

    public android.os.ParcelFileDescriptor openProxyFileDescriptor(int, android.os.ProxyFileDescriptorCallback, android.os.Handler) throws java.io.IOException
    {
        android.os.storage.StorageManager r0;
        int i0;
        android.os.ProxyFileDescriptorCallback r1;
        android.os.Handler r2;
        android.os.ParcelFileDescriptor $r4;

        r0 := @this: android.os.storage.StorageManager;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.ProxyFileDescriptorCallback;

        r2 := @parameter2: android.os.Handler;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r4 = virtualinvoke r0.<android.os.storage.StorageManager: android.os.ParcelFileDescriptor openProxyFileDescriptor(int,android.os.ProxyFileDescriptorCallback,android.os.Handler,java.util.concurrent.ThreadFactory)>(i0, r1, r2, null);

        return $r4;
    }

    public android.os.ParcelFileDescriptor openProxyFileDescriptor(int, android.os.ProxyFileDescriptorCallback, android.os.Handler, java.util.concurrent.ThreadFactory) throws java.io.IOException
    {
        android.os.storage.StorageManager r0;
        int i0, i1, $i2, $i3, $i4;
        java.util.concurrent.ThreadFactory r1;
        java.lang.Object r2;
        com.android.internal.os.AppFuseMount r3;
        android.content.Context $r5;
        com.android.internal.os.FuseAppLoop $r6, $r7, $r8, $r10, $r11, r22;
        android.os.storage.IStorageManager $r9, $r13;
        android.os.Looper $r12;
        android.os.ParcelFileDescriptor $r14, r25;
        java.lang.Throwable $r15;
        com.android.internal.os.FuseUnavailableMountException $r16, r26;
        android.os.RemoteException $r17;
        java.io.IOException $r18, r23, r28;
        android.os.ProxyFileDescriptorCallback r19;
        android.os.Handler r20, r21, r24;
        boolean z0;

        r0 := @this: android.os.storage.StorageManager;

        i0 := @parameter0: int;

        r19 := @parameter1: android.os.ProxyFileDescriptorCallback;

        r20 := @parameter2: android.os.Handler;

        r1 := @parameter3: java.util.concurrent.ThreadFactory;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r19);

        $r5 = r0.<android.os.storage.StorageManager: android.content.Context mContext>;

        staticinvoke <com.android.internal.logging.MetricsLogger: void count(android.content.Context,java.lang.String,int)>($r5, "storage_open_proxy_file_descriptor", 1);

        r21 = r20;

     label01:
        r2 = r0.<android.os.storage.StorageManager: java.lang.Object mFuseAppLoopLock>;

        entermonitor r2;

     label02:
        z0 = 0;

     label03:
        $r6 = r0.<android.os.storage.StorageManager: com.android.internal.os.FuseAppLoop mFuseAppLoop>;

        if $r6 != null goto label08;

        $r13 = r0.<android.os.storage.StorageManager: android.os.storage.IStorageManager mStorageManager>;

        r3 = interfaceinvoke $r13.<android.os.storage.IStorageManager: com.android.internal.os.AppFuseMount mountProxyFileDescriptorBridge()>();

     label04:
        if r3 == null goto label07;

     label05:
        r22 = new com.android.internal.os.FuseAppLoop;

        $i4 = r3.<com.android.internal.os.AppFuseMount: int mountPointId>;

        $r14 = r3.<com.android.internal.os.AppFuseMount: android.os.ParcelFileDescriptor fd>;

        specialinvoke r22.<com.android.internal.os.FuseAppLoop: void <init>(int,android.os.ParcelFileDescriptor,java.util.concurrent.ThreadFactory)>($i4, $r14, r1);

        r0.<android.os.storage.StorageManager: com.android.internal.os.FuseAppLoop mFuseAppLoop> = r22;

     label06:
        z0 = 1;

        goto label08;

     label07:
        r23 = new java.io.IOException;

        specialinvoke r23.<java.io.IOException: void <init>(java.lang.String)>("Failed to mount proxy bridge");

        throw r23;

     label08:
        r24 = r21;

        if r21 != null goto label10;

     label09:
        r24 = new android.os.Handler;

        $r12 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke r24.<android.os.Handler: void <init>(android.os.Looper)>($r12);

     label10:
        $r7 = r0.<android.os.storage.StorageManager: com.android.internal.os.FuseAppLoop mFuseAppLoop>;

        i1 = virtualinvoke $r7.<com.android.internal.os.FuseAppLoop: int registerCallback(android.os.ProxyFileDescriptorCallback,android.os.Handler)>(r19, r24);

        $r9 = r0.<android.os.storage.StorageManager: android.os.storage.IStorageManager mStorageManager>;

        $r8 = r0.<android.os.storage.StorageManager: com.android.internal.os.FuseAppLoop mFuseAppLoop>;

        $i2 = virtualinvoke $r8.<com.android.internal.os.FuseAppLoop: int getMountPointId()>();

        r25 = interfaceinvoke $r9.<android.os.storage.IStorageManager: android.os.ParcelFileDescriptor openProxyFileDescriptor(int,int,int)>($i2, i1, i0);

     label11:
        if r25 == null goto label14;

     label12:
        exitmonitor r2;

     label13:
        return r25;

     label14:
        $r10 = r0.<android.os.storage.StorageManager: com.android.internal.os.FuseAppLoop mFuseAppLoop>;

        virtualinvoke $r10.<com.android.internal.os.FuseAppLoop: void unregisterCallback(int)>(i1);

        r26 = new com.android.internal.os.FuseUnavailableMountException;

        $r11 = r0.<android.os.storage.StorageManager: com.android.internal.os.FuseAppLoop mFuseAppLoop>;

        $i3 = virtualinvoke $r11.<com.android.internal.os.FuseAppLoop: int getMountPointId()>();

        specialinvoke r26.<com.android.internal.os.FuseUnavailableMountException: void <init>(int)>($i3);

        throw r26;

     label15:
        $r16 := @caughtexception;

        if z0 != 0 goto label18;

     label16:
        r0.<android.os.storage.StorageManager: com.android.internal.os.FuseAppLoop mFuseAppLoop> = null;

        exitmonitor r2;

     label17:
        r21 = r24;

        goto label01;

     label18:
        r28 = new java.io.IOException;

        specialinvoke r28.<java.io.IOException: void <init>(java.lang.Throwable)>($r16);

        throw r28;

     label19:
        $r15 := @caughtexception;

     label20:
        exitmonitor r2;

     label21:
        throw $r15;

     label22:
        $r17 := @caughtexception;

        $r18 = new java.io.IOException;

        specialinvoke $r18.<java.io.IOException: void <init>(java.lang.Throwable)>($r17);

        throw $r18;

        catch android.os.RemoteException from label01 to label02 with label22;
        catch java.lang.Throwable from label03 to label04 with label19;
        catch java.lang.Throwable from label05 to label06 with label19;
        catch java.lang.Throwable from label07 to label08 with label19;
        catch java.lang.Throwable from label09 to label10 with label19;
        catch com.android.internal.os.FuseUnavailableMountException from label10 to label11 with label15;
        catch java.lang.Throwable from label10 to label11 with label19;
        catch java.lang.Throwable from label12 to label13 with label19;
        catch com.android.internal.os.FuseUnavailableMountException from label14 to label15 with label15;
        catch java.lang.Throwable from label14 to label15 with label19;
        catch java.lang.Throwable from label16 to label17 with label19;
        catch java.lang.Throwable from label18 to label19 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
        catch android.os.RemoteException from label21 to label22 with label22;
    }

    public void partitionMixed(java.lang.String, int)
    {
        android.os.storage.StorageManager r0;
        int i0;
        android.os.storage.IStorageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.os.storage.StorageManager;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r1 = r0.<android.os.storage.StorageManager: android.os.storage.IStorageManager mStorageManager>;

        interfaceinvoke $r1.<android.os.storage.IStorageManager: void partitionMixed(java.lang.String,int)>(r4, i0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void partitionPrivate(java.lang.String)
    {
        android.os.storage.StorageManager r0;
        android.os.storage.IStorageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.os.storage.StorageManager;

        r4 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<android.os.storage.StorageManager: android.os.storage.IStorageManager mStorageManager>;

        interfaceinvoke $r1.<android.os.storage.IStorageManager: void partitionPrivate(java.lang.String)>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void partitionPublic(java.lang.String)
    {
        android.os.storage.StorageManager r0;
        android.os.storage.IStorageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.os.storage.StorageManager;

        r4 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<android.os.storage.StorageManager: android.os.storage.IStorageManager mStorageManager>;

        interfaceinvoke $r1.<android.os.storage.IStorageManager: void partitionPublic(java.lang.String)>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void prepareUserStorage(java.lang.String, int, int, int)
    {
        android.os.storage.StorageManager r0;
        int i0, i1, i2;
        android.os.storage.IStorageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.os.storage.StorageManager;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

     label1:
        $r1 = r0.<android.os.storage.StorageManager: android.os.storage.IStorageManager mStorageManager>;

        interfaceinvoke $r1.<android.os.storage.IStorageManager: void prepareUserStorage(java.lang.String,int,int,int)>(r4, i0, i1, i2);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void registerListener(android.os.storage.StorageEventListener)
    {
        android.os.storage.StorageManager r0;
        java.util.ArrayList r1, $r7;
        android.os.storage.StorageManager$StorageEventListenerDelegate r2;
        java.util.concurrent.Executor r3;
        android.os.storage.StorageManager$StorageVolumeCallback r4;
        android.content.Context $r5;
        android.os.storage.IStorageManager $r6;
        android.os.RemoteException $r8;
        java.lang.RuntimeException $r9;
        java.lang.Throwable $r10;
        android.os.storage.StorageEventListener r11;

        r0 := @this: android.os.storage.StorageManager;

        r11 := @parameter0: android.os.storage.StorageEventListener;

        r1 = r0.<android.os.storage.StorageManager: java.util.ArrayList mDelegates>;

        entermonitor r1;

     label01:
        r2 = new android.os.storage.StorageManager$StorageEventListenerDelegate;

        $r5 = r0.<android.os.storage.StorageManager: android.content.Context mContext>;

        r3 = virtualinvoke $r5.<android.content.Context: java.util.concurrent.Executor getMainExecutor()>();

        r4 = new android.os.storage.StorageManager$StorageVolumeCallback;

        specialinvoke r4.<android.os.storage.StorageManager$StorageVolumeCallback: void <init>()>();

        specialinvoke r2.<android.os.storage.StorageManager$StorageEventListenerDelegate: void <init>(android.os.storage.StorageManager,java.util.concurrent.Executor,android.os.storage.StorageEventListener,android.os.storage.StorageManager$StorageVolumeCallback)>(r0, r3, r11, r4);

     label02:
        $r6 = r0.<android.os.storage.StorageManager: android.os.storage.IStorageManager mStorageManager>;

        interfaceinvoke $r6.<android.os.storage.IStorageManager: void registerListener(android.os.storage.IStorageEventListener)>(r2);

     label03:
        $r7 = r0.<android.os.storage.StorageManager: java.util.ArrayList mDelegates>;

        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

     label04:
        exitmonitor r1;

     label05:
        return;

     label06:
        $r8 := @caughtexception;

     label07:
        $r9 = virtualinvoke $r8.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r9;

     label08:
        $r10 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch android.os.RemoteException from label02 to label03 with label06;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void registerStorageVolumeCallback(java.util.concurrent.Executor, android.os.storage.StorageManager$StorageVolumeCallback)
    {
        android.os.storage.StorageManager r0;
        android.os.storage.StorageManager$StorageVolumeCallback r1;
        java.util.ArrayList r2, $r6;
        android.os.storage.StorageManager$StorageEventListenerDelegate r3;
        android.os.storage.StorageEventListener r4;
        android.os.storage.IStorageManager $r5;
        java.lang.Throwable $r7;
        android.os.RemoteException $r8;
        java.lang.RuntimeException $r9;
        java.util.concurrent.Executor r10;

        r0 := @this: android.os.storage.StorageManager;

        r10 := @parameter0: java.util.concurrent.Executor;

        r1 := @parameter1: android.os.storage.StorageManager$StorageVolumeCallback;

        r2 = r0.<android.os.storage.StorageManager: java.util.ArrayList mDelegates>;

        entermonitor r2;

     label01:
        r3 = new android.os.storage.StorageManager$StorageEventListenerDelegate;

        r4 = new android.os.storage.StorageEventListener;

        specialinvoke r4.<android.os.storage.StorageEventListener: void <init>()>();

        specialinvoke r3.<android.os.storage.StorageManager$StorageEventListenerDelegate: void <init>(android.os.storage.StorageManager,java.util.concurrent.Executor,android.os.storage.StorageEventListener,android.os.storage.StorageManager$StorageVolumeCallback)>(r0, r10, r4, r1);

     label02:
        $r5 = r0.<android.os.storage.StorageManager: android.os.storage.IStorageManager mStorageManager>;

        interfaceinvoke $r5.<android.os.storage.IStorageManager: void registerListener(android.os.storage.IStorageEventListener)>(r3);

     label03:
        $r6 = r0.<android.os.storage.StorageManager: java.util.ArrayList mDelegates>;

        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

     label04:
        exitmonitor r2;

     label05:
        return;

     label06:
        $r8 := @caughtexception;

     label07:
        $r9 = virtualinvoke $r8.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r9;

     label08:
        $r7 := @caughtexception;

     label09:
        exitmonitor r2;

     label10:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch android.os.RemoteException from label02 to label03 with label06;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void setCacheBehaviorGroup(java.io.File, boolean) throws java.io.IOException
    {
        android.os.storage.StorageManager r0;
        java.io.File r1;
        boolean z0;

        r0 := @this: android.os.storage.StorageManager;

        r1 := @parameter0: java.io.File;

        z0 := @parameter1: boolean;

        staticinvoke <android.os.storage.StorageManager: void setCacheBehavior(java.io.File,java.lang.String,boolean)>(r1, "user.cache_group", z0);

        return;
    }

    public void setCacheBehaviorTombstone(java.io.File, boolean) throws java.io.IOException
    {
        android.os.storage.StorageManager r0;
        java.io.File r1;
        boolean z0;

        r0 := @this: android.os.storage.StorageManager;

        r1 := @parameter0: java.io.File;

        z0 := @parameter1: boolean;

        staticinvoke <android.os.storage.StorageManager: void setCacheBehavior(java.io.File,java.lang.String,boolean)>(r1, "user.cache_tombstone", z0);

        return;
    }

    public void setPrimaryStorageUuid(java.lang.String, android.content.pm.IPackageMoveObserver)
    {
        android.os.storage.StorageManager r0;
        android.content.pm.IPackageMoveObserver r1;
        android.os.storage.IStorageManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;

        r0 := @this: android.os.storage.StorageManager;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: android.content.pm.IPackageMoveObserver;

     label1:
        $r2 = r0.<android.os.storage.StorageManager: android.os.storage.IStorageManager mStorageManager>;

        interfaceinvoke $r2.<android.os.storage.IStorageManager: void setPrimaryStorageUuid(java.lang.String,android.content.pm.IPackageMoveObserver)>(r5, r1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setVolumeInited(java.lang.String, boolean)
    {
        android.os.storage.StorageManager r0;
        boolean z0;
        android.os.storage.IStorageManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;
        byte b0;

        r0 := @this: android.os.storage.StorageManager;

        r4 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

     label1:
        r1 = r0.<android.os.storage.StorageManager: android.os.storage.IStorageManager mStorageManager>;

     label2:
        if z0 == 0 goto label3;

        b0 = 1;

        goto label4;

     label3:
        b0 = 0;

     label4:
        interfaceinvoke r1.<android.os.storage.IStorageManager: void setVolumeUserFlags(java.lang.String,int,int)>(r4, b0, 1);

     label5:
        return;

     label6:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    public void setVolumeNickname(java.lang.String, java.lang.String)
    {
        android.os.storage.StorageManager r0;
        java.lang.String r1, r5;
        android.os.storage.IStorageManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.os.storage.StorageManager;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

     label1:
        $r2 = r0.<android.os.storage.StorageManager: android.os.storage.IStorageManager mStorageManager>;

        interfaceinvoke $r2.<android.os.storage.IStorageManager: void setVolumeNickname(java.lang.String,java.lang.String)>(r5, r1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setVolumeSnoozed(java.lang.String, boolean)
    {
        android.os.storage.StorageManager r0;
        boolean z0;
        android.os.storage.IStorageManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;
        byte b0;

        r0 := @this: android.os.storage.StorageManager;

        r4 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

     label1:
        r1 = r0.<android.os.storage.StorageManager: android.os.storage.IStorageManager mStorageManager>;

     label2:
        if z0 == 0 goto label3;

        b0 = 2;

        goto label4;

     label3:
        b0 = 0;

     label4:
        interfaceinvoke r1.<android.os.storage.IStorageManager: void setVolumeUserFlags(java.lang.String,int,int)>(r4, b0, 2);

     label5:
        return;

     label6:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    public java.io.File translateAppToSystem(java.io.File, int, int)
    {
        android.os.storage.StorageManager r0;
        java.io.File r1;
        int i0, i1;

        r0 := @this: android.os.storage.StorageManager;

        r1 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        return r1;
    }

    public java.io.File translateSystemToApp(java.io.File, int, int)
    {
        android.os.storage.StorageManager r0;
        java.io.File r1;
        int i0, i1;

        r0 := @this: android.os.storage.StorageManager;

        r1 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        return r1;
    }

    public void unlockUserKey(int, int, byte[], byte[])
    {
        android.os.storage.StorageManager r0;
        int i0, i1;
        byte[] r1, r5;
        android.os.storage.IStorageManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.os.storage.StorageManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r5 := @parameter2: byte[];

        r1 := @parameter3: byte[];

     label1:
        $r2 = r0.<android.os.storage.StorageManager: android.os.storage.IStorageManager mStorageManager>;

        interfaceinvoke $r2.<android.os.storage.IStorageManager: void unlockUserKey(int,int,byte[],byte[])>(i0, i1, r5, r1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void unmount(java.lang.String)
    {
        android.os.storage.StorageManager r0;
        android.os.storage.IStorageManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.os.storage.StorageManager;

        r4 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<android.os.storage.StorageManager: android.os.storage.IStorageManager mStorageManager>;

        interfaceinvoke $r1.<android.os.storage.IStorageManager: void unmount(java.lang.String)>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean unmountObb(java.lang.String, boolean, android.os.storage.OnObbStateChangeListener)
    {
        android.os.storage.StorageManager r0;
        boolean z0;
        android.os.storage.OnObbStateChangeListener r1;
        int i0;
        android.os.storage.StorageManager$ObbActionListener $r4, $r5;
        android.os.storage.IStorageManager $r6;
        android.os.RemoteException $r7;
        java.lang.RuntimeException $r8;
        java.lang.String r9;

        r0 := @this: android.os.storage.StorageManager;

        r9 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r1 := @parameter2: android.os.storage.OnObbStateChangeListener;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r9, "rawPath cannot be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "listener cannot be null");

     label1:
        $r4 = r0.<android.os.storage.StorageManager: android.os.storage.StorageManager$ObbActionListener mObbActionListener>;

        i0 = virtualinvoke $r4.<android.os.storage.StorageManager$ObbActionListener: int addListener(android.os.storage.OnObbStateChangeListener)>(r1);

        $r6 = r0.<android.os.storage.StorageManager: android.os.storage.IStorageManager mStorageManager>;

        $r5 = r0.<android.os.storage.StorageManager: android.os.storage.StorageManager$ObbActionListener mObbActionListener>;

        interfaceinvoke $r6.<android.os.storage.IStorageManager: void unmountObb(java.lang.String,boolean,android.os.storage.IObbActionListener,int)>(r9, z0, $r5, i0);

     label2:
        return 1;

     label3:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r8;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void unregisterListener(android.os.storage.StorageEventListener)
    {
        android.os.storage.StorageManager r0;
        java.util.ArrayList r1, $r5;
        java.util.Iterator r2;
        android.os.storage.StorageManager$StorageEventListenerDelegate r3;
        android.os.storage.StorageEventListener r4, r11;
        boolean $z0;
        java.lang.Object $r6;
        android.os.storage.IStorageManager $r7;
        java.lang.Throwable $r8;
        android.os.RemoteException $r9;
        java.lang.RuntimeException $r10;

        r0 := @this: android.os.storage.StorageManager;

        r11 := @parameter0: android.os.storage.StorageEventListener;

        r1 = r0.<android.os.storage.StorageManager: java.util.ArrayList mDelegates>;

        entermonitor r1;

     label01:
        $r5 = r0.<android.os.storage.StorageManager: java.util.ArrayList mDelegates>;

        r2 = virtualinvoke $r5.<java.util.ArrayList: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.os.storage.StorageManager$StorageEventListenerDelegate) $r6;

        r4 = r3.<android.os.storage.StorageManager$StorageEventListenerDelegate: android.os.storage.StorageEventListener mListener>;

     label03:
        if r4 != r11 goto label09;

     label04:
        $r7 = r0.<android.os.storage.StorageManager: android.os.storage.IStorageManager mStorageManager>;

        interfaceinvoke $r7.<android.os.storage.IStorageManager: void unregisterListener(android.os.storage.IStorageEventListener)>(r3);

     label05:
        interfaceinvoke r2.<java.util.Iterator: void remove()>();

     label06:
        goto label09;

     label07:
        $r9 := @caughtexception;

     label08:
        $r10 = virtualinvoke $r9.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r10;

     label09:
        goto label02;

     label10:
        exitmonitor r1;

     label11:
        return;

     label12:
        $r8 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label12;
        catch android.os.RemoteException from label04 to label05 with label07;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public void unregisterStorageVolumeCallback(android.os.storage.StorageManager$StorageVolumeCallback)
    {
        android.os.storage.StorageManager r0;
        java.util.ArrayList r1, $r5;
        java.util.Iterator r2;
        android.os.storage.StorageManager$StorageEventListenerDelegate r3;
        android.os.storage.StorageManager$StorageVolumeCallback r4, r11;
        boolean $z0;
        java.lang.Object $r6;
        android.os.storage.IStorageManager $r7;
        android.os.RemoteException $r8;
        java.lang.RuntimeException $r9;
        java.lang.Throwable $r10;

        r0 := @this: android.os.storage.StorageManager;

        r11 := @parameter0: android.os.storage.StorageManager$StorageVolumeCallback;

        r1 = r0.<android.os.storage.StorageManager: java.util.ArrayList mDelegates>;

        entermonitor r1;

     label01:
        $r5 = r0.<android.os.storage.StorageManager: java.util.ArrayList mDelegates>;

        r2 = virtualinvoke $r5.<java.util.ArrayList: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.os.storage.StorageManager$StorageEventListenerDelegate) $r6;

        r4 = r3.<android.os.storage.StorageManager$StorageEventListenerDelegate: android.os.storage.StorageManager$StorageVolumeCallback mCallback>;

     label03:
        if r4 != r11 goto label09;

     label04:
        $r7 = r0.<android.os.storage.StorageManager: android.os.storage.IStorageManager mStorageManager>;

        interfaceinvoke $r7.<android.os.storage.IStorageManager: void unregisterListener(android.os.storage.IStorageEventListener)>(r3);

     label05:
        interfaceinvoke r2.<java.util.Iterator: void remove()>();

     label06:
        goto label09;

     label07:
        $r8 := @caughtexception;

     label08:
        $r9 = virtualinvoke $r8.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r9;

     label09:
        goto label02;

     label10:
        exitmonitor r1;

     label11:
        return;

     label12:
        $r10 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label12;
        catch android.os.RemoteException from label04 to label05 with label07;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public void updateExternalStorageFileQuotaType(java.io.File, int) throws java.io.IOException
    {
        android.os.storage.StorageManager r0;
        int i0, i1;
        java.lang.String r1, $r7, $r12, $r17, $r21;
        boolean $z0, $z1;
        android.os.UserHandle $r2;
        java.lang.StringBuilder $r3, $r8, $r13, $r18;
        java.lang.IllegalStateException $r6;
        java.io.IOException $r11;
        java.lang.IllegalArgumentException $r16;
        java.io.File r22;
        android.os.storage.StorageVolume r23;
        long l3;

        r0 := @this: android.os.storage.StorageManager;

        r22 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        r1 = virtualinvoke r22.<java.io.File: java.lang.String getCanonicalPath()>();

        r23 = virtualinvoke r0.<android.os.storage.StorageManager: android.os.storage.StorageVolume getStorageVolume(java.io.File)>(r22);

        if r23 != null goto label1;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to update quota type for ");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("StorageManager", $r21);

        return;

     label1:
        $z0 = virtualinvoke r23.<android.os.storage.StorageVolume: boolean isEmulated()>();

        if $z0 != 0 goto label2;

        return;

     label2:
        $r2 = virtualinvoke r23.<android.os.storage.StorageVolume: android.os.UserHandle getOwner()>();

        i1 = virtualinvoke $r2.<android.os.UserHandle: int getIdentifier()>();

        if i1 < 0 goto label9;

        if i0 == 0 goto label6;

        if i0 == 1 goto label5;

        if i0 == 2 goto label4;

        if i0 != 3 goto label3;

        l3 = staticinvoke <android.os.storage.StorageManager: long getProjectIdForUser(int,int)>(i1, 1002);

        goto label7;

     label3:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid quota type: ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r16 = new java.lang.IllegalArgumentException;

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r16;

     label4:
        l3 = staticinvoke <android.os.storage.StorageManager: long getProjectIdForUser(int,int)>(i1, 1001);

        goto label7;

     label5:
        l3 = staticinvoke <android.os.storage.StorageManager: long getProjectIdForUser(int,int)>(i1, 1003);

        goto label7;

     label6:
        l3 = staticinvoke <android.os.storage.StorageManager: long getProjectIdForUser(int,int)>(i1, 1000);

     label7:
        $z1 = staticinvoke <android.os.storage.StorageManager: boolean setQuotaProjectId(java.lang.String,long)>(r1, l3);

        if $z1 == 0 goto label8;

        return;

     label8:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to update quota type for ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = new java.io.IOException;

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>($r12);

        throw $r11;

     label9:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to update quota type for ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = new java.lang.IllegalStateException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    public void wipeAdoptableDisks()
    {
        android.os.storage.StorageManager r0;
        java.util.Iterator r1;
        java.util.List $r3;
        boolean $z0, $z1;
        java.lang.Object $r4;
        java.lang.StringBuilder $r5, $r10, $r17;
        java.lang.String $r7, $r9, $r14, $r21, r23;
        android.os.storage.IStorageManager $r15;
        java.lang.Exception $r16;
        android.os.storage.DiskInfo r22;

        r0 := @this: android.os.storage.StorageManager;

        $r3 = virtualinvoke r0.<android.os.storage.StorageManager: java.util.List getDisks()>();

        r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r22 = (android.os.storage.DiskInfo) $r4;

        r23 = virtualinvoke r22.<android.os.storage.DiskInfo: java.lang.String getId()>();

        $z1 = virtualinvoke r22.<android.os.storage.DiskInfo: boolean isAdoptable()>();

        if $z1 == 0 goto label6;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found adoptable ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; wiping");

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("StorageManager", $r14);

     label2:
        $r15 = r0.<android.os.storage.StorageManager: android.os.storage.IStorageManager mStorageManager>;

        interfaceinvoke $r15.<android.os.storage.IStorageManager: void partitionPublic(java.lang.String)>(r23);

     label3:
        goto label5;

     label4:
        $r16 := @caughtexception;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to wipe ");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", but soldiering onward");

        $r21 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("StorageManager", $r21, $r16);

     label5:
        goto label7;

     label6:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignorning non-adoptable disk ");

        $r7 = virtualinvoke r22.<android.os.storage.DiskInfo: java.lang.String getId()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("StorageManager", $r9);

     label7:
        goto label1;

     label8:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }
}
