public class android.os.storage.VolumeInfo extends java.lang.Object implements android.os.Parcelable
{
    public static final java.lang.String ACTION_VOLUME_STATE_CHANGED;
    public static final android.os.Parcelable$Creator CREATOR;
    private static final java.lang.String DOCUMENT_AUTHORITY;
    private static final java.lang.String DOCUMENT_ROOT_PRIMARY_EMULATED;
    public static final java.lang.String EXTRA_VOLUME_ID;
    public static final java.lang.String EXTRA_VOLUME_STATE;
    public static final java.lang.String ID_EMULATED_INTERNAL;
    public static final java.lang.String ID_PRIVATE_INTERNAL;
    public static final int MOUNT_FLAG_PRIMARY;
    public static final int MOUNT_FLAG_VISIBLE;
    public static final int STATE_BAD_REMOVAL;
    public static final int STATE_CHECKING;
    public static final int STATE_EJECTING;
    public static final int STATE_FORMATTING;
    public static final int STATE_MOUNTED;
    public static final int STATE_MOUNTED_READ_ONLY;
    public static final int STATE_REMOVED;
    public static final int STATE_UNMOUNTABLE;
    public static final int STATE_UNMOUNTED;
    public static final int TYPE_ASEC;
    public static final int TYPE_EMULATED;
    public static final int TYPE_OBB;
    public static final int TYPE_PRIVATE;
    public static final int TYPE_PUBLIC;
    public static final int TYPE_STUB;
    private static final java.util.Comparator sDescriptionComparator;
    private static android.util.ArrayMap sEnvironmentToBroadcast;
    private static android.util.SparseIntArray sStateToDescrip;
    private static android.util.SparseArray sStateToEnvironment;
    public final android.os.storage.DiskInfo disk;
    public java.lang.String fsLabel;
    public java.lang.String fsType;
    public java.lang.String fsUuid;
    public final java.lang.String id;
    public java.lang.String internalPath;
    public int mountFlags;
    public int mountUserId;
    public final java.lang.String partGuid;
    public java.lang.String path;
    public int state;
    public final int type;

    static void <clinit>()
    {
        android.util.SparseArray $r0, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        android.util.ArrayMap $r1, $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r27;
        android.util.SparseIntArray $r2, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37;
        android.os.storage.VolumeInfo$1 $r3;
        android.os.storage.VolumeInfo$2 $r38;

        <android.os.storage.VolumeInfo: int TYPE_STUB> = 5;

        <android.os.storage.VolumeInfo: int TYPE_PUBLIC> = 0;

        <android.os.storage.VolumeInfo: int TYPE_PRIVATE> = 1;

        <android.os.storage.VolumeInfo: int TYPE_OBB> = 4;

        <android.os.storage.VolumeInfo: int TYPE_EMULATED> = 2;

        <android.os.storage.VolumeInfo: int TYPE_ASEC> = 3;

        <android.os.storage.VolumeInfo: int STATE_UNMOUNTED> = 0;

        <android.os.storage.VolumeInfo: int STATE_UNMOUNTABLE> = 6;

        <android.os.storage.VolumeInfo: int STATE_REMOVED> = 7;

        <android.os.storage.VolumeInfo: int STATE_MOUNTED_READ_ONLY> = 3;

        <android.os.storage.VolumeInfo: int STATE_MOUNTED> = 2;

        <android.os.storage.VolumeInfo: int STATE_FORMATTING> = 4;

        <android.os.storage.VolumeInfo: int STATE_EJECTING> = 5;

        <android.os.storage.VolumeInfo: int STATE_CHECKING> = 1;

        <android.os.storage.VolumeInfo: int STATE_BAD_REMOVAL> = 8;

        <android.os.storage.VolumeInfo: int MOUNT_FLAG_VISIBLE> = 2;

        <android.os.storage.VolumeInfo: int MOUNT_FLAG_PRIMARY> = 1;

        <android.os.storage.VolumeInfo: java.lang.String ID_PRIVATE_INTERNAL> = "private";

        <android.os.storage.VolumeInfo: java.lang.String ID_EMULATED_INTERNAL> = "emulated";

        <android.os.storage.VolumeInfo: java.lang.String EXTRA_VOLUME_STATE> = "android.os.storage.extra.VOLUME_STATE";

        <android.os.storage.VolumeInfo: java.lang.String EXTRA_VOLUME_ID> = "android.os.storage.extra.VOLUME_ID";

        <android.os.storage.VolumeInfo: java.lang.String DOCUMENT_ROOT_PRIMARY_EMULATED> = "primary";

        <android.os.storage.VolumeInfo: java.lang.String DOCUMENT_AUTHORITY> = "com.android.externalstorage.documents";

        <android.os.storage.VolumeInfo: java.lang.String ACTION_VOLUME_STATE_CHANGED> = "android.os.storage.action.VOLUME_STATE_CHANGED";

        $r0 = new android.util.SparseArray;

        specialinvoke $r0.<android.util.SparseArray: void <init>()>();

        <android.os.storage.VolumeInfo: android.util.SparseArray sStateToEnvironment> = $r0;

        $r1 = new android.util.ArrayMap;

        specialinvoke $r1.<android.util.ArrayMap: void <init>()>();

        <android.os.storage.VolumeInfo: android.util.ArrayMap sEnvironmentToBroadcast> = $r1;

        $r2 = new android.util.SparseIntArray;

        specialinvoke $r2.<android.util.SparseIntArray: void <init>()>();

        <android.os.storage.VolumeInfo: android.util.SparseIntArray sStateToDescrip> = $r2;

        $r3 = new android.os.storage.VolumeInfo$1;

        specialinvoke $r3.<android.os.storage.VolumeInfo$1: void <init>()>();

        <android.os.storage.VolumeInfo: java.util.Comparator sDescriptionComparator> = $r3;

        $r4 = <android.os.storage.VolumeInfo: android.util.SparseArray sStateToEnvironment>;

        virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>(0, "unmounted");

        $r5 = <android.os.storage.VolumeInfo: android.util.SparseArray sStateToEnvironment>;

        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(1, "checking");

        $r6 = <android.os.storage.VolumeInfo: android.util.SparseArray sStateToEnvironment>;

        virtualinvoke $r6.<android.util.SparseArray: void put(int,java.lang.Object)>(2, "mounted");

        $r7 = <android.os.storage.VolumeInfo: android.util.SparseArray sStateToEnvironment>;

        virtualinvoke $r7.<android.util.SparseArray: void put(int,java.lang.Object)>(3, "mounted_ro");

        $r8 = <android.os.storage.VolumeInfo: android.util.SparseArray sStateToEnvironment>;

        virtualinvoke $r8.<android.util.SparseArray: void put(int,java.lang.Object)>(4, "unmounted");

        $r9 = <android.os.storage.VolumeInfo: android.util.SparseArray sStateToEnvironment>;

        virtualinvoke $r9.<android.util.SparseArray: void put(int,java.lang.Object)>(5, "ejecting");

        $r10 = <android.os.storage.VolumeInfo: android.util.SparseArray sStateToEnvironment>;

        virtualinvoke $r10.<android.util.SparseArray: void put(int,java.lang.Object)>(6, "unmountable");

        $r11 = <android.os.storage.VolumeInfo: android.util.SparseArray sStateToEnvironment>;

        virtualinvoke $r11.<android.util.SparseArray: void put(int,java.lang.Object)>(7, "removed");

        $r12 = <android.os.storage.VolumeInfo: android.util.SparseArray sStateToEnvironment>;

        virtualinvoke $r12.<android.util.SparseArray: void put(int,java.lang.Object)>(8, "bad_removal");

        $r13 = <android.os.storage.VolumeInfo: android.util.ArrayMap sEnvironmentToBroadcast>;

        virtualinvoke $r13.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("unmounted", "android.intent.action.MEDIA_UNMOUNTED");

        $r15 = <android.os.storage.VolumeInfo: android.util.ArrayMap sEnvironmentToBroadcast>;

        virtualinvoke $r15.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("checking", "android.intent.action.MEDIA_CHECKING");

        $r17 = <android.os.storage.VolumeInfo: android.util.ArrayMap sEnvironmentToBroadcast>;

        virtualinvoke $r17.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("mounted", "android.intent.action.MEDIA_MOUNTED");

        $r19 = <android.os.storage.VolumeInfo: android.util.ArrayMap sEnvironmentToBroadcast>;

        virtualinvoke $r19.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("mounted_ro", "android.intent.action.MEDIA_MOUNTED");

        $r21 = <android.os.storage.VolumeInfo: android.util.ArrayMap sEnvironmentToBroadcast>;

        virtualinvoke $r21.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("ejecting", "android.intent.action.MEDIA_EJECT");

        $r23 = <android.os.storage.VolumeInfo: android.util.ArrayMap sEnvironmentToBroadcast>;

        virtualinvoke $r23.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("unmountable", "android.intent.action.MEDIA_UNMOUNTABLE");

        $r25 = <android.os.storage.VolumeInfo: android.util.ArrayMap sEnvironmentToBroadcast>;

        virtualinvoke $r25.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("removed", "android.intent.action.MEDIA_REMOVED");

        $r27 = <android.os.storage.VolumeInfo: android.util.ArrayMap sEnvironmentToBroadcast>;

        virtualinvoke $r27.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("bad_removal", "android.intent.action.MEDIA_BAD_REMOVAL");

        $r29 = <android.os.storage.VolumeInfo: android.util.SparseIntArray sStateToDescrip>;

        virtualinvoke $r29.<android.util.SparseIntArray: void put(int,int)>(0, 17040131);

        $r30 = <android.os.storage.VolumeInfo: android.util.SparseIntArray sStateToDescrip>;

        virtualinvoke $r30.<android.util.SparseIntArray: void put(int,int)>(1, 17040123);

        $r31 = <android.os.storage.VolumeInfo: android.util.SparseIntArray sStateToDescrip>;

        virtualinvoke $r31.<android.util.SparseIntArray: void put(int,int)>(2, 17040127);

        $r32 = <android.os.storage.VolumeInfo: android.util.SparseIntArray sStateToDescrip>;

        virtualinvoke $r32.<android.util.SparseIntArray: void put(int,int)>(3, 17040128);

        $r33 = <android.os.storage.VolumeInfo: android.util.SparseIntArray sStateToDescrip>;

        virtualinvoke $r33.<android.util.SparseIntArray: void put(int,int)>(4, 17040125);

        $r34 = <android.os.storage.VolumeInfo: android.util.SparseIntArray sStateToDescrip>;

        virtualinvoke $r34.<android.util.SparseIntArray: void put(int,int)>(5, 17040124);

        $r35 = <android.os.storage.VolumeInfo: android.util.SparseIntArray sStateToDescrip>;

        virtualinvoke $r35.<android.util.SparseIntArray: void put(int,int)>(6, 17040130);

        $r36 = <android.os.storage.VolumeInfo: android.util.SparseIntArray sStateToDescrip>;

        virtualinvoke $r36.<android.util.SparseIntArray: void put(int,int)>(7, 17040129);

        $r37 = <android.os.storage.VolumeInfo: android.util.SparseIntArray sStateToDescrip>;

        virtualinvoke $r37.<android.util.SparseIntArray: void put(int,int)>(8, 17040122);

        $r38 = new android.os.storage.VolumeInfo$2;

        specialinvoke $r38.<android.os.storage.VolumeInfo$2: void <init>()>();

        <android.os.storage.VolumeInfo: android.os.Parcelable$Creator CREATOR> = $r38;

        return;
    }

    public void <init>(android.os.Parcel)
    {
        android.os.storage.VolumeInfo r0;
        android.os.Parcel r1;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        int $i0, $i1, $i2, $i3, $i4;
        android.os.Parcelable$Creator $r9;
        java.lang.Object $r10;
        android.os.storage.DiskInfo $r11;

        r0 := @this: android.os.storage.VolumeInfo;

        r1 := @parameter0: android.os.Parcel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.os.storage.VolumeInfo: int mountFlags> = 0;

        r0.<android.os.storage.VolumeInfo: int mountUserId> = -10000;

        r0.<android.os.storage.VolumeInfo: int state> = 0;

        $r2 = virtualinvoke r1.<android.os.Parcel: java.lang.String readString8()>();

        r0.<android.os.storage.VolumeInfo: java.lang.String id> = $r2;

        $i0 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r0.<android.os.storage.VolumeInfo: int type> = $i0;

        $i1 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        if $i1 == 0 goto label1;

        $r9 = <android.os.storage.DiskInfo: android.os.Parcelable$Creator CREATOR>;

        $r10 = interfaceinvoke $r9.<android.os.Parcelable$Creator: java.lang.Object createFromParcel(android.os.Parcel)>(r1);

        $r11 = (android.os.storage.DiskInfo) $r10;

        r0.<android.os.storage.VolumeInfo: android.os.storage.DiskInfo disk> = $r11;

        goto label2;

     label1:
        r0.<android.os.storage.VolumeInfo: android.os.storage.DiskInfo disk> = null;

     label2:
        $r3 = virtualinvoke r1.<android.os.Parcel: java.lang.String readString8()>();

        r0.<android.os.storage.VolumeInfo: java.lang.String partGuid> = $r3;

        $i2 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r0.<android.os.storage.VolumeInfo: int mountFlags> = $i2;

        $i3 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r0.<android.os.storage.VolumeInfo: int mountUserId> = $i3;

        $i4 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r0.<android.os.storage.VolumeInfo: int state> = $i4;

        $r4 = virtualinvoke r1.<android.os.Parcel: java.lang.String readString8()>();

        r0.<android.os.storage.VolumeInfo: java.lang.String fsType> = $r4;

        $r5 = virtualinvoke r1.<android.os.Parcel: java.lang.String readString8()>();

        r0.<android.os.storage.VolumeInfo: java.lang.String fsUuid> = $r5;

        $r6 = virtualinvoke r1.<android.os.Parcel: java.lang.String readString8()>();

        r0.<android.os.storage.VolumeInfo: java.lang.String fsLabel> = $r6;

        $r7 = virtualinvoke r1.<android.os.Parcel: java.lang.String readString8()>();

        r0.<android.os.storage.VolumeInfo: java.lang.String path> = $r7;

        $r8 = virtualinvoke r1.<android.os.Parcel: java.lang.String readString8()>();

        r0.<android.os.storage.VolumeInfo: java.lang.String internalPath> = $r8;

        return;
    }

    public void <init>(java.lang.String, int, android.os.storage.DiskInfo, java.lang.String)
    {
        android.os.storage.VolumeInfo r0;
        java.lang.String r1, r3, $r5;
        int i0;
        android.os.storage.DiskInfo r2;
        java.lang.Object $r4;

        r0 := @this: android.os.storage.VolumeInfo;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.os.storage.DiskInfo;

        r3 := @parameter3: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.os.storage.VolumeInfo: int mountFlags> = 0;

        r0.<android.os.storage.VolumeInfo: int mountUserId> = -10000;

        r0.<android.os.storage.VolumeInfo: int state> = 0;

        $r4 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r5 = (java.lang.String) $r4;

        r0.<android.os.storage.VolumeInfo: java.lang.String id> = $r5;

        r0.<android.os.storage.VolumeInfo: int type> = i0;

        r0.<android.os.storage.VolumeInfo: android.os.storage.DiskInfo disk> = r2;

        r0.<android.os.storage.VolumeInfo: java.lang.String partGuid> = r3;

        return;
    }

    public static int buildStableMtpStorageId(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, i6, i7, i8, i9, i10, i11;
        char $c5;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        i6 = 0;

        i7 = 0;

     label2:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i7 >= $i0 goto label3;

        $i4 = i6 * 31;

        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i7);

        i6 = $i4 + $c5;

        i7 = i7 + 1;

        goto label2;

     label3:
        $i1 = i6 << 16;

        $i2 = $i1 ^ i6;

        i8 = $i2 & -65536;

        i9 = i8;

        if i8 != 0 goto label4;

        i9 = 131072;

     label4:
        i10 = i9;

        if i9 != 65536 goto label5;

        i10 = 131072;

     label5:
        i11 = i10;

        if i10 != -65536 goto label6;

        i11 = -131072;

     label6:
        $i3 = i11 | 1;

        return $i3;
    }

    public static java.lang.String getBroadcastForEnvironment(java.lang.String)
    {
        java.lang.String r0, $r3;
        android.util.ArrayMap $r1;
        java.lang.Object $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = <android.os.storage.VolumeInfo: android.util.ArrayMap sEnvironmentToBroadcast>;

        $r2 = virtualinvoke $r1.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    public static java.lang.String getBroadcastForState(int)
    {
        int i0;
        java.lang.String $r0, $r1;

        i0 := @parameter0: int;

        $r0 = staticinvoke <android.os.storage.VolumeInfo: java.lang.String getEnvironmentForState(int)>(i0);

        $r1 = staticinvoke <android.os.storage.VolumeInfo: java.lang.String getBroadcastForEnvironment(java.lang.String)>($r0);

        return $r1;
    }

    public static java.util.Comparator getDescriptionComparator()
    {
        java.util.Comparator $r0;

        $r0 = <android.os.storage.VolumeInfo: java.util.Comparator sDescriptionComparator>;

        return $r0;
    }

    public static java.lang.String getEnvironmentForState(int)
    {
        int i0;
        java.lang.String r0;
        android.util.SparseArray $r1;
        java.lang.Object $r2;

        i0 := @parameter0: int;

        $r1 = <android.os.storage.VolumeInfo: android.util.SparseArray sStateToEnvironment>;

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r0 = (java.lang.String) $r2;

        if r0 == null goto label1;

        return r0;

     label1:
        return "unknown";
    }

    public android.content.Intent buildBrowseIntent()
    {
        android.os.storage.VolumeInfo r0;
        int $i0;
        android.content.Intent $r1;

        r0 := @this: android.os.storage.VolumeInfo;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $r1 = virtualinvoke r0.<android.os.storage.VolumeInfo: android.content.Intent buildBrowseIntentForUser(int)>($i0);

        return $r1;
    }

    public android.content.Intent buildBrowseIntentForUser(int)
    {
        android.os.storage.VolumeInfo r0;
        int i0, i1, $i2, $i3;
        boolean $z0, $z1;
        android.content.Intent $r2;
        java.lang.String $r6;
        android.net.Uri r7;

        r0 := @this: android.os.storage.VolumeInfo;

        i0 := @parameter0: int;

        i1 = r0.<android.os.storage.VolumeInfo: int type>;

        if i1 == 0 goto label1;

        if i1 != 5 goto label2;

     label1:
        $i2 = r0.<android.os.storage.VolumeInfo: int mountUserId>;

        if $i2 != i0 goto label2;

        $r6 = r0.<android.os.storage.VolumeInfo: java.lang.String fsUuid>;

        r7 = staticinvoke <android.provider.DocumentsContract: android.net.Uri buildRootUri(java.lang.String,java.lang.String)>("com.android.externalstorage.documents", $r6);

        goto label3;

     label2:
        $i3 = r0.<android.os.storage.VolumeInfo: int type>;

        if $i3 != 2 goto label4;

        $z0 = virtualinvoke r0.<android.os.storage.VolumeInfo: boolean isPrimary()>();

        if $z0 == 0 goto label4;

        r7 = staticinvoke <android.provider.DocumentsContract: android.net.Uri buildRootUri(java.lang.String,java.lang.String)>("com.android.externalstorage.documents", "primary");

     label3:
        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.VIEW");

        virtualinvoke $r2.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.intent.category.DEFAULT");

        virtualinvoke $r2.<android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)>(r7, "vnd.android.document/root");

        $z1 = virtualinvoke r0.<android.os.storage.VolumeInfo: boolean isPrimary()>();

        virtualinvoke $r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("android.provider.extra.SHOW_ADVANCED", $z1);

        return $r2;

     label4:
        return null;
    }

    public android.os.storage.StorageVolume buildStorageVolume(android.content.Context, int, boolean)
    {
        android.os.storage.VolumeInfo r0, r1;
        int i0, i1, $i2, $i3;
        java.lang.Object $r2;
        java.lang.String $r3, $r4, $r6, $r12, r17, r21, r22, r24, r25, r27;
        boolean $z1, $z2, $z3, z4, z5, z6, z7;
        android.os.storage.StorageVolume $r5;
        android.os.UserHandle $r7;
        java.lang.StringBuilder $r8;
        java.lang.IllegalStateException $r11;
        java.io.File $r13, $r14, r18, r19, r20;
        android.content.Context r15;
        android.os.storage.StorageManager r16;
        long l4;

        r0 := @this: android.os.storage.VolumeInfo;

        r15 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        z4 := @parameter2: boolean;

        $r2 = virtualinvoke r15.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/storage/StorageManager;");

        r16 = (android.os.storage.StorageManager) $r2;

        if z4 == 0 goto label01;

        r17 = "unmounted";

        goto label02;

     label01:
        $i2 = r0.<android.os.storage.VolumeInfo: int state>;

        r17 = staticinvoke <android.os.storage.VolumeInfo: java.lang.String getEnvironmentForState(int)>($i2);

     label02:
        r18 = virtualinvoke r0.<android.os.storage.VolumeInfo: java.io.File getPathForUser(int)>(i0);

        r19 = r18;

        if r18 != null goto label03;

        $r14 = new java.io.File;

        specialinvoke $r14.<java.io.File: void <init>(java.lang.String)>("/dev/null");

        r19 = $r14;

     label03:
        r20 = virtualinvoke r0.<android.os.storage.VolumeInfo: java.io.File getInternalPathForUser(int)>(i0);

        if r20 != null goto label04;

        $r13 = new java.io.File;

        specialinvoke $r13.<java.io.File: void <init>(java.lang.String)>("/dev/null");

        r20 = $r13;

        goto label04;

     label04:
        r21 = null;

        r22 = r0.<android.os.storage.VolumeInfo: java.lang.String fsUuid>;

        i1 = r0.<android.os.storage.VolumeInfo: int type>;

        if i1 != 2 goto label08;

        r1 = virtualinvoke r16.<android.os.storage.StorageManager: android.os.storage.VolumeInfo findPrivateForEmulated(android.os.storage.VolumeInfo)>(r0);

        if r1 == null goto label05;

        r21 = virtualinvoke r16.<android.os.storage.StorageManager: java.lang.String getBestVolumeDescription(android.os.storage.VolumeInfo)>(r1);

        r22 = r1.<android.os.storage.VolumeInfo: java.lang.String fsUuid>;

     label05:
        $z3 = virtualinvoke r0.<android.os.storage.VolumeInfo: boolean isPrimaryEmulatedForUser(int)>(i0);

        if $z3 == 0 goto label06;

        z5 = 0;

        goto label07;

     label06:
        z5 = 1;

     label07:
        l4 = 0L;

        z6 = z5;

        r24 = r21;

        r25 = r22;

        z7 = 1;

        goto label12;

     label08:
        if i1 == 0 goto label10;

        if i1 != 5 goto label09;

        goto label10;

     label09:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected volume type ");

        $i3 = r0.<android.os.storage.VolumeInfo: int type>;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r11 = new java.lang.IllegalStateException;

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r11;

     label10:
        r27 = virtualinvoke r16.<android.os.storage.StorageManager: java.lang.String getBestVolumeDescription(android.os.storage.VolumeInfo)>(r0);

        $r4 = "vfat";

        $r3 = r0.<android.os.storage.VolumeInfo: java.lang.String fsType>;

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label11;

        r25 = r22;

        l4 = 4294967295L;

        z7 = 0;

        z6 = 1;

        r24 = r27;

        goto label12;

     label11:
        r25 = r22;

        l4 = 0L;

        z7 = 0;

        z6 = 1;

        r24 = r27;

     label12:
        if r24 != null goto label13;

        r24 = virtualinvoke r15.<android.content.Context: java.lang.String getString(int)>(17039374);

        goto label13;

     label13:
        $r5 = new android.os.storage.StorageVolume;

        $r6 = r0.<android.os.storage.VolumeInfo: java.lang.String id>;

        $z2 = virtualinvoke r0.<android.os.storage.VolumeInfo: boolean isPrimary()>();

        $r7 = new android.os.UserHandle;

        specialinvoke $r7.<android.os.UserHandle: void <init>(int)>(i0);

        specialinvoke $r5.<android.os.storage.StorageVolume: void <init>(java.lang.String,java.io.File,java.io.File,java.lang.String,boolean,boolean,boolean,boolean,long,android.os.UserHandle,java.lang.String,java.lang.String)>($r6, r19, r20, r24, $z2, z6, z7, 0, l4, $r7, r25, r17);

        return $r5;
    }

    public android.os.storage.VolumeInfo clone()
    {
        android.os.storage.VolumeInfo r0, r5;
        android.os.Parcel r1;
        android.os.Parcelable$Creator $r2;
        java.lang.Object $r3;
        java.lang.Throwable $r4;

        r0 := @this: android.os.storage.VolumeInfo;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r0.<android.os.storage.VolumeInfo: void writeToParcel(android.os.Parcel,int)>(r1, 0);

        virtualinvoke r1.<android.os.Parcel: void setDataPosition(int)>(0);

        $r2 = <android.os.storage.VolumeInfo: android.os.Parcelable$Creator CREATOR>;

        $r3 = interfaceinvoke $r2.<android.os.Parcelable$Creator: java.lang.Object createFromParcel(android.os.Parcel)>(r1);

        r5 = (android.os.storage.VolumeInfo) $r3;

     label2:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return r5;

     label3:
        $r4 := @caughtexception;

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        android.os.storage.VolumeInfo r0, $r1;

        r0 := @this: android.os.storage.VolumeInfo;

        $r1 = virtualinvoke r0.<android.os.storage.VolumeInfo: android.os.storage.VolumeInfo clone()>();

        return $r1;
    }

    public int describeContents()
    {
        android.os.storage.VolumeInfo r0;

        r0 := @this: android.os.storage.VolumeInfo;

        return 0;
    }

    public void dump(com.android.internal.util.IndentingPrintWriter)
    {
        android.os.storage.VolumeInfo r0;
        com.android.internal.util.IndentingPrintWriter r1;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r8, $r11, $r13, $r15, $r18, $r23, $r25, $r27, $r29, $r31, $r33;
        java.lang.Class $r10, $r17, $r22;
        int $i0, $i1, $i2, $i3;
        java.lang.Integer $r20;

        r0 := @this: android.os.storage.VolumeInfo;

        r1 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("VolumeInfo{");

        $r5 = r0.<android.os.storage.VolumeInfo: java.lang.String id>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}:");

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r8);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r10 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $i0 = r0.<android.os.storage.VolumeInfo: int type>;

        $r11 = staticinvoke <android.util.DebugUtils: java.lang.String valueToString(java.lang.Class,java.lang.String,int)>($r10, "TYPE_", $i0);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("type", $r11);

        $r13 = virtualinvoke r0.<android.os.storage.VolumeInfo: java.lang.String getDiskId()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("diskId", $r13);

        $r15 = r0.<android.os.storage.VolumeInfo: java.lang.String partGuid>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("partGuid", $r15);

        $r17 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $i1 = r0.<android.os.storage.VolumeInfo: int mountFlags>;

        $r18 = staticinvoke <android.util.DebugUtils: java.lang.String flagsToString(java.lang.Class,java.lang.String,int)>($r17, "MOUNT_FLAG_", $i1);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("mountFlags", $r18);

        $i2 = r0.<android.os.storage.VolumeInfo: int mountUserId>;

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("mountUserId", $r20);

        $r22 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $i3 = r0.<android.os.storage.VolumeInfo: int state>;

        $r23 = staticinvoke <android.util.DebugUtils: java.lang.String valueToString(java.lang.Class,java.lang.String,int)>($r22, "STATE_", $i3);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("state", $r23);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

        $r25 = r0.<android.os.storage.VolumeInfo: java.lang.String fsType>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("fsType", $r25);

        $r27 = r0.<android.os.storage.VolumeInfo: java.lang.String fsUuid>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("fsUuid", $r27);

        $r29 = r0.<android.os.storage.VolumeInfo: java.lang.String fsLabel>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("fsLabel", $r29);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

        $r31 = r0.<android.os.storage.VolumeInfo: java.lang.String path>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("path", $r31);

        $r33 = r0.<android.os.storage.VolumeInfo: java.lang.String internalPath>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("internalPath", $r33);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

        return;
    }

    public boolean equals(java.lang.Object)
    {
        android.os.storage.VolumeInfo r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.lang.String $r3, $r4;

        r0 := @this: android.os.storage.VolumeInfo;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof android.os.storage.VolumeInfo;

        if $z0 == 0 goto label1;

        $r4 = r0.<android.os.storage.VolumeInfo: java.lang.String id>;

        $r2 = (android.os.storage.VolumeInfo) r1;

        $r3 = $r2.<android.os.storage.VolumeInfo: java.lang.String id>;

        $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r4, $r3);

        return $z1;

     label1:
        return 0;
    }

    public java.lang.String getDescription()
    {
        android.os.storage.VolumeInfo r0;
        java.lang.String $r1, $r2, $r4, $r5, $r6, $r7;
        boolean $z0, $z1, $z2;
        android.content.res.Resources $r3;

        r0 := @this: android.os.storage.VolumeInfo;

        $r2 = "private";

        $r1 = r0.<android.os.storage.VolumeInfo: java.lang.String id>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label3;

        $r5 = r0.<android.os.storage.VolumeInfo: java.lang.String id>;

        $z1 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("emulated;");

        if $z1 == 0 goto label1;

        goto label3;

     label1:
        $r6 = r0.<android.os.storage.VolumeInfo: java.lang.String fsLabel>;

        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r6);

        if $z2 != 0 goto label2;

        $r7 = r0.<android.os.storage.VolumeInfo: java.lang.String fsLabel>;

        return $r7;

     label2:
        return null;

     label3:
        $r3 = staticinvoke <android.content.res.Resources: android.content.res.Resources getSystem()>();

        $r4 = virtualinvoke $r3.<android.content.res.Resources: java.lang.String getString(int)>(17041325);

        return $r4;
    }

    public android.os.storage.DiskInfo getDisk()
    {
        android.os.storage.VolumeInfo r0;
        android.os.storage.DiskInfo $r1;

        r0 := @this: android.os.storage.VolumeInfo;

        $r1 = r0.<android.os.storage.VolumeInfo: android.os.storage.DiskInfo disk>;

        return $r1;
    }

    public java.lang.String getDiskId()
    {
        android.os.storage.VolumeInfo r0;
        android.os.storage.DiskInfo r1;
        java.lang.String r2;

        r0 := @this: android.os.storage.VolumeInfo;

        r1 = r0.<android.os.storage.VolumeInfo: android.os.storage.DiskInfo disk>;

        if r1 == null goto label1;

        r2 = r1.<android.os.storage.DiskInfo: java.lang.String id>;

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    public java.lang.String getFsUuid()
    {
        android.os.storage.VolumeInfo r0;
        java.lang.String $r1;

        r0 := @this: android.os.storage.VolumeInfo;

        $r1 = r0.<android.os.storage.VolumeInfo: java.lang.String fsUuid>;

        return $r1;
    }

    public java.lang.String getId()
    {
        android.os.storage.VolumeInfo r0;
        java.lang.String $r1;

        r0 := @this: android.os.storage.VolumeInfo;

        $r1 = r0.<android.os.storage.VolumeInfo: java.lang.String id>;

        return $r1;
    }

    public java.io.File getInternalPath()
    {
        android.os.storage.VolumeInfo r0;
        java.lang.String $r1, $r3;
        java.io.File $r2, r4;

        r0 := @this: android.os.storage.VolumeInfo;

        $r1 = r0.<android.os.storage.VolumeInfo: java.lang.String internalPath>;

        if $r1 == null goto label1;

        $r2 = new java.io.File;

        $r3 = r0.<android.os.storage.VolumeInfo: java.lang.String internalPath>;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r3);

        r4 = $r2;

        goto label2;

     label1:
        r4 = null;

     label2:
        return r4;
    }

    public java.io.File getInternalPathForUser(int)
    {
        android.os.storage.VolumeInfo r0;
        int i0, i1;
        java.lang.String $r1, $r3, $r4;
        java.io.File $r2, $r5;

        r0 := @this: android.os.storage.VolumeInfo;

        i0 := @parameter0: int;

        $r1 = r0.<android.os.storage.VolumeInfo: java.lang.String path>;

        if $r1 != null goto label1;

        return null;

     label1:
        i1 = r0.<android.os.storage.VolumeInfo: int type>;

        if i1 == 0 goto label3;

        if i1 != 5 goto label2;

        goto label3;

     label2:
        $r5 = virtualinvoke r0.<android.os.storage.VolumeInfo: java.io.File getPathForUser(int)>(i0);

        return $r5;

     label3:
        $r2 = new java.io.File;

        $r3 = r0.<android.os.storage.VolumeInfo: java.lang.String path>;

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("/storage/", "/mnt/media_rw/");

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r4);

        return $r2;
    }

    public int getMountUserId()
    {
        android.os.storage.VolumeInfo r0;
        int $i0;

        r0 := @this: android.os.storage.VolumeInfo;

        $i0 = r0.<android.os.storage.VolumeInfo: int mountUserId>;

        return $i0;
    }

    public java.lang.String getNormalizedFsUuid()
    {
        android.os.storage.VolumeInfo r0;
        java.util.Locale $r1;
        java.lang.String r2, r3;

        r0 := @this: android.os.storage.VolumeInfo;

        r2 = r0.<android.os.storage.VolumeInfo: java.lang.String fsUuid>;

        if r2 == null goto label1;

        $r1 = <java.util.Locale: java.util.Locale US>;

        r3 = virtualinvoke r2.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r1);

        goto label2;

     label1:
        r3 = null;

     label2:
        return r3;
    }

    public java.io.File getPath()
    {
        android.os.storage.VolumeInfo r0;
        java.lang.String $r1, $r3;
        java.io.File $r2, r4;

        r0 := @this: android.os.storage.VolumeInfo;

        $r1 = r0.<android.os.storage.VolumeInfo: java.lang.String path>;

        if $r1 == null goto label1;

        $r2 = new java.io.File;

        $r3 = r0.<android.os.storage.VolumeInfo: java.lang.String path>;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r3);

        r4 = $r2;

        goto label2;

     label1:
        r4 = null;

     label2:
        return r4;
    }

    public java.io.File getPathForUser(int)
    {
        android.os.storage.VolumeInfo r0;
        int i0, i1;
        java.lang.String $r1, $r3, $r5, $r6;
        java.io.File $r2, $r4;

        r0 := @this: android.os.storage.VolumeInfo;

        i0 := @parameter0: int;

        $r1 = r0.<android.os.storage.VolumeInfo: java.lang.String path>;

        if $r1 != null goto label1;

        return null;

     label1:
        i1 = r0.<android.os.storage.VolumeInfo: int type>;

        if i1 == 0 goto label4;

        if i1 != 5 goto label2;

        goto label4;

     label2:
        if i1 != 2 goto label3;

        $r4 = new java.io.File;

        $r5 = r0.<android.os.storage.VolumeInfo: java.lang.String path>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r5, $r6);

        return $r4;

     label3:
        return null;

     label4:
        $r2 = new java.io.File;

        $r3 = r0.<android.os.storage.VolumeInfo: java.lang.String path>;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r3);

        return $r2;
    }

    public int getState()
    {
        android.os.storage.VolumeInfo r0;
        int $i0;

        r0 := @this: android.os.storage.VolumeInfo;

        $i0 = r0.<android.os.storage.VolumeInfo: int state>;

        return $i0;
    }

    public int getStateDescription()
    {
        android.os.storage.VolumeInfo r0;
        int $i0, $i1;
        android.util.SparseIntArray $r1;

        r0 := @this: android.os.storage.VolumeInfo;

        $r1 = <android.os.storage.VolumeInfo: android.util.SparseIntArray sStateToDescrip>;

        $i0 = r0.<android.os.storage.VolumeInfo: int state>;

        $i1 = virtualinvoke $r1.<android.util.SparseIntArray: int get(int,int)>($i0, 0);

        return $i1;
    }

    public int getType()
    {
        android.os.storage.VolumeInfo r0;
        int $i0;

        r0 := @this: android.os.storage.VolumeInfo;

        $i0 = r0.<android.os.storage.VolumeInfo: int type>;

        return $i0;
    }

    public int hashCode()
    {
        android.os.storage.VolumeInfo r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: android.os.storage.VolumeInfo;

        $r1 = r0.<android.os.storage.VolumeInfo: java.lang.String id>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        return $i0;
    }

    public boolean isMountedReadable()
    {
        android.os.storage.VolumeInfo r0;
        int i0;
        boolean z0;

        r0 := @this: android.os.storage.VolumeInfo;

        i0 = r0.<android.os.storage.VolumeInfo: int state>;

        if i0 == 2 goto label2;

        if i0 != 3 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    public boolean isMountedWritable()
    {
        android.os.storage.VolumeInfo r0;
        int $i0;
        boolean z0;

        r0 := @this: android.os.storage.VolumeInfo;

        $i0 = r0.<android.os.storage.VolumeInfo: int state>;

        if $i0 != 2 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isPrimary()
    {
        android.os.storage.VolumeInfo r0;
        int i0, $i1;
        boolean z0;

        r0 := @this: android.os.storage.VolumeInfo;

        i0 = r0.<android.os.storage.VolumeInfo: int mountFlags>;

        z0 = 1;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isPrimaryEmulatedForUser(int)
    {
        android.os.storage.VolumeInfo r0;
        int i0;
        java.lang.String r1, $r6;
        java.lang.StringBuilder $r3;
        boolean $z0;

        r0 := @this: android.os.storage.VolumeInfo;

        i0 := @parameter0: int;

        r1 = r0.<android.os.storage.VolumeInfo: java.lang.String id>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("emulated;");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        return $z0;
    }

    public boolean isPrimaryPhysical()
    {
        android.os.storage.VolumeInfo r0;
        boolean $z0, z1;
        int $i0;

        r0 := @this: android.os.storage.VolumeInfo;

        $z0 = virtualinvoke r0.<android.os.storage.VolumeInfo: boolean isPrimary()>();

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r0.<android.os.storage.VolumeInfo: int getType()>();

        if $i0 != 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public boolean isVisible()
    {
        android.os.storage.VolumeInfo r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.os.storage.VolumeInfo;

        $i0 = r0.<android.os.storage.VolumeInfo: int mountFlags>;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isVisibleForRead(int)
    {
        android.os.storage.VolumeInfo r0;
        int i0;
        boolean $z0;

        r0 := @this: android.os.storage.VolumeInfo;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<android.os.storage.VolumeInfo: boolean isVisibleForUser(int)>(i0);

        return $z0;
    }

    public boolean isVisibleForUser(int)
    {
        android.os.storage.VolumeInfo r0;
        int i0, i1, $i2;
        boolean $z0;

        r0 := @this: android.os.storage.VolumeInfo;

        i0 := @parameter0: int;

        i1 = r0.<android.os.storage.VolumeInfo: int type>;

        if i1 == 0 goto label1;

        if i1 == 5 goto label1;

        if i1 != 2 goto label2;

     label1:
        $i2 = r0.<android.os.storage.VolumeInfo: int mountUserId>;

        if $i2 != i0 goto label2;

        $z0 = virtualinvoke r0.<android.os.storage.VolumeInfo: boolean isVisible()>();

        return $z0;

     label2:
        return 0;
    }

    public boolean isVisibleForWrite(int)
    {
        android.os.storage.VolumeInfo r0;
        int i0;
        boolean $z0;

        r0 := @this: android.os.storage.VolumeInfo;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<android.os.storage.VolumeInfo: boolean isVisibleForUser(int)>(i0);

        return $z0;
    }

    public java.lang.String toString()
    {
        android.os.storage.VolumeInfo r0;
        java.io.CharArrayWriter $r2;
        com.android.internal.util.IndentingPrintWriter $r3;
        java.lang.String $r4;

        r0 := @this: android.os.storage.VolumeInfo;

        $r2 = new java.io.CharArrayWriter;

        specialinvoke $r2.<java.io.CharArrayWriter: void <init>()>();

        $r3 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String,int)>($r2, "    ", 80);

        virtualinvoke r0.<android.os.storage.VolumeInfo: void dump(com.android.internal.util.IndentingPrintWriter)>($r3);

        $r4 = virtualinvoke $r2.<java.io.CharArrayWriter: java.lang.String toString()>();

        return $r4;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        android.os.storage.VolumeInfo r0;
        android.os.Parcel r1;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.String $r2, $r4, $r5, $r6, $r7, $r8, $r9;
        android.os.storage.DiskInfo $r3, $r10;

        r0 := @this: android.os.storage.VolumeInfo;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        $r2 = r0.<android.os.storage.VolumeInfo: java.lang.String id>;

        virtualinvoke r1.<android.os.Parcel: void writeString8(java.lang.String)>($r2);

        $i1 = r0.<android.os.storage.VolumeInfo: int type>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i1);

        $r3 = r0.<android.os.storage.VolumeInfo: android.os.storage.DiskInfo disk>;

        if $r3 == null goto label1;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(1);

        $r10 = r0.<android.os.storage.VolumeInfo: android.os.storage.DiskInfo disk>;

        virtualinvoke $r10.<android.os.storage.DiskInfo: void writeToParcel(android.os.Parcel,int)>(r1, i0);

        goto label2;

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(0);

     label2:
        $r4 = r0.<android.os.storage.VolumeInfo: java.lang.String partGuid>;

        virtualinvoke r1.<android.os.Parcel: void writeString8(java.lang.String)>($r4);

        $i2 = r0.<android.os.storage.VolumeInfo: int mountFlags>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i2);

        $i3 = r0.<android.os.storage.VolumeInfo: int mountUserId>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i3);

        $i4 = r0.<android.os.storage.VolumeInfo: int state>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i4);

        $r5 = r0.<android.os.storage.VolumeInfo: java.lang.String fsType>;

        virtualinvoke r1.<android.os.Parcel: void writeString8(java.lang.String)>($r5);

        $r6 = r0.<android.os.storage.VolumeInfo: java.lang.String fsUuid>;

        virtualinvoke r1.<android.os.Parcel: void writeString8(java.lang.String)>($r6);

        $r7 = r0.<android.os.storage.VolumeInfo: java.lang.String fsLabel>;

        virtualinvoke r1.<android.os.Parcel: void writeString8(java.lang.String)>($r7);

        $r8 = r0.<android.os.storage.VolumeInfo: java.lang.String path>;

        virtualinvoke r1.<android.os.Parcel: void writeString8(java.lang.String)>($r8);

        $r9 = r0.<android.os.storage.VolumeInfo: java.lang.String internalPath>;

        virtualinvoke r1.<android.os.Parcel: void writeString8(java.lang.String)>($r9);

        return;
    }
}
