class android.permission.PermissionControllerService$1 extends android.permission.IPermissionController$Stub
{
    final android.permission.PermissionControllerService this$0;

    void <init>(android.permission.PermissionControllerService)
    {
        android.permission.PermissionControllerService$1 r0;
        android.permission.PermissionControllerService r1;

        r0 := @this: android.permission.PermissionControllerService$1;

        r1 := @parameter0: android.permission.PermissionControllerService;

        r0.<android.permission.PermissionControllerService$1: android.permission.PermissionControllerService this$0> = r1;

        specialinvoke r0.<android.permission.IPermissionController$Stub: void <init>()>();

        return;
    }

    private transient void enforceSomePermissionsGrantedToCaller(java.lang.String[])
    {
        android.permission.PermissionControllerService$1 r0;
        java.lang.String[] r1;
        int i0, $i1, i2;
        java.lang.StringBuilder $r2;
        java.lang.String $r4, $r7, r9;
        java.lang.SecurityException $r6;
        android.permission.PermissionControllerService $r8;

        r0 := @this: android.permission.PermissionControllerService$1;

        r1 := @parameter0: java.lang.String[];

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        r9 = r1[i2];

        $r8 = r0.<android.permission.PermissionControllerService$1: android.permission.PermissionControllerService this$0>;

        $i1 = virtualinvoke $r8.<android.permission.PermissionControllerService: int checkCallingPermission(java.lang.String)>(r9);

        if $i1 != 0 goto label2;

        return;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("At lest one of the following permissions is required: ");

        $r4 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = new java.lang.SecurityException;

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    static void lambda$grantOrUpgradeDefaultRuntimePermissions$2(com.android.internal.infra.AndroidFuture)
    {
        com.android.internal.infra.AndroidFuture r0;
        java.lang.Boolean $r1;

        r0 := @parameter0: com.android.internal.infra.AndroidFuture;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke r0.<com.android.internal.infra.AndroidFuture: boolean complete(java.lang.Object)>($r1);

        return;
    }

    static void lambda$revokeRuntimePermissions$0(java.lang.String, java.util.List)
    {
        java.lang.String r0;
        java.util.List r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.List;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.android.internal.util.Preconditions: java.util.Collection checkCollectionElementsNotNull(java.util.Collection,java.lang.String)>(r1, "permissions");

        return;
    }

    static void lambda$revokeRuntimePermissions$1(com.android.internal.infra.AndroidFuture, java.util.Map)
    {
        com.android.internal.infra.AndroidFuture r0;
        java.util.Map r1;
        android.permission.'-$$Lambda$PermissionControllerService$1$gRiWGhY69ZpfPVsTDakstADlGis' $r2;
        java.util.function.BiConsumer r3;

        r0 := @parameter0: com.android.internal.infra.AndroidFuture;

        r1 := @parameter1: java.util.Map;

        $r2 = <android.permission._$$Lambda$PermissionControllerService$1$gRiWGhY69ZpfPVsTDakstADlGis: android.permission.'-$$Lambda$PermissionControllerService$1$gRiWGhY69ZpfPVsTDakstADlGis' INSTANCE>;

        r3 = (java.util.function.BiConsumer) $r2;

        staticinvoke <com.android.internal.util.CollectionUtils: void forEach(java.util.Map,java.util.function.BiConsumer)>(r1, r3);

        virtualinvoke r0.<com.android.internal.infra.AndroidFuture: boolean complete(java.lang.Object)>(r1);

        return;
    }

    static void lambda$updateUserSensitiveForApp$3(com.android.internal.infra.AndroidFuture)
    {
        com.android.internal.infra.AndroidFuture r0;

        r0 := @parameter0: com.android.internal.infra.AndroidFuture;

        virtualinvoke r0.<com.android.internal.infra.AndroidFuture: boolean complete(java.lang.Object)>(null);

        return;
    }

    public void applyStagedRuntimePermissionBackup(java.lang.String, android.os.UserHandle, com.android.internal.infra.AndroidFuture)
    {
        android.permission.PermissionControllerService$1 r0;
        java.lang.String r1;
        android.os.UserHandle r2;
        com.android.internal.infra.AndroidFuture r3;
        android.permission.PermissionControllerService r4;
        java.lang.String[] $r8;
        android.permission._$$Lambda$PYgLd3P_k0utHHEMLxjUyz_Fj7c $r10;

        r0 := @this: android.permission.PermissionControllerService$1;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.UserHandle;

        r3 := @parameter2: com.android.internal.infra.AndroidFuture;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r3);

        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "android.permission.GRANT_RUNTIME_PERMISSIONS";

        $r8[1] = "android.permission.RESTORE_RUNTIME_PERMISSIONS";

        specialinvoke r0.<android.permission.PermissionControllerService$1: void enforceSomePermissionsGrantedToCaller(java.lang.String[])>($r8);

        r4 = r0.<android.permission.PermissionControllerService$1: android.permission.PermissionControllerService this$0>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r3);

        $r10 = new android.permission._$$Lambda$PYgLd3P_k0utHHEMLxjUyz_Fj7c;

        specialinvoke $r10.<android.permission._$$Lambda$PYgLd3P_k0utHHEMLxjUyz_Fj7c: void <init>(com.android.internal.infra.AndroidFuture)>(r3);

        virtualinvoke r4.<android.permission.PermissionControllerService: void onApplyStagedRuntimePermissionBackup(java.lang.String,android.os.UserHandle,java.util.function.Consumer)>(r1, r2, $r10);

        return;
    }

    public void countPermissionApps(java.util.List, int, com.android.internal.infra.AndroidFuture)
    {
        android.permission.PermissionControllerService$1 r0;
        java.util.List r1;
        int i0;
        com.android.internal.infra.AndroidFuture r2;
        android.permission.PermissionControllerService r3;
        java.lang.String[] $r6;
        android.permission._$$Lambda$we_s0SXLkNKfmYcwhvjS2fbsEsg $r8;

        r0 := @this: android.permission.PermissionControllerService$1;

        r1 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        r2 := @parameter2: com.android.internal.infra.AndroidFuture;

        staticinvoke <com.android.internal.util.Preconditions: java.util.Collection checkCollectionElementsNotNull(java.util.Collection,java.lang.String)>(r1, "permissionNames");

        staticinvoke <com.android.internal.util.Preconditions: int checkFlagsArgument(int,int)>(i0, 3);

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "callback");

        $r6 = newarray (java.lang.String)[1];

        $r6[0] = "android.permission.GET_RUNTIME_PERMISSIONS";

        specialinvoke r0.<android.permission.PermissionControllerService$1: void enforceSomePermissionsGrantedToCaller(java.lang.String[])>($r6);

        r3 = r0.<android.permission.PermissionControllerService$1: android.permission.PermissionControllerService this$0>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        $r8 = new android.permission._$$Lambda$we_s0SXLkNKfmYcwhvjS2fbsEsg;

        specialinvoke $r8.<android.permission._$$Lambda$we_s0SXLkNKfmYcwhvjS2fbsEsg: void <init>(com.android.internal.infra.AndroidFuture)>(r2);

        virtualinvoke r3.<android.permission.PermissionControllerService: void onCountPermissionApps(java.util.List,int,java.util.function.IntConsumer)>(r1, i0, $r8);

        return;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        android.permission.PermissionControllerService$1 r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3, $r6;
        android.permission.PermissionControllerService $r7;

        r0 := @this: android.permission.PermissionControllerService$1;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "fd");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "writer");

        $r6 = newarray (java.lang.String)[1];

        $r6[0] = "android.permission.GET_RUNTIME_PERMISSIONS";

        specialinvoke r0.<android.permission.PermissionControllerService$1: void enforceSomePermissionsGrantedToCaller(java.lang.String[])>($r6);

        $r7 = r0.<android.permission.PermissionControllerService$1: android.permission.PermissionControllerService this$0>;

        staticinvoke <android.permission.PermissionControllerService: void access$100(android.permission.PermissionControllerService,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>($r7, r1, r2, r3);

        return;
    }

    public void getAppPermissions(java.lang.String, com.android.internal.infra.AndroidFuture)
    {
        android.permission.PermissionControllerService$1 r0;
        java.lang.String r1;
        com.android.internal.infra.AndroidFuture r2;
        android.permission.PermissionControllerService r3;
        java.lang.String[] $r6;
        android.permission._$$Lambda$iNX3LK7OVLRPv9_Lf_TwPCbUW98 $r8;

        r0 := @this: android.permission.PermissionControllerService$1;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.internal.infra.AndroidFuture;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "packageName");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "callback");

        $r6 = newarray (java.lang.String)[1];

        $r6[0] = "android.permission.GET_RUNTIME_PERMISSIONS";

        specialinvoke r0.<android.permission.PermissionControllerService$1: void enforceSomePermissionsGrantedToCaller(java.lang.String[])>($r6);

        r3 = r0.<android.permission.PermissionControllerService$1: android.permission.PermissionControllerService this$0>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        $r8 = new android.permission._$$Lambda$iNX3LK7OVLRPv9_Lf_TwPCbUW98;

        specialinvoke $r8.<android.permission._$$Lambda$iNX3LK7OVLRPv9_Lf_TwPCbUW98: void <init>(com.android.internal.infra.AndroidFuture)>(r2);

        virtualinvoke r3.<android.permission.PermissionControllerService: void onGetAppPermissions(java.lang.String,java.util.function.Consumer)>(r1, $r8);

        return;
    }

    public void getPermissionUsages(boolean, long, com.android.internal.infra.AndroidFuture)
    {
        android.permission.PermissionControllerService$1 r0;
        boolean z0;
        long l0;
        com.android.internal.infra.AndroidFuture r1;
        android.permission.PermissionControllerService r2;
        java.lang.String[] $r4;
        android.permission._$$Lambda$iNX3LK7OVLRPv9_Lf_TwPCbUW98 $r6;

        r0 := @this: android.permission.PermissionControllerService$1;

        z0 := @parameter0: boolean;

        l0 := @parameter1: long;

        r1 := @parameter2: com.android.internal.infra.AndroidFuture;

        staticinvoke <com.android.internal.util.Preconditions: long checkArgumentNonnegative(long)>(l0);

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "callback");

        $r4 = newarray (java.lang.String)[1];

        $r4[0] = "android.permission.GET_RUNTIME_PERMISSIONS";

        specialinvoke r0.<android.permission.PermissionControllerService$1: void enforceSomePermissionsGrantedToCaller(java.lang.String[])>($r4);

        r2 = r0.<android.permission.PermissionControllerService$1: android.permission.PermissionControllerService this$0>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r6 = new android.permission._$$Lambda$iNX3LK7OVLRPv9_Lf_TwPCbUW98;

        specialinvoke $r6.<android.permission._$$Lambda$iNX3LK7OVLRPv9_Lf_TwPCbUW98: void <init>(com.android.internal.infra.AndroidFuture)>(r1);

        virtualinvoke r2.<android.permission.PermissionControllerService: void onGetPermissionUsages(boolean,long,java.util.function.Consumer)>(z0, l0, $r6);

        return;
    }

    public void getRuntimePermissionBackup(android.os.UserHandle, android.os.ParcelFileDescriptor)
    {
        android.permission.PermissionControllerService$1 r0;
        android.os.ParcelFileDescriptor$AutoCloseOutputStream r1;
        android.permission.PermissionControllerService r2;
        android.permission._$$Lambda$5k6tNlswoNAjCdgttrkQIe8VHVs r3;
        java.lang.String[] $r6;
        java.lang.Throwable $r8, $r10, $r11, $r13;
        java.lang.String $r9, $r12;
        android.os.UserHandle r14;
        android.os.ParcelFileDescriptor r15;
        java.util.concurrent.CountDownLatch r16;

        r0 := @this: android.permission.PermissionControllerService$1;

        r14 := @parameter0: android.os.UserHandle;

        r15 := @parameter1: android.os.ParcelFileDescriptor;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r14);

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r15);

        $r6 = newarray (java.lang.String)[1];

        $r6[0] = "android.permission.GET_RUNTIME_PERMISSIONS";

        specialinvoke r0.<android.permission.PermissionControllerService$1: void enforceSomePermissionsGrantedToCaller(java.lang.String[])>($r6);

     label01:
        r1 = new android.os.ParcelFileDescriptor$AutoCloseOutputStream;

        specialinvoke r1.<android.os.ParcelFileDescriptor$AutoCloseOutputStream: void <init>(android.os.ParcelFileDescriptor)>(r15);

     label02:
        r16 = new java.util.concurrent.CountDownLatch;

        specialinvoke r16.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r2 = r0.<android.permission.PermissionControllerService$1: android.permission.PermissionControllerService this$0>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r16);

        r3 = new android.permission._$$Lambda$5k6tNlswoNAjCdgttrkQIe8VHVs;

        specialinvoke r3.<android.permission._$$Lambda$5k6tNlswoNAjCdgttrkQIe8VHVs: void <init>(java.util.concurrent.CountDownLatch)>(r16);

        virtualinvoke r2.<android.permission.PermissionControllerService: void onGetRuntimePermissionsBackup(android.os.UserHandle,java.io.OutputStream,java.lang.Runnable)>(r14, r1, r3);

        virtualinvoke r16.<java.util.concurrent.CountDownLatch: void await()>();

     label03:
        virtualinvoke r1.<java.io.OutputStream: void close()>();

     label04:
        goto label13;

     label05:
        $r10 := @caughtexception;

     label06:
        virtualinvoke r1.<java.io.OutputStream: void close()>();

     label07:
        goto label10;

     label08:
        $r13 := @caughtexception;

     label09:
        virtualinvoke $r10.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r13);

     label10:
        throw $r10;

     label11:
        $r8 := @caughtexception;

        $r9 = staticinvoke <android.permission.PermissionControllerService: java.lang.String access$000()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r9, "getRuntimePermissionBackup timed out", $r8);

        goto label13;

     label12:
        $r11 := @caughtexception;

        $r12 = staticinvoke <android.permission.PermissionControllerService: java.lang.String access$000()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r12, "Could not open pipe to write backup to", $r11);

     label13:
        return;

        catch java.io.IOException from label01 to label02 with label12;
        catch java.lang.InterruptedException from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.io.IOException from label03 to label04 with label12;
        catch java.lang.InterruptedException from label03 to label04 with label11;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.io.IOException from label09 to label10 with label12;
        catch java.lang.InterruptedException from label09 to label10 with label11;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.lang.InterruptedException from label10 to label11 with label11;
    }

    public void grantOrUpgradeDefaultRuntimePermissions(com.android.internal.infra.AndroidFuture)
    {
        android.permission.PermissionControllerService$1 r0;
        com.android.internal.infra.AndroidFuture r1;
        java.lang.String[] $r3;
        android.permission._$$Lambda$PermissionControllerService$1$gBmMMOm6HYl5a03WwYV9xJmRYLc $r4;
        android.permission.PermissionControllerService $r5;

        r0 := @this: android.permission.PermissionControllerService$1;

        r1 := @parameter0: com.android.internal.infra.AndroidFuture;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "callback");

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = "android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY";

        specialinvoke r0.<android.permission.PermissionControllerService$1: void enforceSomePermissionsGrantedToCaller(java.lang.String[])>($r3);

        $r5 = r0.<android.permission.PermissionControllerService$1: android.permission.PermissionControllerService this$0>;

        $r4 = new android.permission._$$Lambda$PermissionControllerService$1$gBmMMOm6HYl5a03WwYV9xJmRYLc;

        specialinvoke $r4.<android.permission._$$Lambda$PermissionControllerService$1$gBmMMOm6HYl5a03WwYV9xJmRYLc: void <init>(com.android.internal.infra.AndroidFuture)>(r1);

        virtualinvoke $r5.<android.permission.PermissionControllerService: void onGrantOrUpgradeDefaultRuntimePermissions(java.lang.Runnable)>($r4);

        return;
    }

    public void notifyOneTimePermissionSessionTimeout(java.lang.String)
    {
        android.permission.PermissionControllerService$1 r0;
        java.lang.String[] $r1;
        java.lang.Object $r2;
        android.permission.PermissionControllerService $r3;
        java.lang.String r4, r5;

        r0 := @this: android.permission.PermissionControllerService$1;

        r4 := @parameter0: java.lang.String;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = "android.permission.REVOKE_RUNTIME_PERMISSIONS";

        specialinvoke r0.<android.permission.PermissionControllerService$1: void enforceSomePermissionsGrantedToCaller(java.lang.String[])>($r1);

        $r2 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r4, "packageName cannot be null");

        r5 = (java.lang.String) $r2;

        $r3 = r0.<android.permission.PermissionControllerService$1: android.permission.PermissionControllerService this$0>;

        virtualinvoke $r3.<android.permission.PermissionControllerService: void onOneTimePermissionSessionTimeout(java.lang.String)>(r5);

        return;
    }

    public void revokeRuntimePermission(java.lang.String, java.lang.String)
    {
        android.permission.PermissionControllerService$1 r0;
        java.lang.String r1, $r11, r12;
        android.permission.PermissionControllerService r3;
        java.lang.String[] $r6;
        java.util.concurrent.CountDownLatch $r7;
        android.permission._$$Lambda$5k6tNlswoNAjCdgttrkQIe8VHVs $r9;
        java.lang.Throwable $r10;

        r0 := @this: android.permission.PermissionControllerService$1;

        r12 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r12, "packageName");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "permissionName");

        $r6 = newarray (java.lang.String)[1];

        $r6[0] = "android.permission.REVOKE_RUNTIME_PERMISSIONS";

        specialinvoke r0.<android.permission.PermissionControllerService$1: void enforceSomePermissionsGrantedToCaller(java.lang.String[])>($r6);

        $r7 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r7.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r3 = r0.<android.permission.PermissionControllerService$1: android.permission.PermissionControllerService this$0>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r7);

        $r9 = new android.permission._$$Lambda$5k6tNlswoNAjCdgttrkQIe8VHVs;

        specialinvoke $r9.<android.permission._$$Lambda$5k6tNlswoNAjCdgttrkQIe8VHVs: void <init>(java.util.concurrent.CountDownLatch)>($r7);

        virtualinvoke r3.<android.permission.PermissionControllerService: void onRevokeRuntimePermission(java.lang.String,java.lang.String,java.lang.Runnable)>(r12, r1, $r9);

     label1:
        virtualinvoke $r7.<java.util.concurrent.CountDownLatch: void await()>();

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        $r11 = staticinvoke <android.permission.PermissionControllerService: java.lang.String access$000()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r11, "revokeRuntimePermission timed out", $r10);

     label4:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public void revokeRuntimePermissions(android.os.Bundle, boolean, int, java.lang.String, com.android.internal.infra.AndroidFuture)
    {
        android.permission.PermissionControllerService$1 r0;
        boolean z0, $z1, z2;
        int i0, $i1, $i2;
        java.lang.String r1, r5;
        com.android.internal.infra.AndroidFuture r2;
        java.util.Iterator r4;
        java.util.ArrayList r6;
        android.util.ArrayMap $r10;
        java.util.Set $r11;
        java.lang.String[] $r12;
        android.permission.PermissionControllerService $r13, $r16;
        android.content.pm.ApplicationInfo $r14;
        android.permission._$$Lambda$PermissionControllerService$1$d7FwwlMbNXDw5Sg__Gg51Tk0Dx8 $r15;
        java.lang.Object $r17;
        android.content.pm.PackageManager$NameNotFoundException $r21;
        java.lang.RuntimeException $r22;
        android.os.Bundle r23;
        android.content.pm.PackageManager r24;
        android.content.pm.PackageInfo r25;

        r0 := @this: android.permission.PermissionControllerService$1;

        r23 := @parameter0: android.os.Bundle;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        r2 := @parameter4: com.android.internal.infra.AndroidFuture;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r23, "bundleizedRequest");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r10 = new android.util.ArrayMap;

        specialinvoke $r10.<android.util.ArrayMap: void <init>()>();

        $r11 = virtualinvoke r23.<android.os.Bundle: java.util.Set keySet()>();

        r4 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label02;

        $r17 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r17;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r5);

        r6 = virtualinvoke r23.<android.os.Bundle: java.util.ArrayList getStringArrayList(java.lang.String)>(r5);

        staticinvoke <com.android.internal.util.Preconditions: java.util.Collection checkCollectionElementsNotNull(java.util.Collection,java.lang.String)>(r6, "permissions");

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r6);

        goto label01;

     label02:
        $r12 = newarray (java.lang.String)[1];

        $r12[0] = "android.permission.REVOKE_RUNTIME_PERMISSIONS";

        specialinvoke r0.<android.permission.PermissionControllerService$1: void enforceSomePermissionsGrantedToCaller(java.lang.String[])>($r12);

     label03:
        $r13 = r0.<android.permission.PermissionControllerService$1: android.permission.PermissionControllerService this$0>;

        r24 = virtualinvoke $r13.<android.permission.PermissionControllerService: android.content.pm.PackageManager getPackageManager()>();

     label04:
        z2 = 0;

     label05:
        r25 = virtualinvoke r24.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>(r1, 0);

     label06:
        $i1 = staticinvoke <android.permission.PermissionControllerService$1: int getCallingUid()>();

        $r14 = r25.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i2 = $r14.<android.content.pm.ApplicationInfo: int uid>;

        if $i1 != $i2 goto label08;

     label07:
        z2 = 1;

     label08:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean)>(z2);

     label09:
        $r16 = r0.<android.permission.PermissionControllerService$1: android.permission.PermissionControllerService this$0>;

        $r15 = new android.permission._$$Lambda$PermissionControllerService$1$d7FwwlMbNXDw5Sg__Gg51Tk0Dx8;

        specialinvoke $r15.<android.permission._$$Lambda$PermissionControllerService$1$d7FwwlMbNXDw5Sg__Gg51Tk0Dx8: void <init>(com.android.internal.infra.AndroidFuture)>(r2);

        virtualinvoke $r16.<android.permission.PermissionControllerService: void onRevokeRuntimePermissions(java.util.Map,boolean,int,java.lang.String,java.util.function.Consumer)>($r10, z0, i0, r1, $r15);

        return;

     label10:
        $r21 := @caughtexception;

        $r22 = new java.lang.RuntimeException;

        specialinvoke $r22.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r21);

        throw $r22;

        catch android.content.pm.PackageManager$NameNotFoundException from label03 to label04 with label10;
        catch android.content.pm.PackageManager$NameNotFoundException from label05 to label06 with label10;
        catch android.content.pm.PackageManager$NameNotFoundException from label06 to label07 with label10;
        catch android.content.pm.PackageManager$NameNotFoundException from label08 to label09 with label10;
    }

    public void setRuntimePermissionGrantStateByDeviceAdmin(java.lang.String, java.lang.String, java.lang.String, int, com.android.internal.infra.AndroidFuture)
    {
        android.permission.PermissionControllerService$1 r0;
        java.lang.String r1, r2, r3;
        int i0;
        com.android.internal.infra.AndroidFuture r4;
        android.permission.PermissionControllerService r5;
        java.lang.String[] $r10, $r13, $r14;
        android.permission._$$Lambda$PYgLd3P_k0utHHEMLxjUyz_Fj7c $r12;
        boolean z1;

        r0 := @this: android.permission.PermissionControllerService$1;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        r4 := @parameter4: com.android.internal.infra.AndroidFuture;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence)>(r1);

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence)>(r2);

        staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence)>(r3);

        z1 = 1;

        if i0 == 1 goto label2;

        z1 = 1;

        if i0 == 2 goto label2;

        if i0 != 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean)>(z1);

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r4);

        if i0 != 2 goto label3;

        $r14 = newarray (java.lang.String)[1];

        $r14[0] = "android.permission.GRANT_RUNTIME_PERMISSIONS";

        specialinvoke r0.<android.permission.PermissionControllerService$1: void enforceSomePermissionsGrantedToCaller(java.lang.String[])>($r14);

     label3:
        if i0 != 2 goto label4;

        $r13 = newarray (java.lang.String)[1];

        $r13[0] = "android.permission.REVOKE_RUNTIME_PERMISSIONS";

        specialinvoke r0.<android.permission.PermissionControllerService$1: void enforceSomePermissionsGrantedToCaller(java.lang.String[])>($r13);

     label4:
        $r10 = newarray (java.lang.String)[1];

        $r10[0] = "android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY";

        specialinvoke r0.<android.permission.PermissionControllerService$1: void enforceSomePermissionsGrantedToCaller(java.lang.String[])>($r10);

        r5 = r0.<android.permission.PermissionControllerService$1: android.permission.PermissionControllerService this$0>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r4);

        $r12 = new android.permission._$$Lambda$PYgLd3P_k0utHHEMLxjUyz_Fj7c;

        specialinvoke $r12.<android.permission._$$Lambda$PYgLd3P_k0utHHEMLxjUyz_Fj7c: void <init>(com.android.internal.infra.AndroidFuture)>(r4);

        virtualinvoke r5.<android.permission.PermissionControllerService: void onSetRuntimePermissionGrantStateByDeviceAdmin(java.lang.String,java.lang.String,java.lang.String,int,java.util.function.Consumer)>(r1, r2, r3, i0, $r12);

        return;
    }

    public void stageAndApplyRuntimePermissionsBackup(android.os.UserHandle, android.os.ParcelFileDescriptor)
    {
        android.permission.PermissionControllerService$1 r0;
        android.os.ParcelFileDescriptor$AutoCloseInputStream r1;
        android.permission.PermissionControllerService r2;
        android.permission._$$Lambda$5k6tNlswoNAjCdgttrkQIe8VHVs r3;
        java.lang.String[] $r6;
        java.lang.Throwable $r8, $r10, $r11, $r12;
        java.lang.String $r9, $r13;
        android.os.UserHandle r14;
        android.os.ParcelFileDescriptor r15;
        java.util.concurrent.CountDownLatch r16;

        r0 := @this: android.permission.PermissionControllerService$1;

        r14 := @parameter0: android.os.UserHandle;

        r15 := @parameter1: android.os.ParcelFileDescriptor;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r14);

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r15);

        $r6 = newarray (java.lang.String)[2];

        $r6[0] = "android.permission.GRANT_RUNTIME_PERMISSIONS";

        $r6[1] = "android.permission.RESTORE_RUNTIME_PERMISSIONS";

        specialinvoke r0.<android.permission.PermissionControllerService$1: void enforceSomePermissionsGrantedToCaller(java.lang.String[])>($r6);

     label01:
        r1 = new android.os.ParcelFileDescriptor$AutoCloseInputStream;

        specialinvoke r1.<android.os.ParcelFileDescriptor$AutoCloseInputStream: void <init>(android.os.ParcelFileDescriptor)>(r15);

     label02:
        r16 = new java.util.concurrent.CountDownLatch;

        specialinvoke r16.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r2 = r0.<android.permission.PermissionControllerService$1: android.permission.PermissionControllerService this$0>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r16);

        r3 = new android.permission._$$Lambda$5k6tNlswoNAjCdgttrkQIe8VHVs;

        specialinvoke r3.<android.permission._$$Lambda$5k6tNlswoNAjCdgttrkQIe8VHVs: void <init>(java.util.concurrent.CountDownLatch)>(r16);

        virtualinvoke r2.<android.permission.PermissionControllerService: void onStageAndApplyRuntimePermissionsBackup(android.os.UserHandle,java.io.InputStream,java.lang.Runnable)>(r14, r1, r3);

        virtualinvoke r16.<java.util.concurrent.CountDownLatch: void await()>();

     label03:
        virtualinvoke r1.<java.io.InputStream: void close()>();

     label04:
        goto label13;

     label05:
        $r11 := @caughtexception;

     label06:
        virtualinvoke r1.<java.io.InputStream: void close()>();

     label07:
        goto label10;

     label08:
        $r10 := @caughtexception;

     label09:
        virtualinvoke $r11.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r10);

     label10:
        throw $r11;

     label11:
        $r12 := @caughtexception;

        $r13 = staticinvoke <android.permission.PermissionControllerService: java.lang.String access$000()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r13, "restoreRuntimePermissionBackup timed out", $r12);

        goto label13;

     label12:
        $r8 := @caughtexception;

        $r9 = staticinvoke <android.permission.PermissionControllerService: java.lang.String access$000()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r9, "Could not open pipe to read backup from", $r8);

     label13:
        return;

        catch java.io.IOException from label01 to label02 with label12;
        catch java.lang.InterruptedException from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.io.IOException from label03 to label04 with label12;
        catch java.lang.InterruptedException from label03 to label04 with label11;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.io.IOException from label09 to label10 with label12;
        catch java.lang.InterruptedException from label09 to label10 with label11;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.lang.InterruptedException from label10 to label11 with label11;
    }

    public void updateUserSensitiveForApp(int, com.android.internal.infra.AndroidFuture)
    {
        android.permission.PermissionControllerService$1 r0;
        int i0;
        com.android.internal.infra.AndroidFuture r1;
        android.permission.PermissionControllerService r2;
        java.lang.Exception $r4;
        android.permission._$$Lambda$PermissionControllerService$1$TbuFGuD1HySgLHbAMINqz_Xt8ZE r5;

        r0 := @this: android.permission.PermissionControllerService$1;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.internal.infra.AndroidFuture;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "callback cannot be null");

     label1:
        r2 = r0.<android.permission.PermissionControllerService$1: android.permission.PermissionControllerService this$0>;

        r5 = new android.permission._$$Lambda$PermissionControllerService$1$TbuFGuD1HySgLHbAMINqz_Xt8ZE;

        specialinvoke r5.<android.permission._$$Lambda$PermissionControllerService$1$TbuFGuD1HySgLHbAMINqz_Xt8ZE: void <init>(com.android.internal.infra.AndroidFuture)>(r1);

        virtualinvoke r2.<android.permission.PermissionControllerService: void onUpdateUserSensitivePermissionFlags(int,java.lang.Runnable)>(i0, r5);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        virtualinvoke r1.<com.android.internal.infra.AndroidFuture: boolean completeExceptionally(java.lang.Throwable)>($r4);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
