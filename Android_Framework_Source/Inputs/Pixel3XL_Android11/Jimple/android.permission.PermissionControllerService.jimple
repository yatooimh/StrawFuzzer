public abstract class android.permission.PermissionControllerService extends android.app.Service
{
    private static final java.lang.String LOG_TAG;
    public static final java.lang.String SERVICE_INTERFACE;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        <android.permission.PermissionControllerService: java.lang.String SERVICE_INTERFACE> = "android.permission.PermissionControllerService";

        $r0 = class "Landroid/permission/PermissionControllerService;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <android.permission.PermissionControllerService: java.lang.String LOG_TAG> = $r1;

        return;
    }

    public void <init>()
    {
        android.permission.PermissionControllerService r0;

        r0 := @this: android.permission.PermissionControllerService;

        specialinvoke r0.<android.app.Service: void <init>()>();

        return;
    }

    static java.lang.String access$000()
    {
        java.lang.String $r0;

        $r0 = <android.permission.PermissionControllerService: java.lang.String LOG_TAG>;

        return $r0;
    }

    static void access$100(android.permission.PermissionControllerService, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        android.permission.PermissionControllerService r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;

        r0 := @parameter0: android.permission.PermissionControllerService;

        r1 := @parameter1: java.io.FileDescriptor;

        r2 := @parameter2: java.io.PrintWriter;

        r3 := @parameter3: java.lang.String[];

        virtualinvoke r0.<android.permission.PermissionControllerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r1, r2, r3);

        return;
    }

    public void onApplyStagedRuntimePermissionBackup(java.lang.String, android.os.UserHandle, java.util.function.Consumer)
    {
        android.permission.PermissionControllerService r0;
        java.lang.String r1;
        android.os.UserHandle r2;
        java.util.function.Consumer r3;

        r0 := @this: android.permission.PermissionControllerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.UserHandle;

        r3 := @parameter2: java.util.function.Consumer;

        virtualinvoke r0.<android.permission.PermissionControllerService: void onRestoreDelayedRuntimePermissionsBackup(java.lang.String,android.os.UserHandle,java.util.function.Consumer)>(r1, r2, r3);

        return;
    }

    public final android.os.IBinder onBind(android.content.Intent)
    {
        android.permission.PermissionControllerService r0;
        android.content.Intent r1;
        android.permission.PermissionControllerService$1 $r2;

        r0 := @this: android.permission.PermissionControllerService;

        r1 := @parameter0: android.content.Intent;

        $r2 = new android.permission.PermissionControllerService$1;

        specialinvoke $r2.<android.permission.PermissionControllerService$1: void <init>(android.permission.PermissionControllerService)>(r0);

        return $r2;
    }

    public abstract void onCountPermissionApps(java.util.List, int, java.util.function.IntConsumer);

    public abstract void onGetAppPermissions(java.lang.String, java.util.function.Consumer);

    public abstract void onGetPermissionUsages(boolean, long, java.util.function.Consumer);

    public abstract void onGetRuntimePermissionsBackup(android.os.UserHandle, java.io.OutputStream, java.lang.Runnable);

    public abstract void onGrantOrUpgradeDefaultRuntimePermissions(java.lang.Runnable);

    public void onOneTimePermissionSessionTimeout(java.lang.String)
    {
        android.permission.PermissionControllerService r0;
        java.lang.String r1;
        java.lang.AbstractMethodError $r2;

        r0 := @this: android.permission.PermissionControllerService;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.AbstractMethodError;

        specialinvoke $r2.<java.lang.AbstractMethodError: void <init>(java.lang.String)>("Must be overridden in implementing class");

        throw $r2;
    }

    public void onRestoreDelayedRuntimePermissionsBackup(java.lang.String, android.os.UserHandle, java.util.function.Consumer)
    {
        android.permission.PermissionControllerService r0;
        java.lang.String r1;
        android.os.UserHandle r2;
        java.util.function.Consumer r3;

        r0 := @this: android.permission.PermissionControllerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.UserHandle;

        r3 := @parameter2: java.util.function.Consumer;

        return;
    }

    public void onRestoreRuntimePermissionsBackup(android.os.UserHandle, java.io.InputStream, java.lang.Runnable)
    {
        android.permission.PermissionControllerService r0;
        android.os.UserHandle r1;
        java.io.InputStream r2;
        java.lang.Runnable r3;

        r0 := @this: android.permission.PermissionControllerService;

        r1 := @parameter0: android.os.UserHandle;

        r2 := @parameter1: java.io.InputStream;

        r3 := @parameter2: java.lang.Runnable;

        return;
    }

    public abstract void onRevokeRuntimePermission(java.lang.String, java.lang.String, java.lang.Runnable);

    public abstract void onRevokeRuntimePermissions(java.util.Map, boolean, int, java.lang.String, java.util.function.Consumer);

    public abstract void onSetRuntimePermissionGrantStateByDeviceAdmin(java.lang.String, java.lang.String, java.lang.String, int, java.util.function.Consumer);

    public void onStageAndApplyRuntimePermissionsBackup(android.os.UserHandle, java.io.InputStream, java.lang.Runnable)
    {
        android.permission.PermissionControllerService r0;
        android.os.UserHandle r1;
        java.io.InputStream r2;
        java.lang.Runnable r3;

        r0 := @this: android.permission.PermissionControllerService;

        r1 := @parameter0: android.os.UserHandle;

        r2 := @parameter1: java.io.InputStream;

        r3 := @parameter2: java.lang.Runnable;

        virtualinvoke r0.<android.permission.PermissionControllerService: void onRestoreRuntimePermissionsBackup(android.os.UserHandle,java.io.InputStream,java.lang.Runnable)>(r1, r2, r3);

        return;
    }

    public void onUpdateUserSensitivePermissionFlags(int, java.lang.Runnable)
    {
        android.permission.PermissionControllerService r0;
        int i0;
        java.lang.Runnable r1;
        java.util.concurrent.Executor $r2;

        r0 := @this: android.permission.PermissionControllerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Runnable;

        $r2 = virtualinvoke r0.<android.permission.PermissionControllerService: java.util.concurrent.Executor getMainExecutor()>();

        virtualinvoke r0.<android.permission.PermissionControllerService: void onUpdateUserSensitivePermissionFlags(int,java.util.concurrent.Executor,java.lang.Runnable)>(i0, $r2, r1);

        return;
    }

    public void onUpdateUserSensitivePermissionFlags(int, java.util.concurrent.Executor, java.lang.Runnable)
    {
        android.permission.PermissionControllerService r0;
        int i0;
        java.util.concurrent.Executor r1;
        java.lang.Runnable r2;
        java.lang.AbstractMethodError $r3;

        r0 := @this: android.permission.PermissionControllerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.concurrent.Executor;

        r2 := @parameter2: java.lang.Runnable;

        $r3 = new java.lang.AbstractMethodError;

        specialinvoke $r3.<java.lang.AbstractMethodError: void <init>(java.lang.String)>("Must be overridden in implementing class");

        throw $r3;
    }
}
