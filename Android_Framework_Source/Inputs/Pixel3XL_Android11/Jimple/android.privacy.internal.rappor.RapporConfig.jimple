public class android.privacy.internal.rappor.RapporConfig extends java.lang.Object implements android.privacy.DifferentialPrivacyConfig
{
    private static final java.lang.String ALGORITHM_NAME;
    final java.lang.String mEncoderId;
    final int mNumBits;
    final int mNumBloomHashes;
    final int mNumCohorts;
    final double mProbabilityF;
    final double mProbabilityP;
    final double mProbabilityQ;

    public void <init>(java.lang.String, int, double, double, double, int, int)
    {
        android.privacy.internal.rappor.RapporConfig r0;
        java.lang.String r1;
        int i0, i1, i2;
        double d0, d1, d2;
        boolean $z0, $z1, z2, z3, z4, z5, z6, z7;
        byte $b3, $b4, $b5, $b6, $b7, $b8;

        r0 := @this: android.privacy.internal.rappor.RapporConfig;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        d2 := @parameter4: double;

        i1 := @parameter5: int;

        i2 := @parameter6: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        $z1 = $z0 ^ 1;

        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "encoderId cannot be empty");

        r0.<android.privacy.internal.rappor.RapporConfig: java.lang.String mEncoderId> = r1;

        if i0 <= 0 goto label01;

        z2 = 1;

        goto label02;

     label01:
        z2 = 0;

     label02:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z2, "numBits needs to be > 0");

        r0.<android.privacy.internal.rappor.RapporConfig: int mNumBits> = i0;

        $b3 = d0 cmpl 0.0;

        if $b3 < 0 goto label03;

        $b6 = d0 cmpg 1.0;

        if $b6 > 0 goto label03;

        z3 = 1;

        goto label04;

     label03:
        z3 = 0;

     label04:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z3, "probabilityF must be in range [0.0, 1.0]");

        r0.<android.privacy.internal.rappor.RapporConfig: double mProbabilityF> = d0;

        $b7 = d1 cmpl 0.0;

        if $b7 < 0 goto label05;

        $b5 = d1 cmpg 1.0;

        if $b5 > 0 goto label05;

        z4 = 1;

        goto label06;

     label05:
        z4 = 0;

     label06:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z4, "probabilityP must be in range [0.0, 1.0]");

        r0.<android.privacy.internal.rappor.RapporConfig: double mProbabilityP> = d1;

        $b8 = d2 cmpl 0.0;

        if $b8 < 0 goto label07;

        $b4 = d2 cmpg 1.0;

        if $b4 > 0 goto label07;

        z5 = 1;

        goto label08;

     label07:
        z5 = 0;

     label08:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z5, "probabilityQ must be in range [0.0, 1.0]");

        r0.<android.privacy.internal.rappor.RapporConfig: double mProbabilityQ> = d2;

        if i1 <= 0 goto label09;

        z6 = 1;

        goto label10;

     label09:
        z6 = 0;

     label10:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z6, "numCohorts needs to be > 0");

        r0.<android.privacy.internal.rappor.RapporConfig: int mNumCohorts> = i1;

        if i2 <= 0 goto label11;

        z7 = 1;

        goto label12;

     label11:
        z7 = 0;

     label12:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z7, "numBloomHashes needs to be > 0");

        r0.<android.privacy.internal.rappor.RapporConfig: int mNumBloomHashes> = i2;

        return;
    }

    public java.lang.String getAlgorithm()
    {
        android.privacy.internal.rappor.RapporConfig r0;

        r0 := @this: android.privacy.internal.rappor.RapporConfig;

        return "Rappor";
    }

    public java.lang.String toString()
    {
        android.privacy.internal.rappor.RapporConfig r0;
        java.lang.Object[] $r1;
        java.lang.String $r2, $r9;
        int $i0, $i1, $i2;
        java.lang.Integer $r3, $r7, $r8;
        double $d0, $d1, $d2;
        java.lang.Double $r4, $r5, $r6;

        r0 := @this: android.privacy.internal.rappor.RapporConfig;

        $r1 = newarray (java.lang.Object)[7];

        $r2 = r0.<android.privacy.internal.rappor.RapporConfig: java.lang.String mEncoderId>;

        $r1[0] = $r2;

        $i0 = r0.<android.privacy.internal.rappor.RapporConfig: int mNumBits>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[1] = $r3;

        $d0 = r0.<android.privacy.internal.rappor.RapporConfig: double mProbabilityF>;

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r1[2] = $r4;

        $d1 = r0.<android.privacy.internal.rappor.RapporConfig: double mProbabilityP>;

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r1[3] = $r5;

        $d2 = r0.<android.privacy.internal.rappor.RapporConfig: double mProbabilityQ>;

        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        $r1[4] = $r6;

        $i1 = r0.<android.privacy.internal.rappor.RapporConfig: int mNumCohorts>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r1[5] = $r7;

        $i2 = r0.<android.privacy.internal.rappor.RapporConfig: int mNumBloomHashes>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r1[6] = $r8;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("EncoderId: %s, NumBits: %d, ProbabilityF: %.3f, ProbabilityP: %.3f, ProbabilityQ: %.3f, NumCohorts: %d, NumBloomHashes: %d", $r1);

        return $r9;
    }

    public static void <clinit>()
    {
        <android.privacy.internal.rappor.RapporConfig: java.lang.String ALGORITHM_NAME> = "Rappor";

        return;
    }
}
