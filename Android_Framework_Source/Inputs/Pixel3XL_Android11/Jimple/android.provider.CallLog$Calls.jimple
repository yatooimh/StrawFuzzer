public class android.provider.CallLog$Calls extends java.lang.Object implements android.provider.BaseColumns
{
    public static final java.lang.String ADD_FOR_ALL_USERS;
    public static final java.lang.String ALLOW_VOICEMAILS_PARAM_KEY;
    public static final int ANSWERED_EXTERNALLY_TYPE;
    public static final int BLOCKED_TYPE;
    public static final java.lang.String BLOCK_REASON;
    public static final int BLOCK_REASON_BLOCKED_NUMBER;
    public static final int BLOCK_REASON_CALL_SCREENING_SERVICE;
    public static final int BLOCK_REASON_DIRECT_TO_VOICEMAIL;
    public static final int BLOCK_REASON_NOT_BLOCKED;
    public static final int BLOCK_REASON_NOT_IN_CONTACTS;
    public static final int BLOCK_REASON_PAY_PHONE;
    public static final int BLOCK_REASON_RESTRICTED_NUMBER;
    public static final int BLOCK_REASON_UNKNOWN_NUMBER;
    public static final java.lang.String CACHED_FORMATTED_NUMBER;
    public static final java.lang.String CACHED_LOOKUP_URI;
    public static final java.lang.String CACHED_MATCHED_NUMBER;
    public static final java.lang.String CACHED_NAME;
    public static final java.lang.String CACHED_NORMALIZED_NUMBER;
    public static final java.lang.String CACHED_NUMBER_LABEL;
    public static final java.lang.String CACHED_NUMBER_TYPE;
    public static final java.lang.String CACHED_PHOTO_ID;
    public static final java.lang.String CACHED_PHOTO_URI;
    public static final java.lang.String CALL_SCREENING_APP_NAME;
    public static final java.lang.String CALL_SCREENING_COMPONENT_NAME;
    public static final android.net.Uri CONTENT_FILTER_URI;
    public static final java.lang.String CONTENT_ITEM_TYPE;
    public static final java.lang.String CONTENT_TYPE;
    public static final android.net.Uri CONTENT_URI;
    public static final android.net.Uri CONTENT_URI_WITH_VOICEMAIL;
    public static final java.lang.String COUNTRY_ISO;
    public static final java.lang.String DATA_USAGE;
    public static final java.lang.String DATE;
    public static final java.lang.String DEFAULT_SORT_ORDER;
    public static final java.lang.String DURATION;
    public static final java.lang.String EXTRA_CALL_TYPE_FILTER;
    public static final java.lang.String FEATURES;
    public static final int FEATURES_ASSISTED_DIALING_USED;
    public static final int FEATURES_HD_CALL;
    public static final int FEATURES_PULLED_EXTERNALLY;
    public static final int FEATURES_RTT;
    public static final int FEATURES_VIDEO;
    public static final int FEATURES_VOLTE;
    public static final int FEATURES_WIFI;
    public static final java.lang.String GEOCODED_LOCATION;
    public static final int INCOMING_TYPE;
    public static final java.lang.String IS_READ;
    public static final java.lang.String LAST_MODIFIED;
    public static final java.lang.String LIMIT_PARAM_KEY;
    private static final int MIN_DURATION_FOR_NORMALIZED_NUMBER_UPDATE_MS;
    public static final int MISSED_TYPE;
    public static final java.lang.String NEW;
    public static final java.lang.String NUMBER;
    public static final java.lang.String NUMBER_PRESENTATION;
    public static final java.lang.String OFFSET_PARAM_KEY;
    public static final int OUTGOING_TYPE;
    public static final java.lang.String PHONE_ACCOUNT_ADDRESS;
    public static final java.lang.String PHONE_ACCOUNT_COMPONENT_NAME;
    public static final java.lang.String PHONE_ACCOUNT_HIDDEN;
    public static final java.lang.String PHONE_ACCOUNT_ID;
    public static final java.lang.String POST_DIAL_DIGITS;
    public static final int PRESENTATION_ALLOWED;
    public static final int PRESENTATION_PAYPHONE;
    public static final int PRESENTATION_RESTRICTED;
    public static final int PRESENTATION_UNKNOWN;
    public static final int REJECTED_TYPE;
    public static final android.net.Uri SHADOW_CONTENT_URI;
    public static final java.lang.String SUB_ID;
    public static final java.lang.String TRANSCRIPTION;
    public static final java.lang.String TRANSCRIPTION_STATE;
    public static final java.lang.String TYPE;
    public static final java.lang.String VIA_NUMBER;
    public static final int VOICEMAIL_TYPE;
    public static final java.lang.String VOICEMAIL_URI;

    static void <clinit>()
    {
        android.net.Uri $r0, $r1, $r2, $r3, $r6;
        android.net.Uri$Builder $r4, $r5;

        <android.provider.CallLog$Calls: java.lang.String VOICEMAIL_URI> = "voicemail_uri";

        <android.provider.CallLog$Calls: int VOICEMAIL_TYPE> = 4;

        <android.provider.CallLog$Calls: java.lang.String VIA_NUMBER> = "via_number";

        <android.provider.CallLog$Calls: java.lang.String TYPE> = "type";

        <android.provider.CallLog$Calls: java.lang.String TRANSCRIPTION_STATE> = "transcription_state";

        <android.provider.CallLog$Calls: java.lang.String TRANSCRIPTION> = "transcription";

        <android.provider.CallLog$Calls: java.lang.String SUB_ID> = "sub_id";

        <android.provider.CallLog$Calls: int REJECTED_TYPE> = 5;

        <android.provider.CallLog$Calls: int PRESENTATION_UNKNOWN> = 3;

        <android.provider.CallLog$Calls: int PRESENTATION_RESTRICTED> = 2;

        <android.provider.CallLog$Calls: int PRESENTATION_PAYPHONE> = 4;

        <android.provider.CallLog$Calls: int PRESENTATION_ALLOWED> = 1;

        <android.provider.CallLog$Calls: java.lang.String POST_DIAL_DIGITS> = "post_dial_digits";

        <android.provider.CallLog$Calls: java.lang.String PHONE_ACCOUNT_ID> = "subscription_id";

        <android.provider.CallLog$Calls: java.lang.String PHONE_ACCOUNT_HIDDEN> = "phone_account_hidden";

        <android.provider.CallLog$Calls: java.lang.String PHONE_ACCOUNT_COMPONENT_NAME> = "subscription_component_name";

        <android.provider.CallLog$Calls: java.lang.String PHONE_ACCOUNT_ADDRESS> = "phone_account_address";

        <android.provider.CallLog$Calls: int OUTGOING_TYPE> = 2;

        <android.provider.CallLog$Calls: java.lang.String OFFSET_PARAM_KEY> = "offset";

        <android.provider.CallLog$Calls: java.lang.String NUMBER_PRESENTATION> = "presentation";

        <android.provider.CallLog$Calls: java.lang.String NUMBER> = "number";

        <android.provider.CallLog$Calls: java.lang.String NEW> = "new";

        <android.provider.CallLog$Calls: int MISSED_TYPE> = 3;

        <android.provider.CallLog$Calls: int MIN_DURATION_FOR_NORMALIZED_NUMBER_UPDATE_MS> = 10000;

        <android.provider.CallLog$Calls: java.lang.String LIMIT_PARAM_KEY> = "limit";

        <android.provider.CallLog$Calls: java.lang.String LAST_MODIFIED> = "last_modified";

        <android.provider.CallLog$Calls: java.lang.String IS_READ> = "is_read";

        <android.provider.CallLog$Calls: int INCOMING_TYPE> = 1;

        <android.provider.CallLog$Calls: java.lang.String GEOCODED_LOCATION> = "geocoded_location";

        <android.provider.CallLog$Calls: int FEATURES_WIFI> = 8;

        <android.provider.CallLog$Calls: int FEATURES_VOLTE> = 64;

        <android.provider.CallLog$Calls: int FEATURES_VIDEO> = 1;

        <android.provider.CallLog$Calls: int FEATURES_RTT> = 32;

        <android.provider.CallLog$Calls: int FEATURES_PULLED_EXTERNALLY> = 2;

        <android.provider.CallLog$Calls: int FEATURES_HD_CALL> = 4;

        <android.provider.CallLog$Calls: int FEATURES_ASSISTED_DIALING_USED> = 16;

        <android.provider.CallLog$Calls: java.lang.String FEATURES> = "features";

        <android.provider.CallLog$Calls: java.lang.String EXTRA_CALL_TYPE_FILTER> = "android.provider.extra.CALL_TYPE_FILTER";

        <android.provider.CallLog$Calls: java.lang.String DURATION> = "duration";

        <android.provider.CallLog$Calls: java.lang.String DEFAULT_SORT_ORDER> = "date DESC";

        <android.provider.CallLog$Calls: java.lang.String DATE> = "date";

        <android.provider.CallLog$Calls: java.lang.String DATA_USAGE> = "data_usage";

        <android.provider.CallLog$Calls: java.lang.String COUNTRY_ISO> = "countryiso";

        <android.provider.CallLog$Calls: java.lang.String CONTENT_TYPE> = "vnd.android.cursor.dir/calls";

        <android.provider.CallLog$Calls: java.lang.String CONTENT_ITEM_TYPE> = "vnd.android.cursor.item/calls";

        <android.provider.CallLog$Calls: java.lang.String CALL_SCREENING_COMPONENT_NAME> = "call_screening_component_name";

        <android.provider.CallLog$Calls: java.lang.String CALL_SCREENING_APP_NAME> = "call_screening_app_name";

        <android.provider.CallLog$Calls: java.lang.String CACHED_PHOTO_URI> = "photo_uri";

        <android.provider.CallLog$Calls: java.lang.String CACHED_PHOTO_ID> = "photo_id";

        <android.provider.CallLog$Calls: java.lang.String CACHED_NUMBER_TYPE> = "numbertype";

        <android.provider.CallLog$Calls: java.lang.String CACHED_NUMBER_LABEL> = "numberlabel";

        <android.provider.CallLog$Calls: java.lang.String CACHED_NORMALIZED_NUMBER> = "normalized_number";

        <android.provider.CallLog$Calls: java.lang.String CACHED_NAME> = "name";

        <android.provider.CallLog$Calls: java.lang.String CACHED_MATCHED_NUMBER> = "matched_number";

        <android.provider.CallLog$Calls: java.lang.String CACHED_LOOKUP_URI> = "lookup_uri";

        <android.provider.CallLog$Calls: java.lang.String CACHED_FORMATTED_NUMBER> = "formatted_number";

        <android.provider.CallLog$Calls: int BLOCK_REASON_UNKNOWN_NUMBER> = 4;

        <android.provider.CallLog$Calls: int BLOCK_REASON_RESTRICTED_NUMBER> = 5;

        <android.provider.CallLog$Calls: int BLOCK_REASON_PAY_PHONE> = 6;

        <android.provider.CallLog$Calls: int BLOCK_REASON_NOT_IN_CONTACTS> = 7;

        <android.provider.CallLog$Calls: int BLOCK_REASON_NOT_BLOCKED> = 0;

        <android.provider.CallLog$Calls: int BLOCK_REASON_DIRECT_TO_VOICEMAIL> = 2;

        <android.provider.CallLog$Calls: int BLOCK_REASON_CALL_SCREENING_SERVICE> = 1;

        <android.provider.CallLog$Calls: int BLOCK_REASON_BLOCKED_NUMBER> = 3;

        <android.provider.CallLog$Calls: java.lang.String BLOCK_REASON> = "block_reason";

        <android.provider.CallLog$Calls: int BLOCKED_TYPE> = 6;

        <android.provider.CallLog$Calls: int ANSWERED_EXTERNALLY_TYPE> = 7;

        <android.provider.CallLog$Calls: java.lang.String ALLOW_VOICEMAILS_PARAM_KEY> = "allow_voicemails";

        <android.provider.CallLog$Calls: java.lang.String ADD_FOR_ALL_USERS> = "add_for_all_users";

        $r0 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>("content://call_log/calls");

        <android.provider.CallLog$Calls: android.net.Uri CONTENT_URI> = $r0;

        $r1 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>("content://call_log_shadow/calls");

        <android.provider.CallLog$Calls: android.net.Uri SHADOW_CONTENT_URI> = $r1;

        $r2 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>("content://call_log/calls/filter");

        <android.provider.CallLog$Calls: android.net.Uri CONTENT_FILTER_URI> = $r2;

        $r3 = <android.provider.CallLog$Calls: android.net.Uri CONTENT_URI>;

        $r4 = virtualinvoke $r3.<android.net.Uri: android.net.Uri$Builder buildUpon()>();

        $r5 = virtualinvoke $r4.<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>("allow_voicemails", "true");

        $r6 = virtualinvoke $r5.<android.net.Uri$Builder: android.net.Uri build()>();

        <android.provider.CallLog$Calls: android.net.Uri CONTENT_URI_WITH_VOICEMAIL> = $r6;

        return;
    }

    public void <init>()
    {
        android.provider.CallLog$Calls r0;

        r0 := @this: android.provider.CallLog$Calls;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static android.net.Uri addCall(android.telecom.CallerInfo, android.content.Context, java.lang.String, int, int, int, android.telecom.PhoneAccountHandle, long, int, java.lang.Long)
    {
        android.telecom.CallerInfo r0;
        android.content.Context r1;
        java.lang.String r2;
        int i0, i1, i2, i4;
        android.telecom.PhoneAccountHandle r3;
        long l3;
        java.lang.Long r4;
        android.net.Uri $r5;

        r0 := @parameter0: android.telecom.CallerInfo;

        r1 := @parameter1: android.content.Context;

        r2 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        r3 := @parameter6: android.telecom.PhoneAccountHandle;

        l3 := @parameter7: long;

        i4 := @parameter8: int;

        r4 := @parameter9: java.lang.Long;

        $r5 = staticinvoke <android.provider.CallLog$Calls: android.net.Uri addCall(android.telecom.CallerInfo,android.content.Context,java.lang.String,java.lang.String,java.lang.String,int,int,int,android.telecom.PhoneAccountHandle,long,int,java.lang.Long,boolean,android.os.UserHandle,boolean,int,java.lang.CharSequence,java.lang.String)>(r0, r1, r2, "", "", i0, i1, i2, r3, l3, i4, r4, 0, null, 0, 0, null, null);

        return $r5;
    }

    public static android.net.Uri addCall(android.telecom.CallerInfo, android.content.Context, java.lang.String, java.lang.String, java.lang.String, int, int, int, android.telecom.PhoneAccountHandle, long, int, java.lang.Long, boolean, android.os.UserHandle)
    {
        android.telecom.CallerInfo r0;
        android.content.Context r1;
        java.lang.String r2, r3, r4;
        int i0, i1, i2, i4;
        android.telecom.PhoneAccountHandle r5;
        long l3;
        java.lang.Long r6;
        boolean z0;
        android.os.UserHandle r7;
        android.net.Uri $r8;

        r0 := @parameter0: android.telecom.CallerInfo;

        r1 := @parameter1: android.content.Context;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String;

        i0 := @parameter5: int;

        i1 := @parameter6: int;

        i2 := @parameter7: int;

        r5 := @parameter8: android.telecom.PhoneAccountHandle;

        l3 := @parameter9: long;

        i4 := @parameter10: int;

        r6 := @parameter11: java.lang.Long;

        z0 := @parameter12: boolean;

        r7 := @parameter13: android.os.UserHandle;

        $r8 = staticinvoke <android.provider.CallLog$Calls: android.net.Uri addCall(android.telecom.CallerInfo,android.content.Context,java.lang.String,java.lang.String,java.lang.String,int,int,int,android.telecom.PhoneAccountHandle,long,int,java.lang.Long,boolean,android.os.UserHandle,boolean,int,java.lang.CharSequence,java.lang.String)>(r0, r1, r2, r3, r4, i0, i1, i2, r5, l3, i4, r6, z0, r7, 0, 0, null, null);

        return $r8;
    }

    public static android.net.Uri addCall(android.telecom.CallerInfo, android.content.Context, java.lang.String, java.lang.String, java.lang.String, int, int, int, android.telecom.PhoneAccountHandle, long, int, java.lang.Long, boolean, android.os.UserHandle, boolean, int, java.lang.CharSequence, java.lang.String)
    {
        android.content.Context r0;
        java.lang.Long r1, $r11, $r12;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7, $z8;
        android.os.UserHandle r2, $r17, r58, r60;
        int i0, $i4, i5, i6, i7, i9, i10, i13, i14, i15, i16, i17, i18;
        java.lang.CharSequence r3;
        java.lang.String r4, r6, $r16, $r18, $r19, $r22, $r23, $r25, $r28, $r29, $r32, r38, r39, r40, r42, r43, r44, r46, r49, r51;
        android.content.ContentResolver r5;
        android.content.ContentValues $r7;
        java.lang.Integer $r8, $r9, $r10, $r13, $r14, $r15, $r33;
        long $l1, $l2, l8, l11, l12;
        java.lang.Object $r20, $r54;
        android.content.pm.UserInfo $r21;
        byte $b3;
        android.net.Uri $r24, r47, r50, r53, r56, r59;
        java.lang.String[] $r26, $r27, $r30, $r31;
        android.content.ComponentName $r34;
        java.lang.Throwable $r35, $r36, r52;
        android.telecom.CallerInfo r37;
        android.telecom.PhoneAccountHandle r41;
        android.database.Cursor r48;
        android.os.UserManager r55;
        java.util.List r57;

        r37 := @parameter0: android.telecom.CallerInfo;

        r0 := @parameter1: android.content.Context;

        r38 := @parameter2: java.lang.String;

        r39 := @parameter3: java.lang.String;

        r40 := @parameter4: java.lang.String;

        i5 := @parameter5: int;

        i6 := @parameter6: int;

        i7 := @parameter7: int;

        r41 := @parameter8: android.telecom.PhoneAccountHandle;

        l8 := @parameter9: long;

        i9 := @parameter10: int;

        r1 := @parameter11: java.lang.Long;

        z0 := @parameter12: boolean;

        r2 := @parameter13: android.os.UserHandle;

        z1 := @parameter14: boolean;

        i0 := @parameter15: int;

        r3 := @parameter16: java.lang.CharSequence;

        r4 := @parameter17: java.lang.String;

        r5 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r6 = staticinvoke <android.provider.CallLog$Calls: java.lang.String getLogAccountAddress(android.content.Context,android.telecom.PhoneAccountHandle)>(r0, r41);

        i10 = staticinvoke <android.provider.CallLog$Calls: int getLogNumberPresentation(java.lang.String,int)>(r38, i5);

        if r37 == null goto label01;

        r42 = virtualinvoke r37.<android.telecom.CallerInfo: java.lang.String getName()>();

        goto label02;

     label01:
        r42 = "";

     label02:
        if i10 == 1 goto label04;

        if r37 == null goto label03;

        r38 = "";

        r42 = "";

        goto label04;

     label03:
        r38 = "";

        goto label04;

     label04:
        if r41 == null goto label05;

        $r34 = virtualinvoke r41.<android.telecom.PhoneAccountHandle: android.content.ComponentName getComponentName()>();

        r43 = virtualinvoke $r34.<android.content.ComponentName: java.lang.String flattenToString()>();

        r44 = virtualinvoke r41.<android.telecom.PhoneAccountHandle: java.lang.String getId()>();

        goto label06;

     label05:
        r43 = null;

        r44 = null;

     label06:
        $r7 = new android.content.ContentValues;

        specialinvoke $r7.<android.content.ContentValues: void <init>(int)>(6);

        virtualinvoke $r7.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("number", r38);

        virtualinvoke $r7.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("post_dial_digits", r39);

        virtualinvoke $r7.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("via_number", r40);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i10);

        virtualinvoke $r7.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("presentation", $r8);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i6);

        virtualinvoke $r7.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("type", $r9);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i7);

        virtualinvoke $r7.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("features", $r10);

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l8);

        virtualinvoke $r7.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("date", $r11);

        $l1 = (long) i9;

        $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        virtualinvoke $r7.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("duration", $r12);

        if r1 == null goto label07;

        virtualinvoke $r7.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("data_usage", r1);

     label07:
        virtualinvoke $r7.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("subscription_component_name", r43);

        virtualinvoke $r7.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("subscription_id", r44);

        virtualinvoke $r7.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("phone_account_address", r6);

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke $r7.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("new", $r13);

        virtualinvoke $r7.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("name", r42);

        i17 = (int) z0;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i17);

        virtualinvoke $r7.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("add_for_all_users", $r14);

        if i6 != 3 goto label08;

        i18 = (int) z1;

        $r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i18);

        virtualinvoke $r7.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("is_read", $r33);

     label08:
        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r7.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("block_reason", $r15);

        $r16 = staticinvoke <android.provider.CallLog$Calls: java.lang.String charSequenceToString(java.lang.CharSequence)>(r3);

        virtualinvoke $r7.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("call_screening_app_name", $r16);

        virtualinvoke $r7.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("call_screening_component_name", r4);

        if r37 == null goto label26;

        $l2 = virtualinvoke r37.<android.telecom.CallerInfo: long getContactId()>();

        $b3 = $l2 cmp 0L;

        if $b3 <= 0 goto label26;

        $r22 = r37.<android.telecom.CallerInfo: java.lang.String normalizedNumber>;

        if $r22 == null goto label09;

        r46 = r37.<android.telecom.CallerInfo: java.lang.String normalizedNumber>;

        r47 = <android.provider.ContactsContract$CommonDataKinds$Phone: android.net.Uri CONTENT_URI>;

        l11 = virtualinvoke r37.<android.telecom.CallerInfo: long getContactId()>();

        $r30 = newarray (java.lang.String)[1];

        $r30[0] = "_id";

        $r31 = newarray (java.lang.String)[2];

        $r32 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l11);

        $r31[0] = $r32;

        $r31[1] = r46;

        r48 = virtualinvoke r5.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>(r47, $r30, "contact_id =? AND data4 =?", $r31, null);

        goto label12;

     label09:
        $r23 = virtualinvoke r37.<android.telecom.CallerInfo: java.lang.String getPhoneNumber()>();

        if $r23 == null goto label10;

        r49 = virtualinvoke r37.<android.telecom.CallerInfo: java.lang.String getPhoneNumber()>();

        goto label11;

     label10:
        r49 = r38;

     label11:
        $r24 = <android.provider.ContactsContract$CommonDataKinds$Callable: android.net.Uri CONTENT_FILTER_URI>;

        $r25 = staticinvoke <android.net.Uri: java.lang.String encode(java.lang.String)>(r49);

        r50 = staticinvoke <android.net.Uri: android.net.Uri withAppendedPath(android.net.Uri,java.lang.String)>($r24, $r25);

        l12 = virtualinvoke r37.<android.telecom.CallerInfo: long getContactId()>();

        $r26 = newarray (java.lang.String)[1];

        $r26[0] = "_id";

        $r27 = newarray (java.lang.String)[1];

        $r28 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l12);

        $r27[0] = $r28;

        r48 = virtualinvoke r5.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>(r50, $r26, "contact_id =?", $r27, null);

     label12:
        if r48 == null goto label25;

     label13:
        $i4 = interfaceinvoke r48.<android.database.Cursor: int getCount()>();

        if $i4 <= 0 goto label22;

        $z8 = interfaceinvoke r48.<android.database.Cursor: boolean moveToFirst()>();

        if $z8 == 0 goto label22;

        r51 = interfaceinvoke r48.<android.database.Cursor: java.lang.String getString(int)>(0);

        staticinvoke <android.provider.CallLog$Calls: void updateDataUsageStatForData(android.content.ContentResolver,java.lang.String)>(r5, r51);

     label14:
        if i9 < 10000 goto label21;

        if i6 != 2 goto label21;

     label15:
        $r29 = r37.<android.telecom.CallerInfo: java.lang.String normalizedNumber>;

        z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r29);

     label16:
        if z2 == 0 goto label20;

     label17:
        staticinvoke <android.provider.CallLog$Calls: void updateNormalizedNumber(android.content.Context,android.content.ContentResolver,java.lang.String,java.lang.String)>(r0, r5, r51, r38);

     label18:
        goto label22;

     label19:
        $r36 := @caughtexception;

        r52 = $r36;

        goto label24;

     label20:
        goto label22;

     label21:
        goto label22;

     label22:
        interfaceinvoke r48.<android.database.Cursor: void close()>();

        goto label26;

     label23:
        $r35 := @caughtexception;

        r52 = $r35;

     label24:
        interfaceinvoke r48.<android.database.Cursor: void close()>();

        throw r52;

     label25:
        goto label26;

     label26:
        r53 = null;

        $r54 = virtualinvoke r0.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/UserManager;");

        r55 = (android.os.UserManager) $r54;

        i13 = virtualinvoke r55.<android.os.UserManager: int getUserHandle()>();

        if z0 == 0 goto label35;

        $r17 = <android.os.UserHandle: android.os.UserHandle SYSTEM>;

        r56 = staticinvoke <android.provider.CallLog$Calls: android.net.Uri addEntryAndRemoveExpiredEntries(android.content.Context,android.os.UserManager,android.os.UserHandle,android.content.ContentValues)>(r0, r55, $r17, $r7);

        if r56 == null goto label34;

        $r18 = "call_log_shadow";

        $r19 = virtualinvoke r56.<android.net.Uri: java.lang.String getAuthority()>();

        $z3 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>($r19);

        if $z3 == 0 goto label27;

        goto label34;

     label27:
        if i13 != 0 goto label28;

        r53 = r56;

     label28:
        r57 = virtualinvoke r55.<android.os.UserManager: java.util.List getUsers(boolean)>(1);

        i14 = interfaceinvoke r57.<java.util.List: int size()>();

        i15 = 0;

     label29:
        if i15 >= i14 goto label33;

        $r20 = interfaceinvoke r57.<java.util.List: java.lang.Object get(int)>(i15);

        $r21 = (android.content.pm.UserInfo) $r20;

        r58 = virtualinvoke $r21.<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>();

        i16 = virtualinvoke r58.<android.os.UserHandle: int getIdentifier()>();

        $z4 = virtualinvoke r58.<android.os.UserHandle: boolean isSystem()>();

        if $z4 == 0 goto label30;

        goto label32;

     label30:
        $z5 = staticinvoke <android.provider.CallLog$Calls: boolean shouldHaveSharedCallLogEntries(android.content.Context,android.os.UserManager,int)>(r0, r55, i16);

        if $z5 != 0 goto label31;

        goto label32;

     label31:
        $z6 = virtualinvoke r55.<android.os.UserManager: boolean isUserRunning(android.os.UserHandle)>(r58);

        if $z6 == 0 goto label32;

        $z7 = virtualinvoke r55.<android.os.UserManager: boolean isUserUnlocked(android.os.UserHandle)>(r58);

        if $z7 == 0 goto label32;

        r59 = staticinvoke <android.provider.CallLog$Calls: android.net.Uri addEntryAndRemoveExpiredEntries(android.content.Context,android.os.UserManager,android.os.UserHandle,android.content.ContentValues)>(r0, r55, r58, $r7);

        if i16 != i13 goto label32;

        r53 = r59;

        goto label32;

     label32:
        i15 = i15 + 1;

        goto label29;

     label33:
        goto label38;

     label34:
        return null;

     label35:
        if r2 == null goto label36;

        r60 = r2;

        goto label37;

     label36:
        r60 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i13);

     label37:
        r53 = staticinvoke <android.provider.CallLog$Calls: android.net.Uri addEntryAndRemoveExpiredEntries(android.content.Context,android.os.UserManager,android.os.UserHandle,android.content.ContentValues)>(r0, r55, r60, $r7);

     label38:
        return r53;

        catch java.lang.Throwable from label13 to label14 with label23;
        catch java.lang.Throwable from label15 to label16 with label23;
        catch java.lang.Throwable from label17 to label18 with label19;
    }

    private static android.net.Uri addEntryAndRemoveExpiredEntries(android.content.Context, android.os.UserManager, android.os.UserHandle, android.content.ContentValues)
    {
        android.content.ContentValues r0;
        android.content.ContentResolver r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        int $i0;
        java.lang.String $r2, $r3, $r5, $r6, $r9, r17;
        java.lang.String[] $r4;
        java.lang.Throwable $r10;
        android.content.Context r11;
        android.os.UserManager r12;
        android.os.UserHandle r13;
        android.net.Uri r14, r15, r16;
        java.lang.StringBuilder r18;

        r11 := @parameter0: android.content.Context;

        r12 := @parameter1: android.os.UserManager;

        r13 := @parameter2: android.os.UserHandle;

        r0 := @parameter3: android.content.ContentValues;

        r1 = virtualinvoke r11.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $z0 = virtualinvoke r12.<android.os.UserManager: boolean isUserUnlocked(android.os.UserHandle)>(r13);

        if $z0 == 0 goto label01;

        r14 = <android.provider.CallLog$Calls: android.net.Uri CONTENT_URI>;

        goto label02;

     label01:
        r14 = <android.provider.CallLog$Calls: android.net.Uri SHADOW_CONTENT_URI>;

     label02:
        $i0 = virtualinvoke r13.<android.os.UserHandle: int getIdentifier()>();

        r15 = staticinvoke <android.content.ContentProvider: android.net.Uri maybeAddUserId(android.net.Uri,int)>(r14, $i0);

     label03:
        r16 = virtualinvoke r1.<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>(r15, r0);

     label04:
        if r16 == null goto label09;

     label05:
        r17 = virtualinvoke r16.<android.net.Uri: java.lang.String getLastPathSegment()>();

     label06:
        if r17 == null goto label08;

     label07:
        $z5 = virtualinvoke r17.<java.lang.String: boolean equals(java.lang.Object)>("0");

        if $z5 == 0 goto label08;

        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to insert into call log due to appops denial; resultUri=");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r16);

        $r9 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("CallLog", $r9);

     label08:
        goto label10;

     label09:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("CallLog", "Failed to insert into call log; null result uri.");

     label10:
        $z1 = virtualinvoke r0.<android.content.ContentValues: boolean containsKey(java.lang.String)>("subscription_id");

        if $z1 == 0 goto label12;

        $r2 = virtualinvoke r0.<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>("subscription_id");

        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r2);

        if $z2 != 0 goto label12;

        $z3 = virtualinvoke r0.<android.content.ContentValues: boolean containsKey(java.lang.String)>("subscription_component_name");

        if $z3 == 0 goto label12;

        $r3 = virtualinvoke r0.<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>("subscription_component_name");

        $z4 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r3);

        if $z4 != 0 goto label12;

        $r4 = newarray (java.lang.String)[2];

        $r5 = virtualinvoke r0.<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>("subscription_component_name");

        $r4[0] = $r5;

        $r6 = virtualinvoke r0.<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>("subscription_id");

        $r4[1] = $r6;

        virtualinvoke r1.<android.content.ContentResolver: int delete(android.net.Uri,java.lang.String,java.lang.String[])>(r15, "_id IN (SELECT _id FROM calls WHERE subscription_component_name = ? AND subscription_id = ? ORDER BY date DESC LIMIT -1 OFFSET 500)", $r4);

     label11:
        goto label13;

     label12:
        virtualinvoke r1.<android.content.ContentResolver: int delete(android.net.Uri,java.lang.String,java.lang.String[])>(r15, "_id IN (SELECT _id FROM calls ORDER BY date DESC LIMIT -1 OFFSET 500)", null);

     label13:
        return r16;

     label14:
        $r10 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("CallLog", "Failed to insert calllog", $r10);

        return null;

        catch java.lang.IllegalArgumentException from label03 to label04 with label14;
        catch java.lang.IllegalArgumentException from label05 to label06 with label14;
        catch java.lang.IllegalArgumentException from label07 to label08 with label14;
        catch java.lang.IllegalArgumentException from label09 to label10 with label14;
        catch java.lang.IllegalArgumentException from label10 to label11 with label14;
        catch java.lang.IllegalArgumentException from label12 to label13 with label14;
    }

    private static java.lang.String charSequenceToString(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        java.lang.String r1;

        r0 := @parameter0: java.lang.CharSequence;

        if r0 != null goto label1;

        r1 = null;

        goto label2;

     label1:
        r1 = interfaceinvoke r0.<java.lang.CharSequence: java.lang.String toString()>();

     label2:
        return r1;
    }

    private static java.lang.String getCurrentCountryIso(android.content.Context)
    {
        java.lang.Object $r0;
        android.content.Context r1;
        android.location.CountryDetector r2;
        java.lang.String r3;
        android.location.Country r4;

        r1 := @parameter0: android.content.Context;

        $r0 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("country_detector");

        r2 = (android.location.CountryDetector) $r0;

        r3 = null;

        if r2 == null goto label1;

        r4 = virtualinvoke r2.<android.location.CountryDetector: android.location.Country detectCountry()>();

        r3 = null;

        if r4 == null goto label1;

        r3 = virtualinvoke r4.<android.location.Country: java.lang.String getCountryIso()>();

     label1:
        return r3;
    }

    public static java.lang.String getLastOutgoingCall(android.content.Context)
    {
        java.lang.String r0;
        java.lang.String[] $r1;
        android.net.Uri $r2;
        boolean $z0;
        java.lang.Throwable $r3;
        android.content.Context r4;
        android.content.ContentResolver r5;
        android.database.Cursor r6, r7;

        r4 := @parameter0: android.content.Context;

        r5 = virtualinvoke r4.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r6 = null;

     label01:
        $r2 = <android.provider.CallLog$Calls: android.net.Uri CONTENT_URI>;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = "number";

        r7 = virtualinvoke r5.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>($r2, $r1, "type = 2", null, "date DESC LIMIT 1");

     label02:
        if r7 == null goto label09;

        r6 = r7;

     label03:
        $z0 = interfaceinvoke r7.<android.database.Cursor: boolean moveToFirst()>();

        if $z0 != 0 goto label05;

     label04:
        goto label09;

     label05:
        r6 = r7;

     label06:
        r0 = interfaceinvoke r7.<android.database.Cursor: java.lang.String getString(int)>(0);

     label07:
        if r7 == null goto label08;

        interfaceinvoke r7.<android.database.Cursor: void close()>();

     label08:
        return r0;

     label09:
        if r7 == null goto label10;

        interfaceinvoke r7.<android.database.Cursor: void close()>();

     label10:
        return "";

     label11:
        $r3 := @caughtexception;

        if r6 == null goto label12;

        interfaceinvoke r6.<android.database.Cursor: void close()>();

     label12:
        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
    }

    private static java.lang.String getLogAccountAddress(android.content.Context, android.telecom.PhoneAccountHandle)
    {
        java.lang.Throwable $r0;
        android.content.Context r1;
        android.telecom.PhoneAccountHandle r2;
        android.telecom.TelecomManager r3, r4;
        java.lang.String r5;
        android.telecom.PhoneAccount r6;
        android.net.Uri r7;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.telecom.PhoneAccountHandle;

        r3 = null;

     label1:
        r4 = staticinvoke <android.telecom.TelecomManager: android.telecom.TelecomManager 'from'(android.content.Context)>(r1);

     label2:
        r3 = r4;

        goto label4;

     label3:
        $r0 := @caughtexception;

     label4:
        r5 = null;

        if r3 == null goto label5;

        r5 = null;

        if r2 == null goto label5;

        r6 = virtualinvoke r3.<android.telecom.TelecomManager: android.telecom.PhoneAccount getPhoneAccount(android.telecom.PhoneAccountHandle)>(r2);

        r5 = null;

        if r6 == null goto label5;

        r7 = virtualinvoke r6.<android.telecom.PhoneAccount: android.net.Uri getSubscriptionAddress()>();

        r5 = null;

        if r7 == null goto label5;

        r5 = virtualinvoke r7.<android.net.Uri: java.lang.String getSchemeSpecificPart()>();

     label5:
        return r5;

        catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
    }

    private static int getLogNumberPresentation(java.lang.String, int)
    {
        java.lang.String r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if i0 != 2 goto label1;

        return i0;

     label1:
        if i0 != 4 goto label2;

        return i0;

     label2:
        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 != 0 goto label4;

        if i0 != 3 goto label3;

        goto label4;

     label3:
        return 1;

     label4:
        return 3;
    }

    public static boolean shouldHaveSharedCallLogEntries(android.content.Context, android.os.UserManager, int)
    {
        android.os.UserManager r0;
        int i0;
        android.os.UserHandle $r1;
        boolean $z1, z2, z3;
        android.content.Context r2;
        android.content.pm.UserInfo r3;

        r2 := @parameter0: android.content.Context;

        r0 := @parameter1: android.os.UserManager;

        i0 := @parameter2: int;

        $r1 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i0);

        z2 = virtualinvoke r0.<android.os.UserManager: boolean hasUserRestriction(java.lang.String,android.os.UserHandle)>("no_outgoing_calls", $r1);

        if z2 == 0 goto label1;

        return 0;

     label1:
        r3 = virtualinvoke r0.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>(i0);

        z3 = 0;

        if r3 == null goto label2;

        z3 = 0;

        $z1 = virtualinvoke r3.<android.content.pm.UserInfo: boolean isManagedProfile()>();

        if $z1 != 0 goto label2;

        z3 = 1;

     label2:
        return z3;
    }

    private static void updateDataUsageStatForData(android.content.ContentResolver, java.lang.String)
    {
        android.content.ContentResolver r0;
        java.lang.String r1;
        android.net.Uri $r2, $r6;
        android.net.Uri$Builder $r3, $r4, $r5;
        android.content.ContentValues $r7;

        r0 := @parameter0: android.content.ContentResolver;

        r1 := @parameter1: java.lang.String;

        $r2 = <android.provider.ContactsContract$DataUsageFeedback: android.net.Uri FEEDBACK_URI>;

        $r3 = virtualinvoke $r2.<android.net.Uri: android.net.Uri$Builder buildUpon()>();

        $r4 = virtualinvoke $r3.<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>("type", "call");

        $r6 = virtualinvoke $r5.<android.net.Uri$Builder: android.net.Uri build()>();

        $r7 = new android.content.ContentValues;

        specialinvoke $r7.<android.content.ContentValues: void <init>()>();

        virtualinvoke r0.<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>($r6, $r7, null, null);

        return;
    }

    private static void updateNormalizedNumber(android.content.Context, android.content.ContentResolver, java.lang.String, java.lang.String)
    {
        android.content.ContentResolver r0;
        java.lang.String r1, r6, r7, r8;
        boolean $z0, $z1, $z2, $z3;
        android.content.ContentValues $r2;
        java.lang.String[] $r3;
        android.net.Uri $r4;
        android.content.Context r5;

        r5 := @parameter0: android.content.Context;

        r0 := @parameter1: android.content.ContentResolver;

        r1 := @parameter2: java.lang.String;

        r6 := @parameter3: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r6);

        if $z0 != 0 goto label4;

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z1 == 0 goto label1;

        goto label4;

     label1:
        r7 = staticinvoke <android.provider.CallLog$Calls: java.lang.String getCurrentCountryIso(android.content.Context)>(r5);

        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r7);

        if $z2 == 0 goto label2;

        return;

     label2:
        r8 = staticinvoke <android.telephony.PhoneNumberUtils: java.lang.String formatNumberToE164(java.lang.String,java.lang.String)>(r6, r7);

        $z3 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r8);

        if $z3 == 0 goto label3;

        return;

     label3:
        $r2 = new android.content.ContentValues;

        specialinvoke $r2.<android.content.ContentValues: void <init>()>();

        virtualinvoke $r2.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("data4", r8);

        $r4 = <android.provider.ContactsContract$Data: android.net.Uri CONTENT_URI>;

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = r1;

        virtualinvoke r0.<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>($r4, $r2, "_id=?", $r3);

        return;

     label4:
        return;
    }
}
