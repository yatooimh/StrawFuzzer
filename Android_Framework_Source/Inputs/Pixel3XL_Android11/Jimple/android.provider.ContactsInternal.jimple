public class android.provider.ContactsInternal extends java.lang.Object
{
    private static final int CONTACTS_URI_LOOKUP;
    private static final int CONTACTS_URI_LOOKUP_ID;
    private static final android.content.UriMatcher sContactsUriMatcher;

    static void <clinit>()
    {
        android.content.UriMatcher r0, $r1;

        <android.provider.ContactsInternal: int CONTACTS_URI_LOOKUP_ID> = 1000;

        <android.provider.ContactsInternal: int CONTACTS_URI_LOOKUP> = 1001;

        $r1 = new android.content.UriMatcher;

        specialinvoke $r1.<android.content.UriMatcher: void <init>(int)>(-1);

        <android.provider.ContactsInternal: android.content.UriMatcher sContactsUriMatcher> = $r1;

        r0 = <android.provider.ContactsInternal: android.content.UriMatcher sContactsUriMatcher>;

        virtualinvoke r0.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>("com.android.contacts", "contacts/lookup/*", 1001);

        virtualinvoke r0.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>("com.android.contacts", "contacts/lookup/*/#", 1000);

        return;
    }

    private void <init>()
    {
        android.provider.ContactsInternal r0;

        r0 := @this: android.provider.ContactsInternal;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static boolean maybeStartManagedQuickContact(android.content.Context, android.content.Intent)
    {
        android.content.Intent r0;
        int $i0, $i1;
        java.lang.Object $r1, $r13;
        boolean $z0, $z1, $z2, $z3, z4;
        java.lang.String $r2, $r7, $r12, $r14, $r16, r20, r21;
        java.lang.StringBuilder $r3, $r8;
        java.lang.IllegalArgumentException $r6, $r11;
        android.app.admin.DevicePolicyManager $r15;
        long $l2, $l3, $l4, l5, l6;
        android.content.Context r17;
        android.net.Uri r18;
        java.util.List r19;

        r17 := @parameter0: android.content.Context;

        r0 := @parameter1: android.content.Intent;

        r18 = virtualinvoke r0.<android.content.Intent: android.net.Uri getData()>();

        r19 = virtualinvoke r18.<android.net.Uri: java.util.List getPathSegments()>();

        $i0 = interfaceinvoke r19.<java.util.List: int size()>();

        if $i0 >= 4 goto label01;

        z4 = 1;

        goto label02;

     label01:
        z4 = 0;

     label02:
        if z4 == 0 goto label03;

        l5 = <android.provider.ContactsContract$Contacts: long ENTERPRISE_CONTACT_ID_BASE>;

        goto label04;

     label03:
        l5 = staticinvoke <android.content.ContentUris: long parseId(android.net.Uri)>(r18);

     label04:
        $r1 = interfaceinvoke r19.<java.util.List: java.lang.Object get(int)>(2);

        r20 = (java.lang.String) $r1;

        r21 = virtualinvoke r18.<android.net.Uri: java.lang.String getQueryParameter(java.lang.String)>("directory");

        if r21 != null goto label05;

        l6 = 1000000000L;

        goto label06;

     label05:
        l6 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r21);

     label06:
        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r20);

        if $z0 != 0 goto label10;

        $r2 = <android.provider.ContactsContract$Contacts: java.lang.String ENTERPRISE_CONTACT_LOOKUP_PREFIX>;

        $z1 = virtualinvoke r20.<java.lang.String: boolean startsWith(java.lang.String)>($r2);

        if $z1 != 0 goto label07;

        goto label10;

     label07:
        $z2 = staticinvoke <android.provider.ContactsContract$Contacts: boolean isEnterpriseContactId(long)>(l5);

        if $z2 == 0 goto label09;

        $z3 = staticinvoke <android.provider.ContactsContract$Directory: boolean isEnterpriseDirectoryId(long)>(l6);

        if $z3 == 0 goto label08;

        $r13 = virtualinvoke r17.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/admin/DevicePolicyManager;");

        $r15 = (android.app.admin.DevicePolicyManager) $r13;

        $r14 = <android.provider.ContactsContract$Contacts: java.lang.String ENTERPRISE_CONTACT_LOOKUP_PREFIX>;

        $i1 = virtualinvoke $r14.<java.lang.String: int length()>();

        $r16 = virtualinvoke r20.<java.lang.String: java.lang.String substring(int)>($i1);

        $l2 = <android.provider.ContactsContract$Contacts: long ENTERPRISE_CONTACT_ID_BASE>;

        $l4 = l5 - $l2;

        $l3 = l6 - 1000000000L;

        virtualinvoke $r15.<android.app.admin.DevicePolicyManager: void startManagedQuickContact(java.lang.String,long,boolean,long,android.content.Intent)>($r16, $l4, z4, $l3, r0);

        return 1;

     label08:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid enterprise directory id: ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l6);

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r11;

     label09:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid enterprise contact id: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l5);

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label10:
        return 0;
    }

    public static void startQuickContactWithErrorToast(android.content.Context, android.content.Intent)
    {
        android.content.Context r0;
        android.content.Intent r1;
        android.net.Uri r2;
        int i0;
        android.content.UriMatcher $r3;
        boolean $z0;
        android.os.UserHandle $r4;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.content.Intent;

        r2 = virtualinvoke r1.<android.content.Intent: android.net.Uri getData()>();

        $r3 = <android.provider.ContactsInternal: android.content.UriMatcher sContactsUriMatcher>;

        i0 = virtualinvoke $r3.<android.content.UriMatcher: int match(android.net.Uri)>(r2);

        if i0 == 1000 goto label1;

        if i0 == 1001 goto label1;

        goto label2;

     label1:
        $z0 = staticinvoke <android.provider.ContactsInternal: boolean maybeStartManagedQuickContact(android.content.Context,android.content.Intent)>(r0, r1);

        if $z0 == 0 goto label2;

        return;

     label2:
        $r4 = virtualinvoke r0.<android.content.Context: android.os.UserHandle getUser()>();

        staticinvoke <android.provider.ContactsInternal: void startQuickContactWithErrorToastForUser(android.content.Context,android.content.Intent,android.os.UserHandle)>(r0, r1, $r4);

        return;
    }

    public static void startQuickContactWithErrorToastForUser(android.content.Context, android.content.Intent, android.os.UserHandle)
    {
        android.content.Context r0;
        android.os.UserHandle r1;
        android.content.ActivityNotFoundException $r2;
        android.widget.Toast $r3;
        android.content.Intent r4;

        r0 := @parameter0: android.content.Context;

        r4 := @parameter1: android.content.Intent;

        r1 := @parameter2: android.os.UserHandle;

     label1:
        virtualinvoke r0.<android.content.Context: void startActivityAsUser(android.content.Intent,android.os.UserHandle)>(r4, r1);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = staticinvoke <android.widget.Toast: android.widget.Toast makeText(android.content.Context,int,int)>(r0, 17041094, 0);

        virtualinvoke $r3.<android.widget.Toast: void show()>();

     label4:
        return;

        catch android.content.ActivityNotFoundException from label1 to label2 with label3;
    }
}
