public class android.provider.DeviceConfig$Properties extends java.lang.Object
{
    private java.util.Set mKeyset;
    private final java.util.HashMap mMap;
    private final java.lang.String mNamespace;

    public void <init>(java.lang.String, java.util.Map)
    {
        android.provider.DeviceConfig$Properties r0;
        java.util.Map r1;
        java.util.HashMap $r3;
        java.lang.String r4;

        r0 := @this: android.provider.DeviceConfig$Properties;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r4);

        r0.<android.provider.DeviceConfig$Properties: java.lang.String mNamespace> = r4;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<android.provider.DeviceConfig$Properties: java.util.HashMap mMap> = $r3;

        if r1 == null goto label1;

        virtualinvoke $r3.<java.util.HashMap: void putAll(java.util.Map)>(r1);

     label1:
        return;
    }

    static java.util.HashMap access$000(android.provider.DeviceConfig$Properties)
    {
        android.provider.DeviceConfig$Properties r0;
        java.util.HashMap $r1;

        r0 := @parameter0: android.provider.DeviceConfig$Properties;

        $r1 = r0.<android.provider.DeviceConfig$Properties: java.util.HashMap mMap>;

        return $r1;
    }

    public boolean getBoolean(java.lang.String, boolean)
    {
        android.provider.DeviceConfig$Properties r0;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        java.lang.String r4, r5;
        boolean z0;

        r0 := @this: android.provider.DeviceConfig$Properties;

        r4 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r4);

        $r2 = r0.<android.provider.DeviceConfig$Properties: java.util.HashMap mMap>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r4);

        r5 = (java.lang.String) $r3;

        if r5 == null goto label1;

        z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r5);

        goto label1;

     label1:
        return z0;
    }

    public float getFloat(java.lang.String, float)
    {
        android.provider.DeviceConfig$Properties r0;
        java.lang.String r1, $r9, r10;
        float f0, f1;
        java.util.HashMap $r3;
        java.lang.Object $r4;
        java.lang.Throwable $r5;
        java.lang.StringBuilder $r6;

        r0 := @this: android.provider.DeviceConfig$Properties;

        r1 := @parameter0: java.lang.String;

        f0 := @parameter1: float;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = r0.<android.provider.DeviceConfig$Properties: java.util.HashMap mMap>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r10 = (java.lang.String) $r4;

        if r10 != null goto label1;

        return f0;

     label1:
        f1 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r10);

     label2:
        return f1;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parsing float failed for ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("DeviceConfig", $r9);

        return f0;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public int getInt(java.lang.String, int)
    {
        android.provider.DeviceConfig$Properties r0;
        java.lang.String r1, $r9, r10;
        int i0, i1;
        java.util.HashMap $r3;
        java.lang.Object $r4;
        java.lang.Throwable $r5;
        java.lang.StringBuilder $r6;

        r0 := @this: android.provider.DeviceConfig$Properties;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = r0.<android.provider.DeviceConfig$Properties: java.util.HashMap mMap>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r10 = (java.lang.String) $r4;

        if r10 != null goto label1;

        return i0;

     label1:
        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r10);

     label2:
        return i1;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parsing int failed for ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("DeviceConfig", $r9);

        return i0;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public java.util.Set getKeyset()
    {
        android.provider.DeviceConfig$Properties r0;
        java.util.Set $r1, $r2, $r4, $r5;
        java.util.HashMap $r3;

        r0 := @this: android.provider.DeviceConfig$Properties;

        $r1 = r0.<android.provider.DeviceConfig$Properties: java.util.Set mKeyset>;

        if $r1 != null goto label1;

        $r3 = r0.<android.provider.DeviceConfig$Properties: java.util.HashMap mMap>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.util.Set keySet()>();

        $r5 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r4);

        r0.<android.provider.DeviceConfig$Properties: java.util.Set mKeyset> = $r5;

     label1:
        $r2 = r0.<android.provider.DeviceConfig$Properties: java.util.Set mKeyset>;

        return $r2;
    }

    public long getLong(java.lang.String, long)
    {
        android.provider.DeviceConfig$Properties r0;
        java.lang.String r1, $r9, r10;
        long l0, l1;
        java.util.HashMap $r3;
        java.lang.Object $r4;
        java.lang.Throwable $r5;
        java.lang.StringBuilder $r6;

        r0 := @this: android.provider.DeviceConfig$Properties;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = r0.<android.provider.DeviceConfig$Properties: java.util.HashMap mMap>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r10 = (java.lang.String) $r4;

        if r10 != null goto label1;

        return l0;

     label1:
        l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r10);

     label2:
        return l1;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parsing long failed for ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("DeviceConfig", $r9);

        return l0;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public java.lang.String getNamespace()
    {
        android.provider.DeviceConfig$Properties r0;
        java.lang.String $r1;

        r0 := @this: android.provider.DeviceConfig$Properties;

        $r1 = r0.<android.provider.DeviceConfig$Properties: java.lang.String mNamespace>;

        return $r1;
    }

    public java.lang.String getString(java.lang.String, java.lang.String)
    {
        android.provider.DeviceConfig$Properties r0;
        java.lang.String r1, r5, r6;
        java.util.HashMap $r3;
        java.lang.Object $r4;

        r0 := @this: android.provider.DeviceConfig$Properties;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r5);

        $r3 = r0.<android.provider.DeviceConfig$Properties: java.util.HashMap mMap>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r5);

        r6 = (java.lang.String) $r4;

        if r6 == null goto label1;

        goto label2;

     label1:
        r6 = r1;

     label2:
        return r6;
    }
}
