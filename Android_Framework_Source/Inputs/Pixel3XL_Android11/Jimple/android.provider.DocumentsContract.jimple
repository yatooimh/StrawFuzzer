public final class android.provider.DocumentsContract extends java.lang.Object
{
    public static final java.lang.String ACTION_DOCUMENT_ROOT_SETTINGS;
    public static final java.lang.String ACTION_DOCUMENT_SETTINGS;
    public static final java.lang.String ACTION_MANAGE_DOCUMENT;
    public static final java.lang.String EXTERNAL_STORAGE_PRIMARY_EMULATED_ROOT_ID;
    public static final java.lang.String EXTERNAL_STORAGE_PROVIDER_AUTHORITY;
    public static final java.lang.String EXTRA_ERROR;
    public static final java.lang.String EXTRA_EXCLUDE_SELF;
    public static final java.lang.String EXTRA_INFO;
    public static final java.lang.String EXTRA_INITIAL_URI;
    public static final java.lang.String EXTRA_LOADING;
    public static final java.lang.String EXTRA_OPTIONS;
    public static final java.lang.String EXTRA_ORIENTATION;
    public static final java.lang.String EXTRA_PACKAGE_NAME;
    public static final java.lang.String EXTRA_PARENT_URI;
    public static final java.lang.String EXTRA_PROMPT;
    public static final java.lang.String EXTRA_RESULT;
    public static final java.lang.String EXTRA_SHOW_ADVANCED;
    public static final java.lang.String EXTRA_TARGET_URI;
    public static final java.lang.String EXTRA_URI;
    public static final java.lang.String EXTRA_URI_PERMISSIONS;
    public static final java.lang.String METADATA_EXIF;
    public static final java.lang.String METADATA_TREE_COUNT;
    public static final java.lang.String METADATA_TREE_SIZE;
    public static final java.lang.String METADATA_TYPES;
    public static final java.lang.String METHOD_COPY_DOCUMENT;
    public static final java.lang.String METHOD_CREATE_DOCUMENT;
    public static final java.lang.String METHOD_CREATE_WEB_LINK_INTENT;
    public static final java.lang.String METHOD_DELETE_DOCUMENT;
    public static final java.lang.String METHOD_EJECT_ROOT;
    public static final java.lang.String METHOD_FIND_DOCUMENT_PATH;
    public static final java.lang.String METHOD_GET_DOCUMENT_METADATA;
    public static final java.lang.String METHOD_IS_CHILD_DOCUMENT;
    public static final java.lang.String METHOD_MOVE_DOCUMENT;
    public static final java.lang.String METHOD_REMOVE_DOCUMENT;
    public static final java.lang.String METHOD_RENAME_DOCUMENT;
    public static final java.lang.String PACKAGE_DOCUMENTS_UI;
    private static final java.lang.String PARAM_MANAGE;
    private static final java.lang.String PARAM_QUERY;
    private static final java.lang.String PATH_CHILDREN;
    private static final java.lang.String PATH_DOCUMENT;
    private static final java.lang.String PATH_RECENT;
    private static final java.lang.String PATH_ROOT;
    private static final java.lang.String PATH_SEARCH;
    private static final java.lang.String PATH_TREE;
    public static final java.lang.String PROVIDER_INTERFACE;
    public static final java.lang.String QUERY_ARG_DISPLAY_NAME;
    public static final java.lang.String QUERY_ARG_EXCLUDE_MEDIA;
    public static final java.lang.String QUERY_ARG_FILE_SIZE_OVER;
    public static final java.lang.String QUERY_ARG_LAST_MODIFIED_AFTER;
    public static final java.lang.String QUERY_ARG_MIME_TYPES;
    private static final java.lang.String TAG;

    private void <init>()
    {
        android.provider.DocumentsContract r0;

        r0 := @this: android.provider.DocumentsContract;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static android.net.Uri buildBaseDocumentUri(java.lang.String)
    {
        java.lang.String r0;
        android.net.Uri$Builder $r1;
        android.net.Uri $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <android.provider.DocumentsContract: android.net.Uri$Builder getBaseDocumentUriBuilder(java.lang.String)>(r0);

        $r2 = virtualinvoke $r1.<android.net.Uri$Builder: android.net.Uri build()>();

        return $r2;
    }

    public static android.net.Uri buildChildDocumentsUri(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        android.net.Uri$Builder $r2, $r3, $r4, $r5, $r6, $r7;
        android.net.Uri $r8;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = new android.net.Uri$Builder;

        specialinvoke $r2.<android.net.Uri$Builder: void <init>()>();

        $r3 = virtualinvoke $r2.<android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)>("content");

        $r4 = virtualinvoke $r3.<android.net.Uri$Builder: android.net.Uri$Builder authority(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>("document");

        $r6 = virtualinvoke $r5.<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>("children");

        $r8 = virtualinvoke $r7.<android.net.Uri$Builder: android.net.Uri build()>();

        return $r8;
    }

    public static android.net.Uri buildChildDocumentsUriUsingTree(android.net.Uri, java.lang.String)
    {
        android.net.Uri r0, $r12;
        java.lang.String r1, $r4, $r7;
        android.net.Uri$Builder $r2, $r3, $r5, $r6, $r8, $r9, $r10, $r11;

        r0 := @parameter0: android.net.Uri;

        r1 := @parameter1: java.lang.String;

        $r2 = new android.net.Uri$Builder;

        specialinvoke $r2.<android.net.Uri$Builder: void <init>()>();

        $r3 = virtualinvoke $r2.<android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)>("content");

        $r4 = virtualinvoke r0.<android.net.Uri: java.lang.String getAuthority()>();

        $r5 = virtualinvoke $r3.<android.net.Uri$Builder: android.net.Uri$Builder authority(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>("tree");

        $r7 = staticinvoke <android.provider.DocumentsContract: java.lang.String getTreeDocumentId(android.net.Uri)>(r0);

        $r8 = virtualinvoke $r6.<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>("document");

        $r10 = virtualinvoke $r9.<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>("children");

        $r12 = virtualinvoke $r11.<android.net.Uri$Builder: android.net.Uri build()>();

        return $r12;
    }

    public static android.net.Uri buildDocumentUri(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        android.net.Uri$Builder $r2, $r3;
        android.net.Uri $r4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <android.provider.DocumentsContract: android.net.Uri$Builder getBaseDocumentUriBuilder(java.lang.String)>(r0);

        $r3 = virtualinvoke $r2.<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>(r1);

        $r4 = virtualinvoke $r3.<android.net.Uri$Builder: android.net.Uri build()>();

        return $r4;
    }

    public static android.net.Uri buildDocumentUriAsUser(java.lang.String, java.lang.String, android.os.UserHandle)
    {
        java.lang.String r0, r1;
        android.os.UserHandle r2;
        android.net.Uri $r3, $r4;
        int $i0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.os.UserHandle;

        $r3 = staticinvoke <android.provider.DocumentsContract: android.net.Uri buildDocumentUri(java.lang.String,java.lang.String)>(r0, r1);

        $i0 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        $r4 = staticinvoke <android.content.ContentProvider: android.net.Uri maybeAddUserId(android.net.Uri,int)>($r3, $i0);

        return $r4;
    }

    public static android.net.Uri buildDocumentUriMaybeUsingTree(android.net.Uri, java.lang.String)
    {
        android.net.Uri r0, $r3, $r4;
        java.lang.String r1, $r2;
        boolean $z0;

        r0 := @parameter0: android.net.Uri;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <android.provider.DocumentsContract: boolean isTreeUri(android.net.Uri)>(r0);

        if $z0 == 0 goto label1;

        $r4 = staticinvoke <android.provider.DocumentsContract: android.net.Uri buildDocumentUriUsingTree(android.net.Uri,java.lang.String)>(r0, r1);

        return $r4;

     label1:
        $r2 = virtualinvoke r0.<android.net.Uri: java.lang.String getAuthority()>();

        $r3 = staticinvoke <android.provider.DocumentsContract: android.net.Uri buildDocumentUri(java.lang.String,java.lang.String)>($r2, r1);

        return $r3;
    }

    public static android.net.Uri buildDocumentUriUsingTree(android.net.Uri, java.lang.String)
    {
        android.net.Uri r0, $r11;
        java.lang.String r1, $r4, $r7;
        android.net.Uri$Builder $r2, $r3, $r5, $r6, $r8, $r9, $r10;

        r0 := @parameter0: android.net.Uri;

        r1 := @parameter1: java.lang.String;

        $r2 = new android.net.Uri$Builder;

        specialinvoke $r2.<android.net.Uri$Builder: void <init>()>();

        $r3 = virtualinvoke $r2.<android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)>("content");

        $r4 = virtualinvoke r0.<android.net.Uri: java.lang.String getAuthority()>();

        $r5 = virtualinvoke $r3.<android.net.Uri$Builder: android.net.Uri$Builder authority(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>("tree");

        $r7 = staticinvoke <android.provider.DocumentsContract: java.lang.String getTreeDocumentId(android.net.Uri)>(r0);

        $r8 = virtualinvoke $r6.<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>("document");

        $r10 = virtualinvoke $r9.<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<android.net.Uri$Builder: android.net.Uri build()>();

        return $r11;
    }

    public static android.net.Uri buildRecentDocumentsUri(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        android.net.Uri$Builder $r2, $r3, $r4, $r5, $r6, $r7;
        android.net.Uri $r8;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = new android.net.Uri$Builder;

        specialinvoke $r2.<android.net.Uri$Builder: void <init>()>();

        $r3 = virtualinvoke $r2.<android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)>("content");

        $r4 = virtualinvoke $r3.<android.net.Uri$Builder: android.net.Uri$Builder authority(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>("root");

        $r6 = virtualinvoke $r5.<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>("recent");

        $r8 = virtualinvoke $r7.<android.net.Uri$Builder: android.net.Uri build()>();

        return $r8;
    }

    public static android.net.Uri buildRootUri(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        android.net.Uri$Builder $r2, $r3, $r4, $r5, $r6;
        android.net.Uri $r7;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = new android.net.Uri$Builder;

        specialinvoke $r2.<android.net.Uri$Builder: void <init>()>();

        $r3 = virtualinvoke $r2.<android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)>("content");

        $r4 = virtualinvoke $r3.<android.net.Uri$Builder: android.net.Uri$Builder authority(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>("root");

        $r6 = virtualinvoke $r5.<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<android.net.Uri$Builder: android.net.Uri build()>();

        return $r7;
    }

    public static android.net.Uri buildRootsUri(java.lang.String)
    {
        java.lang.String r0;
        android.net.Uri$Builder $r1, $r2, $r3, $r4;
        android.net.Uri $r5;

        r0 := @parameter0: java.lang.String;

        $r1 = new android.net.Uri$Builder;

        specialinvoke $r1.<android.net.Uri$Builder: void <init>()>();

        $r2 = virtualinvoke $r1.<android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)>("content");

        $r3 = virtualinvoke $r2.<android.net.Uri$Builder: android.net.Uri$Builder authority(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>("root");

        $r5 = virtualinvoke $r4.<android.net.Uri$Builder: android.net.Uri build()>();

        return $r5;
    }

    public static android.net.Uri buildSearchDocumentsUri(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, r2;
        android.net.Uri$Builder $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        android.net.Uri $r10;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r3 = new android.net.Uri$Builder;

        specialinvoke $r3.<android.net.Uri$Builder: void <init>()>();

        $r4 = virtualinvoke $r3.<android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)>("content");

        $r5 = virtualinvoke $r4.<android.net.Uri$Builder: android.net.Uri$Builder authority(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>("root");

        $r7 = virtualinvoke $r6.<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>("search");

        $r9 = virtualinvoke $r8.<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>("query", r2);

        $r10 = virtualinvoke $r9.<android.net.Uri$Builder: android.net.Uri build()>();

        return $r10;
    }

    public static android.net.Uri buildTreeDocumentUri(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        android.net.Uri$Builder $r2, $r3, $r4, $r5, $r6;
        android.net.Uri $r7;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = new android.net.Uri$Builder;

        specialinvoke $r2.<android.net.Uri$Builder: void <init>()>();

        $r3 = virtualinvoke $r2.<android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)>("content");

        $r4 = virtualinvoke $r3.<android.net.Uri$Builder: android.net.Uri$Builder authority(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>("tree");

        $r6 = virtualinvoke $r5.<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<android.net.Uri$Builder: android.net.Uri build()>();

        return $r7;
    }

    public static android.net.Uri copyDocument(android.content.ContentResolver, android.net.Uri, android.net.Uri) throws java.io.FileNotFoundException
    {
        android.net.Uri r0, r1, r8;
        android.os.Bundle r2, $r4;
        java.lang.String $r3;
        android.os.Parcelable $r5;
        java.lang.Exception $r6;
        android.content.ContentResolver r7;

        r7 := @parameter0: android.content.ContentResolver;

        r0 := @parameter1: android.net.Uri;

        r1 := @parameter2: android.net.Uri;

     label1:
        r2 = new android.os.Bundle;

        specialinvoke r2.<android.os.Bundle: void <init>()>();

        virtualinvoke r2.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("uri", r0);

        virtualinvoke r2.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("android.content.extra.TARGET_URI", r1);

        $r3 = virtualinvoke r0.<android.net.Uri: java.lang.String getAuthority()>();

        $r4 = virtualinvoke r7.<android.content.ContentResolver: android.os.Bundle call(java.lang.String,java.lang.String,java.lang.String,android.os.Bundle)>($r3, "android:copyDocument", null, r2);

        $r5 = virtualinvoke $r4.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("uri");

        r8 = (android.net.Uri) $r5;

     label2:
        return r8;

     label3:
        $r6 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DocumentsContract", "Failed to copy document", $r6);

        staticinvoke <android.provider.DocumentsContract: void rethrowIfNecessary(java.lang.Exception)>($r6);

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static android.net.Uri createDocument(android.content.ContentResolver, android.net.Uri, java.lang.String, java.lang.String) throws java.io.FileNotFoundException
    {
        android.net.Uri r0, r9;
        java.lang.String r1, r2, $r4;
        android.os.Bundle r3, $r5;
        android.os.Parcelable $r6;
        java.lang.Exception $r7;
        android.content.ContentResolver r8;

        r8 := @parameter0: android.content.ContentResolver;

        r0 := @parameter1: android.net.Uri;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

     label1:
        r3 = new android.os.Bundle;

        specialinvoke r3.<android.os.Bundle: void <init>()>();

        virtualinvoke r3.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("uri", r0);

        virtualinvoke r3.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("mime_type", r1);

        virtualinvoke r3.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("_display_name", r2);

        $r4 = virtualinvoke r0.<android.net.Uri: java.lang.String getAuthority()>();

        $r5 = virtualinvoke r8.<android.content.ContentResolver: android.os.Bundle call(java.lang.String,java.lang.String,java.lang.String,android.os.Bundle)>($r4, "android:createDocument", null, r3);

        $r6 = virtualinvoke $r5.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("uri");

        r9 = (android.net.Uri) $r6;

     label2:
        return r9;

     label3:
        $r7 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DocumentsContract", "Failed to create document", $r7);

        staticinvoke <android.provider.DocumentsContract: void rethrowIfNecessary(java.lang.Exception)>($r7);

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static android.content.IntentSender createWebLinkIntent(android.content.ContentResolver, android.net.Uri, android.os.Bundle) throws java.io.FileNotFoundException
    {
        android.net.Uri r0;
        android.os.Bundle r1, r2, $r4;
        java.lang.String $r3;
        android.os.Parcelable $r5;
        java.lang.Exception $r6;
        android.content.ContentResolver r7;
        android.content.IntentSender r8;

        r7 := @parameter0: android.content.ContentResolver;

        r0 := @parameter1: android.net.Uri;

        r1 := @parameter2: android.os.Bundle;

     label1:
        r2 = new android.os.Bundle;

        specialinvoke r2.<android.os.Bundle: void <init>()>();

        virtualinvoke r2.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("uri", r0);

     label2:
        if r1 == null goto label4;

     label3:
        virtualinvoke r2.<android.os.Bundle: void putBundle(java.lang.String,android.os.Bundle)>("options", r1);

     label4:
        $r3 = virtualinvoke r0.<android.net.Uri: java.lang.String getAuthority()>();

        $r4 = virtualinvoke r7.<android.content.ContentResolver: android.os.Bundle call(java.lang.String,java.lang.String,java.lang.String,android.os.Bundle)>($r3, "android:createWebLinkIntent", null, r2);

        $r5 = virtualinvoke $r4.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("result");

        r8 = (android.content.IntentSender) $r5;

     label5:
        return r8;

     label6:
        $r6 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DocumentsContract", "Failed to create a web link intent", $r6);

        staticinvoke <android.provider.DocumentsContract: void rethrowIfNecessary(java.lang.Exception)>($r6);

        return null;

        catch java.lang.Exception from label1 to label2 with label6;
        catch java.lang.Exception from label3 to label4 with label6;
        catch java.lang.Exception from label4 to label5 with label6;
    }

    public static boolean deleteDocument(android.content.ContentResolver, android.net.Uri) throws java.io.FileNotFoundException
    {
        android.net.Uri r0;
        android.os.Bundle r1;
        java.lang.String $r2;
        java.lang.Exception $r4;
        android.content.ContentResolver r5;

        r5 := @parameter0: android.content.ContentResolver;

        r0 := @parameter1: android.net.Uri;

     label1:
        r1 = new android.os.Bundle;

        specialinvoke r1.<android.os.Bundle: void <init>()>();

        virtualinvoke r1.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("uri", r0);

        $r2 = virtualinvoke r0.<android.net.Uri: java.lang.String getAuthority()>();

        virtualinvoke r5.<android.content.ContentResolver: android.os.Bundle call(java.lang.String,java.lang.String,java.lang.String,android.os.Bundle)>($r2, "android:deleteDocument", null, r1);

     label2:
        return 1;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DocumentsContract", "Failed to delete document", $r4);

        staticinvoke <android.provider.DocumentsContract: void rethrowIfNecessary(java.lang.Exception)>($r4);

        return 0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static void ejectRoot(android.content.ContentResolver, android.net.Uri)
    {
        android.net.Uri r0;
        android.os.Bundle r1;
        java.lang.String $r2;
        java.lang.Exception $r4;
        android.content.ContentResolver r5;

        r5 := @parameter0: android.content.ContentResolver;

        r0 := @parameter1: android.net.Uri;

     label1:
        r1 = new android.os.Bundle;

        specialinvoke r1.<android.os.Bundle: void <init>()>();

        virtualinvoke r1.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("uri", r0);

        $r2 = virtualinvoke r0.<android.net.Uri: java.lang.String getAuthority()>();

        virtualinvoke r5.<android.content.ContentResolver: android.os.Bundle call(java.lang.String,java.lang.String,java.lang.String,android.os.Bundle)>($r2, "android:ejectRoot", null, r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DocumentsContract", "Failed to eject", $r4);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static android.provider.DocumentsContract$Path findDocumentPath(android.content.ContentResolver, android.net.Uri) throws java.io.FileNotFoundException
    {
        android.net.Uri r0;
        android.os.Bundle r1, $r3;
        java.lang.String $r2;
        android.os.Parcelable $r4;
        java.lang.Exception $r5;
        android.content.ContentResolver r6;
        android.provider.DocumentsContract$Path r7;

        r6 := @parameter0: android.content.ContentResolver;

        r0 := @parameter1: android.net.Uri;

     label1:
        r1 = new android.os.Bundle;

        specialinvoke r1.<android.os.Bundle: void <init>()>();

        virtualinvoke r1.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("uri", r0);

        $r2 = virtualinvoke r0.<android.net.Uri: java.lang.String getAuthority()>();

        $r3 = virtualinvoke r6.<android.content.ContentResolver: android.os.Bundle call(java.lang.String,java.lang.String,java.lang.String,android.os.Bundle)>($r2, "android:findDocumentPath", null, r1);

        $r4 = virtualinvoke $r3.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("result");

        r7 = (android.provider.DocumentsContract$Path) $r4;

     label2:
        return r7;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DocumentsContract", "Failed to find path", $r5);

        staticinvoke <android.provider.DocumentsContract: void rethrowIfNecessary(java.lang.Exception)>($r5);

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private static android.net.Uri$Builder getBaseDocumentUriBuilder(java.lang.String)
    {
        java.lang.String r0;
        android.net.Uri$Builder $r1, $r2, $r3, $r4;

        r0 := @parameter0: java.lang.String;

        $r1 = new android.net.Uri$Builder;

        specialinvoke $r1.<android.net.Uri$Builder: void <init>()>();

        $r2 = virtualinvoke $r1.<android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)>("content");

        $r3 = virtualinvoke $r2.<android.net.Uri$Builder: android.net.Uri$Builder authority(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>("document");

        return $r4;
    }

    public static java.lang.String getDocumentId(android.net.Uri)
    {
        android.net.Uri r0;
        int $i0, $i1;
        java.lang.String $r3, $r5, $r8, $r9, $r12, $r17;
        java.lang.Object $r4, $r6, $r7, $r10, $r11;
        boolean $z0, $z1, $z2;
        java.util.List r13;
        java.lang.StringBuilder $r14;
        java.lang.IllegalArgumentException $r16;

        r0 := @parameter0: android.net.Uri;

        r13 = virtualinvoke r0.<android.net.Uri: java.util.List getPathSegments()>();

        $i0 = interfaceinvoke r13.<java.util.List: int size()>();

        if $i0 < 2 goto label1;

        $r9 = "document";

        $r10 = interfaceinvoke r13.<java.util.List: java.lang.Object get(int)>(0);

        $z2 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z2 == 0 goto label1;

        $r11 = interfaceinvoke r13.<java.util.List: java.lang.Object get(int)>(1);

        $r12 = (java.lang.String) $r11;

        return $r12;

     label1:
        $i1 = interfaceinvoke r13.<java.util.List: int size()>();

        if $i1 < 4 goto label2;

        $r3 = "tree";

        $r4 = interfaceinvoke r13.<java.util.List: java.lang.Object get(int)>(0);

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        $r5 = "document";

        $r6 = interfaceinvoke r13.<java.util.List: java.lang.Object get(int)>(2);

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label2;

        $r7 = interfaceinvoke r13.<java.util.List: java.lang.Object get(int)>(3);

        $r8 = (java.lang.String) $r7;

        return $r8;

     label2:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid URI: ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r16 = new java.lang.IllegalArgumentException;

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r16;
    }

    public static android.os.Bundle getDocumentMetadata(android.content.ContentResolver, android.net.Uri) throws java.io.FileNotFoundException
    {
        android.net.Uri r0;
        android.os.Bundle r1, r7;
        java.lang.String $r4;
        java.lang.Exception $r5;
        android.content.ContentResolver r6;

        r6 := @parameter0: android.content.ContentResolver;

        r0 := @parameter1: android.net.Uri;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r6, "content can not be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "documentUri can not be null");

     label1:
        r1 = new android.os.Bundle;

        specialinvoke r1.<android.os.Bundle: void <init>()>();

        virtualinvoke r1.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("uri", r0);

        $r4 = virtualinvoke r0.<android.net.Uri: java.lang.String getAuthority()>();

        r7 = virtualinvoke r6.<android.content.ContentResolver: android.os.Bundle call(java.lang.String,java.lang.String,java.lang.String,android.os.Bundle)>($r4, "android:getDocumentMetadata", null, r1);

     label2:
        return r7;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DocumentsContract", "Failed to get document metadata");

        staticinvoke <android.provider.DocumentsContract: void rethrowIfNecessary(java.lang.Exception)>($r5);

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static android.graphics.Bitmap getDocumentThumbnail(android.content.ContentResolver, android.net.Uri, android.graphics.Point, android.os.CancellationSignal) throws java.io.FileNotFoundException
    {
        android.net.Uri r0;
        android.os.CancellationSignal r1;
        android.util.Size $r2;
        java.lang.Exception $r3;
        boolean $z0;
        java.lang.StringBuilder $r4;
        java.lang.String $r9;
        android.content.ContentResolver r10;
        android.graphics.Point r11;
        android.graphics.Bitmap r12;

        r10 := @parameter0: android.content.ContentResolver;

        r0 := @parameter1: android.net.Uri;

        r11 := @parameter2: android.graphics.Point;

        r1 := @parameter3: android.os.CancellationSignal;

     label1:
        $r2 = staticinvoke <android.graphics.Point: android.util.Size convert(android.graphics.Point)>(r11);

        r12 = staticinvoke <android.content.ContentResolver: android.graphics.Bitmap loadThumbnail(android.content.ContentInterface,android.net.Uri,android.util.Size,android.os.CancellationSignal,int)>(r10, r0, $r2, r1, 1);

     label2:
        return r12;

     label3:
        $r3 := @caughtexception;

        $z0 = $r3 instanceof android.os.OperationCanceledException;

        if $z0 != 0 goto label4;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to load thumbnail for ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DocumentsContract", $r9);

     label4:
        staticinvoke <android.provider.DocumentsContract: void rethrowIfNecessary(java.lang.Exception)>($r3);

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static java.lang.String[] getHandledQueryArguments(android.os.Bundle)
    {
        android.os.Bundle r0;
        java.util.ArrayList $r2;
        java.util.Set $r3, $r4, $r5, $r6, $r7;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.String[] $r8, $r10, $r11;
        java.lang.Object[] $r9;

        r0 := @parameter0: android.os.Bundle;

        if r0 != null goto label1;

        $r11 = newarray (java.lang.String)[0];

        return $r11;

     label1:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = virtualinvoke r0.<android.os.Bundle: java.util.Set keySet()>();

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>("android:query-arg-exclude-media");

        if $z0 == 0 goto label2;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>("android:query-arg-exclude-media");

     label2:
        $r4 = virtualinvoke r0.<android.os.Bundle: java.util.Set keySet()>();

        $z1 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>("android:query-arg-display-name");

        if $z1 == 0 goto label3;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>("android:query-arg-display-name");

     label3:
        $r5 = virtualinvoke r0.<android.os.Bundle: java.util.Set keySet()>();

        $z2 = interfaceinvoke $r5.<java.util.Set: boolean contains(java.lang.Object)>("android:query-arg-file-size-over");

        if $z2 == 0 goto label4;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>("android:query-arg-file-size-over");

     label4:
        $r6 = virtualinvoke r0.<android.os.Bundle: java.util.Set keySet()>();

        $z3 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>("android:query-arg-last-modified-after");

        if $z3 == 0 goto label5;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>("android:query-arg-last-modified-after");

     label5:
        $r7 = virtualinvoke r0.<android.os.Bundle: java.util.Set keySet()>();

        $z4 = interfaceinvoke $r7.<java.util.Set: boolean contains(java.lang.Object)>("android:query-arg-mime-types");

        if $z4 == 0 goto label6;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>("android:query-arg-mime-types");

     label6:
        $r8 = newarray (java.lang.String)[0];

        $r9 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        $r10 = (java.lang.String[]) $r9;

        return $r10;
    }

    public static java.lang.String getRootId(android.net.Uri)
    {
        android.net.Uri r0;
        int $i0;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5, $r6, $r9;
        java.lang.Object $r7, $r8;
        boolean $z0;
        java.util.List r10;

        r0 := @parameter0: android.net.Uri;

        r10 = virtualinvoke r0.<android.net.Uri: java.util.List getPathSegments()>();

        $i0 = interfaceinvoke r10.<java.util.List: int size()>();

        if $i0 < 2 goto label1;

        $r6 = "root";

        $r7 = interfaceinvoke r10.<java.util.List: java.lang.Object get(int)>(0);

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label1;

        $r8 = interfaceinvoke r10.<java.util.List: java.lang.Object get(int)>(1);

        $r9 = (java.lang.String) $r8;

        return $r9;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid URI: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    public static java.lang.String getSearchDocumentsQuery(android.net.Uri)
    {
        android.net.Uri r0;
        java.lang.String $r1;

        r0 := @parameter0: android.net.Uri;

        $r1 = virtualinvoke r0.<android.net.Uri: java.lang.String getQueryParameter(java.lang.String)>("query");

        return $r1;
    }

    public static java.lang.String getSearchDocumentsQuery(android.os.Bundle)
    {
        android.os.Bundle r0;
        java.lang.String $r2;

        r0 := @parameter0: android.os.Bundle;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "bundle can not be null");

        $r2 = virtualinvoke r0.<android.os.Bundle: java.lang.String getString(java.lang.String,java.lang.String)>("android:query-arg-display-name", "");

        return $r2;
    }

    public static java.lang.String getTreeDocumentId(android.net.Uri)
    {
        android.net.Uri r0;
        int $i0;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5, $r6, $r9;
        java.lang.Object $r7, $r8;
        boolean $z0;
        java.util.List r10;

        r0 := @parameter0: android.net.Uri;

        r10 = virtualinvoke r0.<android.net.Uri: java.util.List getPathSegments()>();

        $i0 = interfaceinvoke r10.<java.util.List: int size()>();

        if $i0 < 2 goto label1;

        $r6 = "tree";

        $r7 = interfaceinvoke r10.<java.util.List: java.lang.Object get(int)>(0);

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label1;

        $r8 = interfaceinvoke r10.<java.util.List: java.lang.Object get(int)>(1);

        $r9 = (java.lang.String) $r8;

        return $r9;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid URI: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    public static boolean isChildDocument(android.content.ContentResolver, android.net.Uri, android.net.Uri) throws java.io.FileNotFoundException
    {
        android.net.Uri r0, r1;
        android.os.Bundle r2, r9;
        java.lang.String $r6;
        boolean $z0, $z1;
        java.lang.Exception $r7;
        android.content.ContentResolver r8;
        android.os.RemoteException r10, r11;

        r8 := @parameter0: android.content.ContentResolver;

        r0 := @parameter1: android.net.Uri;

        r1 := @parameter2: android.net.Uri;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r8, "content can not be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "parentDocumentUri can not be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "childDocumentUri can not be null");

     label1:
        r2 = new android.os.Bundle;

        specialinvoke r2.<android.os.Bundle: void <init>()>();

        virtualinvoke r2.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("uri", r0);

        virtualinvoke r2.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("android.content.extra.TARGET_URI", r1);

        $r6 = virtualinvoke r0.<android.net.Uri: java.lang.String getAuthority()>();

        r9 = virtualinvoke r8.<android.content.ContentResolver: android.os.Bundle call(java.lang.String,java.lang.String,java.lang.String,android.os.Bundle)>($r6, "android:isChildDocument", null, r2);

     label2:
        if r9 == null goto label5;

     label3:
        $z0 = virtualinvoke r9.<android.os.Bundle: boolean containsKey(java.lang.String)>("result");

        if $z0 == 0 goto label4;

        $z1 = virtualinvoke r9.<android.os.Bundle: boolean getBoolean(java.lang.String)>("result");

        return $z1;

     label4:
        r10 = new android.os.RemoteException;

        specialinvoke r10.<android.os.RemoteException: void <init>(java.lang.String)>("Response did not include result field..");

        throw r10;

     label5:
        r11 = new android.os.RemoteException;

        specialinvoke r11.<android.os.RemoteException: void <init>(java.lang.String)>("Failed to get a response from isChildDocument query.");

        throw r11;

     label6:
        $r7 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DocumentsContract", "Failed to create document", $r7);

        staticinvoke <android.provider.DocumentsContract: void rethrowIfNecessary(java.lang.Exception)>($r7);

        return 0;

        catch java.lang.Exception from label1 to label2 with label6;
        catch java.lang.Exception from label3 to label4 with label6;
        catch java.lang.Exception from label4 to label5 with label6;
        catch java.lang.Exception from label5 to label6 with label6;
    }

    public static boolean isContentUri(android.net.Uri)
    {
        android.net.Uri r0;
        java.lang.String $r1, $r2;
        boolean $z0, z1;

        r0 := @parameter0: android.net.Uri;

        if r0 == null goto label1;

        $r1 = "content";

        $r2 = virtualinvoke r0.<android.net.Uri: java.lang.String getScheme()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public static boolean isDocumentUri(android.content.Context, android.net.Uri)
    {
        android.net.Uri r0;
        java.lang.String $r1, $r2, $r4, $r6;
        boolean $z1, $z2, $z3, $z4, z5, z6;
        int $i0, $i1;
        java.lang.Object $r3, $r5, $r7;
        android.content.Context r8;
        java.util.List r9;

        r8 := @parameter0: android.content.Context;

        r0 := @parameter1: android.net.Uri;

        z5 = staticinvoke <android.provider.DocumentsContract: boolean isContentUri(android.net.Uri)>(r0);

        if z5 == 0 goto label3;

        $r1 = virtualinvoke r0.<android.net.Uri: java.lang.String getAuthority()>();

        $z1 = staticinvoke <android.provider.DocumentsContract: boolean isDocumentsProvider(android.content.Context,java.lang.String)>(r8, $r1);

        if $z1 == 0 goto label3;

        r9 = virtualinvoke r0.<android.net.Uri: java.util.List getPathSegments()>();

        $i0 = interfaceinvoke r9.<java.util.List: int size()>();

        if $i0 != 2 goto label1;

        $r6 = "document";

        $r7 = interfaceinvoke r9.<java.util.List: java.lang.Object get(int)>(0);

        $z4 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        return $z4;

     label1:
        $i1 = interfaceinvoke r9.<java.util.List: int size()>();

        if $i1 != 4 goto label3;

        z6 = 0;

        $r2 = "tree";

        $r3 = interfaceinvoke r9.<java.util.List: java.lang.Object get(int)>(0);

        $z2 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z2 == 0 goto label2;

        z6 = 0;

        $r4 = "document";

        $r5 = interfaceinvoke r9.<java.util.List: java.lang.Object get(int)>(2);

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z3 == 0 goto label2;

        z6 = 1;

     label2:
        return z6;

     label3:
        return 0;
    }

    private static boolean isDocumentsProvider(android.content.Context, java.lang.String)
    {
        java.lang.String r0, $r8;
        android.content.Intent $r2;
        android.content.pm.PackageManager $r3;
        java.util.List $r4;
        boolean $z0, $z1;
        java.lang.Object $r5;
        android.content.pm.ResolveInfo $r6;
        android.content.pm.ProviderInfo $r7;
        android.content.Context r9;
        java.util.Iterator r10;

        r9 := @parameter0: android.content.Context;

        r0 := @parameter1: java.lang.String;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.content.action.DOCUMENTS_PROVIDER");

        $r3 = virtualinvoke r9.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r4 = virtualinvoke $r3.<android.content.pm.PackageManager: java.util.List queryIntentContentProviders(android.content.Intent,int)>($r2, 0);

        r10 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (android.content.pm.ResolveInfo) $r5;

        $r7 = $r6.<android.content.pm.ResolveInfo: android.content.pm.ProviderInfo providerInfo>;

        $r8 = $r7.<android.content.pm.ProviderInfo: java.lang.String authority>;

        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public static boolean isManageMode(android.net.Uri)
    {
        android.net.Uri r0;
        boolean $z0;

        r0 := @parameter0: android.net.Uri;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "uri can not be null");

        $z0 = virtualinvoke r0.<android.net.Uri: boolean getBooleanQueryParameter(java.lang.String,boolean)>("manage", 0);

        return $z0;
    }

    public static boolean isRootUri(android.content.Context, android.net.Uri)
    {
        android.content.Context r0;
        android.net.Uri r1;
        boolean $z0;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.net.Uri;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "context can not be null");

        $z0 = staticinvoke <android.provider.DocumentsContract: boolean isRootUri(android.content.Context,android.net.Uri,int)>(r0, r1, 2);

        return $z0;
    }

    private static boolean isRootUri(android.content.Context, android.net.Uri, int)
    {
        android.net.Uri r0;
        int i0, $i1;
        java.lang.String $r1, $r2;
        boolean $z1, $z2, z3, z4;
        java.lang.Object $r3;
        android.content.Context r4;
        java.util.List r5;

        r4 := @parameter0: android.content.Context;

        r0 := @parameter1: android.net.Uri;

        i0 := @parameter2: int;

        z3 = staticinvoke <android.provider.DocumentsContract: boolean isContentUri(android.net.Uri)>(r0);

        if z3 == 0 goto label2;

        $r1 = virtualinvoke r0.<android.net.Uri: java.lang.String getAuthority()>();

        $z1 = staticinvoke <android.provider.DocumentsContract: boolean isDocumentsProvider(android.content.Context,java.lang.String)>(r4, $r1);

        if $z1 == 0 goto label2;

        r5 = virtualinvoke r0.<android.net.Uri: java.util.List getPathSegments()>();

        z4 = 0;

        $i1 = interfaceinvoke r5.<java.util.List: int size()>();

        if $i1 != i0 goto label1;

        z4 = 0;

        $r2 = "root";

        $r3 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(0);

        $z2 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z2 == 0 goto label1;

        z4 = 1;

     label1:
        return z4;

     label2:
        return 0;
    }

    public static boolean isRootsUri(android.content.Context, android.net.Uri)
    {
        android.content.Context r0;
        android.net.Uri r1;
        boolean $z0;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.net.Uri;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "context can not be null");

        $z0 = staticinvoke <android.provider.DocumentsContract: boolean isRootUri(android.content.Context,android.net.Uri,int)>(r0, r1, 1);

        return $z0;
    }

    public static boolean isTreeUri(android.net.Uri)
    {
        int i0;
        java.lang.String $r0;
        java.lang.Object $r1;
        boolean $z1, z2;
        android.net.Uri r2;
        java.util.List r3;

        r2 := @parameter0: android.net.Uri;

        r3 = virtualinvoke r2.<android.net.Uri: java.util.List getPathSegments()>();

        i0 = interfaceinvoke r3.<java.util.List: int size()>();

        z2 = 0;

        if i0 < 2 goto label1;

        z2 = 0;

        $r0 = "tree";

        $r1 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0);

        $z1 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z1 == 0 goto label1;

        z2 = 1;

     label1:
        return z2;
    }

    public static boolean matchSearchQueryArguments(android.os.Bundle, java.lang.String, java.lang.String, long, long)
    {
        java.lang.String r0, r1, $r2, $r3, $r4, $r5, r7, r9;
        long l0, l1, l8, l9;
        int i2, $i5, i10;
        boolean $z0, $z1, $z2;
        byte $b3, $b4, $b6, $b7;
        android.os.Bundle r6;
        java.lang.String[] r8;

        r6 := @parameter0: android.os.Bundle;

        r7 := @parameter1: java.lang.String;

        r0 := @parameter2: java.lang.String;

        l0 := @parameter3: long;

        l8 := @parameter4: long;

        if r6 != null goto label1;

        return 1;

     label1:
        r1 = virtualinvoke r6.<android.os.Bundle: java.lang.String getString(java.lang.String,java.lang.String)>("android:query-arg-display-name", "");

        $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r4 = virtualinvoke r7.<java.lang.String: java.lang.String toLowerCase()>();

        $r5 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase()>();

        $z2 = virtualinvoke $r4.<java.lang.String: boolean contains(java.lang.CharSequence)>($r5);

        if $z2 != 0 goto label2;

        return 0;

     label2:
        l1 = virtualinvoke r6.<android.os.Bundle: long getLong(java.lang.String,long)>("android:query-arg-file-size-over", -1L);

        $b3 = l1 cmp -1L;

        if $b3 == 0 goto label3;

        $b7 = l8 cmp l1;

        if $b7 >= 0 goto label3;

        return 0;

     label3:
        l9 = virtualinvoke r6.<android.os.Bundle: long getLong(java.lang.String,long)>("android:query-arg-last-modified-after", -1L);

        $b4 = l9 cmp -1L;

        if $b4 == 0 goto label4;

        $b6 = l0 cmp l9;

        if $b6 >= 0 goto label4;

        return 0;

     label4:
        r8 = virtualinvoke r6.<android.os.Bundle: java.lang.String[] getStringArray(java.lang.String)>("android:query-arg-mime-types");

        if r8 == null goto label8;

        $i5 = lengthof r8;

        if $i5 <= 0 goto label8;

        r9 = staticinvoke <android.content.Intent: java.lang.String normalizeMimeType(java.lang.String)>(r0);

        i2 = lengthof r8;

        i10 = 0;

     label5:
        if i10 >= i2 goto label7;

        $r2 = r8[i10];

        $r3 = staticinvoke <android.content.Intent: java.lang.String normalizeMimeType(java.lang.String)>($r2);

        $z1 = staticinvoke <android.content.MimeTypeFilter: boolean matches(java.lang.String,java.lang.String)>(r9, $r3);

        if $z1 == 0 goto label6;

        return 1;

     label6:
        i10 = i10 + 1;

        goto label5;

     label7:
        return 0;

     label8:
        return 1;
    }

    public static android.net.Uri moveDocument(android.content.ContentResolver, android.net.Uri, android.net.Uri, android.net.Uri) throws java.io.FileNotFoundException
    {
        android.net.Uri r0, r1, r2, r9;
        android.os.Bundle r3, $r5;
        java.lang.String $r4;
        android.os.Parcelable $r6;
        java.lang.Exception $r7;
        android.content.ContentResolver r8;

        r8 := @parameter0: android.content.ContentResolver;

        r0 := @parameter1: android.net.Uri;

        r1 := @parameter2: android.net.Uri;

        r2 := @parameter3: android.net.Uri;

     label1:
        r3 = new android.os.Bundle;

        specialinvoke r3.<android.os.Bundle: void <init>()>();

        virtualinvoke r3.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("uri", r0);

        virtualinvoke r3.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("parentUri", r1);

        virtualinvoke r3.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("android.content.extra.TARGET_URI", r2);

        $r4 = virtualinvoke r0.<android.net.Uri: java.lang.String getAuthority()>();

        $r5 = virtualinvoke r8.<android.content.ContentResolver: android.os.Bundle call(java.lang.String,java.lang.String,java.lang.String,android.os.Bundle)>($r4, "android:moveDocument", null, r3);

        $r6 = virtualinvoke $r5.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("uri");

        r9 = (android.net.Uri) $r6;

     label2:
        return r9;

     label3:
        $r7 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DocumentsContract", "Failed to move document", $r7);

        staticinvoke <android.provider.DocumentsContract: void rethrowIfNecessary(java.lang.Exception)>($r7);

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static android.content.res.AssetFileDescriptor openImageThumbnail(java.io.File) throws java.io.FileNotFoundException
    {
        android.os.ParcelFileDescriptor r0;
        android.media.ExifInterface r1;
        long[] r2;
        int i0;
        java.lang.String $r3;
        android.content.res.AssetFileDescriptor $r4, $r8;
        java.lang.Throwable $r5;
        java.io.File r6;
        android.os.Bundle r7;
        long $l1, $l2;

        r6 := @parameter0: java.io.File;

        r0 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int)>(r6, 268435456);

     label01:
        r1 = new android.media.ExifInterface;

        $r3 = virtualinvoke r6.<java.io.File: java.lang.String getAbsolutePath()>();

        specialinvoke r1.<android.media.ExifInterface: void <init>(java.lang.String)>($r3);

        r2 = virtualinvoke r1.<android.media.ExifInterface: long[] getThumbnailRange()>();

     label02:
        if r2 == null goto label12;

     label03:
        i0 = virtualinvoke r1.<android.media.ExifInterface: int getAttributeInt(java.lang.String,int)>("Orientation", -1);

     label04:
        if i0 == 3 goto label09;

        if i0 == 6 goto label07;

        if i0 == 8 goto label05;

        r7 = null;

        goto label10;

     label05:
        r7 = new android.os.Bundle;

        specialinvoke r7.<android.os.Bundle: void <init>(int)>(1);

        virtualinvoke r7.<android.os.Bundle: void putInt(java.lang.String,int)>("android.provider.extra.ORIENTATION", 270);

     label06:
        goto label10;

     label07:
        r7 = new android.os.Bundle;

        specialinvoke r7.<android.os.Bundle: void <init>(int)>(1);

        virtualinvoke r7.<android.os.Bundle: void putInt(java.lang.String,int)>("android.provider.extra.ORIENTATION", 90);

     label08:
        goto label10;

     label09:
        r7 = new android.os.Bundle;

        specialinvoke r7.<android.os.Bundle: void <init>(int)>(1);

        virtualinvoke r7.<android.os.Bundle: void putInt(java.lang.String,int)>("android.provider.extra.ORIENTATION", 180);

     label10:
        $r8 = new android.content.res.AssetFileDescriptor;

        $l1 = r2[0];

        $l2 = r2[1];

        specialinvoke $r8.<android.content.res.AssetFileDescriptor: void <init>(android.os.ParcelFileDescriptor,long,long,android.os.Bundle)>(r0, $l1, $l2, r7);

     label11:
        return $r8;

     label12:
        goto label14;

     label13:
        $r5 := @caughtexception;

     label14:
        $r4 = new android.content.res.AssetFileDescriptor;

        specialinvoke $r4.<android.content.res.AssetFileDescriptor: void <init>(android.os.ParcelFileDescriptor,long,long,android.os.Bundle)>(r0, 0L, -1L, null);

        return $r4;

        catch java.io.IOException from label01 to label02 with label13;
        catch java.io.IOException from label03 to label04 with label13;
        catch java.io.IOException from label05 to label06 with label13;
        catch java.io.IOException from label07 to label08 with label13;
        catch java.io.IOException from label09 to label10 with label13;
        catch java.io.IOException from label10 to label11 with label13;
    }

    public static boolean removeDocument(android.content.ContentResolver, android.net.Uri, android.net.Uri) throws java.io.FileNotFoundException
    {
        android.net.Uri r0, r1;
        android.os.Bundle r2;
        java.lang.String $r3;
        java.lang.Exception $r5;
        android.content.ContentResolver r6;

        r6 := @parameter0: android.content.ContentResolver;

        r0 := @parameter1: android.net.Uri;

        r1 := @parameter2: android.net.Uri;

     label1:
        r2 = new android.os.Bundle;

        specialinvoke r2.<android.os.Bundle: void <init>()>();

        virtualinvoke r2.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("uri", r0);

        virtualinvoke r2.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("parentUri", r1);

        $r3 = virtualinvoke r0.<android.net.Uri: java.lang.String getAuthority()>();

        virtualinvoke r6.<android.content.ContentResolver: android.os.Bundle call(java.lang.String,java.lang.String,java.lang.String,android.os.Bundle)>($r3, "android:removeDocument", null, r2);

     label2:
        return 1;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DocumentsContract", "Failed to remove document", $r5);

        staticinvoke <android.provider.DocumentsContract: void rethrowIfNecessary(java.lang.Exception)>($r5);

        return 0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static android.net.Uri renameDocument(android.content.ContentResolver, android.net.Uri, java.lang.String) throws java.io.FileNotFoundException
    {
        android.net.Uri r0, r8;
        java.lang.String r1, $r3;
        android.os.Bundle r2, $r4;
        android.os.Parcelable $r5;
        java.lang.Exception $r6;
        android.content.ContentResolver r7;

        r7 := @parameter0: android.content.ContentResolver;

        r0 := @parameter1: android.net.Uri;

        r1 := @parameter2: java.lang.String;

     label1:
        r2 = new android.os.Bundle;

        specialinvoke r2.<android.os.Bundle: void <init>()>();

        virtualinvoke r2.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("uri", r0);

        virtualinvoke r2.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("_display_name", r1);

        $r3 = virtualinvoke r0.<android.net.Uri: java.lang.String getAuthority()>();

        $r4 = virtualinvoke r7.<android.content.ContentResolver: android.os.Bundle call(java.lang.String,java.lang.String,java.lang.String,android.os.Bundle)>($r3, "android:renameDocument", null, r2);

        $r5 = virtualinvoke $r4.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("uri");

        r8 = (android.net.Uri) $r5;

     label2:
        if r8 == null goto label3;

        goto label4;

     label3:
        r8 = r0;

     label4:
        return r8;

     label5:
        $r6 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DocumentsContract", "Failed to rename document", $r6);

        staticinvoke <android.provider.DocumentsContract: void rethrowIfNecessary(java.lang.Exception)>($r6);

        return null;

        catch java.lang.Exception from label1 to label2 with label5;
    }

    private static void rethrowIfNecessary(java.lang.Exception) throws java.io.FileNotFoundException
    {
        java.lang.Exception r0;
        dalvik.system.VMRuntime $r1;
        int $i0;
        boolean $z0, $z1, $z2;
        java.lang.RuntimeException $r2;
        android.os.RemoteException $r3;
        android.os.ParcelableException $r5;

        r0 := @parameter0: java.lang.Exception;

        $r1 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        $i0 = virtualinvoke $r1.<dalvik.system.VMRuntime: int getTargetSdkVersion()>();

        if $i0 < 26 goto label4;

        $z0 = r0 instanceof android.os.ParcelableException;

        if $z0 == 0 goto label1;

        $r5 = (android.os.ParcelableException) r0;

        virtualinvoke $r5.<android.os.ParcelableException: void maybeRethrow(java.lang.Class)>(class "Ljava/io/FileNotFoundException;");

        goto label4;

     label1:
        $z1 = r0 instanceof android.os.RemoteException;

        if $z1 == 0 goto label2;

        $r3 = (android.os.RemoteException) r0;

        virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        goto label4;

     label2:
        $z2 = r0 instanceof java.lang.RuntimeException;

        if $z2 != 0 goto label3;

        goto label4;

     label3:
        $r2 = (java.lang.RuntimeException) r0;

        throw $r2;

     label4:
        return;
    }

    public static android.net.Uri setManageMode(android.net.Uri)
    {
        android.net.Uri r0, $r4;
        android.net.Uri$Builder $r2, $r3;

        r0 := @parameter0: android.net.Uri;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "uri can not be null");

        $r2 = virtualinvoke r0.<android.net.Uri: android.net.Uri$Builder buildUpon()>();

        $r3 = virtualinvoke $r2.<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>("manage", "true");

        $r4 = virtualinvoke $r3.<android.net.Uri$Builder: android.net.Uri build()>();

        return $r4;
    }

    public static void <clinit>()
    {
        <android.provider.DocumentsContract: java.lang.String TAG> = "DocumentsContract";

        <android.provider.DocumentsContract: java.lang.String QUERY_ARG_MIME_TYPES> = "android:query-arg-mime-types";

        <android.provider.DocumentsContract: java.lang.String QUERY_ARG_LAST_MODIFIED_AFTER> = "android:query-arg-last-modified-after";

        <android.provider.DocumentsContract: java.lang.String QUERY_ARG_FILE_SIZE_OVER> = "android:query-arg-file-size-over";

        <android.provider.DocumentsContract: java.lang.String QUERY_ARG_EXCLUDE_MEDIA> = "android:query-arg-exclude-media";

        <android.provider.DocumentsContract: java.lang.String QUERY_ARG_DISPLAY_NAME> = "android:query-arg-display-name";

        <android.provider.DocumentsContract: java.lang.String PROVIDER_INTERFACE> = "android.content.action.DOCUMENTS_PROVIDER";

        <android.provider.DocumentsContract: java.lang.String PATH_TREE> = "tree";

        <android.provider.DocumentsContract: java.lang.String PATH_SEARCH> = "search";

        <android.provider.DocumentsContract: java.lang.String PATH_ROOT> = "root";

        <android.provider.DocumentsContract: java.lang.String PATH_RECENT> = "recent";

        <android.provider.DocumentsContract: java.lang.String PATH_DOCUMENT> = "document";

        <android.provider.DocumentsContract: java.lang.String PATH_CHILDREN> = "children";

        <android.provider.DocumentsContract: java.lang.String PARAM_QUERY> = "query";

        <android.provider.DocumentsContract: java.lang.String PARAM_MANAGE> = "manage";

        <android.provider.DocumentsContract: java.lang.String PACKAGE_DOCUMENTS_UI> = "com.android.documentsui";

        <android.provider.DocumentsContract: java.lang.String METHOD_RENAME_DOCUMENT> = "android:renameDocument";

        <android.provider.DocumentsContract: java.lang.String METHOD_REMOVE_DOCUMENT> = "android:removeDocument";

        <android.provider.DocumentsContract: java.lang.String METHOD_MOVE_DOCUMENT> = "android:moveDocument";

        <android.provider.DocumentsContract: java.lang.String METHOD_IS_CHILD_DOCUMENT> = "android:isChildDocument";

        <android.provider.DocumentsContract: java.lang.String METHOD_GET_DOCUMENT_METADATA> = "android:getDocumentMetadata";

        <android.provider.DocumentsContract: java.lang.String METHOD_FIND_DOCUMENT_PATH> = "android:findDocumentPath";

        <android.provider.DocumentsContract: java.lang.String METHOD_EJECT_ROOT> = "android:ejectRoot";

        <android.provider.DocumentsContract: java.lang.String METHOD_DELETE_DOCUMENT> = "android:deleteDocument";

        <android.provider.DocumentsContract: java.lang.String METHOD_CREATE_WEB_LINK_INTENT> = "android:createWebLinkIntent";

        <android.provider.DocumentsContract: java.lang.String METHOD_CREATE_DOCUMENT> = "android:createDocument";

        <android.provider.DocumentsContract: java.lang.String METHOD_COPY_DOCUMENT> = "android:copyDocument";

        <android.provider.DocumentsContract: java.lang.String METADATA_TYPES> = "android:documentMetadataTypes";

        <android.provider.DocumentsContract: java.lang.String METADATA_TREE_SIZE> = "android:metadataTreeSize";

        <android.provider.DocumentsContract: java.lang.String METADATA_TREE_COUNT> = "android:metadataTreeCount";

        <android.provider.DocumentsContract: java.lang.String METADATA_EXIF> = "android:documentExif";

        <android.provider.DocumentsContract: java.lang.String EXTRA_URI_PERMISSIONS> = "uriPermissions";

        <android.provider.DocumentsContract: java.lang.String EXTRA_URI> = "uri";

        <android.provider.DocumentsContract: java.lang.String EXTRA_TARGET_URI> = "android.content.extra.TARGET_URI";

        <android.provider.DocumentsContract: java.lang.String EXTRA_SHOW_ADVANCED> = "android.provider.extra.SHOW_ADVANCED";

        <android.provider.DocumentsContract: java.lang.String EXTRA_RESULT> = "result";

        <android.provider.DocumentsContract: java.lang.String EXTRA_PROMPT> = "android.provider.extra.PROMPT";

        <android.provider.DocumentsContract: java.lang.String EXTRA_PARENT_URI> = "parentUri";

        <android.provider.DocumentsContract: java.lang.String EXTRA_PACKAGE_NAME> = "android.intent.extra.PACKAGE_NAME";

        <android.provider.DocumentsContract: java.lang.String EXTRA_ORIENTATION> = "android.provider.extra.ORIENTATION";

        <android.provider.DocumentsContract: java.lang.String EXTRA_OPTIONS> = "options";

        <android.provider.DocumentsContract: java.lang.String EXTRA_LOADING> = "loading";

        <android.provider.DocumentsContract: java.lang.String EXTRA_INITIAL_URI> = "android.provider.extra.INITIAL_URI";

        <android.provider.DocumentsContract: java.lang.String EXTRA_INFO> = "info";

        <android.provider.DocumentsContract: java.lang.String EXTRA_EXCLUDE_SELF> = "android.provider.extra.EXCLUDE_SELF";

        <android.provider.DocumentsContract: java.lang.String EXTRA_ERROR> = "error";

        <android.provider.DocumentsContract: java.lang.String EXTERNAL_STORAGE_PROVIDER_AUTHORITY> = "com.android.externalstorage.documents";

        <android.provider.DocumentsContract: java.lang.String EXTERNAL_STORAGE_PRIMARY_EMULATED_ROOT_ID> = "primary";

        <android.provider.DocumentsContract: java.lang.String ACTION_MANAGE_DOCUMENT> = "android.provider.action.MANAGE_DOCUMENT";

        <android.provider.DocumentsContract: java.lang.String ACTION_DOCUMENT_SETTINGS> = "android.provider.action.DOCUMENT_SETTINGS";

        <android.provider.DocumentsContract: java.lang.String ACTION_DOCUMENT_ROOT_SETTINGS> = "android.provider.action.DOCUMENT_ROOT_SETTINGS";

        return;
    }
}
