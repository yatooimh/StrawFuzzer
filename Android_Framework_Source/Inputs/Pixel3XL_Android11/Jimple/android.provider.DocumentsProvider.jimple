public abstract class android.provider.DocumentsProvider extends android.content.ContentProvider
{
    private static final int MATCH_CHILDREN;
    private static final int MATCH_CHILDREN_TREE;
    private static final int MATCH_DOCUMENT;
    private static final int MATCH_DOCUMENT_TREE;
    private static final int MATCH_RECENT;
    private static final int MATCH_ROOT;
    private static final int MATCH_ROOTS;
    private static final int MATCH_SEARCH;
    private static final java.lang.String TAG;
    private java.lang.String mAuthority;
    private android.content.UriMatcher mMatcher;

    public void <init>()
    {
        android.provider.DocumentsProvider r0;

        r0 := @this: android.provider.DocumentsProvider;

        specialinvoke r0.<android.content.ContentProvider: void <init>()>();

        return;
    }

    private android.os.Bundle callUnchecked(java.lang.String, java.lang.String, android.os.Bundle) throws java.io.FileNotFoundException
    {
        android.provider.DocumentsProvider r0;
        android.content.Context r1, $r32;
        java.lang.String r3, $r5, $r7, $r12, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r30, $r37, $r40, $r49, $r51, $r57, $r58, $r60, $r61, $r62, $r63, $r66, $r67, $r68, $r69, $r70, $r71, $r72, $r74, $r75, $r76, $r77, $r78, $r79, $r80, $r81, $r82, $r83, $r84, $r85, $r86, $r89, $r90, $r91, $r92, $r93, $r95, $r96, $r98, $r100, $r101, $r102, r103, r104, r108, r109, r111, r112, r113, r116, r117, r120, r122, r125, r126, $r132;
        android.os.Bundle $r4, $r31, $r87, r105;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, z19, z20;
        android.os.Parcelable $r6, $r59, $r64, $r65, $r73, $r97, $r99;
        java.lang.StringBuilder $r8, $r26, $r35, $r43;
        java.lang.SecurityException $r14;
        java.lang.UnsupportedOperationException $r29;
        java.util.List $r33, $r42, $r47, $r53;
        java.lang.Object $r34, $r48, $r55;
        android.provider.DocumentsContract$Path $r41, $r54, r127, r128, r129;
        java.util.LinkedList $r52;
        int $i2, i17, i18, i19;
        android.content.IntentSender $r88;
        android.net.Uri $r94, r106, r107, r110, r114, r115, r118, r119, r121, r123, r124;

        r0 := @this: android.provider.DocumentsProvider;

        r103 := @parameter0: java.lang.String;

        r104 := @parameter1: java.lang.String;

        r105 := @parameter2: android.os.Bundle;

        r1 = virtualinvoke r0.<android.provider.DocumentsProvider: android.content.Context getContext()>();

        $r4 = new android.os.Bundle;

        specialinvoke $r4.<android.os.Bundle: void <init>()>();

        $r5 = "android:ejectRoot";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r103);

        if $z0 == 0 goto label01;

        $r99 = virtualinvoke r105.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("uri");

        r106 = (android.net.Uri) $r99;

        $r100 = virtualinvoke r0.<android.provider.DocumentsProvider: java.lang.String getCallingPackage()>();

        $r101 = virtualinvoke r0.<android.provider.DocumentsProvider: java.lang.String getCallingAttributionTag()>();

        virtualinvoke r0.<android.provider.DocumentsProvider: int enforceWritePermissionInner(android.net.Uri,java.lang.String,java.lang.String,android.os.IBinder)>(r106, $r100, $r101, null);

        $r102 = staticinvoke <android.provider.DocumentsContract: java.lang.String getRootId(android.net.Uri)>(r106);

        virtualinvoke r0.<android.provider.DocumentsProvider: void ejectRoot(java.lang.String)>($r102);

        return $r4;

     label01:
        $r6 = virtualinvoke r105.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("uri");

        r107 = (android.net.Uri) $r6;

        r108 = virtualinvoke r107.<android.net.Uri: java.lang.String getAuthority()>();

        r109 = staticinvoke <android.provider.DocumentsContract: java.lang.String getDocumentId(android.net.Uri)>(r107);

        $r7 = r0.<android.provider.DocumentsProvider: java.lang.String mAuthority>;

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r108);

        if $z1 == 0 goto label29;

        specialinvoke r0.<android.provider.DocumentsProvider: void enforceTree(android.net.Uri)>(r107);

        $r16 = "android:isChildDocument";

        $z2 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>(r103);

        if $z2 == 0 goto label04;

        $r95 = virtualinvoke r0.<android.provider.DocumentsProvider: java.lang.String getCallingPackage()>();

        $r96 = virtualinvoke r0.<android.provider.DocumentsProvider: java.lang.String getCallingAttributionTag()>();

        virtualinvoke r0.<android.provider.DocumentsProvider: int enforceReadPermissionInner(android.net.Uri,java.lang.String,java.lang.String,android.os.IBinder)>(r107, $r95, $r96, null);

        $r97 = virtualinvoke r105.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("android.content.extra.TARGET_URI");

        r110 = (android.net.Uri) $r97;

        r111 = virtualinvoke r110.<android.net.Uri: java.lang.String getAuthority()>();

        r112 = staticinvoke <android.provider.DocumentsContract: java.lang.String getDocumentId(android.net.Uri)>(r110);

        $r98 = r0.<android.provider.DocumentsProvider: java.lang.String mAuthority>;

        $z17 = virtualinvoke $r98.<java.lang.String: boolean equals(java.lang.Object)>(r111);

        if $z17 == 0 goto label02;

        $z18 = virtualinvoke r0.<android.provider.DocumentsProvider: boolean isChildDocument(java.lang.String,java.lang.String)>(r109, r112);

        if $z18 == 0 goto label02;

        z19 = 1;

        goto label03;

     label02:
        z19 = 0;

     label03:
        virtualinvoke $r4.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("result", z19);

        goto label26;

     label04:
        $r17 = "android:createDocument";

        $z3 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>(r103);

        if $z3 == 0 goto label05;

        $r89 = virtualinvoke r0.<android.provider.DocumentsProvider: java.lang.String getCallingPackage()>();

        $r90 = virtualinvoke r0.<android.provider.DocumentsProvider: java.lang.String getCallingAttributionTag()>();

        virtualinvoke r0.<android.provider.DocumentsProvider: int enforceWritePermissionInner(android.net.Uri,java.lang.String,java.lang.String,android.os.IBinder)>(r107, $r89, $r90, null);

        $r91 = virtualinvoke r105.<android.os.Bundle: java.lang.String getString(java.lang.String)>("mime_type");

        $r92 = virtualinvoke r105.<android.os.Bundle: java.lang.String getString(java.lang.String)>("_display_name");

        $r93 = virtualinvoke r0.<android.provider.DocumentsProvider: java.lang.String createDocument(java.lang.String,java.lang.String,java.lang.String)>(r109, $r91, $r92);

        $r94 = staticinvoke <android.provider.DocumentsContract: android.net.Uri buildDocumentUriMaybeUsingTree(android.net.Uri,java.lang.String)>(r107, $r93);

        virtualinvoke $r4.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("uri", $r94);

        goto label26;

     label05:
        $r18 = "android:createWebLinkIntent";

        $z4 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>(r103);

        if $z4 == 0 goto label06;

        $r85 = virtualinvoke r0.<android.provider.DocumentsProvider: java.lang.String getCallingPackage()>();

        $r86 = virtualinvoke r0.<android.provider.DocumentsProvider: java.lang.String getCallingAttributionTag()>();

        virtualinvoke r0.<android.provider.DocumentsProvider: int enforceWritePermissionInner(android.net.Uri,java.lang.String,java.lang.String,android.os.IBinder)>(r107, $r85, $r86, null);

        $r87 = virtualinvoke r105.<android.os.Bundle: android.os.Bundle getBundle(java.lang.String)>("options");

        $r88 = virtualinvoke r0.<android.provider.DocumentsProvider: android.content.IntentSender createWebLinkIntent(java.lang.String,android.os.Bundle)>(r109, $r87);

        virtualinvoke $r4.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("result", $r88);

        goto label26;

     label06:
        $r19 = "android:renameDocument";

        $z5 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>(r103);

        if $z5 == 0 goto label09;

        $r81 = virtualinvoke r0.<android.provider.DocumentsProvider: java.lang.String getCallingPackage()>();

        $r82 = virtualinvoke r0.<android.provider.DocumentsProvider: java.lang.String getCallingAttributionTag()>();

        virtualinvoke r0.<android.provider.DocumentsProvider: int enforceWritePermissionInner(android.net.Uri,java.lang.String,java.lang.String,android.os.IBinder)>(r107, $r81, $r82, null);

        $r83 = virtualinvoke r105.<android.os.Bundle: java.lang.String getString(java.lang.String)>("_display_name");

        r113 = virtualinvoke r0.<android.provider.DocumentsProvider: java.lang.String renameDocument(java.lang.String,java.lang.String)>(r109, $r83);

        if r113 == null goto label08;

        r114 = staticinvoke <android.provider.DocumentsContract: android.net.Uri buildDocumentUriMaybeUsingTree(android.net.Uri,java.lang.String)>(r107, r113);

        $z16 = staticinvoke <android.provider.DocumentsContract: boolean isTreeUri(android.net.Uri)>(r114);

        if $z16 != 0 goto label07;

        i17 = staticinvoke <android.provider.DocumentsProvider: int getCallingOrSelfUriPermissionModeFlags(android.content.Context,android.net.Uri)>(r1, r107);

        $r84 = virtualinvoke r0.<android.provider.DocumentsProvider: java.lang.String getCallingPackage()>();

        virtualinvoke r1.<android.content.Context: void grantUriPermission(java.lang.String,android.net.Uri,int)>($r84, r114, i17);

     label07:
        virtualinvoke $r4.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("uri", r114);

        virtualinvoke r0.<android.provider.DocumentsProvider: void revokeDocumentPermission(java.lang.String)>(r109);

     label08:
        goto label26;

     label09:
        $r20 = "android:deleteDocument";

        $z6 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>(r103);

        if $z6 == 0 goto label10;

        $r79 = virtualinvoke r0.<android.provider.DocumentsProvider: java.lang.String getCallingPackage()>();

        $r80 = virtualinvoke r0.<android.provider.DocumentsProvider: java.lang.String getCallingAttributionTag()>();

        virtualinvoke r0.<android.provider.DocumentsProvider: int enforceWritePermissionInner(android.net.Uri,java.lang.String,java.lang.String,android.os.IBinder)>(r107, $r79, $r80, null);

        virtualinvoke r0.<android.provider.DocumentsProvider: void deleteDocument(java.lang.String)>(r109);

        virtualinvoke r0.<android.provider.DocumentsProvider: void revokeDocumentPermission(java.lang.String)>(r109);

        goto label26;

     label10:
        $r21 = "android:copyDocument";

        $z7 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>(r103);

        if $z7 == 0 goto label13;

        $r73 = virtualinvoke r105.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("android.content.extra.TARGET_URI");

        r115 = (android.net.Uri) $r73;

        r116 = staticinvoke <android.provider.DocumentsContract: java.lang.String getDocumentId(android.net.Uri)>(r115);

        $r74 = virtualinvoke r0.<android.provider.DocumentsProvider: java.lang.String getCallingPackage()>();

        $r75 = virtualinvoke r0.<android.provider.DocumentsProvider: java.lang.String getCallingAttributionTag()>();

        virtualinvoke r0.<android.provider.DocumentsProvider: int enforceReadPermissionInner(android.net.Uri,java.lang.String,java.lang.String,android.os.IBinder)>(r107, $r74, $r75, null);

        $r76 = virtualinvoke r0.<android.provider.DocumentsProvider: java.lang.String getCallingPackage()>();

        $r77 = virtualinvoke r0.<android.provider.DocumentsProvider: java.lang.String getCallingAttributionTag()>();

        virtualinvoke r0.<android.provider.DocumentsProvider: int enforceWritePermissionInner(android.net.Uri,java.lang.String,java.lang.String,android.os.IBinder)>(r115, $r76, $r77, null);

        r117 = virtualinvoke r0.<android.provider.DocumentsProvider: java.lang.String copyDocument(java.lang.String,java.lang.String)>(r109, r116);

        if r117 == null goto label12;

        r118 = staticinvoke <android.provider.DocumentsContract: android.net.Uri buildDocumentUriMaybeUsingTree(android.net.Uri,java.lang.String)>(r107, r117);

        $z15 = staticinvoke <android.provider.DocumentsContract: boolean isTreeUri(android.net.Uri)>(r118);

        if $z15 != 0 goto label11;

        i18 = staticinvoke <android.provider.DocumentsProvider: int getCallingOrSelfUriPermissionModeFlags(android.content.Context,android.net.Uri)>(r1, r107);

        $r78 = virtualinvoke r0.<android.provider.DocumentsProvider: java.lang.String getCallingPackage()>();

        virtualinvoke r1.<android.content.Context: void grantUriPermission(java.lang.String,android.net.Uri,int)>($r78, r118, i18);

     label11:
        virtualinvoke $r4.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("uri", r118);

     label12:
        goto label26;

     label13:
        $r22 = "android:moveDocument";

        $z8 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>(r103);

        if $z8 == 0 goto label16;

        $r64 = virtualinvoke r105.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("parentUri");

        r119 = (android.net.Uri) $r64;

        r120 = staticinvoke <android.provider.DocumentsContract: java.lang.String getDocumentId(android.net.Uri)>(r119);

        $r65 = virtualinvoke r105.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("android.content.extra.TARGET_URI");

        r121 = (android.net.Uri) $r65;

        r3 = staticinvoke <android.provider.DocumentsContract: java.lang.String getDocumentId(android.net.Uri)>(r121);

        $r66 = virtualinvoke r0.<android.provider.DocumentsProvider: java.lang.String getCallingPackage()>();

        $r67 = virtualinvoke r0.<android.provider.DocumentsProvider: java.lang.String getCallingAttributionTag()>();

        virtualinvoke r0.<android.provider.DocumentsProvider: int enforceWritePermissionInner(android.net.Uri,java.lang.String,java.lang.String,android.os.IBinder)>(r107, $r66, $r67, null);

        $r68 = virtualinvoke r0.<android.provider.DocumentsProvider: java.lang.String getCallingPackage()>();

        $r69 = virtualinvoke r0.<android.provider.DocumentsProvider: java.lang.String getCallingAttributionTag()>();

        virtualinvoke r0.<android.provider.DocumentsProvider: int enforceReadPermissionInner(android.net.Uri,java.lang.String,java.lang.String,android.os.IBinder)>(r119, $r68, $r69, null);

        $r70 = virtualinvoke r0.<android.provider.DocumentsProvider: java.lang.String getCallingPackage()>();

        $r71 = virtualinvoke r0.<android.provider.DocumentsProvider: java.lang.String getCallingAttributionTag()>();

        virtualinvoke r0.<android.provider.DocumentsProvider: int enforceWritePermissionInner(android.net.Uri,java.lang.String,java.lang.String,android.os.IBinder)>(r121, $r70, $r71, null);

        r122 = virtualinvoke r0.<android.provider.DocumentsProvider: java.lang.String moveDocument(java.lang.String,java.lang.String,java.lang.String)>(r109, r120, r3);

        if r122 == null goto label15;

        r123 = staticinvoke <android.provider.DocumentsContract: android.net.Uri buildDocumentUriMaybeUsingTree(android.net.Uri,java.lang.String)>(r107, r122);

        $z14 = staticinvoke <android.provider.DocumentsContract: boolean isTreeUri(android.net.Uri)>(r123);

        if $z14 != 0 goto label14;

        i19 = staticinvoke <android.provider.DocumentsProvider: int getCallingOrSelfUriPermissionModeFlags(android.content.Context,android.net.Uri)>(r1, r107);

        $r72 = virtualinvoke r0.<android.provider.DocumentsProvider: java.lang.String getCallingPackage()>();

        virtualinvoke r1.<android.content.Context: void grantUriPermission(java.lang.String,android.net.Uri,int)>($r72, r123, i19);

        goto label14;

     label14:
        virtualinvoke $r4.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("uri", r123);

        goto label15;

     label15:
        goto label26;

     label16:
        $r23 = "android:removeDocument";

        $z9 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>(r103);

        if $z9 == 0 goto label17;

        $r59 = virtualinvoke r105.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("parentUri");

        r124 = (android.net.Uri) $r59;

        r125 = staticinvoke <android.provider.DocumentsContract: java.lang.String getDocumentId(android.net.Uri)>(r124);

        $r60 = virtualinvoke r0.<android.provider.DocumentsProvider: java.lang.String getCallingPackage()>();

        $r61 = virtualinvoke r0.<android.provider.DocumentsProvider: java.lang.String getCallingAttributionTag()>();

        virtualinvoke r0.<android.provider.DocumentsProvider: int enforceReadPermissionInner(android.net.Uri,java.lang.String,java.lang.String,android.os.IBinder)>(r124, $r60, $r61, null);

        $r62 = virtualinvoke r0.<android.provider.DocumentsProvider: java.lang.String getCallingPackage()>();

        $r63 = virtualinvoke r0.<android.provider.DocumentsProvider: java.lang.String getCallingAttributionTag()>();

        virtualinvoke r0.<android.provider.DocumentsProvider: int enforceWritePermissionInner(android.net.Uri,java.lang.String,java.lang.String,android.os.IBinder)>(r107, $r62, $r63, null);

        virtualinvoke r0.<android.provider.DocumentsProvider: void removeDocument(java.lang.String,java.lang.String)>(r109, r125);

        goto label26;

     label17:
        $r24 = "android:findDocumentPath";

        $z10 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>(r103);

        if $z10 == 0 goto label27;

        z20 = staticinvoke <android.provider.DocumentsContract: boolean isTreeUri(android.net.Uri)>(r107);

        if z20 == 0 goto label18;

        $r57 = virtualinvoke r0.<android.provider.DocumentsProvider: java.lang.String getCallingPackage()>();

        $r58 = virtualinvoke r0.<android.provider.DocumentsProvider: java.lang.String getCallingAttributionTag()>();

        virtualinvoke r0.<android.provider.DocumentsProvider: int enforceReadPermissionInner(android.net.Uri,java.lang.String,java.lang.String,android.os.IBinder)>(r107, $r57, $r58, null);

        goto label19;

     label18:
        $r32 = virtualinvoke r0.<android.provider.DocumentsProvider: android.content.Context getContext()>();

        virtualinvoke $r32.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_DOCUMENTS", null);

     label19:
        if z20 == 0 goto label20;

        r126 = staticinvoke <android.provider.DocumentsContract: java.lang.String getTreeDocumentId(android.net.Uri)>(r107);

        goto label21;

     label20:
        r126 = null;

     label21:
        r127 = virtualinvoke r0.<android.provider.DocumentsProvider: android.provider.DocumentsContract$Path findDocumentPath(java.lang.String,java.lang.String)>(r126, r109);

        r128 = r127;

        if z20 == 0 goto label25;

        r129 = r127;

        $r33 = virtualinvoke r127.<android.provider.DocumentsContract$Path: java.util.List getPath()>();

        $r34 = interfaceinvoke $r33.<java.util.List: java.lang.Object get(int)>(0);

        $z12 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r34, r126);

        if $z12 != 0 goto label24;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Provider doesn\'t return path from the tree root. Expected: ");

        virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r126);

        virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" found: ");

        $r47 = virtualinvoke r127.<android.provider.DocumentsContract$Path: java.util.List getPath()>();

        $r48 = interfaceinvoke $r47.<java.util.List: java.lang.Object get(int)>(0);

        $r49 = (java.lang.String) $r48;

        virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r49);

        $r51 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>("DocumentsProvider", $r51);

        $r52 = new java.util.LinkedList;

        $r53 = virtualinvoke r127.<android.provider.DocumentsContract$Path: java.util.List getPath()>();

        specialinvoke $r52.<java.util.LinkedList: void <init>(java.util.Collection)>($r53);

     label22:
        $i2 = virtualinvoke $r52.<java.util.LinkedList: int size()>();

        if $i2 <= 1 goto label23;

        $r55 = virtualinvoke $r52.<java.util.LinkedList: java.lang.Object getFirst()>();

        $z13 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r55, r126);

        if $z13 != 0 goto label23;

        virtualinvoke $r52.<java.util.LinkedList: java.lang.Object removeFirst()>();

        goto label22;

     label23:
        $r54 = new android.provider.DocumentsContract$Path;

        specialinvoke $r54.<android.provider.DocumentsContract$Path: void <init>(java.lang.String,java.util.List)>(null, $r52);

        r129 = $r54;

     label24:
        r128 = r129;

        $r132 = virtualinvoke r129.<android.provider.DocumentsContract$Path: java.lang.String getRootId()>();

        if $r132 == null goto label25;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Provider returns root id :");

        $r37 = virtualinvoke r129.<android.provider.DocumentsContract$Path: java.lang.String getRootId()>();

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" unexpectedly. Erase root id.");

        $r40 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>("DocumentsProvider", $r40);

        $r41 = new android.provider.DocumentsContract$Path;

        $r42 = virtualinvoke r129.<android.provider.DocumentsContract$Path: java.util.List getPath()>();

        specialinvoke $r41.<android.provider.DocumentsContract$Path: void <init>(java.lang.String,java.util.List)>(null, $r42);

        r128 = $r41;

     label25:
        virtualinvoke $r4.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("result", r128);

     label26:
        return $r4;

     label27:
        $r25 = "android:getDocumentMetadata";

        $z11 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>(r103);

        if $z11 == 0 goto label28;

        $r31 = virtualinvoke r0.<android.provider.DocumentsProvider: android.os.Bundle getDocumentMetadata(java.lang.String)>(r109);

        return $r31;

     label28:
        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Method not supported ");

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r103);

        $r29 = new java.lang.UnsupportedOperationException;

        $r30 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r30);

        throw $r29;

     label29:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested authority ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r108);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" doesn\'t match provider ");

        $r12 = r0.<android.provider.DocumentsProvider: java.lang.String mAuthority>;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = new java.lang.SecurityException;

        $r15 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.SecurityException: void <init>(java.lang.String)>($r15);

        throw $r14;
    }

    private void enforceTree(android.net.Uri)
    {
        android.provider.DocumentsProvider r0;
        java.lang.String r1, $r9, r11;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r3;
        java.lang.SecurityException $r8;
        android.net.Uri r10;

        r0 := @this: android.provider.DocumentsProvider;

        r10 := @parameter0: android.net.Uri;

        $z0 = staticinvoke <android.provider.DocumentsContract: boolean isTreeUri(android.net.Uri)>(r10);

        if $z0 == 0 goto label3;

        r1 = staticinvoke <android.provider.DocumentsContract: java.lang.String getTreeDocumentId(android.net.Uri)>(r10);

        r11 = staticinvoke <android.provider.DocumentsContract: java.lang.String getDocumentId(android.net.Uri)>(r10);

        $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r1, r11);

        if $z1 == 0 goto label1;

        return;

     label1:
        $z2 = virtualinvoke r0.<android.provider.DocumentsProvider: boolean isChildDocument(java.lang.String,java.lang.String)>(r1, r11);

        if $z2 == 0 goto label2;

        goto label3;

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Document ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a descendant of ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = new java.lang.SecurityException;

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.SecurityException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label3:
        return;
    }

    private static int getCallingOrSelfUriPermissionModeFlags(android.content.Context, android.net.Uri)
    {
        android.content.Context r0;
        android.net.Uri r1;
        int $i0, $i1, $i2;
        byte b3, b4, b5;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.net.Uri;

        b3 = 0;

        $i0 = virtualinvoke r0.<android.content.Context: int checkCallingOrSelfUriPermission(android.net.Uri,int)>(r1, 1);

        if $i0 != 0 goto label1;

        b3 = 0 | 1;

     label1:
        b4 = b3;

        $i1 = virtualinvoke r0.<android.content.Context: int checkCallingOrSelfUriPermission(android.net.Uri,int)>(r1, 2);

        if $i1 != 0 goto label2;

        b4 = b3 | 2;

     label2:
        b5 = b4;

        $i2 = virtualinvoke r0.<android.content.Context: int checkCallingOrSelfUriPermission(android.net.Uri,int)>(r1, 65);

        if $i2 != 0 goto label3;

        b5 = b4 | 64;

     label3:
        return b5;
    }

    private static java.lang.String getSortClause(android.os.Bundle)
    {
        java.lang.String r0, r2;
        boolean $z0;
        android.os.Bundle r1;

        r1 := @parameter0: android.os.Bundle;

        if r1 == null goto label1;

        goto label2;

     label1:
        r1 = <android.os.Bundle: android.os.Bundle EMPTY>;

     label2:
        r0 = virtualinvoke r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("android:query-arg-sql-sort-order");

        r2 = r0;

        if r0 != null goto label3;

        r2 = r0;

        $z0 = virtualinvoke r1.<android.os.Bundle: boolean containsKey(java.lang.String)>("android:query-arg-sort-columns");

        if $z0 == 0 goto label3;

        r2 = staticinvoke <android.content.ContentResolver: java.lang.String createSqlSortClause(android.os.Bundle)>(r1);

     label3:
        return r2;
    }

    private final android.content.res.AssetFileDescriptor openTypedAssetFileImpl(android.net.Uri, java.lang.String, android.os.Bundle, android.os.CancellationSignal) throws java.io.FileNotFoundException
    {
        android.provider.DocumentsProvider r0;
        android.net.Uri r1;
        java.lang.String r2, r5, r6, $r7;
        android.os.Bundle r3;
        android.os.CancellationSignal r4;
        boolean $z0, $z1, $z2;
        android.content.res.AssetFileDescriptor $r8, $r9, $r10, $r13;
        android.os.Parcelable $r11;
        android.graphics.Point $r12;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Bundle;

        r4 := @parameter3: android.os.CancellationSignal;

        specialinvoke r0.<android.provider.DocumentsProvider: void enforceTree(android.net.Uri)>(r1);

        r5 = staticinvoke <android.provider.DocumentsContract: java.lang.String getDocumentId(android.net.Uri)>(r1);

        if r3 == null goto label1;

        $z2 = virtualinvoke r3.<android.os.Bundle: boolean containsKey(java.lang.String)>("android.content.extra.SIZE");

        if $z2 == 0 goto label1;

        $r11 = virtualinvoke r3.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("android.content.extra.SIZE");

        $r12 = (android.graphics.Point) $r11;

        $r13 = virtualinvoke r0.<android.provider.DocumentsProvider: android.content.res.AssetFileDescriptor openDocumentThumbnail(java.lang.String,android.graphics.Point,android.os.CancellationSignal)>(r5, $r12, r4);

        return $r13;

     label1:
        $r7 = "*/*";

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label2;

        $r10 = virtualinvoke r0.<android.provider.DocumentsProvider: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)>(r1, "r");

        return $r10;

     label2:
        r6 = virtualinvoke r0.<android.provider.DocumentsProvider: java.lang.String getType(android.net.Uri)>(r1);

        if r6 == null goto label3;

        $z1 = staticinvoke <android.content.ClipDescription: boolean compareMimeTypes(java.lang.String,java.lang.String)>(r6, r2);

        if $z1 == 0 goto label3;

        $r9 = virtualinvoke r0.<android.provider.DocumentsProvider: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)>(r1, "r");

        return $r9;

     label3:
        $r8 = virtualinvoke r0.<android.provider.DocumentsProvider: android.content.res.AssetFileDescriptor openTypedDocument(java.lang.String,java.lang.String,android.os.Bundle,android.os.CancellationSignal)>(r5, r2, r3, r4);

        return $r8;
    }

    private void registerAuthority(java.lang.String)
    {
        android.provider.DocumentsProvider r0;
        android.content.UriMatcher $r1, $r4, $r6, $r8, $r10, $r12, $r14, $r16;
        java.lang.String $r2, $r3, $r5, $r7, $r9, $r11, $r13, $r15, r17;

        r0 := @this: android.provider.DocumentsProvider;

        r17 := @parameter0: java.lang.String;

        r0.<android.provider.DocumentsProvider: java.lang.String mAuthority> = r17;

        $r1 = new android.content.UriMatcher;

        specialinvoke $r1.<android.content.UriMatcher: void <init>(int)>(-1);

        r0.<android.provider.DocumentsProvider: android.content.UriMatcher mMatcher> = $r1;

        $r2 = r0.<android.provider.DocumentsProvider: java.lang.String mAuthority>;

        virtualinvoke $r1.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>($r2, "root", 1);

        $r4 = r0.<android.provider.DocumentsProvider: android.content.UriMatcher mMatcher>;

        $r3 = r0.<android.provider.DocumentsProvider: java.lang.String mAuthority>;

        virtualinvoke $r4.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>($r3, "root/*", 2);

        $r6 = r0.<android.provider.DocumentsProvider: android.content.UriMatcher mMatcher>;

        $r5 = r0.<android.provider.DocumentsProvider: java.lang.String mAuthority>;

        virtualinvoke $r6.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>($r5, "root/*/recent", 3);

        $r8 = r0.<android.provider.DocumentsProvider: android.content.UriMatcher mMatcher>;

        $r7 = r0.<android.provider.DocumentsProvider: java.lang.String mAuthority>;

        virtualinvoke $r8.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>($r7, "root/*/search", 4);

        $r10 = r0.<android.provider.DocumentsProvider: android.content.UriMatcher mMatcher>;

        $r9 = r0.<android.provider.DocumentsProvider: java.lang.String mAuthority>;

        virtualinvoke $r10.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>($r9, "document/*", 5);

        $r12 = r0.<android.provider.DocumentsProvider: android.content.UriMatcher mMatcher>;

        $r11 = r0.<android.provider.DocumentsProvider: java.lang.String mAuthority>;

        virtualinvoke $r12.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>($r11, "document/*/children", 6);

        $r14 = r0.<android.provider.DocumentsProvider: android.content.UriMatcher mMatcher>;

        $r13 = r0.<android.provider.DocumentsProvider: java.lang.String mAuthority>;

        virtualinvoke $r14.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>($r13, "tree/*/document/*", 7);

        $r16 = r0.<android.provider.DocumentsProvider: android.content.UriMatcher mMatcher>;

        $r15 = r0.<android.provider.DocumentsProvider: java.lang.String mAuthority>;

        virtualinvoke $r16.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>($r15, "tree/*/document/*/children", 8);

        return;
    }

    public void attachInfo(android.content.Context, android.content.pm.ProviderInfo)
    {
        android.provider.DocumentsProvider r0;
        android.content.Context r1;
        android.content.pm.ProviderInfo r2;
        java.lang.String $r3, $r6, $r7, $r9, $r10;
        boolean $z0, $z1, $z2, $z3;
        java.lang.SecurityException $r4, $r5, $r8;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.content.pm.ProviderInfo;

        $r3 = r2.<android.content.pm.ProviderInfo: java.lang.String authority>;

        specialinvoke r0.<android.provider.DocumentsProvider: void registerAuthority(java.lang.String)>($r3);

        $z0 = r2.<android.content.pm.ProviderInfo: boolean exported>;

        if $z0 == 0 goto label3;

        $z1 = r2.<android.content.pm.ProviderInfo: boolean grantUriPermissions>;

        if $z1 == 0 goto label2;

        $r7 = "android.permission.MANAGE_DOCUMENTS";

        $r6 = r2.<android.content.pm.ProviderInfo: java.lang.String readPermission>;

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z2 == 0 goto label1;

        $r10 = "android.permission.MANAGE_DOCUMENTS";

        $r9 = r2.<android.content.pm.ProviderInfo: java.lang.String writePermission>;

        $z3 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z3 == 0 goto label1;

        specialinvoke r0.<android.content.ContentProvider: void attachInfo(android.content.Context,android.content.pm.ProviderInfo)>(r1, r2);

        return;

     label1:
        $r8 = new java.lang.SecurityException;

        specialinvoke $r8.<java.lang.SecurityException: void <init>(java.lang.String)>("Provider must be protected by MANAGE_DOCUMENTS");

        throw $r8;

     label2:
        $r5 = new java.lang.SecurityException;

        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>("Provider must grantUriPermissions");

        throw $r5;

     label3:
        $r4 = new java.lang.SecurityException;

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>("Provider must be exported");

        throw $r4;
    }

    public void attachInfoForTesting(android.content.Context, android.content.pm.ProviderInfo)
    {
        android.provider.DocumentsProvider r0;
        android.content.Context r1;
        android.content.pm.ProviderInfo r2;
        java.lang.String $r3;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.content.pm.ProviderInfo;

        $r3 = r2.<android.content.pm.ProviderInfo: java.lang.String authority>;

        specialinvoke r0.<android.provider.DocumentsProvider: void registerAuthority(java.lang.String)>($r3);

        specialinvoke r0.<android.content.ContentProvider: void attachInfoForTesting(android.content.Context,android.content.pm.ProviderInfo)>(r1, r2);

        return;
    }

    public android.os.Bundle call(java.lang.String, java.lang.String, android.os.Bundle)
    {
        android.provider.DocumentsProvider r0;
        java.lang.String r1, r6;
        android.os.Bundle r2, $r3, r7;
        boolean $z0;
        java.lang.Throwable $r4;
        android.os.ParcelableException $r5;

        r0 := @this: android.provider.DocumentsProvider;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.os.Bundle;

        $z0 = virtualinvoke r6.<java.lang.String: boolean startsWith(java.lang.String)>("android:");

        if $z0 != 0 goto label1;

        $r3 = specialinvoke r0.<android.content.ContentProvider: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)>(r6, r1, r2);

        return $r3;

     label1:
        r7 = specialinvoke r0.<android.provider.DocumentsProvider: android.os.Bundle callUnchecked(java.lang.String,java.lang.String,android.os.Bundle)>(r6, r1, r2);

     label2:
        return r7;

     label3:
        $r4 := @caughtexception;

        $r5 = new android.os.ParcelableException;

        specialinvoke $r5.<android.os.ParcelableException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch java.io.FileNotFoundException from label1 to label2 with label3;
    }

    public android.net.Uri canonicalize(android.net.Uri)
    {
        android.provider.DocumentsProvider r0;
        android.net.Uri r1, r3;
        android.content.Context r2;
        int i0, $i1;
        android.content.UriMatcher $r4;
        java.lang.String $r5, $r6, $r7;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: android.net.Uri;

        r2 = virtualinvoke r0.<android.provider.DocumentsProvider: android.content.Context getContext()>();

        $r4 = r0.<android.provider.DocumentsProvider: android.content.UriMatcher mMatcher>;

        $i1 = virtualinvoke $r4.<android.content.UriMatcher: int match(android.net.Uri)>(r1);

        if $i1 == 7 goto label1;

        return null;

     label1:
        specialinvoke r0.<android.provider.DocumentsProvider: void enforceTree(android.net.Uri)>(r1);

        $r5 = virtualinvoke r1.<android.net.Uri: java.lang.String getAuthority()>();

        $r6 = staticinvoke <android.provider.DocumentsContract: java.lang.String getDocumentId(android.net.Uri)>(r1);

        r3 = staticinvoke <android.provider.DocumentsContract: android.net.Uri buildDocumentUri(java.lang.String,java.lang.String)>($r5, $r6);

        i0 = staticinvoke <android.provider.DocumentsProvider: int getCallingOrSelfUriPermissionModeFlags(android.content.Context,android.net.Uri)>(r2, r1);

        $r7 = virtualinvoke r0.<android.provider.DocumentsProvider: java.lang.String getCallingPackage()>();

        virtualinvoke r2.<android.content.Context: void grantUriPermission(java.lang.String,android.net.Uri,int)>($r7, r3, i0);

        return r3;
    }

    public java.lang.String copyDocument(java.lang.String, java.lang.String) throws java.io.FileNotFoundException
    {
        android.provider.DocumentsProvider r0;
        java.lang.String r1, r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Copy not supported");

        throw $r3;
    }

    public java.lang.String createDocument(java.lang.String, java.lang.String, java.lang.String) throws java.io.FileNotFoundException
    {
        android.provider.DocumentsProvider r0;
        java.lang.String r1, r2, r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Create not supported");

        throw $r4;
    }

    public android.content.IntentSender createWebLinkIntent(java.lang.String, android.os.Bundle) throws java.io.FileNotFoundException
    {
        android.provider.DocumentsProvider r0;
        java.lang.String r1;
        android.os.Bundle r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.Bundle;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("createWebLink is not supported.");

        throw $r3;
    }

    public final int delete(android.net.Uri, java.lang.String, java.lang.String[])
    {
        android.provider.DocumentsProvider r0;
        android.net.Uri r1;
        java.lang.String r2;
        java.lang.String[] r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String[];

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Delete not supported");

        throw $r4;
    }

    public void deleteDocument(java.lang.String) throws java.io.FileNotFoundException
    {
        android.provider.DocumentsProvider r0;
        java.lang.String r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Delete not supported");

        throw $r2;
    }

    public void ejectRoot(java.lang.String)
    {
        android.provider.DocumentsProvider r0;
        java.lang.String r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Eject not supported");

        throw $r2;
    }

    public android.provider.DocumentsContract$Path findDocumentPath(java.lang.String, java.lang.String) throws java.io.FileNotFoundException
    {
        android.provider.DocumentsProvider r0;
        java.lang.String r1, r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("findDocumentPath not supported.");

        throw $r3;
    }

    public android.os.Bundle getDocumentMetadata(java.lang.String) throws java.io.FileNotFoundException
    {
        android.provider.DocumentsProvider r0;
        java.lang.String r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Metadata not supported");

        throw $r2;
    }

    public java.lang.String[] getDocumentStreamTypes(java.lang.String, java.lang.String)
    {
        android.provider.DocumentsProvider r0;
        java.lang.String r1, r2, r6;
        boolean $z0, $z1;
        int $i0, $i1;
        long $l2, $l3;
        byte $b4;
        java.lang.String[] $r3;
        java.lang.Throwable $r4, $r5;
        android.database.Cursor r7, r8, r9;

        r0 := @this: android.provider.DocumentsProvider;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r7 = null;

        r8 = null;

     label01:
        r9 = virtualinvoke r0.<android.provider.DocumentsProvider: android.database.Cursor queryDocument(java.lang.String,java.lang.String[])>(r6, null);

     label02:
        r8 = r9;

        r7 = r9;

     label03:
        $z0 = interfaceinvoke r9.<android.database.Cursor: boolean moveToFirst()>();

        if $z0 == 0 goto label11;

     label04:
        r8 = r9;

        r7 = r9;

     label05:
        $i0 = interfaceinvoke r9.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("mime_type");

        r2 = interfaceinvoke r9.<android.database.Cursor: java.lang.String getString(int)>($i0);

     label06:
        r8 = r9;

        r7 = r9;

     label07:
        $i1 = interfaceinvoke r9.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("flags");

        $l2 = interfaceinvoke r9.<android.database.Cursor: long getLong(int)>($i1);

        $l3 = 512L & $l2;

        $b4 = $l3 cmp 0L;

        if $b4 != 0 goto label11;

     label08:
        if r2 == null goto label11;

        r8 = r9;

        r7 = r9;

     label09:
        $z1 = staticinvoke <android.content.MimeTypeFilter: boolean matches(java.lang.String,java.lang.String)>(r2, r1);

        if $z1 == 0 goto label11;

     label10:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r9);

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = r2;

        return $r3;

     label11:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r9);

        return null;

     label12:
        $r4 := @caughtexception;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r8);

        throw $r4;

     label13:
        $r5 := @caughtexception;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r7);

        return null;

        catch java.io.FileNotFoundException from label01 to label02 with label13;
        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.io.FileNotFoundException from label03 to label04 with label13;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.io.FileNotFoundException from label05 to label06 with label13;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.io.FileNotFoundException from label07 to label08 with label13;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.io.FileNotFoundException from label09 to label10 with label13;
        catch java.lang.Throwable from label09 to label10 with label12;
    }

    public java.lang.String getDocumentType(java.lang.String) throws java.io.FileNotFoundException
    {
        android.provider.DocumentsProvider r0;
        boolean $z0;
        int $i0;
        java.lang.Throwable $r1;
        java.lang.String r2, r4;
        android.database.Cursor r3;

        r0 := @this: android.provider.DocumentsProvider;

        r2 := @parameter0: java.lang.String;

        r3 = virtualinvoke r0.<android.provider.DocumentsProvider: android.database.Cursor queryDocument(java.lang.String,java.lang.String[])>(r2, null);

     label1:
        $z0 = interfaceinvoke r3.<android.database.Cursor: boolean moveToFirst()>();

        if $z0 == 0 goto label3;

        $i0 = interfaceinvoke r3.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("mime_type");

        r4 = interfaceinvoke r3.<android.database.Cursor: java.lang.String getString(int)>($i0);

     label2:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r3);

        return r4;

     label3:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r3);

        return null;

     label4:
        $r1 := @caughtexception;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r3);

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public java.lang.String[] getStreamTypes(android.net.Uri, java.lang.String)
    {
        android.provider.DocumentsProvider r0;
        android.net.Uri r1;
        java.lang.String r2, $r3;
        java.lang.String[] $r4;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<android.provider.DocumentsProvider: void enforceTree(android.net.Uri)>(r1);

        $r3 = staticinvoke <android.provider.DocumentsContract: java.lang.String getDocumentId(android.net.Uri)>(r1);

        $r4 = virtualinvoke r0.<android.provider.DocumentsProvider: java.lang.String[] getDocumentStreamTypes(java.lang.String,java.lang.String)>($r3, r2);

        return $r4;
    }

    public final java.lang.String getType(android.net.Uri)
    {
        android.provider.DocumentsProvider r0;
        int i0;
        android.content.UriMatcher $r1;
        java.lang.String $r2, $r3;
        java.lang.Throwable $r4;
        android.net.Uri r5;

        r0 := @this: android.provider.DocumentsProvider;

        r5 := @parameter0: android.net.Uri;

     label1:
        $r1 = r0.<android.provider.DocumentsProvider: android.content.UriMatcher mMatcher>;

        i0 = virtualinvoke $r1.<android.content.UriMatcher: int match(android.net.Uri)>(r5);

     label2:
        if i0 == 2 goto label4;

        if i0 == 5 goto label3;

        if i0 == 7 goto label3;

        return null;

     label3:
        specialinvoke r0.<android.provider.DocumentsProvider: void enforceTree(android.net.Uri)>(r5);

        $r2 = staticinvoke <android.provider.DocumentsContract: java.lang.String getDocumentId(android.net.Uri)>(r5);

        $r3 = virtualinvoke r0.<android.provider.DocumentsProvider: java.lang.String getDocumentType(java.lang.String)>($r2);

        return $r3;

     label4:
        return "vnd.android.document/root";

     label5:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DocumentsProvider", "Failed during getType", $r4);

        return null;

        catch java.io.FileNotFoundException from label1 to label2 with label5;
        catch java.io.FileNotFoundException from label3 to label4 with label5;
    }

    public final android.net.Uri insert(android.net.Uri, android.content.ContentValues)
    {
        android.provider.DocumentsProvider r0;
        android.net.Uri r1;
        android.content.ContentValues r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: android.content.ContentValues;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Insert not supported");

        throw $r3;
    }

    public boolean isChildDocument(java.lang.String, java.lang.String)
    {
        android.provider.DocumentsProvider r0;
        java.lang.String r1, r2;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return 0;
    }

    public java.lang.String moveDocument(java.lang.String, java.lang.String, java.lang.String) throws java.io.FileNotFoundException
    {
        android.provider.DocumentsProvider r0;
        java.lang.String r1, r2, r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Move not supported");

        throw $r4;
    }

    public final android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri, java.lang.String) throws java.io.FileNotFoundException
    {
        android.provider.DocumentsProvider r0;
        java.lang.String r1, r4;
        android.content.res.AssetFileDescriptor $r2, r5;
        android.net.Uri r3;
        android.os.ParcelFileDescriptor r6;

        r0 := @this: android.provider.DocumentsProvider;

        r3 := @parameter0: android.net.Uri;

        r4 := @parameter1: java.lang.String;

        specialinvoke r0.<android.provider.DocumentsProvider: void enforceTree(android.net.Uri)>(r3);

        r1 = staticinvoke <android.provider.DocumentsContract: java.lang.String getDocumentId(android.net.Uri)>(r3);

        r5 = null;

        r6 = virtualinvoke r0.<android.provider.DocumentsProvider: android.os.ParcelFileDescriptor openDocument(java.lang.String,java.lang.String,android.os.CancellationSignal)>(r1, r4, null);

        if r6 == null goto label1;

        $r2 = new android.content.res.AssetFileDescriptor;

        specialinvoke $r2.<android.content.res.AssetFileDescriptor: void <init>(android.os.ParcelFileDescriptor,long,long)>(r6, 0L, -1L);

        r5 = $r2;

     label1:
        return r5;
    }

    public final android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri, java.lang.String, android.os.CancellationSignal) throws java.io.FileNotFoundException
    {
        android.provider.DocumentsProvider r0;
        java.lang.String r1, $r3;
        android.os.CancellationSignal r2;
        android.content.res.AssetFileDescriptor $r4, r7;
        android.net.Uri r5;
        android.os.ParcelFileDescriptor r6;

        r0 := @this: android.provider.DocumentsProvider;

        r5 := @parameter0: android.net.Uri;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.os.CancellationSignal;

        specialinvoke r0.<android.provider.DocumentsProvider: void enforceTree(android.net.Uri)>(r5);

        $r3 = staticinvoke <android.provider.DocumentsContract: java.lang.String getDocumentId(android.net.Uri)>(r5);

        r6 = virtualinvoke r0.<android.provider.DocumentsProvider: android.os.ParcelFileDescriptor openDocument(java.lang.String,java.lang.String,android.os.CancellationSignal)>($r3, r1, r2);

        if r6 == null goto label1;

        $r4 = new android.content.res.AssetFileDescriptor;

        specialinvoke $r4.<android.content.res.AssetFileDescriptor: void <init>(android.os.ParcelFileDescriptor,long,long)>(r6, 0L, -1L);

        r7 = $r4;

        goto label2;

     label1:
        r7 = null;

     label2:
        return r7;
    }

    public abstract android.os.ParcelFileDescriptor openDocument(java.lang.String, java.lang.String, android.os.CancellationSignal) throws java.io.FileNotFoundException;

    public android.content.res.AssetFileDescriptor openDocumentThumbnail(java.lang.String, android.graphics.Point, android.os.CancellationSignal) throws java.io.FileNotFoundException
    {
        android.provider.DocumentsProvider r0;
        java.lang.String r1;
        android.graphics.Point r2;
        android.os.CancellationSignal r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.graphics.Point;

        r3 := @parameter2: android.os.CancellationSignal;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Thumbnails not supported");

        throw $r4;
    }

    public final android.os.ParcelFileDescriptor openFile(android.net.Uri, java.lang.String) throws java.io.FileNotFoundException
    {
        android.provider.DocumentsProvider r0;
        android.net.Uri r1;
        java.lang.String r2, $r3;
        android.os.ParcelFileDescriptor $r4;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<android.provider.DocumentsProvider: void enforceTree(android.net.Uri)>(r1);

        $r3 = staticinvoke <android.provider.DocumentsContract: java.lang.String getDocumentId(android.net.Uri)>(r1);

        $r4 = virtualinvoke r0.<android.provider.DocumentsProvider: android.os.ParcelFileDescriptor openDocument(java.lang.String,java.lang.String,android.os.CancellationSignal)>($r3, r2, null);

        return $r4;
    }

    public final android.os.ParcelFileDescriptor openFile(android.net.Uri, java.lang.String, android.os.CancellationSignal) throws java.io.FileNotFoundException
    {
        android.provider.DocumentsProvider r0;
        android.net.Uri r1;
        java.lang.String r2, $r4;
        android.os.CancellationSignal r3;
        android.os.ParcelFileDescriptor $r5;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.CancellationSignal;

        specialinvoke r0.<android.provider.DocumentsProvider: void enforceTree(android.net.Uri)>(r1);

        $r4 = staticinvoke <android.provider.DocumentsContract: java.lang.String getDocumentId(android.net.Uri)>(r1);

        $r5 = virtualinvoke r0.<android.provider.DocumentsProvider: android.os.ParcelFileDescriptor openDocument(java.lang.String,java.lang.String,android.os.CancellationSignal)>($r4, r2, r3);

        return $r5;
    }

    public final android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri, java.lang.String, android.os.Bundle) throws java.io.FileNotFoundException
    {
        android.provider.DocumentsProvider r0;
        android.net.Uri r1;
        java.lang.String r2;
        android.os.Bundle r3;
        android.content.res.AssetFileDescriptor $r4;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Bundle;

        $r4 = specialinvoke r0.<android.provider.DocumentsProvider: android.content.res.AssetFileDescriptor openTypedAssetFileImpl(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)>(r1, r2, r3, null);

        return $r4;
    }

    public final android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri, java.lang.String, android.os.Bundle, android.os.CancellationSignal) throws java.io.FileNotFoundException
    {
        android.provider.DocumentsProvider r0;
        android.net.Uri r1;
        java.lang.String r2;
        android.os.Bundle r3;
        android.os.CancellationSignal r4;
        android.content.res.AssetFileDescriptor $r5;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Bundle;

        r4 := @parameter3: android.os.CancellationSignal;

        $r5 = specialinvoke r0.<android.provider.DocumentsProvider: android.content.res.AssetFileDescriptor openTypedAssetFileImpl(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)>(r1, r2, r3, r4);

        return $r5;
    }

    public android.content.res.AssetFileDescriptor openTypedDocument(java.lang.String, java.lang.String, android.os.Bundle, android.os.CancellationSignal) throws java.io.FileNotFoundException
    {
        android.provider.DocumentsProvider r0;
        java.lang.String r1, r2;
        android.os.Bundle r3;
        android.os.CancellationSignal r4;
        java.io.FileNotFoundException $r5;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Bundle;

        r4 := @parameter3: android.os.CancellationSignal;

        $r5 = new java.io.FileNotFoundException;

        specialinvoke $r5.<java.io.FileNotFoundException: void <init>(java.lang.String)>("The requested MIME type is not supported.");

        throw $r5;
    }

    public final android.database.Cursor query(android.net.Uri, java.lang.String[], android.os.Bundle, android.os.CancellationSignal)
    {
        android.provider.DocumentsProvider r0;
        android.os.CancellationSignal r1;
        android.content.UriMatcher $r2;
        int $i0;
        boolean $z0;
        java.lang.String $r3, $r5, $r6, $r8, $r10, $r12, $r17;
        android.database.Cursor $r4, $r7, $r9, $r11, $r13, $r14;
        java.lang.Throwable $r18;
        android.net.Uri r19;
        java.lang.String[] r20;
        android.os.Bundle r21;
        java.lang.UnsupportedOperationException r22;
        java.lang.StringBuilder r23;

        r0 := @this: android.provider.DocumentsProvider;

        r19 := @parameter0: android.net.Uri;

        r20 := @parameter1: java.lang.String[];

        r21 := @parameter2: android.os.Bundle;

        r1 := @parameter3: android.os.CancellationSignal;

     label01:
        $r2 = r0.<android.provider.DocumentsProvider: android.content.UriMatcher mMatcher>;

        $i0 = virtualinvoke $r2.<android.content.UriMatcher: int match(android.net.Uri)>(r19);

        tableswitch($i0)
        {
            case 1: goto label10;
            case 2: goto label02;
            case 3: goto label09;
            case 4: goto label08;
            case 5: goto label07;
            case 6: goto label04;
            case 7: goto label07;
            case 8: goto label04;
            default: goto label02;
        };

     label02:
        r22 = new java.lang.UnsupportedOperationException;

     label03:
        goto label11;

     label04:
        specialinvoke r0.<android.provider.DocumentsProvider: void enforceTree(android.net.Uri)>(r19);

        $z0 = staticinvoke <android.provider.DocumentsContract: boolean isManageMode(android.net.Uri)>(r19);

        if $z0 == 0 goto label06;

     label05:
        $r5 = staticinvoke <android.provider.DocumentsContract: java.lang.String getDocumentId(android.net.Uri)>(r19);

        $r6 = staticinvoke <android.provider.DocumentsProvider: java.lang.String getSortClause(android.os.Bundle)>(r21);

        $r7 = virtualinvoke r0.<android.provider.DocumentsProvider: android.database.Cursor queryChildDocumentsForManage(java.lang.String,java.lang.String[],java.lang.String)>($r5, r20, $r6);

        return $r7;

     label06:
        $r3 = staticinvoke <android.provider.DocumentsContract: java.lang.String getDocumentId(android.net.Uri)>(r19);

        $r4 = virtualinvoke r0.<android.provider.DocumentsProvider: android.database.Cursor queryChildDocuments(java.lang.String,java.lang.String[],android.os.Bundle)>($r3, r20, r21);

        return $r4;

     label07:
        specialinvoke r0.<android.provider.DocumentsProvider: void enforceTree(android.net.Uri)>(r19);

        $r8 = staticinvoke <android.provider.DocumentsContract: java.lang.String getDocumentId(android.net.Uri)>(r19);

        $r9 = virtualinvoke r0.<android.provider.DocumentsProvider: android.database.Cursor queryDocument(java.lang.String,java.lang.String[])>($r8, r20);

        return $r9;

     label08:
        $r10 = staticinvoke <android.provider.DocumentsContract: java.lang.String getRootId(android.net.Uri)>(r19);

        $r11 = virtualinvoke r0.<android.provider.DocumentsProvider: android.database.Cursor querySearchDocuments(java.lang.String,java.lang.String[],android.os.Bundle)>($r10, r20, r21);

        return $r11;

     label09:
        $r12 = staticinvoke <android.provider.DocumentsContract: java.lang.String getRootId(android.net.Uri)>(r19);

        $r13 = virtualinvoke r0.<android.provider.DocumentsProvider: android.database.Cursor queryRecentDocuments(java.lang.String,java.lang.String[],android.os.Bundle,android.os.CancellationSignal)>($r12, r20, r21, r1);

        return $r13;

     label10:
        $r14 = virtualinvoke r0.<android.provider.DocumentsProvider: android.database.Cursor queryRoots(java.lang.String[])>(r20);

        return $r14;

     label11:
        r23 = new java.lang.StringBuilder;

        specialinvoke r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported Uri ");

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r19);

        $r17 = virtualinvoke r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r22.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r17);

        throw r22;

     label12:
        $r18 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DocumentsProvider", "Failed during query", $r18);

        return null;

        catch java.io.FileNotFoundException from label01 to label02 with label12;
        catch java.io.FileNotFoundException from label02 to label03 with label12;
        catch java.io.FileNotFoundException from label04 to label05 with label12;
        catch java.io.FileNotFoundException from label05 to label06 with label12;
        catch java.io.FileNotFoundException from label06 to label07 with label12;
        catch java.io.FileNotFoundException from label07 to label08 with label12;
        catch java.io.FileNotFoundException from label08 to label09 with label12;
        catch java.io.FileNotFoundException from label09 to label10 with label12;
        catch java.io.FileNotFoundException from label10 to label11 with label12;
        catch java.io.FileNotFoundException from label11 to label12 with label12;
    }

    public final android.database.Cursor query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String)
    {
        android.provider.DocumentsProvider r0;
        android.net.Uri r1;
        java.lang.String[] r2, r4;
        java.lang.String r3, r5;
        java.lang.UnsupportedOperationException $r6;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String[];

        r5 := @parameter4: java.lang.String;

        $r6 = new java.lang.UnsupportedOperationException;

        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Pre-Android-O query format not supported.");

        throw $r6;
    }

    public android.database.Cursor query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, android.os.CancellationSignal)
    {
        android.provider.DocumentsProvider r0;
        android.net.Uri r1;
        java.lang.String[] r2, r4;
        java.lang.String r3, r5;
        android.os.CancellationSignal r6;
        java.lang.UnsupportedOperationException $r7;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String[];

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: android.os.CancellationSignal;

        $r7 = new java.lang.UnsupportedOperationException;

        specialinvoke $r7.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Pre-Android-O query format not supported.");

        throw $r7;
    }

    public android.database.Cursor queryChildDocuments(java.lang.String, java.lang.String[], android.os.Bundle) throws java.io.FileNotFoundException
    {
        android.provider.DocumentsProvider r0;
        java.lang.String r1, $r4;
        java.lang.String[] r2;
        android.os.Bundle r3;
        android.database.Cursor $r5;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: android.os.Bundle;

        $r4 = staticinvoke <android.provider.DocumentsProvider: java.lang.String getSortClause(android.os.Bundle)>(r3);

        $r5 = virtualinvoke r0.<android.provider.DocumentsProvider: android.database.Cursor queryChildDocuments(java.lang.String,java.lang.String[],java.lang.String)>(r1, r2, $r4);

        return $r5;
    }

    public abstract android.database.Cursor queryChildDocuments(java.lang.String, java.lang.String[], java.lang.String) throws java.io.FileNotFoundException;

    public android.database.Cursor queryChildDocumentsForManage(java.lang.String, java.lang.String[], java.lang.String) throws java.io.FileNotFoundException
    {
        android.provider.DocumentsProvider r0;
        java.lang.String r1, r3;
        java.lang.String[] r2;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.lang.String;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Manage not supported");

        throw $r4;
    }

    public abstract android.database.Cursor queryDocument(java.lang.String, java.lang.String[]) throws java.io.FileNotFoundException;

    public android.database.Cursor queryRecentDocuments(java.lang.String, java.lang.String[]) throws java.io.FileNotFoundException
    {
        android.provider.DocumentsProvider r0;
        java.lang.String r1;
        java.lang.String[] r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String[];

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Recent not supported");

        throw $r3;
    }

    public android.database.Cursor queryRecentDocuments(java.lang.String, java.lang.String[], android.os.Bundle, android.os.CancellationSignal) throws java.io.FileNotFoundException
    {
        android.provider.DocumentsProvider r0;
        android.os.Bundle r1, $r4;
        android.os.CancellationSignal r2;
        java.lang.String[] $r5, r7;
        java.lang.String r6;
        android.database.Cursor r8;

        r0 := @this: android.provider.DocumentsProvider;

        r6 := @parameter0: java.lang.String;

        r7 := @parameter1: java.lang.String[];

        r1 := @parameter2: android.os.Bundle;

        r2 := @parameter3: android.os.CancellationSignal;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r6, "rootId can not be null");

        r8 = virtualinvoke r0.<android.provider.DocumentsProvider: android.database.Cursor queryRecentDocuments(java.lang.String,java.lang.String[])>(r6, r7);

        $r4 = new android.os.Bundle;

        specialinvoke $r4.<android.os.Bundle: void <init>()>();

        interfaceinvoke r8.<android.database.Cursor: void setExtras(android.os.Bundle)>($r4);

        $r5 = newarray (java.lang.String)[0];

        virtualinvoke $r4.<android.os.Bundle: void putStringArray(java.lang.String,java.lang.String[])>("android.content.extra.HONORED_ARGS", $r5);

        return r8;
    }

    public abstract android.database.Cursor queryRoots(java.lang.String[]) throws java.io.FileNotFoundException;

    public android.database.Cursor querySearchDocuments(java.lang.String, java.lang.String, java.lang.String[]) throws java.io.FileNotFoundException
    {
        android.provider.DocumentsProvider r0;
        java.lang.String r1, r2;
        java.lang.String[] r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String[];

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Search not supported");

        throw $r4;
    }

    public android.database.Cursor querySearchDocuments(java.lang.String, java.lang.String[], android.os.Bundle) throws java.io.FileNotFoundException
    {
        android.provider.DocumentsProvider r0;
        java.lang.String r1, $r6;
        java.lang.String[] r2;
        android.os.Bundle r3;
        android.database.Cursor $r7;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: android.os.Bundle;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "rootId can not be null");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r3, "queryArgs can not be null");

        $r6 = staticinvoke <android.provider.DocumentsContract: java.lang.String getSearchDocumentsQuery(android.os.Bundle)>(r3);

        $r7 = virtualinvoke r0.<android.provider.DocumentsProvider: android.database.Cursor querySearchDocuments(java.lang.String,java.lang.String,java.lang.String[])>(r1, $r6, r2);

        return $r7;
    }

    public void removeDocument(java.lang.String, java.lang.String) throws java.io.FileNotFoundException
    {
        android.provider.DocumentsProvider r0;
        java.lang.String r1, r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Remove not supported");

        throw $r3;
    }

    public java.lang.String renameDocument(java.lang.String, java.lang.String) throws java.io.FileNotFoundException
    {
        android.provider.DocumentsProvider r0;
        java.lang.String r1, r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Rename not supported");

        throw $r3;
    }

    public final void revokeDocumentPermission(java.lang.String)
    {
        android.provider.DocumentsProvider r0;
        java.lang.String r1, $r3, $r5;
        android.content.Context r2;
        android.net.Uri $r4, $r6;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<android.provider.DocumentsProvider: android.content.Context getContext()>();

        $r3 = r0.<android.provider.DocumentsProvider: java.lang.String mAuthority>;

        $r4 = staticinvoke <android.provider.DocumentsContract: android.net.Uri buildDocumentUri(java.lang.String,java.lang.String)>($r3, r1);

        virtualinvoke r2.<android.content.Context: void revokeUriPermission(android.net.Uri,int)>($r4, -1);

        $r5 = r0.<android.provider.DocumentsProvider: java.lang.String mAuthority>;

        $r6 = staticinvoke <android.provider.DocumentsContract: android.net.Uri buildTreeDocumentUri(java.lang.String,java.lang.String)>($r5, r1);

        virtualinvoke r2.<android.content.Context: void revokeUriPermission(android.net.Uri,int)>($r6, -1);

        return;
    }

    public final int update(android.net.Uri, android.content.ContentValues, java.lang.String, java.lang.String[])
    {
        android.provider.DocumentsProvider r0;
        android.net.Uri r1;
        android.content.ContentValues r2;
        java.lang.String r3;
        java.lang.String[] r4;
        java.lang.UnsupportedOperationException $r5;

        r0 := @this: android.provider.DocumentsProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: android.content.ContentValues;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String[];

        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Update not supported");

        throw $r5;
    }

    public static void <clinit>()
    {
        <android.provider.DocumentsProvider: java.lang.String TAG> = "DocumentsProvider";

        <android.provider.DocumentsProvider: int MATCH_SEARCH> = 4;

        <android.provider.DocumentsProvider: int MATCH_ROOTS> = 1;

        <android.provider.DocumentsProvider: int MATCH_ROOT> = 2;

        <android.provider.DocumentsProvider: int MATCH_RECENT> = 3;

        <android.provider.DocumentsProvider: int MATCH_DOCUMENT_TREE> = 7;

        <android.provider.DocumentsProvider: int MATCH_DOCUMENT> = 5;

        <android.provider.DocumentsProvider: int MATCH_CHILDREN_TREE> = 8;

        <android.provider.DocumentsProvider: int MATCH_CHILDREN> = 6;

        return;
    }
}
