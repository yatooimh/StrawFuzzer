public class android.provider.FontsContract extends java.lang.Object
{
    private static final long SYNC_FONT_FETCH_TIMEOUT_MS;
    private static final java.lang.String TAG;
    private static final int THREAD_RENEWAL_THRESHOLD_MS;
    private static final java.util.Comparator sByteArrayComparator;
    private static volatile android.content.Context sContext;
    private static android.os.Handler sHandler;
    private static java.util.Set sInQueueSet;
    private static final java.lang.Object sLock;
    private static final java.lang.Runnable sReplaceDispatcherThreadRunnable;
    private static android.os.HandlerThread sThread;
    private static final android.util.LruCache sTypefaceCache;

    static void <clinit>()
    {
        android.provider.'-$$Lambda$FontsContract$3FDNQd-WsglsyDhif-aHVbzkfrA' $r3;
        java.lang.Object r4;
        android.util.LruCache r5;
        android.provider.FontsContract$1 r6;
        java.util.Comparator r7;

        <android.provider.FontsContract: int THREAD_RENEWAL_THRESHOLD_MS> = 10000;

        <android.provider.FontsContract: java.lang.String TAG> = "FontsContract";

        <android.provider.FontsContract: long SYNC_FONT_FETCH_TIMEOUT_MS> = 500L;

        r4 = new java.lang.Object;

        specialinvoke r4.<java.lang.Object: void <init>()>();

        <android.provider.FontsContract: java.lang.Object sLock> = r4;

        r5 = new android.util.LruCache;

        specialinvoke r5.<android.util.LruCache: void <init>(int)>(16);

        <android.provider.FontsContract: android.util.LruCache sTypefaceCache> = r5;

        r6 = new android.provider.FontsContract$1;

        specialinvoke r6.<android.provider.FontsContract$1: void <init>()>();

        <android.provider.FontsContract: java.lang.Runnable sReplaceDispatcherThreadRunnable> = r6;

        $r3 = <android.provider._$$Lambda$FontsContract$3FDNQd_WsglsyDhif_aHVbzkfrA: android.provider.'-$$Lambda$FontsContract$3FDNQd-WsglsyDhif-aHVbzkfrA' INSTANCE>;

        r7 = (java.util.Comparator) $r3;

        <android.provider.FontsContract: java.util.Comparator sByteArrayComparator> = r7;

        return;
    }

    private void <init>()
    {
        android.provider.FontsContract r0;

        r0 := @this: android.provider.FontsContract;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static java.lang.Object access$000()
    {
        java.lang.Object $r0;

        $r0 = <android.provider.FontsContract: java.lang.Object sLock>;

        return $r0;
    }

    static android.os.HandlerThread access$100()
    {
        android.os.HandlerThread $r0;

        $r0 = <android.provider.FontsContract: android.os.HandlerThread sThread>;

        return $r0;
    }

    static android.os.HandlerThread access$102(android.os.HandlerThread)
    {
        android.os.HandlerThread r0;

        r0 := @parameter0: android.os.HandlerThread;

        <android.provider.FontsContract: android.os.HandlerThread sThread> = r0;

        return r0;
    }

    static android.os.Handler access$202(android.os.Handler)
    {
        android.os.Handler r0;

        r0 := @parameter0: android.os.Handler;

        <android.provider.FontsContract: android.os.Handler sHandler> = r0;

        return r0;
    }

    public static android.graphics.Typeface buildTypeface(android.content.Context, android.os.CancellationSignal, android.provider.FontsContract$FontInfo[])
    {
        android.graphics.fonts.Font$Builder r0, $r10, $r11, $r13, r24;
        int i0, $i1, $i2, $i3, i4, i5, i7, i8, i9;
        boolean $z0, $z1, $z2;
        android.graphics.fonts.FontStyle $r1, $r2, $r4, $r7;
        android.graphics.Typeface$CustomFallbackBuilder $r3, $r5;
        android.graphics.Typeface $r6;
        android.net.Uri $r8;
        java.lang.Object $r9;
        android.graphics.fonts.FontVariationAxis[] $r12;
        java.lang.Throwable $r15, $r16;
        android.content.Context r17;
        android.os.CancellationSignal r18;
        android.provider.FontsContract$FontInfo[] r19;
        java.util.Map r20;
        android.graphics.fonts.FontFamily$Builder r21, r26;
        android.provider.FontsContract$FontInfo r22;
        java.nio.ByteBuffer r23;
        byte b6;
        android.graphics.fonts.Font r25, r31, r32;
        android.graphics.fonts.FontFamily r29;

        r17 := @parameter0: android.content.Context;

        r18 := @parameter1: android.os.CancellationSignal;

        r19 := @parameter2: android.provider.FontsContract$FontInfo[];

        $z0 = virtualinvoke r17.<android.content.Context: boolean isRestricted()>();

        if $z0 == 0 goto label01;

        return null;

     label01:
        r20 = staticinvoke <android.provider.FontsContract: java.util.Map prepareFontData(android.content.Context,android.provider.FontsContract$FontInfo[],android.os.CancellationSignal)>(r17, r19, r18);

        $z1 = interfaceinvoke r20.<java.util.Map: boolean isEmpty()>();

        if $z1 == 0 goto label02;

        return null;

     label02:
        r21 = null;

        i4 = lengthof r19;

        i5 = 0;

     label03:
        if i5 >= i4 goto label16;

        r22 = r19[i5];

        $r8 = virtualinvoke r22.<android.provider.FontsContract$FontInfo: android.net.Uri getUri()>();

        $r9 = interfaceinvoke r20.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        r23 = (java.nio.ByteBuffer) $r9;

        if r23 != null goto label04;

        goto label14;

     label04:
        r0 = new android.graphics.fonts.Font$Builder;

        specialinvoke r0.<android.graphics.fonts.Font$Builder: void <init>(java.nio.ByteBuffer)>(r23);

        $i2 = virtualinvoke r22.<android.provider.FontsContract$FontInfo: int getWeight()>();

        r24 = virtualinvoke r0.<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font$Builder setWeight(int)>($i2);

        $z2 = virtualinvoke r22.<android.provider.FontsContract$FontInfo: boolean isItalic()>();

        if $z2 == 0 goto label06;

     label05:
        b6 = 1;

        goto label07;

     label06:
        b6 = 0;

     label07:
        $r10 = virtualinvoke r24.<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font$Builder setSlant(int)>(b6);

        $i3 = virtualinvoke r22.<android.provider.FontsContract$FontInfo: int getTtcIndex()>();

        $r11 = virtualinvoke $r10.<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font$Builder setTtcIndex(int)>($i3);

        $r12 = virtualinvoke r22.<android.provider.FontsContract$FontInfo: android.graphics.fonts.FontVariationAxis[] getAxes()>();

        $r13 = virtualinvoke $r11.<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font$Builder setFontVariationSettings(android.graphics.fonts.FontVariationAxis[])>($r12);

        r25 = virtualinvoke $r13.<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font build()>();

     label08:
        if r21 != null goto label11;

     label09:
        r26 = new android.graphics.fonts.FontFamily$Builder;

        specialinvoke r26.<android.graphics.fonts.FontFamily$Builder: void <init>(android.graphics.fonts.Font)>(r25);

     label10:
        r21 = r26;

        goto label12;

     label11:
        virtualinvoke r21.<android.graphics.fonts.FontFamily$Builder: android.graphics.fonts.FontFamily$Builder addFont(android.graphics.fonts.Font)>(r25);

     label12:
        goto label14;

     label13:
        $r16 := @caughtexception;

     label14:
        i5 = i5 + 1;

        goto label03;

     label15:
        $r15 := @caughtexception;

        return null;

     label16:
        if r21 != null goto label17;

        return null;

     label17:
        r29 = virtualinvoke r21.<android.graphics.fonts.FontFamily$Builder: android.graphics.fonts.FontFamily build()>();

        $r1 = new android.graphics.fonts.FontStyle;

        specialinvoke $r1.<android.graphics.fonts.FontStyle: void <init>(int,int)>(400, 0);

        r31 = virtualinvoke r29.<android.graphics.fonts.FontFamily: android.graphics.fonts.Font getFont(int)>(0);

        $r2 = virtualinvoke r31.<android.graphics.fonts.Font: android.graphics.fonts.FontStyle getStyle()>();

        i7 = virtualinvoke $r1.<android.graphics.fonts.FontStyle: int getMatchScore(android.graphics.fonts.FontStyle)>($r2);

        i8 = 1;

     label18:
        $i1 = virtualinvoke r29.<android.graphics.fonts.FontFamily: int getSize()>();

        if i8 >= $i1 goto label20;

        r32 = virtualinvoke r29.<android.graphics.fonts.FontFamily: android.graphics.fonts.Font getFont(int)>(i8);

        $r7 = virtualinvoke r32.<android.graphics.fonts.Font: android.graphics.fonts.FontStyle getStyle()>();

        i0 = virtualinvoke $r1.<android.graphics.fonts.FontStyle: int getMatchScore(android.graphics.fonts.FontStyle)>($r7);

        i9 = i7;

        if i0 >= i7 goto label19;

        r31 = r32;

        i9 = i0;

     label19:
        i8 = i8 + 1;

        i7 = i9;

        goto label18;

     label20:
        $r3 = new android.graphics.Typeface$CustomFallbackBuilder;

        specialinvoke $r3.<android.graphics.Typeface$CustomFallbackBuilder: void <init>(android.graphics.fonts.FontFamily)>(r29);

        $r4 = virtualinvoke r31.<android.graphics.fonts.Font: android.graphics.fonts.FontStyle getStyle()>();

        $r5 = virtualinvoke $r3.<android.graphics.Typeface$CustomFallbackBuilder: android.graphics.Typeface$CustomFallbackBuilder setStyle(android.graphics.fonts.FontStyle)>($r4);

        $r6 = virtualinvoke $r5.<android.graphics.Typeface$CustomFallbackBuilder: android.graphics.Typeface build()>();

        return $r6;

        catch java.lang.IllegalArgumentException from label04 to label05 with label15;
        catch java.io.IOException from label04 to label05 with label13;
        catch java.lang.IllegalArgumentException from label07 to label08 with label15;
        catch java.io.IOException from label07 to label08 with label13;
        catch java.lang.IllegalArgumentException from label09 to label10 with label15;
        catch java.io.IOException from label09 to label10 with label13;
        catch java.lang.IllegalArgumentException from label11 to label12 with label15;
        catch java.io.IOException from label11 to label12 with label13;
    }

    private static java.util.List convertToByteArrayList(android.content.pm.Signature[])
    {
        android.content.pm.Signature[] r0;
        java.util.ArrayList $r2;
        int $i0, i1;
        android.content.pm.Signature $r3;
        byte[] $r4;

        r0 := @parameter0: android.content.pm.Signature[];

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label2;

        $r3 = r0[i1];

        $r4 = virtualinvoke $r3.<android.content.pm.Signature: byte[] toByteArray()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r2;
    }

    private static boolean equalsByteArrayList(java.util.List, java.util.List)
    {
        java.util.List r0, r1;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r2, $r4;
        byte[] $r3, $r5;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        i3 = 0;

     label2:
        $i2 = interfaceinvoke r0.<java.util.List: int size()>();

        if i3 >= $i2 goto label4;

        $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i3);

        $r3 = (byte[]) $r2;

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i3);

        $r5 = (byte[]) $r4;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r3, $r5);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 1;
    }

    public static android.provider.FontsContract$FontFamilyResult fetchFonts(android.content.Context, android.os.CancellationSignal, android.provider.FontRequest) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.os.CancellationSignal r0;
        android.provider.FontRequest r1;
        android.content.pm.ProviderInfo r2;
        boolean $z0;
        android.content.pm.PackageManager $r3;
        android.provider.FontsContract$FontFamilyResult $r4, $r7, $r8, $r10;
        java.lang.String $r5;
        android.provider.FontsContract$FontInfo[] $r6;
        java.lang.Throwable $r9;
        android.content.Context r11;

        r11 := @parameter0: android.content.Context;

        r0 := @parameter1: android.os.CancellationSignal;

        r1 := @parameter2: android.provider.FontRequest;

        $z0 = virtualinvoke r11.<android.content.Context: boolean isRestricted()>();

        if $z0 == 0 goto label1;

        $r8 = new android.provider.FontsContract$FontFamilyResult;

        specialinvoke $r8.<android.provider.FontsContract$FontFamilyResult: void <init>(int,android.provider.FontsContract$FontInfo[])>(3, null);

        return $r8;

     label1:
        $r3 = virtualinvoke r11.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r2 = staticinvoke <android.provider.FontsContract: android.content.pm.ProviderInfo getProvider(android.content.pm.PackageManager,android.provider.FontRequest)>($r3, r1);

        if r2 != null goto label2;

        $r7 = new android.provider.FontsContract$FontFamilyResult;

        specialinvoke $r7.<android.provider.FontsContract$FontFamilyResult: void <init>(int,android.provider.FontsContract$FontInfo[])>(1, null);

        return $r7;

     label2:
        $r4 = new android.provider.FontsContract$FontFamilyResult;

        $r5 = r2.<android.content.pm.ProviderInfo: java.lang.String authority>;

        $r6 = staticinvoke <android.provider.FontsContract: android.provider.FontsContract$FontInfo[] getFontFromProvider(android.content.Context,android.provider.FontRequest,java.lang.String,android.os.CancellationSignal)>(r11, r1, $r5, r0);

        specialinvoke $r4.<android.provider.FontsContract$FontFamilyResult: void <init>(int,android.provider.FontsContract$FontInfo[])>(0, $r6);

     label3:
        return $r4;

     label4:
        $r9 := @caughtexception;

        $r10 = new android.provider.FontsContract$FontFamilyResult;

        specialinvoke $r10.<android.provider.FontsContract$FontFamilyResult: void <init>(int,android.provider.FontsContract$FontInfo[])>(2, null);

        return $r10;

        catch java.lang.IllegalArgumentException from label2 to label3 with label4;
    }

    public static android.provider.FontsContract$FontInfo[] getFontFromProvider(android.content.Context, android.provider.FontRequest, java.lang.String, android.os.CancellationSignal)
    {
        android.net.Uri r0, r1, r28;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i9, i11, i12, i13;
        java.util.ArrayList $r2, r25, r26;
        android.net.Uri$Builder $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        java.lang.String[] $r10, $r11;
        android.provider.FontsContract$FontInfo[] $r12, $r14;
        java.lang.Object[] $r13;
        boolean $z0, z2;
        long $l8, $l10;
        java.lang.Throwable $r15, $r16;
        android.content.Context r17;
        android.provider.FontRequest r18;
        java.lang.String r19, r23, r27;
        android.os.CancellationSignal r20;
        android.content.ContentResolver r22;
        android.database.Cursor r24;
        android.graphics.fonts.FontVariationAxis[] r29;
        android.provider.FontsContract$FontInfo r30;

        r17 := @parameter0: android.content.Context;

        r18 := @parameter1: android.provider.FontRequest;

        r19 := @parameter2: java.lang.String;

        r20 := @parameter3: android.os.CancellationSignal;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = new android.net.Uri$Builder;

        specialinvoke $r3.<android.net.Uri$Builder: void <init>()>();

        $r4 = virtualinvoke $r3.<android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)>("content");

        $r5 = virtualinvoke $r4.<android.net.Uri$Builder: android.net.Uri$Builder authority(java.lang.String)>(r19);

        r0 = virtualinvoke $r5.<android.net.Uri$Builder: android.net.Uri build()>();

        $r6 = new android.net.Uri$Builder;

        specialinvoke $r6.<android.net.Uri$Builder: void <init>()>();

        $r7 = virtualinvoke $r6.<android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)>("content");

        $r8 = virtualinvoke $r7.<android.net.Uri$Builder: android.net.Uri$Builder authority(java.lang.String)>(r19);

        $r9 = virtualinvoke $r8.<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>("file");

        r1 = virtualinvoke $r9.<android.net.Uri$Builder: android.net.Uri build()>();

        r22 = virtualinvoke r17.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r23 = virtualinvoke r18.<android.provider.FontRequest: java.lang.String getQuery()>();

        $r10 = newarray (java.lang.String)[7];

        $r10[0] = "_id";

        $r10[1] = "file_id";

        $r10[2] = "font_ttc_index";

        $r10[3] = "font_variation_settings";

        $r10[4] = "font_weight";

        $r10[5] = "font_italic";

        $r10[6] = "result_code";

        $r11 = newarray (java.lang.String)[1];

        $r11[0] = r23;

        r24 = virtualinvoke r22.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>(r0, $r10, "query = ?", $r11, null, r20);

        r25 = $r2;

        if r24 == null goto label34;

        r25 = $r2;

     label01:
        $i7 = interfaceinvoke r24.<android.database.Cursor: int getCount()>();

        if $i7 <= 0 goto label34;

        i0 = interfaceinvoke r24.<android.database.Cursor: int getColumnIndex(java.lang.String)>("result_code");

        r26 = new java.util.ArrayList;

        specialinvoke r26.<java.util.ArrayList: void <init>()>();

     label02:
        i1 = interfaceinvoke r24.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("_id");

        i2 = interfaceinvoke r24.<android.database.Cursor: int getColumnIndex(java.lang.String)>("file_id");

        i3 = interfaceinvoke r24.<android.database.Cursor: int getColumnIndex(java.lang.String)>("font_ttc_index");

        i4 = interfaceinvoke r24.<android.database.Cursor: int getColumnIndex(java.lang.String)>("font_variation_settings");

        i5 = interfaceinvoke r24.<android.database.Cursor: int getColumnIndex(java.lang.String)>("font_weight");

        i6 = interfaceinvoke r24.<android.database.Cursor: int getColumnIndex(java.lang.String)>("font_italic");

     label03:
        r25 = r26;

     label04:
        $z0 = interfaceinvoke r24.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label34;

     label05:
        if i0 == -1 goto label08;

     label06:
        i11 = interfaceinvoke r24.<android.database.Cursor: int getInt(int)>(i0);

     label07:
        goto label09;

     label08:
        i11 = 0;

     label09:
        if i3 == -1 goto label12;

     label10:
        i12 = interfaceinvoke r24.<android.database.Cursor: int getInt(int)>(i3);

     label11:
        goto label13;

     label12:
        i12 = 0;

     label13:
        if i4 == -1 goto label16;

     label14:
        r27 = interfaceinvoke r24.<android.database.Cursor: java.lang.String getString(int)>(i4);

     label15:
        goto label17;

     label16:
        r27 = null;

     label17:
        if i2 != -1 goto label20;

     label18:
        $l10 = interfaceinvoke r24.<android.database.Cursor: long getLong(int)>(i1);

        r28 = staticinvoke <android.content.ContentUris: android.net.Uri withAppendedId(android.net.Uri,long)>(r0, $l10);

     label19:
        goto label21;

     label20:
        $l8 = interfaceinvoke r24.<android.database.Cursor: long getLong(int)>(i2);

        r28 = staticinvoke <android.content.ContentUris: android.net.Uri withAppendedId(android.net.Uri,long)>(r1, $l8);

     label21:
        if i5 == -1 goto label26;

        if i6 == -1 goto label26;

     label22:
        i13 = interfaceinvoke r24.<android.database.Cursor: int getInt(int)>(i5);

        $i9 = interfaceinvoke r24.<android.database.Cursor: int getInt(int)>(i6);

        if $i9 != 1 goto label24;

     label23:
        z2 = 1;

        goto label25;

     label24:
        z2 = 0;

     label25:
        goto label27;

     label26:
        i13 = 400;

        z2 = 0;

     label27:
        r29 = staticinvoke <android.graphics.fonts.FontVariationAxis: android.graphics.fonts.FontVariationAxis[] fromFontVariationSettings(java.lang.String)>(r27);

        r30 = new android.provider.FontsContract$FontInfo;

        specialinvoke r30.<android.provider.FontsContract$FontInfo: void <init>(android.net.Uri,int,android.graphics.fonts.FontVariationAxis[],int,boolean,int)>(r28, i12, r29, i13, z2, i11);

        virtualinvoke r26.<java.util.ArrayList: boolean add(java.lang.Object)>(r30);

     label28:
        goto label03;

     label29:
        $r15 := @caughtexception;

        if r24 == null goto label33;

     label30:
        interfaceinvoke r24.<android.database.Cursor: void close()>();

     label31:
        goto label33;

     label32:
        $r16 := @caughtexception;

        virtualinvoke $r15.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r16);

     label33:
        throw $r15;

     label34:
        if r24 == null goto label35;

        interfaceinvoke r24.<android.database.Cursor: void close()>();

     label35:
        $r12 = newarray (android.provider.FontsContract$FontInfo)[0];

        $r13 = virtualinvoke r25.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r12);

        $r14 = (android.provider.FontsContract$FontInfo[]) $r13;

        return $r14;

        catch java.lang.Throwable from label01 to label02 with label29;
        catch java.lang.Throwable from label02 to label03 with label29;
        catch java.lang.Throwable from label04 to label05 with label29;
        catch java.lang.Throwable from label06 to label07 with label29;
        catch java.lang.Throwable from label10 to label11 with label29;
        catch java.lang.Throwable from label14 to label15 with label29;
        catch java.lang.Throwable from label18 to label19 with label29;
        catch java.lang.Throwable from label20 to label21 with label29;
        catch java.lang.Throwable from label22 to label23 with label29;
        catch java.lang.Throwable from label27 to label28 with label29;
        catch java.lang.Throwable from label30 to label31 with label32;
    }

    public static android.graphics.Typeface getFontSync(android.provider.FontRequest)
    {
        java.util.concurrent.locks.Condition r0;
        java.util.concurrent.atomic.AtomicReference r1;
        java.util.concurrent.atomic.AtomicBoolean r2, r3;
        android.os.Handler r4, $r10, $r12, $r14, r37;
        android.provider._$$Lambda$FontsContract$rqfIZKvP1frnI9vP1hVA8jQN_RE r5;
        android.util.LruCache $r6, $r8;
        java.lang.Object $r7, $r9, $r23, $r24, r34;
        java.lang.Runnable $r11, $r13;
        java.util.concurrent.TimeUnit $r15;
        boolean $z2, $z3;
        byte $b0;
        java.lang.String $r17, $r20, $r22, r32;
        android.os.HandlerThread $r25, r36;
        android.os.Looper $r26;
        java.lang.Throwable $r27, $r28, $r29, $r30, r44;
        android.provider.FontRequest r31;
        android.graphics.Typeface r33, r35, r39, r41;
        java.util.concurrent.locks.ReentrantLock r38;
        long l2, l3;
        java.lang.StringBuilder r42;

        r31 := @parameter0: android.provider.FontRequest;

        r32 = virtualinvoke r31.<android.provider.FontRequest: java.lang.String getIdentifier()>();

        $r6 = <android.provider.FontsContract: android.util.LruCache sTypefaceCache>;

        $r7 = virtualinvoke $r6.<android.util.LruCache: java.lang.Object get(java.lang.Object)>(r32);

        r33 = (android.graphics.Typeface) $r7;

        if r33 == null goto label01;

        return r33;

     label01:
        r34 = <android.provider.FontsContract: java.lang.Object sLock>;

        entermonitor r34;

     label02:
        $r8 = <android.provider.FontsContract: android.util.LruCache sTypefaceCache>;

        $r9 = virtualinvoke $r8.<android.util.LruCache: java.lang.Object get(java.lang.Object)>(r32);

        r35 = (android.graphics.Typeface) $r9;

     label03:
        if r35 == null goto label06;

     label04:
        exitmonitor r34;

     label05:
        return r35;

     label06:
        $r10 = <android.provider.FontsContract: android.os.Handler sHandler>;

        if $r10 != null goto label07;

        r36 = new android.os.HandlerThread;

        specialinvoke r36.<android.os.HandlerThread: void <init>(java.lang.String,int)>("fonts", 10);

        <android.provider.FontsContract: android.os.HandlerThread sThread> = r36;

        virtualinvoke r36.<android.os.HandlerThread: void start()>();

        r37 = new android.os.Handler;

        $r25 = <android.provider.FontsContract: android.os.HandlerThread sThread>;

        $r26 = virtualinvoke $r25.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke r37.<android.os.Handler: void <init>(android.os.Looper)>($r26);

        <android.provider.FontsContract: android.os.Handler sHandler> = r37;

     label07:
        r38 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke r38.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r0 = interfaceinvoke r38.<java.util.concurrent.locks.Lock: java.util.concurrent.locks.Condition newCondition()>();

        r1 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke r1.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r2 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke r2.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(1);

        r3 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke r3.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r4 = <android.provider.FontsContract: android.os.Handler sHandler>;

        r5 = new android.provider._$$Lambda$FontsContract$rqfIZKvP1frnI9vP1hVA8jQN_RE;

        specialinvoke r5.<android.provider._$$Lambda$FontsContract$rqfIZKvP1frnI9vP1hVA8jQN_RE: void <init>(android.provider.FontRequest,java.lang.String,java.util.concurrent.atomic.AtomicReference,java.util.concurrent.locks.Lock,java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.atomic.AtomicBoolean,java.util.concurrent.locks.Condition)>(r31, r32, r1, r38, r3, r2, r0);

        virtualinvoke r4.<android.os.Handler: boolean post(java.lang.Runnable)>(r5);

        $r12 = <android.provider.FontsContract: android.os.Handler sHandler>;

        $r11 = <android.provider.FontsContract: java.lang.Runnable sReplaceDispatcherThreadRunnable>;

        virtualinvoke $r12.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r11);

        $r14 = <android.provider.FontsContract: android.os.Handler sHandler>;

        $r13 = <android.provider.FontsContract: java.lang.Runnable sReplaceDispatcherThreadRunnable>;

        virtualinvoke $r14.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r13, 10000L);

        $r15 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        l2 = virtualinvoke $r15.<java.util.concurrent.TimeUnit: long toNanos(long)>(500L);

        interfaceinvoke r38.<java.util.concurrent.locks.Lock: void lock()>();

     label08:
        $z2 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z2 != 0 goto label11;

        $r24 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r39 = (android.graphics.Typeface) $r24;

     label09:
        interfaceinvoke r38.<java.util.concurrent.locks.Lock: void unlock()>();

        exitmonitor r34;

     label10:
        return r39;

     label11:
        l3 = interfaceinvoke r0.<java.util.concurrent.locks.Condition: long awaitNanos(long)>(l2);

     label12:
        goto label14;

     label13:
        $r27 := @caughtexception;

        l3 = l2;

     label14:
        $z3 = virtualinvoke r2.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z3 != 0 goto label17;

        $r23 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r41 = (android.graphics.Typeface) $r23;

     label15:
        interfaceinvoke r38.<java.util.concurrent.locks.Lock: void unlock()>();

        exitmonitor r34;

     label16:
        return r41;

     label17:
        l2 = l3;

        $b0 = l3 cmp 0L;

        if $b0 > 0 goto label11;

     label18:
        virtualinvoke r3.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        r42 = new java.lang.StringBuilder;

        specialinvoke r42.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Remote font fetch timed out: ");

        $r17 = virtualinvoke r31.<android.provider.FontRequest: java.lang.String getProviderAuthority()>();

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r20 = virtualinvoke r31.<android.provider.FontRequest: java.lang.String getQuery()>();

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke r42.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("FontsContract", $r22);

     label19:
        interfaceinvoke r38.<java.util.concurrent.locks.Lock: void unlock()>();

        exitmonitor r34;

     label20:
        return null;

     label21:
        $r29 := @caughtexception;

     label22:
        interfaceinvoke r38.<java.util.concurrent.locks.Lock: void unlock()>();

     label23:
        throw $r29;

     label24:
        $r30 := @caughtexception;

        r44 = $r30;

        goto label26;

     label25:
        $r28 := @caughtexception;

        r44 = $r28;

     label26:
        exitmonitor r34;

     label27:
        throw r44;

        catch java.lang.Throwable from label02 to label03 with label25;
        catch java.lang.Throwable from label04 to label05 with label24;
        catch java.lang.Throwable from label06 to label07 with label24;
        catch java.lang.Throwable from label07 to label08 with label24;
        catch java.lang.Throwable from label08 to label09 with label21;
        catch java.lang.Throwable from label09 to label10 with label24;
        catch java.lang.InterruptedException from label11 to label12 with label13;
        catch java.lang.Throwable from label11 to label12 with label21;
        catch java.lang.Throwable from label14 to label15 with label21;
        catch java.lang.Throwable from label15 to label16 with label24;
        catch java.lang.Throwable from label18 to label19 with label21;
        catch java.lang.Throwable from label19 to label20 with label24;
        catch java.lang.Throwable from label22 to label23 with label24;
        catch java.lang.Throwable from label23 to label24 with label24;
        catch java.lang.Throwable from label26 to label27 with label25;
    }

    public static android.content.pm.ProviderInfo getProvider(android.content.pm.PackageManager, android.provider.FontRequest) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.content.pm.ProviderInfo r0;
        java.lang.StringBuilder $r1, $r8;
        android.content.pm.PackageManager$NameNotFoundException $r4, $r14;
        java.lang.String $r5, $r6, $r7, $r12, $r15, $r17, r27;
        boolean $z0, $z1, $z2;
        android.content.pm.ApplicationInfo $r16;
        android.content.pm.PackageInfo $r18;
        android.content.pm.Signature[] $r19;
        java.util.Comparator $r20, $r24;
        int $i0, i1;
        java.util.ArrayList $r21;
        java.lang.Object $r22;
        java.util.Collection $r23;
        android.content.pm.PackageManager r25;
        android.provider.FontRequest r26;
        java.util.List r28, r29;

        r25 := @parameter0: android.content.pm.PackageManager;

        r26 := @parameter1: android.provider.FontRequest;

        r27 = virtualinvoke r26.<android.provider.FontRequest: java.lang.String getProviderAuthority()>();

        r0 = virtualinvoke r25.<android.content.pm.PackageManager: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,int)>(r27, 0);

        if r0 == null goto label6;

        $r6 = r0.<android.content.pm.ProviderInfo: java.lang.String packageName>;

        $r7 = virtualinvoke r26.<android.provider.FontRequest: java.lang.String getProviderPackage()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label5;

        $r16 = r0.<android.content.pm.ProviderInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $z1 = virtualinvoke $r16.<android.content.pm.ApplicationInfo: boolean isSystemApp()>();

        if $z1 == 0 goto label1;

        return r0;

     label1:
        $r17 = r0.<android.content.pm.ProviderInfo: java.lang.String packageName>;

        $r18 = virtualinvoke r25.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>($r17, 64);

        $r19 = $r18.<android.content.pm.PackageInfo: android.content.pm.Signature[] signatures>;

        r28 = staticinvoke <android.provider.FontsContract: java.util.List convertToByteArrayList(android.content.pm.Signature[])>($r19);

        $r20 = <android.provider.FontsContract: java.util.Comparator sByteArrayComparator>;

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r28, $r20);

        r29 = virtualinvoke r26.<android.provider.FontRequest: java.util.List getCertificates()>();

        i1 = 0;

     label2:
        $i0 = interfaceinvoke r29.<java.util.List: int size()>();

        if i1 >= $i0 goto label4;

        $r21 = new java.util.ArrayList;

        $r22 = interfaceinvoke r29.<java.util.List: java.lang.Object get(int)>(i1);

        $r23 = (java.util.Collection) $r22;

        specialinvoke $r21.<java.util.ArrayList: void <init>(java.util.Collection)>($r23);

        $r24 = <android.provider.FontsContract: java.util.Comparator sByteArrayComparator>;

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r21, $r24);

        $z2 = staticinvoke <android.provider.FontsContract: boolean equalsByteArrayList(java.util.List,java.util.List)>(r28, $r21);

        if $z2 == 0 goto label3;

        return r0;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return null;

     label5:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found content provider ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", but package was not ");

        $r12 = virtualinvoke r26.<android.provider.FontRequest: java.lang.String getProviderPackage()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = new android.content.pm.PackageManager$NameNotFoundException;

        $r15 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>($r15);

        throw $r14;

     label6:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No package found for authority: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27);

        $r4 = new android.content.pm.PackageManager$NameNotFoundException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    static void lambda$getFontSync$0(android.provider.FontRequest, java.lang.String, java.util.concurrent.atomic.AtomicReference, java.util.concurrent.locks.Lock, java.util.concurrent.atomic.AtomicBoolean, java.util.concurrent.atomic.AtomicBoolean, java.util.concurrent.locks.Condition)
    {
        java.lang.String r0;
        java.util.concurrent.atomic.AtomicReference r1;
        java.util.concurrent.locks.Lock r2;
        java.util.concurrent.atomic.AtomicBoolean r3, r4;
        java.util.concurrent.locks.Condition r5;
        android.content.Context $r6, $r7;
        int $i0;
        boolean $z0;
        android.provider.FontsContract$FontInfo[] $r8;
        android.util.LruCache $r9;
        android.content.pm.PackageManager$NameNotFoundException $r11;
        java.lang.Throwable $r12;
        android.provider.FontRequest r13;
        android.provider.FontsContract$FontFamilyResult r14;
        android.graphics.Typeface r15;

        r13 := @parameter0: android.provider.FontRequest;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: java.util.concurrent.atomic.AtomicReference;

        r2 := @parameter3: java.util.concurrent.locks.Lock;

        r3 := @parameter4: java.util.concurrent.atomic.AtomicBoolean;

        r4 := @parameter5: java.util.concurrent.atomic.AtomicBoolean;

        r5 := @parameter6: java.util.concurrent.locks.Condition;

     label01:
        $r6 = <android.provider.FontsContract: android.content.Context sContext>;

        r14 = staticinvoke <android.provider.FontsContract: android.provider.FontsContract$FontFamilyResult fetchFonts(android.content.Context,android.os.CancellationSignal,android.provider.FontRequest)>($r6, null, r13);

        $i0 = virtualinvoke r14.<android.provider.FontsContract$FontFamilyResult: int getStatusCode()>();

        if $i0 != 0 goto label05;

        $r7 = <android.provider.FontsContract: android.content.Context sContext>;

        $r8 = virtualinvoke r14.<android.provider.FontsContract$FontFamilyResult: android.provider.FontsContract$FontInfo[] getFonts()>();

        r15 = staticinvoke <android.provider.FontsContract: android.graphics.Typeface buildTypeface(android.content.Context,android.os.CancellationSignal,android.provider.FontsContract$FontInfo[])>($r7, null, $r8);

     label02:
        if r15 == null goto label04;

     label03:
        $r9 = <android.provider.FontsContract: android.util.LruCache sTypefaceCache>;

        virtualinvoke $r9.<android.util.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r15);

     label04:
        virtualinvoke r1.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r15);

     label05:
        goto label07;

     label06:
        $r11 := @caughtexception;

     label07:
        interfaceinvoke r2.<java.util.concurrent.locks.Lock: void lock()>();

     label08:
        $z0 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 != 0 goto label09;

        virtualinvoke r4.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

        interfaceinvoke r5.<java.util.concurrent.locks.Condition: void signal()>();

     label09:
        interfaceinvoke r2.<java.util.concurrent.locks.Lock: void unlock()>();

        return;

     label10:
        $r12 := @caughtexception;

        interfaceinvoke r2.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r12;

        catch android.content.pm.PackageManager$NameNotFoundException from label01 to label02 with label06;
        catch android.content.pm.PackageManager$NameNotFoundException from label03 to label04 with label06;
        catch android.content.pm.PackageManager$NameNotFoundException from label04 to label05 with label06;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    static void lambda$requestFonts$1(android.provider.FontsContract$FontRequestCallback, android.graphics.Typeface)
    {
        android.provider.FontsContract$FontRequestCallback r0;
        android.graphics.Typeface r1;

        r0 := @parameter0: android.provider.FontsContract$FontRequestCallback;

        r1 := @parameter1: android.graphics.Typeface;

        virtualinvoke r0.<android.provider.FontsContract$FontRequestCallback: void onTypefaceRetrieved(android.graphics.Typeface)>(r1);

        return;
    }

    static void lambda$requestFonts$10(android.provider.FontsContract$FontRequestCallback)
    {
        android.provider.FontsContract$FontRequestCallback r0;

        r0 := @parameter0: android.provider.FontsContract$FontRequestCallback;

        virtualinvoke r0.<android.provider.FontsContract$FontRequestCallback: void onTypefaceRequestFailed(int)>(-3);

        return;
    }

    static void lambda$requestFonts$11(android.provider.FontsContract$FontRequestCallback, android.graphics.Typeface)
    {
        android.provider.FontsContract$FontRequestCallback r0;
        android.graphics.Typeface r1;

        r0 := @parameter0: android.provider.FontsContract$FontRequestCallback;

        r1 := @parameter1: android.graphics.Typeface;

        virtualinvoke r0.<android.provider.FontsContract$FontRequestCallback: void onTypefaceRetrieved(android.graphics.Typeface)>(r1);

        return;
    }

    static void lambda$requestFonts$12(android.content.Context, android.os.CancellationSignal, android.provider.FontRequest, android.os.Handler, android.provider.FontsContract$FontRequestCallback)
    {
        android.os.CancellationSignal r0;
        android.provider.FontRequest r1;
        android.os.Handler r2;
        android.provider.FontsContract$FontRequestCallback r3;
        int i0, $i1, $i2, $i3, i4, i5, i6;
        android.util.LruCache $r4, $r8;
        java.lang.String $r5, $r9;
        java.lang.Object $r6;
        android.provider._$$Lambda$FontsContract$LJ3jfZobcxq5xTMmb88GlM1r9Jk $r7;
        android.provider._$$Lambda$FontsContract$gJeQYFM3pOm_NcWmWnWDAEk3vlM $r11;
        android.provider._$$Lambda$FontsContract$rqmVfWYeZ5NL5MtBx5LOdhNAOP4 $r12;
        android.provider._$$Lambda$FontsContract$rvEOORTXb3mMYTLkoH9nlHQr9Iw $r13;
        android.provider._$$Lambda$FontsContract$Qvl9aVA7txTF3tFcFbbKD_nWpuM $r14;
        android.provider._$$Lambda$FontsContract$YhiTIVckhFBdgNR2V1bGY3Q1Nqg $r15;
        android.provider._$$Lambda$FontsContract$FCawscMFN_8Qxcb2EdA5gdE_O2k $r16;
        android.provider._$$Lambda$FontsContract$DV4gvjPxJzdQvcfoIJqGrzFtTQs $r17;
        android.provider._$$Lambda$FontsContract$xDMhIK5JxjXFDIXBeQbZ_hdXTBc $r18;
        android.content.pm.PackageManager$NameNotFoundException $r19;
        android.provider._$$Lambda$FontsContract$bLFahJqnd9gkPbDqB_OCiChzm_E $r20;
        android.content.Context r21;
        android.provider.FontsContract$FontFamilyResult r22;
        android.graphics.Typeface r23, r26;
        android.provider.FontsContract$FontInfo[] r24;
        android.provider.FontsContract$FontInfo r25;

        r21 := @parameter0: android.content.Context;

        r0 := @parameter1: android.os.CancellationSignal;

        r1 := @parameter2: android.provider.FontRequest;

        r2 := @parameter3: android.os.Handler;

        r3 := @parameter4: android.provider.FontsContract$FontRequestCallback;

     label01:
        r22 = staticinvoke <android.provider.FontsContract: android.provider.FontsContract$FontFamilyResult fetchFonts(android.content.Context,android.os.CancellationSignal,android.provider.FontRequest)>(r21, r0, r1);

     label02:
        $r4 = <android.provider.FontsContract: android.util.LruCache sTypefaceCache>;

        $r5 = virtualinvoke r1.<android.provider.FontRequest: java.lang.String getIdentifier()>();

        $r6 = virtualinvoke $r4.<android.util.LruCache: java.lang.Object get(java.lang.Object)>($r5);

        r23 = (android.graphics.Typeface) $r6;

        if r23 == null goto label03;

        $r18 = new android.provider._$$Lambda$FontsContract$xDMhIK5JxjXFDIXBeQbZ_hdXTBc;

        specialinvoke $r18.<android.provider._$$Lambda$FontsContract$xDMhIK5JxjXFDIXBeQbZ_hdXTBc: void <init>(android.provider.FontsContract$FontRequestCallback,android.graphics.Typeface)>(r3, r23);

        virtualinvoke r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r18);

        return;

     label03:
        $i1 = virtualinvoke r22.<android.provider.FontsContract$FontFamilyResult: int getStatusCode()>();

        if $i1 == 0 goto label06;

        i4 = virtualinvoke r22.<android.provider.FontsContract$FontFamilyResult: int getStatusCode()>();

        if i4 == 1 goto label05;

        if i4 == 2 goto label04;

        $r17 = new android.provider._$$Lambda$FontsContract$DV4gvjPxJzdQvcfoIJqGrzFtTQs;

        specialinvoke $r17.<android.provider._$$Lambda$FontsContract$DV4gvjPxJzdQvcfoIJqGrzFtTQs: void <init>(android.provider.FontsContract$FontRequestCallback)>(r3);

        virtualinvoke r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r17);

        return;

     label04:
        $r16 = new android.provider._$$Lambda$FontsContract$FCawscMFN_8Qxcb2EdA5gdE_O2k;

        specialinvoke $r16.<android.provider._$$Lambda$FontsContract$FCawscMFN_8Qxcb2EdA5gdE_O2k: void <init>(android.provider.FontsContract$FontRequestCallback)>(r3);

        virtualinvoke r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r16);

        return;

     label05:
        $r15 = new android.provider._$$Lambda$FontsContract$YhiTIVckhFBdgNR2V1bGY3Q1Nqg;

        specialinvoke $r15.<android.provider._$$Lambda$FontsContract$YhiTIVckhFBdgNR2V1bGY3Q1Nqg: void <init>(android.provider.FontsContract$FontRequestCallback)>(r3);

        virtualinvoke r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r15);

        return;

     label06:
        r24 = virtualinvoke r22.<android.provider.FontsContract$FontFamilyResult: android.provider.FontsContract$FontInfo[] getFonts()>();

        if r24 == null goto label14;

        $i2 = lengthof r24;

        if $i2 != 0 goto label07;

        goto label14;

     label07:
        i0 = lengthof r24;

        i5 = 0;

     label08:
        if i5 >= i0 goto label12;

        r25 = r24[i5];

        $i3 = virtualinvoke r25.<android.provider.FontsContract$FontInfo: int getResultCode()>();

        if $i3 == 0 goto label11;

        i6 = virtualinvoke r25.<android.provider.FontsContract$FontInfo: int getResultCode()>();

        if i6 >= 0 goto label09;

        $r14 = new android.provider._$$Lambda$FontsContract$Qvl9aVA7txTF3tFcFbbKD_nWpuM;

        specialinvoke $r14.<android.provider._$$Lambda$FontsContract$Qvl9aVA7txTF3tFcFbbKD_nWpuM: void <init>(android.provider.FontsContract$FontRequestCallback)>(r3);

        virtualinvoke r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r14);

        goto label10;

     label09:
        $r13 = new android.provider._$$Lambda$FontsContract$rvEOORTXb3mMYTLkoH9nlHQr9Iw;

        specialinvoke $r13.<android.provider._$$Lambda$FontsContract$rvEOORTXb3mMYTLkoH9nlHQr9Iw: void <init>(android.provider.FontsContract$FontRequestCallback,int)>(r3, i6);

        virtualinvoke r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r13);

     label10:
        return;

     label11:
        i5 = i5 + 1;

        goto label08;

     label12:
        r26 = staticinvoke <android.provider.FontsContract: android.graphics.Typeface buildTypeface(android.content.Context,android.os.CancellationSignal,android.provider.FontsContract$FontInfo[])>(r21, r0, r24);

        if r26 != null goto label13;

        $r12 = new android.provider._$$Lambda$FontsContract$rqmVfWYeZ5NL5MtBx5LOdhNAOP4;

        specialinvoke $r12.<android.provider._$$Lambda$FontsContract$rqmVfWYeZ5NL5MtBx5LOdhNAOP4: void <init>(android.provider.FontsContract$FontRequestCallback)>(r3);

        virtualinvoke r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r12);

        return;

     label13:
        $r8 = <android.provider.FontsContract: android.util.LruCache sTypefaceCache>;

        $r9 = virtualinvoke r1.<android.provider.FontRequest: java.lang.String getIdentifier()>();

        virtualinvoke $r8.<android.util.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r26);

        $r11 = new android.provider._$$Lambda$FontsContract$gJeQYFM3pOm_NcWmWnWDAEk3vlM;

        specialinvoke $r11.<android.provider._$$Lambda$FontsContract$gJeQYFM3pOm_NcWmWnWDAEk3vlM: void <init>(android.provider.FontsContract$FontRequestCallback,android.graphics.Typeface)>(r3, r26);

        virtualinvoke r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r11);

        return;

     label14:
        $r7 = new android.provider._$$Lambda$FontsContract$LJ3jfZobcxq5xTMmb88GlM1r9Jk;

        specialinvoke $r7.<android.provider._$$Lambda$FontsContract$LJ3jfZobcxq5xTMmb88GlM1r9Jk: void <init>(android.provider.FontsContract$FontRequestCallback)>(r3);

        virtualinvoke r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r7);

        return;

     label15:
        $r19 := @caughtexception;

        $r20 = new android.provider._$$Lambda$FontsContract$bLFahJqnd9gkPbDqB_OCiChzm_E;

        specialinvoke $r20.<android.provider._$$Lambda$FontsContract$bLFahJqnd9gkPbDqB_OCiChzm_E: void <init>(android.provider.FontsContract$FontRequestCallback)>(r3);

        virtualinvoke r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r20);

        return;

        catch android.content.pm.PackageManager$NameNotFoundException from label01 to label02 with label15;
    }

    static void lambda$requestFonts$2(android.provider.FontsContract$FontRequestCallback)
    {
        android.provider.FontsContract$FontRequestCallback r0;

        r0 := @parameter0: android.provider.FontsContract$FontRequestCallback;

        virtualinvoke r0.<android.provider.FontsContract$FontRequestCallback: void onTypefaceRequestFailed(int)>(-1);

        return;
    }

    static void lambda$requestFonts$3(android.provider.FontsContract$FontRequestCallback, android.graphics.Typeface)
    {
        android.provider.FontsContract$FontRequestCallback r0;
        android.graphics.Typeface r1;

        r0 := @parameter0: android.provider.FontsContract$FontRequestCallback;

        r1 := @parameter1: android.graphics.Typeface;

        virtualinvoke r0.<android.provider.FontsContract$FontRequestCallback: void onTypefaceRetrieved(android.graphics.Typeface)>(r1);

        return;
    }

    static void lambda$requestFonts$4(android.provider.FontsContract$FontRequestCallback)
    {
        android.provider.FontsContract$FontRequestCallback r0;

        r0 := @parameter0: android.provider.FontsContract$FontRequestCallback;

        virtualinvoke r0.<android.provider.FontsContract$FontRequestCallback: void onTypefaceRequestFailed(int)>(-2);

        return;
    }

    static void lambda$requestFonts$5(android.provider.FontsContract$FontRequestCallback)
    {
        android.provider.FontsContract$FontRequestCallback r0;

        r0 := @parameter0: android.provider.FontsContract$FontRequestCallback;

        virtualinvoke r0.<android.provider.FontsContract$FontRequestCallback: void onTypefaceRequestFailed(int)>(-3);

        return;
    }

    static void lambda$requestFonts$6(android.provider.FontsContract$FontRequestCallback)
    {
        android.provider.FontsContract$FontRequestCallback r0;

        r0 := @parameter0: android.provider.FontsContract$FontRequestCallback;

        virtualinvoke r0.<android.provider.FontsContract$FontRequestCallback: void onTypefaceRequestFailed(int)>(-3);

        return;
    }

    static void lambda$requestFonts$7(android.provider.FontsContract$FontRequestCallback)
    {
        android.provider.FontsContract$FontRequestCallback r0;

        r0 := @parameter0: android.provider.FontsContract$FontRequestCallback;

        virtualinvoke r0.<android.provider.FontsContract$FontRequestCallback: void onTypefaceRequestFailed(int)>(1);

        return;
    }

    static void lambda$requestFonts$8(android.provider.FontsContract$FontRequestCallback)
    {
        android.provider.FontsContract$FontRequestCallback r0;

        r0 := @parameter0: android.provider.FontsContract$FontRequestCallback;

        virtualinvoke r0.<android.provider.FontsContract$FontRequestCallback: void onTypefaceRequestFailed(int)>(-3);

        return;
    }

    static void lambda$requestFonts$9(android.provider.FontsContract$FontRequestCallback, int)
    {
        android.provider.FontsContract$FontRequestCallback r0;
        int i0;

        r0 := @parameter0: android.provider.FontsContract$FontRequestCallback;

        i0 := @parameter1: int;

        virtualinvoke r0.<android.provider.FontsContract$FontRequestCallback: void onTypefaceRequestFailed(int)>(i0);

        return;
    }

    static int lambda$static$13(byte[], byte[])
    {
        byte[] r0, r1;
        int $i0, $i1, $i2, $i7, $i8, $i9, $i10, i11;
        byte $b3, $b4, $b5, $b6;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 == $i0 goto label1;

        $i9 = lengthof r0;

        $i8 = lengthof r1;

        $i10 = $i9 - $i8;

        return $i10;

     label1:
        i11 = 0;

     label2:
        $i2 = lengthof r0;

        if i11 >= $i2 goto label4;

        $b4 = r0[i11];

        $b3 = r1[i11];

        if $b4 == $b3 goto label3;

        $b6 = r0[i11];

        $b5 = r1[i11];

        $i7 = $b6 - $b5;

        return $i7;

     label3:
        i11 = i11 + 1;

        goto label2;

     label4:
        return 0;
    }

    private static java.util.Map prepareFontData(android.content.Context, android.provider.FontsContract$FontInfo[], android.os.CancellationSignal)
    {
        android.provider.FontsContract$FontInfo[] r0;
        android.os.CancellationSignal r1;
        android.content.ContentResolver r3;
        int i0, $i2, i3;
        android.net.Uri r4;
        android.os.ParcelFileDescriptor r5;
        long l1;
        java.util.HashMap $r6;
        java.util.Map $r7;
        boolean $z0;
        java.io.FileDescriptor $r8;
        java.nio.channels.FileChannel$MapMode $r9;
        java.lang.Throwable $r10, $r11, $r12, $r13, $r14, $r15;
        android.content.Context r16;
        android.provider.FontsContract$FontInfo r17;
        java.nio.MappedByteBuffer r18, r19, r20, r21;
        java.io.FileInputStream r22;
        java.nio.channels.FileChannel r23;

        r16 := @parameter0: android.content.Context;

        r0 := @parameter1: android.provider.FontsContract$FontInfo[];

        r1 := @parameter2: android.os.CancellationSignal;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r3 = virtualinvoke r16.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i0 = lengthof r0;

        i3 = 0;

     label01:
        if i3 >= i0 goto label34;

        r17 = r0[i3];

        $i2 = virtualinvoke r17.<android.provider.FontsContract$FontInfo: int getResultCode()>();

        if $i2 == 0 goto label02;

        goto label33;

     label02:
        r4 = virtualinvoke r17.<android.provider.FontsContract$FontInfo: android.net.Uri getUri()>();

        $z0 = virtualinvoke $r6.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r4);

        if $z0 == 0 goto label03;

        goto label33;

     label03:
        r18 = null;

        r19 = null;

     label04:
        r5 = virtualinvoke r3.<android.content.ContentResolver: android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri,java.lang.String,android.os.CancellationSignal)>(r4, "r", r1);

     label05:
        if r5 == null goto label28;

        r20 = null;

        r21 = null;

     label06:
        r22 = new java.io.FileInputStream;

     label07:
        r20 = null;

        r21 = null;

     label08:
        $r8 = virtualinvoke r5.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        specialinvoke r22.<java.io.FileInputStream: void <init>(java.io.FileDescriptor)>($r8);

     label09:
        r23 = virtualinvoke r22.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>();

        l1 = virtualinvoke r23.<java.nio.channels.FileChannel: long size()>();

        $r9 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_ONLY>;

        r18 = virtualinvoke r23.<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>($r9, 0L, l1);

     label10:
        r20 = r18;

        r21 = r18;

     label11:
        virtualinvoke r22.<java.io.FileInputStream: void close()>();

     label12:
        goto label28;

     label13:
        $r15 := @caughtexception;

     label14:
        virtualinvoke r22.<java.io.FileInputStream: void close()>();

     label15:
        goto label18;

     label16:
        $r12 := @caughtexception;

        r20 = null;

        r21 = null;

     label17:
        virtualinvoke $r15.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r12);

     label18:
        r20 = null;

        r21 = null;

     label19:
        throw $r15;

     label20:
        $r10 := @caughtexception;

        if r5 == null goto label25;

     label21:
        virtualinvoke r5.<android.os.ParcelFileDescriptor: void close()>();

     label22:
        goto label25;

     label23:
        $r14 := @caughtexception;

        r19 = r20;

     label24:
        virtualinvoke $r10.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r14);

     label25:
        r19 = r20;

     label26:
        throw $r10;

     label27:
        $r13 := @caughtexception;

        r18 = r21;

     label28:
        if r5 == null goto label30;

        r19 = r18;

     label29:
        virtualinvoke r5.<android.os.ParcelFileDescriptor: void close()>();

     label30:
        goto label32;

     label31:
        $r11 := @caughtexception;

        r18 = r19;

        goto label32;

     label32:
        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r18);

     label33:
        i3 = i3 + 1;

        goto label01;

     label34:
        $r7 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r6);

        return $r7;

        catch java.io.IOException from label04 to label05 with label31;
        catch java.io.IOException from label06 to label07 with label27;
        catch java.lang.Throwable from label06 to label07 with label20;
        catch java.io.IOException from label08 to label09 with label27;
        catch java.lang.Throwable from label08 to label09 with label20;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.io.IOException from label11 to label12 with label27;
        catch java.lang.Throwable from label11 to label12 with label20;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.io.IOException from label17 to label18 with label27;
        catch java.lang.Throwable from label17 to label18 with label20;
        catch java.io.IOException from label19 to label20 with label27;
        catch java.lang.Throwable from label19 to label20 with label20;
        catch java.lang.Throwable from label21 to label22 with label23;
        catch java.io.IOException from label24 to label25 with label31;
        catch java.io.IOException from label26 to label27 with label31;
        catch java.io.IOException from label29 to label30 with label31;
    }

    public static void requestFonts(android.content.Context, android.provider.FontRequest, android.os.Handler, android.os.CancellationSignal, android.provider.FontsContract$FontRequestCallback)
    {
        android.content.Context r0;
        android.provider.FontRequest r1;
        android.os.Handler r2, $r7;
        android.os.CancellationSignal r3;
        android.provider.FontsContract$FontRequestCallback r4;
        android.graphics.Typeface r6;
        android.util.LruCache $r8;
        java.lang.String $r9;
        java.lang.Object $r10;
        android.provider._$$Lambda$FontsContract$dFs2m4XF5xdir4W3T_ncUQAVX8k $r11;
        android.provider._$$Lambda$FontsContract$p_tsXYYYpEH0_EJSp2uPrJ33dkU $r12;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.provider.FontRequest;

        r2 := @parameter2: android.os.Handler;

        r3 := @parameter3: android.os.CancellationSignal;

        r4 := @parameter4: android.provider.FontsContract$FontRequestCallback;

        $r7 = new android.os.Handler;

        specialinvoke $r7.<android.os.Handler: void <init>()>();

        $r8 = <android.provider.FontsContract: android.util.LruCache sTypefaceCache>;

        $r9 = virtualinvoke r1.<android.provider.FontRequest: java.lang.String getIdentifier()>();

        $r10 = virtualinvoke $r8.<android.util.LruCache: java.lang.Object get(java.lang.Object)>($r9);

        r6 = (android.graphics.Typeface) $r10;

        if r6 == null goto label1;

        $r12 = new android.provider._$$Lambda$FontsContract$p_tsXYYYpEH0_EJSp2uPrJ33dkU;

        specialinvoke $r12.<android.provider._$$Lambda$FontsContract$p_tsXYYYpEH0_EJSp2uPrJ33dkU: void <init>(android.provider.FontsContract$FontRequestCallback,android.graphics.Typeface)>(r4, r6);

        virtualinvoke $r7.<android.os.Handler: boolean post(java.lang.Runnable)>($r12);

        return;

     label1:
        $r11 = new android.provider._$$Lambda$FontsContract$dFs2m4XF5xdir4W3T_ncUQAVX8k;

        specialinvoke $r11.<android.provider._$$Lambda$FontsContract$dFs2m4XF5xdir4W3T_ncUQAVX8k: void <init>(android.content.Context,android.os.CancellationSignal,android.provider.FontRequest,android.os.Handler,android.provider.FontsContract$FontRequestCallback)>(r0, r3, r1, $r7, r4);

        virtualinvoke r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r11);

        return;
    }

    public static void setApplicationContextForResources(android.content.Context)
    {
        android.content.Context r0, $r1;

        r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke r0.<android.content.Context: android.content.Context getApplicationContext()>();

        <android.provider.FontsContract: android.content.Context sContext> = $r1;

        return;
    }
}
