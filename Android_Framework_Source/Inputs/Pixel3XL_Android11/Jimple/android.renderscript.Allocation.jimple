public class android.renderscript.Allocation extends android.renderscript.BaseObj
{
    private static final int MAX_NUMBER_IO_INPUT_ALLOC;
    public static final int USAGE_GRAPHICS_CONSTANTS;
    public static final int USAGE_GRAPHICS_RENDER_TARGET;
    public static final int USAGE_GRAPHICS_TEXTURE;
    public static final int USAGE_GRAPHICS_VERTEX;
    public static final int USAGE_IO_INPUT;
    public static final int USAGE_IO_OUTPUT;
    public static final int USAGE_SCRIPT;
    public static final int USAGE_SHARED;
    static java.util.HashMap mAllocationMap;
    static android.graphics.BitmapFactory$Options mBitmapOptions;
    android.renderscript.Allocation mAdaptedAllocation;
    boolean mAutoPadding;
    android.graphics.Bitmap mBitmap;
    android.renderscript.Allocation$OnBufferAvailableListener mBufferNotifier;
    private java.nio.ByteBuffer mByteBuffer;
    private long mByteBufferStride;
    int mCurrentCount;
    int mCurrentDimX;
    int mCurrentDimY;
    int mCurrentDimZ;
    private android.view.Surface mGetSurfaceSurface;
    android.renderscript.Allocation$MipmapControl mMipmapControl;
    boolean mOwningType;
    boolean mReadAllowed;
    int[] mSelectedArray;
    android.renderscript.Type$CubemapFace mSelectedFace;
    int mSelectedLOD;
    int mSelectedX;
    int mSelectedY;
    int mSelectedZ;
    int mSize;
    long mTimeStamp;
    android.renderscript.Type mType;
    int mUsage;
    boolean mWriteAllowed;

    static void <clinit>()
    {
        java.util.HashMap $r1;
        android.graphics.BitmapFactory$Options $r2;

        <android.renderscript.Allocation: int USAGE_SHARED> = 128;

        <android.renderscript.Allocation: int USAGE_SCRIPT> = 1;

        <android.renderscript.Allocation: int USAGE_IO_OUTPUT> = 64;

        <android.renderscript.Allocation: int USAGE_IO_INPUT> = 32;

        <android.renderscript.Allocation: int USAGE_GRAPHICS_VERTEX> = 4;

        <android.renderscript.Allocation: int USAGE_GRAPHICS_TEXTURE> = 2;

        <android.renderscript.Allocation: int USAGE_GRAPHICS_RENDER_TARGET> = 16;

        <android.renderscript.Allocation: int USAGE_GRAPHICS_CONSTANTS> = 8;

        <android.renderscript.Allocation: int MAX_NUMBER_IO_INPUT_ALLOC> = 16;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <android.renderscript.Allocation: java.util.HashMap mAllocationMap> = $r1;

        $r2 = new android.graphics.BitmapFactory$Options;

        specialinvoke $r2.<android.graphics.BitmapFactory$Options: void <init>()>();

        <android.renderscript.Allocation: android.graphics.BitmapFactory$Options mBitmapOptions> = $r2;

        $r2.<android.graphics.BitmapFactory$Options: boolean inScaled> = 0;

        return;
    }

    void <init>(long, android.renderscript.RenderScript, android.renderscript.Type, int)
    {
        android.renderscript.Allocation r0;
        long l0;
        int i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        android.renderscript.Type$CubemapFace $r1;
        android.renderscript.RSIllegalArgumentException $r2, $r11;
        java.lang.Object[] $r3;
        java.lang.reflect.Method $r4;
        java.lang.Object $r5;
        java.lang.Integer $r6;
        dalvik.system.CloseGuard $r8;
        android.renderscript.Type $r9, r23;
        android.renderscript.Element $r10;
        java.lang.Exception $r12;
        java.lang.StringBuilder $r13, $r17;
        java.lang.String $r16, $r21;
        android.renderscript.RSRuntimeException $r20;
        android.renderscript.RenderScript r22;

        r0 := @this: android.renderscript.Allocation;

        l0 := @parameter0: long;

        r22 := @parameter1: android.renderscript.RenderScript;

        r23 := @parameter2: android.renderscript.Type;

        i1 := @parameter3: int;

        specialinvoke r0.<android.renderscript.BaseObj: void <init>(long,android.renderscript.RenderScript)>(l0, r22);

        r0.<android.renderscript.Allocation: boolean mOwningType> = 0;

        r0.<android.renderscript.Allocation: long mTimeStamp> = -1L;

        r0.<android.renderscript.Allocation: boolean mReadAllowed> = 1;

        r0.<android.renderscript.Allocation: boolean mWriteAllowed> = 1;

        r0.<android.renderscript.Allocation: boolean mAutoPadding> = 0;

        $r1 = <android.renderscript.Type$CubemapFace: android.renderscript.Type$CubemapFace POSITIVE_X>;

        r0.<android.renderscript.Allocation: android.renderscript.Type$CubemapFace mSelectedFace> = $r1;

        r0.<android.renderscript.Allocation: android.view.Surface mGetSurfaceSurface> = null;

        r0.<android.renderscript.Allocation: java.nio.ByteBuffer mByteBuffer> = null;

        r0.<android.renderscript.Allocation: long mByteBufferStride> = -1L;

        $i2 = i1 & -256;

        if $i2 != 0 goto label6;

        $i3 = i1 & 32;

        if $i3 == 0 goto label2;

        r0.<android.renderscript.Allocation: boolean mWriteAllowed> = 0;

        $i8 = i1 & -36;

        if $i8 != 0 goto label1;

        goto label2;

     label1:
        $r11 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r11.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Invalid usage combination.");

        throw $r11;

     label2:
        r0.<android.renderscript.Allocation: android.renderscript.Type mType> = r23;

        r0.<android.renderscript.Allocation: int mUsage> = i1;

        if r23 == null goto label3;

        $i5 = virtualinvoke r23.<android.renderscript.Type: int getCount()>();

        $r9 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r10 = virtualinvoke $r9.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $i6 = virtualinvoke $r10.<android.renderscript.Element: int getBytesSize()>();

        $i7 = $i5 * $i6;

        r0.<android.renderscript.Allocation: int mSize> = $i7;

        specialinvoke r0.<android.renderscript.Allocation: void updateCacheInfo(android.renderscript.Type)>(r23);

     label3:
        $r4 = <android.renderscript.RenderScript: java.lang.reflect.Method registerNativeAllocation>;

        $r5 = <android.renderscript.RenderScript: java.lang.Object sRuntime>;

        $r3 = newarray (java.lang.Object)[1];

        $i4 = r0.<android.renderscript.Allocation: int mSize>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r3[0] = $r6;

        virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r5, $r3);

     label4:
        $r8 = r0.<android.renderscript.Allocation: dalvik.system.CloseGuard guard>;

        virtualinvoke $r8.<dalvik.system.CloseGuard: void open(java.lang.String)>("destroy");

        return;

     label5:
        $r12 := @caughtexception;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t invoke registerNativeAllocation:");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("RenderScript_jni", $r16);

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t invoke registerNativeAllocation:");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r20 = new android.renderscript.RSRuntimeException;

        $r21 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>($r21);

        throw $r20;

     label6:
        $r2 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r2.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Unknown usage specified.");

        throw $r2;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    void <init>(long, android.renderscript.RenderScript, android.renderscript.Type, boolean, int, android.renderscript.Allocation$MipmapControl)
    {
        android.renderscript.Allocation r0;
        long l0;
        android.renderscript.RenderScript r1;
        android.renderscript.Type r2;
        boolean z0;
        int i1;
        android.renderscript.Allocation$MipmapControl r3;

        r0 := @this: android.renderscript.Allocation;

        l0 := @parameter0: long;

        r1 := @parameter1: android.renderscript.RenderScript;

        r2 := @parameter2: android.renderscript.Type;

        z0 := @parameter3: boolean;

        i1 := @parameter4: int;

        r3 := @parameter5: android.renderscript.Allocation$MipmapControl;

        specialinvoke r0.<android.renderscript.Allocation: void <init>(long,android.renderscript.RenderScript,android.renderscript.Type,int)>(l0, r1, r2, i1);

        r0.<android.renderscript.Allocation: boolean mOwningType> = z0;

        r0.<android.renderscript.Allocation: android.renderscript.Allocation$MipmapControl mMipmapControl> = r3;

        return;
    }

    private void copy1DRangeFromUnchecked(int, int, java.lang.Object, android.renderscript.Element$DataType, int)
    {
        android.renderscript.Allocation r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i9, $i10;
        android.renderscript.Element$DataType r1, $r11;
        android.renderscript.Type $r2, $r4, $r9;
        android.renderscript.Element $r3, $r5, $r10;
        boolean $z0, z1;
        java.lang.Throwable $r6;
        java.lang.Object r7;
        android.renderscript.RenderScript $r8;
        long $l8;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r7 := @parameter2: java.lang.Object;

        r1 := @parameter3: android.renderscript.Element$DataType;

        i2 := @parameter4: int;

     label1:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copy1DRangeFromUnchecked");

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r3 = $r2.<android.renderscript.Type: android.renderscript.Element mElement>;

        $i4 = virtualinvoke $r3.<android.renderscript.Element: int getBytesSize()>();

        i3 = $i4 * i1;

        $z0 = r0.<android.renderscript.Allocation: boolean mAutoPadding>;

        if $z0 == 0 goto label3;

        $r4 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r5 = virtualinvoke $r4.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $i5 = virtualinvoke $r5.<android.renderscript.Element: int getVectorSize()>();

        if $i5 != 3 goto label3;

     label2:
        z1 = 1;

        goto label4;

     label3:
        z1 = 0;

     label4:
        $i6 = r1.<android.renderscript.Element$DataType: int mSize>;

        $i7 = i2 * $i6;

        specialinvoke r0.<android.renderscript.Allocation: void data1DChecks(int,int,int,int,boolean)>(i0, i1, $i7, i3, z1);

        $r8 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $l8 = specialinvoke r0.<android.renderscript.Allocation: long getIDSafe()>();

        $i9 = r0.<android.renderscript.Allocation: int mSelectedLOD>;

        $r9 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r10 = $r9.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r11 = $r10.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $i10 = $r11.<android.renderscript.Element$DataType: int mSize>;

        virtualinvoke $r8.<android.renderscript.RenderScript: void nAllocationData1D(long,int,int,int,java.lang.Object,int,android.renderscript.Element$DataType,int,boolean)>($l8, i0, $i9, i1, r7, i3, r1, $i10, z1);

     label5:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;

     label6:
        $r6 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    private void copy1DRangeToUnchecked(int, int, java.lang.Object, android.renderscript.Element$DataType, int)
    {
        android.renderscript.Allocation r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i9, $i10;
        android.renderscript.Element$DataType r1, $r11;
        android.renderscript.Type $r2, $r4, $r9;
        android.renderscript.Element $r3, $r5, $r10;
        boolean $z0, z1;
        java.lang.Throwable $r6;
        java.lang.Object r7;
        android.renderscript.RenderScript $r8;
        long $l8;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r7 := @parameter2: java.lang.Object;

        r1 := @parameter3: android.renderscript.Element$DataType;

        i2 := @parameter4: int;

     label1:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copy1DRangeToUnchecked");

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r3 = $r2.<android.renderscript.Type: android.renderscript.Element mElement>;

        $i4 = virtualinvoke $r3.<android.renderscript.Element: int getBytesSize()>();

        i3 = $i4 * i1;

        $z0 = r0.<android.renderscript.Allocation: boolean mAutoPadding>;

        if $z0 == 0 goto label3;

        $r4 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r5 = virtualinvoke $r4.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $i5 = virtualinvoke $r5.<android.renderscript.Element: int getVectorSize()>();

        if $i5 != 3 goto label3;

     label2:
        z1 = 1;

        goto label4;

     label3:
        z1 = 0;

     label4:
        $i6 = r1.<android.renderscript.Element$DataType: int mSize>;

        $i7 = i2 * $i6;

        specialinvoke r0.<android.renderscript.Allocation: void data1DChecks(int,int,int,int,boolean)>(i0, i1, $i7, i3, z1);

        $r8 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $l8 = specialinvoke r0.<android.renderscript.Allocation: long getIDSafe()>();

        $i9 = r0.<android.renderscript.Allocation: int mSelectedLOD>;

        $r9 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r10 = $r9.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r11 = $r10.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $i10 = $r11.<android.renderscript.Element$DataType: int mSize>;

        virtualinvoke $r8.<android.renderscript.RenderScript: void nAllocationRead1D(long,int,int,int,java.lang.Object,int,android.renderscript.Element$DataType,int,boolean)>($l8, i0, $i9, i1, r7, i3, r1, $i10, z1);

     label5:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;

     label6:
        $r6 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    private void copy3DRangeFromUnchecked(int, int, int, int, int, int, java.lang.Object, android.renderscript.Element$DataType, int)
    {
        android.renderscript.Allocation r0;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i15, $i16, i17, i18;
        android.renderscript.Element$DataType r1, $r8;
        android.renderscript.RenderScript $r2, $r5;
        android.renderscript.Type $r3, $r6, $r9;
        android.renderscript.Element $r4, $r7, $r10;
        long $l11;
        java.lang.Throwable $r11;
        java.lang.Object r12;
        boolean z0, z1;
        android.renderscript.RSIllegalArgumentException r13, r14;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        r12 := @parameter6: java.lang.Object;

        r1 := @parameter7: android.renderscript.Element$DataType;

        i17 := @parameter8: int;

     label01:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copy3DRangeFromUnchecked");

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r2.<android.renderscript.RenderScript: void validate()>();

        specialinvoke r0.<android.renderscript.Allocation: void validate3DRange(int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5);

        $r3 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r4 = $r3.<android.renderscript.Type: android.renderscript.Element mElement>;

        $i7 = virtualinvoke $r4.<android.renderscript.Element: int getBytesSize()>();

        $i8 = $i7 * i3;

        $i9 = $i8 * i4;

        i6 = $i9 * i5;

        $i10 = r1.<android.renderscript.Element$DataType: int mSize>;

        i18 = $i10 * i17;

        z0 = r0.<android.renderscript.Allocation: boolean mAutoPadding>;

     label02:
        if z0 == 0 goto label06;

     label03:
        $r9 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r10 = virtualinvoke $r9.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $i14 = virtualinvoke $r10.<android.renderscript.Element: int getVectorSize()>();

        if $i14 != 3 goto label06;

        $i15 = i6 / 4;

        $i16 = $i15 * 3;

        if $i16 > i18 goto label05;

     label04:
        z1 = 1;

        i18 = i6;

        goto label07;

     label05:
        r13 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke r13.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Array too small for allocation type.");

        throw r13;

     label06:
        if i6 > i18 goto label09;

        z1 = 0;

     label07:
        $r5 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $l11 = specialinvoke r0.<android.renderscript.Allocation: long getIDSafe()>();

        $i13 = r0.<android.renderscript.Allocation: int mSelectedLOD>;

        $r6 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r7 = $r6.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r8 = $r7.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $i12 = $r8.<android.renderscript.Element$DataType: int mSize>;

        virtualinvoke $r5.<android.renderscript.RenderScript: void nAllocationData3D(long,int,int,int,int,int,int,int,java.lang.Object,int,android.renderscript.Element$DataType,int,boolean)>($l11, i0, i1, i2, $i13, i3, i4, i5, r12, i18, r1, $i12, z1);

     label08:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;

     label09:
        r14 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke r14.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Array too small for allocation type.");

        throw r14;

     label10:
        $r11 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label09 to label10 with label10;
    }

    private void copy3DRangeToUnchecked(int, int, int, int, int, int, java.lang.Object, android.renderscript.Element$DataType, int)
    {
        android.renderscript.Allocation r0;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i15, $i16, i17, i18;
        android.renderscript.Element$DataType r1, $r8;
        android.renderscript.RenderScript $r2, $r5;
        android.renderscript.Type $r3, $r6, $r9;
        android.renderscript.Element $r4, $r7, $r10;
        long $l11;
        java.lang.Throwable $r11;
        java.lang.Object r12;
        boolean z0, z1;
        android.renderscript.RSIllegalArgumentException r13, r14;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        r12 := @parameter6: java.lang.Object;

        r1 := @parameter7: android.renderscript.Element$DataType;

        i17 := @parameter8: int;

     label01:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copy3DRangeToUnchecked");

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r2.<android.renderscript.RenderScript: void validate()>();

        specialinvoke r0.<android.renderscript.Allocation: void validate3DRange(int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5);

        $r3 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r4 = $r3.<android.renderscript.Type: android.renderscript.Element mElement>;

        $i7 = virtualinvoke $r4.<android.renderscript.Element: int getBytesSize()>();

        $i8 = $i7 * i3;

        $i9 = $i8 * i4;

        i6 = $i9 * i5;

        $i10 = r1.<android.renderscript.Element$DataType: int mSize>;

        i18 = $i10 * i17;

        z0 = r0.<android.renderscript.Allocation: boolean mAutoPadding>;

     label02:
        if z0 == 0 goto label06;

     label03:
        $r9 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r10 = virtualinvoke $r9.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $i14 = virtualinvoke $r10.<android.renderscript.Element: int getVectorSize()>();

        if $i14 != 3 goto label06;

        $i15 = i6 / 4;

        $i16 = $i15 * 3;

        if $i16 > i18 goto label05;

     label04:
        z1 = 1;

        i18 = i6;

        goto label07;

     label05:
        r13 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke r13.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Array too small for allocation type.");

        throw r13;

     label06:
        if i6 > i18 goto label09;

        z1 = 0;

     label07:
        $r5 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $l11 = specialinvoke r0.<android.renderscript.Allocation: long getIDSafe()>();

        $i13 = r0.<android.renderscript.Allocation: int mSelectedLOD>;

        $r6 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r7 = $r6.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r8 = $r7.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $i12 = $r8.<android.renderscript.Element$DataType: int mSize>;

        virtualinvoke $r5.<android.renderscript.RenderScript: void nAllocationRead3D(long,int,int,int,int,int,int,int,java.lang.Object,int,android.renderscript.Element$DataType,int,boolean)>($l11, i0, i1, i2, $i13, i3, i4, i5, r12, i18, r1, $i12, z1);

     label08:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;

     label09:
        r14 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke r14.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Array too small for allocation type.");

        throw r14;

     label10:
        $r11 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label09 to label10 with label10;
    }

    private void copyFromUnchecked(java.lang.Object, android.renderscript.Element$DataType, int)
    {
        android.renderscript.Allocation r0;
        android.renderscript.Element$DataType r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        android.renderscript.RenderScript $r2;
        java.lang.Throwable $r3;
        java.lang.Object r4;

        r0 := @this: android.renderscript.Allocation;

        r4 := @parameter0: java.lang.Object;

        r1 := @parameter1: android.renderscript.Element$DataType;

        i0 := @parameter2: int;

     label1:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copyFromUnchecked");

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r2.<android.renderscript.RenderScript: void validate()>();

        $i1 = r0.<android.renderscript.Allocation: int mCurrentDimZ>;

        if $i1 <= 0 goto label3;

        $i8 = r0.<android.renderscript.Allocation: int mCurrentDimX>;

        $i7 = r0.<android.renderscript.Allocation: int mCurrentDimY>;

        $i6 = r0.<android.renderscript.Allocation: int mCurrentDimZ>;

        specialinvoke r0.<android.renderscript.Allocation: void copy3DRangeFromUnchecked(int,int,int,int,int,int,java.lang.Object,android.renderscript.Element$DataType,int)>(0, 0, 0, $i8, $i7, $i6, r4, r1, i0);

     label2:
        goto label6;

     label3:
        $i2 = r0.<android.renderscript.Allocation: int mCurrentDimY>;

        if $i2 <= 0 goto label5;

        $i5 = r0.<android.renderscript.Allocation: int mCurrentDimX>;

        $i4 = r0.<android.renderscript.Allocation: int mCurrentDimY>;

        virtualinvoke r0.<android.renderscript.Allocation: void copy2DRangeFromUnchecked(int,int,int,int,java.lang.Object,android.renderscript.Element$DataType,int)>(0, 0, $i5, $i4, r4, r1, i0);

     label4:
        goto label6;

     label5:
        $i3 = r0.<android.renderscript.Allocation: int mCurrentCount>;

        specialinvoke r0.<android.renderscript.Allocation: void copy1DRangeFromUnchecked(int,int,java.lang.Object,android.renderscript.Element$DataType,int)>(0, $i3, r4, r1, i0);

     label6:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;

     label7:
        $r3 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    private void copyTo(java.lang.Object, android.renderscript.Element$DataType, int)
    {
        android.renderscript.Allocation r0;
        android.renderscript.Element$DataType r1, $r7;
        int i0, i1, $i2, $i3, $i4, $i6, $i7, $i8, $i9, $i10, $i11;
        android.renderscript.RenderScript $r2, $r3, $r4;
        boolean $z1, z2;
        long $l5;
        android.renderscript.Type $r5, $r8;
        android.renderscript.Element $r6, $r9;
        java.lang.Throwable $r10;
        java.lang.Object r11;
        android.renderscript.RSIllegalArgumentException r12, r13;

        r0 := @this: android.renderscript.Allocation;

        r11 := @parameter0: java.lang.Object;

        r1 := @parameter1: android.renderscript.Element$DataType;

        i0 := @parameter2: int;

     label01:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copyTo");

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r2.<android.renderscript.RenderScript: void validate()>();

     label02:
        z2 = 0;

     label03:
        $z1 = r0.<android.renderscript.Allocation: boolean mAutoPadding>;

        if $z1 == 0 goto label05;

        $r8 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r9 = virtualinvoke $r8.<android.renderscript.Type: android.renderscript.Element getElement()>();

        i1 = virtualinvoke $r9.<android.renderscript.Element: int getVectorSize()>();

     label04:
        z2 = 0;

        if i1 != 3 goto label05;

        z2 = 1;

     label05:
        if z2 == 0 goto label09;

     label06:
        $i7 = r1.<android.renderscript.Element$DataType: int mSize>;

        $i11 = $i7 * i0;

        $i8 = r0.<android.renderscript.Allocation: int mSize>;

        $i9 = $i8 / 4;

        $i10 = $i9 * 3;

        if $i11 < $i10 goto label08;

     label07:
        goto label10;

     label08:
        r12 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke r12.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Size of output array cannot be smaller than size of allocation.");

        throw r12;

     label09:
        $i2 = r1.<android.renderscript.Element$DataType: int mSize>;

        $i4 = $i2 * i0;

        $i3 = r0.<android.renderscript.Allocation: int mSize>;

        if $i4 < $i3 goto label12;

     label10:
        $r4 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $r3 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r0.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r3);

        $r5 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r6 = $r5.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r7 = $r6.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $i6 = $r7.<android.renderscript.Element$DataType: int mSize>;

        virtualinvoke $r4.<android.renderscript.RenderScript: void nAllocationRead(long,java.lang.Object,android.renderscript.Element$DataType,int,boolean)>($l5, r11, r1, $i6, z2);

     label11:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;

     label12:
        r13 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke r13.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Size of output array cannot be smaller than size of allocation.");

        throw r13;

     label13:
        $r10 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label12 to label13 with label13;
    }

    public static android.renderscript.Allocation[] createAllocations(android.renderscript.RenderScript, android.renderscript.Type, int, int)
    {
        android.renderscript.Type r0;
        int i0, $i3, i4, i5;
        android.renderscript.Allocation[] r1;
        long $l1;
        byte $b2;
        android.renderscript.Allocation $r2, $r3, $r4, $r5, $r6;
        java.lang.Throwable $r7;
        android.renderscript.RenderScript r8;
        android.renderscript.RSIllegalArgumentException r9;
        android.renderscript.RSInvalidStateException r10;

        r8 := @parameter0: android.renderscript.RenderScript;

        r0 := @parameter1: android.renderscript.Type;

        i4 := @parameter2: int;

        i0 := @parameter3: int;

     label01:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "createAllocations");

        virtualinvoke r8.<android.renderscript.RenderScript: void validate()>();

        $l1 = virtualinvoke r0.<android.renderscript.Type: long getID(android.renderscript.RenderScript)>(r8);

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label11;

        r1 = newarray (android.renderscript.Allocation)[i0];

        $r2 = staticinvoke <android.renderscript.Allocation: android.renderscript.Allocation createTyped(android.renderscript.RenderScript,android.renderscript.Type,int)>(r8, r0, i4);

        r1[0] = $r2;

     label02:
        $i3 = i4 & 32;

        if $i3 == 0 goto label06;

        if i0 > 16 goto label05;

     label03:
        $r6 = r1[0];

        virtualinvoke $r6.<android.renderscript.Allocation: void setupBufferQueue(int)>(i0);

     label04:
        goto label06;

     label05:
        $r5 = r1[0];

        virtualinvoke $r5.<android.renderscript.Allocation: void destroy()>();

        r9 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke r9.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Exceeds the max number of Allocations allowed: 16");

        throw r9;

     label06:
        i5 = 1;

     label07:
        if i5 >= i0 goto label10;

     label08:
        $r3 = r1[0];

        $r4 = staticinvoke <android.renderscript.Allocation: android.renderscript.Allocation createFromAllocation(android.renderscript.RenderScript,android.renderscript.Allocation)>(r8, $r3);

        r1[i5] = $r4;

     label09:
        i5 = i5 + 1;

        goto label07;

     label10:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return r1;

     label11:
        r10 = new android.renderscript.RSInvalidStateException;

        specialinvoke r10.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Bad Type");

        throw r10;

     label12:
        $r7 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label11 to label12 with label12;
    }

    public static android.renderscript.Allocation createCubemapFromBitmap(android.renderscript.RenderScript, android.graphics.Bitmap)
    {
        android.renderscript.RenderScript r0;
        android.graphics.Bitmap r1;
        android.renderscript.Allocation$MipmapControl $r2;
        android.renderscript.Allocation $r3;

        r0 := @parameter0: android.renderscript.RenderScript;

        r1 := @parameter1: android.graphics.Bitmap;

        $r2 = <android.renderscript.Allocation$MipmapControl: android.renderscript.Allocation$MipmapControl MIPMAP_NONE>;

        $r3 = staticinvoke <android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl,int)>(r0, r1, $r2, 2);

        return $r3;
    }

    public static android.renderscript.Allocation createCubemapFromBitmap(android.renderscript.RenderScript, android.graphics.Bitmap, android.renderscript.Allocation$MipmapControl, int)
    {
        android.graphics.Bitmap r0;
        android.renderscript.Allocation$MipmapControl r1, $r10;
        int i0, i1, $i3, $i4, $i5, $i6, $i8, i10;
        android.renderscript.Element r2;
        long l2, $l7;
        android.renderscript.RSIllegalArgumentException $r3, $r4, $r5;
        android.renderscript.Type$Builder $r6;
        byte $b9;
        java.lang.StringBuilder $r12;
        android.renderscript.RSRuntimeException $r17;
        java.lang.String $r18;
        android.renderscript.Allocation $r19;
        android.renderscript.RenderScript r20;
        boolean z0, z1;
        android.renderscript.Type r22;

        r20 := @parameter0: android.renderscript.RenderScript;

        r0 := @parameter1: android.graphics.Bitmap;

        r1 := @parameter2: android.renderscript.Allocation$MipmapControl;

        i0 := @parameter3: int;

        virtualinvoke r20.<android.renderscript.RenderScript: void validate()>();

        i1 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        i10 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        $i3 = i10 % 6;

        if $i3 != 0 goto label7;

        $i4 = i10 / 6;

        if $i4 != i1 goto label6;

        z0 = 0;

        $i5 = i1 - 1;

        $i6 = $i5 & i1;

        if $i6 != 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        if z1 == 0 goto label5;

        r2 = staticinvoke <android.renderscript.Allocation: android.renderscript.Element elementFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap)>(r20, r0);

        $r6 = new android.renderscript.Type$Builder;

        specialinvoke $r6.<android.renderscript.Type$Builder: void <init>(android.renderscript.RenderScript,android.renderscript.Element)>(r20, r2);

        virtualinvoke $r6.<android.renderscript.Type$Builder: android.renderscript.Type$Builder setX(int)>(i1);

        virtualinvoke $r6.<android.renderscript.Type$Builder: android.renderscript.Type$Builder setY(int)>(i1);

        virtualinvoke $r6.<android.renderscript.Type$Builder: android.renderscript.Type$Builder setFaces(boolean)>(1);

        $r10 = <android.renderscript.Allocation$MipmapControl: android.renderscript.Allocation$MipmapControl MIPMAP_FULL>;

        if r1 != $r10 goto label3;

        z0 = 1;

     label3:
        virtualinvoke $r6.<android.renderscript.Type$Builder: android.renderscript.Type$Builder setMipmaps(boolean)>(z0);

        r22 = virtualinvoke $r6.<android.renderscript.Type$Builder: android.renderscript.Type create()>();

        $l7 = virtualinvoke r22.<android.renderscript.Type: long getID(android.renderscript.RenderScript)>(r20);

        $i8 = r1.<android.renderscript.Allocation$MipmapControl: int mID>;

        l2 = virtualinvoke r20.<android.renderscript.RenderScript: long nAllocationCubeCreateFromBitmap(long,int,android.graphics.Bitmap,int)>($l7, $i8, r0, i0);

        $b9 = l2 cmp 0L;

        if $b9 == 0 goto label4;

        $r19 = new android.renderscript.Allocation;

        specialinvoke $r19.<android.renderscript.Allocation: void <init>(long,android.renderscript.RenderScript,android.renderscript.Type,boolean,int,android.renderscript.Allocation$MipmapControl)>(l2, r20, r22, 1, i0, r1);

        return $r19;

     label4:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Load failed for bitmap ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" element ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r17 = new android.renderscript.RSRuntimeException;

        $r18 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>($r18);

        throw $r17;

     label5:
        $r5 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r5.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Only power of 2 cube faces supported");

        throw $r5;

     label6:
        $r4 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r4.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Only square cube map faces supported");

        throw $r4;

     label7:
        $r3 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r3.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Cubemap height must be multiple of 6");

        throw $r3;
    }

    public static android.renderscript.Allocation createCubemapFromCubeFaces(android.renderscript.RenderScript, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap)
    {
        android.renderscript.RenderScript r0;
        android.graphics.Bitmap r1, r2, r3, r4, r5, r6;
        android.renderscript.Allocation$MipmapControl $r7;
        android.renderscript.Allocation $r8;

        r0 := @parameter0: android.renderscript.RenderScript;

        r1 := @parameter1: android.graphics.Bitmap;

        r2 := @parameter2: android.graphics.Bitmap;

        r3 := @parameter3: android.graphics.Bitmap;

        r4 := @parameter4: android.graphics.Bitmap;

        r5 := @parameter5: android.graphics.Bitmap;

        r6 := @parameter6: android.graphics.Bitmap;

        $r7 = <android.renderscript.Allocation$MipmapControl: android.renderscript.Allocation$MipmapControl MIPMAP_NONE>;

        $r8 = staticinvoke <android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromCubeFaces(android.renderscript.RenderScript,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl,int)>(r0, r1, r2, r3, r4, r5, r6, $r7, 2);

        return $r8;
    }

    public static android.renderscript.Allocation createCubemapFromCubeFaces(android.renderscript.RenderScript, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.graphics.Bitmap, android.renderscript.Allocation$MipmapControl, int)
    {
        android.graphics.Bitmap r0, r1, r2, r3, r4, r5;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        android.renderscript.RSIllegalArgumentException $r7, $r26;
        android.renderscript.Type$Builder $r8;
        android.renderscript.Element $r9;
        android.renderscript.Allocation$MipmapControl $r13, r23;
        android.renderscript.Type $r15;
        android.renderscript.Type$CubemapFace $r16, $r17, $r18, $r19, $r20, $r21;
        android.renderscript.RenderScript r22;
        boolean z0, z1;
        android.renderscript.Allocation r24;
        android.renderscript.AllocationAdapter r25;

        r22 := @parameter0: android.renderscript.RenderScript;

        r0 := @parameter1: android.graphics.Bitmap;

        r1 := @parameter2: android.graphics.Bitmap;

        r2 := @parameter3: android.graphics.Bitmap;

        r3 := @parameter4: android.graphics.Bitmap;

        r4 := @parameter5: android.graphics.Bitmap;

        r5 := @parameter6: android.graphics.Bitmap;

        r23 := @parameter7: android.renderscript.Allocation$MipmapControl;

        i0 := @parameter8: int;

        i1 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        $i2 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        if $i2 != i1 goto label10;

        $i3 = virtualinvoke r1.<android.graphics.Bitmap: int getWidth()>();

        if $i3 != i1 goto label09;

        $i4 = virtualinvoke r1.<android.graphics.Bitmap: int getHeight()>();

        if $i4 != i1 goto label09;

        $i5 = virtualinvoke r2.<android.graphics.Bitmap: int getWidth()>();

        if $i5 != i1 goto label08;

        $i6 = virtualinvoke r2.<android.graphics.Bitmap: int getHeight()>();

        if $i6 != i1 goto label08;

        $i7 = virtualinvoke r3.<android.graphics.Bitmap: int getWidth()>();

        if $i7 != i1 goto label07;

        $i8 = virtualinvoke r3.<android.graphics.Bitmap: int getHeight()>();

        if $i8 != i1 goto label07;

        $i9 = virtualinvoke r4.<android.graphics.Bitmap: int getWidth()>();

        if $i9 != i1 goto label06;

        $i10 = virtualinvoke r4.<android.graphics.Bitmap: int getHeight()>();

        if $i10 != i1 goto label06;

        $i11 = virtualinvoke r5.<android.graphics.Bitmap: int getWidth()>();

        if $i11 != i1 goto label05;

        $i12 = virtualinvoke r5.<android.graphics.Bitmap: int getHeight()>();

        if $i12 != i1 goto label05;

        z0 = 0;

        $i13 = i1 - 1;

        $i14 = $i13 & i1;

        if $i14 != 0 goto label01;

        z1 = 1;

        goto label02;

     label01:
        z1 = 0;

     label02:
        if z1 == 0 goto label04;

        $r8 = new android.renderscript.Type$Builder;

        $r9 = staticinvoke <android.renderscript.Allocation: android.renderscript.Element elementFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap)>(r22, r0);

        specialinvoke $r8.<android.renderscript.Type$Builder: void <init>(android.renderscript.RenderScript,android.renderscript.Element)>(r22, $r9);

        virtualinvoke $r8.<android.renderscript.Type$Builder: android.renderscript.Type$Builder setX(int)>(i1);

        virtualinvoke $r8.<android.renderscript.Type$Builder: android.renderscript.Type$Builder setY(int)>(i1);

        virtualinvoke $r8.<android.renderscript.Type$Builder: android.renderscript.Type$Builder setFaces(boolean)>(1);

        $r13 = <android.renderscript.Allocation$MipmapControl: android.renderscript.Allocation$MipmapControl MIPMAP_FULL>;

        if r23 != $r13 goto label03;

        z0 = 1;

     label03:
        virtualinvoke $r8.<android.renderscript.Type$Builder: android.renderscript.Type$Builder setMipmaps(boolean)>(z0);

        $r15 = virtualinvoke $r8.<android.renderscript.Type$Builder: android.renderscript.Type create()>();

        r24 = staticinvoke <android.renderscript.Allocation: android.renderscript.Allocation createTyped(android.renderscript.RenderScript,android.renderscript.Type,android.renderscript.Allocation$MipmapControl,int)>(r22, $r15, r23, i0);

        r25 = staticinvoke <android.renderscript.AllocationAdapter: android.renderscript.AllocationAdapter create2D(android.renderscript.RenderScript,android.renderscript.Allocation)>(r22, r24);

        $r16 = <android.renderscript.Type$CubemapFace: android.renderscript.Type$CubemapFace POSITIVE_X>;

        virtualinvoke r25.<android.renderscript.AllocationAdapter: void setFace(android.renderscript.Type$CubemapFace)>($r16);

        virtualinvoke r25.<android.renderscript.AllocationAdapter: void copyFrom(android.graphics.Bitmap)>(r0);

        $r17 = <android.renderscript.Type$CubemapFace: android.renderscript.Type$CubemapFace NEGATIVE_X>;

        virtualinvoke r25.<android.renderscript.AllocationAdapter: void setFace(android.renderscript.Type$CubemapFace)>($r17);

        virtualinvoke r25.<android.renderscript.AllocationAdapter: void copyFrom(android.graphics.Bitmap)>(r1);

        $r18 = <android.renderscript.Type$CubemapFace: android.renderscript.Type$CubemapFace POSITIVE_Y>;

        virtualinvoke r25.<android.renderscript.AllocationAdapter: void setFace(android.renderscript.Type$CubemapFace)>($r18);

        virtualinvoke r25.<android.renderscript.AllocationAdapter: void copyFrom(android.graphics.Bitmap)>(r2);

        $r19 = <android.renderscript.Type$CubemapFace: android.renderscript.Type$CubemapFace NEGATIVE_Y>;

        virtualinvoke r25.<android.renderscript.AllocationAdapter: void setFace(android.renderscript.Type$CubemapFace)>($r19);

        virtualinvoke r25.<android.renderscript.AllocationAdapter: void copyFrom(android.graphics.Bitmap)>(r3);

        $r20 = <android.renderscript.Type$CubemapFace: android.renderscript.Type$CubemapFace POSITIVE_Z>;

        virtualinvoke r25.<android.renderscript.AllocationAdapter: void setFace(android.renderscript.Type$CubemapFace)>($r20);

        virtualinvoke r25.<android.renderscript.AllocationAdapter: void copyFrom(android.graphics.Bitmap)>(r4);

        $r21 = <android.renderscript.Type$CubemapFace: android.renderscript.Type$CubemapFace NEGATIVE_Z>;

        virtualinvoke r25.<android.renderscript.AllocationAdapter: void setFace(android.renderscript.Type$CubemapFace)>($r21);

        virtualinvoke r25.<android.renderscript.AllocationAdapter: void copyFrom(android.graphics.Bitmap)>(r5);

        return r24;

     label04:
        $r7 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r7.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Only power of 2 cube faces supported");

        throw $r7;

     label05:
        goto label10;

     label06:
        goto label10;

     label07:
        goto label10;

     label08:
        goto label10;

     label09:
        goto label10;

     label10:
        $r26 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r26.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Only square cube map faces supported");

        throw $r26;
    }

    static android.renderscript.Allocation createFromAllocation(android.renderscript.RenderScript, android.renderscript.Allocation)
    {
        android.renderscript.Allocation r0, r3;
        android.renderscript.Type r1;
        int i0, $i5, $i7;
        android.renderscript.Allocation$MipmapControl r2;
        long l1, $l2, $l4;
        byte $b3, $b6;
        java.lang.Throwable $r4;
        android.renderscript.RenderScript r5;
        android.renderscript.RSRuntimeException r6;
        android.renderscript.RSInvalidStateException r7;

        r5 := @parameter0: android.renderscript.RenderScript;

        r0 := @parameter1: android.renderscript.Allocation;

     label1:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "createFromAllcation");

        virtualinvoke r5.<android.renderscript.RenderScript: void validate()>();

        $l2 = virtualinvoke r0.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>(r5);

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label8;

        r1 = virtualinvoke r0.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i0 = virtualinvoke r0.<android.renderscript.Allocation: int getUsage()>();

        r2 = virtualinvoke r0.<android.renderscript.Allocation: android.renderscript.Allocation$MipmapControl getMipmap()>();

        $l4 = virtualinvoke r1.<android.renderscript.Type: long getID(android.renderscript.RenderScript)>(r5);

        $i5 = r2.<android.renderscript.Allocation$MipmapControl: int mID>;

        l1 = virtualinvoke r5.<android.renderscript.RenderScript: long nAllocationCreateTyped(long,int,int,long)>($l4, $i5, i0, 0L);

     label2:
        $b6 = l1 cmp 0L;

        if $b6 == 0 goto label7;

     label3:
        r3 = new android.renderscript.Allocation;

        specialinvoke r3.<android.renderscript.Allocation: void <init>(long,android.renderscript.RenderScript,android.renderscript.Type,boolean,int,android.renderscript.Allocation$MipmapControl)>(l1, r5, r1, 0, i0, r2);

     label4:
        $i7 = i0 & 32;

        if $i7 == 0 goto label6;

     label5:
        virtualinvoke r3.<android.renderscript.Allocation: void shareBufferQueue(android.renderscript.Allocation)>(r0);

     label6:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return r3;

     label7:
        r6 = new android.renderscript.RSRuntimeException;

        specialinvoke r6.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Allocation creation failed.");

        throw r6;

     label8:
        r7 = new android.renderscript.RSInvalidStateException;

        specialinvoke r7.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Bad input Allocation");

        throw r7;

     label9:
        $r4 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label9;
        catch java.lang.Throwable from label3 to label4 with label9;
        catch java.lang.Throwable from label5 to label6 with label9;
        catch java.lang.Throwable from label7 to label8 with label9;
        catch java.lang.Throwable from label8 to label9 with label9;
    }

    public static android.renderscript.Allocation createFromBitmap(android.renderscript.RenderScript, android.graphics.Bitmap)
    {
        android.renderscript.RenderScript r0;
        android.graphics.Bitmap r1;
        android.content.Context $r2;
        android.content.pm.ApplicationInfo $r3;
        int $i0;
        android.renderscript.Allocation$MipmapControl $r4, $r6;
        android.renderscript.Allocation $r5, $r7;

        r0 := @parameter0: android.renderscript.RenderScript;

        r1 := @parameter1: android.graphics.Bitmap;

        $r2 = virtualinvoke r0.<android.renderscript.RenderScript: android.content.Context getApplicationContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i0 = $r3.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i0 < 18 goto label1;

        $r6 = <android.renderscript.Allocation$MipmapControl: android.renderscript.Allocation$MipmapControl MIPMAP_NONE>;

        $r7 = staticinvoke <android.renderscript.Allocation: android.renderscript.Allocation createFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl,int)>(r0, r1, $r6, 131);

        return $r7;

     label1:
        $r4 = <android.renderscript.Allocation$MipmapControl: android.renderscript.Allocation$MipmapControl MIPMAP_NONE>;

        $r5 = staticinvoke <android.renderscript.Allocation: android.renderscript.Allocation createFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl,int)>(r0, r1, $r4, 2);

        return $r5;
    }

    public static android.renderscript.Allocation createFromBitmap(android.renderscript.RenderScript, android.graphics.Bitmap, android.renderscript.Allocation$MipmapControl, int)
    {
        android.graphics.Bitmap r0, r9;
        android.renderscript.Allocation$MipmapControl r1, r14;
        int i0, $i2, $i4, $i5, $i6, $i9;
        android.graphics.Bitmap$Config $r2, $r6;
        android.renderscript.Allocation $r3, r11, r15;
        android.renderscript.Element $r4, $r5;
        boolean $z0;
        long $l1, l7, $l8, l10;
        byte $b3, $b11;
        java.lang.Throwable $r7;
        android.renderscript.RenderScript r8;
        android.graphics.Canvas r10;
        android.renderscript.RSIllegalArgumentException r12;
        android.renderscript.Type r13;
        android.renderscript.RSRuntimeException r16, r18;

        r8 := @parameter0: android.renderscript.RenderScript;

        r0 := @parameter1: android.graphics.Bitmap;

        r1 := @parameter2: android.renderscript.Allocation$MipmapControl;

        i0 := @parameter3: int;

     label01:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "createFromBitmap");

        virtualinvoke r8.<android.renderscript.RenderScript: void validate()>();

        $r2 = virtualinvoke r0.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        if $r2 != null goto label06;

     label02:
        $i4 = i0 & 128;

        if $i4 != 0 goto label05;

     label03:
        $i5 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        $i6 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        $r6 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        r9 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>($i5, $i6, $r6);

        r10 = new android.graphics.Canvas;

        specialinvoke r10.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>(r9);

        virtualinvoke r10.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>(r0, 0.0F, 0.0F, null);

        r11 = staticinvoke <android.renderscript.Allocation: android.renderscript.Allocation createFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl,int)>(r8, r9, r1, i0);

     label04:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return r11;

     label05:
        r12 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke r12.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("USAGE_SHARED cannot be used with a Bitmap that has a null config.");

        throw r12;

     label06:
        r13 = staticinvoke <android.renderscript.Allocation: android.renderscript.Type typeFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl)>(r8, r0, r1);

        r14 = <android.renderscript.Allocation$MipmapControl: android.renderscript.Allocation$MipmapControl MIPMAP_NONE>;

     label07:
        if r1 != r14 goto label15;

     label08:
        $r4 = virtualinvoke r13.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r5 = staticinvoke <android.renderscript.Element: android.renderscript.Element RGBA_8888(android.renderscript.RenderScript)>(r8);

        $z0 = virtualinvoke $r4.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>($r5);

        if $z0 == 0 goto label15;

     label09:
        if i0 != 131 goto label15;

     label10:
        $l1 = virtualinvoke r13.<android.renderscript.Type: long getID(android.renderscript.RenderScript)>(r8);

        $i2 = r1.<android.renderscript.Allocation$MipmapControl: int mID>;

        l7 = virtualinvoke r8.<android.renderscript.RenderScript: long nAllocationCreateBitmapBackedAllocation(long,int,android.graphics.Bitmap,int)>($l1, $i2, r0, i0);

     label11:
        $b3 = l7 cmp 0L;

        if $b3 == 0 goto label14;

     label12:
        r15 = new android.renderscript.Allocation;

        specialinvoke r15.<android.renderscript.Allocation: void <init>(long,android.renderscript.RenderScript,android.renderscript.Type,boolean,int,android.renderscript.Allocation$MipmapControl)>(l7, r8, r13, 1, i0, r1);

        specialinvoke r15.<android.renderscript.Allocation: void setBitmap(android.graphics.Bitmap)>(r0);

     label13:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return r15;

     label14:
        r16 = new android.renderscript.RSRuntimeException;

        specialinvoke r16.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Load failed.");

        throw r16;

     label15:
        $l8 = virtualinvoke r13.<android.renderscript.Type: long getID(android.renderscript.RenderScript)>(r8);

        $i9 = r1.<android.renderscript.Allocation$MipmapControl: int mID>;

        l10 = virtualinvoke r8.<android.renderscript.RenderScript: long nAllocationCreateFromBitmap(long,int,android.graphics.Bitmap,int)>($l8, $i9, r0, i0);

     label16:
        $b11 = l10 cmp 0L;

        if $b11 == 0 goto label19;

     label17:
        $r3 = new android.renderscript.Allocation;

        specialinvoke $r3.<android.renderscript.Allocation: void <init>(long,android.renderscript.RenderScript,android.renderscript.Type,boolean,int,android.renderscript.Allocation$MipmapControl)>(l10, r8, r13, 1, i0, r1);

     label18:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return $r3;

     label19:
        r18 = new android.renderscript.RSRuntimeException;

        specialinvoke r18.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Load failed.");

        throw r18;

     label20:
        $r7 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label20;
        catch java.lang.Throwable from label03 to label04 with label20;
        catch java.lang.Throwable from label05 to label06 with label20;
        catch java.lang.Throwable from label06 to label07 with label20;
        catch java.lang.Throwable from label08 to label09 with label20;
        catch java.lang.Throwable from label10 to label11 with label20;
        catch java.lang.Throwable from label12 to label13 with label20;
        catch java.lang.Throwable from label14 to label15 with label20;
        catch java.lang.Throwable from label15 to label16 with label20;
        catch java.lang.Throwable from label17 to label18 with label20;
        catch java.lang.Throwable from label19 to label20 with label20;
    }

    public static android.renderscript.Allocation createFromBitmapResource(android.renderscript.RenderScript, android.content.res.Resources, int)
    {
        android.renderscript.RenderScript r0;
        android.content.res.Resources r1;
        int i0, $i1;
        android.content.Context $r2;
        android.content.pm.ApplicationInfo $r3;
        android.renderscript.Allocation$MipmapControl $r4, $r6;
        android.renderscript.Allocation $r5, $r7;

        r0 := @parameter0: android.renderscript.RenderScript;

        r1 := @parameter1: android.content.res.Resources;

        i0 := @parameter2: int;

        $r2 = virtualinvoke r0.<android.renderscript.RenderScript: android.content.Context getApplicationContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i1 = $r3.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i1 < 18 goto label1;

        $r6 = <android.renderscript.Allocation$MipmapControl: android.renderscript.Allocation$MipmapControl MIPMAP_NONE>;

        $r7 = staticinvoke <android.renderscript.Allocation: android.renderscript.Allocation createFromBitmapResource(android.renderscript.RenderScript,android.content.res.Resources,int,android.renderscript.Allocation$MipmapControl,int)>(r0, r1, i0, $r6, 3);

        return $r7;

     label1:
        $r4 = <android.renderscript.Allocation$MipmapControl: android.renderscript.Allocation$MipmapControl MIPMAP_NONE>;

        $r5 = staticinvoke <android.renderscript.Allocation: android.renderscript.Allocation createFromBitmapResource(android.renderscript.RenderScript,android.content.res.Resources,int,android.renderscript.Allocation$MipmapControl,int)>(r0, r1, i0, $r4, 2);

        return $r5;
    }

    public static android.renderscript.Allocation createFromBitmapResource(android.renderscript.RenderScript, android.content.res.Resources, int, android.renderscript.Allocation$MipmapControl, int)
    {
        int i0, i1, $i2;
        android.renderscript.Allocation$MipmapControl r0;
        android.renderscript.RSIllegalArgumentException $r1;
        android.renderscript.RenderScript r2;
        android.content.res.Resources r3;
        android.graphics.Bitmap r4;
        android.renderscript.Allocation r5;

        r2 := @parameter0: android.renderscript.RenderScript;

        r3 := @parameter1: android.content.res.Resources;

        i0 := @parameter2: int;

        r0 := @parameter3: android.renderscript.Allocation$MipmapControl;

        i1 := @parameter4: int;

        virtualinvoke r2.<android.renderscript.RenderScript: void validate()>();

        $i2 = i1 & 224;

        if $i2 != 0 goto label1;

        r4 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources,int)>(r3, i0);

        r5 = staticinvoke <android.renderscript.Allocation: android.renderscript.Allocation createFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl,int)>(r2, r4, r0, i1);

        virtualinvoke r4.<android.graphics.Bitmap: void recycle()>();

        return r5;

     label1:
        $r1 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r1.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Unsupported usage specified.");

        throw $r1;
    }

    public static android.renderscript.Allocation createFromString(android.renderscript.RenderScript, java.lang.String, int)
    {
        int i0, $i1;
        android.renderscript.Element $r0;
        java.lang.Exception $r1;
        android.renderscript.RSRuntimeException $r2;
        android.renderscript.RenderScript r3;
        java.lang.String r4;
        byte[] r5;
        android.renderscript.Allocation r6;

        r3 := @parameter0: android.renderscript.RenderScript;

        r4 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        virtualinvoke r3.<android.renderscript.RenderScript: void validate()>();

     label1:
        r5 = virtualinvoke r4.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        $r0 = staticinvoke <android.renderscript.Element: android.renderscript.Element U8(android.renderscript.RenderScript)>(r3);

        $i1 = lengthof r5;

        r6 = staticinvoke <android.renderscript.Allocation: android.renderscript.Allocation createSized(android.renderscript.RenderScript,android.renderscript.Element,int,int)>(r3, $r0, $i1, i0);

        virtualinvoke r6.<android.renderscript.Allocation: void copyFrom(byte[])>(r5);

     label2:
        return r6;

     label3:
        $r1 := @caughtexception;

        $r2 = new android.renderscript.RSRuntimeException;

        specialinvoke $r2.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Could not convert string to utf-8.");

        throw $r2;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static android.renderscript.Allocation createSized(android.renderscript.RenderScript, android.renderscript.Element, int)
    {
        android.renderscript.RenderScript r0;
        android.renderscript.Element r1;
        int i0;
        android.renderscript.Allocation $r2;

        r0 := @parameter0: android.renderscript.RenderScript;

        r1 := @parameter1: android.renderscript.Element;

        i0 := @parameter2: int;

        $r2 = staticinvoke <android.renderscript.Allocation: android.renderscript.Allocation createSized(android.renderscript.RenderScript,android.renderscript.Element,int,int)>(r0, r1, i0, 1);

        return $r2;
    }

    public static android.renderscript.Allocation createSized(android.renderscript.RenderScript, android.renderscript.Element, int, int)
    {
        int i0, i1, $i4;
        android.renderscript.Type$Builder r0;
        long l2, $l3;
        android.renderscript.Allocation$MipmapControl $r2, $r4;
        byte $b5;
        android.renderscript.Allocation $r3;
        java.lang.Throwable $r5, $r6, $r7, r13;
        android.renderscript.RenderScript r8;
        android.renderscript.Element r9;
        android.renderscript.Type r10;
        android.renderscript.RSRuntimeException r12;

        r8 := @parameter0: android.renderscript.RenderScript;

        r9 := @parameter1: android.renderscript.Element;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

     label01:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "createSized");

        virtualinvoke r8.<android.renderscript.RenderScript: void validate()>();

        r0 = new android.renderscript.Type$Builder;

     label02:
        specialinvoke r0.<android.renderscript.Type$Builder: void <init>(android.renderscript.RenderScript,android.renderscript.Element)>(r8, r9);

     label03:
        virtualinvoke r0.<android.renderscript.Type$Builder: android.renderscript.Type$Builder setX(int)>(i0);

        r10 = virtualinvoke r0.<android.renderscript.Type$Builder: android.renderscript.Type create()>();

        $l3 = virtualinvoke r10.<android.renderscript.Type: long getID(android.renderscript.RenderScript)>(r8);

        $r2 = <android.renderscript.Allocation$MipmapControl: android.renderscript.Allocation$MipmapControl MIPMAP_NONE>;

        $i4 = $r2.<android.renderscript.Allocation$MipmapControl: int mID>;

        l2 = virtualinvoke r8.<android.renderscript.RenderScript: long nAllocationCreateTyped(long,int,int,long)>($l3, $i4, i1, 0L);

     label04:
        $b5 = l2 cmp 0L;

        if $b5 == 0 goto label07;

     label05:
        $r3 = new android.renderscript.Allocation;

        $r4 = <android.renderscript.Allocation$MipmapControl: android.renderscript.Allocation$MipmapControl MIPMAP_NONE>;

        specialinvoke $r3.<android.renderscript.Allocation: void <init>(long,android.renderscript.RenderScript,android.renderscript.Type,boolean,int,android.renderscript.Allocation$MipmapControl)>(l2, r8, r10, 1, i1, $r4);

     label06:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return $r3;

     label07:
        r12 = new android.renderscript.RSRuntimeException;

        specialinvoke r12.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Allocation creation failed.");

        throw r12;

     label08:
        $r6 := @caughtexception;

        r13 = $r6;

        goto label11;

     label09:
        $r7 := @caughtexception;

        r13 = $r7;

        goto label11;

     label10:
        $r5 := @caughtexception;

        r13 = $r5;

     label11:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        throw r13;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label07 to label08 with label08;
    }

    public static android.renderscript.Allocation createTyped(android.renderscript.RenderScript, android.renderscript.Type)
    {
        android.renderscript.RenderScript r0;
        android.renderscript.Type r1;
        android.renderscript.Allocation$MipmapControl $r2;
        android.renderscript.Allocation $r3;

        r0 := @parameter0: android.renderscript.RenderScript;

        r1 := @parameter1: android.renderscript.Type;

        $r2 = <android.renderscript.Allocation$MipmapControl: android.renderscript.Allocation$MipmapControl MIPMAP_NONE>;

        $r3 = staticinvoke <android.renderscript.Allocation: android.renderscript.Allocation createTyped(android.renderscript.RenderScript,android.renderscript.Type,android.renderscript.Allocation$MipmapControl,int)>(r0, r1, $r2, 1);

        return $r3;
    }

    public static android.renderscript.Allocation createTyped(android.renderscript.RenderScript, android.renderscript.Type, int)
    {
        android.renderscript.RenderScript r0;
        android.renderscript.Type r1;
        int i0;
        android.renderscript.Allocation$MipmapControl $r2;
        android.renderscript.Allocation $r3;

        r0 := @parameter0: android.renderscript.RenderScript;

        r1 := @parameter1: android.renderscript.Type;

        i0 := @parameter2: int;

        $r2 = <android.renderscript.Allocation$MipmapControl: android.renderscript.Allocation$MipmapControl MIPMAP_NONE>;

        $r3 = staticinvoke <android.renderscript.Allocation: android.renderscript.Allocation createTyped(android.renderscript.RenderScript,android.renderscript.Type,android.renderscript.Allocation$MipmapControl,int)>(r0, r1, $r2, i0);

        return $r3;
    }

    public static android.renderscript.Allocation createTyped(android.renderscript.RenderScript, android.renderscript.Type, android.renderscript.Allocation$MipmapControl, int)
    {
        android.renderscript.Type r0;
        android.renderscript.Allocation$MipmapControl r1;
        int i0, $i3;
        long $l1, l5, l6;
        byte $b2, $b4;
        android.renderscript.Allocation $r2;
        java.lang.Throwable $r3, $r4, r9;
        android.renderscript.RenderScript r5;
        android.renderscript.RSRuntimeException r7;
        android.renderscript.RSInvalidStateException r8;

        r5 := @parameter0: android.renderscript.RenderScript;

        r0 := @parameter1: android.renderscript.Type;

        r1 := @parameter2: android.renderscript.Allocation$MipmapControl;

        i0 := @parameter3: int;

     label01:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "createTyped");

        virtualinvoke r5.<android.renderscript.RenderScript: void validate()>();

        $l1 = virtualinvoke r0.<android.renderscript.Type: long getID(android.renderscript.RenderScript)>(r5);

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label07;

        l5 = virtualinvoke r0.<android.renderscript.Type: long getID(android.renderscript.RenderScript)>(r5);

     label02:
        $i3 = r1.<android.renderscript.Allocation$MipmapControl: int mID>;

        l6 = virtualinvoke r5.<android.renderscript.RenderScript: long nAllocationCreateTyped(long,int,int,long)>(l5, $i3, i0, 0L);

     label03:
        $b4 = l6 cmp 0L;

        if $b4 == 0 goto label06;

     label04:
        $r2 = new android.renderscript.Allocation;

        specialinvoke $r2.<android.renderscript.Allocation: void <init>(long,android.renderscript.RenderScript,android.renderscript.Type,boolean,int,android.renderscript.Allocation$MipmapControl)>(l6, r5, r0, 0, i0, r1);

     label05:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return $r2;

     label06:
        r7 = new android.renderscript.RSRuntimeException;

        specialinvoke r7.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Allocation creation failed.");

        throw r7;

     label07:
        r8 = new android.renderscript.RSInvalidStateException;

        specialinvoke r8.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Bad Type");

        throw r8;

     label08:
        $r3 := @caughtexception;

        r9 = $r3;

        goto label10;

     label09:
        $r4 := @caughtexception;

        r9 = $r4;

     label10:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        throw r9;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label07 to label08 with label08;
    }

    private void data1DChecks(int, int, int, int, boolean)
    {
        android.renderscript.Allocation r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8;
        boolean z0;
        android.renderscript.RenderScript $r2;
        android.renderscript.RSIllegalArgumentException $r3, $r4, $r13, $r15, $r16;
        java.lang.StringBuilder $r5;
        java.lang.String $r14;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        z0 := @parameter4: boolean;

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r2.<android.renderscript.RenderScript: void validate()>();

        if i0 < 0 goto label7;

        if i1 < 1 goto label6;

        $i5 = i0 + i1;

        $i4 = r0.<android.renderscript.Allocation: int mCurrentCount>;

        if $i5 > $i4 goto label5;

        if z0 == 0 goto label2;

        $i7 = i3 / 4;

        $i8 = $i7 * 3;

        if i2 < $i8 goto label1;

        goto label3;

     label1:
        $r16 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r16.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Array too small for allocation type.");

        throw $r16;

     label2:
        if i2 < i3 goto label4;

     label3:
        return;

     label4:
        $r15 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r15.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Array too small for allocation type.");

        throw $r15;

     label5:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Overflow, Available count ");

        $i6 = r0.<android.renderscript.Allocation: int mCurrentCount>;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", got ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at offset ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r13 = new android.renderscript.RSIllegalArgumentException;

        $r14 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r13;

     label6:
        $r4 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r4.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Count must be >= 1.");

        throw $r4;

     label7:
        $r3 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r3.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Offset must be >= 0.");

        throw $r3;
    }

    static android.renderscript.Element elementFromBitmap(android.renderscript.RenderScript, android.graphics.Bitmap)
    {
        android.graphics.Bitmap$Config $r0, $r1, $r2, $r3, r15;
        java.lang.StringBuilder $r4;
        android.renderscript.RSInvalidStateException $r7;
        java.lang.String $r8;
        android.renderscript.Element $r9, $r10, $r11, $r12;
        android.renderscript.RenderScript r13;
        android.graphics.Bitmap r14;

        r13 := @parameter0: android.renderscript.RenderScript;

        r14 := @parameter1: android.graphics.Bitmap;

        r15 = virtualinvoke r14.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        $r0 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ALPHA_8>;

        if r15 != $r0 goto label1;

        $r12 = staticinvoke <android.renderscript.Element: android.renderscript.Element A_8(android.renderscript.RenderScript)>(r13);

        return $r12;

     label1:
        $r1 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_4444>;

        if r15 != $r1 goto label2;

        $r11 = staticinvoke <android.renderscript.Element: android.renderscript.Element RGBA_4444(android.renderscript.RenderScript)>(r13);

        return $r11;

     label2:
        $r2 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        if r15 != $r2 goto label3;

        $r10 = staticinvoke <android.renderscript.Element: android.renderscript.Element RGBA_8888(android.renderscript.RenderScript)>(r13);

        return $r10;

     label3:
        $r3 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config RGB_565>;

        if r15 != $r3 goto label4;

        $r9 = staticinvoke <android.renderscript.Element: android.renderscript.Element RGB_565(android.renderscript.RenderScript)>(r13);

        return $r9;

     label4:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad bitmap type: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r15);

        $r7 = new android.renderscript.RSInvalidStateException;

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>($r8);

        throw $r7;
    }

    private long getIDSafe()
    {
        android.renderscript.Allocation r0, r1;
        android.renderscript.RenderScript $r2, $r3;
        long $l0, $l1;

        r0 := @this: android.renderscript.Allocation;

        r1 = r0.<android.renderscript.Allocation: android.renderscript.Allocation mAdaptedAllocation>;

        if r1 == null goto label1;

        $r3 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $l1 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r3);

        return $l1;

     label1:
        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $l0 = virtualinvoke r0.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r2);

        return $l0;
    }

    static void sendBufferNotification(long)
    {
        long l0;
        java.util.HashMap r0, r6;
        java.lang.Long r1;
        java.lang.Object $r2;
        android.renderscript.Allocation$OnBufferAvailableListener $r3, $r4;
        java.lang.Throwable $r5;
        android.renderscript.Allocation r7;

        l0 := @parameter0: long;

        r0 = <android.renderscript.Allocation: java.util.HashMap mAllocationMap>;

        entermonitor r0;

     label1:
        r6 = <android.renderscript.Allocation: java.util.HashMap mAllocationMap>;

        r1 = new java.lang.Long;

        specialinvoke r1.<java.lang.Long: void <init>(long)>(l0);

        $r2 = virtualinvoke r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r7 = (android.renderscript.Allocation) $r2;

     label2:
        if r7 == null goto label4;

     label3:
        $r3 = r7.<android.renderscript.Allocation: android.renderscript.Allocation$OnBufferAvailableListener mBufferNotifier>;

        if $r3 == null goto label4;

        $r4 = r7.<android.renderscript.Allocation: android.renderscript.Allocation$OnBufferAvailableListener mBufferNotifier>;

        interfaceinvoke $r4.<android.renderscript.Allocation$OnBufferAvailableListener: void onBufferAvailable(android.renderscript.Allocation)>(r7);

     label4:
        exitmonitor r0;

     label5:
        return;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r0;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void setBitmap(android.graphics.Bitmap)
    {
        android.renderscript.Allocation r0;
        android.graphics.Bitmap r1;

        r0 := @this: android.renderscript.Allocation;

        r1 := @parameter0: android.graphics.Bitmap;

        r0.<android.renderscript.Allocation: android.graphics.Bitmap mBitmap> = r1;

        return;
    }

    static android.renderscript.Type typeFromBitmap(android.renderscript.RenderScript, android.graphics.Bitmap, android.renderscript.Allocation$MipmapControl)
    {
        android.graphics.Bitmap r0;
        android.renderscript.Allocation$MipmapControl r1, $r6;
        android.renderscript.Type$Builder $r2;
        android.renderscript.Element $r3;
        int $i0, $i1;
        android.renderscript.Type $r8;
        android.renderscript.RenderScript r9;
        boolean z0;

        r9 := @parameter0: android.renderscript.RenderScript;

        r0 := @parameter1: android.graphics.Bitmap;

        r1 := @parameter2: android.renderscript.Allocation$MipmapControl;

        $r2 = new android.renderscript.Type$Builder;

        $r3 = staticinvoke <android.renderscript.Allocation: android.renderscript.Element elementFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap)>(r9, r0);

        specialinvoke $r2.<android.renderscript.Type$Builder: void <init>(android.renderscript.RenderScript,android.renderscript.Element)>(r9, $r3);

        $i0 = virtualinvoke r0.<android.graphics.Bitmap: int getWidth()>();

        virtualinvoke $r2.<android.renderscript.Type$Builder: android.renderscript.Type$Builder setX(int)>($i0);

        $i1 = virtualinvoke r0.<android.graphics.Bitmap: int getHeight()>();

        virtualinvoke $r2.<android.renderscript.Type$Builder: android.renderscript.Type$Builder setY(int)>($i1);

        $r6 = <android.renderscript.Allocation$MipmapControl: android.renderscript.Allocation$MipmapControl MIPMAP_FULL>;

        if r1 != $r6 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        virtualinvoke $r2.<android.renderscript.Type$Builder: android.renderscript.Type$Builder setMipmaps(boolean)>(z0);

        $r8 = virtualinvoke $r2.<android.renderscript.Type$Builder: android.renderscript.Type create()>();

        return $r8;
    }

    private void updateCacheInfo(android.renderscript.Type)
    {
        android.renderscript.Allocation r0;
        android.renderscript.Type r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8;

        r0 := @this: android.renderscript.Allocation;

        r1 := @parameter0: android.renderscript.Type;

        $i1 = virtualinvoke r1.<android.renderscript.Type: int getX()>();

        r0.<android.renderscript.Allocation: int mCurrentDimX> = $i1;

        $i2 = virtualinvoke r1.<android.renderscript.Type: int getY()>();

        r0.<android.renderscript.Allocation: int mCurrentDimY> = $i2;

        $i3 = virtualinvoke r1.<android.renderscript.Type: int getZ()>();

        r0.<android.renderscript.Allocation: int mCurrentDimZ> = $i3;

        i0 = r0.<android.renderscript.Allocation: int mCurrentDimX>;

        r0.<android.renderscript.Allocation: int mCurrentCount> = i0;

        i7 = r0.<android.renderscript.Allocation: int mCurrentDimY>;

        if i7 <= 1 goto label1;

        $i6 = i0 * i7;

        r0.<android.renderscript.Allocation: int mCurrentCount> = $i6;

     label1:
        i8 = r0.<android.renderscript.Allocation: int mCurrentDimZ>;

        if i8 <= 1 goto label2;

        $i4 = r0.<android.renderscript.Allocation: int mCurrentCount>;

        $i5 = $i4 * i8;

        r0.<android.renderscript.Allocation: int mCurrentCount> = $i5;

     label2:
        return;
    }

    private void validate2DRange(int, int, int, int)
    {
        android.renderscript.Allocation r0, $r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7;
        android.renderscript.RSIllegalArgumentException $r2, $r3, $r4;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r1 = r0.<android.renderscript.Allocation: android.renderscript.Allocation mAdaptedAllocation>;

        if $r1 == null goto label1;

        goto label2;

     label1:
        if i0 < 0 goto label5;

        if i1 < 0 goto label5;

        if i3 < 0 goto label4;

        if i2 < 0 goto label4;

        $i5 = i0 + i2;

        $i4 = r0.<android.renderscript.Allocation: int mCurrentDimX>;

        if $i5 > $i4 goto label3;

        $i7 = i1 + i3;

        $i6 = r0.<android.renderscript.Allocation: int mCurrentDimY>;

        if $i7 > $i6 goto label3;

     label2:
        return;

     label3:
        $r4 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r4.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Updated region larger than allocation.");

        throw $r4;

     label4:
        $r3 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r3.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Height or width cannot be negative.");

        throw $r3;

     label5:
        $r2 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r2.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Offset cannot be negative.");

        throw $r2;
    }

    private void validate3DRange(int, int, int, int, int, int)
    {
        android.renderscript.Allocation r0, $r1;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11;
        android.renderscript.RSIllegalArgumentException $r2, $r3, $r4;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        $r1 = r0.<android.renderscript.Allocation: android.renderscript.Allocation mAdaptedAllocation>;

        if $r1 == null goto label1;

        goto label2;

     label1:
        if i0 < 0 goto label5;

        if i1 < 0 goto label5;

        if i2 < 0 goto label5;

        if i4 < 0 goto label4;

        if i3 < 0 goto label4;

        if i5 < 0 goto label4;

        $i7 = i0 + i3;

        $i6 = r0.<android.renderscript.Allocation: int mCurrentDimX>;

        if $i7 > $i6 goto label3;

        $i9 = i1 + i4;

        $i8 = r0.<android.renderscript.Allocation: int mCurrentDimY>;

        if $i9 > $i8 goto label3;

        $i11 = i2 + i5;

        $i10 = r0.<android.renderscript.Allocation: int mCurrentDimZ>;

        if $i11 > $i10 goto label3;

     label2:
        return;

     label3:
        $r2 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r2.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Updated region larger than allocation.");

        throw $r2;

     label4:
        $r3 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r3.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Height or width cannot be negative.");

        throw $r3;

     label5:
        $r4 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r4.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Offset cannot be negative.");

        throw $r4;
    }

    private void validateBitmapFormat(android.graphics.Bitmap)
    {
        android.renderscript.Allocation r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        android.renderscript.RSIllegalArgumentException $r1, $r24, $r47, $r72, $r97;
        int[] $r2;
        android.renderscript.Type $r3, $r9, $r14, $r19, $r26, $r32, $r37, $r42, $r49, $r51, $r57, $r62, $r67, $r74, $r76, $r82, $r87, $r92, $r99;
        android.renderscript.Element $r4, $r10, $r15, $r20, $r27, $r33, $r38, $r43, $r50, $r52, $r58, $r63, $r68, $r75, $r77, $r83, $r88, $r93, $r100;
        android.renderscript.Element$DataKind $r5, $r6, $r11, $r28, $r29, $r34, $r53, $r54, $r59, $r78, $r79, $r84;
        java.lang.StringBuilder $r7, $r30, $r55, $r80;
        android.renderscript.Element$DataType $r16, $r39, $r64, $r89;
        java.lang.String $r25, $r48, $r73, $r98;
        android.graphics.Bitmap r101;
        android.graphics.Bitmap$Config r102;

        r0 := @this: android.renderscript.Allocation;

        r101 := @parameter0: android.graphics.Bitmap;

        r102 = virtualinvoke r101.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        if r102 == null goto label10;

        $r2 = <android.renderscript.Allocation$1: int[] $SwitchMap$android$graphics$Bitmap$Config>;

        $i1 = virtualinvoke r102.<android.graphics.Bitmap$Config: int ordinal()>();

        i0 = $r2[$i1];

        if i0 == 1 goto label07;

        if i0 == 2 goto label05;

        if i0 == 3 goto label03;

        if i0 == 4 goto label01;

        goto label08;

     label01:
        $r76 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r77 = virtualinvoke $r76.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r79 = $r77.<android.renderscript.Element: android.renderscript.Element$DataKind mKind>;

        $r78 = <android.renderscript.Element$DataKind: android.renderscript.Element$DataKind PIXEL_RGBA>;

        if $r79 != $r78 goto label02;

        $r99 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r100 = virtualinvoke $r99.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $i8 = virtualinvoke $r100.<android.renderscript.Element: int getBytesSize()>();

        if $i8 != 2 goto label02;

        goto label08;

     label02:
        $r80 = new java.lang.StringBuilder;

        specialinvoke $r80.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Allocation kind is ");

        $r82 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r83 = virtualinvoke $r82.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r84 = $r83.<android.renderscript.Element: android.renderscript.Element$DataKind mKind>;

        virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r84);

        virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", type ");

        $r87 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r88 = virtualinvoke $r87.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r89 = $r88.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r89);

        virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of ");

        $r92 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r93 = virtualinvoke $r92.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $i7 = virtualinvoke $r93.<android.renderscript.Element: int getBytesSize()>();

        virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes, passed bitmap was ");

        virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r102);

        $r97 = new android.renderscript.RSIllegalArgumentException;

        $r98 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r97.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>($r98);

        throw $r97;

     label03:
        $r51 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r52 = virtualinvoke $r51.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r54 = $r52.<android.renderscript.Element: android.renderscript.Element$DataKind mKind>;

        $r53 = <android.renderscript.Element$DataKind: android.renderscript.Element$DataKind PIXEL_RGB>;

        if $r54 != $r53 goto label04;

        $r74 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r75 = virtualinvoke $r74.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $i6 = virtualinvoke $r75.<android.renderscript.Element: int getBytesSize()>();

        if $i6 != 2 goto label04;

        goto label08;

     label04:
        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Allocation kind is ");

        $r57 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r58 = virtualinvoke $r57.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r59 = $r58.<android.renderscript.Element: android.renderscript.Element$DataKind mKind>;

        virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r59);

        virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", type ");

        $r62 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r63 = virtualinvoke $r62.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r64 = $r63.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r64);

        virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of ");

        $r67 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r68 = virtualinvoke $r67.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $i5 = virtualinvoke $r68.<android.renderscript.Element: int getBytesSize()>();

        virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes, passed bitmap was ");

        virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r102);

        $r72 = new android.renderscript.RSIllegalArgumentException;

        $r73 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r72.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>($r73);

        throw $r72;

     label05:
        $r26 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r27 = virtualinvoke $r26.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r29 = $r27.<android.renderscript.Element: android.renderscript.Element$DataKind mKind>;

        $r28 = <android.renderscript.Element$DataKind: android.renderscript.Element$DataKind PIXEL_RGBA>;

        if $r29 != $r28 goto label06;

        $r49 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r50 = virtualinvoke $r49.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $i4 = virtualinvoke $r50.<android.renderscript.Element: int getBytesSize()>();

        if $i4 != 4 goto label06;

        goto label08;

     label06:
        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Allocation kind is ");

        $r32 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r33 = virtualinvoke $r32.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r34 = $r33.<android.renderscript.Element: android.renderscript.Element$DataKind mKind>;

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r34);

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", type ");

        $r37 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r38 = virtualinvoke $r37.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r39 = $r38.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39);

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of ");

        $r42 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r43 = virtualinvoke $r42.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $i3 = virtualinvoke $r43.<android.renderscript.Element: int getBytesSize()>();

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes, passed bitmap was ");

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r102);

        $r47 = new android.renderscript.RSIllegalArgumentException;

        $r48 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r47.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>($r48);

        throw $r47;

     label07:
        $r3 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r4 = virtualinvoke $r3.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r6 = $r4.<android.renderscript.Element: android.renderscript.Element$DataKind mKind>;

        $r5 = <android.renderscript.Element$DataKind: android.renderscript.Element$DataKind PIXEL_A>;

        if $r6 != $r5 goto label09;

     label08:
        return;

     label09:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Allocation kind is ");

        $r9 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r10 = virtualinvoke $r9.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r11 = $r10.<android.renderscript.Element: android.renderscript.Element$DataKind mKind>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", type ");

        $r14 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r15 = virtualinvoke $r14.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r16 = $r15.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of ");

        $r19 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r20 = virtualinvoke $r19.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $i2 = virtualinvoke $r20.<android.renderscript.Element: int getBytesSize()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes, passed bitmap was ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r102);

        $r24 = new android.renderscript.RSIllegalArgumentException;

        $r25 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>($r25);

        throw $r24;

     label10:
        $r1 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r1.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Bitmap has an unsupported format for this operation");

        throw $r1;
    }

    private void validateBitmapSize(android.graphics.Bitmap)
    {
        android.renderscript.Allocation r0;
        android.graphics.Bitmap r1;
        int $i0, $i1, $i2, $i3;
        android.renderscript.RSIllegalArgumentException $r2;

        r0 := @this: android.renderscript.Allocation;

        r1 := @parameter0: android.graphics.Bitmap;

        $i0 = r0.<android.renderscript.Allocation: int mCurrentDimX>;

        $i1 = virtualinvoke r1.<android.graphics.Bitmap: int getWidth()>();

        if $i0 != $i1 goto label1;

        $i2 = r0.<android.renderscript.Allocation: int mCurrentDimY>;

        $i3 = virtualinvoke r1.<android.graphics.Bitmap: int getHeight()>();

        if $i2 != $i3 goto label1;

        return;

     label1:
        $r2 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r2.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Cannot update allocation from bitmap, sizes mismatch");

        throw $r2;
    }

    private void validateIsFloat32()
    {
        android.renderscript.Allocation r0;
        android.renderscript.Type $r2, $r8;
        android.renderscript.Element $r3, $r9;
        android.renderscript.Element$DataType $r4, $r5, $r10;
        java.lang.StringBuilder $r6;
        android.renderscript.RSIllegalArgumentException $r12;
        java.lang.String $r13;

        r0 := @this: android.renderscript.Allocation;

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r3 = $r2.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r5 = $r3.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r4 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType FLOAT_32>;

        if $r5 != $r4 goto label1;

        return;

     label1:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("32 bit float source does not match allocation type ");

        $r8 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r9 = $r8.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r10 = $r9.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = new android.renderscript.RSIllegalArgumentException;

        $r13 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r12;
    }

    private void validateIsFloat64()
    {
        android.renderscript.Allocation r0;
        android.renderscript.Type $r2, $r8;
        android.renderscript.Element $r3, $r9;
        android.renderscript.Element$DataType $r4, $r5, $r10;
        java.lang.StringBuilder $r6;
        android.renderscript.RSIllegalArgumentException $r12;
        java.lang.String $r13;

        r0 := @this: android.renderscript.Allocation;

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r3 = $r2.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r5 = $r3.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r4 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType FLOAT_64>;

        if $r5 != $r4 goto label1;

        return;

     label1:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("64 bit float source does not match allocation type ");

        $r8 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r9 = $r8.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r10 = $r9.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = new android.renderscript.RSIllegalArgumentException;

        $r13 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r12;
    }

    private void validateIsInt16OrFloat16()
    {
        android.renderscript.Allocation r0;
        android.renderscript.Type $r2, $r6, $r10, $r16;
        android.renderscript.Element $r3, $r7, $r11, $r17;
        android.renderscript.Element$DataType $r4, $r5, $r8, $r9, $r12, $r13, $r18;
        java.lang.StringBuilder $r14;
        android.renderscript.RSIllegalArgumentException $r20;
        java.lang.String $r21;

        r0 := @this: android.renderscript.Allocation;

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r3 = $r2.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r5 = $r3.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r4 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType SIGNED_16>;

        if $r5 == $r4 goto label2;

        $r6 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r7 = $r6.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r9 = $r7.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r8 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType UNSIGNED_16>;

        if $r9 == $r8 goto label2;

        $r10 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r11 = $r10.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r13 = $r11.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r12 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType FLOAT_16>;

        if $r13 != $r12 goto label1;

        goto label2;

     label1:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("16 bit integer source does not match allocation type ");

        $r16 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r17 = $r16.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r18 = $r17.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r20 = new android.renderscript.RSIllegalArgumentException;

        $r21 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>($r21);

        throw $r20;

     label2:
        return;
    }

    private void validateIsInt32()
    {
        android.renderscript.Allocation r0;
        android.renderscript.Type $r2, $r6, $r12;
        android.renderscript.Element $r3, $r7, $r13;
        android.renderscript.Element$DataType $r4, $r5, $r8, $r9, $r14;
        java.lang.StringBuilder $r10;
        android.renderscript.RSIllegalArgumentException $r16;
        java.lang.String $r17;

        r0 := @this: android.renderscript.Allocation;

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r3 = $r2.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r5 = $r3.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r4 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType SIGNED_32>;

        if $r5 == $r4 goto label2;

        $r6 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r7 = $r6.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r9 = $r7.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r8 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType UNSIGNED_32>;

        if $r9 != $r8 goto label1;

        goto label2;

     label1:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("32 bit integer source does not match allocation type ");

        $r12 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r13 = $r12.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r14 = $r13.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = new android.renderscript.RSIllegalArgumentException;

        $r17 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r16;

     label2:
        return;
    }

    private void validateIsInt64()
    {
        android.renderscript.Allocation r0;
        android.renderscript.Type $r2, $r6, $r12;
        android.renderscript.Element $r3, $r7, $r13;
        android.renderscript.Element$DataType $r4, $r5, $r8, $r9, $r14;
        java.lang.StringBuilder $r10;
        android.renderscript.RSIllegalArgumentException $r16;
        java.lang.String $r17;

        r0 := @this: android.renderscript.Allocation;

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r3 = $r2.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r5 = $r3.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r4 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType SIGNED_64>;

        if $r5 == $r4 goto label2;

        $r6 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r7 = $r6.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r9 = $r7.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r8 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType UNSIGNED_64>;

        if $r9 != $r8 goto label1;

        goto label2;

     label1:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("64 bit integer source does not match allocation type ");

        $r12 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r13 = $r12.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r14 = $r13.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = new android.renderscript.RSIllegalArgumentException;

        $r17 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r16;

     label2:
        return;
    }

    private void validateIsInt8()
    {
        android.renderscript.Allocation r0;
        android.renderscript.Type $r2, $r6, $r12;
        android.renderscript.Element $r3, $r7, $r13;
        android.renderscript.Element$DataType $r4, $r5, $r8, $r9, $r14;
        java.lang.StringBuilder $r10;
        android.renderscript.RSIllegalArgumentException $r16;
        java.lang.String $r17;

        r0 := @this: android.renderscript.Allocation;

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r3 = $r2.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r5 = $r3.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r4 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType SIGNED_8>;

        if $r5 == $r4 goto label2;

        $r6 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r7 = $r6.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r9 = $r7.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r8 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType UNSIGNED_8>;

        if $r9 != $r8 goto label1;

        goto label2;

     label1:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("8 bit integer source does not match allocation type ");

        $r12 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r13 = $r12.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r14 = $r13.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = new android.renderscript.RSIllegalArgumentException;

        $r17 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r16;

     label2:
        return;
    }

    private void validateIsObject()
    {
        android.renderscript.Allocation r0;
        android.renderscript.Type $r2, $r6, $r10, $r14, $r18, $r22, $r26, $r30, $r34, $r38, $r44;
        android.renderscript.Element $r3, $r7, $r11, $r15, $r19, $r23, $r27, $r31, $r35, $r39, $r45;
        android.renderscript.Element$DataType $r4, $r5, $r8, $r9, $r12, $r13, $r16, $r17, $r20, $r21, $r24, $r25, $r28, $r29, $r32, $r33, $r36, $r37, $r40, $r41, $r46;
        java.lang.StringBuilder $r42;
        android.renderscript.RSIllegalArgumentException $r48;
        java.lang.String $r49;

        r0 := @this: android.renderscript.Allocation;

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r3 = $r2.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r5 = $r3.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r4 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType RS_ELEMENT>;

        if $r5 == $r4 goto label2;

        $r6 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r7 = $r6.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r9 = $r7.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r8 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType RS_TYPE>;

        if $r9 == $r8 goto label2;

        $r10 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r11 = $r10.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r13 = $r11.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r12 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType RS_ALLOCATION>;

        if $r13 == $r12 goto label2;

        $r14 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r15 = $r14.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r17 = $r15.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r16 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType RS_SAMPLER>;

        if $r17 == $r16 goto label2;

        $r18 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r19 = $r18.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r21 = $r19.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r20 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType RS_SCRIPT>;

        if $r21 == $r20 goto label2;

        $r22 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r23 = $r22.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r25 = $r23.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r24 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType RS_MESH>;

        if $r25 == $r24 goto label2;

        $r26 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r27 = $r26.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r29 = $r27.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r28 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType RS_PROGRAM_FRAGMENT>;

        if $r29 == $r28 goto label2;

        $r30 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r31 = $r30.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r33 = $r31.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r32 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType RS_PROGRAM_VERTEX>;

        if $r33 == $r32 goto label2;

        $r34 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r35 = $r34.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r37 = $r35.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r36 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType RS_PROGRAM_RASTER>;

        if $r37 == $r36 goto label2;

        $r38 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r39 = $r38.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r41 = $r39.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r40 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType RS_PROGRAM_STORE>;

        if $r41 != $r40 goto label1;

        goto label2;

     label1:
        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Object source does not match allocation type ");

        $r44 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r45 = $r44.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r46 = $r45.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r46);

        $r48 = new android.renderscript.RSIllegalArgumentException;

        $r49 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r48.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>($r49);

        throw $r48;

     label2:
        return;
    }

    private android.renderscript.Element$DataType validateObjectIsPrimitiveArray(java.lang.Object, boolean)
    {
        android.renderscript.Allocation r0;
        boolean z0, $z1, $z2;
        android.renderscript.RSIllegalArgumentException $r2, $r3, $r21;
        java.lang.Class $r4, $r5, $r6, $r7, $r8, $r9, r42, r43;
        java.lang.StringBuilder $r10;
        java.lang.String $r12, $r18, $r22;
        android.renderscript.Type $r15, $r26, $r30, $r34, $r38;
        android.renderscript.Element $r16, $r27, $r31, $r35, $r39;
        android.renderscript.Element$DataType $r17, $r23, $r24, $r25, $r28, $r29, $r32, $r33, $r36, $r37, $r40;
        java.lang.Object r41;

        r0 := @this: android.renderscript.Allocation;

        r41 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        r42 = virtualinvoke r41.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = virtualinvoke r42.<java.lang.Class: boolean isArray()>();

        if $z1 == 0 goto label14;

        r43 = virtualinvoke r42.<java.lang.Class: java.lang.Class getComponentType()>();

        $z2 = virtualinvoke r43.<java.lang.Class: boolean isPrimitive()>();

        if $z2 == 0 goto label13;

        $r4 = <java.lang.Long: java.lang.Class TYPE>;

        if r43 != $r4 goto label02;

        if z0 == 0 goto label01;

        specialinvoke r0.<android.renderscript.Allocation: void validateIsInt64()>();

        $r38 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r39 = $r38.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r40 = $r39.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        return $r40;

     label01:
        $r37 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType SIGNED_64>;

        return $r37;

     label02:
        $r5 = <java.lang.Integer: java.lang.Class TYPE>;

        if r43 != $r5 goto label04;

        if z0 == 0 goto label03;

        specialinvoke r0.<android.renderscript.Allocation: void validateIsInt32()>();

        $r34 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r35 = $r34.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r36 = $r35.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        return $r36;

     label03:
        $r33 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType SIGNED_32>;

        return $r33;

     label04:
        $r6 = <java.lang.Short: java.lang.Class TYPE>;

        if r43 != $r6 goto label06;

        if z0 == 0 goto label05;

        specialinvoke r0.<android.renderscript.Allocation: void validateIsInt16OrFloat16()>();

        $r30 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r31 = $r30.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r32 = $r31.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        return $r32;

     label05:
        $r29 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType SIGNED_16>;

        return $r29;

     label06:
        $r7 = <java.lang.Byte: java.lang.Class TYPE>;

        if r43 != $r7 goto label08;

        if z0 == 0 goto label07;

        specialinvoke r0.<android.renderscript.Allocation: void validateIsInt8()>();

        $r26 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r27 = $r26.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r28 = $r27.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        return $r28;

     label07:
        $r25 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType SIGNED_8>;

        return $r25;

     label08:
        $r8 = <java.lang.Float: java.lang.Class TYPE>;

        if r43 != $r8 goto label10;

        if z0 == 0 goto label09;

        specialinvoke r0.<android.renderscript.Allocation: void validateIsFloat32()>();

     label09:
        $r24 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType FLOAT_32>;

        return $r24;

     label10:
        $r9 = <java.lang.Double: java.lang.Class TYPE>;

        if r43 != $r9 goto label12;

        if z0 == 0 goto label11;

        specialinvoke r0.<android.renderscript.Allocation: void validateIsFloat64()>();

     label11:
        $r23 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType FLOAT_64>;

        return $r23;

     label12:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parameter of type ");

        $r12 = virtualinvoke r43.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[] is not compatible with data type ");

        $r15 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r16 = $r15.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r17 = $r16.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $r18 = virtualinvoke $r17.<android.renderscript.Element$DataType: java.lang.String name()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of allocation");

        $r21 = new android.renderscript.RSIllegalArgumentException;

        $r22 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>($r22);

        throw $r21;

     label13:
        $r3 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r3.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Object passed is not an Array of primitives.");

        throw $r3;

     label14:
        $r2 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r2.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Object passed is not an array of primitives.");

        throw $r2;
    }

    public void copy1DRangeFrom(int, int, android.renderscript.Allocation, int)
    {
        android.renderscript.Allocation r0, r1;
        int i0, i1, i2, $i4, $i5, $i7, $i8;
        android.renderscript.RenderScript $r2, $r4;
        long $l3, $l6;
        android.renderscript.Type$CubemapFace $r3, $r5;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.renderscript.Allocation;

        i2 := @parameter3: int;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copy1DRangeFrom");

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $l3 = specialinvoke r0.<android.renderscript.Allocation: long getIDSafe()>();

        $i4 = r0.<android.renderscript.Allocation: int mSelectedLOD>;

        $r3 = r0.<android.renderscript.Allocation: android.renderscript.Type$CubemapFace mSelectedFace>;

        $i5 = $r3.<android.renderscript.Type$CubemapFace: int mID>;

        $r4 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r4);

        $i8 = r1.<android.renderscript.Allocation: int mSelectedLOD>;

        $r5 = r1.<android.renderscript.Allocation: android.renderscript.Type$CubemapFace mSelectedFace>;

        $i7 = $r5.<android.renderscript.Type$CubemapFace: int mID>;

        virtualinvoke $r2.<android.renderscript.RenderScript: void nAllocationData2D(long,int,int,int,int,int,int,long,int,int,int,int)>($l3, i0, 0, $i4, $i5, i1, 1, $l6, i2, 0, $i8, $i7);

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;
    }

    public void copy1DRangeFrom(int, int, java.lang.Object)
    {
        android.renderscript.Allocation r0;
        int i0, i1, $i2;
        java.lang.Object r1;
        android.renderscript.Element$DataType $r2;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.Object;

        $r2 = specialinvoke r0.<android.renderscript.Allocation: android.renderscript.Element$DataType validateObjectIsPrimitiveArray(java.lang.Object,boolean)>(r1, 1);

        $i2 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r1);

        specialinvoke r0.<android.renderscript.Allocation: void copy1DRangeFromUnchecked(int,int,java.lang.Object,android.renderscript.Element$DataType,int)>(i0, i1, r1, $r2, $i2);

        return;
    }

    public void copy1DRangeFrom(int, int, byte[])
    {
        android.renderscript.Allocation r0;
        int i0, i1, $i2;
        byte[] r1;
        android.renderscript.Element$DataType $r2;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: byte[];

        specialinvoke r0.<android.renderscript.Allocation: void validateIsInt8()>();

        $r2 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType SIGNED_8>;

        $i2 = lengthof r1;

        specialinvoke r0.<android.renderscript.Allocation: void copy1DRangeFromUnchecked(int,int,java.lang.Object,android.renderscript.Element$DataType,int)>(i0, i1, r1, $r2, $i2);

        return;
    }

    public void copy1DRangeFrom(int, int, float[])
    {
        android.renderscript.Allocation r0;
        int i0, i1, $i2;
        float[] r1;
        android.renderscript.Element$DataType $r2;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: float[];

        specialinvoke r0.<android.renderscript.Allocation: void validateIsFloat32()>();

        $r2 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType FLOAT_32>;

        $i2 = lengthof r1;

        specialinvoke r0.<android.renderscript.Allocation: void copy1DRangeFromUnchecked(int,int,java.lang.Object,android.renderscript.Element$DataType,int)>(i0, i1, r1, $r2, $i2);

        return;
    }

    public void copy1DRangeFrom(int, int, int[])
    {
        android.renderscript.Allocation r0;
        int i0, i1, $i2;
        int[] r1;
        android.renderscript.Element$DataType $r2;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: int[];

        specialinvoke r0.<android.renderscript.Allocation: void validateIsInt32()>();

        $r2 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType SIGNED_32>;

        $i2 = lengthof r1;

        specialinvoke r0.<android.renderscript.Allocation: void copy1DRangeFromUnchecked(int,int,java.lang.Object,android.renderscript.Element$DataType,int)>(i0, i1, r1, $r2, $i2);

        return;
    }

    public void copy1DRangeFrom(int, int, short[])
    {
        android.renderscript.Allocation r0;
        int i0, i1, $i2;
        short[] r1;
        android.renderscript.Element$DataType $r2;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: short[];

        specialinvoke r0.<android.renderscript.Allocation: void validateIsInt16OrFloat16()>();

        $r2 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType SIGNED_16>;

        $i2 = lengthof r1;

        specialinvoke r0.<android.renderscript.Allocation: void copy1DRangeFromUnchecked(int,int,java.lang.Object,android.renderscript.Element$DataType,int)>(i0, i1, r1, $r2, $i2);

        return;
    }

    public void copy1DRangeFromUnchecked(int, int, java.lang.Object)
    {
        android.renderscript.Allocation r0;
        int i0, i1, $i2;
        java.lang.Object r1;
        android.renderscript.Element$DataType $r2;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.Object;

        $r2 = specialinvoke r0.<android.renderscript.Allocation: android.renderscript.Element$DataType validateObjectIsPrimitiveArray(java.lang.Object,boolean)>(r1, 0);

        $i2 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r1);

        specialinvoke r0.<android.renderscript.Allocation: void copy1DRangeFromUnchecked(int,int,java.lang.Object,android.renderscript.Element$DataType,int)>(i0, i1, r1, $r2, $i2);

        return;
    }

    public void copy1DRangeFromUnchecked(int, int, byte[])
    {
        android.renderscript.Allocation r0;
        int i0, i1, $i2;
        byte[] r1;
        android.renderscript.Element$DataType $r2;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: byte[];

        $r2 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType SIGNED_8>;

        $i2 = lengthof r1;

        specialinvoke r0.<android.renderscript.Allocation: void copy1DRangeFromUnchecked(int,int,java.lang.Object,android.renderscript.Element$DataType,int)>(i0, i1, r1, $r2, $i2);

        return;
    }

    public void copy1DRangeFromUnchecked(int, int, float[])
    {
        android.renderscript.Allocation r0;
        int i0, i1, $i2;
        float[] r1;
        android.renderscript.Element$DataType $r2;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: float[];

        $r2 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType FLOAT_32>;

        $i2 = lengthof r1;

        specialinvoke r0.<android.renderscript.Allocation: void copy1DRangeFromUnchecked(int,int,java.lang.Object,android.renderscript.Element$DataType,int)>(i0, i1, r1, $r2, $i2);

        return;
    }

    public void copy1DRangeFromUnchecked(int, int, int[])
    {
        android.renderscript.Allocation r0;
        int i0, i1, $i2;
        int[] r1;
        android.renderscript.Element$DataType $r2;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: int[];

        $r2 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType SIGNED_32>;

        $i2 = lengthof r1;

        specialinvoke r0.<android.renderscript.Allocation: void copy1DRangeFromUnchecked(int,int,java.lang.Object,android.renderscript.Element$DataType,int)>(i0, i1, r1, $r2, $i2);

        return;
    }

    public void copy1DRangeFromUnchecked(int, int, short[])
    {
        android.renderscript.Allocation r0;
        int i0, i1, $i2;
        short[] r1;
        android.renderscript.Element$DataType $r2;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: short[];

        $r2 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType SIGNED_16>;

        $i2 = lengthof r1;

        specialinvoke r0.<android.renderscript.Allocation: void copy1DRangeFromUnchecked(int,int,java.lang.Object,android.renderscript.Element$DataType,int)>(i0, i1, r1, $r2, $i2);

        return;
    }

    public void copy1DRangeTo(int, int, java.lang.Object)
    {
        android.renderscript.Allocation r0;
        int i0, i1, $i2;
        java.lang.Object r1;
        android.renderscript.Element$DataType $r2;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.Object;

        $r2 = specialinvoke r0.<android.renderscript.Allocation: android.renderscript.Element$DataType validateObjectIsPrimitiveArray(java.lang.Object,boolean)>(r1, 1);

        $i2 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r1);

        specialinvoke r0.<android.renderscript.Allocation: void copy1DRangeToUnchecked(int,int,java.lang.Object,android.renderscript.Element$DataType,int)>(i0, i1, r1, $r2, $i2);

        return;
    }

    public void copy1DRangeTo(int, int, byte[])
    {
        android.renderscript.Allocation r0;
        int i0, i1, $i2;
        byte[] r1;
        android.renderscript.Element$DataType $r2;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: byte[];

        specialinvoke r0.<android.renderscript.Allocation: void validateIsInt8()>();

        $r2 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType SIGNED_8>;

        $i2 = lengthof r1;

        specialinvoke r0.<android.renderscript.Allocation: void copy1DRangeToUnchecked(int,int,java.lang.Object,android.renderscript.Element$DataType,int)>(i0, i1, r1, $r2, $i2);

        return;
    }

    public void copy1DRangeTo(int, int, float[])
    {
        android.renderscript.Allocation r0;
        int i0, i1, $i2;
        float[] r1;
        android.renderscript.Element$DataType $r2;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: float[];

        specialinvoke r0.<android.renderscript.Allocation: void validateIsFloat32()>();

        $r2 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType FLOAT_32>;

        $i2 = lengthof r1;

        specialinvoke r0.<android.renderscript.Allocation: void copy1DRangeToUnchecked(int,int,java.lang.Object,android.renderscript.Element$DataType,int)>(i0, i1, r1, $r2, $i2);

        return;
    }

    public void copy1DRangeTo(int, int, int[])
    {
        android.renderscript.Allocation r0;
        int i0, i1, $i2;
        int[] r1;
        android.renderscript.Element$DataType $r2;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: int[];

        specialinvoke r0.<android.renderscript.Allocation: void validateIsInt32()>();

        $r2 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType SIGNED_32>;

        $i2 = lengthof r1;

        specialinvoke r0.<android.renderscript.Allocation: void copy1DRangeToUnchecked(int,int,java.lang.Object,android.renderscript.Element$DataType,int)>(i0, i1, r1, $r2, $i2);

        return;
    }

    public void copy1DRangeTo(int, int, short[])
    {
        android.renderscript.Allocation r0;
        int i0, i1, $i2;
        short[] r1;
        android.renderscript.Element$DataType $r2;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: short[];

        specialinvoke r0.<android.renderscript.Allocation: void validateIsInt16OrFloat16()>();

        $r2 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType SIGNED_16>;

        $i2 = lengthof r1;

        specialinvoke r0.<android.renderscript.Allocation: void copy1DRangeToUnchecked(int,int,java.lang.Object,android.renderscript.Element$DataType,int)>(i0, i1, r1, $r2, $i2);

        return;
    }

    public void copy1DRangeToUnchecked(int, int, java.lang.Object)
    {
        android.renderscript.Allocation r0;
        int i0, i1, $i2;
        java.lang.Object r1;
        android.renderscript.Element$DataType $r2;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.Object;

        $r2 = specialinvoke r0.<android.renderscript.Allocation: android.renderscript.Element$DataType validateObjectIsPrimitiveArray(java.lang.Object,boolean)>(r1, 0);

        $i2 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r1);

        specialinvoke r0.<android.renderscript.Allocation: void copy1DRangeToUnchecked(int,int,java.lang.Object,android.renderscript.Element$DataType,int)>(i0, i1, r1, $r2, $i2);

        return;
    }

    public void copy1DRangeToUnchecked(int, int, byte[])
    {
        android.renderscript.Allocation r0;
        int i0, i1, $i2;
        byte[] r1;
        android.renderscript.Element$DataType $r2;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: byte[];

        $r2 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType SIGNED_8>;

        $i2 = lengthof r1;

        specialinvoke r0.<android.renderscript.Allocation: void copy1DRangeToUnchecked(int,int,java.lang.Object,android.renderscript.Element$DataType,int)>(i0, i1, r1, $r2, $i2);

        return;
    }

    public void copy1DRangeToUnchecked(int, int, float[])
    {
        android.renderscript.Allocation r0;
        int i0, i1, $i2;
        float[] r1;
        android.renderscript.Element$DataType $r2;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: float[];

        $r2 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType FLOAT_32>;

        $i2 = lengthof r1;

        specialinvoke r0.<android.renderscript.Allocation: void copy1DRangeToUnchecked(int,int,java.lang.Object,android.renderscript.Element$DataType,int)>(i0, i1, r1, $r2, $i2);

        return;
    }

    public void copy1DRangeToUnchecked(int, int, int[])
    {
        android.renderscript.Allocation r0;
        int i0, i1, $i2;
        int[] r1;
        android.renderscript.Element$DataType $r2;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: int[];

        $r2 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType SIGNED_32>;

        $i2 = lengthof r1;

        specialinvoke r0.<android.renderscript.Allocation: void copy1DRangeToUnchecked(int,int,java.lang.Object,android.renderscript.Element$DataType,int)>(i0, i1, r1, $r2, $i2);

        return;
    }

    public void copy1DRangeToUnchecked(int, int, short[])
    {
        android.renderscript.Allocation r0;
        int i0, i1, $i2;
        short[] r1;
        android.renderscript.Element$DataType $r2;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: short[];

        $r2 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType SIGNED_16>;

        $i2 = lengthof r1;

        specialinvoke r0.<android.renderscript.Allocation: void copy1DRangeToUnchecked(int,int,java.lang.Object,android.renderscript.Element$DataType,int)>(i0, i1, r1, $r2, $i2);

        return;
    }

    public void copy2DRangeFrom(int, int, int, int, android.renderscript.Allocation, int, int)
    {
        android.renderscript.Allocation r0, r7;
        int i0, i1, i2, i3, i4, i5, $i7, $i8, $i10, $i11;
        android.renderscript.RenderScript $r1, $r2, $r4;
        long $l6, $l9;
        android.renderscript.Type$CubemapFace $r3, $r5;
        java.lang.Throwable $r6;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r7 := @parameter4: android.renderscript.Allocation;

        i4 := @parameter5: int;

        i5 := @parameter6: int;

     label1:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copy2DRangeFrom");

        $r1 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r1.<android.renderscript.RenderScript: void validate()>();

        specialinvoke r0.<android.renderscript.Allocation: void validate2DRange(int,int,int,int)>(i0, i1, i2, i3);

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $l6 = specialinvoke r0.<android.renderscript.Allocation: long getIDSafe()>();

        $i7 = r0.<android.renderscript.Allocation: int mSelectedLOD>;

        $r3 = r0.<android.renderscript.Allocation: android.renderscript.Type$CubemapFace mSelectedFace>;

        $i8 = $r3.<android.renderscript.Type$CubemapFace: int mID>;

        $r4 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $l9 = virtualinvoke r7.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r4);

        $i11 = r7.<android.renderscript.Allocation: int mSelectedLOD>;

        $r5 = r7.<android.renderscript.Allocation: android.renderscript.Type$CubemapFace mSelectedFace>;

        $i10 = $r5.<android.renderscript.Type$CubemapFace: int mID>;

        virtualinvoke $r2.<android.renderscript.RenderScript: void nAllocationData2D(long,int,int,int,int,int,int,long,int,int,int,int)>($l6, i0, i1, $i7, $i8, i2, i3, $l9, i4, i5, $i11, $i10);

     label2:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;

     label3:
        $r6 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void copy2DRangeFrom(int, int, int, int, java.lang.Object)
    {
        android.renderscript.Allocation r0;
        int i0, i1, i2, i3, $i4;
        android.renderscript.Element$DataType $r1;
        java.lang.Throwable $r2, $r3, r5;
        java.lang.Object r4;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r4 := @parameter4: java.lang.Object;

     label1:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copy2DRangeFrom");

     label2:
        $r1 = specialinvoke r0.<android.renderscript.Allocation: android.renderscript.Element$DataType validateObjectIsPrimitiveArray(java.lang.Object,boolean)>(r4, 1);

        $i4 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r4);

        virtualinvoke r0.<android.renderscript.Allocation: void copy2DRangeFromUnchecked(int,int,int,int,java.lang.Object,android.renderscript.Element$DataType,int)>(i0, i1, i2, i3, r4, $r1, $i4);

     label3:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;

     label4:
        $r2 := @caughtexception;

        r5 = $r2;

        goto label6;

     label5:
        $r3 := @caughtexception;

        r5 = $r3;

     label6:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        throw r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public void copy2DRangeFrom(int, int, int, int, byte[])
    {
        android.renderscript.Allocation r0;
        int i0, i1, i2, i3, $i4;
        byte[] r1;
        android.renderscript.Element$DataType $r2;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: byte[];

        specialinvoke r0.<android.renderscript.Allocation: void validateIsInt8()>();

        $r2 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType SIGNED_8>;

        $i4 = lengthof r1;

        virtualinvoke r0.<android.renderscript.Allocation: void copy2DRangeFromUnchecked(int,int,int,int,java.lang.Object,android.renderscript.Element$DataType,int)>(i0, i1, i2, i3, r1, $r2, $i4);

        return;
    }

    public void copy2DRangeFrom(int, int, int, int, float[])
    {
        android.renderscript.Allocation r0;
        int i0, i1, i2, i3, $i4;
        float[] r1;
        android.renderscript.Element$DataType $r2;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: float[];

        specialinvoke r0.<android.renderscript.Allocation: void validateIsFloat32()>();

        $r2 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType FLOAT_32>;

        $i4 = lengthof r1;

        virtualinvoke r0.<android.renderscript.Allocation: void copy2DRangeFromUnchecked(int,int,int,int,java.lang.Object,android.renderscript.Element$DataType,int)>(i0, i1, i2, i3, r1, $r2, $i4);

        return;
    }

    public void copy2DRangeFrom(int, int, int, int, int[])
    {
        android.renderscript.Allocation r0;
        int i0, i1, i2, i3, $i4;
        int[] r1;
        android.renderscript.Element$DataType $r2;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: int[];

        specialinvoke r0.<android.renderscript.Allocation: void validateIsInt32()>();

        $r2 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType SIGNED_32>;

        $i4 = lengthof r1;

        virtualinvoke r0.<android.renderscript.Allocation: void copy2DRangeFromUnchecked(int,int,int,int,java.lang.Object,android.renderscript.Element$DataType,int)>(i0, i1, i2, i3, r1, $r2, $i4);

        return;
    }

    public void copy2DRangeFrom(int, int, int, int, short[])
    {
        android.renderscript.Allocation r0;
        int i0, i1, i2, i3, $i4;
        short[] r1;
        android.renderscript.Element$DataType $r2;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: short[];

        specialinvoke r0.<android.renderscript.Allocation: void validateIsInt16OrFloat16()>();

        $r2 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType SIGNED_16>;

        $i4 = lengthof r1;

        virtualinvoke r0.<android.renderscript.Allocation: void copy2DRangeFromUnchecked(int,int,int,int,java.lang.Object,android.renderscript.Element$DataType,int)>(i0, i1, i2, i3, r1, $r2, $i4);

        return;
    }

    public void copy2DRangeFrom(int, int, android.graphics.Bitmap)
    {
        android.renderscript.Allocation r0;
        int i0, i1, $i2, $i3, $i5, $i6, $i7, $i8;
        android.graphics.Bitmap r1, r9;
        android.graphics.Canvas r2;
        android.renderscript.RenderScript $r3, $r5;
        android.graphics.Bitmap$Config $r4, $r7;
        long $l4;
        android.renderscript.Type$CubemapFace $r6;
        java.lang.Throwable $r8;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r9 := @parameter2: android.graphics.Bitmap;

     label1:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copy2DRangeFrom");

        $r3 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r3.<android.renderscript.RenderScript: void validate()>();

        $r4 = virtualinvoke r9.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        if $r4 != null goto label3;

        $i7 = virtualinvoke r9.<android.graphics.Bitmap: int getWidth()>();

        $i8 = virtualinvoke r9.<android.graphics.Bitmap: int getHeight()>();

        $r7 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        r1 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>($i7, $i8, $r7);

        r2 = new android.graphics.Canvas;

        specialinvoke r2.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>(r1);

        virtualinvoke r2.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>(r9, 0.0F, 0.0F, null);

        virtualinvoke r0.<android.renderscript.Allocation: void copy2DRangeFrom(int,int,android.graphics.Bitmap)>(i0, i1, r1);

     label2:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;

     label3:
        specialinvoke r0.<android.renderscript.Allocation: void validateBitmapFormat(android.graphics.Bitmap)>(r9);

        $i2 = virtualinvoke r9.<android.graphics.Bitmap: int getWidth()>();

        $i3 = virtualinvoke r9.<android.graphics.Bitmap: int getHeight()>();

        specialinvoke r0.<android.renderscript.Allocation: void validate2DRange(int,int,int,int)>(i0, i1, $i2, $i3);

        $r5 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $l4 = specialinvoke r0.<android.renderscript.Allocation: long getIDSafe()>();

        $i6 = r0.<android.renderscript.Allocation: int mSelectedLOD>;

        $r6 = r0.<android.renderscript.Allocation: android.renderscript.Type$CubemapFace mSelectedFace>;

        $i5 = $r6.<android.renderscript.Type$CubemapFace: int mID>;

        virtualinvoke $r5.<android.renderscript.RenderScript: void nAllocationData2D(long,int,int,int,int,android.graphics.Bitmap)>($l4, i0, i1, $i6, $i5, r9);

     label4:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;

     label5:
        $r8 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    void copy2DRangeFromUnchecked(int, int, int, int, java.lang.Object, android.renderscript.Element$DataType, int)
    {
        android.renderscript.Allocation r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16;
        android.renderscript.Element$DataType r1, $r9;
        android.renderscript.RenderScript $r2, $r5;
        android.renderscript.Type $r3, $r7, $r10;
        android.renderscript.Element $r4, $r8, $r11;
        long $l8;
        android.renderscript.Type$CubemapFace $r6;
        java.lang.Throwable $r12;
        java.lang.Object r13;
        boolean z0, z1;
        android.renderscript.RSIllegalArgumentException r14, r15;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r13 := @parameter4: java.lang.Object;

        r1 := @parameter5: android.renderscript.Element$DataType;

        i15 := @parameter6: int;

     label01:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copy2DRangeFromUnchecked");

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r2.<android.renderscript.RenderScript: void validate()>();

        specialinvoke r0.<android.renderscript.Allocation: void validate2DRange(int,int,int,int)>(i0, i1, i2, i3);

        $r3 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r4 = $r3.<android.renderscript.Type: android.renderscript.Element mElement>;

        $i5 = virtualinvoke $r4.<android.renderscript.Element: int getBytesSize()>();

        $i6 = $i5 * i2;

        i4 = $i6 * i3;

        $i7 = r1.<android.renderscript.Element$DataType: int mSize>;

        i16 = $i7 * i15;

        z0 = r0.<android.renderscript.Allocation: boolean mAutoPadding>;

     label02:
        if z0 == 0 goto label06;

     label03:
        $r10 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r11 = virtualinvoke $r10.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $i12 = virtualinvoke $r11.<android.renderscript.Element: int getVectorSize()>();

        if $i12 != 3 goto label06;

        $i13 = i4 / 4;

        $i14 = $i13 * 3;

        if $i14 > i16 goto label05;

     label04:
        z1 = 1;

        i16 = i4;

        goto label07;

     label05:
        r14 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke r14.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Array too small for allocation type.");

        throw r14;

     label06:
        if i4 > i16 goto label09;

        z1 = 0;

     label07:
        $r5 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $l8 = specialinvoke r0.<android.renderscript.Allocation: long getIDSafe()>();

        $i11 = r0.<android.renderscript.Allocation: int mSelectedLOD>;

        $r6 = r0.<android.renderscript.Allocation: android.renderscript.Type$CubemapFace mSelectedFace>;

        $i10 = $r6.<android.renderscript.Type$CubemapFace: int mID>;

        $r7 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r8 = $r7.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r9 = $r8.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $i9 = $r9.<android.renderscript.Element$DataType: int mSize>;

        virtualinvoke $r5.<android.renderscript.RenderScript: void nAllocationData2D(long,int,int,int,int,int,int,java.lang.Object,int,android.renderscript.Element$DataType,int,boolean)>($l8, i0, i1, $i11, $i10, i2, i3, r13, i16, r1, $i9, z1);

     label08:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;

     label09:
        r15 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke r15.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Array too small for allocation type.");

        throw r15;

     label10:
        $r12 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label09 to label10 with label10;
    }

    public void copy2DRangeTo(int, int, int, int, java.lang.Object)
    {
        android.renderscript.Allocation r0;
        int i0, i1, i2, i3, $i4;
        java.lang.Object r1;
        android.renderscript.Element$DataType $r2;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: java.lang.Object;

        $r2 = specialinvoke r0.<android.renderscript.Allocation: android.renderscript.Element$DataType validateObjectIsPrimitiveArray(java.lang.Object,boolean)>(r1, 1);

        $i4 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r1);

        virtualinvoke r0.<android.renderscript.Allocation: void copy2DRangeToUnchecked(int,int,int,int,java.lang.Object,android.renderscript.Element$DataType,int)>(i0, i1, i2, i3, r1, $r2, $i4);

        return;
    }

    public void copy2DRangeTo(int, int, int, int, byte[])
    {
        android.renderscript.Allocation r0;
        int i0, i1, i2, i3, $i4;
        byte[] r1;
        android.renderscript.Element$DataType $r2;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: byte[];

        specialinvoke r0.<android.renderscript.Allocation: void validateIsInt8()>();

        $r2 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType SIGNED_8>;

        $i4 = lengthof r1;

        virtualinvoke r0.<android.renderscript.Allocation: void copy2DRangeToUnchecked(int,int,int,int,java.lang.Object,android.renderscript.Element$DataType,int)>(i0, i1, i2, i3, r1, $r2, $i4);

        return;
    }

    public void copy2DRangeTo(int, int, int, int, float[])
    {
        android.renderscript.Allocation r0;
        int i0, i1, i2, i3, $i4;
        float[] r1;
        android.renderscript.Element$DataType $r2;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: float[];

        specialinvoke r0.<android.renderscript.Allocation: void validateIsFloat32()>();

        $r2 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType FLOAT_32>;

        $i4 = lengthof r1;

        virtualinvoke r0.<android.renderscript.Allocation: void copy2DRangeToUnchecked(int,int,int,int,java.lang.Object,android.renderscript.Element$DataType,int)>(i0, i1, i2, i3, r1, $r2, $i4);

        return;
    }

    public void copy2DRangeTo(int, int, int, int, int[])
    {
        android.renderscript.Allocation r0;
        int i0, i1, i2, i3, $i4;
        int[] r1;
        android.renderscript.Element$DataType $r2;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: int[];

        specialinvoke r0.<android.renderscript.Allocation: void validateIsInt32()>();

        $r2 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType SIGNED_32>;

        $i4 = lengthof r1;

        virtualinvoke r0.<android.renderscript.Allocation: void copy2DRangeToUnchecked(int,int,int,int,java.lang.Object,android.renderscript.Element$DataType,int)>(i0, i1, i2, i3, r1, $r2, $i4);

        return;
    }

    public void copy2DRangeTo(int, int, int, int, short[])
    {
        android.renderscript.Allocation r0;
        int i0, i1, i2, i3, $i4;
        short[] r1;
        android.renderscript.Element$DataType $r2;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: short[];

        specialinvoke r0.<android.renderscript.Allocation: void validateIsInt16OrFloat16()>();

        $r2 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType SIGNED_16>;

        $i4 = lengthof r1;

        virtualinvoke r0.<android.renderscript.Allocation: void copy2DRangeToUnchecked(int,int,int,int,java.lang.Object,android.renderscript.Element$DataType,int)>(i0, i1, i2, i3, r1, $r2, $i4);

        return;
    }

    void copy2DRangeToUnchecked(int, int, int, int, java.lang.Object, android.renderscript.Element$DataType, int)
    {
        android.renderscript.Allocation r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16;
        android.renderscript.Element$DataType r1, $r9;
        android.renderscript.RenderScript $r2, $r5;
        android.renderscript.Type $r3, $r7, $r10;
        android.renderscript.Element $r4, $r8, $r11;
        long $l8;
        android.renderscript.Type$CubemapFace $r6;
        java.lang.Throwable $r12;
        java.lang.Object r13;
        boolean z0, z1;
        android.renderscript.RSIllegalArgumentException r14, r15;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r13 := @parameter4: java.lang.Object;

        r1 := @parameter5: android.renderscript.Element$DataType;

        i15 := @parameter6: int;

     label01:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copy2DRangeToUnchecked");

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r2.<android.renderscript.RenderScript: void validate()>();

        specialinvoke r0.<android.renderscript.Allocation: void validate2DRange(int,int,int,int)>(i0, i1, i2, i3);

        $r3 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r4 = $r3.<android.renderscript.Type: android.renderscript.Element mElement>;

        $i5 = virtualinvoke $r4.<android.renderscript.Element: int getBytesSize()>();

        $i6 = $i5 * i2;

        i4 = $i6 * i3;

        $i7 = r1.<android.renderscript.Element$DataType: int mSize>;

        i16 = $i7 * i15;

        z0 = r0.<android.renderscript.Allocation: boolean mAutoPadding>;

     label02:
        if z0 == 0 goto label06;

     label03:
        $r10 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r11 = virtualinvoke $r10.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $i12 = virtualinvoke $r11.<android.renderscript.Element: int getVectorSize()>();

        if $i12 != 3 goto label06;

        $i13 = i4 / 4;

        $i14 = $i13 * 3;

        if $i14 > i16 goto label05;

     label04:
        z1 = 1;

        i16 = i4;

        goto label07;

     label05:
        r14 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke r14.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Array too small for allocation type.");

        throw r14;

     label06:
        if i4 > i16 goto label09;

        z1 = 0;

     label07:
        $r5 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $l8 = specialinvoke r0.<android.renderscript.Allocation: long getIDSafe()>();

        $i11 = r0.<android.renderscript.Allocation: int mSelectedLOD>;

        $r6 = r0.<android.renderscript.Allocation: android.renderscript.Type$CubemapFace mSelectedFace>;

        $i10 = $r6.<android.renderscript.Type$CubemapFace: int mID>;

        $r7 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r8 = $r7.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r9 = $r8.<android.renderscript.Element: android.renderscript.Element$DataType mType>;

        $i9 = $r9.<android.renderscript.Element$DataType: int mSize>;

        virtualinvoke $r5.<android.renderscript.RenderScript: void nAllocationRead2D(long,int,int,int,int,int,int,java.lang.Object,int,android.renderscript.Element$DataType,int,boolean)>($l8, i0, i1, $i11, $i10, i2, i3, r13, i16, r1, $i9, z1);

     label08:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;

     label09:
        r15 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke r15.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Array too small for allocation type.");

        throw r15;

     label10:
        $r12 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label09 to label10 with label10;
    }

    public void copy3DRangeFrom(int, int, int, int, int, int, android.renderscript.Allocation, int, int, int)
    {
        android.renderscript.Allocation r0, r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, $i10, $i12;
        android.renderscript.RenderScript $r2, $r3, $r4;
        long $l9, $l11;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        r1 := @parameter6: android.renderscript.Allocation;

        i6 := @parameter7: int;

        i7 := @parameter8: int;

        i8 := @parameter9: int;

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r2.<android.renderscript.RenderScript: void validate()>();

        specialinvoke r0.<android.renderscript.Allocation: void validate3DRange(int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5);

        $r3 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $l9 = specialinvoke r0.<android.renderscript.Allocation: long getIDSafe()>();

        $i10 = r0.<android.renderscript.Allocation: int mSelectedLOD>;

        $r4 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $l11 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r4);

        $i12 = r1.<android.renderscript.Allocation: int mSelectedLOD>;

        virtualinvoke $r3.<android.renderscript.RenderScript: void nAllocationData3D(long,int,int,int,int,int,int,int,long,int,int,int,int)>($l9, i0, i1, i2, $i10, i3, i4, i5, $l11, i6, i7, i8, $i12);

        return;
    }

    public void copy3DRangeFrom(int, int, int, int, int, int, java.lang.Object)
    {
        android.renderscript.Allocation r0;
        int i0, i1, i2, i3, i4, i5, $i6;
        android.renderscript.Element$DataType $r1;
        java.lang.Throwable $r2, $r3, r5;
        java.lang.Object r4;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        r4 := @parameter6: java.lang.Object;

     label1:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copy3DRangeFrom");

     label2:
        $r1 = specialinvoke r0.<android.renderscript.Allocation: android.renderscript.Element$DataType validateObjectIsPrimitiveArray(java.lang.Object,boolean)>(r4, 1);

        $i6 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r4);

        specialinvoke r0.<android.renderscript.Allocation: void copy3DRangeFromUnchecked(int,int,int,int,int,int,java.lang.Object,android.renderscript.Element$DataType,int)>(i0, i1, i2, i3, i4, i5, r4, $r1, $i6);

     label3:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;

     label4:
        $r2 := @caughtexception;

        r5 = $r2;

        goto label6;

     label5:
        $r3 := @caughtexception;

        r5 = $r3;

     label6:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        throw r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public void copy3DRangeTo(int, int, int, int, int, int, java.lang.Object)
    {
        android.renderscript.Allocation r0;
        int i0, i1, i2, i3, i4, i5, $i6;
        java.lang.Object r1;
        android.renderscript.Element$DataType $r2;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        r1 := @parameter6: java.lang.Object;

        $r2 = specialinvoke r0.<android.renderscript.Allocation: android.renderscript.Element$DataType validateObjectIsPrimitiveArray(java.lang.Object,boolean)>(r1, 1);

        $i6 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r1);

        specialinvoke r0.<android.renderscript.Allocation: void copy3DRangeToUnchecked(int,int,int,int,int,int,java.lang.Object,android.renderscript.Element$DataType,int)>(i0, i1, i2, i3, i4, i5, r1, $r2, $i6);

        return;
    }

    public void copyFrom(android.graphics.Bitmap)
    {
        android.renderscript.Allocation r0;
        android.graphics.Bitmap r1, r9;
        android.graphics.Canvas r2;
        android.renderscript.RenderScript $r3, $r5, $r6;
        android.graphics.Bitmap$Config $r4, $r7;
        long $l0;
        int $i1, $i2;
        java.lang.Throwable $r8;

        r0 := @this: android.renderscript.Allocation;

        r9 := @parameter0: android.graphics.Bitmap;

     label1:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copyFrom");

        $r3 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r3.<android.renderscript.RenderScript: void validate()>();

        $r4 = virtualinvoke r9.<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>();

        if $r4 != null goto label3;

        $i1 = virtualinvoke r9.<android.graphics.Bitmap: int getWidth()>();

        $i2 = virtualinvoke r9.<android.graphics.Bitmap: int getHeight()>();

        $r7 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        r1 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>($i1, $i2, $r7);

        r2 = new android.graphics.Canvas;

        specialinvoke r2.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>(r1);

        virtualinvoke r2.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>(r9, 0.0F, 0.0F, null);

        virtualinvoke r0.<android.renderscript.Allocation: void copyFrom(android.graphics.Bitmap)>(r1);

     label2:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;

     label3:
        specialinvoke r0.<android.renderscript.Allocation: void validateBitmapSize(android.graphics.Bitmap)>(r9);

        specialinvoke r0.<android.renderscript.Allocation: void validateBitmapFormat(android.graphics.Bitmap)>(r9);

        $r6 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $r5 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $l0 = virtualinvoke r0.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r5);

        virtualinvoke $r6.<android.renderscript.RenderScript: void nAllocationCopyFromBitmap(long,android.graphics.Bitmap)>($l0, r9);

     label4:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;

     label5:
        $r8 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void copyFrom(android.renderscript.Allocation)
    {
        android.renderscript.Allocation r0, r5;
        android.renderscript.RenderScript $r1;
        android.renderscript.Type $r2, $r3;
        boolean $z0;
        int $i0, $i1;
        java.lang.Throwable $r4;
        android.renderscript.RSIllegalArgumentException r6;

        r0 := @this: android.renderscript.Allocation;

        r5 := @parameter0: android.renderscript.Allocation;

     label1:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copyFrom");

        $r1 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r1.<android.renderscript.RenderScript: void validate()>();

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r3 = virtualinvoke r5.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $z0 = virtualinvoke $r2.<android.renderscript.Type: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label3;

        $i1 = r0.<android.renderscript.Allocation: int mCurrentDimX>;

        $i0 = r0.<android.renderscript.Allocation: int mCurrentDimY>;

        virtualinvoke r0.<android.renderscript.Allocation: void copy2DRangeFrom(int,int,int,int,android.renderscript.Allocation,int,int)>(0, 0, $i1, $i0, r5, 0, 0);

     label2:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;

     label3:
        r6 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke r6.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Types of allocations must match.");

        throw r6;

     label4:
        $r4 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
    }

    public void copyFrom(java.lang.Object)
    {
        android.renderscript.Allocation r0;
        android.renderscript.Element$DataType $r1;
        int $i0;
        java.lang.Throwable $r2;
        java.lang.Object r3;

        r0 := @this: android.renderscript.Allocation;

        r3 := @parameter0: java.lang.Object;

     label1:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copyFrom");

        $r1 = specialinvoke r0.<android.renderscript.Allocation: android.renderscript.Element$DataType validateObjectIsPrimitiveArray(java.lang.Object,boolean)>(r3, 1);

        $i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r3);

        specialinvoke r0.<android.renderscript.Allocation: void copyFromUnchecked(java.lang.Object,android.renderscript.Element$DataType,int)>(r3, $r1, $i0);

     label2:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void copyFrom(byte[])
    {
        android.renderscript.Allocation r0;
        byte[] r1;
        int $i0;
        android.renderscript.Element$DataType $r2;

        r0 := @this: android.renderscript.Allocation;

        r1 := @parameter0: byte[];

        specialinvoke r0.<android.renderscript.Allocation: void validateIsInt8()>();

        $r2 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType SIGNED_8>;

        $i0 = lengthof r1;

        specialinvoke r0.<android.renderscript.Allocation: void copyFromUnchecked(java.lang.Object,android.renderscript.Element$DataType,int)>(r1, $r2, $i0);

        return;
    }

    public void copyFrom(float[])
    {
        android.renderscript.Allocation r0;
        float[] r1;
        int $i0;
        android.renderscript.Element$DataType $r2;

        r0 := @this: android.renderscript.Allocation;

        r1 := @parameter0: float[];

        specialinvoke r0.<android.renderscript.Allocation: void validateIsFloat32()>();

        $r2 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType FLOAT_32>;

        $i0 = lengthof r1;

        specialinvoke r0.<android.renderscript.Allocation: void copyFromUnchecked(java.lang.Object,android.renderscript.Element$DataType,int)>(r1, $r2, $i0);

        return;
    }

    public void copyFrom(int[])
    {
        android.renderscript.Allocation r0;
        int[] r1;
        int $i0;
        android.renderscript.Element$DataType $r2;

        r0 := @this: android.renderscript.Allocation;

        r1 := @parameter0: int[];

        specialinvoke r0.<android.renderscript.Allocation: void validateIsInt32()>();

        $r2 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType SIGNED_32>;

        $i0 = lengthof r1;

        specialinvoke r0.<android.renderscript.Allocation: void copyFromUnchecked(java.lang.Object,android.renderscript.Element$DataType,int)>(r1, $r2, $i0);

        return;
    }

    public void copyFrom(android.renderscript.BaseObj[])
    {
        android.renderscript.Allocation r0;
        android.renderscript.RSIllegalArgumentException r1;
        android.renderscript.RenderScript $r2, $r8, $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i10, $i11, $i12, $i13, $i14, i16, i17;
        java.lang.String $r7;
        android.renderscript.BaseObj $r9, $r11;
        long $l8, $l15;
        java.lang.Throwable $r12;
        android.renderscript.BaseObj[] r13;
        long[] r14;
        int[] r15;
        java.lang.StringBuilder r16;

        r0 := @this: android.renderscript.Allocation;

        r13 := @parameter0: android.renderscript.BaseObj[];

     label01:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copyFrom");

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r2.<android.renderscript.RenderScript: void validate()>();

        specialinvoke r0.<android.renderscript.Allocation: void validateIsObject()>();

        $i1 = lengthof r13;

        $i0 = r0.<android.renderscript.Allocation: int mCurrentCount>;

        if $i1 != $i0 goto label13;

        $i4 = <android.renderscript.RenderScript: int sPointerSize>;

        if $i4 != 8 goto label07;

        $i10 = lengthof r13;

        $i11 = $i10 * 4;

        r14 = newarray (long)[$i11];

     label02:
        i16 = 0;

     label03:
        $i12 = lengthof r13;

        if i16 >= $i12 goto label05;

        $i14 = i16 * 4;

        $r11 = r13[i16];

        $r10 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $l15 = virtualinvoke $r11.<android.renderscript.BaseObj: long getID(android.renderscript.RenderScript)>($r10);

        r14[$i14] = $l15;

     label04:
        i16 = i16 + 1;

        goto label03;

     label05:
        $i13 = r0.<android.renderscript.Allocation: int mCurrentCount>;

        virtualinvoke r0.<android.renderscript.Allocation: void copy1DRangeFromUnchecked(int,int,java.lang.Object)>(0, $i13, r14);

     label06:
        goto label12;

     label07:
        $i5 = lengthof r13;

        r15 = newarray (int)[$i5];

     label08:
        i17 = 0;

     label09:
        $i6 = lengthof r13;

        if i17 >= $i6 goto label11;

        $r9 = r13[i17];

        $r8 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $l8 = virtualinvoke $r9.<android.renderscript.BaseObj: long getID(android.renderscript.RenderScript)>($r8);

        $i9 = (int) $l8;

        r15[i17] = $i9;

     label10:
        i17 = i17 + 1;

        goto label09;

     label11:
        $i7 = r0.<android.renderscript.Allocation: int mCurrentCount>;

        virtualinvoke r0.<android.renderscript.Allocation: void copy1DRangeFromUnchecked(int,int,int[])>(0, $i7, r15);

     label12:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;

     label13:
        r1 = new android.renderscript.RSIllegalArgumentException;

        r16 = new java.lang.StringBuilder;

        specialinvoke r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Array size mismatch, allocation sizeX = ");

        $i2 = r0.<android.renderscript.Allocation: int mCurrentCount>;

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", array length = ");

        $i3 = lengthof r13;

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r7 = virtualinvoke r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r1.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw r1;

     label14:
        $r12 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label13 to label14 with label14;
    }

    public void copyFrom(short[])
    {
        android.renderscript.Allocation r0;
        short[] r1;
        int $i0;
        android.renderscript.Element$DataType $r2;

        r0 := @this: android.renderscript.Allocation;

        r1 := @parameter0: short[];

        specialinvoke r0.<android.renderscript.Allocation: void validateIsInt16OrFloat16()>();

        $r2 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType SIGNED_16>;

        $i0 = lengthof r1;

        specialinvoke r0.<android.renderscript.Allocation: void copyFromUnchecked(java.lang.Object,android.renderscript.Element$DataType,int)>(r1, $r2, $i0);

        return;
    }

    public void copyFromUnchecked(java.lang.Object)
    {
        android.renderscript.Allocation r0;
        android.renderscript.Element$DataType $r1;
        int $i0;
        java.lang.Throwable $r2;
        java.lang.Object r3;

        r0 := @this: android.renderscript.Allocation;

        r3 := @parameter0: java.lang.Object;

     label1:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copyFromUnchecked");

        $r1 = specialinvoke r0.<android.renderscript.Allocation: android.renderscript.Element$DataType validateObjectIsPrimitiveArray(java.lang.Object,boolean)>(r3, 0);

        $i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r3);

        specialinvoke r0.<android.renderscript.Allocation: void copyFromUnchecked(java.lang.Object,android.renderscript.Element$DataType,int)>(r3, $r1, $i0);

     label2:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void copyFromUnchecked(byte[])
    {
        android.renderscript.Allocation r0;
        byte[] r1;
        int $i0;
        android.renderscript.Element$DataType $r2;

        r0 := @this: android.renderscript.Allocation;

        r1 := @parameter0: byte[];

        $r2 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType SIGNED_8>;

        $i0 = lengthof r1;

        specialinvoke r0.<android.renderscript.Allocation: void copyFromUnchecked(java.lang.Object,android.renderscript.Element$DataType,int)>(r1, $r2, $i0);

        return;
    }

    public void copyFromUnchecked(float[])
    {
        android.renderscript.Allocation r0;
        float[] r1;
        int $i0;
        android.renderscript.Element$DataType $r2;

        r0 := @this: android.renderscript.Allocation;

        r1 := @parameter0: float[];

        $r2 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType FLOAT_32>;

        $i0 = lengthof r1;

        specialinvoke r0.<android.renderscript.Allocation: void copyFromUnchecked(java.lang.Object,android.renderscript.Element$DataType,int)>(r1, $r2, $i0);

        return;
    }

    public void copyFromUnchecked(int[])
    {
        android.renderscript.Allocation r0;
        int[] r1;
        int $i0;
        android.renderscript.Element$DataType $r2;

        r0 := @this: android.renderscript.Allocation;

        r1 := @parameter0: int[];

        $r2 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType SIGNED_32>;

        $i0 = lengthof r1;

        specialinvoke r0.<android.renderscript.Allocation: void copyFromUnchecked(java.lang.Object,android.renderscript.Element$DataType,int)>(r1, $r2, $i0);

        return;
    }

    public void copyFromUnchecked(short[])
    {
        android.renderscript.Allocation r0;
        short[] r1;
        int $i0;
        android.renderscript.Element$DataType $r2;

        r0 := @this: android.renderscript.Allocation;

        r1 := @parameter0: short[];

        $r2 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType SIGNED_16>;

        $i0 = lengthof r1;

        specialinvoke r0.<android.renderscript.Allocation: void copyFromUnchecked(java.lang.Object,android.renderscript.Element$DataType,int)>(r1, $r2, $i0);

        return;
    }

    public void copyTo(android.graphics.Bitmap)
    {
        android.renderscript.Allocation r0;
        android.renderscript.RenderScript $r1, $r2, $r3;
        long $l0;
        java.lang.Throwable $r4;
        android.graphics.Bitmap r5;

        r0 := @this: android.renderscript.Allocation;

        r5 := @parameter0: android.graphics.Bitmap;

     label1:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "copyTo");

        $r1 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r1.<android.renderscript.RenderScript: void validate()>();

        specialinvoke r0.<android.renderscript.Allocation: void validateBitmapFormat(android.graphics.Bitmap)>(r5);

        specialinvoke r0.<android.renderscript.Allocation: void validateBitmapSize(android.graphics.Bitmap)>(r5);

        $r3 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $l0 = virtualinvoke r0.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r2);

        virtualinvoke $r3.<android.renderscript.RenderScript: void nAllocationCopyToBitmap(long,android.graphics.Bitmap)>($l0, r5);

     label2:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void copyTo(java.lang.Object)
    {
        android.renderscript.Allocation r0;
        java.lang.Object r1;
        android.renderscript.Element$DataType $r2;
        int $i0;

        r0 := @this: android.renderscript.Allocation;

        r1 := @parameter0: java.lang.Object;

        $r2 = specialinvoke r0.<android.renderscript.Allocation: android.renderscript.Element$DataType validateObjectIsPrimitiveArray(java.lang.Object,boolean)>(r1, 1);

        $i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r1);

        specialinvoke r0.<android.renderscript.Allocation: void copyTo(java.lang.Object,android.renderscript.Element$DataType,int)>(r1, $r2, $i0);

        return;
    }

    public void copyTo(byte[])
    {
        android.renderscript.Allocation r0;
        byte[] r1;
        int $i0;
        android.renderscript.Element$DataType $r2;

        r0 := @this: android.renderscript.Allocation;

        r1 := @parameter0: byte[];

        specialinvoke r0.<android.renderscript.Allocation: void validateIsInt8()>();

        $r2 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType SIGNED_8>;

        $i0 = lengthof r1;

        specialinvoke r0.<android.renderscript.Allocation: void copyTo(java.lang.Object,android.renderscript.Element$DataType,int)>(r1, $r2, $i0);

        return;
    }

    public void copyTo(float[])
    {
        android.renderscript.Allocation r0;
        float[] r1;
        int $i0;
        android.renderscript.Element$DataType $r2;

        r0 := @this: android.renderscript.Allocation;

        r1 := @parameter0: float[];

        specialinvoke r0.<android.renderscript.Allocation: void validateIsFloat32()>();

        $r2 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType FLOAT_32>;

        $i0 = lengthof r1;

        specialinvoke r0.<android.renderscript.Allocation: void copyTo(java.lang.Object,android.renderscript.Element$DataType,int)>(r1, $r2, $i0);

        return;
    }

    public void copyTo(int[])
    {
        android.renderscript.Allocation r0;
        int[] r1;
        int $i0;
        android.renderscript.Element$DataType $r2;

        r0 := @this: android.renderscript.Allocation;

        r1 := @parameter0: int[];

        specialinvoke r0.<android.renderscript.Allocation: void validateIsInt32()>();

        $r2 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType SIGNED_32>;

        $i0 = lengthof r1;

        specialinvoke r0.<android.renderscript.Allocation: void copyTo(java.lang.Object,android.renderscript.Element$DataType,int)>(r1, $r2, $i0);

        return;
    }

    public void copyTo(short[])
    {
        android.renderscript.Allocation r0;
        short[] r1;
        int $i0;
        android.renderscript.Element$DataType $r2;

        r0 := @this: android.renderscript.Allocation;

        r1 := @parameter0: short[];

        specialinvoke r0.<android.renderscript.Allocation: void validateIsInt16OrFloat16()>();

        $r2 = <android.renderscript.Element$DataType: android.renderscript.Element$DataType SIGNED_16>;

        $i0 = lengthof r1;

        specialinvoke r0.<android.renderscript.Allocation: void copyTo(java.lang.Object,android.renderscript.Element$DataType,int)>(r1, $r2, $i0);

        return;
    }

    public void copyToFieldPacker(int, int, int, int, android.renderscript.FieldPacker)
    {
        android.renderscript.Allocation r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i10;
        android.renderscript.RenderScript $r1, $r29;
        android.renderscript.Type $r2, $r14, $r18;
        android.renderscript.Element $r3, $r15, $r17, $r19;
        android.renderscript.Element[] $r4, $r16;
        java.lang.StringBuilder $r5, $r21;
        android.renderscript.RSIllegalArgumentException $r9, $r11, $r12, $r13, $r27;
        java.lang.String $r10, $r28;
        int[] $r20;
        long $l9;
        android.renderscript.FieldPacker r30;
        byte[] r31;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r30 := @parameter4: android.renderscript.FieldPacker;

        $r1 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r1.<android.renderscript.RenderScript: void validate()>();

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r3 = $r2.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r4 = $r3.<android.renderscript.Element: android.renderscript.Element[] mElements>;

        $i6 = lengthof $r4;

        if i3 >= $i6 goto label5;

        if i0 < 0 goto label4;

        if i1 < 0 goto label3;

        if i2 < 0 goto label2;

        r31 = virtualinvoke r30.<android.renderscript.FieldPacker: byte[] getData()>();

        i4 = lengthof r31;

        $r14 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r15 = $r14.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r16 = $r15.<android.renderscript.Element: android.renderscript.Element[] mElements>;

        $r17 = $r16[i3];

        $i7 = virtualinvoke $r17.<android.renderscript.Element: int getBytesSize()>();

        $r18 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r19 = $r18.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r20 = $r19.<android.renderscript.Element: int[] mArraySizes>;

        $i8 = $r20[i3];

        i5 = $i7 * $i8;

        if i4 != i5 goto label1;

        $r29 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $l9 = specialinvoke r0.<android.renderscript.Allocation: long getIDSafe()>();

        $i10 = r0.<android.renderscript.Allocation: int mSelectedLOD>;

        virtualinvoke $r29.<android.renderscript.RenderScript: void nAllocationElementRead(long,int,int,int,int,int,byte[],int)>($l9, i0, i1, i2, $i10, i3, r31, i4);

        return;

     label1:
        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field packer sizelength ");

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not match component size ");

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r27 = new android.renderscript.RSIllegalArgumentException;

        $r28 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>($r28);

        throw $r27;

     label2:
        $r13 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r13.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Offset z must be >= 0.");

        throw $r13;

     label3:
        $r12 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r12.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Offset y must be >= 0.");

        throw $r12;

     label4:
        $r11 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r11.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Offset x must be >= 0.");

        throw $r11;

     label5:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Component_number ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" out of range.");

        $r9 = new android.renderscript.RSIllegalArgumentException;

        $r10 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r9;
    }

    public void destroy()
    {
        android.renderscript.Allocation r0;
        android.renderscript.Type r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.renderscript.Allocation;

        $i0 = r0.<android.renderscript.Allocation: int mUsage>;

        $i1 = $i0 & 64;

        if $i1 == 0 goto label1;

        virtualinvoke r0.<android.renderscript.Allocation: void setSurface(android.view.Surface)>(null);

     label1:
        r1 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        if r1 == null goto label2;

        $z0 = r0.<android.renderscript.Allocation: boolean mOwningType>;

        if $z0 == 0 goto label2;

        virtualinvoke r1.<android.renderscript.Type: void destroy()>();

     label2:
        specialinvoke r0.<android.renderscript.BaseObj: void destroy()>();

        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.renderscript.Allocation r0;
        java.lang.Object[] $r1;
        int $i0;
        java.lang.reflect.Method $r2;
        java.lang.Object $r3;
        java.lang.Integer $r4;

        r0 := @this: android.renderscript.Allocation;

        $r2 = <android.renderscript.RenderScript: java.lang.reflect.Method registerNativeFree>;

        $r3 = <android.renderscript.RenderScript: java.lang.Object sRuntime>;

        $r1 = newarray (java.lang.Object)[1];

        $i0 = r0.<android.renderscript.Allocation: int mSize>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[0] = $r4;

        virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r3, $r1);

        specialinvoke r0.<android.renderscript.BaseObj: void finalize()>();

        return;
    }

    public void generateMipmaps()
    {
        android.renderscript.Allocation r0;
        android.renderscript.RenderScript $r1, $r2;
        long $l0;

        r0 := @this: android.renderscript.Allocation;

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $r1 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $l0 = virtualinvoke r0.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r1);

        virtualinvoke $r2.<android.renderscript.RenderScript: void nAllocationGenerateMipmaps(long)>($l0);

        return;
    }

    public java.nio.ByteBuffer getByteBuffer()
    {
        android.renderscript.Allocation r0;
        int i0, i1, $i2, $i3, $i4, $i6, $i7, $i8, $i10, $i11, $i12, $i13;
        long[] r1;
        android.renderscript.Type $r2, $r4, $r5, $r6, $r8, $r9, $r13, $r14;
        boolean $z0;
        android.renderscript.RSInvalidStateException $r3, $r19;
        java.nio.ByteBuffer $r7, $r15, $r16, $r17, $r18;
        android.renderscript.Element $r10;
        android.renderscript.RenderScript $r11, $r12;
        long $l5, $l9;

        r0 := @this: android.renderscript.Allocation;

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $z0 = virtualinvoke $r2.<android.renderscript.Type: boolean hasFaces()>();

        if $z0 != 0 goto label5;

        $r4 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $i2 = virtualinvoke $r4.<android.renderscript.Type: int getYuv()>();

        if $i2 == 17 goto label4;

        $r5 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $i3 = virtualinvoke $r5.<android.renderscript.Type: int getYuv()>();

        if $i3 == 842094169 goto label4;

        $r6 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $i4 = virtualinvoke $r6.<android.renderscript.Type: int getYuv()>();

        if $i4 == 35 goto label4;

        $r7 = r0.<android.renderscript.Allocation: java.nio.ByteBuffer mByteBuffer>;

        if $r7 == null goto label1;

        $i10 = r0.<android.renderscript.Allocation: int mUsage>;

        $i11 = $i10 & 32;

        if $i11 == 0 goto label2;

     label1:
        $r8 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        i0 = virtualinvoke $r8.<android.renderscript.Type: int getX()>();

        $r9 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r10 = virtualinvoke $r9.<android.renderscript.Type: android.renderscript.Element getElement()>();

        i1 = virtualinvoke $r10.<android.renderscript.Element: int getBytesSize()>();

        r1 = newarray (long)[1];

        $r12 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $r11 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r0.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r11);

        $i6 = i0 * i1;

        $r13 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $i7 = virtualinvoke $r13.<android.renderscript.Type: int getY()>();

        $r14 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $i8 = virtualinvoke $r14.<android.renderscript.Type: int getZ()>();

        $r15 = virtualinvoke $r12.<android.renderscript.RenderScript: java.nio.ByteBuffer nAllocationGetByteBuffer(long,long[],int,int,int)>($l5, r1, $i6, $i7, $i8);

        r0.<android.renderscript.Allocation: java.nio.ByteBuffer mByteBuffer> = $r15;

        $l9 = r1[0];

        r0.<android.renderscript.Allocation: long mByteBufferStride> = $l9;

     label2:
        $i12 = r0.<android.renderscript.Allocation: int mUsage>;

        $i13 = $i12 & 32;

        if $i13 == 0 goto label3;

        $r17 = r0.<android.renderscript.Allocation: java.nio.ByteBuffer mByteBuffer>;

        $r18 = virtualinvoke $r17.<java.nio.ByteBuffer: java.nio.ByteBuffer asReadOnlyBuffer()>();

        return $r18;

     label3:
        $r16 = r0.<android.renderscript.Allocation: java.nio.ByteBuffer mByteBuffer>;

        return $r16;

     label4:
        $r19 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r19.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("YUV format is not supported for getByteBuffer().");

        throw $r19;

     label5:
        $r3 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r3.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Cubemap is not supported for getByteBuffer().");

        throw $r3;
    }

    public int getBytesSize()
    {
        android.renderscript.Allocation r0;
        android.renderscript.Type $r1, $r2, $r3, $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        android.renderscript.Element $r4, $r7;
        double $d0, $d1, $d2;

        r0 := @this: android.renderscript.Allocation;

        $r1 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $i0 = $r1.<android.renderscript.Type: int mDimYuv>;

        if $i0 == 0 goto label1;

        $r5 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $i4 = virtualinvoke $r5.<android.renderscript.Type: int getCount()>();

        $r6 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r7 = virtualinvoke $r6.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $i5 = virtualinvoke $r7.<android.renderscript.Element: int getBytesSize()>();

        $i6 = $i4 * $i5;

        $d0 = (double) $i6;

        $d1 = $d0 * 1.5;

        $d2 = staticinvoke <java.lang.Math: double ceil(double)>($d1);

        $i7 = (int) $d2;

        return $i7;

     label1:
        $r2 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $i1 = virtualinvoke $r2.<android.renderscript.Type: int getCount()>();

        $r3 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r4 = virtualinvoke $r3.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $i2 = virtualinvoke $r4.<android.renderscript.Element: int getBytesSize()>();

        $i3 = $i1 * $i2;

        return $i3;
    }

    public android.renderscript.Element getElement()
    {
        android.renderscript.Allocation r0;
        android.renderscript.Type $r1;
        android.renderscript.Element $r2;

        r0 := @this: android.renderscript.Allocation;

        $r1 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r2 = virtualinvoke $r1.<android.renderscript.Type: android.renderscript.Element getElement()>();

        return $r2;
    }

    public android.renderscript.Allocation$MipmapControl getMipmap()
    {
        android.renderscript.Allocation r0;
        android.renderscript.Allocation$MipmapControl $r1;

        r0 := @this: android.renderscript.Allocation;

        $r1 = r0.<android.renderscript.Allocation: android.renderscript.Allocation$MipmapControl mMipmapControl>;

        return $r1;
    }

    public long getStride()
    {
        android.renderscript.Allocation r0;
        long $l0, $l2;
        byte $b1;

        r0 := @this: android.renderscript.Allocation;

        $l0 = r0.<android.renderscript.Allocation: long mByteBufferStride>;

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label1;

        virtualinvoke r0.<android.renderscript.Allocation: java.nio.ByteBuffer getByteBuffer()>();

     label1:
        $l2 = r0.<android.renderscript.Allocation: long mByteBufferStride>;

        return $l2;
    }

    public android.view.Surface getSurface()
    {
        android.renderscript.Allocation r0;
        int $i0, $i1;
        android.renderscript.RSInvalidStateException $r1;
        android.view.Surface $r2, $r3, $r6;
        android.renderscript.RenderScript $r4, $r5;
        long $l2;

        r0 := @this: android.renderscript.Allocation;

        $i0 = r0.<android.renderscript.Allocation: int mUsage>;

        $i1 = $i0 & 32;

        if $i1 == 0 goto label2;

        $r2 = r0.<android.renderscript.Allocation: android.view.Surface mGetSurfaceSurface>;

        if $r2 != null goto label1;

        $r5 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $r4 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $l2 = virtualinvoke r0.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r4);

        $r6 = virtualinvoke $r5.<android.renderscript.RenderScript: android.view.Surface nAllocationGetSurface(long)>($l2);

        r0.<android.renderscript.Allocation: android.view.Surface mGetSurfaceSurface> = $r6;

     label1:
        $r3 = r0.<android.renderscript.Allocation: android.view.Surface mGetSurfaceSurface>;

        return $r3;

     label2:
        $r1 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r1.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Allocation is not a surface texture.");

        throw $r1;
    }

    public long getTimeStamp()
    {
        android.renderscript.Allocation r0;
        long $l0;

        r0 := @this: android.renderscript.Allocation;

        $l0 = r0.<android.renderscript.Allocation: long mTimeStamp>;

        return $l0;
    }

    public android.renderscript.Type getType()
    {
        android.renderscript.Allocation r0;
        android.renderscript.Type $r1;

        r0 := @this: android.renderscript.Allocation;

        $r1 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        return $r1;
    }

    public int getUsage()
    {
        android.renderscript.Allocation r0;
        int $i0;

        r0 := @this: android.renderscript.Allocation;

        $i0 = r0.<android.renderscript.Allocation: int mUsage>;

        return $i0;
    }

    public void ioReceive()
    {
        android.renderscript.Allocation r0;
        int $i0, $i1;
        android.renderscript.RenderScript $r1, $r2, $r3;
        long $l2, $l3;
        java.lang.Throwable $r4;
        android.renderscript.RSIllegalArgumentException r5;

        r0 := @this: android.renderscript.Allocation;

     label1:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "ioReceive");

        $i0 = r0.<android.renderscript.Allocation: int mUsage>;

        $i1 = $i0 & 32;

        if $i1 == 0 goto label3;

        $r1 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r1.<android.renderscript.RenderScript: void validate()>();

        $r3 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $l2 = virtualinvoke r0.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r2);

        $l3 = virtualinvoke $r3.<android.renderscript.RenderScript: long nAllocationIoReceive(long)>($l2);

        r0.<android.renderscript.Allocation: long mTimeStamp> = $l3;

     label2:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;

     label3:
        r5 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke r5.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Can only receive if IO_INPUT usage specified.");

        throw r5;

     label4:
        $r4 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
    }

    public void ioSend()
    {
        android.renderscript.Allocation r0;
        int $i0, $i1;
        android.renderscript.RenderScript $r1, $r2, $r3;
        long $l2;
        java.lang.Throwable $r4;
        android.renderscript.RSIllegalArgumentException r5;

        r0 := @this: android.renderscript.Allocation;

     label1:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "ioSend");

        $i0 = r0.<android.renderscript.Allocation: int mUsage>;

        $i1 = $i0 & 64;

        if $i1 == 0 goto label3;

        $r1 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r1.<android.renderscript.RenderScript: void validate()>();

        $r3 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $l2 = virtualinvoke r0.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r2);

        virtualinvoke $r3.<android.renderscript.RenderScript: void nAllocationIoSend(long)>($l2);

     label2:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;

     label3:
        r5 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke r5.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Can only send buffer if IO_OUTPUT usage specified.");

        throw r5;

     label4:
        $r4 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
    }

    public void resize(int)
    {
        android.renderscript.Allocation r0;
        int i0, $i2, $i3, $i4;
        long l1, $l5, $l6;
        android.renderscript.RenderScript $r1, $r8, $r9, $r10, $r11, $r12, $r14;
        android.content.Context $r2;
        android.content.pm.ApplicationInfo $r3;
        android.renderscript.Type $r4, $r5, $r6, $r7, $r13, $r15, r17;
        boolean $z0, $z1;
        java.lang.Throwable $r16;
        android.renderscript.RSInvalidStateException r18;
        android.renderscript.RSRuntimeException r19;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        $r1 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $r2 = virtualinvoke $r1.<android.renderscript.RenderScript: android.content.Context getApplicationContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i2 = $r3.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i2 >= 21 goto label4;

        $r4 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $i3 = virtualinvoke $r4.<android.renderscript.Type: int getY()>();

        if $i3 > 0 goto label3;

        $r5 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $i4 = virtualinvoke $r5.<android.renderscript.Type: int getZ()>();

        if $i4 > 0 goto label3;

        $r6 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $z0 = virtualinvoke $r6.<android.renderscript.Type: boolean hasFaces()>();

        if $z0 != 0 goto label3;

        $r7 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $z1 = virtualinvoke $r7.<android.renderscript.Type: boolean hasMipmaps()>();

        if $z1 != 0 goto label3;

        $r9 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $r8 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r0.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r8);

        virtualinvoke $r9.<android.renderscript.RenderScript: void nAllocationResize1D(long,int)>($l5, i0);

        $r10 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r10.<android.renderscript.RenderScript: void finish()>();

        $r12 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $r11 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r0.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r11);

        l1 = virtualinvoke $r12.<android.renderscript.RenderScript: long nAllocationGetType(long)>($l6);

        $r13 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        virtualinvoke $r13.<android.renderscript.Type: void setID(long)>(0L);

        r17 = new android.renderscript.Type;

        $r14 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        specialinvoke r17.<android.renderscript.Type: void <init>(long,android.renderscript.RenderScript)>(l1, $r14);

        r0.<android.renderscript.Allocation: android.renderscript.Type mType> = r17;

        virtualinvoke r17.<android.renderscript.Type: void updateFromNative()>();

        $r15 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        specialinvoke r0.<android.renderscript.Allocation: void updateCacheInfo(android.renderscript.Type)>($r15);

     label2:
        exitmonitor r0;

        return;

     label3:
        r18 = new android.renderscript.RSInvalidStateException;

        specialinvoke r18.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Resize only support for 1D allocations at this time.");

        throw r18;

     label4:
        r19 = new android.renderscript.RSRuntimeException;

        specialinvoke r19.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Resize is not allowed in API 21+.");

        throw r19;

     label5:
        $r16 := @caughtexception;

        exitmonitor r0;

        throw $r16;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label4 to label5 with label5;
    }

    public void setAutoPadding(boolean)
    {
        android.renderscript.Allocation r0;
        boolean z0;

        r0 := @this: android.renderscript.Allocation;

        z0 := @parameter0: boolean;

        r0.<android.renderscript.Allocation: boolean mAutoPadding> = z0;

        return;
    }

    public void setFromFieldPacker(int, int, int, int, android.renderscript.FieldPacker)
    {
        android.renderscript.Allocation r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i10;
        byte[] r1;
        android.renderscript.RenderScript $r2, $r30;
        android.renderscript.Type $r3, $r15, $r19;
        android.renderscript.Element $r4, $r16, $r18, $r20;
        android.renderscript.Element[] $r5, $r17;
        java.lang.StringBuilder $r6, $r22;
        android.renderscript.RSIllegalArgumentException $r10, $r12, $r13, $r14, $r28;
        java.lang.String $r11, $r29;
        int[] $r21;
        long $l9;
        android.renderscript.FieldPacker r31;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r31 := @parameter4: android.renderscript.FieldPacker;

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r2.<android.renderscript.RenderScript: void validate()>();

        $r3 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r4 = $r3.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r5 = $r4.<android.renderscript.Element: android.renderscript.Element[] mElements>;

        $i6 = lengthof $r5;

        if i3 >= $i6 goto label5;

        if i0 < 0 goto label4;

        if i1 < 0 goto label3;

        if i2 < 0 goto label2;

        r1 = virtualinvoke r31.<android.renderscript.FieldPacker: byte[] getData()>();

        i4 = virtualinvoke r31.<android.renderscript.FieldPacker: int getPos()>();

        $r15 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r16 = $r15.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r17 = $r16.<android.renderscript.Element: android.renderscript.Element[] mElements>;

        $r18 = $r17[i3];

        $i7 = virtualinvoke $r18.<android.renderscript.Element: int getBytesSize()>();

        $r19 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r20 = $r19.<android.renderscript.Type: android.renderscript.Element mElement>;

        $r21 = $r20.<android.renderscript.Element: int[] mArraySizes>;

        $i8 = $r21[i3];

        i5 = $i7 * $i8;

        if i4 != i5 goto label1;

        $r30 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $l9 = specialinvoke r0.<android.renderscript.Allocation: long getIDSafe()>();

        $i10 = r0.<android.renderscript.Allocation: int mSelectedLOD>;

        virtualinvoke $r30.<android.renderscript.RenderScript: void nAllocationElementData(long,int,int,int,int,int,byte[],int)>($l9, i0, i1, i2, $i10, i3, r1, i4);

        return;

     label1:
        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field packer sizelength ");

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not match component size ");

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r28 = new android.renderscript.RSIllegalArgumentException;

        $r29 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>($r29);

        throw $r28;

     label2:
        $r14 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r14.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Offset z must be >= 0.");

        throw $r14;

     label3:
        $r13 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r13.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Offset y must be >= 0.");

        throw $r13;

     label4:
        $r12 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r12.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Offset x must be >= 0.");

        throw $r12;

     label5:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Component_number ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" out of range.");

        $r10 = new android.renderscript.RSIllegalArgumentException;

        $r11 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r10;
    }

    public void setFromFieldPacker(int, int, android.renderscript.FieldPacker)
    {
        android.renderscript.Allocation r0;
        int i0, i1;
        android.renderscript.FieldPacker r1;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.renderscript.FieldPacker;

        virtualinvoke r0.<android.renderscript.Allocation: void setFromFieldPacker(int,int,int,int,android.renderscript.FieldPacker)>(i0, 0, 0, i1, r1);

        return;
    }

    public void setFromFieldPacker(int, android.renderscript.FieldPacker)
    {
        android.renderscript.Allocation r0;
        int i0, i1, i2, i3, $i4;
        byte[] r1;
        android.renderscript.RenderScript $r2;
        android.renderscript.Type $r3;
        android.renderscript.Element $r4;
        java.lang.StringBuilder $r5;
        android.renderscript.RSIllegalArgumentException $r11;
        java.lang.String $r12;
        android.renderscript.FieldPacker r13;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        r13 := @parameter1: android.renderscript.FieldPacker;

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r2.<android.renderscript.RenderScript: void validate()>();

        $r3 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $r4 = $r3.<android.renderscript.Type: android.renderscript.Element mElement>;

        i1 = virtualinvoke $r4.<android.renderscript.Element: int getBytesSize()>();

        r1 = virtualinvoke r13.<android.renderscript.FieldPacker: byte[] getData()>();

        i2 = virtualinvoke r13.<android.renderscript.FieldPacker: int getPos()>();

        i3 = i2 / i1;

        $i4 = i1 * i3;

        if $i4 != i2 goto label1;

        virtualinvoke r0.<android.renderscript.Allocation: void copy1DRangeFromUnchecked(int,int,byte[])>(i0, i3, r1);

        return;

     label1:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field packer length ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not divisible by element size ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r11 = new android.renderscript.RSIllegalArgumentException;

        $r12 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r11;
    }

    public void setOnBufferAvailableListener(android.renderscript.Allocation$OnBufferAvailableListener)
    {
        android.renderscript.Allocation r0;
        java.util.HashMap r1, r2;
        java.lang.Long r3;
        android.renderscript.RenderScript $r4;
        long $l0;
        java.lang.Throwable $r6;
        android.renderscript.Allocation$OnBufferAvailableListener r7;

        r0 := @this: android.renderscript.Allocation;

        r7 := @parameter0: android.renderscript.Allocation$OnBufferAvailableListener;

        r1 = <android.renderscript.Allocation: java.util.HashMap mAllocationMap>;

        entermonitor r1;

     label1:
        r2 = <android.renderscript.Allocation: java.util.HashMap mAllocationMap>;

        r3 = new java.lang.Long;

        $r4 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $l0 = virtualinvoke r0.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r4);

        specialinvoke r3.<java.lang.Long: void <init>(long)>($l0);

        virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r0);

        r0.<android.renderscript.Allocation: android.renderscript.Allocation$OnBufferAvailableListener mBufferNotifier> = r7;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r6 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setSurface(android.view.Surface)
    {
        android.renderscript.Allocation r0;
        android.view.Surface r1;
        android.renderscript.RenderScript $r2, $r4, $r5;
        int $i0, $i1;
        android.renderscript.RSInvalidStateException $r3;
        long $l2;

        r0 := @this: android.renderscript.Allocation;

        r1 := @parameter0: android.view.Surface;

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r2.<android.renderscript.RenderScript: void validate()>();

        $i0 = r0.<android.renderscript.Allocation: int mUsage>;

        $i1 = $i0 & 64;

        if $i1 == 0 goto label1;

        $r5 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $r4 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $l2 = virtualinvoke r0.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r4);

        virtualinvoke $r5.<android.renderscript.RenderScript: void nAllocationSetSurface(long,android.view.Surface)>($l2, r1);

        return;

     label1:
        $r3 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r3.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Allocation is not USAGE_IO_OUTPUT.");

        throw $r3;
    }

    void setupBufferQueue(int)
    {
        android.renderscript.Allocation r0;
        int i0, $i1, $i2;
        android.renderscript.RenderScript $r1, $r3, $r4;
        android.renderscript.RSInvalidStateException $r2;
        long $l3;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

        $r1 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r1.<android.renderscript.RenderScript: void validate()>();

        $i1 = r0.<android.renderscript.Allocation: int mUsage>;

        $i2 = $i1 & 32;

        if $i2 == 0 goto label1;

        $r4 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $r3 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $l3 = virtualinvoke r0.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r3);

        virtualinvoke $r4.<android.renderscript.RenderScript: void nAllocationSetupBufferQueue(long,int)>($l3, i0);

        return;

     label1:
        $r2 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r2.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Allocation is not USAGE_IO_INPUT.");

        throw $r2;
    }

    void shareBufferQueue(android.renderscript.Allocation)
    {
        android.renderscript.Allocation r0, r1;
        android.renderscript.RenderScript $r2, $r5, $r6, $r7;
        int $i0, $i1;
        android.renderscript.RSInvalidStateException $r3;
        android.view.Surface $r4;
        long $l2, $l3;

        r0 := @this: android.renderscript.Allocation;

        r1 := @parameter0: android.renderscript.Allocation;

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r2.<android.renderscript.RenderScript: void validate()>();

        $i0 = r0.<android.renderscript.Allocation: int mUsage>;

        $i1 = $i0 & 32;

        if $i1 == 0 goto label1;

        $r4 = virtualinvoke r1.<android.renderscript.Allocation: android.view.Surface getSurface()>();

        r0.<android.renderscript.Allocation: android.view.Surface mGetSurfaceSurface> = $r4;

        $r6 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $r5 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $l2 = virtualinvoke r0.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r5);

        $r7 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $l3 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r7);

        virtualinvoke $r6.<android.renderscript.RenderScript: void nAllocationShareBufferQueue(long,long)>($l2, $l3);

        return;

     label1:
        $r3 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r3.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Allocation is not USAGE_IO_INPUT.");

        throw $r3;
    }

    public void syncAll(int)
    {
        android.renderscript.Allocation r0;
        int i0, $i1, $i2, $i3, $i4;
        android.graphics.Bitmap $r1, $r2;
        java.lang.Throwable $r3;
        android.renderscript.RSIllegalArgumentException r4;
        android.renderscript.RenderScript $r5, $r6;
        long $l5;

        r0 := @this: android.renderscript.Allocation;

        i0 := @parameter0: int;

     label01:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(32768L, "syncAll");

     label02:
        if i0 == 1 goto label07;

        if i0 == 2 goto label07;

        if i0 == 4 goto label06;

        if i0 == 8 goto label06;

        if i0 != 128 goto label05;

     label03:
        $i3 = r0.<android.renderscript.Allocation: int mUsage>;

        $i4 = $i3 & 128;

        if $i4 == 0 goto label08;

        $r2 = r0.<android.renderscript.Allocation: android.graphics.Bitmap mBitmap>;

        virtualinvoke r0.<android.renderscript.Allocation: void copyTo(android.graphics.Bitmap)>($r2);

     label04:
        goto label08;

     label05:
        r4 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke r4.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Source must be exactly one usage type.");

        throw r4;

     label06:
        goto label08;

     label07:
        $i1 = r0.<android.renderscript.Allocation: int mUsage>;

        $i2 = $i1 & 128;

        if $i2 == 0 goto label08;

        $r1 = r0.<android.renderscript.Allocation: android.graphics.Bitmap mBitmap>;

        virtualinvoke r0.<android.renderscript.Allocation: void copyFrom(android.graphics.Bitmap)>($r1);

     label08:
        $r5 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        virtualinvoke $r5.<android.renderscript.RenderScript: void validate()>();

        $r6 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $l5 = specialinvoke r0.<android.renderscript.Allocation: long getIDSafe()>();

        virtualinvoke $r6.<android.renderscript.RenderScript: void nAllocationSyncAll(long,int)>($l5, i0);

     label09:
        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        return;

     label10:
        $r3 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(32768L);

        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    void updateFromNative()
    {
        android.renderscript.Allocation r0;
        long l0, $l1;
        android.renderscript.RenderScript $r2, $r3, $r5;
        byte $b2;
        android.renderscript.Type $r4, $r6;

        r0 := @this: android.renderscript.Allocation;

        specialinvoke r0.<android.renderscript.BaseObj: void updateFromNative()>();

        $r3 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $r2 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        $l1 = virtualinvoke r0.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r2);

        l0 = virtualinvoke $r3.<android.renderscript.RenderScript: long nAllocationGetType(long)>($l1);

        $b2 = l0 cmp 0L;

        if $b2 == 0 goto label1;

        $r4 = new android.renderscript.Type;

        $r5 = r0.<android.renderscript.Allocation: android.renderscript.RenderScript mRS>;

        specialinvoke $r4.<android.renderscript.Type: void <init>(long,android.renderscript.RenderScript)>(l0, $r5);

        r0.<android.renderscript.Allocation: android.renderscript.Type mType> = $r4;

        virtualinvoke $r4.<android.renderscript.Type: void updateFromNative()>();

        $r6 = r0.<android.renderscript.Allocation: android.renderscript.Type mType>;

        specialinvoke r0.<android.renderscript.Allocation: void updateCacheInfo(android.renderscript.Type)>($r6);

     label1:
        return;
    }
}
