public class android.renderscript.AllocationAdapter extends android.renderscript.Allocation
{
    android.renderscript.Type mWindow;

    void <init>(long, android.renderscript.RenderScript, android.renderscript.Allocation, android.renderscript.Type)
    {
        android.renderscript.AllocationAdapter r0;
        long l0;
        android.renderscript.RenderScript r1;
        android.renderscript.Allocation r2;
        android.renderscript.Type r3, $r4;
        int $i1;

        r0 := @this: android.renderscript.AllocationAdapter;

        l0 := @parameter0: long;

        r1 := @parameter1: android.renderscript.RenderScript;

        r2 := @parameter2: android.renderscript.Allocation;

        r3 := @parameter3: android.renderscript.Type;

        $r4 = r2.<android.renderscript.Allocation: android.renderscript.Type mType>;

        $i1 = r2.<android.renderscript.Allocation: int mUsage>;

        specialinvoke r0.<android.renderscript.Allocation: void <init>(long,android.renderscript.RenderScript,android.renderscript.Type,int)>(l0, r1, $r4, $i1);

        r0.<android.renderscript.AllocationAdapter: android.renderscript.Allocation mAdaptedAllocation> = r2;

        r0.<android.renderscript.AllocationAdapter: android.renderscript.Type mWindow> = r3;

        return;
    }

    public static android.renderscript.AllocationAdapter create1D(android.renderscript.RenderScript, android.renderscript.Allocation)
    {
        android.renderscript.RenderScript r0;
        android.renderscript.Allocation r1;
        android.renderscript.Element $r2;
        android.renderscript.Type $r3, $r4;
        int $i0;
        android.renderscript.AllocationAdapter $r5;

        r0 := @parameter0: android.renderscript.RenderScript;

        r1 := @parameter1: android.renderscript.Allocation;

        virtualinvoke r0.<android.renderscript.RenderScript: void validate()>();

        $r2 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Element getElement()>();

        $r3 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i0 = virtualinvoke $r3.<android.renderscript.Type: int getX()>();

        $r4 = staticinvoke <android.renderscript.Type: android.renderscript.Type createX(android.renderscript.RenderScript,android.renderscript.Element,int)>(r0, $r2, $i0);

        $r5 = staticinvoke <android.renderscript.AllocationAdapter: android.renderscript.AllocationAdapter createTyped(android.renderscript.RenderScript,android.renderscript.Allocation,android.renderscript.Type)>(r0, r1, $r4);

        return $r5;
    }

    public static android.renderscript.AllocationAdapter create2D(android.renderscript.RenderScript, android.renderscript.Allocation)
    {
        android.renderscript.RenderScript r0;
        android.renderscript.Allocation r1;
        android.renderscript.Element $r2;
        android.renderscript.Type $r3, $r4, $r5;
        int $i0, $i1;
        android.renderscript.AllocationAdapter $r6;

        r0 := @parameter0: android.renderscript.RenderScript;

        r1 := @parameter1: android.renderscript.Allocation;

        virtualinvoke r0.<android.renderscript.RenderScript: void validate()>();

        $r2 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Element getElement()>();

        $r3 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i0 = virtualinvoke $r3.<android.renderscript.Type: int getX()>();

        $r4 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i1 = virtualinvoke $r4.<android.renderscript.Type: int getY()>();

        $r5 = staticinvoke <android.renderscript.Type: android.renderscript.Type createXY(android.renderscript.RenderScript,android.renderscript.Element,int,int)>(r0, $r2, $i0, $i1);

        $r6 = staticinvoke <android.renderscript.AllocationAdapter: android.renderscript.AllocationAdapter createTyped(android.renderscript.RenderScript,android.renderscript.Allocation,android.renderscript.Type)>(r0, r1, $r5);

        return $r6;
    }

    public static android.renderscript.AllocationAdapter createTyped(android.renderscript.RenderScript, android.renderscript.Allocation, android.renderscript.Type)
    {
        android.renderscript.RenderScript r0;
        android.renderscript.Allocation r1, $r4;
        android.renderscript.Type r2, r3, $r6;
        long l0, $l10, $l11;
        android.renderscript.RSInvalidStateException $r5, $r9, $r10, $r13, $r14;
        android.renderscript.Element $r7, $r8;
        boolean $z0, $z1, $z2;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i13, $i14, $i15, i16;
        byte $b12;
        android.renderscript.RSRuntimeException $r11;
        android.renderscript.AllocationAdapter $r12;

        r0 := @parameter0: android.renderscript.RenderScript;

        r1 := @parameter1: android.renderscript.Allocation;

        r2 := @parameter2: android.renderscript.Type;

        virtualinvoke r0.<android.renderscript.RenderScript: void validate()>();

        $r4 = r1.<android.renderscript.Allocation: android.renderscript.Allocation mAdaptedAllocation>;

        if $r4 != null goto label8;

        $r6 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r7 = virtualinvoke $r6.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r8 = virtualinvoke r2.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z0 = virtualinvoke $r7.<android.renderscript.Element: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label7;

        $z1 = virtualinvoke r2.<android.renderscript.Type: boolean hasFaces()>();

        if $z1 != 0 goto label6;

        $z2 = virtualinvoke r2.<android.renderscript.Type: boolean hasMipmaps()>();

        if $z2 != 0 goto label6;

        r3 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i1 = virtualinvoke r2.<android.renderscript.Type: int getX()>();

        $i2 = virtualinvoke r3.<android.renderscript.Type: int getX()>();

        if $i1 > $i2 goto label5;

        $i3 = virtualinvoke r2.<android.renderscript.Type: int getY()>();

        $i4 = virtualinvoke r3.<android.renderscript.Type: int getY()>();

        if $i3 > $i4 goto label5;

        $i5 = virtualinvoke r2.<android.renderscript.Type: int getZ()>();

        $i6 = virtualinvoke r3.<android.renderscript.Type: int getZ()>();

        if $i5 > $i6 goto label5;

        $i7 = virtualinvoke r2.<android.renderscript.Type: int getArrayCount()>();

        $i8 = virtualinvoke r3.<android.renderscript.Type: int getArrayCount()>();

        if $i7 > $i8 goto label5;

        $i9 = virtualinvoke r2.<android.renderscript.Type: int getArrayCount()>();

        if $i9 <= 0 goto label3;

        i16 = 0;

     label1:
        $i13 = virtualinvoke r2.<android.renderscript.Type: int getArray(int)>(i16);

        if i16 >= $i13 goto label3;

        $i14 = virtualinvoke r2.<android.renderscript.Type: int getArray(int)>(i16);

        $i15 = virtualinvoke r3.<android.renderscript.Type: int getArray(int)>(i16);

        if $i14 > $i15 goto label2;

        i16 = i16 + 1;

        goto label1;

     label2:
        $r13 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r13.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Type cannot have dimension larger than the source allocation.");

        throw $r13;

     label3:
        $l10 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>(r0);

        $l11 = virtualinvoke r2.<android.renderscript.Type: long getID(android.renderscript.RenderScript)>(r0);

        l0 = virtualinvoke r0.<android.renderscript.RenderScript: long nAllocationAdapterCreate(long,long)>($l10, $l11);

        $b12 = l0 cmp 0L;

        if $b12 == 0 goto label4;

        $r12 = new android.renderscript.AllocationAdapter;

        specialinvoke $r12.<android.renderscript.AllocationAdapter: void <init>(long,android.renderscript.RenderScript,android.renderscript.Allocation,android.renderscript.Type)>(l0, r0, r1, r2);

        return $r12;

     label4:
        $r11 = new android.renderscript.RSRuntimeException;

        specialinvoke $r11.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("AllocationAdapter creation failed.");

        throw $r11;

     label5:
        $r14 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r14.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Type cannot have dimension larger than the source allocation.");

        throw $r14;

     label6:
        $r10 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r10.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Adapters do not support window types with Mipmaps or Faces.");

        throw $r10;

     label7:
        $r9 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r9.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Element must match Allocation type.");

        throw $r9;

     label8:
        $r5 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r5.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Adapters cannot be nested.");

        throw $r5;
    }

    private void updateOffsets()
    {
        android.renderscript.AllocationAdapter r0;
        int[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        int $i1, $i2, $i3, $i4, i5, i6, i7, i8, i9, i10, i11, $i13, $i14, $i15, $i16, $i17;
        android.renderscript.RenderScript $r10, $r11;
        long $l12;
        android.renderscript.Type$CubemapFace $r12;

        r0 := @this: android.renderscript.AllocationAdapter;

        i5 = 0;

        i6 = 0;

        i7 = 0;

        i8 = 0;

        i9 = 0;

        i10 = 0;

        i11 = 0;

        $r1 = r0.<android.renderscript.AllocationAdapter: int[] mSelectedArray>;

        if $r1 == null goto label4;

        $r2 = r0.<android.renderscript.AllocationAdapter: int[] mSelectedArray>;

        $i1 = lengthof $r2;

        if $i1 <= 0 goto label1;

        $r9 = r0.<android.renderscript.AllocationAdapter: int[] mSelectedArray>;

        i6 = $r9[0];

     label1:
        $r3 = r0.<android.renderscript.AllocationAdapter: int[] mSelectedArray>;

        $i2 = lengthof $r3;

        if $i2 <= 1 goto label2;

        $r8 = r0.<android.renderscript.AllocationAdapter: int[] mSelectedArray>;

        i8 = $r8[2];

     label2:
        $r4 = r0.<android.renderscript.AllocationAdapter: int[] mSelectedArray>;

        $i3 = lengthof $r4;

        if $i3 <= 2 goto label3;

        $r7 = r0.<android.renderscript.AllocationAdapter: int[] mSelectedArray>;

        i10 = $r7[2];

     label3:
        i5 = i6;

        i7 = i8;

        i9 = i10;

        i11 = 0;

        $r5 = r0.<android.renderscript.AllocationAdapter: int[] mSelectedArray>;

        $i4 = lengthof $r5;

        if $i4 <= 3 goto label4;

        $r6 = r0.<android.renderscript.AllocationAdapter: int[] mSelectedArray>;

        i11 = $r6[3];

        i9 = i10;

        i7 = i8;

        i5 = i6;

     label4:
        $r10 = r0.<android.renderscript.AllocationAdapter: android.renderscript.RenderScript mRS>;

        $r11 = r0.<android.renderscript.AllocationAdapter: android.renderscript.RenderScript mRS>;

        $l12 = virtualinvoke r0.<android.renderscript.AllocationAdapter: long getID(android.renderscript.RenderScript)>($r11);

        $i13 = r0.<android.renderscript.AllocationAdapter: int mSelectedX>;

        $i14 = r0.<android.renderscript.AllocationAdapter: int mSelectedY>;

        $i15 = r0.<android.renderscript.AllocationAdapter: int mSelectedZ>;

        $i16 = r0.<android.renderscript.AllocationAdapter: int mSelectedLOD>;

        $r12 = r0.<android.renderscript.AllocationAdapter: android.renderscript.Type$CubemapFace mSelectedFace>;

        $i17 = $r12.<android.renderscript.Type$CubemapFace: int mID>;

        virtualinvoke $r10.<android.renderscript.RenderScript: void nAllocationAdapterOffset(long,int,int,int,int,int,int,int,int,int)>($l12, $i13, $i14, $i15, $i16, $i17, i5, i7, i9, i11);

        return;
    }

    void initLOD(int)
    {
        android.renderscript.AllocationAdapter r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13, i14, i15, i16;
        java.lang.StringBuilder $r1, $r13;
        android.renderscript.RSIllegalArgumentException $r5, $r17;
        java.lang.String $r6, $r18;
        android.renderscript.Allocation $r7, $r9, $r11;
        android.renderscript.Type $r8, $r10, $r12;

        r0 := @this: android.renderscript.AllocationAdapter;

        i0 := @parameter0: int;

        if i0 < 0 goto label10;

        $r7 = r0.<android.renderscript.AllocationAdapter: android.renderscript.Allocation mAdaptedAllocation>;

        $r8 = $r7.<android.renderscript.Allocation: android.renderscript.Type mType>;

        i10 = virtualinvoke $r8.<android.renderscript.Type: int getX()>();

        $r9 = r0.<android.renderscript.AllocationAdapter: android.renderscript.Allocation mAdaptedAllocation>;

        $r10 = $r9.<android.renderscript.Allocation: android.renderscript.Type mType>;

        i11 = virtualinvoke $r10.<android.renderscript.Type: int getY()>();

        $r11 = r0.<android.renderscript.AllocationAdapter: android.renderscript.Allocation mAdaptedAllocation>;

        $r12 = $r11.<android.renderscript.Allocation: android.renderscript.Type mType>;

        i12 = virtualinvoke $r12.<android.renderscript.Type: int getZ()>();

        i13 = 0;

     label01:
        if i13 >= i0 goto label07;

        if i10 != 1 goto label03;

        if i11 != 1 goto label03;

        if i12 == 1 goto label02;

        goto label03;

     label02:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempting to set lod (");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") out of range.");

        $r17 = new android.renderscript.RSIllegalArgumentException;

        $r18 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r17;

     label03:
        i14 = i10;

        if i10 <= 1 goto label04;

        i14 = i10 >> 1;

     label04:
        i15 = i11;

        if i11 <= 1 goto label05;

        i15 = i11 >> 1;

     label05:
        i16 = i12;

        if i12 <= 1 goto label06;

        i16 = i12 >> 1;

     label06:
        i13 = i13 + 1;

        i10 = i14;

        i11 = i15;

        i12 = i16;

        goto label01;

     label07:
        r0.<android.renderscript.AllocationAdapter: int mCurrentDimX> = i10;

        r0.<android.renderscript.AllocationAdapter: int mCurrentDimY> = i11;

        r0.<android.renderscript.AllocationAdapter: int mCurrentDimZ> = i12;

        $i1 = r0.<android.renderscript.AllocationAdapter: int mCurrentDimX>;

        r0.<android.renderscript.AllocationAdapter: int mCurrentCount> = $i1;

        $i2 = r0.<android.renderscript.AllocationAdapter: int mCurrentDimY>;

        if $i2 <= 1 goto label08;

        $i8 = r0.<android.renderscript.AllocationAdapter: int mCurrentCount>;

        $i7 = r0.<android.renderscript.AllocationAdapter: int mCurrentDimY>;

        $i9 = $i8 * $i7;

        r0.<android.renderscript.AllocationAdapter: int mCurrentCount> = $i9;

     label08:
        $i3 = r0.<android.renderscript.AllocationAdapter: int mCurrentDimZ>;

        if $i3 <= 1 goto label09;

        $i5 = r0.<android.renderscript.AllocationAdapter: int mCurrentCount>;

        $i4 = r0.<android.renderscript.AllocationAdapter: int mCurrentDimZ>;

        $i6 = $i5 * $i4;

        r0.<android.renderscript.AllocationAdapter: int mCurrentCount> = $i6;

     label09:
        r0.<android.renderscript.AllocationAdapter: int mSelectedY> = 0;

        r0.<android.renderscript.AllocationAdapter: int mSelectedZ> = 0;

        return;

     label10:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempting to set negative lod (");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").");

        $r5 = new android.renderscript.RSIllegalArgumentException;

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    public void resize(int)
    {
        android.renderscript.AllocationAdapter r0;
        int i0;
        java.lang.Throwable $r1;
        android.renderscript.RSInvalidStateException r2;

        r0 := @this: android.renderscript.AllocationAdapter;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        r2 = new android.renderscript.RSInvalidStateException;

        specialinvoke r2.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Resize not allowed for Adapters.");

        throw r2;

     label2:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void setArray(int, int)
    {
        android.renderscript.AllocationAdapter r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        android.renderscript.Allocation $r1, $r4, $r8, $r12;
        android.renderscript.Type $r2, $r5, $r7, $r9, $r11, $r13;
        android.renderscript.RSInvalidStateException $r3, $r6, $r10, $r14;
        int[] $r15;

        r0 := @this: android.renderscript.AllocationAdapter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<android.renderscript.AllocationAdapter: android.renderscript.Allocation mAdaptedAllocation>;

        $r2 = virtualinvoke $r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i2 = virtualinvoke $r2.<android.renderscript.Type: int getArray(int)>(i0);

        if $i2 == 0 goto label4;

        $r4 = r0.<android.renderscript.AllocationAdapter: android.renderscript.Allocation mAdaptedAllocation>;

        $r5 = virtualinvoke $r4.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i3 = virtualinvoke $r5.<android.renderscript.Type: int getArray(int)>(i0);

        if $i3 <= i1 goto label3;

        $r7 = r0.<android.renderscript.AllocationAdapter: android.renderscript.Type mWindow>;

        $i4 = virtualinvoke $r7.<android.renderscript.Type: int getArray(int)>(i0);

        $r8 = r0.<android.renderscript.AllocationAdapter: android.renderscript.Allocation mAdaptedAllocation>;

        $r9 = virtualinvoke $r8.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i5 = virtualinvoke $r9.<android.renderscript.Type: int getArray(int)>(i0);

        if $i4 == $i5 goto label2;

        $r11 = r0.<android.renderscript.AllocationAdapter: android.renderscript.Type mWindow>;

        $i6 = virtualinvoke $r11.<android.renderscript.Type: int getArray(int)>(i0);

        $i7 = $i6 + i1;

        $r12 = r0.<android.renderscript.AllocationAdapter: android.renderscript.Allocation mAdaptedAllocation>;

        $r13 = virtualinvoke $r12.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i8 = virtualinvoke $r13.<android.renderscript.Type: int getArray(int)>(i0);

        if $i7 >= $i8 goto label1;

        $r15 = r0.<android.renderscript.AllocationAdapter: int[] mSelectedArray>;

        $r15[i0] = i1;

        specialinvoke r0.<android.renderscript.AllocationAdapter: void updateOffsets()>();

        return;

     label1:
        $r14 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r14.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Cannot set (arrayNum + window) which would be larger than dimension of allocation.");

        throw $r14;

     label2:
        $r10 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r10.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Cannot set arrayNum when the adapter includes arrayNum.");

        throw $r10;

     label3:
        $r6 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r6.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Cannot set arrayNum greater than dimension of allocation.");

        throw $r6;

     label4:
        $r3 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r3.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Cannot set arrayNum when the allocation type does not include arrayNum dim.");

        throw $r3;
    }

    public void setFace(android.renderscript.Type$CubemapFace)
    {
        android.renderscript.AllocationAdapter r0;
        android.renderscript.Type$CubemapFace r1;
        android.renderscript.Allocation $r2;
        android.renderscript.Type $r3, $r5;
        boolean $z0, $z1;
        android.renderscript.RSInvalidStateException $r4, $r6;
        android.renderscript.RSIllegalArgumentException $r7;

        r0 := @this: android.renderscript.AllocationAdapter;

        r1 := @parameter0: android.renderscript.Type$CubemapFace;

        $r2 = r0.<android.renderscript.AllocationAdapter: android.renderscript.Allocation mAdaptedAllocation>;

        $r3 = virtualinvoke $r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $z0 = virtualinvoke $r3.<android.renderscript.Type: boolean hasFaces()>();

        if $z0 == 0 goto label3;

        $r5 = r0.<android.renderscript.AllocationAdapter: android.renderscript.Type mWindow>;

        $z1 = virtualinvoke $r5.<android.renderscript.Type: boolean hasFaces()>();

        if $z1 != 0 goto label2;

        if r1 == null goto label1;

        r0.<android.renderscript.AllocationAdapter: android.renderscript.Type$CubemapFace mSelectedFace> = r1;

        specialinvoke r0.<android.renderscript.AllocationAdapter: void updateOffsets()>();

        return;

     label1:
        $r7 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r7.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Cannot set null face.");

        throw $r7;

     label2:
        $r6 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r6.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Cannot set face when the adapter includes faces.");

        throw $r6;

     label3:
        $r4 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r4.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Cannot set Face when the allocation type does not include faces.");

        throw $r4;
    }

    public void setLOD(int)
    {
        android.renderscript.AllocationAdapter r0;
        int i0;
        android.renderscript.Allocation $r1;
        android.renderscript.Type $r2, $r4;
        boolean $z0, $z1;
        android.renderscript.RSInvalidStateException $r3, $r5;

        r0 := @this: android.renderscript.AllocationAdapter;

        i0 := @parameter0: int;

        $r1 = r0.<android.renderscript.AllocationAdapter: android.renderscript.Allocation mAdaptedAllocation>;

        $r2 = virtualinvoke $r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $z0 = virtualinvoke $r2.<android.renderscript.Type: boolean hasMipmaps()>();

        if $z0 == 0 goto label2;

        $r4 = r0.<android.renderscript.AllocationAdapter: android.renderscript.Type mWindow>;

        $z1 = virtualinvoke $r4.<android.renderscript.Type: boolean hasMipmaps()>();

        if $z1 != 0 goto label1;

        virtualinvoke r0.<android.renderscript.AllocationAdapter: void initLOD(int)>(i0);

        r0.<android.renderscript.AllocationAdapter: int mSelectedLOD> = i0;

        specialinvoke r0.<android.renderscript.AllocationAdapter: void updateOffsets()>();

        return;

     label1:
        $r5 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r5.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Cannot set LOD when the adapter includes mipmaps.");

        throw $r5;

     label2:
        $r3 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r3.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Cannot set LOD when the allocation type does not include mipmaps.");

        throw $r3;
    }

    public void setX(int)
    {
        android.renderscript.AllocationAdapter r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        android.renderscript.Allocation $r1, $r5, $r9;
        android.renderscript.Type $r2, $r4, $r6, $r8, $r10;
        android.renderscript.RSInvalidStateException $r3, $r7, $r11;

        r0 := @this: android.renderscript.AllocationAdapter;

        i0 := @parameter0: int;

        $r1 = r0.<android.renderscript.AllocationAdapter: android.renderscript.Allocation mAdaptedAllocation>;

        $r2 = virtualinvoke $r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i1 = virtualinvoke $r2.<android.renderscript.Type: int getX()>();

        if $i1 <= i0 goto label3;

        $r4 = r0.<android.renderscript.AllocationAdapter: android.renderscript.Type mWindow>;

        $i2 = virtualinvoke $r4.<android.renderscript.Type: int getX()>();

        $r5 = r0.<android.renderscript.AllocationAdapter: android.renderscript.Allocation mAdaptedAllocation>;

        $r6 = virtualinvoke $r5.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i3 = virtualinvoke $r6.<android.renderscript.Type: int getX()>();

        if $i2 == $i3 goto label2;

        $r8 = r0.<android.renderscript.AllocationAdapter: android.renderscript.Type mWindow>;

        $i4 = virtualinvoke $r8.<android.renderscript.Type: int getX()>();

        $i5 = $i4 + i0;

        $r9 = r0.<android.renderscript.AllocationAdapter: android.renderscript.Allocation mAdaptedAllocation>;

        $r10 = virtualinvoke $r9.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i6 = virtualinvoke $r10.<android.renderscript.Type: int getX()>();

        if $i5 >= $i6 goto label1;

        r0.<android.renderscript.AllocationAdapter: int mSelectedX> = i0;

        specialinvoke r0.<android.renderscript.AllocationAdapter: void updateOffsets()>();

        return;

     label1:
        $r11 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r11.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Cannot set (X + window) which would be larger than dimension of allocation.");

        throw $r11;

     label2:
        $r7 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r7.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Cannot set X when the adapter includes X.");

        throw $r7;

     label3:
        $r3 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r3.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Cannot set X greater than dimension of allocation.");

        throw $r3;
    }

    public void setY(int)
    {
        android.renderscript.AllocationAdapter r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        android.renderscript.Allocation $r1, $r4, $r8, $r12;
        android.renderscript.Type $r2, $r5, $r7, $r9, $r11, $r13;
        android.renderscript.RSInvalidStateException $r3, $r6, $r10, $r14;

        r0 := @this: android.renderscript.AllocationAdapter;

        i0 := @parameter0: int;

        $r1 = r0.<android.renderscript.AllocationAdapter: android.renderscript.Allocation mAdaptedAllocation>;

        $r2 = virtualinvoke $r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i1 = virtualinvoke $r2.<android.renderscript.Type: int getY()>();

        if $i1 == 0 goto label4;

        $r4 = r0.<android.renderscript.AllocationAdapter: android.renderscript.Allocation mAdaptedAllocation>;

        $r5 = virtualinvoke $r4.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i2 = virtualinvoke $r5.<android.renderscript.Type: int getY()>();

        if $i2 <= i0 goto label3;

        $r7 = r0.<android.renderscript.AllocationAdapter: android.renderscript.Type mWindow>;

        $i3 = virtualinvoke $r7.<android.renderscript.Type: int getY()>();

        $r8 = r0.<android.renderscript.AllocationAdapter: android.renderscript.Allocation mAdaptedAllocation>;

        $r9 = virtualinvoke $r8.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i4 = virtualinvoke $r9.<android.renderscript.Type: int getY()>();

        if $i3 == $i4 goto label2;

        $r11 = r0.<android.renderscript.AllocationAdapter: android.renderscript.Type mWindow>;

        $i5 = virtualinvoke $r11.<android.renderscript.Type: int getY()>();

        $i6 = $i5 + i0;

        $r12 = r0.<android.renderscript.AllocationAdapter: android.renderscript.Allocation mAdaptedAllocation>;

        $r13 = virtualinvoke $r12.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i7 = virtualinvoke $r13.<android.renderscript.Type: int getY()>();

        if $i6 >= $i7 goto label1;

        r0.<android.renderscript.AllocationAdapter: int mSelectedY> = i0;

        specialinvoke r0.<android.renderscript.AllocationAdapter: void updateOffsets()>();

        return;

     label1:
        $r14 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r14.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Cannot set (Y + window) which would be larger than dimension of allocation.");

        throw $r14;

     label2:
        $r10 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r10.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Cannot set Y when the adapter includes Y.");

        throw $r10;

     label3:
        $r6 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r6.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Cannot set Y greater than dimension of allocation.");

        throw $r6;

     label4:
        $r3 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r3.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Cannot set Y when the allocation type does not include Y dim.");

        throw $r3;
    }

    public void setZ(int)
    {
        android.renderscript.AllocationAdapter r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        android.renderscript.Allocation $r1, $r4, $r8, $r12;
        android.renderscript.Type $r2, $r5, $r7, $r9, $r11, $r13;
        android.renderscript.RSInvalidStateException $r3, $r6, $r10, $r14;

        r0 := @this: android.renderscript.AllocationAdapter;

        i0 := @parameter0: int;

        $r1 = r0.<android.renderscript.AllocationAdapter: android.renderscript.Allocation mAdaptedAllocation>;

        $r2 = virtualinvoke $r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i1 = virtualinvoke $r2.<android.renderscript.Type: int getZ()>();

        if $i1 == 0 goto label4;

        $r4 = r0.<android.renderscript.AllocationAdapter: android.renderscript.Allocation mAdaptedAllocation>;

        $r5 = virtualinvoke $r4.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i2 = virtualinvoke $r5.<android.renderscript.Type: int getZ()>();

        if $i2 <= i0 goto label3;

        $r7 = r0.<android.renderscript.AllocationAdapter: android.renderscript.Type mWindow>;

        $i3 = virtualinvoke $r7.<android.renderscript.Type: int getZ()>();

        $r8 = r0.<android.renderscript.AllocationAdapter: android.renderscript.Allocation mAdaptedAllocation>;

        $r9 = virtualinvoke $r8.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i4 = virtualinvoke $r9.<android.renderscript.Type: int getZ()>();

        if $i3 == $i4 goto label2;

        $r11 = r0.<android.renderscript.AllocationAdapter: android.renderscript.Type mWindow>;

        $i5 = virtualinvoke $r11.<android.renderscript.Type: int getZ()>();

        $i6 = $i5 + i0;

        $r12 = r0.<android.renderscript.AllocationAdapter: android.renderscript.Allocation mAdaptedAllocation>;

        $r13 = virtualinvoke $r12.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i7 = virtualinvoke $r13.<android.renderscript.Type: int getZ()>();

        if $i6 >= $i7 goto label1;

        r0.<android.renderscript.AllocationAdapter: int mSelectedZ> = i0;

        specialinvoke r0.<android.renderscript.AllocationAdapter: void updateOffsets()>();

        return;

     label1:
        $r14 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r14.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Cannot set (Z + window) which would be larger than dimension of allocation.");

        throw $r14;

     label2:
        $r10 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r10.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Cannot set Z when the adapter includes Z.");

        throw $r10;

     label3:
        $r6 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r6.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Cannot set Z greater than dimension of allocation.");

        throw $r6;

     label4:
        $r3 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r3.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Cannot set Z when the allocation type does not include Z dim.");

        throw $r3;
    }
}
