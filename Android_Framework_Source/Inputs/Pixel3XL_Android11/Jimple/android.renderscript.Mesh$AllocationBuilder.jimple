public class android.renderscript.Mesh$AllocationBuilder extends java.lang.Object
{
    java.util.Vector mIndexTypes;
    android.renderscript.RenderScript mRS;
    int mVertexTypeCount;
    android.renderscript.Mesh$AllocationBuilder$Entry[] mVertexTypes;

    public void <init>(android.renderscript.RenderScript)
    {
        android.renderscript.Mesh$AllocationBuilder r0;
        android.renderscript.RenderScript r1;
        android.renderscript.Mesh$AllocationBuilder$Entry[] $r2;
        java.util.Vector $r3;

        r0 := @this: android.renderscript.Mesh$AllocationBuilder;

        r1 := @parameter0: android.renderscript.RenderScript;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.renderscript.Mesh$AllocationBuilder: android.renderscript.RenderScript mRS> = r1;

        r0.<android.renderscript.Mesh$AllocationBuilder: int mVertexTypeCount> = 0;

        $r2 = newarray (android.renderscript.Mesh$AllocationBuilder$Entry)[16];

        r0.<android.renderscript.Mesh$AllocationBuilder: android.renderscript.Mesh$AllocationBuilder$Entry[] mVertexTypes> = $r2;

        $r3 = new java.util.Vector;

        specialinvoke $r3.<java.util.Vector: void <init>()>();

        r0.<android.renderscript.Mesh$AllocationBuilder: java.util.Vector mIndexTypes> = $r3;

        return;
    }

    public android.renderscript.Mesh$AllocationBuilder addIndexSetAllocation(android.renderscript.Allocation, android.renderscript.Mesh$Primitive)
    {
        android.renderscript.Mesh$AllocationBuilder r0;
        android.renderscript.Allocation r1;
        android.renderscript.Mesh$Primitive r2;
        android.renderscript.Mesh$AllocationBuilder$Entry $r4;
        java.util.Vector $r5;

        r0 := @this: android.renderscript.Mesh$AllocationBuilder;

        r1 := @parameter0: android.renderscript.Allocation;

        r2 := @parameter1: android.renderscript.Mesh$Primitive;

        $r4 = new android.renderscript.Mesh$AllocationBuilder$Entry;

        specialinvoke $r4.<android.renderscript.Mesh$AllocationBuilder$Entry: void <init>(android.renderscript.Mesh$AllocationBuilder)>(r0);

        $r4.<android.renderscript.Mesh$AllocationBuilder$Entry: android.renderscript.Allocation a> = r1;

        $r4.<android.renderscript.Mesh$AllocationBuilder$Entry: android.renderscript.Mesh$Primitive prim> = r2;

        $r5 = r0.<android.renderscript.Mesh$AllocationBuilder: java.util.Vector mIndexTypes>;

        virtualinvoke $r5.<java.util.Vector: void addElement(java.lang.Object)>($r4);

        return r0;
    }

    public android.renderscript.Mesh$AllocationBuilder addIndexSetType(android.renderscript.Mesh$Primitive)
    {
        android.renderscript.Mesh$AllocationBuilder r0;
        android.renderscript.Mesh$Primitive r1;
        android.renderscript.Mesh$AllocationBuilder$Entry $r3;
        java.util.Vector $r4;

        r0 := @this: android.renderscript.Mesh$AllocationBuilder;

        r1 := @parameter0: android.renderscript.Mesh$Primitive;

        $r3 = new android.renderscript.Mesh$AllocationBuilder$Entry;

        specialinvoke $r3.<android.renderscript.Mesh$AllocationBuilder$Entry: void <init>(android.renderscript.Mesh$AllocationBuilder)>(r0);

        $r3.<android.renderscript.Mesh$AllocationBuilder$Entry: android.renderscript.Allocation a> = null;

        $r3.<android.renderscript.Mesh$AllocationBuilder$Entry: android.renderscript.Mesh$Primitive prim> = r1;

        $r4 = r0.<android.renderscript.Mesh$AllocationBuilder: java.util.Vector mIndexTypes>;

        virtualinvoke $r4.<java.util.Vector: void addElement(java.lang.Object)>($r3);

        return r0;
    }

    public android.renderscript.Mesh$AllocationBuilder addVertexAllocation(android.renderscript.Allocation) throws java.lang.IllegalStateException
    {
        android.renderscript.Mesh$AllocationBuilder r0;
        android.renderscript.Allocation r1;
        int i0, $i1, $i2, $i3, $i4;
        android.renderscript.Mesh$AllocationBuilder$Entry[] r2, $r5;
        java.lang.IllegalStateException $r3;
        android.renderscript.Mesh$AllocationBuilder$Entry $r4, $r6;

        r0 := @this: android.renderscript.Mesh$AllocationBuilder;

        r1 := @parameter0: android.renderscript.Allocation;

        i0 = r0.<android.renderscript.Mesh$AllocationBuilder: int mVertexTypeCount>;

        r2 = r0.<android.renderscript.Mesh$AllocationBuilder: android.renderscript.Mesh$AllocationBuilder$Entry[] mVertexTypes>;

        $i1 = lengthof r2;

        if i0 >= $i1 goto label1;

        $r4 = new android.renderscript.Mesh$AllocationBuilder$Entry;

        specialinvoke $r4.<android.renderscript.Mesh$AllocationBuilder$Entry: void <init>(android.renderscript.Mesh$AllocationBuilder)>(r0);

        r2[i0] = $r4;

        $r5 = r0.<android.renderscript.Mesh$AllocationBuilder: android.renderscript.Mesh$AllocationBuilder$Entry[] mVertexTypes>;

        $i2 = r0.<android.renderscript.Mesh$AllocationBuilder: int mVertexTypeCount>;

        $r6 = $r5[$i2];

        $r6.<android.renderscript.Mesh$AllocationBuilder$Entry: android.renderscript.Allocation a> = r1;

        $i3 = r0.<android.renderscript.Mesh$AllocationBuilder: int mVertexTypeCount>;

        $i4 = $i3 + 1;

        r0.<android.renderscript.Mesh$AllocationBuilder: int mVertexTypeCount> = $i4;

        return r0;

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Max vertex types exceeded.");

        throw $r3;
    }

    public android.renderscript.Mesh create()
    {
        android.renderscript.Mesh$AllocationBuilder r0;
        long[] r1, r2;
        android.renderscript.Allocation[] r3, r5;
        android.renderscript.Mesh$Primitive[] r4;
        android.renderscript.RenderScript $r6, $r13, $r14, $r18, $r25;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, i11, i12;
        java.util.Vector $r7, $r8, $r9, $r10, $r11, $r15;
        android.renderscript.Mesh $r12;
        long $l8, $l10, l13;
        java.lang.Object $r16;
        android.renderscript.Allocation $r17, $r19, $r20, $r24, $r26;
        android.renderscript.Mesh$Primitive $r21, $r22;
        android.renderscript.Mesh$AllocationBuilder$Entry[] $r23;
        int[] r27;
        android.renderscript.Mesh$AllocationBuilder$Entry r28, r29;

        r0 := @this: android.renderscript.Mesh$AllocationBuilder;

        $r6 = r0.<android.renderscript.Mesh$AllocationBuilder: android.renderscript.RenderScript mRS>;

        virtualinvoke $r6.<android.renderscript.RenderScript: void validate()>();

        $i0 = r0.<android.renderscript.Mesh$AllocationBuilder: int mVertexTypeCount>;

        r1 = newarray (long)[$i0];

        $r7 = r0.<android.renderscript.Mesh$AllocationBuilder: java.util.Vector mIndexTypes>;

        $i1 = virtualinvoke $r7.<java.util.Vector: int size()>();

        r2 = newarray (long)[$i1];

        $r8 = r0.<android.renderscript.Mesh$AllocationBuilder: java.util.Vector mIndexTypes>;

        $i2 = virtualinvoke $r8.<java.util.Vector: int size()>();

        r27 = newarray (int)[$i2];

        $r9 = r0.<android.renderscript.Mesh$AllocationBuilder: java.util.Vector mIndexTypes>;

        $i3 = virtualinvoke $r9.<java.util.Vector: int size()>();

        r3 = newarray (android.renderscript.Allocation)[$i3];

        $r10 = r0.<android.renderscript.Mesh$AllocationBuilder: java.util.Vector mIndexTypes>;

        $i4 = virtualinvoke $r10.<java.util.Vector: int size()>();

        r4 = newarray (android.renderscript.Mesh$Primitive)[$i4];

        $i5 = r0.<android.renderscript.Mesh$AllocationBuilder: int mVertexTypeCount>;

        r5 = newarray (android.renderscript.Allocation)[$i5];

        i11 = 0;

     label1:
        $i6 = r0.<android.renderscript.Mesh$AllocationBuilder: int mVertexTypeCount>;

        if i11 >= $i6 goto label2;

        $r23 = r0.<android.renderscript.Mesh$AllocationBuilder: android.renderscript.Mesh$AllocationBuilder$Entry[] mVertexTypes>;

        r28 = $r23[i11];

        $r24 = r28.<android.renderscript.Mesh$AllocationBuilder$Entry: android.renderscript.Allocation a>;

        r5[i11] = $r24;

        $r26 = r28.<android.renderscript.Mesh$AllocationBuilder$Entry: android.renderscript.Allocation a>;

        $r25 = r0.<android.renderscript.Mesh$AllocationBuilder: android.renderscript.RenderScript mRS>;

        $l10 = virtualinvoke $r26.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r25);

        r1[i11] = $l10;

        i11 = i11 + 1;

        goto label1;

     label2:
        i12 = 0;

     label3:
        $r11 = r0.<android.renderscript.Mesh$AllocationBuilder: java.util.Vector mIndexTypes>;

        $i7 = virtualinvoke $r11.<java.util.Vector: int size()>();

        if i12 >= $i7 goto label6;

        $r15 = r0.<android.renderscript.Mesh$AllocationBuilder: java.util.Vector mIndexTypes>;

        $r16 = virtualinvoke $r15.<java.util.Vector: java.lang.Object elementAt(int)>(i12);

        r29 = (android.renderscript.Mesh$AllocationBuilder$Entry) $r16;

        $r17 = r29.<android.renderscript.Mesh$AllocationBuilder$Entry: android.renderscript.Allocation a>;

        if $r17 != null goto label4;

        l13 = 0L;

        goto label5;

     label4:
        $r19 = r29.<android.renderscript.Mesh$AllocationBuilder$Entry: android.renderscript.Allocation a>;

        $r18 = r0.<android.renderscript.Mesh$AllocationBuilder: android.renderscript.RenderScript mRS>;

        l13 = virtualinvoke $r19.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r18);

     label5:
        $r20 = r29.<android.renderscript.Mesh$AllocationBuilder$Entry: android.renderscript.Allocation a>;

        r3[i12] = $r20;

        $r21 = r29.<android.renderscript.Mesh$AllocationBuilder$Entry: android.renderscript.Mesh$Primitive prim>;

        r4[i12] = $r21;

        r2[i12] = l13;

        $r22 = r29.<android.renderscript.Mesh$AllocationBuilder$Entry: android.renderscript.Mesh$Primitive prim>;

        $i9 = $r22.<android.renderscript.Mesh$Primitive: int mID>;

        r27[i12] = $i9;

        i12 = i12 + 1;

        goto label3;

     label6:
        $r12 = new android.renderscript.Mesh;

        $r13 = r0.<android.renderscript.Mesh$AllocationBuilder: android.renderscript.RenderScript mRS>;

        $l8 = virtualinvoke $r13.<android.renderscript.RenderScript: long nMeshCreate(long[],long[],int[])>(r1, r2, r27);

        $r14 = r0.<android.renderscript.Mesh$AllocationBuilder: android.renderscript.RenderScript mRS>;

        specialinvoke $r12.<android.renderscript.Mesh: void <init>(long,android.renderscript.RenderScript)>($l8, $r14);

        $r12.<android.renderscript.Mesh: android.renderscript.Allocation[] mVertexBuffers> = r5;

        $r12.<android.renderscript.Mesh: android.renderscript.Allocation[] mIndexBuffers> = r3;

        $r12.<android.renderscript.Mesh: android.renderscript.Mesh$Primitive[] mPrimitives> = r4;

        return $r12;
    }

    public int getCurrentIndexSetIndex()
    {
        android.renderscript.Mesh$AllocationBuilder r0;
        java.util.Vector $r1;
        int $i0, $i1;

        r0 := @this: android.renderscript.Mesh$AllocationBuilder;

        $r1 = r0.<android.renderscript.Mesh$AllocationBuilder: java.util.Vector mIndexTypes>;

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        $i1 = $i0 - 1;

        return $i1;
    }

    public int getCurrentVertexTypeIndex()
    {
        android.renderscript.Mesh$AllocationBuilder r0;
        int $i0, $i1;

        r0 := @this: android.renderscript.Mesh$AllocationBuilder;

        $i0 = r0.<android.renderscript.Mesh$AllocationBuilder: int mVertexTypeCount>;

        $i1 = $i0 - 1;

        return $i1;
    }
}
