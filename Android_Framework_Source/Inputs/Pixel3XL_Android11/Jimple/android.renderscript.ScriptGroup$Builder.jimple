public final class android.renderscript.ScriptGroup$Builder extends java.lang.Object
{
    private int mKernelCount;
    private java.util.ArrayList mLines;
    private java.util.ArrayList mNodes;
    private android.renderscript.RenderScript mRS;

    public void <init>(android.renderscript.RenderScript)
    {
        android.renderscript.ScriptGroup$Builder r0;
        android.renderscript.RenderScript r1;
        java.util.ArrayList $r2, $r3;

        r0 := @this: android.renderscript.ScriptGroup$Builder;

        r1 := @parameter0: android.renderscript.RenderScript;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mLines> = $r3;

        r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.RenderScript mRS> = r1;

        return;
    }

    private android.renderscript.ScriptGroup$Node findNode(android.renderscript.Script$KernelID)
    {
        android.renderscript.ScriptGroup$Builder r0;
        android.renderscript.Script$KernelID r1;
        android.renderscript.ScriptGroup$Node r2;
        java.util.ArrayList $r3, $r4, $r6, $r7;
        int $i0, $i1, i2, i3;
        java.lang.Object $r5, $r8;

        r0 := @this: android.renderscript.ScriptGroup$Builder;

        r1 := @parameter0: android.renderscript.Script$KernelID;

        i2 = 0;

     label1:
        $r3 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        if i2 >= $i0 goto label5;

        $r4 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r2 = (android.renderscript.ScriptGroup$Node) $r5;

        i3 = 0;

     label2:
        $r6 = r2.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mKernels>;

        $i1 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        if i3 >= $i1 goto label4;

        $r7 = r2.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mKernels>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        if r1 != $r8 goto label3;

        return r2;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        i2 = i2 + 1;

        goto label1;

     label5:
        return null;
    }

    private android.renderscript.ScriptGroup$Node findNode(android.renderscript.Script)
    {
        android.renderscript.ScriptGroup$Builder r0;
        android.renderscript.Script r1, $r6;
        java.util.ArrayList $r2, $r3, $r7;
        int $i0, i1;
        java.lang.Object $r4, $r8;
        android.renderscript.ScriptGroup$Node $r5, $r9;

        r0 := @this: android.renderscript.ScriptGroup$Builder;

        r1 := @parameter0: android.renderscript.Script;

        i1 = 0;

     label1:
        $r2 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if i1 >= $i0 goto label3;

        $r3 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r5 = (android.renderscript.ScriptGroup$Node) $r4;

        $r6 = $r5.<android.renderscript.ScriptGroup$Node: android.renderscript.Script mScript>;

        if r1 != $r6 goto label2;

        $r7 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r9 = (android.renderscript.ScriptGroup$Node) $r8;

        return $r9;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return null;
    }

    private void mergeDAGs(int, int)
    {
        android.renderscript.ScriptGroup$Builder r0;
        int i0, i1, $i2, $i3, i4;
        java.util.ArrayList $r1, $r2, $r5;
        java.lang.Object $r3, $r6;
        android.renderscript.ScriptGroup$Node $r4, $r7;

        r0 := @this: android.renderscript.ScriptGroup$Builder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i4 = 0;

     label1:
        $r1 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $i2 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if i4 >= $i2 goto label3;

        $r2 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        $r4 = (android.renderscript.ScriptGroup$Node) $r3;

        $i3 = $r4.<android.renderscript.ScriptGroup$Node: int dagNumber>;

        if $i3 != i1 goto label2;

        $r5 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        $r7 = (android.renderscript.ScriptGroup$Node) $r6;

        $r7.<android.renderscript.ScriptGroup$Node: int dagNumber> = i0;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        return;
    }

    private void validateCycle(android.renderscript.ScriptGroup$Node, android.renderscript.ScriptGroup$Node)
    {
        android.renderscript.ScriptGroup$Builder r0;
        android.renderscript.ScriptGroup$Node r1, r2, r3, r16;
        java.util.ArrayList $r4, $r5;
        int $i0, i1;
        java.lang.Object $r6;
        android.renderscript.Script$KernelID $r7, $r12;
        android.renderscript.Script$FieldID $r8, $r9;
        android.renderscript.Script $r10, $r13;
        boolean $z0, $z1;
        android.renderscript.RSInvalidStateException $r11, $r14;
        android.renderscript.ScriptGroup$ConnectLine r15;

        r0 := @this: android.renderscript.ScriptGroup$Builder;

        r1 := @parameter0: android.renderscript.ScriptGroup$Node;

        r2 := @parameter1: android.renderscript.ScriptGroup$Node;

        i1 = 0;

     label1:
        $r4 = r1.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mOutputs>;

        $i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        if i1 >= $i0 goto label6;

        $r5 = r1.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mOutputs>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r15 = (android.renderscript.ScriptGroup$ConnectLine) $r6;

        $r7 = r15.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Script$KernelID mToK>;

        if $r7 == null goto label3;

        $r12 = r15.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Script$KernelID mToK>;

        $r13 = $r12.<android.renderscript.Script$KernelID: android.renderscript.Script mScript>;

        r3 = specialinvoke r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.ScriptGroup$Node findNode(android.renderscript.Script)>($r13);

        $z1 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        if $z1 != 0 goto label2;

        specialinvoke r0.<android.renderscript.ScriptGroup$Builder: void validateCycle(android.renderscript.ScriptGroup$Node,android.renderscript.ScriptGroup$Node)>(r3, r2);

        goto label3;

     label2:
        $r14 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r14.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Loops in group not allowed.");

        throw $r14;

     label3:
        $r8 = r15.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Script$FieldID mToF>;

        if $r8 == null goto label5;

        $r9 = r15.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Script$FieldID mToF>;

        $r10 = $r9.<android.renderscript.Script$FieldID: android.renderscript.Script mScript>;

        r16 = specialinvoke r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.ScriptGroup$Node findNode(android.renderscript.Script)>($r10);

        $z0 = virtualinvoke r16.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        if $z0 != 0 goto label4;

        specialinvoke r0.<android.renderscript.ScriptGroup$Builder: void validateCycle(android.renderscript.ScriptGroup$Node,android.renderscript.ScriptGroup$Node)>(r16, r2);

        goto label5;

     label4:
        $r11 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r11.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Loops in group not allowed.");

        throw $r11;

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        return;
    }

    private void validateDAG()
    {
        android.renderscript.ScriptGroup$Builder r0;
        android.renderscript.ScriptGroup$Node r1, $r5, $r9;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        java.util.ArrayList $r2, $r3, $r6, $r7, $r11, $r13, $r14, $r15;
        java.lang.Object $r4, $r8, $r12;
        android.renderscript.RSInvalidStateException $r10, $r16;

        r0 := @this: android.renderscript.ScriptGroup$Builder;

        i8 = 0;

     label1:
        $r2 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $i1 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if i8 >= $i1 goto label5;

        $r11 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $r12 = virtualinvoke $r11.<java.util.ArrayList: java.lang.Object get(int)>(i8);

        r1 = (android.renderscript.ScriptGroup$Node) $r12;

        $r13 = r1.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mInputs>;

        $i4 = virtualinvoke $r13.<java.util.ArrayList: int size()>();

        if $i4 != 0 goto label4;

        $r14 = r1.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mOutputs>;

        $i5 = virtualinvoke $r14.<java.util.ArrayList: int size()>();

        if $i5 != 0 goto label3;

        $r15 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $i7 = virtualinvoke $r15.<java.util.ArrayList: int size()>();

        if $i7 > 1 goto label2;

        goto label3;

     label2:
        $r16 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r16.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Groups cannot contain unconnected scripts");

        throw $r16;

     label3:
        $i6 = i8 + 1;

        specialinvoke r0.<android.renderscript.ScriptGroup$Builder: void validateDAGRecurse(android.renderscript.ScriptGroup$Node,int)>(r1, $i6);

     label4:
        i8 = i8 + 1;

        goto label1;

     label5:
        $r3 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r5 = (android.renderscript.ScriptGroup$Node) $r4;

        i0 = $r5.<android.renderscript.ScriptGroup$Node: int dagNumber>;

        i9 = 0;

     label6:
        $r6 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $i2 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        if i9 >= $i2 goto label8;

        $r7 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i9);

        $r9 = (android.renderscript.ScriptGroup$Node) $r8;

        $i3 = $r9.<android.renderscript.ScriptGroup$Node: int dagNumber>;

        if $i3 != i0 goto label7;

        i9 = i9 + 1;

        goto label6;

     label7:
        $r10 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r10.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Multiple DAGs in group not allowed.");

        throw $r10;

     label8:
        return;
    }

    private void validateDAGRecurse(android.renderscript.ScriptGroup$Node, int)
    {
        android.renderscript.ScriptGroup$Builder r0;
        android.renderscript.ScriptGroup$Node r1, $r9, $r12;
        int i0, $i1, $i2, $i3, i4, $i5;
        android.renderscript.ScriptGroup$ConnectLine r2;
        java.util.ArrayList $r3, $r13;
        java.lang.Object $r4;
        android.renderscript.Script$KernelID $r5, $r10;
        android.renderscript.Script$FieldID $r6, $r7;
        android.renderscript.Script $r8, $r11;

        r0 := @this: android.renderscript.ScriptGroup$Builder;

        r1 := @parameter0: android.renderscript.ScriptGroup$Node;

        i0 := @parameter1: int;

        $i1 = r1.<android.renderscript.ScriptGroup$Node: int dagNumber>;

        if $i1 == 0 goto label1;

        $i2 = r1.<android.renderscript.ScriptGroup$Node: int dagNumber>;

        if $i2 == i0 goto label1;

        $i3 = r1.<android.renderscript.ScriptGroup$Node: int dagNumber>;

        specialinvoke r0.<android.renderscript.ScriptGroup$Builder: void mergeDAGs(int,int)>($i3, i0);

        return;

     label1:
        r1.<android.renderscript.ScriptGroup$Node: int dagNumber> = i0;

        i4 = 0;

     label2:
        $r13 = r1.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mOutputs>;

        $i5 = virtualinvoke $r13.<java.util.ArrayList: int size()>();

        if i4 >= $i5 goto label5;

        $r3 = r1.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mOutputs>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        r2 = (android.renderscript.ScriptGroup$ConnectLine) $r4;

        $r5 = r2.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Script$KernelID mToK>;

        if $r5 == null goto label3;

        $r10 = r2.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Script$KernelID mToK>;

        $r11 = $r10.<android.renderscript.Script$KernelID: android.renderscript.Script mScript>;

        $r12 = specialinvoke r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.ScriptGroup$Node findNode(android.renderscript.Script)>($r11);

        specialinvoke r0.<android.renderscript.ScriptGroup$Builder: void validateDAGRecurse(android.renderscript.ScriptGroup$Node,int)>($r12, i0);

     label3:
        $r6 = r2.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Script$FieldID mToF>;

        if $r6 == null goto label4;

        $r7 = r2.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Script$FieldID mToF>;

        $r8 = $r7.<android.renderscript.Script$FieldID: android.renderscript.Script mScript>;

        $r9 = specialinvoke r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.ScriptGroup$Node findNode(android.renderscript.Script)>($r8);

        specialinvoke r0.<android.renderscript.ScriptGroup$Builder: void validateDAGRecurse(android.renderscript.ScriptGroup$Node,int)>($r9, i0);

     label4:
        i4 = i4 + 1;

        goto label2;

     label5:
        return;
    }

    public android.renderscript.ScriptGroup$Builder addConnection(android.renderscript.Type, android.renderscript.Script$KernelID, android.renderscript.Script$FieldID)
    {
        android.renderscript.ScriptGroup$Builder r0;
        android.renderscript.Type r1;
        android.renderscript.Script$KernelID r2;
        android.renderscript.Script$FieldID r3;
        android.renderscript.ScriptGroup$Node r4, r5;
        android.renderscript.RSInvalidStateException $r7, $r9;
        android.renderscript.Script $r8;
        android.renderscript.ScriptGroup$ConnectLine $r10, $r11;
        java.util.ArrayList $r12, $r13, $r14;

        r0 := @this: android.renderscript.ScriptGroup$Builder;

        r1 := @parameter0: android.renderscript.Type;

        r2 := @parameter1: android.renderscript.Script$KernelID;

        r3 := @parameter2: android.renderscript.Script$FieldID;

        r4 = specialinvoke r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.ScriptGroup$Node findNode(android.renderscript.Script$KernelID)>(r2);

        if r4 == null goto label2;

        $r8 = r3.<android.renderscript.Script$FieldID: android.renderscript.Script mScript>;

        r5 = specialinvoke r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.ScriptGroup$Node findNode(android.renderscript.Script)>($r8);

        if r5 == null goto label1;

        $r10 = new android.renderscript.ScriptGroup$ConnectLine;

        specialinvoke $r10.<android.renderscript.ScriptGroup$ConnectLine: void <init>(android.renderscript.Type,android.renderscript.Script$KernelID,android.renderscript.Script$FieldID)>(r1, r2, r3);

        $r12 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mLines>;

        $r11 = new android.renderscript.ScriptGroup$ConnectLine;

        specialinvoke $r11.<android.renderscript.ScriptGroup$ConnectLine: void <init>(android.renderscript.Type,android.renderscript.Script$KernelID,android.renderscript.Script$FieldID)>(r1, r2, r3);

        virtualinvoke $r12.<java.util.ArrayList: boolean add(java.lang.Object)>($r11);

        $r13 = r4.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mOutputs>;

        virtualinvoke $r13.<java.util.ArrayList: boolean add(java.lang.Object)>($r10);

        $r14 = r5.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mInputs>;

        virtualinvoke $r14.<java.util.ArrayList: boolean add(java.lang.Object)>($r10);

        specialinvoke r0.<android.renderscript.ScriptGroup$Builder: void validateCycle(android.renderscript.ScriptGroup$Node,android.renderscript.ScriptGroup$Node)>(r4, r4);

        return r0;

     label1:
        $r9 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r9.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("To script not found.");

        throw $r9;

     label2:
        $r7 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r7.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("From script not found.");

        throw $r7;
    }

    public android.renderscript.ScriptGroup$Builder addConnection(android.renderscript.Type, android.renderscript.Script$KernelID, android.renderscript.Script$KernelID)
    {
        android.renderscript.ScriptGroup$Builder r0;
        android.renderscript.Type r1;
        android.renderscript.Script$KernelID r2, r3;
        android.renderscript.ScriptGroup$Node r4, r5;
        android.renderscript.RSInvalidStateException $r7, $r8;
        android.renderscript.ScriptGroup$ConnectLine $r9, $r10;
        java.util.ArrayList $r11, $r12, $r13;

        r0 := @this: android.renderscript.ScriptGroup$Builder;

        r1 := @parameter0: android.renderscript.Type;

        r2 := @parameter1: android.renderscript.Script$KernelID;

        r3 := @parameter2: android.renderscript.Script$KernelID;

        r4 = specialinvoke r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.ScriptGroup$Node findNode(android.renderscript.Script$KernelID)>(r2);

        if r4 == null goto label2;

        r5 = specialinvoke r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.ScriptGroup$Node findNode(android.renderscript.Script$KernelID)>(r3);

        if r5 == null goto label1;

        $r9 = new android.renderscript.ScriptGroup$ConnectLine;

        specialinvoke $r9.<android.renderscript.ScriptGroup$ConnectLine: void <init>(android.renderscript.Type,android.renderscript.Script$KernelID,android.renderscript.Script$KernelID)>(r1, r2, r3);

        $r11 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mLines>;

        $r10 = new android.renderscript.ScriptGroup$ConnectLine;

        specialinvoke $r10.<android.renderscript.ScriptGroup$ConnectLine: void <init>(android.renderscript.Type,android.renderscript.Script$KernelID,android.renderscript.Script$KernelID)>(r1, r2, r3);

        virtualinvoke $r11.<java.util.ArrayList: boolean add(java.lang.Object)>($r10);

        $r12 = r4.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mOutputs>;

        virtualinvoke $r12.<java.util.ArrayList: boolean add(java.lang.Object)>($r9);

        $r13 = r5.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mInputs>;

        virtualinvoke $r13.<java.util.ArrayList: boolean add(java.lang.Object)>($r9);

        specialinvoke r0.<android.renderscript.ScriptGroup$Builder: void validateCycle(android.renderscript.ScriptGroup$Node,android.renderscript.ScriptGroup$Node)>(r4, r4);

        return r0;

     label1:
        $r8 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r8.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("To script not found.");

        throw $r8;

     label2:
        $r7 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r7.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("From script not found.");

        throw $r7;
    }

    public android.renderscript.ScriptGroup$Builder addKernel(android.renderscript.Script$KernelID)
    {
        android.renderscript.ScriptGroup$Builder r0;
        android.renderscript.Script$KernelID r1;
        android.renderscript.ScriptGroup$Node r2, $r5, $r8, r11;
        java.util.ArrayList $r3, $r7, $r10;
        int $i0, $i1, $i2;
        android.renderscript.RSInvalidStateException $r4;
        android.renderscript.Script $r6, $r9;

        r0 := @this: android.renderscript.ScriptGroup$Builder;

        r1 := @parameter0: android.renderscript.Script$KernelID;

        $r3 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mLines>;

        $i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        if $i0 != 0 goto label3;

        $r5 = specialinvoke r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.ScriptGroup$Node findNode(android.renderscript.Script$KernelID)>(r1);

        if $r5 == null goto label1;

        return r0;

     label1:
        $i1 = r0.<android.renderscript.ScriptGroup$Builder: int mKernelCount>;

        $i2 = $i1 + 1;

        r0.<android.renderscript.ScriptGroup$Builder: int mKernelCount> = $i2;

        $r6 = r1.<android.renderscript.Script$KernelID: android.renderscript.Script mScript>;

        r2 = specialinvoke r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.ScriptGroup$Node findNode(android.renderscript.Script)>($r6);

        r11 = r2;

        if r2 != null goto label2;

        $r8 = new android.renderscript.ScriptGroup$Node;

        $r9 = r1.<android.renderscript.Script$KernelID: android.renderscript.Script mScript>;

        specialinvoke $r8.<android.renderscript.ScriptGroup$Node: void <init>(android.renderscript.Script)>($r9);

        r11 = $r8;

        $r10 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        virtualinvoke $r10.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

     label2:
        $r7 = r11.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mKernels>;

        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        return r0;

     label3:
        $r4 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r4.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Kernels may not be added once connections exist.");

        throw $r4;
    }

    public android.renderscript.ScriptGroup create()
    {
        android.renderscript.ScriptGroup$Builder r0;
        long[] r3, r4, r5, r63, r66;
        long l0, $l16, $l17, $l18, $l19, $l21;
        java.util.ArrayList $r6, $r8, $r9, $r10, $r11, $r13, $r14, $r15, $r16, $r17, $r30, $r42, $r44, $r45, $r48, $r49, $r52, $r56, $r60;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i15, $i20, $i22, $i23, i24, i25, i26, i27, i28, i29, i30, i31, i32;
        android.renderscript.RSInvalidStateException $r7;
        android.renderscript.RSRuntimeException $r12, $r19;
        android.renderscript.RenderScript $r18, $r21, $r32, $r36, $r38, $r40, $r47;
        byte $b11;
        android.renderscript.ScriptGroup $r20;
        android.renderscript.ScriptGroup$IO[] $r22, $r23, $r24, $r27;
        java.lang.Object $r25, $r28, $r31, $r43, $r46, $r53, $r57, $r61;
        android.renderscript.ScriptGroup$IO $r26, $r29, $r50, $r51;
        android.renderscript.Script$KernelID $r33, $r34, $r41, $r55, $r59, r65;
        android.renderscript.Script$FieldID $r35, $r39;
        android.renderscript.Type $r37;
        android.renderscript.ScriptGroup$ConnectLine $r54, $r58, r67;
        android.renderscript.ScriptGroup$Node $r62, r64;
        boolean z2, z3;

        r0 := @this: android.renderscript.ScriptGroup$Builder;

        $r6 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $i1 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        if $i1 == 0 goto label25;

        i24 = 0;

     label01:
        $r8 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $i2 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        if i24 >= $i2 goto label02;

        $r60 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $r61 = virtualinvoke $r60.<java.util.ArrayList: java.lang.Object get(int)>(i24);

        $r62 = (android.renderscript.ScriptGroup$Node) $r61;

        $r62.<android.renderscript.ScriptGroup$Node: int dagNumber> = 0;

        i24 = i24 + 1;

        goto label01;

     label02:
        specialinvoke r0.<android.renderscript.ScriptGroup$Builder: void validateDAG()>();

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        $i3 = r0.<android.renderscript.ScriptGroup$Builder: int mKernelCount>;

        r63 = newarray (long)[$i3];

        i25 = 0;

        i26 = 0;

     label03:
        $r11 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $i4 = virtualinvoke $r11.<java.util.ArrayList: int size()>();

        if i25 >= $i4 goto label14;

        $r42 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mNodes>;

        $r43 = virtualinvoke $r42.<java.util.ArrayList: java.lang.Object get(int)>(i25);

        r64 = (android.renderscript.ScriptGroup$Node) $r43;

        i27 = 0;

     label04:
        $r44 = r64.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mKernels>;

        $i20 = virtualinvoke $r44.<java.util.ArrayList: int size()>();

        if i27 >= $i20 goto label13;

        $r45 = r64.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mKernels>;

        $r46 = virtualinvoke $r45.<java.util.ArrayList: java.lang.Object get(int)>(i27);

        r65 = (android.renderscript.Script$KernelID) $r46;

        $r47 = r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.RenderScript mRS>;

        $l21 = virtualinvoke r65.<android.renderscript.Script$KernelID: long getID(android.renderscript.RenderScript)>($r47);

        r63[i26] = $l21;

        z2 = 0;

        z3 = 0;

        i28 = 0;

     label05:
        $r48 = r64.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mInputs>;

        $i22 = virtualinvoke $r48.<java.util.ArrayList: int size()>();

        if i28 >= $i22 goto label07;

        $r56 = r64.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mInputs>;

        $r57 = virtualinvoke $r56.<java.util.ArrayList: java.lang.Object get(int)>(i28);

        $r58 = (android.renderscript.ScriptGroup$ConnectLine) $r57;

        $r59 = $r58.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Script$KernelID mToK>;

        if $r59 != r65 goto label06;

        z2 = 1;

     label06:
        i28 = i28 + 1;

        goto label05;

     label07:
        i29 = 0;

     label08:
        $r49 = r64.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mOutputs>;

        $i23 = virtualinvoke $r49.<java.util.ArrayList: int size()>();

        if i29 >= $i23 goto label10;

        $r52 = r64.<android.renderscript.ScriptGroup$Node: java.util.ArrayList mOutputs>;

        $r53 = virtualinvoke $r52.<java.util.ArrayList: java.lang.Object get(int)>(i29);

        $r54 = (android.renderscript.ScriptGroup$ConnectLine) $r53;

        $r55 = $r54.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Script$KernelID mFrom>;

        if $r55 != r65 goto label09;

        z3 = 1;

     label09:
        i29 = i29 + 1;

        goto label08;

     label10:
        if z2 != 0 goto label11;

        $r51 = new android.renderscript.ScriptGroup$IO;

        specialinvoke $r51.<android.renderscript.ScriptGroup$IO: void <init>(android.renderscript.Script$KernelID)>(r65);

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>($r51);

     label11:
        if z3 != 0 goto label12;

        $r50 = new android.renderscript.ScriptGroup$IO;

        specialinvoke $r50.<android.renderscript.ScriptGroup$IO: void <init>(android.renderscript.Script$KernelID)>(r65);

        virtualinvoke $r10.<java.util.ArrayList: boolean add(java.lang.Object)>($r50);

     label12:
        i27 = i27 + 1;

        i26 = i26 + 1;

        goto label04;

     label13:
        i25 = i25 + 1;

        goto label03;

     label14:
        $i5 = r0.<android.renderscript.ScriptGroup$Builder: int mKernelCount>;

        if i26 != $i5 goto label24;

        $r13 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mLines>;

        $i6 = virtualinvoke $r13.<java.util.ArrayList: int size()>();

        r66 = newarray (long)[$i6];

        $r14 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mLines>;

        $i7 = virtualinvoke $r14.<java.util.ArrayList: int size()>();

        r3 = newarray (long)[$i7];

        $r15 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mLines>;

        $i8 = virtualinvoke $r15.<java.util.ArrayList: int size()>();

        r4 = newarray (long)[$i8];

        $r16 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mLines>;

        $i9 = virtualinvoke $r16.<java.util.ArrayList: int size()>();

        r5 = newarray (long)[$i9];

        i30 = 0;

     label15:
        $r17 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mLines>;

        $i10 = virtualinvoke $r17.<java.util.ArrayList: int size()>();

        if i30 >= $i10 goto label18;

        $r30 = r0.<android.renderscript.ScriptGroup$Builder: java.util.ArrayList mLines>;

        $r31 = virtualinvoke $r30.<java.util.ArrayList: java.lang.Object get(int)>(i30);

        r67 = (android.renderscript.ScriptGroup$ConnectLine) $r31;

        $r33 = r67.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Script$KernelID mFrom>;

        $r32 = r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.RenderScript mRS>;

        $l16 = virtualinvoke $r33.<android.renderscript.Script$KernelID: long getID(android.renderscript.RenderScript)>($r32);

        r66[i30] = $l16;

        $r34 = r67.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Script$KernelID mToK>;

        if $r34 == null goto label16;

        $r41 = r67.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Script$KernelID mToK>;

        $r40 = r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.RenderScript mRS>;

        $l19 = virtualinvoke $r41.<android.renderscript.Script$KernelID: long getID(android.renderscript.RenderScript)>($r40);

        r3[i30] = $l19;

     label16:
        $r35 = r67.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Script$FieldID mToF>;

        if $r35 == null goto label17;

        $r39 = r67.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Script$FieldID mToF>;

        $r38 = r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.RenderScript mRS>;

        $l18 = virtualinvoke $r39.<android.renderscript.Script$FieldID: long getID(android.renderscript.RenderScript)>($r38);

        r4[i30] = $l18;

     label17:
        $r37 = r67.<android.renderscript.ScriptGroup$ConnectLine: android.renderscript.Type mAllocationType>;

        $r36 = r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.RenderScript mRS>;

        $l17 = virtualinvoke $r37.<android.renderscript.Type: long getID(android.renderscript.RenderScript)>($r36);

        r5[i30] = $l17;

        i30 = i30 + 1;

        goto label15;

     label18:
        $r18 = r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.RenderScript mRS>;

        l0 = virtualinvoke $r18.<android.renderscript.RenderScript: long nScriptGroupCreate(long[],long[],long[],long[],long[])>(r63, r66, r3, r4, r5);

        $b11 = l0 cmp 0L;

        if $b11 == 0 goto label23;

        $r20 = new android.renderscript.ScriptGroup;

        $r21 = r0.<android.renderscript.ScriptGroup$Builder: android.renderscript.RenderScript mRS>;

        specialinvoke $r20.<android.renderscript.ScriptGroup: void <init>(long,android.renderscript.RenderScript)>(l0, $r21);

        $i12 = virtualinvoke $r10.<java.util.ArrayList: int size()>();

        $r22 = newarray (android.renderscript.ScriptGroup$IO)[$i12];

        $r20.<android.renderscript.ScriptGroup: android.renderscript.ScriptGroup$IO[] mOutputs> = $r22;

        i31 = 0;

     label19:
        $i13 = virtualinvoke $r10.<java.util.ArrayList: int size()>();

        if i31 >= $i13 goto label20;

        $r27 = $r20.<android.renderscript.ScriptGroup: android.renderscript.ScriptGroup$IO[] mOutputs>;

        $r28 = virtualinvoke $r10.<java.util.ArrayList: java.lang.Object get(int)>(i31);

        $r29 = (android.renderscript.ScriptGroup$IO) $r28;

        $r27[i31] = $r29;

        i31 = i31 + 1;

        goto label19;

     label20:
        $i14 = virtualinvoke $r9.<java.util.ArrayList: int size()>();

        $r23 = newarray (android.renderscript.ScriptGroup$IO)[$i14];

        $r20.<android.renderscript.ScriptGroup: android.renderscript.ScriptGroup$IO[] mInputs> = $r23;

        i32 = 0;

     label21:
        $i15 = virtualinvoke $r9.<java.util.ArrayList: int size()>();

        if i32 >= $i15 goto label22;

        $r24 = $r20.<android.renderscript.ScriptGroup: android.renderscript.ScriptGroup$IO[] mInputs>;

        $r25 = virtualinvoke $r9.<java.util.ArrayList: java.lang.Object get(int)>(i32);

        $r26 = (android.renderscript.ScriptGroup$IO) $r25;

        $r24[i32] = $r26;

        i32 = i32 + 1;

        goto label21;

     label22:
        return $r20;

     label23:
        $r19 = new android.renderscript.RSRuntimeException;

        specialinvoke $r19.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Object creation error, should not happen.");

        throw $r19;

     label24:
        $r12 = new android.renderscript.RSRuntimeException;

        specialinvoke $r12.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Count mismatch, should not happen.");

        throw $r12;

     label25:
        $r7 = new android.renderscript.RSInvalidStateException;

        specialinvoke $r7.<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>("Empty script groups are not allowed");

        throw $r7;
    }
}
