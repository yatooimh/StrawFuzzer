public final class android.renderscript.ScriptIntrinsicBLAS extends android.renderscript.ScriptIntrinsic
{
    public static final int CONJ_TRANSPOSE;
    public static final int LEFT;
    public static final int LOWER;
    public static final int NON_UNIT;
    public static final int NO_TRANSPOSE;
    public static final int RIGHT;
    private static final int RsBlas_bnnm;
    private static final int RsBlas_caxpy;
    private static final int RsBlas_ccopy;
    private static final int RsBlas_cdotc_sub;
    private static final int RsBlas_cdotu_sub;
    private static final int RsBlas_cgbmv;
    private static final int RsBlas_cgemm;
    private static final int RsBlas_cgemv;
    private static final int RsBlas_cgerc;
    private static final int RsBlas_cgeru;
    private static final int RsBlas_chbmv;
    private static final int RsBlas_chemm;
    private static final int RsBlas_chemv;
    private static final int RsBlas_cher;
    private static final int RsBlas_cher2;
    private static final int RsBlas_cher2k;
    private static final int RsBlas_cherk;
    private static final int RsBlas_chpmv;
    private static final int RsBlas_chpr;
    private static final int RsBlas_chpr2;
    private static final int RsBlas_cscal;
    private static final int RsBlas_csscal;
    private static final int RsBlas_cswap;
    private static final int RsBlas_csymm;
    private static final int RsBlas_csyr2k;
    private static final int RsBlas_csyrk;
    private static final int RsBlas_ctbmv;
    private static final int RsBlas_ctbsv;
    private static final int RsBlas_ctpmv;
    private static final int RsBlas_ctpsv;
    private static final int RsBlas_ctrmm;
    private static final int RsBlas_ctrmv;
    private static final int RsBlas_ctrsm;
    private static final int RsBlas_ctrsv;
    private static final int RsBlas_dasum;
    private static final int RsBlas_daxpy;
    private static final int RsBlas_dcopy;
    private static final int RsBlas_ddot;
    private static final int RsBlas_dgbmv;
    private static final int RsBlas_dgemm;
    private static final int RsBlas_dgemv;
    private static final int RsBlas_dger;
    private static final int RsBlas_dnrm2;
    private static final int RsBlas_drot;
    private static final int RsBlas_drotg;
    private static final int RsBlas_drotm;
    private static final int RsBlas_drotmg;
    private static final int RsBlas_dsbmv;
    private static final int RsBlas_dscal;
    private static final int RsBlas_dsdot;
    private static final int RsBlas_dspmv;
    private static final int RsBlas_dspr;
    private static final int RsBlas_dspr2;
    private static final int RsBlas_dswap;
    private static final int RsBlas_dsymm;
    private static final int RsBlas_dsymv;
    private static final int RsBlas_dsyr;
    private static final int RsBlas_dsyr2;
    private static final int RsBlas_dsyr2k;
    private static final int RsBlas_dsyrk;
    private static final int RsBlas_dtbmv;
    private static final int RsBlas_dtbsv;
    private static final int RsBlas_dtpmv;
    private static final int RsBlas_dtpsv;
    private static final int RsBlas_dtrmm;
    private static final int RsBlas_dtrmv;
    private static final int RsBlas_dtrsm;
    private static final int RsBlas_dtrsv;
    private static final int RsBlas_dzasum;
    private static final int RsBlas_dznrm2;
    private static final int RsBlas_icamax;
    private static final int RsBlas_idamax;
    private static final int RsBlas_isamax;
    private static final int RsBlas_izamax;
    private static final int RsBlas_sasum;
    private static final int RsBlas_saxpy;
    private static final int RsBlas_scasum;
    private static final int RsBlas_scnrm2;
    private static final int RsBlas_scopy;
    private static final int RsBlas_sdot;
    private static final int RsBlas_sdsdot;
    private static final int RsBlas_sgbmv;
    private static final int RsBlas_sgemm;
    private static final int RsBlas_sgemv;
    private static final int RsBlas_sger;
    private static final int RsBlas_snrm2;
    private static final int RsBlas_srot;
    private static final int RsBlas_srotg;
    private static final int RsBlas_srotm;
    private static final int RsBlas_srotmg;
    private static final int RsBlas_ssbmv;
    private static final int RsBlas_sscal;
    private static final int RsBlas_sspmv;
    private static final int RsBlas_sspr;
    private static final int RsBlas_sspr2;
    private static final int RsBlas_sswap;
    private static final int RsBlas_ssymm;
    private static final int RsBlas_ssymv;
    private static final int RsBlas_ssyr;
    private static final int RsBlas_ssyr2;
    private static final int RsBlas_ssyr2k;
    private static final int RsBlas_ssyrk;
    private static final int RsBlas_stbmv;
    private static final int RsBlas_stbsv;
    private static final int RsBlas_stpmv;
    private static final int RsBlas_stpsv;
    private static final int RsBlas_strmm;
    private static final int RsBlas_strmv;
    private static final int RsBlas_strsm;
    private static final int RsBlas_strsv;
    private static final int RsBlas_zaxpy;
    private static final int RsBlas_zcopy;
    private static final int RsBlas_zdotc_sub;
    private static final int RsBlas_zdotu_sub;
    private static final int RsBlas_zdscal;
    private static final int RsBlas_zgbmv;
    private static final int RsBlas_zgemm;
    private static final int RsBlas_zgemv;
    private static final int RsBlas_zgerc;
    private static final int RsBlas_zgeru;
    private static final int RsBlas_zhbmv;
    private static final int RsBlas_zhemm;
    private static final int RsBlas_zhemv;
    private static final int RsBlas_zher;
    private static final int RsBlas_zher2;
    private static final int RsBlas_zher2k;
    private static final int RsBlas_zherk;
    private static final int RsBlas_zhpmv;
    private static final int RsBlas_zhpr;
    private static final int RsBlas_zhpr2;
    private static final int RsBlas_zscal;
    private static final int RsBlas_zswap;
    private static final int RsBlas_zsymm;
    private static final int RsBlas_zsyr2k;
    private static final int RsBlas_zsyrk;
    private static final int RsBlas_ztbmv;
    private static final int RsBlas_ztbsv;
    private static final int RsBlas_ztpmv;
    private static final int RsBlas_ztpsv;
    private static final int RsBlas_ztrmm;
    private static final int RsBlas_ztrmv;
    private static final int RsBlas_ztrsm;
    private static final int RsBlas_ztrsv;
    public static final int TRANSPOSE;
    public static final int UNIT;
    public static final int UPPER;
    private android.renderscript.Allocation mLUT;

    private void <init>(long, android.renderscript.RenderScript)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        long l0;
        android.renderscript.RenderScript r1;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        l0 := @parameter0: long;

        r1 := @parameter1: android.renderscript.RenderScript;

        specialinvoke r0.<android.renderscript.ScriptIntrinsic: void <init>(long,android.renderscript.RenderScript)>(l0, r1);

        return;
    }

    public static android.renderscript.ScriptIntrinsicBLAS create(android.renderscript.RenderScript)
    {
        android.renderscript.RenderScript r0;
        android.renderscript.ScriptIntrinsicBLAS $r1;
        android.renderscript.Element $r2;
        long $l0, $l1;

        r0 := @parameter0: android.renderscript.RenderScript;

        $r1 = new android.renderscript.ScriptIntrinsicBLAS;

        $r2 = staticinvoke <android.renderscript.Element: android.renderscript.Element U32(android.renderscript.RenderScript)>(r0);

        $l0 = virtualinvoke $r2.<android.renderscript.Element: long getID(android.renderscript.RenderScript)>(r0);

        $l1 = virtualinvoke r0.<android.renderscript.RenderScript: long nScriptIntrinsicCreate(int,long)>(13, $l0);

        specialinvoke $r1.<android.renderscript.ScriptIntrinsicBLAS: void <init>(long,android.renderscript.RenderScript)>($l1, r0);

        return $r1;
    }

    static void validateConjTranspose(int)
    {
        int i0;
        android.renderscript.RSRuntimeException $r0;

        i0 := @parameter0: int;

        if i0 == 111 goto label2;

        if i0 != 113 goto label1;

        goto label2;

     label1:
        $r0 = new android.renderscript.RSRuntimeException;

        specialinvoke $r0.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Invalid transpose passed to BLAS");

        throw $r0;

     label2:
        return;
    }

    static void validateDiag(int)
    {
        int i0;
        android.renderscript.RSRuntimeException $r0;

        i0 := @parameter0: int;

        if i0 == 131 goto label2;

        if i0 != 132 goto label1;

        goto label2;

     label1:
        $r0 = new android.renderscript.RSRuntimeException;

        specialinvoke $r0.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Invalid diag passed to BLAS");

        throw $r0;

     label2:
        return;
    }

    static void validateGEMV(android.renderscript.Element, int, android.renderscript.Allocation, android.renderscript.Allocation, int, android.renderscript.Allocation, int)
    {
        android.renderscript.Element r0, $r7, $r9, $r11;
        android.renderscript.Allocation r1, r2, r3;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16, i17, i18;
        android.renderscript.Type $r4, $r5, $r6, $r8, $r10, $r12, $r14, $r16, $r18;
        boolean $z0, $z1, $z2;
        android.renderscript.RSRuntimeException $r13, $r15, $r17, $r19;

        r0 := @parameter0: android.renderscript.Element;

        i15 := @parameter1: int;

        r1 := @parameter2: android.renderscript.Allocation;

        r2 := @parameter3: android.renderscript.Allocation;

        i16 := @parameter4: int;

        r3 := @parameter5: android.renderscript.Allocation;

        i0 := @parameter6: int;

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateTranspose(int)>(i15);

        $r4 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i1 = virtualinvoke $r4.<android.renderscript.Type: int getY()>();

        $r5 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i2 = virtualinvoke $r5.<android.renderscript.Type: int getX()>();

        $r6 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r7 = virtualinvoke $r6.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z0 = virtualinvoke $r7.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z0 == 0 goto label6;

        $r8 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r9 = virtualinvoke $r8.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z1 = virtualinvoke $r9.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z1 == 0 goto label6;

        $r10 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r11 = virtualinvoke $r10.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z2 = virtualinvoke $r11.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z2 == 0 goto label6;

        $r12 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i3 = virtualinvoke $r12.<android.renderscript.Type: int getY()>();

        if $i3 > 1 goto label5;

        $r14 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i4 = virtualinvoke $r14.<android.renderscript.Type: int getY()>();

        if $i4 > 1 goto label5;

        if i16 <= 0 goto label4;

        if i0 <= 0 goto label4;

        if i15 != 111 goto label1;

        $i11 = i2 - 1;

        $i12 = $i11 * i16;

        i17 = $i12 + 1;

        $i13 = i1 - 1;

        $i14 = $i13 * i0;

        i18 = $i14 + 1;

        goto label2;

     label1:
        $i5 = i1 - 1;

        $i6 = $i5 * i16;

        i17 = $i6 + 1;

        $i7 = i2 - 1;

        $i8 = $i7 * i0;

        i18 = $i8 + 1;

     label2:
        $r16 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i9 = virtualinvoke $r16.<android.renderscript.Type: int getX()>();

        if $i9 != i17 goto label3;

        $r18 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i10 = virtualinvoke $r18.<android.renderscript.Type: int getX()>();

        if $i10 != i18 goto label3;

        return;

     label3:
        $r17 = new android.renderscript.RSRuntimeException;

        specialinvoke $r17.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Incorrect vector dimensions for GEMV");

        throw $r17;

     label4:
        $r15 = new android.renderscript.RSRuntimeException;

        specialinvoke $r15.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Vector increments must be greater than 0");

        throw $r15;

     label5:
        $r13 = new android.renderscript.RSRuntimeException;

        specialinvoke $r13.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("BLAS vectors must have Y dimension of 0 or 1");

        throw $r13;

     label6:
        $r19 = new android.renderscript.RSRuntimeException;

        specialinvoke $r19.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Called BLAS with wrong Element type");

        throw $r19;
    }

    static void validateGER(android.renderscript.Element, android.renderscript.Allocation, int, android.renderscript.Allocation, int, android.renderscript.Allocation)
    {
        android.renderscript.Element r0, $r5, $r7, $r9;
        android.renderscript.Allocation r1, r2, r3;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        android.renderscript.Type $r4, $r6, $r8, $r10, $r12, $r13, $r14, $r17, $r19;
        boolean $z0, $z1, $z2;
        android.renderscript.RSRuntimeException $r11, $r15, $r16, $r18, $r20, $r21;

        r0 := @parameter0: android.renderscript.Element;

        r1 := @parameter1: android.renderscript.Allocation;

        i0 := @parameter2: int;

        r2 := @parameter3: android.renderscript.Allocation;

        i1 := @parameter4: int;

        r3 := @parameter5: android.renderscript.Allocation;

        $r4 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r5 = virtualinvoke $r4.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z0 = virtualinvoke $r5.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z0 == 0 goto label6;

        $r6 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r7 = virtualinvoke $r6.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z1 = virtualinvoke $r7.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z1 == 0 goto label6;

        $r8 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r9 = virtualinvoke $r8.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z2 = virtualinvoke $r9.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z2 == 0 goto label6;

        $r10 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i4 = virtualinvoke $r10.<android.renderscript.Type: int getY()>();

        if $i4 > 1 goto label5;

        $r12 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i5 = virtualinvoke $r12.<android.renderscript.Type: int getY()>();

        if $i5 > 1 goto label5;

        $r13 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i2 = virtualinvoke $r13.<android.renderscript.Type: int getY()>();

        $r14 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i3 = virtualinvoke $r14.<android.renderscript.Type: int getX()>();

        if i3 < 1 goto label4;

        if i2 < 1 goto label4;

        if i0 <= 0 goto label3;

        if i1 <= 0 goto label3;

        $r17 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i6 = virtualinvoke $r17.<android.renderscript.Type: int getX()>();

        $i7 = i2 - 1;

        $i8 = $i7 * i0;

        $i9 = $i8 + 1;

        if $i6 != $i9 goto label2;

        $r19 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i10 = virtualinvoke $r19.<android.renderscript.Type: int getX()>();

        $i11 = i3 - 1;

        $i12 = $i11 * i1;

        $i13 = $i12 + 1;

        if $i10 != $i13 goto label1;

        return;

     label1:
        $r20 = new android.renderscript.RSRuntimeException;

        specialinvoke $r20.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Incorrect vector dimensions for GER");

        throw $r20;

     label2:
        $r18 = new android.renderscript.RSRuntimeException;

        specialinvoke $r18.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Incorrect vector dimensions for GER");

        throw $r18;

     label3:
        $r16 = new android.renderscript.RSRuntimeException;

        specialinvoke $r16.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Vector increments must be greater than 0");

        throw $r16;

     label4:
        $r15 = new android.renderscript.RSRuntimeException;

        specialinvoke $r15.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("M and N must be 1 or greater for GER");

        throw $r15;

     label5:
        $r11 = new android.renderscript.RSRuntimeException;

        specialinvoke $r11.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("BLAS vectors must have Y dimension of 0 or 1");

        throw $r11;

     label6:
        $r21 = new android.renderscript.RSRuntimeException;

        specialinvoke $r21.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Called BLAS with wrong Element type");

        throw $r21;
    }

    static void validateGERU(android.renderscript.Element, android.renderscript.Allocation, int, android.renderscript.Allocation, int, android.renderscript.Allocation)
    {
        android.renderscript.Element r0, $r5, $r7, $r9;
        android.renderscript.Allocation r1, r2, r3;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        android.renderscript.Type $r4, $r6, $r8, $r10, $r12, $r13, $r14, $r16, $r18;
        boolean $z0, $z1, $z2;
        android.renderscript.RSRuntimeException $r11, $r15, $r17, $r19, $r20;

        r0 := @parameter0: android.renderscript.Element;

        r1 := @parameter1: android.renderscript.Allocation;

        i0 := @parameter2: int;

        r2 := @parameter3: android.renderscript.Allocation;

        i1 := @parameter4: int;

        r3 := @parameter5: android.renderscript.Allocation;

        $r4 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r5 = virtualinvoke $r4.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z0 = virtualinvoke $r5.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z0 == 0 goto label5;

        $r6 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r7 = virtualinvoke $r6.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z1 = virtualinvoke $r7.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z1 == 0 goto label5;

        $r8 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r9 = virtualinvoke $r8.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z2 = virtualinvoke $r9.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z2 == 0 goto label5;

        $r10 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i4 = virtualinvoke $r10.<android.renderscript.Type: int getY()>();

        if $i4 > 1 goto label4;

        $r12 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i5 = virtualinvoke $r12.<android.renderscript.Type: int getY()>();

        if $i5 > 1 goto label4;

        $r13 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i2 = virtualinvoke $r13.<android.renderscript.Type: int getY()>();

        $r14 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i3 = virtualinvoke $r14.<android.renderscript.Type: int getX()>();

        if i0 <= 0 goto label3;

        if i1 <= 0 goto label3;

        $r16 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i6 = virtualinvoke $r16.<android.renderscript.Type: int getX()>();

        $i7 = i2 - 1;

        $i8 = $i7 * i0;

        $i9 = $i8 + 1;

        if $i6 != $i9 goto label2;

        $r18 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i10 = virtualinvoke $r18.<android.renderscript.Type: int getX()>();

        $i11 = i3 - 1;

        $i12 = $i11 * i1;

        $i13 = $i12 + 1;

        if $i10 != $i13 goto label1;

        return;

     label1:
        $r19 = new android.renderscript.RSRuntimeException;

        specialinvoke $r19.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Incorrect vector dimensions for GERU");

        throw $r19;

     label2:
        $r17 = new android.renderscript.RSRuntimeException;

        specialinvoke $r17.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Incorrect vector dimensions for GERU");

        throw $r17;

     label3:
        $r15 = new android.renderscript.RSRuntimeException;

        specialinvoke $r15.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Vector increments must be greater than 0");

        throw $r15;

     label4:
        $r11 = new android.renderscript.RSRuntimeException;

        specialinvoke $r11.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("BLAS vectors must have Y dimension of 0 or 1");

        throw $r11;

     label5:
        $r20 = new android.renderscript.RSRuntimeException;

        specialinvoke $r20.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Called BLAS with wrong Element type");

        throw $r20;
    }

    static void validateHEMM(android.renderscript.Element, int, android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Allocation)
    {
        android.renderscript.Element r0, $r5, $r7, $r9;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        android.renderscript.Allocation r1, r2, r3;
        android.renderscript.Type $r4, $r6, $r8, $r10, $r11, $r13, $r14, $r16, $r17, $r18, $r20;
        boolean $z0, $z1, $z2;
        android.renderscript.RSRuntimeException $r12, $r15, $r19, $r21;

        r0 := @parameter0: android.renderscript.Element;

        i0 := @parameter1: int;

        r1 := @parameter2: android.renderscript.Allocation;

        r2 := @parameter3: android.renderscript.Allocation;

        r3 := @parameter4: android.renderscript.Allocation;

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateSide(int)>(i0);

        $r4 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r5 = virtualinvoke $r4.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z0 = virtualinvoke $r5.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z0 == 0 goto label6;

        $r6 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r7 = virtualinvoke $r6.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z1 = virtualinvoke $r7.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z1 == 0 goto label6;

        $r8 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r9 = virtualinvoke $r8.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z2 = virtualinvoke $r9.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z2 == 0 goto label6;

        $r10 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i1 = virtualinvoke $r10.<android.renderscript.Type: int getX()>();

        $r11 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i2 = virtualinvoke $r11.<android.renderscript.Type: int getY()>();

        if i1 != $i2 goto label5;

        if i0 != 141 goto label1;

        $r20 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i8 = virtualinvoke $r20.<android.renderscript.Type: int getY()>();

        if i1 != $i8 goto label2;

     label1:
        if i0 != 142 goto label3;

        $r18 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i7 = virtualinvoke $r18.<android.renderscript.Type: int getX()>();

        if i1 != $i7 goto label2;

        goto label3;

     label2:
        $r19 = new android.renderscript.RSRuntimeException;

        specialinvoke $r19.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Called HEMM with invalid B");

        throw $r19;

     label3:
        $r13 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i3 = virtualinvoke $r13.<android.renderscript.Type: int getX()>();

        $r14 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i4 = virtualinvoke $r14.<android.renderscript.Type: int getX()>();

        if $i3 != $i4 goto label4;

        $r16 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i5 = virtualinvoke $r16.<android.renderscript.Type: int getY()>();

        $r17 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i6 = virtualinvoke $r17.<android.renderscript.Type: int getY()>();

        if $i5 != $i6 goto label4;

        return;

     label4:
        $r15 = new android.renderscript.RSRuntimeException;

        specialinvoke $r15.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Called HEMM with mismatched B and C");

        throw $r15;

     label5:
        $r12 = new android.renderscript.RSRuntimeException;

        specialinvoke $r12.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Called HEMM with non-square A");

        throw $r12;

     label6:
        $r21 = new android.renderscript.RSRuntimeException;

        specialinvoke $r21.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Called BLAS with wrong Element type");

        throw $r21;
    }

    static void validateHER2K(android.renderscript.Element, int, android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Allocation)
    {
        android.renderscript.Element r0, $r5, $r7, $r9;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        android.renderscript.Allocation r1, r2, r3;
        android.renderscript.Type $r4, $r6, $r8, $r10, $r11, $r13, $r15, $r16, $r18, $r19, $r20;
        boolean $z0, $z1, $z2;
        android.renderscript.RSRuntimeException $r12, $r14, $r17, $r21, $r22;

        r0 := @parameter0: android.renderscript.Element;

        i0 := @parameter1: int;

        r1 := @parameter2: android.renderscript.Allocation;

        r2 := @parameter3: android.renderscript.Allocation;

        r3 := @parameter4: android.renderscript.Allocation;

        $r4 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r5 = virtualinvoke $r4.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z0 = virtualinvoke $r5.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z0 == 0 goto label7;

        $r6 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r7 = virtualinvoke $r6.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z1 = virtualinvoke $r7.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z1 == 0 goto label7;

        $r8 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r9 = virtualinvoke $r8.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z2 = virtualinvoke $r9.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z2 == 0 goto label7;

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateConjTranspose(int)>(i0);

        $r10 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i1 = virtualinvoke $r10.<android.renderscript.Type: int getX()>();

        $r11 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i2 = virtualinvoke $r11.<android.renderscript.Type: int getY()>();

        if i1 != $i2 goto label6;

        if i0 != 111 goto label2;

        $r20 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i8 = virtualinvoke $r20.<android.renderscript.Type: int getY()>();

        if $i8 != i1 goto label1;

        goto label3;

     label1:
        $r21 = new android.renderscript.RSRuntimeException;

        specialinvoke $r21.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Called HER2K with invalid matrices");

        throw $r21;

     label2:
        $r13 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i3 = virtualinvoke $r13.<android.renderscript.Type: int getX()>();

        if $i3 != i1 goto label5;

     label3:
        $r15 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i4 = virtualinvoke $r15.<android.renderscript.Type: int getX()>();

        $r16 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i5 = virtualinvoke $r16.<android.renderscript.Type: int getX()>();

        if $i4 != $i5 goto label4;

        $r18 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i6 = virtualinvoke $r18.<android.renderscript.Type: int getY()>();

        $r19 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i7 = virtualinvoke $r19.<android.renderscript.Type: int getY()>();

        if $i6 != $i7 goto label4;

        return;

     label4:
        $r17 = new android.renderscript.RSRuntimeException;

        specialinvoke $r17.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Called HER2K with invalid A and B matrices");

        throw $r17;

     label5:
        $r14 = new android.renderscript.RSRuntimeException;

        specialinvoke $r14.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Called HER2K with invalid matrices");

        throw $r14;

     label6:
        $r12 = new android.renderscript.RSRuntimeException;

        specialinvoke $r12.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Called HER2K with non-square C");

        throw $r12;

     label7:
        $r22 = new android.renderscript.RSRuntimeException;

        specialinvoke $r22.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Called BLAS with wrong Element type");

        throw $r22;
    }

    static void validateHERK(android.renderscript.Element, int, android.renderscript.Allocation, android.renderscript.Allocation)
    {
        android.renderscript.Element r0, $r4, $r7;
        int i0, i1, $i2, $i3, $i4;
        android.renderscript.Allocation r1, r2;
        android.renderscript.Type $r3, $r6, $r8, $r9, $r11, $r13;
        boolean $z0, $z1;
        android.renderscript.RSRuntimeException $r5, $r10, $r12, $r14;

        r0 := @parameter0: android.renderscript.Element;

        i0 := @parameter1: int;

        r1 := @parameter2: android.renderscript.Allocation;

        r2 := @parameter3: android.renderscript.Allocation;

        $r3 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r4 = virtualinvoke $r3.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z0 = virtualinvoke $r4.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z0 == 0 goto label6;

        $r6 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r7 = virtualinvoke $r6.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z1 = virtualinvoke $r7.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z1 == 0 goto label6;

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateConjTranspose(int)>(i0);

        $r8 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i1 = virtualinvoke $r8.<android.renderscript.Type: int getX()>();

        $r9 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i2 = virtualinvoke $r9.<android.renderscript.Type: int getY()>();

        if i1 != $i2 goto label5;

        if i0 != 111 goto label2;

        $r13 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i4 = virtualinvoke $r13.<android.renderscript.Type: int getY()>();

        if i1 != $i4 goto label1;

        goto label3;

     label1:
        $r14 = new android.renderscript.RSRuntimeException;

        specialinvoke $r14.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Called HERK with invalid A");

        throw $r14;

     label2:
        $r11 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i3 = virtualinvoke $r11.<android.renderscript.Type: int getX()>();

        if i1 != $i3 goto label4;

     label3:
        return;

     label4:
        $r12 = new android.renderscript.RSRuntimeException;

        specialinvoke $r12.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Called HERK with invalid A");

        throw $r12;

     label5:
        $r10 = new android.renderscript.RSRuntimeException;

        specialinvoke $r10.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Called HERK with non-square C");

        throw $r10;

     label6:
        $r5 = new android.renderscript.RSRuntimeException;

        specialinvoke $r5.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Called BLAS with wrong Element type");

        throw $r5;
    }

    static void validateL3(android.renderscript.Element, int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Allocation)
    {
        android.renderscript.Element r0, $r24, $r26, $r28;
        android.renderscript.Allocation r1, r2, r3;
        int i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13;
        android.renderscript.RSRuntimeException $r4, $r7, $r8, $r9, $r22, $r29, $r30;
        android.renderscript.Type $r5, $r6, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r23, $r25, $r27;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: android.renderscript.Element;

        i3 := @parameter1: int;

        i4 := @parameter2: int;

        i5 := @parameter3: int;

        r1 := @parameter4: android.renderscript.Allocation;

        r2 := @parameter5: android.renderscript.Allocation;

        r3 := @parameter6: android.renderscript.Allocation;

        i6 = -1;

        i7 = -1;

        i8 = -1;

        if r1 == null goto label01;

        $r27 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r28 = virtualinvoke $r27.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z2 = virtualinvoke $r28.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z2 == 0 goto label03;

     label01:
        if r2 == null goto label02;

        $r25 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r26 = virtualinvoke $r25.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z1 = virtualinvoke $r26.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z1 == 0 goto label03;

     label02:
        if r3 == null goto label04;

        $r23 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r24 = virtualinvoke $r23.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z0 = virtualinvoke $r24.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z0 == 0 goto label03;

        goto label04;

     label03:
        $r29 = new android.renderscript.RSRuntimeException;

        specialinvoke $r29.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Called BLAS with wrong Element type");

        throw $r29;

     label04:
        if r3 == null goto label23;

        $r5 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i1 = virtualinvoke $r5.<android.renderscript.Type: int getY()>();

        $r6 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i2 = virtualinvoke $r6.<android.renderscript.Type: int getX()>();

        if i5 != 142 goto label09;

        if r1 != null goto label05;

        if r2 != null goto label06;

     label05:
        if r1 == null goto label07;

        if r2 == null goto label06;

        goto label07;

     label06:
        $r22 = new android.renderscript.RSRuntimeException;

        specialinvoke $r22.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Provided Matrix A without Matrix B, or vice versa");

        throw $r22;

     label07:
        i9 = -1;

        i10 = -1;

        if r2 == null goto label08;

        $r20 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i9 = virtualinvoke $r20.<android.renderscript.Type: int getY()>();

        $r21 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i10 = virtualinvoke $r21.<android.renderscript.Type: int getX()>();

     label08:
        i11 = -1;

        i12 = i9;

        i8 = i10;

        if r1 == null goto label15;

        $r18 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i6 = virtualinvoke $r18.<android.renderscript.Type: int getY()>();

        $r19 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i11 = virtualinvoke $r19.<android.renderscript.Type: int getX()>();

        i12 = i9;

        i8 = i10;

        goto label15;

     label09:
        i13 = -1;

        if r1 == null goto label12;

        if i3 == 112 goto label11;

        if i3 != 113 goto label10;

        goto label11;

     label10:
        $r16 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i13 = virtualinvoke $r16.<android.renderscript.Type: int getY()>();

        $r17 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i7 = virtualinvoke $r17.<android.renderscript.Type: int getX()>();

        goto label12;

     label11:
        $r14 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i7 = virtualinvoke $r14.<android.renderscript.Type: int getY()>();

        $r15 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i13 = virtualinvoke $r15.<android.renderscript.Type: int getX()>();

     label12:
        i6 = i13;

        i11 = i7;

        i12 = -1;

        if r2 == null goto label15;

        if i4 == 112 goto label14;

        if i4 != 113 goto label13;

        goto label14;

     label13:
        $r12 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i12 = virtualinvoke $r12.<android.renderscript.Type: int getY()>();

        $r13 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i8 = virtualinvoke $r13.<android.renderscript.Type: int getX()>();

        i6 = i13;

        i11 = i7;

        goto label15;

     label14:
        $r10 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i8 = virtualinvoke $r10.<android.renderscript.Type: int getY()>();

        $r11 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i12 = virtualinvoke $r11.<android.renderscript.Type: int getX()>();

        i11 = i7;

        i6 = i13;

     label15:
        if r1 == null goto label17;

        if r2 == null goto label17;

        if r3 == null goto label17;

        if i11 != i12 goto label16;

        if i6 != i1 goto label16;

        if i8 != i2 goto label16;

        goto label22;

     label16:
        $r30 = new android.renderscript.RSRuntimeException;

        specialinvoke $r30.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Called BLAS with invalid dimensions");

        throw $r30;

     label17:
        if r1 == null goto label20;

        if r3 == null goto label20;

        if i1 != i2 goto label19;

        if i6 != i1 goto label18;

        goto label22;

     label18:
        $r9 = new android.renderscript.RSRuntimeException;

        specialinvoke $r9.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Called BLAS with invalid dimensions");

        throw $r9;

     label19:
        $r8 = new android.renderscript.RSRuntimeException;

        specialinvoke $r8.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Matrix C is not symmetric");

        throw $r8;

     label20:
        if r1 == null goto label22;

        if r2 == null goto label22;

        if i11 != i12 goto label21;

        goto label22;

     label21:
        $r7 = new android.renderscript.RSRuntimeException;

        specialinvoke $r7.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Called BLAS with invalid dimensions");

        throw $r7;

     label22:
        return;

     label23:
        $r4 = new android.renderscript.RSRuntimeException;

        specialinvoke $r4.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Allocation C cannot be null");

        throw $r4;
    }

    static int validateSPMV(android.renderscript.Element, int, android.renderscript.Allocation, android.renderscript.Allocation, int, android.renderscript.Allocation, int)
    {
        android.renderscript.Element r0, $r5, $r7, $r9;
        android.renderscript.Allocation r1, r2, r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18, i19;
        android.renderscript.Type $r4, $r6, $r8, $r10, $r12, $r13, $r15, $r16, $r19, $r21;
        boolean $z0, $z1, $z2;
        android.renderscript.RSRuntimeException $r11, $r14, $r17, $r18, $r20, $r22, $r23;
        double $d0, $d1, $d2;

        r0 := @parameter0: android.renderscript.Element;

        i18 := @parameter1: int;

        r1 := @parameter2: android.renderscript.Allocation;

        r2 := @parameter3: android.renderscript.Allocation;

        i0 := @parameter4: int;

        r3 := @parameter5: android.renderscript.Allocation;

        i1 := @parameter6: int;

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateUplo(int)>(i18);

        $r4 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r5 = virtualinvoke $r4.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z0 = virtualinvoke $r5.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z0 == 0 goto label7;

        $r6 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r7 = virtualinvoke $r6.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z1 = virtualinvoke $r7.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z1 == 0 goto label7;

        $r8 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r9 = virtualinvoke $r8.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z2 = virtualinvoke $r9.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z2 == 0 goto label7;

        $r10 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i2 = virtualinvoke $r10.<android.renderscript.Type: int getY()>();

        if $i2 > 1 goto label6;

        $r12 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i3 = virtualinvoke $r12.<android.renderscript.Type: int getY()>();

        if $i3 > 1 goto label6;

        $r13 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i4 = virtualinvoke $r13.<android.renderscript.Type: int getY()>();

        if $i4 > 1 goto label5;

        $r15 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i5 = virtualinvoke $r15.<android.renderscript.Type: int getX()>();

        $d0 = (double) $i5;

        $d1 = $d0 * 2.0;

        $d2 = staticinvoke <java.lang.Math: double sqrt(double)>($d1);

        i19 = (int) $d2;

        $r16 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i6 = virtualinvoke $r16.<android.renderscript.Type: int getX()>();

        $i7 = i19 + 1;

        $i8 = $i7 * i19;

        $i9 = $i8 / 2;

        if $i6 != $i9 goto label4;

        if i0 <= 0 goto label3;

        if i1 <= 0 goto label3;

        $r19 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i10 = virtualinvoke $r19.<android.renderscript.Type: int getX()>();

        $i11 = i19 - 1;

        $i12 = $i11 * i0;

        $i13 = $i12 + 1;

        if $i10 != $i13 goto label2;

        $r21 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i14 = virtualinvoke $r21.<android.renderscript.Type: int getX()>();

        $i15 = i19 - 1;

        $i16 = $i15 * i1;

        $i17 = $i16 + 1;

        if $i14 != $i17 goto label1;

        return i19;

     label1:
        $r22 = new android.renderscript.RSRuntimeException;

        specialinvoke $r22.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Incorrect vector dimensions for SPMV");

        throw $r22;

     label2:
        $r20 = new android.renderscript.RSRuntimeException;

        specialinvoke $r20.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Incorrect vector dimensions for SPMV");

        throw $r20;

     label3:
        $r18 = new android.renderscript.RSRuntimeException;

        specialinvoke $r18.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Vector increments must be greater than 0");

        throw $r18;

     label4:
        $r17 = new android.renderscript.RSRuntimeException;

        specialinvoke $r17.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Invalid dimension for Ap");

        throw $r17;

     label5:
        $r14 = new android.renderscript.RSRuntimeException;

        specialinvoke $r14.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Ap must have a Y dimension of 0 or 1");

        throw $r14;

     label6:
        $r11 = new android.renderscript.RSRuntimeException;

        specialinvoke $r11.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("BLAS vectors must have Y dimension of 0 or 1");

        throw $r11;

     label7:
        $r23 = new android.renderscript.RSRuntimeException;

        specialinvoke $r23.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Called BLAS with wrong Element type");

        throw $r23;
    }

    static int validateSPR(android.renderscript.Element, int, android.renderscript.Allocation, int, android.renderscript.Allocation)
    {
        android.renderscript.Element r0, $r4, $r7;
        android.renderscript.Allocation r1, r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13;
        android.renderscript.Type $r3, $r6, $r8, $r10, $r12, $r13, $r16;
        boolean $z0, $z1;
        android.renderscript.RSRuntimeException $r5, $r9, $r11, $r14, $r15, $r17;
        double $d0, $d1, $d2;

        r0 := @parameter0: android.renderscript.Element;

        i12 := @parameter1: int;

        r1 := @parameter2: android.renderscript.Allocation;

        i0 := @parameter3: int;

        r2 := @parameter4: android.renderscript.Allocation;

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateUplo(int)>(i12);

        $r3 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r4 = virtualinvoke $r3.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z0 = virtualinvoke $r4.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z0 == 0 goto label6;

        $r6 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r7 = virtualinvoke $r6.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z1 = virtualinvoke $r7.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z1 == 0 goto label6;

        $r8 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i1 = virtualinvoke $r8.<android.renderscript.Type: int getY()>();

        if $i1 > 1 goto label5;

        $r10 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i2 = virtualinvoke $r10.<android.renderscript.Type: int getY()>();

        if $i2 > 1 goto label4;

        $r12 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i3 = virtualinvoke $r12.<android.renderscript.Type: int getX()>();

        $d0 = (double) $i3;

        $d1 = $d0 * 2.0;

        $d2 = staticinvoke <java.lang.Math: double sqrt(double)>($d1);

        i13 = (int) $d2;

        $r13 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i4 = virtualinvoke $r13.<android.renderscript.Type: int getX()>();

        $i5 = i13 + 1;

        $i6 = $i5 * i13;

        $i7 = $i6 / 2;

        if $i4 != $i7 goto label3;

        if i0 <= 0 goto label2;

        $r16 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i8 = virtualinvoke $r16.<android.renderscript.Type: int getX()>();

        $i9 = i13 - 1;

        $i10 = $i9 * i0;

        $i11 = $i10 + 1;

        if $i8 != $i11 goto label1;

        return i13;

     label1:
        $r17 = new android.renderscript.RSRuntimeException;

        specialinvoke $r17.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Incorrect vector dimensions for SPR");

        throw $r17;

     label2:
        $r15 = new android.renderscript.RSRuntimeException;

        specialinvoke $r15.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Vector increments must be greater than 0");

        throw $r15;

     label3:
        $r14 = new android.renderscript.RSRuntimeException;

        specialinvoke $r14.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Invalid dimension for Ap");

        throw $r14;

     label4:
        $r11 = new android.renderscript.RSRuntimeException;

        specialinvoke $r11.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Ap must have a Y dimension of 0 or 1");

        throw $r11;

     label5:
        $r9 = new android.renderscript.RSRuntimeException;

        specialinvoke $r9.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("BLAS vectors must have Y dimension of 0 or 1");

        throw $r9;

     label6:
        $r5 = new android.renderscript.RSRuntimeException;

        specialinvoke $r5.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Called BLAS with wrong Element type");

        throw $r5;
    }

    static int validateSPR2(android.renderscript.Element, int, android.renderscript.Allocation, int, android.renderscript.Allocation, int, android.renderscript.Allocation)
    {
        android.renderscript.Element r0, $r5, $r7, $r9;
        android.renderscript.Allocation r1, r2, r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18, i19;
        android.renderscript.Type $r4, $r6, $r8, $r10, $r12, $r13, $r15, $r16, $r19, $r21;
        boolean $z0, $z1, $z2;
        android.renderscript.RSRuntimeException $r11, $r14, $r17, $r18, $r20, $r22;
        double $d0, $d1, $d2;

        r0 := @parameter0: android.renderscript.Element;

        i18 := @parameter1: int;

        r1 := @parameter2: android.renderscript.Allocation;

        i0 := @parameter3: int;

        r2 := @parameter4: android.renderscript.Allocation;

        i1 := @parameter5: int;

        r3 := @parameter6: android.renderscript.Allocation;

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateUplo(int)>(i18);

        $r4 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r5 = virtualinvoke $r4.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z0 = virtualinvoke $r5.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z0 == 0 goto label6;

        $r6 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r7 = virtualinvoke $r6.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z1 = virtualinvoke $r7.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z1 == 0 goto label6;

        $r8 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r9 = virtualinvoke $r8.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z2 = virtualinvoke $r9.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z2 == 0 goto label6;

        $r10 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i2 = virtualinvoke $r10.<android.renderscript.Type: int getY()>();

        if $i2 > 1 goto label5;

        $r12 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i3 = virtualinvoke $r12.<android.renderscript.Type: int getY()>();

        if $i3 > 1 goto label5;

        $r13 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i4 = virtualinvoke $r13.<android.renderscript.Type: int getY()>();

        if $i4 > 1 goto label4;

        $r15 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i5 = virtualinvoke $r15.<android.renderscript.Type: int getX()>();

        $d0 = (double) $i5;

        $d1 = $d0 * 2.0;

        $d2 = staticinvoke <java.lang.Math: double sqrt(double)>($d1);

        i19 = (int) $d2;

        $r16 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i6 = virtualinvoke $r16.<android.renderscript.Type: int getX()>();

        $i7 = i19 + 1;

        $i8 = $i7 * i19;

        $i9 = $i8 / 2;

        if $i6 != $i9 goto label3;

        if i0 <= 0 goto label2;

        if i1 <= 0 goto label2;

        $r19 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i10 = virtualinvoke $r19.<android.renderscript.Type: int getX()>();

        $i11 = i19 - 1;

        $i12 = $i11 * i0;

        $i13 = $i12 + 1;

        if $i10 != $i13 goto label1;

        $r21 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i14 = virtualinvoke $r21.<android.renderscript.Type: int getX()>();

        $i15 = i19 - 1;

        $i16 = $i15 * i1;

        $i17 = $i16 + 1;

        if $i14 != $i17 goto label1;

        return i19;

     label1:
        $r20 = new android.renderscript.RSRuntimeException;

        specialinvoke $r20.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Incorrect vector dimensions for SPR2");

        throw $r20;

     label2:
        $r18 = new android.renderscript.RSRuntimeException;

        specialinvoke $r18.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Vector increments must be greater than 0");

        throw $r18;

     label3:
        $r17 = new android.renderscript.RSRuntimeException;

        specialinvoke $r17.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Invalid dimension for Ap");

        throw $r17;

     label4:
        $r14 = new android.renderscript.RSRuntimeException;

        specialinvoke $r14.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Ap must have a Y dimension of 0 or 1");

        throw $r14;

     label5:
        $r11 = new android.renderscript.RSRuntimeException;

        specialinvoke $r11.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("BLAS vectors must have Y dimension of 0 or 1");

        throw $r11;

     label6:
        $r22 = new android.renderscript.RSRuntimeException;

        specialinvoke $r22.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Called BLAS with wrong Element type");

        throw $r22;
    }

    static int validateSYMV(android.renderscript.Element, int, android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Allocation, int, int)
    {
        android.renderscript.Element r0, $r8, $r10, $r12;
        android.renderscript.Allocation r1, r2, r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14;
        android.renderscript.Type $r4, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19;
        android.renderscript.RSRuntimeException $r6, $r14, $r16, $r18, $r20, $r21;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: android.renderscript.Element;

        i13 := @parameter1: int;

        r1 := @parameter2: android.renderscript.Allocation;

        r2 := @parameter3: android.renderscript.Allocation;

        r3 := @parameter4: android.renderscript.Allocation;

        i0 := @parameter5: int;

        i1 := @parameter6: int;

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateUplo(int)>(i13);

        $r4 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i14 = virtualinvoke $r4.<android.renderscript.Type: int getY()>();

        $r5 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i2 = virtualinvoke $r5.<android.renderscript.Type: int getX()>();

        if $i2 != i14 goto label6;

        $r7 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r8 = virtualinvoke $r7.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z0 = virtualinvoke $r8.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z0 == 0 goto label5;

        $r9 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r10 = virtualinvoke $r9.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z1 = virtualinvoke $r10.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z1 == 0 goto label5;

        $r11 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r12 = virtualinvoke $r11.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z2 = virtualinvoke $r12.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z2 == 0 goto label5;

        $r13 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i3 = virtualinvoke $r13.<android.renderscript.Type: int getY()>();

        if $i3 > 1 goto label4;

        $r15 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i4 = virtualinvoke $r15.<android.renderscript.Type: int getY()>();

        if $i4 > 1 goto label4;

        if i0 <= 0 goto label3;

        if i1 <= 0 goto label3;

        $r17 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i5 = virtualinvoke $r17.<android.renderscript.Type: int getX()>();

        $i6 = i14 - 1;

        $i7 = $i6 * i0;

        $i8 = $i7 + 1;

        if $i5 != $i8 goto label2;

        $r19 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i9 = virtualinvoke $r19.<android.renderscript.Type: int getX()>();

        $i10 = i14 - 1;

        $i11 = $i10 * i1;

        $i12 = $i11 + 1;

        if $i9 != $i12 goto label1;

        return i14;

     label1:
        $r20 = new android.renderscript.RSRuntimeException;

        specialinvoke $r20.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Incorrect vector dimensions for SYMV");

        throw $r20;

     label2:
        $r18 = new android.renderscript.RSRuntimeException;

        specialinvoke $r18.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Incorrect vector dimensions for SYMV");

        throw $r18;

     label3:
        $r16 = new android.renderscript.RSRuntimeException;

        specialinvoke $r16.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Vector increments must be greater than 0");

        throw $r16;

     label4:
        $r14 = new android.renderscript.RSRuntimeException;

        specialinvoke $r14.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("BLAS vectors must have Y dimension of 0 or 1");

        throw $r14;

     label5:
        $r21 = new android.renderscript.RSRuntimeException;

        specialinvoke $r21.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Called BLAS with wrong Element type");

        throw $r21;

     label6:
        $r6 = new android.renderscript.RSRuntimeException;

        specialinvoke $r6.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("A must be a square matrix for SYMV");

        throw $r6;
    }

    static int validateSYR(android.renderscript.Element, int, android.renderscript.Allocation, int, android.renderscript.Allocation)
    {
        android.renderscript.Element r0, $r4, $r7;
        android.renderscript.Allocation r1, r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        android.renderscript.Type $r3, $r6, $r8, $r9, $r11, $r14;
        boolean $z0, $z1;
        android.renderscript.RSRuntimeException $r5, $r10, $r12, $r13, $r15;

        r0 := @parameter0: android.renderscript.Element;

        i7 := @parameter1: int;

        r1 := @parameter2: android.renderscript.Allocation;

        i0 := @parameter3: int;

        r2 := @parameter4: android.renderscript.Allocation;

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateUplo(int)>(i7);

        $r3 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r4 = virtualinvoke $r3.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z0 = virtualinvoke $r4.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z0 == 0 goto label5;

        $r6 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r7 = virtualinvoke $r6.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z1 = virtualinvoke $r7.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z1 == 0 goto label5;

        $r8 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i8 = virtualinvoke $r8.<android.renderscript.Type: int getX()>();

        $r9 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i1 = virtualinvoke $r9.<android.renderscript.Type: int getY()>();

        if $i1 > 1 goto label4;

        $r11 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i2 = virtualinvoke $r11.<android.renderscript.Type: int getY()>();

        if i8 != $i2 goto label3;

        if i0 <= 0 goto label2;

        $r14 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i3 = virtualinvoke $r14.<android.renderscript.Type: int getX()>();

        $i4 = i8 - 1;

        $i5 = $i4 * i0;

        $i6 = $i5 + 1;

        if $i3 != $i6 goto label1;

        return i8;

     label1:
        $r15 = new android.renderscript.RSRuntimeException;

        specialinvoke $r15.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Incorrect vector dimensions for SYR");

        throw $r15;

     label2:
        $r13 = new android.renderscript.RSRuntimeException;

        specialinvoke $r13.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Vector increments must be greater than 0");

        throw $r13;

     label3:
        $r12 = new android.renderscript.RSRuntimeException;

        specialinvoke $r12.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("A must be a symmetric matrix");

        throw $r12;

     label4:
        $r10 = new android.renderscript.RSRuntimeException;

        specialinvoke $r10.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("BLAS vectors must have Y dimension of 0 or 1");

        throw $r10;

     label5:
        $r5 = new android.renderscript.RSRuntimeException;

        specialinvoke $r5.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Called BLAS with wrong Element type");

        throw $r5;
    }

    static int validateSYR2(android.renderscript.Element, int, android.renderscript.Allocation, int, android.renderscript.Allocation, int, android.renderscript.Allocation)
    {
        android.renderscript.Element r0, $r5, $r7, $r9;
        android.renderscript.Allocation r1, r2, r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14;
        android.renderscript.Type $r4, $r6, $r8, $r10, $r12, $r13, $r14, $r17, $r19;
        boolean $z0, $z1, $z2;
        android.renderscript.RSRuntimeException $r11, $r15, $r16, $r18, $r20;

        r0 := @parameter0: android.renderscript.Element;

        i13 := @parameter1: int;

        r1 := @parameter2: android.renderscript.Allocation;

        i0 := @parameter3: int;

        r2 := @parameter4: android.renderscript.Allocation;

        i1 := @parameter5: int;

        r3 := @parameter6: android.renderscript.Allocation;

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateUplo(int)>(i13);

        $r4 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r5 = virtualinvoke $r4.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z0 = virtualinvoke $r5.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z0 == 0 goto label5;

        $r6 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r7 = virtualinvoke $r6.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z1 = virtualinvoke $r7.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z1 == 0 goto label5;

        $r8 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r9 = virtualinvoke $r8.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z2 = virtualinvoke $r9.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z2 == 0 goto label5;

        $r10 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i2 = virtualinvoke $r10.<android.renderscript.Type: int getY()>();

        if $i2 > 1 goto label4;

        $r12 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i3 = virtualinvoke $r12.<android.renderscript.Type: int getY()>();

        if $i3 > 1 goto label4;

        $r13 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i14 = virtualinvoke $r13.<android.renderscript.Type: int getX()>();

        $r14 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i4 = virtualinvoke $r14.<android.renderscript.Type: int getY()>();

        if i14 != $i4 goto label3;

        if i0 <= 0 goto label2;

        if i1 <= 0 goto label2;

        $r17 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i5 = virtualinvoke $r17.<android.renderscript.Type: int getX()>();

        $i6 = i14 - 1;

        $i7 = $i6 * i0;

        $i8 = $i7 + 1;

        if $i5 != $i8 goto label1;

        $r19 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i9 = virtualinvoke $r19.<android.renderscript.Type: int getX()>();

        $i10 = i14 - 1;

        $i11 = $i10 * i1;

        $i12 = $i11 + 1;

        if $i9 != $i12 goto label1;

        return i14;

     label1:
        $r18 = new android.renderscript.RSRuntimeException;

        specialinvoke $r18.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Incorrect vector dimensions for SYR");

        throw $r18;

     label2:
        $r16 = new android.renderscript.RSRuntimeException;

        specialinvoke $r16.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Vector increments must be greater than 0");

        throw $r16;

     label3:
        $r15 = new android.renderscript.RSRuntimeException;

        specialinvoke $r15.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("A must be a symmetric matrix");

        throw $r15;

     label4:
        $r11 = new android.renderscript.RSRuntimeException;

        specialinvoke $r11.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("BLAS vectors must have Y dimension of 0 or 1");

        throw $r11;

     label5:
        $r20 = new android.renderscript.RSRuntimeException;

        specialinvoke $r20.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Called BLAS with wrong Element type");

        throw $r20;
    }

    static void validateSYR2K(android.renderscript.Element, int, android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Allocation)
    {
        android.renderscript.Element r0, $r5, $r7, $r9;
        android.renderscript.Allocation r1, r2, r3;
        android.renderscript.Type $r4, $r6, $r8, $r10, $r11, $r13, $r14, $r15, $r17, $r18, $r19;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        android.renderscript.RSRuntimeException $r12, $r16, $r20;

        r0 := @parameter0: android.renderscript.Element;

        i6 := @parameter1: int;

        r1 := @parameter2: android.renderscript.Allocation;

        r2 := @parameter3: android.renderscript.Allocation;

        r3 := @parameter4: android.renderscript.Allocation;

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateTranspose(int)>(i6);

        $r4 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r5 = virtualinvoke $r4.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z0 = virtualinvoke $r5.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z0 == 0 goto label5;

        $r6 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r7 = virtualinvoke $r6.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z1 = virtualinvoke $r7.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z1 == 0 goto label5;

        $r8 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r9 = virtualinvoke $r8.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z2 = virtualinvoke $r9.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z2 == 0 goto label5;

        if i6 != 112 goto label1;

        $r19 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i7 = virtualinvoke $r19.<android.renderscript.Type: int getX()>();

        goto label2;

     label1:
        $r10 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i7 = virtualinvoke $r10.<android.renderscript.Type: int getY()>();

     label2:
        $r11 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i0 = virtualinvoke $r11.<android.renderscript.Type: int getX()>();

        if $i0 != i7 goto label4;

        $r13 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i1 = virtualinvoke $r13.<android.renderscript.Type: int getY()>();

        if $i1 != i7 goto label4;

        $r14 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i2 = virtualinvoke $r14.<android.renderscript.Type: int getX()>();

        $r15 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i3 = virtualinvoke $r15.<android.renderscript.Type: int getX()>();

        if $i2 != $i3 goto label3;

        $r17 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i4 = virtualinvoke $r17.<android.renderscript.Type: int getY()>();

        $r18 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i5 = virtualinvoke $r18.<android.renderscript.Type: int getY()>();

        if $i4 != $i5 goto label3;

        return;

     label3:
        $r16 = new android.renderscript.RSRuntimeException;

        specialinvoke $r16.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Invalid A and B in SYR2K");

        throw $r16;

     label4:
        $r12 = new android.renderscript.RSRuntimeException;

        specialinvoke $r12.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Invalid symmetric matrix in SYR2K");

        throw $r12;

     label5:
        $r20 = new android.renderscript.RSRuntimeException;

        specialinvoke $r20.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Called BLAS with wrong Element type");

        throw $r20;
    }

    static void validateSide(int)
    {
        int i0;
        android.renderscript.RSRuntimeException $r0;

        i0 := @parameter0: int;

        if i0 == 141 goto label2;

        if i0 != 142 goto label1;

        goto label2;

     label1:
        $r0 = new android.renderscript.RSRuntimeException;

        specialinvoke $r0.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Invalid side passed to BLAS");

        throw $r0;

     label2:
        return;
    }

    static int validateTPMV(android.renderscript.Element, int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int)
    {
        android.renderscript.Element r0, $r4, $r7;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15;
        android.renderscript.Allocation r1, r2;
        android.renderscript.Type $r3, $r6, $r8, $r10, $r12, $r13, $r16;
        boolean $z0, $z1;
        android.renderscript.RSRuntimeException $r5, $r9, $r11, $r14, $r15, $r17;
        double $d0, $d1, $d2;

        r0 := @parameter0: android.renderscript.Element;

        i14 := @parameter1: int;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r1 := @parameter4: android.renderscript.Allocation;

        r2 := @parameter5: android.renderscript.Allocation;

        i2 := @parameter6: int;

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateTranspose(int)>(i0);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateUplo(int)>(i14);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateDiag(int)>(i1);

        $r3 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r4 = virtualinvoke $r3.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z0 = virtualinvoke $r4.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z0 == 0 goto label6;

        $r6 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r7 = virtualinvoke $r6.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z1 = virtualinvoke $r7.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z1 == 0 goto label6;

        $r8 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i3 = virtualinvoke $r8.<android.renderscript.Type: int getY()>();

        if $i3 > 1 goto label5;

        $r10 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i4 = virtualinvoke $r10.<android.renderscript.Type: int getY()>();

        if $i4 > 1 goto label4;

        $r12 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i5 = virtualinvoke $r12.<android.renderscript.Type: int getX()>();

        $d0 = (double) $i5;

        $d1 = $d0 * 2.0;

        $d2 = staticinvoke <java.lang.Math: double sqrt(double)>($d1);

        i15 = (int) $d2;

        $r13 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i6 = virtualinvoke $r13.<android.renderscript.Type: int getX()>();

        $i7 = i15 + 1;

        $i8 = $i7 * i15;

        $i9 = $i8 / 2;

        if $i6 != $i9 goto label3;

        if i2 <= 0 goto label2;

        $r16 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i10 = virtualinvoke $r16.<android.renderscript.Type: int getX()>();

        $i11 = i15 - 1;

        $i12 = $i11 * i2;

        $i13 = $i12 + 1;

        if $i10 != $i13 goto label1;

        return i15;

     label1:
        $r17 = new android.renderscript.RSRuntimeException;

        specialinvoke $r17.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Incorrect vector dimensions for TPMV");

        throw $r17;

     label2:
        $r15 = new android.renderscript.RSRuntimeException;

        specialinvoke $r15.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Vector increments must be greater than 0");

        throw $r15;

     label3:
        $r14 = new android.renderscript.RSRuntimeException;

        specialinvoke $r14.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Invalid dimension for Ap");

        throw $r14;

     label4:
        $r11 = new android.renderscript.RSRuntimeException;

        specialinvoke $r11.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Ap must have a Y dimension of 0 or 1");

        throw $r11;

     label5:
        $r9 = new android.renderscript.RSRuntimeException;

        specialinvoke $r9.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("BLAS vectors must have Y dimension of 0 or 1");

        throw $r9;

     label6:
        $r5 = new android.renderscript.RSRuntimeException;

        specialinvoke $r5.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Called BLAS with wrong Element type");

        throw $r5;
    }

    static void validateTRMM(android.renderscript.Element, int, int, android.renderscript.Allocation, android.renderscript.Allocation)
    {
        android.renderscript.Element r0, $r4, $r7;
        int i0, i1, i2, i3, i4, i5;
        android.renderscript.Allocation r1, r2;
        android.renderscript.Type $r3, $r6, $r8, $r9, $r11, $r12;
        boolean $z0, $z1;
        android.renderscript.RSRuntimeException $r5, $r10, $r13, $r14;

        r0 := @parameter0: android.renderscript.Element;

        i0 := @parameter1: int;

        i4 := @parameter2: int;

        r1 := @parameter3: android.renderscript.Allocation;

        r2 := @parameter4: android.renderscript.Allocation;

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateSide(int)>(i0);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateTranspose(int)>(i4);

        $r3 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r4 = virtualinvoke $r3.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z0 = virtualinvoke $r4.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z0 == 0 goto label6;

        $r6 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r7 = virtualinvoke $r6.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z1 = virtualinvoke $r7.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z1 == 0 goto label6;

        $r8 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i1 = virtualinvoke $r8.<android.renderscript.Type: int getY()>();

        $r9 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i2 = virtualinvoke $r9.<android.renderscript.Type: int getX()>();

        if i1 != i2 goto label5;

        $r11 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i5 = virtualinvoke $r11.<android.renderscript.Type: int getY()>();

        $r12 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i3 = virtualinvoke $r12.<android.renderscript.Type: int getX()>();

        if i0 != 141 goto label2;

        if i2 != i5 goto label1;

        goto label3;

     label1:
        $r14 = new android.renderscript.RSRuntimeException;

        specialinvoke $r14.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Called TRMM with invalid matrices");

        throw $r14;

     label2:
        if i3 != i1 goto label4;

     label3:
        return;

     label4:
        $r13 = new android.renderscript.RSRuntimeException;

        specialinvoke $r13.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Called TRMM with invalid matrices");

        throw $r13;

     label5:
        $r10 = new android.renderscript.RSRuntimeException;

        specialinvoke $r10.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Called TRMM with a non-symmetric matrix A");

        throw $r10;

     label6:
        $r5 = new android.renderscript.RSRuntimeException;

        specialinvoke $r5.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Called BLAS with wrong Element type");

        throw $r5;
    }

    static void validateTRMV(android.renderscript.Element, int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int)
    {
        android.renderscript.Element r0, $r7, $r10;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10;
        android.renderscript.Allocation r1, r2;
        android.renderscript.Type $r3, $r4, $r6, $r9, $r11, $r14;
        android.renderscript.RSRuntimeException $r5, $r8, $r12, $r13, $r15;
        boolean $z0, $z1;

        r0 := @parameter0: android.renderscript.Element;

        i9 := @parameter1: int;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r1 := @parameter4: android.renderscript.Allocation;

        r2 := @parameter5: android.renderscript.Allocation;

        i2 := @parameter6: int;

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateTranspose(int)>(i0);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateUplo(int)>(i9);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateDiag(int)>(i1);

        $r3 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i10 = virtualinvoke $r3.<android.renderscript.Type: int getY()>();

        $r4 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i3 = virtualinvoke $r4.<android.renderscript.Type: int getX()>();

        if $i3 != i10 goto label5;

        $r6 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r7 = virtualinvoke $r6.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z0 = virtualinvoke $r7.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z0 == 0 goto label4;

        $r9 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r10 = virtualinvoke $r9.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z1 = virtualinvoke $r10.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z1 == 0 goto label4;

        $r11 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i4 = virtualinvoke $r11.<android.renderscript.Type: int getY()>();

        if $i4 > 1 goto label3;

        if i2 <= 0 goto label2;

        $r14 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i5 = virtualinvoke $r14.<android.renderscript.Type: int getX()>();

        $i6 = i10 - 1;

        $i7 = $i6 * i2;

        $i8 = $i7 + 1;

        if $i5 != $i8 goto label1;

        return;

     label1:
        $r15 = new android.renderscript.RSRuntimeException;

        specialinvoke $r15.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Incorrect vector dimensions for TRMV");

        throw $r15;

     label2:
        $r13 = new android.renderscript.RSRuntimeException;

        specialinvoke $r13.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Vector increments must be greater than 0");

        throw $r13;

     label3:
        $r12 = new android.renderscript.RSRuntimeException;

        specialinvoke $r12.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("BLAS vectors must have Y dimension of 0 or 1");

        throw $r12;

     label4:
        $r8 = new android.renderscript.RSRuntimeException;

        specialinvoke $r8.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Called BLAS with wrong Element type");

        throw $r8;

     label5:
        $r5 = new android.renderscript.RSRuntimeException;

        specialinvoke $r5.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("A must be a square matrix for TRMV");

        throw $r5;
    }

    static void validateTRSM(android.renderscript.Element, int, int, android.renderscript.Allocation, android.renderscript.Allocation)
    {
        android.renderscript.Element r0, $r4, $r7;
        int i0, i1, i2, $i3, i4, i5;
        android.renderscript.Allocation r1, r2;
        android.renderscript.Type $r3, $r6, $r8, $r9, $r11, $r12;
        boolean $z0, $z1;
        android.renderscript.RSRuntimeException $r5, $r10, $r13, $r14;

        r0 := @parameter0: android.renderscript.Element;

        i0 := @parameter1: int;

        i4 := @parameter2: int;

        r1 := @parameter3: android.renderscript.Allocation;

        r2 := @parameter4: android.renderscript.Allocation;

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateSide(int)>(i0);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateTranspose(int)>(i4);

        $r3 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r4 = virtualinvoke $r3.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z0 = virtualinvoke $r4.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z0 == 0 goto label6;

        $r6 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r7 = virtualinvoke $r6.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $z1 = virtualinvoke $r7.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>(r0);

        if $z1 == 0 goto label6;

        $r8 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i1 = virtualinvoke $r8.<android.renderscript.Type: int getX()>();

        $r9 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i3 = virtualinvoke $r9.<android.renderscript.Type: int getY()>();

        if i1 != $i3 goto label5;

        $r11 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i5 = virtualinvoke $r11.<android.renderscript.Type: int getY()>();

        $r12 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i2 = virtualinvoke $r12.<android.renderscript.Type: int getX()>();

        if i0 != 141 goto label2;

        if i1 != i5 goto label1;

        goto label3;

     label1:
        $r14 = new android.renderscript.RSRuntimeException;

        specialinvoke $r14.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Called TRSM with invalid matrix dimensions");

        throw $r14;

     label2:
        if i1 != i2 goto label4;

     label3:
        return;

     label4:
        $r13 = new android.renderscript.RSRuntimeException;

        specialinvoke $r13.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Called TRSM with invalid matrix dimensions");

        throw $r13;

     label5:
        $r10 = new android.renderscript.RSRuntimeException;

        specialinvoke $r10.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Called TRSM with a non-symmetric matrix A");

        throw $r10;

     label6:
        $r5 = new android.renderscript.RSRuntimeException;

        specialinvoke $r5.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Called BLAS with wrong Element type");

        throw $r5;
    }

    static void validateTranspose(int)
    {
        int i0;
        android.renderscript.RSRuntimeException $r0;

        i0 := @parameter0: int;

        if i0 == 111 goto label2;

        if i0 == 112 goto label2;

        if i0 != 113 goto label1;

        goto label2;

     label1:
        $r0 = new android.renderscript.RSRuntimeException;

        specialinvoke $r0.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Invalid transpose passed to BLAS");

        throw $r0;

     label2:
        return;
    }

    static void validateUplo(int)
    {
        int i0;
        android.renderscript.RSRuntimeException $r0;

        i0 := @parameter0: int;

        if i0 == 121 goto label2;

        if i0 != 122 goto label1;

        goto label2;

     label1:
        $r0 = new android.renderscript.RSRuntimeException;

        specialinvoke $r0.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Invalid uplo passed to BLAS");

        throw $r0;

     label2:
        return;
    }

    public void BNNM(android.renderscript.Allocation, int, android.renderscript.Allocation, int, android.renderscript.Allocation, int, int)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        android.renderscript.Allocation r1, r2, r3;
        int i0, i1, i2, i3, i4, i5, i6;
        android.renderscript.RenderScript $r4, $r11, $r12, $r13, $r14, $r15;
        android.renderscript.Element $r5;
        android.renderscript.RSRuntimeException $r6, $r7;
        android.renderscript.Type $r8, $r9, $r10;
        long $l7, $l8, $l9, $l10;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        r1 := @parameter0: android.renderscript.Allocation;

        i0 := @parameter1: int;

        r2 := @parameter2: android.renderscript.Allocation;

        i1 := @parameter3: int;

        r3 := @parameter4: android.renderscript.Allocation;

        i2 := @parameter5: int;

        i3 := @parameter6: int;

        $r4 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r5 = staticinvoke <android.renderscript.Element: android.renderscript.Element U8(android.renderscript.RenderScript)>($r4);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateL3(android.renderscript.Element,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Allocation)>($r5, 111, 112, 0, r1, r2, r3);

        if i0 < 0 goto label2;

        if i0 > 255 goto label2;

        if i1 < 0 goto label1;

        if i1 > 255 goto label1;

        $r8 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i4 = virtualinvoke $r8.<android.renderscript.Type: int getY()>();

        $r9 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i5 = virtualinvoke $r9.<android.renderscript.Type: int getY()>();

        $r10 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i6 = virtualinvoke $r10.<android.renderscript.Type: int getX()>();

        $r12 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r11 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r11);

        $r13 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l8 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r13);

        $r14 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l9 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r14);

        $r15 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l10 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r15);

        virtualinvoke $r12.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_BNNM(long,int,int,int,long,int,long,int,long,int,int)>($l7, i4, i5, i6, $l8, i0, $l9, i1, $l10, i2, i3);

        return;

     label1:
        $r7 = new android.renderscript.RSRuntimeException;

        specialinvoke $r7.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Invalid b_offset passed to BNNM");

        throw $r7;

     label2:
        $r6 = new android.renderscript.RSRuntimeException;

        specialinvoke $r6.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Invalid a_offset passed to BNNM");

        throw $r6;
    }

    public void CGBMV(int, int, int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation, int, android.renderscript.Float2, android.renderscript.Allocation, int)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3, i4, i5, i6;
        android.renderscript.Float2 r1, r4;
        android.renderscript.Allocation r2, r3, r5;
        android.renderscript.RenderScript $r6, $r11, $r12, $r13, $r14, $r15;
        android.renderscript.Element $r7;
        android.renderscript.RSRuntimeException $r8;
        android.renderscript.Type $r9, $r10;
        long $l7, $l8, $l9, $l10;
        float $f0, $f1, $f2, $f3;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: android.renderscript.Float2;

        r2 := @parameter4: android.renderscript.Allocation;

        r3 := @parameter5: android.renderscript.Allocation;

        i3 := @parameter6: int;

        r4 := @parameter7: android.renderscript.Float2;

        r5 := @parameter8: android.renderscript.Allocation;

        i4 := @parameter9: int;

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r7 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32_2(android.renderscript.RenderScript)>($r6);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateGEMV(android.renderscript.Element,int,android.renderscript.Allocation,android.renderscript.Allocation,int,android.renderscript.Allocation,int)>($r7, i0, r2, r3, i3, r5, i4);

        if i1 < 0 goto label1;

        if i2 < 0 goto label1;

        $r9 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i5 = virtualinvoke $r9.<android.renderscript.Type: int getY()>();

        $r10 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i6 = virtualinvoke $r10.<android.renderscript.Type: int getX()>();

        $r12 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r11 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r11);

        $f0 = r1.<android.renderscript.Float2: float x>;

        $f1 = r1.<android.renderscript.Float2: float y>;

        $r13 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l8 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r13);

        $r14 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l9 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r14);

        $f2 = r4.<android.renderscript.Float2: float x>;

        $f3 = r4.<android.renderscript.Float2: float y>;

        $r15 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l10 = virtualinvoke r5.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r15);

        virtualinvoke $r12.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Complex(long,int,int,int,int,int,int,int,int,int,float,float,long,long,float,float,long,int,int,int,int)>($l7, 64, i0, 0, 0, 0, 0, i5, i6, 0, $f0, $f1, $l8, $l9, $f2, $f3, $l10, i3, i4, i1, i2);

        return;

     label1:
        $r8 = new android.renderscript.RSRuntimeException;

        specialinvoke $r8.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("KL and KU must be greater than or equal to 0");

        throw $r8;
    }

    public void CGEMM(int, int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Float2, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i6, i7, i8;
        android.renderscript.Float2 r1, r4;
        android.renderscript.Allocation r2, r3, r5;
        android.renderscript.RenderScript $r6, $r11, $r12, $r13, $r14, $r15;
        android.renderscript.Element $r7;
        android.renderscript.Type $r8, $r9, $r10, $r16, $r17, $r18;
        long $l2, $l3, $l4, $l5;
        float $f0, $f1, $f2, $f3;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.renderscript.Float2;

        r2 := @parameter3: android.renderscript.Allocation;

        r3 := @parameter4: android.renderscript.Allocation;

        r4 := @parameter5: android.renderscript.Float2;

        r5 := @parameter6: android.renderscript.Allocation;

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateTranspose(int)>(i0);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateTranspose(int)>(i1);

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r7 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32_2(android.renderscript.RenderScript)>($r6);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateL3(android.renderscript.Element,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Allocation)>($r7, i0, i1, 0, r2, r3, r5);

        if i0 == 111 goto label1;

        $r17 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i6 = virtualinvoke $r17.<android.renderscript.Type: int getX()>();

        $r18 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i7 = virtualinvoke $r18.<android.renderscript.Type: int getY()>();

        goto label2;

     label1:
        $r8 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i6 = virtualinvoke $r8.<android.renderscript.Type: int getY()>();

        $r9 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i7 = virtualinvoke $r9.<android.renderscript.Type: int getX()>();

     label2:
        if i1 == 111 goto label3;

        $r16 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i8 = virtualinvoke $r16.<android.renderscript.Type: int getY()>();

        goto label4;

     label3:
        $r10 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i8 = virtualinvoke $r10.<android.renderscript.Type: int getX()>();

     label4:
        $r12 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r11 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l2 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r11);

        $f0 = r1.<android.renderscript.Float2: float x>;

        $f1 = r1.<android.renderscript.Float2: float y>;

        $r13 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l3 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r13);

        $r14 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r14);

        $f2 = r4.<android.renderscript.Float2: float x>;

        $f3 = r4.<android.renderscript.Float2: float y>;

        $r15 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r5.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r15);

        virtualinvoke $r12.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Complex(long,int,int,int,int,int,int,int,int,int,float,float,long,long,float,float,long,int,int,int,int)>($l2, 125, i0, i1, 0, 0, 0, i6, i8, i7, $f0, $f1, $l3, $l4, $f2, $f3, $l5, 0, 0, 0, 0);

        return;
    }

    public void CGEMV(int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation, int, android.renderscript.Float2, android.renderscript.Allocation, int)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3, i4;
        android.renderscript.Float2 r1, r4;
        android.renderscript.Allocation r2, r3, r5;
        android.renderscript.RenderScript $r6, $r10, $r11, $r12, $r13, $r14;
        android.renderscript.Element $r7;
        android.renderscript.Type $r8, $r9;
        long $l5, $l6, $l7, $l8;
        float $f0, $f1, $f2, $f3;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        r1 := @parameter1: android.renderscript.Float2;

        r2 := @parameter2: android.renderscript.Allocation;

        r3 := @parameter3: android.renderscript.Allocation;

        i1 := @parameter4: int;

        r4 := @parameter5: android.renderscript.Float2;

        r5 := @parameter6: android.renderscript.Allocation;

        i2 := @parameter7: int;

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r7 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32_2(android.renderscript.RenderScript)>($r6);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateGEMV(android.renderscript.Element,int,android.renderscript.Allocation,android.renderscript.Allocation,int,android.renderscript.Allocation,int)>($r7, i0, r2, r3, i1, r5, i2);

        $r8 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i3 = virtualinvoke $r8.<android.renderscript.Type: int getY()>();

        $r9 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i4 = virtualinvoke $r9.<android.renderscript.Type: int getX()>();

        $r11 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r10);

        $f0 = r1.<android.renderscript.Float2: float x>;

        $f1 = r1.<android.renderscript.Float2: float y>;

        $r12 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r12);

        $r13 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r13);

        $f2 = r4.<android.renderscript.Float2: float x>;

        $f3 = r4.<android.renderscript.Float2: float y>;

        $r14 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l8 = virtualinvoke r5.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r14);

        virtualinvoke $r11.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Complex(long,int,int,int,int,int,int,int,int,int,float,float,long,long,float,float,long,int,int,int,int)>($l5, 63, i0, 0, 0, 0, 0, i3, i4, 0, $f0, $f1, $l6, $l7, $f2, $f3, $l8, i1, i2, 0, 0);

        return;
    }

    public void CGERC(android.renderscript.Float2, android.renderscript.Allocation, int, android.renderscript.Allocation, int, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        android.renderscript.Float2 r1;
        android.renderscript.Allocation r2, r3, r4;
        int i0, i1, i2, i3;
        android.renderscript.RenderScript $r5, $r9, $r10, $r11, $r12, $r13;
        android.renderscript.Element $r6;
        android.renderscript.Type $r7, $r8;
        long $l4, $l5, $l6, $l7;
        float $f0, $f1;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        r1 := @parameter0: android.renderscript.Float2;

        r2 := @parameter1: android.renderscript.Allocation;

        i0 := @parameter2: int;

        r3 := @parameter3: android.renderscript.Allocation;

        i1 := @parameter4: int;

        r4 := @parameter5: android.renderscript.Allocation;

        $r5 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r6 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32_2(android.renderscript.RenderScript)>($r5);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateGERU(android.renderscript.Element,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>($r6, r2, i0, r3, i1, r4);

        $r7 = virtualinvoke r4.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i2 = virtualinvoke $r7.<android.renderscript.Type: int getY()>();

        $r8 = virtualinvoke r4.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i3 = virtualinvoke $r8.<android.renderscript.Type: int getX()>();

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r9);

        $f0 = r1.<android.renderscript.Float2: float x>;

        $f1 = r1.<android.renderscript.Float2: float y>;

        $r11 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r11);

        $r12 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r12);

        $r13 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r4.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r13);

        virtualinvoke $r10.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Complex(long,int,int,int,int,int,int,int,int,int,float,float,long,long,float,float,long,int,int,int,int)>($l4, 99, 0, 0, 0, 0, 0, i2, i3, 0, $f0, $f1, $l5, $l6, 0.0F, 0.0F, $l7, i0, i1, 0, 0);

        return;
    }

    public void CGERU(android.renderscript.Float2, android.renderscript.Allocation, int, android.renderscript.Allocation, int, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        android.renderscript.Float2 r1;
        android.renderscript.Allocation r2, r3, r4;
        int i0, i1, i2, i3;
        android.renderscript.RenderScript $r5, $r9, $r10, $r11, $r12, $r13;
        android.renderscript.Element $r6;
        android.renderscript.Type $r7, $r8;
        long $l4, $l5, $l6, $l7;
        float $f0, $f1;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        r1 := @parameter0: android.renderscript.Float2;

        r2 := @parameter1: android.renderscript.Allocation;

        i0 := @parameter2: int;

        r3 := @parameter3: android.renderscript.Allocation;

        i1 := @parameter4: int;

        r4 := @parameter5: android.renderscript.Allocation;

        $r5 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r6 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32_2(android.renderscript.RenderScript)>($r5);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateGERU(android.renderscript.Element,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>($r6, r2, i0, r3, i1, r4);

        $r7 = virtualinvoke r4.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i2 = virtualinvoke $r7.<android.renderscript.Type: int getY()>();

        $r8 = virtualinvoke r4.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i3 = virtualinvoke $r8.<android.renderscript.Type: int getX()>();

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r9);

        $f0 = r1.<android.renderscript.Float2: float x>;

        $f1 = r1.<android.renderscript.Float2: float y>;

        $r11 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r11);

        $r12 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r12);

        $r13 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r4.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r13);

        virtualinvoke $r10.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Complex(long,int,int,int,int,int,int,int,int,int,float,float,long,long,float,float,long,int,int,int,int)>($l4, 98, 0, 0, 0, 0, 0, i2, i3, 0, $f0, $f1, $l5, $l6, 0.0F, 0.0F, $l7, i0, i1, 0, 0);

        return;
    }

    public void CHBMV(int, int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation, int, android.renderscript.Float2, android.renderscript.Allocation, int)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3, i4;
        android.renderscript.Float2 r1, r4;
        android.renderscript.Allocation r2, r3, r5;
        android.renderscript.RenderScript $r6, $r9, $r10, $r11, $r12, $r13;
        android.renderscript.Element $r7;
        android.renderscript.RSRuntimeException $r8;
        long $l5, $l6, $l7, $l8;
        float $f0, $f1, $f2, $f3;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.renderscript.Float2;

        r2 := @parameter3: android.renderscript.Allocation;

        r3 := @parameter4: android.renderscript.Allocation;

        i2 := @parameter5: int;

        r4 := @parameter6: android.renderscript.Float2;

        r5 := @parameter7: android.renderscript.Allocation;

        i3 := @parameter8: int;

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r7 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32_2(android.renderscript.RenderScript)>($r6);

        i4 = staticinvoke <android.renderscript.ScriptIntrinsicBLAS: int validateSYR2(android.renderscript.Element,int,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>($r7, i0, r3, i2, r5, i3, r2);

        if i1 < 0 goto label1;

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r9);

        $f0 = r1.<android.renderscript.Float2: float x>;

        $f1 = r1.<android.renderscript.Float2: float y>;

        $r11 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r11);

        $r12 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r12);

        $f2 = r4.<android.renderscript.Float2: float x>;

        $f3 = r4.<android.renderscript.Float2: float y>;

        $r13 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l8 = virtualinvoke r5.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r13);

        virtualinvoke $r10.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Complex(long,int,int,int,int,int,int,int,int,int,float,float,long,long,float,float,long,int,int,int,int)>($l5, 96, 0, 0, 0, i0, 0, 0, i4, i1, $f0, $f1, $l6, $l7, $f2, $f3, $l8, i2, i3, 0, 0);

        return;

     label1:
        $r8 = new android.renderscript.RSRuntimeException;

        specialinvoke $r8.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("K must be 0 or greater for HBMV");

        throw $r8;
    }

    public void CHEMM(int, int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Float2, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, $i3, $i4;
        android.renderscript.Float2 r1, r4;
        android.renderscript.Allocation r2, r3, r5;
        android.renderscript.RenderScript $r6, $r8, $r9, $r12, $r13, $r14;
        android.renderscript.Element $r7;
        long $l2, $l5, $l6, $l7;
        android.renderscript.Type $r10, $r11;
        float $f0, $f1, $f2, $f3;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.renderscript.Float2;

        r2 := @parameter3: android.renderscript.Allocation;

        r3 := @parameter4: android.renderscript.Allocation;

        r4 := @parameter5: android.renderscript.Float2;

        r5 := @parameter6: android.renderscript.Allocation;

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateUplo(int)>(i1);

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r7 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32_2(android.renderscript.RenderScript)>($r6);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateHEMM(android.renderscript.Element,int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Allocation)>($r7, i0, r2, r3, r5);

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l2 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r8);

        $r10 = virtualinvoke r5.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i3 = virtualinvoke $r10.<android.renderscript.Type: int getY()>();

        $r11 = virtualinvoke r5.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i4 = virtualinvoke $r11.<android.renderscript.Type: int getX()>();

        $f0 = r1.<android.renderscript.Float2: float x>;

        $f1 = r1.<android.renderscript.Float2: float y>;

        $r12 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r12);

        $r13 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r13);

        $f2 = r4.<android.renderscript.Float2: float x>;

        $f3 = r4.<android.renderscript.Float2: float y>;

        $r14 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r5.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r14);

        virtualinvoke $r9.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Complex(long,int,int,int,int,int,int,int,int,int,float,float,long,long,float,float,long,int,int,int,int)>($l2, 137, 0, 0, i0, i1, 0, $i3, $i4, 0, $f0, $f1, $l5, $l6, $f2, $f3, $l7, 0, 0, 0, 0);

        return;
    }

    public void CHEMV(int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation, int, android.renderscript.Float2, android.renderscript.Allocation, int)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3;
        android.renderscript.Float2 r1, r4;
        android.renderscript.Allocation r2, r3, r5;
        android.renderscript.RenderScript $r6, $r8, $r9, $r10, $r11, $r12;
        android.renderscript.Element $r7;
        long $l4, $l5, $l6, $l7;
        float $f0, $f1, $f2, $f3;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        r1 := @parameter1: android.renderscript.Float2;

        r2 := @parameter2: android.renderscript.Allocation;

        r3 := @parameter3: android.renderscript.Allocation;

        i1 := @parameter4: int;

        r4 := @parameter5: android.renderscript.Float2;

        r5 := @parameter6: android.renderscript.Allocation;

        i2 := @parameter7: int;

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r7 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32_2(android.renderscript.RenderScript)>($r6);

        i3 = staticinvoke <android.renderscript.ScriptIntrinsicBLAS: int validateSYR2(android.renderscript.Element,int,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>($r7, i0, r3, i1, r5, i2, r2);

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r8);

        $f0 = r1.<android.renderscript.Float2: float x>;

        $f1 = r1.<android.renderscript.Float2: float y>;

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r10);

        $r11 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r11);

        $f2 = r4.<android.renderscript.Float2: float x>;

        $f3 = r4.<android.renderscript.Float2: float y>;

        $r12 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r5.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r12);

        virtualinvoke $r9.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Complex(long,int,int,int,int,int,int,int,int,int,float,float,long,long,float,float,long,int,int,int,int)>($l4, 95, 0, 0, 0, i0, 0, 0, i3, 0, $f0, $f1, $l5, $l6, $f2, $f3, $l7, i1, i2, 0, 0);

        return;
    }

    public void CHER(int, float, android.renderscript.Allocation, int, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2;
        float f0;
        android.renderscript.Allocation r1, r2;
        android.renderscript.RenderScript $r3, $r5, $r6, $r7, $r8;
        android.renderscript.Element $r4;
        long $l3, $l4, $l5;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        r1 := @parameter2: android.renderscript.Allocation;

        i1 := @parameter3: int;

        r2 := @parameter4: android.renderscript.Allocation;

        $r3 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r4 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32_2(android.renderscript.RenderScript)>($r3);

        i2 = staticinvoke <android.renderscript.ScriptIntrinsicBLAS: int validateSYR(android.renderscript.Element,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>($r4, i0, r1, i1, r2);

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r5 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l3 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r5);

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r7);

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r8);

        virtualinvoke $r6.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Complex(long,int,int,int,int,int,int,int,int,int,float,float,long,long,float,float,long,int,int,int,int)>($l3, 100, 0, 0, 0, i0, 0, 0, i2, 0, f0, 0.0F, $l4, 0L, 0.0F, 0.0F, $l5, i1, 0, 0, 0);

        return;
    }

    public void CHER2(int, android.renderscript.Float2, android.renderscript.Allocation, int, android.renderscript.Allocation, int, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3;
        android.renderscript.Float2 r1;
        android.renderscript.Allocation r2, r3, r4;
        android.renderscript.RenderScript $r5, $r7, $r8, $r9, $r10, $r11;
        android.renderscript.Element $r6;
        long $l4, $l5, $l6, $l7;
        float $f0, $f1;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        r1 := @parameter1: android.renderscript.Float2;

        r2 := @parameter2: android.renderscript.Allocation;

        i1 := @parameter3: int;

        r3 := @parameter4: android.renderscript.Allocation;

        i2 := @parameter5: int;

        r4 := @parameter6: android.renderscript.Allocation;

        $r5 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r6 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32_2(android.renderscript.RenderScript)>($r5);

        i3 = staticinvoke <android.renderscript.ScriptIntrinsicBLAS: int validateSYR2(android.renderscript.Element,int,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>($r6, i0, r2, i1, r3, i2, r4);

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r7);

        $f0 = r1.<android.renderscript.Float2: float x>;

        $f1 = r1.<android.renderscript.Float2: float y>;

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r9);

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r10);

        $r11 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r4.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r11);

        virtualinvoke $r8.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Complex(long,int,int,int,int,int,int,int,int,int,float,float,long,long,float,float,long,int,int,int,int)>($l4, 102, 0, 0, 0, i0, 0, 0, i3, 0, $f0, $f1, $l5, $l6, 0.0F, 0.0F, $l7, i1, i2, 0, 0);

        return;
    }

    public void CHER2K(int, int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation, float, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, $i3, i7;
        android.renderscript.Float2 r1;
        android.renderscript.Allocation r2, r3, r4;
        float f0, $f1, $f2;
        android.renderscript.RenderScript $r5, $r8, $r9, $r11, $r12, $r13;
        android.renderscript.Element $r6;
        android.renderscript.Type $r7, $r10, $r14;
        long $l2, $l4, $l5, $l6;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.renderscript.Float2;

        r2 := @parameter3: android.renderscript.Allocation;

        r3 := @parameter4: android.renderscript.Allocation;

        f0 := @parameter5: float;

        r4 := @parameter6: android.renderscript.Allocation;

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateUplo(int)>(i0);

        $r5 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r6 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32_2(android.renderscript.RenderScript)>($r5);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateHER2K(android.renderscript.Element,int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Allocation)>($r6, i1, r2, r3, r4);

        if i1 != 111 goto label1;

        $r14 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i7 = virtualinvoke $r14.<android.renderscript.Type: int getX()>();

        goto label2;

     label1:
        $r7 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i7 = virtualinvoke $r7.<android.renderscript.Type: int getY()>();

     label2:
        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l2 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r8);

        $r10 = virtualinvoke r4.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i3 = virtualinvoke $r10.<android.renderscript.Type: int getX()>();

        $f1 = r1.<android.renderscript.Float2: float x>;

        $f2 = r1.<android.renderscript.Float2: float y>;

        $r11 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r11);

        $r12 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r12);

        $r13 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r4.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r13);

        virtualinvoke $r9.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Complex(long,int,int,int,int,int,int,int,int,int,float,float,long,long,float,float,long,int,int,int,int)>($l2, 139, i1, 0, 0, i0, 0, 0, $i3, i7, $f1, $f2, $l4, $l5, f0, 0.0F, $l6, 0, 0, 0, 0);

        return;
    }

    public void CHERK(int, int, float, android.renderscript.Allocation, float, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, $i3, i6;
        float f0, f1;
        android.renderscript.Allocation r1, r2;
        android.renderscript.RenderScript $r3, $r6, $r7, $r9, $r10;
        android.renderscript.Element $r4;
        android.renderscript.Type $r5, $r8, $r11;
        long $l2, $l4, $l5;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        f0 := @parameter2: float;

        r1 := @parameter3: android.renderscript.Allocation;

        f1 := @parameter4: float;

        r2 := @parameter5: android.renderscript.Allocation;

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateUplo(int)>(i0);

        $r3 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r4 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32_2(android.renderscript.RenderScript)>($r3);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateHERK(android.renderscript.Element,int,android.renderscript.Allocation,android.renderscript.Allocation)>($r4, i1, r1, r2);

        if i1 != 113 goto label1;

        $r11 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i6 = virtualinvoke $r11.<android.renderscript.Type: int getY()>();

        goto label2;

     label1:
        $r5 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i6 = virtualinvoke $r5.<android.renderscript.Type: int getX()>();

     label2:
        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l2 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r6);

        $r8 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i3 = virtualinvoke $r8.<android.renderscript.Type: int getX()>();

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r9);

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r10);

        virtualinvoke $r7.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Complex(long,int,int,int,int,int,int,int,int,int,float,float,long,long,float,float,long,int,int,int,int)>($l2, 138, i1, 0, 0, i0, 0, 0, $i3, i6, f0, 0.0F, $l4, 0L, f1, 0.0F, $l5, 0, 0, 0, 0);

        return;
    }

    public void CHPMV(int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation, int, android.renderscript.Float2, android.renderscript.Allocation, int)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3;
        android.renderscript.Float2 r1, r4;
        android.renderscript.Allocation r2, r3, r5;
        android.renderscript.RenderScript $r6, $r8, $r9, $r10, $r11, $r12;
        android.renderscript.Element $r7;
        long $l4, $l5, $l6, $l7;
        float $f0, $f1, $f2, $f3;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        r1 := @parameter1: android.renderscript.Float2;

        r2 := @parameter2: android.renderscript.Allocation;

        r3 := @parameter3: android.renderscript.Allocation;

        i1 := @parameter4: int;

        r4 := @parameter5: android.renderscript.Float2;

        r5 := @parameter6: android.renderscript.Allocation;

        i2 := @parameter7: int;

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r7 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32_2(android.renderscript.RenderScript)>($r6);

        i3 = staticinvoke <android.renderscript.ScriptIntrinsicBLAS: int validateSPR2(android.renderscript.Element,int,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>($r7, i0, r3, i1, r5, i2, r2);

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r8);

        $f0 = r1.<android.renderscript.Float2: float x>;

        $f1 = r1.<android.renderscript.Float2: float y>;

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r10);

        $r11 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r11);

        $f2 = r4.<android.renderscript.Float2: float x>;

        $f3 = r4.<android.renderscript.Float2: float y>;

        $r12 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r5.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r12);

        virtualinvoke $r9.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Complex(long,int,int,int,int,int,int,int,int,int,float,float,long,long,float,float,long,int,int,int,int)>($l4, 97, 0, 0, 0, i0, 0, 0, i3, 0, $f0, $f1, $l5, $l6, $f2, $f3, $l7, i1, i2, 0, 0);

        return;
    }

    public void CHPR(int, float, android.renderscript.Allocation, int, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2;
        float f0;
        android.renderscript.Allocation r1, r2;
        android.renderscript.RenderScript $r3, $r5, $r6, $r7, $r8;
        android.renderscript.Element $r4;
        long $l3, $l4, $l5;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        r1 := @parameter2: android.renderscript.Allocation;

        i1 := @parameter3: int;

        r2 := @parameter4: android.renderscript.Allocation;

        $r3 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r4 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32_2(android.renderscript.RenderScript)>($r3);

        i2 = staticinvoke <android.renderscript.ScriptIntrinsicBLAS: int validateSPR(android.renderscript.Element,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>($r4, i0, r1, i1, r2);

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r5 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l3 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r5);

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r7);

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r8);

        virtualinvoke $r6.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Complex(long,int,int,int,int,int,int,int,int,int,float,float,long,long,float,float,long,int,int,int,int)>($l3, 101, 0, 0, 0, i0, 0, 0, i2, 0, f0, 0.0F, $l4, 0L, 0.0F, 0.0F, $l5, i1, 0, 0, 0);

        return;
    }

    public void CHPR2(int, android.renderscript.Float2, android.renderscript.Allocation, int, android.renderscript.Allocation, int, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3;
        android.renderscript.Float2 r1;
        android.renderscript.Allocation r2, r3, r4;
        android.renderscript.RenderScript $r5, $r7, $r8, $r9, $r10, $r11;
        android.renderscript.Element $r6;
        long $l4, $l5, $l6, $l7;
        float $f0, $f1;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        r1 := @parameter1: android.renderscript.Float2;

        r2 := @parameter2: android.renderscript.Allocation;

        i1 := @parameter3: int;

        r3 := @parameter4: android.renderscript.Allocation;

        i2 := @parameter5: int;

        r4 := @parameter6: android.renderscript.Allocation;

        $r5 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r6 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32_2(android.renderscript.RenderScript)>($r5);

        i3 = staticinvoke <android.renderscript.ScriptIntrinsicBLAS: int validateSPR2(android.renderscript.Element,int,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>($r6, i0, r2, i1, r3, i2, r4);

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r7);

        $f0 = r1.<android.renderscript.Float2: float x>;

        $f1 = r1.<android.renderscript.Float2: float y>;

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r9);

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r10);

        $r11 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r4.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r11);

        virtualinvoke $r8.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Complex(long,int,int,int,int,int,int,int,int,int,float,float,long,long,float,float,long,int,int,int,int)>($l4, 103, 0, 0, 0, i0, 0, 0, i3, 0, $f0, $f1, $l5, $l6, 0.0F, 0.0F, $l7, i1, i2, 0, 0);

        return;
    }

    public void CSYMM(int, int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Float2, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, $i2, $i3, $i5, $i6;
        android.renderscript.Float2 r1, r4;
        android.renderscript.Allocation r2, r3, r5;
        android.renderscript.Type $r6, $r7, $r13, $r14;
        android.renderscript.RSRuntimeException $r8;
        android.renderscript.RenderScript $r9, $r11, $r12, $r15, $r16, $r17;
        android.renderscript.Element $r10;
        long $l4, $l7, $l8, $l9;
        float $f0, $f1, $f2, $f3;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.renderscript.Float2;

        r2 := @parameter3: android.renderscript.Allocation;

        r3 := @parameter4: android.renderscript.Allocation;

        r4 := @parameter5: android.renderscript.Float2;

        r5 := @parameter6: android.renderscript.Allocation;

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateSide(int)>(i0);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateUplo(int)>(i1);

        $r6 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i2 = virtualinvoke $r6.<android.renderscript.Type: int getX()>();

        $r7 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i3 = virtualinvoke $r7.<android.renderscript.Type: int getY()>();

        if $i2 != $i3 goto label1;

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r10 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32_2(android.renderscript.RenderScript)>($r9);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateL3(android.renderscript.Element,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Allocation)>($r10, 0, 0, i0, r2, r3, r5);

        $r12 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r11 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r11);

        $r13 = virtualinvoke r5.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i5 = virtualinvoke $r13.<android.renderscript.Type: int getY()>();

        $r14 = virtualinvoke r5.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i6 = virtualinvoke $r14.<android.renderscript.Type: int getX()>();

        $f0 = r1.<android.renderscript.Float2: float x>;

        $f1 = r1.<android.renderscript.Float2: float y>;

        $r15 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r15);

        $r16 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l8 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r16);

        $f2 = r4.<android.renderscript.Float2: float x>;

        $f3 = r4.<android.renderscript.Float2: float y>;

        $r17 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l9 = virtualinvoke r5.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r17);

        virtualinvoke $r12.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Complex(long,int,int,int,int,int,int,int,int,int,float,float,long,long,float,float,long,int,int,int,int)>($l4, 126, 0, 0, i0, i1, 0, $i5, $i6, 0, $f0, $f1, $l7, $l8, $f2, $f3, $l9, 0, 0, 0, 0);

        return;

     label1:
        $r8 = new android.renderscript.RSRuntimeException;

        specialinvoke $r8.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Matrix A is not symmetric");

        throw $r8;
    }

    public void CSYR2K(int, int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Float2, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, $i3, i7;
        android.renderscript.Float2 r1, r4;
        android.renderscript.Allocation r2, r3, r5;
        android.renderscript.RenderScript $r6, $r9, $r10, $r12, $r13, $r14;
        android.renderscript.Element $r7;
        android.renderscript.Type $r8, $r11, $r15;
        long $l2, $l4, $l5, $l6;
        float $f0, $f1, $f2, $f3;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.renderscript.Float2;

        r2 := @parameter3: android.renderscript.Allocation;

        r3 := @parameter4: android.renderscript.Allocation;

        r4 := @parameter5: android.renderscript.Float2;

        r5 := @parameter6: android.renderscript.Allocation;

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateUplo(int)>(i0);

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r7 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32_2(android.renderscript.RenderScript)>($r6);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateSYR2K(android.renderscript.Element,int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Allocation)>($r7, i1, r2, r3, r5);

        if i1 == 111 goto label1;

        $r15 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i7 = virtualinvoke $r15.<android.renderscript.Type: int getY()>();

        goto label2;

     label1:
        $r8 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i7 = virtualinvoke $r8.<android.renderscript.Type: int getX()>();

     label2:
        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l2 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r9);

        $r11 = virtualinvoke r5.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i3 = virtualinvoke $r11.<android.renderscript.Type: int getX()>();

        $f0 = r1.<android.renderscript.Float2: float x>;

        $f1 = r1.<android.renderscript.Float2: float y>;

        $r12 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r12);

        $r13 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r13);

        $f2 = r4.<android.renderscript.Float2: float x>;

        $f3 = r4.<android.renderscript.Float2: float y>;

        $r14 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r5.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r14);

        virtualinvoke $r10.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Complex(long,int,int,int,int,int,int,int,int,int,float,float,long,long,float,float,long,int,int,int,int)>($l2, 128, i1, 0, 0, i0, 0, 0, $i3, i7, $f0, $f1, $l4, $l5, $f2, $f3, $l6, 0, 0, 0, 0);

        return;
    }

    public void CSYRK(int, int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Float2, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, $i3, i6;
        android.renderscript.Float2 r1, r3;
        android.renderscript.Allocation r2, r4;
        android.renderscript.RenderScript $r5, $r8, $r9, $r11, $r12;
        android.renderscript.Element $r6;
        android.renderscript.Type $r7, $r10, $r13;
        long $l2, $l4, $l5;
        float $f0, $f1, $f2, $f3;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.renderscript.Float2;

        r2 := @parameter3: android.renderscript.Allocation;

        r3 := @parameter4: android.renderscript.Float2;

        r4 := @parameter5: android.renderscript.Allocation;

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateTranspose(int)>(i1);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateUplo(int)>(i0);

        $r5 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r6 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32_2(android.renderscript.RenderScript)>($r5);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateL3(android.renderscript.Element,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Allocation)>($r6, i1, 0, 0, r2, null, r4);

        if i1 == 111 goto label1;

        $r13 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i6 = virtualinvoke $r13.<android.renderscript.Type: int getY()>();

        goto label2;

     label1:
        $r7 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i6 = virtualinvoke $r7.<android.renderscript.Type: int getX()>();

     label2:
        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l2 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r8);

        $r10 = virtualinvoke r4.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i3 = virtualinvoke $r10.<android.renderscript.Type: int getX()>();

        $f0 = r1.<android.renderscript.Float2: float x>;

        $f1 = r1.<android.renderscript.Float2: float y>;

        $r11 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r11);

        $f2 = r3.<android.renderscript.Float2: float x>;

        $f3 = r3.<android.renderscript.Float2: float y>;

        $r12 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r4.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r12);

        virtualinvoke $r9.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Complex(long,int,int,int,int,int,int,int,int,int,float,float,long,long,float,float,long,int,int,int,int)>($l2, 127, i1, 0, 0, i0, 0, 0, $i3, i6, $f0, $f1, $l4, 0L, $f2, $f3, $l5, 0, 0, 0, 0);

        return;
    }

    public void CTBMV(int, int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3, i4, i5;
        android.renderscript.Allocation r1, r2;
        android.renderscript.RSRuntimeException $r3;
        android.renderscript.RenderScript $r4, $r7, $r8, $r9, $r10;
        android.renderscript.Element $r5;
        android.renderscript.Type $r6;
        long $l6, $l7, $l8;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: android.renderscript.Allocation;

        r2 := @parameter5: android.renderscript.Allocation;

        i4 := @parameter6: int;

        if i3 < 0 goto label1;

        $r4 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r5 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32_2(android.renderscript.RenderScript)>($r4);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateTRMV(android.renderscript.Element,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>($r5, i0, i1, i2, r1, r2, i4);

        $r6 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i5 = virtualinvoke $r6.<android.renderscript.Type: int getY()>();

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r7);

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r9);

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l8 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r10);

        virtualinvoke $r8.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Complex(long,int,int,int,int,int,int,int,int,int,float,float,long,long,float,float,long,int,int,int,int)>($l6, 66, i1, 0, 0, i0, i2, 0, i5, i3, 0.0F, 0.0F, $l7, $l8, 0.0F, 0.0F, 0L, i4, 0, 0, 0);

        return;

     label1:
        $r3 = new android.renderscript.RSRuntimeException;

        specialinvoke $r3.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("K must be greater than or equal to 0");

        throw $r3;
    }

    public void CTBSV(int, int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3, i4, i5;
        android.renderscript.Allocation r1, r2;
        android.renderscript.RenderScript $r3, $r7, $r8, $r9, $r10;
        android.renderscript.Element $r4;
        android.renderscript.Type $r5;
        android.renderscript.RSRuntimeException $r6;
        long $l6, $l7, $l8;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: android.renderscript.Allocation;

        r2 := @parameter5: android.renderscript.Allocation;

        i4 := @parameter6: int;

        $r3 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r4 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32_2(android.renderscript.RenderScript)>($r3);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateTRMV(android.renderscript.Element,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>($r4, i0, i1, i2, r1, r2, i4);

        $r5 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i5 = virtualinvoke $r5.<android.renderscript.Type: int getY()>();

        if i3 < 0 goto label1;

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r7);

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r9);

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l8 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r10);

        virtualinvoke $r8.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Complex(long,int,int,int,int,int,int,int,int,int,float,float,long,long,float,float,long,int,int,int,int)>($l6, 69, i1, 0, 0, i0, i2, 0, i5, i3, 0.0F, 0.0F, $l7, $l8, 0.0F, 0.0F, 0L, i4, 0, 0, 0);

        return;

     label1:
        $r6 = new android.renderscript.RSRuntimeException;

        specialinvoke $r6.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Number of diagonals must be positive");

        throw $r6;
    }

    public void CTPMV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3, i4;
        android.renderscript.Allocation r1, r2;
        android.renderscript.RenderScript $r3, $r5, $r6, $r7, $r8;
        android.renderscript.Element $r4;
        long $l5, $l6, $l7;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: android.renderscript.Allocation;

        r2 := @parameter4: android.renderscript.Allocation;

        i3 := @parameter5: int;

        $r3 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r4 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32_2(android.renderscript.RenderScript)>($r3);

        i4 = staticinvoke <android.renderscript.ScriptIntrinsicBLAS: int validateTPMV(android.renderscript.Element,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>($r4, i0, i1, i2, r1, r2, i3);

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r5 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r5);

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r7);

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r8);

        virtualinvoke $r6.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Complex(long,int,int,int,int,int,int,int,int,int,float,float,long,long,float,float,long,int,int,int,int)>($l5, 67, i1, 0, 0, i0, i2, 0, i4, 0, 0.0F, 0.0F, $l6, $l7, 0.0F, 0.0F, 0L, i3, 0, 0, 0);

        return;
    }

    public void CTPSV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3, i4;
        android.renderscript.Allocation r1, r2;
        android.renderscript.RenderScript $r3, $r5, $r6, $r7, $r8;
        android.renderscript.Element $r4;
        long $l5, $l6, $l7;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: android.renderscript.Allocation;

        r2 := @parameter4: android.renderscript.Allocation;

        i3 := @parameter5: int;

        $r3 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r4 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32_2(android.renderscript.RenderScript)>($r3);

        i4 = staticinvoke <android.renderscript.ScriptIntrinsicBLAS: int validateTPMV(android.renderscript.Element,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>($r4, i0, i1, i2, r1, r2, i3);

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r5 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r5);

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r7);

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r8);

        virtualinvoke $r6.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Complex(long,int,int,int,int,int,int,int,int,int,float,float,long,long,float,float,long,int,int,int,int)>($l5, 70, i1, 0, 0, i0, i2, 0, i4, 0, 0.0F, 0.0F, $l6, $l7, 0.0F, 0.0F, 0L, i3, 0, 0, 0);

        return;
    }

    public void CTRMM(int, int, int, int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3, $i5, $i6;
        android.renderscript.Float2 r1;
        android.renderscript.Allocation r2, r3;
        android.renderscript.RenderScript $r4, $r6, $r7, $r10, $r11;
        android.renderscript.Element $r5;
        long $l4, $l7, $l8;
        android.renderscript.Type $r8, $r9;
        float $f0, $f1;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: android.renderscript.Float2;

        r2 := @parameter5: android.renderscript.Allocation;

        r3 := @parameter6: android.renderscript.Allocation;

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateUplo(int)>(i1);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateDiag(int)>(i3);

        $r4 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r5 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32_2(android.renderscript.RenderScript)>($r4);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateTRMM(android.renderscript.Element,int,int,android.renderscript.Allocation,android.renderscript.Allocation)>($r5, i0, i2, r2, r3);

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r6);

        $r8 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i5 = virtualinvoke $r8.<android.renderscript.Type: int getY()>();

        $r9 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i6 = virtualinvoke $r9.<android.renderscript.Type: int getX()>();

        $f0 = r1.<android.renderscript.Float2: float x>;

        $f1 = r1.<android.renderscript.Float2: float y>;

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r10);

        $r11 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l8 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r11);

        virtualinvoke $r7.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Complex(long,int,int,int,int,int,int,int,int,int,float,float,long,long,float,float,long,int,int,int,int)>($l4, 129, i2, 0, i0, i1, i3, $i5, $i6, 0, $f0, $f1, $l7, $l8, 0.0F, 0.0F, 0L, 0, 0, 0, 0);

        return;
    }

    public void CTRMV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3, i4;
        android.renderscript.Allocation r1, r2;
        android.renderscript.RenderScript $r3, $r6, $r7, $r8, $r9;
        android.renderscript.Element $r4;
        android.renderscript.Type $r5;
        long $l5, $l6, $l7;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: android.renderscript.Allocation;

        r2 := @parameter4: android.renderscript.Allocation;

        i3 := @parameter5: int;

        $r3 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r4 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32_2(android.renderscript.RenderScript)>($r3);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateTRMV(android.renderscript.Element,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>($r4, i0, i1, i2, r1, r2, i3);

        $r5 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i4 = virtualinvoke $r5.<android.renderscript.Type: int getY()>();

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r6);

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r8);

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r9);

        virtualinvoke $r7.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Complex(long,int,int,int,int,int,int,int,int,int,float,float,long,long,float,float,long,int,int,int,int)>($l5, 65, i1, 0, 0, i0, i2, 0, i4, 0, 0.0F, 0.0F, $l6, $l7, 0.0F, 0.0F, 0L, i3, 0, 0, 0);

        return;
    }

    public void CTRSM(int, int, int, int, android.renderscript.Float2, android.renderscript.Allocation, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3, $i5, $i6;
        android.renderscript.Float2 r1;
        android.renderscript.Allocation r2, r3;
        android.renderscript.RenderScript $r4, $r6, $r7, $r10, $r11;
        android.renderscript.Element $r5;
        long $l4, $l7, $l8;
        android.renderscript.Type $r8, $r9;
        float $f0, $f1;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: android.renderscript.Float2;

        r2 := @parameter5: android.renderscript.Allocation;

        r3 := @parameter6: android.renderscript.Allocation;

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateUplo(int)>(i1);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateDiag(int)>(i3);

        $r4 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r5 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32_2(android.renderscript.RenderScript)>($r4);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateTRSM(android.renderscript.Element,int,int,android.renderscript.Allocation,android.renderscript.Allocation)>($r5, i0, i2, r2, r3);

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r6);

        $r8 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i5 = virtualinvoke $r8.<android.renderscript.Type: int getY()>();

        $r9 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i6 = virtualinvoke $r9.<android.renderscript.Type: int getX()>();

        $f0 = r1.<android.renderscript.Float2: float x>;

        $f1 = r1.<android.renderscript.Float2: float y>;

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r10);

        $r11 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l8 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r11);

        virtualinvoke $r7.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Complex(long,int,int,int,int,int,int,int,int,int,float,float,long,long,float,float,long,int,int,int,int)>($l4, 130, i2, 0, i0, i1, i3, $i5, $i6, 0, $f0, $f1, $l7, $l8, 0.0F, 0.0F, 0L, 0, 0, 0, 0);

        return;
    }

    public void CTRSV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3, i4;
        android.renderscript.Allocation r1, r2;
        android.renderscript.RenderScript $r3, $r6, $r7, $r8, $r9;
        android.renderscript.Element $r4;
        android.renderscript.Type $r5;
        long $l5, $l6, $l7;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: android.renderscript.Allocation;

        r2 := @parameter4: android.renderscript.Allocation;

        i3 := @parameter5: int;

        $r3 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r4 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32_2(android.renderscript.RenderScript)>($r3);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateTRMV(android.renderscript.Element,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>($r4, i0, i1, i2, r1, r2, i3);

        $r5 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i4 = virtualinvoke $r5.<android.renderscript.Type: int getY()>();

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r6);

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r8);

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r9);

        virtualinvoke $r7.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Complex(long,int,int,int,int,int,int,int,int,int,float,float,long,long,float,float,long,int,int,int,int)>($l5, 68, i1, 0, 0, i0, i2, 0, i4, 0, 0.0F, 0.0F, $l6, $l7, 0.0F, 0.0F, 0L, i3, 0, 0, 0);

        return;
    }

    public void DGBMV(int, int, int, double, android.renderscript.Allocation, android.renderscript.Allocation, int, double, android.renderscript.Allocation, int)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3, i4, i5, i6;
        double d0, d1;
        android.renderscript.Allocation r1, r2, r3;
        android.renderscript.RenderScript $r4, $r9, $r10, $r11, $r12, $r13;
        android.renderscript.Element $r5;
        android.renderscript.RSRuntimeException $r6;
        android.renderscript.Type $r7, $r8;
        long $l7, $l8, $l9, $l10;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        d0 := @parameter3: double;

        r1 := @parameter4: android.renderscript.Allocation;

        r2 := @parameter5: android.renderscript.Allocation;

        i3 := @parameter6: int;

        d1 := @parameter7: double;

        r3 := @parameter8: android.renderscript.Allocation;

        i4 := @parameter9: int;

        $r4 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r5 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64(android.renderscript.RenderScript)>($r4);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateGEMV(android.renderscript.Element,int,android.renderscript.Allocation,android.renderscript.Allocation,int,android.renderscript.Allocation,int)>($r5, i0, r1, r2, i3, r3, i4);

        if i1 < 0 goto label1;

        if i2 < 0 goto label1;

        $r7 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i5 = virtualinvoke $r7.<android.renderscript.Type: int getY()>();

        $r8 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i6 = virtualinvoke $r8.<android.renderscript.Type: int getX()>();

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r9);

        $r11 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l8 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r11);

        $r12 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l9 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r12);

        $r13 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l10 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r13);

        virtualinvoke $r10.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Double(long,int,int,int,int,int,int,int,int,int,double,long,long,double,long,int,int,int,int)>($l7, 56, i0, 0, 0, 0, 0, i5, i6, 0, d0, $l8, $l9, d1, $l10, i3, i4, i1, i2);

        return;

     label1:
        $r6 = new android.renderscript.RSRuntimeException;

        specialinvoke $r6.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("KL and KU must be greater than or equal to 0");

        throw $r6;
    }

    public void DGEMM(int, int, double, android.renderscript.Allocation, android.renderscript.Allocation, double, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i6, i7, i8;
        double d0, d1;
        android.renderscript.Allocation r1, r2, r3;
        android.renderscript.RenderScript $r4, $r9, $r10, $r11, $r12, $r13;
        android.renderscript.Element $r5;
        android.renderscript.Type $r6, $r7, $r8, $r14, $r15, $r16;
        long $l2, $l3, $l4, $l5;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        d0 := @parameter2: double;

        r1 := @parameter3: android.renderscript.Allocation;

        r2 := @parameter4: android.renderscript.Allocation;

        d1 := @parameter5: double;

        r3 := @parameter6: android.renderscript.Allocation;

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateTranspose(int)>(i0);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateTranspose(int)>(i1);

        $r4 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r5 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64(android.renderscript.RenderScript)>($r4);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateL3(android.renderscript.Element,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Allocation)>($r5, i0, i1, 0, r1, r2, r3);

        if i0 == 111 goto label1;

        $r15 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i6 = virtualinvoke $r15.<android.renderscript.Type: int getX()>();

        $r16 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i7 = virtualinvoke $r16.<android.renderscript.Type: int getY()>();

        goto label2;

     label1:
        $r6 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i6 = virtualinvoke $r6.<android.renderscript.Type: int getY()>();

        $r7 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i7 = virtualinvoke $r7.<android.renderscript.Type: int getX()>();

     label2:
        if i1 == 111 goto label3;

        $r14 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i8 = virtualinvoke $r14.<android.renderscript.Type: int getY()>();

        goto label4;

     label3:
        $r8 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i8 = virtualinvoke $r8.<android.renderscript.Type: int getX()>();

     label4:
        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l2 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r9);

        $r11 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l3 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r11);

        $r12 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r12);

        $r13 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r13);

        virtualinvoke $r10.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Double(long,int,int,int,int,int,int,int,int,int,double,long,long,double,long,int,int,int,int)>($l2, 119, i0, i1, 0, 0, 0, i6, i8, i7, d0, $l3, $l4, d1, $l5, 0, 0, 0, 0);

        return;
    }

    public void DGEMV(int, double, android.renderscript.Allocation, android.renderscript.Allocation, int, double, android.renderscript.Allocation, int)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3, i4;
        double d0, d1;
        android.renderscript.Allocation r1, r2, r3;
        android.renderscript.RenderScript $r4, $r8, $r9, $r10, $r11, $r12;
        android.renderscript.Element $r5;
        android.renderscript.Type $r6, $r7;
        long $l5, $l6, $l7, $l8;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        r1 := @parameter2: android.renderscript.Allocation;

        r2 := @parameter3: android.renderscript.Allocation;

        i1 := @parameter4: int;

        d1 := @parameter5: double;

        r3 := @parameter6: android.renderscript.Allocation;

        i2 := @parameter7: int;

        $r4 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r5 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64(android.renderscript.RenderScript)>($r4);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateGEMV(android.renderscript.Element,int,android.renderscript.Allocation,android.renderscript.Allocation,int,android.renderscript.Allocation,int)>($r5, i0, r1, r2, i1, r3, i2);

        $r6 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i3 = virtualinvoke $r6.<android.renderscript.Type: int getY()>();

        $r7 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i4 = virtualinvoke $r7.<android.renderscript.Type: int getX()>();

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r8);

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r10);

        $r11 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r11);

        $r12 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l8 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r12);

        virtualinvoke $r9.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Double(long,int,int,int,int,int,int,int,int,int,double,long,long,double,long,int,int,int,int)>($l5, 55, i0, 0, 0, 0, 0, i3, i4, 0, d0, $l6, $l7, d1, $l8, i1, i2, 0, 0);

        return;
    }

    public void DGER(double, android.renderscript.Allocation, int, android.renderscript.Allocation, int, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        double d0;
        android.renderscript.Allocation r1, r2, r3;
        int i0, i1, i2, i3;
        android.renderscript.Type $r4, $r5;
        android.renderscript.RenderScript $r6, $r8, $r9, $r10, $r11, $r12;
        android.renderscript.Element $r7;
        long $l4, $l5, $l6, $l7;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        d0 := @parameter0: double;

        r1 := @parameter1: android.renderscript.Allocation;

        i0 := @parameter2: int;

        r2 := @parameter3: android.renderscript.Allocation;

        i1 := @parameter4: int;

        r3 := @parameter5: android.renderscript.Allocation;

        $r4 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i2 = virtualinvoke $r4.<android.renderscript.Type: int getY()>();

        $r5 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i3 = virtualinvoke $r5.<android.renderscript.Type: int getX()>();

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r7 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64(android.renderscript.RenderScript)>($r6);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateGER(android.renderscript.Element,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>($r7, r1, i0, r2, i1, r3);

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r8);

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r10);

        $r11 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r11);

        $r12 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r12);

        virtualinvoke $r9.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Double(long,int,int,int,int,int,int,int,int,int,double,long,long,double,long,int,int,int,int)>($l4, 90, 0, 0, 0, 0, 0, i2, i3, 0, d0, $l5, $l6, 0.0, $l7, i0, i1, 0, 0);

        return;
    }

    public void DSBMV(int, int, double, android.renderscript.Allocation, android.renderscript.Allocation, int, double, android.renderscript.Allocation, int)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3, i4;
        double d0, d1;
        android.renderscript.Allocation r1, r2, r3;
        android.renderscript.RSRuntimeException $r4;
        android.renderscript.RenderScript $r5, $r7, $r8, $r9, $r10, $r11;
        android.renderscript.Element $r6;
        long $l5, $l6, $l7, $l8;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        d0 := @parameter2: double;

        r1 := @parameter3: android.renderscript.Allocation;

        r2 := @parameter4: android.renderscript.Allocation;

        i2 := @parameter5: int;

        d1 := @parameter6: double;

        r3 := @parameter7: android.renderscript.Allocation;

        i3 := @parameter8: int;

        if i1 < 0 goto label1;

        $r5 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r6 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64(android.renderscript.RenderScript)>($r5);

        i4 = staticinvoke <android.renderscript.ScriptIntrinsicBLAS: int validateSYMV(android.renderscript.Element,int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Allocation,int,int)>($r6, i0, r1, r2, r3, i2, i3);

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r7);

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r9);

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r10);

        $r11 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l8 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r11);

        virtualinvoke $r8.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Double(long,int,int,int,int,int,int,int,int,int,double,long,long,double,long,int,int,int,int)>($l5, 88, 0, 0, 0, i0, 0, 0, i4, i1, d0, $l6, $l7, d1, $l8, i2, i3, 0, 0);

        return;

     label1:
        $r4 = new android.renderscript.RSRuntimeException;

        specialinvoke $r4.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("K must be greater than or equal to 0");

        throw $r4;
    }

    public void DSPMV(int, double, android.renderscript.Allocation, android.renderscript.Allocation, int, double, android.renderscript.Allocation, int)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3;
        double d0, d1;
        android.renderscript.Allocation r1, r2, r3;
        android.renderscript.RenderScript $r4, $r6, $r7, $r8, $r9, $r10;
        android.renderscript.Element $r5;
        long $l4, $l5, $l6, $l7;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        r1 := @parameter2: android.renderscript.Allocation;

        r2 := @parameter3: android.renderscript.Allocation;

        i1 := @parameter4: int;

        d1 := @parameter5: double;

        r3 := @parameter6: android.renderscript.Allocation;

        i2 := @parameter7: int;

        $r4 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r5 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64(android.renderscript.RenderScript)>($r4);

        i3 = staticinvoke <android.renderscript.ScriptIntrinsicBLAS: int validateSPMV(android.renderscript.Element,int,android.renderscript.Allocation,android.renderscript.Allocation,int,android.renderscript.Allocation,int)>($r5, i0, r1, r2, i1, r3, i2);

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r6);

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r8);

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r9);

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r10);

        virtualinvoke $r7.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Double(long,int,int,int,int,int,int,int,int,int,double,long,long,double,long,int,int,int,int)>($l4, 89, 0, 0, 0, i0, 0, 0, i3, 0, d0, $l5, $l6, d1, $l7, i1, i2, 0, 0);

        return;
    }

    public void DSPR(int, double, android.renderscript.Allocation, int, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2;
        double d0;
        android.renderscript.Allocation r1, r2;
        android.renderscript.RenderScript $r3, $r5, $r6, $r7, $r8;
        android.renderscript.Element $r4;
        long $l3, $l4, $l5;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        r1 := @parameter2: android.renderscript.Allocation;

        i1 := @parameter3: int;

        r2 := @parameter4: android.renderscript.Allocation;

        $r3 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r4 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64(android.renderscript.RenderScript)>($r3);

        i2 = staticinvoke <android.renderscript.ScriptIntrinsicBLAS: int validateSPR(android.renderscript.Element,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>($r4, i0, r1, i1, r2);

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r5 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l3 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r5);

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r7);

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r8);

        virtualinvoke $r6.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Double(long,int,int,int,int,int,int,int,int,int,double,long,long,double,long,int,int,int,int)>($l3, 92, 0, 0, 0, i0, 0, 0, i2, 0, d0, $l4, $l5, 0.0, 0L, i1, 0, 0, 0);

        return;
    }

    public void DSPR2(int, double, android.renderscript.Allocation, int, android.renderscript.Allocation, int, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3;
        double d0;
        android.renderscript.Allocation r1, r2, r3;
        android.renderscript.RenderScript $r4, $r6, $r7, $r8, $r9, $r10;
        android.renderscript.Element $r5;
        long $l4, $l5, $l6, $l7;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        r1 := @parameter2: android.renderscript.Allocation;

        i1 := @parameter3: int;

        r2 := @parameter4: android.renderscript.Allocation;

        i2 := @parameter5: int;

        r3 := @parameter6: android.renderscript.Allocation;

        $r4 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r5 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64(android.renderscript.RenderScript)>($r4);

        i3 = staticinvoke <android.renderscript.ScriptIntrinsicBLAS: int validateSPR2(android.renderscript.Element,int,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>($r5, i0, r1, i1, r2, i2, r3);

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r6);

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r8);

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r9);

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r10);

        virtualinvoke $r7.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Double(long,int,int,int,int,int,int,int,int,int,double,long,long,double,long,int,int,int,int)>($l4, 94, 0, 0, 0, i0, 0, 0, i3, 0, d0, $l5, $l6, 0.0, $l7, i1, i2, 0, 0);

        return;
    }

    public void DSYMM(int, int, double, android.renderscript.Allocation, android.renderscript.Allocation, double, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, $i2, $i3, $i5, $i6;
        double d0, d1;
        android.renderscript.Allocation r1, r2, r3;
        android.renderscript.Type $r4, $r5, $r11, $r12;
        android.renderscript.RSRuntimeException $r6;
        android.renderscript.RenderScript $r7, $r9, $r10, $r13, $r14, $r15;
        android.renderscript.Element $r8;
        long $l4, $l7, $l8, $l9;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        d0 := @parameter2: double;

        r1 := @parameter3: android.renderscript.Allocation;

        r2 := @parameter4: android.renderscript.Allocation;

        d1 := @parameter5: double;

        r3 := @parameter6: android.renderscript.Allocation;

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateSide(int)>(i0);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateUplo(int)>(i1);

        $r4 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i2 = virtualinvoke $r4.<android.renderscript.Type: int getX()>();

        $r5 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i3 = virtualinvoke $r5.<android.renderscript.Type: int getY()>();

        if $i2 != $i3 goto label1;

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r8 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64(android.renderscript.RenderScript)>($r7);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateL3(android.renderscript.Element,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Allocation)>($r8, 0, 0, i0, r1, r2, r3);

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r9);

        $r11 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i5 = virtualinvoke $r11.<android.renderscript.Type: int getY()>();

        $r12 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i6 = virtualinvoke $r12.<android.renderscript.Type: int getX()>();

        $r13 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r13);

        $r14 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l8 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r14);

        $r15 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l9 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r15);

        virtualinvoke $r10.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Double(long,int,int,int,int,int,int,int,int,int,double,long,long,double,long,int,int,int,int)>($l4, 120, 0, 0, i0, i1, 0, $i5, $i6, 0, d0, $l7, $l8, d1, $l9, 0, 0, 0, 0);

        return;

     label1:
        $r6 = new android.renderscript.RSRuntimeException;

        specialinvoke $r6.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Matrix A is not symmetric");

        throw $r6;
    }

    public void DSYMV(int, double, android.renderscript.Allocation, android.renderscript.Allocation, int, double, android.renderscript.Allocation, int)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3;
        double d0, d1;
        android.renderscript.Allocation r1, r2, r3;
        android.renderscript.RenderScript $r4, $r6, $r7, $r8, $r9, $r10;
        android.renderscript.Element $r5;
        long $l4, $l5, $l6, $l7;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        r1 := @parameter2: android.renderscript.Allocation;

        r2 := @parameter3: android.renderscript.Allocation;

        i1 := @parameter4: int;

        d1 := @parameter5: double;

        r3 := @parameter6: android.renderscript.Allocation;

        i2 := @parameter7: int;

        $r4 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r5 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64(android.renderscript.RenderScript)>($r4);

        i3 = staticinvoke <android.renderscript.ScriptIntrinsicBLAS: int validateSYMV(android.renderscript.Element,int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Allocation,int,int)>($r5, i0, r1, r2, r3, i1, i2);

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r6);

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r8);

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r9);

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r10);

        virtualinvoke $r7.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Double(long,int,int,int,int,int,int,int,int,int,double,long,long,double,long,int,int,int,int)>($l4, 87, 0, 0, 0, i0, 0, 0, i3, 0, d0, $l5, $l6, d1, $l7, i1, i2, 0, 0);

        return;
    }

    public void DSYR(int, double, android.renderscript.Allocation, int, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2;
        double d0;
        android.renderscript.Allocation r1, r2;
        android.renderscript.RenderScript $r3, $r5, $r6, $r7, $r8;
        android.renderscript.Element $r4;
        long $l3, $l4, $l5;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        r1 := @parameter2: android.renderscript.Allocation;

        i1 := @parameter3: int;

        r2 := @parameter4: android.renderscript.Allocation;

        $r3 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r4 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64(android.renderscript.RenderScript)>($r3);

        i2 = staticinvoke <android.renderscript.ScriptIntrinsicBLAS: int validateSYR(android.renderscript.Element,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>($r4, i0, r1, i1, r2);

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r5 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l3 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r5);

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r7);

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r8);

        virtualinvoke $r6.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Double(long,int,int,int,int,int,int,int,int,int,double,long,long,double,long,int,int,int,int)>($l3, 91, 0, 0, 0, i0, 0, 0, i2, 0, d0, $l4, $l5, 0.0, 0L, i1, 0, 0, 0);

        return;
    }

    public void DSYR2(int, double, android.renderscript.Allocation, int, android.renderscript.Allocation, int, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3;
        double d0;
        android.renderscript.Allocation r1, r2, r3;
        android.renderscript.RenderScript $r4, $r6, $r7, $r8, $r9, $r10;
        android.renderscript.Element $r5;
        long $l4, $l5, $l6, $l7;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        r1 := @parameter2: android.renderscript.Allocation;

        i1 := @parameter3: int;

        r2 := @parameter4: android.renderscript.Allocation;

        i2 := @parameter5: int;

        r3 := @parameter6: android.renderscript.Allocation;

        $r4 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r5 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64(android.renderscript.RenderScript)>($r4);

        i3 = staticinvoke <android.renderscript.ScriptIntrinsicBLAS: int validateSYR2(android.renderscript.Element,int,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>($r5, i0, r1, i1, r2, i2, r3);

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r6);

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r8);

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r9);

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r10);

        virtualinvoke $r7.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Double(long,int,int,int,int,int,int,int,int,int,double,long,long,double,long,int,int,int,int)>($l4, 93, 0, 0, 0, i0, 0, 0, i3, 0, d0, $l5, $l6, 0.0, $l7, i1, i2, 0, 0);

        return;
    }

    public void DSYR2K(int, int, double, android.renderscript.Allocation, android.renderscript.Allocation, double, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, $i3, i7;
        double d0, d1;
        android.renderscript.Allocation r1, r2, r3;
        android.renderscript.RenderScript $r4, $r7, $r8, $r10, $r11, $r12;
        android.renderscript.Element $r5;
        android.renderscript.Type $r6, $r9, $r13;
        long $l2, $l4, $l5, $l6;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        d0 := @parameter2: double;

        r1 := @parameter3: android.renderscript.Allocation;

        r2 := @parameter4: android.renderscript.Allocation;

        d1 := @parameter5: double;

        r3 := @parameter6: android.renderscript.Allocation;

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateUplo(int)>(i0);

        $r4 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r5 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64(android.renderscript.RenderScript)>($r4);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateSYR2K(android.renderscript.Element,int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Allocation)>($r5, i1, r1, r2, r3);

        if i1 == 111 goto label1;

        $r13 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i7 = virtualinvoke $r13.<android.renderscript.Type: int getY()>();

        goto label2;

     label1:
        $r6 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i7 = virtualinvoke $r6.<android.renderscript.Type: int getX()>();

     label2:
        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l2 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r7);

        $r9 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i3 = virtualinvoke $r9.<android.renderscript.Type: int getX()>();

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r10);

        $r11 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r11);

        $r12 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r12);

        virtualinvoke $r8.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Double(long,int,int,int,int,int,int,int,int,int,double,long,long,double,long,int,int,int,int)>($l2, 122, i1, 0, 0, i0, 0, 0, $i3, i7, d0, $l4, $l5, d1, $l6, 0, 0, 0, 0);

        return;
    }

    public void DSYRK(int, int, double, android.renderscript.Allocation, double, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, $i3, i6;
        double d0, d1;
        android.renderscript.Allocation r1, r2;
        android.renderscript.RenderScript $r3, $r6, $r7, $r9, $r10;
        android.renderscript.Element $r4;
        android.renderscript.Type $r5, $r8, $r11;
        long $l2, $l4, $l5;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        d0 := @parameter2: double;

        r1 := @parameter3: android.renderscript.Allocation;

        d1 := @parameter4: double;

        r2 := @parameter5: android.renderscript.Allocation;

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateTranspose(int)>(i1);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateUplo(int)>(i0);

        $r3 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r4 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64(android.renderscript.RenderScript)>($r3);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateL3(android.renderscript.Element,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Allocation)>($r4, i1, 0, 0, r1, null, r2);

        if i1 == 111 goto label1;

        $r11 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i6 = virtualinvoke $r11.<android.renderscript.Type: int getY()>();

        goto label2;

     label1:
        $r5 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i6 = virtualinvoke $r5.<android.renderscript.Type: int getX()>();

     label2:
        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l2 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r6);

        $r8 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i3 = virtualinvoke $r8.<android.renderscript.Type: int getX()>();

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r9);

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r10);

        virtualinvoke $r7.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Double(long,int,int,int,int,int,int,int,int,int,double,long,long,double,long,int,int,int,int)>($l2, 121, i1, 0, 0, i0, 0, 0, $i3, i6, d0, $l4, 0L, d1, $l5, 0, 0, 0, 0);

        return;
    }

    public void DTBMV(int, int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3, i4, i5;
        android.renderscript.Allocation r1, r2;
        android.renderscript.RSRuntimeException $r3;
        android.renderscript.RenderScript $r4, $r7, $r8, $r9, $r10;
        android.renderscript.Element $r5;
        android.renderscript.Type $r6;
        long $l6, $l7, $l8;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: android.renderscript.Allocation;

        r2 := @parameter5: android.renderscript.Allocation;

        i4 := @parameter6: int;

        if i3 < 0 goto label1;

        $r4 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r5 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64(android.renderscript.RenderScript)>($r4);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateTRMV(android.renderscript.Element,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>($r5, i0, i1, i2, r1, r2, i4);

        $r6 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i5 = virtualinvoke $r6.<android.renderscript.Type: int getY()>();

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r7);

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r9);

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l8 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r10);

        virtualinvoke $r8.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Double(long,int,int,int,int,int,int,int,int,int,double,long,long,double,long,int,int,int,int)>($l6, 58, i1, 0, 0, i0, i2, 0, i5, i3, 0.0, $l7, $l8, 0.0, 0L, i4, 0, 0, 0);

        return;

     label1:
        $r3 = new android.renderscript.RSRuntimeException;

        specialinvoke $r3.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("K must be greater than or equal to 0");

        throw $r3;
    }

    public void DTBSV(int, int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3, i4, i5;
        android.renderscript.Allocation r1, r2;
        android.renderscript.RenderScript $r3, $r7, $r8, $r9, $r10;
        android.renderscript.Element $r4;
        android.renderscript.Type $r5;
        android.renderscript.RSRuntimeException $r6;
        long $l6, $l7, $l8;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: android.renderscript.Allocation;

        r2 := @parameter5: android.renderscript.Allocation;

        i4 := @parameter6: int;

        $r3 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r4 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64(android.renderscript.RenderScript)>($r3);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateTRMV(android.renderscript.Element,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>($r4, i0, i1, i2, r1, r2, i4);

        $r5 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i5 = virtualinvoke $r5.<android.renderscript.Type: int getY()>();

        if i3 < 0 goto label1;

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r7);

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r9);

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l8 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r10);

        virtualinvoke $r8.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Double(long,int,int,int,int,int,int,int,int,int,double,long,long,double,long,int,int,int,int)>($l6, 61, i1, 0, 0, i0, i2, 0, i5, i3, 0.0, $l7, $l8, 0.0, 0L, i4, 0, 0, 0);

        return;

     label1:
        $r6 = new android.renderscript.RSRuntimeException;

        specialinvoke $r6.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Number of diagonals must be positive");

        throw $r6;
    }

    public void DTPMV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3, i4;
        android.renderscript.Allocation r1, r2;
        android.renderscript.RenderScript $r3, $r5, $r6, $r7, $r8;
        android.renderscript.Element $r4;
        long $l5, $l6, $l7;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: android.renderscript.Allocation;

        r2 := @parameter4: android.renderscript.Allocation;

        i3 := @parameter5: int;

        $r3 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r4 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64(android.renderscript.RenderScript)>($r3);

        i4 = staticinvoke <android.renderscript.ScriptIntrinsicBLAS: int validateTPMV(android.renderscript.Element,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>($r4, i0, i1, i2, r1, r2, i3);

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r5 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r5);

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r7);

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r8);

        virtualinvoke $r6.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Double(long,int,int,int,int,int,int,int,int,int,double,long,long,double,long,int,int,int,int)>($l5, 59, i1, 0, 0, i0, i2, 0, i4, 0, 0.0, $l6, $l7, 0.0, 0L, i3, 0, 0, 0);

        return;
    }

    public void DTPSV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3, i4;
        android.renderscript.Allocation r1, r2;
        android.renderscript.RenderScript $r3, $r5, $r6, $r7, $r8;
        android.renderscript.Element $r4;
        long $l5, $l6, $l7;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: android.renderscript.Allocation;

        r2 := @parameter4: android.renderscript.Allocation;

        i3 := @parameter5: int;

        $r3 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r4 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64(android.renderscript.RenderScript)>($r3);

        i4 = staticinvoke <android.renderscript.ScriptIntrinsicBLAS: int validateTPMV(android.renderscript.Element,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>($r4, i0, i1, i2, r1, r2, i3);

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r5 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r5);

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r7);

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r8);

        virtualinvoke $r6.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Double(long,int,int,int,int,int,int,int,int,int,double,long,long,double,long,int,int,int,int)>($l5, 62, i1, 0, 0, i0, i2, 0, i4, 0, 0.0, $l6, $l7, 0.0, 0L, i3, 0, 0, 0);

        return;
    }

    public void DTRMM(int, int, int, int, double, android.renderscript.Allocation, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3, $i5, $i6;
        double d0;
        android.renderscript.Allocation r1, r2;
        android.renderscript.RenderScript $r3, $r5, $r6, $r9, $r10;
        android.renderscript.Element $r4;
        long $l4, $l7, $l8;
        android.renderscript.Type $r7, $r8;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        d0 := @parameter4: double;

        r1 := @parameter5: android.renderscript.Allocation;

        r2 := @parameter6: android.renderscript.Allocation;

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateUplo(int)>(i1);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateDiag(int)>(i3);

        $r3 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r4 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64(android.renderscript.RenderScript)>($r3);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateTRMM(android.renderscript.Element,int,int,android.renderscript.Allocation,android.renderscript.Allocation)>($r4, i0, i2, r1, r2);

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r5 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r5);

        $r7 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i5 = virtualinvoke $r7.<android.renderscript.Type: int getY()>();

        $r8 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i6 = virtualinvoke $r8.<android.renderscript.Type: int getX()>();

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r9);

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l8 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r10);

        virtualinvoke $r6.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Double(long,int,int,int,int,int,int,int,int,int,double,long,long,double,long,int,int,int,int)>($l4, 123, i2, 0, i0, i1, i3, $i5, $i6, 0, d0, $l7, $l8, 0.0, 0L, 0, 0, 0, 0);

        return;
    }

    public void DTRMV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3, i4;
        android.renderscript.Allocation r1, r2;
        android.renderscript.RenderScript $r3, $r6, $r7, $r8, $r9;
        android.renderscript.Element $r4;
        android.renderscript.Type $r5;
        long $l5, $l6, $l7;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: android.renderscript.Allocation;

        r2 := @parameter4: android.renderscript.Allocation;

        i3 := @parameter5: int;

        $r3 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r4 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64(android.renderscript.RenderScript)>($r3);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateTRMV(android.renderscript.Element,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>($r4, i0, i1, i2, r1, r2, i3);

        $r5 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i4 = virtualinvoke $r5.<android.renderscript.Type: int getY()>();

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r6);

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r8);

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r9);

        virtualinvoke $r7.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Double(long,int,int,int,int,int,int,int,int,int,double,long,long,double,long,int,int,int,int)>($l5, 57, i1, 0, 0, i0, i2, 0, i4, 0, 0.0, $l6, $l7, 0.0, 0L, i3, 0, 0, 0);

        return;
    }

    public void DTRSM(int, int, int, int, double, android.renderscript.Allocation, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3, $i5, $i6;
        double d0;
        android.renderscript.Allocation r1, r2;
        android.renderscript.RenderScript $r3, $r5, $r6, $r9, $r10;
        android.renderscript.Element $r4;
        long $l4, $l7, $l8;
        android.renderscript.Type $r7, $r8;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        d0 := @parameter4: double;

        r1 := @parameter5: android.renderscript.Allocation;

        r2 := @parameter6: android.renderscript.Allocation;

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateUplo(int)>(i1);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateDiag(int)>(i3);

        $r3 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r4 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64(android.renderscript.RenderScript)>($r3);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateTRSM(android.renderscript.Element,int,int,android.renderscript.Allocation,android.renderscript.Allocation)>($r4, i0, i2, r1, r2);

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r5 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r5);

        $r7 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i5 = virtualinvoke $r7.<android.renderscript.Type: int getY()>();

        $r8 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i6 = virtualinvoke $r8.<android.renderscript.Type: int getX()>();

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r9);

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l8 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r10);

        virtualinvoke $r6.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Double(long,int,int,int,int,int,int,int,int,int,double,long,long,double,long,int,int,int,int)>($l4, 124, i2, 0, i0, i1, i3, $i5, $i6, 0, d0, $l7, $l8, 0.0, 0L, 0, 0, 0, 0);

        return;
    }

    public void DTRSV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3, i4;
        android.renderscript.Allocation r1, r2;
        android.renderscript.RenderScript $r3, $r6, $r7, $r8, $r9;
        android.renderscript.Element $r4;
        android.renderscript.Type $r5;
        long $l5, $l6, $l7;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: android.renderscript.Allocation;

        r2 := @parameter4: android.renderscript.Allocation;

        i3 := @parameter5: int;

        $r3 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r4 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64(android.renderscript.RenderScript)>($r3);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateTRMV(android.renderscript.Element,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>($r4, i0, i1, i2, r1, r2, i3);

        $r5 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i4 = virtualinvoke $r5.<android.renderscript.Type: int getY()>();

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r6);

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r8);

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r9);

        virtualinvoke $r7.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Double(long,int,int,int,int,int,int,int,int,int,double,long,long,double,long,int,int,int,int)>($l5, 60, i1, 0, 0, i0, i2, 0, i4, 0, 0.0, $l6, $l7, 0.0, 0L, i3, 0, 0, 0);

        return;
    }

    public void SGBMV(int, int, int, float, android.renderscript.Allocation, android.renderscript.Allocation, int, float, android.renderscript.Allocation, int)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3, i4, i5, i6;
        float f0, f1;
        android.renderscript.Allocation r1, r2, r3;
        android.renderscript.RenderScript $r4, $r9, $r10, $r11, $r12, $r13;
        android.renderscript.Element $r5;
        android.renderscript.RSRuntimeException $r6;
        android.renderscript.Type $r7, $r8;
        long $l7, $l8, $l9, $l10;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        f0 := @parameter3: float;

        r1 := @parameter4: android.renderscript.Allocation;

        r2 := @parameter5: android.renderscript.Allocation;

        i3 := @parameter6: int;

        f1 := @parameter7: float;

        r3 := @parameter8: android.renderscript.Allocation;

        i4 := @parameter9: int;

        $r4 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r5 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32(android.renderscript.RenderScript)>($r4);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateGEMV(android.renderscript.Element,int,android.renderscript.Allocation,android.renderscript.Allocation,int,android.renderscript.Allocation,int)>($r5, i0, r1, r2, i3, r3, i4);

        if i1 < 0 goto label1;

        if i2 < 0 goto label1;

        $r7 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i5 = virtualinvoke $r7.<android.renderscript.Type: int getY()>();

        $r8 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i6 = virtualinvoke $r8.<android.renderscript.Type: int getX()>();

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r9);

        $r11 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l8 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r11);

        $r12 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l9 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r12);

        $r13 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l10 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r13);

        virtualinvoke $r10.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Single(long,int,int,int,int,int,int,int,int,int,float,long,long,float,long,int,int,int,int)>($l7, 48, i0, 0, 0, 0, 0, i5, i6, 0, f0, $l8, $l9, f1, $l10, i3, i4, i1, i2);

        return;

     label1:
        $r6 = new android.renderscript.RSRuntimeException;

        specialinvoke $r6.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("KL and KU must be greater than or equal to 0");

        throw $r6;
    }

    public void SGEMM(int, int, float, android.renderscript.Allocation, android.renderscript.Allocation, float, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i6, i7, i8;
        float f0, f1;
        android.renderscript.Allocation r1, r2, r3;
        android.renderscript.RenderScript $r4, $r9, $r10, $r11, $r12, $r13;
        android.renderscript.Element $r5;
        android.renderscript.Type $r6, $r7, $r8, $r14, $r15, $r16;
        long $l2, $l3, $l4, $l5;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        f0 := @parameter2: float;

        r1 := @parameter3: android.renderscript.Allocation;

        r2 := @parameter4: android.renderscript.Allocation;

        f1 := @parameter5: float;

        r3 := @parameter6: android.renderscript.Allocation;

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateTranspose(int)>(i0);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateTranspose(int)>(i1);

        $r4 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r5 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32(android.renderscript.RenderScript)>($r4);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateL3(android.renderscript.Element,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Allocation)>($r5, i0, i1, 0, r1, r2, r3);

        if i0 == 111 goto label1;

        $r15 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i6 = virtualinvoke $r15.<android.renderscript.Type: int getX()>();

        $r16 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i7 = virtualinvoke $r16.<android.renderscript.Type: int getY()>();

        goto label2;

     label1:
        $r6 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i6 = virtualinvoke $r6.<android.renderscript.Type: int getY()>();

        $r7 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i7 = virtualinvoke $r7.<android.renderscript.Type: int getX()>();

     label2:
        if i1 == 111 goto label3;

        $r14 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i8 = virtualinvoke $r14.<android.renderscript.Type: int getY()>();

        goto label4;

     label3:
        $r8 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i8 = virtualinvoke $r8.<android.renderscript.Type: int getX()>();

     label4:
        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l2 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r9);

        $r11 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l3 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r11);

        $r12 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r12);

        $r13 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r13);

        virtualinvoke $r10.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Single(long,int,int,int,int,int,int,int,int,int,float,long,long,float,long,int,int,int,int)>($l2, 113, i0, i1, 0, 0, 0, i6, i8, i7, f0, $l3, $l4, f1, $l5, 0, 0, 0, 0);

        return;
    }

    public void SGEMV(int, float, android.renderscript.Allocation, android.renderscript.Allocation, int, float, android.renderscript.Allocation, int)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3, i4;
        float f0, f1;
        android.renderscript.Allocation r1, r2, r3;
        android.renderscript.RenderScript $r4, $r8, $r9, $r10, $r11, $r12;
        android.renderscript.Element $r5;
        android.renderscript.Type $r6, $r7;
        long $l5, $l6, $l7, $l8;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        r1 := @parameter2: android.renderscript.Allocation;

        r2 := @parameter3: android.renderscript.Allocation;

        i1 := @parameter4: int;

        f1 := @parameter5: float;

        r3 := @parameter6: android.renderscript.Allocation;

        i2 := @parameter7: int;

        $r4 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r5 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32(android.renderscript.RenderScript)>($r4);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateGEMV(android.renderscript.Element,int,android.renderscript.Allocation,android.renderscript.Allocation,int,android.renderscript.Allocation,int)>($r5, i0, r1, r2, i1, r3, i2);

        $r6 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i3 = virtualinvoke $r6.<android.renderscript.Type: int getY()>();

        $r7 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i4 = virtualinvoke $r7.<android.renderscript.Type: int getX()>();

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r8);

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r10);

        $r11 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r11);

        $r12 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l8 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r12);

        virtualinvoke $r9.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Single(long,int,int,int,int,int,int,int,int,int,float,long,long,float,long,int,int,int,int)>($l5, 47, i0, 0, 0, 0, 0, i3, i4, 0, f0, $l6, $l7, f1, $l8, i1, i2, 0, 0);

        return;
    }

    public void SGER(float, android.renderscript.Allocation, int, android.renderscript.Allocation, int, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        float f0;
        android.renderscript.Allocation r1, r2, r3;
        int i0, i1, i2, i3;
        android.renderscript.Type $r4, $r5;
        android.renderscript.RenderScript $r6, $r8, $r9, $r10, $r11, $r12;
        android.renderscript.Element $r7;
        long $l4, $l5, $l6, $l7;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        f0 := @parameter0: float;

        r1 := @parameter1: android.renderscript.Allocation;

        i0 := @parameter2: int;

        r2 := @parameter3: android.renderscript.Allocation;

        i1 := @parameter4: int;

        r3 := @parameter5: android.renderscript.Allocation;

        $r4 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i2 = virtualinvoke $r4.<android.renderscript.Type: int getY()>();

        $r5 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i3 = virtualinvoke $r5.<android.renderscript.Type: int getX()>();

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r7 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32(android.renderscript.RenderScript)>($r6);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateGER(android.renderscript.Element,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>($r7, r1, i0, r2, i1, r3);

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r8);

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r10);

        $r11 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r11);

        $r12 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r12);

        virtualinvoke $r9.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Single(long,int,int,int,int,int,int,int,int,int,float,long,long,float,long,int,int,int,int)>($l4, 82, 0, 0, 0, 0, 0, i2, i3, 0, f0, $l5, $l6, 0.0F, $l7, i0, i1, 0, 0);

        return;
    }

    public void SSBMV(int, int, float, android.renderscript.Allocation, android.renderscript.Allocation, int, float, android.renderscript.Allocation, int)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3, i4;
        float f0, f1;
        android.renderscript.Allocation r1, r2, r3;
        android.renderscript.RSRuntimeException $r4;
        android.renderscript.RenderScript $r5, $r7, $r8, $r9, $r10, $r11;
        android.renderscript.Element $r6;
        long $l5, $l6, $l7, $l8;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        f0 := @parameter2: float;

        r1 := @parameter3: android.renderscript.Allocation;

        r2 := @parameter4: android.renderscript.Allocation;

        i2 := @parameter5: int;

        f1 := @parameter6: float;

        r3 := @parameter7: android.renderscript.Allocation;

        i3 := @parameter8: int;

        if i1 < 0 goto label1;

        $r5 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r6 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32(android.renderscript.RenderScript)>($r5);

        i4 = staticinvoke <android.renderscript.ScriptIntrinsicBLAS: int validateSYMV(android.renderscript.Element,int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Allocation,int,int)>($r6, i0, r1, r2, r3, i2, i3);

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r7);

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r9);

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r10);

        $r11 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l8 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r11);

        virtualinvoke $r8.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Single(long,int,int,int,int,int,int,int,int,int,float,long,long,float,long,int,int,int,int)>($l5, 80, 0, 0, 0, i0, 0, 0, i4, i1, f0, $l6, $l7, f1, $l8, i2, i3, 0, 0);

        return;

     label1:
        $r4 = new android.renderscript.RSRuntimeException;

        specialinvoke $r4.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("K must be greater than or equal to 0");

        throw $r4;
    }

    public void SSPMV(int, float, android.renderscript.Allocation, android.renderscript.Allocation, int, float, android.renderscript.Allocation, int)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3;
        float f0, f1;
        android.renderscript.Allocation r1, r2, r3;
        android.renderscript.RenderScript $r4, $r6, $r7, $r8, $r9, $r10;
        android.renderscript.Element $r5;
        long $l4, $l5, $l6, $l7;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        r1 := @parameter2: android.renderscript.Allocation;

        r2 := @parameter3: android.renderscript.Allocation;

        i1 := @parameter4: int;

        f1 := @parameter5: float;

        r3 := @parameter6: android.renderscript.Allocation;

        i2 := @parameter7: int;

        $r4 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r5 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32(android.renderscript.RenderScript)>($r4);

        i3 = staticinvoke <android.renderscript.ScriptIntrinsicBLAS: int validateSPMV(android.renderscript.Element,int,android.renderscript.Allocation,android.renderscript.Allocation,int,android.renderscript.Allocation,int)>($r5, i0, r1, r2, i1, r3, i2);

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r6);

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r8);

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r9);

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r10);

        virtualinvoke $r7.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Single(long,int,int,int,int,int,int,int,int,int,float,long,long,float,long,int,int,int,int)>($l4, 81, 0, 0, 0, i0, 0, 0, i3, 0, f0, $l5, $l6, f1, $l7, i1, i2, 0, 0);

        return;
    }

    public void SSPR(int, float, android.renderscript.Allocation, int, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2;
        float f0;
        android.renderscript.Allocation r1, r2;
        android.renderscript.RenderScript $r3, $r5, $r6, $r7, $r8;
        android.renderscript.Element $r4;
        long $l3, $l4, $l5;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        r1 := @parameter2: android.renderscript.Allocation;

        i1 := @parameter3: int;

        r2 := @parameter4: android.renderscript.Allocation;

        $r3 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r4 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32(android.renderscript.RenderScript)>($r3);

        i2 = staticinvoke <android.renderscript.ScriptIntrinsicBLAS: int validateSPR(android.renderscript.Element,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>($r4, i0, r1, i1, r2);

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r5 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l3 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r5);

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r7);

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r8);

        virtualinvoke $r6.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Single(long,int,int,int,int,int,int,int,int,int,float,long,long,float,long,int,int,int,int)>($l3, 84, 0, 0, 0, i0, 0, 0, i2, 0, f0, $l4, $l5, 0.0F, 0L, i1, 0, 0, 0);

        return;
    }

    public void SSPR2(int, float, android.renderscript.Allocation, int, android.renderscript.Allocation, int, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3;
        float f0;
        android.renderscript.Allocation r1, r2, r3;
        android.renderscript.RenderScript $r4, $r6, $r7, $r8, $r9, $r10;
        android.renderscript.Element $r5;
        long $l4, $l5, $l6, $l7;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        r1 := @parameter2: android.renderscript.Allocation;

        i1 := @parameter3: int;

        r2 := @parameter4: android.renderscript.Allocation;

        i2 := @parameter5: int;

        r3 := @parameter6: android.renderscript.Allocation;

        $r4 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r5 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32(android.renderscript.RenderScript)>($r4);

        i3 = staticinvoke <android.renderscript.ScriptIntrinsicBLAS: int validateSPR2(android.renderscript.Element,int,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>($r5, i0, r1, i1, r2, i2, r3);

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r6);

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r8);

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r9);

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r10);

        virtualinvoke $r7.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Single(long,int,int,int,int,int,int,int,int,int,float,long,long,float,long,int,int,int,int)>($l4, 86, 0, 0, 0, i0, 0, 0, i3, 0, f0, $l5, $l6, 0.0F, $l7, i1, i2, 0, 0);

        return;
    }

    public void SSYMM(int, int, float, android.renderscript.Allocation, android.renderscript.Allocation, float, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, $i2, $i3, $i5, $i6;
        float f0, f1;
        android.renderscript.Allocation r1, r2, r3;
        android.renderscript.Type $r4, $r5, $r11, $r12;
        android.renderscript.RSRuntimeException $r6;
        android.renderscript.RenderScript $r7, $r9, $r10, $r13, $r14, $r15;
        android.renderscript.Element $r8;
        long $l4, $l7, $l8, $l9;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        f0 := @parameter2: float;

        r1 := @parameter3: android.renderscript.Allocation;

        r2 := @parameter4: android.renderscript.Allocation;

        f1 := @parameter5: float;

        r3 := @parameter6: android.renderscript.Allocation;

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateSide(int)>(i0);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateUplo(int)>(i1);

        $r4 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i2 = virtualinvoke $r4.<android.renderscript.Type: int getX()>();

        $r5 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i3 = virtualinvoke $r5.<android.renderscript.Type: int getY()>();

        if $i2 != $i3 goto label1;

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r8 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32(android.renderscript.RenderScript)>($r7);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateL3(android.renderscript.Element,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Allocation)>($r8, 0, 0, i0, r1, r2, r3);

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r9);

        $r11 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i5 = virtualinvoke $r11.<android.renderscript.Type: int getY()>();

        $r12 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i6 = virtualinvoke $r12.<android.renderscript.Type: int getX()>();

        $r13 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r13);

        $r14 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l8 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r14);

        $r15 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l9 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r15);

        virtualinvoke $r10.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Single(long,int,int,int,int,int,int,int,int,int,float,long,long,float,long,int,int,int,int)>($l4, 114, 0, 0, i0, i1, 0, $i5, $i6, 0, f0, $l7, $l8, f1, $l9, 0, 0, 0, 0);

        return;

     label1:
        $r6 = new android.renderscript.RSRuntimeException;

        specialinvoke $r6.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Matrix A is not symmetric");

        throw $r6;
    }

    public void SSYMV(int, float, android.renderscript.Allocation, android.renderscript.Allocation, int, float, android.renderscript.Allocation, int)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3;
        float f0, f1;
        android.renderscript.Allocation r1, r2, r3;
        android.renderscript.RenderScript $r4, $r6, $r7, $r8, $r9, $r10;
        android.renderscript.Element $r5;
        long $l4, $l5, $l6, $l7;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        r1 := @parameter2: android.renderscript.Allocation;

        r2 := @parameter3: android.renderscript.Allocation;

        i1 := @parameter4: int;

        f1 := @parameter5: float;

        r3 := @parameter6: android.renderscript.Allocation;

        i2 := @parameter7: int;

        $r4 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r5 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32(android.renderscript.RenderScript)>($r4);

        i3 = staticinvoke <android.renderscript.ScriptIntrinsicBLAS: int validateSYMV(android.renderscript.Element,int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Allocation,int,int)>($r5, i0, r1, r2, r3, i1, i2);

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r6);

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r8);

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r9);

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r10);

        virtualinvoke $r7.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Single(long,int,int,int,int,int,int,int,int,int,float,long,long,float,long,int,int,int,int)>($l4, 79, 0, 0, 0, i0, 0, 0, i3, 0, f0, $l5, $l6, f1, $l7, i1, i2, 0, 0);

        return;
    }

    public void SSYR(int, float, android.renderscript.Allocation, int, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2;
        float f0;
        android.renderscript.Allocation r1, r2;
        android.renderscript.RenderScript $r3, $r5, $r6, $r7, $r8;
        android.renderscript.Element $r4;
        long $l3, $l4, $l5;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        r1 := @parameter2: android.renderscript.Allocation;

        i1 := @parameter3: int;

        r2 := @parameter4: android.renderscript.Allocation;

        $r3 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r4 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32(android.renderscript.RenderScript)>($r3);

        i2 = staticinvoke <android.renderscript.ScriptIntrinsicBLAS: int validateSYR(android.renderscript.Element,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>($r4, i0, r1, i1, r2);

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r5 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l3 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r5);

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r7);

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r8);

        virtualinvoke $r6.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Single(long,int,int,int,int,int,int,int,int,int,float,long,long,float,long,int,int,int,int)>($l3, 83, 0, 0, 0, i0, 0, 0, i2, 0, f0, $l4, $l5, 0.0F, 0L, i1, 0, 0, 0);

        return;
    }

    public void SSYR2(int, float, android.renderscript.Allocation, int, android.renderscript.Allocation, int, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3;
        float f0;
        android.renderscript.Allocation r1, r2, r3;
        android.renderscript.RenderScript $r4, $r6, $r7, $r8, $r9, $r10;
        android.renderscript.Element $r5;
        long $l4, $l5, $l6, $l7;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        r1 := @parameter2: android.renderscript.Allocation;

        i1 := @parameter3: int;

        r2 := @parameter4: android.renderscript.Allocation;

        i2 := @parameter5: int;

        r3 := @parameter6: android.renderscript.Allocation;

        $r4 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r5 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32(android.renderscript.RenderScript)>($r4);

        i3 = staticinvoke <android.renderscript.ScriptIntrinsicBLAS: int validateSYR2(android.renderscript.Element,int,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>($r5, i0, r1, i1, r2, i2, r3);

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r6);

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r8);

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r9);

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r10);

        virtualinvoke $r7.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Single(long,int,int,int,int,int,int,int,int,int,float,long,long,float,long,int,int,int,int)>($l4, 85, 0, 0, 0, i0, 0, 0, i3, 0, f0, $l5, $l6, 0.0F, $l7, i1, i2, 0, 0);

        return;
    }

    public void SSYR2K(int, int, float, android.renderscript.Allocation, android.renderscript.Allocation, float, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, $i3, i7;
        float f0, f1;
        android.renderscript.Allocation r1, r2, r3;
        android.renderscript.RenderScript $r4, $r7, $r8, $r10, $r11, $r12;
        android.renderscript.Element $r5;
        android.renderscript.Type $r6, $r9, $r13;
        long $l2, $l4, $l5, $l6;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        f0 := @parameter2: float;

        r1 := @parameter3: android.renderscript.Allocation;

        r2 := @parameter4: android.renderscript.Allocation;

        f1 := @parameter5: float;

        r3 := @parameter6: android.renderscript.Allocation;

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateUplo(int)>(i0);

        $r4 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r5 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32(android.renderscript.RenderScript)>($r4);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateSYR2K(android.renderscript.Element,int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Allocation)>($r5, i1, r1, r2, r3);

        if i1 == 111 goto label1;

        $r13 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i7 = virtualinvoke $r13.<android.renderscript.Type: int getY()>();

        goto label2;

     label1:
        $r6 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i7 = virtualinvoke $r6.<android.renderscript.Type: int getX()>();

     label2:
        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l2 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r7);

        $r9 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i3 = virtualinvoke $r9.<android.renderscript.Type: int getX()>();

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r10);

        $r11 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r11);

        $r12 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r12);

        virtualinvoke $r8.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Single(long,int,int,int,int,int,int,int,int,int,float,long,long,float,long,int,int,int,int)>($l2, 116, i1, 0, 0, i0, 0, 0, $i3, i7, f0, $l4, $l5, f1, $l6, 0, 0, 0, 0);

        return;
    }

    public void SSYRK(int, int, float, android.renderscript.Allocation, float, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, $i3, i6;
        float f0, f1;
        android.renderscript.Allocation r1, r2;
        android.renderscript.RenderScript $r3, $r6, $r7, $r9, $r10;
        android.renderscript.Element $r4;
        android.renderscript.Type $r5, $r8, $r11;
        long $l2, $l4, $l5;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        f0 := @parameter2: float;

        r1 := @parameter3: android.renderscript.Allocation;

        f1 := @parameter4: float;

        r2 := @parameter5: android.renderscript.Allocation;

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateTranspose(int)>(i1);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateUplo(int)>(i0);

        $r3 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r4 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32(android.renderscript.RenderScript)>($r3);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateL3(android.renderscript.Element,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Allocation)>($r4, i1, 0, 0, r1, null, r2);

        if i1 == 111 goto label1;

        $r11 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i6 = virtualinvoke $r11.<android.renderscript.Type: int getY()>();

        goto label2;

     label1:
        $r5 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i6 = virtualinvoke $r5.<android.renderscript.Type: int getX()>();

     label2:
        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l2 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r6);

        $r8 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i3 = virtualinvoke $r8.<android.renderscript.Type: int getX()>();

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r9);

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r10);

        virtualinvoke $r7.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Single(long,int,int,int,int,int,int,int,int,int,float,long,long,float,long,int,int,int,int)>($l2, 115, i1, 0, 0, i0, 0, 0, $i3, i6, f0, $l4, 0L, f1, $l5, 0, 0, 0, 0);

        return;
    }

    public void STBMV(int, int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3, i4, i5;
        android.renderscript.Allocation r1, r2;
        android.renderscript.RSRuntimeException $r3;
        android.renderscript.RenderScript $r4, $r7, $r8, $r9, $r10;
        android.renderscript.Element $r5;
        android.renderscript.Type $r6;
        long $l6, $l7, $l8;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: android.renderscript.Allocation;

        r2 := @parameter5: android.renderscript.Allocation;

        i4 := @parameter6: int;

        if i3 < 0 goto label1;

        $r4 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r5 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32(android.renderscript.RenderScript)>($r4);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateTRMV(android.renderscript.Element,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>($r5, i0, i1, i2, r1, r2, i4);

        $r6 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i5 = virtualinvoke $r6.<android.renderscript.Type: int getY()>();

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r7);

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r9);

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l8 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r10);

        virtualinvoke $r8.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Single(long,int,int,int,int,int,int,int,int,int,float,long,long,float,long,int,int,int,int)>($l6, 50, i1, 0, 0, i0, i2, 0, i5, i3, 0.0F, $l7, $l8, 0.0F, 0L, i4, 0, 0, 0);

        return;

     label1:
        $r3 = new android.renderscript.RSRuntimeException;

        specialinvoke $r3.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("K must be greater than or equal to 0");

        throw $r3;
    }

    public void STBSV(int, int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3, i4, i5;
        android.renderscript.Allocation r1, r2;
        android.renderscript.RenderScript $r3, $r7, $r8, $r9, $r10;
        android.renderscript.Element $r4;
        android.renderscript.Type $r5;
        android.renderscript.RSRuntimeException $r6;
        long $l6, $l7, $l8;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: android.renderscript.Allocation;

        r2 := @parameter5: android.renderscript.Allocation;

        i4 := @parameter6: int;

        $r3 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r4 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32(android.renderscript.RenderScript)>($r3);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateTRMV(android.renderscript.Element,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>($r4, i0, i1, i2, r1, r2, i4);

        $r5 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i5 = virtualinvoke $r5.<android.renderscript.Type: int getY()>();

        if i3 < 0 goto label1;

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r7);

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r9);

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l8 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r10);

        virtualinvoke $r8.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Single(long,int,int,int,int,int,int,int,int,int,float,long,long,float,long,int,int,int,int)>($l6, 53, i1, 0, 0, i0, i2, 0, i5, i3, 0.0F, $l7, $l8, 0.0F, 0L, i4, 0, 0, 0);

        return;

     label1:
        $r6 = new android.renderscript.RSRuntimeException;

        specialinvoke $r6.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Number of diagonals must be positive");

        throw $r6;
    }

    public void STPMV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3, i4;
        android.renderscript.Allocation r1, r2;
        android.renderscript.RenderScript $r3, $r5, $r6, $r7, $r8;
        android.renderscript.Element $r4;
        long $l5, $l6, $l7;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: android.renderscript.Allocation;

        r2 := @parameter4: android.renderscript.Allocation;

        i3 := @parameter5: int;

        $r3 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r4 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32(android.renderscript.RenderScript)>($r3);

        i4 = staticinvoke <android.renderscript.ScriptIntrinsicBLAS: int validateTPMV(android.renderscript.Element,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>($r4, i0, i1, i2, r1, r2, i3);

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r5 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r5);

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r7);

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r8);

        virtualinvoke $r6.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Single(long,int,int,int,int,int,int,int,int,int,float,long,long,float,long,int,int,int,int)>($l5, 51, i1, 0, 0, i0, i2, 0, i4, 0, 0.0F, $l6, $l7, 0.0F, 0L, i3, 0, 0, 0);

        return;
    }

    public void STPSV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3, i4;
        android.renderscript.Allocation r1, r2;
        android.renderscript.RenderScript $r3, $r5, $r6, $r7, $r8;
        android.renderscript.Element $r4;
        long $l5, $l6, $l7;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: android.renderscript.Allocation;

        r2 := @parameter4: android.renderscript.Allocation;

        i3 := @parameter5: int;

        $r3 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r4 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32(android.renderscript.RenderScript)>($r3);

        i4 = staticinvoke <android.renderscript.ScriptIntrinsicBLAS: int validateTPMV(android.renderscript.Element,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>($r4, i0, i1, i2, r1, r2, i3);

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r5 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r5);

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r7);

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r8);

        virtualinvoke $r6.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Single(long,int,int,int,int,int,int,int,int,int,float,long,long,float,long,int,int,int,int)>($l5, 54, i1, 0, 0, i0, i2, 0, i4, 0, 0.0F, $l6, $l7, 0.0F, 0L, i3, 0, 0, 0);

        return;
    }

    public void STRMM(int, int, int, int, float, android.renderscript.Allocation, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3, $i5, $i6;
        float f0;
        android.renderscript.Allocation r1, r2;
        android.renderscript.RenderScript $r3, $r5, $r6, $r9, $r10;
        android.renderscript.Element $r4;
        long $l4, $l7, $l8;
        android.renderscript.Type $r7, $r8;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        f0 := @parameter4: float;

        r1 := @parameter5: android.renderscript.Allocation;

        r2 := @parameter6: android.renderscript.Allocation;

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateUplo(int)>(i1);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateDiag(int)>(i3);

        $r3 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r4 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32(android.renderscript.RenderScript)>($r3);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateTRMM(android.renderscript.Element,int,int,android.renderscript.Allocation,android.renderscript.Allocation)>($r4, i0, i2, r1, r2);

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r5 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r5);

        $r7 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i5 = virtualinvoke $r7.<android.renderscript.Type: int getY()>();

        $r8 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i6 = virtualinvoke $r8.<android.renderscript.Type: int getX()>();

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r9);

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l8 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r10);

        virtualinvoke $r6.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Single(long,int,int,int,int,int,int,int,int,int,float,long,long,float,long,int,int,int,int)>($l4, 117, i2, 0, i0, i1, i3, $i5, $i6, 0, f0, $l7, $l8, 0.0F, 0L, 0, 0, 0, 0);

        return;
    }

    public void STRMV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3, i4;
        android.renderscript.Allocation r1, r2;
        android.renderscript.RenderScript $r3, $r6, $r7, $r8, $r9;
        android.renderscript.Element $r4;
        android.renderscript.Type $r5;
        long $l5, $l6, $l7;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: android.renderscript.Allocation;

        r2 := @parameter4: android.renderscript.Allocation;

        i3 := @parameter5: int;

        $r3 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r4 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32(android.renderscript.RenderScript)>($r3);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateTRMV(android.renderscript.Element,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>($r4, i0, i1, i2, r1, r2, i3);

        $r5 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i4 = virtualinvoke $r5.<android.renderscript.Type: int getY()>();

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r6);

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r8);

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r9);

        virtualinvoke $r7.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Single(long,int,int,int,int,int,int,int,int,int,float,long,long,float,long,int,int,int,int)>($l5, 49, i1, 0, 0, i0, i2, 0, i4, 0, 0.0F, $l6, $l7, 0.0F, 0L, i3, 0, 0, 0);

        return;
    }

    public void STRSM(int, int, int, int, float, android.renderscript.Allocation, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3, $i5, $i6;
        float f0;
        android.renderscript.Allocation r1, r2;
        android.renderscript.RenderScript $r3, $r5, $r6, $r9, $r10;
        android.renderscript.Element $r4;
        long $l4, $l7, $l8;
        android.renderscript.Type $r7, $r8;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        f0 := @parameter4: float;

        r1 := @parameter5: android.renderscript.Allocation;

        r2 := @parameter6: android.renderscript.Allocation;

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateUplo(int)>(i1);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateDiag(int)>(i3);

        $r3 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r4 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32(android.renderscript.RenderScript)>($r3);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateTRSM(android.renderscript.Element,int,int,android.renderscript.Allocation,android.renderscript.Allocation)>($r4, i0, i2, r1, r2);

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r5 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r5);

        $r7 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i5 = virtualinvoke $r7.<android.renderscript.Type: int getY()>();

        $r8 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i6 = virtualinvoke $r8.<android.renderscript.Type: int getX()>();

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r9);

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l8 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r10);

        virtualinvoke $r6.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Single(long,int,int,int,int,int,int,int,int,int,float,long,long,float,long,int,int,int,int)>($l4, 118, i2, 0, i0, i1, i3, $i5, $i6, 0, f0, $l7, $l8, 0.0F, 0L, 0, 0, 0, 0);

        return;
    }

    public void STRSV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3, i4;
        android.renderscript.Allocation r1, r2;
        android.renderscript.RenderScript $r3, $r6, $r7, $r8, $r9;
        android.renderscript.Element $r4;
        android.renderscript.Type $r5;
        long $l5, $l6, $l7;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: android.renderscript.Allocation;

        r2 := @parameter4: android.renderscript.Allocation;

        i3 := @parameter5: int;

        $r3 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r4 = staticinvoke <android.renderscript.Element: android.renderscript.Element F32(android.renderscript.RenderScript)>($r3);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateTRMV(android.renderscript.Element,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>($r4, i0, i1, i2, r1, r2, i3);

        $r5 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i4 = virtualinvoke $r5.<android.renderscript.Type: int getY()>();

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r6);

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r8);

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r9);

        virtualinvoke $r7.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Single(long,int,int,int,int,int,int,int,int,int,float,long,long,float,long,int,int,int,int)>($l5, 52, i1, 0, 0, i0, i2, 0, i4, 0, 0.0F, $l6, $l7, 0.0F, 0L, i3, 0, 0, 0);

        return;
    }

    public void ZGBMV(int, int, int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation, int, android.renderscript.Double2, android.renderscript.Allocation, int)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3, i4, i5, i6;
        android.renderscript.Double2 r1, r4;
        android.renderscript.Allocation r2, r3, r5;
        android.renderscript.RenderScript $r6, $r11, $r12, $r13, $r14, $r15;
        android.renderscript.Element $r7;
        android.renderscript.RSRuntimeException $r8;
        android.renderscript.Type $r9, $r10;
        long $l7, $l8, $l9, $l10;
        double $d0, $d1, $d2, $d3;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: android.renderscript.Double2;

        r2 := @parameter4: android.renderscript.Allocation;

        r3 := @parameter5: android.renderscript.Allocation;

        i3 := @parameter6: int;

        r4 := @parameter7: android.renderscript.Double2;

        r5 := @parameter8: android.renderscript.Allocation;

        i4 := @parameter9: int;

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r7 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64_2(android.renderscript.RenderScript)>($r6);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateGEMV(android.renderscript.Element,int,android.renderscript.Allocation,android.renderscript.Allocation,int,android.renderscript.Allocation,int)>($r7, i0, r2, r3, i3, r5, i4);

        if i1 < 0 goto label1;

        if i2 < 0 goto label1;

        $r9 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i5 = virtualinvoke $r9.<android.renderscript.Type: int getY()>();

        $r10 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i6 = virtualinvoke $r10.<android.renderscript.Type: int getX()>();

        $r12 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r11 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r11);

        $d0 = r1.<android.renderscript.Double2: double x>;

        $d1 = r1.<android.renderscript.Double2: double y>;

        $r13 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l8 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r13);

        $r14 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l9 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r14);

        $d2 = r4.<android.renderscript.Double2: double x>;

        $d3 = r4.<android.renderscript.Double2: double y>;

        $r15 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l10 = virtualinvoke r5.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r15);

        virtualinvoke $r12.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Z(long,int,int,int,int,int,int,int,int,int,double,double,long,long,double,double,long,int,int,int,int)>($l7, 72, i0, 0, 0, 0, 0, i5, i6, 0, $d0, $d1, $l8, $l9, $d2, $d3, $l10, i3, i4, i1, i2);

        return;

     label1:
        $r8 = new android.renderscript.RSRuntimeException;

        specialinvoke $r8.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("KL and KU must be greater than or equal to 0");

        throw $r8;
    }

    public void ZGEMM(int, int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Double2, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i6, i7, i8;
        android.renderscript.Double2 r1, r4;
        android.renderscript.Allocation r2, r3, r5;
        android.renderscript.RenderScript $r6, $r11, $r12, $r13, $r14, $r15;
        android.renderscript.Element $r7;
        android.renderscript.Type $r8, $r9, $r10, $r16, $r17, $r18;
        long $l2, $l3, $l4, $l5;
        double $d0, $d1, $d2, $d3;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.renderscript.Double2;

        r2 := @parameter3: android.renderscript.Allocation;

        r3 := @parameter4: android.renderscript.Allocation;

        r4 := @parameter5: android.renderscript.Double2;

        r5 := @parameter6: android.renderscript.Allocation;

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateTranspose(int)>(i0);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateTranspose(int)>(i1);

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r7 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64_2(android.renderscript.RenderScript)>($r6);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateL3(android.renderscript.Element,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Allocation)>($r7, i0, i1, 0, r2, r3, r5);

        if i0 == 111 goto label1;

        $r17 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i6 = virtualinvoke $r17.<android.renderscript.Type: int getX()>();

        $r18 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i7 = virtualinvoke $r18.<android.renderscript.Type: int getY()>();

        goto label2;

     label1:
        $r8 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i6 = virtualinvoke $r8.<android.renderscript.Type: int getY()>();

        $r9 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i7 = virtualinvoke $r9.<android.renderscript.Type: int getX()>();

     label2:
        if i1 == 111 goto label3;

        $r16 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i8 = virtualinvoke $r16.<android.renderscript.Type: int getY()>();

        goto label4;

     label3:
        $r10 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i8 = virtualinvoke $r10.<android.renderscript.Type: int getX()>();

     label4:
        $r12 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r11 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l2 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r11);

        $d0 = r1.<android.renderscript.Double2: double x>;

        $d1 = r1.<android.renderscript.Double2: double y>;

        $r13 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l3 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r13);

        $r14 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r14);

        $d2 = r4.<android.renderscript.Double2: double x>;

        $d3 = r4.<android.renderscript.Double2: double y>;

        $r15 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r5.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r15);

        virtualinvoke $r12.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Z(long,int,int,int,int,int,int,int,int,int,double,double,long,long,double,double,long,int,int,int,int)>($l2, 131, i0, i1, 0, 0, 0, i6, i8, i7, $d0, $d1, $l3, $l4, $d2, $d3, $l5, 0, 0, 0, 0);

        return;
    }

    public void ZGEMV(int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation, int, android.renderscript.Double2, android.renderscript.Allocation, int)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3, i4;
        android.renderscript.Double2 r1, r4;
        android.renderscript.Allocation r2, r3, r5;
        android.renderscript.RenderScript $r6, $r10, $r11, $r12, $r13, $r14;
        android.renderscript.Element $r7;
        android.renderscript.Type $r8, $r9;
        long $l5, $l6, $l7, $l8;
        double $d0, $d1, $d2, $d3;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        r1 := @parameter1: android.renderscript.Double2;

        r2 := @parameter2: android.renderscript.Allocation;

        r3 := @parameter3: android.renderscript.Allocation;

        i1 := @parameter4: int;

        r4 := @parameter5: android.renderscript.Double2;

        r5 := @parameter6: android.renderscript.Allocation;

        i2 := @parameter7: int;

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r7 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64_2(android.renderscript.RenderScript)>($r6);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateGEMV(android.renderscript.Element,int,android.renderscript.Allocation,android.renderscript.Allocation,int,android.renderscript.Allocation,int)>($r7, i0, r2, r3, i1, r5, i2);

        $r8 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i3 = virtualinvoke $r8.<android.renderscript.Type: int getY()>();

        $r9 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i4 = virtualinvoke $r9.<android.renderscript.Type: int getX()>();

        $r11 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r10);

        $d0 = r1.<android.renderscript.Double2: double x>;

        $d1 = r1.<android.renderscript.Double2: double y>;

        $r12 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r12);

        $r13 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r13);

        $d2 = r4.<android.renderscript.Double2: double x>;

        $d3 = r4.<android.renderscript.Double2: double y>;

        $r14 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l8 = virtualinvoke r5.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r14);

        virtualinvoke $r11.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Z(long,int,int,int,int,int,int,int,int,int,double,double,long,long,double,double,long,int,int,int,int)>($l5, 71, i0, 0, 0, 0, 0, i3, i4, 0, $d0, $d1, $l6, $l7, $d2, $d3, $l8, i1, i2, 0, 0);

        return;
    }

    public void ZGERC(android.renderscript.Double2, android.renderscript.Allocation, int, android.renderscript.Allocation, int, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        android.renderscript.Double2 r1;
        android.renderscript.Allocation r2, r3, r4;
        int i0, i1, i2, i3;
        android.renderscript.RenderScript $r5, $r9, $r10, $r11, $r12, $r13;
        android.renderscript.Element $r6;
        android.renderscript.Type $r7, $r8;
        long $l4, $l5, $l6, $l7;
        double $d0, $d1;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        r1 := @parameter0: android.renderscript.Double2;

        r2 := @parameter1: android.renderscript.Allocation;

        i0 := @parameter2: int;

        r3 := @parameter3: android.renderscript.Allocation;

        i1 := @parameter4: int;

        r4 := @parameter5: android.renderscript.Allocation;

        $r5 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r6 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64_2(android.renderscript.RenderScript)>($r5);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateGERU(android.renderscript.Element,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>($r6, r2, i0, r3, i1, r4);

        $r7 = virtualinvoke r4.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i2 = virtualinvoke $r7.<android.renderscript.Type: int getY()>();

        $r8 = virtualinvoke r4.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i3 = virtualinvoke $r8.<android.renderscript.Type: int getX()>();

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r9);

        $d0 = r1.<android.renderscript.Double2: double x>;

        $d1 = r1.<android.renderscript.Double2: double y>;

        $r11 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r11);

        $r12 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r12);

        $r13 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r4.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r13);

        virtualinvoke $r10.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Z(long,int,int,int,int,int,int,int,int,int,double,double,long,long,double,double,long,int,int,int,int)>($l4, 108, 0, 0, 0, 0, 0, i2, i3, 0, $d0, $d1, $l5, $l6, 0.0, 0.0, $l7, i0, i1, 0, 0);

        return;
    }

    public void ZGERU(android.renderscript.Double2, android.renderscript.Allocation, int, android.renderscript.Allocation, int, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        android.renderscript.Double2 r1;
        android.renderscript.Allocation r2, r3, r4;
        int i0, i1, i2, i3;
        android.renderscript.RenderScript $r5, $r9, $r10, $r11, $r12, $r13;
        android.renderscript.Element $r6;
        android.renderscript.Type $r7, $r8;
        long $l4, $l5, $l6, $l7;
        double $d0, $d1;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        r1 := @parameter0: android.renderscript.Double2;

        r2 := @parameter1: android.renderscript.Allocation;

        i0 := @parameter2: int;

        r3 := @parameter3: android.renderscript.Allocation;

        i1 := @parameter4: int;

        r4 := @parameter5: android.renderscript.Allocation;

        $r5 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r6 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64_2(android.renderscript.RenderScript)>($r5);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateGERU(android.renderscript.Element,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>($r6, r2, i0, r3, i1, r4);

        $r7 = virtualinvoke r4.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i2 = virtualinvoke $r7.<android.renderscript.Type: int getY()>();

        $r8 = virtualinvoke r4.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i3 = virtualinvoke $r8.<android.renderscript.Type: int getX()>();

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r9);

        $d0 = r1.<android.renderscript.Double2: double x>;

        $d1 = r1.<android.renderscript.Double2: double y>;

        $r11 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r11);

        $r12 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r12);

        $r13 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r4.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r13);

        virtualinvoke $r10.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Z(long,int,int,int,int,int,int,int,int,int,double,double,long,long,double,double,long,int,int,int,int)>($l4, 107, 0, 0, 0, 0, 0, i2, i3, 0, $d0, $d1, $l5, $l6, 0.0, 0.0, $l7, i0, i1, 0, 0);

        return;
    }

    public void ZHBMV(int, int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation, int, android.renderscript.Double2, android.renderscript.Allocation, int)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3, i4;
        android.renderscript.Double2 r1, r4;
        android.renderscript.Allocation r2, r3, r5;
        android.renderscript.RenderScript $r6, $r9, $r10, $r11, $r12, $r13;
        android.renderscript.Element $r7;
        android.renderscript.RSRuntimeException $r8;
        long $l5, $l6, $l7, $l8;
        double $d0, $d1, $d2, $d3;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.renderscript.Double2;

        r2 := @parameter3: android.renderscript.Allocation;

        r3 := @parameter4: android.renderscript.Allocation;

        i2 := @parameter5: int;

        r4 := @parameter6: android.renderscript.Double2;

        r5 := @parameter7: android.renderscript.Allocation;

        i3 := @parameter8: int;

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r7 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64_2(android.renderscript.RenderScript)>($r6);

        i4 = staticinvoke <android.renderscript.ScriptIntrinsicBLAS: int validateSYR2(android.renderscript.Element,int,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>($r7, i0, r3, i2, r5, i3, r2);

        if i1 < 0 goto label1;

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r9);

        $d0 = r1.<android.renderscript.Double2: double x>;

        $d1 = r1.<android.renderscript.Double2: double y>;

        $r11 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r11);

        $r12 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r12);

        $d2 = r4.<android.renderscript.Double2: double x>;

        $d3 = r4.<android.renderscript.Double2: double y>;

        $r13 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l8 = virtualinvoke r5.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r13);

        virtualinvoke $r10.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Z(long,int,int,int,int,int,int,int,int,int,double,double,long,long,double,double,long,int,int,int,int)>($l5, 105, 0, 0, 0, i0, 0, 0, i4, i1, $d0, $d1, $l6, $l7, $d2, $d3, $l8, i2, i3, 0, 0);

        return;

     label1:
        $r8 = new android.renderscript.RSRuntimeException;

        specialinvoke $r8.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("K must be 0 or greater for HBMV");

        throw $r8;
    }

    public void ZHEMM(int, int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Double2, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, $i3, $i4;
        android.renderscript.Double2 r1, r4;
        android.renderscript.Allocation r2, r3, r5;
        android.renderscript.RenderScript $r6, $r8, $r9, $r12, $r13, $r14;
        android.renderscript.Element $r7;
        long $l2, $l5, $l6, $l7;
        android.renderscript.Type $r10, $r11;
        double $d0, $d1, $d2, $d3;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.renderscript.Double2;

        r2 := @parameter3: android.renderscript.Allocation;

        r3 := @parameter4: android.renderscript.Allocation;

        r4 := @parameter5: android.renderscript.Double2;

        r5 := @parameter6: android.renderscript.Allocation;

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateUplo(int)>(i1);

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r7 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64_2(android.renderscript.RenderScript)>($r6);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateHEMM(android.renderscript.Element,int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Allocation)>($r7, i0, r2, r3, r5);

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l2 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r8);

        $r10 = virtualinvoke r5.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i3 = virtualinvoke $r10.<android.renderscript.Type: int getY()>();

        $r11 = virtualinvoke r5.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i4 = virtualinvoke $r11.<android.renderscript.Type: int getX()>();

        $d0 = r1.<android.renderscript.Double2: double x>;

        $d1 = r1.<android.renderscript.Double2: double y>;

        $r12 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r12);

        $r13 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r13);

        $d2 = r4.<android.renderscript.Double2: double x>;

        $d3 = r4.<android.renderscript.Double2: double y>;

        $r14 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r5.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r14);

        virtualinvoke $r9.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Z(long,int,int,int,int,int,int,int,int,int,double,double,long,long,double,double,long,int,int,int,int)>($l2, 140, 0, 0, i0, i1, 0, $i3, $i4, 0, $d0, $d1, $l5, $l6, $d2, $d3, $l7, 0, 0, 0, 0);

        return;
    }

    public void ZHEMV(int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation, int, android.renderscript.Double2, android.renderscript.Allocation, int)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3;
        android.renderscript.Double2 r1, r4;
        android.renderscript.Allocation r2, r3, r5;
        android.renderscript.RenderScript $r6, $r8, $r9, $r10, $r11, $r12;
        android.renderscript.Element $r7;
        long $l4, $l5, $l6, $l7;
        double $d0, $d1, $d2, $d3;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        r1 := @parameter1: android.renderscript.Double2;

        r2 := @parameter2: android.renderscript.Allocation;

        r3 := @parameter3: android.renderscript.Allocation;

        i1 := @parameter4: int;

        r4 := @parameter5: android.renderscript.Double2;

        r5 := @parameter6: android.renderscript.Allocation;

        i2 := @parameter7: int;

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r7 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64_2(android.renderscript.RenderScript)>($r6);

        i3 = staticinvoke <android.renderscript.ScriptIntrinsicBLAS: int validateSYR2(android.renderscript.Element,int,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>($r7, i0, r3, i1, r5, i2, r2);

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r8);

        $d0 = r1.<android.renderscript.Double2: double x>;

        $d1 = r1.<android.renderscript.Double2: double y>;

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r10);

        $r11 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r11);

        $d2 = r4.<android.renderscript.Double2: double x>;

        $d3 = r4.<android.renderscript.Double2: double y>;

        $r12 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r5.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r12);

        virtualinvoke $r9.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Z(long,int,int,int,int,int,int,int,int,int,double,double,long,long,double,double,long,int,int,int,int)>($l4, 104, 0, 0, 0, i0, 0, 0, i3, 0, $d0, $d1, $l5, $l6, $d2, $d3, $l7, i1, i2, 0, 0);

        return;
    }

    public void ZHER(int, double, android.renderscript.Allocation, int, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2;
        double d0;
        android.renderscript.Allocation r1, r2;
        android.renderscript.RenderScript $r3, $r5, $r6, $r7, $r8;
        android.renderscript.Element $r4;
        long $l3, $l4, $l5;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        r1 := @parameter2: android.renderscript.Allocation;

        i1 := @parameter3: int;

        r2 := @parameter4: android.renderscript.Allocation;

        $r3 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r4 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64_2(android.renderscript.RenderScript)>($r3);

        i2 = staticinvoke <android.renderscript.ScriptIntrinsicBLAS: int validateSYR(android.renderscript.Element,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>($r4, i0, r1, i1, r2);

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r5 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l3 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r5);

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r7);

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r8);

        virtualinvoke $r6.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Z(long,int,int,int,int,int,int,int,int,int,double,double,long,long,double,double,long,int,int,int,int)>($l3, 109, 0, 0, 0, i0, 0, 0, i2, 0, d0, 0.0, $l4, 0L, 0.0, 0.0, $l5, i1, 0, 0, 0);

        return;
    }

    public void ZHER2(int, android.renderscript.Double2, android.renderscript.Allocation, int, android.renderscript.Allocation, int, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3;
        android.renderscript.Double2 r1;
        android.renderscript.Allocation r2, r3, r4;
        android.renderscript.RenderScript $r5, $r7, $r8, $r9, $r10, $r11;
        android.renderscript.Element $r6;
        long $l4, $l5, $l6, $l7;
        double $d0, $d1;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        r1 := @parameter1: android.renderscript.Double2;

        r2 := @parameter2: android.renderscript.Allocation;

        i1 := @parameter3: int;

        r3 := @parameter4: android.renderscript.Allocation;

        i2 := @parameter5: int;

        r4 := @parameter6: android.renderscript.Allocation;

        $r5 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r6 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64_2(android.renderscript.RenderScript)>($r5);

        i3 = staticinvoke <android.renderscript.ScriptIntrinsicBLAS: int validateSYR2(android.renderscript.Element,int,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>($r6, i0, r2, i1, r3, i2, r4);

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r7);

        $d0 = r1.<android.renderscript.Double2: double x>;

        $d1 = r1.<android.renderscript.Double2: double y>;

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r9);

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r10);

        $r11 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r4.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r11);

        virtualinvoke $r8.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Z(long,int,int,int,int,int,int,int,int,int,double,double,long,long,double,double,long,int,int,int,int)>($l4, 111, 0, 0, 0, i0, 0, 0, i3, 0, $d0, $d1, $l5, $l6, 0.0, 0.0, $l7, i1, i2, 0, 0);

        return;
    }

    public void ZHER2K(int, int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation, double, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, $i3, i7;
        android.renderscript.Double2 r1;
        android.renderscript.Allocation r2, r3, r4;
        double d0, $d1, $d2;
        android.renderscript.RenderScript $r5, $r8, $r9, $r11, $r12, $r13;
        android.renderscript.Element $r6;
        android.renderscript.Type $r7, $r10, $r14;
        long $l2, $l4, $l5, $l6;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.renderscript.Double2;

        r2 := @parameter3: android.renderscript.Allocation;

        r3 := @parameter4: android.renderscript.Allocation;

        d0 := @parameter5: double;

        r4 := @parameter6: android.renderscript.Allocation;

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateUplo(int)>(i0);

        $r5 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r6 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64_2(android.renderscript.RenderScript)>($r5);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateHER2K(android.renderscript.Element,int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Allocation)>($r6, i1, r2, r3, r4);

        if i1 != 111 goto label1;

        $r14 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i7 = virtualinvoke $r14.<android.renderscript.Type: int getX()>();

        goto label2;

     label1:
        $r7 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i7 = virtualinvoke $r7.<android.renderscript.Type: int getY()>();

     label2:
        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l2 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r8);

        $r10 = virtualinvoke r4.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i3 = virtualinvoke $r10.<android.renderscript.Type: int getX()>();

        $d1 = r1.<android.renderscript.Double2: double x>;

        $d2 = r1.<android.renderscript.Double2: double y>;

        $r11 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r11);

        $r12 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r12);

        $r13 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r4.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r13);

        virtualinvoke $r9.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Z(long,int,int,int,int,int,int,int,int,int,double,double,long,long,double,double,long,int,int,int,int)>($l2, 142, i1, 0, 0, i0, 0, 0, $i3, i7, $d1, $d2, $l4, $l5, d0, 0.0, $l6, 0, 0, 0, 0);

        return;
    }

    public void ZHERK(int, int, double, android.renderscript.Allocation, double, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, $i3, i6;
        double d0, d1;
        android.renderscript.Allocation r1, r2;
        android.renderscript.RenderScript $r3, $r6, $r7, $r9, $r10;
        android.renderscript.Element $r4;
        android.renderscript.Type $r5, $r8, $r11;
        long $l2, $l4, $l5;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        d0 := @parameter2: double;

        r1 := @parameter3: android.renderscript.Allocation;

        d1 := @parameter4: double;

        r2 := @parameter5: android.renderscript.Allocation;

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateUplo(int)>(i0);

        $r3 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r4 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64_2(android.renderscript.RenderScript)>($r3);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateHERK(android.renderscript.Element,int,android.renderscript.Allocation,android.renderscript.Allocation)>($r4, i1, r1, r2);

        if i1 != 113 goto label1;

        $r11 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i6 = virtualinvoke $r11.<android.renderscript.Type: int getY()>();

        goto label2;

     label1:
        $r5 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i6 = virtualinvoke $r5.<android.renderscript.Type: int getX()>();

     label2:
        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l2 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r6);

        $r8 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i3 = virtualinvoke $r8.<android.renderscript.Type: int getX()>();

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r9);

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r10);

        virtualinvoke $r7.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Z(long,int,int,int,int,int,int,int,int,int,double,double,long,long,double,double,long,int,int,int,int)>($l2, 141, i1, 0, 0, i0, 0, 0, $i3, i6, d0, 0.0, $l4, 0L, d1, 0.0, $l5, 0, 0, 0, 0);

        return;
    }

    public void ZHPMV(int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation, int, android.renderscript.Double2, android.renderscript.Allocation, int)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3;
        android.renderscript.Double2 r1, r4;
        android.renderscript.Allocation r2, r3, r5;
        android.renderscript.RenderScript $r6, $r8, $r9, $r10, $r11, $r12;
        android.renderscript.Element $r7;
        long $l4, $l5, $l6, $l7;
        double $d0, $d1, $d2, $d3;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        r1 := @parameter1: android.renderscript.Double2;

        r2 := @parameter2: android.renderscript.Allocation;

        r3 := @parameter3: android.renderscript.Allocation;

        i1 := @parameter4: int;

        r4 := @parameter5: android.renderscript.Double2;

        r5 := @parameter6: android.renderscript.Allocation;

        i2 := @parameter7: int;

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r7 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64_2(android.renderscript.RenderScript)>($r6);

        i3 = staticinvoke <android.renderscript.ScriptIntrinsicBLAS: int validateSPR2(android.renderscript.Element,int,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>($r7, i0, r3, i1, r5, i2, r2);

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r8);

        $d0 = r1.<android.renderscript.Double2: double x>;

        $d1 = r1.<android.renderscript.Double2: double y>;

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r10);

        $r11 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r11);

        $d2 = r4.<android.renderscript.Double2: double x>;

        $d3 = r4.<android.renderscript.Double2: double y>;

        $r12 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r5.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r12);

        virtualinvoke $r9.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Z(long,int,int,int,int,int,int,int,int,int,double,double,long,long,double,double,long,int,int,int,int)>($l4, 106, 0, 0, 0, i0, 0, 0, i3, 0, $d0, $d1, $l5, $l6, $d2, $d3, $l7, i1, i2, 0, 0);

        return;
    }

    public void ZHPR(int, double, android.renderscript.Allocation, int, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2;
        double d0;
        android.renderscript.Allocation r1, r2;
        android.renderscript.RenderScript $r3, $r5, $r6, $r7, $r8;
        android.renderscript.Element $r4;
        long $l3, $l4, $l5;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        r1 := @parameter2: android.renderscript.Allocation;

        i1 := @parameter3: int;

        r2 := @parameter4: android.renderscript.Allocation;

        $r3 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r4 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64_2(android.renderscript.RenderScript)>($r3);

        i2 = staticinvoke <android.renderscript.ScriptIntrinsicBLAS: int validateSPR(android.renderscript.Element,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>($r4, i0, r1, i1, r2);

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r5 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l3 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r5);

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r7);

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r8);

        virtualinvoke $r6.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Z(long,int,int,int,int,int,int,int,int,int,double,double,long,long,double,double,long,int,int,int,int)>($l3, 110, 0, 0, 0, i0, 0, 0, i2, 0, d0, 0.0, $l4, 0L, 0.0, 0.0, $l5, i1, 0, 0, 0);

        return;
    }

    public void ZHPR2(int, android.renderscript.Double2, android.renderscript.Allocation, int, android.renderscript.Allocation, int, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3;
        android.renderscript.Double2 r1;
        android.renderscript.Allocation r2, r3, r4;
        android.renderscript.RenderScript $r5, $r7, $r8, $r9, $r10, $r11;
        android.renderscript.Element $r6;
        long $l4, $l5, $l6, $l7;
        double $d0, $d1;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        r1 := @parameter1: android.renderscript.Double2;

        r2 := @parameter2: android.renderscript.Allocation;

        i1 := @parameter3: int;

        r3 := @parameter4: android.renderscript.Allocation;

        i2 := @parameter5: int;

        r4 := @parameter6: android.renderscript.Allocation;

        $r5 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r6 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64_2(android.renderscript.RenderScript)>($r5);

        i3 = staticinvoke <android.renderscript.ScriptIntrinsicBLAS: int validateSPR2(android.renderscript.Element,int,android.renderscript.Allocation,int,android.renderscript.Allocation,int,android.renderscript.Allocation)>($r6, i0, r2, i1, r3, i2, r4);

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r7);

        $d0 = r1.<android.renderscript.Double2: double x>;

        $d1 = r1.<android.renderscript.Double2: double y>;

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r9);

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r10);

        $r11 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r4.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r11);

        virtualinvoke $r8.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Z(long,int,int,int,int,int,int,int,int,int,double,double,long,long,double,double,long,int,int,int,int)>($l4, 112, 0, 0, 0, i0, 0, 0, i3, 0, $d0, $d1, $l5, $l6, 0.0, 0.0, $l7, i1, i2, 0, 0);

        return;
    }

    public void ZSYMM(int, int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Double2, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, $i2, $i3, $i5, $i6;
        android.renderscript.Double2 r1, r4;
        android.renderscript.Allocation r2, r3, r5;
        android.renderscript.Type $r6, $r7, $r13, $r14;
        android.renderscript.RSRuntimeException $r8;
        android.renderscript.RenderScript $r9, $r11, $r12, $r15, $r16, $r17;
        android.renderscript.Element $r10;
        long $l4, $l7, $l8, $l9;
        double $d0, $d1, $d2, $d3;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.renderscript.Double2;

        r2 := @parameter3: android.renderscript.Allocation;

        r3 := @parameter4: android.renderscript.Allocation;

        r4 := @parameter5: android.renderscript.Double2;

        r5 := @parameter6: android.renderscript.Allocation;

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateSide(int)>(i0);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateUplo(int)>(i1);

        $r6 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i2 = virtualinvoke $r6.<android.renderscript.Type: int getX()>();

        $r7 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i3 = virtualinvoke $r7.<android.renderscript.Type: int getY()>();

        if $i2 != $i3 goto label1;

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r10 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64_2(android.renderscript.RenderScript)>($r9);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateL3(android.renderscript.Element,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Allocation)>($r10, 0, 0, i0, r2, r3, r5);

        $r12 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r11 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r11);

        $r13 = virtualinvoke r5.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i5 = virtualinvoke $r13.<android.renderscript.Type: int getY()>();

        $r14 = virtualinvoke r5.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i6 = virtualinvoke $r14.<android.renderscript.Type: int getX()>();

        $d0 = r1.<android.renderscript.Double2: double x>;

        $d1 = r1.<android.renderscript.Double2: double y>;

        $r15 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r15);

        $r16 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l8 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r16);

        $d2 = r4.<android.renderscript.Double2: double x>;

        $d3 = r4.<android.renderscript.Double2: double y>;

        $r17 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l9 = virtualinvoke r5.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r17);

        virtualinvoke $r12.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Z(long,int,int,int,int,int,int,int,int,int,double,double,long,long,double,double,long,int,int,int,int)>($l4, 132, 0, 0, i0, i1, 0, $i5, $i6, 0, $d0, $d1, $l7, $l8, $d2, $d3, $l9, 0, 0, 0, 0);

        return;

     label1:
        $r8 = new android.renderscript.RSRuntimeException;

        specialinvoke $r8.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Matrix A is not symmetric");

        throw $r8;
    }

    public void ZSYR2K(int, int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation, android.renderscript.Double2, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, $i3, i7;
        android.renderscript.Double2 r1, r4;
        android.renderscript.Allocation r2, r3, r5;
        android.renderscript.RenderScript $r6, $r9, $r10, $r12, $r13, $r14;
        android.renderscript.Element $r7;
        android.renderscript.Type $r8, $r11, $r15;
        long $l2, $l4, $l5, $l6;
        double $d0, $d1, $d2, $d3;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.renderscript.Double2;

        r2 := @parameter3: android.renderscript.Allocation;

        r3 := @parameter4: android.renderscript.Allocation;

        r4 := @parameter5: android.renderscript.Double2;

        r5 := @parameter6: android.renderscript.Allocation;

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateUplo(int)>(i0);

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r7 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64_2(android.renderscript.RenderScript)>($r6);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateSYR2K(android.renderscript.Element,int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Allocation)>($r7, i1, r2, r3, r5);

        if i1 == 111 goto label1;

        $r15 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i7 = virtualinvoke $r15.<android.renderscript.Type: int getY()>();

        goto label2;

     label1:
        $r8 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i7 = virtualinvoke $r8.<android.renderscript.Type: int getX()>();

     label2:
        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l2 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r9);

        $r11 = virtualinvoke r5.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i3 = virtualinvoke $r11.<android.renderscript.Type: int getX()>();

        $d0 = r1.<android.renderscript.Double2: double x>;

        $d1 = r1.<android.renderscript.Double2: double y>;

        $r12 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r12);

        $r13 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r13);

        $d2 = r4.<android.renderscript.Double2: double x>;

        $d3 = r4.<android.renderscript.Double2: double y>;

        $r14 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r5.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r14);

        virtualinvoke $r10.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Z(long,int,int,int,int,int,int,int,int,int,double,double,long,long,double,double,long,int,int,int,int)>($l2, 134, i1, 0, 0, i0, 0, 0, $i3, i7, $d0, $d1, $l4, $l5, $d2, $d3, $l6, 0, 0, 0, 0);

        return;
    }

    public void ZSYRK(int, int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Double2, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, $i3, i6;
        android.renderscript.Double2 r1, r3;
        android.renderscript.Allocation r2, r4;
        android.renderscript.RenderScript $r5, $r8, $r9, $r11, $r12;
        android.renderscript.Element $r6;
        android.renderscript.Type $r7, $r10, $r13;
        long $l2, $l4, $l5;
        double $d0, $d1, $d2, $d3;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.renderscript.Double2;

        r2 := @parameter3: android.renderscript.Allocation;

        r3 := @parameter4: android.renderscript.Double2;

        r4 := @parameter5: android.renderscript.Allocation;

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateTranspose(int)>(i1);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateUplo(int)>(i0);

        $r5 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r6 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64_2(android.renderscript.RenderScript)>($r5);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateL3(android.renderscript.Element,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Allocation)>($r6, i1, 0, 0, r2, null, r4);

        if i1 == 111 goto label1;

        $r13 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i6 = virtualinvoke $r13.<android.renderscript.Type: int getY()>();

        goto label2;

     label1:
        $r7 = virtualinvoke r2.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i6 = virtualinvoke $r7.<android.renderscript.Type: int getX()>();

     label2:
        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l2 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r8);

        $r10 = virtualinvoke r4.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i3 = virtualinvoke $r10.<android.renderscript.Type: int getX()>();

        $d0 = r1.<android.renderscript.Double2: double x>;

        $d1 = r1.<android.renderscript.Double2: double y>;

        $r11 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r11);

        $d2 = r3.<android.renderscript.Double2: double x>;

        $d3 = r3.<android.renderscript.Double2: double y>;

        $r12 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r4.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r12);

        virtualinvoke $r9.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Z(long,int,int,int,int,int,int,int,int,int,double,double,long,long,double,double,long,int,int,int,int)>($l2, 133, i1, 0, 0, i0, 0, 0, $i3, i6, $d0, $d1, $l4, 0L, $d2, $d3, $l5, 0, 0, 0, 0);

        return;
    }

    public void ZTBMV(int, int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3, i4, i5;
        android.renderscript.Allocation r1, r2;
        android.renderscript.RSRuntimeException $r3;
        android.renderscript.RenderScript $r4, $r7, $r8, $r9, $r10;
        android.renderscript.Element $r5;
        android.renderscript.Type $r6;
        long $l6, $l7, $l8;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: android.renderscript.Allocation;

        r2 := @parameter5: android.renderscript.Allocation;

        i4 := @parameter6: int;

        if i3 < 0 goto label1;

        $r4 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r5 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64_2(android.renderscript.RenderScript)>($r4);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateTRMV(android.renderscript.Element,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>($r5, i0, i1, i2, r1, r2, i4);

        $r6 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i5 = virtualinvoke $r6.<android.renderscript.Type: int getY()>();

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r7);

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r9);

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l8 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r10);

        virtualinvoke $r8.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Z(long,int,int,int,int,int,int,int,int,int,double,double,long,long,double,double,long,int,int,int,int)>($l6, 74, i1, 0, 0, i0, i2, 0, i5, i3, 0.0, 0.0, $l7, $l8, 0.0, 0.0, 0L, i4, 0, 0, 0);

        return;

     label1:
        $r3 = new android.renderscript.RSRuntimeException;

        specialinvoke $r3.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("K must be greater than or equal to 0");

        throw $r3;
    }

    public void ZTBSV(int, int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3, i4, i5;
        android.renderscript.Allocation r1, r2;
        android.renderscript.RenderScript $r3, $r7, $r8, $r9, $r10;
        android.renderscript.Element $r4;
        android.renderscript.Type $r5;
        android.renderscript.RSRuntimeException $r6;
        long $l6, $l7, $l8;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: android.renderscript.Allocation;

        r2 := @parameter5: android.renderscript.Allocation;

        i4 := @parameter6: int;

        $r3 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r4 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64_2(android.renderscript.RenderScript)>($r3);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateTRMV(android.renderscript.Element,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>($r4, i0, i1, i2, r1, r2, i4);

        $r5 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i5 = virtualinvoke $r5.<android.renderscript.Type: int getY()>();

        if i3 < 0 goto label1;

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r7);

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r9);

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l8 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r10);

        virtualinvoke $r8.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Z(long,int,int,int,int,int,int,int,int,int,double,double,long,long,double,double,long,int,int,int,int)>($l6, 77, i1, 0, 0, i0, i2, 0, i5, i3, 0.0, 0.0, $l7, $l8, 0.0, 0.0, 0L, i4, 0, 0, 0);

        return;

     label1:
        $r6 = new android.renderscript.RSRuntimeException;

        specialinvoke $r6.<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>("Number of diagonals must be positive");

        throw $r6;
    }

    public void ZTPMV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3, i4;
        android.renderscript.Allocation r1, r2;
        android.renderscript.RenderScript $r3, $r5, $r6, $r7, $r8;
        android.renderscript.Element $r4;
        long $l5, $l6, $l7;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: android.renderscript.Allocation;

        r2 := @parameter4: android.renderscript.Allocation;

        i3 := @parameter5: int;

        $r3 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r4 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64_2(android.renderscript.RenderScript)>($r3);

        i4 = staticinvoke <android.renderscript.ScriptIntrinsicBLAS: int validateTPMV(android.renderscript.Element,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>($r4, i0, i1, i2, r1, r2, i3);

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r5 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r5);

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r7);

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r8);

        virtualinvoke $r6.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Z(long,int,int,int,int,int,int,int,int,int,double,double,long,long,double,double,long,int,int,int,int)>($l5, 75, i1, 0, 0, i0, i2, 0, i4, 0, 0.0, 0.0, $l6, $l7, 0.0, 0.0, 0L, i3, 0, 0, 0);

        return;
    }

    public void ZTPSV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3, i4;
        android.renderscript.Allocation r1, r2;
        android.renderscript.RenderScript $r3, $r5, $r6, $r7, $r8;
        android.renderscript.Element $r4;
        long $l5, $l6, $l7;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: android.renderscript.Allocation;

        r2 := @parameter4: android.renderscript.Allocation;

        i3 := @parameter5: int;

        $r3 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r4 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64_2(android.renderscript.RenderScript)>($r3);

        i4 = staticinvoke <android.renderscript.ScriptIntrinsicBLAS: int validateTPMV(android.renderscript.Element,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>($r4, i0, i1, i2, r1, r2, i3);

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r5 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r5);

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r7);

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r8);

        virtualinvoke $r6.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Z(long,int,int,int,int,int,int,int,int,int,double,double,long,long,double,double,long,int,int,int,int)>($l5, 78, i1, 0, 0, i0, i2, 0, i4, 0, 0.0, 0.0, $l6, $l7, 0.0, 0.0, 0L, i3, 0, 0, 0);

        return;
    }

    public void ZTRMM(int, int, int, int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3, $i5, $i6;
        android.renderscript.Double2 r1;
        android.renderscript.Allocation r2, r3;
        android.renderscript.RenderScript $r4, $r6, $r7, $r10, $r11;
        android.renderscript.Element $r5;
        long $l4, $l7, $l8;
        android.renderscript.Type $r8, $r9;
        double $d0, $d1;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: android.renderscript.Double2;

        r2 := @parameter5: android.renderscript.Allocation;

        r3 := @parameter6: android.renderscript.Allocation;

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateUplo(int)>(i1);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateDiag(int)>(i3);

        $r4 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r5 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64_2(android.renderscript.RenderScript)>($r4);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateTRMM(android.renderscript.Element,int,int,android.renderscript.Allocation,android.renderscript.Allocation)>($r5, i0, i2, r2, r3);

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r6);

        $r8 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i5 = virtualinvoke $r8.<android.renderscript.Type: int getY()>();

        $r9 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i6 = virtualinvoke $r9.<android.renderscript.Type: int getX()>();

        $d0 = r1.<android.renderscript.Double2: double x>;

        $d1 = r1.<android.renderscript.Double2: double y>;

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r10);

        $r11 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l8 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r11);

        virtualinvoke $r7.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Z(long,int,int,int,int,int,int,int,int,int,double,double,long,long,double,double,long,int,int,int,int)>($l4, 135, i2, 0, i0, i1, i3, $i5, $i6, 0, $d0, $d1, $l7, $l8, 0.0, 0.0, 0L, 0, 0, 0, 0);

        return;
    }

    public void ZTRMV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3, i4;
        android.renderscript.Allocation r1, r2;
        android.renderscript.RenderScript $r3, $r6, $r7, $r8, $r9;
        android.renderscript.Element $r4;
        android.renderscript.Type $r5;
        long $l5, $l6, $l7;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: android.renderscript.Allocation;

        r2 := @parameter4: android.renderscript.Allocation;

        i3 := @parameter5: int;

        $r3 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r4 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64_2(android.renderscript.RenderScript)>($r3);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateTRMV(android.renderscript.Element,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>($r4, i0, i1, i2, r1, r2, i3);

        $r5 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i4 = virtualinvoke $r5.<android.renderscript.Type: int getY()>();

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r6);

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r8);

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r9);

        virtualinvoke $r7.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Z(long,int,int,int,int,int,int,int,int,int,double,double,long,long,double,double,long,int,int,int,int)>($l5, 73, i1, 0, 0, i0, i2, 0, i4, 0, 0.0, 0.0, $l6, $l7, 0.0, 0.0, 0L, i3, 0, 0, 0);

        return;
    }

    public void ZTRSM(int, int, int, int, android.renderscript.Double2, android.renderscript.Allocation, android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3, $i5, $i6;
        android.renderscript.Double2 r1;
        android.renderscript.Allocation r2, r3;
        android.renderscript.RenderScript $r4, $r6, $r7, $r10, $r11;
        android.renderscript.Element $r5;
        long $l4, $l7, $l8;
        android.renderscript.Type $r8, $r9;
        double $d0, $d1;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: android.renderscript.Double2;

        r2 := @parameter5: android.renderscript.Allocation;

        r3 := @parameter6: android.renderscript.Allocation;

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateUplo(int)>(i1);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateDiag(int)>(i3);

        $r4 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r5 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64_2(android.renderscript.RenderScript)>($r4);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateTRSM(android.renderscript.Element,int,int,android.renderscript.Allocation,android.renderscript.Allocation)>($r5, i0, i2, r2, r3);

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l4 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r6);

        $r8 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i5 = virtualinvoke $r8.<android.renderscript.Type: int getY()>();

        $r9 = virtualinvoke r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i6 = virtualinvoke $r9.<android.renderscript.Type: int getX()>();

        $d0 = r1.<android.renderscript.Double2: double x>;

        $d1 = r1.<android.renderscript.Double2: double y>;

        $r10 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r10);

        $r11 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l8 = virtualinvoke r3.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r11);

        virtualinvoke $r7.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Z(long,int,int,int,int,int,int,int,int,int,double,double,long,long,double,double,long,int,int,int,int)>($l4, 136, i2, 0, i0, i1, i3, $i5, $i6, 0, $d0, $d1, $l7, $l8, 0.0, 0.0, 0L, 0, 0, 0, 0);

        return;
    }

    public void ZTRSV(int, int, int, android.renderscript.Allocation, android.renderscript.Allocation, int)
    {
        android.renderscript.ScriptIntrinsicBLAS r0;
        int i0, i1, i2, i3, i4;
        android.renderscript.Allocation r1, r2;
        android.renderscript.RenderScript $r3, $r6, $r7, $r8, $r9;
        android.renderscript.Element $r4;
        android.renderscript.Type $r5;
        long $l5, $l6, $l7;

        r0 := @this: android.renderscript.ScriptIntrinsicBLAS;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: android.renderscript.Allocation;

        r2 := @parameter4: android.renderscript.Allocation;

        i3 := @parameter5: int;

        $r3 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r4 = staticinvoke <android.renderscript.Element: android.renderscript.Element F64_2(android.renderscript.RenderScript)>($r3);

        staticinvoke <android.renderscript.ScriptIntrinsicBLAS: void validateTRMV(android.renderscript.Element,int,int,int,android.renderscript.Allocation,android.renderscript.Allocation,int)>($r4, i0, i1, i2, r1, r2, i3);

        $r5 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        i4 = virtualinvoke $r5.<android.renderscript.Type: int getY()>();

        $r7 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $r6 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l5 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicBLAS: long getID(android.renderscript.RenderScript)>($r6);

        $r8 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l6 = virtualinvoke r1.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r8);

        $r9 = r0.<android.renderscript.ScriptIntrinsicBLAS: android.renderscript.RenderScript mRS>;

        $l7 = virtualinvoke r2.<android.renderscript.Allocation: long getID(android.renderscript.RenderScript)>($r9);

        virtualinvoke $r7.<android.renderscript.RenderScript: void nScriptIntrinsicBLAS_Z(long,int,int,int,int,int,int,int,int,int,double,double,long,long,double,double,long,int,int,int,int)>($l5, 76, i1, 0, 0, i0, i2, 0, i4, 0, 0.0, 0.0, $l6, $l7, 0.0, 0.0, 0L, i3, 0, 0, 0);

        return;
    }

    public static void <clinit>()
    {
        <android.renderscript.ScriptIntrinsicBLAS: int UPPER> = 121;

        <android.renderscript.ScriptIntrinsicBLAS: int UNIT> = 132;

        <android.renderscript.ScriptIntrinsicBLAS: int TRANSPOSE> = 112;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_ztrsv> = 76;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_ztrsm> = 136;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_ztrmv> = 73;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_ztrmm> = 135;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_ztpsv> = 78;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_ztpmv> = 75;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_ztbsv> = 77;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_ztbmv> = 74;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_zsyrk> = 133;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_zsyr2k> = 134;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_zsymm> = 132;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_zswap> = 30;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_zscal> = 44;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_zhpr2> = 112;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_zhpr> = 110;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_zhpmv> = 106;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_zherk> = 141;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_zher2k> = 142;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_zher2> = 111;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_zher> = 109;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_zhemv> = 104;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_zhemm> = 140;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_zhbmv> = 105;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_zgeru> = 107;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_zgerc> = 108;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_zgemv> = 71;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_zgemm> = 131;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_zgbmv> = 72;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_zdscal> = 46;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_zdotu_sub> = 7;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_zdotc_sub> = 8;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_zcopy> = 31;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_zaxpy> = 32;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_strsv> = 52;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_strsm> = 118;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_strmv> = 49;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_strmm> = 117;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_stpsv> = 54;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_stpmv> = 51;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_stbsv> = 53;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_stbmv> = 50;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_ssyrk> = 115;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_ssyr2k> = 116;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_ssyr2> = 85;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_ssyr> = 83;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_ssymv> = 79;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_ssymm> = 114;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_sswap> = 21;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_sspr2> = 86;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_sspr> = 84;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_sspmv> = 81;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_sscal> = 41;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_ssbmv> = 80;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_srotmg> = 34;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_srotm> = 36;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_srotg> = 33;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_srot> = 35;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_snrm2> = 9;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_sger> = 82;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_sgemv> = 47;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_sgemm> = 113;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_sgbmv> = 48;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_sdsdot> = 1;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_sdot> = 3;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_scopy> = 22;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_scnrm2> = 13;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_scasum> = 14;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_saxpy> = 23;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_sasum> = 10;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_izamax> = 20;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_isamax> = 17;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_idamax> = 18;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_icamax> = 19;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_dznrm2> = 15;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_dzasum> = 16;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_dtrsv> = 60;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_dtrsm> = 124;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_dtrmv> = 57;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_dtrmm> = 123;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_dtpsv> = 62;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_dtpmv> = 59;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_dtbsv> = 61;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_dtbmv> = 58;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_dsyrk> = 121;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_dsyr2k> = 122;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_dsyr2> = 93;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_dsyr> = 91;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_dsymv> = 87;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_dsymm> = 120;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_dswap> = 24;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_dspr2> = 94;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_dspr> = 92;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_dspmv> = 89;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_dsdot> = 2;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_dscal> = 42;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_dsbmv> = 88;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_drotmg> = 38;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_drotm> = 40;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_drotg> = 37;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_drot> = 39;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_dnrm2> = 11;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_dger> = 90;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_dgemv> = 55;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_dgemm> = 119;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_dgbmv> = 56;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_ddot> = 4;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_dcopy> = 25;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_daxpy> = 26;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_dasum> = 12;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_ctrsv> = 68;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_ctrsm> = 130;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_ctrmv> = 65;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_ctrmm> = 129;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_ctpsv> = 70;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_ctpmv> = 67;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_ctbsv> = 69;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_ctbmv> = 66;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_csyrk> = 127;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_csyr2k> = 128;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_csymm> = 126;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_cswap> = 27;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_csscal> = 45;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_cscal> = 43;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_chpr2> = 103;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_chpr> = 101;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_chpmv> = 97;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_cherk> = 138;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_cher2k> = 139;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_cher2> = 102;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_cher> = 100;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_chemv> = 95;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_chemm> = 137;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_chbmv> = 96;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_cgeru> = 98;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_cgerc> = 99;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_cgemv> = 63;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_cgemm> = 125;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_cgbmv> = 64;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_cdotu_sub> = 5;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_cdotc_sub> = 6;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_ccopy> = 28;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_caxpy> = 29;

        <android.renderscript.ScriptIntrinsicBLAS: int RsBlas_bnnm> = 1000;

        <android.renderscript.ScriptIntrinsicBLAS: int RIGHT> = 142;

        <android.renderscript.ScriptIntrinsicBLAS: int NO_TRANSPOSE> = 111;

        <android.renderscript.ScriptIntrinsicBLAS: int NON_UNIT> = 131;

        <android.renderscript.ScriptIntrinsicBLAS: int LOWER> = 122;

        <android.renderscript.ScriptIntrinsicBLAS: int LEFT> = 141;

        <android.renderscript.ScriptIntrinsicBLAS: int CONJ_TRANSPOSE> = 113;

        return;
    }
}
