public final class android.renderscript.ScriptIntrinsicHistogram extends android.renderscript.ScriptIntrinsic
{
    private android.renderscript.Allocation mOut;

    private void <init>(long, android.renderscript.RenderScript)
    {
        android.renderscript.ScriptIntrinsicHistogram r0;
        long l0;
        android.renderscript.RenderScript r1;

        r0 := @this: android.renderscript.ScriptIntrinsicHistogram;

        l0 := @parameter0: long;

        r1 := @parameter1: android.renderscript.RenderScript;

        specialinvoke r0.<android.renderscript.ScriptIntrinsic: void <init>(long,android.renderscript.RenderScript)>(l0, r1);

        return;
    }

    public static android.renderscript.ScriptIntrinsicHistogram create(android.renderscript.RenderScript, android.renderscript.Element)
    {
        android.renderscript.RenderScript r0;
        android.renderscript.Element r1, $r2, $r3, $r4, $r5;
        boolean $z0, $z1, $z2, $z3;
        android.renderscript.RSIllegalArgumentException $r6;
        android.renderscript.ScriptIntrinsicHistogram $r7;
        long $l0, $l1;

        r0 := @parameter0: android.renderscript.RenderScript;

        r1 := @parameter1: android.renderscript.Element;

        $r2 = staticinvoke <android.renderscript.Element: android.renderscript.Element U8_4(android.renderscript.RenderScript)>(r0);

        $z0 = virtualinvoke r1.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>($r2);

        if $z0 != 0 goto label2;

        $r3 = staticinvoke <android.renderscript.Element: android.renderscript.Element U8_3(android.renderscript.RenderScript)>(r0);

        $z1 = virtualinvoke r1.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>($r3);

        if $z1 != 0 goto label2;

        $r4 = staticinvoke <android.renderscript.Element: android.renderscript.Element U8_2(android.renderscript.RenderScript)>(r0);

        $z2 = virtualinvoke r1.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>($r4);

        if $z2 != 0 goto label2;

        $r5 = staticinvoke <android.renderscript.Element: android.renderscript.Element U8(android.renderscript.RenderScript)>(r0);

        $z3 = virtualinvoke r1.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>($r5);

        if $z3 == 0 goto label1;

        goto label2;

     label1:
        $r6 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r6.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Unsupported element type.");

        throw $r6;

     label2:
        $r7 = new android.renderscript.ScriptIntrinsicHistogram;

        $l0 = virtualinvoke r1.<android.renderscript.Element: long getID(android.renderscript.RenderScript)>(r0);

        $l1 = virtualinvoke r0.<android.renderscript.RenderScript: long nScriptIntrinsicCreate(int,long)>(9, $l0);

        specialinvoke $r7.<android.renderscript.ScriptIntrinsicHistogram: void <init>(long,android.renderscript.RenderScript)>($l1, r0);

        return $r7;
    }

    public void forEach(android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicHistogram r0;
        android.renderscript.Allocation r1;

        r0 := @this: android.renderscript.ScriptIntrinsicHistogram;

        r1 := @parameter0: android.renderscript.Allocation;

        virtualinvoke r0.<android.renderscript.ScriptIntrinsicHistogram: void forEach(android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>(r1, null);

        return;
    }

    public void forEach(android.renderscript.Allocation, android.renderscript.Script$LaunchOptions)
    {
        android.renderscript.ScriptIntrinsicHistogram r0;
        android.renderscript.Allocation r1, $r5;
        android.renderscript.Script$LaunchOptions r2;
        android.renderscript.Type $r3, $r6, $r9, $r13, $r17, $r21;
        android.renderscript.Element $r4, $r7, $r10, $r12, $r14, $r16, $r18, $r20, $r22, $r24;
        int $i0, $i1;
        android.renderscript.RSIllegalArgumentException $r8, $r25;
        android.renderscript.RenderScript $r11, $r15, $r19, $r23;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: android.renderscript.ScriptIntrinsicHistogram;

        r1 := @parameter0: android.renderscript.Allocation;

        r2 := @parameter1: android.renderscript.Script$LaunchOptions;

        $r3 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r4 = virtualinvoke $r3.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $i0 = virtualinvoke $r4.<android.renderscript.Element: int getVectorSize()>();

        $r5 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.Allocation mOut>;

        $r6 = virtualinvoke $r5.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r7 = virtualinvoke $r6.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $i1 = virtualinvoke $r7.<android.renderscript.Element: int getVectorSize()>();

        if $i0 < $i1 goto label3;

        $r9 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r10 = virtualinvoke $r9.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r11 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.RenderScript mRS>;

        $r12 = staticinvoke <android.renderscript.Element: android.renderscript.Element U8(android.renderscript.RenderScript)>($r11);

        $z0 = virtualinvoke $r10.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>($r12);

        if $z0 != 0 goto label2;

        $r13 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r14 = virtualinvoke $r13.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r15 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.RenderScript mRS>;

        $r16 = staticinvoke <android.renderscript.Element: android.renderscript.Element U8_2(android.renderscript.RenderScript)>($r15);

        $z1 = virtualinvoke $r14.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>($r16);

        if $z1 != 0 goto label2;

        $r17 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r18 = virtualinvoke $r17.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r19 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.RenderScript mRS>;

        $r20 = staticinvoke <android.renderscript.Element: android.renderscript.Element U8_3(android.renderscript.RenderScript)>($r19);

        $z2 = virtualinvoke $r18.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>($r20);

        if $z2 != 0 goto label2;

        $r21 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r22 = virtualinvoke $r21.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r23 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.RenderScript mRS>;

        $r24 = staticinvoke <android.renderscript.Element: android.renderscript.Element U8_4(android.renderscript.RenderScript)>($r23);

        $z3 = virtualinvoke $r22.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>($r24);

        if $z3 == 0 goto label1;

        goto label2;

     label1:
        $r25 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r25.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Input type must be U8, U8_1, U8_2 or U8_4.");

        throw $r25;

     label2:
        virtualinvoke r0.<android.renderscript.ScriptIntrinsicHistogram: void forEach(int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.FieldPacker,android.renderscript.Script$LaunchOptions)>(0, r1, null, null, r2);

        return;

     label3:
        $r8 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r8.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Input vector size must be >= output vector size.");

        throw $r8;
    }

    public void forEach_Dot(android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicHistogram r0;
        android.renderscript.Allocation r1;

        r0 := @this: android.renderscript.ScriptIntrinsicHistogram;

        r1 := @parameter0: android.renderscript.Allocation;

        virtualinvoke r0.<android.renderscript.ScriptIntrinsicHistogram: void forEach_Dot(android.renderscript.Allocation,android.renderscript.Script$LaunchOptions)>(r1, null);

        return;
    }

    public void forEach_Dot(android.renderscript.Allocation, android.renderscript.Script$LaunchOptions)
    {
        android.renderscript.ScriptIntrinsicHistogram r0;
        android.renderscript.Allocation r1, $r3;
        android.renderscript.Script$LaunchOptions r2;
        android.renderscript.Type $r4, $r7, $r11, $r15, $r19;
        android.renderscript.Element $r5, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r22;
        int $i0;
        android.renderscript.RSIllegalArgumentException $r6, $r23;
        android.renderscript.RenderScript $r9, $r13, $r17, $r21;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: android.renderscript.ScriptIntrinsicHistogram;

        r1 := @parameter0: android.renderscript.Allocation;

        r2 := @parameter1: android.renderscript.Script$LaunchOptions;

        $r3 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.Allocation mOut>;

        $r4 = virtualinvoke $r3.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r5 = virtualinvoke $r4.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $i0 = virtualinvoke $r5.<android.renderscript.Element: int getVectorSize()>();

        if $i0 != 1 goto label3;

        $r7 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r8 = virtualinvoke $r7.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r9 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.RenderScript mRS>;

        $r10 = staticinvoke <android.renderscript.Element: android.renderscript.Element U8(android.renderscript.RenderScript)>($r9);

        $z0 = virtualinvoke $r8.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>($r10);

        if $z0 != 0 goto label2;

        $r11 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r12 = virtualinvoke $r11.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r13 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.RenderScript mRS>;

        $r14 = staticinvoke <android.renderscript.Element: android.renderscript.Element U8_2(android.renderscript.RenderScript)>($r13);

        $z1 = virtualinvoke $r12.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>($r14);

        if $z1 != 0 goto label2;

        $r15 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r16 = virtualinvoke $r15.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r17 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.RenderScript mRS>;

        $r18 = staticinvoke <android.renderscript.Element: android.renderscript.Element U8_3(android.renderscript.RenderScript)>($r17);

        $z2 = virtualinvoke $r16.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>($r18);

        if $z2 != 0 goto label2;

        $r19 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r20 = virtualinvoke $r19.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r21 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.RenderScript mRS>;

        $r22 = staticinvoke <android.renderscript.Element: android.renderscript.Element U8_4(android.renderscript.RenderScript)>($r21);

        $z3 = virtualinvoke $r20.<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>($r22);

        if $z3 == 0 goto label1;

        goto label2;

     label1:
        $r23 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r23.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Input type must be U8, U8_1, U8_2 or U8_4.");

        throw $r23;

     label2:
        virtualinvoke r0.<android.renderscript.ScriptIntrinsicHistogram: void forEach(int,android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.FieldPacker,android.renderscript.Script$LaunchOptions)>(1, r1, null, null, r2);

        return;

     label3:
        $r6 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r6.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Output vector size must be one.");

        throw $r6;
    }

    public android.renderscript.Script$FieldID getFieldID_Input()
    {
        android.renderscript.ScriptIntrinsicHistogram r0;
        android.renderscript.Script$FieldID $r1;

        r0 := @this: android.renderscript.ScriptIntrinsicHistogram;

        $r1 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.Script$FieldID createFieldID(int,android.renderscript.Element)>(1, null);

        return $r1;
    }

    public android.renderscript.Script$KernelID getKernelID_Separate()
    {
        android.renderscript.ScriptIntrinsicHistogram r0;
        android.renderscript.Script$KernelID $r1;

        r0 := @this: android.renderscript.ScriptIntrinsicHistogram;

        $r1 = virtualinvoke r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.Script$KernelID createKernelID(int,int,android.renderscript.Element,android.renderscript.Element)>(0, 3, null, null);

        return $r1;
    }

    public void setDotCoefficients(float, float, float, float)
    {
        android.renderscript.ScriptIntrinsicHistogram r0;
        float f0, f1, f2, f3, $f4, $f5, $f6;
        byte $b0, $b1, $b2, $b3, $b4;
        android.renderscript.RSIllegalArgumentException $r2, $r4;
        android.renderscript.FieldPacker $r3;

        r0 := @this: android.renderscript.ScriptIntrinsicHistogram;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        $b0 = f0 cmpg 0.0F;

        if $b0 < 0 goto label2;

        $b1 = f1 cmpg 0.0F;

        if $b1 < 0 goto label2;

        $b2 = f2 cmpg 0.0F;

        if $b2 < 0 goto label2;

        $b3 = f3 cmpg 0.0F;

        if $b3 < 0 goto label2;

        $f4 = f0 + f1;

        $f5 = $f4 + f2;

        $f6 = $f5 + f3;

        $b4 = $f6 cmpl 1.0F;

        if $b4 > 0 goto label1;

        $r3 = new android.renderscript.FieldPacker;

        specialinvoke $r3.<android.renderscript.FieldPacker: void <init>(int)>(16);

        virtualinvoke $r3.<android.renderscript.FieldPacker: void addF32(float)>(f0);

        virtualinvoke $r3.<android.renderscript.FieldPacker: void addF32(float)>(f1);

        virtualinvoke $r3.<android.renderscript.FieldPacker: void addF32(float)>(f2);

        virtualinvoke $r3.<android.renderscript.FieldPacker: void addF32(float)>(f3);

        virtualinvoke r0.<android.renderscript.ScriptIntrinsicHistogram: void setVar(int,android.renderscript.FieldPacker)>(0, $r3);

        return;

     label1:
        $r2 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r2.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Sum of coefficients must be 1.0 or less.");

        throw $r2;

     label2:
        $r4 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r4.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Coefficient may not be negative.");

        throw $r4;
    }

    public void setOutput(android.renderscript.Allocation)
    {
        android.renderscript.ScriptIntrinsicHistogram r0;
        android.renderscript.Allocation r1, $r6, $r8, $r10, $r12, $r17, $r22, $r27, $r32, $r37, $r42, $r48;
        android.renderscript.Type $r2, $r7, $r9, $r11, $r13, $r18, $r23, $r28, $r33, $r38, $r43, $r49;
        android.renderscript.Element $r3, $r5, $r14, $r16, $r19, $r21, $r24, $r26, $r29, $r31, $r34, $r36, $r39, $r41, $r44, $r46;
        android.renderscript.RenderScript $r4, $r15, $r20, $r25, $r30, $r35, $r40, $r45;
        int $i0, $i1, $i2;
        boolean $z0;
        android.renderscript.RSIllegalArgumentException $r47, $r50;

        r0 := @this: android.renderscript.ScriptIntrinsicHistogram;

        r1 := @parameter0: android.renderscript.Allocation;

        r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.Allocation mOut> = r1;

        $r2 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r3 = virtualinvoke $r2.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r4 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.RenderScript mRS>;

        $r5 = staticinvoke <android.renderscript.Element: android.renderscript.Element U32(android.renderscript.RenderScript)>($r4);

        if $r3 == $r5 goto label2;

        $r12 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.Allocation mOut>;

        $r13 = virtualinvoke $r12.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r14 = virtualinvoke $r13.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r15 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.RenderScript mRS>;

        $r16 = staticinvoke <android.renderscript.Element: android.renderscript.Element U32_2(android.renderscript.RenderScript)>($r15);

        if $r14 == $r16 goto label2;

        $r17 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.Allocation mOut>;

        $r18 = virtualinvoke $r17.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r19 = virtualinvoke $r18.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r20 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.RenderScript mRS>;

        $r21 = staticinvoke <android.renderscript.Element: android.renderscript.Element U32_3(android.renderscript.RenderScript)>($r20);

        if $r19 == $r21 goto label2;

        $r22 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.Allocation mOut>;

        $r23 = virtualinvoke $r22.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r24 = virtualinvoke $r23.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r25 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.RenderScript mRS>;

        $r26 = staticinvoke <android.renderscript.Element: android.renderscript.Element U32_4(android.renderscript.RenderScript)>($r25);

        if $r24 == $r26 goto label2;

        $r27 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.Allocation mOut>;

        $r28 = virtualinvoke $r27.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r29 = virtualinvoke $r28.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r30 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.RenderScript mRS>;

        $r31 = staticinvoke <android.renderscript.Element: android.renderscript.Element I32(android.renderscript.RenderScript)>($r30);

        if $r29 == $r31 goto label2;

        $r32 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.Allocation mOut>;

        $r33 = virtualinvoke $r32.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r34 = virtualinvoke $r33.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r35 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.RenderScript mRS>;

        $r36 = staticinvoke <android.renderscript.Element: android.renderscript.Element I32_2(android.renderscript.RenderScript)>($r35);

        if $r34 == $r36 goto label2;

        $r37 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.Allocation mOut>;

        $r38 = virtualinvoke $r37.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r39 = virtualinvoke $r38.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r40 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.RenderScript mRS>;

        $r41 = staticinvoke <android.renderscript.Element: android.renderscript.Element I32_3(android.renderscript.RenderScript)>($r40);

        if $r39 == $r41 goto label2;

        $r42 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.Allocation mOut>;

        $r43 = virtualinvoke $r42.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r44 = virtualinvoke $r43.<android.renderscript.Type: android.renderscript.Element getElement()>();

        $r45 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.RenderScript mRS>;

        $r46 = staticinvoke <android.renderscript.Element: android.renderscript.Element I32_4(android.renderscript.RenderScript)>($r45);

        if $r44 != $r46 goto label1;

        goto label2;

     label1:
        $r47 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r47.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Output type must be U32 or I32.");

        throw $r47;

     label2:
        $r48 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.Allocation mOut>;

        $r49 = virtualinvoke $r48.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i2 = virtualinvoke $r49.<android.renderscript.Type: int getX()>();

        if $i2 != 256 goto label3;

        $r6 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.Allocation mOut>;

        $r7 = virtualinvoke $r6.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i0 = virtualinvoke $r7.<android.renderscript.Type: int getY()>();

        if $i0 != 0 goto label3;

        $r8 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.Allocation mOut>;

        $r9 = virtualinvoke $r8.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $z0 = virtualinvoke $r9.<android.renderscript.Type: boolean hasMipmaps()>();

        if $z0 != 0 goto label3;

        $r10 = r0.<android.renderscript.ScriptIntrinsicHistogram: android.renderscript.Allocation mOut>;

        $r11 = virtualinvoke $r10.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $i1 = virtualinvoke $r11.<android.renderscript.Type: int getYuv()>();

        if $i1 != 0 goto label3;

        virtualinvoke r0.<android.renderscript.ScriptIntrinsicHistogram: void setVar(int,android.renderscript.BaseObj)>(1, r1);

        return;

     label3:
        $r50 = new android.renderscript.RSIllegalArgumentException;

        specialinvoke $r50.<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>("Output must be 1D, 256 elements.");

        throw $r50;
    }
}
