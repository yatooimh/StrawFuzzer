public class android.security.Credentials extends java.lang.Object
{
    public static final java.lang.String APP_SOURCE_CERTIFICATE;
    public static final java.lang.String CA_CERTIFICATE;
    public static final java.lang.String CERTIFICATE_USAGE_APP_SOURCE;
    public static final java.lang.String CERTIFICATE_USAGE_CA;
    public static final java.lang.String CERTIFICATE_USAGE_USER;
    public static final java.lang.String CERTIFICATE_USAGE_WIFI;
    public static final java.lang.String EXTENSION_CER;
    public static final java.lang.String EXTENSION_CRT;
    public static final java.lang.String EXTENSION_P12;
    public static final java.lang.String EXTENSION_PFX;
    public static final java.lang.String EXTRA_CA_CERTIFICATES_DATA;
    public static final java.lang.String EXTRA_CERTIFICATE_USAGE;
    public static final java.lang.String EXTRA_INSTALL_AS_UID;
    public static final java.lang.String EXTRA_PRIVATE_KEY;
    public static final java.lang.String EXTRA_PUBLIC_KEY;
    public static final java.lang.String EXTRA_USER_CERTIFICATE_DATA;
    public static final java.lang.String EXTRA_USER_KEY_ALIAS;
    public static final java.lang.String EXTRA_USER_PRIVATE_KEY_DATA;
    public static final java.lang.String INSTALL_ACTION;
    public static final java.lang.String INSTALL_AS_USER_ACTION;
    public static final java.lang.String LOCKDOWN_VPN;
    private static final java.lang.String LOGTAG;
    public static final java.lang.String PLATFORM_VPN;
    public static final java.lang.String USER_CERTIFICATE;
    public static final java.lang.String USER_PRIVATE_KEY;
    public static final java.lang.String USER_SECRET_KEY;
    public static final java.lang.String VPN;
    public static final java.lang.String WIFI;

    public void <init>()
    {
        android.security.Credentials r0;

        r0 := @this: android.security.Credentials;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.List convertFromPem(byte[]) throws java.io.IOException, java.security.cert.CertificateException
    {
        java.util.ArrayList r0;
        com.android.org.bouncycastle.util.io.pem.PemReader $r1;
        java.io.InputStreamReader $r2;
        java.io.ByteArrayInputStream $r3, r18;
        java.nio.charset.Charset $r4;
        java.lang.String $r5, $r7, $r9;
        boolean $z0;
        byte[] $r10, r14;
        java.security.cert.Certificate $r11;
        java.security.cert.X509Certificate $r12;
        java.lang.Throwable $r13;
        java.security.cert.CertificateFactory r16;
        com.android.org.bouncycastle.util.io.pem.PemObject r17;
        java.lang.IllegalArgumentException r19;
        java.lang.StringBuilder r20;

        r14 := @parameter0: byte[];

        $r1 = new com.android.org.bouncycastle.util.io.pem.PemReader;

        $r2 = new java.io.InputStreamReader;

        $r3 = new java.io.ByteArrayInputStream;

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>(r14);

        $r4 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset US_ASCII>;

        specialinvoke $r2.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r3, $r4);

        specialinvoke $r1.<com.android.org.bouncycastle.util.io.pem.PemReader: void <init>(java.io.Reader)>($r2);

     label1:
        r16 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X509");

        r0 = new java.util.ArrayList;

        specialinvoke r0.<java.util.ArrayList: void <init>()>();

     label2:
        r17 = virtualinvoke $r1.<com.android.org.bouncycastle.util.io.pem.PemReader: com.android.org.bouncycastle.util.io.pem.PemObject readPemObject()>();

     label3:
        if r17 == null goto label7;

     label4:
        $r5 = virtualinvoke r17.<com.android.org.bouncycastle.util.io.pem.PemObject: java.lang.String getType()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("CERTIFICATE");

        if $z0 == 0 goto label6;

        r18 = new java.io.ByteArrayInputStream;

        $r10 = virtualinvoke r17.<com.android.org.bouncycastle.util.io.pem.PemObject: byte[] getContent()>();

        specialinvoke r18.<java.io.ByteArrayInputStream: void <init>(byte[])>($r10);

        $r11 = virtualinvoke r16.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>(r18);

        $r12 = (java.security.cert.X509Certificate) $r11;

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>($r12);

     label5:
        goto label2;

     label6:
        r19 = new java.lang.IllegalArgumentException;

        r20 = new java.lang.StringBuilder;

        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown type ");

        $r7 = virtualinvoke r17.<com.android.org.bouncycastle.util.io.pem.PemObject: java.lang.String getType()>();

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw r19;

     label7:
        virtualinvoke $r1.<com.android.org.bouncycastle.util.io.pem.PemReader: void close()>();

        return r0;

     label8:
        $r13 := @caughtexception;

        virtualinvoke $r1.<com.android.org.bouncycastle.util.io.pem.PemReader: void close()>();

        throw $r13;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label2 to label3 with label8;
        catch java.lang.Throwable from label4 to label5 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    public static transient byte[] convertToPem(java.security.cert.Certificate[]) throws java.io.IOException, java.security.cert.CertificateEncodingException
    {
        java.security.cert.Certificate[] r0;
        int i0, i1;
        java.nio.charset.Charset $r6;
        byte[] $r7, $r10;
        java.security.cert.Certificate $r9;
        java.io.ByteArrayOutputStream r11;
        java.io.OutputStreamWriter r12;
        com.android.org.bouncycastle.util.io.pem.PemWriter r13;
        com.android.org.bouncycastle.util.io.pem.PemObject r14;
        com.android.org.bouncycastle.util.io.pem.PemObjectGenerator r15;

        r0 := @parameter0: java.security.cert.Certificate[];

        r11 = new java.io.ByteArrayOutputStream;

        specialinvoke r11.<java.io.ByteArrayOutputStream: void <init>()>();

        r13 = new com.android.org.bouncycastle.util.io.pem.PemWriter;

        r12 = new java.io.OutputStreamWriter;

        $r6 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset US_ASCII>;

        specialinvoke r12.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>(r11, $r6);

        specialinvoke r13.<com.android.org.bouncycastle.util.io.pem.PemWriter: void <init>(java.io.Writer)>(r12);

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r14 = new com.android.org.bouncycastle.util.io.pem.PemObject;

        $r9 = r0[i1];

        $r10 = virtualinvoke $r9.<java.security.cert.Certificate: byte[] getEncoded()>();

        specialinvoke r14.<com.android.org.bouncycastle.util.io.pem.PemObject: void <init>(java.lang.String,byte[])>("CERTIFICATE", $r10);

        r15 = (com.android.org.bouncycastle.util.io.pem.PemObjectGenerator) r14;

        virtualinvoke r13.<com.android.org.bouncycastle.util.io.pem.PemWriter: void writeObject(com.android.org.bouncycastle.util.io.pem.PemObjectGenerator)>(r15);

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke r13.<com.android.org.bouncycastle.util.io.pem.PemWriter: void close()>();

        $r7 = virtualinvoke r11.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r7;
    }

    public static boolean deleteAllTypesForAlias(android.security.KeyStore, java.lang.String)
    {
        android.security.KeyStore r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @parameter0: android.security.KeyStore;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <android.security.Credentials: boolean deleteAllTypesForAlias(android.security.KeyStore,java.lang.String,int)>(r0, r1, -1);

        return $z0;
    }

    public static boolean deleteAllTypesForAlias(android.security.KeyStore, java.lang.String, int)
    {
        android.security.KeyStore r0;
        java.lang.String r1;
        int i0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: android.security.KeyStore;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $z0 = staticinvoke <android.security.Credentials: boolean deleteUserKeyTypeForAlias(android.security.KeyStore,java.lang.String,int)>(r0, r1, i0);

        $z1 = staticinvoke <android.security.Credentials: boolean deleteCertificateTypesForAlias(android.security.KeyStore,java.lang.String,int)>(r0, r1, i0);

        $z2 = $z0 & $z1;

        return $z2;
    }

    public static boolean deleteCertificateTypesForAlias(android.security.KeyStore, java.lang.String)
    {
        android.security.KeyStore r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @parameter0: android.security.KeyStore;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <android.security.Credentials: boolean deleteCertificateTypesForAlias(android.security.KeyStore,java.lang.String,int)>(r0, r1, -1);

        return $z0;
    }

    public static boolean deleteCertificateTypesForAlias(android.security.KeyStore, java.lang.String, int)
    {
        android.security.KeyStore r0;
        java.lang.String r1, $r5, $r9;
        int i0;
        boolean z0, $z1, $z2;
        java.lang.StringBuilder $r2, $r6;

        r0 := @parameter0: android.security.KeyStore;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRCERT_");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        z0 = virtualinvoke r0.<android.security.KeyStore: boolean delete(java.lang.String,int)>($r5, i0);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CACERT_");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $z1 = virtualinvoke r0.<android.security.KeyStore: boolean delete(java.lang.String,int)>($r9, i0);

        $z2 = z0 & $z1;

        return $z2;
    }

    public static boolean deleteLegacyKeyForAlias(android.security.KeyStore, java.lang.String, int)
    {
        android.security.KeyStore r0;
        java.lang.String r1, $r6;
        int i0;
        java.lang.StringBuilder $r3;
        boolean $z0;

        r0 := @parameter0: android.security.KeyStore;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRSKEY_");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = virtualinvoke r0.<android.security.KeyStore: boolean delete(java.lang.String,int)>($r6, i0);

        return $z0;
    }

    public static boolean deleteUserKeyTypeForAlias(android.security.KeyStore, java.lang.String)
    {
        android.security.KeyStore r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @parameter0: android.security.KeyStore;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <android.security.Credentials: boolean deleteUserKeyTypeForAlias(android.security.KeyStore,java.lang.String,int)>(r0, r1, -1);

        return $z0;
    }

    public static boolean deleteUserKeyTypeForAlias(android.security.KeyStore, java.lang.String, int)
    {
        android.security.KeyStore r0;
        java.lang.String r1, $r5, $r9;
        int i0, i1;
        java.lang.StringBuilder $r2, $r6;
        boolean $z0, z1;

        r0 := @parameter0: android.security.KeyStore;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRPKEY_");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        i1 = virtualinvoke r0.<android.security.KeyStore: int delete2(java.lang.String,int)>($r5, i0);

        if i1 != 7 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRSKEY_");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = virtualinvoke r0.<android.security.KeyStore: boolean delete(java.lang.String,int)>($r9, i0);

        return $z0;

     label1:
        z1 = 1;

        if i1 != 1 goto label2;

        goto label3;

     label2:
        z1 = 0;

     label3:
        return z1;
    }

    public static void <clinit>()
    {
        <android.security.Credentials: java.lang.String WIFI> = "WIFI_";

        <android.security.Credentials: java.lang.String VPN> = "VPN_";

        <android.security.Credentials: java.lang.String USER_SECRET_KEY> = "USRSKEY_";

        <android.security.Credentials: java.lang.String USER_PRIVATE_KEY> = "USRPKEY_";

        <android.security.Credentials: java.lang.String USER_CERTIFICATE> = "USRCERT_";

        <android.security.Credentials: java.lang.String PLATFORM_VPN> = "PLATFORM_VPN_";

        <android.security.Credentials: java.lang.String LOGTAG> = "Credentials";

        <android.security.Credentials: java.lang.String LOCKDOWN_VPN> = "LOCKDOWN_VPN";

        <android.security.Credentials: java.lang.String INSTALL_AS_USER_ACTION> = "android.credentials.INSTALL_AS_USER";

        <android.security.Credentials: java.lang.String INSTALL_ACTION> = "android.credentials.INSTALL";

        <android.security.Credentials: java.lang.String EXTRA_USER_PRIVATE_KEY_DATA> = "user_private_key_data";

        <android.security.Credentials: java.lang.String EXTRA_USER_KEY_ALIAS> = "user_key_pair_name";

        <android.security.Credentials: java.lang.String EXTRA_USER_CERTIFICATE_DATA> = "user_certificate_data";

        <android.security.Credentials: java.lang.String EXTRA_PUBLIC_KEY> = "KEY";

        <android.security.Credentials: java.lang.String EXTRA_PRIVATE_KEY> = "PKEY";

        <android.security.Credentials: java.lang.String EXTRA_INSTALL_AS_UID> = "install_as_uid";

        <android.security.Credentials: java.lang.String EXTRA_CERTIFICATE_USAGE> = "certificate_install_usage";

        <android.security.Credentials: java.lang.String EXTRA_CA_CERTIFICATES_DATA> = "ca_certificates_data";

        <android.security.Credentials: java.lang.String EXTENSION_PFX> = ".pfx";

        <android.security.Credentials: java.lang.String EXTENSION_P12> = ".p12";

        <android.security.Credentials: java.lang.String EXTENSION_CRT> = ".crt";

        <android.security.Credentials: java.lang.String EXTENSION_CER> = ".cer";

        <android.security.Credentials: java.lang.String CERTIFICATE_USAGE_WIFI> = "wifi";

        <android.security.Credentials: java.lang.String CERTIFICATE_USAGE_USER> = "user";

        <android.security.Credentials: java.lang.String CERTIFICATE_USAGE_CA> = "ca";

        <android.security.Credentials: java.lang.String CERTIFICATE_USAGE_APP_SOURCE> = "appsrc";

        <android.security.Credentials: java.lang.String CA_CERTIFICATE> = "CACERT_";

        <android.security.Credentials: java.lang.String APP_SOURCE_CERTIFICATE> = "FSV_";

        return;
    }
}
