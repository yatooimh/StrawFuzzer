public class android.security.SystemKeyStore extends java.lang.Object
{
    private static final java.lang.String KEY_FILE_EXTENSION;
    private static final java.lang.String SYSTEM_KEYSTORE_DIRECTORY;
    private static android.security.SystemKeyStore mInstance;

    static void <clinit>()
    {
        android.security.SystemKeyStore $r0;

        <android.security.SystemKeyStore: java.lang.String SYSTEM_KEYSTORE_DIRECTORY> = "misc/systemkeys";

        <android.security.SystemKeyStore: java.lang.String KEY_FILE_EXTENSION> = ".sks";

        $r0 = new android.security.SystemKeyStore;

        specialinvoke $r0.<android.security.SystemKeyStore: void <init>()>();

        <android.security.SystemKeyStore: android.security.SystemKeyStore mInstance> = $r0;

        return;
    }

    private void <init>()
    {
        android.security.SystemKeyStore r0;

        r0 := @this: android.security.SystemKeyStore;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static android.security.SystemKeyStore getInstance()
    {
        android.security.SystemKeyStore $r0;

        $r0 = <android.security.SystemKeyStore: android.security.SystemKeyStore mInstance>;

        return $r0;
    }

    private java.io.File getKeyFile(java.lang.String)
    {
        android.security.SystemKeyStore r0;
        java.lang.String r1, $r10;
        java.io.File $r4, $r5, $r9;
        java.lang.StringBuilder $r6;

        r0 := @this: android.security.SystemKeyStore;

        r1 := @parameter0: java.lang.String;

        $r4 = new java.io.File;

        $r5 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "misc/systemkeys");

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".sks");

        $r9 = new java.io.File;

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r10);

        return $r9;
    }

    public static java.lang.String toHexString(byte[])
    {
        byte[] r0;
        java.lang.String r2, $r4, r9;
        java.lang.StringBuilder $r3, $r6;
        int $i0, $i1, $i2, $i5, i7;
        byte $b3;
        short $s4;

        r0 := @parameter0: byte[];

        if r0 != null goto label1;

        return null;

     label1:
        $r3 = new java.lang.StringBuilder;

        $i0 = lengthof r0;

        $i1 = $i0 * 2;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>($i1);

        i7 = 0;

     label2:
        $i2 = lengthof r0;

        if i7 >= $i2 goto label4;

        $b3 = r0[i7];

        $s4 = $b3 & 255;

        r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int,int)>($s4, 16);

        r9 = r2;

        $i5 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i5 != 1 goto label3;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        i7 = i7 + 1;

        goto label2;

     label4:
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public void deleteKey(java.lang.String)
    {
        android.security.SystemKeyStore r0;
        boolean $z0;
        java.lang.IllegalArgumentException $r1;
        java.lang.String r2;
        java.io.File r3;

        r0 := @this: android.security.SystemKeyStore;

        r2 := @parameter0: java.lang.String;

        r3 = specialinvoke r0.<android.security.SystemKeyStore: java.io.File getKeyFile(java.lang.String)>(r2);

        $z0 = virtualinvoke r3.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        virtualinvoke r3.<java.io.File: boolean delete()>();

        return;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;
    }

    public byte[] generateNewKey(int, java.lang.String, java.lang.String) throws java.security.NoSuchAlgorithmException
    {
        android.security.SystemKeyStore r0;
        int i0;
        java.io.FileOutputStream r1;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r2, r12;
        java.security.SecureRandom $r3;
        javax.crypto.SecretKey $r4;
        java.lang.String $r5, r7, r8;
        java.lang.Throwable $r6;
        java.io.File r9;
        javax.crypto.KeyGenerator r10;
        byte[] r11;

        r0 := @this: android.security.SystemKeyStore;

        i0 := @parameter0: int;

        r7 := @parameter1: java.lang.String;

        r8 := @parameter2: java.lang.String;

        r9 = specialinvoke r0.<android.security.SystemKeyStore: java.io.File getKeyFile(java.lang.String)>(r8);

        $z0 = virtualinvoke r9.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label5;

        r10 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>(r7);

        $r3 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>("SHA1PRNG");

        virtualinvoke r10.<javax.crypto.KeyGenerator: void init(int,java.security.SecureRandom)>(i0, $r3);

        $r4 = virtualinvoke r10.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>();

        r11 = interfaceinvoke $r4.<javax.crypto.SecretKey: byte[] getEncoded()>();

     label1:
        $z1 = virtualinvoke r9.<java.io.File: boolean createNewFile()>();

        if $z1 == 0 goto label3;

        r1 = new java.io.FileOutputStream;

        specialinvoke r1.<java.io.FileOutputStream: void <init>(java.io.File)>(r9);

        virtualinvoke r1.<java.io.FileOutputStream: void write(byte[])>(r11);

        virtualinvoke r1.<java.io.FileOutputStream: void flush()>();

        staticinvoke <android.os.FileUtils: boolean sync(java.io.FileOutputStream)>(r1);

        virtualinvoke r1.<java.io.FileOutputStream: void close()>();

        $r5 = virtualinvoke r9.<java.io.File: java.lang.String getName()>();

        staticinvoke <android.os.FileUtils: int setPermissions(java.lang.String,int,int,int)>($r5, 384, -1, -1);

     label2:
        return r11;

     label3:
        r12 = new java.lang.IllegalArgumentException;

        specialinvoke r12.<java.lang.IllegalArgumentException: void <init>()>();

        throw r12;

     label4:
        $r6 := @caughtexception;

        return null;

     label5:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

        catch java.io.IOException from label1 to label2 with label4;
        catch java.io.IOException from label3 to label4 with label4;
    }

    public java.lang.String generateNewKeyHexString(int, java.lang.String, java.lang.String) throws java.security.NoSuchAlgorithmException
    {
        android.security.SystemKeyStore r0;
        int i0;
        java.lang.String r1, r2, $r4;
        byte[] $r3;

        r0 := @this: android.security.SystemKeyStore;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r3 = virtualinvoke r0.<android.security.SystemKeyStore: byte[] generateNewKey(int,java.lang.String,java.lang.String)>(i0, r1, r2);

        $r4 = staticinvoke <android.security.SystemKeyStore: java.lang.String toHexString(byte[])>($r3);

        return $r4;
    }

    public byte[] retrieveKey(java.lang.String) throws java.io.IOException
    {
        android.security.SystemKeyStore r0;
        boolean $z0;
        java.lang.String $r1, r3;
        byte[] $r2;
        java.io.File r4;

        r0 := @this: android.security.SystemKeyStore;

        r3 := @parameter0: java.lang.String;

        r4 = specialinvoke r0.<android.security.SystemKeyStore: java.io.File getKeyFile(java.lang.String)>(r3);

        $z0 = virtualinvoke r4.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r4.<java.io.File: java.lang.String toString()>();

        $r2 = staticinvoke <libcore.io.IoUtils: byte[] readFileAsByteArray(java.lang.String)>($r1);

        return $r2;
    }

    public java.lang.String retrieveKeyHexString(java.lang.String) throws java.io.IOException
    {
        android.security.SystemKeyStore r0;
        java.lang.String r1, $r3;
        byte[] $r2;

        r0 := @this: android.security.SystemKeyStore;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<android.security.SystemKeyStore: byte[] retrieveKey(java.lang.String)>(r1);

        $r3 = staticinvoke <android.security.SystemKeyStore: java.lang.String toHexString(byte[])>($r2);

        return $r3;
    }
}
