class android.security.identity.Util extends java.lang.Object
{
    private static final java.lang.String TAG;

    void <init>()
    {
        android.security.identity.Util r0;

        r0 := @this: android.security.identity.Util;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static byte[] computeHkdf(java.lang.String, byte[], byte[], byte[], int)
    {
        byte[] r0, $r3, r13, r14, r17, r18, r20;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, $i11, $i12;
        javax.crypto.Mac r1;
        java.lang.RuntimeException $r2, $r8, $r11;
        java.lang.Throwable $r4, $r10;
        java.lang.StringBuilder $r5;
        java.lang.String $r9, r12;
        javax.crypto.spec.SecretKeySpec r15, r16, r19;
        byte $b10;

        r12 := @parameter0: java.lang.String;

        r13 := @parameter1: byte[];

        r14 := @parameter2: byte[];

        r0 := @parameter3: byte[];

        i0 := @parameter4: int;

     label01:
        r1 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>(r12);

     label02:
        $i1 = virtualinvoke r1.<javax.crypto.Mac: int getMacLength()>();

        $i2 = $i1 * 255;

        if i0 > $i2 goto label16;

        if r14 == null goto label07;

     label03:
        $i7 = lengthof r14;

        if $i7 != 0 goto label05;

     label04:
        goto label07;

     label05:
        r15 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke r15.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r14, r12);

        virtualinvoke r1.<javax.crypto.Mac: void init(java.security.Key)>(r15);

     label06:
        goto label08;

     label07:
        r16 = new javax.crypto.spec.SecretKeySpec;

        $i3 = virtualinvoke r1.<javax.crypto.Mac: int getMacLength()>();

        $r3 = newarray (byte)[$i3];

        specialinvoke r16.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, r12);

        virtualinvoke r1.<javax.crypto.Mac: void init(java.security.Key)>(r16);

     label08:
        r17 = virtualinvoke r1.<javax.crypto.Mac: byte[] doFinal(byte[])>(r13);

        r18 = newarray (byte)[i0];

     label09:
        i8 = 1;

        i9 = 0;

     label10:
        r19 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke r19.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r17, r12);

        virtualinvoke r1.<javax.crypto.Mac: void init(java.security.Key)>(r19);

        r20 = newarray (byte)[0];

     label11:
        virtualinvoke r1.<javax.crypto.Mac: void update(byte[])>(r20);

        virtualinvoke r1.<javax.crypto.Mac: void update(byte[])>(r0);

        $b10 = (byte) i8;

        virtualinvoke r1.<javax.crypto.Mac: void update(byte)>($b10);

        r20 = virtualinvoke r1.<javax.crypto.Mac: byte[] doFinal()>();

        $i11 = lengthof r20;

        $i12 = $i11 + i9;

        if $i12 >= i0 goto label13;

        $i5 = lengthof r20;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r20, 0, r18, i9, $i5);

        $i6 = lengthof r20;

        i9 = i9 + $i6;

     label12:
        i8 = i8 + 1;

        goto label11;

     label13:
        $i4 = i0 - i9;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r20, 0, r18, i9, $i4);

     label14:
        return r18;

     label15:
        $r10 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error MACing", $r10);

        throw $r11;

     label16:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("size too large");

        throw $r2;

     label17:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No such algorithm: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r8 = new java.lang.RuntimeException;

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r9, $r4);

        throw $r8;

        catch java.security.NoSuchAlgorithmException from label01 to label02 with label17;
        catch java.security.InvalidKeyException from label03 to label04 with label15;
        catch java.security.InvalidKeyException from label05 to label06 with label15;
        catch java.security.InvalidKeyException from label07 to label08 with label15;
        catch java.security.InvalidKeyException from label08 to label09 with label15;
        catch java.security.InvalidKeyException from label10 to label11 with label15;
        catch java.security.InvalidKeyException from label11 to label12 with label15;
        catch java.security.InvalidKeyException from label13 to label14 with label15;
    }

    static int[] integerCollectionToArray(java.util.Collection)
    {
        int[] r0;
        int $i0, $i1, i2;
        boolean $z0;
        java.lang.Object $r1;
        java.lang.Integer $r2;
        java.util.Collection r3;
        java.util.Iterator r4;

        r3 := @parameter0: java.util.Collection;

        $i0 = interfaceinvoke r3.<java.util.Collection: int size()>();

        r0 = newarray (int)[$i0];

        i2 = 0;

        r4 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r1 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r2 = (java.lang.Integer) $r1;

        $i1 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        r0[i2] = $i1;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r0;
    }

    static byte[] publicKeyEncodeUncompressedForm(java.security.PublicKey)
    {
        byte[] r0, $r3, $r5, r10, r12;
        java.security.interfaces.ECPublicKey $r1;
        java.math.BigInteger $r2, $r4;
        java.lang.Throwable $r6;
        java.lang.RuntimeException $r7;
        java.security.PublicKey r8;
        java.security.spec.ECPoint r9;
        java.io.ByteArrayOutputStream r11;

        r8 := @parameter0: java.security.PublicKey;

        $r1 = (java.security.interfaces.ECPublicKey) r8;

        r9 = interfaceinvoke $r1.<java.security.interfaces.ECPublicKey: java.security.spec.ECPoint getW()>();

        $r2 = virtualinvoke r9.<java.security.spec.ECPoint: java.math.BigInteger getAffineX()>();

        $r3 = virtualinvoke $r2.<java.math.BigInteger: byte[] toByteArray()>();

        r10 = staticinvoke <android.security.identity.Util: byte[] stripLeadingZeroes(byte[])>($r3);

        $r4 = virtualinvoke r9.<java.security.spec.ECPoint: java.math.BigInteger getAffineY()>();

        $r5 = virtualinvoke $r4.<java.math.BigInteger: byte[] toByteArray()>();

        r0 = staticinvoke <android.security.identity.Util: byte[] stripLeadingZeroes(byte[])>($r5);

     label1:
        r11 = new java.io.ByteArrayOutputStream;

        specialinvoke r11.<java.io.ByteArrayOutputStream: void <init>()>();

        virtualinvoke r11.<java.io.ByteArrayOutputStream: void write(int)>(4);

        virtualinvoke r11.<java.io.ByteArrayOutputStream: void write(byte[])>(r10);

        virtualinvoke r11.<java.io.ByteArrayOutputStream: void write(byte[])>(r0);

        r12 = virtualinvoke r11.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label2:
        return r12;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected IOException", $r6);

        throw $r7;

        catch java.io.IOException from label1 to label2 with label3;
    }

    static byte[] stripLeadingZeroes(byte[])
    {
        byte[] r0, r1;
        int $i0, $i1, $i2, i6, i7, $i8;
        byte $b3, $b4, $b5;

        r0 := @parameter0: byte[];

        i6 = 0;

     label1:
        $i0 = lengthof r0;

        if i6 >= $i0 goto label2;

        $b5 = r0[i6];

        if $b5 != 0 goto label2;

        i6 = i6 + 1;

        goto label1;

     label2:
        $i1 = lengthof r0;

        $i2 = $i1 - i6;

        r1 = newarray (byte)[$i2];

        i7 = 0;

     label3:
        $i8 = lengthof r0;

        if i6 >= $i8 goto label4;

        $b3 = r0[i6];

        $b4 = (byte) $b3;

        r1[i7] = $b4;

        i7 = i7 + 1;

        i6 = i6 + 1;

        goto label3;

     label4:
        return r1;
    }

    public static void <clinit>()
    {
        <android.security.identity.Util: java.lang.String TAG> = "Util";

        return;
    }
}
