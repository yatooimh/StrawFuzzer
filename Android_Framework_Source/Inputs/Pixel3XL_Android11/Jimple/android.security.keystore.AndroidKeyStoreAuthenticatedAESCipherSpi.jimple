abstract class android.security.keystore.AndroidKeyStoreAuthenticatedAESCipherSpi extends android.security.keystore.AndroidKeyStoreCipherSpiBase
{
    private static final int BLOCK_SIZE_BYTES;
    private byte[] mIv;
    private boolean mIvHasBeenUsed;
    private final int mKeymasterBlockMode;
    private final int mKeymasterPadding;

    void <init>(int, int)
    {
        android.security.keystore.AndroidKeyStoreAuthenticatedAESCipherSpi r0;
        int i0, i1;

        r0 := @this: android.security.keystore.AndroidKeyStoreAuthenticatedAESCipherSpi;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: void <init>()>();

        r0.<android.security.keystore.AndroidKeyStoreAuthenticatedAESCipherSpi: int mKeymasterBlockMode> = i0;

        r0.<android.security.keystore.AndroidKeyStoreAuthenticatedAESCipherSpi: int mKeymasterPadding> = i1;

        return;
    }

    protected void addAlgorithmSpecificParametersToBegin(android.security.keymaster.KeymasterArguments)
    {
        android.security.keystore.AndroidKeyStoreAuthenticatedAESCipherSpi r0;
        android.security.keymaster.KeymasterArguments r1;
        byte[] r2;
        boolean $z0, $z1;
        int $i0, $i1;
        java.lang.IllegalStateException $r3;

        r0 := @this: android.security.keystore.AndroidKeyStoreAuthenticatedAESCipherSpi;

        r1 := @parameter0: android.security.keymaster.KeymasterArguments;

        $z0 = virtualinvoke r0.<android.security.keystore.AndroidKeyStoreAuthenticatedAESCipherSpi: boolean isEncrypting()>();

        if $z0 == 0 goto label2;

        $z1 = r0.<android.security.keystore.AndroidKeyStoreAuthenticatedAESCipherSpi: boolean mIvHasBeenUsed>;

        if $z1 != 0 goto label1;

        goto label2;

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("IV has already been used. Reusing IV in encryption mode violates security best practices.");

        throw $r3;

     label2:
        virtualinvoke r1.<android.security.keymaster.KeymasterArguments: void addEnum(int,int)>(268435458, 32);

        $i0 = r0.<android.security.keystore.AndroidKeyStoreAuthenticatedAESCipherSpi: int mKeymasterBlockMode>;

        virtualinvoke r1.<android.security.keymaster.KeymasterArguments: void addEnum(int,int)>(536870916, $i0);

        $i1 = r0.<android.security.keystore.AndroidKeyStoreAuthenticatedAESCipherSpi: int mKeymasterPadding>;

        virtualinvoke r1.<android.security.keymaster.KeymasterArguments: void addEnum(int,int)>(536870918, $i1);

        r2 = r0.<android.security.keystore.AndroidKeyStoreAuthenticatedAESCipherSpi: byte[] mIv>;

        if r2 == null goto label3;

        virtualinvoke r1.<android.security.keymaster.KeymasterArguments: void addBytes(int,byte[])>(-1879047191, r2);

     label3:
        return;
    }

    protected final int engineGetBlockSize()
    {
        android.security.keystore.AndroidKeyStoreAuthenticatedAESCipherSpi r0;

        r0 := @this: android.security.keystore.AndroidKeyStoreAuthenticatedAESCipherSpi;

        return 16;
    }

    protected final byte[] engineGetIV()
    {
        android.security.keystore.AndroidKeyStoreAuthenticatedAESCipherSpi r0;
        byte[] $r1, $r2;

        r0 := @this: android.security.keystore.AndroidKeyStoreAuthenticatedAESCipherSpi;

        $r1 = r0.<android.security.keystore.AndroidKeyStoreAuthenticatedAESCipherSpi: byte[] mIv>;

        $r2 = staticinvoke <android.security.keystore.ArrayUtils: byte[] cloneIfNotEmpty(byte[])>($r1);

        return $r2;
    }

    protected byte[] getIv()
    {
        android.security.keystore.AndroidKeyStoreAuthenticatedAESCipherSpi r0;
        byte[] $r1;

        r0 := @this: android.security.keystore.AndroidKeyStoreAuthenticatedAESCipherSpi;

        $r1 = r0.<android.security.keystore.AndroidKeyStoreAuthenticatedAESCipherSpi: byte[] mIv>;

        return $r1;
    }

    protected final void initKey(int, java.security.Key) throws java.security.InvalidKeyException
    {
        android.security.keystore.AndroidKeyStoreAuthenticatedAESCipherSpi r0;
        int i0;
        boolean $z0, $z1;
        java.lang.String $r1, $r2, $r5, $r11, $r17, r21;
        java.lang.StringBuilder $r3, $r13;
        java.security.InvalidKeyException $r10, $r16;
        android.security.keystore.AndroidKeyStoreSecretKey $r12;
        java.lang.Class $r18;
        java.security.Key r19;

        r0 := @this: android.security.keystore.AndroidKeyStoreAuthenticatedAESCipherSpi;

        i0 := @parameter0: int;

        r19 := @parameter1: java.security.Key;

        $z0 = r19 instanceof android.security.keystore.AndroidKeyStoreSecretKey;

        if $z0 != 0 goto label3;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported key: ");

        if r19 == null goto label1;

        $r18 = virtualinvoke r19.<java.lang.Object: java.lang.Class getClass()>();

        r21 = virtualinvoke $r18.<java.lang.Class: java.lang.String getName()>();

        goto label2;

     label1:
        r21 = "null";

     label2:
        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        $r16 = new java.security.InvalidKeyException;

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r17);

        throw $r16;

     label3:
        $r1 = "AES";

        $r2 = interfaceinvoke r19.<java.security.Key: java.lang.String getAlgorithm()>();

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2);

        if $z1 == 0 goto label4;

        $r12 = (android.security.keystore.AndroidKeyStoreSecretKey) r19;

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreAuthenticatedAESCipherSpi: void setKey(android.security.keystore.AndroidKeyStoreKey)>($r12);

        return;

     label4:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported key algorithm: ");

        $r5 = interfaceinvoke r19.<java.security.Key: java.lang.String getAlgorithm()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Only ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AES");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" supported");

        $r10 = new java.security.InvalidKeyException;

        $r11 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r11);

        throw $r10;
    }

    protected final void loadAlgorithmSpecificParametersFromBeginResult(android.security.keymaster.KeymasterArguments)
    {
        android.security.keystore.AndroidKeyStoreAuthenticatedAESCipherSpi r0;
        boolean $z0;
        java.security.ProviderException $r1;
        int $i0;
        android.security.keymaster.KeymasterArguments r2;
        byte[] r3, r4, r5;

        r0 := @this: android.security.keystore.AndroidKeyStoreAuthenticatedAESCipherSpi;

        r2 := @parameter0: android.security.keymaster.KeymasterArguments;

        r0.<android.security.keystore.AndroidKeyStoreAuthenticatedAESCipherSpi: boolean mIvHasBeenUsed> = 1;

        r3 = virtualinvoke r2.<android.security.keymaster.KeymasterArguments: byte[] getBytes(int,byte[])>(-1879047191, null);

        r4 = r3;

        if r3 == null goto label1;

        r4 = r3;

        $i0 = lengthof r3;

        if $i0 != 0 goto label1;

        r4 = null;

     label1:
        r5 = r0.<android.security.keystore.AndroidKeyStoreAuthenticatedAESCipherSpi: byte[] mIv>;

        if r5 != null goto label2;

        r0.<android.security.keystore.AndroidKeyStoreAuthenticatedAESCipherSpi: byte[] mIv> = r4;

        goto label4;

     label2:
        if r4 == null goto label4;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r4, r5);

        if $z0 == 0 goto label3;

        goto label4;

     label3:
        $r1 = new java.security.ProviderException;

        specialinvoke $r1.<java.security.ProviderException: void <init>(java.lang.String)>("IV in use differs from provided IV");

        throw $r1;

     label4:
        return;
    }

    protected void resetAll()
    {
        android.security.keystore.AndroidKeyStoreAuthenticatedAESCipherSpi r0;

        r0 := @this: android.security.keystore.AndroidKeyStoreAuthenticatedAESCipherSpi;

        r0.<android.security.keystore.AndroidKeyStoreAuthenticatedAESCipherSpi: byte[] mIv> = null;

        r0.<android.security.keystore.AndroidKeyStoreAuthenticatedAESCipherSpi: boolean mIvHasBeenUsed> = 0;

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: void resetAll()>();

        return;
    }

    protected void setIv(byte[])
    {
        android.security.keystore.AndroidKeyStoreAuthenticatedAESCipherSpi r0;
        byte[] r1;

        r0 := @this: android.security.keystore.AndroidKeyStoreAuthenticatedAESCipherSpi;

        r1 := @parameter0: byte[];

        r0.<android.security.keystore.AndroidKeyStoreAuthenticatedAESCipherSpi: byte[] mIv> = r1;

        return;
    }

    public static void <clinit>()
    {
        <android.security.keystore.AndroidKeyStoreAuthenticatedAESCipherSpi: int BLOCK_SIZE_BYTES> = 16;

        return;
    }
}
