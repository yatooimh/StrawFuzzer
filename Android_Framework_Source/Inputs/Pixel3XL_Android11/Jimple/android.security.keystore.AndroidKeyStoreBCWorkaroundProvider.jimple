class android.security.keystore.AndroidKeyStoreBCWorkaroundProvider extends java.security.Provider
{
    private static final java.lang.String DESEDE_SYSTEM_PROPERTY;
    private static final java.lang.String KEYSTORE_PRIVATE_KEY_CLASS_NAME;
    private static final java.lang.String KEYSTORE_PUBLIC_KEY_CLASS_NAME;
    private static final java.lang.String KEYSTORE_SECRET_KEY_CLASS_NAME;
    private static final java.lang.String PACKAGE_NAME;

    void <init>()
    {
        android.security.keystore.AndroidKeyStoreBCWorkaroundProvider r0;
        java.lang.String $r16, $r17;
        boolean $z0;

        r0 := @this: android.security.keystore.AndroidKeyStoreBCWorkaroundProvider;

        specialinvoke r0.<java.security.Provider: void <init>(java.lang.String,double,java.lang.String)>("AndroidKeyStoreBCWorkaround", 1.0, "Android KeyStore security provider to work around Bouncy Castle");

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: void putMacImpl(java.lang.String,java.lang.String)>("HmacSHA1", "android.security.keystore.AndroidKeyStoreHmacSpi$HmacSHA1");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Mac.1.2.840.113549.2.7", "HmacSHA1");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Mac.HMAC-SHA1", "HmacSHA1");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Mac.HMAC/SHA1", "HmacSHA1");

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: void putMacImpl(java.lang.String,java.lang.String)>("HmacSHA224", "android.security.keystore.AndroidKeyStoreHmacSpi$HmacSHA224");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Mac.1.2.840.113549.2.9", "HmacSHA224");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Mac.HMAC-SHA224", "HmacSHA224");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Mac.HMAC/SHA224", "HmacSHA224");

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: void putMacImpl(java.lang.String,java.lang.String)>("HmacSHA256", "android.security.keystore.AndroidKeyStoreHmacSpi$HmacSHA256");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Mac.1.2.840.113549.2.9", "HmacSHA256");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Mac.HMAC-SHA256", "HmacSHA256");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Mac.HMAC/SHA256", "HmacSHA256");

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: void putMacImpl(java.lang.String,java.lang.String)>("HmacSHA384", "android.security.keystore.AndroidKeyStoreHmacSpi$HmacSHA384");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Mac.1.2.840.113549.2.10", "HmacSHA384");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Mac.HMAC-SHA384", "HmacSHA384");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Mac.HMAC/SHA384", "HmacSHA384");

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: void putMacImpl(java.lang.String,java.lang.String)>("HmacSHA512", "android.security.keystore.AndroidKeyStoreHmacSpi$HmacSHA512");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Mac.1.2.840.113549.2.11", "HmacSHA512");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Mac.HMAC-SHA512", "HmacSHA512");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Mac.HMAC/SHA512", "HmacSHA512");

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: void putSymmetricCipherImpl(java.lang.String,java.lang.String)>("AES/ECB/NoPadding", "android.security.keystore.AndroidKeyStoreUnauthenticatedAESCipherSpi$ECB$NoPadding");

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: void putSymmetricCipherImpl(java.lang.String,java.lang.String)>("AES/ECB/PKCS7Padding", "android.security.keystore.AndroidKeyStoreUnauthenticatedAESCipherSpi$ECB$PKCS7Padding");

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: void putSymmetricCipherImpl(java.lang.String,java.lang.String)>("AES/CBC/NoPadding", "android.security.keystore.AndroidKeyStoreUnauthenticatedAESCipherSpi$CBC$NoPadding");

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: void putSymmetricCipherImpl(java.lang.String,java.lang.String)>("AES/CBC/PKCS7Padding", "android.security.keystore.AndroidKeyStoreUnauthenticatedAESCipherSpi$CBC$PKCS7Padding");

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: void putSymmetricCipherImpl(java.lang.String,java.lang.String)>("AES/CTR/NoPadding", "android.security.keystore.AndroidKeyStoreUnauthenticatedAESCipherSpi$CTR$NoPadding");

        $r16 = "true";

        $r17 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.hardware.keystore_desede");

        $z0 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r17);

        if $z0 == 0 goto label1;

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: void putSymmetricCipherImpl(java.lang.String,java.lang.String)>("DESede/CBC/NoPadding", "android.security.keystore.AndroidKeyStore3DESCipherSpi$CBC$NoPadding");

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: void putSymmetricCipherImpl(java.lang.String,java.lang.String)>("DESede/CBC/PKCS7Padding", "android.security.keystore.AndroidKeyStore3DESCipherSpi$CBC$PKCS7Padding");

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: void putSymmetricCipherImpl(java.lang.String,java.lang.String)>("DESede/ECB/NoPadding", "android.security.keystore.AndroidKeyStore3DESCipherSpi$ECB$NoPadding");

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: void putSymmetricCipherImpl(java.lang.String,java.lang.String)>("DESede/ECB/PKCS7Padding", "android.security.keystore.AndroidKeyStore3DESCipherSpi$ECB$PKCS7Padding");

     label1:
        specialinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: void putSymmetricCipherImpl(java.lang.String,java.lang.String)>("AES/GCM/NoPadding", "android.security.keystore.AndroidKeyStoreAuthenticatedAESCipherSpi$GCM$NoPadding");

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: void putAsymmetricCipherImpl(java.lang.String,java.lang.String)>("RSA/ECB/NoPadding", "android.security.keystore.AndroidKeyStoreRSACipherSpi$NoPadding");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Cipher.RSA/None/NoPadding", "RSA/ECB/NoPadding");

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: void putAsymmetricCipherImpl(java.lang.String,java.lang.String)>("RSA/ECB/PKCS1Padding", "android.security.keystore.AndroidKeyStoreRSACipherSpi$PKCS1Padding");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Cipher.RSA/None/PKCS1Padding", "RSA/ECB/PKCS1Padding");

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: void putAsymmetricCipherImpl(java.lang.String,java.lang.String)>("RSA/ECB/OAEPPadding", "android.security.keystore.AndroidKeyStoreRSACipherSpi$OAEPWithSHA1AndMGF1Padding");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Cipher.RSA/None/OAEPPadding", "RSA/ECB/OAEPPadding");

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: void putAsymmetricCipherImpl(java.lang.String,java.lang.String)>("RSA/ECB/OAEPWithSHA-1AndMGF1Padding", "android.security.keystore.AndroidKeyStoreRSACipherSpi$OAEPWithSHA1AndMGF1Padding");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Cipher.RSA/None/OAEPWithSHA-1AndMGF1Padding", "RSA/ECB/OAEPWithSHA-1AndMGF1Padding");

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: void putAsymmetricCipherImpl(java.lang.String,java.lang.String)>("RSA/ECB/OAEPWithSHA-224AndMGF1Padding", "android.security.keystore.AndroidKeyStoreRSACipherSpi$OAEPWithSHA224AndMGF1Padding");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Cipher.RSA/None/OAEPWithSHA-224AndMGF1Padding", "RSA/ECB/OAEPWithSHA-256AndMGF1Padding");

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: void putAsymmetricCipherImpl(java.lang.String,java.lang.String)>("RSA/ECB/OAEPWithSHA-256AndMGF1Padding", "android.security.keystore.AndroidKeyStoreRSACipherSpi$OAEPWithSHA256AndMGF1Padding");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Cipher.RSA/None/OAEPWithSHA-256AndMGF1Padding", "RSA/ECB/OAEPWithSHA-256AndMGF1Padding");

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: void putAsymmetricCipherImpl(java.lang.String,java.lang.String)>("RSA/ECB/OAEPWithSHA-384AndMGF1Padding", "android.security.keystore.AndroidKeyStoreRSACipherSpi$OAEPWithSHA384AndMGF1Padding");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Cipher.RSA/None/OAEPWithSHA-384AndMGF1Padding", "RSA/ECB/OAEPWithSHA-384AndMGF1Padding");

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: void putAsymmetricCipherImpl(java.lang.String,java.lang.String)>("RSA/ECB/OAEPWithSHA-512AndMGF1Padding", "android.security.keystore.AndroidKeyStoreRSACipherSpi$OAEPWithSHA512AndMGF1Padding");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Cipher.RSA/None/OAEPWithSHA-512AndMGF1Padding", "RSA/ECB/OAEPWithSHA-512AndMGF1Padding");

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: void putSignatureImpl(java.lang.String,java.lang.String)>("NONEwithRSA", "android.security.keystore.AndroidKeyStoreRSASignatureSpi$NONEWithPKCS1Padding");

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: void putSignatureImpl(java.lang.String,java.lang.String)>("MD5withRSA", "android.security.keystore.AndroidKeyStoreRSASignatureSpi$MD5WithPKCS1Padding");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Signature.MD5WithRSAEncryption", "MD5withRSA");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Signature.MD5/RSA", "MD5withRSA");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Signature.1.2.840.113549.1.1.4", "MD5withRSA");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Signature.1.2.840.113549.2.5with1.2.840.113549.1.1.1", "MD5withRSA");

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: void putSignatureImpl(java.lang.String,java.lang.String)>("SHA1withRSA", "android.security.keystore.AndroidKeyStoreRSASignatureSpi$SHA1WithPKCS1Padding");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Signature.SHA1WithRSAEncryption", "SHA1withRSA");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Signature.SHA1/RSA", "SHA1withRSA");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Signature.SHA-1/RSA", "SHA1withRSA");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Signature.1.2.840.113549.1.1.5", "SHA1withRSA");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Signature.1.3.14.3.2.26with1.2.840.113549.1.1.1", "SHA1withRSA");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Signature.1.3.14.3.2.26with1.2.840.113549.1.1.5", "SHA1withRSA");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Signature.1.3.14.3.2.29", "SHA1withRSA");

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: void putSignatureImpl(java.lang.String,java.lang.String)>("SHA224withRSA", "android.security.keystore.AndroidKeyStoreRSASignatureSpi$SHA224WithPKCS1Padding");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Signature.SHA224WithRSAEncryption", "SHA224withRSA");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Signature.1.2.840.113549.1.1.11", "SHA224withRSA");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Signature.2.16.840.1.101.3.4.2.4with1.2.840.113549.1.1.1", "SHA224withRSA");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Signature.2.16.840.1.101.3.4.2.4with1.2.840.113549.1.1.11", "SHA224withRSA");

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: void putSignatureImpl(java.lang.String,java.lang.String)>("SHA256withRSA", "android.security.keystore.AndroidKeyStoreRSASignatureSpi$SHA256WithPKCS1Padding");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Signature.SHA256WithRSAEncryption", "SHA256withRSA");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Signature.1.2.840.113549.1.1.11", "SHA256withRSA");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Signature.2.16.840.1.101.3.4.2.1with1.2.840.113549.1.1.1", "SHA256withRSA");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Signature.2.16.840.1.101.3.4.2.1with1.2.840.113549.1.1.11", "SHA256withRSA");

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: void putSignatureImpl(java.lang.String,java.lang.String)>("SHA384withRSA", "android.security.keystore.AndroidKeyStoreRSASignatureSpi$SHA384WithPKCS1Padding");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Signature.SHA384WithRSAEncryption", "SHA384withRSA");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Signature.1.2.840.113549.1.1.12", "SHA384withRSA");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Signature.2.16.840.1.101.3.4.2.2with1.2.840.113549.1.1.1", "SHA384withRSA");

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: void putSignatureImpl(java.lang.String,java.lang.String)>("SHA512withRSA", "android.security.keystore.AndroidKeyStoreRSASignatureSpi$SHA512WithPKCS1Padding");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Signature.SHA512WithRSAEncryption", "SHA512withRSA");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Signature.1.2.840.113549.1.1.13", "SHA512withRSA");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Signature.2.16.840.1.101.3.4.2.3with1.2.840.113549.1.1.1", "SHA512withRSA");

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: void putSignatureImpl(java.lang.String,java.lang.String)>("SHA1withRSA/PSS", "android.security.keystore.AndroidKeyStoreRSASignatureSpi$SHA1WithPSSPadding");

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: void putSignatureImpl(java.lang.String,java.lang.String)>("SHA224withRSA/PSS", "android.security.keystore.AndroidKeyStoreRSASignatureSpi$SHA224WithPSSPadding");

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: void putSignatureImpl(java.lang.String,java.lang.String)>("SHA256withRSA/PSS", "android.security.keystore.AndroidKeyStoreRSASignatureSpi$SHA256WithPSSPadding");

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: void putSignatureImpl(java.lang.String,java.lang.String)>("SHA384withRSA/PSS", "android.security.keystore.AndroidKeyStoreRSASignatureSpi$SHA384WithPSSPadding");

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: void putSignatureImpl(java.lang.String,java.lang.String)>("SHA512withRSA/PSS", "android.security.keystore.AndroidKeyStoreRSASignatureSpi$SHA512WithPSSPadding");

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: void putSignatureImpl(java.lang.String,java.lang.String)>("NONEwithECDSA", "android.security.keystore.AndroidKeyStoreECDSASignatureSpi$NONE");

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: void putSignatureImpl(java.lang.String,java.lang.String)>("SHA1withECDSA", "android.security.keystore.AndroidKeyStoreECDSASignatureSpi$SHA1");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Signature.ECDSA", "SHA1withECDSA");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Signature.ECDSAwithSHA1", "SHA1withECDSA");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Signature.1.2.840.10045.4.1", "SHA1withECDSA");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Signature.1.3.14.3.2.26with1.2.840.10045.2.1", "SHA1withECDSA");

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: void putSignatureImpl(java.lang.String,java.lang.String)>("SHA224withECDSA", "android.security.keystore.AndroidKeyStoreECDSASignatureSpi$SHA224");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Signature.1.2.840.10045.4.3.1", "SHA224withECDSA");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Signature.2.16.840.1.101.3.4.2.4with1.2.840.10045.2.1", "SHA224withECDSA");

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: void putSignatureImpl(java.lang.String,java.lang.String)>("SHA256withECDSA", "android.security.keystore.AndroidKeyStoreECDSASignatureSpi$SHA256");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Signature.1.2.840.10045.4.3.2", "SHA256withECDSA");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Signature.2.16.840.1.101.3.4.2.1with1.2.840.10045.2.1", "SHA256withECDSA");

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: void putSignatureImpl(java.lang.String,java.lang.String)>("SHA384withECDSA", "android.security.keystore.AndroidKeyStoreECDSASignatureSpi$SHA384");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Signature.1.2.840.10045.4.3.3", "SHA384withECDSA");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Signature.2.16.840.1.101.3.4.2.2with1.2.840.10045.2.1", "SHA384withECDSA");

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: void putSignatureImpl(java.lang.String,java.lang.String)>("SHA512withECDSA", "android.security.keystore.AndroidKeyStoreECDSASignatureSpi$SHA512");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Signature.1.2.840.10045.4.3.4", "SHA512withECDSA");

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.Signature.2.16.840.1.101.3.4.2.3with1.2.840.10045.2.1", "SHA512withECDSA");

        return;
    }

    public static java.lang.String[] getSupportedEcdsaSignatureDigests()
    {
        java.lang.String[] $r0;

        $r0 = newarray (java.lang.String)[6];

        $r0[0] = "NONE";

        $r0[1] = "SHA-1";

        $r0[2] = "SHA-224";

        $r0[3] = "SHA-256";

        $r0[4] = "SHA-384";

        $r0[5] = "SHA-512";

        return $r0;
    }

    public static java.lang.String[] getSupportedRsaSignatureWithPkcs1PaddingDigests()
    {
        java.lang.String[] $r0;

        $r0 = newarray (java.lang.String)[7];

        $r0[0] = "NONE";

        $r0[1] = "MD5";

        $r0[2] = "SHA-1";

        $r0[3] = "SHA-224";

        $r0[4] = "SHA-256";

        $r0[5] = "SHA-384";

        $r0[6] = "SHA-512";

        return $r0;
    }

    private void putAsymmetricCipherImpl(java.lang.String, java.lang.String)
    {
        android.security.keystore.AndroidKeyStoreBCWorkaroundProvider r0;
        java.lang.String r1, $r6, $r12, r14;
        java.lang.StringBuilder $r3, $r8;

        r0 := @this: android.security.keystore.AndroidKeyStoreBCWorkaroundProvider;

        r1 := @parameter0: java.lang.String;

        r14 := @parameter1: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cipher.");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r14);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cipher.");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SupportedKeyClasses");

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, "android.security.keystore.AndroidKeyStorePrivateKey|android.security.keystore.AndroidKeyStorePublicKey");

        return;
    }

    private void putMacImpl(java.lang.String, java.lang.String)
    {
        android.security.keystore.AndroidKeyStoreBCWorkaroundProvider r0;
        java.lang.String r1, $r6, $r12, r14;
        java.lang.StringBuilder $r3, $r8;

        r0 := @this: android.security.keystore.AndroidKeyStoreBCWorkaroundProvider;

        r1 := @parameter0: java.lang.String;

        r14 := @parameter1: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mac.");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r14);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mac.");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SupportedKeyClasses");

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, "android.security.keystore.AndroidKeyStoreSecretKey");

        return;
    }

    private void putSignatureImpl(java.lang.String, java.lang.String)
    {
        android.security.keystore.AndroidKeyStoreBCWorkaroundProvider r0;
        java.lang.String r1, $r6, $r12, r14;
        java.lang.StringBuilder $r3, $r8;

        r0 := @this: android.security.keystore.AndroidKeyStoreBCWorkaroundProvider;

        r1 := @parameter0: java.lang.String;

        r14 := @parameter1: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Signature.");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r14);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Signature.");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SupportedKeyClasses");

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, "android.security.keystore.AndroidKeyStorePrivateKey|android.security.keystore.AndroidKeyStorePublicKey");

        return;
    }

    private void putSymmetricCipherImpl(java.lang.String, java.lang.String)
    {
        android.security.keystore.AndroidKeyStoreBCWorkaroundProvider r0;
        java.lang.String r1, $r6, $r12, r14;
        java.lang.StringBuilder $r3, $r8;

        r0 := @this: android.security.keystore.AndroidKeyStoreBCWorkaroundProvider;

        r1 := @parameter0: java.lang.String;

        r14 := @parameter1: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cipher.");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r14);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cipher.");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SupportedKeyClasses");

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, "android.security.keystore.AndroidKeyStoreSecretKey");

        return;
    }

    public static void <clinit>()
    {
        <android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.String PACKAGE_NAME> = "android.security.keystore";

        <android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.String KEYSTORE_SECRET_KEY_CLASS_NAME> = "android.security.keystore.AndroidKeyStoreSecretKey";

        <android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.String KEYSTORE_PUBLIC_KEY_CLASS_NAME> = "android.security.keystore.AndroidKeyStorePublicKey";

        <android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.String KEYSTORE_PRIVATE_KEY_CLASS_NAME> = "android.security.keystore.AndroidKeyStorePrivateKey";

        <android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.String DESEDE_SYSTEM_PROPERTY> = "ro.hardware.keystore_desede";

        return;
    }
}
