abstract class android.security.keystore.AndroidKeyStoreCipherSpiBase extends javax.crypto.CipherSpi implements android.security.keystore.KeyStoreCryptoOperation
{
    private android.security.keystore.KeyStoreCryptoOperationStreamer mAdditionalAuthenticationDataStreamer;
    private boolean mAdditionalAuthenticationDataStreamerClosed;
    private java.lang.Exception mCachedException;
    private boolean mEncrypting;
    private android.security.keystore.AndroidKeyStoreKey mKey;
    private final android.security.KeyStore mKeyStore;
    private int mKeymasterPurposeOverride;
    private android.security.keystore.KeyStoreCryptoOperationStreamer mMainDataStreamer;
    private long mOperationHandle;
    private android.os.IBinder mOperationToken;
    private java.security.SecureRandom mRng;

    void <init>()
    {
        android.security.keystore.AndroidKeyStoreCipherSpiBase r0;
        android.security.KeyStore $r1;

        r0 := @this: android.security.keystore.AndroidKeyStoreCipherSpiBase;

        specialinvoke r0.<javax.crypto.CipherSpi: void <init>()>();

        r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: int mKeymasterPurposeOverride> = -1;

        $r1 = staticinvoke <android.security.KeyStore: android.security.KeyStore getInstance()>();

        r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: android.security.KeyStore mKeyStore> = $r1;

        return;
    }

    private void ensureKeystoreOperationInitialized() throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        android.security.keystore.AndroidKeyStoreCipherSpiBase r0;
        android.security.keystore.KeyStoreCryptoOperationStreamer $r1, $r17, $r20;
        java.lang.Exception $r2;
        android.security.keystore.AndroidKeyStoreKey $r3, $r9, $r27, $r29;
        java.lang.IllegalStateException $r4;
        android.security.keymaster.KeymasterArguments $r5, $r14;
        java.security.SecureRandom $r6;
        int $i0, $i1, $i3, i6, $i7;
        boolean $z0, $z1, $z2;
        android.security.keystore.KeyStoreConnectException $r7;
        android.os.IBinder $r8, $r11, $r15, $r18;
        long $l2, $l4;
        android.security.KeyStore $r10, $r16, $r19, $r26;
        java.security.ProviderException $r12, $r13, $r22;
        byte $b5;
        java.security.InvalidKeyException $r21;
        java.security.InvalidAlgorithmParameterException $r23;
        byte[] r25;
        java.lang.String $r28;
        android.security.keymaster.OperationResult r30;
        java.security.GeneralSecurityException r31;

        r0 := @this: android.security.keystore.AndroidKeyStoreCipherSpiBase;

        $r1 = r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: android.security.keystore.KeyStoreCryptoOperationStreamer mMainDataStreamer>;

        if $r1 == null goto label01;

        return;

     label01:
        $r2 = r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: java.lang.Exception mCachedException>;

        if $r2 == null goto label02;

        return;

     label02:
        $r3 = r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: android.security.keystore.AndroidKeyStoreKey mKey>;

        if $r3 == null goto label12;

        $r5 = new android.security.keymaster.KeymasterArguments;

        specialinvoke $r5.<android.security.keymaster.KeymasterArguments: void <init>()>();

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: void addAlgorithmSpecificParametersToBegin(android.security.keymaster.KeymasterArguments)>($r5);

        $r6 = r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: java.security.SecureRandom mRng>;

        $i0 = virtualinvoke r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: int getAdditionalEntropyAmountForBegin()>();

        r25 = staticinvoke <android.security.keystore.KeyStoreCryptoOperationUtils: byte[] getRandomBytesToMixIntoKeystoreRng(java.security.SecureRandom,int)>($r6, $i0);

        $i1 = r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: int mKeymasterPurposeOverride>;

        if $i1 == -1 goto label03;

        i6 = r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: int mKeymasterPurposeOverride>;

        goto label05;

     label03:
        $z0 = r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: boolean mEncrypting>;

        if $z0 == 0 goto label04;

        i6 = 0;

        goto label05;

     label04:
        i6 = 1;

     label05:
        $r26 = r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: android.security.KeyStore mKeyStore>;

        $r27 = r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: android.security.keystore.AndroidKeyStoreKey mKey>;

        $r28 = virtualinvoke $r27.<android.security.keystore.AndroidKeyStoreKey: java.lang.String getAlias()>();

        $r29 = r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: android.security.keystore.AndroidKeyStoreKey mKey>;

        $i7 = virtualinvoke $r29.<android.security.keystore.AndroidKeyStoreKey: int getUid()>();

        r30 = virtualinvoke $r26.<android.security.KeyStore: android.security.keymaster.OperationResult begin(java.lang.String,int,boolean,android.security.keymaster.KeymasterArguments,byte[],int)>($r28, i6, 1, $r5, r25, $i7);

        if r30 == null goto label11;

        $r8 = r30.<android.security.keymaster.OperationResult: android.os.IBinder token>;

        r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: android.os.IBinder mOperationToken> = $r8;

        $l2 = r30.<android.security.keymaster.OperationResult: long operationHandle>;

        r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: long mOperationHandle> = $l2;

        $r10 = r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: android.security.KeyStore mKeyStore>;

        $r9 = r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: android.security.keystore.AndroidKeyStoreKey mKey>;

        $i3 = r30.<android.security.keymaster.OperationResult: int resultCode>;

        r31 = staticinvoke <android.security.keystore.KeyStoreCryptoOperationUtils: java.security.GeneralSecurityException getExceptionForCipherInit(android.security.KeyStore,android.security.keystore.AndroidKeyStoreKey,int)>($r10, $r9, $i3);

        if r31 == null goto label08;

        $z1 = r31 instanceof java.security.InvalidKeyException;

        if $z1 != 0 goto label07;

        $z2 = r31 instanceof java.security.InvalidAlgorithmParameterException;

        if $z2 == 0 goto label06;

        $r23 = (java.security.InvalidAlgorithmParameterException) r31;

        throw $r23;

     label06:
        $r22 = new java.security.ProviderException;

        specialinvoke $r22.<java.security.ProviderException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected exception type", r31);

        throw $r22;

     label07:
        $r21 = (java.security.InvalidKeyException) r31;

        throw $r21;

     label08:
        $r11 = r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: android.os.IBinder mOperationToken>;

        if $r11 == null goto label10;

        $l4 = r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: long mOperationHandle>;

        $b5 = $l4 cmp 0L;

        if $b5 == 0 goto label09;

        $r14 = r30.<android.security.keymaster.OperationResult: android.security.keymaster.KeymasterArguments outParams>;

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: void loadAlgorithmSpecificParametersFromBeginResult(android.security.keymaster.KeymasterArguments)>($r14);

        $r16 = r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: android.security.KeyStore mKeyStore>;

        $r15 = r30.<android.security.keymaster.OperationResult: android.os.IBinder token>;

        $r17 = virtualinvoke r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: android.security.keystore.KeyStoreCryptoOperationStreamer createMainDataStreamer(android.security.KeyStore,android.os.IBinder)>($r16, $r15);

        r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: android.security.keystore.KeyStoreCryptoOperationStreamer mMainDataStreamer> = $r17;

        $r19 = r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: android.security.KeyStore mKeyStore>;

        $r18 = r30.<android.security.keymaster.OperationResult: android.os.IBinder token>;

        $r20 = virtualinvoke r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: android.security.keystore.KeyStoreCryptoOperationStreamer createAdditionalAuthenticationDataStreamer(android.security.KeyStore,android.os.IBinder)>($r19, $r18);

        r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: android.security.keystore.KeyStoreCryptoOperationStreamer mAdditionalAuthenticationDataStreamer> = $r20;

        r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: boolean mAdditionalAuthenticationDataStreamerClosed> = 0;

        return;

     label09:
        $r13 = new java.security.ProviderException;

        specialinvoke $r13.<java.security.ProviderException: void <init>(java.lang.String)>("Keystore returned invalid operation handle");

        throw $r13;

     label10:
        $r12 = new java.security.ProviderException;

        specialinvoke $r12.<java.security.ProviderException: void <init>(java.lang.String)>("Keystore returned null operation token");

        throw $r12;

     label11:
        $r7 = new android.security.keystore.KeyStoreConnectException;

        specialinvoke $r7.<android.security.keystore.KeyStoreConnectException: void <init>()>();

        throw $r7;

     label12:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not initialized");

        throw $r4;
    }

    private void flushAAD() throws android.security.KeyStoreException
    {
        android.security.keystore.AndroidKeyStoreCipherSpiBase r0;
        boolean $z0;
        byte[] $r2, r11;
        int $i0, $i1;
        java.lang.StringBuilder $r3;
        java.security.ProviderException $r7;
        java.lang.String $r8;
        java.lang.Throwable $r9;
        android.security.keystore.KeyStoreCryptoOperationStreamer r10;

        r0 := @this: android.security.keystore.AndroidKeyStoreCipherSpiBase;

        r10 = r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: android.security.keystore.KeyStoreCryptoOperationStreamer mAdditionalAuthenticationDataStreamer>;

        if r10 == null goto label5;

        $z0 = r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: boolean mAdditionalAuthenticationDataStreamerClosed>;

        if $z0 != 0 goto label5;

     label1:
        $r2 = <libcore.util.EmptyArray: byte[] BYTE>;

        r11 = interfaceinvoke r10.<android.security.keystore.KeyStoreCryptoOperationStreamer: byte[] doFinal(byte[],int,int,byte[],byte[])>($r2, 0, 0, null, null);

     label2:
        r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: boolean mAdditionalAuthenticationDataStreamerClosed> = 1;

        if r11 == null goto label5;

        $i0 = lengthof r11;

        if $i0 > 0 goto label3;

        goto label5;

     label3:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AAD update unexpectedly returned data: ");

        $i1 = lengthof r11;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        $r7 = new java.security.ProviderException;

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.security.ProviderException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label4:
        $r9 := @caughtexception;

        r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: boolean mAdditionalAuthenticationDataStreamerClosed> = 1;

        throw $r9;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    private void init(int, java.security.Key, java.security.SecureRandom) throws java.security.InvalidKeyException
    {
        android.security.keystore.AndroidKeyStoreCipherSpiBase r0;
        int i0;
        java.security.SecureRandom r1;
        java.security.ProviderException $r2;
        java.lang.StringBuilder $r3;
        java.security.InvalidParameterException $r6;
        java.lang.String $r7;
        java.security.Key r8;
        android.security.keystore.AndroidKeyStoreKey $r10;

        r0 := @this: android.security.keystore.AndroidKeyStoreCipherSpiBase;

        i0 := @parameter0: int;

        r8 := @parameter1: java.security.Key;

        r1 := @parameter2: java.security.SecureRandom;

        if i0 == 1 goto label3;

        if i0 == 2 goto label2;

        if i0 == 3 goto label3;

        if i0 != 4 goto label1;

        goto label2;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported opmode: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = new java.security.InvalidParameterException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.security.InvalidParameterException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label2:
        r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: boolean mEncrypting> = 0;

        goto label4;

     label3:
        r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: boolean mEncrypting> = 1;

     label4:
        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: void initKey(int,java.security.Key)>(i0, r8);

        $r10 = r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: android.security.keystore.AndroidKeyStoreKey mKey>;

        if $r10 == null goto label5;

        r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: java.security.SecureRandom mRng> = r1;

        return;

     label5:
        $r2 = new java.security.ProviderException;

        specialinvoke $r2.<java.security.ProviderException: void <init>(java.lang.String)>("initKey did not initialize the key");

        throw $r2;
    }

    static java.lang.String opmodeToString(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        if i0 == 1 goto label4;

        if i0 == 2 goto label3;

        if i0 == 3 goto label2;

        if i0 == 4 goto label1;

        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        return $r0;

     label1:
        return "UNWRAP_MODE";

     label2:
        return "WRAP_MODE";

     label3:
        return "DECRYPT_MODE";

     label4:
        return "ENCRYPT_MODE";
    }

    protected abstract void addAlgorithmSpecificParametersToBegin(android.security.keymaster.KeymasterArguments);

    protected android.security.keystore.KeyStoreCryptoOperationStreamer createAdditionalAuthenticationDataStreamer(android.security.KeyStore, android.os.IBinder)
    {
        android.security.keystore.AndroidKeyStoreCipherSpiBase r0;
        android.security.KeyStore r1;
        android.os.IBinder r2;

        r0 := @this: android.security.keystore.AndroidKeyStoreCipherSpiBase;

        r1 := @parameter0: android.security.KeyStore;

        r2 := @parameter1: android.os.IBinder;

        return null;
    }

    protected android.security.keystore.KeyStoreCryptoOperationStreamer createMainDataStreamer(android.security.KeyStore, android.os.IBinder)
    {
        android.security.keystore.AndroidKeyStoreCipherSpiBase r0;
        android.security.KeyStore r1;
        android.os.IBinder r2;
        android.security.keystore.KeyStoreCryptoOperationChunkedStreamer $r3;
        android.security.keystore.KeyStoreCryptoOperationChunkedStreamer$MainDataStream $r4;

        r0 := @this: android.security.keystore.AndroidKeyStoreCipherSpiBase;

        r1 := @parameter0: android.security.KeyStore;

        r2 := @parameter1: android.os.IBinder;

        $r3 = new android.security.keystore.KeyStoreCryptoOperationChunkedStreamer;

        $r4 = new android.security.keystore.KeyStoreCryptoOperationChunkedStreamer$MainDataStream;

        specialinvoke $r4.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer$MainDataStream: void <init>(android.security.KeyStore,android.os.IBinder)>(r1, r2);

        specialinvoke $r3.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: void <init>(android.security.keystore.KeyStoreCryptoOperationChunkedStreamer$Stream,int)>($r4, 0);

        return $r3;
    }

    protected final int engineDoFinal(java.nio.ByteBuffer, java.nio.ByteBuffer) throws javax.crypto.ShortBufferException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        android.security.keystore.AndroidKeyStoreCipherSpiBase r0;
        java.nio.ByteBuffer r1, r16;
        boolean z0;
        java.lang.NullPointerException $r2, $r3;
        byte[] $r6, r17, r18, r19;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7;
        java.lang.Throwable $r8;
        java.lang.StringBuilder $r9;
        javax.crypto.ShortBufferException $r14;
        java.lang.String $r15;

        r0 := @this: android.security.keystore.AndroidKeyStoreCipherSpiBase;

        r16 := @parameter0: java.nio.ByteBuffer;

        r1 := @parameter1: java.nio.ByteBuffer;

        if r16 == null goto label9;

        if r1 == null goto label8;

        i5 = virtualinvoke r16.<java.nio.ByteBuffer: int remaining()>();

        z0 = virtualinvoke r16.<java.nio.ByteBuffer: boolean hasArray()>();

        i6 = 0;

        if z0 == 0 goto label1;

        $r6 = virtualinvoke r16.<java.nio.ByteBuffer: byte[] array()>();

        $i0 = virtualinvoke r16.<java.nio.ByteBuffer: int arrayOffset()>();

        $i1 = virtualinvoke r16.<java.nio.ByteBuffer: int position()>();

        $i2 = $i0 + $i1;

        r17 = virtualinvoke r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: byte[] engineDoFinal(byte[],int,int)>($r6, $i2, i5);

        $i3 = virtualinvoke r16.<java.nio.ByteBuffer: int position()>();

        $i4 = $i3 + i5;

        virtualinvoke r16.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i4);

        r18 = r17;

        goto label2;

     label1:
        r19 = newarray (byte)[i5];

        virtualinvoke r16.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r19);

        r18 = virtualinvoke r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: byte[] engineDoFinal(byte[],int,int)>(r19, 0, i5);

     label2:
        if r18 == null goto label3;

        i6 = lengthof r18;

     label3:
        if i6 <= 0 goto label7;

        i7 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

     label4:
        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>(r18);

     label5:
        goto label7;

     label6:
        $r8 := @caughtexception;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Output buffer too small. Produced: ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", available: ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r14 = new javax.crypto.ShortBufferException;

        $r15 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<javax.crypto.ShortBufferException: void <init>(java.lang.String)>($r15);

        throw $r14;

     label7:
        return i6;

     label8:
        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("output == null");

        throw $r3;

     label9:
        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("input == null");

        throw $r2;

        catch java.nio.BufferOverflowException from label4 to label5 with label6;
    }

    protected final int engineDoFinal(byte[], int, int, byte[], int) throws javax.crypto.ShortBufferException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        android.security.keystore.AndroidKeyStoreCipherSpiBase r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        java.lang.StringBuilder $r1;
        javax.crypto.ShortBufferException $r6;
        java.lang.String $r7;
        byte[] r8, r9, r10;

        r0 := @this: android.security.keystore.AndroidKeyStoreCipherSpiBase;

        r8 := @parameter0: byte[];

        i7 := @parameter1: int;

        i0 := @parameter2: int;

        r9 := @parameter3: byte[];

        i1 := @parameter4: int;

        r10 = virtualinvoke r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: byte[] engineDoFinal(byte[],int,int)>(r8, i7, i0);

        if r10 != null goto label1;

        return 0;

     label1:
        $i2 = lengthof r9;

        i8 = $i2 - i1;

        $i3 = lengthof r10;

        if $i3 > i8 goto label2;

        $i5 = lengthof r10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r10, 0, r9, i1, $i5);

        $i6 = lengthof r10;

        return $i6;

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Output buffer too short. Produced: ");

        $i4 = lengthof r10;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", available: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);

        $r6 = new javax.crypto.ShortBufferException;

        $r7 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<javax.crypto.ShortBufferException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    protected final byte[] engineDoFinal(byte[], int, int) throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        android.security.keystore.AndroidKeyStoreCipherSpiBase r0;
        int i0, $i1, i2, i3;
        byte[] r1, r26, r27;
        java.lang.Exception $r2, $r4;
        javax.crypto.IllegalBlockSizeException $r3, $r6, $r16, $r18, $r19, $r21, $r23, $r25;
        java.lang.Throwable $r5, $r11, $r14, $r17, $r20, $r22, $r24;
        java.security.SecureRandom $r7;
        android.security.keystore.KeyStoreCryptoOperationStreamer $r8;
        android.security.KeyStoreException $r9;
        javax.crypto.BadPaddingException $r10, $r12;
        javax.crypto.AEADBadTagException $r13, $r15;

        r0 := @this: android.security.keystore.AndroidKeyStoreCipherSpiBase;

        r26 := @parameter0: byte[];

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        $r2 = r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: java.lang.Exception mCachedException>;

        if $r2 != null goto label9;

     label1:
        specialinvoke r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: void ensureKeystoreOperationInitialized()>();

     label2:
        specialinvoke r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: void flushAAD()>();

        $r7 = r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: java.security.SecureRandom mRng>;

        $i1 = virtualinvoke r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: int getAdditionalEntropyAmountForFinish()>();

        r1 = staticinvoke <android.security.keystore.KeyStoreCryptoOperationUtils: byte[] getRandomBytesToMixIntoKeystoreRng(java.security.SecureRandom,int)>($r7, $i1);

        $r8 = r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: android.security.keystore.KeyStoreCryptoOperationStreamer mMainDataStreamer>;

        r27 = interfaceinvoke $r8.<android.security.keystore.KeyStoreCryptoOperationStreamer: byte[] doFinal(byte[],int,int,byte[],byte[])>(r26, i2, i0, null, r1);

     label3:
        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: void resetWhilePreservingInitState()>();

        return r27;

     label4:
        $r9 := @caughtexception;

        i3 = virtualinvoke $r9.<android.security.KeyStoreException: int getErrorCode()>();

        if i3 == -38 goto label7;

        if i3 == -30 goto label6;

        if i3 == -21 goto label5;

        $r19 = new javax.crypto.IllegalBlockSizeException;

        specialinvoke $r19.<javax.crypto.IllegalBlockSizeException: void <init>()>();

        $r20 = virtualinvoke $r19.<javax.crypto.IllegalBlockSizeException: java.lang.Throwable initCause(java.lang.Throwable)>($r9);

        $r21 = (javax.crypto.IllegalBlockSizeException) $r20;

        throw $r21;

     label5:
        $r16 = new javax.crypto.IllegalBlockSizeException;

        specialinvoke $r16.<javax.crypto.IllegalBlockSizeException: void <init>()>();

        $r17 = virtualinvoke $r16.<javax.crypto.IllegalBlockSizeException: java.lang.Throwable initCause(java.lang.Throwable)>($r9);

        $r18 = (javax.crypto.IllegalBlockSizeException) $r17;

        throw $r18;

     label6:
        $r13 = new javax.crypto.AEADBadTagException;

        specialinvoke $r13.<javax.crypto.AEADBadTagException: void <init>()>();

        $r14 = virtualinvoke $r13.<javax.crypto.AEADBadTagException: java.lang.Throwable initCause(java.lang.Throwable)>($r9);

        $r15 = (javax.crypto.AEADBadTagException) $r14;

        throw $r15;

     label7:
        $r10 = new javax.crypto.BadPaddingException;

        specialinvoke $r10.<javax.crypto.BadPaddingException: void <init>()>();

        $r11 = virtualinvoke $r10.<javax.crypto.BadPaddingException: java.lang.Throwable initCause(java.lang.Throwable)>($r9);

        $r12 = (javax.crypto.BadPaddingException) $r11;

        throw $r12;

     label8:
        $r22 := @caughtexception;

        $r23 = new javax.crypto.IllegalBlockSizeException;

        specialinvoke $r23.<javax.crypto.IllegalBlockSizeException: void <init>()>();

        $r24 = virtualinvoke $r23.<javax.crypto.IllegalBlockSizeException: java.lang.Throwable initCause(java.lang.Throwable)>($r22);

        $r25 = (javax.crypto.IllegalBlockSizeException) $r24;

        throw $r25;

     label9:
        $r3 = new javax.crypto.IllegalBlockSizeException;

        specialinvoke $r3.<javax.crypto.IllegalBlockSizeException: void <init>()>();

        $r4 = r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: java.lang.Exception mCachedException>;

        $r5 = virtualinvoke $r3.<javax.crypto.IllegalBlockSizeException: java.lang.Throwable initCause(java.lang.Throwable)>($r4);

        $r6 = (javax.crypto.IllegalBlockSizeException) $r5;

        throw $r6;

        catch java.security.InvalidKeyException from label1 to label2 with label8;
        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label8;
        catch android.security.KeyStoreException from label2 to label3 with label4;
    }

    protected final int engineGetKeySize(java.security.Key) throws java.security.InvalidKeyException
    {
        android.security.keystore.AndroidKeyStoreCipherSpiBase r0;
        java.security.Key r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.security.keystore.AndroidKeyStoreCipherSpiBase;

        r1 := @parameter0: java.security.Key;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    protected abstract java.security.AlgorithmParameters engineGetParameters();

    protected final void engineInit(int, java.security.Key, java.security.AlgorithmParameters, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        android.security.keystore.AndroidKeyStoreCipherSpiBase r0;
        int i0;
        java.security.AlgorithmParameters r1;
        java.security.SecureRandom r2;
        java.lang.Throwable $r3;
        java.security.Key r4;

        r0 := @this: android.security.keystore.AndroidKeyStoreCipherSpiBase;

        i0 := @parameter0: int;

        r4 := @parameter1: java.security.Key;

        r1 := @parameter2: java.security.AlgorithmParameters;

        r2 := @parameter3: java.security.SecureRandom;

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: void resetAll()>();

     label1:
        specialinvoke r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: void init(int,java.security.Key,java.security.SecureRandom)>(i0, r4, r2);

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: void initAlgorithmSpecificParameters(java.security.AlgorithmParameters)>(r1);

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: void ensureKeystoreOperationInitialized()>();

     label2:
        goto label3;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: void resetAll()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    protected final void engineInit(int, java.security.Key, java.security.SecureRandom) throws java.security.InvalidKeyException
    {
        android.security.keystore.AndroidKeyStoreCipherSpiBase r0;
        int i0;
        java.lang.Throwable $r1, $r2;
        java.security.Key r3;
        java.security.SecureRandom r4;
        java.security.InvalidKeyException r6;

        r0 := @this: android.security.keystore.AndroidKeyStoreCipherSpiBase;

        i0 := @parameter0: int;

        r3 := @parameter1: java.security.Key;

        r4 := @parameter2: java.security.SecureRandom;

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: void resetAll()>();

     label1:
        specialinvoke r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: void init(int,java.security.Key,java.security.SecureRandom)>(i0, r3, r4);

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: void initAlgorithmSpecificParameters()>();

     label2:
        specialinvoke r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: void ensureKeystoreOperationInitialized()>();

     label3:
        goto label4;

     label4:
        return;

     label5:
        $r1 := @caughtexception;

     label6:
        r6 = new java.security.InvalidKeyException;

        specialinvoke r6.<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>($r1);

        throw r6;

     label7:
        $r2 := @caughtexception;

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: void resetAll()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.security.InvalidAlgorithmParameterException from label2 to label3 with label5;
        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label6 to label7 with label7;
    }

    protected final void engineInit(int, java.security.Key, java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        android.security.keystore.AndroidKeyStoreCipherSpiBase r0;
        int i0;
        java.security.spec.AlgorithmParameterSpec r1;
        java.security.SecureRandom r2;
        java.lang.Throwable $r3;
        java.security.Key r4;

        r0 := @this: android.security.keystore.AndroidKeyStoreCipherSpiBase;

        i0 := @parameter0: int;

        r4 := @parameter1: java.security.Key;

        r1 := @parameter2: java.security.spec.AlgorithmParameterSpec;

        r2 := @parameter3: java.security.SecureRandom;

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: void resetAll()>();

     label1:
        specialinvoke r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: void init(int,java.security.Key,java.security.SecureRandom)>(i0, r4, r2);

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: void initAlgorithmSpecificParameters(java.security.spec.AlgorithmParameterSpec)>(r1);

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: void ensureKeystoreOperationInitialized()>();

     label2:
        goto label3;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: void resetAll()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    protected final void engineSetMode(java.lang.String) throws java.security.NoSuchAlgorithmException
    {
        android.security.keystore.AndroidKeyStoreCipherSpiBase r0;
        java.lang.String r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.security.keystore.AndroidKeyStoreCipherSpiBase;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    protected final void engineSetPadding(java.lang.String) throws javax.crypto.NoSuchPaddingException
    {
        android.security.keystore.AndroidKeyStoreCipherSpiBase r0;
        java.lang.String r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.security.keystore.AndroidKeyStoreCipherSpiBase;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    protected final java.security.Key engineUnwrap(byte[], java.lang.String, int) throws java.security.InvalidKeyException, java.security.NoSuchAlgorithmException
    {
        android.security.keystore.AndroidKeyStoreCipherSpiBase r0;
        int i0, $i1;
        android.security.keystore.AndroidKeyStoreKey $r1;
        java.lang.IllegalStateException $r2, $r3;
        boolean $z0;
        java.lang.NullPointerException $r4;
        java.lang.StringBuilder $r5;
        java.security.InvalidParameterException $r8;
        java.lang.String $r9, r18;
        javax.crypto.spec.SecretKeySpec $r10;
        java.lang.Throwable $r11, $r13, $r15;
        java.security.InvalidKeyException $r12, $r14, $r16;
        byte[] r17, r19;
        java.security.KeyFactory r21, r25;
        java.security.spec.PKCS8EncodedKeySpec r22;
        java.security.PrivateKey r23;
        java.security.spec.X509EncodedKeySpec r26;
        java.security.PublicKey r27;

        r0 := @this: android.security.keystore.AndroidKeyStoreCipherSpiBase;

        r17 := @parameter0: byte[];

        r18 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r1 = r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: android.security.keystore.AndroidKeyStoreKey mKey>;

        if $r1 == null goto label15;

        $z0 = virtualinvoke r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: boolean isEncrypting()>();

        if $z0 != 0 goto label14;

        if r17 == null goto label13;

     label01:
        $i1 = lengthof r17;

        r19 = virtualinvoke r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: byte[] engineDoFinal(byte[],int,int)>(r17, 0, $i1);

     label02:
        if i0 == 1 goto label08;

        if i0 == 2 goto label04;

        if i0 != 3 goto label03;

        $r10 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r10.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r19, r18);

        return $r10;

     label03:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported wrappedKeyType: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = new java.security.InvalidParameterException;

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.security.InvalidParameterException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label04:
        r21 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(r18);

     label05:
        r22 = new java.security.spec.PKCS8EncodedKeySpec;

        specialinvoke r22.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>(r19);

        r23 = virtualinvoke r21.<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>(r22);

     label06:
        return r23;

     label07:
        $r15 := @caughtexception;

        $r16 = new java.security.InvalidKeyException;

        specialinvoke $r16.<java.security.InvalidKeyException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to create private key from its PKCS#8 encoded form", $r15);

        throw $r16;

     label08:
        r25 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(r18);

     label09:
        r26 = new java.security.spec.X509EncodedKeySpec;

        specialinvoke r26.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>(r19);

        r27 = virtualinvoke r25.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>(r26);

     label10:
        return r27;

     label11:
        $r13 := @caughtexception;

        $r14 = new java.security.InvalidKeyException;

        specialinvoke $r14.<java.security.InvalidKeyException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to create public key from its X.509 encoded form", $r13);

        throw $r14;

     label12:
        $r11 := @caughtexception;

        $r12 = new java.security.InvalidKeyException;

        specialinvoke $r12.<java.security.InvalidKeyException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to unwrap key", $r11);

        throw $r12;

     label13:
        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("wrappedKey == null");

        throw $r4;

     label14:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cipher must be initialized in Cipher.WRAP_MODE to wrap keys");

        throw $r3;

     label15:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not initilized");

        throw $r2;

        catch javax.crypto.IllegalBlockSizeException from label01 to label02 with label12;
        catch javax.crypto.BadPaddingException from label01 to label02 with label12;
        catch java.security.spec.InvalidKeySpecException from label05 to label06 with label07;
        catch java.security.spec.InvalidKeySpecException from label09 to label10 with label11;
    }

    protected final int engineUpdate(java.nio.ByteBuffer, java.nio.ByteBuffer) throws javax.crypto.ShortBufferException
    {
        android.security.keystore.AndroidKeyStoreCipherSpiBase r0;
        java.nio.ByteBuffer r1, r16;
        boolean z0;
        java.lang.NullPointerException $r2, $r3;
        byte[] $r6, r17, r18, r19;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7;
        java.lang.Throwable $r8;
        java.lang.StringBuilder $r9;
        javax.crypto.ShortBufferException $r14;
        java.lang.String $r15;

        r0 := @this: android.security.keystore.AndroidKeyStoreCipherSpiBase;

        r16 := @parameter0: java.nio.ByteBuffer;

        r1 := @parameter1: java.nio.ByteBuffer;

        if r16 == null goto label9;

        if r1 == null goto label8;

        i5 = virtualinvoke r16.<java.nio.ByteBuffer: int remaining()>();

        z0 = virtualinvoke r16.<java.nio.ByteBuffer: boolean hasArray()>();

        i6 = 0;

        if z0 == 0 goto label1;

        $r6 = virtualinvoke r16.<java.nio.ByteBuffer: byte[] array()>();

        $i0 = virtualinvoke r16.<java.nio.ByteBuffer: int arrayOffset()>();

        $i1 = virtualinvoke r16.<java.nio.ByteBuffer: int position()>();

        $i2 = $i0 + $i1;

        r17 = virtualinvoke r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: byte[] engineUpdate(byte[],int,int)>($r6, $i2, i5);

        $i3 = virtualinvoke r16.<java.nio.ByteBuffer: int position()>();

        $i4 = $i3 + i5;

        virtualinvoke r16.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i4);

        r18 = r17;

        goto label2;

     label1:
        r19 = newarray (byte)[i5];

        virtualinvoke r16.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r19);

        r18 = virtualinvoke r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: byte[] engineUpdate(byte[],int,int)>(r19, 0, i5);

     label2:
        if r18 == null goto label3;

        i6 = lengthof r18;

     label3:
        if i6 <= 0 goto label7;

        i7 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

     label4:
        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>(r18);

     label5:
        goto label7;

     label6:
        $r8 := @caughtexception;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Output buffer too small. Produced: ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", available: ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r14 = new javax.crypto.ShortBufferException;

        $r15 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<javax.crypto.ShortBufferException: void <init>(java.lang.String)>($r15);

        throw $r14;

     label7:
        return i6;

     label8:
        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("output == null");

        throw $r3;

     label9:
        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("input == null");

        throw $r2;

        catch java.nio.BufferOverflowException from label4 to label5 with label6;
    }

    protected final int engineUpdate(byte[], int, int, byte[], int) throws javax.crypto.ShortBufferException
    {
        android.security.keystore.AndroidKeyStoreCipherSpiBase r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        java.lang.StringBuilder $r1;
        javax.crypto.ShortBufferException $r6;
        java.lang.String $r7;
        byte[] r8, r9, r10;

        r0 := @this: android.security.keystore.AndroidKeyStoreCipherSpiBase;

        r8 := @parameter0: byte[];

        i7 := @parameter1: int;

        i0 := @parameter2: int;

        r9 := @parameter3: byte[];

        i1 := @parameter4: int;

        r10 = virtualinvoke r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: byte[] engineUpdate(byte[],int,int)>(r8, i7, i0);

        if r10 != null goto label1;

        return 0;

     label1:
        $i2 = lengthof r9;

        i8 = $i2 - i1;

        $i3 = lengthof r10;

        if $i3 > i8 goto label2;

        $i5 = lengthof r10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r10, 0, r9, i1, $i5);

        $i6 = lengthof r10;

        return $i6;

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Output buffer too short. Produced: ");

        $i4 = lengthof r10;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", available: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);

        $r6 = new javax.crypto.ShortBufferException;

        $r7 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<javax.crypto.ShortBufferException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    protected final byte[] engineUpdate(byte[], int, int)
    {
        android.security.keystore.AndroidKeyStoreCipherSpiBase r0;
        int i0, i1, $i2;
        java.lang.Exception $r1, r9;
        android.security.keystore.KeyStoreCryptoOperationStreamer $r2;
        android.security.KeyStoreException $r3;
        java.lang.Throwable $r4;
        byte[] r5, r6;

        r0 := @this: android.security.keystore.AndroidKeyStoreCipherSpiBase;

        r5 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: java.lang.Exception mCachedException>;

        if $r1 == null goto label1;

        return null;

     label1:
        specialinvoke r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: void ensureKeystoreOperationInitialized()>();

     label2:
        if i1 != 0 goto label3;

        return null;

     label3:
        specialinvoke r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: void flushAAD()>();

        $r2 = r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: android.security.keystore.KeyStoreCryptoOperationStreamer mMainDataStreamer>;

        r6 = interfaceinvoke $r2.<android.security.keystore.KeyStoreCryptoOperationStreamer: byte[] update(byte[],int,int)>(r5, i0, i1);

     label4:
        $i2 = lengthof r6;

        if $i2 != 0 goto label5;

        return null;

     label5:
        return r6;

     label6:
        $r3 := @caughtexception;

        r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: java.lang.Exception mCachedException> = $r3;

        return null;

     label7:
        $r4 := @caughtexception;

        r9 = (java.lang.Exception) $r4;

        r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: java.lang.Exception mCachedException> = r9;

        return null;

        catch java.security.InvalidKeyException from label1 to label2 with label7;
        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label7;
        catch android.security.KeyStoreException from label3 to label4 with label6;
    }

    protected final void engineUpdateAAD(java.nio.ByteBuffer)
    {
        android.security.keystore.AndroidKeyStoreCipherSpiBase r0;
        java.lang.IllegalArgumentException $r1;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3, i4, i5;
        java.nio.ByteBuffer r4;
        byte[] r5, r6, r7;

        r0 := @this: android.security.keystore.AndroidKeyStoreCipherSpiBase;

        r4 := @parameter0: java.nio.ByteBuffer;

        if r4 == null goto label4;

        $z0 = virtualinvoke r4.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $z1 = virtualinvoke r4.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z1 == 0 goto label2;

        r5 = virtualinvoke r4.<java.nio.ByteBuffer: byte[] array()>();

        $i1 = virtualinvoke r4.<java.nio.ByteBuffer: int arrayOffset()>();

        $i2 = virtualinvoke r4.<java.nio.ByteBuffer: int position()>();

        i4 = $i1 + $i2;

        i5 = virtualinvoke r4.<java.nio.ByteBuffer: int remaining()>();

        $i3 = virtualinvoke r4.<java.nio.ByteBuffer: int limit()>();

        virtualinvoke r4.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i3);

        r6 = r5;

        goto label3;

     label2:
        $i0 = virtualinvoke r4.<java.nio.ByteBuffer: int remaining()>();

        r7 = newarray (byte)[$i0];

        i4 = 0;

        i5 = lengthof r7;

        virtualinvoke r4.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r7);

        r6 = r7;

     label3:
        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: void engineUpdateAAD(byte[],int,int)>(r6, i4, i5);

        return;

     label4:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("src == null");

        throw $r1;
    }

    protected final void engineUpdateAAD(byte[], int, int)
    {
        android.security.keystore.AndroidKeyStoreCipherSpiBase r0;
        int i0, i1, $i2, $i3;
        java.lang.Exception $r1, r22;
        boolean $z0;
        java.lang.String $r9;
        android.security.KeyStoreException $r10;
        java.lang.Throwable $r11;
        byte[] r12, r14;
        android.security.keystore.KeyStoreCryptoOperationStreamer r13;
        java.lang.StringBuilder r18;
        java.security.ProviderException r19;
        java.lang.IllegalStateException r20, r21;

        r0 := @this: android.security.keystore.AndroidKeyStoreCipherSpiBase;

        r12 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: java.lang.Exception mCachedException>;

        if $r1 == null goto label01;

        return;

     label01:
        specialinvoke r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: void ensureKeystoreOperationInitialized()>();

     label02:
        $z0 = r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: boolean mAdditionalAuthenticationDataStreamerClosed>;

        if $z0 != 0 goto label09;

        r13 = r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: android.security.keystore.KeyStoreCryptoOperationStreamer mAdditionalAuthenticationDataStreamer>;

        if r13 == null goto label08;

     label03:
        r14 = interfaceinvoke r13.<android.security.keystore.KeyStoreCryptoOperationStreamer: byte[] update(byte[],int,int)>(r12, i0, i1);

     label04:
        if r14 == null goto label06;

        $i2 = lengthof r14;

        if $i2 > 0 goto label05;

        goto label06;

     label05:
        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AAD update unexpectedly produced output: ");

        $i3 = lengthof r14;

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        r19 = new java.security.ProviderException;

        $r9 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r19.<java.security.ProviderException: void <init>(java.lang.String)>($r9);

        throw r19;

     label06:
        return;

     label07:
        $r10 := @caughtexception;

        r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: java.lang.Exception mCachedException> = $r10;

        return;

     label08:
        r20 = new java.lang.IllegalStateException;

        specialinvoke r20.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This cipher does not support AAD");

        throw r20;

     label09:
        r21 = new java.lang.IllegalStateException;

        specialinvoke r21.<java.lang.IllegalStateException: void <init>(java.lang.String)>("AAD can only be provided before Cipher.update is invoked");

        throw r21;

     label10:
        $r11 := @caughtexception;

        r22 = (java.lang.Exception) $r11;

        r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: java.lang.Exception mCachedException> = r22;

        return;

        catch java.security.InvalidKeyException from label01 to label02 with label10;
        catch java.security.InvalidAlgorithmParameterException from label01 to label02 with label10;
        catch android.security.KeyStoreException from label03 to label04 with label07;
    }

    protected final byte[] engineWrap(java.security.Key) throws javax.crypto.IllegalBlockSizeException, java.security.InvalidKeyException
    {
        android.security.keystore.AndroidKeyStoreCipherSpiBase r0;
        android.security.keystore.AndroidKeyStoreKey $r1;
        java.lang.IllegalStateException $r2, $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.NullPointerException $r4;
        java.lang.StringBuilder $r5;
        java.lang.Class $r6;
        java.lang.String $r7, $r9, $r10, $r11, $r13, $r17, $r18, $r19, $r23, $r24, $r25;
        java.security.InvalidKeyException $r8, $r12, $r35, $r37, $r39;
        int $i0;
        java.security.KeyFactory $r14, $r20;
        java.security.spec.KeySpec $r15, $r21, $r28;
        java.security.spec.X509EncodedKeySpec $r16;
        java.security.spec.PKCS8EncodedKeySpec $r22;
        javax.crypto.SecretKeyFactory $r26;
        javax.crypto.SecretKey $r27;
        javax.crypto.spec.SecretKeySpec $r29;
        java.lang.Throwable $r30, $r32, $r34, $r36, $r38;
        javax.crypto.IllegalBlockSizeException $r31, $r33;
        java.security.Key r40;
        byte[] r41, r42, r44, r46, r48;

        r0 := @this: android.security.keystore.AndroidKeyStoreCipherSpiBase;

        r40 := @parameter0: java.security.Key;

        $r1 = r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: android.security.keystore.AndroidKeyStoreKey mKey>;

        if $r1 == null goto label23;

        $z0 = virtualinvoke r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: boolean isEncrypting()>();

        if $z0 == 0 goto label22;

        if r40 == null goto label21;

        r41 = null;

        $z1 = r40 instanceof javax.crypto.SecretKey;

        if $z1 == 0 goto label05;

        $r23 = "RAW";

        $r24 = interfaceinvoke r40.<java.security.Key: java.lang.String getFormat()>();

        $z6 = virtualinvoke $r23.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r24);

        if $z6 == 0 goto label01;

        r41 = interfaceinvoke r40.<java.security.Key: byte[] getEncoded()>();

     label01:
        r42 = r41;

        if r41 != null goto label15;

     label02:
        $r25 = interfaceinvoke r40.<java.security.Key: java.lang.String getAlgorithm()>();

        $r26 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>($r25);

        $r27 = (javax.crypto.SecretKey) r40;

        $r28 = virtualinvoke $r26.<javax.crypto.SecretKeyFactory: java.security.spec.KeySpec getKeySpec(javax.crypto.SecretKey,java.lang.Class)>($r27, class "Ljavax/crypto/spec/SecretKeySpec;");

        $r29 = (javax.crypto.spec.SecretKeySpec) $r28;

        r42 = virtualinvoke $r29.<javax.crypto.spec.SecretKeySpec: byte[] getEncoded()>();

     label03:
        goto label15;

     label04:
        $r38 := @caughtexception;

        $r39 = new java.security.InvalidKeyException;

        specialinvoke $r39.<java.security.InvalidKeyException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to wrap key because it does not export its key material", $r38);

        throw $r39;

     label05:
        $z2 = r40 instanceof java.security.PrivateKey;

        if $z2 == 0 goto label10;

        r44 = null;

        $r17 = "PKCS8";

        $r18 = interfaceinvoke r40.<java.security.Key: java.lang.String getFormat()>();

        $z5 = virtualinvoke $r17.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r18);

        if $z5 == 0 goto label06;

        r44 = interfaceinvoke r40.<java.security.Key: byte[] getEncoded()>();

     label06:
        r42 = r44;

        if r44 != null goto label15;

     label07:
        $r19 = interfaceinvoke r40.<java.security.Key: java.lang.String getAlgorithm()>();

        $r20 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.security.KeyFactory: java.security.spec.KeySpec getKeySpec(java.security.Key,java.lang.Class)>(r40, class "Ljava/security/spec/PKCS8EncodedKeySpec;");

        $r22 = (java.security.spec.PKCS8EncodedKeySpec) $r21;

        r42 = virtualinvoke $r22.<java.security.spec.PKCS8EncodedKeySpec: byte[] getEncoded()>();

     label08:
        goto label15;

     label09:
        $r36 := @caughtexception;

        $r37 = new java.security.InvalidKeyException;

        specialinvoke $r37.<java.security.InvalidKeyException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to wrap key because it does not export its key material", $r36);

        throw $r37;

     label10:
        $z3 = r40 instanceof java.security.PublicKey;

        if $z3 == 0 goto label20;

        r46 = null;

        $r10 = "X.509";

        $r11 = interfaceinvoke r40.<java.security.Key: java.lang.String getFormat()>();

        $z4 = virtualinvoke $r10.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r11);

        if $z4 == 0 goto label11;

        r46 = interfaceinvoke r40.<java.security.Key: byte[] getEncoded()>();

     label11:
        r42 = r46;

        if r46 != null goto label15;

     label12:
        $r13 = interfaceinvoke r40.<java.security.Key: java.lang.String getAlgorithm()>();

        $r14 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.security.KeyFactory: java.security.spec.KeySpec getKeySpec(java.security.Key,java.lang.Class)>(r40, class "Ljava/security/spec/X509EncodedKeySpec;");

        $r16 = (java.security.spec.X509EncodedKeySpec) $r15;

        r42 = virtualinvoke $r16.<java.security.spec.X509EncodedKeySpec: byte[] getEncoded()>();

     label13:
        goto label15;

     label14:
        $r34 := @caughtexception;

        $r35 = new java.security.InvalidKeyException;

        specialinvoke $r35.<java.security.InvalidKeyException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to wrap key because it does not export its key material", $r34);

        throw $r35;

     label15:
        if r42 == null goto label19;

     label16:
        $i0 = lengthof r42;

        r48 = virtualinvoke r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: byte[] engineDoFinal(byte[],int,int)>(r42, 0, $i0);

     label17:
        return r48;

     label18:
        $r30 := @caughtexception;

        $r31 = new javax.crypto.IllegalBlockSizeException;

        specialinvoke $r31.<javax.crypto.IllegalBlockSizeException: void <init>()>();

        $r32 = virtualinvoke $r31.<javax.crypto.IllegalBlockSizeException: java.lang.Throwable initCause(java.lang.Throwable)>($r30);

        $r33 = (javax.crypto.IllegalBlockSizeException) $r32;

        throw $r33;

     label19:
        $r12 = new java.security.InvalidKeyException;

        specialinvoke $r12.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Failed to wrap key because it does not export its key material");

        throw $r12;

     label20:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported key type: ");

        $r6 = virtualinvoke r40.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r8 = new java.security.InvalidKeyException;

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label21:
        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("key == null");

        throw $r4;

     label22:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cipher must be initialized in Cipher.WRAP_MODE to wrap keys");

        throw $r3;

     label23:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not initilized");

        throw $r2;

        catch java.security.NoSuchAlgorithmException from label02 to label03 with label04;
        catch java.security.spec.InvalidKeySpecException from label02 to label03 with label04;
        catch java.security.NoSuchAlgorithmException from label07 to label08 with label09;
        catch java.security.spec.InvalidKeySpecException from label07 to label08 with label09;
        catch java.security.NoSuchAlgorithmException from label12 to label13 with label14;
        catch java.security.spec.InvalidKeySpecException from label12 to label13 with label14;
        catch javax.crypto.BadPaddingException from label16 to label17 with label18;
    }

    public void finalize() throws java.lang.Throwable
    {
        android.security.keystore.AndroidKeyStoreCipherSpiBase r0;
        android.security.KeyStore $r1;
        java.lang.Throwable $r2;
        android.os.IBinder r3;

        r0 := @this: android.security.keystore.AndroidKeyStoreCipherSpiBase;

     label1:
        r3 = r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: android.os.IBinder mOperationToken>;

     label2:
        if r3 == null goto label4;

     label3:
        $r1 = r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: android.security.KeyStore mKeyStore>;

        virtualinvoke $r1.<android.security.KeyStore: int abort(android.os.IBinder)>(r3);

     label4:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label5:
        $r2 := @caughtexception;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    protected abstract int getAdditionalEntropyAmountForBegin();

    protected abstract int getAdditionalEntropyAmountForFinish();

    protected final long getConsumedInputSizeBytes()
    {
        android.security.keystore.AndroidKeyStoreCipherSpiBase r0;
        android.security.keystore.KeyStoreCryptoOperationStreamer r1;
        java.lang.IllegalStateException $r2;
        long $l0;

        r0 := @this: android.security.keystore.AndroidKeyStoreCipherSpiBase;

        r1 = r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: android.security.keystore.KeyStoreCryptoOperationStreamer mMainDataStreamer>;

        if r1 == null goto label1;

        $l0 = interfaceinvoke r1.<android.security.keystore.KeyStoreCryptoOperationStreamer: long getConsumedInputSizeBytes()>();

        return $l0;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not initialized");

        throw $r2;
    }

    protected final android.security.KeyStore getKeyStore()
    {
        android.security.keystore.AndroidKeyStoreCipherSpiBase r0;
        android.security.KeyStore $r1;

        r0 := @this: android.security.keystore.AndroidKeyStoreCipherSpiBase;

        $r1 = r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: android.security.KeyStore mKeyStore>;

        return $r1;
    }

    protected final int getKeymasterPurposeOverride()
    {
        android.security.keystore.AndroidKeyStoreCipherSpiBase r0;
        int $i0;

        r0 := @this: android.security.keystore.AndroidKeyStoreCipherSpiBase;

        $i0 = r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: int mKeymasterPurposeOverride>;

        return $i0;
    }

    public final long getOperationHandle()
    {
        android.security.keystore.AndroidKeyStoreCipherSpiBase r0;
        long $l0;

        r0 := @this: android.security.keystore.AndroidKeyStoreCipherSpiBase;

        $l0 = r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: long mOperationHandle>;

        return $l0;
    }

    protected final long getProducedOutputSizeBytes()
    {
        android.security.keystore.AndroidKeyStoreCipherSpiBase r0;
        android.security.keystore.KeyStoreCryptoOperationStreamer r1;
        java.lang.IllegalStateException $r2;
        long $l0;

        r0 := @this: android.security.keystore.AndroidKeyStoreCipherSpiBase;

        r1 = r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: android.security.keystore.KeyStoreCryptoOperationStreamer mMainDataStreamer>;

        if r1 == null goto label1;

        $l0 = interfaceinvoke r1.<android.security.keystore.KeyStoreCryptoOperationStreamer: long getProducedOutputSizeBytes()>();

        return $l0;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not initialized");

        throw $r2;
    }

    protected abstract void initAlgorithmSpecificParameters() throws java.security.InvalidKeyException;

    protected abstract void initAlgorithmSpecificParameters(java.security.AlgorithmParameters) throws java.security.InvalidAlgorithmParameterException;

    protected abstract void initAlgorithmSpecificParameters(java.security.spec.AlgorithmParameterSpec) throws java.security.InvalidAlgorithmParameterException;

    protected abstract void initKey(int, java.security.Key) throws java.security.InvalidKeyException;

    protected final boolean isEncrypting()
    {
        android.security.keystore.AndroidKeyStoreCipherSpiBase r0;
        boolean $z0;

        r0 := @this: android.security.keystore.AndroidKeyStoreCipherSpiBase;

        $z0 = r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: boolean mEncrypting>;

        return $z0;
    }

    protected abstract void loadAlgorithmSpecificParametersFromBeginResult(android.security.keymaster.KeymasterArguments);

    protected void resetAll()
    {
        android.security.keystore.AndroidKeyStoreCipherSpiBase r0;
        android.os.IBinder r1;
        android.security.KeyStore $r2;

        r0 := @this: android.security.keystore.AndroidKeyStoreCipherSpiBase;

        r1 = r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: android.os.IBinder mOperationToken>;

        if r1 == null goto label1;

        $r2 = r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: android.security.KeyStore mKeyStore>;

        virtualinvoke $r2.<android.security.KeyStore: int abort(android.os.IBinder)>(r1);

     label1:
        r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: boolean mEncrypting> = 0;

        r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: int mKeymasterPurposeOverride> = -1;

        r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: android.security.keystore.AndroidKeyStoreKey mKey> = null;

        r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: java.security.SecureRandom mRng> = null;

        r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: android.os.IBinder mOperationToken> = null;

        r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: long mOperationHandle> = 0L;

        r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: android.security.keystore.KeyStoreCryptoOperationStreamer mMainDataStreamer> = null;

        r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: android.security.keystore.KeyStoreCryptoOperationStreamer mAdditionalAuthenticationDataStreamer> = null;

        r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: boolean mAdditionalAuthenticationDataStreamerClosed> = 0;

        r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: java.lang.Exception mCachedException> = null;

        return;
    }

    protected void resetWhilePreservingInitState()
    {
        android.security.keystore.AndroidKeyStoreCipherSpiBase r0;
        android.os.IBinder r1;
        android.security.KeyStore $r2;

        r0 := @this: android.security.keystore.AndroidKeyStoreCipherSpiBase;

        r1 = r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: android.os.IBinder mOperationToken>;

        if r1 == null goto label1;

        $r2 = r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: android.security.KeyStore mKeyStore>;

        virtualinvoke $r2.<android.security.KeyStore: int abort(android.os.IBinder)>(r1);

     label1:
        r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: android.os.IBinder mOperationToken> = null;

        r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: long mOperationHandle> = 0L;

        r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: android.security.keystore.KeyStoreCryptoOperationStreamer mMainDataStreamer> = null;

        r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: android.security.keystore.KeyStoreCryptoOperationStreamer mAdditionalAuthenticationDataStreamer> = null;

        r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: boolean mAdditionalAuthenticationDataStreamerClosed> = 0;

        r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: java.lang.Exception mCachedException> = null;

        return;
    }

    protected final void setKey(android.security.keystore.AndroidKeyStoreKey)
    {
        android.security.keystore.AndroidKeyStoreCipherSpiBase r0;
        android.security.keystore.AndroidKeyStoreKey r1;

        r0 := @this: android.security.keystore.AndroidKeyStoreCipherSpiBase;

        r1 := @parameter0: android.security.keystore.AndroidKeyStoreKey;

        r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: android.security.keystore.AndroidKeyStoreKey mKey> = r1;

        return;
    }

    protected final void setKeymasterPurposeOverride(int)
    {
        android.security.keystore.AndroidKeyStoreCipherSpiBase r0;
        int i0;

        r0 := @this: android.security.keystore.AndroidKeyStoreCipherSpiBase;

        i0 := @parameter0: int;

        r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: int mKeymasterPurposeOverride> = i0;

        return;
    }
}
