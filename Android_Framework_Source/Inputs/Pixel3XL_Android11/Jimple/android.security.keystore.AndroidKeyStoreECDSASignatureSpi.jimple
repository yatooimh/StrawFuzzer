abstract class android.security.keystore.AndroidKeyStoreECDSASignatureSpi extends android.security.keystore.AndroidKeyStoreSignatureSpiBase
{
    private int mGroupSizeBits;
    private final int mKeymasterDigest;

    void <init>(int)
    {
        android.security.keystore.AndroidKeyStoreECDSASignatureSpi r0;
        int i0;

        r0 := @this: android.security.keystore.AndroidKeyStoreECDSASignatureSpi;

        i0 := @parameter0: int;

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreSignatureSpiBase: void <init>()>();

        r0.<android.security.keystore.AndroidKeyStoreECDSASignatureSpi: int mGroupSizeBits> = -1;

        r0.<android.security.keystore.AndroidKeyStoreECDSASignatureSpi: int mKeymasterDigest> = i0;

        return;
    }

    protected final void addAlgorithmSpecificParametersToBegin(android.security.keymaster.KeymasterArguments)
    {
        android.security.keystore.AndroidKeyStoreECDSASignatureSpi r0;
        android.security.keymaster.KeymasterArguments r1;
        int $i0;

        r0 := @this: android.security.keystore.AndroidKeyStoreECDSASignatureSpi;

        r1 := @parameter0: android.security.keymaster.KeymasterArguments;

        virtualinvoke r1.<android.security.keymaster.KeymasterArguments: void addEnum(int,int)>(268435458, 3);

        $i0 = r0.<android.security.keystore.AndroidKeyStoreECDSASignatureSpi: int mKeymasterDigest>;

        virtualinvoke r1.<android.security.keymaster.KeymasterArguments: void addEnum(int,int)>(536870917, $i0);

        return;
    }

    protected final int getAdditionalEntropyAmountForSign()
    {
        android.security.keystore.AndroidKeyStoreECDSASignatureSpi r0;
        int $i0, $i1, $i2;

        r0 := @this: android.security.keystore.AndroidKeyStoreECDSASignatureSpi;

        $i0 = r0.<android.security.keystore.AndroidKeyStoreECDSASignatureSpi: int mGroupSizeBits>;

        $i1 = $i0 + 7;

        $i2 = $i1 / 8;

        return $i2;
    }

    protected final int getGroupSizeBits()
    {
        android.security.keystore.AndroidKeyStoreECDSASignatureSpi r0;
        int i0;
        java.lang.IllegalStateException $r1;

        r0 := @this: android.security.keystore.AndroidKeyStoreECDSASignatureSpi;

        i0 = r0.<android.security.keystore.AndroidKeyStoreECDSASignatureSpi: int mGroupSizeBits>;

        if i0 == -1 goto label1;

        return i0;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not initialized");

        throw $r1;
    }

    protected final void initKey(android.security.keystore.AndroidKeyStoreKey) throws java.security.InvalidKeyException
    {
        android.security.keystore.AndroidKeyStoreECDSASignatureSpi r0;
        int i0, $i2, $i3, $i6;
        long l1;
        java.lang.String $r1, $r2, $r5, $r11, $r14, $r16, $r24;
        boolean $z0;
        java.lang.StringBuilder $r3, $r19;
        java.security.InvalidKeyException $r10, $r17, $r18, $r23;
        android.security.keymaster.KeyCharacteristics $r12;
        android.security.KeyStore $r13, $r15;
        byte $b4, $b5;
        android.security.keystore.AndroidKeyStoreKey r25;

        r0 := @this: android.security.keystore.AndroidKeyStoreECDSASignatureSpi;

        r25 := @parameter0: android.security.keystore.AndroidKeyStoreKey;

        $r1 = "EC";

        $r2 = virtualinvoke r25.<android.security.keystore.AndroidKeyStoreKey: java.lang.String getAlgorithm()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2);

        if $z0 == 0 goto label4;

        $r12 = new android.security.keymaster.KeyCharacteristics;

        specialinvoke $r12.<android.security.keymaster.KeyCharacteristics: void <init>()>();

        $r13 = virtualinvoke r0.<android.security.keystore.AndroidKeyStoreECDSASignatureSpi: android.security.KeyStore getKeyStore()>();

        $r14 = virtualinvoke r25.<android.security.keystore.AndroidKeyStoreKey: java.lang.String getAlias()>();

        $i2 = virtualinvoke r25.<android.security.keystore.AndroidKeyStoreKey: int getUid()>();

        i0 = virtualinvoke $r13.<android.security.KeyStore: int getKeyCharacteristics(java.lang.String,android.security.keymaster.KeymasterBlob,android.security.keymaster.KeymasterBlob,int,android.security.keymaster.KeyCharacteristics)>($r14, null, null, $i2, $r12);

        if i0 != 1 goto label3;

        l1 = virtualinvoke $r12.<android.security.keymaster.KeyCharacteristics: long getUnsignedInt(int,long)>(805306371, -1L);

        $b4 = l1 cmp -1L;

        if $b4 == 0 goto label2;

        $b5 = l1 cmp 2147483647L;

        if $b5 > 0 goto label1;

        $i6 = (int) l1;

        r0.<android.security.keystore.AndroidKeyStoreECDSASignatureSpi: int mGroupSizeBits> = $i6;

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreSignatureSpiBase: void initKey(android.security.keystore.AndroidKeyStoreKey)>(r25);

        return;

     label1:
        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Key too large: ");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bits");

        $r23 = new java.security.InvalidKeyException;

        $r24 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r24);

        throw $r23;

     label2:
        $r18 = new java.security.InvalidKeyException;

        specialinvoke $r18.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Size of key not known");

        throw $r18;

     label3:
        $r15 = virtualinvoke r0.<android.security.keystore.AndroidKeyStoreECDSASignatureSpi: android.security.KeyStore getKeyStore()>();

        $r16 = virtualinvoke r25.<android.security.keystore.AndroidKeyStoreKey: java.lang.String getAlias()>();

        $i3 = virtualinvoke r25.<android.security.keystore.AndroidKeyStoreKey: int getUid()>();

        $r17 = virtualinvoke $r15.<android.security.KeyStore: java.security.InvalidKeyException getInvalidKeyException(java.lang.String,int,int)>($r16, $i3, i0);

        throw $r17;

     label4:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported key algorithm: ");

        $r5 = virtualinvoke r25.<android.security.keystore.AndroidKeyStoreKey: java.lang.String getAlgorithm()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Only");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("EC");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" supported");

        $r10 = new java.security.InvalidKeyException;

        $r11 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r11);

        throw $r10;
    }

    protected final void resetAll()
    {
        android.security.keystore.AndroidKeyStoreECDSASignatureSpi r0;

        r0 := @this: android.security.keystore.AndroidKeyStoreECDSASignatureSpi;

        r0.<android.security.keystore.AndroidKeyStoreECDSASignatureSpi: int mGroupSizeBits> = -1;

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreSignatureSpiBase: void resetAll()>();

        return;
    }

    protected final void resetWhilePreservingInitState()
    {
        android.security.keystore.AndroidKeyStoreECDSASignatureSpi r0;

        r0 := @this: android.security.keystore.AndroidKeyStoreECDSASignatureSpi;

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreSignatureSpiBase: void resetWhilePreservingInitState()>();

        return;
    }
}
