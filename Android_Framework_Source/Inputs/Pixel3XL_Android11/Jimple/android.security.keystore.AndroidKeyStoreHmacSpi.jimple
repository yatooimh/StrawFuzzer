public abstract class android.security.keystore.AndroidKeyStoreHmacSpi extends javax.crypto.MacSpi implements android.security.keystore.KeyStoreCryptoOperation
{
    private android.security.keystore.KeyStoreCryptoOperationChunkedStreamer mChunkedStreamer;
    private android.security.keystore.AndroidKeyStoreSecretKey mKey;
    private final android.security.KeyStore mKeyStore;
    private final int mKeymasterDigest;
    private final int mMacSizeBits;
    private long mOperationHandle;
    private android.os.IBinder mOperationToken;

    protected void <init>(int)
    {
        android.security.keystore.AndroidKeyStoreHmacSpi r0;
        int i0, $i1;
        android.security.KeyStore $r1;

        r0 := @this: android.security.keystore.AndroidKeyStoreHmacSpi;

        i0 := @parameter0: int;

        specialinvoke r0.<javax.crypto.MacSpi: void <init>()>();

        $r1 = staticinvoke <android.security.KeyStore: android.security.KeyStore getInstance()>();

        r0.<android.security.keystore.AndroidKeyStoreHmacSpi: android.security.KeyStore mKeyStore> = $r1;

        r0.<android.security.keystore.AndroidKeyStoreHmacSpi: int mKeymasterDigest> = i0;

        $i1 = staticinvoke <android.security.keystore.KeymasterUtils: int getDigestOutputSizeBits(int)>(i0);

        r0.<android.security.keystore.AndroidKeyStoreHmacSpi: int mMacSizeBits> = $i1;

        return;
    }

    private void ensureKeystoreOperationInitialized() throws java.security.InvalidKeyException
    {
        android.security.keystore.AndroidKeyStoreHmacSpi r0;
        android.security.keystore.KeyStoreCryptoOperationChunkedStreamer $r1, $r15;
        android.security.keystore.AndroidKeyStoreSecretKey $r2, $r5, $r8, $r11;
        java.lang.IllegalStateException $r3;
        android.security.keymaster.KeymasterArguments $r4;
        int $i0, $i1, $i3, $i5;
        long $l2, $l4, $l6;
        android.security.KeyStore $r6, $r12, $r17;
        java.lang.String $r7;
        android.security.keystore.KeyStoreConnectException $r9;
        android.os.IBinder $r10, r21;
        java.security.ProviderException $r13, $r14;
        byte $b7;
        android.security.keystore.KeyStoreCryptoOperationChunkedStreamer$MainDataStream $r16;
        android.security.keymaster.OperationResult r19;
        java.security.InvalidKeyException r20;

        r0 := @this: android.security.keystore.AndroidKeyStoreHmacSpi;

        $r1 = r0.<android.security.keystore.AndroidKeyStoreHmacSpi: android.security.keystore.KeyStoreCryptoOperationChunkedStreamer mChunkedStreamer>;

        if $r1 == null goto label1;

        return;

     label1:
        $r2 = r0.<android.security.keystore.AndroidKeyStoreHmacSpi: android.security.keystore.AndroidKeyStoreSecretKey mKey>;

        if $r2 == null goto label6;

        $r4 = new android.security.keymaster.KeymasterArguments;

        specialinvoke $r4.<android.security.keymaster.KeymasterArguments: void <init>()>();

        virtualinvoke $r4.<android.security.keymaster.KeymasterArguments: void addEnum(int,int)>(268435458, 128);

        $i0 = r0.<android.security.keystore.AndroidKeyStoreHmacSpi: int mKeymasterDigest>;

        virtualinvoke $r4.<android.security.keymaster.KeymasterArguments: void addEnum(int,int)>(536870917, $i0);

        $i1 = r0.<android.security.keystore.AndroidKeyStoreHmacSpi: int mMacSizeBits>;

        $l2 = (long) $i1;

        virtualinvoke $r4.<android.security.keymaster.KeymasterArguments: void addUnsignedInt(int,long)>(805307371, $l2);

        $r6 = r0.<android.security.keystore.AndroidKeyStoreHmacSpi: android.security.KeyStore mKeyStore>;

        $r5 = r0.<android.security.keystore.AndroidKeyStoreHmacSpi: android.security.keystore.AndroidKeyStoreSecretKey mKey>;

        $r7 = virtualinvoke $r5.<android.security.keystore.AndroidKeyStoreSecretKey: java.lang.String getAlias()>();

        $r8 = r0.<android.security.keystore.AndroidKeyStoreHmacSpi: android.security.keystore.AndroidKeyStoreSecretKey mKey>;

        $i3 = virtualinvoke $r8.<android.security.keystore.AndroidKeyStoreSecretKey: int getUid()>();

        r19 = virtualinvoke $r6.<android.security.KeyStore: android.security.keymaster.OperationResult begin(java.lang.String,int,boolean,android.security.keymaster.KeymasterArguments,byte[],int)>($r7, 2, 1, $r4, null, $i3);

        if r19 == null goto label5;

        $r10 = r19.<android.security.keymaster.OperationResult: android.os.IBinder token>;

        r0.<android.security.keystore.AndroidKeyStoreHmacSpi: android.os.IBinder mOperationToken> = $r10;

        $l4 = r19.<android.security.keymaster.OperationResult: long operationHandle>;

        r0.<android.security.keystore.AndroidKeyStoreHmacSpi: long mOperationHandle> = $l4;

        $r12 = r0.<android.security.keystore.AndroidKeyStoreHmacSpi: android.security.KeyStore mKeyStore>;

        $r11 = r0.<android.security.keystore.AndroidKeyStoreHmacSpi: android.security.keystore.AndroidKeyStoreSecretKey mKey>;

        $i5 = r19.<android.security.keymaster.OperationResult: int resultCode>;

        r20 = staticinvoke <android.security.keystore.KeyStoreCryptoOperationUtils: java.security.InvalidKeyException getInvalidKeyExceptionForInit(android.security.KeyStore,android.security.keystore.AndroidKeyStoreKey,int)>($r12, $r11, $i5);

        if r20 != null goto label4;

        r21 = r0.<android.security.keystore.AndroidKeyStoreHmacSpi: android.os.IBinder mOperationToken>;

        if r21 == null goto label3;

        $l6 = r0.<android.security.keystore.AndroidKeyStoreHmacSpi: long mOperationHandle>;

        $b7 = $l6 cmp 0L;

        if $b7 == 0 goto label2;

        $r15 = new android.security.keystore.KeyStoreCryptoOperationChunkedStreamer;

        $r16 = new android.security.keystore.KeyStoreCryptoOperationChunkedStreamer$MainDataStream;

        $r17 = r0.<android.security.keystore.AndroidKeyStoreHmacSpi: android.security.KeyStore mKeyStore>;

        specialinvoke $r16.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer$MainDataStream: void <init>(android.security.KeyStore,android.os.IBinder)>($r17, r21);

        specialinvoke $r15.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: void <init>(android.security.keystore.KeyStoreCryptoOperationChunkedStreamer$Stream)>($r16);

        r0.<android.security.keystore.AndroidKeyStoreHmacSpi: android.security.keystore.KeyStoreCryptoOperationChunkedStreamer mChunkedStreamer> = $r15;

        return;

     label2:
        $r14 = new java.security.ProviderException;

        specialinvoke $r14.<java.security.ProviderException: void <init>(java.lang.String)>("Keystore returned invalid operation handle");

        throw $r14;

     label3:
        $r13 = new java.security.ProviderException;

        specialinvoke $r13.<java.security.ProviderException: void <init>(java.lang.String)>("Keystore returned null operation token");

        throw $r13;

     label4:
        throw r20;

     label5:
        $r9 = new android.security.keystore.KeyStoreConnectException;

        specialinvoke $r9.<android.security.keystore.KeyStoreConnectException: void <init>()>();

        throw $r9;

     label6:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not initialized");

        throw $r3;
    }

    private void init(java.security.Key, java.security.spec.AlgorithmParameterSpec) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        android.security.keystore.AndroidKeyStoreHmacSpi r0;
        java.security.InvalidKeyException $r1, $r5;
        boolean $z0;
        java.lang.StringBuilder $r2, $r8;
        java.lang.String $r6, $r12;
        android.security.keystore.AndroidKeyStoreSecretKey $r7;
        java.security.InvalidAlgorithmParameterException $r11;
        java.security.Key r13;
        java.security.spec.AlgorithmParameterSpec r14;

        r0 := @this: android.security.keystore.AndroidKeyStoreHmacSpi;

        r13 := @parameter0: java.security.Key;

        r14 := @parameter1: java.security.spec.AlgorithmParameterSpec;

        if r13 == null goto label3;

        $z0 = r13 instanceof android.security.keystore.AndroidKeyStoreSecretKey;

        if $z0 == 0 goto label2;

        $r7 = (android.security.keystore.AndroidKeyStoreSecretKey) r13;

        r0.<android.security.keystore.AndroidKeyStoreHmacSpi: android.security.keystore.AndroidKeyStoreSecretKey mKey> = $r7;

        if r14 != null goto label1;

        return;

     label1:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported algorithm parameters: ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r14);

        $r11 = new java.security.InvalidAlgorithmParameterException;

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r12);

        throw $r11;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Only Android KeyStore secret keys supported. Key: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r13);

        $r5 = new java.security.InvalidKeyException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label3:
        $r1 = new java.security.InvalidKeyException;

        specialinvoke $r1.<java.security.InvalidKeyException: void <init>(java.lang.String)>("key == null");

        throw $r1;
    }

    private void resetAll()
    {
        android.security.keystore.AndroidKeyStoreHmacSpi r0;
        android.os.IBinder r1;
        android.security.KeyStore $r2;

        r0 := @this: android.security.keystore.AndroidKeyStoreHmacSpi;

        r0.<android.security.keystore.AndroidKeyStoreHmacSpi: android.security.keystore.AndroidKeyStoreSecretKey mKey> = null;

        r1 = r0.<android.security.keystore.AndroidKeyStoreHmacSpi: android.os.IBinder mOperationToken>;

        if r1 == null goto label1;

        $r2 = r0.<android.security.keystore.AndroidKeyStoreHmacSpi: android.security.KeyStore mKeyStore>;

        virtualinvoke $r2.<android.security.KeyStore: int abort(android.os.IBinder)>(r1);

     label1:
        r0.<android.security.keystore.AndroidKeyStoreHmacSpi: android.os.IBinder mOperationToken> = null;

        r0.<android.security.keystore.AndroidKeyStoreHmacSpi: long mOperationHandle> = 0L;

        r0.<android.security.keystore.AndroidKeyStoreHmacSpi: android.security.keystore.KeyStoreCryptoOperationChunkedStreamer mChunkedStreamer> = null;

        return;
    }

    private void resetWhilePreservingInitState()
    {
        android.security.keystore.AndroidKeyStoreHmacSpi r0;
        android.os.IBinder r1;
        android.security.KeyStore $r2;

        r0 := @this: android.security.keystore.AndroidKeyStoreHmacSpi;

        r1 = r0.<android.security.keystore.AndroidKeyStoreHmacSpi: android.os.IBinder mOperationToken>;

        if r1 == null goto label1;

        $r2 = r0.<android.security.keystore.AndroidKeyStoreHmacSpi: android.security.KeyStore mKeyStore>;

        virtualinvoke $r2.<android.security.KeyStore: int abort(android.os.IBinder)>(r1);

     label1:
        r0.<android.security.keystore.AndroidKeyStoreHmacSpi: android.os.IBinder mOperationToken> = null;

        r0.<android.security.keystore.AndroidKeyStoreHmacSpi: long mOperationHandle> = 0L;

        r0.<android.security.keystore.AndroidKeyStoreHmacSpi: android.security.keystore.KeyStoreCryptoOperationChunkedStreamer mChunkedStreamer> = null;

        return;
    }

    protected byte[] engineDoFinal()
    {
        android.security.keystore.AndroidKeyStoreHmacSpi r0;
        android.security.keystore.KeyStoreCryptoOperationChunkedStreamer $r1;
        android.security.KeyStoreException $r2;
        java.security.ProviderException $r3, $r5;
        java.lang.Throwable $r4;
        byte[] r6;

        r0 := @this: android.security.keystore.AndroidKeyStoreHmacSpi;

     label1:
        specialinvoke r0.<android.security.keystore.AndroidKeyStoreHmacSpi: void ensureKeystoreOperationInitialized()>();

     label2:
        $r1 = r0.<android.security.keystore.AndroidKeyStoreHmacSpi: android.security.keystore.KeyStoreCryptoOperationChunkedStreamer mChunkedStreamer>;

        r6 = virtualinvoke $r1.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: byte[] doFinal(byte[],int,int,byte[],byte[])>(null, 0, 0, null, null);

     label3:
        specialinvoke r0.<android.security.keystore.AndroidKeyStoreHmacSpi: void resetWhilePreservingInitState()>();

        return r6;

     label4:
        $r2 := @caughtexception;

        $r3 = new java.security.ProviderException;

        specialinvoke $r3.<java.security.ProviderException: void <init>(java.lang.String,java.lang.Throwable)>("Keystore operation failed", $r2);

        throw $r3;

     label5:
        $r4 := @caughtexception;

        $r5 = new java.security.ProviderException;

        specialinvoke $r5.<java.security.ProviderException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to reinitialize MAC", $r4);

        throw $r5;

        catch java.security.InvalidKeyException from label1 to label2 with label5;
        catch android.security.KeyStoreException from label2 to label3 with label4;
    }

    protected int engineGetMacLength()
    {
        android.security.keystore.AndroidKeyStoreHmacSpi r0;
        int $i0, $i1, $i2;

        r0 := @this: android.security.keystore.AndroidKeyStoreHmacSpi;

        $i0 = r0.<android.security.keystore.AndroidKeyStoreHmacSpi: int mMacSizeBits>;

        $i1 = $i0 + 7;

        $i2 = $i1 / 8;

        return $i2;
    }

    protected void engineInit(java.security.Key, java.security.spec.AlgorithmParameterSpec) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        android.security.keystore.AndroidKeyStoreHmacSpi r0;
        java.security.spec.AlgorithmParameterSpec r1;
        java.lang.Throwable $r2;
        java.security.Key r3;

        r0 := @this: android.security.keystore.AndroidKeyStoreHmacSpi;

        r3 := @parameter0: java.security.Key;

        r1 := @parameter1: java.security.spec.AlgorithmParameterSpec;

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreHmacSpi: void resetAll()>();

     label1:
        specialinvoke r0.<android.security.keystore.AndroidKeyStoreHmacSpi: void init(java.security.Key,java.security.spec.AlgorithmParameterSpec)>(r3, r1);

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreHmacSpi: void ensureKeystoreOperationInitialized()>();

     label2:
        goto label3;

     label3:
        return;

     label4:
        $r2 := @caughtexception;

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreHmacSpi: void resetAll()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    protected void engineReset()
    {
        android.security.keystore.AndroidKeyStoreHmacSpi r0;

        r0 := @this: android.security.keystore.AndroidKeyStoreHmacSpi;

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreHmacSpi: void resetWhilePreservingInitState()>();

        return;
    }

    protected void engineUpdate(byte)
    {
        android.security.keystore.AndroidKeyStoreHmacSpi r0;
        byte b0;
        byte[] $r1;

        r0 := @this: android.security.keystore.AndroidKeyStoreHmacSpi;

        b0 := @parameter0: byte;

        $r1 = newarray (byte)[1];

        $r1[0] = b0;

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreHmacSpi: void engineUpdate(byte[],int,int)>($r1, 0, 1);

        return;
    }

    protected void engineUpdate(byte[], int, int)
    {
        android.security.keystore.AndroidKeyStoreHmacSpi r0;
        int i0, i1, $i2;
        android.security.keystore.KeyStoreCryptoOperationChunkedStreamer $r1;
        java.security.ProviderException $r2, $r4, $r6;
        android.security.KeyStoreException $r3;
        java.lang.Throwable $r5;
        byte[] r7, r8;

        r0 := @this: android.security.keystore.AndroidKeyStoreHmacSpi;

        r7 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

     label1:
        specialinvoke r0.<android.security.keystore.AndroidKeyStoreHmacSpi: void ensureKeystoreOperationInitialized()>();

     label2:
        $r1 = r0.<android.security.keystore.AndroidKeyStoreHmacSpi: android.security.keystore.KeyStoreCryptoOperationChunkedStreamer mChunkedStreamer>;

        r8 = virtualinvoke $r1.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: byte[] update(byte[],int,int)>(r7, i0, i1);

     label3:
        if r8 == null goto label5;

        $i2 = lengthof r8;

        if $i2 != 0 goto label4;

        goto label5;

     label4:
        $r2 = new java.security.ProviderException;

        specialinvoke $r2.<java.security.ProviderException: void <init>(java.lang.String)>("Update operation unexpectedly produced output");

        throw $r2;

     label5:
        return;

     label6:
        $r3 := @caughtexception;

        $r4 = new java.security.ProviderException;

        specialinvoke $r4.<java.security.ProviderException: void <init>(java.lang.String,java.lang.Throwable)>("Keystore operation failed", $r3);

        throw $r4;

     label7:
        $r5 := @caughtexception;

        $r6 = new java.security.ProviderException;

        specialinvoke $r6.<java.security.ProviderException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to reinitialize MAC", $r5);

        throw $r6;

        catch java.security.InvalidKeyException from label1 to label2 with label7;
        catch android.security.KeyStoreException from label2 to label3 with label6;
    }

    public void finalize() throws java.lang.Throwable
    {
        android.security.keystore.AndroidKeyStoreHmacSpi r0;
        android.security.KeyStore $r1;
        java.lang.Throwable $r2;
        android.os.IBinder r3;

        r0 := @this: android.security.keystore.AndroidKeyStoreHmacSpi;

     label1:
        r3 = r0.<android.security.keystore.AndroidKeyStoreHmacSpi: android.os.IBinder mOperationToken>;

     label2:
        if r3 == null goto label4;

     label3:
        $r1 = r0.<android.security.keystore.AndroidKeyStoreHmacSpi: android.security.KeyStore mKeyStore>;

        virtualinvoke $r1.<android.security.KeyStore: int abort(android.os.IBinder)>(r3);

     label4:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label5:
        $r2 := @caughtexception;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public long getOperationHandle()
    {
        android.security.keystore.AndroidKeyStoreHmacSpi r0;
        long $l0;

        r0 := @this: android.security.keystore.AndroidKeyStoreHmacSpi;

        $l0 = r0.<android.security.keystore.AndroidKeyStoreHmacSpi: long mOperationHandle>;

        return $l0;
    }
}
