public abstract class android.security.keystore.AndroidKeyStoreKeyGeneratorSpi extends javax.crypto.KeyGeneratorSpi
{
    private final int mDefaultKeySizeBits;
    protected int mKeySizeBits;
    private final android.security.KeyStore mKeyStore;
    private final int mKeymasterAlgorithm;
    private int[] mKeymasterBlockModes;
    private final int mKeymasterDigest;
    private int[] mKeymasterDigests;
    private int[] mKeymasterPaddings;
    private int[] mKeymasterPurposes;
    private java.security.SecureRandom mRng;
    private android.security.keystore.KeyGenParameterSpec mSpec;

    protected void <init>(int, int)
    {
        android.security.keystore.AndroidKeyStoreKeyGeneratorSpi r0;
        int i0, i1;

        r0 := @this: android.security.keystore.AndroidKeyStoreKeyGeneratorSpi;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: void <init>(int,int,int)>(i0, -1, i1);

        return;
    }

    protected void <init>(int, int, int)
    {
        android.security.keystore.AndroidKeyStoreKeyGeneratorSpi r0;
        int i0, i1, i2;
        android.security.KeyStore $r1;
        java.lang.IllegalArgumentException $r2, $r3;

        r0 := @this: android.security.keystore.AndroidKeyStoreKeyGeneratorSpi;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        specialinvoke r0.<javax.crypto.KeyGeneratorSpi: void <init>()>();

        $r1 = staticinvoke <android.security.KeyStore: android.security.KeyStore getInstance()>();

        r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: android.security.KeyStore mKeyStore> = $r1;

        r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: int mKeymasterAlgorithm> = i0;

        r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: int mKeymasterDigest> = i1;

        r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: int mDefaultKeySizeBits> = i2;

        if i2 <= 0 goto label3;

        if i0 != 128 goto label2;

        if i1 == -1 goto label1;

        goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Digest algorithm must be specified for HMAC key");

        throw $r3;

     label2:
        return;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Default key size must be positive");

        throw $r2;
    }

    private void resetAll()
    {
        android.security.keystore.AndroidKeyStoreKeyGeneratorSpi r0;

        r0 := @this: android.security.keystore.AndroidKeyStoreKeyGeneratorSpi;

        r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: android.security.keystore.KeyGenParameterSpec mSpec> = null;

        r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: java.security.SecureRandom mRng> = null;

        r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: int mKeySizeBits> = -1;

        r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: int[] mKeymasterPurposes> = null;

        r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: int[] mKeymasterPaddings> = null;

        r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: int[] mKeymasterBlockModes> = null;

        return;
    }

    protected javax.crypto.SecretKey engineGenerateKey()
    {
        android.security.keystore.AndroidKeyStoreKeyGeneratorSpi r0;
        android.security.keystore.KeyGenParameterSpec r1;
        java.lang.IllegalStateException $r4;
        android.security.keymaster.KeymasterArguments $r5;
        int $i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i15, i17;
        long $l1;
        int[] $r6, $r7, $r8, $r9, $r10, $r11;
        java.util.Date $r12, $r13, $r14;
        boolean $z0, $z3, $z5;
        java.lang.StringBuilder $r15;
        java.lang.String $r17, $r21, $r29, r34, r37;
        android.security.keymaster.KeyCharacteristics $r19;
        android.security.KeyStore $r20, $r22, $r28;
        android.security.keystore.AndroidKeyStoreSecretKey $r23;
        android.security.KeyStoreException $r26;
        java.lang.Throwable $r27, $r30;
        java.security.SecureRandom $r31;
        byte[] r32;
        byte b16;
        android.security.keystore.StrongBoxUnavailableException r35;
        java.security.ProviderException r36, r40;

        r0 := @this: android.security.keystore.AndroidKeyStoreKeyGeneratorSpi;

        r1 = r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: android.security.keystore.KeyGenParameterSpec mSpec>;

        if r1 == null goto label15;

        $r5 = new android.security.keymaster.KeymasterArguments;

        specialinvoke $r5.<android.security.keymaster.KeymasterArguments: void <init>()>();

        $i0 = r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: int mKeySizeBits>;

        $l1 = (long) $i0;

        virtualinvoke $r5.<android.security.keymaster.KeymasterArguments: void addUnsignedInt(int,long)>(805306371, $l1);

        $i2 = r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: int mKeymasterAlgorithm>;

        virtualinvoke $r5.<android.security.keymaster.KeymasterArguments: void addEnum(int,int)>(268435458, $i2);

        $r6 = r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: int[] mKeymasterPurposes>;

        virtualinvoke $r5.<android.security.keymaster.KeymasterArguments: void addEnums(int,int[])>(536870913, $r6);

        $r7 = r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: int[] mKeymasterBlockModes>;

        virtualinvoke $r5.<android.security.keymaster.KeymasterArguments: void addEnums(int,int[])>(536870916, $r7);

        $r8 = r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: int[] mKeymasterPaddings>;

        virtualinvoke $r5.<android.security.keymaster.KeymasterArguments: void addEnums(int,int[])>(536870918, $r8);

        $r9 = r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: int[] mKeymasterDigests>;

        virtualinvoke $r5.<android.security.keymaster.KeymasterArguments: void addEnums(int,int[])>(536870917, $r9);

        staticinvoke <android.security.keystore.KeymasterUtils: void addUserAuthArgs(android.security.keymaster.KeymasterArguments,android.security.keystore.UserAuthArgs)>($r5, r1);

        $i3 = r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: int mKeymasterAlgorithm>;

        $r11 = r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: int[] mKeymasterBlockModes>;

        $r10 = r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: int[] mKeymasterDigests>;

        staticinvoke <android.security.keystore.KeymasterUtils: void addMinMacLengthAuthorizationIfNecessary(android.security.keymaster.KeymasterArguments,int,int[],int[])>($r5, $i3, $r11, $r10);

        $r12 = virtualinvoke r1.<android.security.keystore.KeyGenParameterSpec: java.util.Date getKeyValidityStart()>();

        virtualinvoke $r5.<android.security.keymaster.KeymasterArguments: void addDateIfNotNull(int,java.util.Date)>(1610613136, $r12);

        $r13 = virtualinvoke r1.<android.security.keystore.KeyGenParameterSpec: java.util.Date getKeyValidityForOriginationEnd()>();

        virtualinvoke $r5.<android.security.keymaster.KeymasterArguments: void addDateIfNotNull(int,java.util.Date)>(1610613137, $r13);

        $r14 = virtualinvoke r1.<android.security.keystore.KeyGenParameterSpec: java.util.Date getKeyValidityForConsumptionEnd()>();

        virtualinvoke $r5.<android.security.keymaster.KeymasterArguments: void addDateIfNotNull(int,java.util.Date)>(1610613138, $r14);

        $i4 = virtualinvoke r1.<android.security.keystore.KeyGenParameterSpec: int getPurposes()>();

        $i5 = $i4 & 1;

        if $i5 == 0 goto label01;

        $z3 = virtualinvoke r1.<android.security.keystore.KeyGenParameterSpec: boolean isRandomizedEncryptionRequired()>();

        if $z3 != 0 goto label01;

        virtualinvoke $r5.<android.security.keymaster.KeymasterArguments: void addBoolean(int)>(1879048199);

     label01:
        $r31 = r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: java.security.SecureRandom mRng>;

        $i13 = r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: int mKeySizeBits>;

        $i14 = $i13 + 7;

        $i15 = $i14 / 8;

        r32 = staticinvoke <android.security.keystore.KeyStoreCryptoOperationUtils: byte[] getRandomBytesToMixIntoKeystoreRng(java.security.SecureRandom,int)>($r31, $i15);

        b16 = 0;

        $z5 = virtualinvoke r1.<android.security.keystore.KeyGenParameterSpec: boolean isStrongBoxBacked()>();

        if $z5 == 0 goto label02;

        b16 = 0 | 16;

     label02:
        $z0 = virtualinvoke r1.<android.security.keystore.KeyGenParameterSpec: boolean isCriticalToDeviceEncryption()>();

        if $z0 == 0 goto label03;

        b16 = b16 | 8;

        goto label03;

     label03:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRPKEY_");

        $r17 = virtualinvoke r1.<android.security.keystore.KeyGenParameterSpec: java.lang.String getKeystoreAlias()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        r34 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r19 = new android.security.keymaster.KeyCharacteristics;

        specialinvoke $r19.<android.security.keymaster.KeyCharacteristics: void <init>()>();

     label04:
        $r20 = r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: android.security.KeyStore mKeyStore>;

        $r21 = virtualinvoke r1.<android.security.keystore.KeyGenParameterSpec: java.lang.String getKeystoreAlias()>();

        $i6 = virtualinvoke r1.<android.security.keystore.KeyGenParameterSpec: int getUid()>();

        staticinvoke <android.security.Credentials: boolean deleteAllTypesForAlias(android.security.KeyStore,java.lang.String,int)>($r20, $r21, $i6);

        $r22 = r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: android.security.KeyStore mKeyStore>;

        $i7 = virtualinvoke r1.<android.security.keystore.KeyGenParameterSpec: int getUid()>();

        i17 = virtualinvoke $r22.<android.security.KeyStore: int generateKey(java.lang.String,android.security.keymaster.KeymasterArguments,byte[],int,int,android.security.keymaster.KeyCharacteristics)>(r34, $r5, r32, $i7, b16, $r19);

     label05:
        if i17 == 1 goto label08;

        if i17 != -68 goto label07;

     label06:
        r35 = new android.security.keystore.StrongBoxUnavailableException;

        specialinvoke r35.<android.security.keystore.StrongBoxUnavailableException: void <init>(java.lang.String)>("Failed to generate key");

        throw r35;

     label07:
        r36 = new java.security.ProviderException;

        $r26 = staticinvoke <android.security.KeyStore: android.security.KeyStoreException getKeyStoreException(int)>(i17);

        specialinvoke r36.<java.security.ProviderException: void <init>(java.lang.String,java.lang.Throwable)>("Keystore operation failed", $r26);

        throw r36;

     label08:
        $i9 = r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: int mKeymasterAlgorithm>;

        $i8 = r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: int mKeymasterDigest>;

        r37 = staticinvoke <android.security.keystore.KeyProperties$KeyAlgorithm: java.lang.String fromKeymasterSecretKeyAlgorithm(int,int)>($i9, $i8);

     label09:
        $r23 = new android.security.keystore.AndroidKeyStoreSecretKey;

        $i10 = virtualinvoke r1.<android.security.keystore.KeyGenParameterSpec: int getUid()>();

        specialinvoke $r23.<android.security.keystore.AndroidKeyStoreSecretKey: void <init>(java.lang.String,int,java.lang.String)>(r34, $i10, r37);

     label10:
        goto label11;

     label11:
        return $r23;

     label12:
        $r30 := @caughtexception;

     label13:
        r40 = new java.security.ProviderException;

        specialinvoke r40.<java.security.ProviderException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to obtain JCA secret key algorithm name", $r30);

        throw r40;

     label14:
        $r27 := @caughtexception;

        $r28 = r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: android.security.KeyStore mKeyStore>;

        $r29 = virtualinvoke r1.<android.security.keystore.KeyGenParameterSpec: java.lang.String getKeystoreAlias()>();

        $i12 = virtualinvoke r1.<android.security.keystore.KeyGenParameterSpec: int getUid()>();

        staticinvoke <android.security.Credentials: boolean deleteAllTypesForAlias(android.security.KeyStore,java.lang.String,int)>($r28, $r29, $i12);

        throw $r27;

     label15:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not initialized");

        throw $r4;

        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.IllegalArgumentException from label08 to label09 with label12;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label13 to label14 with label14;
    }

    protected void engineInit(int, java.security.SecureRandom)
    {
        android.security.keystore.AndroidKeyStoreKeyGeneratorSpi r0;
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.Class $r3;
        java.lang.String $r4, $r8;
        java.lang.UnsupportedOperationException $r7;
        java.security.SecureRandom r9;

        r0 := @this: android.security.keystore.AndroidKeyStoreKeyGeneratorSpi;

        i0 := @parameter0: int;

        r9 := @parameter1: java.security.SecureRandom;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot initialize without a ");

        $r3 = class "Landroid/security/keystore/KeyGenParameterSpec;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" parameter");

        $r7 = new java.lang.UnsupportedOperationException;

        $r8 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r8);

        throw $r7;
    }

    protected void engineInit(java.security.SecureRandom)
    {
        android.security.keystore.AndroidKeyStoreKeyGeneratorSpi r0;
        java.lang.StringBuilder $r1;
        java.lang.Class $r3;
        java.lang.String $r4, $r8;
        java.lang.UnsupportedOperationException $r7;
        java.security.SecureRandom r9;

        r0 := @this: android.security.keystore.AndroidKeyStoreKeyGeneratorSpi;

        r9 := @parameter0: java.security.SecureRandom;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot initialize without a ");

        $r3 = class "Landroid/security/keystore/KeyGenParameterSpec;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" parameter");

        $r7 = new java.lang.UnsupportedOperationException;

        $r8 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r8);

        throw $r7;
    }

    protected void engineInit(java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidAlgorithmParameterException
    {
        android.security.keystore.AndroidKeyStoreKeyGeneratorSpi r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19, i20, $i21;
        java.security.InvalidAlgorithmParameterException r1, r50, r52, r55, r57, r59, r60, r62, r64, r65;
        java.lang.Class $r3, $r39;
        java.lang.String $r4, $r7, $r8, $r11, $r14, $r31, $r34, $r36, $r40, $r43;
        boolean $z0, $z1, $z2, $z3, $z4;
        int[] $r15, $r17, $r20, $r21, $r23, $r24, r49, r53;
        java.lang.String[] $r16, $r18, $r19, $r22, $r25, $r27;
        java.util.List $r28;
        java.lang.Throwable $r44, $r45;
        java.security.spec.AlgorithmParameterSpec r46;
        java.security.SecureRandom r47;
        android.security.keystore.KeyGenParameterSpec r48;
        java.lang.StringBuilder r51, r54, r61, r63, r66;
        android.security.keymaster.KeymasterArguments r56;

        r0 := @this: android.security.keystore.AndroidKeyStoreKeyGeneratorSpi;

        r46 := @parameter0: java.security.spec.AlgorithmParameterSpec;

        r47 := @parameter1: java.security.SecureRandom;

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: void resetAll()>();

        if r46 == null goto label33;

     label01:
        $z0 = r46 instanceof android.security.keystore.KeyGenParameterSpec;

        if $z0 == 0 goto label33;

        r48 = (android.security.keystore.KeyGenParameterSpec) r46;

        $r8 = virtualinvoke r48.<android.security.keystore.KeyGenParameterSpec: java.lang.String getKeystoreAlias()>();

        if $r8 == null goto label32;

        r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: java.security.SecureRandom mRng> = r47;

        r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: android.security.keystore.KeyGenParameterSpec mSpec> = r48;

        $i2 = virtualinvoke r48.<android.security.keystore.KeyGenParameterSpec: int getKeySize()>();

        if $i2 == -1 goto label03;

        i19 = virtualinvoke r48.<android.security.keystore.KeyGenParameterSpec: int getKeySize()>();

     label02:
        goto label04;

     label03:
        i19 = r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: int mDefaultKeySizeBits>;

     label04:
        r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: int mKeySizeBits> = i19;

     label05:
        if i19 <= 0 goto label31;

        $i4 = i19 % 8;

        if $i4 != 0 goto label30;

     label06:
        $i6 = virtualinvoke r48.<android.security.keystore.KeyGenParameterSpec: int getPurposes()>();

        $r15 = staticinvoke <android.security.keystore.KeyProperties$Purpose: int[] allToKeymaster(int)>($i6);

        r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: int[] mKeymasterPurposes> = $r15;

     label07:
        $r16 = virtualinvoke r48.<android.security.keystore.KeyGenParameterSpec: java.lang.String[] getEncryptionPaddings()>();

        $r17 = staticinvoke <android.security.keystore.KeyProperties$EncryptionPadding: int[] allToKeymaster(java.lang.String[])>($r16);

        r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: int[] mKeymasterPaddings> = $r17;

        $r18 = virtualinvoke r48.<android.security.keystore.KeyGenParameterSpec: java.lang.String[] getSignaturePaddings()>();

        $i7 = lengthof $r18;

        if $i7 > 0 goto label27;

        $r19 = virtualinvoke r48.<android.security.keystore.KeyGenParameterSpec: java.lang.String[] getBlockModes()>();

        $r20 = staticinvoke <android.security.keystore.KeyProperties$BlockMode: int[] allToKeymaster(java.lang.String[])>($r19);

        r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: int[] mKeymasterBlockModes> = $r20;

        $i8 = virtualinvoke r48.<android.security.keystore.KeyGenParameterSpec: int getPurposes()>();

        $i9 = $i8 & 1;

        if $i9 == 0 goto label13;

        $z3 = virtualinvoke r48.<android.security.keystore.KeyGenParameterSpec: boolean isRandomizedEncryptionRequired()>();

        if $z3 == 0 goto label13;

        r49 = r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: int[] mKeymasterBlockModes>;

        i0 = lengthof r49;

     label08:
        i20 = 0;

     label09:
        if i20 >= i0 goto label13;

        i1 = r49[i20];

     label10:
        $z4 = staticinvoke <android.security.keystore.KeymasterUtils: boolean isKeymasterBlockModeIndCpaCompatibleWithSymmetricCrypto(int)>(i1);

        if $z4 == 0 goto label12;

     label11:
        i20 = i20 + 1;

        goto label09;

     label12:
        r50 = new java.security.InvalidAlgorithmParameterException;

        r51 = new java.lang.StringBuilder;

        specialinvoke r51.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Randomized encryption (IND-CPA) required but may be violated by block mode: ");

        $r36 = staticinvoke <android.security.keystore.KeyProperties$BlockMode: java.lang.String fromKeymaster(int)>(i1);

        virtualinvoke r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        virtualinvoke r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". See ");

        $r39 = class "Landroid/security/keystore/KeyGenParameterSpec;";

        $r40 = virtualinvoke $r39.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        virtualinvoke r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" documentation.");

        $r43 = virtualinvoke r51.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r50.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r43);

        throw r50;

     label13:
        $i21 = r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: int mKeymasterAlgorithm>;

        if $i21 != 33 goto label16;

        $i18 = r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: int mKeySizeBits>;

        if $i18 != 168 goto label15;

     label14:
        goto label16;

     label15:
        r52 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke r52.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("3DES key size must be 168 bits.");

        throw r52;

     label16:
        $i10 = r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: int mKeymasterAlgorithm>;

        if $i10 != 128 goto label21;

        $i11 = r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: int mKeySizeBits>;

        if $i11 < 64 goto label20;

        $i12 = r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: int mKeySizeBits>;

        if $i12 > 512 goto label20;

        $r24 = newarray (int)[1];

        $i13 = r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: int mKeymasterDigest>;

        $r24[0] = $i13;

        r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: int[] mKeymasterDigests> = $r24;

        $z2 = virtualinvoke r48.<android.security.keystore.KeyGenParameterSpec: boolean isDigestsSpecified()>();

        if $z2 == 0 goto label24;

     label17:
        $r25 = virtualinvoke r48.<android.security.keystore.KeyGenParameterSpec: java.lang.String[] getDigests()>();

        r53 = staticinvoke <android.security.keystore.KeyProperties$Digest: int[] allToKeymaster(java.lang.String[])>($r25);

        $i14 = lengthof r53;

        if $i14 != 1 goto label19;

        $i17 = r53[0];

        $i16 = r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: int mKeymasterDigest>;

        if $i17 != $i16 goto label19;

     label18:
        goto label24;

     label19:
        r1 = new java.security.InvalidAlgorithmParameterException;

        r54 = new java.lang.StringBuilder;

        specialinvoke r54.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported digests specification: ");

        $r27 = virtualinvoke r48.<android.security.keystore.KeyGenParameterSpec: java.lang.String[] getDigests()>();

        $r28 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r27);

        virtualinvoke r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r28);

        virtualinvoke r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Only ");

        $i15 = r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: int mKeymasterDigest>;

        $r31 = staticinvoke <android.security.keystore.KeyProperties$Digest: java.lang.String fromKeymaster(int)>($i15);

        virtualinvoke r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        virtualinvoke r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" supported for this HMAC key algorithm");

        $r34 = virtualinvoke r54.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r1.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r34);

        throw r1;

     label20:
        r55 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke r55.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("HMAC key sizes must be within 64-512 bits, inclusive.");

        throw r55;

     label21:
        $z1 = virtualinvoke r48.<android.security.keystore.KeyGenParameterSpec: boolean isDigestsSpecified()>();

        if $z1 == 0 goto label23;

        $r22 = virtualinvoke r48.<android.security.keystore.KeyGenParameterSpec: java.lang.String[] getDigests()>();

        $r23 = staticinvoke <android.security.keystore.KeyProperties$Digest: int[] allToKeymaster(java.lang.String[])>($r22);

        r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: int[] mKeymasterDigests> = $r23;

     label22:
        goto label24;

     label23:
        $r21 = <libcore.util.EmptyArray: int[] INT>;

        r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: int[] mKeymasterDigests> = $r21;

     label24:
        r56 = new android.security.keymaster.KeymasterArguments;

        specialinvoke r56.<android.security.keymaster.KeymasterArguments: void <init>()>();

        staticinvoke <android.security.keystore.KeymasterUtils: void addUserAuthArgs(android.security.keymaster.KeymasterArguments,android.security.keystore.UserAuthArgs)>(r56, r48);

     label25:
        goto label26;

     label26:
        return;

     label27:
        r57 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke r57.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("Signature paddings not supported for symmetric key algorithms");

        throw r57;

     label28:
        $r45 := @caughtexception;

     label29:
        r59 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke r59.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.Throwable)>($r45);

        throw r59;

     label30:
        r60 = new java.security.InvalidAlgorithmParameterException;

        r61 = new java.lang.StringBuilder;

        specialinvoke r61.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Key size must be a multiple of 8: ");

        $i5 = r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: int mKeySizeBits>;

        virtualinvoke r61.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r14 = virtualinvoke r61.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r60.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r14);

        throw r60;

     label31:
        r62 = new java.security.InvalidAlgorithmParameterException;

        r63 = new java.lang.StringBuilder;

        specialinvoke r63.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Key size must be positive: ");

        $i3 = r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: int mKeySizeBits>;

        virtualinvoke r63.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r11 = virtualinvoke r63.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r62.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r11);

        throw r62;

     label32:
        r64 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke r64.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("KeyStore entry alias not provided");

        throw r64;

     label33:
        r65 = new java.security.InvalidAlgorithmParameterException;

        r66 = new java.lang.StringBuilder;

        specialinvoke r66.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot initialize without a ");

        $r3 = class "Landroid/security/keystore/KeyGenParameterSpec;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" parameter");

        $r7 = virtualinvoke r66.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r65.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r7);

        throw r65;

     label34:
        $r44 := @caughtexception;

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreKeyGeneratorSpi: void resetAll()>();

        throw $r44;

        catch java.lang.Throwable from label01 to label02 with label34;
        catch java.lang.Throwable from label03 to label04 with label34;
        catch java.lang.Throwable from label04 to label05 with label34;
        catch java.lang.IllegalStateException from label06 to label07 with label28;
        catch java.lang.IllegalArgumentException from label06 to label07 with label28;
        catch java.lang.Throwable from label06 to label07 with label34;
        catch java.lang.IllegalStateException from label07 to label08 with label28;
        catch java.lang.IllegalArgumentException from label07 to label08 with label28;
        catch java.lang.Throwable from label07 to label08 with label34;
        catch java.lang.IllegalStateException from label10 to label11 with label28;
        catch java.lang.IllegalArgumentException from label10 to label11 with label28;
        catch java.lang.Throwable from label10 to label11 with label34;
        catch java.lang.IllegalStateException from label12 to label13 with label28;
        catch java.lang.IllegalArgumentException from label12 to label13 with label28;
        catch java.lang.Throwable from label12 to label13 with label34;
        catch java.lang.IllegalStateException from label13 to label14 with label28;
        catch java.lang.IllegalArgumentException from label13 to label14 with label28;
        catch java.lang.Throwable from label13 to label14 with label34;
        catch java.lang.IllegalStateException from label15 to label16 with label28;
        catch java.lang.IllegalArgumentException from label15 to label16 with label28;
        catch java.lang.Throwable from label15 to label16 with label34;
        catch java.lang.IllegalStateException from label16 to label17 with label28;
        catch java.lang.IllegalArgumentException from label16 to label17 with label28;
        catch java.lang.Throwable from label16 to label17 with label34;
        catch java.lang.IllegalStateException from label17 to label18 with label28;
        catch java.lang.IllegalArgumentException from label17 to label18 with label28;
        catch java.lang.Throwable from label17 to label18 with label34;
        catch java.lang.IllegalStateException from label19 to label20 with label28;
        catch java.lang.IllegalArgumentException from label19 to label20 with label28;
        catch java.lang.Throwable from label19 to label20 with label34;
        catch java.lang.IllegalStateException from label20 to label21 with label28;
        catch java.lang.IllegalArgumentException from label20 to label21 with label28;
        catch java.lang.Throwable from label20 to label21 with label34;
        catch java.lang.IllegalStateException from label21 to label22 with label28;
        catch java.lang.IllegalArgumentException from label21 to label22 with label28;
        catch java.lang.Throwable from label21 to label22 with label34;
        catch java.lang.IllegalStateException from label23 to label24 with label28;
        catch java.lang.IllegalArgumentException from label23 to label24 with label28;
        catch java.lang.Throwable from label23 to label24 with label34;
        catch java.lang.IllegalStateException from label24 to label25 with label28;
        catch java.lang.IllegalArgumentException from label24 to label25 with label28;
        catch java.lang.Throwable from label24 to label25 with label34;
        catch java.lang.IllegalStateException from label27 to label28 with label28;
        catch java.lang.IllegalArgumentException from label27 to label28 with label28;
        catch java.lang.Throwable from label27 to label28 with label34;
        catch java.lang.Throwable from label29 to label30 with label34;
        catch java.lang.Throwable from label30 to label31 with label34;
        catch java.lang.Throwable from label31 to label32 with label34;
        catch java.lang.Throwable from label32 to label33 with label34;
        catch java.lang.Throwable from label33 to label34 with label34;
    }
}
