public abstract class android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi extends java.security.KeyPairGeneratorSpi
{
    private static final int EC_DEFAULT_KEY_SIZE;
    private static final int RSA_DEFAULT_KEY_SIZE;
    private static final int RSA_MAX_KEY_SIZE;
    private static final int RSA_MIN_KEY_SIZE;
    private static final java.util.List SUPPORTED_EC_NIST_CURVE_NAMES;
    private static final java.util.Map SUPPORTED_EC_NIST_CURVE_NAME_TO_SIZE;
    private static final java.util.List SUPPORTED_EC_NIST_CURVE_SIZES;
    private boolean mEncryptionAtRestRequired;
    private java.lang.String mEntryAlias;
    private int mEntryUid;
    private java.lang.String mJcaKeyAlgorithm;
    private int mKeySizeBits;
    private android.security.KeyStore mKeyStore;
    private int mKeymasterAlgorithm;
    private int[] mKeymasterBlockModes;
    private int[] mKeymasterDigests;
    private int[] mKeymasterEncryptionPaddings;
    private int[] mKeymasterPurposes;
    private int[] mKeymasterSignaturePaddings;
    private final int mOriginalKeymasterAlgorithm;
    private java.math.BigInteger mRSAPublicExponent;
    private java.security.SecureRandom mRng;
    private android.security.keystore.KeyGenParameterSpec mSpec;

    static void <clinit>()
    {
        java.util.HashMap $r0;
        java.util.ArrayList $r1, $r2;
        java.util.Map $r4, $r7, $r9, $r12, $r15, $r17, $r22, r26, r28, r30, r32;
        java.util.List $r18, $r20, $r23, $r25;
        java.util.Set $r19;
        java.util.HashSet $r21;
        java.util.Collection $r24;
        java.lang.Integer r27, r29, r31, r33;

        <android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int RSA_MIN_KEY_SIZE> = 512;

        <android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int RSA_MAX_KEY_SIZE> = 8192;

        <android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int RSA_DEFAULT_KEY_SIZE> = 2048;

        <android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int EC_DEFAULT_KEY_SIZE> = 256;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.util.Map SUPPORTED_EC_NIST_CURVE_NAME_TO_SIZE> = $r0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        <android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.util.List SUPPORTED_EC_NIST_CURVE_NAMES> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        <android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.util.List SUPPORTED_EC_NIST_CURVE_SIZES> = $r2;

        r26 = <android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.util.Map SUPPORTED_EC_NIST_CURVE_NAME_TO_SIZE>;

        r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(224);

        interfaceinvoke r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("p-224", r27);

        $r4 = <android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.util.Map SUPPORTED_EC_NIST_CURVE_NAME_TO_SIZE>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("secp224r1", r27);

        r28 = <android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.util.Map SUPPORTED_EC_NIST_CURVE_NAME_TO_SIZE>;

        r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(256);

        interfaceinvoke r28.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("p-256", r29);

        $r7 = <android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.util.Map SUPPORTED_EC_NIST_CURVE_NAME_TO_SIZE>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("secp256r1", r29);

        $r9 = <android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.util.Map SUPPORTED_EC_NIST_CURVE_NAME_TO_SIZE>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("prime256v1", r29);

        r30 = <android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.util.Map SUPPORTED_EC_NIST_CURVE_NAME_TO_SIZE>;

        r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(384);

        interfaceinvoke r30.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("p-384", r31);

        $r12 = <android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.util.Map SUPPORTED_EC_NIST_CURVE_NAME_TO_SIZE>;

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("secp384r1", r31);

        r32 = <android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.util.Map SUPPORTED_EC_NIST_CURVE_NAME_TO_SIZE>;

        r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(521);

        interfaceinvoke r32.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("p-521", r33);

        $r15 = <android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.util.Map SUPPORTED_EC_NIST_CURVE_NAME_TO_SIZE>;

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("secp521r1", r33);

        $r18 = <android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.util.List SUPPORTED_EC_NIST_CURVE_NAMES>;

        $r17 = <android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.util.Map SUPPORTED_EC_NIST_CURVE_NAME_TO_SIZE>;

        $r19 = interfaceinvoke $r17.<java.util.Map: java.util.Set keySet()>();

        interfaceinvoke $r18.<java.util.List: boolean addAll(java.util.Collection)>($r19);

        $r20 = <android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.util.List SUPPORTED_EC_NIST_CURVE_NAMES>;

        staticinvoke <java.util.Collections: void sort(java.util.List)>($r20);

        $r23 = <android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.util.List SUPPORTED_EC_NIST_CURVE_SIZES>;

        $r21 = new java.util.HashSet;

        $r22 = <android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.util.Map SUPPORTED_EC_NIST_CURVE_NAME_TO_SIZE>;

        $r24 = interfaceinvoke $r22.<java.util.Map: java.util.Collection values()>();

        specialinvoke $r21.<java.util.HashSet: void <init>(java.util.Collection)>($r24);

        interfaceinvoke $r23.<java.util.List: boolean addAll(java.util.Collection)>($r21);

        $r25 = <android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.util.List SUPPORTED_EC_NIST_CURVE_SIZES>;

        staticinvoke <java.util.Collections: void sort(java.util.List)>($r25);

        return;
    }

    protected void <init>(int)
    {
        android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi r0;
        int i0;

        r0 := @this: android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi;

        i0 := @parameter0: int;

        specialinvoke r0.<java.security.KeyPairGeneratorSpi: void <init>()>();

        r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int mKeymasterAlgorithm> = -1;

        r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int mOriginalKeymasterAlgorithm> = i0;

        return;
    }

    private void addAlgorithmSpecificParameters(android.security.keymaster.KeymasterArguments)
    {
        android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi r0;
        int i0, $i1;
        java.math.BigInteger $r1;
        java.lang.StringBuilder $r2;
        java.security.ProviderException $r5;
        java.lang.String $r6;
        android.security.keymaster.KeymasterArguments r7;

        r0 := @this: android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi;

        r7 := @parameter0: android.security.keymaster.KeymasterArguments;

        i0 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int mKeymasterAlgorithm>;

        if i0 == 1 goto label2;

        if i0 != 3 goto label1;

        goto label3;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported algorithm: ");

        $i1 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int mKeymasterAlgorithm>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = new java.security.ProviderException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.security.ProviderException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label2:
        $r1 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.math.BigInteger mRSAPublicExponent>;

        virtualinvoke r7.<android.security.keymaster.KeymasterArguments: void addUnsignedLong(int,java.math.BigInteger)>(1342177480, $r1);

     label3:
        return;
    }

    private static void checkValidKeySize(int, int, boolean) throws java.security.InvalidAlgorithmParameterException
    {
        int i0, i1;
        boolean z0, $z1;
        java.security.InvalidAlgorithmParameterException $r0, $r14, $r20;
        java.lang.StringBuilder $r1, $r8, $r16;
        java.security.ProviderException $r4;
        java.lang.String $r5, $r15, $r21;
        java.util.List $r6, $r12;
        java.lang.Integer $r7;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        if i0 == 1 goto label5;

        if i0 != 3 goto label4;

        if z0 == 0 goto label2;

        if i1 != 256 goto label1;

        goto label2;

     label1:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported StrongBox EC key size: ");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bits. Supported: 256");

        $r20 = new java.security.InvalidAlgorithmParameterException;

        $r21 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r21);

        throw $r20;

     label2:
        $r6 = <android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.util.List SUPPORTED_EC_NIST_CURVE_SIZES>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $z1 = interfaceinvoke $r6.<java.util.List: boolean contains(java.lang.Object)>($r7);

        if $z1 == 0 goto label3;

        goto label6;

     label3:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported EC key size: ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bits. Supported: ");

        $r12 = <android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.util.List SUPPORTED_EC_NIST_CURVE_SIZES>;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = new java.security.InvalidAlgorithmParameterException;

        $r15 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r15);

        throw $r14;

     label4:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported algorithm: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = new java.security.ProviderException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.security.ProviderException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label5:
        if i1 < 512 goto label7;

        if i1 > 8192 goto label7;

     label6:
        return;

     label7:
        $r0 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r0.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("RSA key size must be >= 512 and <= 8192");

        throw $r0;
    }

    private android.security.keymaster.KeymasterArguments constructKeyGenerationArguments()
    {
        android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi r0;
        android.security.keymaster.KeymasterArguments $r2;
        int $i0, $i2;
        long $l1;
        int[] $r3, $r4, $r5, $r6, $r7;
        android.security.keystore.KeyGenParameterSpec $r8, $r9, $r11, $r13, $r15;
        java.util.Date $r10, $r12, $r14;
        boolean $z0;

        r0 := @this: android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi;

        $r2 = new android.security.keymaster.KeymasterArguments;

        specialinvoke $r2.<android.security.keymaster.KeymasterArguments: void <init>()>();

        $i0 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int mKeySizeBits>;

        $l1 = (long) $i0;

        virtualinvoke $r2.<android.security.keymaster.KeymasterArguments: void addUnsignedInt(int,long)>(805306371, $l1);

        $i2 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int mKeymasterAlgorithm>;

        virtualinvoke $r2.<android.security.keymaster.KeymasterArguments: void addEnum(int,int)>(268435458, $i2);

        $r3 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int[] mKeymasterPurposes>;

        virtualinvoke $r2.<android.security.keymaster.KeymasterArguments: void addEnums(int,int[])>(536870913, $r3);

        $r4 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int[] mKeymasterBlockModes>;

        virtualinvoke $r2.<android.security.keymaster.KeymasterArguments: void addEnums(int,int[])>(536870916, $r4);

        $r5 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int[] mKeymasterEncryptionPaddings>;

        virtualinvoke $r2.<android.security.keymaster.KeymasterArguments: void addEnums(int,int[])>(536870918, $r5);

        $r6 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int[] mKeymasterSignaturePaddings>;

        virtualinvoke $r2.<android.security.keymaster.KeymasterArguments: void addEnums(int,int[])>(536870918, $r6);

        $r7 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int[] mKeymasterDigests>;

        virtualinvoke $r2.<android.security.keymaster.KeymasterArguments: void addEnums(int,int[])>(536870917, $r7);

        $r8 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: android.security.keystore.KeyGenParameterSpec mSpec>;

        staticinvoke <android.security.keystore.KeymasterUtils: void addUserAuthArgs(android.security.keymaster.KeymasterArguments,android.security.keystore.UserAuthArgs)>($r2, $r8);

        $r9 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: android.security.keystore.KeyGenParameterSpec mSpec>;

        $r10 = virtualinvoke $r9.<android.security.keystore.KeyGenParameterSpec: java.util.Date getKeyValidityStart()>();

        virtualinvoke $r2.<android.security.keymaster.KeymasterArguments: void addDateIfNotNull(int,java.util.Date)>(1610613136, $r10);

        $r11 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: android.security.keystore.KeyGenParameterSpec mSpec>;

        $r12 = virtualinvoke $r11.<android.security.keystore.KeyGenParameterSpec: java.util.Date getKeyValidityForOriginationEnd()>();

        virtualinvoke $r2.<android.security.keymaster.KeymasterArguments: void addDateIfNotNull(int,java.util.Date)>(1610613137, $r12);

        $r13 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: android.security.keystore.KeyGenParameterSpec mSpec>;

        $r14 = virtualinvoke $r13.<android.security.keystore.KeyGenParameterSpec: java.util.Date getKeyValidityForConsumptionEnd()>();

        virtualinvoke $r2.<android.security.keymaster.KeymasterArguments: void addDateIfNotNull(int,java.util.Date)>(1610613138, $r14);

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: void addAlgorithmSpecificParameters(android.security.keymaster.KeymasterArguments)>($r2);

        $r15 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: android.security.keystore.KeyGenParameterSpec mSpec>;

        $z0 = virtualinvoke $r15.<android.security.keystore.KeyGenParameterSpec: boolean isUniqueIdIncluded()>();

        if $z0 == 0 goto label1;

        virtualinvoke $r2.<android.security.keymaster.KeymasterArguments: void addBoolean(int)>(1879048394);

     label1:
        return $r2;
    }

    private java.lang.Iterable createCertificateChain(java.lang.String, java.security.KeyPair) throws java.security.ProviderException
    {
        android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi r0;
        java.lang.String r1;
        java.security.KeyPair r2;
        byte[] r3, $r6;
        android.security.keystore.KeyGenParameterSpec $r5;
        java.util.Set $r7;
        android.security.keymaster.KeymasterArguments $r8;
        java.lang.Iterable $r9;

        r0 := @this: android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.security.KeyPair;

        $r5 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: android.security.keystore.KeyGenParameterSpec mSpec>;

        r3 = virtualinvoke $r5.<android.security.keystore.KeyGenParameterSpec: byte[] getAttestationChallenge()>();

        if r3 == null goto label1;

        $r8 = new android.security.keymaster.KeymasterArguments;

        specialinvoke $r8.<android.security.keymaster.KeymasterArguments: void <init>()>();

        virtualinvoke $r8.<android.security.keymaster.KeymasterArguments: void addBytes(int,byte[])>(-1879047484, r3);

        $r9 = specialinvoke r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.lang.Iterable getAttestationChain(java.lang.String,java.security.KeyPair,android.security.keymaster.KeymasterArguments)>(r1, r2, $r8);

        return $r9;

     label1:
        $r6 = specialinvoke r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: byte[] generateSelfSignedCertificateBytes(java.security.KeyPair)>(r2);

        $r7 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r6);

        return $r7;
    }

    private void generateKeystoreKeyPair(java.lang.String, android.security.keymaster.KeymasterArguments, byte[], int) throws java.security.ProviderException
    {
        android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi r0;
        java.lang.String r1;
        android.security.keymaster.KeymasterArguments r2;
        byte[] r3;
        android.security.keymaster.KeyCharacteristics $r5;
        int $i0, i1, i2;
        android.security.KeyStore $r6;
        java.security.ProviderException $r7;
        android.security.KeyStoreException $r8;
        android.security.keystore.StrongBoxUnavailableException $r9;

        r0 := @this: android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.security.keymaster.KeymasterArguments;

        r3 := @parameter2: byte[];

        i1 := @parameter3: int;

        $r5 = new android.security.keymaster.KeyCharacteristics;

        specialinvoke $r5.<android.security.keymaster.KeyCharacteristics: void <init>()>();

        $r6 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: android.security.KeyStore mKeyStore>;

        $i0 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int mEntryUid>;

        i2 = virtualinvoke $r6.<android.security.KeyStore: int generateKey(java.lang.String,android.security.keymaster.KeymasterArguments,byte[],int,int,android.security.keymaster.KeyCharacteristics)>(r1, r2, r3, $i0, i1, $r5);

        if i2 == 1 goto label2;

        if i2 != -68 goto label1;

        $r9 = new android.security.keystore.StrongBoxUnavailableException;

        specialinvoke $r9.<android.security.keystore.StrongBoxUnavailableException: void <init>(java.lang.String)>("Failed to generate key pair");

        throw $r9;

     label1:
        $r7 = new java.security.ProviderException;

        $r8 = staticinvoke <android.security.KeyStore: android.security.KeyStoreException getKeyStoreException(int)>(i2);

        specialinvoke $r7.<java.security.ProviderException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to generate key pair", $r8);

        throw $r7;

     label2:
        return;
    }

    private java.security.cert.X509Certificate generateSelfSignedCertificate(java.security.PrivateKey, java.security.PublicKey) throws java.security.cert.CertificateParsingException, java.io.IOException
    {
        android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi r0;
        java.security.PublicKey r1;
        java.lang.String r2;
        android.security.keystore.KeyGenParameterSpec $r3;
        int $i0, $i1;
        java.security.cert.X509Certificate $r4, $r6, r8;
        java.lang.Exception $r5;
        java.security.PrivateKey r7;

        r0 := @this: android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi;

        r7 := @parameter0: java.security.PrivateKey;

        r1 := @parameter1: java.security.PublicKey;

        $i1 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int mKeymasterAlgorithm>;

        $i0 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int mKeySizeBits>;

        $r3 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: android.security.keystore.KeyGenParameterSpec mSpec>;

        r2 = staticinvoke <android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.lang.String getCertificateSignatureAlgorithm(int,int,android.security.keystore.KeyGenParameterSpec)>($i1, $i0, $r3);

        if r2 != null goto label1;

        $r4 = specialinvoke r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.security.cert.X509Certificate generateSelfSignedCertificateWithFakeSignature(java.security.PublicKey)>(r1);

        return $r4;

     label1:
        r8 = specialinvoke r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.security.cert.X509Certificate generateSelfSignedCertificateWithValidSignature(java.security.PrivateKey,java.security.PublicKey,java.lang.String)>(r7, r1, r2);

     label2:
        return r8;

     label3:
        $r5 := @caughtexception;

        $r6 = specialinvoke r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.security.cert.X509Certificate generateSelfSignedCertificateWithFakeSignature(java.security.PublicKey)>(r1);

        return $r6;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private byte[] generateSelfSignedCertificateBytes(java.security.KeyPair) throws java.security.ProviderException
    {
        android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi r0;
        java.security.PrivateKey $r1;
        java.security.PublicKey $r2;
        java.security.cert.X509Certificate $r3;
        java.lang.Throwable $r4, $r6;
        java.security.ProviderException $r5, $r7;
        java.security.KeyPair r8;
        byte[] r9;

        r0 := @this: android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi;

        r8 := @parameter0: java.security.KeyPair;

     label1:
        $r1 = virtualinvoke r8.<java.security.KeyPair: java.security.PrivateKey getPrivate()>();

        $r2 = virtualinvoke r8.<java.security.KeyPair: java.security.PublicKey getPublic()>();

        $r3 = specialinvoke r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.security.cert.X509Certificate generateSelfSignedCertificate(java.security.PrivateKey,java.security.PublicKey)>($r1, $r2);

        r9 = virtualinvoke $r3.<java.security.cert.X509Certificate: byte[] getEncoded()>();

     label2:
        return r9;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.security.ProviderException;

        specialinvoke $r5.<java.security.ProviderException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to obtain encoded form of self-signed certificate", $r4);

        throw $r5;

     label4:
        $r6 := @caughtexception;

        $r7 = new java.security.ProviderException;

        specialinvoke $r7.<java.security.ProviderException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to generate self-signed certificate", $r6);

        throw $r7;

        catch java.io.IOException from label1 to label2 with label4;
        catch java.security.cert.CertificateParsingException from label1 to label2 with label4;
        catch java.security.cert.CertificateEncodingException from label1 to label2 with label3;
    }

    private java.security.cert.X509Certificate generateSelfSignedCertificateWithFakeSignature(java.security.PublicKey) throws java.io.IOException, java.security.cert.CertificateParsingException
    {
        android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi r0;
        int i0, $i1;
        com.android.org.bouncycastle.asn1.DERNull $r3;
        com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier $r4, $r33;
        byte[] $r6, $r15, r44;
        com.android.org.bouncycastle.asn1.ASN1Primitive $r7;
        com.android.org.bouncycastle.asn1.x509.SubjectPublicKeyInfo $r8;
        android.security.keystore.KeyGenParameterSpec $r10, $r13, $r17, $r20;
        java.math.BigInteger $r11;
        javax.security.auth.x500.X500Principal $r14;
        java.util.Date $r18, $r21;
        com.android.org.bouncycastle.asn1.x509.Certificate $r26;
        java.lang.String $r31;
        java.lang.Throwable $r38, $r39;
        java.security.PublicKey r40;
        com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier r42, r53, r60;
        com.android.org.bouncycastle.asn1.x509.TBSCertificate r48;
        com.android.org.bouncycastle.asn1.x509.V3TBSCertificateGenerator r52;
        com.android.org.bouncycastle.asn1.ASN1EncodableVector r54, r66;
        com.android.org.bouncycastle.asn1.DERInteger r55, r56;
        com.android.org.bouncycastle.asn1.DERSequence r57, r68;
        java.lang.StringBuilder r58;
        java.security.ProviderException r59;
        com.android.org.bouncycastle.asn1.ASN1InputStream r61;
        com.android.org.bouncycastle.asn1.ASN1Integer r62;
        com.android.org.bouncycastle.jce.X509Principal r63;
        com.android.org.bouncycastle.asn1.x509.Time r64, r65;
        com.android.org.bouncycastle.asn1.DERBitString r67;
        com.android.org.bouncycastle.jce.provider.X509CertificateObject r69;
        com.android.org.bouncycastle.asn1.ASN1Encodable r70, r71, r72, r75, r76, r77;
        com.android.org.bouncycastle.asn1.x509.X509Name r73, r74;
        java.security.cert.X509Certificate r78;

        r0 := @this: android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi;

        r40 := @parameter0: java.security.PublicKey;

        r52 = new com.android.org.bouncycastle.asn1.x509.V3TBSCertificateGenerator;

        specialinvoke r52.<com.android.org.bouncycastle.asn1.x509.V3TBSCertificateGenerator: void <init>()>();

        i0 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int mKeymasterAlgorithm>;

        if i0 == 1 goto label02;

        if i0 != 3 goto label01;

        r53 = new com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier;

        $r33 = <com.android.org.bouncycastle.asn1.x9.X9ObjectIdentifiers: com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier ecdsa_with_SHA256>;

        specialinvoke r53.<com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier: void <init>(com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier)>($r33);

        r42 = r53;

        r54 = new com.android.org.bouncycastle.asn1.ASN1EncodableVector;

        specialinvoke r54.<com.android.org.bouncycastle.asn1.ASN1EncodableVector: void <init>()>();

        r55 = new com.android.org.bouncycastle.asn1.DERInteger;

        specialinvoke r55.<com.android.org.bouncycastle.asn1.DERInteger: void <init>(long)>(0L);

        r70 = (com.android.org.bouncycastle.asn1.ASN1Encodable) r55;

        virtualinvoke r54.<com.android.org.bouncycastle.asn1.ASN1EncodableVector: void add(com.android.org.bouncycastle.asn1.ASN1Encodable)>(r70);

        r56 = new com.android.org.bouncycastle.asn1.DERInteger;

        specialinvoke r56.<com.android.org.bouncycastle.asn1.DERInteger: void <init>(long)>(0L);

        r71 = (com.android.org.bouncycastle.asn1.ASN1Encodable) r56;

        virtualinvoke r54.<com.android.org.bouncycastle.asn1.ASN1EncodableVector: void add(com.android.org.bouncycastle.asn1.ASN1Encodable)>(r71);

        r57 = new com.android.org.bouncycastle.asn1.DERSequence;

        specialinvoke r57.<com.android.org.bouncycastle.asn1.DERSequence: void <init>()>();

        r44 = virtualinvoke r57.<com.android.org.bouncycastle.asn1.DERSequence: byte[] getEncoded()>();

        goto label03;

     label01:
        r58 = new java.lang.StringBuilder;

        specialinvoke r58.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported key algorithm: ");

        $i1 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int mKeymasterAlgorithm>;

        virtualinvoke r58.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        r59 = new java.security.ProviderException;

        $r31 = virtualinvoke r58.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r59.<java.security.ProviderException: void <init>(java.lang.String)>($r31);

        throw r59;

     label02:
        r60 = new com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier;

        $r4 = <com.android.org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers: com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier sha256WithRSAEncryption>;

        $r3 = <com.android.org.bouncycastle.asn1.DERNull: com.android.org.bouncycastle.asn1.DERNull INSTANCE>;

        r72 = (com.android.org.bouncycastle.asn1.ASN1Encodable) $r3;

        specialinvoke r60.<com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier: void <init>(com.android.org.bouncycastle.asn1.ASN1ObjectIdentifier,com.android.org.bouncycastle.asn1.ASN1Encodable)>($r4, r72);

        r42 = r60;

        r44 = newarray (byte)[1];

     label03:
        r61 = new com.android.org.bouncycastle.asn1.ASN1InputStream;

        $r6 = interfaceinvoke r40.<java.security.PublicKey: byte[] getEncoded()>();

        specialinvoke r61.<com.android.org.bouncycastle.asn1.ASN1InputStream: void <init>(byte[])>($r6);

     label04:
        $r7 = virtualinvoke r61.<com.android.org.bouncycastle.asn1.ASN1InputStream: com.android.org.bouncycastle.asn1.ASN1Primitive readObject()>();

        $r8 = staticinvoke <com.android.org.bouncycastle.asn1.x509.SubjectPublicKeyInfo: com.android.org.bouncycastle.asn1.x509.SubjectPublicKeyInfo getInstance(java.lang.Object)>($r7);

        virtualinvoke r52.<com.android.org.bouncycastle.asn1.x509.V3TBSCertificateGenerator: void setSubjectPublicKeyInfo(com.android.org.bouncycastle.asn1.x509.SubjectPublicKeyInfo)>($r8);

     label05:
        virtualinvoke r61.<com.android.org.bouncycastle.asn1.ASN1InputStream: void close()>();

        r62 = new com.android.org.bouncycastle.asn1.ASN1Integer;

        $r10 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: android.security.keystore.KeyGenParameterSpec mSpec>;

        $r11 = virtualinvoke $r10.<android.security.keystore.KeyGenParameterSpec: java.math.BigInteger getCertificateSerialNumber()>();

        specialinvoke r62.<com.android.org.bouncycastle.asn1.ASN1Integer: void <init>(java.math.BigInteger)>($r11);

        virtualinvoke r52.<com.android.org.bouncycastle.asn1.x509.V3TBSCertificateGenerator: void setSerialNumber(com.android.org.bouncycastle.asn1.ASN1Integer)>(r62);

        r63 = new com.android.org.bouncycastle.jce.X509Principal;

        $r13 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: android.security.keystore.KeyGenParameterSpec mSpec>;

        $r14 = virtualinvoke $r13.<android.security.keystore.KeyGenParameterSpec: javax.security.auth.x500.X500Principal getCertificateSubject()>();

        $r15 = virtualinvoke $r14.<javax.security.auth.x500.X500Principal: byte[] getEncoded()>();

        specialinvoke r63.<com.android.org.bouncycastle.jce.X509Principal: void <init>(byte[])>($r15);

        r73 = (com.android.org.bouncycastle.asn1.x509.X509Name) r63;

        virtualinvoke r52.<com.android.org.bouncycastle.asn1.x509.V3TBSCertificateGenerator: void setSubject(com.android.org.bouncycastle.asn1.x509.X509Name)>(r73);

        r74 = (com.android.org.bouncycastle.asn1.x509.X509Name) r63;

        virtualinvoke r52.<com.android.org.bouncycastle.asn1.x509.V3TBSCertificateGenerator: void setIssuer(com.android.org.bouncycastle.asn1.x509.X509Name)>(r74);

        r64 = new com.android.org.bouncycastle.asn1.x509.Time;

        $r17 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: android.security.keystore.KeyGenParameterSpec mSpec>;

        $r18 = virtualinvoke $r17.<android.security.keystore.KeyGenParameterSpec: java.util.Date getCertificateNotBefore()>();

        specialinvoke r64.<com.android.org.bouncycastle.asn1.x509.Time: void <init>(java.util.Date)>($r18);

        virtualinvoke r52.<com.android.org.bouncycastle.asn1.x509.V3TBSCertificateGenerator: void setStartDate(com.android.org.bouncycastle.asn1.x509.Time)>(r64);

        r65 = new com.android.org.bouncycastle.asn1.x509.Time;

        $r20 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: android.security.keystore.KeyGenParameterSpec mSpec>;

        $r21 = virtualinvoke $r20.<android.security.keystore.KeyGenParameterSpec: java.util.Date getCertificateNotAfter()>();

        specialinvoke r65.<com.android.org.bouncycastle.asn1.x509.Time: void <init>(java.util.Date)>($r21);

        virtualinvoke r52.<com.android.org.bouncycastle.asn1.x509.V3TBSCertificateGenerator: void setEndDate(com.android.org.bouncycastle.asn1.x509.Time)>(r65);

        virtualinvoke r52.<com.android.org.bouncycastle.asn1.x509.V3TBSCertificateGenerator: void setSignature(com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier)>(r42);

        r48 = virtualinvoke r52.<com.android.org.bouncycastle.asn1.x509.V3TBSCertificateGenerator: com.android.org.bouncycastle.asn1.x509.TBSCertificate generateTBSCertificate()>();

        r66 = new com.android.org.bouncycastle.asn1.ASN1EncodableVector;

        specialinvoke r66.<com.android.org.bouncycastle.asn1.ASN1EncodableVector: void <init>()>();

        r75 = (com.android.org.bouncycastle.asn1.ASN1Encodable) r48;

        virtualinvoke r66.<com.android.org.bouncycastle.asn1.ASN1EncodableVector: void add(com.android.org.bouncycastle.asn1.ASN1Encodable)>(r75);

        r76 = (com.android.org.bouncycastle.asn1.ASN1Encodable) r42;

        virtualinvoke r66.<com.android.org.bouncycastle.asn1.ASN1EncodableVector: void add(com.android.org.bouncycastle.asn1.ASN1Encodable)>(r76);

        r67 = new com.android.org.bouncycastle.asn1.DERBitString;

        specialinvoke r67.<com.android.org.bouncycastle.asn1.DERBitString: void <init>(byte[])>(r44);

        r77 = (com.android.org.bouncycastle.asn1.ASN1Encodable) r67;

        virtualinvoke r66.<com.android.org.bouncycastle.asn1.ASN1EncodableVector: void add(com.android.org.bouncycastle.asn1.ASN1Encodable)>(r77);

        r69 = new com.android.org.bouncycastle.jce.provider.X509CertificateObject;

        r68 = new com.android.org.bouncycastle.asn1.DERSequence;

        specialinvoke r68.<com.android.org.bouncycastle.asn1.DERSequence: void <init>(com.android.org.bouncycastle.asn1.ASN1EncodableVector)>(r66);

        $r26 = staticinvoke <com.android.org.bouncycastle.asn1.x509.Certificate: com.android.org.bouncycastle.asn1.x509.Certificate getInstance(java.lang.Object)>(r68);

        specialinvoke r69.<com.android.org.bouncycastle.jce.provider.X509CertificateObject: void <init>(com.android.org.bouncycastle.asn1.x509.Certificate)>($r26);

        r78 = (java.security.cert.X509Certificate) r69;

        return r78;

     label06:
        $r39 := @caughtexception;

     label07:
        virtualinvoke r61.<com.android.org.bouncycastle.asn1.ASN1InputStream: void close()>();

     label08:
        goto label10;

     label09:
        $r38 := @caughtexception;

        virtualinvoke $r39.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r38);

     label10:
        throw $r39;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label09;
    }

    private java.security.cert.X509Certificate generateSelfSignedCertificateWithValidSignature(java.security.PrivateKey, java.security.PublicKey, java.lang.String) throws java.lang.Exception
    {
        android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi r0;
        java.security.PrivateKey r1;
        java.security.PublicKey r2;
        java.lang.String r3;
        com.android.org.bouncycastle.x509.X509V3CertificateGenerator $r5;
        android.security.keystore.KeyGenParameterSpec $r6, $r8, $r10, $r12, $r14;
        java.math.BigInteger $r7;
        javax.security.auth.x500.X500Principal $r9, $r11;
        java.util.Date $r13, $r15;
        java.security.cert.X509Certificate $r16;

        r0 := @this: android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi;

        r1 := @parameter0: java.security.PrivateKey;

        r2 := @parameter1: java.security.PublicKey;

        r3 := @parameter2: java.lang.String;

        $r5 = new com.android.org.bouncycastle.x509.X509V3CertificateGenerator;

        specialinvoke $r5.<com.android.org.bouncycastle.x509.X509V3CertificateGenerator: void <init>()>();

        virtualinvoke $r5.<com.android.org.bouncycastle.x509.X509V3CertificateGenerator: void setPublicKey(java.security.PublicKey)>(r2);

        $r6 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: android.security.keystore.KeyGenParameterSpec mSpec>;

        $r7 = virtualinvoke $r6.<android.security.keystore.KeyGenParameterSpec: java.math.BigInteger getCertificateSerialNumber()>();

        virtualinvoke $r5.<com.android.org.bouncycastle.x509.X509V3CertificateGenerator: void setSerialNumber(java.math.BigInteger)>($r7);

        $r8 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: android.security.keystore.KeyGenParameterSpec mSpec>;

        $r9 = virtualinvoke $r8.<android.security.keystore.KeyGenParameterSpec: javax.security.auth.x500.X500Principal getCertificateSubject()>();

        virtualinvoke $r5.<com.android.org.bouncycastle.x509.X509V3CertificateGenerator: void setSubjectDN(javax.security.auth.x500.X500Principal)>($r9);

        $r10 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: android.security.keystore.KeyGenParameterSpec mSpec>;

        $r11 = virtualinvoke $r10.<android.security.keystore.KeyGenParameterSpec: javax.security.auth.x500.X500Principal getCertificateSubject()>();

        virtualinvoke $r5.<com.android.org.bouncycastle.x509.X509V3CertificateGenerator: void setIssuerDN(javax.security.auth.x500.X500Principal)>($r11);

        $r12 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: android.security.keystore.KeyGenParameterSpec mSpec>;

        $r13 = virtualinvoke $r12.<android.security.keystore.KeyGenParameterSpec: java.util.Date getCertificateNotBefore()>();

        virtualinvoke $r5.<com.android.org.bouncycastle.x509.X509V3CertificateGenerator: void setNotBefore(java.util.Date)>($r13);

        $r14 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: android.security.keystore.KeyGenParameterSpec mSpec>;

        $r15 = virtualinvoke $r14.<android.security.keystore.KeyGenParameterSpec: java.util.Date getCertificateNotAfter()>();

        virtualinvoke $r5.<com.android.org.bouncycastle.x509.X509V3CertificateGenerator: void setNotAfter(java.util.Date)>($r15);

        virtualinvoke $r5.<com.android.org.bouncycastle.x509.X509V3CertificateGenerator: void setSignatureAlgorithm(java.lang.String)>(r3);

        $r16 = virtualinvoke $r5.<com.android.org.bouncycastle.x509.X509V3CertificateGenerator: java.security.cert.X509Certificate generate(java.security.PrivateKey)>(r1);

        return $r16;
    }

    private java.lang.Iterable getAttestationChain(java.lang.String, java.security.KeyPair, android.security.keymaster.KeymasterArguments) throws java.security.ProviderException
    {
        android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi r0;
        android.security.keymaster.KeymasterArguments r1;
        int i0, $i1, $i2;
        android.security.keymaster.KeymasterCertificateChain $r2;
        android.security.KeyStore $r3;
        java.security.ProviderException $r4, $r10;
        android.security.KeyStoreException $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r11, r12;
        java.security.KeyPair r13;
        java.util.List r15;

        r0 := @this: android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi;

        r12 := @parameter0: java.lang.String;

        r13 := @parameter1: java.security.KeyPair;

        r1 := @parameter2: android.security.keymaster.KeymasterArguments;

        $r2 = new android.security.keymaster.KeymasterCertificateChain;

        specialinvoke $r2.<android.security.keymaster.KeymasterCertificateChain: void <init>()>();

        $r3 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: android.security.KeyStore mKeyStore>;

        i0 = virtualinvoke $r3.<android.security.KeyStore: int attestKey(java.lang.String,android.security.keymaster.KeymasterArguments,android.security.keymaster.KeymasterCertificateChain)>(r12, r1, $r2);

        if i0 != 1 goto label2;

        r15 = virtualinvoke $r2.<android.security.keymaster.KeymasterCertificateChain: java.util.List getCertificates()>();

        $i1 = interfaceinvoke r15.<java.util.Collection: int size()>();

        if $i1 < 2 goto label1;

        return r15;

     label1:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attestation certificate chain contained ");

        $i2 = interfaceinvoke r15.<java.util.Collection: int size()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" entries. At least two are required.");

        $r10 = new java.security.ProviderException;

        $r11 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.security.ProviderException: void <init>(java.lang.String)>($r11);

        throw $r10;

     label2:
        $r4 = new java.security.ProviderException;

        $r5 = staticinvoke <android.security.KeyStore: android.security.KeyStoreException getKeyStoreException(int)>(i0);

        specialinvoke $r4.<java.security.ProviderException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to generate attestation certificate chain", $r5);

        throw $r4;
    }

    private static java.util.Set getAvailableKeymasterSignatureDigests(java.lang.String[], java.lang.String[])
    {
        java.util.HashSet $r1, $r2, $r3;
        int $i1, $i2, i3, i4, i5, i6;
        java.lang.Integer $r4, $r5;
        java.lang.String[] r6, r7;
        int[] r8, r10;

        r6 := @parameter0: java.lang.String[];

        r7 := @parameter1: java.lang.String[];

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r8 = staticinvoke <android.security.keystore.KeyProperties$Digest: int[] allToKeymaster(java.lang.String[])>(r6);

        i3 = lengthof r8;

        i4 = 0;

     label1:
        if i4 >= i3 goto label2;

        $i2 = r8[i4];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>($r5);

        i4 = i4 + 1;

        goto label1;

     label2:
        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r10 = staticinvoke <android.security.keystore.KeyProperties$Digest: int[] allToKeymaster(java.lang.String[])>(r7);

        i5 = lengthof r10;

        i6 = 0;

     label3:
        if i6 >= i5 goto label4;

        $i1 = r10[i6];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r4);

        i6 = i6 + 1;

        goto label3;

     label4:
        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>(java.util.Collection)>($r2);

        interfaceinvoke $r3.<java.util.Set: boolean retainAll(java.util.Collection)>($r1);

        return $r3;
    }

    private static java.lang.String getCertificateSignatureAlgorithm(int, int, android.security.keystore.KeyGenParameterSpec)
    {
        int i0, $i1, $i2, $i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.String[] $r0, $r2, $r3, $r16, $r17;
        int[] $r1;
        java.lang.StringBuilder $r4, $r11, $r18;
        java.lang.String $r5, $r8, $r15, $r19, $r22;
        java.lang.Object $r9, $r23;
        java.lang.Integer $r10, $r24;
        java.security.ProviderException $r14;
        android.security.keystore.KeyGenParameterSpec r25;
        java.util.Set r26, r30;
        java.util.Iterator r27, r31;

        i4 := @parameter0: int;

        i0 := @parameter1: int;

        r25 := @parameter2: android.security.keystore.KeyGenParameterSpec;

        $i1 = virtualinvoke r25.<android.security.keystore.KeyGenParameterSpec: int getPurposes()>();

        $i2 = $i1 & 4;

        if $i2 != 0 goto label01;

        return null;

     label01:
        $z0 = virtualinvoke r25.<android.security.keystore.KeyGenParameterSpec: boolean isUserAuthenticationRequired()>();

        if $z0 == 0 goto label02;

        return null;

     label02:
        $z1 = virtualinvoke r25.<android.security.keystore.KeyGenParameterSpec: boolean isDigestsSpecified()>();

        if $z1 != 0 goto label03;

        return null;

     label03:
        if i4 == 1 goto label12;

        if i4 != 3 goto label11;

        $r16 = virtualinvoke r25.<android.security.keystore.KeyGenParameterSpec: java.lang.String[] getDigests()>();

        $r17 = staticinvoke <android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.String[] getSupportedEcdsaSignatureDigests()>();

        r26 = staticinvoke <android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.util.Set getAvailableKeymasterSignatureDigests(java.lang.String[],java.lang.String[])>($r16, $r17);

        i5 = -1;

        i6 = -1;

        r27 = interfaceinvoke r26.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        i7 = i5;

        $z3 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label09;

        $r23 = interfaceinvoke r27.<java.util.Iterator: java.lang.Object next()>();

        $r24 = (java.lang.Integer) $r23;

        i8 = virtualinvoke $r24.<java.lang.Integer: int intValue()>();

        i9 = staticinvoke <android.security.keystore.KeymasterUtils: int getDigestOutputSizeBits(int)>(i8);

        if i9 != i0 goto label05;

        i7 = i8;

        goto label09;

     label05:
        if i5 != -1 goto label06;

        i10 = i8;

        i11 = i9;

        goto label08;

     label06:
        if i6 >= i0 goto label07;

        i10 = i5;

        i11 = i6;

        if i9 <= i6 goto label08;

        i10 = i8;

        i11 = i9;

        goto label08;

     label07:
        i10 = i5;

        i11 = i6;

        if i9 >= i6 goto label08;

        i10 = i5;

        i11 = i6;

        if i9 < i0 goto label08;

        i10 = i8;

        i11 = i9;

     label08:
        i5 = i10;

        i6 = i11;

        goto label04;

     label09:
        if i7 != -1 goto label10;

        return null;

     label10:
        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = staticinvoke <android.security.keystore.KeyProperties$Digest: java.lang.String fromKeymasterToSignatureAlgorithmDigest(int)>(i7);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WithECDSA");

        $r22 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r22;

     label11:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported algorithm: ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r14 = new java.security.ProviderException;

        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.security.ProviderException: void <init>(java.lang.String)>($r15);

        throw $r14;

     label12:
        $r0 = virtualinvoke r25.<android.security.keystore.KeyGenParameterSpec: java.lang.String[] getSignaturePaddings()>();

        $r1 = staticinvoke <android.security.keystore.KeyProperties$SignaturePadding: int[] allToKeymaster(java.lang.String[])>($r0);

        $z2 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(int[],int)>($r1, 5);

        if $z2 != 0 goto label13;

        return null;

     label13:
        $r2 = virtualinvoke r25.<android.security.keystore.KeyGenParameterSpec: java.lang.String[] getDigests()>();

        $r3 = staticinvoke <android.security.keystore.AndroidKeyStoreBCWorkaroundProvider: java.lang.String[] getSupportedEcdsaSignatureDigests()>();

        r30 = staticinvoke <android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.util.Set getAvailableKeymasterSignatureDigests(java.lang.String[],java.lang.String[])>($r2, $r3);

        i12 = -1;

        i13 = -1;

        r31 = interfaceinvoke r30.<java.util.Set: java.util.Iterator iterator()>();

     label14:
        $z4 = interfaceinvoke r31.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label18;

        $r9 = interfaceinvoke r31.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (java.lang.Integer) $r9;

        i14 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        i15 = staticinvoke <android.security.keystore.KeymasterUtils: int getDigestOutputSizeBits(int)>(i14);

        $i3 = i0 - 240;

        if i15 <= $i3 goto label15;

        goto label14;

     label15:
        if i12 != -1 goto label16;

        i12 = i14;

        i16 = i15;

        goto label17;

     label16:
        i16 = i13;

        if i15 <= i13 goto label17;

        i12 = i14;

        i16 = i15;

     label17:
        i13 = i16;

        goto label14;

     label18:
        if i12 != -1 goto label19;

        return null;

     label19:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = staticinvoke <android.security.keystore.KeyProperties$Digest: java.lang.String fromKeymasterToSignatureAlgorithmDigest(int)>(i12);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WithRSA");

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    private static int getDefaultKeySize(int)
    {
        int i0;
        java.lang.StringBuilder $r1;
        java.security.ProviderException $r4;
        java.lang.String $r5;

        i0 := @parameter0: int;

        if i0 == 1 goto label2;

        if i0 != 3 goto label1;

        return 256;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported algorithm: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = new java.security.ProviderException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.security.ProviderException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label2:
        return 2048;
    }

    private void initAlgorithmSpecificParameters() throws java.security.InvalidAlgorithmParameterException
    {
        android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi r0;
        android.security.keystore.KeyGenParameterSpec $r1, $r20, $r51;
        boolean $z0, $z1;
        java.security.InvalidAlgorithmParameterException $r2, $r7, $r16, $r28, $r35, $r47, $r59;
        java.math.BigInteger $r3, $r9, $r14, r67, r70;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12;
        java.lang.StringBuilder $r4, $r10, $r18, $r30, $r41, $r49;
        java.lang.String $r8, $r17, $r29, $r34, $r39, $r48, $r60, r62;
        java.security.ProviderException $r33;
        java.security.spec.ECGenParameterSpec $r36;
        java.util.Locale $r37;
        java.util.Map $r38;
        java.lang.Object $r40;
        java.util.List $r45;
        java.security.spec.AlgorithmParameterSpec r61;
        java.lang.Integer r63;
        java.security.spec.RSAKeyGenParameterSpec r68;

        r0 := @this: android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi;

        $r1 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: android.security.keystore.KeyGenParameterSpec mSpec>;

        r61 = virtualinvoke $r1.<android.security.keystore.KeyGenParameterSpec: java.security.spec.AlgorithmParameterSpec getAlgorithmParameterSpec()>();

        i10 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int mKeymasterAlgorithm>;

        if i10 == 1 goto label08;

        if i10 != 3 goto label07;

        $z1 = r61 instanceof java.security.spec.ECGenParameterSpec;

        if $z1 == 0 goto label04;

        $r36 = (java.security.spec.ECGenParameterSpec) r61;

        r62 = virtualinvoke $r36.<java.security.spec.ECGenParameterSpec: java.lang.String getName()>();

        $r38 = <android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.util.Map SUPPORTED_EC_NIST_CURVE_NAME_TO_SIZE>;

        $r37 = <java.util.Locale: java.util.Locale US>;

        $r39 = virtualinvoke r62.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r37);

        $r40 = interfaceinvoke $r38.<java.util.Map: java.lang.Object get(java.lang.Object)>($r39);

        r63 = (java.lang.Integer) $r40;

        if r63 == null goto label03;

        i11 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int mKeySizeBits>;

        if i11 != -1 goto label01;

        $i9 = virtualinvoke r63.<java.lang.Integer: int intValue()>();

        r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int mKeySizeBits> = $i9;

        goto label05;

     label01:
        $i7 = virtualinvoke r63.<java.lang.Integer: int intValue()>();

        if i11 != $i7 goto label02;

        goto label05;

     label02:
        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("EC key size must match  between ");

        $r51 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: android.security.keystore.KeyGenParameterSpec mSpec>;

        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r51);

        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r61);

        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $i8 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int mKeySizeBits>;

        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" vs ");

        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r63);

        $r59 = new java.security.InvalidAlgorithmParameterException;

        $r60 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r59.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r60);

        throw $r59;

     label03:
        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported EC curve name: ");

        virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r62);

        virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Supported: ");

        $r45 = <android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.util.List SUPPORTED_EC_NIST_CURVE_NAMES>;

        virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r45);

        $r47 = new java.security.InvalidAlgorithmParameterException;

        $r48 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r47.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r48);

        throw $r47;

     label04:
        if r61 != null goto label06;

     label05:
        goto label15;

     label06:
        $r35 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r35.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("EC may only use ECGenParameterSpec");

        throw $r35;

     label07:
        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported algorithm: ");

        $i6 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int mKeymasterAlgorithm>;

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r33 = new java.security.ProviderException;

        $r34 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<java.security.ProviderException: void <init>(java.lang.String)>($r34);

        throw $r33;

     label08:
        r67 = null;

        $z0 = r61 instanceof java.security.spec.RSAKeyGenParameterSpec;

        if $z0 == 0 goto label12;

        r68 = (java.security.spec.RSAKeyGenParameterSpec) r61;

        i12 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int mKeySizeBits>;

        if i12 != -1 goto label09;

        $i5 = virtualinvoke r68.<java.security.spec.RSAKeyGenParameterSpec: int getKeysize()>();

        r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int mKeySizeBits> = $i5;

        goto label10;

     label09:
        $i2 = virtualinvoke r68.<java.security.spec.RSAKeyGenParameterSpec: int getKeysize()>();

        if i12 != $i2 goto label11;

     label10:
        r67 = virtualinvoke r68.<java.security.spec.RSAKeyGenParameterSpec: java.math.BigInteger getPublicExponent()>();

        goto label13;

     label11:
        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RSA key size must match  between ");

        $r20 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: android.security.keystore.KeyGenParameterSpec mSpec>;

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r61);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $i3 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int mKeySizeBits>;

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" vs ");

        $i4 = virtualinvoke r68.<java.security.spec.RSAKeyGenParameterSpec: int getKeysize()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r28 = new java.security.InvalidAlgorithmParameterException;

        $r29 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r29);

        throw $r28;

     label12:
        if r61 != null goto label18;

     label13:
        r70 = r67;

        if r67 != null goto label14;

        r70 = <java.security.spec.RSAKeyGenParameterSpec: java.math.BigInteger F4>;

     label14:
        $r3 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        $i0 = virtualinvoke r70.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r3);

        if $i0 < 1 goto label17;

        $r9 = <android.security.keymaster.KeymasterArguments: java.math.BigInteger UINT64_MAX_VALUE>;

        $i1 = virtualinvoke r70.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r9);

        if $i1 > 0 goto label16;

        r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.math.BigInteger mRSAPublicExponent> = r70;

     label15:
        return;

     label16:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported RSA public exponent: ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r70);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Maximum supported value: ");

        $r14 = <android.security.keymaster.KeymasterArguments: java.math.BigInteger UINT64_MAX_VALUE>;

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = new java.security.InvalidAlgorithmParameterException;

        $r17 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r17);

        throw $r16;

     label17:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RSA public exponent must be positive: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r70);

        $r7 = new java.security.InvalidAlgorithmParameterException;

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label18:
        $r2 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r2.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("RSA may only use RSAKeyGenParameterSpec");

        throw $r2;
    }

    private java.security.KeyPair loadKeystoreKeyPair(java.lang.String) throws java.security.ProviderException
    {
        android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi r0;
        java.security.KeyPair r1;
        java.lang.StringBuilder r2;
        int $i0;
        android.security.KeyStore $r3;
        java.lang.String $r4, $r6, $r9, $r12, $r14, r17;
        java.security.PrivateKey $r5, $r8;
        boolean $z0;
        java.lang.Throwable $r15;
        java.security.ProviderException $r16, r18;

        r0 := @this: android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi;

        r17 := @parameter0: java.lang.String;

     label1:
        $r3 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: android.security.KeyStore mKeyStore>;

        $i0 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int mEntryUid>;

        r1 = staticinvoke <android.security.keystore.AndroidKeyStoreProvider: java.security.KeyPair loadAndroidKeyStoreKeyPairFromKeystore(android.security.KeyStore,java.lang.String,int)>($r3, r17, $i0);

        $r4 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.lang.String mJcaKeyAlgorithm>;

        $r5 = virtualinvoke r1.<java.security.KeyPair: java.security.PrivateKey getPrivate()>();

        $r6 = interfaceinvoke $r5.<java.security.PrivateKey: java.lang.String getAlgorithm()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r6);

        if $z0 == 0 goto label3;

     label2:
        return r1;

     label3:
        r18 = new java.security.ProviderException;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Generated key pair algorithm does not match requested algorithm: ");

        $r8 = virtualinvoke r1.<java.security.KeyPair: java.security.PrivateKey getPrivate()>();

        $r9 = interfaceinvoke $r8.<java.security.PrivateKey: java.lang.String getAlgorithm()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" vs ");

        $r12 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.lang.String mJcaKeyAlgorithm>;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r18.<java.security.ProviderException: void <init>(java.lang.String)>($r14);

        throw r18;

     label4:
        $r15 := @caughtexception;

        $r16 = new java.security.ProviderException;

        specialinvoke $r16.<java.security.ProviderException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to load generated key pair from keystore", $r15);

        throw $r16;

        catch java.security.UnrecoverableKeyException from label1 to label2 with label4;
        catch android.security.keystore.KeyPermanentlyInvalidatedException from label1 to label2 with label4;
        catch java.security.UnrecoverableKeyException from label3 to label4 with label4;
        catch android.security.keystore.KeyPermanentlyInvalidatedException from label3 to label4 with label4;
    }

    private void resetAll()
    {
        android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi r0;

        r0 := @this: android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi;

        r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.lang.String mEntryAlias> = null;

        r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int mEntryUid> = -1;

        r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.lang.String mJcaKeyAlgorithm> = null;

        r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int mKeymasterAlgorithm> = -1;

        r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int[] mKeymasterPurposes> = null;

        r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int[] mKeymasterBlockModes> = null;

        r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int[] mKeymasterEncryptionPaddings> = null;

        r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int[] mKeymasterSignaturePaddings> = null;

        r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int[] mKeymasterDigests> = null;

        r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int mKeySizeBits> = 0;

        r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: android.security.keystore.KeyGenParameterSpec mSpec> = null;

        r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.math.BigInteger mRSAPublicExponent> = null;

        r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: boolean mEncryptionAtRestRequired> = 0;

        r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.security.SecureRandom mRng> = null;

        r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: android.security.KeyStore mKeyStore> = null;

        return;
    }

    private void storeCertificate(java.lang.String, byte[], int, java.lang.String) throws java.security.ProviderException
    {
        android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi r0;
        java.lang.String r1, r3, $r8, $r10;
        byte[] r2;
        android.security.KeyStore r4;
        java.lang.StringBuilder $r6;
        int $i0, i1, i2;
        java.security.ProviderException $r11;
        android.security.KeyStoreException $r12;

        r0 := @this: android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        i1 := @parameter2: int;

        r3 := @parameter3: java.lang.String;

        r4 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: android.security.KeyStore mKeyStore>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.lang.String mEntryAlias>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $i0 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int mEntryUid>;

        i2 = virtualinvoke r4.<android.security.KeyStore: int insert(java.lang.String,byte[],int,int)>($r10, r2, $i0, i1);

        if i2 != 1 goto label1;

        return;

     label1:
        $r11 = new java.security.ProviderException;

        $r12 = staticinvoke <android.security.KeyStore: android.security.KeyStoreException getKeyStoreException(int)>(i2);

        specialinvoke $r11.<java.security.ProviderException: void <init>(java.lang.String,java.lang.Throwable)>(r3, $r12);

        throw $r11;
    }

    private void storeCertificateChain(int, java.lang.Iterable) throws java.security.ProviderException
    {
        android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi r0;
        int i0, $i1;
        byte[] r2, $r4, $r6;
        java.lang.Object $r3, $r7;
        boolean $z0, $z1;
        java.io.ByteArrayOutputStream $r5;
        java.lang.Iterable r8;
        java.util.Iterator r9;

        r0 := @this: android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi;

        i0 := @parameter0: int;

        r8 := @parameter1: java.lang.Iterable;

        r9 = interfaceinvoke r8.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r3 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (byte[]) $r3;

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: void storeCertificate(java.lang.String,byte[],int,java.lang.String)>("USRCERT_", $r4, i0, "Failed to store certificate");

        $z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r5 = new java.io.ByteArrayOutputStream;

        specialinvoke $r5.<java.io.ByteArrayOutputStream: void <init>()>();

     label2:
        $z1 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r7 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r2 = (byte[]) $r7;

        $i1 = lengthof r2;

        virtualinvoke $r5.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r2, 0, $i1);

        goto label2;

     label3:
        $r6 = virtualinvoke $r5.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: void storeCertificate(java.lang.String,byte[],int,java.lang.String)>("CACERT_", $r6, i0, "Failed to store attestation CA certificate");

        return;
    }

    public java.security.KeyPair generateKeyPair()
    {
        android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi r0;
        java.lang.IllegalStateException $r1, $r18;
        android.security.keystore.KeyGenParameterSpec $r2, $r3, $r4, $r20;
        boolean $z0, $z1, $z2, z6;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7, i8, i9, i10;
        java.security.SecureRandom $r5;
        java.lang.String $r6, $r10, $r22, r27;
        android.security.KeyStore $r7, $r23, r24;
        java.lang.StringBuilder $r8;
        android.security.keymaster.KeymasterArguments $r12;
        java.lang.Iterable $r13;
        android.security.KeyStore$State $r16, $r17;
        java.lang.Throwable $r19, $r21;
        byte[] r25;
        java.security.KeyPair r28;
        android.security.keystore.SecureKeyImportUnavailableException r31;
        byte b11;

        r0 := @this: android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi;

        r24 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: android.security.KeyStore mKeyStore>;

        if r24 == null goto label13;

        $r2 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: android.security.keystore.KeyGenParameterSpec mSpec>;

        if $r2 == null goto label13;

        z6 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: boolean mEncryptionAtRestRequired>;

        $z0 = z6 & 1;

        if $z0 == 0 goto label02;

        $r16 = virtualinvoke r24.<android.security.KeyStore: android.security.KeyStore$State state()>();

        $r17 = <android.security.KeyStore$State: android.security.KeyStore$State UNLOCKED>;

        if $r16 != $r17 goto label01;

        goto label02;

     label01:
        $r18 = new java.lang.IllegalStateException;

        specialinvoke $r18.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Encryption at rest using secure lock screen credential requested for key pair, but the user has not yet entered the credential");

        throw $r18;

     label02:
        i10 = (int) z6;

        i8 = i10;

        $r3 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: android.security.keystore.KeyGenParameterSpec mSpec>;

        $z1 = virtualinvoke $r3.<android.security.keystore.KeyGenParameterSpec: boolean isStrongBoxBacked()>();

        if $z1 == 0 goto label03;

        b11 = (byte) z6;

        i8 = b11 | 16;

     label03:
        i9 = i8;

        $r4 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: android.security.keystore.KeyGenParameterSpec mSpec>;

        $z2 = virtualinvoke $r4.<android.security.keystore.KeyGenParameterSpec: boolean isCriticalToDeviceEncryption()>();

        if $z2 == 0 goto label04;

        i9 = i8 | 8;

     label04:
        $r5 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.security.SecureRandom mRng>;

        $i0 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int mKeySizeBits>;

        $i1 = $i0 + 7;

        $i2 = $i1 / 8;

        r25 = staticinvoke <android.security.keystore.KeyStoreCryptoOperationUtils: byte[] getRandomBytesToMixIntoKeystoreRng(java.security.SecureRandom,int)>($r5, $i2);

        $r7 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: android.security.KeyStore mKeyStore>;

        $r6 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.lang.String mEntryAlias>;

        $i3 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int mEntryUid>;

        staticinvoke <android.security.Credentials: boolean deleteAllTypesForAlias(android.security.KeyStore,java.lang.String,int)>($r7, $r6, $i3);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRPKEY_");

        $r10 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.lang.String mEntryAlias>;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        r27 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label05:
        $r12 = specialinvoke r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: android.security.keymaster.KeymasterArguments constructKeyGenerationArguments()>();

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: void generateKeystoreKeyPair(java.lang.String,android.security.keymaster.KeymasterArguments,byte[],int)>(r27, $r12, r25, i9);

        r28 = specialinvoke r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.security.KeyPair loadKeystoreKeyPair(java.lang.String)>(r27);

        $r13 = specialinvoke r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.lang.Iterable createCertificateChain(java.lang.String,java.security.KeyPair)>(r27, r28);

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: void storeCertificateChain(int,java.lang.Iterable)>(i9, $r13);

     label06:
        goto label07;

     label07:
        return r28;

     label08:
        $r21 := @caughtexception;

        goto label12;

     label09:
        $r19 := @caughtexception;

     label10:
        $r20 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: android.security.keystore.KeyGenParameterSpec mSpec>;

        $i5 = virtualinvoke $r20.<android.security.keystore.KeyGenParameterSpec: int getPurposes()>();

        $i6 = $i5 & 32;

        if $i6 == 0 goto label11;

        r31 = new android.security.keystore.SecureKeyImportUnavailableException;

        specialinvoke r31.<android.security.keystore.SecureKeyImportUnavailableException: void <init>(java.lang.Throwable)>($r19);

        throw r31;

     label11:
        throw $r19;

     label12:
        $r23 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: android.security.KeyStore mKeyStore>;

        $r22 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.lang.String mEntryAlias>;

        $i7 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int mEntryUid>;

        staticinvoke <android.security.Credentials: boolean deleteAllTypesForAlias(android.security.KeyStore,java.lang.String,int)>($r23, $r22, $i7);

        throw $r21;

     label13:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not initialized");

        throw $r1;

        catch java.security.ProviderException from label05 to label06 with label09;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label10 to label11 with label08;
        catch java.lang.Throwable from label11 to label12 with label08;
    }

    public void initialize(int, java.security.SecureRandom)
    {
        android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi r0;
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.Class $r2, $r6;
        java.lang.String $r3, $r7, $r11;
        java.lang.IllegalArgumentException $r10;
        java.security.SecureRandom r12;

        r0 := @this: android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi;

        i0 := @parameter0: int;

        r12 := @parameter1: java.security.SecureRandom;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = class "Landroid/security/keystore/KeyGenParameterSpec;";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" or ");

        $r6 = class "Landroid/security/KeyPairGeneratorSpec;";

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" required to initialize this KeyPairGenerator");

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r10;
    }

    public void initialize(java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidAlgorithmParameterException
    {
        android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi r0;
        boolean z0, $z1, $z2, $z3, $z4, z5, $z6;
        int[] r1, $r43, $r45, $r47, $r48, $r52, $r92;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i11, $i12, $i13, i14, i15;
        java.lang.Class $r3, $r7, $r12, $r16, $r20, $r57;
        java.lang.String $r4, $r8, $r10, $r13, $r17, $r21, $r23, $r24, $r54, $r58, $r61, $r67, $r68, r80, $r86, r87, r88;
        java.lang.String[] $r25, $r27, $r29, $r44, $r46, $r51, $r69, $r91;
        java.security.spec.AlgorithmParameterSpec $r32, $r62, r76;
        javax.security.auth.x500.X500Principal $r33;
        java.math.BigInteger $r35;
        java.util.Date $r37, $r39;
        android.security.keystore.KeyGenParameterSpec $r42, $r49, r78;
        android.security.KeyStore $r50;
        java.lang.Throwable $r71, $r72, $r73, $r74, $r75, r101;
        java.security.SecureRandom r77;
        android.security.KeyPairGeneratorSpec r79;
        java.security.InvalidAlgorithmParameterException r82, r89, r95, r96, r98, r99, r102;
        android.security.keystore.KeyGenParameterSpec$Builder r83;
        java.security.ProviderException r84;
        java.lang.StringBuilder r85, r90, r100, r103;
        android.security.keymaster.KeymasterArguments r93;

        r0 := @this: android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi;

        r76 := @parameter0: java.security.spec.AlgorithmParameterSpec;

        r77 := @parameter1: java.security.SecureRandom;

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: void resetAll()>();

        if r76 == null goto label46;

        z5 = 0;

     label01:
        i9 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int mOriginalKeymasterAlgorithm>;

        z0 = r76 instanceof android.security.keystore.KeyGenParameterSpec;

     label02:
        if z0 == 0 goto label05;

     label03:
        r78 = (android.security.keystore.KeyGenParameterSpec) r76;

     label04:
        goto label21;

     label05:
        $z1 = r76 instanceof android.security.KeyPairGeneratorSpec;

        if $z1 == 0 goto label44;

        r79 = (android.security.KeyPairGeneratorSpec) r76;

     label06:
        r80 = virtualinvoke r79.<android.security.KeyPairGeneratorSpec: java.lang.String getKeyType()>();

     label07:
        if r80 == null goto label12;

     label08:
        i9 = staticinvoke <android.security.keystore.KeyProperties$KeyAlgorithm: int toKeymasterAsymmetricKeyAlgorithm(java.lang.String)>(r80);

     label09:
        goto label12;

     label10:
        $r71 := @caughtexception;

     label11:
        r82 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke r82.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String,java.lang.Throwable)>("Invalid key type in parameters", $r71);

        throw r82;

     label12:
        if i9 == 1 goto label16;

        if i9 != 3 goto label15;

     label13:
        r83 = new android.security.keystore.KeyGenParameterSpec$Builder;

        $r68 = virtualinvoke r79.<android.security.KeyPairGeneratorSpec: java.lang.String getKeystoreAlias()>();

        specialinvoke r83.<android.security.keystore.KeyGenParameterSpec$Builder: void <init>(java.lang.String,int)>($r68, 12);

        $r69 = newarray (java.lang.String)[6];

        $r69[0] = "NONE";

        $r69[1] = "SHA-1";

        $r69[2] = "SHA-224";

        $r69[3] = "SHA-256";

        $r69[4] = "SHA-384";

        $r69[5] = "SHA-512";

        virtualinvoke r83.<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setDigests(java.lang.String[])>($r69);

     label14:
        goto label17;

     label15:
        r84 = new java.security.ProviderException;

        r85 = new java.lang.StringBuilder;

        specialinvoke r85.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported algorithm: ");

        $i8 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int mKeymasterAlgorithm>;

        virtualinvoke r85.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r67 = virtualinvoke r85.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r84.<java.security.ProviderException: void <init>(java.lang.String)>($r67);

        throw r84;

     label16:
        r83 = new android.security.keystore.KeyGenParameterSpec$Builder;

        $r24 = virtualinvoke r79.<android.security.KeyPairGeneratorSpec: java.lang.String getKeystoreAlias()>();

        specialinvoke r83.<android.security.keystore.KeyGenParameterSpec$Builder: void <init>(java.lang.String,int)>($r24, 15);

        $r25 = newarray (java.lang.String)[7];

        $r25[0] = "NONE";

        $r25[1] = "MD5";

        $r25[2] = "SHA-1";

        $r25[3] = "SHA-224";

        $r25[4] = "SHA-256";

        $r25[5] = "SHA-384";

        $r25[6] = "SHA-512";

        virtualinvoke r83.<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setDigests(java.lang.String[])>($r25);

        $r27 = newarray (java.lang.String)[3];

        $r27[0] = "NoPadding";

        $r27[1] = "PKCS1Padding";

        $r27[2] = "OAEPPadding";

        virtualinvoke r83.<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setEncryptionPaddings(java.lang.String[])>($r27);

        $r29 = newarray (java.lang.String)[2];

        $r29[0] = "PKCS1";

        $r29[1] = "PSS";

        virtualinvoke r83.<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setSignaturePaddings(java.lang.String[])>($r29);

        virtualinvoke r83.<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setRandomizedEncryptionRequired(boolean)>(0);

     label17:
        $i1 = virtualinvoke r79.<android.security.KeyPairGeneratorSpec: int getKeySize()>();

        if $i1 == -1 goto label18;

        $i7 = virtualinvoke r79.<android.security.KeyPairGeneratorSpec: int getKeySize()>();

        virtualinvoke r83.<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setKeySize(int)>($i7);

     label18:
        $r32 = virtualinvoke r79.<android.security.KeyPairGeneratorSpec: java.security.spec.AlgorithmParameterSpec getAlgorithmParameterSpec()>();

        if $r32 == null goto label20;

     label19:
        $r62 = virtualinvoke r79.<android.security.KeyPairGeneratorSpec: java.security.spec.AlgorithmParameterSpec getAlgorithmParameterSpec()>();

        virtualinvoke r83.<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setAlgorithmParameterSpec(java.security.spec.AlgorithmParameterSpec)>($r62);

     label20:
        $r33 = virtualinvoke r79.<android.security.KeyPairGeneratorSpec: javax.security.auth.x500.X500Principal getSubjectDN()>();

        virtualinvoke r83.<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setCertificateSubject(javax.security.auth.x500.X500Principal)>($r33);

        $r35 = virtualinvoke r79.<android.security.KeyPairGeneratorSpec: java.math.BigInteger getSerialNumber()>();

        virtualinvoke r83.<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setCertificateSerialNumber(java.math.BigInteger)>($r35);

        $r37 = virtualinvoke r79.<android.security.KeyPairGeneratorSpec: java.util.Date getStartDate()>();

        virtualinvoke r83.<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setCertificateNotBefore(java.util.Date)>($r37);

        $r39 = virtualinvoke r79.<android.security.KeyPairGeneratorSpec: java.util.Date getEndDate()>();

        virtualinvoke r83.<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setCertificateNotAfter(java.util.Date)>($r39);

        z5 = virtualinvoke r79.<android.security.KeyPairGeneratorSpec: boolean isEncryptionRequired()>();

        virtualinvoke r83.<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec$Builder setUserAuthenticationRequired(boolean)>(0);

        r78 = virtualinvoke r83.<android.security.keystore.KeyGenParameterSpec$Builder: android.security.keystore.KeyGenParameterSpec build()>();

     label21:
        $r86 = virtualinvoke r78.<android.security.keystore.KeyGenParameterSpec: java.lang.String getKeystoreAlias()>();

        r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.lang.String mEntryAlias> = $r86;

        $i11 = virtualinvoke r78.<android.security.keystore.KeyGenParameterSpec: int getUid()>();

        r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int mEntryUid> = $i11;

        r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: android.security.keystore.KeyGenParameterSpec mSpec> = r78;

        r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int mKeymasterAlgorithm> = i9;

        r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: boolean mEncryptionAtRestRequired> = z5;

        $i12 = virtualinvoke r78.<android.security.keystore.KeyGenParameterSpec: int getKeySize()>();

        r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int mKeySizeBits> = $i12;

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: void initAlgorithmSpecificParameters()>();

        $i13 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int mKeySizeBits>;

        if $i13 != -1 goto label22;

        $i6 = staticinvoke <android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int getDefaultKeySize(int)>(i9);

        r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int mKeySizeBits> = $i6;

     label22:
        $i2 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int mKeySizeBits>;

        $r42 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: android.security.keystore.KeyGenParameterSpec mSpec>;

        $z2 = virtualinvoke $r42.<android.security.keystore.KeyGenParameterSpec: boolean isStrongBoxBacked()>();

        staticinvoke <android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: void checkValidKeySize(int,int,boolean)>(i9, $i2, $z2);

        r87 = virtualinvoke r78.<android.security.keystore.KeyGenParameterSpec: java.lang.String getKeystoreAlias()>();

     label23:
        if r87 == null goto label41;

     label24:
        r88 = staticinvoke <android.security.keystore.KeyProperties$KeyAlgorithm: java.lang.String fromKeymasterAsymmetricKeyAlgorithm(int)>(i9);

        $i3 = virtualinvoke r78.<android.security.keystore.KeyGenParameterSpec: int getPurposes()>();

        $r43 = staticinvoke <android.security.keystore.KeyProperties$Purpose: int[] allToKeymaster(int)>($i3);

        r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int[] mKeymasterPurposes> = $r43;

        $r44 = virtualinvoke r78.<android.security.keystore.KeyGenParameterSpec: java.lang.String[] getBlockModes()>();

        $r45 = staticinvoke <android.security.keystore.KeyProperties$BlockMode: int[] allToKeymaster(java.lang.String[])>($r44);

        r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int[] mKeymasterBlockModes> = $r45;

     label25:
        $r46 = virtualinvoke r78.<android.security.keystore.KeyGenParameterSpec: java.lang.String[] getEncryptionPaddings()>();

        $r47 = staticinvoke <android.security.keystore.KeyProperties$EncryptionPadding: int[] allToKeymaster(java.lang.String[])>($r46);

        r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int[] mKeymasterEncryptionPaddings> = $r47;

        $i4 = virtualinvoke r78.<android.security.keystore.KeyGenParameterSpec: int getPurposes()>();

        $i5 = $i4 & 1;

        if $i5 == 0 goto label31;

        $z3 = virtualinvoke r78.<android.security.keystore.KeyGenParameterSpec: boolean isRandomizedEncryptionRequired()>();

        if $z3 == 0 goto label31;

        r1 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int[] mKeymasterEncryptionPaddings>;

        i0 = lengthof r1;

     label26:
        i14 = 0;

     label27:
        if i14 >= i0 goto label31;

        i15 = r1[i14];

     label28:
        $z4 = staticinvoke <android.security.keystore.KeymasterUtils: boolean isKeymasterPaddingSchemeIndCpaCompatibleWithAsymmetricCrypto(int)>(i15);

        if $z4 == 0 goto label30;

     label29:
        i14 = i14 + 1;

        goto label27;

     label30:
        r89 = new java.security.InvalidAlgorithmParameterException;

        r90 = new java.lang.StringBuilder;

        specialinvoke r90.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Randomized encryption (IND-CPA) required but may be violated by padding scheme: ");

        $r54 = staticinvoke <android.security.keystore.KeyProperties$EncryptionPadding: java.lang.String fromKeymaster(int)>(i15);

        virtualinvoke r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r54);

        virtualinvoke r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". See ");

        $r57 = class "Landroid/security/keystore/KeyGenParameterSpec;";

        $r58 = virtualinvoke $r57.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r58);

        virtualinvoke r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" documentation.");

        $r61 = virtualinvoke r90.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r89.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r61);

        throw r89;

     label31:
        $r91 = virtualinvoke r78.<android.security.keystore.KeyGenParameterSpec: java.lang.String[] getSignaturePaddings()>();

        $r92 = staticinvoke <android.security.keystore.KeyProperties$SignaturePadding: int[] allToKeymaster(java.lang.String[])>($r91);

        r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int[] mKeymasterSignaturePaddings> = $r92;

        $z6 = virtualinvoke r78.<android.security.keystore.KeyGenParameterSpec: boolean isDigestsSpecified()>();

        if $z6 == 0 goto label33;

        $r51 = virtualinvoke r78.<android.security.keystore.KeyGenParameterSpec: java.lang.String[] getDigests()>();

        $r52 = staticinvoke <android.security.keystore.KeyProperties$Digest: int[] allToKeymaster(java.lang.String[])>($r51);

        r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int[] mKeymasterDigests> = $r52;

     label32:
        goto label34;

     label33:
        $r48 = <libcore.util.EmptyArray: int[] INT>;

        r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: int[] mKeymasterDigests> = $r48;

     label34:
        r93 = new android.security.keymaster.KeymasterArguments;

        specialinvoke r93.<android.security.keymaster.KeymasterArguments: void <init>()>();

        $r49 = r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: android.security.keystore.KeyGenParameterSpec mSpec>;

        staticinvoke <android.security.keystore.KeymasterUtils: void addUserAuthArgs(android.security.keymaster.KeymasterArguments,android.security.keystore.UserAuthArgs)>(r93, $r49);

     label35:
        r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.lang.String mJcaKeyAlgorithm> = r88;

     label36:
        r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: java.security.SecureRandom mRng> = r77;

        $r50 = staticinvoke <android.security.KeyStore: android.security.KeyStore getInstance()>();

        r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: android.security.KeyStore mKeyStore> = $r50;

     label37:
        goto label38;

     label38:
        return;

     label39:
        $r74 := @caughtexception;

     label40:
        r95 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke r95.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.Throwable)>($r74);

        throw r95;

     label41:
        r96 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke r96.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("KeyStore entry alias not provided");

        throw r96;

     label42:
        $r72 := @caughtexception;

     label43:
        r98 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke r98.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.Throwable)>($r72);

        throw r98;

     label44:
        r99 = new java.security.InvalidAlgorithmParameterException;

        r100 = new java.lang.StringBuilder;

        specialinvoke r100.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported params class: ");

        $r12 = virtualinvoke r76.<java.lang.Object: java.lang.Class getClass()>();

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Supported: ");

        $r16 = class "Landroid/security/keystore/KeyGenParameterSpec;";

        $r17 = virtualinvoke $r16.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        virtualinvoke r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r20 = class "Landroid/security/KeyPairGeneratorSpec;";

        $r21 = virtualinvoke $r20.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke r100.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r99.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r23);

        throw r99;

     label45:
        $r75 := @caughtexception;

        r101 = $r75;

        goto label48;

     label46:
        r102 = new java.security.InvalidAlgorithmParameterException;

        r103 = new java.lang.StringBuilder;

        specialinvoke r103.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Must supply params of type ");

        $r3 = class "Landroid/security/keystore/KeyGenParameterSpec;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" or ");

        $r7 = class "Landroid/security/KeyPairGeneratorSpec;";

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke r103.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r102.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r10);

        throw r102;

     label47:
        $r73 := @caughtexception;

        r101 = $r73;

     label48:
        specialinvoke r0.<android.security.keystore.AndroidKeyStoreKeyPairGeneratorSpi: void resetAll()>();

        throw r101;

        catch java.lang.Throwable from label01 to label02 with label45;
        catch java.lang.Throwable from label03 to label04 with label45;
        catch java.lang.Throwable from label05 to label06 with label45;
        catch java.lang.NullPointerException from label06 to label07 with label42;
        catch java.lang.IllegalArgumentException from label06 to label07 with label42;
        catch java.lang.Throwable from label06 to label07 with label45;
        catch java.lang.IllegalArgumentException from label08 to label09 with label10;
        catch java.lang.NullPointerException from label08 to label09 with label42;
        catch java.lang.Throwable from label08 to label09 with label45;
        catch java.lang.NullPointerException from label11 to label12 with label42;
        catch java.lang.IllegalArgumentException from label11 to label12 with label42;
        catch java.lang.Throwable from label11 to label12 with label45;
        catch java.lang.NullPointerException from label13 to label14 with label42;
        catch java.lang.IllegalArgumentException from label13 to label14 with label42;
        catch java.lang.Throwable from label13 to label14 with label45;
        catch java.lang.NullPointerException from label15 to label16 with label42;
        catch java.lang.IllegalArgumentException from label15 to label16 with label42;
        catch java.lang.Throwable from label15 to label16 with label45;
        catch java.lang.NullPointerException from label16 to label17 with label42;
        catch java.lang.IllegalArgumentException from label16 to label17 with label42;
        catch java.lang.Throwable from label16 to label17 with label45;
        catch java.lang.NullPointerException from label17 to label18 with label42;
        catch java.lang.IllegalArgumentException from label17 to label18 with label42;
        catch java.lang.Throwable from label17 to label18 with label45;
        catch java.lang.NullPointerException from label18 to label19 with label42;
        catch java.lang.IllegalArgumentException from label18 to label19 with label42;
        catch java.lang.Throwable from label18 to label19 with label45;
        catch java.lang.NullPointerException from label19 to label20 with label42;
        catch java.lang.IllegalArgumentException from label19 to label20 with label42;
        catch java.lang.Throwable from label19 to label20 with label45;
        catch java.lang.NullPointerException from label20 to label21 with label42;
        catch java.lang.IllegalArgumentException from label20 to label21 with label42;
        catch java.lang.Throwable from label20 to label21 with label45;
        catch java.lang.Throwable from label21 to label22 with label45;
        catch java.lang.Throwable from label22 to label23 with label45;
        catch java.lang.IllegalArgumentException from label24 to label25 with label39;
        catch java.lang.IllegalStateException from label24 to label25 with label39;
        catch java.lang.Throwable from label24 to label25 with label45;
        catch java.lang.IllegalArgumentException from label25 to label26 with label39;
        catch java.lang.IllegalStateException from label25 to label26 with label39;
        catch java.lang.Throwable from label25 to label26 with label45;
        catch java.lang.IllegalArgumentException from label28 to label29 with label39;
        catch java.lang.IllegalStateException from label28 to label29 with label39;
        catch java.lang.Throwable from label28 to label29 with label45;
        catch java.lang.IllegalArgumentException from label30 to label31 with label39;
        catch java.lang.IllegalStateException from label30 to label31 with label39;
        catch java.lang.Throwable from label30 to label31 with label45;
        catch java.lang.IllegalArgumentException from label31 to label32 with label39;
        catch java.lang.IllegalStateException from label31 to label32 with label39;
        catch java.lang.Throwable from label31 to label32 with label45;
        catch java.lang.IllegalArgumentException from label33 to label34 with label39;
        catch java.lang.IllegalStateException from label33 to label34 with label39;
        catch java.lang.Throwable from label33 to label34 with label45;
        catch java.lang.IllegalArgumentException from label34 to label35 with label39;
        catch java.lang.IllegalStateException from label34 to label35 with label39;
        catch java.lang.Throwable from label34 to label35 with label45;
        catch java.lang.Throwable from label35 to label36 with label45;
        catch java.lang.Throwable from label36 to label37 with label47;
        catch java.lang.Throwable from label40 to label41 with label47;
        catch java.lang.Throwable from label41 to label42 with label47;
        catch java.lang.Throwable from label43 to label44 with label47;
        catch java.lang.Throwable from label44 to label45 with label47;
        catch java.lang.Throwable from label46 to label47 with label47;
    }
}
