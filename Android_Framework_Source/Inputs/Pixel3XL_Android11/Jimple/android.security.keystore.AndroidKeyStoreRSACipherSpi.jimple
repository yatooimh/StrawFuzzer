abstract class android.security.keystore.AndroidKeyStoreRSACipherSpi extends android.security.keystore.AndroidKeyStoreCipherSpiBase
{
    private final int mKeymasterPadding;
    private int mKeymasterPaddingOverride;
    private int mModulusSizeBytes;

    void <init>(int)
    {
        android.security.keystore.AndroidKeyStoreRSACipherSpi r0;
        int i0;

        r0 := @this: android.security.keystore.AndroidKeyStoreRSACipherSpi;

        i0 := @parameter0: int;

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: void <init>()>();

        r0.<android.security.keystore.AndroidKeyStoreRSACipherSpi: int mModulusSizeBytes> = -1;

        r0.<android.security.keystore.AndroidKeyStoreRSACipherSpi: int mKeymasterPadding> = i0;

        return;
    }

    protected void addAlgorithmSpecificParametersToBegin(android.security.keymaster.KeymasterArguments)
    {
        android.security.keystore.AndroidKeyStoreRSACipherSpi r0;
        android.security.keymaster.KeymasterArguments r1;
        int i0, i1, i2;

        r0 := @this: android.security.keystore.AndroidKeyStoreRSACipherSpi;

        r1 := @parameter0: android.security.keymaster.KeymasterArguments;

        virtualinvoke r1.<android.security.keymaster.KeymasterArguments: void addEnum(int,int)>(268435458, 1);

        i0 = virtualinvoke r0.<android.security.keystore.AndroidKeyStoreRSACipherSpi: int getKeymasterPaddingOverride()>();

        i1 = i0;

        if i0 != -1 goto label1;

        i1 = r0.<android.security.keystore.AndroidKeyStoreRSACipherSpi: int mKeymasterPadding>;

     label1:
        virtualinvoke r1.<android.security.keymaster.KeymasterArguments: void addEnum(int,int)>(536870918, i1);

        i2 = virtualinvoke r0.<android.security.keystore.AndroidKeyStoreRSACipherSpi: int getKeymasterPurposeOverride()>();

        if i2 == -1 goto label3;

        if i2 == 2 goto label2;

        if i2 != 3 goto label3;

     label2:
        virtualinvoke r1.<android.security.keymaster.KeymasterArguments: void addEnum(int,int)>(536870917, 0);

     label3:
        return;
    }

    protected boolean adjustConfigForEncryptingWithPrivateKey()
    {
        android.security.keystore.AndroidKeyStoreRSACipherSpi r0;

        r0 := @this: android.security.keystore.AndroidKeyStoreRSACipherSpi;

        return 0;
    }

    protected final int engineGetBlockSize()
    {
        android.security.keystore.AndroidKeyStoreRSACipherSpi r0;

        r0 := @this: android.security.keystore.AndroidKeyStoreRSACipherSpi;

        return 0;
    }

    protected final byte[] engineGetIV()
    {
        android.security.keystore.AndroidKeyStoreRSACipherSpi r0;

        r0 := @this: android.security.keystore.AndroidKeyStoreRSACipherSpi;

        return null;
    }

    protected final int engineGetOutputSize(int)
    {
        android.security.keystore.AndroidKeyStoreRSACipherSpi r0;
        int i0, $i1;

        r0 := @this: android.security.keystore.AndroidKeyStoreRSACipherSpi;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<android.security.keystore.AndroidKeyStoreRSACipherSpi: int getModulusSizeBytes()>();

        return $i1;
    }

    protected final int getKeymasterPaddingOverride()
    {
        android.security.keystore.AndroidKeyStoreRSACipherSpi r0;
        int $i0;

        r0 := @this: android.security.keystore.AndroidKeyStoreRSACipherSpi;

        $i0 = r0.<android.security.keystore.AndroidKeyStoreRSACipherSpi: int mKeymasterPaddingOverride>;

        return $i0;
    }

    protected final int getModulusSizeBytes()
    {
        android.security.keystore.AndroidKeyStoreRSACipherSpi r0;
        int i0;
        java.lang.IllegalStateException $r1;

        r0 := @this: android.security.keystore.AndroidKeyStoreRSACipherSpi;

        i0 = r0.<android.security.keystore.AndroidKeyStoreRSACipherSpi: int mModulusSizeBytes>;

        if i0 == -1 goto label1;

        return i0;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Not initialized");

        throw $r1;
    }

    protected final void initKey(int, java.security.Key) throws java.security.InvalidKeyException
    {
        android.security.keystore.AndroidKeyStoreRSACipherSpi r0;
        long l0, $l4, $l5;
        java.security.InvalidKeyException $r1, $r11, $r16, $r20, $r21, $r26, $r36, $r42, $r52, $r57;
        java.lang.String $r2, $r3, $r6, $r12, $r17, $r19, $r27, $r30, $r33, $r37, $r40, $r43, $r46, $r49, $r53, $r58, $r68;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r4, $r13, $r22, $r28, $r38, $r44, $r54;
        android.security.KeyStore $r18, $r67;
        int $i1, $i6, $i7, $i8, i9, $i10, i11;
        byte $b2, $b3;
        java.security.Key r59;
        android.security.keystore.AndroidKeyStoreKey r60;
        android.security.keymaster.KeyCharacteristics $r65;

        r0 := @this: android.security.keystore.AndroidKeyStoreRSACipherSpi;

        i9 := @parameter0: int;

        r59 := @parameter1: java.security.Key;

        if r59 == null goto label15;

        $r2 = "RSA";

        $r3 = interfaceinvoke r59.<java.security.Key: java.lang.String getAlgorithm()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        if $z0 == 0 goto label14;

        $z1 = r59 instanceof android.security.keystore.AndroidKeyStorePrivateKey;

        if $z1 == 0 goto label01;

        r60 = (android.security.keystore.AndroidKeyStoreKey) r59;

        goto label02;

     label01:
        $z2 = r59 instanceof android.security.keystore.AndroidKeyStorePublicKey;

        if $z2 == 0 goto label13;

        r60 = (android.security.keystore.AndroidKeyStoreKey) r59;

     label02:
        $z3 = r60 instanceof java.security.PrivateKey;

        if $z3 == 0 goto label07;

        if i9 == 1 goto label05;

        if i9 == 2 goto label04;

        if i9 == 3 goto label05;

        if i9 != 4 goto label03;

        goto label04;

     label03:
        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RSA private keys cannot be used with opmode: ");

        virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);

        $r57 = new java.security.InvalidKeyException;

        $r58 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r57.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r58);

        throw $r57;

     label04:
        goto label09;

     label05:
        $z4 = virtualinvoke r0.<android.security.keystore.AndroidKeyStoreRSACipherSpi: boolean adjustConfigForEncryptingWithPrivateKey()>();

        if $z4 == 0 goto label06;

        goto label09;

     label06:
        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RSA private keys cannot be used with ");

        $r46 = staticinvoke <android.security.keystore.AndroidKeyStoreRSACipherSpi: java.lang.String opmodeToString(int)>(i9);

        virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46);

        virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and padding ");

        $i8 = r0.<android.security.keystore.AndroidKeyStoreRSACipherSpi: int mKeymasterPadding>;

        $r49 = staticinvoke <android.security.keystore.KeyProperties$EncryptionPadding: java.lang.String fromKeymaster(int)>($i8);

        virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r49);

        virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Only RSA public keys supported for this mode");

        $r52 = new java.security.InvalidKeyException;

        $r53 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r52.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r53);

        throw $r52;

     label07:
        if i9 == 1 goto label09;

        if i9 == 2 goto label08;

        if i9 == 3 goto label09;

        if i9 == 4 goto label08;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RSA public keys cannot be used with ");

        $r40 = staticinvoke <android.security.keystore.AndroidKeyStoreRSACipherSpi: java.lang.String opmodeToString(int)>(i9);

        virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        $r42 = new java.security.InvalidKeyException;

        $r43 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r42.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r43);

        throw $r42;

     label08:
        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RSA public keys cannot be used with ");

        $r30 = staticinvoke <android.security.keystore.AndroidKeyStoreRSACipherSpi: java.lang.String opmodeToString(int)>(i9);

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and padding ");

        $i7 = r0.<android.security.keystore.AndroidKeyStoreRSACipherSpi: int mKeymasterPadding>;

        $r33 = staticinvoke <android.security.keystore.KeyProperties$EncryptionPadding: java.lang.String fromKeymaster(int)>($i7);

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Only RSA private keys supported for this opmode.");

        $r36 = new java.security.InvalidKeyException;

        $r37 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r36.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r37);

        throw $r36;

     label09:
        $r65 = new android.security.keymaster.KeyCharacteristics;

        specialinvoke $r65.<android.security.keymaster.KeyCharacteristics: void <init>()>();

        $r67 = virtualinvoke r0.<android.security.keystore.AndroidKeyStoreRSACipherSpi: android.security.KeyStore getKeyStore()>();

        $r68 = virtualinvoke r60.<android.security.keystore.AndroidKeyStoreKey: java.lang.String getAlias()>();

        $i10 = virtualinvoke r60.<android.security.keystore.AndroidKeyStoreKey: int getUid()>();

        i11 = virtualinvoke $r67.<android.security.KeyStore: int getKeyCharacteristics(java.lang.String,android.security.keymaster.KeymasterBlob,android.security.keymaster.KeymasterBlob,int,android.security.keymaster.KeyCharacteristics)>($r68, null, null, $i10, $r65);

        if i11 != 1 goto label12;

        l0 = virtualinvoke $r65.<android.security.keymaster.KeyCharacteristics: long getUnsignedInt(int,long)>(805306371, -1L);

        $b2 = l0 cmp -1L;

        if $b2 == 0 goto label11;

        $b3 = l0 cmp 2147483647L;

        if $b3 > 0 goto label10;

        $l4 = 7L + l0;

        $l5 = $l4 / 8L;

        $i6 = (int) $l5;

        r0.<android.security.keystore.AndroidKeyStoreRSACipherSpi: int mModulusSizeBytes> = $i6;

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreRSACipherSpi: void setKey(android.security.keystore.AndroidKeyStoreKey)>(r60);

        return;

     label10:
        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Key too large: ");

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bits");

        $r26 = new java.security.InvalidKeyException;

        $r27 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r27);

        throw $r26;

     label11:
        $r21 = new java.security.InvalidKeyException;

        specialinvoke $r21.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Size of key not known");

        throw $r21;

     label12:
        $r18 = virtualinvoke r0.<android.security.keystore.AndroidKeyStoreRSACipherSpi: android.security.KeyStore getKeyStore()>();

        $r19 = virtualinvoke r60.<android.security.keystore.AndroidKeyStoreKey: java.lang.String getAlias()>();

        $i1 = virtualinvoke r60.<android.security.keystore.AndroidKeyStoreKey: int getUid()>();

        $r20 = virtualinvoke $r18.<android.security.KeyStore: java.security.InvalidKeyException getInvalidKeyException(java.lang.String,int,int)>($r19, $i1, i11);

        throw $r20;

     label13:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported key type: ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r59);

        $r16 = new java.security.InvalidKeyException;

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r17);

        throw $r16;

     label14:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported key algorithm: ");

        $r6 = interfaceinvoke r59.<java.security.Key: java.lang.String getAlgorithm()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Only ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RSA");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" supported");

        $r11 = new java.security.InvalidKeyException;

        $r12 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r12);

        throw $r11;

     label15:
        $r1 = new java.security.InvalidKeyException;

        specialinvoke $r1.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Unsupported key: null");

        throw $r1;
    }

    protected void loadAlgorithmSpecificParametersFromBeginResult(android.security.keymaster.KeymasterArguments)
    {
        android.security.keystore.AndroidKeyStoreRSACipherSpi r0;
        android.security.keymaster.KeymasterArguments r1;

        r0 := @this: android.security.keystore.AndroidKeyStoreRSACipherSpi;

        r1 := @parameter0: android.security.keymaster.KeymasterArguments;

        return;
    }

    protected final void resetAll()
    {
        android.security.keystore.AndroidKeyStoreRSACipherSpi r0;

        r0 := @this: android.security.keystore.AndroidKeyStoreRSACipherSpi;

        r0.<android.security.keystore.AndroidKeyStoreRSACipherSpi: int mModulusSizeBytes> = -1;

        r0.<android.security.keystore.AndroidKeyStoreRSACipherSpi: int mKeymasterPaddingOverride> = -1;

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: void resetAll()>();

        return;
    }

    protected final void resetWhilePreservingInitState()
    {
        android.security.keystore.AndroidKeyStoreRSACipherSpi r0;

        r0 := @this: android.security.keystore.AndroidKeyStoreRSACipherSpi;

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreCipherSpiBase: void resetWhilePreservingInitState()>();

        return;
    }

    protected final void setKeymasterPaddingOverride(int)
    {
        android.security.keystore.AndroidKeyStoreRSACipherSpi r0;
        int i0;

        r0 := @this: android.security.keystore.AndroidKeyStoreRSACipherSpi;

        i0 := @parameter0: int;

        r0.<android.security.keystore.AndroidKeyStoreRSACipherSpi: int mKeymasterPaddingOverride> = i0;

        return;
    }
}
