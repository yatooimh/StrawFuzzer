public class android.security.keystore.AndroidKeyStoreSpi extends java.security.KeyStoreSpi
{
    public static final java.lang.String NAME;
    private android.security.KeyStore mKeyStore;
    private int mUid;

    public void <init>()
    {
        android.security.keystore.AndroidKeyStoreSpi r0;

        r0 := @this: android.security.keystore.AndroidKeyStoreSpi;

        specialinvoke r0.<java.security.KeyStoreSpi: void <init>()>();

        r0.<android.security.keystore.AndroidKeyStoreSpi: int mUid> = -1;

        return;
    }

    private java.security.cert.Certificate getCertificateForPrivateKeyEntry(java.lang.String, byte[])
    {
        android.security.keystore.AndroidKeyStoreSpi r0;
        java.lang.StringBuilder $r2;
        int $i0, $i1;
        android.security.KeyStore $r5;
        boolean $z0;
        android.security.keystore.AndroidKeyStoreSpi$KeyStoreX509Certificate $r6;
        java.lang.String r7, r10;
        byte[] r8;
        java.security.cert.X509Certificate r9;

        r0 := @this: android.security.keystore.AndroidKeyStoreSpi;

        r7 := @parameter0: java.lang.String;

        r8 := @parameter1: byte[];

        r9 = staticinvoke <android.security.keystore.AndroidKeyStoreSpi: java.security.cert.X509Certificate toCertificate(byte[])>(r8);

        if r9 != null goto label1;

        return null;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRPKEY_");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        r10 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = r0.<android.security.keystore.AndroidKeyStoreSpi: android.security.KeyStore mKeyStore>;

        $i0 = r0.<android.security.keystore.AndroidKeyStoreSpi: int mUid>;

        $z0 = virtualinvoke $r5.<android.security.KeyStore: boolean contains(java.lang.String,int)>(r10, $i0);

        if $z0 == 0 goto label2;

        $i1 = r0.<android.security.keystore.AndroidKeyStoreSpi: int mUid>;

        $r6 = staticinvoke <android.security.keystore.AndroidKeyStoreSpi: android.security.keystore.AndroidKeyStoreSpi$KeyStoreX509Certificate wrapIntoKeyStoreCertificate(java.lang.String,int,java.security.cert.X509Certificate)>(r10, $i1, r9);

        return $r6;

     label2:
        return r9;
    }

    private java.security.cert.Certificate getCertificateForTrustedCertificateEntry(byte[])
    {
        android.security.keystore.AndroidKeyStoreSpi r0;
        byte[] r1;
        java.security.cert.X509Certificate $r2;

        r0 := @this: android.security.keystore.AndroidKeyStoreSpi;

        r1 := @parameter0: byte[];

        $r2 = staticinvoke <android.security.keystore.AndroidKeyStoreSpi: java.security.cert.X509Certificate toCertificate(byte[])>(r1);

        return $r2;
    }

    private static android.security.keystore.KeyProtection getLegacyKeyProtectionParameter(java.security.PrivateKey) throws java.security.KeyStoreException
    {
        java.lang.String $r1, $r2, $r7, r22;
        boolean $z0, $z1;
        java.lang.StringBuilder $r3;
        java.security.KeyStoreException $r6;
        android.security.keystore.KeyProtection$Builder $r8, $r18, r23;
        java.lang.String[] $r9, $r11, $r13, $r19;
        android.security.keystore.KeyProtection $r17;
        java.security.PrivateKey r21;

        r21 := @parameter0: java.security.PrivateKey;

        r22 = interfaceinvoke r21.<java.security.PrivateKey: java.lang.String getAlgorithm()>();

        $r1 = "EC";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r22);

        if $z0 == 0 goto label1;

        $r18 = new android.security.keystore.KeyProtection$Builder;

        specialinvoke $r18.<android.security.keystore.KeyProtection$Builder: void <init>(int)>(12);

        r23 = $r18;

        $r19 = newarray (java.lang.String)[6];

        $r19[0] = "NONE";

        $r19[1] = "SHA-1";

        $r19[2] = "SHA-224";

        $r19[3] = "SHA-256";

        $r19[4] = "SHA-384";

        $r19[5] = "SHA-512";

        virtualinvoke $r18.<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setDigests(java.lang.String[])>($r19);

        goto label2;

     label1:
        $r2 = "RSA";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r22);

        if $z1 == 0 goto label3;

        $r8 = new android.security.keystore.KeyProtection$Builder;

        specialinvoke $r8.<android.security.keystore.KeyProtection$Builder: void <init>(int)>(15);

        r23 = $r8;

        $r9 = newarray (java.lang.String)[7];

        $r9[0] = "NONE";

        $r9[1] = "MD5";

        $r9[2] = "SHA-1";

        $r9[3] = "SHA-224";

        $r9[4] = "SHA-256";

        $r9[5] = "SHA-384";

        $r9[6] = "SHA-512";

        virtualinvoke $r8.<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setDigests(java.lang.String[])>($r9);

        $r11 = newarray (java.lang.String)[3];

        $r11[0] = "NoPadding";

        $r11[1] = "PKCS1Padding";

        $r11[2] = "OAEPPadding";

        virtualinvoke $r8.<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setEncryptionPaddings(java.lang.String[])>($r11);

        $r13 = newarray (java.lang.String)[2];

        $r13[0] = "PKCS1";

        $r13[1] = "PSS";

        virtualinvoke $r8.<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setSignaturePaddings(java.lang.String[])>($r13);

        virtualinvoke $r8.<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setRandomizedEncryptionRequired(boolean)>(0);

     label2:
        virtualinvoke r23.<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setUserAuthenticationRequired(boolean)>(0);

        $r17 = virtualinvoke r23.<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection build()>();

        return $r17;

     label3:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported key algorithm: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22);

        $r6 = new java.security.KeyStoreException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.security.KeyStoreException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    private java.util.Date getModificationDate(java.lang.String)
    {
        android.security.keystore.AndroidKeyStoreSpi r0;
        java.lang.String r1;
        long l0;
        int $i1;
        android.security.KeyStore $r2;
        byte $b2;
        java.util.Date $r3;

        r0 := @this: android.security.keystore.AndroidKeyStoreSpi;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.security.keystore.AndroidKeyStoreSpi: android.security.KeyStore mKeyStore>;

        $i1 = r0.<android.security.keystore.AndroidKeyStoreSpi: int mUid>;

        l0 = virtualinvoke $r2.<android.security.KeyStore: long getmtime(java.lang.String,int)>(r1, $i1);

        $b2 = l0 cmp -1L;

        if $b2 != 0 goto label1;

        return null;

     label1:
        $r3 = new java.util.Date;

        specialinvoke $r3.<java.util.Date: void <init>(long)>(l0);

        return $r3;
    }

    private java.util.Set getUniqueAliases()
    {
        android.security.keystore.AndroidKeyStoreSpi r0;
        java.lang.String[] r1;
        int i0, i1, $i2, $i3, $i5, $i6, i7;
        java.lang.String r3, $r10, $r11, $r12;
        android.security.KeyStore $r5;
        java.util.HashSet $r6, $r13;
        java.lang.StringBuilder $r7;

        r0 := @this: android.security.keystore.AndroidKeyStoreSpi;

        $r5 = r0.<android.security.keystore.AndroidKeyStoreSpi: android.security.KeyStore mKeyStore>;

        $i2 = r0.<android.security.keystore.AndroidKeyStoreSpi: int mUid>;

        r1 = virtualinvoke $r5.<android.security.KeyStore: java.lang.String[] list(java.lang.String,int)>("", $i2);

        if r1 != null goto label1;

        $r13 = new java.util.HashSet;

        specialinvoke $r13.<java.util.HashSet: void <init>()>();

        return $r13;

     label1:
        $r6 = new java.util.HashSet;

        $i3 = lengthof r1;

        specialinvoke $r6.<java.util.HashSet: void <init>(int)>($i3);

        i0 = lengthof r1;

        i7 = 0;

     label2:
        if i7 >= i0 goto label6;

        r3 = r1[i7];

        i1 = virtualinvoke r3.<java.lang.String: int indexOf(int)>(95);

        if i1 == -1 goto label4;

        $i5 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i5 > i1 goto label3;

        goto label4;

     label3:
        $r11 = new java.lang.String;

        $i6 = i1 + 1;

        $r12 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>($i6);

        specialinvoke $r11.<java.lang.String: void <init>(java.lang.String)>($r12);

        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>($r11);

        goto label5;

     label4:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid alias: ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AndroidKeyStore", $r10);

     label5:
        i7 = i7 + 1;

        goto label2;

     label6:
        return $r6;
    }

    private boolean isCertificateEntry(java.lang.String)
    {
        android.security.keystore.AndroidKeyStoreSpi r0;
        java.lang.String r1, $r8;
        android.security.KeyStore r2;
        java.lang.NullPointerException $r4;
        java.lang.StringBuilder $r5;
        int $i0;
        boolean $z0;

        r0 := @this: android.security.keystore.AndroidKeyStoreSpi;

        r1 := @parameter0: java.lang.String;

        if r1 == null goto label1;

        r2 = r0.<android.security.keystore.AndroidKeyStoreSpi: android.security.KeyStore mKeyStore>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CACERT_");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $i0 = r0.<android.security.keystore.AndroidKeyStoreSpi: int mUid>;

        $z0 = virtualinvoke r2.<android.security.KeyStore: boolean contains(java.lang.String,int)>($r8, $i0);

        return $z0;

     label1:
        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("alias == null");

        throw $r4;
    }

    private boolean isKeyEntry(java.lang.String)
    {
        android.security.keystore.AndroidKeyStoreSpi r0;
        java.lang.String r1, $r5, $r9;
        java.lang.StringBuilder $r2, $r6;
        int $i0, $i1;
        boolean $z0, $z1, z2;
        android.security.KeyStore r10, r12;

        r0 := @this: android.security.keystore.AndroidKeyStoreSpi;

        r1 := @parameter0: java.lang.String;

        r10 = r0.<android.security.keystore.AndroidKeyStoreSpi: android.security.KeyStore mKeyStore>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRPKEY_");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $i0 = r0.<android.security.keystore.AndroidKeyStoreSpi: int mUid>;

        $z0 = virtualinvoke r10.<android.security.KeyStore: boolean contains(java.lang.String,int)>($r5, $i0);

        if $z0 != 0 goto label2;

        r12 = r0.<android.security.keystore.AndroidKeyStoreSpi: android.security.KeyStore mKeyStore>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRSKEY_");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = r0.<android.security.keystore.AndroidKeyStoreSpi: int mUid>;

        $z1 = virtualinvoke r12.<android.security.KeyStore: boolean contains(java.lang.String,int)>($r9, $i1);

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    private void setPrivateKeyEntry(java.lang.String, java.security.PrivateKey, java.security.cert.Certificate[], java.security.KeyStore$ProtectionParameter) throws java.security.KeyStoreException
    {
        android.security.keystore.AndroidKeyStoreSpi r0;
        byte[] r1, $r65, $r66, $r68, $r69, r117, r120, r124;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z13, $z14, $z15, $z16, $z17, $z18, $z19, z23;
        java.lang.StringBuilder $r2, $r19, $r57, $r73, $r79, $r94, r129, r137, r142, r145;
        java.lang.Class $r4, $r8, $r12;
        java.lang.String $r5, $r9, $r13, $r16, $r24, $r25, $r28, $r40, $r50, $r53, $r56, $r63, $r71, $r72, $r77, $r83, $r98, r105, r118, r119, r123, r138, r143;
        java.security.KeyStoreException $r15, $r17, $r23, $r26, $r62, $r76, $r82, $r92, $r97, $r103, r128, r139, r146, r147;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39;
        java.security.cert.X509Certificate $r18, $r67, $r85;
        android.security.keymaster.KeymasterArguments $r27, r121;
        int[] $r29, $r31, $r55, r127, $r131;
        java.lang.String[] $r30, $r32, $r54, $r130;
        android.security.KeyStore $r33, $r34, $r45, $r88, $r89, $r90, r136, r141, r144;
        android.security.KeyStoreException $r37, $r41, $r48;
        android.security.keystore.AndroidKeyStoreKey $r64;
        java.security.cert.Certificate $r70, $r78, $r84;
        android.security.KeyStoreParameter $r86;
        java.lang.Throwable $r87, $r91, $r93, $r99, $r100, $r101, $r102, $r104, r126, r140;
        java.security.PrivateKey r106;
        java.security.cert.Certificate[] r107;
        java.security.KeyStore$ProtectionParameter r108;
        byte b23;
        android.security.keystore.KeyProtection r109, r110;
        java.security.cert.X509Certificate[] r111;
        byte[][] r114;
        java.util.Date $r132, $r133, $r134;
        android.security.keymaster.KeyCharacteristics r135;

        r0 := @this: android.security.keystore.AndroidKeyStoreSpi;

        r105 := @parameter0: java.lang.String;

        r106 := @parameter1: java.security.PrivateKey;

        r107 := @parameter2: java.security.cert.Certificate[];

        r108 := @parameter3: java.security.KeyStore$ProtectionParameter;

        b23 = 0;

        if r108 != null goto label01;

        r109 = staticinvoke <android.security.keystore.AndroidKeyStoreSpi: android.security.keystore.KeyProtection getLegacyKeyProtectionParameter(java.security.PrivateKey)>(r106);

        b23 = 0;

        goto label05;

     label01:
        $z1 = r108 instanceof android.security.KeyStoreParameter;

        if $z1 == 0 goto label03;

        r110 = staticinvoke <android.security.keystore.AndroidKeyStoreSpi: android.security.keystore.KeyProtection getLegacyKeyProtectionParameter(java.security.PrivateKey)>(r106);

        $r86 = (android.security.KeyStoreParameter) r108;

        $z19 = virtualinvoke $r86.<android.security.KeyStoreParameter: boolean isEncryptionRequired()>();

        if $z19 == 0 goto label02;

        b23 = 1;

     label02:
        r109 = r110;

        goto label05;

     label03:
        $z2 = r108 instanceof android.security.keystore.KeyProtection;

        if $z2 == 0 goto label70;

        r109 = (android.security.keystore.KeyProtection) r108;

        b23 = 0;

        $z3 = virtualinvoke r109.<android.security.keystore.KeyProtection: boolean isCriticalToDeviceEncryption()>();

        if $z3 == 0 goto label04;

        b23 = 0 | 8;

     label04:
        $z4 = virtualinvoke r109.<android.security.keystore.KeyProtection: boolean isStrongBoxBacked()>();

        if $z4 == 0 goto label05;

        b23 = b23 | 16;

        goto label05;

     label05:
        if r107 == null goto label69;

        $i0 = lengthof r107;

        if $i0 == 0 goto label69;

        $i1 = lengthof r107;

        r111 = newarray (java.security.cert.X509Certificate)[$i1];

        i24 = 0;

     label06:
        $i2 = lengthof r107;

        if i24 >= $i2 goto label09;

        $r71 = "X.509";

        $r70 = r107[i24];

        $r72 = virtualinvoke $r70.<java.security.cert.Certificate: java.lang.String getType()>();

        $z17 = virtualinvoke $r71.<java.lang.String: boolean equals(java.lang.Object)>($r72);

        if $z17 == 0 goto label08;

        $r78 = r107[i24];

        $z18 = $r78 instanceof java.security.cert.X509Certificate;

        if $z18 == 0 goto label07;

        $r84 = r107[i24];

        $r85 = (java.security.cert.X509Certificate) $r84;

        r111[i24] = $r85;

        i24 = i24 + 1;

        goto label06;

     label07:
        $r79 = new java.lang.StringBuilder;

        specialinvoke $r79.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Certificates must be in X.509 format: invalid cert #");

        virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i24);

        $r82 = new java.security.KeyStoreException;

        $r83 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r82.<java.security.KeyStoreException: void <init>(java.lang.String)>($r83);

        throw $r82;

     label08:
        $r73 = new java.lang.StringBuilder;

        specialinvoke $r73.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Certificates must be in X.509 format: invalid cert #");

        virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i24);

        $r76 = new java.security.KeyStoreException;

        $r77 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r76.<java.security.KeyStoreException: void <init>(java.lang.String)>($r77);

        throw $r76;

     label09:
        $r18 = r111[0];

        r1 = virtualinvoke $r18.<java.security.cert.X509Certificate: byte[] getEncoded()>();

     label10:
        $i3 = lengthof r107;

        if $i3 <= 1 goto label18;

        $i14 = lengthof r111;

        $i15 = $i14 - 1;

        r114 = newarray (byte[])[$i15];

        i25 = 0;

        i26 = 0;

     label11:
        $i16 = lengthof r114;

        if i26 >= $i16 goto label15;

     label12:
        $i18 = i26 + 1;

        $r67 = r111[$i18];

        $r68 = virtualinvoke $r67.<java.security.cert.X509Certificate: byte[] getEncoded()>();

        r114[i26] = $r68;

        $r69 = r114[i26];

        i27 = lengthof $r69;

     label13:
        i25 = i25 + i27;

        i26 = i26 + 1;

        goto label11;

     label14:
        $r93 := @caughtexception;

        $r94 = new java.lang.StringBuilder;

        specialinvoke $r94.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to encode certificate #");

        virtualinvoke $r94.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i26);

        $r97 = new java.security.KeyStoreException;

        $r98 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r97.<java.security.KeyStoreException: void <init>(java.lang.String,java.lang.Throwable)>($r98, $r93);

        throw $r97;

     label15:
        r117 = newarray (byte)[i25];

        i28 = 0;

        i29 = 0;

     label16:
        $i17 = lengthof r114;

        if i29 >= $i17 goto label17;

        $r65 = r114[i29];

        i30 = lengthof $r65;

        $r66 = r114[i29];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r66, 0, r117, i28, i30);

        i28 = i28 + i30;

        r114[i29] = null;

        i29 = i29 + 1;

        goto label16;

     label17:
        goto label19;

     label18:
        r117 = null;

     label19:
        $z5 = r106 instanceof android.security.keystore.AndroidKeyStorePrivateKey;

        if $z5 == 0 goto label20;

        $r64 = (android.security.keystore.AndroidKeyStoreKey) r106;

        r118 = virtualinvoke $r64.<android.security.keystore.AndroidKeyStoreKey: java.lang.String getAlias()>();

        goto label21;

     label20:
        r118 = null;

     label21:
        if r118 == null goto label23;

        $z15 = virtualinvoke r118.<java.lang.String: boolean startsWith(java.lang.String)>("USRPKEY_");

        if $z15 == 0 goto label23;

        $r56 = "USRPKEY_";

        $i13 = virtualinvoke $r56.<java.lang.String: int length()>();

        r119 = virtualinvoke r118.<java.lang.String: java.lang.String substring(int)>($i13);

        $z16 = virtualinvoke r105.<java.lang.String: boolean equals(java.lang.Object)>(r119);

        if $z16 == 0 goto label22;

        r120 = null;

        z23 = 0;

        r121 = null;

        goto label43;

     label22:
        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can only replace keys with same alias: ");

        virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r105);

        virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != ");

        virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r119);

        $r62 = new java.security.KeyStoreException;

        $r63 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r62.<java.security.KeyStoreException: void <init>(java.lang.String)>($r63);

        throw $r62;

     label23:
        r123 = interfaceinvoke r106.<java.security.PrivateKey: java.lang.String getFormat()>();

        if r123 == null goto label67;

        $r25 = "PKCS#8";

        $z6 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>(r123);

        if $z6 == 0 goto label67;

        r124 = interfaceinvoke r106.<java.security.PrivateKey: byte[] getEncoded()>();

        if r124 == null goto label66;

        $r27 = new android.security.keymaster.KeymasterArguments;

        specialinvoke $r27.<android.security.keymaster.KeymasterArguments: void <init>()>();

     label24:
        $r28 = interfaceinvoke r106.<java.security.PrivateKey: java.lang.String getAlgorithm()>();

        $i4 = staticinvoke <android.security.keystore.KeyProperties$KeyAlgorithm: int toKeymasterAsymmetricKeyAlgorithm(java.lang.String)>($r28);

        virtualinvoke $r27.<android.security.keymaster.KeymasterArguments: void addEnum(int,int)>(268435458, $i4);

        i31 = virtualinvoke r109.<android.security.keystore.KeyProtection: int getPurposes()>();

     label25:
        $r29 = staticinvoke <android.security.keystore.KeyProperties$Purpose: int[] allToKeymaster(int)>(i31);

        virtualinvoke $r27.<android.security.keymaster.KeymasterArguments: void addEnums(int,int[])>(536870913, $r29);

        z0 = virtualinvoke r109.<android.security.keystore.KeyProtection: boolean isDigestsSpecified()>();

     label26:
        if z0 == 0 goto label30;

     label27:
        $r54 = virtualinvoke r109.<android.security.keystore.KeyProtection: java.lang.String[] getDigests()>();

        $r55 = staticinvoke <android.security.keystore.KeyProperties$Digest: int[] allToKeymaster(java.lang.String[])>($r54);

        virtualinvoke $r27.<android.security.keymaster.KeymasterArguments: void addEnums(int,int[])>(536870917, $r55);

     label28:
        goto label30;

     label29:
        $r104 := @caughtexception;

        r126 = $r104;

        goto label65;

     label30:
        $r30 = virtualinvoke r109.<android.security.keystore.KeyProtection: java.lang.String[] getBlockModes()>();

        $r31 = staticinvoke <android.security.keystore.KeyProperties$BlockMode: int[] allToKeymaster(java.lang.String[])>($r30);

        virtualinvoke $r27.<android.security.keymaster.KeymasterArguments: void addEnums(int,int[])>(536870916, $r31);

     label31:
        $r32 = virtualinvoke r109.<android.security.keystore.KeyProtection: java.lang.String[] getEncryptionPaddings()>();

        r127 = staticinvoke <android.security.keystore.KeyProperties$EncryptionPadding: int[] allToKeymaster(java.lang.String[])>($r32);

     label32:
        $i5 = i31 & 1;

        if $i5 == 0 goto label40;

     label33:
        $z13 = virtualinvoke r109.<android.security.keystore.KeyProtection: boolean isRandomizedEncryptionRequired()>();

        if $z13 == 0 goto label39;

        i32 = lengthof r127;

     label34:
        i33 = 0;

     label35:
        if i33 >= i32 goto label40;

        i34 = r127[i33];

     label36:
        $z14 = staticinvoke <android.security.keystore.KeymasterUtils: boolean isKeymasterPaddingSchemeIndCpaCompatibleWithAsymmetricCrypto(int)>(i34);

        if $z14 == 0 goto label38;

     label37:
        i33 = i33 + 1;

        goto label35;

     label38:
        r128 = new java.security.KeyStoreException;

        r129 = new java.lang.StringBuilder;

        specialinvoke r129.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r129.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Randomized encryption (IND-CPA) required but is violated by encryption padding mode: ");

        $r50 = staticinvoke <android.security.keystore.KeyProperties$EncryptionPadding: java.lang.String fromKeymaster(int)>(i34);

        virtualinvoke r129.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);

        virtualinvoke r129.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". See KeyProtection documentation.");

        $r53 = virtualinvoke r129.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r128.<java.security.KeyStoreException: void <init>(java.lang.String)>($r53);

        throw r128;

     label39:
        goto label40;

     label40:
        virtualinvoke $r27.<android.security.keymaster.KeymasterArguments: void addEnums(int,int[])>(536870918, r127);

     label41:
        $r130 = virtualinvoke r109.<android.security.keystore.KeyProtection: java.lang.String[] getSignaturePaddings()>();

        $r131 = staticinvoke <android.security.keystore.KeyProperties$SignaturePadding: int[] allToKeymaster(java.lang.String[])>($r130);

        virtualinvoke $r27.<android.security.keymaster.KeymasterArguments: void addEnums(int,int[])>(536870918, $r131);

        staticinvoke <android.security.keystore.KeymasterUtils: void addUserAuthArgs(android.security.keymaster.KeymasterArguments,android.security.keystore.UserAuthArgs)>($r27, r109);

        $r132 = virtualinvoke r109.<android.security.keystore.KeyProtection: java.util.Date getKeyValidityStart()>();

        virtualinvoke $r27.<android.security.keymaster.KeymasterArguments: void addDateIfNotNull(int,java.util.Date)>(1610613136, $r132);

        $r133 = virtualinvoke r109.<android.security.keystore.KeyProtection: java.util.Date getKeyValidityForOriginationEnd()>();

        virtualinvoke $r27.<android.security.keymaster.KeymasterArguments: void addDateIfNotNull(int,java.util.Date)>(1610613137, $r133);

        $r134 = virtualinvoke r109.<android.security.keystore.KeyProtection: java.util.Date getKeyValidityForConsumptionEnd()>();

        virtualinvoke $r27.<android.security.keymaster.KeymasterArguments: void addDateIfNotNull(int,java.util.Date)>(1610613138, $r134);

     label42:
        z23 = 1;

        r120 = r124;

        r121 = $r27;

     label43:
        if z23 == 0 goto label50;

     label44:
        $r45 = r0.<android.security.keystore.AndroidKeyStoreSpi: android.security.KeyStore mKeyStore>;

        $i12 = r0.<android.security.keystore.AndroidKeyStoreSpi: int mUid>;

        staticinvoke <android.security.Credentials: boolean deleteAllTypesForAlias(android.security.KeyStore,java.lang.String,int)>($r45, r105, $i12);

        r135 = new android.security.keymaster.KeyCharacteristics;

        specialinvoke r135.<android.security.keymaster.KeyCharacteristics: void <init>()>();

        r136 = r0.<android.security.keystore.AndroidKeyStoreSpi: android.security.KeyStore mKeyStore>;

        r137 = new java.lang.StringBuilder;

        specialinvoke r137.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r137.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRPKEY_");

        virtualinvoke r137.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r105);

        r138 = virtualinvoke r137.<java.lang.StringBuilder: java.lang.String toString()>();

        i35 = r0.<android.security.keystore.AndroidKeyStoreSpi: int mUid>;

     label45:
        i36 = virtualinvoke r136.<android.security.KeyStore: int importKey(java.lang.String,android.security.keymaster.KeymasterArguments,int,byte[],int,int,android.security.keymaster.KeyCharacteristics)>(r138, r121, 1, r120, i35, b23, r135);

     label46:
        if i36 != 1 goto label47;

        goto label51;

     label47:
        r139 = new java.security.KeyStoreException;

        $r48 = staticinvoke <android.security.KeyStore: android.security.KeyStoreException getKeyStoreException(int)>(i36);

        specialinvoke r139.<java.security.KeyStoreException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to store private key", $r48);

        throw r139;

     label48:
        $r100 := @caughtexception;

        r140 = $r100;

        goto label61;

     label49:
        $r101 := @caughtexception;

        r140 = $r101;

        goto label61;

     label50:
        $r33 = r0.<android.security.keystore.AndroidKeyStoreSpi: android.security.KeyStore mKeyStore>;

        $i6 = r0.<android.security.keystore.AndroidKeyStoreSpi: int mUid>;

        staticinvoke <android.security.Credentials: boolean deleteCertificateTypesForAlias(android.security.KeyStore,java.lang.String,int)>($r33, r105, $i6);

        $r34 = r0.<android.security.keystore.AndroidKeyStoreSpi: android.security.KeyStore mKeyStore>;

        $i7 = r0.<android.security.keystore.AndroidKeyStoreSpi: int mUid>;

        staticinvoke <android.security.Credentials: boolean deleteLegacyKeyForAlias(android.security.KeyStore,java.lang.String,int)>($r34, r105, $i7);

     label51:
        r141 = r0.<android.security.keystore.AndroidKeyStoreSpi: android.security.KeyStore mKeyStore>;

        r142 = new java.lang.StringBuilder;

        specialinvoke r142.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r142.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRCERT_");

        virtualinvoke r142.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r105);

        r143 = virtualinvoke r142.<java.lang.StringBuilder: java.lang.String toString()>();

        i37 = r0.<android.security.keystore.AndroidKeyStoreSpi: int mUid>;

     label52:
        i38 = virtualinvoke r141.<android.security.KeyStore: int insert(java.lang.String,byte[],int,int)>(r143, r1, i37, b23);

     label53:
        if i38 != 1 goto label58;

     label54:
        r144 = r0.<android.security.keystore.AndroidKeyStoreSpi: android.security.KeyStore mKeyStore>;

        r145 = new java.lang.StringBuilder;

        specialinvoke r145.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r145.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CACERT_");

        virtualinvoke r145.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r105);

        $r40 = virtualinvoke r145.<java.lang.StringBuilder: java.lang.String toString()>();

        $i8 = r0.<android.security.keystore.AndroidKeyStoreSpi: int mUid>;

        i39 = virtualinvoke r144.<android.security.KeyStore: int insert(java.lang.String,byte[],int,int)>($r40, r117, $i8, b23);

     label55:
        if i39 != 1 goto label57;

        goto label56;

     label56:
        return;

     label57:
        r146 = new java.security.KeyStoreException;

        $r41 = staticinvoke <android.security.KeyStore: android.security.KeyStoreException getKeyStoreException(int)>(i39);

        specialinvoke r146.<java.security.KeyStoreException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to store certificate chain", $r41);

        throw r146;

     label58:
        r147 = new java.security.KeyStoreException;

        $r37 = staticinvoke <android.security.KeyStore: android.security.KeyStoreException getKeyStoreException(int)>(i38);

        specialinvoke r147.<java.security.KeyStoreException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to store certificate #0", $r37);

        throw r147;

     label59:
        $r99 := @caughtexception;

        r140 = $r99;

        goto label61;

     label60:
        $r87 := @caughtexception;

        r140 = $r87;

     label61:
        if z23 == 0 goto label62;

        $r90 = r0.<android.security.keystore.AndroidKeyStoreSpi: android.security.KeyStore mKeyStore>;

        $i21 = r0.<android.security.keystore.AndroidKeyStoreSpi: int mUid>;

        staticinvoke <android.security.Credentials: boolean deleteAllTypesForAlias(android.security.KeyStore,java.lang.String,int)>($r90, r105, $i21);

        goto label63;

     label62:
        $r88 = r0.<android.security.keystore.AndroidKeyStoreSpi: android.security.KeyStore mKeyStore>;

        $i19 = r0.<android.security.keystore.AndroidKeyStoreSpi: int mUid>;

        staticinvoke <android.security.Credentials: boolean deleteCertificateTypesForAlias(android.security.KeyStore,java.lang.String,int)>($r88, r105, $i19);

        $r89 = r0.<android.security.keystore.AndroidKeyStoreSpi: android.security.KeyStore mKeyStore>;

        $i20 = r0.<android.security.keystore.AndroidKeyStoreSpi: int mUid>;

        staticinvoke <android.security.Credentials: boolean deleteLegacyKeyForAlias(android.security.KeyStore,java.lang.String,int)>($r89, r105, $i20);

     label63:
        throw r140;

     label64:
        $r91 := @caughtexception;

        r126 = $r91;

     label65:
        $r92 = new java.security.KeyStoreException;

        specialinvoke $r92.<java.security.KeyStoreException: void <init>(java.lang.Throwable)>(r126);

        throw $r92;

     label66:
        $r26 = new java.security.KeyStoreException;

        specialinvoke $r26.<java.security.KeyStoreException: void <init>(java.lang.String)>("Private key did not export any key material");

        throw $r26;

     label67:
        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported private key export format: ");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r123);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Only private keys which export their key material in PKCS#8 format are supported.");

        $r23 = new java.security.KeyStoreException;

        $r24 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.security.KeyStoreException: void <init>(java.lang.String)>($r24);

        throw $r23;

     label68:
        $r102 := @caughtexception;

        $r103 = new java.security.KeyStoreException;

        specialinvoke $r103.<java.security.KeyStoreException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to encode certificate #0", $r102);

        throw $r103;

     label69:
        $r17 = new java.security.KeyStoreException;

        specialinvoke $r17.<java.security.KeyStoreException: void <init>(java.lang.String)>("Must supply at least one Certificate with PrivateKey");

        throw $r17;

     label70:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported protection parameter class:");

        $r4 = virtualinvoke r108.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Supported: ");

        $r8 = class "Landroid/security/keystore/KeyProtection;";

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r12 = class "Landroid/security/KeyStoreParameter;";

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = new java.security.KeyStoreException;

        $r16 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.security.KeyStoreException: void <init>(java.lang.String)>($r16);

        throw $r15;

        catch java.security.cert.CertificateEncodingException from label09 to label10 with label68;
        catch java.security.cert.CertificateEncodingException from label12 to label13 with label14;
        catch java.lang.IllegalArgumentException from label24 to label25 with label64;
        catch java.lang.IllegalStateException from label24 to label25 with label64;
        catch java.lang.IllegalArgumentException from label25 to label26 with label64;
        catch java.lang.IllegalStateException from label25 to label26 with label64;
        catch java.lang.IllegalArgumentException from label27 to label28 with label29;
        catch java.lang.IllegalStateException from label27 to label28 with label29;
        catch java.lang.IllegalArgumentException from label30 to label31 with label64;
        catch java.lang.IllegalStateException from label30 to label31 with label64;
        catch java.lang.IllegalArgumentException from label31 to label32 with label64;
        catch java.lang.IllegalStateException from label31 to label32 with label64;
        catch java.lang.IllegalArgumentException from label33 to label34 with label29;
        catch java.lang.IllegalStateException from label33 to label34 with label29;
        catch java.lang.IllegalArgumentException from label36 to label37 with label29;
        catch java.lang.IllegalStateException from label36 to label37 with label29;
        catch java.lang.IllegalArgumentException from label38 to label39 with label29;
        catch java.lang.IllegalStateException from label38 to label39 with label29;
        catch java.lang.IllegalArgumentException from label40 to label41 with label64;
        catch java.lang.IllegalStateException from label40 to label41 with label64;
        catch java.lang.IllegalArgumentException from label41 to label42 with label64;
        catch java.lang.IllegalStateException from label41 to label42 with label64;
        catch java.lang.Throwable from label44 to label45 with label49;
        catch java.lang.Throwable from label45 to label46 with label48;
        catch java.lang.Throwable from label47 to label48 with label48;
        catch java.lang.Throwable from label50 to label51 with label60;
        catch java.lang.Throwable from label51 to label52 with label60;
        catch java.lang.Throwable from label52 to label53 with label59;
        catch java.lang.Throwable from label54 to label55 with label59;
        catch java.lang.Throwable from label57 to label58 with label59;
        catch java.lang.Throwable from label58 to label59 with label59;
    }

    private void setSecretKeyEntry(java.lang.String, javax.crypto.SecretKey, java.security.KeyStore$ProtectionParameter) throws java.security.KeyStoreException
    {
        android.security.keystore.AndroidKeyStoreSpi r0;
        android.security.keystore.KeyProtection r1;
        byte[] r2;
        int[] r4, $r17, r94, r97, r102, $r105;
        boolean z0, $z1, $z2, $z3, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, $i11, i12, $i13, i16;
        java.security.KeyStoreException $r5, $r6, $r11, $r13, $r30, $r56, $r62, $r64, $r68, $r79, r95, r103, r110, $r111;
        java.lang.String $r7, $r12, $r15, $r31, $r33, $r36, $r38, $r40, $r42, $r49, $r52, $r54, $r63, $r69, $r73, $r77, $r80, r84, r88, r89, r91, r93, r108;
        java.lang.StringBuilder $r8, $r22, $r27, $r57, $r65, $r70, r96, r99, r104;
        android.security.keymaster.KeymasterArguments $r14;
        java.lang.String[] $r16, $r37, $r43, $r45, $r101, $r106;
        java.util.Date $r18, $r19, $r20;
        android.security.KeyStore $r21, $r26;
        android.security.keymaster.KeyCharacteristics $r25;
        java.util.List $r46;
        android.security.keystore.AndroidKeyStoreSecretKey $r55;
        java.lang.Class $r72, $r76;
        java.lang.Throwable $r81, $r82, $r83, r100;
        javax.crypto.SecretKey r85;
        java.security.KeyStore$ProtectionParameter r86;
        java.security.ProviderException r98;
        byte b14, b15;

        r0 := @this: android.security.keystore.AndroidKeyStoreSpi;

        r84 := @parameter0: java.lang.String;

        r85 := @parameter1: javax.crypto.SecretKey;

        r86 := @parameter2: java.security.KeyStore$ProtectionParameter;

        if r86 == null goto label02;

        $z12 = r86 instanceof android.security.keystore.KeyProtection;

        if $z12 == 0 goto label01;

        goto label02;

     label01:
        $r70 = new java.lang.StringBuilder;

        specialinvoke $r70.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported protection parameter class: ");

        $r72 = virtualinvoke r86.<java.lang.Object: java.lang.Class getClass()>();

        $r73 = virtualinvoke $r72.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r73);

        virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Supported: ");

        $r76 = class "Landroid/security/keystore/KeyProtection;";

        $r77 = virtualinvoke $r76.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r77);

        $r79 = new java.security.KeyStoreException;

        $r80 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r79.<java.security.KeyStoreException: void <init>(java.lang.String)>($r80);

        throw $r79;

     label02:
        r1 = (android.security.keystore.KeyProtection) r86;

        $z1 = r85 instanceof android.security.keystore.AndroidKeyStoreSecretKey;

        if $z1 == 0 goto label08;

        $r55 = (android.security.keystore.AndroidKeyStoreSecretKey) r85;

        r88 = virtualinvoke $r55.<android.security.keystore.AndroidKeyStoreSecretKey: java.lang.String getAlias()>();

        if r88 == null goto label07;

        r89 = "USRPKEY_";

        $z9 = virtualinvoke r88.<java.lang.String: boolean startsWith(java.lang.String)>("USRPKEY_");

        if $z9 != 0 goto label04;

        r89 = "USRSKEY_";

        $z11 = virtualinvoke r88.<java.lang.String: boolean startsWith(java.lang.String)>("USRSKEY_");

        if $z11 == 0 goto label03;

        goto label04;

     label03:
        $r65 = new java.lang.StringBuilder;

        specialinvoke $r65.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("KeyStore-backed secret key has invalid alias: ");

        virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r88);

        $r68 = new java.security.KeyStoreException;

        $r69 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r68.<java.security.KeyStoreException: void <init>(java.lang.String)>($r69);

        throw $r68;

     label04:
        $i7 = virtualinvoke r89.<java.lang.String: int length()>();

        r91 = virtualinvoke r88.<java.lang.String: java.lang.String substring(int)>($i7);

        $z10 = virtualinvoke r84.<java.lang.String: boolean equals(java.lang.Object)>(r91);

        if $z10 == 0 goto label06;

        if r1 != null goto label05;

        return;

     label05:
        $r64 = new java.security.KeyStoreException;

        specialinvoke $r64.<java.security.KeyStoreException: void <init>(java.lang.String)>("Modifying KeyStore-backed key using protection parameters not supported");

        throw $r64;

     label06:
        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can only replace KeyStore-backed keys with same alias: ");

        virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r84);

        virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != ");

        virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r91);

        $r62 = new java.security.KeyStoreException;

        $r63 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r62.<java.security.KeyStoreException: void <init>(java.lang.String)>($r63);

        throw $r62;

     label07:
        $r56 = new java.security.KeyStoreException;

        specialinvoke $r56.<java.security.KeyStoreException: void <init>(java.lang.String)>("KeyStore-backed secret key does not have an alias");

        throw $r56;

     label08:
        if r1 == null goto label50;

        r93 = interfaceinvoke r85.<javax.crypto.SecretKey: java.lang.String getFormat()>();

        if r93 == null goto label49;

        $r7 = "RAW";

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r93);

        if $z2 == 0 goto label48;

        r2 = interfaceinvoke r85.<javax.crypto.SecretKey: byte[] getEncoded()>();

        if r2 == null goto label47;

        $r14 = new android.security.keymaster.KeymasterArguments;

        specialinvoke $r14.<android.security.keymaster.KeymasterArguments: void <init>()>();

     label09:
        $r15 = interfaceinvoke r85.<javax.crypto.SecretKey: java.lang.String getAlgorithm()>();

        i8 = staticinvoke <android.security.keystore.KeyProperties$KeyAlgorithm: int toKeymasterSecretKeyAlgorithm(java.lang.String)>($r15);

        virtualinvoke $r14.<android.security.keymaster.KeymasterArguments: void addEnum(int,int)>(268435458, i8);

     label10:
        i9 = 0;

        if i8 != 128 goto label22;

     label11:
        $r38 = interfaceinvoke r85.<javax.crypto.SecretKey: java.lang.String getAlgorithm()>();

        i10 = staticinvoke <android.security.keystore.KeyProperties$KeyAlgorithm: int toKeymasterDigest(java.lang.String)>($r38);

     label12:
        if i10 == -1 goto label20;

     label13:
        r94 = newarray (int)[1];

     label14:
        r94[0] = i10;

     label15:
        $z8 = virtualinvoke r1.<android.security.keystore.KeyProtection: boolean isDigestsSpecified()>();

        if $z8 == 0 goto label19;

     label16:
        $r43 = virtualinvoke r1.<android.security.keystore.KeyProtection: java.lang.String[] getDigests()>();

        r4 = staticinvoke <android.security.keystore.KeyProperties$Digest: int[] allToKeymaster(java.lang.String[])>($r43);

        $i5 = lengthof r4;

        if $i5 != 1 goto label18;

     label17:
        $i6 = r4[0];

        if $i6 != i10 goto label18;

        goto label19;

     label18:
        r95 = new java.security.KeyStoreException;

        r96 = new java.lang.StringBuilder;

        specialinvoke r96.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported digests specification: ");

        $r45 = virtualinvoke r1.<android.security.keystore.KeyProtection: java.lang.String[] getDigests()>();

        $r46 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r45);

        virtualinvoke r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r46);

        virtualinvoke r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Only ");

        $r49 = staticinvoke <android.security.keystore.KeyProperties$Digest: java.lang.String fromKeymaster(int)>(i10);

        virtualinvoke r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r49);

        virtualinvoke r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" supported for HMAC key algorithm ");

        $r52 = interfaceinvoke r85.<javax.crypto.SecretKey: java.lang.String getAlgorithm()>();

        virtualinvoke r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r52);

        $r54 = virtualinvoke r96.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r95.<java.security.KeyStoreException: void <init>(java.lang.String)>($r54);

        throw r95;

     label19:
        r97 = r94;

        goto label27;

     label20:
        r98 = new java.security.ProviderException;

        r99 = new java.lang.StringBuilder;

        specialinvoke r99.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HMAC key algorithm digest unknown for key algorithm ");

        $r40 = interfaceinvoke r85.<javax.crypto.SecretKey: java.lang.String getAlgorithm()>();

        virtualinvoke r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        $r42 = virtualinvoke r99.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r98.<java.security.ProviderException: void <init>(java.lang.String)>($r42);

        throw r98;

     label21:
        $r81 := @caughtexception;

        r100 = $r81;

        goto label46;

     label22:
        z0 = virtualinvoke r1.<android.security.keystore.KeyProtection: boolean isDigestsSpecified()>();

     label23:
        if z0 == 0 goto label26;

     label24:
        $r37 = virtualinvoke r1.<android.security.keystore.KeyProtection: java.lang.String[] getDigests()>();

        r97 = staticinvoke <android.security.keystore.KeyProperties$Digest: int[] allToKeymaster(java.lang.String[])>($r37);

     label25:
        goto label27;

     label26:
        r97 = <libcore.util.EmptyArray: int[] INT>;

     label27:
        virtualinvoke $r14.<android.security.keymaster.KeymasterArguments: void addEnums(int,int[])>(536870917, r97);

        i0 = virtualinvoke r1.<android.security.keystore.KeyProtection: int getPurposes()>();

     label28:
        $r101 = virtualinvoke r1.<android.security.keystore.KeyProtection: java.lang.String[] getBlockModes()>();

        r102 = staticinvoke <android.security.keystore.KeyProperties$BlockMode: int[] allToKeymaster(java.lang.String[])>($r101);

     label29:
        $i11 = i0 & 1;

        if $i11 == 0 goto label35;

     label30:
        $z6 = virtualinvoke r1.<android.security.keystore.KeyProtection: boolean isRandomizedEncryptionRequired()>();

        if $z6 == 0 goto label35;

        i12 = lengthof r102;

     label31:
        if i9 >= i12 goto label35;

        i1 = r102[i9];

     label32:
        $z7 = staticinvoke <android.security.keystore.KeymasterUtils: boolean isKeymasterBlockModeIndCpaCompatibleWithSymmetricCrypto(int)>(i1);

        if $z7 == 0 goto label34;

     label33:
        i9 = i9 + 1;

        goto label31;

     label34:
        r103 = new java.security.KeyStoreException;

        r104 = new java.lang.StringBuilder;

        specialinvoke r104.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Randomized encryption (IND-CPA) required but may be violated by block mode: ");

        $r33 = staticinvoke <android.security.keystore.KeyProperties$BlockMode: java.lang.String fromKeymaster(int)>(i1);

        virtualinvoke r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        virtualinvoke r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". See KeyProtection documentation.");

        $r36 = virtualinvoke r104.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r103.<java.security.KeyStoreException: void <init>(java.lang.String)>($r36);

        throw r103;

     label35:
        $r105 = staticinvoke <android.security.keystore.KeyProperties$Purpose: int[] allToKeymaster(int)>(i0);

        virtualinvoke $r14.<android.security.keymaster.KeymasterArguments: void addEnums(int,int[])>(536870913, $r105);

        virtualinvoke $r14.<android.security.keymaster.KeymasterArguments: void addEnums(int,int[])>(536870916, r102);

        $r106 = virtualinvoke r1.<android.security.keystore.KeyProtection: java.lang.String[] getSignaturePaddings()>();

        $i13 = lengthof $r106;

        if $i13 > 0 goto label43;

     label36:
        $r16 = virtualinvoke r1.<android.security.keystore.KeyProtection: java.lang.String[] getEncryptionPaddings()>();

        $r17 = staticinvoke <android.security.keystore.KeyProperties$EncryptionPadding: int[] allToKeymaster(java.lang.String[])>($r16);

        virtualinvoke $r14.<android.security.keymaster.KeymasterArguments: void addEnums(int,int[])>(536870918, $r17);

        staticinvoke <android.security.keystore.KeymasterUtils: void addUserAuthArgs(android.security.keymaster.KeymasterArguments,android.security.keystore.UserAuthArgs)>($r14, r1);

        staticinvoke <android.security.keystore.KeymasterUtils: void addMinMacLengthAuthorizationIfNecessary(android.security.keymaster.KeymasterArguments,int,int[],int[])>($r14, i8, r102, r97);

        $r18 = virtualinvoke r1.<android.security.keystore.KeyProtection: java.util.Date getKeyValidityStart()>();

        virtualinvoke $r14.<android.security.keymaster.KeymasterArguments: void addDateIfNotNull(int,java.util.Date)>(1610613136, $r18);

        $r19 = virtualinvoke r1.<android.security.keystore.KeyProtection: java.util.Date getKeyValidityForOriginationEnd()>();

        virtualinvoke $r14.<android.security.keymaster.KeymasterArguments: void addDateIfNotNull(int,java.util.Date)>(1610613137, $r19);

        $r20 = virtualinvoke r1.<android.security.keystore.KeyProtection: java.util.Date getKeyValidityForConsumptionEnd()>();

        virtualinvoke $r14.<android.security.keymaster.KeymasterArguments: void addDateIfNotNull(int,java.util.Date)>(1610613138, $r20);

     label37:
        $i2 = i0 & 1;

        if $i2 == 0 goto label39;

     label38:
        $z5 = virtualinvoke r1.<android.security.keystore.KeyProtection: boolean isRandomizedEncryptionRequired()>();

        if $z5 != 0 goto label39;

        virtualinvoke $r14.<android.security.keymaster.KeymasterArguments: void addBoolean(int)>(1879048199);

     label39:
        b14 = 0;

        $z13 = virtualinvoke r1.<android.security.keystore.KeyProtection: boolean isCriticalToDeviceEncryption()>();

        if $z13 == 0 goto label40;

        b14 = 0 | 8;

     label40:
        b15 = b14;

        $z3 = virtualinvoke r1.<android.security.keystore.KeyProtection: boolean isStrongBoxBacked()>();

        if $z3 == 0 goto label41;

        b15 = b14 | 16;

     label41:
        $r21 = r0.<android.security.keystore.AndroidKeyStoreSpi: android.security.KeyStore mKeyStore>;

        $i3 = r0.<android.security.keystore.AndroidKeyStoreSpi: int mUid>;

        staticinvoke <android.security.Credentials: boolean deleteAllTypesForAlias(android.security.KeyStore,java.lang.String,int)>($r21, r84, $i3);

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRPKEY_");

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r84);

        r108 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        $r26 = r0.<android.security.keystore.AndroidKeyStoreSpi: android.security.KeyStore mKeyStore>;

        $i4 = r0.<android.security.keystore.AndroidKeyStoreSpi: int mUid>;

        $r25 = new android.security.keymaster.KeyCharacteristics;

        specialinvoke $r25.<android.security.keymaster.KeyCharacteristics: void <init>()>();

        i16 = virtualinvoke $r26.<android.security.KeyStore: int importKey(java.lang.String,android.security.keymaster.KeymasterArguments,int,byte[],int,int,android.security.keymaster.KeyCharacteristics)>(r108, $r14, 3, r2, $i4, b15, $r25);

        if i16 != 1 goto label42;

        return;

     label42:
        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to import secret key. Keystore error code: ");

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i16);

        $r30 = new java.security.KeyStoreException;

        $r31 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<java.security.KeyStoreException: void <init>(java.lang.String)>($r31);

        throw $r30;

     label43:
        r110 = new java.security.KeyStoreException;

        specialinvoke r110.<java.security.KeyStoreException: void <init>(java.lang.String)>("Signature paddings not supported for symmetric keys");

        throw r110;

     label44:
        $r82 := @caughtexception;

        r100 = $r82;

        goto label46;

     label45:
        $r83 := @caughtexception;

        r100 = $r83;

     label46:
        $r111 = new java.security.KeyStoreException;

        specialinvoke $r111.<java.security.KeyStoreException: void <init>(java.lang.Throwable)>(r100);

        throw $r111;

     label47:
        $r13 = new java.security.KeyStoreException;

        specialinvoke $r13.<java.security.KeyStoreException: void <init>(java.lang.String)>("Key did not export its key material despite supporting RAW format export");

        throw $r13;

     label48:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported secret key material export format: ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r93);

        $r11 = new java.security.KeyStoreException;

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.security.KeyStoreException: void <init>(java.lang.String)>($r12);

        throw $r11;

     label49:
        $r6 = new java.security.KeyStoreException;

        specialinvoke $r6.<java.security.KeyStoreException: void <init>(java.lang.String)>("Only secret keys that export their key material are supported");

        throw $r6;

     label50:
        $r5 = new java.security.KeyStoreException;

        specialinvoke $r5.<java.security.KeyStoreException: void <init>(java.lang.String)>("Protection parameters must be specified when importing a symmetric key");

        throw $r5;

        catch java.lang.IllegalArgumentException from label09 to label10 with label45;
        catch java.lang.IllegalStateException from label09 to label10 with label45;
        catch java.lang.IllegalArgumentException from label11 to label12 with label21;
        catch java.lang.IllegalStateException from label11 to label12 with label21;
        catch java.lang.IllegalArgumentException from label13 to label14 with label21;
        catch java.lang.IllegalStateException from label13 to label14 with label21;
        catch java.lang.IllegalArgumentException from label15 to label16 with label21;
        catch java.lang.IllegalStateException from label15 to label16 with label21;
        catch java.lang.IllegalArgumentException from label16 to label17 with label21;
        catch java.lang.IllegalStateException from label16 to label17 with label21;
        catch java.lang.IllegalArgumentException from label18 to label19 with label21;
        catch java.lang.IllegalStateException from label18 to label19 with label21;
        catch java.lang.IllegalArgumentException from label20 to label21 with label21;
        catch java.lang.IllegalStateException from label20 to label21 with label21;
        catch java.lang.IllegalArgumentException from label22 to label23 with label45;
        catch java.lang.IllegalStateException from label22 to label23 with label45;
        catch java.lang.IllegalArgumentException from label24 to label25 with label21;
        catch java.lang.IllegalStateException from label24 to label25 with label21;
        catch java.lang.IllegalArgumentException from label26 to label27 with label45;
        catch java.lang.IllegalStateException from label26 to label27 with label45;
        catch java.lang.IllegalArgumentException from label27 to label28 with label45;
        catch java.lang.IllegalStateException from label27 to label28 with label45;
        catch java.lang.IllegalArgumentException from label28 to label29 with label45;
        catch java.lang.IllegalStateException from label28 to label29 with label45;
        catch java.lang.IllegalArgumentException from label30 to label31 with label21;
        catch java.lang.IllegalStateException from label30 to label31 with label21;
        catch java.lang.IllegalArgumentException from label32 to label33 with label21;
        catch java.lang.IllegalStateException from label32 to label33 with label21;
        catch java.lang.IllegalArgumentException from label34 to label35 with label21;
        catch java.lang.IllegalStateException from label34 to label35 with label21;
        catch java.lang.IllegalArgumentException from label35 to label36 with label45;
        catch java.lang.IllegalStateException from label35 to label36 with label45;
        catch java.lang.IllegalArgumentException from label36 to label37 with label45;
        catch java.lang.IllegalStateException from label36 to label37 with label45;
        catch java.lang.IllegalArgumentException from label38 to label39 with label21;
        catch java.lang.IllegalStateException from label38 to label39 with label21;
        catch java.lang.IllegalArgumentException from label43 to label44 with label44;
        catch java.lang.IllegalStateException from label43 to label44 with label44;
    }

    private void setWrappedKeyEntry(java.lang.String, android.security.keystore.WrappedKeyEntry, java.security.KeyStore$ProtectionParameter) throws java.security.KeyStoreException
    {
        android.security.keystore.AndroidKeyStoreSpi r0;
        android.security.keystore.WrappedKeyEntry r1;
        byte[] r3, r50;
        int i0, $i1, $i2, $i4;
        java.security.KeyStoreException $r4, $r17;
        android.security.keymaster.KeymasterArguments $r5;
        java.lang.String $r6, $r7, $r8, $r18, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r33, $r34, $r35, $r36, $r40, $r41, $r42, $r43, r48, r52, r53, r54, r57, r61, $r64, $r65;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17;
        android.security.keystore.SecureKeyImportUnavailableException $r13;
        java.lang.StringBuilder $r14, $r59, $r62;
        java.lang.String[] $r19, r51;
        int[] $r27, $r28, $r29, $r30, $r31, $r32, $r37, $r38, $r39, $r44, $r45, $r46, $r47;
        java.security.KeyStore$ProtectionParameter r49;
        java.security.spec.AlgorithmParameterSpec $r55;
        android.security.keystore.KeyGenParameterSpec r56;
        android.security.KeyStore r58;
        long $l3;
        android.security.keymaster.KeyCharacteristics $r66;

        r0 := @this: android.security.keystore.AndroidKeyStoreSpi;

        r48 := @parameter0: java.lang.String;

        r1 := @parameter1: android.security.keystore.WrappedKeyEntry;

        r49 := @parameter2: java.security.KeyStore$ProtectionParameter;

        if r49 != null goto label20;

        r50 = newarray (byte)[32];

        $r5 = new android.security.keymaster.KeymasterArguments;

        specialinvoke $r5.<android.security.keymaster.KeymasterArguments: void <init>()>();

        $r6 = virtualinvoke r1.<android.security.keystore.WrappedKeyEntry: java.lang.String getTransformation()>();

        r51 = virtualinvoke $r6.<java.lang.String: java.lang.String[] split(java.lang.String)>("/");

        r52 = r51[0];

        $r7 = "RSA";

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r52);

        if $z0 == 0 goto label01;

        virtualinvoke $r5.<android.security.keymaster.KeymasterArguments: void addEnum(int,int)>(268435458, 1);

        goto label02;

     label01:
        $r8 = "EC";

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r52);

        if $z1 == 0 goto label02;

        virtualinvoke $r5.<android.security.keymaster.KeymasterArguments: void addEnum(int,int)>(268435458, 1);

     label02:
        $i1 = lengthof r51;

        if $i1 <= 1 goto label06;

        r53 = r51[1];

        $r40 = "ECB";

        $z13 = virtualinvoke $r40.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r53);

        if $z13 == 0 goto label03;

        $r47 = newarray (int)[1];

        $r47[0] = 1;

        virtualinvoke $r5.<android.security.keymaster.KeymasterArguments: void addEnums(int,int[])>(536870916, $r47);

        goto label06;

     label03:
        $r41 = "CBC";

        $z14 = virtualinvoke $r41.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r53);

        if $z14 == 0 goto label04;

        $r46 = newarray (int)[1];

        $r46[0] = 2;

        virtualinvoke $r5.<android.security.keymaster.KeymasterArguments: void addEnums(int,int[])>(536870916, $r46);

        goto label06;

     label04:
        $r42 = "CTR";

        $z15 = virtualinvoke $r42.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r53);

        if $z15 == 0 goto label05;

        $r45 = newarray (int)[1];

        $r45[0] = 3;

        virtualinvoke $r5.<android.security.keymaster.KeymasterArguments: void addEnums(int,int[])>(536870916, $r45);

        goto label06;

     label05:
        $r43 = "GCM";

        $z16 = virtualinvoke $r43.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r53);

        if $z16 == 0 goto label06;

        $r44 = newarray (int)[1];

        $r44[0] = 32;

        virtualinvoke $r5.<android.security.keymaster.KeymasterArguments: void addEnums(int,int[])>(536870916, $r44);

     label06:
        $i2 = lengthof r51;

        if $i2 <= 2 goto label10;

        r54 = r51[2];

        $r33 = "NoPadding";

        $z9 = virtualinvoke $r33.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r54);

        if $z9 == 0 goto label07;

        goto label10;

     label07:
        $r34 = "PKCS7Padding";

        $z10 = virtualinvoke $r34.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r54);

        if $z10 == 0 goto label08;

        $r39 = newarray (int)[1];

        $r39[0] = 64;

        virtualinvoke $r5.<android.security.keymaster.KeymasterArguments: void addEnums(int,int[])>(536870918, $r39);

        goto label10;

     label08:
        $r35 = "PKCS1Padding";

        $z11 = virtualinvoke $r35.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r54);

        if $z11 == 0 goto label09;

        $r38 = newarray (int)[1];

        $r38[0] = 4;

        virtualinvoke $r5.<android.security.keymaster.KeymasterArguments: void addEnums(int,int[])>(536870918, $r38);

        goto label10;

     label09:
        $r36 = "OAEPPadding";

        $z12 = virtualinvoke $r36.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r54);

        if $z12 == 0 goto label10;

        $r37 = newarray (int)[1];

        $r37[0] = 2;

        virtualinvoke $r5.<android.security.keymaster.KeymasterArguments: void addEnums(int,int[])>(536870918, $r37);

     label10:
        $r55 = virtualinvoke r1.<android.security.keystore.WrappedKeyEntry: java.security.spec.AlgorithmParameterSpec getAlgorithmParameterSpec()>();

        r56 = (android.security.keystore.KeyGenParameterSpec) $r55;

        $z17 = virtualinvoke r56.<android.security.keystore.KeyGenParameterSpec: boolean isDigestsSpecified()>();

        if $z17 == 0 goto label17;

        $r19 = virtualinvoke r56.<android.security.keystore.KeyGenParameterSpec: java.lang.String[] getDigests()>();

        r57 = $r19[0];

        $r20 = "NONE";

        $z2 = virtualinvoke $r20.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r57);

        if $z2 == 0 goto label11;

        goto label17;

     label11:
        $r21 = "MD5";

        $z3 = virtualinvoke $r21.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r57);

        if $z3 == 0 goto label12;

        $r32 = newarray (int)[1];

        $r32[0] = 1;

        virtualinvoke $r5.<android.security.keymaster.KeymasterArguments: void addEnums(int,int[])>(536870917, $r32);

        goto label17;

     label12:
        $r22 = "SHA-1";

        $z4 = virtualinvoke $r22.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r57);

        if $z4 == 0 goto label13;

        $r31 = newarray (int)[1];

        $r31[0] = 2;

        virtualinvoke $r5.<android.security.keymaster.KeymasterArguments: void addEnums(int,int[])>(536870917, $r31);

        goto label17;

     label13:
        $r23 = "SHA-224";

        $z5 = virtualinvoke $r23.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r57);

        if $z5 == 0 goto label14;

        $r30 = newarray (int)[1];

        $r30[0] = 3;

        virtualinvoke $r5.<android.security.keymaster.KeymasterArguments: void addEnums(int,int[])>(536870917, $r30);

        goto label17;

     label14:
        $r24 = "SHA-256";

        $z6 = virtualinvoke $r24.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r57);

        if $z6 == 0 goto label15;

        $r29 = newarray (int)[1];

        $r29[0] = 4;

        virtualinvoke $r5.<android.security.keymaster.KeymasterArguments: void addEnums(int,int[])>(536870917, $r29);

        goto label17;

     label15:
        $r25 = "SHA-384";

        $z7 = virtualinvoke $r25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r57);

        if $z7 == 0 goto label16;

        $r28 = newarray (int)[1];

        $r28[0] = 5;

        virtualinvoke $r5.<android.security.keymaster.KeymasterArguments: void addEnums(int,int[])>(536870917, $r28);

        goto label17;

     label16:
        $r26 = "SHA-512";

        $z8 = virtualinvoke $r26.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r57);

        if $z8 == 0 goto label17;

        $r27 = newarray (int)[1];

        $r27[0] = 6;

        virtualinvoke $r5.<android.security.keymaster.KeymasterArguments: void addEnums(int,int[])>(536870917, $r27);

     label17:
        r58 = r0.<android.security.keystore.AndroidKeyStoreSpi: android.security.KeyStore mKeyStore>;

        $r59 = new java.lang.StringBuilder;

        specialinvoke $r59.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRPKEY_");

        virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r48);

        r61 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        r3 = virtualinvoke r1.<android.security.keystore.WrappedKeyEntry: byte[] getWrappedKeyBytes()>();

        $r62 = new java.lang.StringBuilder;

        specialinvoke $r62.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRPKEY_");

        $r64 = virtualinvoke r1.<android.security.keystore.WrappedKeyEntry: java.lang.String getWrappingKeyAlias()>();

        virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r64);

        $r65 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>();

        $l3 = staticinvoke <android.security.GateKeeper: long getSecureUserId()>();

        $i4 = r0.<android.security.keystore.AndroidKeyStoreSpi: int mUid>;

        $r66 = new android.security.keymaster.KeyCharacteristics;

        specialinvoke $r66.<android.security.keymaster.KeyCharacteristics: void <init>()>();

        i0 = virtualinvoke r58.<android.security.KeyStore: int importWrappedKey(java.lang.String,byte[],java.lang.String,byte[],android.security.keymaster.KeymasterArguments,long,long,int,android.security.keymaster.KeyCharacteristics)>(r61, r3, $r65, r50, $r5, $l3, 0L, $i4, $r66);

        if i0 == -100 goto label19;

        if i0 != 1 goto label18;

        return;

     label18:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to import wrapped key. Keystore error code: ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r17 = new java.security.KeyStoreException;

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.security.KeyStoreException: void <init>(java.lang.String)>($r18);

        throw $r17;

     label19:
        $r13 = new android.security.keystore.SecureKeyImportUnavailableException;

        specialinvoke $r13.<android.security.keystore.SecureKeyImportUnavailableException: void <init>(java.lang.String)>("Could not import wrapped key");

        throw $r13;

     label20:
        $r4 = new java.security.KeyStoreException;

        specialinvoke $r4.<java.security.KeyStoreException: void <init>(java.lang.String)>("Protection parameters are specified inside wrapped keys");

        throw $r4;
    }

    private static java.security.cert.X509Certificate toCertificate(byte[])
    {
        java.security.cert.CertificateFactory r0;
        java.io.ByteArrayInputStream r1;
        java.security.cert.Certificate $r2;
        java.lang.Throwable $r3;
        byte[] r4;
        java.security.cert.X509Certificate r5;

        r4 := @parameter0: byte[];

     label1:
        r0 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");

        r1 = new java.io.ByteArrayInputStream;

        specialinvoke r1.<java.io.ByteArrayInputStream: void <init>(byte[])>(r4);

        $r2 = virtualinvoke r0.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>(r1);

        r5 = (java.security.cert.X509Certificate) $r2;

     label2:
        return r5;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("AndroidKeyStore", "Couldn\'t parse certificate in keystore", $r3);

        return null;

        catch java.security.cert.CertificateException from label1 to label2 with label3;
    }

    private static java.util.Collection toCertificates(byte[])
    {
        java.security.cert.CertificateFactory r0;
        java.io.ByteArrayInputStream r1;
        java.lang.Throwable $r2;
        java.util.ArrayList $r3;
        byte[] r4;
        java.util.Collection r5;

        r4 := @parameter0: byte[];

     label1:
        r0 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");

        r1 = new java.io.ByteArrayInputStream;

        specialinvoke r1.<java.io.ByteArrayInputStream: void <init>(byte[])>(r4);

        r5 = virtualinvoke r0.<java.security.cert.CertificateFactory: java.util.Collection generateCertificates(java.io.InputStream)>(r1);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("AndroidKeyStore", "Couldn\'t parse certificates in keystore", $r2);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        return $r3;

        catch java.security.cert.CertificateException from label1 to label2 with label3;
    }

    private static android.security.keystore.AndroidKeyStoreSpi$KeyStoreX509Certificate wrapIntoKeyStoreCertificate(java.lang.String, int, java.security.cert.X509Certificate)
    {
        int i0;
        java.security.cert.X509Certificate r0;
        android.security.keystore.AndroidKeyStoreSpi$KeyStoreX509Certificate $r1, r3;
        java.lang.String r2;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r0 := @parameter2: java.security.cert.X509Certificate;

        if r0 == null goto label1;

        $r1 = new android.security.keystore.AndroidKeyStoreSpi$KeyStoreX509Certificate;

        specialinvoke $r1.<android.security.keystore.AndroidKeyStoreSpi$KeyStoreX509Certificate: void <init>(java.lang.String,int,java.security.cert.X509Certificate)>(r2, i0, r0);

        r3 = $r1;

        goto label2;

     label1:
        r3 = null;

     label2:
        return r3;
    }

    public java.util.Enumeration engineAliases()
    {
        android.security.keystore.AndroidKeyStoreSpi r0;
        java.util.Set $r1;
        java.util.Enumeration $r2;

        r0 := @this: android.security.keystore.AndroidKeyStoreSpi;

        $r1 = specialinvoke r0.<android.security.keystore.AndroidKeyStoreSpi: java.util.Set getUniqueAliases()>();

        $r2 = staticinvoke <java.util.Collections: java.util.Enumeration enumeration(java.util.Collection)>($r1);

        return $r2;
    }

    public boolean engineContainsAlias(java.lang.String)
    {
        android.security.keystore.AndroidKeyStoreSpi r0;
        java.lang.String r1, $r6, $r10, $r14, $r18;
        java.lang.NullPointerException $r2;
        java.lang.StringBuilder $r3, $r7, $r11, $r15;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1, $z2, $z3, z4;
        android.security.KeyStore r19, r21, r23, r25;

        r0 := @this: android.security.keystore.AndroidKeyStoreSpi;

        r1 := @parameter0: java.lang.String;

        if r1 == null goto label4;

        r19 = r0.<android.security.keystore.AndroidKeyStoreSpi: android.security.KeyStore mKeyStore>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRPKEY_");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $i0 = r0.<android.security.keystore.AndroidKeyStoreSpi: int mUid>;

        $z0 = virtualinvoke r19.<android.security.KeyStore: boolean contains(java.lang.String,int)>($r6, $i0);

        if $z0 != 0 goto label2;

        r21 = r0.<android.security.keystore.AndroidKeyStoreSpi: android.security.KeyStore mKeyStore>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRSKEY_");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = r0.<android.security.keystore.AndroidKeyStoreSpi: int mUid>;

        $z1 = virtualinvoke r21.<android.security.KeyStore: boolean contains(java.lang.String,int)>($r10, $i1);

        if $z1 != 0 goto label2;

        r23 = r0.<android.security.keystore.AndroidKeyStoreSpi: android.security.KeyStore mKeyStore>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRCERT_");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $i2 = r0.<android.security.keystore.AndroidKeyStoreSpi: int mUid>;

        $z2 = virtualinvoke r23.<android.security.KeyStore: boolean contains(java.lang.String,int)>($r14, $i2);

        if $z2 != 0 goto label2;

        r25 = r0.<android.security.keystore.AndroidKeyStoreSpi: android.security.KeyStore mKeyStore>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CACERT_");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $i3 = r0.<android.security.keystore.AndroidKeyStoreSpi: int mUid>;

        $z3 = virtualinvoke r25.<android.security.KeyStore: boolean contains(java.lang.String,int)>($r18, $i3);

        if $z3 == 0 goto label1;

        goto label2;

     label1:
        z4 = 0;

        goto label3;

     label2:
        z4 = 1;

     label3:
        return z4;

     label4:
        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("alias == null");

        throw $r2;
    }

    public void engineDeleteEntry(java.lang.String) throws java.security.KeyStoreException
    {
        android.security.keystore.AndroidKeyStoreSpi r0;
        java.lang.String r1, $r8;
        int $i0;
        android.security.KeyStore $r3;
        boolean $z0;
        java.lang.StringBuilder $r4;
        java.security.KeyStoreException $r7;

        r0 := @this: android.security.keystore.AndroidKeyStoreSpi;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<android.security.keystore.AndroidKeyStoreSpi: android.security.KeyStore mKeyStore>;

        $i0 = r0.<android.security.keystore.AndroidKeyStoreSpi: int mUid>;

        $z0 = staticinvoke <android.security.Credentials: boolean deleteAllTypesForAlias(android.security.KeyStore,java.lang.String,int)>($r3, r1, $i0);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to delete entry: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = new java.security.KeyStoreException;

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.security.KeyStoreException: void <init>(java.lang.String)>($r8);

        throw $r7;
    }

    public java.security.cert.Certificate engineGetCertificate(java.lang.String)
    {
        android.security.keystore.AndroidKeyStoreSpi r0;
        java.lang.NullPointerException $r1;
        java.lang.StringBuilder $r2, $r6;
        java.lang.String $r5, $r9, r12;
        int $i0, $i1;
        java.security.cert.Certificate $r10, $r11;
        android.security.KeyStore r13, r16;
        byte[] r15, r18;

        r0 := @this: android.security.keystore.AndroidKeyStoreSpi;

        r12 := @parameter0: java.lang.String;

        if r12 == null goto label3;

        r13 = r0.<android.security.keystore.AndroidKeyStoreSpi: android.security.KeyStore mKeyStore>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRCERT_");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $i0 = r0.<android.security.keystore.AndroidKeyStoreSpi: int mUid>;

        r15 = virtualinvoke r13.<android.security.KeyStore: byte[] get(java.lang.String,int)>($r5, $i0);

        if r15 == null goto label1;

        $r11 = specialinvoke r0.<android.security.keystore.AndroidKeyStoreSpi: java.security.cert.Certificate getCertificateForPrivateKeyEntry(java.lang.String,byte[])>(r12, r15);

        return $r11;

     label1:
        r16 = r0.<android.security.keystore.AndroidKeyStoreSpi: android.security.KeyStore mKeyStore>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CACERT_");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = r0.<android.security.keystore.AndroidKeyStoreSpi: int mUid>;

        r18 = virtualinvoke r16.<android.security.KeyStore: byte[] get(java.lang.String,int)>($r9, $i1);

        if r18 == null goto label2;

        $r10 = specialinvoke r0.<android.security.keystore.AndroidKeyStoreSpi: java.security.cert.Certificate getCertificateForTrustedCertificateEntry(byte[])>(r18);

        return $r10;

     label2:
        return null;

     label3:
        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("alias == null");

        throw $r1;
    }

    public java.lang.String engineGetCertificateAlias(java.security.cert.Certificate)
    {
        android.security.keystore.AndroidKeyStoreSpi r0;
        byte[] r1, r22, r27;
        java.lang.String $r2, $r3, $r10, $r14, r19, r24;
        boolean $z0, $z1, $z2, $z4;
        java.util.HashSet $r4;
        int $i1, $i2, $i3, $i4, i5, i6, i7, i8;
        android.security.KeyStore $r5, $r6, r20, r25;
        java.lang.StringBuilder $r7, $r11;
        java.lang.Throwable $r15;
        java.security.cert.Certificate r16;
        java.lang.String[] r18, r23;

        r0 := @this: android.security.keystore.AndroidKeyStoreSpi;

        r16 := @parameter0: java.security.cert.Certificate;

        if r16 != null goto label01;

        return null;

     label01:
        $r2 = "X.509";

        $r3 = virtualinvoke r16.<java.security.cert.Certificate: java.lang.String getType()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        if $z0 != 0 goto label02;

        return null;

     label02:
        r1 = virtualinvoke r16.<java.security.cert.Certificate: byte[] getEncoded()>();

     label03:
        if r1 != null goto label04;

        return null;

     label04:
        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        $r5 = r0.<android.security.keystore.AndroidKeyStoreSpi: android.security.KeyStore mKeyStore>;

        $i1 = r0.<android.security.keystore.AndroidKeyStoreSpi: int mUid>;

        r18 = virtualinvoke $r5.<android.security.KeyStore: java.lang.String[] list(java.lang.String,int)>("USRCERT_", $i1);

        if r18 == null goto label08;

        i5 = lengthof r18;

        i6 = 0;

     label05:
        if i6 >= i5 goto label08;

        r19 = r18[i6];

        r20 = r0.<android.security.keystore.AndroidKeyStoreSpi: android.security.KeyStore mKeyStore>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRCERT_");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $i4 = r0.<android.security.keystore.AndroidKeyStoreSpi: int mUid>;

        r22 = virtualinvoke r20.<android.security.KeyStore: byte[] get(java.lang.String,int)>($r14, $i4);

        if r22 != null goto label06;

        goto label07;

     label06:
        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>(r19);

        $z4 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r22, r1);

        if $z4 == 0 goto label07;

        return r19;

     label07:
        i6 = i6 + 1;

        goto label05;

     label08:
        $r6 = r0.<android.security.keystore.AndroidKeyStoreSpi: android.security.KeyStore mKeyStore>;

        $i2 = r0.<android.security.keystore.AndroidKeyStoreSpi: int mUid>;

        r23 = virtualinvoke $r6.<android.security.KeyStore: java.lang.String[] list(java.lang.String,int)>("CACERT_", $i2);

        if r18 == null goto label13;

        i7 = lengthof r23;

        i8 = 0;

     label09:
        if i8 >= i7 goto label13;

        r24 = r23[i8];

        $z1 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>(r24);

        if $z1 == 0 goto label10;

        goto label12;

     label10:
        r25 = r0.<android.security.keystore.AndroidKeyStoreSpi: android.security.KeyStore mKeyStore>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CACERT_");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r24);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $i3 = r0.<android.security.keystore.AndroidKeyStoreSpi: int mUid>;

        r27 = virtualinvoke r25.<android.security.KeyStore: byte[] get(java.lang.String,int)>($r10, $i3);

        if r27 != null goto label11;

        goto label12;

     label11:
        $z2 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r27, r1);

        if $z2 == 0 goto label12;

        return r24;

     label12:
        i8 = i8 + 1;

        goto label09;

     label13:
        return null;

     label14:
        $r15 := @caughtexception;

        return null;

        catch java.security.cert.CertificateEncodingException from label02 to label03 with label14;
    }

    public java.security.cert.Certificate[] engineGetCertificateChain(java.lang.String)
    {
        android.security.keystore.AndroidKeyStoreSpi r0;
        java.security.cert.X509Certificate r1;
        java.security.cert.Certificate $r4, $r10;
        java.lang.String $r8, r11;
        int $i0, $i1, $i2, i3;
        boolean $z0;
        java.lang.Object $r9;
        android.security.KeyStore r12;
        byte[] r13;
        java.util.Collection r14;
        java.lang.Object[] r15;
        java.util.Iterator r16;
        java.lang.StringBuilder r17;
        java.lang.NullPointerException r18;
        java.security.cert.Certificate[] r19;

        r0 := @this: android.security.keystore.AndroidKeyStoreSpi;

        r11 := @parameter0: java.lang.String;

        if r11 == null goto label6;

        $r4 = virtualinvoke r0.<android.security.keystore.AndroidKeyStoreSpi: java.security.cert.Certificate engineGetCertificate(java.lang.String)>(r11);

        r1 = (java.security.cert.X509Certificate) $r4;

        if r1 != null goto label1;

        return null;

     label1:
        r12 = r0.<android.security.keystore.AndroidKeyStoreSpi: android.security.KeyStore mKeyStore>;

        r17 = new java.lang.StringBuilder;

        specialinvoke r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CACERT_");

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        $r8 = virtualinvoke r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $i0 = r0.<android.security.keystore.AndroidKeyStoreSpi: int mUid>;

        r13 = virtualinvoke r12.<android.security.KeyStore: byte[] get(java.lang.String,int,boolean)>($r8, $i0, 1);

        if r13 == null goto label4;

        r14 = staticinvoke <android.security.keystore.AndroidKeyStoreSpi: java.util.Collection toCertificates(byte[])>(r13);

        $i1 = interfaceinvoke r14.<java.util.Collection: int size()>();

        $i2 = $i1 + 1;

        r15 = newarray (java.security.cert.Certificate)[$i2];

        r16 = interfaceinvoke r14.<java.util.Collection: java.util.Iterator iterator()>();

        i3 = 1;

     label2:
        $z0 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r9 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (java.security.cert.Certificate) $r9;

        r15[i3] = $r10;

        i3 = i3 + 1;

        goto label2;

     label3:
        goto label5;

     label4:
        r15 = newarray (java.security.cert.Certificate)[1];

     label5:
        r15[0] = r1;

        r19 = (java.security.cert.Certificate[]) r15;

        return r19;

     label6:
        r18 = new java.lang.NullPointerException;

        specialinvoke r18.<java.lang.NullPointerException: void <init>(java.lang.String)>("alias == null");

        throw r18;
    }

    public java.util.Date engineGetCreationDate(java.lang.String)
    {
        android.security.keystore.AndroidKeyStoreSpi r0;
        java.lang.String r1, $r6, $r10, $r14, $r18;
        java.lang.NullPointerException $r2;
        java.lang.StringBuilder $r3, $r7, $r11, $r15;
        java.util.Date $r19, r21, r23, r25;

        r0 := @this: android.security.keystore.AndroidKeyStoreSpi;

        r1 := @parameter0: java.lang.String;

        if r1 == null goto label4;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRPKEY_");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        r21 = specialinvoke r0.<android.security.keystore.AndroidKeyStoreSpi: java.util.Date getModificationDate(java.lang.String)>($r6);

        if r21 == null goto label1;

        return r21;

     label1:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRSKEY_");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        r23 = specialinvoke r0.<android.security.keystore.AndroidKeyStoreSpi: java.util.Date getModificationDate(java.lang.String)>($r10);

        if r23 == null goto label2;

        return r23;

     label2:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRCERT_");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        r25 = specialinvoke r0.<android.security.keystore.AndroidKeyStoreSpi: java.util.Date getModificationDate(java.lang.String)>($r14);

        if r25 == null goto label3;

        return r25;

     label3:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CACERT_");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r19 = specialinvoke r0.<android.security.keystore.AndroidKeyStoreSpi: java.util.Date getModificationDate(java.lang.String)>($r18);

        return $r19;

     label4:
        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("alias == null");

        throw $r2;
    }

    public java.security.Key engineGetKey(java.lang.String, char[]) throws java.security.NoSuchAlgorithmException, java.security.UnrecoverableKeyException
    {
        android.security.keystore.AndroidKeyStoreSpi r0;
        java.lang.String r1, $r13, r14, r17, r19;
        java.lang.StringBuilder $r2, $r7;
        int $i0, $i1, $i2;
        android.security.KeyStore $r5, $r6, $r10;
        boolean $z0, $z1;
        android.security.keystore.KeyPermanentlyInvalidatedException $r11;
        java.security.UnrecoverableKeyException $r12;
        char[] r15;
        android.security.keystore.AndroidKeyStoreKey r20;

        r0 := @this: android.security.keystore.AndroidKeyStoreSpi;

        r14 := @parameter0: java.lang.String;

        r15 := @parameter1: char[];

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRPKEY_");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        r17 = r1;

        $r5 = r0.<android.security.keystore.AndroidKeyStoreSpi: android.security.KeyStore mKeyStore>;

        $i0 = r0.<android.security.keystore.AndroidKeyStoreSpi: int mUid>;

        $z0 = virtualinvoke $r5.<android.security.KeyStore: boolean contains(java.lang.String,int)>(r1, $i0);

        if $z0 != 0 goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("USRSKEY_");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        r19 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        r17 = r19;

        $r10 = r0.<android.security.keystore.AndroidKeyStoreSpi: android.security.KeyStore mKeyStore>;

        $i2 = r0.<android.security.keystore.AndroidKeyStoreSpi: int mUid>;

        $z1 = virtualinvoke $r10.<android.security.KeyStore: boolean contains(java.lang.String,int)>(r19, $i2);

        if $z1 != 0 goto label1;

        return null;

     label1:
        $r6 = r0.<android.security.keystore.AndroidKeyStoreSpi: android.security.KeyStore mKeyStore>;

        $i1 = r0.<android.security.keystore.AndroidKeyStoreSpi: int mUid>;

        r20 = staticinvoke <android.security.keystore.AndroidKeyStoreProvider: android.security.keystore.AndroidKeyStoreKey loadAndroidKeyStoreKeyFromKeystore(android.security.KeyStore,java.lang.String,int)>($r6, r17, $i1);

     label2:
        return r20;

     label3:
        $r11 := @caughtexception;

        $r12 = new java.security.UnrecoverableKeyException;

        $r13 = virtualinvoke $r11.<android.security.keystore.KeyPermanentlyInvalidatedException: java.lang.String getMessage()>();

        specialinvoke $r12.<java.security.UnrecoverableKeyException: void <init>(java.lang.String)>($r13);

        throw $r12;

        catch android.security.keystore.KeyPermanentlyInvalidatedException from label1 to label2 with label3;
    }

    public boolean engineIsCertificateEntry(java.lang.String)
    {
        android.security.keystore.AndroidKeyStoreSpi r0;
        java.lang.String r1;
        boolean $z0, $z1, z2;

        r0 := @this: android.security.keystore.AndroidKeyStoreSpi;

        r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<android.security.keystore.AndroidKeyStoreSpi: boolean isKeyEntry(java.lang.String)>(r1);

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r0.<android.security.keystore.AndroidKeyStoreSpi: boolean isCertificateEntry(java.lang.String)>(r1);

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    public boolean engineIsKeyEntry(java.lang.String)
    {
        android.security.keystore.AndroidKeyStoreSpi r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: android.security.keystore.AndroidKeyStoreSpi;

        r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<android.security.keystore.AndroidKeyStoreSpi: boolean isKeyEntry(java.lang.String)>(r1);

        return $z0;
    }

    public void engineLoad(java.io.InputStream, char[]) throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException
    {
        android.security.keystore.AndroidKeyStoreSpi r0;
        java.io.InputStream r1;
        char[] r2;
        java.lang.IllegalArgumentException $r3, $r4;
        android.security.KeyStore $r5;

        r0 := @this: android.security.keystore.AndroidKeyStoreSpi;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: char[];

        if r1 != null goto label2;

        if r2 != null goto label1;

        $r5 = staticinvoke <android.security.KeyStore: android.security.KeyStore getInstance()>();

        r0.<android.security.keystore.AndroidKeyStoreSpi: android.security.KeyStore mKeyStore> = $r5;

        r0.<android.security.keystore.AndroidKeyStoreSpi: int mUid> = -1;

        return;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("password not supported");

        throw $r4;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("InputStream not supported");

        throw $r3;
    }

    public void engineLoad(java.security.KeyStore$LoadStoreParameter) throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException
    {
        android.security.keystore.AndroidKeyStoreSpi r0;
        java.security.KeyStore$LoadStoreParameter r1;
        android.security.KeyStore $r3;
        boolean $z0;
        java.lang.StringBuilder $r4;
        java.lang.Class $r6;
        java.lang.IllegalArgumentException $r8;
        java.lang.String $r9;
        android.security.keystore.AndroidKeyStoreLoadStoreParameter $r10;
        int i0;

        r0 := @this: android.security.keystore.AndroidKeyStoreSpi;

        r1 := @parameter0: java.security.KeyStore$LoadStoreParameter;

        i0 = -1;

        if r1 == null goto label2;

        $z0 = r1 instanceof android.security.keystore.AndroidKeyStoreLoadStoreParameter;

        if $z0 == 0 goto label1;

        $r10 = (android.security.keystore.AndroidKeyStoreLoadStoreParameter) r1;

        i0 = virtualinvoke $r10.<android.security.keystore.AndroidKeyStoreLoadStoreParameter: int getUid()>();

        goto label2;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported param type: ");

        $r6 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label2:
        $r3 = staticinvoke <android.security.KeyStore: android.security.KeyStore getInstance()>();

        r0.<android.security.keystore.AndroidKeyStoreSpi: android.security.KeyStore mKeyStore> = $r3;

        r0.<android.security.keystore.AndroidKeyStoreSpi: int mUid> = i0;

        return;
    }

    public void engineSetCertificateEntry(java.lang.String, java.security.cert.Certificate) throws java.security.KeyStoreException
    {
        android.security.keystore.AndroidKeyStoreSpi r0;
        byte[] r1;
        boolean $z0, $z1;
        java.security.KeyStoreException $r3, $r9, $r11;
        java.lang.NullPointerException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r8, r12;
        int $i0;
        java.lang.Throwable $r10;
        java.security.cert.Certificate r13;
        android.security.KeyStore r14;

        r0 := @this: android.security.keystore.AndroidKeyStoreSpi;

        r12 := @parameter0: java.lang.String;

        r13 := @parameter1: java.security.cert.Certificate;

        $z0 = specialinvoke r0.<android.security.keystore.AndroidKeyStoreSpi: boolean isKeyEntry(java.lang.String)>(r12);

        if $z0 != 0 goto label6;

        if r13 == null goto label5;

     label1:
        r1 = virtualinvoke r13.<java.security.cert.Certificate: byte[] getEncoded()>();

     label2:
        r14 = r0.<android.security.keystore.AndroidKeyStoreSpi: android.security.KeyStore mKeyStore>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CACERT_");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $i0 = r0.<android.security.keystore.AndroidKeyStoreSpi: int mUid>;

        $z1 = virtualinvoke r14.<android.security.KeyStore: boolean put(java.lang.String,byte[],int,int)>($r8, r1, $i0, 0);

        if $z1 == 0 goto label3;

        return;

     label3:
        $r9 = new java.security.KeyStoreException;

        specialinvoke $r9.<java.security.KeyStoreException: void <init>(java.lang.String)>("Couldn\'t insert certificate; is KeyStore initialized?");

        throw $r9;

     label4:
        $r10 := @caughtexception;

        $r11 = new java.security.KeyStoreException;

        specialinvoke $r11.<java.security.KeyStoreException: void <init>(java.lang.Throwable)>($r10);

        throw $r11;

     label5:
        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("cert == null");

        throw $r4;

     label6:
        $r3 = new java.security.KeyStoreException;

        specialinvoke $r3.<java.security.KeyStoreException: void <init>(java.lang.String)>("Entry exists and is not a trusted certificate");

        throw $r3;

        catch java.security.cert.CertificateEncodingException from label1 to label2 with label4;
    }

    public void engineSetEntry(java.lang.String, java.security.KeyStore$Entry, java.security.KeyStore$ProtectionParameter) throws java.security.KeyStoreException
    {
        android.security.keystore.AndroidKeyStoreSpi r0;
        java.security.KeyStore$ProtectionParameter r1;
        java.security.KeyStoreException $r2, $r7;
        int $i0;
        android.security.KeyStore $r3;
        boolean $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r4;
        java.lang.String $r8, r16;
        android.security.keystore.WrappedKeyEntry $r9;
        java.security.KeyStore$SecretKeyEntry $r10;
        javax.crypto.SecretKey $r11;
        java.security.PrivateKey $r12;
        java.security.cert.Certificate[] $r13;
        java.security.KeyStore$TrustedCertificateEntry $r14;
        java.security.cert.Certificate $r15;
        java.security.KeyStore$Entry r17;
        java.security.KeyStore$PrivateKeyEntry r18;

        r0 := @this: android.security.keystore.AndroidKeyStoreSpi;

        r16 := @parameter0: java.lang.String;

        r17 := @parameter1: java.security.KeyStore$Entry;

        r1 := @parameter2: java.security.KeyStore$ProtectionParameter;

        if r17 == null goto label6;

        $r3 = r0.<android.security.keystore.AndroidKeyStoreSpi: android.security.KeyStore mKeyStore>;

        $i0 = r0.<android.security.keystore.AndroidKeyStoreSpi: int mUid>;

        staticinvoke <android.security.Credentials: boolean deleteAllTypesForAlias(android.security.KeyStore,java.lang.String,int)>($r3, r16, $i0);

        $z1 = r17 instanceof java.security.KeyStore$TrustedCertificateEntry;

        if $z1 == 0 goto label1;

        $r14 = (java.security.KeyStore$TrustedCertificateEntry) r17;

        $r15 = virtualinvoke $r14.<java.security.KeyStore$TrustedCertificateEntry: java.security.cert.Certificate getTrustedCertificate()>();

        virtualinvoke r0.<android.security.keystore.AndroidKeyStoreSpi: void engineSetCertificateEntry(java.lang.String,java.security.cert.Certificate)>(r16, $r15);

        return;

     label1:
        $z2 = r17 instanceof java.security.KeyStore$PrivateKeyEntry;

        if $z2 == 0 goto label2;

        r18 = (java.security.KeyStore$PrivateKeyEntry) r17;

        $r12 = virtualinvoke r18.<java.security.KeyStore$PrivateKeyEntry: java.security.PrivateKey getPrivateKey()>();

        $r13 = virtualinvoke r18.<java.security.KeyStore$PrivateKeyEntry: java.security.cert.Certificate[] getCertificateChain()>();

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreSpi: void setPrivateKeyEntry(java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.security.KeyStore$ProtectionParameter)>(r16, $r12, $r13, r1);

        goto label4;

     label2:
        $z3 = r17 instanceof java.security.KeyStore$SecretKeyEntry;

        if $z3 == 0 goto label3;

        $r10 = (java.security.KeyStore$SecretKeyEntry) r17;

        $r11 = virtualinvoke $r10.<java.security.KeyStore$SecretKeyEntry: javax.crypto.SecretKey getSecretKey()>();

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreSpi: void setSecretKeyEntry(java.lang.String,javax.crypto.SecretKey,java.security.KeyStore$ProtectionParameter)>(r16, $r11, r1);

        goto label4;

     label3:
        $z4 = r17 instanceof android.security.keystore.WrappedKeyEntry;

        if $z4 == 0 goto label5;

        $r9 = (android.security.keystore.WrappedKeyEntry) r17;

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreSpi: void setWrappedKeyEntry(java.lang.String,android.security.keystore.WrappedKeyEntry,java.security.KeyStore$ProtectionParameter)>(r16, $r9, r1);

     label4:
        return;

     label5:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Entry must be a PrivateKeyEntry, SecretKeyEntry or TrustedCertificateEntry; was ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r17);

        $r7 = new java.security.KeyStoreException;

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.security.KeyStoreException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label6:
        $r2 = new java.security.KeyStoreException;

        specialinvoke $r2.<java.security.KeyStoreException: void <init>(java.lang.String)>("entry == null");

        throw $r2;
    }

    public void engineSetKeyEntry(java.lang.String, java.security.Key, char[], java.security.cert.Certificate[]) throws java.security.KeyStoreException
    {
        android.security.keystore.AndroidKeyStoreSpi r0;
        java.lang.String r1;
        java.security.Key r2;
        char[] r3;
        java.security.cert.Certificate[] r4;
        boolean $z0, $z1;
        java.security.KeyStoreException $r5, $r8;
        javax.crypto.SecretKey $r6;
        java.security.PrivateKey $r7;
        int $i0;

        r0 := @this: android.security.keystore.AndroidKeyStoreSpi;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.security.Key;

        r3 := @parameter2: char[];

        r4 := @parameter3: java.security.cert.Certificate[];

        if r3 == null goto label2;

        $i0 = lengthof r3;

        if $i0 > 0 goto label1;

        goto label2;

     label1:
        $r8 = new java.security.KeyStoreException;

        specialinvoke $r8.<java.security.KeyStoreException: void <init>(java.lang.String)>("entries cannot be protected with passwords");

        throw $r8;

     label2:
        $z0 = r2 instanceof java.security.PrivateKey;

        if $z0 == 0 goto label3;

        $r7 = (java.security.PrivateKey) r2;

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreSpi: void setPrivateKeyEntry(java.lang.String,java.security.PrivateKey,java.security.cert.Certificate[],java.security.KeyStore$ProtectionParameter)>(r1, $r7, r4, null);

        goto label4;

     label3:
        $z1 = r2 instanceof javax.crypto.SecretKey;

        if $z1 == 0 goto label5;

        $r6 = (javax.crypto.SecretKey) r2;

        specialinvoke r0.<android.security.keystore.AndroidKeyStoreSpi: void setSecretKeyEntry(java.lang.String,javax.crypto.SecretKey,java.security.KeyStore$ProtectionParameter)>(r1, $r6, null);

     label4:
        return;

     label5:
        $r5 = new java.security.KeyStoreException;

        specialinvoke $r5.<java.security.KeyStoreException: void <init>(java.lang.String)>("Only PrivateKey and SecretKey are supported");

        throw $r5;
    }

    public void engineSetKeyEntry(java.lang.String, byte[], java.security.cert.Certificate[]) throws java.security.KeyStoreException
    {
        android.security.keystore.AndroidKeyStoreSpi r0;
        java.lang.String r1;
        byte[] r2;
        java.security.cert.Certificate[] r3;
        java.security.KeyStoreException $r4;

        r0 := @this: android.security.keystore.AndroidKeyStoreSpi;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        r3 := @parameter2: java.security.cert.Certificate[];

        $r4 = new java.security.KeyStoreException;

        specialinvoke $r4.<java.security.KeyStoreException: void <init>(java.lang.String)>("Operation not supported because key encoding is unknown");

        throw $r4;
    }

    public int engineSize()
    {
        android.security.keystore.AndroidKeyStoreSpi r0;
        java.util.Set $r1;
        int $i0;

        r0 := @this: android.security.keystore.AndroidKeyStoreSpi;

        $r1 = specialinvoke r0.<android.security.keystore.AndroidKeyStoreSpi: java.util.Set getUniqueAliases()>();

        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();

        return $i0;
    }

    public void engineStore(java.io.OutputStream, char[]) throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException
    {
        android.security.keystore.AndroidKeyStoreSpi r0;
        java.io.OutputStream r1;
        char[] r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.security.keystore.AndroidKeyStoreSpi;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: char[];

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Can not serialize AndroidKeyStore to OutputStream");

        throw $r3;
    }

    public static void <clinit>()
    {
        <android.security.keystore.AndroidKeyStoreSpi: java.lang.String NAME> = "AndroidKeyStore";

        return;
    }
}
