public final class android.security.keystore.KeyGenParameterSpec extends java.lang.Object implements java.security.spec.AlgorithmParameterSpec, android.security.keystore.UserAuthArgs
{
    private static final java.util.Date DEFAULT_CERT_NOT_AFTER;
    private static final java.util.Date DEFAULT_CERT_NOT_BEFORE;
    private static final java.math.BigInteger DEFAULT_CERT_SERIAL_NUMBER;
    private static final javax.security.auth.x500.X500Principal DEFAULT_CERT_SUBJECT;
    private final byte[] mAttestationChallenge;
    private final java.lang.String[] mBlockModes;
    private final java.util.Date mCertificateNotAfter;
    private final java.util.Date mCertificateNotBefore;
    private final java.math.BigInteger mCertificateSerialNumber;
    private final javax.security.auth.x500.X500Principal mCertificateSubject;
    private final boolean mCriticalToDeviceEncryption;
    private final java.lang.String[] mDigests;
    private final java.lang.String[] mEncryptionPaddings;
    private final boolean mInvalidatedByBiometricEnrollment;
    private final boolean mIsStrongBoxBacked;
    private final int mKeySize;
    private final java.util.Date mKeyValidityForConsumptionEnd;
    private final java.util.Date mKeyValidityForOriginationEnd;
    private final java.util.Date mKeyValidityStart;
    private final java.lang.String mKeystoreAlias;
    private final int mPurposes;
    private final boolean mRandomizedEncryptionRequired;
    private final java.lang.String[] mSignaturePaddings;
    private final java.security.spec.AlgorithmParameterSpec mSpec;
    private final int mUid;
    private final boolean mUniqueIdIncluded;
    private final boolean mUnlockedDeviceRequired;
    private final boolean mUserAuthenticationRequired;
    private final int mUserAuthenticationType;
    private final boolean mUserAuthenticationValidWhileOnBody;
    private final int mUserAuthenticationValidityDurationSeconds;
    private final boolean mUserConfirmationRequired;
    private final boolean mUserPresenceRequired;

    static void <clinit>()
    {
        javax.security.auth.x500.X500Principal $r0;
        java.math.BigInteger $r1;
        java.util.Date $r2, $r3;

        $r0 = new javax.security.auth.x500.X500Principal;

        specialinvoke $r0.<javax.security.auth.x500.X500Principal: void <init>(java.lang.String)>("CN=fake");

        <android.security.keystore.KeyGenParameterSpec: javax.security.auth.x500.X500Principal DEFAULT_CERT_SUBJECT> = $r0;

        $r1 = new java.math.BigInteger;

        specialinvoke $r1.<java.math.BigInteger: void <init>(java.lang.String)>("1");

        <android.security.keystore.KeyGenParameterSpec: java.math.BigInteger DEFAULT_CERT_SERIAL_NUMBER> = $r1;

        $r2 = new java.util.Date;

        specialinvoke $r2.<java.util.Date: void <init>(long)>(0L);

        <android.security.keystore.KeyGenParameterSpec: java.util.Date DEFAULT_CERT_NOT_BEFORE> = $r2;

        $r3 = new java.util.Date;

        specialinvoke $r3.<java.util.Date: void <init>(long)>(2461449600000L);

        <android.security.keystore.KeyGenParameterSpec: java.util.Date DEFAULT_CERT_NOT_AFTER> = $r3;

        return;
    }

    public void <init>(java.lang.String, int, int, java.security.spec.AlgorithmParameterSpec, javax.security.auth.x500.X500Principal, java.math.BigInteger, java.util.Date, java.util.Date, java.util.Date, java.util.Date, java.util.Date, int, java.lang.String[], java.lang.String[], java.lang.String[], java.lang.String[], boolean, boolean, int, int, boolean, byte[], boolean, boolean, boolean, boolean, boolean, boolean, boolean)
    {
        android.security.keystore.KeyGenParameterSpec r0;
        java.lang.String r1;
        int i0, i1, i2, i3, i4;
        java.security.spec.AlgorithmParameterSpec r2;
        java.util.Date r3, r4, r5, $r13, $r14, $r15, $r16, $r17, r28, r29;
        java.lang.String[] r6, r7, r8, r9, $r18, $r19, $r20, $r21, $r22, $r23, $r24;
        boolean z0, z1, z2, z3, z4, z5, z6, z7, z8, z9, $z10, $z11;
        byte[] r10, $r25;
        java.lang.IllegalArgumentException $r11, $r12;
        javax.security.auth.x500.X500Principal r26;
        java.math.BigInteger r27;

        r0 := @this: android.security.keystore.KeyGenParameterSpec;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.security.spec.AlgorithmParameterSpec;

        r26 := @parameter4: javax.security.auth.x500.X500Principal;

        r27 := @parameter5: java.math.BigInteger;

        r28 := @parameter6: java.util.Date;

        r29 := @parameter7: java.util.Date;

        r3 := @parameter8: java.util.Date;

        r4 := @parameter9: java.util.Date;

        r5 := @parameter10: java.util.Date;

        i2 := @parameter11: int;

        r6 := @parameter12: java.lang.String[];

        r7 := @parameter13: java.lang.String[];

        r8 := @parameter14: java.lang.String[];

        r9 := @parameter15: java.lang.String[];

        z0 := @parameter16: boolean;

        z1 := @parameter17: boolean;

        i3 := @parameter18: int;

        i4 := @parameter19: int;

        z2 := @parameter20: boolean;

        r10 := @parameter21: byte[];

        z3 := @parameter22: boolean;

        z4 := @parameter23: boolean;

        z5 := @parameter24: boolean;

        z6 := @parameter25: boolean;

        z7 := @parameter26: boolean;

        z8 := @parameter27: boolean;

        z9 := @parameter28: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z10 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z10 != 0 goto label6;

        if r26 != null goto label1;

        r26 = <android.security.keystore.KeyGenParameterSpec: javax.security.auth.x500.X500Principal DEFAULT_CERT_SUBJECT>;

        goto label1;

     label1:
        if r28 != null goto label2;

        r28 = <android.security.keystore.KeyGenParameterSpec: java.util.Date DEFAULT_CERT_NOT_BEFORE>;

        goto label2;

     label2:
        if r29 != null goto label3;

        r29 = <android.security.keystore.KeyGenParameterSpec: java.util.Date DEFAULT_CERT_NOT_AFTER>;

        goto label3;

     label3:
        if r27 != null goto label4;

        r27 = <android.security.keystore.KeyGenParameterSpec: java.math.BigInteger DEFAULT_CERT_SERIAL_NUMBER>;

        goto label4;

     label4:
        $z11 = virtualinvoke r29.<java.util.Date: boolean before(java.util.Date)>(r28);

        if $z11 != 0 goto label5;

        r0.<android.security.keystore.KeyGenParameterSpec: java.lang.String mKeystoreAlias> = r1;

        r0.<android.security.keystore.KeyGenParameterSpec: int mUid> = i0;

        r0.<android.security.keystore.KeyGenParameterSpec: int mKeySize> = i1;

        r0.<android.security.keystore.KeyGenParameterSpec: java.security.spec.AlgorithmParameterSpec mSpec> = r2;

        r0.<android.security.keystore.KeyGenParameterSpec: javax.security.auth.x500.X500Principal mCertificateSubject> = r26;

        r0.<android.security.keystore.KeyGenParameterSpec: java.math.BigInteger mCertificateSerialNumber> = r27;

        $r13 = staticinvoke <android.security.keystore.Utils: java.util.Date cloneIfNotNull(java.util.Date)>(r28);

        r0.<android.security.keystore.KeyGenParameterSpec: java.util.Date mCertificateNotBefore> = $r13;

        $r14 = staticinvoke <android.security.keystore.Utils: java.util.Date cloneIfNotNull(java.util.Date)>(r29);

        r0.<android.security.keystore.KeyGenParameterSpec: java.util.Date mCertificateNotAfter> = $r14;

        $r15 = staticinvoke <android.security.keystore.Utils: java.util.Date cloneIfNotNull(java.util.Date)>(r3);

        r0.<android.security.keystore.KeyGenParameterSpec: java.util.Date mKeyValidityStart> = $r15;

        $r16 = staticinvoke <android.security.keystore.Utils: java.util.Date cloneIfNotNull(java.util.Date)>(r4);

        r0.<android.security.keystore.KeyGenParameterSpec: java.util.Date mKeyValidityForOriginationEnd> = $r16;

        $r17 = staticinvoke <android.security.keystore.Utils: java.util.Date cloneIfNotNull(java.util.Date)>(r5);

        r0.<android.security.keystore.KeyGenParameterSpec: java.util.Date mKeyValidityForConsumptionEnd> = $r17;

        r0.<android.security.keystore.KeyGenParameterSpec: int mPurposes> = i2;

        $r18 = staticinvoke <android.security.keystore.ArrayUtils: java.lang.String[] cloneIfNotEmpty(java.lang.String[])>(r6);

        r0.<android.security.keystore.KeyGenParameterSpec: java.lang.String[] mDigests> = $r18;

        $r19 = staticinvoke <android.security.keystore.ArrayUtils: java.lang.String[] nullToEmpty(java.lang.String[])>(r7);

        $r20 = staticinvoke <android.security.keystore.ArrayUtils: java.lang.String[] cloneIfNotEmpty(java.lang.String[])>($r19);

        r0.<android.security.keystore.KeyGenParameterSpec: java.lang.String[] mEncryptionPaddings> = $r20;

        $r21 = staticinvoke <android.security.keystore.ArrayUtils: java.lang.String[] nullToEmpty(java.lang.String[])>(r8);

        $r22 = staticinvoke <android.security.keystore.ArrayUtils: java.lang.String[] cloneIfNotEmpty(java.lang.String[])>($r21);

        r0.<android.security.keystore.KeyGenParameterSpec: java.lang.String[] mSignaturePaddings> = $r22;

        $r23 = staticinvoke <android.security.keystore.ArrayUtils: java.lang.String[] nullToEmpty(java.lang.String[])>(r9);

        $r24 = staticinvoke <android.security.keystore.ArrayUtils: java.lang.String[] cloneIfNotEmpty(java.lang.String[])>($r23);

        r0.<android.security.keystore.KeyGenParameterSpec: java.lang.String[] mBlockModes> = $r24;

        r0.<android.security.keystore.KeyGenParameterSpec: boolean mRandomizedEncryptionRequired> = z0;

        r0.<android.security.keystore.KeyGenParameterSpec: boolean mUserAuthenticationRequired> = z1;

        r0.<android.security.keystore.KeyGenParameterSpec: boolean mUserPresenceRequired> = z2;

        r0.<android.security.keystore.KeyGenParameterSpec: int mUserAuthenticationValidityDurationSeconds> = i3;

        r0.<android.security.keystore.KeyGenParameterSpec: int mUserAuthenticationType> = i4;

        $r25 = staticinvoke <android.security.keystore.Utils: byte[] cloneIfNotNull(byte[])>(r10);

        r0.<android.security.keystore.KeyGenParameterSpec: byte[] mAttestationChallenge> = $r25;

        r0.<android.security.keystore.KeyGenParameterSpec: boolean mUniqueIdIncluded> = z3;

        r0.<android.security.keystore.KeyGenParameterSpec: boolean mUserAuthenticationValidWhileOnBody> = z4;

        r0.<android.security.keystore.KeyGenParameterSpec: boolean mInvalidatedByBiometricEnrollment> = z5;

        r0.<android.security.keystore.KeyGenParameterSpec: boolean mIsStrongBoxBacked> = z6;

        r0.<android.security.keystore.KeyGenParameterSpec: boolean mUserConfirmationRequired> = z7;

        r0.<android.security.keystore.KeyGenParameterSpec: boolean mUnlockedDeviceRequired> = z8;

        r0.<android.security.keystore.KeyGenParameterSpec: boolean mCriticalToDeviceEncryption> = z9;

        return;

     label5:
        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("certificateNotAfter < certificateNotBefore");

        throw $r12;

     label6:
        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("keyStoreAlias must not be empty");

        throw $r11;
    }

    public java.security.spec.AlgorithmParameterSpec getAlgorithmParameterSpec()
    {
        android.security.keystore.KeyGenParameterSpec r0;
        java.security.spec.AlgorithmParameterSpec $r1;

        r0 := @this: android.security.keystore.KeyGenParameterSpec;

        $r1 = r0.<android.security.keystore.KeyGenParameterSpec: java.security.spec.AlgorithmParameterSpec mSpec>;

        return $r1;
    }

    public byte[] getAttestationChallenge()
    {
        android.security.keystore.KeyGenParameterSpec r0;
        byte[] $r1, $r2;

        r0 := @this: android.security.keystore.KeyGenParameterSpec;

        $r1 = r0.<android.security.keystore.KeyGenParameterSpec: byte[] mAttestationChallenge>;

        $r2 = staticinvoke <android.security.keystore.Utils: byte[] cloneIfNotNull(byte[])>($r1);

        return $r2;
    }

    public java.lang.String[] getBlockModes()
    {
        android.security.keystore.KeyGenParameterSpec r0;
        java.lang.String[] $r1, $r2;

        r0 := @this: android.security.keystore.KeyGenParameterSpec;

        $r1 = r0.<android.security.keystore.KeyGenParameterSpec: java.lang.String[] mBlockModes>;

        $r2 = staticinvoke <android.security.keystore.ArrayUtils: java.lang.String[] cloneIfNotEmpty(java.lang.String[])>($r1);

        return $r2;
    }

    public long getBoundToSpecificSecureUserId()
    {
        android.security.keystore.KeyGenParameterSpec r0;

        r0 := @this: android.security.keystore.KeyGenParameterSpec;

        return 0L;
    }

    public java.util.Date getCertificateNotAfter()
    {
        android.security.keystore.KeyGenParameterSpec r0;
        java.util.Date $r1, $r2;

        r0 := @this: android.security.keystore.KeyGenParameterSpec;

        $r1 = r0.<android.security.keystore.KeyGenParameterSpec: java.util.Date mCertificateNotAfter>;

        $r2 = staticinvoke <android.security.keystore.Utils: java.util.Date cloneIfNotNull(java.util.Date)>($r1);

        return $r2;
    }

    public java.util.Date getCertificateNotBefore()
    {
        android.security.keystore.KeyGenParameterSpec r0;
        java.util.Date $r1, $r2;

        r0 := @this: android.security.keystore.KeyGenParameterSpec;

        $r1 = r0.<android.security.keystore.KeyGenParameterSpec: java.util.Date mCertificateNotBefore>;

        $r2 = staticinvoke <android.security.keystore.Utils: java.util.Date cloneIfNotNull(java.util.Date)>($r1);

        return $r2;
    }

    public java.math.BigInteger getCertificateSerialNumber()
    {
        android.security.keystore.KeyGenParameterSpec r0;
        java.math.BigInteger $r1;

        r0 := @this: android.security.keystore.KeyGenParameterSpec;

        $r1 = r0.<android.security.keystore.KeyGenParameterSpec: java.math.BigInteger mCertificateSerialNumber>;

        return $r1;
    }

    public javax.security.auth.x500.X500Principal getCertificateSubject()
    {
        android.security.keystore.KeyGenParameterSpec r0;
        javax.security.auth.x500.X500Principal $r1;

        r0 := @this: android.security.keystore.KeyGenParameterSpec;

        $r1 = r0.<android.security.keystore.KeyGenParameterSpec: javax.security.auth.x500.X500Principal mCertificateSubject>;

        return $r1;
    }

    public java.lang.String[] getDigests()
    {
        android.security.keystore.KeyGenParameterSpec r0;
        java.lang.String[] r1, $r3;
        java.lang.IllegalStateException $r2;

        r0 := @this: android.security.keystore.KeyGenParameterSpec;

        r1 = r0.<android.security.keystore.KeyGenParameterSpec: java.lang.String[] mDigests>;

        if r1 == null goto label1;

        $r3 = staticinvoke <android.security.keystore.ArrayUtils: java.lang.String[] cloneIfNotEmpty(java.lang.String[])>(r1);

        return $r3;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Digests not specified");

        throw $r2;
    }

    public java.lang.String[] getEncryptionPaddings()
    {
        android.security.keystore.KeyGenParameterSpec r0;
        java.lang.String[] $r1, $r2;

        r0 := @this: android.security.keystore.KeyGenParameterSpec;

        $r1 = r0.<android.security.keystore.KeyGenParameterSpec: java.lang.String[] mEncryptionPaddings>;

        $r2 = staticinvoke <android.security.keystore.ArrayUtils: java.lang.String[] cloneIfNotEmpty(java.lang.String[])>($r1);

        return $r2;
    }

    public int getKeySize()
    {
        android.security.keystore.KeyGenParameterSpec r0;
        int $i0;

        r0 := @this: android.security.keystore.KeyGenParameterSpec;

        $i0 = r0.<android.security.keystore.KeyGenParameterSpec: int mKeySize>;

        return $i0;
    }

    public java.util.Date getKeyValidityForConsumptionEnd()
    {
        android.security.keystore.KeyGenParameterSpec r0;
        java.util.Date $r1, $r2;

        r0 := @this: android.security.keystore.KeyGenParameterSpec;

        $r1 = r0.<android.security.keystore.KeyGenParameterSpec: java.util.Date mKeyValidityForConsumptionEnd>;

        $r2 = staticinvoke <android.security.keystore.Utils: java.util.Date cloneIfNotNull(java.util.Date)>($r1);

        return $r2;
    }

    public java.util.Date getKeyValidityForOriginationEnd()
    {
        android.security.keystore.KeyGenParameterSpec r0;
        java.util.Date $r1, $r2;

        r0 := @this: android.security.keystore.KeyGenParameterSpec;

        $r1 = r0.<android.security.keystore.KeyGenParameterSpec: java.util.Date mKeyValidityForOriginationEnd>;

        $r2 = staticinvoke <android.security.keystore.Utils: java.util.Date cloneIfNotNull(java.util.Date)>($r1);

        return $r2;
    }

    public java.util.Date getKeyValidityStart()
    {
        android.security.keystore.KeyGenParameterSpec r0;
        java.util.Date $r1, $r2;

        r0 := @this: android.security.keystore.KeyGenParameterSpec;

        $r1 = r0.<android.security.keystore.KeyGenParameterSpec: java.util.Date mKeyValidityStart>;

        $r2 = staticinvoke <android.security.keystore.Utils: java.util.Date cloneIfNotNull(java.util.Date)>($r1);

        return $r2;
    }

    public java.lang.String getKeystoreAlias()
    {
        android.security.keystore.KeyGenParameterSpec r0;
        java.lang.String $r1;

        r0 := @this: android.security.keystore.KeyGenParameterSpec;

        $r1 = r0.<android.security.keystore.KeyGenParameterSpec: java.lang.String mKeystoreAlias>;

        return $r1;
    }

    public int getPurposes()
    {
        android.security.keystore.KeyGenParameterSpec r0;
        int $i0;

        r0 := @this: android.security.keystore.KeyGenParameterSpec;

        $i0 = r0.<android.security.keystore.KeyGenParameterSpec: int mPurposes>;

        return $i0;
    }

    public java.lang.String[] getSignaturePaddings()
    {
        android.security.keystore.KeyGenParameterSpec r0;
        java.lang.String[] $r1, $r2;

        r0 := @this: android.security.keystore.KeyGenParameterSpec;

        $r1 = r0.<android.security.keystore.KeyGenParameterSpec: java.lang.String[] mSignaturePaddings>;

        $r2 = staticinvoke <android.security.keystore.ArrayUtils: java.lang.String[] cloneIfNotEmpty(java.lang.String[])>($r1);

        return $r2;
    }

    public int getUid()
    {
        android.security.keystore.KeyGenParameterSpec r0;
        int $i0;

        r0 := @this: android.security.keystore.KeyGenParameterSpec;

        $i0 = r0.<android.security.keystore.KeyGenParameterSpec: int mUid>;

        return $i0;
    }

    public int getUserAuthenticationType()
    {
        android.security.keystore.KeyGenParameterSpec r0;
        int $i0;

        r0 := @this: android.security.keystore.KeyGenParameterSpec;

        $i0 = r0.<android.security.keystore.KeyGenParameterSpec: int mUserAuthenticationType>;

        return $i0;
    }

    public int getUserAuthenticationValidityDurationSeconds()
    {
        android.security.keystore.KeyGenParameterSpec r0;
        int $i0;

        r0 := @this: android.security.keystore.KeyGenParameterSpec;

        $i0 = r0.<android.security.keystore.KeyGenParameterSpec: int mUserAuthenticationValidityDurationSeconds>;

        return $i0;
    }

    public boolean isCriticalToDeviceEncryption()
    {
        android.security.keystore.KeyGenParameterSpec r0;
        boolean $z0;

        r0 := @this: android.security.keystore.KeyGenParameterSpec;

        $z0 = r0.<android.security.keystore.KeyGenParameterSpec: boolean mCriticalToDeviceEncryption>;

        return $z0;
    }

    public boolean isDigestsSpecified()
    {
        android.security.keystore.KeyGenParameterSpec r0;
        java.lang.String[] $r1;
        boolean z0;

        r0 := @this: android.security.keystore.KeyGenParameterSpec;

        $r1 = r0.<android.security.keystore.KeyGenParameterSpec: java.lang.String[] mDigests>;

        if $r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isInvalidatedByBiometricEnrollment()
    {
        android.security.keystore.KeyGenParameterSpec r0;
        boolean $z0;

        r0 := @this: android.security.keystore.KeyGenParameterSpec;

        $z0 = r0.<android.security.keystore.KeyGenParameterSpec: boolean mInvalidatedByBiometricEnrollment>;

        return $z0;
    }

    public boolean isRandomizedEncryptionRequired()
    {
        android.security.keystore.KeyGenParameterSpec r0;
        boolean $z0;

        r0 := @this: android.security.keystore.KeyGenParameterSpec;

        $z0 = r0.<android.security.keystore.KeyGenParameterSpec: boolean mRandomizedEncryptionRequired>;

        return $z0;
    }

    public boolean isStrongBoxBacked()
    {
        android.security.keystore.KeyGenParameterSpec r0;
        boolean $z0;

        r0 := @this: android.security.keystore.KeyGenParameterSpec;

        $z0 = r0.<android.security.keystore.KeyGenParameterSpec: boolean mIsStrongBoxBacked>;

        return $z0;
    }

    public boolean isUniqueIdIncluded()
    {
        android.security.keystore.KeyGenParameterSpec r0;
        boolean $z0;

        r0 := @this: android.security.keystore.KeyGenParameterSpec;

        $z0 = r0.<android.security.keystore.KeyGenParameterSpec: boolean mUniqueIdIncluded>;

        return $z0;
    }

    public boolean isUnlockedDeviceRequired()
    {
        android.security.keystore.KeyGenParameterSpec r0;
        boolean $z0;

        r0 := @this: android.security.keystore.KeyGenParameterSpec;

        $z0 = r0.<android.security.keystore.KeyGenParameterSpec: boolean mUnlockedDeviceRequired>;

        return $z0;
    }

    public boolean isUserAuthenticationRequired()
    {
        android.security.keystore.KeyGenParameterSpec r0;
        boolean $z0;

        r0 := @this: android.security.keystore.KeyGenParameterSpec;

        $z0 = r0.<android.security.keystore.KeyGenParameterSpec: boolean mUserAuthenticationRequired>;

        return $z0;
    }

    public boolean isUserAuthenticationValidWhileOnBody()
    {
        android.security.keystore.KeyGenParameterSpec r0;
        boolean $z0;

        r0 := @this: android.security.keystore.KeyGenParameterSpec;

        $z0 = r0.<android.security.keystore.KeyGenParameterSpec: boolean mUserAuthenticationValidWhileOnBody>;

        return $z0;
    }

    public boolean isUserConfirmationRequired()
    {
        android.security.keystore.KeyGenParameterSpec r0;
        boolean $z0;

        r0 := @this: android.security.keystore.KeyGenParameterSpec;

        $z0 = r0.<android.security.keystore.KeyGenParameterSpec: boolean mUserConfirmationRequired>;

        return $z0;
    }

    public boolean isUserPresenceRequired()
    {
        android.security.keystore.KeyGenParameterSpec r0;
        boolean $z0;

        r0 := @this: android.security.keystore.KeyGenParameterSpec;

        $z0 = r0.<android.security.keystore.KeyGenParameterSpec: boolean mUserPresenceRequired>;

        return $z0;
    }
}
