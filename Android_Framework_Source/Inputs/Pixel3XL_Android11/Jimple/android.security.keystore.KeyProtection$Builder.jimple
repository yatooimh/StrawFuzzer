public final class android.security.keystore.KeyProtection$Builder extends java.lang.Object
{
    private java.lang.String[] mBlockModes;
    private long mBoundToSecureUserId;
    private boolean mCriticalToDeviceEncryption;
    private java.lang.String[] mDigests;
    private java.lang.String[] mEncryptionPaddings;
    private boolean mInvalidatedByBiometricEnrollment;
    private boolean mIsStrongBoxBacked;
    private java.util.Date mKeyValidityForConsumptionEnd;
    private java.util.Date mKeyValidityForOriginationEnd;
    private java.util.Date mKeyValidityStart;
    private int mPurposes;
    private boolean mRandomizedEncryptionRequired;
    private java.lang.String[] mSignaturePaddings;
    private boolean mUnlockedDeviceRequired;
    private boolean mUserAuthenticationRequired;
    private int mUserAuthenticationType;
    private boolean mUserAuthenticationValidWhileOnBody;
    private int mUserAuthenticationValidityDurationSeconds;
    private boolean mUserConfirmationRequired;
    private boolean mUserPresenceRequired;

    public void <init>(int)
    {
        android.security.keystore.KeyProtection$Builder r0;
        int i0;

        r0 := @this: android.security.keystore.KeyProtection$Builder;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.security.keystore.KeyProtection$Builder: boolean mRandomizedEncryptionRequired> = 1;

        r0.<android.security.keystore.KeyProtection$Builder: int mUserAuthenticationValidityDurationSeconds> = 0;

        r0.<android.security.keystore.KeyProtection$Builder: int mUserAuthenticationType> = 2;

        r0.<android.security.keystore.KeyProtection$Builder: boolean mUserPresenceRequired> = 0;

        r0.<android.security.keystore.KeyProtection$Builder: boolean mInvalidatedByBiometricEnrollment> = 1;

        r0.<android.security.keystore.KeyProtection$Builder: boolean mUnlockedDeviceRequired> = 0;

        r0.<android.security.keystore.KeyProtection$Builder: long mBoundToSecureUserId> = 0L;

        r0.<android.security.keystore.KeyProtection$Builder: boolean mCriticalToDeviceEncryption> = 0;

        r0.<android.security.keystore.KeyProtection$Builder: boolean mIsStrongBoxBacked> = 0;

        r0.<android.security.keystore.KeyProtection$Builder: int mPurposes> = i0;

        return;
    }

    public android.security.keystore.KeyProtection build()
    {
        android.security.keystore.KeyProtection$Builder r0;
        android.security.keystore.KeyProtection $r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        long $l0;
        int $i1, $i2, $i3;
        java.lang.String[] $r2, $r3, $r4, $r5;
        java.util.Date $r6, $r7, $r8;

        r0 := @this: android.security.keystore.KeyProtection$Builder;

        $r1 = new android.security.keystore.KeyProtection;

        $r8 = r0.<android.security.keystore.KeyProtection$Builder: java.util.Date mKeyValidityStart>;

        $r7 = r0.<android.security.keystore.KeyProtection$Builder: java.util.Date mKeyValidityForOriginationEnd>;

        $r6 = r0.<android.security.keystore.KeyProtection$Builder: java.util.Date mKeyValidityForConsumptionEnd>;

        $i3 = r0.<android.security.keystore.KeyProtection$Builder: int mPurposes>;

        $r5 = r0.<android.security.keystore.KeyProtection$Builder: java.lang.String[] mEncryptionPaddings>;

        $r4 = r0.<android.security.keystore.KeyProtection$Builder: java.lang.String[] mSignaturePaddings>;

        $r3 = r0.<android.security.keystore.KeyProtection$Builder: java.lang.String[] mDigests>;

        $r2 = r0.<android.security.keystore.KeyProtection$Builder: java.lang.String[] mBlockModes>;

        $z8 = r0.<android.security.keystore.KeyProtection$Builder: boolean mRandomizedEncryptionRequired>;

        $z7 = r0.<android.security.keystore.KeyProtection$Builder: boolean mUserAuthenticationRequired>;

        $i2 = r0.<android.security.keystore.KeyProtection$Builder: int mUserAuthenticationType>;

        $i1 = r0.<android.security.keystore.KeyProtection$Builder: int mUserAuthenticationValidityDurationSeconds>;

        $z6 = r0.<android.security.keystore.KeyProtection$Builder: boolean mUserPresenceRequired>;

        $z5 = r0.<android.security.keystore.KeyProtection$Builder: boolean mUserAuthenticationValidWhileOnBody>;

        $z4 = r0.<android.security.keystore.KeyProtection$Builder: boolean mInvalidatedByBiometricEnrollment>;

        $l0 = r0.<android.security.keystore.KeyProtection$Builder: long mBoundToSecureUserId>;

        $z3 = r0.<android.security.keystore.KeyProtection$Builder: boolean mCriticalToDeviceEncryption>;

        $z2 = r0.<android.security.keystore.KeyProtection$Builder: boolean mUserConfirmationRequired>;

        $z1 = r0.<android.security.keystore.KeyProtection$Builder: boolean mUnlockedDeviceRequired>;

        $z0 = r0.<android.security.keystore.KeyProtection$Builder: boolean mIsStrongBoxBacked>;

        specialinvoke $r1.<android.security.keystore.KeyProtection: void <init>(java.util.Date,java.util.Date,java.util.Date,int,java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],boolean,boolean,int,int,boolean,boolean,boolean,long,boolean,boolean,boolean,boolean,android.security.keystore.KeyProtection$1)>($r8, $r7, $r6, $i3, $r5, $r4, $r3, $r2, $z8, $z7, $i2, $i1, $z6, $z5, $z4, $l0, $z3, $z2, $z1, $z0, null);

        return $r1;
    }

    public transient android.security.keystore.KeyProtection$Builder setBlockModes(java.lang.String[])
    {
        android.security.keystore.KeyProtection$Builder r0;
        java.lang.String[] r1, $r2;

        r0 := @this: android.security.keystore.KeyProtection$Builder;

        r1 := @parameter0: java.lang.String[];

        $r2 = staticinvoke <android.security.keystore.ArrayUtils: java.lang.String[] cloneIfNotEmpty(java.lang.String[])>(r1);

        r0.<android.security.keystore.KeyProtection$Builder: java.lang.String[] mBlockModes> = $r2;

        return r0;
    }

    public android.security.keystore.KeyProtection$Builder setBoundToSpecificSecureUserId(long)
    {
        android.security.keystore.KeyProtection$Builder r0;
        long l0;

        r0 := @this: android.security.keystore.KeyProtection$Builder;

        l0 := @parameter0: long;

        r0.<android.security.keystore.KeyProtection$Builder: long mBoundToSecureUserId> = l0;

        return r0;
    }

    public android.security.keystore.KeyProtection$Builder setCriticalToDeviceEncryption(boolean)
    {
        android.security.keystore.KeyProtection$Builder r0;
        boolean z0;

        r0 := @this: android.security.keystore.KeyProtection$Builder;

        z0 := @parameter0: boolean;

        r0.<android.security.keystore.KeyProtection$Builder: boolean mCriticalToDeviceEncryption> = z0;

        return r0;
    }

    public transient android.security.keystore.KeyProtection$Builder setDigests(java.lang.String[])
    {
        android.security.keystore.KeyProtection$Builder r0;
        java.lang.String[] r1, $r2;

        r0 := @this: android.security.keystore.KeyProtection$Builder;

        r1 := @parameter0: java.lang.String[];

        $r2 = staticinvoke <android.security.keystore.ArrayUtils: java.lang.String[] cloneIfNotEmpty(java.lang.String[])>(r1);

        r0.<android.security.keystore.KeyProtection$Builder: java.lang.String[] mDigests> = $r2;

        return r0;
    }

    public transient android.security.keystore.KeyProtection$Builder setEncryptionPaddings(java.lang.String[])
    {
        android.security.keystore.KeyProtection$Builder r0;
        java.lang.String[] r1, $r2;

        r0 := @this: android.security.keystore.KeyProtection$Builder;

        r1 := @parameter0: java.lang.String[];

        $r2 = staticinvoke <android.security.keystore.ArrayUtils: java.lang.String[] cloneIfNotEmpty(java.lang.String[])>(r1);

        r0.<android.security.keystore.KeyProtection$Builder: java.lang.String[] mEncryptionPaddings> = $r2;

        return r0;
    }

    public android.security.keystore.KeyProtection$Builder setInvalidatedByBiometricEnrollment(boolean)
    {
        android.security.keystore.KeyProtection$Builder r0;
        boolean z0;

        r0 := @this: android.security.keystore.KeyProtection$Builder;

        z0 := @parameter0: boolean;

        r0.<android.security.keystore.KeyProtection$Builder: boolean mInvalidatedByBiometricEnrollment> = z0;

        return r0;
    }

    public android.security.keystore.KeyProtection$Builder setIsStrongBoxBacked(boolean)
    {
        android.security.keystore.KeyProtection$Builder r0;
        boolean z0;

        r0 := @this: android.security.keystore.KeyProtection$Builder;

        z0 := @parameter0: boolean;

        r0.<android.security.keystore.KeyProtection$Builder: boolean mIsStrongBoxBacked> = z0;

        return r0;
    }

    public android.security.keystore.KeyProtection$Builder setKeyValidityEnd(java.util.Date)
    {
        android.security.keystore.KeyProtection$Builder r0;
        java.util.Date r1;

        r0 := @this: android.security.keystore.KeyProtection$Builder;

        r1 := @parameter0: java.util.Date;

        virtualinvoke r0.<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setKeyValidityForOriginationEnd(java.util.Date)>(r1);

        virtualinvoke r0.<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setKeyValidityForConsumptionEnd(java.util.Date)>(r1);

        return r0;
    }

    public android.security.keystore.KeyProtection$Builder setKeyValidityForConsumptionEnd(java.util.Date)
    {
        android.security.keystore.KeyProtection$Builder r0;
        java.util.Date r1, $r2;

        r0 := @this: android.security.keystore.KeyProtection$Builder;

        r1 := @parameter0: java.util.Date;

        $r2 = staticinvoke <android.security.keystore.Utils: java.util.Date cloneIfNotNull(java.util.Date)>(r1);

        r0.<android.security.keystore.KeyProtection$Builder: java.util.Date mKeyValidityForConsumptionEnd> = $r2;

        return r0;
    }

    public android.security.keystore.KeyProtection$Builder setKeyValidityForOriginationEnd(java.util.Date)
    {
        android.security.keystore.KeyProtection$Builder r0;
        java.util.Date r1, $r2;

        r0 := @this: android.security.keystore.KeyProtection$Builder;

        r1 := @parameter0: java.util.Date;

        $r2 = staticinvoke <android.security.keystore.Utils: java.util.Date cloneIfNotNull(java.util.Date)>(r1);

        r0.<android.security.keystore.KeyProtection$Builder: java.util.Date mKeyValidityForOriginationEnd> = $r2;

        return r0;
    }

    public android.security.keystore.KeyProtection$Builder setKeyValidityStart(java.util.Date)
    {
        android.security.keystore.KeyProtection$Builder r0;
        java.util.Date r1, $r2;

        r0 := @this: android.security.keystore.KeyProtection$Builder;

        r1 := @parameter0: java.util.Date;

        $r2 = staticinvoke <android.security.keystore.Utils: java.util.Date cloneIfNotNull(java.util.Date)>(r1);

        r0.<android.security.keystore.KeyProtection$Builder: java.util.Date mKeyValidityStart> = $r2;

        return r0;
    }

    public android.security.keystore.KeyProtection$Builder setRandomizedEncryptionRequired(boolean)
    {
        android.security.keystore.KeyProtection$Builder r0;
        boolean z0;

        r0 := @this: android.security.keystore.KeyProtection$Builder;

        z0 := @parameter0: boolean;

        r0.<android.security.keystore.KeyProtection$Builder: boolean mRandomizedEncryptionRequired> = z0;

        return r0;
    }

    public transient android.security.keystore.KeyProtection$Builder setSignaturePaddings(java.lang.String[])
    {
        android.security.keystore.KeyProtection$Builder r0;
        java.lang.String[] r1, $r2;

        r0 := @this: android.security.keystore.KeyProtection$Builder;

        r1 := @parameter0: java.lang.String[];

        $r2 = staticinvoke <android.security.keystore.ArrayUtils: java.lang.String[] cloneIfNotEmpty(java.lang.String[])>(r1);

        r0.<android.security.keystore.KeyProtection$Builder: java.lang.String[] mSignaturePaddings> = $r2;

        return r0;
    }

    public android.security.keystore.KeyProtection$Builder setUnlockedDeviceRequired(boolean)
    {
        android.security.keystore.KeyProtection$Builder r0;
        boolean z0;

        r0 := @this: android.security.keystore.KeyProtection$Builder;

        z0 := @parameter0: boolean;

        r0.<android.security.keystore.KeyProtection$Builder: boolean mUnlockedDeviceRequired> = z0;

        return r0;
    }

    public android.security.keystore.KeyProtection$Builder setUserAuthenticationParameters(int, int)
    {
        android.security.keystore.KeyProtection$Builder r0;
        int i0, i1;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: android.security.keystore.KeyProtection$Builder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < 0 goto label1;

        r0.<android.security.keystore.KeyProtection$Builder: int mUserAuthenticationValidityDurationSeconds> = i0;

        r0.<android.security.keystore.KeyProtection$Builder: int mUserAuthenticationType> = i1;

        return r0;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("timeout must be 0 or larger");

        throw $r1;
    }

    public android.security.keystore.KeyProtection$Builder setUserAuthenticationRequired(boolean)
    {
        android.security.keystore.KeyProtection$Builder r0;
        boolean z0;

        r0 := @this: android.security.keystore.KeyProtection$Builder;

        z0 := @parameter0: boolean;

        r0.<android.security.keystore.KeyProtection$Builder: boolean mUserAuthenticationRequired> = z0;

        return r0;
    }

    public android.security.keystore.KeyProtection$Builder setUserAuthenticationValidWhileOnBody(boolean)
    {
        android.security.keystore.KeyProtection$Builder r0;
        boolean z0;

        r0 := @this: android.security.keystore.KeyProtection$Builder;

        z0 := @parameter0: boolean;

        r0.<android.security.keystore.KeyProtection$Builder: boolean mUserAuthenticationValidWhileOnBody> = z0;

        return r0;
    }

    public android.security.keystore.KeyProtection$Builder setUserAuthenticationValidityDurationSeconds(int)
    {
        android.security.keystore.KeyProtection$Builder r0, $r2, $r3;
        int i0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: android.security.keystore.KeyProtection$Builder;

        i0 := @parameter0: int;

        if i0 < -1 goto label2;

        if i0 != -1 goto label1;

        $r3 = virtualinvoke r0.<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setUserAuthenticationParameters(int,int)>(0, 2);

        return $r3;

     label1:
        $r2 = virtualinvoke r0.<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setUserAuthenticationParameters(int,int)>(i0, 3);

        return $r2;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("seconds must be -1 or larger");

        throw $r1;
    }

    public android.security.keystore.KeyProtection$Builder setUserConfirmationRequired(boolean)
    {
        android.security.keystore.KeyProtection$Builder r0;
        boolean z0;

        r0 := @this: android.security.keystore.KeyProtection$Builder;

        z0 := @parameter0: boolean;

        r0.<android.security.keystore.KeyProtection$Builder: boolean mUserConfirmationRequired> = z0;

        return r0;
    }

    public android.security.keystore.KeyProtection$Builder setUserPresenceRequired(boolean)
    {
        android.security.keystore.KeyProtection$Builder r0;
        boolean z0;

        r0 := @this: android.security.keystore.KeyProtection$Builder;

        z0 := @parameter0: boolean;

        r0.<android.security.keystore.KeyProtection$Builder: boolean mUserPresenceRequired> = z0;

        return r0;
    }
}
