class android.security.keystore.KeyStoreCryptoOperationChunkedStreamer extends java.lang.Object implements android.security.keystore.KeyStoreCryptoOperationStreamer
{
    private static final int DEFAULT_CHUNK_SIZE_MAX;
    private static final int DEFAULT_CHUNK_SIZE_THRESHOLD;
    private final byte[] mChunk;
    private int mChunkLength;
    private final int mChunkSizeMax;
    private final int mChunkSizeThreshold;
    private long mConsumedInputSizeBytes;
    private final android.security.keystore.KeyStoreCryptoOperationChunkedStreamer$Stream mKeyStoreStream;
    private long mProducedOutputSizeBytes;

    void <init>(android.security.keystore.KeyStoreCryptoOperationChunkedStreamer$Stream)
    {
        android.security.keystore.KeyStoreCryptoOperationChunkedStreamer r0;
        android.security.keystore.KeyStoreCryptoOperationChunkedStreamer$Stream r1;

        r0 := @this: android.security.keystore.KeyStoreCryptoOperationChunkedStreamer;

        r1 := @parameter0: android.security.keystore.KeyStoreCryptoOperationChunkedStreamer$Stream;

        specialinvoke r0.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: void <init>(android.security.keystore.KeyStoreCryptoOperationChunkedStreamer$Stream,int,int)>(r1, 2048, 65536);

        return;
    }

    void <init>(android.security.keystore.KeyStoreCryptoOperationChunkedStreamer$Stream, int)
    {
        android.security.keystore.KeyStoreCryptoOperationChunkedStreamer r0;
        android.security.keystore.KeyStoreCryptoOperationChunkedStreamer$Stream r1;
        int i0;

        r0 := @this: android.security.keystore.KeyStoreCryptoOperationChunkedStreamer;

        r1 := @parameter0: android.security.keystore.KeyStoreCryptoOperationChunkedStreamer$Stream;

        i0 := @parameter1: int;

        specialinvoke r0.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: void <init>(android.security.keystore.KeyStoreCryptoOperationChunkedStreamer$Stream,int,int)>(r1, i0, 65536);

        return;
    }

    void <init>(android.security.keystore.KeyStoreCryptoOperationChunkedStreamer$Stream, int, int)
    {
        android.security.keystore.KeyStoreCryptoOperationChunkedStreamer r0;
        android.security.keystore.KeyStoreCryptoOperationChunkedStreamer$Stream r1;
        int i0, i1, $i2;
        byte[] $r2;

        r0 := @this: android.security.keystore.KeyStoreCryptoOperationChunkedStreamer;

        r1 := @parameter0: android.security.keystore.KeyStoreCryptoOperationChunkedStreamer$Stream;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: int mChunkLength> = 0;

        r0.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: android.security.keystore.KeyStoreCryptoOperationChunkedStreamer$Stream mKeyStoreStream> = r1;

        r0.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: int mChunkSizeMax> = i1;

        if i0 > 0 goto label1;

        r0.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: int mChunkSizeThreshold> = 1;

        goto label3;

     label1:
        if i0 <= i1 goto label2;

        r0.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: int mChunkSizeThreshold> = i1;

        goto label3;

     label2:
        r0.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: int mChunkSizeThreshold> = i0;

     label3:
        $i2 = r0.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: int mChunkSizeMax>;

        $r2 = newarray (byte)[$i2];

        r0.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: byte[] mChunk> = $r2;

        return;
    }

    public byte[] doFinal(byte[], int, int, byte[], byte[]) throws android.security.KeyStoreException
    {
        android.security.keystore.KeyStoreCryptoOperationChunkedStreamer r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i9, $i10;
        byte[] r1, r2, $r3, $r7, $r8, $r9, $r10, r11, r12, r13, r15;
        android.security.keystore.KeyStoreCryptoOperationChunkedStreamer$Stream $r4;
        android.security.keystore.KeyStoreConnectException $r5;
        android.security.KeyStoreException $r6;
        long $l6, $l7, $l8, $l11, $l12, $l13;
        android.security.keymaster.OperationResult r14;

        r0 := @this: android.security.keystore.KeyStoreCryptoOperationChunkedStreamer;

        r11 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r12 := @parameter3: byte[];

        r1 := @parameter4: byte[];

        r2 = virtualinvoke r0.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: byte[] update(byte[],int,int)>(r11, i0, i1);

        $r3 = r0.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: byte[] mChunk>;

        $i2 = r0.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: int mChunkLength>;

        r13 = staticinvoke <android.security.keystore.ArrayUtils: byte[] subarray(byte[],int,int)>($r3, 0, $i2);

        $r4 = r0.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: android.security.keystore.KeyStoreCryptoOperationChunkedStreamer$Stream mKeyStoreStream>;

        r14 = interfaceinvoke $r4.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer$Stream: android.security.keymaster.OperationResult finish(byte[],byte[],byte[])>(r13, r12, r1);

        if r14 == null goto label3;

        $i3 = r14.<android.security.keymaster.OperationResult: int resultCode>;

        if $i3 != 1 goto label2;

        $l7 = r0.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: long mConsumedInputSizeBytes>;

        $i5 = lengthof r13;

        $l6 = (long) $i5;

        $l8 = $l7 + $l6;

        r0.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: long mConsumedInputSizeBytes> = $l8;

        r15 = r2;

        $r7 = r14.<android.security.keymaster.OperationResult: byte[] output>;

        if $r7 == null goto label1;

        r15 = r2;

        $r8 = r14.<android.security.keymaster.OperationResult: byte[] output>;

        $i9 = lengthof $r8;

        if $i9 <= 0 goto label1;

        $l12 = r0.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: long mProducedOutputSizeBytes>;

        $r9 = r14.<android.security.keymaster.OperationResult: byte[] output>;

        $i10 = lengthof $r9;

        $l11 = (long) $i10;

        $l13 = $l12 + $l11;

        r0.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: long mProducedOutputSizeBytes> = $l13;

        $r10 = r14.<android.security.keymaster.OperationResult: byte[] output>;

        r15 = staticinvoke <android.security.keystore.ArrayUtils: byte[] concat(byte[],byte[])>(r2, $r10);

     label1:
        return r15;

     label2:
        $i4 = r14.<android.security.keymaster.OperationResult: int resultCode>;

        $r6 = staticinvoke <android.security.KeyStore: android.security.KeyStoreException getKeyStoreException(int)>($i4);

        throw $r6;

     label3:
        $r5 = new android.security.keystore.KeyStoreConnectException;

        specialinvoke $r5.<android.security.keystore.KeyStoreConnectException: void <init>()>();

        throw $r5;
    }

    public long getConsumedInputSizeBytes()
    {
        android.security.keystore.KeyStoreCryptoOperationChunkedStreamer r0;
        long $l0;

        r0 := @this: android.security.keystore.KeyStoreCryptoOperationChunkedStreamer;

        $l0 = r0.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: long mConsumedInputSizeBytes>;

        return $l0;
    }

    public long getProducedOutputSizeBytes()
    {
        android.security.keystore.KeyStoreCryptoOperationChunkedStreamer r0;
        long $l0;

        r0 := @this: android.security.keystore.KeyStoreCryptoOperationChunkedStreamer;

        $l0 = r0.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: long mProducedOutputSizeBytes>;

        return $l0;
    }

    public byte[] update(byte[], int, int) throws android.security.KeyStoreException
    {
        android.security.keystore.KeyStoreCryptoOperationChunkedStreamer r0;
        android.security.keymaster.OperationResult r1;
        byte[] $r2, $r3, $r11, $r13, $r29, $r30, $r31, $r32, $r33, $r34, r35, r36, r37;
        int $i0, $i1, $i2, $i3, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i23, $i24, $i26, $i27, i28, i29, i30, i31, i32, i33, i34;
        long $l4, $l5, $l6, $l20, $l21, $l22;
        java.lang.StringBuilder $r4, $r16, $r22;
        android.security.KeyStoreException $r9, $r15, $r20, $r27, $r41;
        java.lang.String $r10, $r21, $r28;
        android.security.keystore.KeyStoreCryptoOperationChunkedStreamer$Stream $r12;
        android.security.keystore.KeyStoreConnectException $r14;

        r0 := @this: android.security.keystore.KeyStoreCryptoOperationChunkedStreamer;

        r35 := @parameter0: byte[];

        i28 := @parameter1: int;

        i29 := @parameter2: int;

        if i29 == 0 goto label13;

        if r35 != null goto label01;

        goto label13;

     label01:
        if i29 < 0 goto label12;

        if i28 < 0 goto label12;

        $i1 = i28 + i29;

        $i0 = lengthof r35;

        if $i1 > $i0 goto label12;

        r36 = <libcore.util.EmptyArray: byte[] BYTE>;

     label02:
        if i29 > 0 goto label04;

        $i27 = r0.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: int mChunkLength>;

        $i26 = r0.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: int mChunkSizeThreshold>;

        if $i27 < $i26 goto label03;

        goto label04;

     label03:
        return r36;

     label04:
        $r3 = r0.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: byte[] mChunk>;

        $i2 = r0.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: int mChunkLength>;

        i30 = staticinvoke <android.security.keystore.ArrayUtils: int copy(byte[],int,byte[],int,int)>(r35, i28, $r3, $i2, i29);

        i29 = i29 - i30;

        i28 = i28 + i30;

        $i3 = r0.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: int mChunkLength>;

        i31 = $i3 + i30;

        r0.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: int mChunkLength> = i31;

        $l5 = r0.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: long mConsumedInputSizeBytes>;

        $l4 = (long) i30;

        $l6 = $l5 + $l4;

        r0.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: long mConsumedInputSizeBytes> = $l6;

        $i7 = r0.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: int mChunkSizeMax>;

        if i31 > $i7 goto label11;

        r37 = r36;

        $i10 = r0.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: int mChunkSizeThreshold>;

        if i31 < $i10 goto label10;

        $r12 = r0.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: android.security.keystore.KeyStoreCryptoOperationChunkedStreamer$Stream mKeyStoreStream>;

        $r11 = r0.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: byte[] mChunk>;

        $r13 = staticinvoke <android.security.keystore.ArrayUtils: byte[] subarray(byte[],int,int)>($r11, 0, i31);

        r1 = interfaceinvoke $r12.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer$Stream: android.security.keymaster.OperationResult update(byte[])>($r13);

        if r1 == null goto label09;

        $i11 = r1.<android.security.keymaster.OperationResult: int resultCode>;

        if $i11 != 1 goto label08;

        $i13 = r1.<android.security.keymaster.OperationResult: int inputConsumed>;

        if $i13 <= 0 goto label07;

        i32 = r1.<android.security.keymaster.OperationResult: int inputConsumed>;

        i33 = r0.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: int mChunkLength>;

        if i32 > i33 goto label06;

        $i17 = r1.<android.security.keymaster.OperationResult: int inputConsumed>;

        i34 = i33 - $i17;

        r0.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: int mChunkLength> = i34;

        if i34 <= 0 goto label05;

        $r34 = r0.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: byte[] mChunk>;

        $i24 = r1.<android.security.keymaster.OperationResult: int inputConsumed>;

        $r33 = r0.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: byte[] mChunk>;

        $i23 = r0.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: int mChunkLength>;

        staticinvoke <android.security.keystore.ArrayUtils: int copy(byte[],int,byte[],int,int)>($r34, $i24, $r33, 0, $i23);

     label05:
        r37 = r36;

        $r29 = r1.<android.security.keymaster.OperationResult: byte[] output>;

        if $r29 == null goto label10;

        r37 = r36;

        $r30 = r1.<android.security.keymaster.OperationResult: byte[] output>;

        $i18 = lengthof $r30;

        if $i18 <= 0 goto label10;

        $l21 = r0.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: long mProducedOutputSizeBytes>;

        $r31 = r1.<android.security.keymaster.OperationResult: byte[] output>;

        $i19 = lengthof $r31;

        $l20 = (long) $i19;

        $l22 = $l21 + $l20;

        r0.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: long mProducedOutputSizeBytes> = $l22;

        $r32 = r1.<android.security.keymaster.OperationResult: byte[] output>;

        r37 = staticinvoke <android.security.keystore.ArrayUtils: byte[] concat(byte[],byte[])>(r36, $r32);

        goto label10;

     label06:
        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Keystore consumed more input than provided. Provided: ");

        $i15 = r0.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: int mChunkLength>;

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i15);

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", consumed: ");

        $i16 = r1.<android.security.keymaster.OperationResult: int inputConsumed>;

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i16);

        $r27 = new android.security.KeyStoreException;

        $r28 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<android.security.KeyStoreException: void <init>(int,java.lang.String)>(-1000, $r28);

        throw $r27;

     label07:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Keystore consumed 0 of ");

        $i14 = r0.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: int mChunkLength>;

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i14);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes provided.");

        $r20 = new android.security.KeyStoreException;

        $r21 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<android.security.KeyStoreException: void <init>(int,java.lang.String)>(-21, $r21);

        throw $r20;

     label08:
        $i12 = r1.<android.security.keymaster.OperationResult: int resultCode>;

        $r15 = staticinvoke <android.security.KeyStore: android.security.KeyStoreException getKeyStoreException(int)>($i12);

        throw $r15;

     label09:
        $r14 = new android.security.keystore.KeyStoreConnectException;

        specialinvoke $r14.<android.security.keystore.KeyStoreConnectException: void <init>()>();

        throw $r14;

     label10:
        r36 = r37;

        goto label02;

     label11:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Chunk size exceeded max chunk size. Max: ");

        $i8 = r0.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: int mChunkSizeMax>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Actual: ");

        $i9 = r0.<android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: int mChunkLength>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r9 = new android.security.KeyStoreException;

        $r10 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<android.security.KeyStoreException: void <init>(int,java.lang.String)>(-21, $r10);

        throw $r9;

     label12:
        $r41 = new android.security.KeyStoreException;

        specialinvoke $r41.<android.security.KeyStoreException: void <init>(int,java.lang.String)>(-1000, "Input offset and length out of bounds of input array");

        throw $r41;

     label13:
        $r2 = <libcore.util.EmptyArray: byte[] BYTE>;

        return $r2;
    }

    public static void <clinit>()
    {
        <android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: int DEFAULT_CHUNK_SIZE_THRESHOLD> = 2048;

        <android.security.keystore.KeyStoreCryptoOperationChunkedStreamer: int DEFAULT_CHUNK_SIZE_MAX> = 65536;

        return;
    }
}
