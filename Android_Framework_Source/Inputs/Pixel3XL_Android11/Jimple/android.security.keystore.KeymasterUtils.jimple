public abstract class android.security.keystore.KeymasterUtils extends java.lang.Object
{

    private void <init>()
    {
        android.security.keystore.KeymasterUtils r0;

        r0 := @this: android.security.keystore.KeymasterUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void addMinMacLengthAuthorizationIfNecessary(android.security.keymaster.KeymasterArguments, int, int[], int[])
    {
        int[] r0, r1;
        int i0, $i1, $i2, i4, i5;
        boolean $z0;
        java.lang.StringBuilder $r2, $r8;
        java.security.ProviderException $r6, $r12;
        java.lang.String $r7, $r10, $r13;
        long $l3;
        android.security.keymaster.KeymasterArguments r14;

        r14 := @parameter0: android.security.keymaster.KeymasterArguments;

        i4 := @parameter1: int;

        r0 := @parameter2: int[];

        r1 := @parameter3: int[];

        if i4 == 32 goto label4;

        if i4 == 128 goto label1;

        goto label5;

     label1:
        $i1 = lengthof r1;

        if $i1 != 1 goto label3;

        i5 = r1[0];

        i0 = staticinvoke <android.security.keystore.KeymasterUtils: int getDigestOutputSizeBits(int)>(i5);

        if i0 == -1 goto label2;

        $l3 = (long) i0;

        virtualinvoke r14.<android.security.keymaster.KeymasterArguments: void addUnsignedInt(int,long)>(805306376, $l3);

        goto label5;

     label2:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HMAC key authorized for unsupported digest: ");

        $r10 = staticinvoke <android.security.keystore.KeyProperties$Digest: java.lang.String fromKeymaster(int)>(i5);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = new java.security.ProviderException;

        $r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.security.ProviderException: void <init>(java.lang.String)>($r13);

        throw $r12;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported number of authorized digests for HMAC key: ");

        $i2 = lengthof r1;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Exactly one digest must be authorized");

        $r6 = new java.security.ProviderException;

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.security.ProviderException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label4:
        $z0 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(int[],int)>(r0, 32);

        if $z0 == 0 goto label5;

        virtualinvoke r14.<android.security.keymaster.KeymasterArguments: void addUnsignedInt(int,long)>(805306376, 96L);

     label5:
        return;
    }

    private static void addSids(android.security.keymaster.KeymasterArguments, android.security.keystore.UserAuthArgs)
    {
        android.security.keymaster.KeymasterArguments r0;
        android.security.keystore.UserAuthArgs r1;
        long[] r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i8, i18, i19, $i20;
        java.util.ArrayList $r4;
        java.lang.IllegalStateException $r5, $r13;
        long $l6, $l7, $l9, $l11, $l12, $l13, $l14, $l16, $l17;
        java.lang.Long $r6, $r8, $r14, $r15, $r16;
        java.lang.Object $r7, $r11;
        java.math.BigInteger $r9, $r17, $r18;
        android.content.Context $r10;
        android.hardware.biometrics.BiometricManager $r12;
        byte $b10, $b15;
        boolean $z1;

        r0 := @parameter0: android.security.keymaster.KeymasterArguments;

        r1 := @parameter1: android.security.keystore.UserAuthArgs;

        $i1 = interfaceinvoke r1.<android.security.keystore.UserAuthArgs: int getUserAuthenticationType()>();

        if $i1 != 3 goto label02;

        $l14 = interfaceinvoke r1.<android.security.keystore.UserAuthArgs: long getBoundToSpecificSecureUserId()>();

        $b15 = $l14 cmp 0L;

        if $b15 == 0 goto label01;

        $l17 = interfaceinvoke r1.<android.security.keystore.UserAuthArgs: long getBoundToSpecificSecureUserId()>();

        $r18 = staticinvoke <android.security.keymaster.KeymasterArguments: java.math.BigInteger toUint64(long)>($l17);

        virtualinvoke r0.<android.security.keymaster.KeymasterArguments: void addUnsignedLong(int,java.math.BigInteger)>(-1610612234, $r18);

        goto label11;

     label01:
        $l16 = staticinvoke <android.security.keystore.KeymasterUtils: long getRootSid()>();

        $r17 = staticinvoke <android.security.keymaster.KeymasterArguments: java.math.BigInteger toUint64(long)>($l16);

        virtualinvoke r0.<android.security.keymaster.KeymasterArguments: void addUnsignedLong(int,java.math.BigInteger)>(-1610612234, $r17);

        goto label11;

     label02:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $i2 = interfaceinvoke r1.<android.security.keystore.UserAuthArgs: int getUserAuthenticationType()>();

        $i3 = $i2 & 2;

        if $i3 == 0 goto label08;

        $r10 = staticinvoke <android.security.KeyStore: android.content.Context getApplicationContext()>();

        $r11 = virtualinvoke $r10.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/hardware/biometrics/BiometricManager;");

        $r12 = (android.hardware.biometrics.BiometricManager) $r11;

        r3 = virtualinvoke $r12.<android.hardware.biometrics.BiometricManager: long[] getAuthenticatorIds()>();

        $i8 = lengthof r3;

        if $i8 == 0 goto label07;

        $l9 = interfaceinvoke r1.<android.security.keystore.UserAuthArgs: long getBoundToSpecificSecureUserId()>();

        $b10 = $l9 cmp 0L;

        if $b10 == 0 goto label03;

        $l13 = interfaceinvoke r1.<android.security.keystore.UserAuthArgs: long getBoundToSpecificSecureUserId()>();

        $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l13);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r16);

        goto label06;

     label03:
        $z1 = interfaceinvoke r1.<android.security.keystore.UserAuthArgs: boolean isInvalidatedByBiometricEnrollment()>();

        if $z1 == 0 goto label05;

        i0 = lengthof r3;

        i18 = 0;

     label04:
        if i18 >= i0 goto label06;

        $l12 = r3[i18];

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l12);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r15);

        i18 = i18 + 1;

        goto label04;

     label05:
        $l11 = staticinvoke <android.security.keystore.KeymasterUtils: long getRootSid()>();

        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l11);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r14);

     label06:
        goto label09;

     label07:
        $r13 = new java.lang.IllegalStateException;

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>("At least one biometric must be enrolled to create keys requiring user authentication for every use");

        throw $r13;

     label08:
        $i4 = interfaceinvoke r1.<android.security.keystore.UserAuthArgs: int getUserAuthenticationType()>();

        $i5 = $i4 & 1;

        if $i5 == 0 goto label12;

        $l6 = staticinvoke <android.security.keystore.KeymasterUtils: long getRootSid()>();

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r6);

     label09:
        i19 = 0;

     label10:
        $i20 = interfaceinvoke $r4.<java.util.List: int size()>();

        if i19 >= $i20 goto label11;

        $r7 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i19);

        $r8 = (java.lang.Long) $r7;

        $l7 = virtualinvoke $r8.<java.lang.Long: long longValue()>();

        $r9 = staticinvoke <android.security.keymaster.KeymasterArguments: java.math.BigInteger toUint64(long)>($l7);

        virtualinvoke r0.<android.security.keymaster.KeymasterArguments: void addUnsignedLong(int,java.math.BigInteger)>(-1610612234, $r9);

        i19 = i19 + 1;

        goto label10;

     label11:
        return;

     label12:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Invalid or no authentication type specified.");

        throw $r5;
    }

    public static void addUserAuthArgs(android.security.keymaster.KeymasterArguments, android.security.keystore.UserAuthArgs)
    {
        android.security.keymaster.KeymasterArguments r0;
        android.security.keystore.UserAuthArgs r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        int $i0, $i1, $i2, $i4;
        long $l3;
        java.security.ProviderException $r2;

        r0 := @parameter0: android.security.keymaster.KeymasterArguments;

        r1 := @parameter1: android.security.keystore.UserAuthArgs;

        $z0 = interfaceinvoke r1.<android.security.keystore.UserAuthArgs: boolean isUserConfirmationRequired()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<android.security.keymaster.KeymasterArguments: void addBoolean(int)>(1879048700);

     label1:
        $z1 = interfaceinvoke r1.<android.security.keystore.UserAuthArgs: boolean isUserPresenceRequired()>();

        if $z1 == 0 goto label2;

        virtualinvoke r0.<android.security.keymaster.KeymasterArguments: void addBoolean(int)>(1879048699);

     label2:
        $z2 = interfaceinvoke r1.<android.security.keystore.UserAuthArgs: boolean isUnlockedDeviceRequired()>();

        if $z2 == 0 goto label3;

        virtualinvoke r0.<android.security.keymaster.KeymasterArguments: void addBoolean(int)>(1879048701);

     label3:
        $z3 = interfaceinvoke r1.<android.security.keystore.UserAuthArgs: boolean isUserAuthenticationRequired()>();

        if $z3 != 0 goto label4;

        virtualinvoke r0.<android.security.keymaster.KeymasterArguments: void addBoolean(int)>(1879048695);

        return;

     label4:
        $i0 = interfaceinvoke r1.<android.security.keystore.UserAuthArgs: int getUserAuthenticationValidityDurationSeconds()>();

        if $i0 != 0 goto label6;

        staticinvoke <android.security.keystore.KeymasterUtils: void addSids(android.security.keymaster.KeymasterArguments,android.security.keystore.UserAuthArgs)>(r0, r1);

        $i4 = interfaceinvoke r1.<android.security.keystore.UserAuthArgs: int getUserAuthenticationType()>();

        virtualinvoke r0.<android.security.keymaster.KeymasterArguments: void addEnum(int,int)>(268435960, $i4);

        $z5 = interfaceinvoke r1.<android.security.keystore.UserAuthArgs: boolean isUserAuthenticationValidWhileOnBody()>();

        if $z5 != 0 goto label5;

        goto label7;

     label5:
        $r2 = new java.security.ProviderException;

        specialinvoke $r2.<java.security.ProviderException: void <init>(java.lang.String)>("Key validity extension while device is on-body is not supported for keys requiring fingerprint authentication");

        throw $r2;

     label6:
        staticinvoke <android.security.keystore.KeymasterUtils: void addSids(android.security.keymaster.KeymasterArguments,android.security.keystore.UserAuthArgs)>(r0, r1);

        $i1 = interfaceinvoke r1.<android.security.keystore.UserAuthArgs: int getUserAuthenticationType()>();

        virtualinvoke r0.<android.security.keymaster.KeymasterArguments: void addEnum(int,int)>(268435960, $i1);

        $i2 = interfaceinvoke r1.<android.security.keystore.UserAuthArgs: int getUserAuthenticationValidityDurationSeconds()>();

        $l3 = (long) $i2;

        virtualinvoke r0.<android.security.keymaster.KeymasterArguments: void addUnsignedInt(int,long)>(805306873, $l3);

        $z4 = interfaceinvoke r1.<android.security.keystore.UserAuthArgs: boolean isUserAuthenticationValidWhileOnBody()>();

        if $z4 == 0 goto label7;

        virtualinvoke r0.<android.security.keymaster.KeymasterArguments: void addBoolean(int)>(1879048698);

     label7:
        return;
    }

    public static int getDigestOutputSizeBits(int)
    {
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label8;
            case 1: goto label7;
            case 2: goto label6;
            case 3: goto label5;
            case 4: goto label4;
            case 5: goto label3;
            case 6: goto label2;
            default: goto label1;
        };

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown digest: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label2:
        return 512;

     label3:
        return 384;

     label4:
        return 256;

     label5:
        return 224;

     label6:
        return 160;

     label7:
        return 128;

     label8:
        return -1;
    }

    private static long getRootSid()
    {
        long l0;
        byte $b1;
        java.lang.IllegalStateException $r0;

        l0 = staticinvoke <android.security.GateKeeper: long getSecureUserId()>();

        $b1 = l0 cmp 0L;

        if $b1 == 0 goto label1;

        return l0;

     label1:
        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Secure lock screen must be enabled to create keys requiring user authentication");

        throw $r0;
    }

    public static boolean isKeymasterBlockModeIndCpaCompatibleWithSymmetricCrypto(int)
    {
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5;

        i0 := @parameter0: int;

        if i0 == 1 goto label3;

        if i0 == 2 goto label2;

        if i0 == 3 goto label2;

        if i0 != 32 goto label1;

        goto label2;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported block mode: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label2:
        return 1;

     label3:
        return 0;
    }

    public static boolean isKeymasterPaddingSchemeIndCpaCompatibleWithAsymmetricCrypto(int)
    {
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5;

        i0 := @parameter0: int;

        if i0 == 1 goto label3;

        if i0 == 2 goto label2;

        if i0 != 4 goto label1;

        goto label2;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported asymmetric encryption padding scheme: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label2:
        return 1;

     label3:
        return 0;
    }
}
