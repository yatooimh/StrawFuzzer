public class android.security.keystore.recovery.RecoveryController extends java.lang.Object
{
    public static final int ERROR_BAD_CERTIFICATE_FORMAT;
    public static final int ERROR_DECRYPTION_FAILED;
    public static final int ERROR_DOWNGRADE_CERTIFICATE;
    public static final int ERROR_INSECURE_USER;
    public static final int ERROR_INVALID_CERTIFICATE;
    public static final int ERROR_INVALID_KEY_FORMAT;
    public static final int ERROR_NO_SNAPSHOT_PENDING;
    public static final int ERROR_SERVICE_INTERNAL_ERROR;
    public static final int ERROR_SESSION_EXPIRED;
    public static final int RECOVERY_STATUS_PERMANENT_FAILURE;
    public static final int RECOVERY_STATUS_SYNCED;
    public static final int RECOVERY_STATUS_SYNC_IN_PROGRESS;
    private static final java.lang.String TAG;
    private final com.android.internal.widget.ILockSettings mBinder;
    private final android.security.KeyStore mKeyStore;

    private void <init>(com.android.internal.widget.ILockSettings, android.security.KeyStore)
    {
        android.security.keystore.recovery.RecoveryController r0;
        com.android.internal.widget.ILockSettings r1;
        android.security.KeyStore r2;

        r0 := @this: android.security.keystore.recovery.RecoveryController;

        r1 := @parameter0: com.android.internal.widget.ILockSettings;

        r2 := @parameter1: android.security.KeyStore;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.security.keystore.recovery.RecoveryController: com.android.internal.widget.ILockSettings mBinder> = r1;

        r0.<android.security.keystore.recovery.RecoveryController: android.security.KeyStore mKeyStore> = r2;

        return;
    }

    public static android.security.keystore.recovery.RecoveryController getInstance(android.content.Context)
    {
        android.content.Context r0;
        android.security.keystore.recovery.RecoveryController $r1;
        android.os.IBinder $r2;
        com.android.internal.widget.ILockSettings $r3;
        android.security.KeyStore $r4;

        r0 := @parameter0: android.content.Context;

        $r1 = new android.security.keystore.recovery.RecoveryController;

        $r2 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("lock_settings");

        $r3 = staticinvoke <com.android.internal.widget.ILockSettings$Stub: com.android.internal.widget.ILockSettings asInterface(android.os.IBinder)>($r2);

        $r4 = staticinvoke <android.security.KeyStore: android.security.KeyStore getInstance()>();

        specialinvoke $r1.<android.security.keystore.recovery.RecoveryController: void <init>(com.android.internal.widget.ILockSettings,android.security.KeyStore)>($r3, $r4);

        return $r1;
    }

    public static boolean isRecoverableKeyStoreEnabled(android.content.Context)
    {
        java.lang.Object $r0;
        boolean $z0, z1;
        android.content.Context r1;
        android.app.KeyguardManager r2;

        r1 := @parameter0: android.content.Context;

        $r0 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/KeyguardManager;");

        r2 = (android.app.KeyguardManager) $r0;

        if r2 == null goto label1;

        $z0 = virtualinvoke r2.<android.app.KeyguardManager: boolean isDeviceSecure()>();

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public android.security.keystore.recovery.RecoverySession createRecoverySession()
    {
        android.security.keystore.recovery.RecoveryController r0;
        android.security.keystore.recovery.RecoverySession $r1;

        r0 := @this: android.security.keystore.recovery.RecoveryController;

        $r1 = staticinvoke <android.security.keystore.recovery.RecoverySession: android.security.keystore.recovery.RecoverySession newInstance(android.security.keystore.recovery.RecoveryController)>(r0);

        return $r1;
    }

    public java.security.Key generateKey(java.lang.String) throws android.security.keystore.recovery.InternalRecoveryServiceException, android.security.keystore.recovery.LockScreenRequiredException
    {
        android.security.keystore.recovery.RecoveryController r0;
        com.android.internal.widget.ILockSettings $r1;
        java.security.Key $r2;
        android.os.ServiceSpecificException $r3;
        int $i0;
        android.security.keystore.recovery.InternalRecoveryServiceException $r4, $r10, r13;
        android.security.keystore.recovery.LockScreenRequiredException $r5;
        java.lang.String $r6, r11, r12;
        android.os.RemoteException $r7;
        java.lang.RuntimeException $r8;
        java.lang.Throwable $r9;

        r0 := @this: android.security.keystore.recovery.RecoveryController;

        r11 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<android.security.keystore.recovery.RecoveryController: com.android.internal.widget.ILockSettings mBinder>;

        r12 = interfaceinvoke $r1.<com.android.internal.widget.ILockSettings: java.lang.String generateKey(java.lang.String)>(r11);

     label2:
        if r12 == null goto label4;

     label3:
        $r2 = virtualinvoke r0.<android.security.keystore.recovery.RecoveryController: java.security.Key getKeyFromGrant(java.lang.String)>(r12);

        return $r2;

     label4:
        r13 = new android.security.keystore.recovery.InternalRecoveryServiceException;

        specialinvoke r13.<android.security.keystore.recovery.InternalRecoveryServiceException: void <init>(java.lang.String)>("null grant alias");

        throw r13;

     label5:
        $r3 := @caughtexception;

        $i0 = $r3.<android.os.ServiceSpecificException: int errorCode>;

        if $i0 != 23 goto label6;

        $r5 = new android.security.keystore.recovery.LockScreenRequiredException;

        $r6 = virtualinvoke $r3.<android.os.ServiceSpecificException: java.lang.String getMessage()>();

        specialinvoke $r5.<android.security.keystore.recovery.LockScreenRequiredException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label6:
        $r4 = virtualinvoke r0.<android.security.keystore.recovery.RecoveryController: android.security.keystore.recovery.InternalRecoveryServiceException wrapUnexpectedServiceSpecificException(android.os.ServiceSpecificException)>($r3);

        throw $r4;

     label7:
        $r9 := @caughtexception;

        $r10 = new android.security.keystore.recovery.InternalRecoveryServiceException;

        specialinvoke $r10.<android.security.keystore.recovery.InternalRecoveryServiceException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to get key from keystore", $r9);

        throw $r10;

     label8:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r8;

        catch android.os.RemoteException from label1 to label2 with label8;
        catch android.security.keystore.KeyPermanentlyInvalidatedException from label1 to label2 with label7;
        catch java.security.UnrecoverableKeyException from label1 to label2 with label7;
        catch android.os.ServiceSpecificException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label8;
        catch android.security.keystore.KeyPermanentlyInvalidatedException from label3 to label4 with label7;
        catch java.security.UnrecoverableKeyException from label3 to label4 with label7;
        catch android.os.ServiceSpecificException from label3 to label4 with label5;
        catch android.os.RemoteException from label4 to label5 with label8;
        catch android.security.keystore.KeyPermanentlyInvalidatedException from label4 to label5 with label7;
        catch java.security.UnrecoverableKeyException from label4 to label5 with label7;
        catch android.os.ServiceSpecificException from label4 to label5 with label5;
    }

    public java.security.Key generateKey(java.lang.String, byte[]) throws android.security.keystore.recovery.InternalRecoveryServiceException, android.security.keystore.recovery.LockScreenRequiredException
    {
        android.security.keystore.recovery.RecoveryController r0;
        byte[] r1;
        com.android.internal.widget.ILockSettings $r2;
        java.security.Key $r3;
        android.os.ServiceSpecificException $r4;
        int $i0;
        android.security.keystore.recovery.InternalRecoveryServiceException $r5, $r9, r14;
        android.security.keystore.recovery.LockScreenRequiredException $r6;
        java.lang.String $r7, r12, r13;
        java.lang.Throwable $r8;
        android.os.RemoteException $r10;
        java.lang.RuntimeException $r11;

        r0 := @this: android.security.keystore.recovery.RecoveryController;

        r12 := @parameter0: java.lang.String;

        r1 := @parameter1: byte[];

     label1:
        $r2 = r0.<android.security.keystore.recovery.RecoveryController: com.android.internal.widget.ILockSettings mBinder>;

        r13 = interfaceinvoke $r2.<com.android.internal.widget.ILockSettings: java.lang.String generateKeyWithMetadata(java.lang.String,byte[])>(r12, r1);

     label2:
        if r13 == null goto label4;

     label3:
        $r3 = virtualinvoke r0.<android.security.keystore.recovery.RecoveryController: java.security.Key getKeyFromGrant(java.lang.String)>(r13);

        return $r3;

     label4:
        r14 = new android.security.keystore.recovery.InternalRecoveryServiceException;

        specialinvoke r14.<android.security.keystore.recovery.InternalRecoveryServiceException: void <init>(java.lang.String)>("null grant alias");

        throw r14;

     label5:
        $r4 := @caughtexception;

        $i0 = $r4.<android.os.ServiceSpecificException: int errorCode>;

        if $i0 != 23 goto label6;

        $r6 = new android.security.keystore.recovery.LockScreenRequiredException;

        $r7 = virtualinvoke $r4.<android.os.ServiceSpecificException: java.lang.String getMessage()>();

        specialinvoke $r6.<android.security.keystore.recovery.LockScreenRequiredException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label6:
        $r5 = virtualinvoke r0.<android.security.keystore.recovery.RecoveryController: android.security.keystore.recovery.InternalRecoveryServiceException wrapUnexpectedServiceSpecificException(android.os.ServiceSpecificException)>($r4);

        throw $r5;

     label7:
        $r8 := @caughtexception;

        $r9 = new android.security.keystore.recovery.InternalRecoveryServiceException;

        specialinvoke $r9.<android.security.keystore.recovery.InternalRecoveryServiceException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to get key from keystore", $r8);

        throw $r9;

     label8:
        $r10 := @caughtexception;

        $r11 = virtualinvoke $r10.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r11;

        catch android.os.RemoteException from label1 to label2 with label8;
        catch android.security.keystore.KeyPermanentlyInvalidatedException from label1 to label2 with label7;
        catch java.security.UnrecoverableKeyException from label1 to label2 with label7;
        catch android.os.ServiceSpecificException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label8;
        catch android.security.keystore.KeyPermanentlyInvalidatedException from label3 to label4 with label7;
        catch java.security.UnrecoverableKeyException from label3 to label4 with label7;
        catch android.os.ServiceSpecificException from label3 to label4 with label5;
        catch android.os.RemoteException from label4 to label5 with label8;
        catch android.security.keystore.KeyPermanentlyInvalidatedException from label4 to label5 with label7;
        catch java.security.UnrecoverableKeyException from label4 to label5 with label7;
        catch android.os.ServiceSpecificException from label4 to label5 with label5;
    }

    public java.util.List getAliases() throws android.security.keystore.recovery.InternalRecoveryServiceException
    {
        android.security.keystore.recovery.RecoveryController r0;
        java.util.ArrayList $r1;
        com.android.internal.widget.ILockSettings $r2;
        java.util.Map $r3;
        java.util.Set $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.os.ServiceSpecificException $r7;
        android.security.keystore.recovery.InternalRecoveryServiceException $r8;

        r0 := @this: android.security.keystore.recovery.RecoveryController;

     label1:
        $r1 = new java.util.ArrayList;

        $r2 = r0.<android.security.keystore.recovery.RecoveryController: com.android.internal.widget.ILockSettings mBinder>;

        $r3 = interfaceinvoke $r2.<com.android.internal.widget.ILockSettings: java.util.Map getRecoveryStatus()>();

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r4);

     label2:
        return $r1;

     label3:
        $r7 := @caughtexception;

        $r8 = virtualinvoke r0.<android.security.keystore.recovery.RecoveryController: android.security.keystore.recovery.InternalRecoveryServiceException wrapUnexpectedServiceSpecificException(android.os.ServiceSpecificException)>($r7);

        throw $r8;

     label4:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch android.os.ServiceSpecificException from label1 to label2 with label3;
    }

    com.android.internal.widget.ILockSettings getBinder()
    {
        android.security.keystore.recovery.RecoveryController r0;
        com.android.internal.widget.ILockSettings $r1;

        r0 := @this: android.security.keystore.recovery.RecoveryController;

        $r1 = r0.<android.security.keystore.recovery.RecoveryController: com.android.internal.widget.ILockSettings mBinder>;

        return $r1;
    }

    public java.security.Key getKey(java.lang.String) throws android.security.keystore.recovery.InternalRecoveryServiceException, java.security.UnrecoverableKeyException
    {
        android.security.keystore.recovery.RecoveryController r0;
        com.android.internal.widget.ILockSettings $r1;
        java.lang.String $r2, $r7, r10, r11;
        boolean $z0;
        android.os.ServiceSpecificException $r3;
        android.security.keystore.recovery.InternalRecoveryServiceException $r4;
        java.lang.Throwable $r5;
        android.os.RemoteException $r8;
        java.lang.RuntimeException $r9;
        java.security.Key r12;
        java.security.UnrecoverableKeyException r16;
        java.security.GeneralSecurityException r17;

        r0 := @this: android.security.keystore.recovery.RecoveryController;

        r10 := @parameter0: java.lang.String;

     label01:
        $r1 = r0.<android.security.keystore.recovery.RecoveryController: com.android.internal.widget.ILockSettings mBinder>;

        r11 = interfaceinvoke $r1.<com.android.internal.widget.ILockSettings: java.lang.String getKey(java.lang.String)>(r10);

     label02:
        if r11 == null goto label07;

     label03:
        $r2 = "";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r11);

        if $z0 == 0 goto label05;

     label04:
        goto label07;

     label05:
        r12 = virtualinvoke r0.<android.security.keystore.recovery.RecoveryController: java.security.Key getKeyFromGrant(java.lang.String)>(r11);

     label06:
        return r12;

     label07:
        return null;

     label08:
        $r3 := @caughtexception;

        $r4 = virtualinvoke r0.<android.security.keystore.recovery.RecoveryController: android.security.keystore.recovery.InternalRecoveryServiceException wrapUnexpectedServiceSpecificException(android.os.ServiceSpecificException)>($r3);

        throw $r4;

     label09:
        $r5 := @caughtexception;

        r16 = new java.security.UnrecoverableKeyException;

        r17 = (java.security.GeneralSecurityException) $r5;

        $r7 = virtualinvoke r17.<java.security.GeneralSecurityException: java.lang.String getMessage()>();

        specialinvoke r16.<java.security.UnrecoverableKeyException: void <init>(java.lang.String)>($r7);

        throw r16;

     label10:
        $r8 := @caughtexception;

        $r9 = virtualinvoke $r8.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r9;

        catch android.os.RemoteException from label01 to label02 with label10;
        catch android.security.keystore.KeyPermanentlyInvalidatedException from label01 to label02 with label09;
        catch java.security.UnrecoverableKeyException from label01 to label02 with label09;
        catch android.os.ServiceSpecificException from label01 to label02 with label08;
        catch android.os.RemoteException from label03 to label04 with label10;
        catch android.security.keystore.KeyPermanentlyInvalidatedException from label03 to label04 with label09;
        catch java.security.UnrecoverableKeyException from label03 to label04 with label09;
        catch android.os.ServiceSpecificException from label03 to label04 with label08;
        catch android.os.RemoteException from label05 to label06 with label10;
        catch android.security.keystore.KeyPermanentlyInvalidatedException from label05 to label06 with label09;
        catch java.security.UnrecoverableKeyException from label05 to label06 with label09;
        catch android.os.ServiceSpecificException from label05 to label06 with label08;
    }

    public android.security.keystore.recovery.KeyChainSnapshot getKeyChainSnapshot() throws android.security.keystore.recovery.InternalRecoveryServiceException
    {
        android.security.keystore.recovery.RecoveryController r0;
        com.android.internal.widget.ILockSettings $r1;
        android.os.ServiceSpecificException $r2;
        int $i0;
        android.security.keystore.recovery.InternalRecoveryServiceException $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.security.keystore.recovery.KeyChainSnapshot r6;

        r0 := @this: android.security.keystore.recovery.RecoveryController;

     label1:
        $r1 = r0.<android.security.keystore.recovery.RecoveryController: com.android.internal.widget.ILockSettings mBinder>;

        r6 = interfaceinvoke $r1.<com.android.internal.widget.ILockSettings: android.security.keystore.recovery.KeyChainSnapshot getKeyChainSnapshot()>();

     label2:
        return r6;

     label3:
        $r2 := @caughtexception;

        $i0 = $r2.<android.os.ServiceSpecificException: int errorCode>;

        if $i0 != 21 goto label4;

        return null;

     label4:
        $r3 = virtualinvoke r0.<android.security.keystore.recovery.RecoveryController: android.security.keystore.recovery.InternalRecoveryServiceException wrapUnexpectedServiceSpecificException(android.os.ServiceSpecificException)>($r2);

        throw $r3;

     label5:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.ServiceSpecificException from label1 to label2 with label3;
    }

    java.security.Key getKeyFromGrant(java.lang.String) throws java.security.UnrecoverableKeyException, android.security.keystore.KeyPermanentlyInvalidatedException
    {
        android.security.keystore.recovery.RecoveryController r0;
        java.lang.String r1;
        android.security.KeyStore $r2;
        android.security.keystore.AndroidKeyStoreKey $r3;

        r0 := @this: android.security.keystore.recovery.RecoveryController;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.security.keystore.recovery.RecoveryController: android.security.KeyStore mKeyStore>;

        $r3 = staticinvoke <android.security.keystore.AndroidKeyStoreProvider: android.security.keystore.AndroidKeyStoreKey loadAndroidKeyStoreKeyFromKeystore(android.security.KeyStore,java.lang.String,int)>($r2, r1, -1);

        return $r3;
    }

    public int[] getRecoverySecretTypes() throws android.security.keystore.recovery.InternalRecoveryServiceException
    {
        android.security.keystore.recovery.RecoveryController r0;
        com.android.internal.widget.ILockSettings $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.os.ServiceSpecificException $r4;
        android.security.keystore.recovery.InternalRecoveryServiceException $r5;
        int[] r6;

        r0 := @this: android.security.keystore.recovery.RecoveryController;

     label1:
        $r1 = r0.<android.security.keystore.recovery.RecoveryController: com.android.internal.widget.ILockSettings mBinder>;

        r6 = interfaceinvoke $r1.<com.android.internal.widget.ILockSettings: int[] getRecoverySecretTypes()>();

     label2:
        return r6;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke r0.<android.security.keystore.recovery.RecoveryController: android.security.keystore.recovery.InternalRecoveryServiceException wrapUnexpectedServiceSpecificException(android.os.ServiceSpecificException)>($r4);

        throw $r5;

     label4:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch android.os.ServiceSpecificException from label1 to label2 with label3;
    }

    public int getRecoveryStatus(java.lang.String) throws android.security.keystore.recovery.InternalRecoveryServiceException
    {
        android.security.keystore.recovery.RecoveryController r0;
        int i0;
        com.android.internal.widget.ILockSettings $r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        android.os.ServiceSpecificException $r4;
        android.security.keystore.recovery.InternalRecoveryServiceException $r5;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;
        java.lang.String r8;
        java.lang.Integer r9;

        r0 := @this: android.security.keystore.recovery.RecoveryController;

        r8 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<android.security.keystore.recovery.RecoveryController: com.android.internal.widget.ILockSettings mBinder>;

        $r2 = interfaceinvoke $r1.<com.android.internal.widget.ILockSettings: java.util.Map getRecoveryStatus()>();

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8);

        r9 = (java.lang.Integer) $r3;

     label2:
        if r9 != null goto label3;

        return 3;

     label3:
        i0 = virtualinvoke r9.<java.lang.Integer: int intValue()>();

     label4:
        return i0;

     label5:
        $r4 := @caughtexception;

        $r5 = virtualinvoke r0.<android.security.keystore.recovery.RecoveryController: android.security.keystore.recovery.InternalRecoveryServiceException wrapUnexpectedServiceSpecificException(android.os.ServiceSpecificException)>($r4);

        throw $r5;

     label6:
        $r6 := @caughtexception;

        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.ServiceSpecificException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch android.os.ServiceSpecificException from label3 to label4 with label5;
    }

    public java.util.Map getRootCertificates()
    {
        android.security.keystore.recovery.RecoveryController r0;
        java.util.Map $r1;

        r0 := @this: android.security.keystore.recovery.RecoveryController;

        $r1 = staticinvoke <android.security.keystore.recovery.TrustedRootCertificates: java.util.Map getRootCertificates()>();

        return $r1;
    }

    public java.security.Key importKey(java.lang.String, byte[]) throws android.security.keystore.recovery.InternalRecoveryServiceException, android.security.keystore.recovery.LockScreenRequiredException
    {
        android.security.keystore.recovery.RecoveryController r0;
        byte[] r1;
        com.android.internal.widget.ILockSettings $r2;
        java.security.Key $r3;
        java.lang.Throwable $r4;
        android.security.keystore.recovery.InternalRecoveryServiceException $r5, $r7, r14;
        android.os.ServiceSpecificException $r6;
        int $i0;
        android.security.keystore.recovery.LockScreenRequiredException $r8;
        java.lang.String $r9, r12, r13;
        android.os.RemoteException $r10;
        java.lang.RuntimeException $r11;

        r0 := @this: android.security.keystore.recovery.RecoveryController;

        r12 := @parameter0: java.lang.String;

        r1 := @parameter1: byte[];

     label1:
        $r2 = r0.<android.security.keystore.recovery.RecoveryController: com.android.internal.widget.ILockSettings mBinder>;

        r13 = interfaceinvoke $r2.<com.android.internal.widget.ILockSettings: java.lang.String importKey(java.lang.String,byte[])>(r12, r1);

     label2:
        if r13 == null goto label4;

     label3:
        $r3 = virtualinvoke r0.<android.security.keystore.recovery.RecoveryController: java.security.Key getKeyFromGrant(java.lang.String)>(r13);

        return $r3;

     label4:
        r14 = new android.security.keystore.recovery.InternalRecoveryServiceException;

        specialinvoke r14.<android.security.keystore.recovery.InternalRecoveryServiceException: void <init>(java.lang.String)>("Null grant alias");

        throw r14;

     label5:
        $r6 := @caughtexception;

        $i0 = $r6.<android.os.ServiceSpecificException: int errorCode>;

        if $i0 != 23 goto label6;

        $r8 = new android.security.keystore.recovery.LockScreenRequiredException;

        $r9 = virtualinvoke $r6.<android.os.ServiceSpecificException: java.lang.String getMessage()>();

        specialinvoke $r8.<android.security.keystore.recovery.LockScreenRequiredException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label6:
        $r7 = virtualinvoke r0.<android.security.keystore.recovery.RecoveryController: android.security.keystore.recovery.InternalRecoveryServiceException wrapUnexpectedServiceSpecificException(android.os.ServiceSpecificException)>($r6);

        throw $r7;

     label7:
        $r4 := @caughtexception;

        $r5 = new android.security.keystore.recovery.InternalRecoveryServiceException;

        specialinvoke $r5.<android.security.keystore.recovery.InternalRecoveryServiceException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to get key from keystore", $r4);

        throw $r5;

     label8:
        $r10 := @caughtexception;

        $r11 = virtualinvoke $r10.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r11;

        catch android.os.RemoteException from label1 to label2 with label8;
        catch android.security.keystore.KeyPermanentlyInvalidatedException from label1 to label2 with label7;
        catch java.security.UnrecoverableKeyException from label1 to label2 with label7;
        catch android.os.ServiceSpecificException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label8;
        catch android.security.keystore.KeyPermanentlyInvalidatedException from label3 to label4 with label7;
        catch java.security.UnrecoverableKeyException from label3 to label4 with label7;
        catch android.os.ServiceSpecificException from label3 to label4 with label5;
        catch android.os.RemoteException from label4 to label5 with label8;
        catch android.security.keystore.KeyPermanentlyInvalidatedException from label4 to label5 with label7;
        catch java.security.UnrecoverableKeyException from label4 to label5 with label7;
        catch android.os.ServiceSpecificException from label4 to label5 with label5;
    }

    public java.security.Key importKey(java.lang.String, byte[], byte[]) throws android.security.keystore.recovery.InternalRecoveryServiceException, android.security.keystore.recovery.LockScreenRequiredException
    {
        android.security.keystore.recovery.RecoveryController r0;
        byte[] r1, r2;
        com.android.internal.widget.ILockSettings $r3;
        java.security.Key $r4;
        android.os.ServiceSpecificException $r5;
        int $i0;
        android.security.keystore.recovery.InternalRecoveryServiceException $r6, $r10, r15;
        android.security.keystore.recovery.LockScreenRequiredException $r7;
        java.lang.String $r8, r13, r14;
        java.lang.Throwable $r9;
        android.os.RemoteException $r11;
        java.lang.RuntimeException $r12;

        r0 := @this: android.security.keystore.recovery.RecoveryController;

        r13 := @parameter0: java.lang.String;

        r1 := @parameter1: byte[];

        r2 := @parameter2: byte[];

     label1:
        $r3 = r0.<android.security.keystore.recovery.RecoveryController: com.android.internal.widget.ILockSettings mBinder>;

        r14 = interfaceinvoke $r3.<com.android.internal.widget.ILockSettings: java.lang.String importKeyWithMetadata(java.lang.String,byte[],byte[])>(r13, r1, r2);

     label2:
        if r14 == null goto label4;

     label3:
        $r4 = virtualinvoke r0.<android.security.keystore.recovery.RecoveryController: java.security.Key getKeyFromGrant(java.lang.String)>(r14);

        return $r4;

     label4:
        r15 = new android.security.keystore.recovery.InternalRecoveryServiceException;

        specialinvoke r15.<android.security.keystore.recovery.InternalRecoveryServiceException: void <init>(java.lang.String)>("Null grant alias");

        throw r15;

     label5:
        $r5 := @caughtexception;

        $i0 = $r5.<android.os.ServiceSpecificException: int errorCode>;

        if $i0 != 23 goto label6;

        $r7 = new android.security.keystore.recovery.LockScreenRequiredException;

        $r8 = virtualinvoke $r5.<android.os.ServiceSpecificException: java.lang.String getMessage()>();

        specialinvoke $r7.<android.security.keystore.recovery.LockScreenRequiredException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label6:
        $r6 = virtualinvoke r0.<android.security.keystore.recovery.RecoveryController: android.security.keystore.recovery.InternalRecoveryServiceException wrapUnexpectedServiceSpecificException(android.os.ServiceSpecificException)>($r5);

        throw $r6;

     label7:
        $r9 := @caughtexception;

        $r10 = new android.security.keystore.recovery.InternalRecoveryServiceException;

        specialinvoke $r10.<android.security.keystore.recovery.InternalRecoveryServiceException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to get key from keystore", $r9);

        throw $r10;

     label8:
        $r11 := @caughtexception;

        $r12 = virtualinvoke $r11.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r12;

        catch android.os.RemoteException from label1 to label2 with label8;
        catch android.security.keystore.KeyPermanentlyInvalidatedException from label1 to label2 with label7;
        catch java.security.UnrecoverableKeyException from label1 to label2 with label7;
        catch android.os.ServiceSpecificException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label8;
        catch android.security.keystore.KeyPermanentlyInvalidatedException from label3 to label4 with label7;
        catch java.security.UnrecoverableKeyException from label3 to label4 with label7;
        catch android.os.ServiceSpecificException from label3 to label4 with label5;
        catch android.os.RemoteException from label4 to label5 with label8;
        catch android.security.keystore.KeyPermanentlyInvalidatedException from label4 to label5 with label7;
        catch java.security.UnrecoverableKeyException from label4 to label5 with label7;
        catch android.os.ServiceSpecificException from label4 to label5 with label5;
    }

    public void initRecoveryService(java.lang.String, byte[], byte[]) throws java.security.cert.CertificateException, android.security.keystore.recovery.InternalRecoveryServiceException
    {
        android.security.keystore.recovery.RecoveryController r0;
        byte[] r1, r2;
        com.android.internal.widget.ILockSettings $r3;
        android.os.ServiceSpecificException $r4;
        int $i0, $i1, $i2;
        java.security.cert.CertificateException $r5, $r7;
        android.security.keystore.recovery.InternalRecoveryServiceException $r6;
        android.os.RemoteException $r8;
        java.lang.RuntimeException $r9;
        java.lang.String r10;

        r0 := @this: android.security.keystore.recovery.RecoveryController;

        r10 := @parameter0: java.lang.String;

        r1 := @parameter1: byte[];

        r2 := @parameter2: byte[];

     label1:
        $r3 = r0.<android.security.keystore.recovery.RecoveryController: com.android.internal.widget.ILockSettings mBinder>;

        interfaceinvoke $r3.<com.android.internal.widget.ILockSettings: void initRecoveryServiceWithSigFile(java.lang.String,byte[],byte[])>(r10, r1, r2);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $i0 = $r4.<android.os.ServiceSpecificException: int errorCode>;

        if $i0 == 25 goto label5;

        $i1 = $r4.<android.os.ServiceSpecificException: int errorCode>;

        if $i1 == 28 goto label5;

        $i2 = $r4.<android.os.ServiceSpecificException: int errorCode>;

        if $i2 != 29 goto label4;

        $r7 = new java.security.cert.CertificateException;

        specialinvoke $r7.<java.security.cert.CertificateException: void <init>(java.lang.String,java.lang.Throwable)>("Downgrading certificate serial version isn\'t supported.", $r4);

        throw $r7;

     label4:
        $r6 = virtualinvoke r0.<android.security.keystore.recovery.RecoveryController: android.security.keystore.recovery.InternalRecoveryServiceException wrapUnexpectedServiceSpecificException(android.os.ServiceSpecificException)>($r4);

        throw $r6;

     label5:
        $r5 = new java.security.cert.CertificateException;

        specialinvoke $r5.<java.security.cert.CertificateException: void <init>(java.lang.String,java.lang.Throwable)>("Invalid certificate for recovery service", $r4);

        throw $r5;

     label6:
        $r8 := @caughtexception;

        $r9 = virtualinvoke $r8.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r9;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.ServiceSpecificException from label1 to label2 with label3;
    }

    public void removeKey(java.lang.String) throws android.security.keystore.recovery.InternalRecoveryServiceException
    {
        android.security.keystore.recovery.RecoveryController r0;
        com.android.internal.widget.ILockSettings $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.os.ServiceSpecificException $r4;
        android.security.keystore.recovery.InternalRecoveryServiceException $r5;
        java.lang.String r6;

        r0 := @this: android.security.keystore.recovery.RecoveryController;

        r6 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<android.security.keystore.recovery.RecoveryController: com.android.internal.widget.ILockSettings mBinder>;

        interfaceinvoke $r1.<com.android.internal.widget.ILockSettings: void removeKey(java.lang.String)>(r6);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke r0.<android.security.keystore.recovery.RecoveryController: android.security.keystore.recovery.InternalRecoveryServiceException wrapUnexpectedServiceSpecificException(android.os.ServiceSpecificException)>($r4);

        throw $r5;

     label4:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch android.os.ServiceSpecificException from label1 to label2 with label3;
    }

    public void setRecoverySecretTypes(int[]) throws android.security.keystore.recovery.InternalRecoveryServiceException
    {
        android.security.keystore.recovery.RecoveryController r0;
        com.android.internal.widget.ILockSettings $r1;
        android.os.ServiceSpecificException $r2;
        android.security.keystore.recovery.InternalRecoveryServiceException $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        int[] r6;

        r0 := @this: android.security.keystore.recovery.RecoveryController;

        r6 := @parameter0: int[];

     label1:
        $r1 = r0.<android.security.keystore.recovery.RecoveryController: com.android.internal.widget.ILockSettings mBinder>;

        interfaceinvoke $r1.<com.android.internal.widget.ILockSettings: void setRecoverySecretTypes(int[])>(r6);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke r0.<android.security.keystore.recovery.RecoveryController: android.security.keystore.recovery.InternalRecoveryServiceException wrapUnexpectedServiceSpecificException(android.os.ServiceSpecificException)>($r2);

        throw $r3;

     label4:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch android.os.ServiceSpecificException from label1 to label2 with label3;
    }

    public void setRecoveryStatus(java.lang.String, int) throws android.security.keystore.recovery.InternalRecoveryServiceException
    {
        android.security.keystore.recovery.RecoveryController r0;
        int i0;
        com.android.internal.widget.ILockSettings $r1;
        android.os.ServiceSpecificException $r2;
        android.security.keystore.recovery.InternalRecoveryServiceException $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        java.lang.String r6;

        r0 := @this: android.security.keystore.recovery.RecoveryController;

        r6 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r1 = r0.<android.security.keystore.recovery.RecoveryController: com.android.internal.widget.ILockSettings mBinder>;

        interfaceinvoke $r1.<com.android.internal.widget.ILockSettings: void setRecoveryStatus(java.lang.String,int)>(r6, i0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke r0.<android.security.keystore.recovery.RecoveryController: android.security.keystore.recovery.InternalRecoveryServiceException wrapUnexpectedServiceSpecificException(android.os.ServiceSpecificException)>($r2);

        throw $r3;

     label4:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch android.os.ServiceSpecificException from label1 to label2 with label3;
    }

    public void setServerParams(byte[]) throws android.security.keystore.recovery.InternalRecoveryServiceException
    {
        android.security.keystore.recovery.RecoveryController r0;
        com.android.internal.widget.ILockSettings $r1;
        android.os.ServiceSpecificException $r2;
        android.security.keystore.recovery.InternalRecoveryServiceException $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        byte[] r6;

        r0 := @this: android.security.keystore.recovery.RecoveryController;

        r6 := @parameter0: byte[];

     label1:
        $r1 = r0.<android.security.keystore.recovery.RecoveryController: com.android.internal.widget.ILockSettings mBinder>;

        interfaceinvoke $r1.<com.android.internal.widget.ILockSettings: void setServerParams(byte[])>(r6);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke r0.<android.security.keystore.recovery.RecoveryController: android.security.keystore.recovery.InternalRecoveryServiceException wrapUnexpectedServiceSpecificException(android.os.ServiceSpecificException)>($r2);

        throw $r3;

     label4:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch android.os.ServiceSpecificException from label1 to label2 with label3;
    }

    public void setSnapshotCreatedPendingIntent(android.app.PendingIntent) throws android.security.keystore.recovery.InternalRecoveryServiceException
    {
        android.security.keystore.recovery.RecoveryController r0;
        com.android.internal.widget.ILockSettings $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.os.ServiceSpecificException $r4;
        android.security.keystore.recovery.InternalRecoveryServiceException $r5;
        android.app.PendingIntent r6;

        r0 := @this: android.security.keystore.recovery.RecoveryController;

        r6 := @parameter0: android.app.PendingIntent;

     label1:
        $r1 = r0.<android.security.keystore.recovery.RecoveryController: com.android.internal.widget.ILockSettings mBinder>;

        interfaceinvoke $r1.<com.android.internal.widget.ILockSettings: void setSnapshotCreatedPendingIntent(android.app.PendingIntent)>(r6);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke r0.<android.security.keystore.recovery.RecoveryController: android.security.keystore.recovery.InternalRecoveryServiceException wrapUnexpectedServiceSpecificException(android.os.ServiceSpecificException)>($r4);

        throw $r5;

     label4:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch android.os.ServiceSpecificException from label1 to label2 with label3;
    }

    android.security.keystore.recovery.InternalRecoveryServiceException wrapUnexpectedServiceSpecificException(android.os.ServiceSpecificException)
    {
        android.security.keystore.recovery.RecoveryController r0;
        android.os.ServiceSpecificException r1;
        int $i0, $i1;
        java.lang.StringBuilder $r3;
        android.security.keystore.recovery.InternalRecoveryServiceException $r6, $r8;
        java.lang.String $r7, $r9;

        r0 := @this: android.security.keystore.recovery.RecoveryController;

        r1 := @parameter0: android.os.ServiceSpecificException;

        $i0 = r1.<android.os.ServiceSpecificException: int errorCode>;

        if $i0 != 22 goto label1;

        $r8 = new android.security.keystore.recovery.InternalRecoveryServiceException;

        $r9 = virtualinvoke r1.<android.os.ServiceSpecificException: java.lang.String getMessage()>();

        specialinvoke $r8.<android.security.keystore.recovery.InternalRecoveryServiceException: void <init>(java.lang.String)>($r9);

        return $r8;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected error code for method: ");

        $i1 = r1.<android.os.ServiceSpecificException: int errorCode>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = new android.security.keystore.recovery.InternalRecoveryServiceException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<android.security.keystore.recovery.InternalRecoveryServiceException: void <init>(java.lang.String,java.lang.Throwable)>($r7, r1);

        return $r6;
    }

    public static void <clinit>()
    {
        <android.security.keystore.recovery.RecoveryController: java.lang.String TAG> = "RecoveryController";

        <android.security.keystore.recovery.RecoveryController: int RECOVERY_STATUS_SYNC_IN_PROGRESS> = 1;

        <android.security.keystore.recovery.RecoveryController: int RECOVERY_STATUS_SYNCED> = 0;

        <android.security.keystore.recovery.RecoveryController: int RECOVERY_STATUS_PERMANENT_FAILURE> = 3;

        <android.security.keystore.recovery.RecoveryController: int ERROR_SESSION_EXPIRED> = 24;

        <android.security.keystore.recovery.RecoveryController: int ERROR_SERVICE_INTERNAL_ERROR> = 22;

        <android.security.keystore.recovery.RecoveryController: int ERROR_NO_SNAPSHOT_PENDING> = 21;

        <android.security.keystore.recovery.RecoveryController: int ERROR_INVALID_KEY_FORMAT> = 27;

        <android.security.keystore.recovery.RecoveryController: int ERROR_INVALID_CERTIFICATE> = 28;

        <android.security.keystore.recovery.RecoveryController: int ERROR_INSECURE_USER> = 23;

        <android.security.keystore.recovery.RecoveryController: int ERROR_DOWNGRADE_CERTIFICATE> = 29;

        <android.security.keystore.recovery.RecoveryController: int ERROR_DECRYPTION_FAILED> = 26;

        <android.security.keystore.recovery.RecoveryController: int ERROR_BAD_CERTIFICATE_FORMAT> = 25;

        return;
    }
}
