public class android.security.keystore.recovery.X509CertificateParsingUtils extends java.lang.Object
{
    private static final java.lang.String CERT_FORMAT;

    public void <init>()
    {
        android.security.keystore.recovery.X509CertificateParsingUtils r0;

        r0 := @this: android.security.keystore.recovery.X509CertificateParsingUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static byte[] decodeBase64(java.lang.String)
    {
        java.lang.String r0;
        java.util.Base64$Decoder $r1;
        byte[] $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.util.Base64: java.util.Base64$Decoder getDecoder()>();

        $r2 = virtualinvoke $r1.<java.util.Base64$Decoder: byte[] decode(java.lang.String)>(r0);

        return $r2;
    }

    public static java.security.cert.X509Certificate decodeBase64Cert(java.lang.String) throws java.security.cert.CertificateException
    {
        byte[] $r0;
        java.lang.Throwable $r1;
        java.security.cert.CertificateException $r2;
        java.lang.String r3;
        java.security.cert.X509Certificate r4;

        r3 := @parameter0: java.lang.String;

     label1:
        $r0 = staticinvoke <android.security.keystore.recovery.X509CertificateParsingUtils: byte[] decodeBase64(java.lang.String)>(r3);

        r4 = staticinvoke <android.security.keystore.recovery.X509CertificateParsingUtils: java.security.cert.X509Certificate decodeCert(byte[])>($r0);

     label2:
        return r4;

     label3:
        $r1 := @caughtexception;

        $r2 = new java.security.cert.CertificateException;

        specialinvoke $r2.<java.security.cert.CertificateException: void <init>(java.lang.Throwable)>($r1);

        throw $r2;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    private static java.security.cert.X509Certificate decodeCert(java.io.InputStream) throws java.security.cert.CertificateException
    {
        java.security.cert.CertificateFactory r0;
        java.security.cert.Certificate $r1;
        java.security.cert.X509Certificate $r2;
        java.lang.Throwable $r3;
        java.lang.RuntimeException $r4;
        java.io.InputStream r5;

        r5 := @parameter0: java.io.InputStream;

     label1:
        r0 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");

     label2:
        $r1 = virtualinvoke r0.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>(r5);

        $r2 = (java.security.cert.X509Certificate) $r1;

        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch java.security.cert.CertificateException from label1 to label2 with label3;
    }

    private static java.security.cert.X509Certificate decodeCert(byte[]) throws java.security.cert.CertificateException
    {
        byte[] r0;
        java.io.ByteArrayInputStream $r1;
        java.security.cert.X509Certificate $r2;

        r0 := @parameter0: byte[];

        $r1 = new java.io.ByteArrayInputStream;

        specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[])>(r0);

        $r2 = staticinvoke <android.security.keystore.recovery.X509CertificateParsingUtils: java.security.cert.X509Certificate decodeCert(java.io.InputStream)>($r1);

        return $r2;
    }

    public static void <clinit>()
    {
        <android.security.keystore.recovery.X509CertificateParsingUtils: java.lang.String CERT_FORMAT> = "X.509";

        return;
    }
}
