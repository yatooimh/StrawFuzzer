class android.security.net.config.KeyStoreCertificateSource extends java.lang.Object implements android.security.net.config.CertificateSource
{
    private java.util.Set mCertificates;
    private com.android.org.conscrypt.TrustedCertificateIndex mIndex;
    private final java.security.KeyStore mKeyStore;
    private final java.lang.Object mLock;

    public void <init>(java.security.KeyStore)
    {
        android.security.net.config.KeyStoreCertificateSource r0;
        java.security.KeyStore r1;
        java.lang.Object $r2;

        r0 := @this: android.security.net.config.KeyStoreCertificateSource;

        r1 := @parameter0: java.security.KeyStore;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<android.security.net.config.KeyStoreCertificateSource: java.lang.Object mLock> = $r2;

        r0.<android.security.net.config.KeyStoreCertificateSource: java.security.KeyStore mKeyStore> = r1;

        return;
    }

    private void ensureInitialized()
    {
        android.security.net.config.KeyStoreCertificateSource r0;
        java.lang.Object r1, $r6;
        com.android.org.conscrypt.TrustedCertificateIndex r2;
        java.util.Set $r3;
        java.security.KeyStore $r4, $r5, $r7;
        int $i0;
        boolean $z0;
        java.security.cert.Certificate $r8;
        java.lang.Throwable $r10, $r11;
        android.util.ArraySet r12;
        java.util.Enumeration r13;
        java.lang.String r14;
        java.security.cert.X509Certificate r15;
        java.lang.RuntimeException r17;

        r0 := @this: android.security.net.config.KeyStoreCertificateSource;

        r1 = r0.<android.security.net.config.KeyStoreCertificateSource: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<android.security.net.config.KeyStoreCertificateSource: java.util.Set mCertificates>;

        if $r3 == null goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        r2 = new com.android.org.conscrypt.TrustedCertificateIndex;

        specialinvoke r2.<com.android.org.conscrypt.TrustedCertificateIndex: void <init>()>();

        r12 = new android.util.ArraySet;

        $r4 = r0.<android.security.net.config.KeyStoreCertificateSource: java.security.KeyStore mKeyStore>;

        $i0 = virtualinvoke $r4.<java.security.KeyStore: int size()>();

        specialinvoke r12.<android.util.ArraySet: void <init>(int)>($i0);

        $r5 = r0.<android.security.net.config.KeyStoreCertificateSource: java.security.KeyStore mKeyStore>;

        r13 = virtualinvoke $r5.<java.security.KeyStore: java.util.Enumeration aliases()>();

     label04:
        $z0 = interfaceinvoke r13.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label08;

        $r6 = interfaceinvoke r13.<java.util.Enumeration: java.lang.Object nextElement()>();

        r14 = (java.lang.String) $r6;

        $r7 = r0.<android.security.net.config.KeyStoreCertificateSource: java.security.KeyStore mKeyStore>;

        $r8 = virtualinvoke $r7.<java.security.KeyStore: java.security.cert.Certificate getCertificate(java.lang.String)>(r14);

        r15 = (java.security.cert.X509Certificate) $r8;

     label05:
        if r15 == null goto label07;

     label06:
        interfaceinvoke r12.<java.util.Set: boolean add(java.lang.Object)>(r15);

        virtualinvoke r2.<com.android.org.conscrypt.TrustedCertificateIndex: java.security.cert.TrustAnchor index(java.security.cert.X509Certificate)>(r15);

     label07:
        goto label04;

     label08:
        r0.<android.security.net.config.KeyStoreCertificateSource: com.android.org.conscrypt.TrustedCertificateIndex mIndex> = r2;

        r0.<android.security.net.config.KeyStoreCertificateSource: java.util.Set mCertificates> = r12;

     label09:
        exitmonitor r1;

     label10:
        return;

     label11:
        $r10 := @caughtexception;

     label12:
        r17 = new java.lang.RuntimeException;

        specialinvoke r17.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to load certificates from KeyStore", $r10);

        throw r17;

     label13:
        $r11 := @caughtexception;

     label14:
        exitmonitor r1;

     label15:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.security.KeyStoreException from label03 to label04 with label11;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.security.KeyStoreException from label04 to label05 with label11;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.security.KeyStoreException from label06 to label07 with label11;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.security.KeyStoreException from label08 to label09 with label11;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public java.util.Set findAllByIssuerAndSignature(java.security.cert.X509Certificate)
    {
        android.security.net.config.KeyStoreCertificateSource r0;
        com.android.org.conscrypt.TrustedCertificateIndex $r1;
        boolean $z0, $z1;
        android.util.ArraySet $r2;
        int $i0;
        java.lang.Object $r3;
        java.security.cert.TrustAnchor $r4;
        java.security.cert.X509Certificate $r5, r7;
        java.util.Set $r6, r8;
        java.util.Iterator r10;

        r0 := @this: android.security.net.config.KeyStoreCertificateSource;

        r7 := @parameter0: java.security.cert.X509Certificate;

        specialinvoke r0.<android.security.net.config.KeyStoreCertificateSource: void ensureInitialized()>();

        $r1 = r0.<android.security.net.config.KeyStoreCertificateSource: com.android.org.conscrypt.TrustedCertificateIndex mIndex>;

        r8 = virtualinvoke $r1.<com.android.org.conscrypt.TrustedCertificateIndex: java.util.Set findAllByIssuerAndSignature(java.security.cert.X509Certificate)>(r7);

        $z0 = interfaceinvoke r8.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r6 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        return $r6;

     label1:
        $r2 = new android.util.ArraySet;

        $i0 = interfaceinvoke r8.<java.util.Set: int size()>();

        specialinvoke $r2.<android.util.ArraySet: void <init>(int)>($i0);

        r10 = interfaceinvoke r8.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r3 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.security.cert.TrustAnchor) $r3;

        $r5 = virtualinvoke $r4.<java.security.cert.TrustAnchor: java.security.cert.X509Certificate getTrustedCert()>();

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r5);

        goto label2;

     label3:
        return $r2;
    }

    public java.security.cert.X509Certificate findByIssuerAndSignature(java.security.cert.X509Certificate)
    {
        android.security.net.config.KeyStoreCertificateSource r0;
        com.android.org.conscrypt.TrustedCertificateIndex $r1;
        java.security.cert.X509Certificate $r2, r3;
        java.security.cert.TrustAnchor r4;

        r0 := @this: android.security.net.config.KeyStoreCertificateSource;

        r3 := @parameter0: java.security.cert.X509Certificate;

        specialinvoke r0.<android.security.net.config.KeyStoreCertificateSource: void ensureInitialized()>();

        $r1 = r0.<android.security.net.config.KeyStoreCertificateSource: com.android.org.conscrypt.TrustedCertificateIndex mIndex>;

        r4 = virtualinvoke $r1.<com.android.org.conscrypt.TrustedCertificateIndex: java.security.cert.TrustAnchor findByIssuerAndSignature(java.security.cert.X509Certificate)>(r3);

        if r4 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r4.<java.security.cert.TrustAnchor: java.security.cert.X509Certificate getTrustedCert()>();

        return $r2;
    }

    public java.security.cert.X509Certificate findBySubjectAndPublicKey(java.security.cert.X509Certificate)
    {
        android.security.net.config.KeyStoreCertificateSource r0;
        com.android.org.conscrypt.TrustedCertificateIndex $r1;
        java.security.cert.X509Certificate $r2, r3;
        java.security.cert.TrustAnchor r4;

        r0 := @this: android.security.net.config.KeyStoreCertificateSource;

        r3 := @parameter0: java.security.cert.X509Certificate;

        specialinvoke r0.<android.security.net.config.KeyStoreCertificateSource: void ensureInitialized()>();

        $r1 = r0.<android.security.net.config.KeyStoreCertificateSource: com.android.org.conscrypt.TrustedCertificateIndex mIndex>;

        r4 = virtualinvoke $r1.<com.android.org.conscrypt.TrustedCertificateIndex: java.security.cert.TrustAnchor findBySubjectAndPublicKey(java.security.cert.X509Certificate)>(r3);

        if r4 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r4.<java.security.cert.TrustAnchor: java.security.cert.X509Certificate getTrustedCert()>();

        return $r2;
    }

    public java.util.Set getCertificates()
    {
        android.security.net.config.KeyStoreCertificateSource r0;
        java.util.Set $r1;

        r0 := @this: android.security.net.config.KeyStoreCertificateSource;

        specialinvoke r0.<android.security.net.config.KeyStoreCertificateSource: void ensureInitialized()>();

        $r1 = r0.<android.security.net.config.KeyStoreCertificateSource: java.util.Set mCertificates>;

        return $r1;
    }

    public void handleTrustStorageUpdate()
    {
        android.security.net.config.KeyStoreCertificateSource r0;

        r0 := @this: android.security.net.config.KeyStoreCertificateSource;

        return;
    }
}
