public final class android.security.net.config.NetworkSecurityConfigProvider extends java.security.Provider
{
    private static final java.lang.String LOG_TAG;
    private static final java.lang.String PREFIX;

    static void <clinit>()
    {
        java.lang.StringBuilder $r1;
        java.lang.Class $r2;
        java.lang.Package $r3;
        java.lang.String $r4, $r7;

        <android.security.net.config.NetworkSecurityConfigProvider: java.lang.String LOG_TAG> = "nsconfig";

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = class "Landroid/security/net/config/NetworkSecurityConfigProvider;";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.Package getPackage()>();

        $r4 = virtualinvoke $r3.<java.lang.Package: java.lang.String getName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r7 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        <android.security.net.config.NetworkSecurityConfigProvider: java.lang.String PREFIX> = $r7;

        return;
    }

    public void <init>()
    {
        android.security.net.config.NetworkSecurityConfigProvider r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r3, $r6;

        r0 := @this: android.security.net.config.NetworkSecurityConfigProvider;

        specialinvoke r0.<java.security.Provider: void <init>(java.lang.String,double,java.lang.String)>("AndroidNSSP", 1.0, "Android Network Security Policy Provider");

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = <android.security.net.config.NetworkSecurityConfigProvider: java.lang.String PREFIX>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RootTrustManagerFactorySpi");

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.security.net.config.NetworkSecurityConfigProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("TrustManagerFactory.PKIX", $r6);

        virtualinvoke r0.<android.security.net.config.NetworkSecurityConfigProvider: java.lang.Object put(java.lang.Object,java.lang.Object)>("Alg.Alias.TrustManagerFactory.X509", "PKIX");

        return;
    }

    public static void handleNewApplication(android.content.Context)
    {
        android.security.net.config.ApplicationConfig r1, $r3, r12;
        java.lang.String r2, $r9;
        android.security.net.config.ManifestConfigSource $r4;
        android.content.pm.ApplicationInfo $r5;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r6;
        java.lang.RuntimeException $r10;
        android.content.Context r11;

        r11 := @parameter0: android.content.Context;

        $r3 = new android.security.net.config.ApplicationConfig;

        $r4 = new android.security.net.config.ManifestConfigSource;

        specialinvoke $r4.<android.security.net.config.ManifestConfigSource: void <init>(android.content.Context)>(r11);

        specialinvoke $r3.<android.security.net.config.ApplicationConfig: void <init>(android.security.net.config.ConfigSource)>($r4);

        r1 = staticinvoke <android.security.net.config.ApplicationConfig: android.security.net.config.ApplicationConfig getDefaultInstance()>();

        $r5 = virtualinvoke r11.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        r2 = $r5.<android.content.pm.ApplicationInfo: java.lang.String processName>;

        r12 = $r3;

        if r1 == null goto label4;

        r12 = $r3;

        $z0 = virtualinvoke r1.<android.security.net.config.ApplicationConfig: boolean isCleartextTrafficPermitted()>();

        $z1 = virtualinvoke $r3.<android.security.net.config.ApplicationConfig: boolean isCleartextTrafficPermitted()>();

        if $z0 == $z1 goto label4;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": New config does not match the previously set config.");

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("nsconfig", $r9);

        $z2 = virtualinvoke r1.<android.security.net.config.ApplicationConfig: boolean hasPerDomainConfigs()>();

        if $z2 != 0 goto label3;

        $z3 = virtualinvoke $r3.<android.security.net.config.ApplicationConfig: boolean hasPerDomainConfigs()>();

        if $z3 != 0 goto label3;

        $z4 = virtualinvoke r1.<android.security.net.config.ApplicationConfig: boolean isCleartextTrafficPermitted()>();

        if $z4 == 0 goto label1;

        r12 = r1;

        goto label2;

     label1:
        r12 = $r3;

     label2:
        goto label4;

     label3:
        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>("Found multiple conflicting per-domain rules");

        throw $r10;

     label4:
        staticinvoke <android.security.net.config.ApplicationConfig: void setDefaultInstance(android.security.net.config.ApplicationConfig)>(r12);

        return;
    }

    public static void install(android.content.Context)
    {
        int i0;
        android.security.net.config.ApplicationConfig $r0;
        android.security.net.config.ManifestConfigSource $r1;
        android.security.net.config.NetworkSecurityConfigProvider $r2;
        java.lang.StringBuilder $r3;
        java.lang.RuntimeException $r6;
        java.lang.String $r7;
        android.security.net.config.ConfigNetworkSecurityPolicy $r8;
        android.content.Context r9;

        r9 := @parameter0: android.content.Context;

        $r0 = new android.security.net.config.ApplicationConfig;

        $r1 = new android.security.net.config.ManifestConfigSource;

        specialinvoke $r1.<android.security.net.config.ManifestConfigSource: void <init>(android.content.Context)>(r9);

        specialinvoke $r0.<android.security.net.config.ApplicationConfig: void <init>(android.security.net.config.ConfigSource)>($r1);

        staticinvoke <android.security.net.config.ApplicationConfig: void setDefaultInstance(android.security.net.config.ApplicationConfig)>($r0);

        $r2 = new android.security.net.config.NetworkSecurityConfigProvider;

        specialinvoke $r2.<android.security.net.config.NetworkSecurityConfigProvider: void <init>()>();

        i0 = staticinvoke <java.security.Security: int insertProviderAt(java.security.Provider,int)>($r2, 1);

        if i0 != 1 goto label1;

        $r8 = new android.security.net.config.ConfigNetworkSecurityPolicy;

        specialinvoke $r8.<android.security.net.config.ConfigNetworkSecurityPolicy: void <init>(android.security.net.config.ApplicationConfig)>($r0);

        staticinvoke <libcore.net.NetworkSecurityPolicy: void setInstance(libcore.net.NetworkSecurityPolicy)>($r8);

        return;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to install provider as highest priority provider. Provider was installed at position ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = new java.lang.RuntimeException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }
}
