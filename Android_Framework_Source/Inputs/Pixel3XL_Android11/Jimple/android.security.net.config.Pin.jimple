public final class android.security.net.config.Pin extends java.lang.Object
{
    public final byte[] digest;
    public final java.lang.String digestAlgorithm;
    private final int mHashCode;

    public void <init>(java.lang.String, byte[])
    {
        android.security.net.config.Pin r0;
        java.lang.String r1;
        byte[] r2;
        int $i0, $i1, $i2;

        r0 := @this: android.security.net.config.Pin;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.security.net.config.Pin: java.lang.String digestAlgorithm> = r1;

        r0.<android.security.net.config.Pin: byte[] digest> = r2;

        $i0 = staticinvoke <java.util.Arrays: int hashCode(byte[])>(r2);

        $i1 = virtualinvoke r1.<java.lang.String: int hashCode()>();

        $i2 = $i0 ^ $i1;

        r0.<android.security.net.config.Pin: int mHashCode> = $i2;

        return;
    }

    public static int getDigestLength(java.lang.String)
    {
        java.lang.String r0, $r2, $r7;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.IllegalArgumentException $r6;

        r0 := @parameter0: java.lang.String;

        $r2 = "SHA-256";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        return 32;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported digest algorithm: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    public static boolean isSupportedDigestAlgorithm(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = "SHA-256";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        return $z0;
    }

    public boolean equals(java.lang.Object)
    {
        android.security.net.config.Pin r0, r6;
        boolean $z0, $z1, $z2;
        int $i0, $i1;
        byte[] $r1, $r2;
        java.lang.String $r3, $r4;
        java.lang.Object r5;

        r0 := @this: android.security.net.config.Pin;

        r5 := @parameter0: java.lang.Object;

        if r0 != r5 goto label1;

        return 1;

     label1:
        $z0 = r5 instanceof android.security.net.config.Pin;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r6 = (android.security.net.config.Pin) r5;

        $i0 = virtualinvoke r6.<android.security.net.config.Pin: int hashCode()>();

        $i1 = r0.<android.security.net.config.Pin: int mHashCode>;

        if $i0 == $i1 goto label3;

        return 0;

     label3:
        $r2 = r0.<android.security.net.config.Pin: byte[] digest>;

        $r1 = r6.<android.security.net.config.Pin: byte[] digest>;

        $z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r2, $r1);

        if $z1 != 0 goto label4;

        return 0;

     label4:
        $r4 = r0.<android.security.net.config.Pin: java.lang.String digestAlgorithm>;

        $r3 = r6.<android.security.net.config.Pin: java.lang.String digestAlgorithm>;

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z2 != 0 goto label5;

        return 0;

     label5:
        return 1;
    }

    public int hashCode()
    {
        android.security.net.config.Pin r0;
        int $i0;

        r0 := @this: android.security.net.config.Pin;

        $i0 = r0.<android.security.net.config.Pin: int mHashCode>;

        return $i0;
    }
}
