public class android.security.net.config.RootTrustManager extends javax.net.ssl.X509ExtendedTrustManager
{
    private final android.security.net.config.ApplicationConfig mConfig;

    public void <init>(android.security.net.config.ApplicationConfig)
    {
        android.security.net.config.RootTrustManager r0;
        android.security.net.config.ApplicationConfig r1;
        java.lang.NullPointerException $r2;

        r0 := @this: android.security.net.config.RootTrustManager;

        r1 := @parameter0: android.security.net.config.ApplicationConfig;

        specialinvoke r0.<javax.net.ssl.X509ExtendedTrustManager: void <init>()>();

        if r1 == null goto label1;

        r0.<android.security.net.config.RootTrustManager: android.security.net.config.ApplicationConfig mConfig> = r1;

        return;

     label1:
        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("config must not be null");

        throw $r2;
    }

    public void checkClientTrusted(java.security.cert.X509Certificate[], java.lang.String) throws java.security.cert.CertificateException
    {
        android.security.net.config.RootTrustManager r0;
        java.security.cert.X509Certificate[] r1;
        java.lang.String r2;
        android.security.net.config.ApplicationConfig $r3;
        android.security.net.config.NetworkSecurityConfig $r4;
        android.security.net.config.NetworkSecurityTrustManager $r5;

        r0 := @this: android.security.net.config.RootTrustManager;

        r1 := @parameter0: java.security.cert.X509Certificate[];

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<android.security.net.config.RootTrustManager: android.security.net.config.ApplicationConfig mConfig>;

        $r4 = virtualinvoke $r3.<android.security.net.config.ApplicationConfig: android.security.net.config.NetworkSecurityConfig getConfigForHostname(java.lang.String)>("");

        $r5 = virtualinvoke $r4.<android.security.net.config.NetworkSecurityConfig: android.security.net.config.NetworkSecurityTrustManager getTrustManager()>();

        virtualinvoke $r5.<android.security.net.config.NetworkSecurityTrustManager: void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String)>(r1, r2);

        return;
    }

    public void checkClientTrusted(java.security.cert.X509Certificate[], java.lang.String, java.net.Socket) throws java.security.cert.CertificateException
    {
        android.security.net.config.RootTrustManager r0;
        java.security.cert.X509Certificate[] r1;
        java.lang.String r2;
        java.net.Socket r3;
        android.security.net.config.ApplicationConfig $r4;
        android.security.net.config.NetworkSecurityConfig $r5;
        android.security.net.config.NetworkSecurityTrustManager $r6;

        r0 := @this: android.security.net.config.RootTrustManager;

        r1 := @parameter0: java.security.cert.X509Certificate[];

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.net.Socket;

        $r4 = r0.<android.security.net.config.RootTrustManager: android.security.net.config.ApplicationConfig mConfig>;

        $r5 = virtualinvoke $r4.<android.security.net.config.ApplicationConfig: android.security.net.config.NetworkSecurityConfig getConfigForHostname(java.lang.String)>("");

        $r6 = virtualinvoke $r5.<android.security.net.config.NetworkSecurityConfig: android.security.net.config.NetworkSecurityTrustManager getTrustManager()>();

        virtualinvoke $r6.<android.security.net.config.NetworkSecurityTrustManager: void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String,java.net.Socket)>(r1, r2, r3);

        return;
    }

    public void checkClientTrusted(java.security.cert.X509Certificate[], java.lang.String, javax.net.ssl.SSLEngine) throws java.security.cert.CertificateException
    {
        android.security.net.config.RootTrustManager r0;
        java.security.cert.X509Certificate[] r1;
        java.lang.String r2;
        javax.net.ssl.SSLEngine r3;
        android.security.net.config.ApplicationConfig $r4;
        android.security.net.config.NetworkSecurityConfig $r5;
        android.security.net.config.NetworkSecurityTrustManager $r6;

        r0 := @this: android.security.net.config.RootTrustManager;

        r1 := @parameter0: java.security.cert.X509Certificate[];

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: javax.net.ssl.SSLEngine;

        $r4 = r0.<android.security.net.config.RootTrustManager: android.security.net.config.ApplicationConfig mConfig>;

        $r5 = virtualinvoke $r4.<android.security.net.config.ApplicationConfig: android.security.net.config.NetworkSecurityConfig getConfigForHostname(java.lang.String)>("");

        $r6 = virtualinvoke $r5.<android.security.net.config.NetworkSecurityConfig: android.security.net.config.NetworkSecurityTrustManager getTrustManager()>();

        virtualinvoke $r6.<android.security.net.config.NetworkSecurityTrustManager: void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String,javax.net.ssl.SSLEngine)>(r1, r2, r3);

        return;
    }

    public java.util.List checkServerTrusted(java.security.cert.X509Certificate[], java.lang.String, java.lang.String) throws java.security.cert.CertificateException
    {
        android.security.net.config.RootTrustManager r0;
        java.security.cert.X509Certificate[] r1;
        java.lang.String r2, r3;
        android.security.net.config.ApplicationConfig $r4, $r8;
        android.security.net.config.NetworkSecurityConfig $r5;
        android.security.net.config.NetworkSecurityTrustManager $r6;
        java.util.List $r7;
        boolean $z0;
        java.security.cert.CertificateException $r9;

        r0 := @this: android.security.net.config.RootTrustManager;

        r1 := @parameter0: java.security.cert.X509Certificate[];

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        if r3 != null goto label2;

        $r8 = r0.<android.security.net.config.RootTrustManager: android.security.net.config.ApplicationConfig mConfig>;

        $z0 = virtualinvoke $r8.<android.security.net.config.ApplicationConfig: boolean hasPerDomainConfigs()>();

        if $z0 != 0 goto label1;

        goto label2;

     label1:
        $r9 = new java.security.cert.CertificateException;

        specialinvoke $r9.<java.security.cert.CertificateException: void <init>(java.lang.String)>("Domain specific configurations require that the hostname be provided");

        throw $r9;

     label2:
        $r4 = r0.<android.security.net.config.RootTrustManager: android.security.net.config.ApplicationConfig mConfig>;

        $r5 = virtualinvoke $r4.<android.security.net.config.ApplicationConfig: android.security.net.config.NetworkSecurityConfig getConfigForHostname(java.lang.String)>(r3);

        $r6 = virtualinvoke $r5.<android.security.net.config.NetworkSecurityConfig: android.security.net.config.NetworkSecurityTrustManager getTrustManager()>();

        $r7 = virtualinvoke $r6.<android.security.net.config.NetworkSecurityTrustManager: java.util.List checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String,java.lang.String)>(r1, r2, r3);

        return $r7;
    }

    public void checkServerTrusted(java.security.cert.X509Certificate[], java.lang.String) throws java.security.cert.CertificateException
    {
        android.security.net.config.RootTrustManager r0;
        java.security.cert.X509Certificate[] r1;
        java.lang.String r2;
        android.security.net.config.ApplicationConfig $r3, $r5;
        boolean $z0;
        java.security.cert.CertificateException $r4;
        android.security.net.config.NetworkSecurityConfig $r6;
        android.security.net.config.NetworkSecurityTrustManager $r7;

        r0 := @this: android.security.net.config.RootTrustManager;

        r1 := @parameter0: java.security.cert.X509Certificate[];

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<android.security.net.config.RootTrustManager: android.security.net.config.ApplicationConfig mConfig>;

        $z0 = virtualinvoke $r3.<android.security.net.config.ApplicationConfig: boolean hasPerDomainConfigs()>();

        if $z0 != 0 goto label1;

        $r5 = r0.<android.security.net.config.RootTrustManager: android.security.net.config.ApplicationConfig mConfig>;

        $r6 = virtualinvoke $r5.<android.security.net.config.ApplicationConfig: android.security.net.config.NetworkSecurityConfig getConfigForHostname(java.lang.String)>("");

        $r7 = virtualinvoke $r6.<android.security.net.config.NetworkSecurityConfig: android.security.net.config.NetworkSecurityTrustManager getTrustManager()>();

        virtualinvoke $r7.<android.security.net.config.NetworkSecurityTrustManager: void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)>(r1, r2);

        return;

     label1:
        $r4 = new java.security.cert.CertificateException;

        specialinvoke $r4.<java.security.cert.CertificateException: void <init>(java.lang.String)>("Domain specific configurations require that hostname aware checkServerTrusted(X509Certificate[], String, String) is used");

        throw $r4;
    }

    public void checkServerTrusted(java.security.cert.X509Certificate[], java.lang.String, java.net.Socket) throws java.security.cert.CertificateException
    {
        android.security.net.config.RootTrustManager r0;
        java.security.cert.X509Certificate[] r1;
        java.lang.String r2, r10;
        java.net.Socket r3;
        boolean $z0;
        javax.net.ssl.SSLSocket $r4;
        java.security.cert.CertificateException $r5;
        android.security.net.config.ApplicationConfig $r6;
        android.security.net.config.NetworkSecurityConfig $r7;
        android.security.net.config.NetworkSecurityTrustManager $r8;
        javax.net.ssl.SSLSession r9;

        r0 := @this: android.security.net.config.RootTrustManager;

        r1 := @parameter0: java.security.cert.X509Certificate[];

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.net.Socket;

        $z0 = r3 instanceof javax.net.ssl.SSLSocket;

        if $z0 == 0 goto label2;

        $r4 = (javax.net.ssl.SSLSocket) r3;

        r9 = virtualinvoke $r4.<javax.net.ssl.SSLSocket: javax.net.ssl.SSLSession getHandshakeSession()>();

        if r9 == null goto label1;

        r10 = interfaceinvoke r9.<javax.net.ssl.SSLSession: java.lang.String getPeerHost()>();

        $r6 = r0.<android.security.net.config.RootTrustManager: android.security.net.config.ApplicationConfig mConfig>;

        $r7 = virtualinvoke $r6.<android.security.net.config.ApplicationConfig: android.security.net.config.NetworkSecurityConfig getConfigForHostname(java.lang.String)>(r10);

        $r8 = virtualinvoke $r7.<android.security.net.config.NetworkSecurityConfig: android.security.net.config.NetworkSecurityTrustManager getTrustManager()>();

        virtualinvoke $r8.<android.security.net.config.NetworkSecurityTrustManager: void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String,java.net.Socket)>(r1, r2, r3);

        goto label3;

     label1:
        $r5 = new java.security.cert.CertificateException;

        specialinvoke $r5.<java.security.cert.CertificateException: void <init>(java.lang.String)>("Not in handshake; no session available");

        throw $r5;

     label2:
        virtualinvoke r0.<android.security.net.config.RootTrustManager: void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)>(r1, r2);

     label3:
        return;
    }

    public void checkServerTrusted(java.security.cert.X509Certificate[], java.lang.String, javax.net.ssl.SSLEngine) throws java.security.cert.CertificateException
    {
        android.security.net.config.RootTrustManager r0;
        java.security.cert.X509Certificate[] r1;
        java.lang.String r2, r9;
        javax.net.ssl.SSLEngine r3;
        java.security.cert.CertificateException $r4;
        android.security.net.config.ApplicationConfig $r5;
        android.security.net.config.NetworkSecurityConfig $r6;
        android.security.net.config.NetworkSecurityTrustManager $r7;
        javax.net.ssl.SSLSession r8;

        r0 := @this: android.security.net.config.RootTrustManager;

        r1 := @parameter0: java.security.cert.X509Certificate[];

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: javax.net.ssl.SSLEngine;

        r8 = virtualinvoke r3.<javax.net.ssl.SSLEngine: javax.net.ssl.SSLSession getHandshakeSession()>();

        if r8 == null goto label1;

        r9 = interfaceinvoke r8.<javax.net.ssl.SSLSession: java.lang.String getPeerHost()>();

        $r5 = r0.<android.security.net.config.RootTrustManager: android.security.net.config.ApplicationConfig mConfig>;

        $r6 = virtualinvoke $r5.<android.security.net.config.ApplicationConfig: android.security.net.config.NetworkSecurityConfig getConfigForHostname(java.lang.String)>(r9);

        $r7 = virtualinvoke $r6.<android.security.net.config.NetworkSecurityConfig: android.security.net.config.NetworkSecurityTrustManager getTrustManager()>();

        virtualinvoke $r7.<android.security.net.config.NetworkSecurityTrustManager: void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String,javax.net.ssl.SSLEngine)>(r1, r2, r3);

        return;

     label1:
        $r4 = new java.security.cert.CertificateException;

        specialinvoke $r4.<java.security.cert.CertificateException: void <init>(java.lang.String)>("Not in handshake; no session available");

        throw $r4;
    }

    public java.security.cert.X509Certificate[] getAcceptedIssuers()
    {
        android.security.net.config.RootTrustManager r0;
        android.security.net.config.ApplicationConfig $r1;
        android.security.net.config.NetworkSecurityConfig $r2;
        android.security.net.config.NetworkSecurityTrustManager $r3;
        java.security.cert.X509Certificate[] $r4;

        r0 := @this: android.security.net.config.RootTrustManager;

        $r1 = r0.<android.security.net.config.RootTrustManager: android.security.net.config.ApplicationConfig mConfig>;

        $r2 = virtualinvoke $r1.<android.security.net.config.ApplicationConfig: android.security.net.config.NetworkSecurityConfig getConfigForHostname(java.lang.String)>("");

        $r3 = virtualinvoke $r2.<android.security.net.config.NetworkSecurityConfig: android.security.net.config.NetworkSecurityTrustManager getTrustManager()>();

        $r4 = virtualinvoke $r3.<android.security.net.config.NetworkSecurityTrustManager: java.security.cert.X509Certificate[] getAcceptedIssuers()>();

        return $r4;
    }

    public boolean isSameTrustConfiguration(java.lang.String, java.lang.String)
    {
        android.security.net.config.RootTrustManager r0;
        java.lang.String r1, r2;
        android.security.net.config.ApplicationConfig $r3, $r5;
        android.security.net.config.NetworkSecurityConfig $r4, $r6;
        boolean $z0;

        r0 := @this: android.security.net.config.RootTrustManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<android.security.net.config.RootTrustManager: android.security.net.config.ApplicationConfig mConfig>;

        $r4 = virtualinvoke $r3.<android.security.net.config.ApplicationConfig: android.security.net.config.NetworkSecurityConfig getConfigForHostname(java.lang.String)>(r1);

        $r5 = r0.<android.security.net.config.RootTrustManager: android.security.net.config.ApplicationConfig mConfig>;

        $r6 = virtualinvoke $r5.<android.security.net.config.ApplicationConfig: android.security.net.config.NetworkSecurityConfig getConfigForHostname(java.lang.String)>(r2);

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        return $z0;
    }
}
