public final class android.security.net.config.SystemCertificateSource extends android.security.net.config.DirectoryCertificateSource
{
    private final java.io.File mUserRemovedCaDir;

    private void <init>()
    {
        android.security.net.config.SystemCertificateSource r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r3, $r7;
        java.io.File $r6, $r8, $r9;
        int $i0;

        r0 := @this: android.security.net.config.SystemCertificateSource;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>("ANDROID_ROOT");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/etc/security/cacerts");

        $r6 = new java.io.File;

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>($r7);

        specialinvoke r0.<android.security.net.config.DirectoryCertificateSource: void <init>(java.io.File)>($r6);

        $r8 = new java.io.File;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        $r9 = staticinvoke <android.os.Environment: java.io.File getUserConfigDirectory(int)>($i0);

        specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, "cacerts-removed");

        r0.<android.security.net.config.SystemCertificateSource: java.io.File mUserRemovedCaDir> = $r8;

        return;
    }

    void <init>(android.security.net.config.SystemCertificateSource$1)
    {
        android.security.net.config.SystemCertificateSource r0;
        android.security.net.config.SystemCertificateSource$1 r1;

        r0 := @this: android.security.net.config.SystemCertificateSource;

        r1 := @parameter0: android.security.net.config.SystemCertificateSource$1;

        specialinvoke r0.<android.security.net.config.SystemCertificateSource: void <init>()>();

        return;
    }

    public static android.security.net.config.SystemCertificateSource getInstance()
    {
        android.security.net.config.SystemCertificateSource $r0;

        $r0 = staticinvoke <android.security.net.config.SystemCertificateSource$NoPreloadHolder: android.security.net.config.SystemCertificateSource access$100()>();

        return $r0;
    }

    public volatile java.util.Set findAllByIssuerAndSignature(java.security.cert.X509Certificate)
    {
        android.security.net.config.SystemCertificateSource r0;
        java.security.cert.X509Certificate r1;
        java.util.Set $r2;

        r0 := @this: android.security.net.config.SystemCertificateSource;

        r1 := @parameter0: java.security.cert.X509Certificate;

        $r2 = specialinvoke r0.<android.security.net.config.DirectoryCertificateSource: java.util.Set findAllByIssuerAndSignature(java.security.cert.X509Certificate)>(r1);

        return $r2;
    }

    public volatile java.security.cert.X509Certificate findByIssuerAndSignature(java.security.cert.X509Certificate)
    {
        android.security.net.config.SystemCertificateSource r0;
        java.security.cert.X509Certificate r1, $r2;

        r0 := @this: android.security.net.config.SystemCertificateSource;

        r1 := @parameter0: java.security.cert.X509Certificate;

        $r2 = specialinvoke r0.<android.security.net.config.DirectoryCertificateSource: java.security.cert.X509Certificate findByIssuerAndSignature(java.security.cert.X509Certificate)>(r1);

        return $r2;
    }

    public volatile java.security.cert.X509Certificate findBySubjectAndPublicKey(java.security.cert.X509Certificate)
    {
        android.security.net.config.SystemCertificateSource r0;
        java.security.cert.X509Certificate r1, $r2;

        r0 := @this: android.security.net.config.SystemCertificateSource;

        r1 := @parameter0: java.security.cert.X509Certificate;

        $r2 = specialinvoke r0.<android.security.net.config.DirectoryCertificateSource: java.security.cert.X509Certificate findBySubjectAndPublicKey(java.security.cert.X509Certificate)>(r1);

        return $r2;
    }

    public volatile java.util.Set getCertificates()
    {
        android.security.net.config.SystemCertificateSource r0;
        java.util.Set $r1;

        r0 := @this: android.security.net.config.SystemCertificateSource;

        $r1 = specialinvoke r0.<android.security.net.config.DirectoryCertificateSource: java.util.Set getCertificates()>();

        return $r1;
    }

    public volatile void handleTrustStorageUpdate()
    {
        android.security.net.config.SystemCertificateSource r0;

        r0 := @this: android.security.net.config.SystemCertificateSource;

        specialinvoke r0.<android.security.net.config.DirectoryCertificateSource: void handleTrustStorageUpdate()>();

        return;
    }

    protected boolean isCertMarkedAsRemoved(java.lang.String)
    {
        android.security.net.config.SystemCertificateSource r0;
        java.lang.String r1;
        java.io.File $r2, $r3;
        boolean $z0;

        r0 := @this: android.security.net.config.SystemCertificateSource;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.io.File;

        $r3 = r0.<android.security.net.config.SystemCertificateSource: java.io.File mUserRemovedCaDir>;

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, r1);

        $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        return $z0;
    }
}
