public class android.security.net.config.XmlConfigSource extends java.lang.Object implements android.security.net.config.ConfigSource
{
    private static final int CONFIG_BASE;
    private static final int CONFIG_DEBUG;
    private static final int CONFIG_DOMAIN;
    private final android.content.pm.ApplicationInfo mApplicationInfo;
    private android.content.Context mContext;
    private final boolean mDebugBuild;
    private android.security.net.config.NetworkSecurityConfig mDefaultConfig;
    private java.util.Set mDomainMap;
    private boolean mInitialized;
    private final java.lang.Object mLock;
    private final int mResourceId;

    public void <init>(android.content.Context, int, android.content.pm.ApplicationInfo)
    {
        android.security.net.config.XmlConfigSource r0;
        int i0, $i1, $i2;
        android.content.pm.ApplicationInfo r1, $r3;
        java.lang.Object $r2;
        android.content.Context r4;
        boolean z0;

        r0 := @this: android.security.net.config.XmlConfigSource;

        r4 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        r1 := @parameter2: android.content.pm.ApplicationInfo;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<android.security.net.config.XmlConfigSource: java.lang.Object mLock> = $r2;

        r0.<android.security.net.config.XmlConfigSource: android.content.Context mContext> = r4;

        r0.<android.security.net.config.XmlConfigSource: int mResourceId> = i0;

        $r3 = new android.content.pm.ApplicationInfo;

        specialinvoke $r3.<android.content.pm.ApplicationInfo: void <init>(android.content.pm.ApplicationInfo)>(r1);

        r0.<android.security.net.config.XmlConfigSource: android.content.pm.ApplicationInfo mApplicationInfo> = $r3;

        $i1 = $r3.<android.content.pm.ApplicationInfo: int flags>;

        $i2 = $i1 & 2;

        if $i2 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        r0.<android.security.net.config.XmlConfigSource: boolean mDebugBuild> = z0;

        return;
    }

    private void addDebugAnchorsIfNeeded(android.security.net.config.NetworkSecurityConfig$Builder, android.security.net.config.NetworkSecurityConfig$Builder)
    {
        android.security.net.config.XmlConfigSource r0;
        android.security.net.config.NetworkSecurityConfig$Builder r1, r2;
        boolean $z0, $z1;
        java.util.List $r3;

        r0 := @this: android.security.net.config.XmlConfigSource;

        r1 := @parameter0: android.security.net.config.NetworkSecurityConfig$Builder;

        r2 := @parameter1: android.security.net.config.NetworkSecurityConfig$Builder;

        if r1 == null goto label3;

        $z0 = virtualinvoke r1.<android.security.net.config.NetworkSecurityConfig$Builder: boolean hasCertificatesEntryRefs()>();

        if $z0 != 0 goto label1;

        goto label3;

     label1:
        $z1 = virtualinvoke r2.<android.security.net.config.NetworkSecurityConfig$Builder: boolean hasCertificatesEntryRefs()>();

        if $z1 != 0 goto label2;

        return;

     label2:
        $r3 = virtualinvoke r1.<android.security.net.config.NetworkSecurityConfig$Builder: java.util.List getCertificatesEntryRefs()>();

        virtualinvoke r2.<android.security.net.config.NetworkSecurityConfig$Builder: android.security.net.config.NetworkSecurityConfig$Builder addCertificatesEntryRefs(java.util.Collection)>($r3);

        return;

     label3:
        return;
    }

    private void ensureInitialized()
    {
        android.security.net.config.XmlConfigSource r0;
        java.lang.Object r1;
        java.lang.RuntimeException r2;
        boolean $z0;
        android.content.Context $r3, $r8;
        android.content.res.Resources $r4, $r9;
        int $i0, $i1;
        java.lang.Throwable $r5, $r6, $r13, $r14;
        java.lang.String $r10, $r12;
        android.content.res.XmlResourceParser r15;
        java.lang.StringBuilder r19;

        r0 := @this: android.security.net.config.XmlConfigSource;

        r1 = r0.<android.security.net.config.XmlConfigSource: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $z0 = r0.<android.security.net.config.XmlConfigSource: boolean mInitialized>;

        if $z0 == 0 goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        $r3 = r0.<android.security.net.config.XmlConfigSource: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.res.Resources getResources()>();

        $i0 = r0.<android.security.net.config.XmlConfigSource: int mResourceId>;

        r15 = virtualinvoke $r4.<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)>($i0);

     label04:
        specialinvoke r0.<android.security.net.config.XmlConfigSource: void parseNetworkSecurityConfig(android.content.res.XmlResourceParser)>(r15);

        r0.<android.security.net.config.XmlConfigSource: android.content.Context mContext> = null;

        r0.<android.security.net.config.XmlConfigSource: boolean mInitialized> = 1;

     label05:
        if r15 == null goto label07;

     label06:
        interfaceinvoke r15.<android.content.res.XmlResourceParser: void close()>();

     label07:
        exitmonitor r1;

     label08:
        return;

     label09:
        $r13 := @caughtexception;

        if r15 == null goto label14;

     label10:
        interfaceinvoke r15.<android.content.res.XmlResourceParser: void close()>();

     label11:
        goto label14;

     label12:
        $r5 := @caughtexception;

     label13:
        virtualinvoke $r13.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r5);

     label14:
        throw $r13;

     label15:
        $r6 := @caughtexception;

     label16:
        r2 = new java.lang.RuntimeException;

        r19 = new java.lang.StringBuilder;

        specialinvoke r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to parse XML configuration from ");

        $r8 = r0.<android.security.net.config.XmlConfigSource: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: android.content.res.Resources getResources()>();

        $i1 = r0.<android.security.net.config.XmlConfigSource: int mResourceId>;

        $r10 = virtualinvoke $r9.<android.content.res.Resources: java.lang.String getResourceEntryName(int)>($i1);

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r2.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r6);

        throw r2;

     label17:
        $r14 := @caughtexception;

     label18:
        exitmonitor r1;

     label19:
        throw $r14;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch android.content.res.Resources$NotFoundException from label03 to label04 with label15;
        catch org.xmlpull.v1.XmlPullParserException from label03 to label04 with label15;
        catch java.io.IOException from label03 to label04 with label15;
        catch android.security.net.config.XmlConfigSource$ParserException from label03 to label04 with label15;
        catch java.lang.Throwable from label03 to label04 with label17;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch android.content.res.Resources$NotFoundException from label06 to label07 with label15;
        catch org.xmlpull.v1.XmlPullParserException from label06 to label07 with label15;
        catch java.io.IOException from label06 to label07 with label15;
        catch android.security.net.config.XmlConfigSource$ParserException from label06 to label07 with label15;
        catch java.lang.Throwable from label06 to label07 with label17;
        catch java.lang.Throwable from label07 to label08 with label17;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch android.content.res.Resources$NotFoundException from label13 to label14 with label15;
        catch org.xmlpull.v1.XmlPullParserException from label13 to label14 with label15;
        catch java.io.IOException from label13 to label14 with label15;
        catch android.security.net.config.XmlConfigSource$ParserException from label13 to label14 with label15;
        catch java.lang.Throwable from label13 to label14 with label17;
        catch android.content.res.Resources$NotFoundException from label14 to label15 with label15;
        catch org.xmlpull.v1.XmlPullParserException from label14 to label15 with label15;
        catch java.io.IOException from label14 to label15 with label15;
        catch android.security.net.config.XmlConfigSource$ParserException from label14 to label15 with label15;
        catch java.lang.Throwable from label14 to label15 with label17;
        catch java.lang.Throwable from label16 to label17 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    private static final java.lang.String getConfigString(int)
    {
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5;

        i0 := @parameter0: int;

        if i0 == 0 goto label3;

        if i0 == 1 goto label2;

        if i0 != 2 goto label1;

        return "debug-overrides";

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown config type: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label2:
        return "domain-config";

     label3:
        return "base-config";
    }

    private android.security.net.config.CertificatesEntryRef parseCertificatesEntry(android.content.res.XmlResourceParser, boolean) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException, android.security.net.config.XmlConfigSource$ParserException
    {
        android.security.net.config.XmlConfigSource r0;
        android.content.res.XmlResourceParser r1;
        int i0;
        android.security.net.config.XmlConfigSource$ParserException $r2, $r6;
        java.lang.String $r3, $r4, $r5, r9;
        boolean $z0, $z1, $z2, z3, z4;
        android.security.net.config.ResourceCertificateSource $r7;
        android.content.Context $r8;
        android.security.net.config.CertificateSource r10;
        android.security.net.config.CertificatesEntryRef $r11;

        r0 := @this: android.security.net.config.XmlConfigSource;

        r1 := @parameter0: android.content.res.XmlResourceParser;

        z3 := @parameter1: boolean;

        z4 = interfaceinvoke r1.<android.content.res.XmlResourceParser: boolean getAttributeBooleanValue(java.lang.String,java.lang.String,boolean)>(null, "overridePins", z3);

        i0 = interfaceinvoke r1.<android.content.res.XmlResourceParser: int getAttributeResourceValue(java.lang.String,java.lang.String,int)>(null, "src", -1);

        r9 = interfaceinvoke r1.<android.content.res.XmlResourceParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "src");

        if r9 == null goto label6;

        if i0 == -1 goto label1;

        $r7 = new android.security.net.config.ResourceCertificateSource;

        $r8 = r0.<android.security.net.config.XmlConfigSource: android.content.Context mContext>;

        specialinvoke $r7.<android.security.net.config.ResourceCertificateSource: void <init>(int,android.content.Context)>(i0, $r8);

        r10 = $r7;

        goto label4;

     label1:
        $r3 = "system";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r9);

        if $z0 == 0 goto label2;

        r10 = staticinvoke <android.security.net.config.SystemCertificateSource: android.security.net.config.SystemCertificateSource getInstance()>();

        goto label4;

     label2:
        $r4 = "user";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r9);

        if $z1 == 0 goto label3;

        r10 = staticinvoke <android.security.net.config.UserCertificateSource: android.security.net.config.UserCertificateSource getInstance()>();

        goto label4;

     label3:
        $r5 = "wfa";

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r9);

        if $z2 == 0 goto label5;

        r10 = staticinvoke <android.security.net.config.WfaCertificateSource: android.security.net.config.WfaCertificateSource getInstance()>();

     label4:
        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r1);

        $r11 = new android.security.net.config.CertificatesEntryRef;

        specialinvoke $r11.<android.security.net.config.CertificatesEntryRef: void <init>(android.security.net.config.CertificateSource,boolean)>(r10, z4);

        return $r11;

     label5:
        $r6 = new android.security.net.config.XmlConfigSource$ParserException;

        specialinvoke $r6.<android.security.net.config.XmlConfigSource$ParserException: void <init>(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "Unknown certificates src. Should be one of system|user|@resourceVal");

        throw $r6;

     label6:
        $r2 = new android.security.net.config.XmlConfigSource$ParserException;

        specialinvoke $r2.<android.security.net.config.XmlConfigSource$ParserException: void <init>(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "certificates element missing src attribute");

        throw $r2;
    }

    private java.util.List parseConfigEntry(android.content.res.XmlResourceParser, java.util.Set, android.security.net.config.NetworkSecurityConfig$Builder, int) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException, android.security.net.config.XmlConfigSource$ParserException
    {
        android.security.net.config.XmlConfigSource r0;
        android.content.res.XmlResourceParser r1;
        int i0, i1, i2, $i3;
        java.lang.String r5, $r13, $r14, $r15, $r16, $r19, $r22, $r26, $r29, $r38, $r41, $r43, $r44, r49;
        java.util.ArrayList $r6;
        android.security.net.config.NetworkSecurityConfig$Builder $r7, r48;
        android.util.ArraySet $r9;
        android.util.Pair $r11;
        boolean $z3, $z4, $z5, $z6, $z7, $z8, $z11, $z12, $z13, $z14, z15, z16, z17;
        android.security.net.config.XmlConfigSource$ParserException $r12, $r21, $r28, $r30, $r33, $r40;
        java.lang.StringBuilder $r17, $r24, $r36;
        java.util.List $r23;
        android.security.net.config.PinSet $r31;
        java.util.Collection $r34;
        android.security.net.config.Domain $r42;
        java.util.Set r47;

        r0 := @this: android.security.net.config.XmlConfigSource;

        r1 := @parameter0: android.content.res.XmlResourceParser;

        r47 := @parameter1: java.util.Set;

        r48 := @parameter2: android.security.net.config.NetworkSecurityConfig$Builder;

        i0 := @parameter3: int;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r7 = new android.security.net.config.NetworkSecurityConfig$Builder;

        specialinvoke $r7.<android.security.net.config.NetworkSecurityConfig$Builder: void <init>()>();

        virtualinvoke $r7.<android.security.net.config.NetworkSecurityConfig$Builder: android.security.net.config.NetworkSecurityConfig$Builder setParent(android.security.net.config.NetworkSecurityConfig$Builder)>(r48);

        $r9 = new android.util.ArraySet;

        specialinvoke $r9.<android.util.ArraySet: void <init>()>();

        if i0 != 2 goto label01;

        z15 = 1;

        goto label02;

     label01:
        z15 = 0;

     label02:
        interfaceinvoke r1.<android.content.res.XmlResourceParser: java.lang.String getName()>();

        i1 = interfaceinvoke r1.<android.content.res.XmlResourceParser: int getDepth()>();

        $r11 = new android.util.Pair;

        specialinvoke $r11.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r7, $r9);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r11);

        i2 = 0;

     label03:
        z16 = 0;

        z17 = 0;

        $i3 = interfaceinvoke r1.<android.content.res.XmlResourceParser: int getAttributeCount()>();

        if i2 >= $i3 goto label06;

        r49 = interfaceinvoke r1.<android.content.res.XmlResourceParser: java.lang.String getAttributeName(int)>(i2);

        $r43 = "hstsEnforced";

        $z11 = virtualinvoke $r43.<java.lang.String: boolean equals(java.lang.Object)>(r49);

        if $z11 == 0 goto label04;

        $z14 = interfaceinvoke r1.<android.content.res.XmlResourceParser: boolean getAttributeBooleanValue(int,boolean)>(i2, 0);

        virtualinvoke $r7.<android.security.net.config.NetworkSecurityConfig$Builder: android.security.net.config.NetworkSecurityConfig$Builder setHstsEnforced(boolean)>($z14);

        goto label05;

     label04:
        $r44 = "cleartextTrafficPermitted";

        $z12 = virtualinvoke $r44.<java.lang.String: boolean equals(java.lang.Object)>(r49);

        if $z12 == 0 goto label05;

        $z13 = interfaceinvoke r1.<android.content.res.XmlResourceParser: boolean getAttributeBooleanValue(int,boolean)>(i2, 1);

        virtualinvoke $r7.<android.security.net.config.NetworkSecurityConfig$Builder: android.security.net.config.NetworkSecurityConfig$Builder setCleartextTrafficPermitted(boolean)>($z13);

     label05:
        i2 = i2 + 1;

        goto label03;

     label06:
        $z3 = staticinvoke <com.android.internal.util.XmlUtils: boolean nextElementWithin(org.xmlpull.v1.XmlPullParser,int)>(r1, i1);

        if $z3 == 0 goto label17;

        r5 = interfaceinvoke r1.<android.content.res.XmlResourceParser: java.lang.String getName()>();

        $r13 = "domain";

        $z5 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z5 == 0 goto label08;

        if i0 != 1 goto label07;

        $r42 = specialinvoke r0.<android.security.net.config.XmlConfigSource: android.security.net.config.Domain parseDomain(android.content.res.XmlResourceParser,java.util.Set)>(r1, r47);

        interfaceinvoke $r9.<java.util.Set: boolean add(java.lang.Object)>($r42);

        goto label16;

     label07:
        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("domain element not allowed in ");

        $r38 = staticinvoke <android.security.net.config.XmlConfigSource: java.lang.String getConfigString(int)>(i0);

        virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r40 = new android.security.net.config.XmlConfigSource$ParserException;

        $r41 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r40.<android.security.net.config.XmlConfigSource$ParserException: void <init>(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, $r41);

        throw $r40;

     label08:
        $r14 = "trust-anchors";

        $z6 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z6 == 0 goto label10;

        if z17 != 0 goto label09;

        $r34 = specialinvoke r0.<android.security.net.config.XmlConfigSource: java.util.Collection parseTrustAnchors(android.content.res.XmlResourceParser,boolean)>(r1, z15);

        virtualinvoke $r7.<android.security.net.config.NetworkSecurityConfig$Builder: android.security.net.config.NetworkSecurityConfig$Builder addCertificatesEntryRefs(java.util.Collection)>($r34);

        z17 = 1;

        goto label16;

     label09:
        $r33 = new android.security.net.config.XmlConfigSource$ParserException;

        specialinvoke $r33.<android.security.net.config.XmlConfigSource$ParserException: void <init>(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "Multiple trust-anchor elements not allowed");

        throw $r33;

     label10:
        $r15 = "pin-set";

        $z7 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z7 == 0 goto label13;

        if i0 != 1 goto label12;

        if z16 != 0 goto label11;

        $r31 = specialinvoke r0.<android.security.net.config.XmlConfigSource: android.security.net.config.PinSet parsePinSet(android.content.res.XmlResourceParser)>(r1);

        virtualinvoke $r7.<android.security.net.config.NetworkSecurityConfig$Builder: android.security.net.config.NetworkSecurityConfig$Builder setPinSet(android.security.net.config.PinSet)>($r31);

        z16 = 1;

        goto label16;

     label11:
        $r30 = new android.security.net.config.XmlConfigSource$ParserException;

        specialinvoke $r30.<android.security.net.config.XmlConfigSource$ParserException: void <init>(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "Multiple pin-set elements not allowed");

        throw $r30;

     label12:
        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pin-set element not allowed in ");

        $r26 = staticinvoke <android.security.net.config.XmlConfigSource: java.lang.String getConfigString(int)>(i0);

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = new android.security.net.config.XmlConfigSource$ParserException;

        $r29 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<android.security.net.config.XmlConfigSource$ParserException: void <init>(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, $r29);

        throw $r28;

     label13:
        $r16 = "domain-config";

        $z8 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z8 == 0 goto label15;

        if i0 != 1 goto label14;

        $r23 = specialinvoke r0.<android.security.net.config.XmlConfigSource: java.util.List parseConfigEntry(android.content.res.XmlResourceParser,java.util.Set,android.security.net.config.NetworkSecurityConfig$Builder,int)>(r1, r47, $r7, i0);

        interfaceinvoke $r6.<java.util.List: boolean addAll(java.util.Collection)>($r23);

        goto label16;

     label14:
        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Nested domain-config not allowed in ");

        $r19 = staticinvoke <android.security.net.config.XmlConfigSource: java.lang.String getConfigString(int)>(i0);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = new android.security.net.config.XmlConfigSource$ParserException;

        $r22 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<android.security.net.config.XmlConfigSource$ParserException: void <init>(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, $r22);

        throw $r21;

     label15:
        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r1);

     label16:
        goto label06;

     label17:
        if i0 != 1 goto label19;

        $z4 = interfaceinvoke $r9.<java.util.Set: boolean isEmpty()>();

        if $z4 != 0 goto label18;

        goto label19;

     label18:
        $r12 = new android.security.net.config.XmlConfigSource$ParserException;

        specialinvoke $r12.<android.security.net.config.XmlConfigSource$ParserException: void <init>(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "No domain elements in domain-config");

        throw $r12;

     label19:
        return $r6;
    }

    private android.security.net.config.NetworkSecurityConfig$Builder parseDebugOverridesResource() throws java.io.IOException, org.xmlpull.v1.XmlPullParserException, android.security.net.config.XmlConfigSource$ParserException
    {
        android.security.net.config.XmlConfigSource r0;
        java.lang.String r1, $r7, $r8, $r9, r17;
        int i0, $i1, $i2, i3;
        android.content.Context $r3;
        java.lang.StringBuilder $r4;
        boolean $z0, $z1, z2, $z3;
        java.util.List $r10;
        java.lang.Object $r11, $r13;
        android.util.Pair $r12;
        java.lang.Throwable $r14, $r15;
        android.content.res.Resources r16;
        android.security.net.config.NetworkSecurityConfig$Builder r18;
        android.content.res.XmlResourceParser r19;
        android.security.net.config.XmlConfigSource$ParserException r20;

        r0 := @this: android.security.net.config.XmlConfigSource;

        $r3 = r0.<android.security.net.config.XmlConfigSource: android.content.Context mContext>;

        r16 = virtualinvoke $r3.<android.content.Context: android.content.res.Resources getResources()>();

        $i1 = r0.<android.security.net.config.XmlConfigSource: int mResourceId>;

        r17 = virtualinvoke r16.<android.content.res.Resources: java.lang.String getResourcePackageName(int)>($i1);

        $i2 = r0.<android.security.net.config.XmlConfigSource: int mResourceId>;

        r1 = virtualinvoke r16.<android.content.res.Resources: java.lang.String getResourceEntryName(int)>($i2);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_debug");

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        i3 = virtualinvoke r16.<android.content.res.Resources: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)>($r7, "xml", r17);

        if i3 != 0 goto label01;

        return null;

     label01:
        r18 = null;

        r19 = virtualinvoke r16.<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)>(i3);

     label02:
        staticinvoke <com.android.internal.util.XmlUtils: void beginDocument(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r19, "network-security-config");

        i0 = interfaceinvoke r19.<android.content.res.XmlResourceParser: int getDepth()>();

     label03:
        z2 = 0;

     label04:
        $z3 = staticinvoke <com.android.internal.util.XmlUtils: boolean nextElementWithin(org.xmlpull.v1.XmlPullParser,int)>(r19, i0);

        if $z3 == 0 goto label13;

        $r8 = "debug-overrides";

        $r9 = interfaceinvoke r19.<android.content.res.XmlResourceParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z0 == 0 goto label11;

     label05:
        if z2 != 0 goto label10;

     label06:
        $z1 = r0.<android.security.net.config.XmlConfigSource: boolean mDebugBuild>;

        if $z1 == 0 goto label08;

        $r10 = specialinvoke r0.<android.security.net.config.XmlConfigSource: java.util.List parseConfigEntry(android.content.res.XmlResourceParser,java.util.Set,android.security.net.config.NetworkSecurityConfig$Builder,int)>(r19, null, null, 2);

        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(0);

        $r12 = (android.util.Pair) $r11;

        $r13 = $r12.<android.util.Pair: java.lang.Object first>;

        r18 = (android.security.net.config.NetworkSecurityConfig$Builder) $r13;

     label07:
        goto label09;

     label08:
        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r19);

     label09:
        z2 = 1;

        goto label04;

     label10:
        r20 = new android.security.net.config.XmlConfigSource$ParserException;

        specialinvoke r20.<android.security.net.config.XmlConfigSource$ParserException: void <init>(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r19, "Only one debug-overrides allowed");

        throw r20;

     label11:
        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r19);

     label12:
        goto label04;

     label13:
        if r19 == null goto label14;

        interfaceinvoke r19.<android.content.res.XmlResourceParser: void close()>();

     label14:
        return r18;

     label15:
        $r15 := @caughtexception;

        if r19 == null goto label19;

     label16:
        interfaceinvoke r19.<android.content.res.XmlResourceParser: void close()>();

     label17:
        goto label19;

     label18:
        $r14 := @caughtexception;

        virtualinvoke $r15.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r14);

     label19:
        throw $r15;

        catch java.lang.Throwable from label02 to label03 with label15;
        catch java.lang.Throwable from label04 to label05 with label15;
        catch java.lang.Throwable from label06 to label07 with label15;
        catch java.lang.Throwable from label08 to label09 with label15;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label16 to label17 with label18;
    }

    private android.security.net.config.Domain parseDomain(android.content.res.XmlResourceParser, java.util.Set) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException, android.security.net.config.XmlConfigSource$ParserException
    {
        android.security.net.config.XmlConfigSource r0;
        android.content.res.XmlResourceParser r1;
        boolean z0, $z1;
        java.lang.String r2, $r4, $r5, $r12;
        int $i0, $i1;
        android.security.net.config.XmlConfigSource$ParserException $r3, $r7, $r11;
        java.util.Locale $r6;
        java.lang.StringBuilder $r8;
        android.security.net.config.Domain $r13;
        java.util.Set r14;

        r0 := @this: android.security.net.config.XmlConfigSource;

        r1 := @parameter0: android.content.res.XmlResourceParser;

        r14 := @parameter1: java.util.Set;

        z0 = interfaceinvoke r1.<android.content.res.XmlResourceParser: boolean getAttributeBooleanValue(java.lang.String,java.lang.String,boolean)>(null, "includeSubdomains", 0);

        $i0 = interfaceinvoke r1.<android.content.res.XmlResourceParser: int next()>();

        if $i0 != 4 goto label3;

        $r4 = interfaceinvoke r1.<android.content.res.XmlResourceParser: java.lang.String getText()>();

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

        $r6 = <java.util.Locale: java.util.Locale US>;

        r2 = virtualinvoke $r5.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r6);

        $i1 = interfaceinvoke r1.<android.content.res.XmlResourceParser: int next()>();

        if $i1 != 3 goto label2;

        $z1 = interfaceinvoke r14.<java.util.Set: boolean add(java.lang.Object)>(r2);

        if $z1 == 0 goto label1;

        $r13 = new android.security.net.config.Domain;

        specialinvoke $r13.<android.security.net.config.Domain: void <init>(java.lang.String,boolean)>(r2, z0);

        return $r13;

     label1:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has already been specified");

        $r11 = new android.security.net.config.XmlConfigSource$ParserException;

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<android.security.net.config.XmlConfigSource$ParserException: void <init>(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, $r12);

        throw $r11;

     label2:
        $r7 = new android.security.net.config.XmlConfigSource$ParserException;

        specialinvoke $r7.<android.security.net.config.XmlConfigSource$ParserException: void <init>(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "domain contains additional elements");

        throw $r7;

     label3:
        $r3 = new android.security.net.config.XmlConfigSource$ParserException;

        specialinvoke $r3.<android.security.net.config.XmlConfigSource$ParserException: void <init>(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "Domain name missing");

        throw $r3;
    }

    private void parseNetworkSecurityConfig(android.content.res.XmlResourceParser) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException, android.security.net.config.XmlConfigSource$ParserException
    {
        android.security.net.config.XmlConfigSource r0;
        int i0;
        android.util.ArraySet $r2, $r4;
        java.util.ArrayList $r3;
        boolean $z0, $z2, $z3, $z4, $z5, z7, z8, $z9, $z10, $z11;
        android.security.net.config.NetworkSecurityConfig $r5, r45;
        java.lang.Object $r6, $r7, $r8, $r11, $r23, $r25, $r29, $r31;
        android.security.net.config.NetworkSecurityConfig$Builder $r9, r35, r36, r37, r39, r43;
        android.util.Pair $r10, $r24, $r30, r42;
        android.security.net.config.Domain $r12;
        java.lang.String $r15, $r16, $r17, $r18, $r19, $r20;
        android.security.net.config.XmlConfigSource$ParserException $r21, $r27;
        java.util.List $r22, $r26, $r28;
        android.content.res.XmlResourceParser r32;
        android.content.pm.ApplicationInfo $r38;
        java.util.Iterator r40, r46;
        java.util.Set r44;

        r0 := @this: android.security.net.config.XmlConfigSource;

        r32 := @parameter0: android.content.res.XmlResourceParser;

        $r2 = new android.util.ArraySet;

        specialinvoke $r2.<android.util.ArraySet: void <init>()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r35 = null;

        r36 = null;

        z7 = 0;

        z8 = 0;

        staticinvoke <com.android.internal.util.XmlUtils: void beginDocument(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r32, "network-security-config");

        i0 = interfaceinvoke r32.<android.content.res.XmlResourceParser: int getDepth()>();

     label01:
        $z9 = staticinvoke <com.android.internal.util.XmlUtils: boolean nextElementWithin(org.xmlpull.v1.XmlPullParser,int)>(r32, i0);

        if $z9 == 0 goto label09;

        $r15 = "base-config";

        $r16 = interfaceinvoke r32.<android.content.res.XmlResourceParser: java.lang.String getName()>();

        $z2 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z2 == 0 goto label03;

        if z8 != 0 goto label02;

        z8 = 1;

        $r28 = specialinvoke r0.<android.security.net.config.XmlConfigSource: java.util.List parseConfigEntry(android.content.res.XmlResourceParser,java.util.Set,android.security.net.config.NetworkSecurityConfig$Builder,int)>(r32, $r2, null, 0);

        $r29 = interfaceinvoke $r28.<java.util.List: java.lang.Object get(int)>(0);

        $r30 = (android.util.Pair) $r29;

        $r31 = $r30.<android.util.Pair: java.lang.Object first>;

        r35 = (android.security.net.config.NetworkSecurityConfig$Builder) $r31;

        goto label01;

     label02:
        $r27 = new android.security.net.config.XmlConfigSource$ParserException;

        specialinvoke $r27.<android.security.net.config.XmlConfigSource$ParserException: void <init>(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r32, "Only one base-config allowed");

        throw $r27;

     label03:
        $r17 = "domain-config";

        $r18 = interfaceinvoke r32.<android.content.res.XmlResourceParser: java.lang.String getName()>();

        $z3 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r18);

        if $z3 == 0 goto label04;

        $r26 = specialinvoke r0.<android.security.net.config.XmlConfigSource: java.util.List parseConfigEntry(android.content.res.XmlResourceParser,java.util.Set,android.security.net.config.NetworkSecurityConfig$Builder,int)>(r32, $r2, r35, 1);

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>($r26);

        goto label01;

     label04:
        $r19 = "debug-overrides";

        $r20 = interfaceinvoke r32.<android.content.res.XmlResourceParser: java.lang.String getName()>();

        $z4 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>($r20);

        if $z4 == 0 goto label08;

        if z7 != 0 goto label07;

        $z5 = r0.<android.security.net.config.XmlConfigSource: boolean mDebugBuild>;

        if $z5 == 0 goto label05;

        $r22 = specialinvoke r0.<android.security.net.config.XmlConfigSource: java.util.List parseConfigEntry(android.content.res.XmlResourceParser,java.util.Set,android.security.net.config.NetworkSecurityConfig$Builder,int)>(r32, null, null, 2);

        $r23 = interfaceinvoke $r22.<java.util.List: java.lang.Object get(int)>(0);

        $r24 = (android.util.Pair) $r23;

        $r25 = $r24.<android.util.Pair: java.lang.Object first>;

        r36 = (android.security.net.config.NetworkSecurityConfig$Builder) $r25;

        goto label06;

     label05:
        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r32);

     label06:
        z7 = 1;

        goto label01;

     label07:
        $r21 = new android.security.net.config.XmlConfigSource$ParserException;

        specialinvoke $r21.<android.security.net.config.XmlConfigSource$ParserException: void <init>(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r32, "Only one debug-overrides allowed");

        throw $r21;

     label08:
        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r32);

        goto label01;

     label09:
        r37 = r36;

        $z0 = r0.<android.security.net.config.XmlConfigSource: boolean mDebugBuild>;

        if $z0 == 0 goto label10;

        r37 = r36;

        if r36 != null goto label10;

        r37 = specialinvoke r0.<android.security.net.config.XmlConfigSource: android.security.net.config.NetworkSecurityConfig$Builder parseDebugOverridesResource()>();

     label10:
        $r38 = r0.<android.security.net.config.XmlConfigSource: android.content.pm.ApplicationInfo mApplicationInfo>;

        r39 = staticinvoke <android.security.net.config.NetworkSecurityConfig: android.security.net.config.NetworkSecurityConfig$Builder getDefaultBuilder(android.content.pm.ApplicationInfo)>($r38);

        specialinvoke r0.<android.security.net.config.XmlConfigSource: void addDebugAnchorsIfNeeded(android.security.net.config.NetworkSecurityConfig$Builder,android.security.net.config.NetworkSecurityConfig$Builder)>(r37, r39);

        if r35 == null goto label11;

        virtualinvoke r35.<android.security.net.config.NetworkSecurityConfig$Builder: android.security.net.config.NetworkSecurityConfig$Builder setParent(android.security.net.config.NetworkSecurityConfig$Builder)>(r39);

        specialinvoke r0.<android.security.net.config.XmlConfigSource: void addDebugAnchorsIfNeeded(android.security.net.config.NetworkSecurityConfig$Builder,android.security.net.config.NetworkSecurityConfig$Builder)>(r37, r35);

        goto label12;

     label11:
        r35 = r39;

     label12:
        $r4 = new android.util.ArraySet;

        specialinvoke $r4.<android.util.ArraySet: void <init>()>();

        r40 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label13:
        $z10 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label17;

        $r6 = interfaceinvoke r40.<java.util.Iterator: java.lang.Object next()>();

        r42 = (android.util.Pair) $r6;

        $r7 = r42.<android.util.Pair: java.lang.Object first>;

        r43 = (android.security.net.config.NetworkSecurityConfig$Builder) $r7;

        $r8 = r42.<android.util.Pair: java.lang.Object second>;

        r44 = (java.util.Set) $r8;

        $r9 = virtualinvoke r43.<android.security.net.config.NetworkSecurityConfig$Builder: android.security.net.config.NetworkSecurityConfig$Builder getParent()>();

        if $r9 != null goto label14;

        virtualinvoke r43.<android.security.net.config.NetworkSecurityConfig$Builder: android.security.net.config.NetworkSecurityConfig$Builder setParent(android.security.net.config.NetworkSecurityConfig$Builder)>(r35);

     label14:
        specialinvoke r0.<android.security.net.config.XmlConfigSource: void addDebugAnchorsIfNeeded(android.security.net.config.NetworkSecurityConfig$Builder,android.security.net.config.NetworkSecurityConfig$Builder)>(r37, r43);

        r45 = virtualinvoke r43.<android.security.net.config.NetworkSecurityConfig$Builder: android.security.net.config.NetworkSecurityConfig build()>();

        r46 = interfaceinvoke r44.<java.util.Set: java.util.Iterator iterator()>();

     label15:
        $z11 = interfaceinvoke r46.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label16;

        $r10 = new android.util.Pair;

        $r11 = interfaceinvoke r46.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (android.security.net.config.Domain) $r11;

        specialinvoke $r10.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r12, r45);

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r10);

        goto label15;

     label16:
        goto label13;

     label17:
        $r5 = virtualinvoke r35.<android.security.net.config.NetworkSecurityConfig$Builder: android.security.net.config.NetworkSecurityConfig build()>();

        r0.<android.security.net.config.XmlConfigSource: android.security.net.config.NetworkSecurityConfig mDefaultConfig> = $r5;

        r0.<android.security.net.config.XmlConfigSource: java.util.Set mDomainMap> = $r4;

        return;
    }

    private android.security.net.config.Pin parsePin(android.content.res.XmlResourceParser) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException, android.security.net.config.XmlConfigSource$ParserException
    {
        android.security.net.config.XmlConfigSource r0;
        android.content.res.XmlResourceParser r1;
        int i0, $i1, $i2, $i3, $i4;
        boolean $z0;
        java.lang.StringBuilder $r3, $r10;
        android.security.net.config.XmlConfigSource$ParserException $r6, $r8, $r17, $r19, $r22;
        java.lang.String $r7, $r9, $r18, r23, r24;
        android.security.net.config.Pin $r20;
        java.lang.Throwable $r21;
        byte[] r25;

        r0 := @this: android.security.net.config.XmlConfigSource;

        r1 := @parameter0: android.content.res.XmlResourceParser;

        r23 = interfaceinvoke r1.<android.content.res.XmlResourceParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "digest");

        $z0 = staticinvoke <android.security.net.config.Pin: boolean isSupportedDigestAlgorithm(java.lang.String)>(r23);

        if $z0 == 0 goto label7;

        $i1 = interfaceinvoke r1.<android.content.res.XmlResourceParser: int next()>();

        if $i1 != 4 goto label6;

        $r9 = interfaceinvoke r1.<android.content.res.XmlResourceParser: java.lang.String getText()>();

        r24 = virtualinvoke $r9.<java.lang.String: java.lang.String trim()>();

     label1:
        r25 = staticinvoke <android.util.Base64: byte[] decode(java.lang.String,int)>(r24, 0);

     label2:
        i0 = staticinvoke <android.security.net.config.Pin: int getDigestLength(java.lang.String)>(r23);

        $i2 = lengthof r25;

        if $i2 != i0 goto label4;

        $i4 = interfaceinvoke r1.<android.content.res.XmlResourceParser: int next()>();

        if $i4 != 3 goto label3;

        $r20 = new android.security.net.config.Pin;

        specialinvoke $r20.<android.security.net.config.Pin: void <init>(java.lang.String,byte[])>(r23, r25);

        return $r20;

     label3:
        $r19 = new android.security.net.config.XmlConfigSource$ParserException;

        specialinvoke $r19.<android.security.net.config.XmlConfigSource$ParserException: void <init>(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "pin contains additional elements");

        throw $r19;

     label4:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("digest length ");

        $i3 = lengthof r25;

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not match expected length for ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r17 = new android.security.net.config.XmlConfigSource$ParserException;

        $r18 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<android.security.net.config.XmlConfigSource$ParserException: void <init>(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, $r18);

        throw $r17;

     label5:
        $r21 := @caughtexception;

        $r22 = new android.security.net.config.XmlConfigSource$ParserException;

        specialinvoke $r22.<android.security.net.config.XmlConfigSource$ParserException: void <init>(org.xmlpull.v1.XmlPullParser,java.lang.String,java.lang.Throwable)>(r1, "Invalid pin digest", $r21);

        throw $r22;

     label6:
        $r8 = new android.security.net.config.XmlConfigSource$ParserException;

        specialinvoke $r8.<android.security.net.config.XmlConfigSource$ParserException: void <init>(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "Missing pin digest");

        throw $r8;

     label7:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported pin digest algorithm: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        $r6 = new android.security.net.config.XmlConfigSource$ParserException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<android.security.net.config.XmlConfigSource$ParserException: void <init>(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, $r7);

        throw $r6;

        catch java.lang.IllegalArgumentException from label1 to label2 with label5;
    }

    private android.security.net.config.PinSet parsePinSet(android.content.res.XmlResourceParser) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException, android.security.net.config.XmlConfigSource$ParserException
    {
        android.security.net.config.XmlConfigSource r0;
        android.content.res.XmlResourceParser r1;
        java.text.SimpleDateFormat r2;
        int i0;
        android.util.ArraySet $r3;
        android.security.net.config.PinSet $r4;
        java.lang.String $r5, r9;
        boolean $z0, $z2;
        android.security.net.config.Pin $r6;
        java.lang.Throwable $r7;
        android.security.net.config.XmlConfigSource$ParserException $r8, r11;
        long l1;
        java.util.Date r10;

        r0 := @this: android.security.net.config.XmlConfigSource;

        r1 := @parameter0: android.content.res.XmlResourceParser;

        r9 = interfaceinvoke r1.<android.content.res.XmlResourceParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "expiration");

        l1 = 9223372036854775807L;

        if r9 == null goto label07;

     label01:
        r2 = new java.text.SimpleDateFormat;

        specialinvoke r2.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd");

        virtualinvoke r2.<java.text.SimpleDateFormat: void setLenient(boolean)>(0);

        r10 = virtualinvoke r2.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>(r9);

     label02:
        if r10 == null goto label05;

     label03:
        l1 = virtualinvoke r10.<java.util.Date: long getTime()>();

     label04:
        goto label07;

     label05:
        r11 = new android.security.net.config.XmlConfigSource$ParserException;

        specialinvoke r11.<android.security.net.config.XmlConfigSource$ParserException: void <init>(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "Invalid expiration date in pin-set");

        throw r11;

     label06:
        $r7 := @caughtexception;

        $r8 = new android.security.net.config.XmlConfigSource$ParserException;

        specialinvoke $r8.<android.security.net.config.XmlConfigSource$ParserException: void <init>(org.xmlpull.v1.XmlPullParser,java.lang.String,java.lang.Throwable)>(r1, "Invalid expiration date in pin-set", $r7);

        throw $r8;

     label07:
        i0 = interfaceinvoke r1.<android.content.res.XmlResourceParser: int getDepth()>();

        $r3 = new android.util.ArraySet;

        specialinvoke $r3.<android.util.ArraySet: void <init>()>();

     label08:
        $z2 = staticinvoke <com.android.internal.util.XmlUtils: boolean nextElementWithin(org.xmlpull.v1.XmlPullParser,int)>(r1, i0);

        if $z2 == 0 goto label11;

        $r5 = interfaceinvoke r1.<android.content.res.XmlResourceParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("pin");

        if $z0 == 0 goto label09;

        $r6 = specialinvoke r0.<android.security.net.config.XmlConfigSource: android.security.net.config.Pin parsePin(android.content.res.XmlResourceParser)>(r1);

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r6);

        goto label10;

     label09:
        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r1);

     label10:
        goto label08;

     label11:
        $r4 = new android.security.net.config.PinSet;

        specialinvoke $r4.<android.security.net.config.PinSet: void <init>(java.util.Set,long)>($r3, l1);

        return $r4;

        catch java.text.ParseException from label01 to label02 with label06;
        catch java.text.ParseException from label03 to label04 with label06;
        catch java.text.ParseException from label05 to label06 with label06;
    }

    private java.util.Collection parseTrustAnchors(android.content.res.XmlResourceParser, boolean) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException, android.security.net.config.XmlConfigSource$ParserException
    {
        android.security.net.config.XmlConfigSource r0;
        android.content.res.XmlResourceParser r1;
        boolean z0, $z1, $z2;
        int i0;
        java.util.ArrayList $r3;
        java.lang.String $r4;
        android.security.net.config.CertificatesEntryRef $r5;

        r0 := @this: android.security.net.config.XmlConfigSource;

        r1 := @parameter0: android.content.res.XmlResourceParser;

        z0 := @parameter1: boolean;

        i0 = interfaceinvoke r1.<android.content.res.XmlResourceParser: int getDepth()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

     label1:
        $z1 = staticinvoke <com.android.internal.util.XmlUtils: boolean nextElementWithin(org.xmlpull.v1.XmlPullParser,int)>(r1, i0);

        if $z1 == 0 goto label4;

        $r4 = interfaceinvoke r1.<android.content.res.XmlResourceParser: java.lang.String getName()>();

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("certificates");

        if $z2 == 0 goto label2;

        $r5 = specialinvoke r0.<android.security.net.config.XmlConfigSource: android.security.net.config.CertificatesEntryRef parseCertificatesEntry(android.content.res.XmlResourceParser,boolean)>(r1, z0);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label3;

     label2:
        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r1);

     label3:
        goto label1;

     label4:
        return $r3;
    }

    public android.security.net.config.NetworkSecurityConfig getDefaultConfig()
    {
        android.security.net.config.XmlConfigSource r0;
        android.security.net.config.NetworkSecurityConfig $r1;

        r0 := @this: android.security.net.config.XmlConfigSource;

        specialinvoke r0.<android.security.net.config.XmlConfigSource: void ensureInitialized()>();

        $r1 = r0.<android.security.net.config.XmlConfigSource: android.security.net.config.NetworkSecurityConfig mDefaultConfig>;

        return $r1;
    }

    public java.util.Set getPerDomainConfigs()
    {
        android.security.net.config.XmlConfigSource r0;
        java.util.Set $r1;

        r0 := @this: android.security.net.config.XmlConfigSource;

        specialinvoke r0.<android.security.net.config.XmlConfigSource: void ensureInitialized()>();

        $r1 = r0.<android.security.net.config.XmlConfigSource: java.util.Set mDomainMap>;

        return $r1;
    }

    public static void <clinit>()
    {
        <android.security.net.config.XmlConfigSource: int CONFIG_DOMAIN> = 1;

        <android.security.net.config.XmlConfigSource: int CONFIG_DEBUG> = 2;

        <android.security.net.config.XmlConfigSource: int CONFIG_BASE> = 0;

        return;
    }
}
