public class android.service.autofill.CharSequenceTransformation$Builder extends java.lang.Object
{
    private boolean mDestroyed;
    private final java.util.LinkedHashMap mFields;

    public void <init>(android.view.autofill.AutofillId, java.util.regex.Pattern, java.lang.String)
    {
        android.service.autofill.CharSequenceTransformation$Builder r0;
        android.view.autofill.AutofillId r1;
        java.util.regex.Pattern r2;
        java.lang.String r3;
        java.util.LinkedHashMap $r4;

        r0 := @this: android.service.autofill.CharSequenceTransformation$Builder;

        r1 := @parameter0: android.view.autofill.AutofillId;

        r2 := @parameter1: java.util.regex.Pattern;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new java.util.LinkedHashMap;

        specialinvoke $r4.<java.util.LinkedHashMap: void <init>()>();

        r0.<android.service.autofill.CharSequenceTransformation$Builder: java.util.LinkedHashMap mFields> = $r4;

        virtualinvoke r0.<android.service.autofill.CharSequenceTransformation$Builder: android.service.autofill.CharSequenceTransformation$Builder addField(android.view.autofill.AutofillId,java.util.regex.Pattern,java.lang.String)>(r1, r2, r3);

        return;
    }

    static java.util.LinkedHashMap access$000(android.service.autofill.CharSequenceTransformation$Builder)
    {
        android.service.autofill.CharSequenceTransformation$Builder r0;
        java.util.LinkedHashMap $r1;

        r0 := @parameter0: android.service.autofill.CharSequenceTransformation$Builder;

        $r1 = r0.<android.service.autofill.CharSequenceTransformation$Builder: java.util.LinkedHashMap mFields>;

        return $r1;
    }

    private void throwIfDestroyed()
    {
        android.service.autofill.CharSequenceTransformation$Builder r0;
        boolean $z0, $z1;

        r0 := @this: android.service.autofill.CharSequenceTransformation$Builder;

        $z0 = r0.<android.service.autofill.CharSequenceTransformation$Builder: boolean mDestroyed>;

        $z1 = $z0 ^ 1;

        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>($z1, "Already called build()");

        return;
    }

    public android.service.autofill.CharSequenceTransformation$Builder addField(android.view.autofill.AutofillId, java.util.regex.Pattern, java.lang.String)
    {
        android.service.autofill.CharSequenceTransformation$Builder r0;
        android.view.autofill.AutofillId r1;
        java.util.regex.Pattern r2;
        java.lang.String r3;
        android.util.Pair $r7;
        java.util.LinkedHashMap $r8;

        r0 := @this: android.service.autofill.CharSequenceTransformation$Builder;

        r1 := @parameter0: android.view.autofill.AutofillId;

        r2 := @parameter1: java.util.regex.Pattern;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<android.service.autofill.CharSequenceTransformation$Builder: void throwIfDestroyed()>();

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r3);

        $r8 = r0.<android.service.autofill.CharSequenceTransformation$Builder: java.util.LinkedHashMap mFields>;

        $r7 = new android.util.Pair;

        specialinvoke $r7.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>(r2, r3);

        virtualinvoke $r8.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r7);

        return r0;
    }

    public android.service.autofill.CharSequenceTransformation build()
    {
        android.service.autofill.CharSequenceTransformation$Builder r0;
        android.service.autofill.CharSequenceTransformation $r1;

        r0 := @this: android.service.autofill.CharSequenceTransformation$Builder;

        specialinvoke r0.<android.service.autofill.CharSequenceTransformation$Builder: void throwIfDestroyed()>();

        r0.<android.service.autofill.CharSequenceTransformation$Builder: boolean mDestroyed> = 1;

        $r1 = new android.service.autofill.CharSequenceTransformation;

        specialinvoke $r1.<android.service.autofill.CharSequenceTransformation: void <init>(android.service.autofill.CharSequenceTransformation$Builder,android.service.autofill.CharSequenceTransformation$1)>(r0, null);

        return $r1;
    }
}
