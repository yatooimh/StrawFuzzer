final class android.service.autofill.NegationValidator extends android.service.autofill.InternalValidator
{
    public static final android.os.Parcelable$Creator CREATOR;
    private final android.service.autofill.InternalValidator mValidator;

    static void <clinit>()
    {
        android.service.autofill.NegationValidator$1 $r0;

        $r0 = new android.service.autofill.NegationValidator$1;

        specialinvoke $r0.<android.service.autofill.NegationValidator$1: void <init>()>();

        <android.service.autofill.NegationValidator: android.os.Parcelable$Creator CREATOR> = $r0;

        return;
    }

    void <init>(android.service.autofill.InternalValidator)
    {
        android.service.autofill.NegationValidator r0;
        android.service.autofill.InternalValidator r1, $r3;
        java.lang.Object $r2;

        r0 := @this: android.service.autofill.NegationValidator;

        r1 := @parameter0: android.service.autofill.InternalValidator;

        specialinvoke r0.<android.service.autofill.InternalValidator: void <init>()>();

        $r2 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (android.service.autofill.InternalValidator) $r2;

        r0.<android.service.autofill.NegationValidator: android.service.autofill.InternalValidator mValidator> = $r3;

        return;
    }

    public int describeContents()
    {
        android.service.autofill.NegationValidator r0;

        r0 := @this: android.service.autofill.NegationValidator;

        return 0;
    }

    public boolean isValid(android.service.autofill.ValueFinder)
    {
        android.service.autofill.NegationValidator r0;
        android.service.autofill.ValueFinder r1;
        android.service.autofill.InternalValidator $r2;
        boolean $z0, $z1;

        r0 := @this: android.service.autofill.NegationValidator;

        r1 := @parameter0: android.service.autofill.ValueFinder;

        $r2 = r0.<android.service.autofill.NegationValidator: android.service.autofill.InternalValidator mValidator>;

        $z0 = virtualinvoke $r2.<android.service.autofill.InternalValidator: boolean isValid(android.service.autofill.ValueFinder)>(r1);

        $z1 = $z0 ^ 1;

        return $z1;
    }

    public java.lang.String toString()
    {
        android.service.autofill.NegationValidator r0;
        boolean $z0;
        java.lang.StringBuilder $r2;
        android.service.autofill.InternalValidator $r4;
        java.lang.String $r7, $r8;

        r0 := @this: android.service.autofill.NegationValidator;

        $z0 = <android.view.autofill.Helper: boolean sDebug>;

        if $z0 != 0 goto label1;

        $r8 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r8;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NegationValidator: [validator=");

        $r4 = r0.<android.service.autofill.NegationValidator: android.service.autofill.InternalValidator mValidator>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        android.service.autofill.NegationValidator r0;
        android.os.Parcel r1;
        int i0;
        android.service.autofill.InternalValidator $r2;

        r0 := @this: android.service.autofill.NegationValidator;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        $r2 = r0.<android.service.autofill.NegationValidator: android.service.autofill.InternalValidator mValidator>;

        virtualinvoke r1.<android.os.Parcel: void writeParcelable(android.os.Parcelable,int)>($r2, i0);

        return;
    }
}
