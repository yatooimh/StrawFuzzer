public final class android.service.autofill.SaveInfo$Builder extends java.lang.Object
{
    private android.service.autofill.CustomDescription mCustomDescription;
    private java.lang.CharSequence mDescription;
    private boolean mDestroyed;
    private int mFlags;
    private android.content.IntentSender mNegativeActionListener;
    private int mNegativeButtonStyle;
    private android.view.autofill.AutofillId[] mOptionalIds;
    private int mPositiveButtonStyle;
    private final android.view.autofill.AutofillId[] mRequiredIds;
    private android.util.ArraySet mSanitizerIds;
    private android.util.ArrayMap mSanitizers;
    private android.view.autofill.AutofillId mTriggerId;
    private final int mType;
    private android.service.autofill.InternalValidator mValidator;

    public void <init>(int)
    {
        android.service.autofill.SaveInfo$Builder r0;
        int i0;

        r0 := @this: android.service.autofill.SaveInfo$Builder;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.service.autofill.SaveInfo$Builder: int mNegativeButtonStyle> = 0;

        r0.<android.service.autofill.SaveInfo$Builder: int mPositiveButtonStyle> = 0;

        r0.<android.service.autofill.SaveInfo$Builder: int mType> = i0;

        r0.<android.service.autofill.SaveInfo$Builder: android.view.autofill.AutofillId[] mRequiredIds> = null;

        return;
    }

    public void <init>(int, android.view.autofill.AutofillId[])
    {
        android.service.autofill.SaveInfo$Builder r0;
        int i0;
        android.view.autofill.AutofillId[] r1, $r2;

        r0 := @this: android.service.autofill.SaveInfo$Builder;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.autofill.AutofillId[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.service.autofill.SaveInfo$Builder: int mNegativeButtonStyle> = 0;

        r0.<android.service.autofill.SaveInfo$Builder: int mPositiveButtonStyle> = 0;

        r0.<android.service.autofill.SaveInfo$Builder: int mType> = i0;

        $r2 = staticinvoke <android.service.autofill.AutofillServiceHelper: android.view.autofill.AutofillId[] assertValid(android.view.autofill.AutofillId[])>(r1);

        r0.<android.service.autofill.SaveInfo$Builder: android.view.autofill.AutofillId[] mRequiredIds> = $r2;

        return;
    }

    static int access$000(android.service.autofill.SaveInfo$Builder)
    {
        android.service.autofill.SaveInfo$Builder r0;
        int $i0;

        r0 := @parameter0: android.service.autofill.SaveInfo$Builder;

        $i0 = r0.<android.service.autofill.SaveInfo$Builder: int mType>;

        return $i0;
    }

    static int access$100(android.service.autofill.SaveInfo$Builder)
    {
        android.service.autofill.SaveInfo$Builder r0;
        int $i0;

        r0 := @parameter0: android.service.autofill.SaveInfo$Builder;

        $i0 = r0.<android.service.autofill.SaveInfo$Builder: int mNegativeButtonStyle>;

        return $i0;
    }

    static android.util.ArrayMap access$1000(android.service.autofill.SaveInfo$Builder)
    {
        android.service.autofill.SaveInfo$Builder r0;
        android.util.ArrayMap $r1;

        r0 := @parameter0: android.service.autofill.SaveInfo$Builder;

        $r1 = r0.<android.service.autofill.SaveInfo$Builder: android.util.ArrayMap mSanitizers>;

        return $r1;
    }

    static android.view.autofill.AutofillId access$1100(android.service.autofill.SaveInfo$Builder)
    {
        android.service.autofill.SaveInfo$Builder r0;
        android.view.autofill.AutofillId $r1;

        r0 := @parameter0: android.service.autofill.SaveInfo$Builder;

        $r1 = r0.<android.service.autofill.SaveInfo$Builder: android.view.autofill.AutofillId mTriggerId>;

        return $r1;
    }

    static android.content.IntentSender access$200(android.service.autofill.SaveInfo$Builder)
    {
        android.service.autofill.SaveInfo$Builder r0;
        android.content.IntentSender $r1;

        r0 := @parameter0: android.service.autofill.SaveInfo$Builder;

        $r1 = r0.<android.service.autofill.SaveInfo$Builder: android.content.IntentSender mNegativeActionListener>;

        return $r1;
    }

    static int access$300(android.service.autofill.SaveInfo$Builder)
    {
        android.service.autofill.SaveInfo$Builder r0;
        int $i0;

        r0 := @parameter0: android.service.autofill.SaveInfo$Builder;

        $i0 = r0.<android.service.autofill.SaveInfo$Builder: int mPositiveButtonStyle>;

        return $i0;
    }

    static android.view.autofill.AutofillId[] access$400(android.service.autofill.SaveInfo$Builder)
    {
        android.service.autofill.SaveInfo$Builder r0;
        android.view.autofill.AutofillId[] $r1;

        r0 := @parameter0: android.service.autofill.SaveInfo$Builder;

        $r1 = r0.<android.service.autofill.SaveInfo$Builder: android.view.autofill.AutofillId[] mRequiredIds>;

        return $r1;
    }

    static android.view.autofill.AutofillId[] access$500(android.service.autofill.SaveInfo$Builder)
    {
        android.service.autofill.SaveInfo$Builder r0;
        android.view.autofill.AutofillId[] $r1;

        r0 := @parameter0: android.service.autofill.SaveInfo$Builder;

        $r1 = r0.<android.service.autofill.SaveInfo$Builder: android.view.autofill.AutofillId[] mOptionalIds>;

        return $r1;
    }

    static java.lang.CharSequence access$600(android.service.autofill.SaveInfo$Builder)
    {
        android.service.autofill.SaveInfo$Builder r0;
        java.lang.CharSequence $r1;

        r0 := @parameter0: android.service.autofill.SaveInfo$Builder;

        $r1 = r0.<android.service.autofill.SaveInfo$Builder: java.lang.CharSequence mDescription>;

        return $r1;
    }

    static int access$700(android.service.autofill.SaveInfo$Builder)
    {
        android.service.autofill.SaveInfo$Builder r0;
        int $i0;

        r0 := @parameter0: android.service.autofill.SaveInfo$Builder;

        $i0 = r0.<android.service.autofill.SaveInfo$Builder: int mFlags>;

        return $i0;
    }

    static android.service.autofill.CustomDescription access$800(android.service.autofill.SaveInfo$Builder)
    {
        android.service.autofill.SaveInfo$Builder r0;
        android.service.autofill.CustomDescription $r1;

        r0 := @parameter0: android.service.autofill.SaveInfo$Builder;

        $r1 = r0.<android.service.autofill.SaveInfo$Builder: android.service.autofill.CustomDescription mCustomDescription>;

        return $r1;
    }

    static android.service.autofill.InternalValidator access$900(android.service.autofill.SaveInfo$Builder)
    {
        android.service.autofill.SaveInfo$Builder r0;
        android.service.autofill.InternalValidator $r1;

        r0 := @parameter0: android.service.autofill.SaveInfo$Builder;

        $r1 = r0.<android.service.autofill.SaveInfo$Builder: android.service.autofill.InternalValidator mValidator>;

        return $r1;
    }

    private void throwIfDestroyed()
    {
        android.service.autofill.SaveInfo$Builder r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;

        r0 := @this: android.service.autofill.SaveInfo$Builder;

        $z0 = r0.<android.service.autofill.SaveInfo$Builder: boolean mDestroyed>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Already called #build()");

        throw $r1;
    }

    public transient android.service.autofill.SaveInfo$Builder addSanitizer(android.service.autofill.Sanitizer, android.view.autofill.AutofillId[])
    {
        android.service.autofill.SaveInfo$Builder r0;
        android.service.autofill.Sanitizer r1;
        android.view.autofill.AutofillId[] r2;
        boolean z0, $z1, $z2, $z3, $z4;
        int i0, $i1, i2;
        java.lang.StringBuilder $r3;
        java.lang.String $r6;
        android.util.ArrayMap $r7, $r9, $r14;
        android.service.autofill.InternalSanitizer $r8;
        android.util.ArraySet $r11, $r13, $r15;
        java.lang.Object[] $r12;
        android.view.autofill.AutofillId r17;

        r0 := @this: android.service.autofill.SaveInfo$Builder;

        r1 := @parameter0: android.service.autofill.Sanitizer;

        r2 := @parameter1: android.view.autofill.AutofillId[];

        specialinvoke r0.<android.service.autofill.SaveInfo$Builder: void throwIfDestroyed()>();

        $z1 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.lang.Object[])>(r2);

        $z2 = $z1 ^ 1;

        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z2, "ids cannot be empty or null");

        z0 = r1 instanceof android.service.autofill.InternalSanitizer;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("not provided by Android System: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z0, $r6);

        $r7 = r0.<android.service.autofill.SaveInfo$Builder: android.util.ArrayMap mSanitizers>;

        if $r7 != null goto label1;

        $r14 = new android.util.ArrayMap;

        specialinvoke $r14.<android.util.ArrayMap: void <init>()>();

        r0.<android.service.autofill.SaveInfo$Builder: android.util.ArrayMap mSanitizers> = $r14;

        $r15 = new android.util.ArraySet;

        $i1 = lengthof r2;

        specialinvoke $r15.<android.util.ArraySet: void <init>(int)>($i1);

        r0.<android.service.autofill.SaveInfo$Builder: android.util.ArraySet mSanitizerIds> = $r15;

     label1:
        i0 = lengthof r2;

        i2 = 0;

     label2:
        if i2 >= i0 goto label3;

        r17 = r2[i2];

        $r11 = r0.<android.service.autofill.SaveInfo$Builder: android.util.ArraySet mSanitizerIds>;

        $z3 = virtualinvoke $r11.<android.util.ArraySet: boolean contains(java.lang.Object)>(r17);

        $z4 = $z3 ^ 1;

        $r12 = newarray (java.lang.Object)[1];

        $r12[0] = r17;

        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z4, "already added %s", $r12);

        $r13 = r0.<android.service.autofill.SaveInfo$Builder: android.util.ArraySet mSanitizerIds>;

        virtualinvoke $r13.<android.util.ArraySet: boolean add(java.lang.Object)>(r17);

        i2 = i2 + 1;

        goto label2;

     label3:
        $r9 = r0.<android.service.autofill.SaveInfo$Builder: android.util.ArrayMap mSanitizers>;

        $r8 = (android.service.autofill.InternalSanitizer) r1;

        virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, r2);

        return r0;
    }

    public android.service.autofill.SaveInfo build()
    {
        android.service.autofill.SaveInfo$Builder r0;
        android.view.autofill.AutofillId[] $r1, $r2;
        boolean $z0, $z1, z2;
        int $i0, $i1;
        android.service.autofill.SaveInfo $r3;

        r0 := @this: android.service.autofill.SaveInfo$Builder;

        specialinvoke r0.<android.service.autofill.SaveInfo$Builder: void throwIfDestroyed()>();

        $r1 = r0.<android.service.autofill.SaveInfo$Builder: android.view.autofill.AutofillId[] mRequiredIds>;

        $z0 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.lang.Object[])>($r1);

        if $z0 == 0 goto label2;

        $r2 = r0.<android.service.autofill.SaveInfo$Builder: android.view.autofill.AutofillId[] mOptionalIds>;

        $z1 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.lang.Object[])>($r2);

        if $z1 == 0 goto label2;

        $i0 = r0.<android.service.autofill.SaveInfo$Builder: int mFlags>;

        $i1 = $i0 & 4;

        if $i1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>(z2, "must have at least one required or optional id or FLAG_DELAYED_SAVE");

        r0.<android.service.autofill.SaveInfo$Builder: boolean mDestroyed> = 1;

        $r3 = new android.service.autofill.SaveInfo;

        specialinvoke $r3.<android.service.autofill.SaveInfo: void <init>(android.service.autofill.SaveInfo$Builder,android.service.autofill.SaveInfo$1)>(r0, null);

        return $r3;
    }

    public android.service.autofill.SaveInfo$Builder setCustomDescription(android.service.autofill.CustomDescription)
    {
        android.service.autofill.SaveInfo$Builder r0;
        android.service.autofill.CustomDescription r1;
        java.lang.CharSequence $r2;
        boolean z0;

        r0 := @this: android.service.autofill.SaveInfo$Builder;

        r1 := @parameter0: android.service.autofill.CustomDescription;

        specialinvoke r0.<android.service.autofill.SaveInfo$Builder: void throwIfDestroyed()>();

        $r2 = r0.<android.service.autofill.SaveInfo$Builder: java.lang.CharSequence mDescription>;

        if $r2 != null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>(z0, "Can call setDescription() or setCustomDescription(), but not both");

        r0.<android.service.autofill.SaveInfo$Builder: android.service.autofill.CustomDescription mCustomDescription> = r1;

        return r0;
    }

    public android.service.autofill.SaveInfo$Builder setDescription(java.lang.CharSequence)
    {
        android.service.autofill.SaveInfo$Builder r0;
        java.lang.CharSequence r1;
        android.service.autofill.CustomDescription $r2;
        boolean z0;

        r0 := @this: android.service.autofill.SaveInfo$Builder;

        r1 := @parameter0: java.lang.CharSequence;

        specialinvoke r0.<android.service.autofill.SaveInfo$Builder: void throwIfDestroyed()>();

        $r2 = r0.<android.service.autofill.SaveInfo$Builder: android.service.autofill.CustomDescription mCustomDescription>;

        if $r2 != null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>(z0, "Can call setDescription() or setCustomDescription(), but not both");

        r0.<android.service.autofill.SaveInfo$Builder: java.lang.CharSequence mDescription> = r1;

        return r0;
    }

    public android.service.autofill.SaveInfo$Builder setFlags(int)
    {
        android.service.autofill.SaveInfo$Builder r0;
        int i0, $i1;

        r0 := @this: android.service.autofill.SaveInfo$Builder;

        i0 := @parameter0: int;

        specialinvoke r0.<android.service.autofill.SaveInfo$Builder: void throwIfDestroyed()>();

        $i1 = staticinvoke <com.android.internal.util.Preconditions: int checkFlagsArgument(int,int)>(i0, 7);

        r0.<android.service.autofill.SaveInfo$Builder: int mFlags> = $i1;

        return r0;
    }

    public android.service.autofill.SaveInfo$Builder setNegativeAction(int, android.content.IntentSender)
    {
        android.service.autofill.SaveInfo$Builder r0;
        int i0;
        android.content.IntentSender r1;

        r0 := @this: android.service.autofill.SaveInfo$Builder;

        i0 := @parameter0: int;

        r1 := @parameter1: android.content.IntentSender;

        specialinvoke r0.<android.service.autofill.SaveInfo$Builder: void throwIfDestroyed()>();

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentInRange(int,int,int,java.lang.String)>(i0, 0, 2, "style");

        r0.<android.service.autofill.SaveInfo$Builder: int mNegativeButtonStyle> = i0;

        r0.<android.service.autofill.SaveInfo$Builder: android.content.IntentSender mNegativeActionListener> = r1;

        return r0;
    }

    public android.service.autofill.SaveInfo$Builder setOptionalIds(android.view.autofill.AutofillId[])
    {
        android.service.autofill.SaveInfo$Builder r0;
        android.view.autofill.AutofillId[] r1, $r2;

        r0 := @this: android.service.autofill.SaveInfo$Builder;

        r1 := @parameter0: android.view.autofill.AutofillId[];

        specialinvoke r0.<android.service.autofill.SaveInfo$Builder: void throwIfDestroyed()>();

        $r2 = staticinvoke <android.service.autofill.AutofillServiceHelper: android.view.autofill.AutofillId[] assertValid(android.view.autofill.AutofillId[])>(r1);

        r0.<android.service.autofill.SaveInfo$Builder: android.view.autofill.AutofillId[] mOptionalIds> = $r2;

        return r0;
    }

    public android.service.autofill.SaveInfo$Builder setPositiveAction(int)
    {
        android.service.autofill.SaveInfo$Builder r0;
        int i0;

        r0 := @this: android.service.autofill.SaveInfo$Builder;

        i0 := @parameter0: int;

        specialinvoke r0.<android.service.autofill.SaveInfo$Builder: void throwIfDestroyed()>();

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentInRange(int,int,int,java.lang.String)>(i0, 0, 1, "style");

        r0.<android.service.autofill.SaveInfo$Builder: int mPositiveButtonStyle> = i0;

        return r0;
    }

    public android.service.autofill.SaveInfo$Builder setTriggerId(android.view.autofill.AutofillId)
    {
        android.service.autofill.SaveInfo$Builder r0;
        android.view.autofill.AutofillId r1, $r3;
        java.lang.Object $r2;

        r0 := @this: android.service.autofill.SaveInfo$Builder;

        r1 := @parameter0: android.view.autofill.AutofillId;

        specialinvoke r0.<android.service.autofill.SaveInfo$Builder: void throwIfDestroyed()>();

        $r2 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (android.view.autofill.AutofillId) $r2;

        r0.<android.service.autofill.SaveInfo$Builder: android.view.autofill.AutofillId mTriggerId> = $r3;

        return r0;
    }

    public android.service.autofill.SaveInfo$Builder setValidator(android.service.autofill.Validator)
    {
        android.service.autofill.SaveInfo$Builder r0;
        android.service.autofill.Validator r1;
        boolean z0;
        java.lang.StringBuilder $r3;
        java.lang.String $r6;
        android.service.autofill.InternalValidator $r7;

        r0 := @this: android.service.autofill.SaveInfo$Builder;

        r1 := @parameter0: android.service.autofill.Validator;

        specialinvoke r0.<android.service.autofill.SaveInfo$Builder: void throwIfDestroyed()>();

        z0 = r1 instanceof android.service.autofill.InternalValidator;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("not provided by Android System: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z0, $r6);

        $r7 = (android.service.autofill.InternalValidator) r1;

        r0.<android.service.autofill.SaveInfo$Builder: android.service.autofill.InternalValidator mValidator> = $r7;

        return r0;
    }
}
