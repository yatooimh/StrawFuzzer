class android.service.controls.ControlsProviderService$SubscriptionAdapter extends android.service.controls.IControlsSubscription$Stub
{
    final java.util.concurrent.Flow$Subscription mSubscription;

    void <init>(java.util.concurrent.Flow$Subscription)
    {
        android.service.controls.ControlsProviderService$SubscriptionAdapter r0;
        java.util.concurrent.Flow$Subscription r1;

        r0 := @this: android.service.controls.ControlsProviderService$SubscriptionAdapter;

        r1 := @parameter0: java.util.concurrent.Flow$Subscription;

        specialinvoke r0.<android.service.controls.IControlsSubscription$Stub: void <init>()>();

        r0.<android.service.controls.ControlsProviderService$SubscriptionAdapter: java.util.concurrent.Flow$Subscription mSubscription> = r1;

        return;
    }

    public void cancel()
    {
        android.service.controls.ControlsProviderService$SubscriptionAdapter r0;
        java.util.concurrent.Flow$Subscription $r1;

        r0 := @this: android.service.controls.ControlsProviderService$SubscriptionAdapter;

        $r1 = r0.<android.service.controls.ControlsProviderService$SubscriptionAdapter: java.util.concurrent.Flow$Subscription mSubscription>;

        interfaceinvoke $r1.<java.util.concurrent.Flow$Subscription: void cancel()>();

        return;
    }

    public void request(long)
    {
        android.service.controls.ControlsProviderService$SubscriptionAdapter r0;
        long l0;
        java.util.concurrent.Flow$Subscription $r1;

        r0 := @this: android.service.controls.ControlsProviderService$SubscriptionAdapter;

        l0 := @parameter0: long;

        $r1 = r0.<android.service.controls.ControlsProviderService$SubscriptionAdapter: java.util.concurrent.Flow$Subscription mSubscription>;

        interfaceinvoke $r1.<java.util.concurrent.Flow$Subscription: void request(long)>(l0);

        return;
    }
}
