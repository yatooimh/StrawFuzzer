public final class android.service.dreams.Sandman extends java.lang.Object
{
    private static final java.lang.String TAG;

    private void <init>()
    {
        android.service.dreams.Sandman r0;

        r0 := @this: android.service.dreams.Sandman;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static boolean isScreenSaverActivatedOnDock(android.content.Context)
    {
        android.content.Context r0;
        boolean z0, z1;
        android.content.res.Resources $r1;
        android.content.ContentResolver $r2;
        int $i0;
        byte b1;

        r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke r0.<android.content.Context: android.content.res.Resources getResources()>();

        z0 = virtualinvoke $r1.<android.content.res.Resources: boolean getBoolean(int)>(17891427);

        z1 = 1;

        if z0 == 0 goto label1;

        b1 = 1;

        goto label2;

     label1:
        b1 = 0;

     label2:
        $r2 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r2, "screensaver_activate_on_dock", b1, -2);

        if $i0 == 0 goto label3;

        goto label4;

     label3:
        z1 = 0;

     label4:
        return z1;
    }

    private static boolean isScreenSaverEnabled(android.content.Context)
    {
        android.content.Context r0;
        boolean z0, z1;
        android.content.res.Resources $r1;
        android.content.ContentResolver $r2;
        int $i0;
        byte b1;

        r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke r0.<android.content.Context: android.content.res.Resources getResources()>();

        z0 = virtualinvoke $r1.<android.content.res.Resources: boolean getBoolean(int)>(17891429);

        z1 = 1;

        if z0 == 0 goto label1;

        b1 = 1;

        goto label2;

     label1:
        b1 = 0;

     label2:
        $r2 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r2, "screensaver_enabled", b1, -2);

        if $i0 == 0 goto label3;

        goto label4;

     label3:
        z1 = 0;

     label4:
        return z1;
    }

    public static boolean shouldStartDockApp(android.content.Context, android.content.Intent)
    {
        android.content.Intent r0;
        android.content.ComponentName r1, r6;
        android.content.res.Resources $r2;
        java.lang.String $r3;
        android.content.pm.PackageManager $r4;
        boolean $z0, z1;
        android.content.Context r5;

        r5 := @parameter0: android.content.Context;

        r0 := @parameter1: android.content.Intent;

        $r2 = virtualinvoke r5.<android.content.Context: android.content.res.Resources getResources()>();

        $r3 = virtualinvoke $r2.<android.content.res.Resources: java.lang.String getString(int)>(17039949);

        r1 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>($r3);

        $r4 = virtualinvoke r5.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r6 = virtualinvoke r0.<android.content.Intent: android.content.ComponentName resolveActivity(android.content.pm.PackageManager)>($r4);

        if r6 == null goto label1;

        $z0 = virtualinvoke r6.<android.content.ComponentName: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    private static void startDream(android.content.Context, boolean)
    {
        boolean z0, $z1;
        android.service.dreams.IDreamManager r0;
        android.os.IBinder $r1;
        java.lang.Object $r2;
        android.os.PowerManager $r3;
        long $l2;
        android.os.RemoteException $r4;
        android.content.Context r5;

        r5 := @parameter0: android.content.Context;

        z0 := @parameter1: boolean;

     label01:
        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("dreams");

        r0 = staticinvoke <android.service.dreams.IDreamManager$Stub: android.service.dreams.IDreamManager asInterface(android.os.IBinder)>($r1);

     label02:
        if r0 == null goto label09;

     label03:
        $z1 = interfaceinvoke r0.<android.service.dreams.IDreamManager: boolean isDreaming()>();

        if $z1 != 0 goto label09;

     label04:
        if z0 == 0 goto label07;

     label05:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("Sandman", "Activating dream while docked.");

        $r2 = virtualinvoke r5.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/PowerManager;");

        $r3 = (android.os.PowerManager) $r2;

        $l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        virtualinvoke $r3.<android.os.PowerManager: void wakeUp(long,int,java.lang.String)>($l2, 3, "android.service.dreams:DREAM");

     label06:
        goto label08;

     label07:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("Sandman", "Activating dream by user request.");

     label08:
        interfaceinvoke r0.<android.service.dreams.IDreamManager: void dream()>();

     label09:
        goto label11;

     label10:
        $r4 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Sandman", "Could not start dream when docked.", $r4);

     label11:
        return;

        catch android.os.RemoteException from label01 to label02 with label10;
        catch android.os.RemoteException from label03 to label04 with label10;
        catch android.os.RemoteException from label05 to label06 with label10;
        catch android.os.RemoteException from label07 to label08 with label10;
        catch android.os.RemoteException from label08 to label09 with label10;
    }

    public static void startDreamByUserRequest(android.content.Context)
    {
        android.content.Context r0;

        r0 := @parameter0: android.content.Context;

        staticinvoke <android.service.dreams.Sandman: void startDream(android.content.Context,boolean)>(r0, 0);

        return;
    }

    public static void startDreamWhenDockedIfAppropriate(android.content.Context)
    {
        android.content.Context r0;
        boolean $z0, $z1;

        r0 := @parameter0: android.content.Context;

        $z0 = staticinvoke <android.service.dreams.Sandman: boolean isScreenSaverEnabled(android.content.Context)>(r0);

        if $z0 == 0 goto label2;

        $z1 = staticinvoke <android.service.dreams.Sandman: boolean isScreenSaverActivatedOnDock(android.content.Context)>(r0);

        if $z1 != 0 goto label1;

        goto label2;

     label1:
        staticinvoke <android.service.dreams.Sandman: void startDream(android.content.Context,boolean)>(r0, 1);

        return;

     label2:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("Sandman", "Dreams currently disabled for docks.");

        return;
    }

    public static void <clinit>()
    {
        <android.service.dreams.Sandman: java.lang.String TAG> = "Sandman";

        return;
    }
}
