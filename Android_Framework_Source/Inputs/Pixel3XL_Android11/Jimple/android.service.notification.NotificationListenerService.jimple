public abstract class android.service.notification.NotificationListenerService extends android.app.Service
{
    public static final int HINT_HOST_DISABLE_CALL_EFFECTS;
    public static final int HINT_HOST_DISABLE_EFFECTS;
    public static final int HINT_HOST_DISABLE_NOTIFICATION_EFFECTS;
    public static final int INTERRUPTION_FILTER_ALARMS;
    public static final int INTERRUPTION_FILTER_ALL;
    public static final int INTERRUPTION_FILTER_NONE;
    public static final int INTERRUPTION_FILTER_PRIORITY;
    public static final int INTERRUPTION_FILTER_UNKNOWN;
    public static final int NOTIFICATION_CHANNEL_OR_GROUP_ADDED;
    public static final int NOTIFICATION_CHANNEL_OR_GROUP_DELETED;
    public static final int NOTIFICATION_CHANNEL_OR_GROUP_UPDATED;
    public static final int REASON_APP_CANCEL;
    public static final int REASON_APP_CANCEL_ALL;
    public static final int REASON_CANCEL;
    public static final int REASON_CANCEL_ALL;
    public static final int REASON_CHANNEL_BANNED;
    public static final int REASON_CLICK;
    public static final int REASON_ERROR;
    public static final int REASON_GROUP_OPTIMIZATION;
    public static final int REASON_GROUP_SUMMARY_CANCELED;
    public static final int REASON_LISTENER_CANCEL;
    public static final int REASON_LISTENER_CANCEL_ALL;
    public static final int REASON_PACKAGE_BANNED;
    public static final int REASON_PACKAGE_CHANGED;
    public static final int REASON_PACKAGE_SUSPENDED;
    public static final int REASON_PROFILE_TURNED_OFF;
    public static final int REASON_SNOOZED;
    public static final int REASON_TIMEOUT;
    public static final int REASON_UNAUTOBUNDLED;
    public static final int REASON_USER_STOPPED;
    public static final java.lang.String SERVICE_INTERFACE;
    public static final int SUPPRESSED_EFFECT_SCREEN_OFF;
    public static final int SUPPRESSED_EFFECT_SCREEN_ON;
    public static final int TRIM_FULL;
    public static final int TRIM_LIGHT;
    private final java.lang.String TAG;
    private boolean isConnected;
    protected int mCurrentUser;
    private android.os.Handler mHandler;
    private final java.lang.Object mLock;
    protected android.app.INotificationManager mNoMan;
    private android.service.notification.NotificationListenerService$RankingMap mRankingMap;
    protected android.content.Context mSystemContext;
    protected android.service.notification.NotificationListenerService$NotificationListenerWrapper mWrapper;

    public void <init>()
    {
        android.service.notification.NotificationListenerService r0;
        java.lang.Class $r1;
        java.lang.String $r2;
        java.lang.Object $r3;

        r0 := @this: android.service.notification.NotificationListenerService;

        specialinvoke r0.<android.app.Service: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getSimpleName()>();

        r0.<android.service.notification.NotificationListenerService: java.lang.String TAG> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<android.service.notification.NotificationListenerService: java.lang.Object mLock> = $r3;

        r0.<android.service.notification.NotificationListenerService: android.service.notification.NotificationListenerService$NotificationListenerWrapper mWrapper> = null;

        r0.<android.service.notification.NotificationListenerService: boolean isConnected> = 0;

        return;
    }

    static java.lang.String access$000(android.service.notification.NotificationListenerService)
    {
        android.service.notification.NotificationListenerService r0;
        java.lang.String $r1;

        r0 := @parameter0: android.service.notification.NotificationListenerService;

        $r1 = r0.<android.service.notification.NotificationListenerService: java.lang.String TAG>;

        return $r1;
    }

    static void access$100(android.service.notification.NotificationListenerService, android.app.Notification)
    {
        android.service.notification.NotificationListenerService r0;
        android.app.Notification r1;

        r0 := @parameter0: android.service.notification.NotificationListenerService;

        r1 := @parameter1: android.app.Notification;

        specialinvoke r0.<android.service.notification.NotificationListenerService: void maybePopulateRemoteViews(android.app.Notification)>(r1);

        return;
    }

    static void access$200(android.service.notification.NotificationListenerService, android.app.Notification)
    {
        android.service.notification.NotificationListenerService r0;
        android.app.Notification r1;

        r0 := @parameter0: android.service.notification.NotificationListenerService;

        r1 := @parameter1: android.app.Notification;

        specialinvoke r0.<android.service.notification.NotificationListenerService: void maybePopulatePeople(android.app.Notification)>(r1);

        return;
    }

    static java.lang.Object access$300(android.service.notification.NotificationListenerService)
    {
        android.service.notification.NotificationListenerService r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.service.notification.NotificationListenerService;

        $r1 = r0.<android.service.notification.NotificationListenerService: java.lang.Object mLock>;

        return $r1;
    }

    static android.service.notification.NotificationListenerService$RankingMap access$400(android.service.notification.NotificationListenerService)
    {
        android.service.notification.NotificationListenerService r0;
        android.service.notification.NotificationListenerService$RankingMap $r1;

        r0 := @parameter0: android.service.notification.NotificationListenerService;

        $r1 = r0.<android.service.notification.NotificationListenerService: android.service.notification.NotificationListenerService$RankingMap mRankingMap>;

        return $r1;
    }

    static android.os.Handler access$500(android.service.notification.NotificationListenerService)
    {
        android.service.notification.NotificationListenerService r0;
        android.os.Handler $r1;

        r0 := @parameter0: android.service.notification.NotificationListenerService;

        $r1 = r0.<android.service.notification.NotificationListenerService: android.os.Handler mHandler>;

        return $r1;
    }

    static boolean access$600(android.service.notification.NotificationListenerService)
    {
        android.service.notification.NotificationListenerService r0;
        boolean $z0;

        r0 := @parameter0: android.service.notification.NotificationListenerService;

        $z0 = r0.<android.service.notification.NotificationListenerService: boolean isConnected>;

        return $z0;
    }

    static boolean access$602(android.service.notification.NotificationListenerService, boolean)
    {
        android.service.notification.NotificationListenerService r0;
        boolean z0;

        r0 := @parameter0: android.service.notification.NotificationListenerService;

        z0 := @parameter1: boolean;

        r0.<android.service.notification.NotificationListenerService: boolean isConnected> = z0;

        return z0;
    }

    private android.service.notification.StatusBarNotification[] cleanUpNotificationList(android.content.pm.ParceledListSlice)
    {
        android.service.notification.NotificationListenerService r0;
        java.util.List r1, $r5;
        int i0, $i1, i3;
        android.service.notification.StatusBarNotification r2;
        java.lang.String r3, $r13, $r15;
        android.service.notification.StatusBarNotification[] $r4, $r6, $r8;
        java.lang.Object[] $r7;
        java.lang.Object $r9;
        java.lang.Throwable $r10;
        java.lang.StringBuilder $r11;
        java.util.ArrayList $r16, r18, r21;
        android.content.pm.ParceledListSlice r17;
        android.app.Notification r19;

        r0 := @this: android.service.notification.NotificationListenerService;

        r17 := @parameter0: android.content.pm.ParceledListSlice;

        if r17 == null goto label10;

        $r5 = virtualinvoke r17.<android.content.pm.ParceledListSlice: java.util.List getList()>();

        if $r5 != null goto label01;

        goto label10;

     label01:
        r1 = virtualinvoke r17.<android.content.pm.ParceledListSlice: java.util.List getList()>();

        r18 = null;

        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        i3 = 0;

     label02:
        if i3 >= i0 goto label08;

        $r9 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i3);

        r2 = (android.service.notification.StatusBarNotification) $r9;

        r19 = virtualinvoke r2.<android.service.notification.StatusBarNotification: android.app.Notification getNotification()>();

     label03:
        virtualinvoke r0.<android.service.notification.NotificationListenerService: void createLegacyIconExtras(android.app.Notification)>(r19);

        specialinvoke r0.<android.service.notification.NotificationListenerService: void maybePopulateRemoteViews(android.app.Notification)>(r19);

        specialinvoke r0.<android.service.notification.NotificationListenerService: void maybePopulatePeople(android.app.Notification)>(r19);

     label04:
        goto label07;

     label05:
        $r10 := @caughtexception;

        r21 = r18;

        if r18 != null goto label06;

        $r16 = new java.util.ArrayList;

        specialinvoke $r16.<java.util.ArrayList: void <init>(int)>(i0);

        r21 = $r16;

     label06:
        virtualinvoke r21.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

        r3 = r0.<android.service.notification.NotificationListenerService: java.lang.String TAG>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("get(Active/Snoozed)Notifications: can\'t rebuild notification from ");

        $r13 = virtualinvoke r2.<android.service.notification.StatusBarNotification: java.lang.String getPackageName()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>(r3, $r15);

        r18 = r21;

     label07:
        i3 = i3 + 1;

        goto label02;

     label08:
        if r18 == null goto label09;

        interfaceinvoke r1.<java.util.List: boolean removeAll(java.util.Collection)>(r18);

     label09:
        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        $r6 = newarray (android.service.notification.StatusBarNotification)[$i1];

        $r7 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r8 = (android.service.notification.StatusBarNotification[]) $r7;

        return $r8;

     label10:
        $r4 = newarray (android.service.notification.StatusBarNotification)[0];

        return $r4;

        catch java.lang.IllegalArgumentException from label03 to label04 with label05;
    }

    private void maybePopulatePeople(android.app.Notification)
    {
        android.service.notification.NotificationListenerService r0;
        android.app.Notification r1;
        java.util.ArrayList r2;
        int i0, $i1, i2;
        java.lang.String[] r3;
        android.content.Context $r4;
        android.content.pm.ApplicationInfo $r5;
        android.os.Bundle $r6, $r7;
        boolean $z0;
        java.lang.Object $r8;
        android.app.Person $r9;
        java.lang.String $r10;

        r0 := @this: android.service.notification.NotificationListenerService;

        r1 := @parameter0: android.app.Notification;

        $r4 = virtualinvoke r0.<android.service.notification.NotificationListenerService: android.content.Context getContext()>();

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i1 = $r5.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i1 >= 28 goto label3;

        $r6 = r1.<android.app.Notification: android.os.Bundle extras>;

        r2 = virtualinvoke $r6.<android.os.Bundle: java.util.ArrayList getParcelableArrayList(java.lang.String)>("android.people.list");

        if r2 == null goto label3;

        $z0 = virtualinvoke r2.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 == 0 goto label3;

        i0 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        r3 = newarray (java.lang.String)[i0];

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r8 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r9 = (android.app.Person) $r8;

        $r10 = virtualinvoke $r9.<android.app.Person: java.lang.String resolveToLegacyUri()>();

        r3[i2] = $r10;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r7 = r1.<android.app.Notification: android.os.Bundle extras>;

        virtualinvoke $r7.<android.os.Bundle: void putStringArray(java.lang.String,java.lang.String[])>("android.people", r3);

     label3:
        return;
    }

    private void maybePopulateRemoteViews(android.app.Notification)
    {
        android.service.notification.NotificationListenerService r0;
        android.app.Notification r1;
        android.widget.RemoteViews r2, r3, r8;
        android.content.Context $r4, $r6;
        android.content.pm.ApplicationInfo $r5;
        int $i0;
        android.app.Notification$Builder r7;

        r0 := @this: android.service.notification.NotificationListenerService;

        r1 := @parameter0: android.app.Notification;

        $r4 = virtualinvoke r0.<android.service.notification.NotificationListenerService: android.content.Context getContext()>();

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i0 = $r5.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i0 >= 24 goto label1;

        $r6 = virtualinvoke r0.<android.service.notification.NotificationListenerService: android.content.Context getContext()>();

        r7 = staticinvoke <android.app.Notification$Builder: android.app.Notification$Builder recoverBuilder(android.content.Context,android.app.Notification)>($r6, r1);

        r2 = virtualinvoke r7.<android.app.Notification$Builder: android.widget.RemoteViews createContentView()>();

        r3 = virtualinvoke r7.<android.app.Notification$Builder: android.widget.RemoteViews createBigContentView()>();

        r8 = virtualinvoke r7.<android.app.Notification$Builder: android.widget.RemoteViews createHeadsUpContentView()>();

        r1.<android.app.Notification: android.widget.RemoteViews contentView> = r2;

        r1.<android.app.Notification: android.widget.RemoteViews bigContentView> = r3;

        r1.<android.app.Notification: android.widget.RemoteViews headsUpContentView> = r8;

     label1:
        return;
    }

    public static void requestRebind(android.content.ComponentName)
    {
        android.app.INotificationManager r0;
        android.os.IBinder $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.content.ComponentName r4;

        r4 := @parameter0: android.content.ComponentName;

        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("notification");

        r0 = staticinvoke <android.app.INotificationManager$Stub: android.app.INotificationManager asInterface(android.os.IBinder)>($r1);

     label1:
        interfaceinvoke r0.<android.app.INotificationManager: void requestBindListener(android.content.ComponentName)>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public final void applyUpdateLocked(android.service.notification.NotificationRankingUpdate)
    {
        android.service.notification.NotificationListenerService r0;
        android.service.notification.NotificationRankingUpdate r1;
        android.service.notification.NotificationListenerService$RankingMap $r2;

        r0 := @this: android.service.notification.NotificationListenerService;

        r1 := @parameter0: android.service.notification.NotificationRankingUpdate;

        $r2 = virtualinvoke r1.<android.service.notification.NotificationRankingUpdate: android.service.notification.NotificationListenerService$RankingMap getRankingMap()>();

        r0.<android.service.notification.NotificationListenerService: android.service.notification.NotificationListenerService$RankingMap mRankingMap> = $r2;

        return;
    }

    protected void attachBaseContext(android.content.Context)
    {
        android.service.notification.NotificationListenerService r0;
        android.content.Context r1;
        android.service.notification.NotificationListenerService$MyHandler $r2;
        android.os.Looper $r3;

        r0 := @this: android.service.notification.NotificationListenerService;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.app.Service: void attachBaseContext(android.content.Context)>(r1);

        $r2 = new android.service.notification.NotificationListenerService$MyHandler;

        $r3 = virtualinvoke r0.<android.service.notification.NotificationListenerService: android.os.Looper getMainLooper()>();

        specialinvoke $r2.<android.service.notification.NotificationListenerService$MyHandler: void <init>(android.service.notification.NotificationListenerService,android.os.Looper)>(r0, $r3);

        r0.<android.service.notification.NotificationListenerService: android.os.Handler mHandler> = $r2;

        return;
    }

    public final void cancelAllNotifications()
    {
        android.service.notification.NotificationListenerService r0;

        r0 := @this: android.service.notification.NotificationListenerService;

        virtualinvoke r0.<android.service.notification.NotificationListenerService: void cancelNotifications(java.lang.String[])>(null);

        return;
    }

    public final void cancelNotification(java.lang.String)
    {
        android.service.notification.NotificationListenerService r0;
        boolean $z0;
        android.app.INotificationManager $r1;
        java.lang.String[] $r2;
        android.service.notification.NotificationListenerService$NotificationListenerWrapper $r3;
        android.os.RemoteException $r4;
        java.lang.String $r5, r6;

        r0 := @this: android.service.notification.NotificationListenerService;

        r6 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<android.service.notification.NotificationListenerService: boolean isBound()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = virtualinvoke r0.<android.service.notification.NotificationListenerService: android.app.INotificationManager getNotificationInterface()>();

        $r3 = r0.<android.service.notification.NotificationListenerService: android.service.notification.NotificationListenerService$NotificationListenerWrapper mWrapper>;

        $r2 = newarray (java.lang.String)[1];

        $r2[0] = r6;

        interfaceinvoke $r1.<android.app.INotificationManager: void cancelNotificationsFromListener(android.service.notification.INotificationListener,java.lang.String[])>($r3, $r2);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = r0.<android.service.notification.NotificationListenerService: java.lang.String TAG>;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Unable to contact notification manager", $r4);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public final void cancelNotification(java.lang.String, java.lang.String, int)
    {
        android.service.notification.NotificationListenerService r0;
        java.lang.String r1, $r5, r6;
        int i0;
        boolean $z0;
        android.app.INotificationManager $r2;
        android.service.notification.NotificationListenerService$NotificationListenerWrapper $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.service.notification.NotificationListenerService;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $z0 = virtualinvoke r0.<android.service.notification.NotificationListenerService: boolean isBound()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r0.<android.service.notification.NotificationListenerService: android.app.INotificationManager getNotificationInterface()>();

        $r3 = r0.<android.service.notification.NotificationListenerService: android.service.notification.NotificationListenerService$NotificationListenerWrapper mWrapper>;

        interfaceinvoke $r2.<android.app.INotificationManager: void cancelNotificationFromListener(android.service.notification.INotificationListener,java.lang.String,java.lang.String,int)>($r3, r6, r1, i0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = r0.<android.service.notification.NotificationListenerService: java.lang.String TAG>;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Unable to contact notification manager", $r4);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public final void cancelNotifications(java.lang.String[])
    {
        android.service.notification.NotificationListenerService r0;
        boolean $z0;
        android.app.INotificationManager $r1;
        android.service.notification.NotificationListenerService$NotificationListenerWrapper $r2;
        android.os.RemoteException $r3;
        java.lang.String $r4;
        java.lang.String[] r5;

        r0 := @this: android.service.notification.NotificationListenerService;

        r5 := @parameter0: java.lang.String[];

        $z0 = virtualinvoke r0.<android.service.notification.NotificationListenerService: boolean isBound()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = virtualinvoke r0.<android.service.notification.NotificationListenerService: android.app.INotificationManager getNotificationInterface()>();

        $r2 = r0.<android.service.notification.NotificationListenerService: android.service.notification.NotificationListenerService$NotificationListenerWrapper mWrapper>;

        interfaceinvoke $r1.<android.app.INotificationManager: void cancelNotificationsFromListener(android.service.notification.INotificationListener,java.lang.String[])>($r2, r5);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = r0.<android.service.notification.NotificationListenerService: java.lang.String TAG>;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Unable to contact notification manager", $r3);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public final void clearRequestedListenerHints()
    {
        android.service.notification.NotificationListenerService r0;
        boolean $z0;
        android.app.INotificationManager $r2;
        android.service.notification.NotificationListenerService$NotificationListenerWrapper $r3;
        android.os.RemoteException $r4;
        java.lang.String $r5;

        r0 := @this: android.service.notification.NotificationListenerService;

        $z0 = virtualinvoke r0.<android.service.notification.NotificationListenerService: boolean isBound()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r0.<android.service.notification.NotificationListenerService: android.app.INotificationManager getNotificationInterface()>();

        $r3 = r0.<android.service.notification.NotificationListenerService: android.service.notification.NotificationListenerService$NotificationListenerWrapper mWrapper>;

        interfaceinvoke $r2.<android.app.INotificationManager: void clearRequestedListenerHints(android.service.notification.INotificationListener)>($r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = r0.<android.service.notification.NotificationListenerService: java.lang.String TAG>;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Unable to contact notification manager", $r4);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public final void createLegacyIconExtras(android.app.Notification)
    {
        android.service.notification.NotificationListenerService r0;
        android.app.Notification r1;
        android.graphics.drawable.Icon r2, r9;
        android.content.Context $r3, $r5;
        android.content.pm.ApplicationInfo $r4;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        android.graphics.drawable.BitmapDrawable $r6;
        android.os.Bundle $r7, $r8;
        android.graphics.drawable.Drawable r10;
        android.graphics.Bitmap r11;

        r0 := @this: android.service.notification.NotificationListenerService;

        r1 := @parameter0: android.app.Notification;

        $r3 = virtualinvoke r0.<android.service.notification.NotificationListenerService: android.content.Context getContext()>();

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i0 = $r4.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i0 >= 23 goto label2;

        r9 = virtualinvoke r1.<android.app.Notification: android.graphics.drawable.Icon getSmallIcon()>();

        r2 = virtualinvoke r1.<android.app.Notification: android.graphics.drawable.Icon getLargeIcon()>();

        if r9 == null goto label1;

        $i1 = virtualinvoke r9.<android.graphics.drawable.Icon: int getType()>();

        if $i1 != 2 goto label1;

        $r8 = r1.<android.app.Notification: android.os.Bundle extras>;

        $i2 = virtualinvoke r9.<android.graphics.drawable.Icon: int getResId()>();

        virtualinvoke $r8.<android.os.Bundle: void putInt(java.lang.String,int)>("android.icon", $i2);

        $i3 = virtualinvoke r9.<android.graphics.drawable.Icon: int getResId()>();

        r1.<android.app.Notification: int icon> = $i3;

     label1:
        if r2 == null goto label2;

        $r5 = virtualinvoke r0.<android.service.notification.NotificationListenerService: android.content.Context getContext()>();

        r10 = virtualinvoke r2.<android.graphics.drawable.Icon: android.graphics.drawable.Drawable loadDrawable(android.content.Context)>($r5);

        if r10 == null goto label2;

        $z0 = r10 instanceof android.graphics.drawable.BitmapDrawable;

        if $z0 == 0 goto label2;

        $r6 = (android.graphics.drawable.BitmapDrawable) r10;

        r11 = virtualinvoke $r6.<android.graphics.drawable.BitmapDrawable: android.graphics.Bitmap getBitmap()>();

        $r7 = r1.<android.app.Notification: android.os.Bundle extras>;

        virtualinvoke $r7.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("android.largeIcon", r11);

        r1.<android.app.Notification: android.graphics.Bitmap largeIcon> = r11;

     label2:
        return;
    }

    public android.service.notification.StatusBarNotification[] getActiveNotifications()
    {
        android.service.notification.NotificationListenerService r0;
        android.service.notification.StatusBarNotification[] r1;

        r0 := @this: android.service.notification.NotificationListenerService;

        r1 = virtualinvoke r0.<android.service.notification.NotificationListenerService: android.service.notification.StatusBarNotification[] getActiveNotifications(java.lang.String[],int)>(null, 0);

        if r1 == null goto label1;

        goto label2;

     label1:
        r1 = newarray (android.service.notification.StatusBarNotification)[0];

     label2:
        return r1;
    }

    public android.service.notification.StatusBarNotification[] getActiveNotifications(int)
    {
        android.service.notification.NotificationListenerService r0;
        int i0;
        android.service.notification.StatusBarNotification[] r1;

        r0 := @this: android.service.notification.NotificationListenerService;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<android.service.notification.NotificationListenerService: android.service.notification.StatusBarNotification[] getActiveNotifications(java.lang.String[],int)>(null, i0);

        if r1 == null goto label1;

        goto label2;

     label1:
        r1 = newarray (android.service.notification.StatusBarNotification)[0];

     label2:
        return r1;
    }

    public android.service.notification.StatusBarNotification[] getActiveNotifications(java.lang.String[])
    {
        android.service.notification.NotificationListenerService r0;
        java.lang.String[] r1;
        android.service.notification.StatusBarNotification[] r2;

        r0 := @this: android.service.notification.NotificationListenerService;

        r1 := @parameter0: java.lang.String[];

        r2 = virtualinvoke r0.<android.service.notification.NotificationListenerService: android.service.notification.StatusBarNotification[] getActiveNotifications(java.lang.String[],int)>(r1, 0);

        if r2 == null goto label1;

        goto label2;

     label1:
        r2 = newarray (android.service.notification.StatusBarNotification)[0];

     label2:
        return r2;
    }

    public android.service.notification.StatusBarNotification[] getActiveNotifications(java.lang.String[], int)
    {
        android.service.notification.NotificationListenerService r0;
        int i0;
        boolean $z0;
        android.app.INotificationManager $r1;
        android.service.notification.NotificationListenerService$NotificationListenerWrapper $r2;
        android.content.pm.ParceledListSlice $r3;
        android.os.RemoteException $r4;
        java.lang.String $r5;
        java.lang.String[] r6;
        android.service.notification.StatusBarNotification[] r7;

        r0 := @this: android.service.notification.NotificationListenerService;

        r6 := @parameter0: java.lang.String[];

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<android.service.notification.NotificationListenerService: boolean isBound()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<android.service.notification.NotificationListenerService: android.app.INotificationManager getNotificationInterface()>();

        $r2 = r0.<android.service.notification.NotificationListenerService: android.service.notification.NotificationListenerService$NotificationListenerWrapper mWrapper>;

        $r3 = interfaceinvoke $r1.<android.app.INotificationManager: android.content.pm.ParceledListSlice getActiveNotificationsFromListener(android.service.notification.INotificationListener,java.lang.String[],int)>($r2, r6, i0);

        r7 = specialinvoke r0.<android.service.notification.NotificationListenerService: android.service.notification.StatusBarNotification[] cleanUpNotificationList(android.content.pm.ParceledListSlice)>($r3);

     label2:
        return r7;

     label3:
        $r4 := @caughtexception;

        $r5 = r0.<android.service.notification.NotificationListenerService: java.lang.String TAG>;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Unable to contact notification manager", $r4);

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    protected android.content.Context getContext()
    {
        android.service.notification.NotificationListenerService r0;
        android.content.Context r1;

        r0 := @this: android.service.notification.NotificationListenerService;

        r1 = r0.<android.service.notification.NotificationListenerService: android.content.Context mSystemContext>;

        if r1 == null goto label1;

        return r1;

     label1:
        return r0;
    }

    public final int getCurrentInterruptionFilter()
    {
        android.service.notification.NotificationListenerService r0;
        int i0;
        boolean $z0;
        android.app.INotificationManager $r2;
        android.service.notification.NotificationListenerService$NotificationListenerWrapper $r3;
        android.os.RemoteException $r4;
        java.lang.String $r5;

        r0 := @this: android.service.notification.NotificationListenerService;

        $z0 = virtualinvoke r0.<android.service.notification.NotificationListenerService: boolean isBound()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r0.<android.service.notification.NotificationListenerService: android.app.INotificationManager getNotificationInterface()>();

        $r3 = r0.<android.service.notification.NotificationListenerService: android.service.notification.NotificationListenerService$NotificationListenerWrapper mWrapper>;

        i0 = interfaceinvoke $r2.<android.app.INotificationManager: int getInterruptionFilterFromListener(android.service.notification.INotificationListener)>($r3);

     label2:
        return i0;

     label3:
        $r4 := @caughtexception;

        $r5 = r0.<android.service.notification.NotificationListenerService: java.lang.String TAG>;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Unable to contact notification manager", $r4);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public final int getCurrentListenerHints()
    {
        android.service.notification.NotificationListenerService r0;
        int i0;
        boolean $z0;
        android.app.INotificationManager $r2;
        android.service.notification.NotificationListenerService$NotificationListenerWrapper $r3;
        android.os.RemoteException $r4;
        java.lang.String $r5;

        r0 := @this: android.service.notification.NotificationListenerService;

        $z0 = virtualinvoke r0.<android.service.notification.NotificationListenerService: boolean isBound()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r0.<android.service.notification.NotificationListenerService: android.app.INotificationManager getNotificationInterface()>();

        $r3 = r0.<android.service.notification.NotificationListenerService: android.service.notification.NotificationListenerService$NotificationListenerWrapper mWrapper>;

        i0 = interfaceinvoke $r2.<android.app.INotificationManager: int getHintsFromListener(android.service.notification.INotificationListener)>($r3);

     label2:
        return i0;

     label3:
        $r4 := @caughtexception;

        $r5 = r0.<android.service.notification.NotificationListenerService: java.lang.String TAG>;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Unable to contact notification manager", $r4);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.service.notification.NotificationListenerService$RankingMap getCurrentRanking()
    {
        android.service.notification.NotificationListenerService r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        android.service.notification.NotificationListenerService$RankingMap r3;

        r0 := @this: android.service.notification.NotificationListenerService;

        r1 = r0.<android.service.notification.NotificationListenerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r3 = r0.<android.service.notification.NotificationListenerService: android.service.notification.NotificationListenerService$RankingMap mRankingMap>;

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public final java.util.List getNotificationChannelGroups(java.lang.String, android.os.UserHandle)
    {
        android.service.notification.NotificationListenerService r0;
        android.os.UserHandle r1;
        boolean $z0;
        android.app.INotificationManager $r2;
        android.service.notification.NotificationListenerService$NotificationListenerWrapper $r3;
        android.content.pm.ParceledListSlice $r4;
        android.os.RemoteException $r5;
        java.lang.String $r6, r8;
        java.lang.RuntimeException $r7;
        java.util.List r9;

        r0 := @this: android.service.notification.NotificationListenerService;

        r8 := @parameter0: java.lang.String;

        r1 := @parameter1: android.os.UserHandle;

        $z0 = virtualinvoke r0.<android.service.notification.NotificationListenerService: boolean isBound()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r0.<android.service.notification.NotificationListenerService: android.app.INotificationManager getNotificationInterface()>();

        $r3 = r0.<android.service.notification.NotificationListenerService: android.service.notification.NotificationListenerService$NotificationListenerWrapper mWrapper>;

        $r4 = interfaceinvoke $r2.<android.app.INotificationManager: android.content.pm.ParceledListSlice getNotificationChannelGroupsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>($r3, r8, r1);

        r9 = virtualinvoke $r4.<android.content.pm.ParceledListSlice: java.util.List getList()>();

     label2:
        return r9;

     label3:
        $r5 := @caughtexception;

        $r6 = r0.<android.service.notification.NotificationListenerService: java.lang.String TAG>;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Unable to contact notification manager", $r5);

        $r7 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public final java.util.List getNotificationChannels(java.lang.String, android.os.UserHandle)
    {
        android.service.notification.NotificationListenerService r0;
        android.os.UserHandle r1;
        boolean $z0;
        android.app.INotificationManager $r2;
        android.service.notification.NotificationListenerService$NotificationListenerWrapper $r3;
        android.content.pm.ParceledListSlice $r4;
        android.os.RemoteException $r5;
        java.lang.String $r6, r8;
        java.lang.RuntimeException $r7;
        java.util.List r9;

        r0 := @this: android.service.notification.NotificationListenerService;

        r8 := @parameter0: java.lang.String;

        r1 := @parameter1: android.os.UserHandle;

        $z0 = virtualinvoke r0.<android.service.notification.NotificationListenerService: boolean isBound()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r0.<android.service.notification.NotificationListenerService: android.app.INotificationManager getNotificationInterface()>();

        $r3 = r0.<android.service.notification.NotificationListenerService: android.service.notification.NotificationListenerService$NotificationListenerWrapper mWrapper>;

        $r4 = interfaceinvoke $r2.<android.app.INotificationManager: android.content.pm.ParceledListSlice getNotificationChannelsFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle)>($r3, r8, r1);

        r9 = virtualinvoke $r4.<android.content.pm.ParceledListSlice: java.util.List getList()>();

     label2:
        return r9;

     label3:
        $r5 := @caughtexception;

        $r6 = r0.<android.service.notification.NotificationListenerService: java.lang.String TAG>;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Unable to contact notification manager", $r5);

        $r7 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    protected final android.app.INotificationManager getNotificationInterface()
    {
        android.service.notification.NotificationListenerService r0;
        android.app.INotificationManager $r1, $r2, $r4;
        android.os.IBinder $r3;

        r0 := @this: android.service.notification.NotificationListenerService;

        $r1 = r0.<android.service.notification.NotificationListenerService: android.app.INotificationManager mNoMan>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("notification");

        $r4 = staticinvoke <android.app.INotificationManager$Stub: android.app.INotificationManager asInterface(android.os.IBinder)>($r3);

        r0.<android.service.notification.NotificationListenerService: android.app.INotificationManager mNoMan> = $r4;

     label1:
        $r2 = r0.<android.service.notification.NotificationListenerService: android.app.INotificationManager mNoMan>;

        return $r2;
    }

    public final android.service.notification.StatusBarNotification[] getSnoozedNotifications()
    {
        android.service.notification.NotificationListenerService r0;
        android.app.INotificationManager $r1;
        android.service.notification.NotificationListenerService$NotificationListenerWrapper $r2;
        android.content.pm.ParceledListSlice $r3;
        android.os.RemoteException $r4;
        java.lang.String $r5;
        android.service.notification.StatusBarNotification[] r6;

        r0 := @this: android.service.notification.NotificationListenerService;

     label1:
        $r1 = virtualinvoke r0.<android.service.notification.NotificationListenerService: android.app.INotificationManager getNotificationInterface()>();

        $r2 = r0.<android.service.notification.NotificationListenerService: android.service.notification.NotificationListenerService$NotificationListenerWrapper mWrapper>;

        $r3 = interfaceinvoke $r1.<android.app.INotificationManager: android.content.pm.ParceledListSlice getSnoozedNotificationsFromListener(android.service.notification.INotificationListener,int)>($r2, 0);

        r6 = specialinvoke r0.<android.service.notification.NotificationListenerService: android.service.notification.StatusBarNotification[] cleanUpNotificationList(android.content.pm.ParceledListSlice)>($r3);

     label2:
        return r6;

     label3:
        $r4 := @caughtexception;

        $r5 = r0.<android.service.notification.NotificationListenerService: java.lang.String TAG>;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Unable to contact notification manager", $r4);

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    protected boolean isBound()
    {
        android.service.notification.NotificationListenerService r0;
        android.service.notification.NotificationListenerService$NotificationListenerWrapper $r1;
        java.lang.String $r2;

        r0 := @this: android.service.notification.NotificationListenerService;

        $r1 = r0.<android.service.notification.NotificationListenerService: android.service.notification.NotificationListenerService$NotificationListenerWrapper mWrapper>;

        if $r1 != null goto label1;

        $r2 = r0.<android.service.notification.NotificationListenerService: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r2, "Notification listener service not yet bound.");

        return 0;

     label1:
        return 1;
    }

    public android.os.IBinder onBind(android.content.Intent)
    {
        android.service.notification.NotificationListenerService r0;
        android.content.Intent r1;
        android.service.notification.NotificationListenerService$NotificationListenerWrapper $r2, $r3, $r4;

        r0 := @this: android.service.notification.NotificationListenerService;

        r1 := @parameter0: android.content.Intent;

        $r2 = r0.<android.service.notification.NotificationListenerService: android.service.notification.NotificationListenerService$NotificationListenerWrapper mWrapper>;

        if $r2 != null goto label1;

        $r4 = new android.service.notification.NotificationListenerService$NotificationListenerWrapper;

        specialinvoke $r4.<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void <init>(android.service.notification.NotificationListenerService)>(r0);

        r0.<android.service.notification.NotificationListenerService: android.service.notification.NotificationListenerService$NotificationListenerWrapper mWrapper> = $r4;

     label1:
        $r3 = r0.<android.service.notification.NotificationListenerService: android.service.notification.NotificationListenerService$NotificationListenerWrapper mWrapper>;

        return $r3;
    }

    public void onDestroy()
    {
        android.service.notification.NotificationListenerService r0;

        r0 := @this: android.service.notification.NotificationListenerService;

        virtualinvoke r0.<android.service.notification.NotificationListenerService: void onListenerDisconnected()>();

        specialinvoke r0.<android.app.Service: void onDestroy()>();

        return;
    }

    public void onInterruptionFilterChanged(int)
    {
        android.service.notification.NotificationListenerService r0;
        int i0;

        r0 := @this: android.service.notification.NotificationListenerService;

        i0 := @parameter0: int;

        return;
    }

    public void onListenerConnected()
    {
        android.service.notification.NotificationListenerService r0;

        r0 := @this: android.service.notification.NotificationListenerService;

        return;
    }

    public void onListenerDisconnected()
    {
        android.service.notification.NotificationListenerService r0;

        r0 := @this: android.service.notification.NotificationListenerService;

        return;
    }

    public void onListenerHintsChanged(int)
    {
        android.service.notification.NotificationListenerService r0;
        int i0;

        r0 := @this: android.service.notification.NotificationListenerService;

        i0 := @parameter0: int;

        return;
    }

    public void onNotificationChannelGroupModified(java.lang.String, android.os.UserHandle, android.app.NotificationChannelGroup, int)
    {
        android.service.notification.NotificationListenerService r0;
        java.lang.String r1;
        android.os.UserHandle r2;
        android.app.NotificationChannelGroup r3;
        int i0;

        r0 := @this: android.service.notification.NotificationListenerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.UserHandle;

        r3 := @parameter2: android.app.NotificationChannelGroup;

        i0 := @parameter3: int;

        return;
    }

    public void onNotificationChannelModified(java.lang.String, android.os.UserHandle, android.app.NotificationChannel, int)
    {
        android.service.notification.NotificationListenerService r0;
        java.lang.String r1;
        android.os.UserHandle r2;
        android.app.NotificationChannel r3;
        int i0;

        r0 := @this: android.service.notification.NotificationListenerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.UserHandle;

        r3 := @parameter2: android.app.NotificationChannel;

        i0 := @parameter3: int;

        return;
    }

    public void onNotificationPosted(android.service.notification.StatusBarNotification)
    {
        android.service.notification.NotificationListenerService r0;
        android.service.notification.StatusBarNotification r1;

        r0 := @this: android.service.notification.NotificationListenerService;

        r1 := @parameter0: android.service.notification.StatusBarNotification;

        return;
    }

    public void onNotificationPosted(android.service.notification.StatusBarNotification, android.service.notification.NotificationListenerService$RankingMap)
    {
        android.service.notification.NotificationListenerService r0;
        android.service.notification.StatusBarNotification r1;
        android.service.notification.NotificationListenerService$RankingMap r2;

        r0 := @this: android.service.notification.NotificationListenerService;

        r1 := @parameter0: android.service.notification.StatusBarNotification;

        r2 := @parameter1: android.service.notification.NotificationListenerService$RankingMap;

        virtualinvoke r0.<android.service.notification.NotificationListenerService: void onNotificationPosted(android.service.notification.StatusBarNotification)>(r1);

        return;
    }

    public void onNotificationRankingUpdate(android.service.notification.NotificationListenerService$RankingMap)
    {
        android.service.notification.NotificationListenerService r0;
        android.service.notification.NotificationListenerService$RankingMap r1;

        r0 := @this: android.service.notification.NotificationListenerService;

        r1 := @parameter0: android.service.notification.NotificationListenerService$RankingMap;

        return;
    }

    public void onNotificationRemoved(android.service.notification.StatusBarNotification)
    {
        android.service.notification.NotificationListenerService r0;
        android.service.notification.StatusBarNotification r1;

        r0 := @this: android.service.notification.NotificationListenerService;

        r1 := @parameter0: android.service.notification.StatusBarNotification;

        return;
    }

    public void onNotificationRemoved(android.service.notification.StatusBarNotification, android.service.notification.NotificationListenerService$RankingMap)
    {
        android.service.notification.NotificationListenerService r0;
        android.service.notification.StatusBarNotification r1;
        android.service.notification.NotificationListenerService$RankingMap r2;

        r0 := @this: android.service.notification.NotificationListenerService;

        r1 := @parameter0: android.service.notification.StatusBarNotification;

        r2 := @parameter1: android.service.notification.NotificationListenerService$RankingMap;

        virtualinvoke r0.<android.service.notification.NotificationListenerService: void onNotificationRemoved(android.service.notification.StatusBarNotification)>(r1);

        return;
    }

    public void onNotificationRemoved(android.service.notification.StatusBarNotification, android.service.notification.NotificationListenerService$RankingMap, int)
    {
        android.service.notification.NotificationListenerService r0;
        android.service.notification.StatusBarNotification r1;
        android.service.notification.NotificationListenerService$RankingMap r2;
        int i0;

        r0 := @this: android.service.notification.NotificationListenerService;

        r1 := @parameter0: android.service.notification.StatusBarNotification;

        r2 := @parameter1: android.service.notification.NotificationListenerService$RankingMap;

        i0 := @parameter2: int;

        virtualinvoke r0.<android.service.notification.NotificationListenerService: void onNotificationRemoved(android.service.notification.StatusBarNotification,android.service.notification.NotificationListenerService$RankingMap)>(r1, r2);

        return;
    }

    public void onNotificationRemoved(android.service.notification.StatusBarNotification, android.service.notification.NotificationListenerService$RankingMap, android.service.notification.NotificationStats, int)
    {
        android.service.notification.NotificationListenerService r0;
        android.service.notification.StatusBarNotification r1;
        android.service.notification.NotificationListenerService$RankingMap r2;
        android.service.notification.NotificationStats r3;
        int i0;

        r0 := @this: android.service.notification.NotificationListenerService;

        r1 := @parameter0: android.service.notification.StatusBarNotification;

        r2 := @parameter1: android.service.notification.NotificationListenerService$RankingMap;

        r3 := @parameter2: android.service.notification.NotificationStats;

        i0 := @parameter3: int;

        virtualinvoke r0.<android.service.notification.NotificationListenerService: void onNotificationRemoved(android.service.notification.StatusBarNotification,android.service.notification.NotificationListenerService$RankingMap,int)>(r1, r2, i0);

        return;
    }

    public void onSilentStatusBarIconsVisibilityChanged(boolean)
    {
        android.service.notification.NotificationListenerService r0;
        boolean z0;

        r0 := @this: android.service.notification.NotificationListenerService;

        z0 := @parameter0: boolean;

        return;
    }

    public void registerAsSystemService(android.content.Context, android.content.ComponentName, int) throws android.os.RemoteException
    {
        android.service.notification.NotificationListenerService r0;
        android.content.Context r1;
        android.content.ComponentName r2;
        int i0;
        android.app.INotificationManager r3;
        android.service.notification.NotificationListenerService$NotificationListenerWrapper $r4, $r7, $r8;
        android.service.notification.NotificationListenerService$MyHandler $r5;
        android.os.Looper $r6;

        r0 := @this: android.service.notification.NotificationListenerService;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.content.ComponentName;

        i0 := @parameter2: int;

        $r4 = r0.<android.service.notification.NotificationListenerService: android.service.notification.NotificationListenerService$NotificationListenerWrapper mWrapper>;

        if $r4 != null goto label1;

        $r8 = new android.service.notification.NotificationListenerService$NotificationListenerWrapper;

        specialinvoke $r8.<android.service.notification.NotificationListenerService$NotificationListenerWrapper: void <init>(android.service.notification.NotificationListenerService)>(r0);

        r0.<android.service.notification.NotificationListenerService: android.service.notification.NotificationListenerService$NotificationListenerWrapper mWrapper> = $r8;

     label1:
        r0.<android.service.notification.NotificationListenerService: android.content.Context mSystemContext> = r1;

        r3 = virtualinvoke r0.<android.service.notification.NotificationListenerService: android.app.INotificationManager getNotificationInterface()>();

        $r5 = new android.service.notification.NotificationListenerService$MyHandler;

        $r6 = virtualinvoke r1.<android.content.Context: android.os.Looper getMainLooper()>();

        specialinvoke $r5.<android.service.notification.NotificationListenerService$MyHandler: void <init>(android.service.notification.NotificationListenerService,android.os.Looper)>(r0, $r6);

        r0.<android.service.notification.NotificationListenerService: android.os.Handler mHandler> = $r5;

        r0.<android.service.notification.NotificationListenerService: int mCurrentUser> = i0;

        $r7 = r0.<android.service.notification.NotificationListenerService: android.service.notification.NotificationListenerService$NotificationListenerWrapper mWrapper>;

        interfaceinvoke r3.<android.app.INotificationManager: void registerListener(android.service.notification.INotificationListener,android.content.ComponentName,int)>($r7, r2, i0);

        return;
    }

    public final void requestInterruptionFilter(int)
    {
        android.service.notification.NotificationListenerService r0;
        int i0;
        boolean $z0;
        android.app.INotificationManager $r2;
        android.service.notification.NotificationListenerService$NotificationListenerWrapper $r3;
        android.os.RemoteException $r4;
        java.lang.String $r5;

        r0 := @this: android.service.notification.NotificationListenerService;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<android.service.notification.NotificationListenerService: boolean isBound()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r0.<android.service.notification.NotificationListenerService: android.app.INotificationManager getNotificationInterface()>();

        $r3 = r0.<android.service.notification.NotificationListenerService: android.service.notification.NotificationListenerService$NotificationListenerWrapper mWrapper>;

        interfaceinvoke $r2.<android.app.INotificationManager: void requestInterruptionFilterFromListener(android.service.notification.INotificationListener,int)>($r3, i0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = r0.<android.service.notification.NotificationListenerService: java.lang.String TAG>;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Unable to contact notification manager", $r4);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public final void requestListenerHints(int)
    {
        android.service.notification.NotificationListenerService r0;
        int i0;
        boolean $z0;
        android.app.INotificationManager $r2;
        android.service.notification.NotificationListenerService$NotificationListenerWrapper $r3;
        android.os.RemoteException $r4;
        java.lang.String $r5;

        r0 := @this: android.service.notification.NotificationListenerService;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<android.service.notification.NotificationListenerService: boolean isBound()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r0.<android.service.notification.NotificationListenerService: android.app.INotificationManager getNotificationInterface()>();

        $r3 = r0.<android.service.notification.NotificationListenerService: android.service.notification.NotificationListenerService$NotificationListenerWrapper mWrapper>;

        interfaceinvoke $r2.<android.app.INotificationManager: void requestHintsFromListener(android.service.notification.INotificationListener,int)>($r3, i0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = r0.<android.service.notification.NotificationListenerService: java.lang.String TAG>;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Unable to contact notification manager", $r4);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public final void requestUnbind()
    {
        android.service.notification.NotificationListenerService r0;
        android.service.notification.NotificationListenerService$NotificationListenerWrapper $r1, $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.app.INotificationManager r5;

        r0 := @this: android.service.notification.NotificationListenerService;

        $r1 = r0.<android.service.notification.NotificationListenerService: android.service.notification.NotificationListenerService$NotificationListenerWrapper mWrapper>;

        if $r1 == null goto label4;

        r5 = virtualinvoke r0.<android.service.notification.NotificationListenerService: android.app.INotificationManager getNotificationInterface()>();

     label1:
        $r2 = r0.<android.service.notification.NotificationListenerService: android.service.notification.NotificationListenerService$NotificationListenerWrapper mWrapper>;

        interfaceinvoke r5.<android.app.INotificationManager: void requestUnbindListener(android.service.notification.INotificationListener)>($r2);

        r0.<android.service.notification.NotificationListenerService: boolean isConnected> = 0;

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public final void setNotificationsShown(java.lang.String[])
    {
        android.service.notification.NotificationListenerService r0;
        boolean $z0;
        android.app.INotificationManager $r1;
        android.service.notification.NotificationListenerService$NotificationListenerWrapper $r2;
        android.os.RemoteException $r3;
        java.lang.String $r4;
        java.lang.String[] r5;

        r0 := @this: android.service.notification.NotificationListenerService;

        r5 := @parameter0: java.lang.String[];

        $z0 = virtualinvoke r0.<android.service.notification.NotificationListenerService: boolean isBound()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = virtualinvoke r0.<android.service.notification.NotificationListenerService: android.app.INotificationManager getNotificationInterface()>();

        $r2 = r0.<android.service.notification.NotificationListenerService: android.service.notification.NotificationListenerService$NotificationListenerWrapper mWrapper>;

        interfaceinvoke $r1.<android.app.INotificationManager: void setNotificationsShownFromListener(android.service.notification.INotificationListener,java.lang.String[])>($r2, r5);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = r0.<android.service.notification.NotificationListenerService: java.lang.String TAG>;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Unable to contact notification manager", $r3);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public final void setOnNotificationPostedTrim(int)
    {
        android.service.notification.NotificationListenerService r0;
        int i0;
        boolean $z0;
        android.app.INotificationManager $r2;
        android.service.notification.NotificationListenerService$NotificationListenerWrapper $r3;
        android.os.RemoteException $r4;
        java.lang.String $r5;

        r0 := @this: android.service.notification.NotificationListenerService;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<android.service.notification.NotificationListenerService: boolean isBound()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r0.<android.service.notification.NotificationListenerService: android.app.INotificationManager getNotificationInterface()>();

        $r3 = r0.<android.service.notification.NotificationListenerService: android.service.notification.NotificationListenerService$NotificationListenerWrapper mWrapper>;

        interfaceinvoke $r2.<android.app.INotificationManager: void setOnNotificationPostedTrimFromListener(android.service.notification.INotificationListener,int)>($r3, i0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = r0.<android.service.notification.NotificationListenerService: java.lang.String TAG>;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Unable to contact notification manager", $r4);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public final void snoozeNotification(java.lang.String, long)
    {
        android.service.notification.NotificationListenerService r0;
        long l0;
        boolean $z0;
        android.app.INotificationManager $r1;
        android.service.notification.NotificationListenerService$NotificationListenerWrapper $r2;
        android.os.RemoteException $r3;
        java.lang.String $r4, r5;

        r0 := @this: android.service.notification.NotificationListenerService;

        r5 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $z0 = virtualinvoke r0.<android.service.notification.NotificationListenerService: boolean isBound()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = virtualinvoke r0.<android.service.notification.NotificationListenerService: android.app.INotificationManager getNotificationInterface()>();

        $r2 = r0.<android.service.notification.NotificationListenerService: android.service.notification.NotificationListenerService$NotificationListenerWrapper mWrapper>;

        interfaceinvoke $r1.<android.app.INotificationManager: void snoozeNotificationUntilFromListener(android.service.notification.INotificationListener,java.lang.String,long)>($r2, r5, l0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = r0.<android.service.notification.NotificationListenerService: java.lang.String TAG>;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Unable to contact notification manager", $r3);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public final void snoozeNotification(java.lang.String, java.lang.String)
    {
        android.service.notification.NotificationListenerService r0;
        java.lang.String r1, $r5, r6;
        boolean $z0;
        android.app.INotificationManager $r2;
        android.service.notification.NotificationListenerService$NotificationListenerWrapper $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.service.notification.NotificationListenerService;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<android.service.notification.NotificationListenerService: boolean isBound()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r0.<android.service.notification.NotificationListenerService: android.app.INotificationManager getNotificationInterface()>();

        $r3 = r0.<android.service.notification.NotificationListenerService: android.service.notification.NotificationListenerService$NotificationListenerWrapper mWrapper>;

        interfaceinvoke $r2.<android.app.INotificationManager: void snoozeNotificationUntilContextFromListener(android.service.notification.INotificationListener,java.lang.String,java.lang.String)>($r3, r6, r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = r0.<android.service.notification.NotificationListenerService: java.lang.String TAG>;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>($r5, "Unable to contact notification manager", $r4);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void unregisterAsSystemService() throws android.os.RemoteException
    {
        android.service.notification.NotificationListenerService r0;
        android.service.notification.NotificationListenerService$NotificationListenerWrapper $r1, $r3;
        android.app.INotificationManager $r2;
        int $i0;

        r0 := @this: android.service.notification.NotificationListenerService;

        $r1 = r0.<android.service.notification.NotificationListenerService: android.service.notification.NotificationListenerService$NotificationListenerWrapper mWrapper>;

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<android.service.notification.NotificationListenerService: android.app.INotificationManager getNotificationInterface()>();

        $r3 = r0.<android.service.notification.NotificationListenerService: android.service.notification.NotificationListenerService$NotificationListenerWrapper mWrapper>;

        $i0 = r0.<android.service.notification.NotificationListenerService: int mCurrentUser>;

        interfaceinvoke $r2.<android.app.INotificationManager: void unregisterListener(android.service.notification.INotificationListener,int)>($r3, $i0);

     label1:
        return;
    }

    public final void updateNotificationChannel(java.lang.String, android.os.UserHandle, android.app.NotificationChannel)
    {
        android.service.notification.NotificationListenerService r0;
        android.os.UserHandle r1;
        android.app.NotificationChannel r2;
        boolean $z0;
        android.app.INotificationManager $r3;
        android.service.notification.NotificationListenerService$NotificationListenerWrapper $r4;
        android.os.RemoteException $r5;
        java.lang.String $r6, r8;
        java.lang.RuntimeException $r7;

        r0 := @this: android.service.notification.NotificationListenerService;

        r8 := @parameter0: java.lang.String;

        r1 := @parameter1: android.os.UserHandle;

        r2 := @parameter2: android.app.NotificationChannel;

        $z0 = virtualinvoke r0.<android.service.notification.NotificationListenerService: boolean isBound()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = virtualinvoke r0.<android.service.notification.NotificationListenerService: android.app.INotificationManager getNotificationInterface()>();

        $r4 = r0.<android.service.notification.NotificationListenerService: android.service.notification.NotificationListenerService$NotificationListenerWrapper mWrapper>;

        interfaceinvoke $r3.<android.app.INotificationManager: void updateNotificationChannelFromPrivilegedListener(android.service.notification.INotificationListener,java.lang.String,android.os.UserHandle,android.app.NotificationChannel)>($r4, r8, r1, r2);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        $r6 = r0.<android.service.notification.NotificationListenerService: java.lang.String TAG>;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Unable to contact notification manager", $r5);

        $r7 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <android.service.notification.NotificationListenerService: int TRIM_LIGHT> = 1;

        <android.service.notification.NotificationListenerService: int TRIM_FULL> = 0;

        <android.service.notification.NotificationListenerService: int SUPPRESSED_EFFECT_SCREEN_ON> = 2;

        <android.service.notification.NotificationListenerService: int SUPPRESSED_EFFECT_SCREEN_OFF> = 1;

        <android.service.notification.NotificationListenerService: java.lang.String SERVICE_INTERFACE> = "android.service.notification.NotificationListenerService";

        <android.service.notification.NotificationListenerService: int REASON_USER_STOPPED> = 6;

        <android.service.notification.NotificationListenerService: int REASON_UNAUTOBUNDLED> = 16;

        <android.service.notification.NotificationListenerService: int REASON_TIMEOUT> = 19;

        <android.service.notification.NotificationListenerService: int REASON_SNOOZED> = 18;

        <android.service.notification.NotificationListenerService: int REASON_PROFILE_TURNED_OFF> = 15;

        <android.service.notification.NotificationListenerService: int REASON_PACKAGE_SUSPENDED> = 14;

        <android.service.notification.NotificationListenerService: int REASON_PACKAGE_CHANGED> = 5;

        <android.service.notification.NotificationListenerService: int REASON_PACKAGE_BANNED> = 7;

        <android.service.notification.NotificationListenerService: int REASON_LISTENER_CANCEL_ALL> = 11;

        <android.service.notification.NotificationListenerService: int REASON_LISTENER_CANCEL> = 10;

        <android.service.notification.NotificationListenerService: int REASON_GROUP_SUMMARY_CANCELED> = 12;

        <android.service.notification.NotificationListenerService: int REASON_GROUP_OPTIMIZATION> = 13;

        <android.service.notification.NotificationListenerService: int REASON_ERROR> = 4;

        <android.service.notification.NotificationListenerService: int REASON_CLICK> = 1;

        <android.service.notification.NotificationListenerService: int REASON_CHANNEL_BANNED> = 17;

        <android.service.notification.NotificationListenerService: int REASON_CANCEL_ALL> = 3;

        <android.service.notification.NotificationListenerService: int REASON_CANCEL> = 2;

        <android.service.notification.NotificationListenerService: int REASON_APP_CANCEL_ALL> = 9;

        <android.service.notification.NotificationListenerService: int REASON_APP_CANCEL> = 8;

        <android.service.notification.NotificationListenerService: int NOTIFICATION_CHANNEL_OR_GROUP_UPDATED> = 2;

        <android.service.notification.NotificationListenerService: int NOTIFICATION_CHANNEL_OR_GROUP_DELETED> = 3;

        <android.service.notification.NotificationListenerService: int NOTIFICATION_CHANNEL_OR_GROUP_ADDED> = 1;

        <android.service.notification.NotificationListenerService: int INTERRUPTION_FILTER_UNKNOWN> = 0;

        <android.service.notification.NotificationListenerService: int INTERRUPTION_FILTER_PRIORITY> = 2;

        <android.service.notification.NotificationListenerService: int INTERRUPTION_FILTER_NONE> = 3;

        <android.service.notification.NotificationListenerService: int INTERRUPTION_FILTER_ALL> = 1;

        <android.service.notification.NotificationListenerService: int INTERRUPTION_FILTER_ALARMS> = 4;

        <android.service.notification.NotificationListenerService: int HINT_HOST_DISABLE_NOTIFICATION_EFFECTS> = 2;

        <android.service.notification.NotificationListenerService: int HINT_HOST_DISABLE_EFFECTS> = 1;

        <android.service.notification.NotificationListenerService: int HINT_HOST_DISABLE_CALL_EFFECTS> = 4;

        return;
    }
}
