class android.service.wallpaper.IWallpaperEngine$Stub$Proxy extends java.lang.Object implements android.service.wallpaper.IWallpaperEngine
{
    public static android.service.wallpaper.IWallpaperEngine sDefaultImpl;
    private android.os.IBinder mRemote;

    void <init>(android.os.IBinder)
    {
        android.service.wallpaper.IWallpaperEngine$Stub$Proxy r0;
        android.os.IBinder r1;

        r0 := @this: android.service.wallpaper.IWallpaperEngine$Stub$Proxy;

        r1 := @parameter0: android.os.IBinder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.service.wallpaper.IWallpaperEngine$Stub$Proxy: android.os.IBinder mRemote> = r1;

        return;
    }

    public android.os.IBinder asBinder()
    {
        android.service.wallpaper.IWallpaperEngine$Stub$Proxy r0;
        android.os.IBinder $r1;

        r0 := @this: android.service.wallpaper.IWallpaperEngine$Stub$Proxy;

        $r1 = r0.<android.service.wallpaper.IWallpaperEngine$Stub$Proxy: android.os.IBinder mRemote>;

        return $r1;
    }

    public void destroy() throws android.os.RemoteException
    {
        android.service.wallpaper.IWallpaperEngine$Stub$Proxy r0;
        android.os.Parcel r1;
        android.os.IBinder $r3;
        boolean $z0;
        android.service.wallpaper.IWallpaperEngine $r4, $r5;
        java.lang.Throwable $r6;

        r0 := @this: android.service.wallpaper.IWallpaperEngine$Stub$Proxy;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.service.wallpaper.IWallpaperEngine");

        $r3 = r0.<android.service.wallpaper.IWallpaperEngine$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(8, r1, null, 1);

        if $z0 != 0 goto label3;

        $r4 = staticinvoke <android.service.wallpaper.IWallpaperEngine$Stub: android.service.wallpaper.IWallpaperEngine getDefaultImpl()>();

        if $r4 == null goto label3;

        $r5 = staticinvoke <android.service.wallpaper.IWallpaperEngine$Stub: android.service.wallpaper.IWallpaperEngine getDefaultImpl()>();

        interfaceinvoke $r5.<android.service.wallpaper.IWallpaperEngine: void destroy()>();

     label2:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label4:
        $r6 := @caughtexception;

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public void dispatchPointer(android.view.MotionEvent) throws android.os.RemoteException
    {
        android.service.wallpaper.IWallpaperEngine$Stub$Proxy r0;
        android.os.Parcel r1;
        android.os.IBinder $r2;
        boolean $z0;
        android.service.wallpaper.IWallpaperEngine $r3, $r4;
        java.lang.Throwable $r5;
        android.view.MotionEvent r6;

        r0 := @this: android.service.wallpaper.IWallpaperEngine$Stub$Proxy;

        r6 := @parameter0: android.view.MotionEvent;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.service.wallpaper.IWallpaperEngine");

     label2:
        if r6 == null goto label5;

     label3:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(1);

        virtualinvoke r6.<android.view.MotionEvent: void writeToParcel(android.os.Parcel,int)>(r1, 0);

     label4:
        goto label6;

     label5:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(0);

     label6:
        $r2 = r0.<android.service.wallpaper.IWallpaperEngine$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r2.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(5, r1, null, 1);

        if $z0 != 0 goto label8;

        $r3 = staticinvoke <android.service.wallpaper.IWallpaperEngine$Stub: android.service.wallpaper.IWallpaperEngine getDefaultImpl()>();

        if $r3 == null goto label8;

        $r4 = staticinvoke <android.service.wallpaper.IWallpaperEngine$Stub: android.service.wallpaper.IWallpaperEngine getDefaultImpl()>();

        interfaceinvoke $r4.<android.service.wallpaper.IWallpaperEngine: void dispatchPointer(android.view.MotionEvent)>(r6);

     label7:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label8:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label9:
        $r5 := @caughtexception;

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label9;
        catch java.lang.Throwable from label3 to label4 with label9;
        catch java.lang.Throwable from label5 to label6 with label9;
        catch java.lang.Throwable from label6 to label7 with label9;
    }

    public void dispatchWallpaperCommand(java.lang.String, int, int, int, android.os.Bundle) throws android.os.RemoteException
    {
        android.service.wallpaper.IWallpaperEngine$Stub$Proxy r0;
        int i0, i1, i2;
        android.os.Bundle r1;
        android.os.Parcel r2;
        android.os.IBinder $r3;
        boolean $z0;
        android.service.wallpaper.IWallpaperEngine $r4, $r5;
        java.lang.Throwable $r6;
        java.lang.String r7;

        r0 := @this: android.service.wallpaper.IWallpaperEngine$Stub$Proxy;

        r7 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r1 := @parameter4: android.os.Bundle;

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r2.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.service.wallpaper.IWallpaperEngine");

        virtualinvoke r2.<android.os.Parcel: void writeString(java.lang.String)>(r7);

        virtualinvoke r2.<android.os.Parcel: void writeInt(int)>(i0);

        virtualinvoke r2.<android.os.Parcel: void writeInt(int)>(i1);

        virtualinvoke r2.<android.os.Parcel: void writeInt(int)>(i2);

     label2:
        if r1 == null goto label5;

     label3:
        virtualinvoke r2.<android.os.Parcel: void writeInt(int)>(1);

        virtualinvoke r1.<android.os.Bundle: void writeToParcel(android.os.Parcel,int)>(r2, 0);

     label4:
        goto label6;

     label5:
        virtualinvoke r2.<android.os.Parcel: void writeInt(int)>(0);

     label6:
        $r3 = r0.<android.service.wallpaper.IWallpaperEngine$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(6, r2, null, 1);

        if $z0 != 0 goto label8;

        $r4 = staticinvoke <android.service.wallpaper.IWallpaperEngine$Stub: android.service.wallpaper.IWallpaperEngine getDefaultImpl()>();

        if $r4 == null goto label8;

        $r5 = staticinvoke <android.service.wallpaper.IWallpaperEngine$Stub: android.service.wallpaper.IWallpaperEngine getDefaultImpl()>();

        interfaceinvoke $r5.<android.service.wallpaper.IWallpaperEngine: void dispatchWallpaperCommand(java.lang.String,int,int,int,android.os.Bundle)>(r7, i0, i1, i2, r1);

     label7:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        return;

     label8:
        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        return;

     label9:
        $r6 := @caughtexception;

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label9;
        catch java.lang.Throwable from label3 to label4 with label9;
        catch java.lang.Throwable from label5 to label6 with label9;
        catch java.lang.Throwable from label6 to label7 with label9;
    }

    public java.lang.String getInterfaceDescriptor()
    {
        android.service.wallpaper.IWallpaperEngine$Stub$Proxy r0;

        r0 := @this: android.service.wallpaper.IWallpaperEngine$Stub$Proxy;

        return "android.service.wallpaper.IWallpaperEngine";
    }

    public void requestWallpaperColors() throws android.os.RemoteException
    {
        android.service.wallpaper.IWallpaperEngine$Stub$Proxy r0;
        android.os.Parcel r1;
        android.os.IBinder $r3;
        boolean $z0;
        android.service.wallpaper.IWallpaperEngine $r4, $r5;
        java.lang.Throwable $r6;

        r0 := @this: android.service.wallpaper.IWallpaperEngine$Stub$Proxy;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.service.wallpaper.IWallpaperEngine");

        $r3 = r0.<android.service.wallpaper.IWallpaperEngine$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(7, r1, null, 1);

        if $z0 != 0 goto label3;

        $r4 = staticinvoke <android.service.wallpaper.IWallpaperEngine$Stub: android.service.wallpaper.IWallpaperEngine getDefaultImpl()>();

        if $r4 == null goto label3;

        $r5 = staticinvoke <android.service.wallpaper.IWallpaperEngine$Stub: android.service.wallpaper.IWallpaperEngine getDefaultImpl()>();

        interfaceinvoke $r5.<android.service.wallpaper.IWallpaperEngine: void requestWallpaperColors()>();

     label2:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label4:
        $r6 := @caughtexception;

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public void setDesiredSize(int, int) throws android.os.RemoteException
    {
        android.service.wallpaper.IWallpaperEngine$Stub$Proxy r0;
        int i0, i1;
        android.os.Parcel r1;
        android.os.IBinder $r3;
        boolean $z0;
        android.service.wallpaper.IWallpaperEngine $r4, $r5;
        java.lang.Throwable $r6;

        r0 := @this: android.service.wallpaper.IWallpaperEngine$Stub$Proxy;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.service.wallpaper.IWallpaperEngine");

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i0);

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i1);

        $r3 = r0.<android.service.wallpaper.IWallpaperEngine$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(1, r1, null, 1);

        if $z0 != 0 goto label3;

        $r4 = staticinvoke <android.service.wallpaper.IWallpaperEngine$Stub: android.service.wallpaper.IWallpaperEngine getDefaultImpl()>();

        if $r4 == null goto label3;

        $r5 = staticinvoke <android.service.wallpaper.IWallpaperEngine$Stub: android.service.wallpaper.IWallpaperEngine getDefaultImpl()>();

        interfaceinvoke $r5.<android.service.wallpaper.IWallpaperEngine: void setDesiredSize(int,int)>(i0, i1);

     label2:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label4:
        $r6 := @caughtexception;

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public void setDisplayPadding(android.graphics.Rect) throws android.os.RemoteException
    {
        android.service.wallpaper.IWallpaperEngine$Stub$Proxy r0;
        android.os.Parcel r1;
        android.os.IBinder $r2;
        boolean $z0;
        android.service.wallpaper.IWallpaperEngine $r3, $r4;
        java.lang.Throwable $r5;
        android.graphics.Rect r6;

        r0 := @this: android.service.wallpaper.IWallpaperEngine$Stub$Proxy;

        r6 := @parameter0: android.graphics.Rect;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.service.wallpaper.IWallpaperEngine");

     label2:
        if r6 == null goto label5;

     label3:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(1);

        virtualinvoke r6.<android.graphics.Rect: void writeToParcel(android.os.Parcel,int)>(r1, 0);

     label4:
        goto label6;

     label5:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(0);

     label6:
        $r2 = r0.<android.service.wallpaper.IWallpaperEngine$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r2.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(2, r1, null, 1);

        if $z0 != 0 goto label8;

        $r3 = staticinvoke <android.service.wallpaper.IWallpaperEngine$Stub: android.service.wallpaper.IWallpaperEngine getDefaultImpl()>();

        if $r3 == null goto label8;

        $r4 = staticinvoke <android.service.wallpaper.IWallpaperEngine$Stub: android.service.wallpaper.IWallpaperEngine getDefaultImpl()>();

        interfaceinvoke $r4.<android.service.wallpaper.IWallpaperEngine: void setDisplayPadding(android.graphics.Rect)>(r6);

     label7:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label8:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label9:
        $r5 := @caughtexception;

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label9;
        catch java.lang.Throwable from label3 to label4 with label9;
        catch java.lang.Throwable from label5 to label6 with label9;
        catch java.lang.Throwable from label6 to label7 with label9;
    }

    public void setInAmbientMode(boolean, long) throws android.os.RemoteException
    {
        android.service.wallpaper.IWallpaperEngine$Stub$Proxy r0;
        boolean z0, $z1;
        long l0;
        android.os.Parcel r1;
        android.os.IBinder $r3;
        android.service.wallpaper.IWallpaperEngine $r4, $r5;
        java.lang.Throwable $r6;
        byte b1;

        r0 := @this: android.service.wallpaper.IWallpaperEngine$Stub$Proxy;

        z0 := @parameter0: boolean;

        l0 := @parameter1: long;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.service.wallpaper.IWallpaperEngine");

     label2:
        if z0 == 0 goto label3;

        b1 = 1;

        goto label4;

     label3:
        b1 = 0;

     label4:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(b1);

        virtualinvoke r1.<android.os.Parcel: void writeLong(long)>(l0);

        $r3 = r0.<android.service.wallpaper.IWallpaperEngine$Stub$Proxy: android.os.IBinder mRemote>;

        $z1 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(4, r1, null, 1);

        if $z1 != 0 goto label6;

        $r4 = staticinvoke <android.service.wallpaper.IWallpaperEngine$Stub: android.service.wallpaper.IWallpaperEngine getDefaultImpl()>();

        if $r4 == null goto label6;

        $r5 = staticinvoke <android.service.wallpaper.IWallpaperEngine$Stub: android.service.wallpaper.IWallpaperEngine getDefaultImpl()>();

        interfaceinvoke $r5.<android.service.wallpaper.IWallpaperEngine: void setInAmbientMode(boolean,long)>(z0, l0);

     label5:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label6:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label7:
        $r6 := @caughtexception;

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
    }

    public void setVisibility(boolean) throws android.os.RemoteException
    {
        android.service.wallpaper.IWallpaperEngine$Stub$Proxy r0;
        boolean z0, $z1;
        android.os.Parcel r1;
        android.os.IBinder $r3;
        android.service.wallpaper.IWallpaperEngine $r4, $r5;
        java.lang.Throwable $r6;
        byte b0;

        r0 := @this: android.service.wallpaper.IWallpaperEngine$Stub$Proxy;

        z0 := @parameter0: boolean;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.service.wallpaper.IWallpaperEngine");

     label2:
        if z0 == 0 goto label3;

        b0 = 1;

        goto label4;

     label3:
        b0 = 0;

     label4:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(b0);

        $r3 = r0.<android.service.wallpaper.IWallpaperEngine$Stub$Proxy: android.os.IBinder mRemote>;

        $z1 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(3, r1, null, 1);

        if $z1 != 0 goto label6;

        $r4 = staticinvoke <android.service.wallpaper.IWallpaperEngine$Stub: android.service.wallpaper.IWallpaperEngine getDefaultImpl()>();

        if $r4 == null goto label6;

        $r5 = staticinvoke <android.service.wallpaper.IWallpaperEngine$Stub: android.service.wallpaper.IWallpaperEngine getDefaultImpl()>();

        interfaceinvoke $r5.<android.service.wallpaper.IWallpaperEngine: void setVisibility(boolean)>(z0);

     label5:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label6:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label7:
        $r6 := @caughtexception;

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
    }

    public void setZoomOut(float) throws android.os.RemoteException
    {
        android.service.wallpaper.IWallpaperEngine$Stub$Proxy r0;
        float f0;
        android.os.Parcel r1;
        android.os.IBinder $r3;
        boolean $z0;
        android.service.wallpaper.IWallpaperEngine $r4, $r5;
        java.lang.Throwable $r6;

        r0 := @this: android.service.wallpaper.IWallpaperEngine$Stub$Proxy;

        f0 := @parameter0: float;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.service.wallpaper.IWallpaperEngine");

        virtualinvoke r1.<android.os.Parcel: void writeFloat(float)>(f0);

        $r3 = r0.<android.service.wallpaper.IWallpaperEngine$Stub$Proxy: android.os.IBinder mRemote>;

        $z0 = interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(9, r1, null, 1);

        if $z0 != 0 goto label3;

        $r4 = staticinvoke <android.service.wallpaper.IWallpaperEngine$Stub: android.service.wallpaper.IWallpaperEngine getDefaultImpl()>();

        if $r4 == null goto label3;

        $r5 = staticinvoke <android.service.wallpaper.IWallpaperEngine$Stub: android.service.wallpaper.IWallpaperEngine getDefaultImpl()>();

        interfaceinvoke $r5.<android.service.wallpaper.IWallpaperEngine: void setZoomOut(float)>(f0);

     label2:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label3:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return;

     label4:
        $r6 := @caughtexception;

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label4;
    }
}
