class android.service.wallpaper.WallpaperService$Engine$1 extends com.android.internal.view.BaseSurfaceHolder
{
    final android.service.wallpaper.WallpaperService$Engine this$1;

    void <init>(android.service.wallpaper.WallpaperService$Engine)
    {
        android.service.wallpaper.WallpaperService$Engine$1 r0;
        android.service.wallpaper.WallpaperService$Engine r1;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine$1;

        r1 := @parameter0: android.service.wallpaper.WallpaperService$Engine;

        r0.<android.service.wallpaper.WallpaperService$Engine$1: android.service.wallpaper.WallpaperService$Engine this$1> = r1;

        specialinvoke r0.<com.android.internal.view.BaseSurfaceHolder: void <init>()>();

        r0.<android.service.wallpaper.WallpaperService$Engine$1: int mRequestedFormat> = 2;

        return;
    }

    private void prepareToDraw()
    {
        android.service.wallpaper.WallpaperService$Engine$1 r0;
        android.service.wallpaper.WallpaperService$Engine $r2, $r3, $r4, $r7;
        int $i0, $i1;
        com.android.internal.view.BaseIWindow $r5;
        android.view.IWindowSession $r6;
        android.os.RemoteException $r8;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine$1;

        $r2 = r0.<android.service.wallpaper.WallpaperService$Engine$1: android.service.wallpaper.WallpaperService$Engine this$1>;

        $i0 = staticinvoke <android.service.wallpaper.WallpaperService$Engine: int access$000(android.service.wallpaper.WallpaperService$Engine)>($r2);

        if $i0 == 3 goto label1;

        $r7 = r0.<android.service.wallpaper.WallpaperService$Engine$1: android.service.wallpaper.WallpaperService$Engine this$1>;

        $i1 = staticinvoke <android.service.wallpaper.WallpaperService$Engine: int access$000(android.service.wallpaper.WallpaperService$Engine)>($r7);

        if $i1 != 4 goto label4;

     label1:
        $r3 = r0.<android.service.wallpaper.WallpaperService$Engine$1: android.service.wallpaper.WallpaperService$Engine this$1>;

        $r6 = $r3.<android.service.wallpaper.WallpaperService$Engine: android.view.IWindowSession mSession>;

        $r4 = r0.<android.service.wallpaper.WallpaperService$Engine$1: android.service.wallpaper.WallpaperService$Engine this$1>;

        $r5 = $r4.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseIWindow mWindow>;

        interfaceinvoke $r6.<android.view.IWindowSession: void pokeDrawLock(android.os.IBinder)>($r5);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isCreating()
    {
        android.service.wallpaper.WallpaperService$Engine$1 r0;
        android.service.wallpaper.WallpaperService$Engine $r1;
        boolean $z0;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine$1;

        $r1 = r0.<android.service.wallpaper.WallpaperService$Engine$1: android.service.wallpaper.WallpaperService$Engine this$1>;

        $z0 = $r1.<android.service.wallpaper.WallpaperService$Engine: boolean mIsCreating>;

        return $z0;
    }

    public android.graphics.Canvas lockCanvas()
    {
        android.service.wallpaper.WallpaperService$Engine$1 r0;
        android.graphics.Canvas $r1;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine$1;

        specialinvoke r0.<android.service.wallpaper.WallpaperService$Engine$1: void prepareToDraw()>();

        $r1 = specialinvoke r0.<com.android.internal.view.BaseSurfaceHolder: android.graphics.Canvas lockCanvas()>();

        return $r1;
    }

    public android.graphics.Canvas lockCanvas(android.graphics.Rect)
    {
        android.service.wallpaper.WallpaperService$Engine$1 r0;
        android.graphics.Rect r1;
        android.graphics.Canvas $r2;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine$1;

        r1 := @parameter0: android.graphics.Rect;

        specialinvoke r0.<android.service.wallpaper.WallpaperService$Engine$1: void prepareToDraw()>();

        $r2 = specialinvoke r0.<com.android.internal.view.BaseSurfaceHolder: android.graphics.Canvas lockCanvas(android.graphics.Rect)>(r1);

        return $r2;
    }

    public android.graphics.Canvas lockHardwareCanvas()
    {
        android.service.wallpaper.WallpaperService$Engine$1 r0;
        android.graphics.Canvas $r1;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine$1;

        specialinvoke r0.<android.service.wallpaper.WallpaperService$Engine$1: void prepareToDraw()>();

        $r1 = specialinvoke r0.<com.android.internal.view.BaseSurfaceHolder: android.graphics.Canvas lockHardwareCanvas()>();

        return $r1;
    }

    public boolean onAllowLockCanvas()
    {
        android.service.wallpaper.WallpaperService$Engine$1 r0;
        android.service.wallpaper.WallpaperService$Engine $r1;
        boolean $z0;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine$1;

        $r1 = r0.<android.service.wallpaper.WallpaperService$Engine$1: android.service.wallpaper.WallpaperService$Engine this$1>;

        $z0 = $r1.<android.service.wallpaper.WallpaperService$Engine: boolean mDrawingAllowed>;

        return $z0;
    }

    public void onRelayoutContainer()
    {
        android.service.wallpaper.WallpaperService$Engine$1 r0;
        android.os.Message r1;
        android.service.wallpaper.WallpaperService$Engine $r2, $r4;
        com.android.internal.os.HandlerCaller $r3, $r5;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine$1;

        $r2 = r0.<android.service.wallpaper.WallpaperService$Engine$1: android.service.wallpaper.WallpaperService$Engine this$1>;

        $r3 = $r2.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.os.HandlerCaller mCaller>;

        r1 = virtualinvoke $r3.<com.android.internal.os.HandlerCaller: android.os.Message obtainMessage(int)>(10000);

        $r4 = r0.<android.service.wallpaper.WallpaperService$Engine$1: android.service.wallpaper.WallpaperService$Engine this$1>;

        $r5 = $r4.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.os.HandlerCaller mCaller>;

        virtualinvoke $r5.<com.android.internal.os.HandlerCaller: void sendMessage(android.os.Message)>(r1);

        return;
    }

    public void onUpdateSurface()
    {
        android.service.wallpaper.WallpaperService$Engine$1 r0;
        android.os.Message r1;
        android.service.wallpaper.WallpaperService$Engine $r2, $r4;
        com.android.internal.os.HandlerCaller $r3, $r5;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine$1;

        $r2 = r0.<android.service.wallpaper.WallpaperService$Engine$1: android.service.wallpaper.WallpaperService$Engine this$1>;

        $r3 = $r2.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.os.HandlerCaller mCaller>;

        r1 = virtualinvoke $r3.<com.android.internal.os.HandlerCaller: android.os.Message obtainMessage(int)>(10000);

        $r4 = r0.<android.service.wallpaper.WallpaperService$Engine$1: android.service.wallpaper.WallpaperService$Engine this$1>;

        $r5 = $r4.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.os.HandlerCaller mCaller>;

        virtualinvoke $r5.<com.android.internal.os.HandlerCaller: void sendMessage(android.os.Message)>(r1);

        return;
    }

    public void setFixedSize(int, int)
    {
        android.service.wallpaper.WallpaperService$Engine$1 r0;
        int i0, i1;
        android.service.wallpaper.WallpaperService$Engine $r1;
        boolean $z0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine$1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<android.service.wallpaper.WallpaperService$Engine$1: android.service.wallpaper.WallpaperService$Engine this$1>;

        $z0 = $r1.<android.service.wallpaper.WallpaperService$Engine: boolean mFixedSizeAllowed>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.internal.view.BaseSurfaceHolder: void setFixedSize(int,int)>(i0, i1);

        return;

     label1:
        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Wallpapers currently only support sizing from layout");

        throw $r2;
    }

    public void setKeepScreenOn(boolean)
    {
        android.service.wallpaper.WallpaperService$Engine$1 r0;
        boolean z0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine$1;

        z0 := @parameter0: boolean;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Wallpapers do not support keep screen on");

        throw $r1;
    }
}
