public class android.service.wallpaper.WallpaperService$Engine extends java.lang.Object
{
    final android.graphics.Rect mBackdropFrame;
    com.android.internal.os.HandlerCaller mCaller;
    private final java.util.function.Supplier mClockFunction;
    android.service.wallpaper.IWallpaperConnection mConnection;
    final android.graphics.Rect mContentInsets;
    boolean mCreated;
    int mCurHeight;
    int mCurWidth;
    int mCurWindowFlags;
    int mCurWindowPrivateFlags;
    boolean mDestroyed;
    final android.graphics.Rect mDispatchedContentInsets;
    android.view.DisplayCutout mDispatchedDisplayCutout;
    final android.graphics.Rect mDispatchedStableInsets;
    private android.view.Display mDisplay;
    private android.content.Context mDisplayContext;
    final android.view.DisplayCutout$ParcelableWrapper mDisplayCutout;
    private final android.hardware.display.DisplayManager$DisplayListener mDisplayListener;
    private int mDisplayState;
    boolean mDrawingAllowed;
    final android.graphics.Rect mFinalStableInsets;
    final android.graphics.Rect mFinalSystemInsets;
    boolean mFixedSizeAllowed;
    int mFormat;
    private final android.os.Handler mHandler;
    int mHeight;
    android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper mIWallpaperEngine;
    boolean mInitializing;
    android.service.wallpaper.WallpaperService$Engine$WallpaperInputEventReceiver mInputEventReceiver;
    final android.view.InsetsState mInsetsState;
    boolean mIsCreating;
    boolean mIsInAmbientMode;
    private long mLastColorInvalidation;
    final android.view.WindowManager$LayoutParams mLayout;
    final java.lang.Object mLock;
    final android.util.MergedConfiguration mMergedConfiguration;
    private final java.lang.Runnable mNotifyColorsChanged;
    boolean mOffsetMessageEnqueued;
    boolean mOffsetsChanged;
    android.view.MotionEvent mPendingMove;
    boolean mPendingSync;
    float mPendingXOffset;
    float mPendingXOffsetStep;
    float mPendingYOffset;
    float mPendingYOffsetStep;
    boolean mReportedVisible;
    android.view.IWindowSession mSession;
    final android.graphics.Rect mStableInsets;
    android.view.SurfaceControl mSurfaceControl;
    boolean mSurfaceCreated;
    final com.android.internal.view.BaseSurfaceHolder mSurfaceHolder;
    private final android.graphics.Point mSurfaceSize;
    final android.view.InsetsSourceControl[] mTempControls;
    android.view.SurfaceControl mTmpSurfaceControl;
    int mType;
    boolean mVisible;
    final android.graphics.Rect mVisibleInsets;
    int mWidth;
    final android.graphics.Rect mWinFrame;
    final com.android.internal.view.BaseIWindow mWindow;
    int mWindowFlags;
    int mWindowPrivateFlags;
    android.os.IBinder mWindowToken;
    float mZoom;
    final android.service.wallpaper.WallpaperService this$0;

    public void <init>(android.service.wallpaper.WallpaperService)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        android.service.wallpaper.WallpaperService r1;
        android.service.wallpaper.'-$$Lambda$87Do-TfJA3qVM7QF6F_6BpQlQTA' $r2;
        android.os.Handler $r3;
        java.util.function.Supplier r4;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        r1 := @parameter0: android.service.wallpaper.WallpaperService;

        $r2 = <android.service.wallpaper._$$Lambda$87Do_TfJA3qVM7QF6F_6BpQlQTA: android.service.wallpaper.'-$$Lambda$87Do-TfJA3qVM7QF6F_6BpQlQTA' INSTANCE>;

        $r3 = staticinvoke <android.os.Handler: android.os.Handler getMain()>();

        r4 = (java.util.function.Supplier) $r2;

        specialinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void <init>(android.service.wallpaper.WallpaperService,java.util.function.Supplier,android.os.Handler)>(r1, r4, $r3);

        return;
    }

    public void <init>(android.service.wallpaper.WallpaperService, java.util.function.Supplier, android.os.Handler)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        android.service.wallpaper.WallpaperService r1;
        java.util.function.Supplier r2;
        android.os.Handler r3;
        android.graphics.Rect $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        android.view.DisplayCutout$ParcelableWrapper $r13;
        android.view.DisplayCutout $r14;
        android.view.InsetsState $r15;
        android.view.InsetsSourceControl[] $r16;
        android.util.MergedConfiguration $r17;
        android.graphics.Point $r18;
        android.view.WindowManager$LayoutParams $r19;
        java.lang.Object $r20;
        android.service.wallpaper._$$Lambda$vsWBQpiXExY07tlrSzTqh4pNQAQ $r21;
        android.view.SurfaceControl $r22, $r23;
        android.service.wallpaper.WallpaperService$Engine$1 $r24;
        android.service.wallpaper.WallpaperService$Engine$2 $r25;
        android.service.wallpaper.WallpaperService$Engine$3 $r26;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        r1 := @parameter0: android.service.wallpaper.WallpaperService;

        r2 := @parameter1: java.util.function.Supplier;

        r3 := @parameter2: android.os.Handler;

        r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mInitializing> = 1;

        r0.<android.service.wallpaper.WallpaperService$Engine: float mZoom> = 0.0F;

        r0.<android.service.wallpaper.WallpaperService$Engine: int mWindowFlags> = 16;

        r0.<android.service.wallpaper.WallpaperService$Engine: int mWindowPrivateFlags> = 4;

        r0.<android.service.wallpaper.WallpaperService$Engine: int mCurWindowFlags> = 16;

        r0.<android.service.wallpaper.WallpaperService$Engine: int mCurWindowPrivateFlags> = 4;

        $r4 = new android.graphics.Rect;

        specialinvoke $r4.<android.graphics.Rect: void <init>()>();

        r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mVisibleInsets> = $r4;

        $r5 = new android.graphics.Rect;

        specialinvoke $r5.<android.graphics.Rect: void <init>()>();

        r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mWinFrame> = $r5;

        $r6 = new android.graphics.Rect;

        specialinvoke $r6.<android.graphics.Rect: void <init>()>();

        r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mContentInsets> = $r6;

        $r7 = new android.graphics.Rect;

        specialinvoke $r7.<android.graphics.Rect: void <init>()>();

        r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mStableInsets> = $r7;

        $r8 = new android.graphics.Rect;

        specialinvoke $r8.<android.graphics.Rect: void <init>()>();

        r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mDispatchedContentInsets> = $r8;

        $r9 = new android.graphics.Rect;

        specialinvoke $r9.<android.graphics.Rect: void <init>()>();

        r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mDispatchedStableInsets> = $r9;

        $r10 = new android.graphics.Rect;

        specialinvoke $r10.<android.graphics.Rect: void <init>()>();

        r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mFinalSystemInsets> = $r10;

        $r11 = new android.graphics.Rect;

        specialinvoke $r11.<android.graphics.Rect: void <init>()>();

        r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mFinalStableInsets> = $r11;

        $r12 = new android.graphics.Rect;

        specialinvoke $r12.<android.graphics.Rect: void <init>()>();

        r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mBackdropFrame> = $r12;

        $r13 = new android.view.DisplayCutout$ParcelableWrapper;

        specialinvoke $r13.<android.view.DisplayCutout$ParcelableWrapper: void <init>()>();

        r0.<android.service.wallpaper.WallpaperService$Engine: android.view.DisplayCutout$ParcelableWrapper mDisplayCutout> = $r13;

        $r14 = <android.view.DisplayCutout: android.view.DisplayCutout NO_CUTOUT>;

        r0.<android.service.wallpaper.WallpaperService$Engine: android.view.DisplayCutout mDispatchedDisplayCutout> = $r14;

        $r15 = new android.view.InsetsState;

        specialinvoke $r15.<android.view.InsetsState: void <init>()>();

        r0.<android.service.wallpaper.WallpaperService$Engine: android.view.InsetsState mInsetsState> = $r15;

        $r16 = newarray (android.view.InsetsSourceControl)[0];

        r0.<android.service.wallpaper.WallpaperService$Engine: android.view.InsetsSourceControl[] mTempControls> = $r16;

        $r17 = new android.util.MergedConfiguration;

        specialinvoke $r17.<android.util.MergedConfiguration: void <init>()>();

        r0.<android.service.wallpaper.WallpaperService$Engine: android.util.MergedConfiguration mMergedConfiguration> = $r17;

        $r18 = new android.graphics.Point;

        specialinvoke $r18.<android.graphics.Point: void <init>()>();

        r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Point mSurfaceSize> = $r18;

        $r19 = new android.view.WindowManager$LayoutParams;

        specialinvoke $r19.<android.view.WindowManager$LayoutParams: void <init>()>();

        r0.<android.service.wallpaper.WallpaperService$Engine: android.view.WindowManager$LayoutParams mLayout> = $r19;

        $r20 = new java.lang.Object;

        specialinvoke $r20.<java.lang.Object: void <init>()>();

        r0.<android.service.wallpaper.WallpaperService$Engine: java.lang.Object mLock> = $r20;

        $r21 = new android.service.wallpaper._$$Lambda$vsWBQpiXExY07tlrSzTqh4pNQAQ;

        specialinvoke $r21.<android.service.wallpaper._$$Lambda$vsWBQpiXExY07tlrSzTqh4pNQAQ: void <init>(android.service.wallpaper.WallpaperService$Engine)>(r0);

        r0.<android.service.wallpaper.WallpaperService$Engine: java.lang.Runnable mNotifyColorsChanged> = $r21;

        $r22 = new android.view.SurfaceControl;

        specialinvoke $r22.<android.view.SurfaceControl: void <init>()>();

        r0.<android.service.wallpaper.WallpaperService$Engine: android.view.SurfaceControl mSurfaceControl> = $r22;

        $r23 = new android.view.SurfaceControl;

        specialinvoke $r23.<android.view.SurfaceControl: void <init>()>();

        r0.<android.service.wallpaper.WallpaperService$Engine: android.view.SurfaceControl mTmpSurfaceControl> = $r23;

        $r24 = new android.service.wallpaper.WallpaperService$Engine$1;

        specialinvoke $r24.<android.service.wallpaper.WallpaperService$Engine$1: void <init>(android.service.wallpaper.WallpaperService$Engine)>(r0);

        r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder> = $r24;

        $r25 = new android.service.wallpaper.WallpaperService$Engine$2;

        specialinvoke $r25.<android.service.wallpaper.WallpaperService$Engine$2: void <init>(android.service.wallpaper.WallpaperService$Engine)>(r0);

        r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseIWindow mWindow> = $r25;

        $r26 = new android.service.wallpaper.WallpaperService$Engine$3;

        specialinvoke $r26.<android.service.wallpaper.WallpaperService$Engine$3: void <init>(android.service.wallpaper.WallpaperService$Engine)>(r0);

        r0.<android.service.wallpaper.WallpaperService$Engine: android.hardware.display.DisplayManager$DisplayListener mDisplayListener> = $r26;

        r0.<android.service.wallpaper.WallpaperService$Engine: java.util.function.Supplier mClockFunction> = r2;

        r0.<android.service.wallpaper.WallpaperService$Engine: android.os.Handler mHandler> = r3;

        return;
    }

    static int access$000(android.service.wallpaper.WallpaperService$Engine)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        int $i0;

        r0 := @parameter0: android.service.wallpaper.WallpaperService$Engine;

        $i0 = r0.<android.service.wallpaper.WallpaperService$Engine: int mDisplayState>;

        return $i0;
    }

    static void access$100(android.service.wallpaper.WallpaperService$Engine, android.view.MotionEvent)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        android.view.MotionEvent r1;

        r0 := @parameter0: android.service.wallpaper.WallpaperService$Engine;

        r1 := @parameter1: android.view.MotionEvent;

        specialinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void dispatchPointer(android.view.MotionEvent)>(r1);

        return;
    }

    static android.view.Display access$300(android.service.wallpaper.WallpaperService$Engine)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        android.view.Display $r1;

        r0 := @parameter0: android.service.wallpaper.WallpaperService$Engine;

        $r1 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.Display mDisplay>;

        return $r1;
    }

    private void dispatchPointer(android.view.MotionEvent)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        java.lang.Object r1;
        boolean $z0;
        int $i0;
        com.android.internal.os.HandlerCaller $r2, $r3;
        java.lang.Throwable $r4;
        android.view.MotionEvent r5;
        android.os.Message r6;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        r5 := @parameter0: android.view.MotionEvent;

        $z0 = virtualinvoke r5.<android.view.MotionEvent: boolean isTouchEvent()>();

        if $z0 == 0 goto label09;

        r1 = r0.<android.service.wallpaper.WallpaperService$Engine: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $i0 = virtualinvoke r5.<android.view.MotionEvent: int getAction()>();

        if $i0 != 2 goto label03;

        r0.<android.service.wallpaper.WallpaperService$Engine: android.view.MotionEvent mPendingMove> = r5;

     label02:
        goto label04;

     label03:
        r0.<android.service.wallpaper.WallpaperService$Engine: android.view.MotionEvent mPendingMove> = null;

     label04:
        exitmonitor r1;

     label05:
        $r2 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.os.HandlerCaller mCaller>;

        r6 = virtualinvoke $r2.<com.android.internal.os.HandlerCaller: android.os.Message obtainMessageO(int,java.lang.Object)>(10040, r5);

        $r3 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.os.HandlerCaller mCaller>;

        virtualinvoke $r3.<com.android.internal.os.HandlerCaller: void sendMessage(android.os.Message)>(r6);

        goto label10;

     label06:
        $r4 := @caughtexception;

     label07:
        exitmonitor r1;

     label08:
        throw $r4;

     label09:
        virtualinvoke r5.<android.view.MotionEvent: void recycle()>();

     label10:
        return;

        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
    }

    void attach(android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        boolean $z0;
        com.android.internal.os.HandlerCaller $r1, $r10;
        android.service.wallpaper.IWallpaperConnection $r2;
        android.os.IBinder $r3;
        com.android.internal.view.BaseSurfaceHolder $r4, $r18;
        com.android.internal.view.BaseIWindow $r5;
        android.service.wallpaper.WallpaperService $r6, $r15;
        android.view.WindowManager$LayoutParams $r7;
        java.lang.String $r8;
        android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper $r9, $r14, r19;
        android.hardware.display.DisplayManager $r11;
        android.hardware.display.DisplayManager$DisplayListener $r12;
        android.os.Handler $r13;
        android.content.Context $r16;
        android.view.Display $r17, r21;
        int $i0;
        android.view.IWindowSession r20;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        r19 := @parameter0: android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper;

        $z0 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mDestroyed>;

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper mIWallpaperEngine> = r19;

        $r1 = staticinvoke <android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: com.android.internal.os.HandlerCaller access$200(android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper)>(r19);

        r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.os.HandlerCaller mCaller> = $r1;

        $r2 = r19.<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: android.service.wallpaper.IWallpaperConnection mConnection>;

        r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.IWallpaperConnection mConnection> = $r2;

        $r3 = r19.<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: android.os.IBinder mWindowToken>;

        r0.<android.service.wallpaper.WallpaperService$Engine: android.os.IBinder mWindowToken> = $r3;

        $r4 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        virtualinvoke $r4.<com.android.internal.view.BaseSurfaceHolder: void setSizeFromLayout()>();

        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mInitializing> = 1;

        r20 = staticinvoke <android.view.WindowManagerGlobal: android.view.IWindowSession getWindowSession()>();

        r0.<android.service.wallpaper.WallpaperService$Engine: android.view.IWindowSession mSession> = r20;

        $r5 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseIWindow mWindow>;

        virtualinvoke $r5.<com.android.internal.view.BaseIWindow: void setSession(android.view.IWindowSession)>(r20);

        $r7 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.WindowManager$LayoutParams mLayout>;

        $r6 = r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService this$0>;

        $r8 = virtualinvoke $r6.<android.service.wallpaper.WallpaperService: java.lang.String getPackageName()>();

        $r7.<android.view.WindowManager$LayoutParams: java.lang.String packageName> = $r8;

        $r9 = r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper mIWallpaperEngine>;

        $r11 = $r9.<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: android.hardware.display.DisplayManager mDisplayManager>;

        $r12 = r0.<android.service.wallpaper.WallpaperService$Engine: android.hardware.display.DisplayManager$DisplayListener mDisplayListener>;

        $r10 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.os.HandlerCaller mCaller>;

        $r13 = virtualinvoke $r10.<com.android.internal.os.HandlerCaller: android.os.Handler getHandler()>();

        virtualinvoke $r11.<android.hardware.display.DisplayManager: void registerDisplayListener(android.hardware.display.DisplayManager$DisplayListener,android.os.Handler)>($r12, $r13);

        $r14 = r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper mIWallpaperEngine>;

        r21 = $r14.<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: android.view.Display mDisplay>;

        r0.<android.service.wallpaper.WallpaperService$Engine: android.view.Display mDisplay> = r21;

        $r15 = r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService this$0>;

        $r16 = virtualinvoke $r15.<android.service.wallpaper.WallpaperService: android.content.Context createDisplayContext(android.view.Display)>(r21);

        r0.<android.service.wallpaper.WallpaperService$Engine: android.content.Context mDisplayContext> = $r16;

        $r17 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.Display mDisplay>;

        $i0 = virtualinvoke $r17.<android.view.Display: int getState()>();

        r0.<android.service.wallpaper.WallpaperService$Engine: int mDisplayState> = $i0;

        $r18 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void onCreate(android.view.SurfaceHolder)>($r18);

        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mInitializing> = 0;

        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mReportedVisible> = 0;

        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void updateSurface(boolean,boolean,boolean)>(0, 0, 0);

        return;
    }

    void detach()
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        boolean $z0, $z1, $z2;
        android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper $r2, $r10;
        android.hardware.display.DisplayManager $r3, $r12;
        android.service.wallpaper.WallpaperService$Engine$WallpaperInputEventReceiver $r4, $r9;
        com.android.internal.view.BaseIWindow $r5;
        android.view.IWindowSession $r6;
        com.android.internal.view.BaseSurfaceHolder $r7;
        android.view.Surface $r8;
        android.hardware.display.DisplayManager$DisplayListener $r11;
        android.os.RemoteException $r13;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        $z0 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mDestroyed>;

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mDestroyed> = 1;

        $r2 = r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper mIWallpaperEngine>;

        $r3 = $r2.<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: android.hardware.display.DisplayManager mDisplayManager>;

        if $r3 == null goto label2;

        $r10 = r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper mIWallpaperEngine>;

        $r12 = $r10.<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: android.hardware.display.DisplayManager mDisplayManager>;

        $r11 = r0.<android.service.wallpaper.WallpaperService$Engine: android.hardware.display.DisplayManager$DisplayListener mDisplayListener>;

        virtualinvoke $r12.<android.hardware.display.DisplayManager: void unregisterDisplayListener(android.hardware.display.DisplayManager$DisplayListener)>($r11);

     label2:
        $z1 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mVisible>;

        if $z1 == 0 goto label3;

        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mVisible> = 0;

        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void onVisibilityChanged(boolean)>(0);

     label3:
        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void reportSurfaceDestroyed()>();

        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void onDestroy()>();

        $z2 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mCreated>;

        if $z2 == 0 goto label9;

     label4:
        $r4 = r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService$Engine$WallpaperInputEventReceiver mInputEventReceiver>;

        if $r4 == null goto label5;

        $r9 = r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService$Engine$WallpaperInputEventReceiver mInputEventReceiver>;

        virtualinvoke $r9.<android.service.wallpaper.WallpaperService$Engine$WallpaperInputEventReceiver: void dispose()>();

        r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService$Engine$WallpaperInputEventReceiver mInputEventReceiver> = null;

     label5:
        $r6 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.IWindowSession mSession>;

        $r5 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseIWindow mWindow>;

        interfaceinvoke $r6.<android.view.IWindowSession: void remove(android.view.IWindow)>($r5);

     label6:
        goto label8;

     label7:
        $r13 := @caughtexception;

     label8:
        $r7 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $r8 = $r7.<com.android.internal.view.BaseSurfaceHolder: android.view.Surface mSurface>;

        virtualinvoke $r8.<android.view.Surface: void release()>();

        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mCreated> = 0;

     label9:
        return;

        catch android.os.RemoteException from label4 to label5 with label7;
        catch android.os.RemoteException from label5 to label6 with label7;
    }

    public void doAmbientModeChanged(boolean, long)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        boolean z0, $z1, $z2;
        long l0;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        z0 := @parameter0: boolean;

        l0 := @parameter1: long;

        $z1 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mDestroyed>;

        if $z1 != 0 goto label1;

        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mIsInAmbientMode> = z0;

        $z2 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mCreated>;

        if $z2 == 0 goto label1;

        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void onAmbientModeChanged(boolean,long)>(z0, l0);

     label1:
        return;
    }

    void doCommand(android.service.wallpaper.WallpaperService$WallpaperCommand)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        boolean $z0, $z1, $z2;
        com.android.internal.view.BaseIWindow $r1;
        android.view.IWindowSession $r2;
        android.os.IBinder $r3;
        android.os.Bundle $r4, r8;
        int $i0, $i1, $i2;
        java.lang.String $r5;
        android.os.RemoteException $r6;
        android.service.wallpaper.WallpaperService$WallpaperCommand r7;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        r7 := @parameter0: android.service.wallpaper.WallpaperService$WallpaperCommand;

        $z0 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mDestroyed>;

        if $z0 != 0 goto label1;

        $r5 = r7.<android.service.wallpaper.WallpaperService$WallpaperCommand: java.lang.String action>;

        $i2 = r7.<android.service.wallpaper.WallpaperService$WallpaperCommand: int x>;

        $i1 = r7.<android.service.wallpaper.WallpaperService$WallpaperCommand: int y>;

        $i0 = r7.<android.service.wallpaper.WallpaperService$WallpaperCommand: int z>;

        $r4 = r7.<android.service.wallpaper.WallpaperService$WallpaperCommand: android.os.Bundle extras>;

        $z2 = r7.<android.service.wallpaper.WallpaperService$WallpaperCommand: boolean sync>;

        r8 = virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: android.os.Bundle onCommand(java.lang.String,int,int,int,android.os.Bundle,boolean)>($r5, $i2, $i1, $i0, $r4, $z2);

        goto label2;

     label1:
        r8 = null;

     label2:
        $z1 = r7.<android.service.wallpaper.WallpaperService$WallpaperCommand: boolean sync>;

        if $z1 == 0 goto label6;

     label3:
        $r2 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.IWindowSession mSession>;

        $r1 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseIWindow mWindow>;

        $r3 = virtualinvoke $r1.<com.android.internal.view.BaseIWindow: android.os.IBinder asBinder()>();

        interfaceinvoke $r2.<android.view.IWindowSession: void wallpaperCommandComplete(android.os.IBinder,android.os.Bundle)>($r3, r8);

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

     label6:
        return;

        catch android.os.RemoteException from label3 to label4 with label5;
    }

    void doDesiredSizeChanged(int, int)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        int i0, i1;
        boolean $z0;
        android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper $r1, $r2;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mDestroyed>;

        if $z0 != 0 goto label1;

        $r1 = r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper mIWallpaperEngine>;

        $r1.<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: int mReqWidth> = i0;

        $r2 = r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper mIWallpaperEngine>;

        $r2.<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: int mReqHeight> = i1;

        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void onDesiredSizeChanged(int,int)>(i0, i1);

        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void doOffsetsChanged(boolean)>(1);

     label1:
        return;
    }

    void doDisplayPaddingChanged(android.graphics.Rect)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        android.graphics.Rect r1, $r3, $r5;
        boolean $z0, $z1;
        android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper $r2, $r4;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        r1 := @parameter0: android.graphics.Rect;

        $z0 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mDestroyed>;

        if $z0 != 0 goto label1;

        $r2 = r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper mIWallpaperEngine>;

        $r3 = $r2.<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: android.graphics.Rect mDisplayPadding>;

        $z1 = virtualinvoke $r3.<android.graphics.Rect: boolean equals(java.lang.Object)>(r1);

        if $z1 != 0 goto label1;

        $r4 = r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper mIWallpaperEngine>;

        $r5 = $r4.<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: android.graphics.Rect mDisplayPadding>;

        virtualinvoke $r5.<android.graphics.Rect: void set(android.graphics.Rect)>(r1);

        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void updateSurface(boolean,boolean,boolean)>(1, 0, 0);

     label1:
        return;
    }

    void doOffsetsChanged(boolean)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        java.lang.Object r1;
        float f0, f1, f2, f3, $f4, $f5, $f6, $f7, $f8, $f9;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9;
        boolean $z0, $z1, $z2, $z3, z4, z5;
        com.android.internal.view.BaseIWindow $r2;
        android.view.IWindowSession $r3;
        android.os.IBinder $r4;
        android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper $r5, $r6;
        android.os.RemoteException $r7;
        java.lang.Throwable $r8;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        z4 := @parameter0: boolean;

        $z0 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mDestroyed>;

        if $z0 == 0 goto label01;

        return;

     label01:
        if z4 != 0 goto label02;

        $z3 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mOffsetsChanged>;

        if $z3 != 0 goto label02;

        return;

     label02:
        r1 = r0.<android.service.wallpaper.WallpaperService$Engine: java.lang.Object mLock>;

        entermonitor r1;

     label03:
        f0 = r0.<android.service.wallpaper.WallpaperService$Engine: float mPendingXOffset>;

        f1 = r0.<android.service.wallpaper.WallpaperService$Engine: float mPendingYOffset>;

        f2 = r0.<android.service.wallpaper.WallpaperService$Engine: float mPendingXOffsetStep>;

        f3 = r0.<android.service.wallpaper.WallpaperService$Engine: float mPendingYOffsetStep>;

        z5 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mPendingSync>;

     label04:
        i7 = 0;

     label05:
        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mPendingSync> = 0;

        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mOffsetMessageEnqueued> = 0;

        exitmonitor r1;

     label06:
        $z1 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mSurfaceCreated>;

        if $z1 == 0 goto label11;

        $z2 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mReportedVisible>;

        if $z2 == 0 goto label10;

        $r5 = r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper mIWallpaperEngine>;

        $i2 = $r5.<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: int mReqWidth>;

        $i1 = r0.<android.service.wallpaper.WallpaperService$Engine: int mCurWidth>;

        i8 = $i2 - $i1;

        if i8 <= 0 goto label07;

        $f7 = (float) i8;

        $f8 = $f7 * f0;

        $f9 = $f8 + 0.5F;

        $i6 = (int) $f9;

        i9 = neg $i6;

        goto label08;

     label07:
        i9 = 0;

     label08:
        $r6 = r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper mIWallpaperEngine>;

        $i4 = $r6.<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: int mReqHeight>;

        $i3 = r0.<android.service.wallpaper.WallpaperService$Engine: int mCurHeight>;

        i0 = $i4 - $i3;

        if i0 <= 0 goto label09;

        $f4 = (float) i0;

        $f5 = $f4 * f1;

        $f6 = $f5 + 0.5F;

        $i5 = (int) $f6;

        i7 = neg $i5;

     label09:
        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void onOffsetsChanged(float,float,float,float,int,int)>(f0, f1, f2, f3, i9, i7);

        goto label11;

     label10:
        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mOffsetsChanged> = 1;

     label11:
        if z5 == 0 goto label15;

     label12:
        $r3 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.IWindowSession mSession>;

        $r2 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseIWindow mWindow>;

        $r4 = virtualinvoke $r2.<com.android.internal.view.BaseIWindow: android.os.IBinder asBinder()>();

        interfaceinvoke $r3.<android.view.IWindowSession: void wallpaperOffsetsComplete(android.os.IBinder)>($r4);

     label13:
        goto label15;

     label14:
        $r7 := @caughtexception;

     label15:
        return;

     label16:
        $r8 := @caughtexception;

     label17:
        exitmonitor r1;

     label18:
        throw $r8;

        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.lang.Throwable from label05 to label06 with label16;
        catch android.os.RemoteException from label12 to label13 with label14;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    void doVisibilityChanged(boolean)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        boolean z0, $z1;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        z0 := @parameter0: boolean;

        $z1 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mDestroyed>;

        if $z1 != 0 goto label1;

        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mVisible> = z0;

        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void reportVisibility()>();

     label1:
        return;
    }

    protected void dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        java.io.PrintWriter r1;
        java.lang.String[] r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        android.view.Display $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        android.graphics.Rect $r4, $r6, $r8;
        java.lang.String $r5, $r7, $r9, r16;
        android.util.MergedConfiguration $r10;
        android.content.res.Configuration $r11;
        android.view.WindowManager$LayoutParams $r12;
        float $f0, $f1, $f2, $f3, $f4;
        android.view.MotionEvent $r13, $r14;
        java.lang.Throwable $r15;
        java.io.FileDescriptor r17;
        java.lang.Object r18;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        r16 := @parameter0: java.lang.String;

        r17 := @parameter1: java.io.FileDescriptor;

        r1 := @parameter2: java.io.PrintWriter;

        r2 := @parameter3: java.lang.String[];

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r16);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mInitializing=");

        $z0 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mInitializing>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z0);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mDestroyed=");

        $z1 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mDestroyed>;

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z1);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r16);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mVisible=");

        $z2 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mVisible>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mReportedVisible=");

        $z3 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mReportedVisible>;

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z3);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r16);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mDisplay=");

        $r3 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.Display mDisplay>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r3);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r16);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mCreated=");

        $z4 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mCreated>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z4);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mSurfaceCreated=");

        $z5 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mSurfaceCreated>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z5);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mIsCreating=");

        $z6 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mIsCreating>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z6);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mDrawingAllowed=");

        $z7 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mDrawingAllowed>;

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z7);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r16);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mWidth=");

        $i0 = r0.<android.service.wallpaper.WallpaperService$Engine: int mWidth>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i0);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mCurWidth=");

        $i1 = r0.<android.service.wallpaper.WallpaperService$Engine: int mCurWidth>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i1);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mHeight=");

        $i2 = r0.<android.service.wallpaper.WallpaperService$Engine: int mHeight>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mCurHeight=");

        $i3 = r0.<android.service.wallpaper.WallpaperService$Engine: int mCurHeight>;

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i3);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r16);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mType=");

        $i4 = r0.<android.service.wallpaper.WallpaperService$Engine: int mType>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i4);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mWindowFlags=");

        $i5 = r0.<android.service.wallpaper.WallpaperService$Engine: int mWindowFlags>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i5);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mCurWindowFlags=");

        $i6 = r0.<android.service.wallpaper.WallpaperService$Engine: int mCurWindowFlags>;

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i6);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r16);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mWindowPrivateFlags=");

        $i7 = r0.<android.service.wallpaper.WallpaperService$Engine: int mWindowPrivateFlags>;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i7);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mCurWindowPrivateFlags=");

        $i8 = r0.<android.service.wallpaper.WallpaperService$Engine: int mCurWindowPrivateFlags>;

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i8);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r16);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mVisibleInsets=");

        $r4 = r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mVisibleInsets>;

        $r5 = virtualinvoke $r4.<android.graphics.Rect: java.lang.String toShortString()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r5);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mWinFrame=");

        $r6 = r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mWinFrame>;

        $r7 = virtualinvoke $r6.<android.graphics.Rect: java.lang.String toShortString()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r7);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mContentInsets=");

        $r8 = r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mContentInsets>;

        $r9 = virtualinvoke $r8.<android.graphics.Rect: java.lang.String toShortString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r9);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r16);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mConfiguration=");

        $r10 = r0.<android.service.wallpaper.WallpaperService$Engine: android.util.MergedConfiguration mMergedConfiguration>;

        $r11 = virtualinvoke $r10.<android.util.MergedConfiguration: android.content.res.Configuration getMergedConfiguration()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r11);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r16);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mLayout=");

        $r12 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.WindowManager$LayoutParams mLayout>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r12);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r16);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mZoom=");

        $f0 = r0.<android.service.wallpaper.WallpaperService$Engine: float mZoom>;

        virtualinvoke r1.<java.io.PrintWriter: void println(float)>($f0);

        r18 = r0.<android.service.wallpaper.WallpaperService$Engine: java.lang.Object mLock>;

        entermonitor r18;

     label1:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r16);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mPendingXOffset=");

        $f1 = r0.<android.service.wallpaper.WallpaperService$Engine: float mPendingXOffset>;

        virtualinvoke r1.<java.io.PrintWriter: void print(float)>($f1);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mPendingXOffset=");

        $f2 = r0.<android.service.wallpaper.WallpaperService$Engine: float mPendingXOffset>;

        virtualinvoke r1.<java.io.PrintWriter: void println(float)>($f2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r16);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mPendingXOffsetStep=");

        $f3 = r0.<android.service.wallpaper.WallpaperService$Engine: float mPendingXOffsetStep>;

        virtualinvoke r1.<java.io.PrintWriter: void print(float)>($f3);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mPendingXOffsetStep=");

        $f4 = r0.<android.service.wallpaper.WallpaperService$Engine: float mPendingXOffsetStep>;

        virtualinvoke r1.<java.io.PrintWriter: void println(float)>($f4);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r16);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mOffsetMessageEnqueued=");

        $z8 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mOffsetMessageEnqueued>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z8);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" mPendingSync=");

        $z9 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mPendingSync>;

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z9);

        $r13 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.MotionEvent mPendingMove>;

        if $r13 == null goto label2;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r16);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mPendingMove=");

        $r14 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.MotionEvent mPendingMove>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r14);

     label2:
        exitmonitor r18;

     label3:
        return;

     label4:
        $r15 := @caughtexception;

     label5:
        exitmonitor r18;

     label6:
        throw $r15;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public int getDesiredMinimumHeight()
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper $r1;
        int $i0;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        $r1 = r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper mIWallpaperEngine>;

        $i0 = $r1.<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: int mReqHeight>;

        return $i0;
    }

    public int getDesiredMinimumWidth()
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper $r1;
        int $i0;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        $r1 = r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper mIWallpaperEngine>;

        $i0 = $r1.<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: int mReqWidth>;

        return $i0;
    }

    public android.content.Context getDisplayContext()
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        android.content.Context $r1;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        $r1 = r0.<android.service.wallpaper.WallpaperService$Engine: android.content.Context mDisplayContext>;

        return $r1;
    }

    public android.view.SurfaceHolder getSurfaceHolder()
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        com.android.internal.view.BaseSurfaceHolder $r1;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        $r1 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        return $r1;
    }

    public float getZoom()
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        float $f0;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        $f0 = r0.<android.service.wallpaper.WallpaperService$Engine: float mZoom>;

        return $f0;
    }

    public boolean isInAmbientMode()
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        boolean $z0;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        $z0 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mIsInAmbientMode>;

        return $z0;
    }

    public boolean isPreview()
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper $r1;
        boolean $z0;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        $r1 = r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper mIWallpaperEngine>;

        $z0 = $r1.<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: boolean mIsPreview>;

        return $z0;
    }

    public boolean isVisible()
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        boolean $z0;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        $z0 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mReportedVisible>;

        return $z0;
    }

    public void notifyColorsChanged()
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        long l0, $l1, $l2;
        java.util.function.Supplier $r1;
        java.lang.Object $r2;
        java.lang.Long $r3;
        byte $b3;
        java.lang.Runnable $r4, $r9, $r11;
        android.os.Handler $r5, $r10, $r12;
        android.service.wallpaper.IWallpaperConnection $r6, $r8;
        android.view.Display $r7;
        int $i5;
        boolean $z0;
        android.os.RemoteException $r13;
        android.app.WallpaperColors r14;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        $r1 = r0.<android.service.wallpaper.WallpaperService$Engine: java.util.function.Supplier mClockFunction>;

        $r2 = interfaceinvoke $r1.<java.util.function.Supplier: java.lang.Object get()>();

        $r3 = (java.lang.Long) $r2;

        l0 = virtualinvoke $r3.<java.lang.Long: long longValue()>();

        $l1 = r0.<android.service.wallpaper.WallpaperService$Engine: long mLastColorInvalidation>;

        $l2 = l0 - $l1;

        $b3 = $l2 cmp 1000L;

        if $b3 >= 0 goto label2;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WallpaperService", "This call has been deferred. You should only call notifyColorsChanged() once every 1.0 seconds.");

        $r10 = r0.<android.service.wallpaper.WallpaperService$Engine: android.os.Handler mHandler>;

        $r9 = r0.<android.service.wallpaper.WallpaperService$Engine: java.lang.Runnable mNotifyColorsChanged>;

        $z0 = virtualinvoke $r10.<android.os.Handler: boolean hasCallbacks(java.lang.Runnable)>($r9);

        if $z0 != 0 goto label1;

        $r12 = r0.<android.service.wallpaper.WallpaperService$Engine: android.os.Handler mHandler>;

        $r11 = r0.<android.service.wallpaper.WallpaperService$Engine: java.lang.Runnable mNotifyColorsChanged>;

        virtualinvoke $r12.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r11, 1000L);

     label1:
        return;

     label2:
        r0.<android.service.wallpaper.WallpaperService$Engine: long mLastColorInvalidation> = l0;

        $r5 = r0.<android.service.wallpaper.WallpaperService$Engine: android.os.Handler mHandler>;

        $r4 = r0.<android.service.wallpaper.WallpaperService$Engine: java.lang.Runnable mNotifyColorsChanged>;

        virtualinvoke $r5.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r4);

     label3:
        r14 = virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: android.app.WallpaperColors onComputeColors()>();

        $r6 = r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.IWallpaperConnection mConnection>;

        if $r6 == null goto label5;

        $r8 = r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.IWallpaperConnection mConnection>;

        $r7 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.Display mDisplay>;

        $i5 = virtualinvoke $r7.<android.view.Display: int getDisplayId()>();

        interfaceinvoke $r8.<android.service.wallpaper.IWallpaperConnection: void onWallpaperColorsChanged(android.app.WallpaperColors,int)>(r14, $i5);

     label4:
        goto label6;

     label5:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WallpaperService", "Can\'t notify system because wallpaper connection was not established.");

     label6:
        goto label8;

     label7:
        $r13 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WallpaperService", "Can\'t notify system because wallpaper connection was lost.", $r13);

     label8:
        return;

        catch android.os.RemoteException from label3 to label4 with label7;
        catch android.os.RemoteException from label5 to label6 with label7;
    }

    public void onAmbientModeChanged(boolean, long)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        boolean z0;
        long l0;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        z0 := @parameter0: boolean;

        l0 := @parameter1: long;

        return;
    }

    public void onApplyWindowInsets(android.view.WindowInsets)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        android.view.WindowInsets r1;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        r1 := @parameter0: android.view.WindowInsets;

        return;
    }

    public android.os.Bundle onCommand(java.lang.String, int, int, int, android.os.Bundle, boolean)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        java.lang.String r1;
        int i0, i1, i2;
        android.os.Bundle r2;
        boolean z0;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r2 := @parameter4: android.os.Bundle;

        z0 := @parameter5: boolean;

        return null;
    }

    public android.app.WallpaperColors onComputeColors()
    {
        android.service.wallpaper.WallpaperService$Engine r0;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        return null;
    }

    public void onCreate(android.view.SurfaceHolder)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        android.view.SurfaceHolder r1;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        r1 := @parameter0: android.view.SurfaceHolder;

        return;
    }

    public void onDesiredSizeChanged(int, int)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        int i0, i1;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return;
    }

    public void onDestroy()
    {
        android.service.wallpaper.WallpaperService$Engine r0;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        return;
    }

    public void onOffsetsChanged(float, float, float, float, int, int)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        float f0, f1, f2, f3;
        int i0, i1;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        i0 := @parameter4: int;

        i1 := @parameter5: int;

        return;
    }

    public void onSurfaceChanged(android.view.SurfaceHolder, int, int, int)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        android.view.SurfaceHolder r1;
        int i0, i1, i2;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        r1 := @parameter0: android.view.SurfaceHolder;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        return;
    }

    public void onSurfaceCreated(android.view.SurfaceHolder)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        android.view.SurfaceHolder r1;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        r1 := @parameter0: android.view.SurfaceHolder;

        return;
    }

    public void onSurfaceDestroyed(android.view.SurfaceHolder)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        android.view.SurfaceHolder r1;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        r1 := @parameter0: android.view.SurfaceHolder;

        return;
    }

    public void onSurfaceRedrawNeeded(android.view.SurfaceHolder)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        android.view.SurfaceHolder r1;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        r1 := @parameter0: android.view.SurfaceHolder;

        return;
    }

    public void onTouchEvent(android.view.MotionEvent)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        android.view.MotionEvent r1;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        r1 := @parameter0: android.view.MotionEvent;

        return;
    }

    public void onVisibilityChanged(boolean)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        boolean z0;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        z0 := @parameter0: boolean;

        return;
    }

    public void onZoomChanged(float)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        float f0;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        f0 := @parameter0: float;

        return;
    }

    void reportSurfaceDestroyed()
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        android.view.SurfaceHolder$Callback[] r1;
        int i0, i1;
        boolean $z0;
        com.android.internal.view.BaseSurfaceHolder $r2, $r3, $r4, $r5;
        android.view.SurfaceHolder$Callback $r6;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        $z0 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mSurfaceCreated>;

        if $z0 == 0 goto label3;

        i1 = 0;

        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mSurfaceCreated> = 0;

        $r2 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        virtualinvoke $r2.<com.android.internal.view.BaseSurfaceHolder: void ungetCallbacks()>();

        $r3 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        r1 = virtualinvoke $r3.<com.android.internal.view.BaseSurfaceHolder: android.view.SurfaceHolder$Callback[] getCallbacks()>();

        if r1 == null goto label2;

        i0 = lengthof r1;

     label1:
        if i1 >= i0 goto label2;

        $r6 = r1[i1];

        $r5 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        interfaceinvoke $r6.<android.view.SurfaceHolder$Callback: void surfaceDestroyed(android.view.SurfaceHolder)>($r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r4 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void onSurfaceDestroyed(android.view.SurfaceHolder)>($r4);

     label3:
        return;
    }

    void reportVisibility()
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        android.view.Display r1;
        boolean $z0, $z1, z2, $z3;
        int i0;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        $z0 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mDestroyed>;

        if $z0 != 0 goto label6;

        r1 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.Display mDisplay>;

        if r1 != null goto label1;

        i0 = 0;

        goto label2;

     label1:
        i0 = virtualinvoke r1.<android.view.Display: int getState()>();

     label2:
        r0.<android.service.wallpaper.WallpaperService$Engine: int mDisplayState> = i0;

        $z1 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mVisible>;

        if $z1 == 0 goto label3;

        if i0 == 1 goto label3;

        z2 = 1;

        goto label4;

     label3:
        z2 = 0;

     label4:
        $z3 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mReportedVisible>;

        if $z3 == z2 goto label6;

        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mReportedVisible> = z2;

        if z2 == 0 goto label5;

        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void doOffsetsChanged(boolean)>(0);

        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void updateSurface(boolean,boolean,boolean)>(1, 0, 0);

     label5:
        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void onVisibilityChanged(boolean)>(z2);

     label6:
        return;
    }

    public void setCreated(boolean)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        boolean z0;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        z0 := @parameter0: boolean;

        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mCreated> = z0;

        return;
    }

    public void setFixedSizeAllowed(boolean)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        boolean z0;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        z0 := @parameter0: boolean;

        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mFixedSizeAllowed> = z0;

        return;
    }

    public void setOffsetNotificationsEnabled(boolean)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        boolean z0, $z1;
        int $i0, $i1, i2;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $i1 = r0.<android.service.wallpaper.WallpaperService$Engine: int mWindowPrivateFlags>;

        i2 = $i1 | 4;

        goto label2;

     label1:
        $i0 = r0.<android.service.wallpaper.WallpaperService$Engine: int mWindowPrivateFlags>;

        i2 = $i0 & -5;

     label2:
        r0.<android.service.wallpaper.WallpaperService$Engine: int mWindowPrivateFlags> = i2;

        $z1 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mCreated>;

        if $z1 == 0 goto label3;

        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void updateSurface(boolean,boolean,boolean)>(0, 0, 0);

     label3:
        return;
    }

    public void setTouchEventsEnabled(boolean)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        boolean z0, $z1;
        int $i0, $i1, i2;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $i1 = r0.<android.service.wallpaper.WallpaperService$Engine: int mWindowFlags>;

        i2 = $i1 & -17;

        goto label2;

     label1:
        $i0 = r0.<android.service.wallpaper.WallpaperService$Engine: int mWindowFlags>;

        i2 = $i0 | 16;

     label2:
        r0.<android.service.wallpaper.WallpaperService$Engine: int mWindowFlags> = i2;

        $z1 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mCreated>;

        if $z1 == 0 goto label3;

        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void updateSurface(boolean,boolean,boolean)>(0, 0, 0);

     label3:
        return;
    }

    public void setZoom(float)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        float f0, $f1, $f2;
        java.lang.Object r1;
        boolean $z0, $z1, z2;
        int $i0;
        java.lang.Throwable $r3;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        f0 := @parameter0: float;

        z2 = 0;

        r1 = r0.<android.service.wallpaper.WallpaperService$Engine: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mIsInAmbientMode>;

        if $z0 == 0 goto label2;

        r0.<android.service.wallpaper.WallpaperService$Engine: float mZoom> = 0.0F;

     label2:
        $f1 = r0.<android.service.wallpaper.WallpaperService$Engine: float mZoom>;

        $i0 = staticinvoke <java.lang.Float: int compare(float,float)>(f0, $f1);

        if $i0 == 0 goto label4;

        r0.<android.service.wallpaper.WallpaperService$Engine: float mZoom> = f0;

     label3:
        z2 = 1;

     label4:
        exitmonitor r1;

     label5:
        if z2 == 0 goto label6;

        $z1 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mDestroyed>;

        if $z1 != 0 goto label6;

        $f2 = r0.<android.service.wallpaper.WallpaperService$Engine: float mZoom>;

        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void onZoomChanged(float)>($f2);

     label6:
        return;

     label7:
        $r3 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public boolean shouldZoomOutWallpaper()
    {
        android.service.wallpaper.WallpaperService$Engine r0;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        return 0;
    }

    void updateSurface(boolean, boolean, boolean)
    {
        android.service.wallpaper.WallpaperService$Engine r0;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, z14, z15, z16, z17, z18, z19, z20, $z21, z22, z23, z24, z25, z27, z28, z29, z30, z31, z33, z34, z36, z37, z38, z40, $z42;
        com.android.internal.view.BaseIWindow r1, $r10, $r32, $r83, $r87, $r100, r128;
        android.view.DisplayCutout$ParcelableWrapper r2, $r22, $r42, $r59, $r60, r133;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i47, $i48, $i49, i51, i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, i67, i68, i69, i70, i71, i72, i73, i74, i75, i76, i77, i78, i79, i80, i81, i82, i83, $i84, $i85, $i86, i87, i88, i89, i90;
        com.android.internal.view.BaseSurfaceHolder $r3, $r4, $r5, $r6, $r25, $r26, $r28, $r30, $r34, $r35, $r36, $r52, $r54, $r55, $r56, $r63, $r113, $r114, $r115, $r164, $r165;
        java.util.concurrent.locks.ReentrantLock $r7, $r27;
        android.view.WindowManager$LayoutParams $r8, $r67, $r75, $r76, $r77, $r79, $r82, $r116, $r117, $r118, $r119, $r120, $r121, $r122, $r123, $r124, r129, r145;
        android.graphics.Rect $r9, $r16, $r17, $r18, $r19, $r20, $r21, $r38, $r39, $r40, $r41, $r44, $r45, $r47, $r48, $r69, $r70, r130, r131, r132, r146, r147, r148, r149, r150, r153, r154, r155, r156, r157, r158, r159, r160, r161;
        android.view.SurfaceControl $r11, $r15, $r64, $r66, r152;
        android.graphics.Point $r12;
        android.view.InsetsSourceControl[] $r13, $r85;
        android.view.InsetsState $r14, r134;
        android.view.DisplayCutout $r23, $r24, $r43, $r51, $r61, $r62;
        android.view.Surface $r29, $r65;
        android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper $r31, $r58, $r68, $r74, $r89, $r99;
        android.view.IWindowSession $r33, $r86, $r101, r127, r144;
        android.view.SurfaceHolder$Callback2 $r37;
        android.service.wallpaper.WallpaperService $r46, $r72, $r78;
        android.content.res.Resources $r49;
        android.content.res.Configuration $r50;
        android.view.SurfaceHolder$Callback $r53, $r57, r169;
        int[] $r71;
        android.content.res.TypedArray $r73;
        java.lang.Class $r80;
        java.lang.String $r81;
        android.view.Display $r84;
        android.os.Looper $r88;
        android.os.RemoteException $r90, $r91, $r92, $r93, $r94, $r95, $r96, $r97, $r102, $r103, $r105, $r106, $r107, $r108, $r109, $r110, $r111, $r112;
        java.lang.Throwable $r98, $r104, r170;
        android.os.IBinder $r125;
        android.view.InputChannel r126;
        android.service.wallpaper.WallpaperService$Engine$WallpaperInputEventReceiver r135;
        android.util.MergedConfiguration r151;
        android.view.SurfaceHolder$Callback[] r163, r166, r168;
        android.view.WindowInsets r167;

        r0 := @this: android.service.wallpaper.WallpaperService$Engine;

        z14 := @parameter0: boolean;

        z0 := @parameter1: boolean;

        z15 := @parameter2: boolean;

        $z2 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mDestroyed>;

        if $z2 == 0 goto label001;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WallpaperService", "Ignoring updateSurface: destroyed");

     label001:
        z16 = 0;

        $r3 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        i51 = virtualinvoke $r3.<com.android.internal.view.BaseSurfaceHolder: int getRequestedWidth()>();

        if i51 > 0 goto label002;

        i51 = -1;

        goto label003;

     label002:
        z16 = 1;

     label003:
        $r4 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        i52 = virtualinvoke $r4.<com.android.internal.view.BaseSurfaceHolder: int getRequestedHeight()>();

        if i52 > 0 goto label004;

        i52 = -1;

        z17 = z16;

        goto label005;

     label004:
        z17 = 1;

     label005:
        $z3 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mCreated>;

        z1 = $z3 ^ 1;

        $z4 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mSurfaceCreated>;

        z18 = $z4 ^ 1;

        $i1 = r0.<android.service.wallpaper.WallpaperService$Engine: int mFormat>;

        $r5 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $i2 = virtualinvoke $r5.<com.android.internal.view.BaseSurfaceHolder: int getRequestedFormat()>();

        if $i1 == $i2 goto label006;

        z19 = 1;

        goto label007;

     label006:
        z19 = 0;

     label007:
        $i3 = r0.<android.service.wallpaper.WallpaperService$Engine: int mWidth>;

        if $i3 != i51 goto label009;

        $i49 = r0.<android.service.wallpaper.WallpaperService$Engine: int mHeight>;

        if $i49 == i52 goto label008;

        goto label009;

     label008:
        z20 = 0;

        goto label010;

     label009:
        z20 = 1;

     label010:
        $z21 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mCreated>;

        z22 = $z21 ^ 1;

        $i53 = r0.<android.service.wallpaper.WallpaperService$Engine: int mType>;

        $r113 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $i54 = virtualinvoke $r113.<com.android.internal.view.BaseSurfaceHolder: int getRequestedType()>();

        if $i53 == $i54 goto label011;

        z23 = 1;

        goto label012;

     label011:
        z23 = 0;

     label012:
        $i5 = r0.<android.service.wallpaper.WallpaperService$Engine: int mCurWindowFlags>;

        $i4 = r0.<android.service.wallpaper.WallpaperService$Engine: int mWindowFlags>;

        if $i5 != $i4 goto label014;

        $i48 = r0.<android.service.wallpaper.WallpaperService$Engine: int mCurWindowPrivateFlags>;

        $i47 = r0.<android.service.wallpaper.WallpaperService$Engine: int mWindowPrivateFlags>;

        if $i48 == $i47 goto label013;

        goto label014;

     label013:
        z24 = 0;

        goto label015;

     label014:
        z24 = 1;

     label015:
        if z14 != 0 goto label017;

        if z1 != 0 goto label017;

        if z18 != 0 goto label017;

        if z19 != 0 goto label017;

        if z20 != 0 goto label017;

        if z23 != 0 goto label017;

        if z24 != 0 goto label017;

        if z15 != 0 goto label017;

        $r89 = r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper mIWallpaperEngine>;

        $z13 = $r89.<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: boolean mShownReported>;

        if $z13 != 0 goto label016;

        goto label017;

     label016:
        goto label131;

     label017:
        r0.<android.service.wallpaper.WallpaperService$Engine: int mWidth> = i51;

        r0.<android.service.wallpaper.WallpaperService$Engine: int mHeight> = i52;

        $r114 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $i55 = virtualinvoke $r114.<com.android.internal.view.BaseSurfaceHolder: int getRequestedFormat()>();

        r0.<android.service.wallpaper.WallpaperService$Engine: int mFormat> = $i55;

        $r115 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $i56 = virtualinvoke $r115.<com.android.internal.view.BaseSurfaceHolder: int getRequestedType()>();

        r0.<android.service.wallpaper.WallpaperService$Engine: int mType> = $i56;

        $r116 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.WindowManager$LayoutParams mLayout>;

        $r116.<android.view.WindowManager$LayoutParams: int x> = 0;

        $r117 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.WindowManager$LayoutParams mLayout>;

        $r117.<android.view.WindowManager$LayoutParams: int y> = 0;

        $r118 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.WindowManager$LayoutParams mLayout>;

        $r118.<android.view.WindowManager$LayoutParams: int width> = i51;

        $r119 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.WindowManager$LayoutParams mLayout>;

        $r119.<android.view.WindowManager$LayoutParams: int height> = i52;

        $r120 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.WindowManager$LayoutParams mLayout>;

        $i57 = r0.<android.service.wallpaper.WallpaperService$Engine: int mFormat>;

        $r120.<android.view.WindowManager$LayoutParams: int format> = $i57;

        $i58 = r0.<android.service.wallpaper.WallpaperService$Engine: int mWindowFlags>;

        r0.<android.service.wallpaper.WallpaperService$Engine: int mCurWindowFlags> = $i58;

        $r121 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.WindowManager$LayoutParams mLayout>;

        $i59 = r0.<android.service.wallpaper.WallpaperService$Engine: int mWindowFlags>;

        $i60 = $i59 | 512;

        $i61 = $i60 | 65536;

        $i62 = $i61 | 256;

        $i63 = $i62 | 8;

        $r121.<android.view.WindowManager$LayoutParams: int flags> = $i63;

        $i64 = r0.<android.service.wallpaper.WallpaperService$Engine: int mWindowPrivateFlags>;

        r0.<android.service.wallpaper.WallpaperService$Engine: int mCurWindowPrivateFlags> = $i64;

        $r122 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.WindowManager$LayoutParams mLayout>;

        $i65 = r0.<android.service.wallpaper.WallpaperService$Engine: int mWindowPrivateFlags>;

        $r122.<android.view.WindowManager$LayoutParams: int privateFlags> = $i65;

        $r123 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.WindowManager$LayoutParams mLayout>;

        $i66 = r0.<android.service.wallpaper.WallpaperService$Engine: int mType>;

        $r123.<android.view.WindowManager$LayoutParams: int memoryType> = $i66;

        $r124 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.WindowManager$LayoutParams mLayout>;

        $r125 = r0.<android.service.wallpaper.WallpaperService$Engine: android.os.IBinder mWindowToken>;

        $r124.<android.view.WindowManager$LayoutParams: android.os.IBinder token> = $r125;

        z25 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mCreated>;

     label018:
        if z25 != 0 goto label037;

     label019:
        $r72 = r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService this$0>;

        $r71 = <com.android.internal.R$styleable: int[] Window>;

        $r73 = virtualinvoke $r72.<android.service.wallpaper.WallpaperService: android.content.res.TypedArray obtainStyledAttributes(int[])>($r71);

        virtualinvoke $r73.<android.content.res.TypedArray: void recycle()>();

        $r75 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.WindowManager$LayoutParams mLayout>;

        $r74 = r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper mIWallpaperEngine>;

        $i44 = $r74.<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: int mWindowType>;

        $r75.<android.view.WindowManager$LayoutParams: int type> = $i44;

        $r76 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.WindowManager$LayoutParams mLayout>;

        $r76.<android.view.WindowManager$LayoutParams: int gravity> = 8388659;

        $r77 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.WindowManager$LayoutParams mLayout>;

        virtualinvoke $r77.<android.view.WindowManager$LayoutParams: void setFitInsetsTypes(int)>(0);

        $r79 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.WindowManager$LayoutParams mLayout>;

        $r78 = r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService this$0>;

        $r80 = virtualinvoke $r78.<java.lang.Object: java.lang.Class getClass()>();

        $r81 = virtualinvoke $r80.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r79.<android.view.WindowManager$LayoutParams: void setTitle(java.lang.CharSequence)>($r81);

        $r82 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.WindowManager$LayoutParams mLayout>;

        $r82.<android.view.WindowManager$LayoutParams: int windowAnimations> = 16974606;

        r126 = new android.view.InputChannel;

        specialinvoke r126.<android.view.InputChannel: void <init>()>();

        r127 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.IWindowSession mSession>;

        r128 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseIWindow mWindow>;

        $r83 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseIWindow mWindow>;

        i67 = $r83.<com.android.internal.view.BaseIWindow: int mSeq>;

     label020:
        r129 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.WindowManager$LayoutParams mLayout>;

     label021:
        $r84 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.Display mDisplay>;

        i68 = virtualinvoke $r84.<android.view.Display: int getDisplayId()>();

        r130 = r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mWinFrame>;

     label022:
        r131 = r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mContentInsets>;

     label023:
        r132 = r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mStableInsets>;

     label024:
        r133 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.DisplayCutout$ParcelableWrapper mDisplayCutout>;

     label025:
        r134 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.InsetsState mInsetsState>;

     label026:
        $r85 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.InsetsSourceControl[] mTempControls>;

        $i45 = interfaceinvoke r127.<android.view.IWindowSession: int addToDisplay(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InputChannel,android.view.InsetsState,android.view.InsetsSourceControl[])>(r128, i67, r129, 0, i68, r130, r131, r132, r133, r126, r134, $r85);

        if $i45 >= 0 goto label028;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WallpaperService", "Failed to add window while updating wallpaper surface.");

     label027:
        return;

     label028:
        $r86 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.IWindowSession mSession>;

        $r87 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseIWindow mWindow>;

        $z12 = virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: boolean shouldZoomOutWallpaper()>();

        interfaceinvoke $r86.<android.view.IWindowSession: void setShouldZoomOutWallpaper(android.os.IBinder,boolean)>($r87, $z12);

        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mCreated> = 1;

        r135 = new android.service.wallpaper.WallpaperService$Engine$WallpaperInputEventReceiver;

        $r88 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        specialinvoke r135.<android.service.wallpaper.WallpaperService$Engine$WallpaperInputEventReceiver: void <init>(android.service.wallpaper.WallpaperService$Engine,android.view.InputChannel,android.os.Looper)>(r0, r126, $r88);

        r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService$Engine$WallpaperInputEventReceiver mInputEventReceiver> = r135;

     label029:
        goto label037;

     label030:
        $r108 := @caughtexception;

        goto label131;

     label031:
        $r95 := @caughtexception;

        goto label131;

     label032:
        $r93 := @caughtexception;

        goto label131;

     label033:
        $r106 := @caughtexception;

        goto label131;

     label034:
        $r105 := @caughtexception;

        goto label131;

     label035:
        $r110 := @caughtexception;

        goto label131;

     label036:
        $r96 := @caughtexception;

        goto label131;

     label037:
        $r6 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $r7 = $r6.<com.android.internal.view.BaseSurfaceHolder: java.util.concurrent.locks.ReentrantLock mSurfaceLock>;

        virtualinvoke $r7.<java.util.concurrent.locks.ReentrantLock: void lock()>();

        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mDrawingAllowed> = 1;

     label038:
        if z17 != 0 goto label042;

     label039:
        $r67 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.WindowManager$LayoutParams mLayout>;

        $r70 = $r67.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        $r68 = r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper mIWallpaperEngine>;

        $r69 = $r68.<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: android.graphics.Rect mDisplayPadding>;

        virtualinvoke $r70.<android.graphics.Rect: void set(android.graphics.Rect)>($r69);

     label040:
        goto label043;

     label041:
        $r97 := @caughtexception;

        goto label131;

     label042:
        $r8 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.WindowManager$LayoutParams mLayout>;

        $r9 = $r8.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        virtualinvoke $r9.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, 0, 0);

     label043:
        r144 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.IWindowSession mSession>;

        r1 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseIWindow mWindow>;

        $r10 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseIWindow mWindow>;

        i69 = $r10.<com.android.internal.view.BaseIWindow: int mSeq>;

        r145 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.WindowManager$LayoutParams mLayout>;

        i70 = r0.<android.service.wallpaper.WallpaperService$Engine: int mWidth>;

        i71 = r0.<android.service.wallpaper.WallpaperService$Engine: int mHeight>;

        r146 = r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mWinFrame>;

        r147 = r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mContentInsets>;

        r148 = r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mVisibleInsets>;

        r149 = r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mStableInsets>;

        r150 = r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mBackdropFrame>;

        r2 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.DisplayCutout$ParcelableWrapper mDisplayCutout>;

     label044:
        r151 = r0.<android.service.wallpaper.WallpaperService$Engine: android.util.MergedConfiguration mMergedConfiguration>;

     label045:
        r152 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.SurfaceControl mSurfaceControl>;

     label046:
        $r14 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.InsetsState mInsetsState>;

        $r13 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.InsetsSourceControl[] mTempControls>;

        $r12 = r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Point mSurfaceSize>;

        $r11 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.SurfaceControl mTmpSurfaceControl>;

        i72 = interfaceinvoke r144.<android.view.IWindowSession: int relayout(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,int,int,long,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.util.MergedConfiguration,android.view.SurfaceControl,android.view.InsetsState,android.view.InsetsSourceControl[],android.graphics.Point,android.view.SurfaceControl)>(r1, i69, r145, i70, i71, 0, 0, -1L, r146, r147, r148, r149, r150, r2, r151, r152, $r14, $r13, $r12, $r11);

        $r15 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.SurfaceControl mSurfaceControl>;

        $z5 = virtualinvoke $r15.<android.view.SurfaceControl: boolean isValid()>();

        if $z5 == 0 goto label047;

        $r63 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $r65 = $r63.<com.android.internal.view.BaseSurfaceHolder: android.view.Surface mSurface>;

        $r64 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.SurfaceControl mSurfaceControl>;

        virtualinvoke $r65.<android.view.Surface: void copyFrom(android.view.SurfaceControl)>($r64);

        $r66 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.SurfaceControl mSurfaceControl>;

        virtualinvoke $r66.<android.view.SurfaceControl: void release()>();

     label047:
        $r16 = r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mWinFrame>;

        i73 = virtualinvoke $r16.<android.graphics.Rect: int width()>();

        $r17 = r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mWinFrame>;

        i74 = virtualinvoke $r17.<android.graphics.Rect: int height()>();

     label048:
        if z17 != 0 goto label051;

     label049:
        $r58 = r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper mIWallpaperEngine>;

        r153 = $r58.<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: android.graphics.Rect mDisplayPadding>;

        i75 = r153.<android.graphics.Rect: int left>;

        i76 = r153.<android.graphics.Rect: int right>;

        i77 = r153.<android.graphics.Rect: int top>;

        i0 = r153.<android.graphics.Rect: int bottom>;

        r154 = r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mContentInsets>;

        $i11 = r154.<android.graphics.Rect: int left>;

        $i10 = r153.<android.graphics.Rect: int left>;

        $i12 = $i11 + $i10;

        r154.<android.graphics.Rect: int left> = $i12;

        r155 = r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mContentInsets>;

        $i14 = r155.<android.graphics.Rect: int top>;

        $i13 = r153.<android.graphics.Rect: int top>;

        $i15 = $i14 + $i13;

        r155.<android.graphics.Rect: int top> = $i15;

        r156 = r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mContentInsets>;

        $i17 = r156.<android.graphics.Rect: int right>;

        $i16 = r153.<android.graphics.Rect: int right>;

        $i18 = $i17 + $i16;

        r156.<android.graphics.Rect: int right> = $i18;

        r157 = r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mContentInsets>;

        $i20 = r157.<android.graphics.Rect: int bottom>;

        $i19 = r153.<android.graphics.Rect: int bottom>;

        $i21 = $i20 + $i19;

        r157.<android.graphics.Rect: int bottom> = $i21;

        r158 = r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mStableInsets>;

        $i23 = r158.<android.graphics.Rect: int left>;

        $i22 = r153.<android.graphics.Rect: int left>;

        $i24 = $i23 + $i22;

        r158.<android.graphics.Rect: int left> = $i24;

        r159 = r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mStableInsets>;

        $i26 = r159.<android.graphics.Rect: int top>;

        $i25 = r153.<android.graphics.Rect: int top>;

        $i27 = $i26 + $i25;

        r159.<android.graphics.Rect: int top> = $i27;

        r160 = r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mStableInsets>;

        $i29 = r160.<android.graphics.Rect: int right>;

        $i28 = r153.<android.graphics.Rect: int right>;

        $i30 = $i29 + $i28;

        r160.<android.graphics.Rect: int right> = $i30;

        r161 = r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mStableInsets>;

        $i32 = r161.<android.graphics.Rect: int bottom>;

        $i31 = r153.<android.graphics.Rect: int bottom>;

        $i33 = $i32 + $i31;

        r161.<android.graphics.Rect: int bottom> = $i33;

        $r60 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.DisplayCutout$ParcelableWrapper mDisplayCutout>;

        $r59 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.DisplayCutout$ParcelableWrapper mDisplayCutout>;

        $r61 = virtualinvoke $r59.<android.view.DisplayCutout$ParcelableWrapper: android.view.DisplayCutout get()>();

        $i34 = r153.<android.graphics.Rect: int left>;

        $i41 = neg $i34;

        $i35 = r153.<android.graphics.Rect: int top>;

        $i40 = neg $i35;

        $i36 = r153.<android.graphics.Rect: int right>;

        $i39 = neg $i36;

        $i37 = r153.<android.graphics.Rect: int bottom>;

        $i38 = neg $i37;

        $r62 = virtualinvoke $r61.<android.view.DisplayCutout: android.view.DisplayCutout inset(int,int,int,int)>($i41, $i40, $i39, $i38);

        virtualinvoke $r60.<android.view.DisplayCutout$ParcelableWrapper: void set(android.view.DisplayCutout)>($r62);

     label050:
        $i42 = i77 + i0;

        i78 = i74 + $i42;

        $i43 = i75 + i76;

        i79 = i73 + $i43;

        goto label052;

     label051:
        i78 = i52;

        i79 = i51;

     label052:
        i80 = r0.<android.service.wallpaper.WallpaperService$Engine: int mCurWidth>;

     label053:
        if i80 == i79 goto label056;

        z27 = 1;

     label054:
        r0.<android.service.wallpaper.WallpaperService$Engine: int mCurWidth> = i79;

     label055:
        goto label057;

     label056:
        z27 = z20;

     label057:
        i81 = r0.<android.service.wallpaper.WallpaperService$Engine: int mCurHeight>;

     label058:
        z28 = z27;

        if i81 == i78 goto label062;

     label059:
        r0.<android.service.wallpaper.WallpaperService$Engine: int mCurHeight> = i78;

     label060:
        z28 = 1;

        goto label062;

     label061:
        $r90 := @caughtexception;

        goto label131;

     label062:
        $r19 = r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mDispatchedContentInsets>;

        $r18 = r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mContentInsets>;

        z29 = virtualinvoke $r19.<android.graphics.Rect: boolean equals(java.lang.Object)>($r18);

     label063:
        if z29 != 0 goto label064;

        z30 = 1;

        goto label065;

     label064:
        z30 = 0;

     label065:
        z31 = z22 | z30;

     label066:
        $r21 = r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mDispatchedStableInsets>;

        $r20 = r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mStableInsets>;

        $z6 = virtualinvoke $r21.<android.graphics.Rect: boolean equals(java.lang.Object)>($r20);

        if $z6 != 0 goto label068;

     label067:
        z33 = 1;

        goto label069;

     label068:
        z33 = 0;

     label069:
        z34 = z31 | z33;

     label070:
        $r23 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.DisplayCutout mDispatchedDisplayCutout>;

        $r22 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.DisplayCutout$ParcelableWrapper mDisplayCutout>;

        $r24 = virtualinvoke $r22.<android.view.DisplayCutout$ParcelableWrapper: android.view.DisplayCutout get()>();

        z36 = virtualinvoke $r23.<android.view.DisplayCutout: boolean equals(java.lang.Object)>($r24);

     label071:
        if z36 != 0 goto label072;

        z37 = 1;

        goto label073;

     label072:
        z37 = 0;

     label073:
        $r25 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        virtualinvoke $r25.<com.android.internal.view.BaseSurfaceHolder: void setSurfaceFrameSize(int,int)>(i79, i78);

        $r26 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $r27 = $r26.<com.android.internal.view.BaseSurfaceHolder: java.util.concurrent.locks.ReentrantLock mSurfaceLock>;

        virtualinvoke $r27.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        $r28 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $r29 = $r28.<com.android.internal.view.BaseSurfaceHolder: android.view.Surface mSurface>;

        $z7 = virtualinvoke $r29.<android.view.Surface: boolean isValid()>();

        if $z7 != 0 goto label075;

        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void reportSurfaceDestroyed()>();

     label074:
        return;

     label075:
        z38 = 0;

     label076:
        $r30 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        virtualinvoke $r30.<com.android.internal.view.BaseSurfaceHolder: void ungetCallbacks()>();

     label077:
        if z18 == 0 goto label086;

     label078:
        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mIsCreating> = 1;

     label079:
        $r54 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void onSurfaceCreated(android.view.SurfaceHolder)>($r54);

        $r55 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        r163 = virtualinvoke $r55.<com.android.internal.view.BaseSurfaceHolder: android.view.SurfaceHolder$Callback[] getCallbacks()>();

     label080:
        z38 = 1;

        if r163 == null goto label086;

     label081:
        i82 = lengthof r163;

     label082:
        i83 = 0;

     label083:
        z38 = 1;

        if i83 >= i82 goto label086;

     label084:
        $r57 = r163[i83];

        $r56 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        interfaceinvoke $r57.<android.view.SurfaceHolder$Callback: void surfaceCreated(android.view.SurfaceHolder)>($r56);

     label085:
        i83 = i83 + 1;

        goto label083;

     label086:
        if z1 != 0 goto label088;

        $i9 = i72 & 2;

        if $i9 == 0 goto label087;

        goto label088;

     label087:
        z40 = 0;

        goto label089;

     label088:
        z40 = 1;

     label089:
        z15 = z15 | z40;

        if z0 != 0 goto label090;

        if z1 != 0 goto label090;

        if z18 != 0 goto label090;

        if z19 != 0 goto label090;

        if z28 == 0 goto label097;

     label090:
        $r164 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $i84 = r0.<android.service.wallpaper.WallpaperService$Engine: int mFormat>;

        $i85 = r0.<android.service.wallpaper.WallpaperService$Engine: int mCurWidth>;

        $i86 = r0.<android.service.wallpaper.WallpaperService$Engine: int mCurHeight>;

        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void onSurfaceChanged(android.view.SurfaceHolder,int,int,int)>($r164, $i84, $i85, $i86);

        $r165 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        r166 = virtualinvoke $r165.<com.android.internal.view.BaseSurfaceHolder: android.view.SurfaceHolder$Callback[] getCallbacks()>();

     label091:
        z38 = 1;

        if r166 == null goto label097;

     label092:
        i87 = lengthof r166;

     label093:
        i88 = 0;

     label094:
        z38 = 1;

        if i88 >= i87 goto label097;

     label095:
        $r53 = r166[i88];

        $r52 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $i8 = r0.<android.service.wallpaper.WallpaperService$Engine: int mFormat>;

        $i7 = r0.<android.service.wallpaper.WallpaperService$Engine: int mCurWidth>;

        $i6 = r0.<android.service.wallpaper.WallpaperService$Engine: int mCurHeight>;

        interfaceinvoke $r53.<android.view.SurfaceHolder$Callback: void surfaceChanged(android.view.SurfaceHolder,int,int,int)>($r52, $i8, $i7, $i6);

     label096:
        i88 = i88 + 1;

        goto label094;

     label097:
        $z42 = z34 | z37;

        if $z42 == 0 goto label099;

     label098:
        $r39 = r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mDispatchedContentInsets>;

        $r38 = r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mContentInsets>;

        virtualinvoke $r39.<android.graphics.Rect: void set(android.graphics.Rect)>($r38);

        $r41 = r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mDispatchedStableInsets>;

        $r40 = r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mStableInsets>;

        virtualinvoke $r41.<android.graphics.Rect: void set(android.graphics.Rect)>($r40);

        $r42 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.DisplayCutout$ParcelableWrapper mDisplayCutout>;

        $r43 = virtualinvoke $r42.<android.view.DisplayCutout$ParcelableWrapper: android.view.DisplayCutout get()>();

        r0.<android.service.wallpaper.WallpaperService$Engine: android.view.DisplayCutout mDispatchedDisplayCutout> = $r43;

        $r45 = r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mFinalStableInsets>;

        $r44 = r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mDispatchedStableInsets>;

        virtualinvoke $r45.<android.graphics.Rect: void set(android.graphics.Rect)>($r44);

        r167 = new android.view.WindowInsets;

        $r47 = r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mFinalSystemInsets>;

        $r48 = r0.<android.service.wallpaper.WallpaperService$Engine: android.graphics.Rect mFinalStableInsets>;

        $r46 = r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService this$0>;

        $r49 = virtualinvoke $r46.<android.service.wallpaper.WallpaperService: android.content.res.Resources getResources()>();

        $r50 = virtualinvoke $r49.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        $z11 = virtualinvoke $r50.<android.content.res.Configuration: boolean isScreenRound()>();

        $r51 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.DisplayCutout mDispatchedDisplayCutout>;

        specialinvoke r167.<android.view.WindowInsets: void <init>(android.graphics.Rect,android.graphics.Rect,boolean,boolean,android.view.DisplayCutout)>($r47, $r48, $z11, 0, $r51);

        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void onApplyWindowInsets(android.view.WindowInsets)>(r167);

     label099:
        if z15 == 0 goto label107;

     label100:
        $r34 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void onSurfaceRedrawNeeded(android.view.SurfaceHolder)>($r34);

        $r35 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        r168 = virtualinvoke $r35.<com.android.internal.view.BaseSurfaceHolder: android.view.SurfaceHolder$Callback[] getCallbacks()>();

     label101:
        if r168 == null goto label107;

     label102:
        i89 = lengthof r168;

     label103:
        i90 = 0;

     label104:
        if i90 >= i89 goto label107;

        r169 = r168[i90];

     label105:
        $z10 = r169 instanceof android.view.SurfaceHolder$Callback2;

        if $z10 == 0 goto label106;

        $r37 = (android.view.SurfaceHolder$Callback2) r169;

        $r36 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        interfaceinvoke $r37.<android.view.SurfaceHolder$Callback2: void surfaceRedrawNeeded(android.view.SurfaceHolder)>($r36);

     label106:
        i90 = i90 + 1;

        goto label104;

     label107:
        if z38 == 0 goto label110;

     label108:
        $z8 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mReportedVisible>;

        if $z8 != 0 goto label110;

        $z9 = r0.<android.service.wallpaper.WallpaperService$Engine: boolean mIsCreating>;

        if $z9 == 0 goto label109;

        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void onVisibilityChanged(boolean)>(1);

     label109:
        virtualinvoke r0.<android.service.wallpaper.WallpaperService$Engine: void onVisibilityChanged(boolean)>(0);

     label110:
        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mIsCreating> = 0;

        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mSurfaceCreated> = 1;

     label111:
        if z15 == 0 goto label113;

     label112:
        $r33 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.IWindowSession mSession>;

        $r32 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseIWindow mWindow>;

        interfaceinvoke $r33.<android.view.IWindowSession: void finishDrawing(android.view.IWindow,android.view.SurfaceControl$Transaction)>($r32, null);

     label113:
        $r31 = r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper mIWallpaperEngine>;

        virtualinvoke $r31.<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void reportShown()>();

     label114:
        goto label131;

     label115:
        $r98 := @caughtexception;

        r170 = $r98;

        goto label117;

     label116:
        $r104 := @caughtexception;

        r170 = $r104;

     label117:
        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mIsCreating> = 0;

        r0.<android.service.wallpaper.WallpaperService$Engine: boolean mSurfaceCreated> = 1;

     label118:
        if z15 == 0 goto label120;

     label119:
        $r101 = r0.<android.service.wallpaper.WallpaperService$Engine: android.view.IWindowSession mSession>;

        $r100 = r0.<android.service.wallpaper.WallpaperService$Engine: com.android.internal.view.BaseIWindow mWindow>;

        interfaceinvoke $r101.<android.view.IWindowSession: void finishDrawing(android.view.IWindow,android.view.SurfaceControl$Transaction)>($r100, null);

     label120:
        $r99 = r0.<android.service.wallpaper.WallpaperService$Engine: android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper mIWallpaperEngine>;

        virtualinvoke $r99.<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void reportShown()>();

     label121:
        throw r170;

     label122:
        $r111 := @caughtexception;

        goto label131;

     label123:
        $r103 := @caughtexception;

        goto label131;

     label124:
        $r112 := @caughtexception;

        goto label131;

     label125:
        $r92 := @caughtexception;

        goto label131;

     label126:
        $r107 := @caughtexception;

        goto label131;

     label127:
        $r91 := @caughtexception;

        goto label131;

     label128:
        $r102 := @caughtexception;

        goto label131;

     label129:
        $r94 := @caughtexception;

        goto label131;

     label130:
        $r109 := @caughtexception;

     label131:
        return;

        catch android.os.RemoteException from label017 to label018 with label130;
        catch android.os.RemoteException from label019 to label020 with label036;
        catch android.os.RemoteException from label020 to label021 with label035;
        catch android.os.RemoteException from label021 to label022 with label034;
        catch android.os.RemoteException from label022 to label023 with label033;
        catch android.os.RemoteException from label023 to label024 with label032;
        catch android.os.RemoteException from label024 to label025 with label031;
        catch android.os.RemoteException from label025 to label026 with label030;
        catch android.os.RemoteException from label026 to label027 with label041;
        catch android.os.RemoteException from label028 to label029 with label041;
        catch android.os.RemoteException from label037 to label038 with label129;
        catch android.os.RemoteException from label039 to label040 with label041;
        catch android.os.RemoteException from label042 to label043 with label129;
        catch android.os.RemoteException from label043 to label044 with label129;
        catch android.os.RemoteException from label044 to label045 with label128;
        catch android.os.RemoteException from label045 to label046 with label127;
        catch android.os.RemoteException from label046 to label047 with label126;
        catch android.os.RemoteException from label047 to label048 with label126;
        catch android.os.RemoteException from label049 to label050 with label126;
        catch android.os.RemoteException from label052 to label053 with label126;
        catch android.os.RemoteException from label054 to label055 with label125;
        catch android.os.RemoteException from label057 to label058 with label125;
        catch android.os.RemoteException from label059 to label060 with label061;
        catch android.os.RemoteException from label062 to label063 with label125;
        catch android.os.RemoteException from label066 to label067 with label124;
        catch android.os.RemoteException from label070 to label071 with label124;
        catch android.os.RemoteException from label073 to label074 with label123;
        catch java.lang.Throwable from label076 to label077 with label116;
        catch java.lang.Throwable from label078 to label079 with label116;
        catch java.lang.Throwable from label079 to label080 with label116;
        catch java.lang.Throwable from label081 to label082 with label116;
        catch java.lang.Throwable from label084 to label085 with label116;
        catch java.lang.Throwable from label090 to label091 with label115;
        catch java.lang.Throwable from label092 to label093 with label115;
        catch java.lang.Throwable from label095 to label096 with label115;
        catch java.lang.Throwable from label098 to label099 with label115;
        catch java.lang.Throwable from label100 to label101 with label115;
        catch java.lang.Throwable from label102 to label103 with label115;
        catch java.lang.Throwable from label105 to label106 with label115;
        catch java.lang.Throwable from label108 to label109 with label115;
        catch java.lang.Throwable from label109 to label110 with label115;
        catch android.os.RemoteException from label110 to label111 with label122;
        catch android.os.RemoteException from label112 to label113 with label122;
        catch android.os.RemoteException from label113 to label114 with label122;
        catch android.os.RemoteException from label117 to label118 with label122;
        catch android.os.RemoteException from label119 to label120 with label122;
        catch android.os.RemoteException from label120 to label121 with label122;
        catch android.os.RemoteException from label121 to label122 with label122;
    }
}
