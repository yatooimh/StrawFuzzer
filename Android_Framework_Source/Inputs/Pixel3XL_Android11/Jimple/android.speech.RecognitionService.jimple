public abstract class android.speech.RecognitionService extends android.app.Service
{
    private static final boolean DBG;
    private static final int MSG_CANCEL;
    private static final int MSG_RESET;
    private static final int MSG_START_LISTENING;
    private static final int MSG_STOP_LISTENING;
    public static final java.lang.String SERVICE_INTERFACE;
    public static final java.lang.String SERVICE_META_DATA;
    private static final java.lang.String TAG;
    private android.speech.RecognitionService$RecognitionServiceBinder mBinder;
    private android.speech.RecognitionService$Callback mCurrentCallback;
    private final android.os.Handler mHandler;

    public void <init>()
    {
        android.speech.RecognitionService r0;
        android.speech.RecognitionService$RecognitionServiceBinder $r1;
        android.speech.RecognitionService$1 $r2;

        r0 := @this: android.speech.RecognitionService;

        specialinvoke r0.<android.app.Service: void <init>()>();

        $r1 = new android.speech.RecognitionService$RecognitionServiceBinder;

        specialinvoke $r1.<android.speech.RecognitionService$RecognitionServiceBinder: void <init>(android.speech.RecognitionService)>(r0);

        r0.<android.speech.RecognitionService: android.speech.RecognitionService$RecognitionServiceBinder mBinder> = $r1;

        r0.<android.speech.RecognitionService: android.speech.RecognitionService$Callback mCurrentCallback> = null;

        $r2 = new android.speech.RecognitionService$1;

        specialinvoke $r2.<android.speech.RecognitionService$1: void <init>(android.speech.RecognitionService)>(r0);

        r0.<android.speech.RecognitionService: android.os.Handler mHandler> = $r2;

        return;
    }

    static void access$000(android.speech.RecognitionService, android.content.Intent, android.speech.IRecognitionListener, int)
    {
        android.speech.RecognitionService r0;
        android.content.Intent r1;
        android.speech.IRecognitionListener r2;
        int i0;

        r0 := @parameter0: android.speech.RecognitionService;

        r1 := @parameter1: android.content.Intent;

        r2 := @parameter2: android.speech.IRecognitionListener;

        i0 := @parameter3: int;

        specialinvoke r0.<android.speech.RecognitionService: void dispatchStartListening(android.content.Intent,android.speech.IRecognitionListener,int)>(r1, r2, i0);

        return;
    }

    static void access$100(android.speech.RecognitionService, android.speech.IRecognitionListener)
    {
        android.speech.RecognitionService r0;
        android.speech.IRecognitionListener r1;

        r0 := @parameter0: android.speech.RecognitionService;

        r1 := @parameter1: android.speech.IRecognitionListener;

        specialinvoke r0.<android.speech.RecognitionService: void dispatchStopListening(android.speech.IRecognitionListener)>(r1);

        return;
    }

    static void access$200(android.speech.RecognitionService, android.speech.IRecognitionListener)
    {
        android.speech.RecognitionService r0;
        android.speech.IRecognitionListener r1;

        r0 := @parameter0: android.speech.RecognitionService;

        r1 := @parameter1: android.speech.IRecognitionListener;

        specialinvoke r0.<android.speech.RecognitionService: void dispatchCancel(android.speech.IRecognitionListener)>(r1);

        return;
    }

    static void access$300(android.speech.RecognitionService)
    {
        android.speech.RecognitionService r0;

        r0 := @parameter0: android.speech.RecognitionService;

        specialinvoke r0.<android.speech.RecognitionService: void dispatchClearCallback()>();

        return;
    }

    static android.os.Handler access$400(android.speech.RecognitionService)
    {
        android.speech.RecognitionService r0;
        android.os.Handler $r1;

        r0 := @parameter0: android.speech.RecognitionService;

        $r1 = r0.<android.speech.RecognitionService: android.os.Handler mHandler>;

        return $r1;
    }

    static boolean access$700(android.speech.RecognitionService, android.speech.IRecognitionListener, boolean, java.lang.String, java.lang.String)
    {
        android.speech.RecognitionService r0;
        android.speech.IRecognitionListener r1;
        boolean z0, $z1;
        java.lang.String r2, r3;

        r0 := @parameter0: android.speech.RecognitionService;

        r1 := @parameter1: android.speech.IRecognitionListener;

        z0 := @parameter2: boolean;

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: java.lang.String;

        $z1 = specialinvoke r0.<android.speech.RecognitionService: boolean checkPermissions(android.speech.IRecognitionListener,boolean,java.lang.String,java.lang.String)>(r1, z0, r2, r3);

        return $z1;
    }

    private boolean checkPermissions(android.speech.IRecognitionListener, boolean, java.lang.String, java.lang.String)
    {
        android.speech.RecognitionService r0;
        boolean z0;
        java.lang.String r1, r2;
        int $i0, $i2;
        android.os.RemoteException $r3;
        android.speech.IRecognitionListener r4;

        r0 := @this: android.speech.RecognitionService;

        r4 := @parameter0: android.speech.IRecognitionListener;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        if z0 == 0 goto label1;

        $i2 = staticinvoke <android.content.PermissionChecker: int checkCallingPermissionForDataDelivery(android.content.Context,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r0, "android.permission.RECORD_AUDIO", r1, r2, null);

        if $i2 != 0 goto label2;

        return 1;

     label1:
        $i0 = staticinvoke <android.content.PermissionChecker: int checkCallingOrSelfPermissionForPreflight(android.content.Context,java.lang.String)>(r0, "android.permission.RECORD_AUDIO");

        if $i0 != 0 goto label2;

        return 1;

     label2:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("RecognitionService", "call for recognition service without RECORD_AUDIO permissions");

        interfaceinvoke r4.<android.speech.IRecognitionListener: void onError(int)>(9);

     label3:
        goto label5;

     label4:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("RecognitionService", "sending ERROR_INSUFFICIENT_PERMISSIONS message failed", $r3);

     label5:
        return 0;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    private void dispatchCancel(android.speech.IRecognitionListener)
    {
        android.speech.RecognitionService r0;
        android.speech.IRecognitionListener r1, $r3;
        android.speech.RecognitionService$Callback r2, $r6;
        android.os.IBinder $r4, $r5;

        r0 := @this: android.speech.RecognitionService;

        r1 := @parameter0: android.speech.IRecognitionListener;

        r2 = r0.<android.speech.RecognitionService: android.speech.RecognitionService$Callback mCurrentCallback>;

        if r2 != null goto label1;

        goto label3;

     label1:
        $r3 = staticinvoke <android.speech.RecognitionService$Callback: android.speech.IRecognitionListener access$600(android.speech.RecognitionService$Callback)>(r2);

        $r4 = interfaceinvoke $r3.<android.speech.IRecognitionListener: android.os.IBinder asBinder()>();

        $r5 = interfaceinvoke r1.<android.speech.IRecognitionListener: android.os.IBinder asBinder()>();

        if $r4 == $r5 goto label2;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("RecognitionService", "cancel called by client who did not call startListening - ignoring");

        goto label3;

     label2:
        $r6 = r0.<android.speech.RecognitionService: android.speech.RecognitionService$Callback mCurrentCallback>;

        virtualinvoke r0.<android.speech.RecognitionService: void onCancel(android.speech.RecognitionService$Callback)>($r6);

        r0.<android.speech.RecognitionService: android.speech.RecognitionService$Callback mCurrentCallback> = null;

     label3:
        return;
    }

    private void dispatchClearCallback()
    {
        android.speech.RecognitionService r0;

        r0 := @this: android.speech.RecognitionService;

        r0.<android.speech.RecognitionService: android.speech.RecognitionService$Callback mCurrentCallback> = null;

        return;
    }

    private void dispatchStartListening(android.content.Intent, android.speech.IRecognitionListener, int)
    {
        android.speech.RecognitionService r0;
        int i0;
        android.os.IBinder r1;
        android.speech.RecognitionService$2 r2;
        android.speech.RecognitionService$Callback $r3, $r4;
        android.os.RemoteException $r5, $r6;
        android.content.Intent r7;
        android.speech.IRecognitionListener r8;

        r0 := @this: android.speech.RecognitionService;

        r7 := @parameter0: android.content.Intent;

        r8 := @parameter1: android.speech.IRecognitionListener;

        i0 := @parameter2: int;

        $r3 = r0.<android.speech.RecognitionService: android.speech.RecognitionService$Callback mCurrentCallback>;

        if $r3 != null goto label4;

     label1:
        r1 = interfaceinvoke r8.<android.speech.IRecognitionListener: android.os.IBinder asBinder()>();

        r2 = new android.speech.RecognitionService$2;

        specialinvoke r2.<android.speech.RecognitionService$2: void <init>(android.speech.RecognitionService,android.speech.IRecognitionListener)>(r0, r8);

        interfaceinvoke r1.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r2, 0);

     label2:
        $r4 = new android.speech.RecognitionService$Callback;

        specialinvoke $r4.<android.speech.RecognitionService$Callback: void <init>(android.speech.RecognitionService,android.speech.IRecognitionListener,int,android.speech.RecognitionService$1)>(r0, r8, i0, null);

        r0.<android.speech.RecognitionService: android.speech.RecognitionService$Callback mCurrentCallback> = $r4;

        virtualinvoke r0.<android.speech.RecognitionService: void onStartListening(android.content.Intent,android.speech.RecognitionService$Callback)>(r7, $r4);

        goto label8;

     label3:
        $r6 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("RecognitionService", "dead listener on startListening");

        return;

     label4:
        interfaceinvoke r8.<android.speech.IRecognitionListener: void onError(int)>(8);

     label5:
        goto label7;

     label6:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("RecognitionService", "onError call from startListening failed");

     label7:
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("RecognitionService", "concurrent startListening received - ignoring this call");

     label8:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    private void dispatchStopListening(android.speech.IRecognitionListener)
    {
        android.speech.RecognitionService r0;
        android.speech.RecognitionService$Callback $r1, $r2, $r6;
        android.speech.IRecognitionListener $r3, r8;
        android.os.IBinder $r4, $r5;
        android.os.RemoteException $r7;

        r0 := @this: android.speech.RecognitionService;

        r8 := @parameter0: android.speech.IRecognitionListener;

     label1:
        $r1 = r0.<android.speech.RecognitionService: android.speech.RecognitionService$Callback mCurrentCallback>;

        if $r1 != null goto label3;

        interfaceinvoke r8.<android.speech.IRecognitionListener: void onError(int)>(5);

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("RecognitionService", "stopListening called with no preceding startListening - ignoring");

     label2:
        goto label6;

     label3:
        $r2 = r0.<android.speech.RecognitionService: android.speech.RecognitionService$Callback mCurrentCallback>;

        $r3 = staticinvoke <android.speech.RecognitionService$Callback: android.speech.IRecognitionListener access$600(android.speech.RecognitionService$Callback)>($r2);

        $r4 = interfaceinvoke $r3.<android.speech.IRecognitionListener: android.os.IBinder asBinder()>();

        $r5 = interfaceinvoke r8.<android.speech.IRecognitionListener: android.os.IBinder asBinder()>();

        if $r4 == $r5 goto label5;

        interfaceinvoke r8.<android.speech.IRecognitionListener: void onError(int)>(8);

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("RecognitionService", "stopListening called by other caller than startListening - ignoring");

     label4:
        goto label6;

     label5:
        $r6 = r0.<android.speech.RecognitionService: android.speech.RecognitionService$Callback mCurrentCallback>;

        virtualinvoke r0.<android.speech.RecognitionService: void onStopListening(android.speech.RecognitionService$Callback)>($r6);

     label6:
        goto label8;

     label7:
        $r7 := @caughtexception;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("RecognitionService", "onError call from stopListening failed");

     label8:
        return;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch android.os.RemoteException from label5 to label6 with label7;
    }

    public final android.os.IBinder onBind(android.content.Intent)
    {
        android.speech.RecognitionService r0;
        android.content.Intent r1;
        android.speech.RecognitionService$RecognitionServiceBinder $r2;

        r0 := @this: android.speech.RecognitionService;

        r1 := @parameter0: android.content.Intent;

        $r2 = r0.<android.speech.RecognitionService: android.speech.RecognitionService$RecognitionServiceBinder mBinder>;

        return $r2;
    }

    protected abstract void onCancel(android.speech.RecognitionService$Callback);

    public void onDestroy()
    {
        android.speech.RecognitionService r0;
        android.speech.RecognitionService$RecognitionServiceBinder $r1;

        r0 := @this: android.speech.RecognitionService;

        r0.<android.speech.RecognitionService: android.speech.RecognitionService$Callback mCurrentCallback> = null;

        $r1 = r0.<android.speech.RecognitionService: android.speech.RecognitionService$RecognitionServiceBinder mBinder>;

        virtualinvoke $r1.<android.speech.RecognitionService$RecognitionServiceBinder: void clearReference()>();

        specialinvoke r0.<android.app.Service: void onDestroy()>();

        return;
    }

    protected abstract void onStartListening(android.content.Intent, android.speech.RecognitionService$Callback);

    protected abstract void onStopListening(android.speech.RecognitionService$Callback);

    public static void <clinit>()
    {
        <android.speech.RecognitionService: java.lang.String TAG> = "RecognitionService";

        <android.speech.RecognitionService: java.lang.String SERVICE_META_DATA> = "android.speech";

        <android.speech.RecognitionService: java.lang.String SERVICE_INTERFACE> = "android.speech.RecognitionService";

        <android.speech.RecognitionService: int MSG_STOP_LISTENING> = 2;

        <android.speech.RecognitionService: int MSG_START_LISTENING> = 1;

        <android.speech.RecognitionService: int MSG_RESET> = 4;

        <android.speech.RecognitionService: int MSG_CANCEL> = 3;

        <android.speech.RecognitionService: boolean DBG> = 0;

        return;
    }
}
