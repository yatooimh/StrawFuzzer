public abstract class android.telecom.Connection$VideoProvider extends java.lang.Object
{
    private static final int MSG_ADD_VIDEO_CALLBACK;
    private static final int MSG_REMOVE_VIDEO_CALLBACK;
    private static final int MSG_REQUEST_CAMERA_CAPABILITIES;
    private static final int MSG_REQUEST_CONNECTION_DATA_USAGE;
    private static final int MSG_SEND_SESSION_MODIFY_REQUEST;
    private static final int MSG_SEND_SESSION_MODIFY_RESPONSE;
    private static final int MSG_SET_CAMERA;
    private static final int MSG_SET_DEVICE_ORIENTATION;
    private static final int MSG_SET_DISPLAY_SURFACE;
    private static final int MSG_SET_PAUSE_IMAGE;
    private static final int MSG_SET_PREVIEW_SURFACE;
    private static final int MSG_SET_ZOOM;
    public static final int SESSION_EVENT_CAMERA_FAILURE;
    private static final java.lang.String SESSION_EVENT_CAMERA_FAILURE_STR;
    public static final int SESSION_EVENT_CAMERA_PERMISSION_ERROR;
    private static final java.lang.String SESSION_EVENT_CAMERA_PERMISSION_ERROR_STR;
    public static final int SESSION_EVENT_CAMERA_READY;
    private static final java.lang.String SESSION_EVENT_CAMERA_READY_STR;
    public static final int SESSION_EVENT_RX_PAUSE;
    private static final java.lang.String SESSION_EVENT_RX_PAUSE_STR;
    public static final int SESSION_EVENT_RX_RESUME;
    private static final java.lang.String SESSION_EVENT_RX_RESUME_STR;
    public static final int SESSION_EVENT_TX_START;
    private static final java.lang.String SESSION_EVENT_TX_START_STR;
    public static final int SESSION_EVENT_TX_STOP;
    private static final java.lang.String SESSION_EVENT_TX_STOP_STR;
    private static final java.lang.String SESSION_EVENT_UNKNOWN_STR;
    public static final int SESSION_MODIFY_REQUEST_FAIL;
    public static final int SESSION_MODIFY_REQUEST_INVALID;
    public static final int SESSION_MODIFY_REQUEST_REJECTED_BY_REMOTE;
    public static final int SESSION_MODIFY_REQUEST_SUCCESS;
    public static final int SESSION_MODIFY_REQUEST_TIMED_OUT;
    private final android.telecom.Connection$VideoProvider$VideoProviderBinder mBinder;
    private android.telecom.Connection$VideoProvider$VideoProviderHandler mMessageHandler;
    private java.util.concurrent.ConcurrentHashMap mVideoCallbacks;

    public void <init>()
    {
        android.telecom.Connection$VideoProvider r0;
        java.util.concurrent.ConcurrentHashMap $r1;
        android.telecom.Connection$VideoProvider$VideoProviderBinder $r2;
        android.telecom.Connection$VideoProvider$VideoProviderHandler $r3;
        android.os.Looper $r4;

        r0 := @this: android.telecom.Connection$VideoProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>(int,float,int)>(8, 0.9F, 1);

        r0.<android.telecom.Connection$VideoProvider: java.util.concurrent.ConcurrentHashMap mVideoCallbacks> = $r1;

        $r2 = new android.telecom.Connection$VideoProvider$VideoProviderBinder;

        specialinvoke $r2.<android.telecom.Connection$VideoProvider$VideoProviderBinder: void <init>(android.telecom.Connection$VideoProvider,android.telecom.Connection$1)>(r0, null);

        r0.<android.telecom.Connection$VideoProvider: android.telecom.Connection$VideoProvider$VideoProviderBinder mBinder> = $r2;

        $r3 = new android.telecom.Connection$VideoProvider$VideoProviderHandler;

        $r4 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r3.<android.telecom.Connection$VideoProvider$VideoProviderHandler: void <init>(android.telecom.Connection$VideoProvider,android.os.Looper)>(r0, $r4);

        r0.<android.telecom.Connection$VideoProvider: android.telecom.Connection$VideoProvider$VideoProviderHandler mMessageHandler> = $r3;

        return;
    }

    public void <init>(android.os.Looper)
    {
        android.telecom.Connection$VideoProvider r0;
        android.os.Looper r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        android.telecom.Connection$VideoProvider$VideoProviderBinder $r3;
        android.telecom.Connection$VideoProvider$VideoProviderHandler $r4;

        r0 := @this: android.telecom.Connection$VideoProvider;

        r1 := @parameter0: android.os.Looper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>(int,float,int)>(8, 0.9F, 1);

        r0.<android.telecom.Connection$VideoProvider: java.util.concurrent.ConcurrentHashMap mVideoCallbacks> = $r2;

        $r3 = new android.telecom.Connection$VideoProvider$VideoProviderBinder;

        specialinvoke $r3.<android.telecom.Connection$VideoProvider$VideoProviderBinder: void <init>(android.telecom.Connection$VideoProvider,android.telecom.Connection$1)>(r0, null);

        r0.<android.telecom.Connection$VideoProvider: android.telecom.Connection$VideoProvider$VideoProviderBinder mBinder> = $r3;

        $r4 = new android.telecom.Connection$VideoProvider$VideoProviderHandler;

        specialinvoke $r4.<android.telecom.Connection$VideoProvider$VideoProviderHandler: void <init>(android.telecom.Connection$VideoProvider,android.os.Looper)>(r0, r1);

        r0.<android.telecom.Connection$VideoProvider: android.telecom.Connection$VideoProvider$VideoProviderHandler mMessageHandler> = $r4;

        return;
    }

    static java.util.concurrent.ConcurrentHashMap access$000(android.telecom.Connection$VideoProvider)
    {
        android.telecom.Connection$VideoProvider r0;
        java.util.concurrent.ConcurrentHashMap $r1;

        r0 := @parameter0: android.telecom.Connection$VideoProvider;

        $r1 = r0.<android.telecom.Connection$VideoProvider: java.util.concurrent.ConcurrentHashMap mVideoCallbacks>;

        return $r1;
    }

    static android.telecom.Connection$VideoProvider$VideoProviderHandler access$100(android.telecom.Connection$VideoProvider)
    {
        android.telecom.Connection$VideoProvider r0;
        android.telecom.Connection$VideoProvider$VideoProviderHandler $r1;

        r0 := @parameter0: android.telecom.Connection$VideoProvider;

        $r1 = r0.<android.telecom.Connection$VideoProvider: android.telecom.Connection$VideoProvider$VideoProviderHandler mMessageHandler>;

        return $r1;
    }

    public static java.lang.String sessionEventToString(int)
    {
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r4;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label8;
            case 2: goto label7;
            case 3: goto label6;
            case 4: goto label5;
            case 5: goto label4;
            case 6: goto label3;
            case 7: goto label2;
            default: goto label1;
        };

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UNKNOWN ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label2:
        return "CAMERA_PERMISSION_ERROR";

     label3:
        return "CAMERA_READY";

     label4:
        return "CAMERA_FAIL";

     label5:
        return "TX_STOP";

     label6:
        return "TX_START";

     label7:
        return "RX_RESUME";

     label8:
        return "RX_PAUSE";
    }

    public void changeCallDataUsage(long)
    {
        android.telecom.Connection$VideoProvider r0;
        long l0;

        r0 := @this: android.telecom.Connection$VideoProvider;

        l0 := @parameter0: long;

        virtualinvoke r0.<android.telecom.Connection$VideoProvider: void setCallDataUsage(long)>(l0);

        return;
    }

    public void changeCameraCapabilities(android.telecom.VideoProfile$CameraCapabilities)
    {
        android.telecom.Connection$VideoProvider r0;
        android.telecom.VideoProfile$CameraCapabilities r1;
        java.util.Collection $r2;
        boolean $z0;
        java.lang.Object $r3;
        android.os.RemoteException $r4;
        java.lang.Object[] $r5;
        java.util.concurrent.ConcurrentHashMap r6;
        java.util.Iterator r7;
        com.android.internal.telecom.IVideoCallback r8;

        r0 := @this: android.telecom.Connection$VideoProvider;

        r1 := @parameter0: android.telecom.VideoProfile$CameraCapabilities;

        r6 = r0.<android.telecom.Connection$VideoProvider: java.util.concurrent.ConcurrentHashMap mVideoCallbacks>;

        if r6 == null goto label6;

        $r2 = virtualinvoke r6.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        r7 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r3 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.android.internal.telecom.IVideoCallback) $r3;

     label2:
        interfaceinvoke r8.<com.android.internal.telecom.IVideoCallback: void changeCameraCapabilities(android.telecom.VideoProfile$CameraCapabilities)>(r1);

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = $r4;

        staticinvoke <android.telecom.Log: void w(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "changeCameraCapabilities callback failed", $r5);

     label5:
        goto label1;

     label6:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void changePeerDimensions(int, int)
    {
        android.telecom.Connection$VideoProvider r0;
        int i0, i1;
        java.util.Collection $r1;
        boolean $z0;
        java.lang.Object $r2;
        android.os.RemoteException $r3;
        java.lang.Object[] $r4;
        java.util.concurrent.ConcurrentHashMap r5;
        java.util.Iterator r6;
        com.android.internal.telecom.IVideoCallback r7;

        r0 := @this: android.telecom.Connection$VideoProvider;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r5 = r0.<android.telecom.Connection$VideoProvider: java.util.concurrent.ConcurrentHashMap mVideoCallbacks>;

        if r5 == null goto label6;

        $r1 = virtualinvoke r5.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        r6 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r2 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.android.internal.telecom.IVideoCallback) $r2;

     label2:
        interfaceinvoke r7.<com.android.internal.telecom.IVideoCallback: void changePeerDimensions(int,int)>(i0, i1);

     label3:
        goto label5;

     label4:
        $r3 := @caughtexception;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = $r3;

        staticinvoke <android.telecom.Log: void w(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "changePeerDimensions callback failed", $r4);

     label5:
        goto label1;

     label6:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void changeVideoQuality(int)
    {
        android.telecom.Connection$VideoProvider r0;
        int i0;
        java.util.Collection $r1;
        boolean $z0;
        java.lang.Object $r2;
        android.os.RemoteException $r3;
        java.lang.Object[] $r4;
        java.util.concurrent.ConcurrentHashMap r5;
        java.util.Iterator r6;
        com.android.internal.telecom.IVideoCallback r7;

        r0 := @this: android.telecom.Connection$VideoProvider;

        i0 := @parameter0: int;

        r5 = r0.<android.telecom.Connection$VideoProvider: java.util.concurrent.ConcurrentHashMap mVideoCallbacks>;

        if r5 == null goto label6;

        $r1 = virtualinvoke r5.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        r6 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r2 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.android.internal.telecom.IVideoCallback) $r2;

     label2:
        interfaceinvoke r7.<com.android.internal.telecom.IVideoCallback: void changeVideoQuality(int)>(i0);

     label3:
        goto label5;

     label4:
        $r3 := @caughtexception;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = $r3;

        staticinvoke <android.telecom.Log: void w(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "changeVideoQuality callback failed", $r4);

     label5:
        goto label1;

     label6:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public final com.android.internal.telecom.IVideoProvider getInterface()
    {
        android.telecom.Connection$VideoProvider r0;
        android.telecom.Connection$VideoProvider$VideoProviderBinder $r1;

        r0 := @this: android.telecom.Connection$VideoProvider;

        $r1 = r0.<android.telecom.Connection$VideoProvider: android.telecom.Connection$VideoProvider$VideoProviderBinder mBinder>;

        return $r1;
    }

    public void handleCallSessionEvent(int)
    {
        android.telecom.Connection$VideoProvider r0;
        int i0;
        java.util.Collection $r1;
        boolean $z0;
        java.lang.Object $r2;
        android.os.RemoteException $r3;
        java.lang.Object[] $r4;
        java.util.concurrent.ConcurrentHashMap r5;
        java.util.Iterator r6;
        com.android.internal.telecom.IVideoCallback r7;

        r0 := @this: android.telecom.Connection$VideoProvider;

        i0 := @parameter0: int;

        r5 = r0.<android.telecom.Connection$VideoProvider: java.util.concurrent.ConcurrentHashMap mVideoCallbacks>;

        if r5 == null goto label6;

        $r1 = virtualinvoke r5.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        r6 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r2 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.android.internal.telecom.IVideoCallback) $r2;

     label2:
        interfaceinvoke r7.<com.android.internal.telecom.IVideoCallback: void handleCallSessionEvent(int)>(i0);

     label3:
        goto label5;

     label4:
        $r3 := @caughtexception;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = $r3;

        staticinvoke <android.telecom.Log: void w(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "handleCallSessionEvent callback failed", $r4);

     label5:
        goto label1;

     label6:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public abstract void onRequestCameraCapabilities();

    public abstract void onRequestConnectionDataUsage();

    public abstract void onSendSessionModifyRequest(android.telecom.VideoProfile, android.telecom.VideoProfile);

    public abstract void onSendSessionModifyResponse(android.telecom.VideoProfile);

    public abstract void onSetCamera(java.lang.String);

    public void onSetCamera(java.lang.String, java.lang.String, int, int, int)
    {
        android.telecom.Connection$VideoProvider r0;
        java.lang.String r1, r2;
        int i0, i1, i2;

        r0 := @this: android.telecom.Connection$VideoProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        return;
    }

    public abstract void onSetDeviceOrientation(int);

    public abstract void onSetDisplaySurface(android.view.Surface);

    public abstract void onSetPauseImage(android.net.Uri);

    public abstract void onSetPreviewSurface(android.view.Surface);

    public abstract void onSetZoom(float);

    public void receiveSessionModifyRequest(android.telecom.VideoProfile)
    {
        android.telecom.Connection$VideoProvider r0;
        android.telecom.VideoProfile r1;
        java.util.Collection $r2;
        boolean $z0;
        java.lang.Object $r3;
        android.os.RemoteException $r4;
        java.lang.Object[] $r5;
        java.util.concurrent.ConcurrentHashMap r6;
        java.util.Iterator r7;
        com.android.internal.telecom.IVideoCallback r8;

        r0 := @this: android.telecom.Connection$VideoProvider;

        r1 := @parameter0: android.telecom.VideoProfile;

        r6 = r0.<android.telecom.Connection$VideoProvider: java.util.concurrent.ConcurrentHashMap mVideoCallbacks>;

        if r6 == null goto label6;

        $r2 = virtualinvoke r6.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        r7 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r3 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.android.internal.telecom.IVideoCallback) $r3;

     label2:
        interfaceinvoke r8.<com.android.internal.telecom.IVideoCallback: void receiveSessionModifyRequest(android.telecom.VideoProfile)>(r1);

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = $r4;

        staticinvoke <android.telecom.Log: void w(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "receiveSessionModifyRequest callback failed", $r5);

     label5:
        goto label1;

     label6:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void receiveSessionModifyResponse(int, android.telecom.VideoProfile, android.telecom.VideoProfile)
    {
        android.telecom.Connection$VideoProvider r0;
        int i0;
        android.telecom.VideoProfile r1, r2;
        java.util.Collection $r3;
        boolean $z0;
        java.lang.Object $r4;
        android.os.RemoteException $r5;
        java.lang.Object[] $r6;
        java.util.concurrent.ConcurrentHashMap r7;
        java.util.Iterator r8;
        com.android.internal.telecom.IVideoCallback r9;

        r0 := @this: android.telecom.Connection$VideoProvider;

        i0 := @parameter0: int;

        r1 := @parameter1: android.telecom.VideoProfile;

        r2 := @parameter2: android.telecom.VideoProfile;

        r7 = r0.<android.telecom.Connection$VideoProvider: java.util.concurrent.ConcurrentHashMap mVideoCallbacks>;

        if r7 == null goto label6;

        $r3 = virtualinvoke r7.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        r8 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r4 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r9 = (com.android.internal.telecom.IVideoCallback) $r4;

     label2:
        interfaceinvoke r9.<com.android.internal.telecom.IVideoCallback: void receiveSessionModifyResponse(int,android.telecom.VideoProfile,android.telecom.VideoProfile)>(i0, r1, r2);

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = $r5;

        staticinvoke <android.telecom.Log: void w(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "receiveSessionModifyResponse callback failed", $r6);

     label5:
        goto label1;

     label6:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void setCallDataUsage(long)
    {
        android.telecom.Connection$VideoProvider r0;
        long l0;
        java.util.Collection $r1;
        boolean $z0;
        java.lang.Object $r2;
        android.os.RemoteException $r3;
        java.lang.Object[] $r4;
        java.util.concurrent.ConcurrentHashMap r5;
        java.util.Iterator r6;
        com.android.internal.telecom.IVideoCallback r7;

        r0 := @this: android.telecom.Connection$VideoProvider;

        l0 := @parameter0: long;

        r5 = r0.<android.telecom.Connection$VideoProvider: java.util.concurrent.ConcurrentHashMap mVideoCallbacks>;

        if r5 == null goto label6;

        $r1 = virtualinvoke r5.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        r6 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r2 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.android.internal.telecom.IVideoCallback) $r2;

     label2:
        interfaceinvoke r7.<com.android.internal.telecom.IVideoCallback: void changeCallDataUsage(long)>(l0);

     label3:
        goto label5;

     label4:
        $r3 := @caughtexception;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = $r3;

        staticinvoke <android.telecom.Log: void w(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "setCallDataUsage callback failed", $r4);

     label5:
        goto label1;

     label6:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public static void <clinit>()
    {
        <android.telecom.Connection$VideoProvider: int SESSION_MODIFY_REQUEST_TIMED_OUT> = 4;

        <android.telecom.Connection$VideoProvider: int SESSION_MODIFY_REQUEST_SUCCESS> = 1;

        <android.telecom.Connection$VideoProvider: int SESSION_MODIFY_REQUEST_REJECTED_BY_REMOTE> = 5;

        <android.telecom.Connection$VideoProvider: int SESSION_MODIFY_REQUEST_INVALID> = 3;

        <android.telecom.Connection$VideoProvider: int SESSION_MODIFY_REQUEST_FAIL> = 2;

        <android.telecom.Connection$VideoProvider: java.lang.String SESSION_EVENT_UNKNOWN_STR> = "UNKNOWN";

        <android.telecom.Connection$VideoProvider: java.lang.String SESSION_EVENT_TX_STOP_STR> = "TX_STOP";

        <android.telecom.Connection$VideoProvider: int SESSION_EVENT_TX_STOP> = 4;

        <android.telecom.Connection$VideoProvider: java.lang.String SESSION_EVENT_TX_START_STR> = "TX_START";

        <android.telecom.Connection$VideoProvider: int SESSION_EVENT_TX_START> = 3;

        <android.telecom.Connection$VideoProvider: java.lang.String SESSION_EVENT_RX_RESUME_STR> = "RX_RESUME";

        <android.telecom.Connection$VideoProvider: int SESSION_EVENT_RX_RESUME> = 2;

        <android.telecom.Connection$VideoProvider: java.lang.String SESSION_EVENT_RX_PAUSE_STR> = "RX_PAUSE";

        <android.telecom.Connection$VideoProvider: int SESSION_EVENT_RX_PAUSE> = 1;

        <android.telecom.Connection$VideoProvider: java.lang.String SESSION_EVENT_CAMERA_READY_STR> = "CAMERA_READY";

        <android.telecom.Connection$VideoProvider: int SESSION_EVENT_CAMERA_READY> = 6;

        <android.telecom.Connection$VideoProvider: java.lang.String SESSION_EVENT_CAMERA_PERMISSION_ERROR_STR> = "CAMERA_PERMISSION_ERROR";

        <android.telecom.Connection$VideoProvider: int SESSION_EVENT_CAMERA_PERMISSION_ERROR> = 7;

        <android.telecom.Connection$VideoProvider: java.lang.String SESSION_EVENT_CAMERA_FAILURE_STR> = "CAMERA_FAIL";

        <android.telecom.Connection$VideoProvider: int SESSION_EVENT_CAMERA_FAILURE> = 5;

        <android.telecom.Connection$VideoProvider: int MSG_SET_ZOOM> = 6;

        <android.telecom.Connection$VideoProvider: int MSG_SET_PREVIEW_SURFACE> = 3;

        <android.telecom.Connection$VideoProvider: int MSG_SET_PAUSE_IMAGE> = 11;

        <android.telecom.Connection$VideoProvider: int MSG_SET_DISPLAY_SURFACE> = 4;

        <android.telecom.Connection$VideoProvider: int MSG_SET_DEVICE_ORIENTATION> = 5;

        <android.telecom.Connection$VideoProvider: int MSG_SET_CAMERA> = 2;

        <android.telecom.Connection$VideoProvider: int MSG_SEND_SESSION_MODIFY_RESPONSE> = 8;

        <android.telecom.Connection$VideoProvider: int MSG_SEND_SESSION_MODIFY_REQUEST> = 7;

        <android.telecom.Connection$VideoProvider: int MSG_REQUEST_CONNECTION_DATA_USAGE> = 10;

        <android.telecom.Connection$VideoProvider: int MSG_REQUEST_CAMERA_CAPABILITIES> = 9;

        <android.telecom.Connection$VideoProvider: int MSG_REMOVE_VIDEO_CALLBACK> = 12;

        <android.telecom.Connection$VideoProvider: int MSG_ADD_VIDEO_CALLBACK> = 1;

        return;
    }
}
