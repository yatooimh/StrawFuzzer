public abstract class android.telecom.ConnectionService extends android.app.Service
{
    public static final java.lang.String EXTRA_IS_HANDOVER;
    private static final int MSG_ABORT;
    private static final int MSG_ADD_CONNECTION_SERVICE_ADAPTER;
    private static final int MSG_ADD_PARTICIPANT;
    private static final int MSG_ANSWER;
    private static final int MSG_ANSWER_VIDEO;
    private static final int MSG_CONFERENCE;
    private static final int MSG_CONNECTION_SERVICE_FOCUS_GAINED;
    private static final int MSG_CONNECTION_SERVICE_FOCUS_LOST;
    private static final int MSG_CREATE_CONFERENCE;
    private static final int MSG_CREATE_CONFERENCE_COMPLETE;
    private static final int MSG_CREATE_CONFERENCE_FAILED;
    private static final int MSG_CREATE_CONNECTION;
    private static final int MSG_CREATE_CONNECTION_COMPLETE;
    private static final int MSG_CREATE_CONNECTION_FAILED;
    private static final int MSG_DEFLECT;
    private static final int MSG_DISCONNECT;
    private static final int MSG_EXPLICIT_CALL_TRANSFER;
    private static final int MSG_EXPLICIT_CALL_TRANSFER_CONSULTATIVE;
    private static final int MSG_HANDOVER_COMPLETE;
    private static final int MSG_HANDOVER_FAILED;
    private static final int MSG_HOLD;
    private static final int MSG_MERGE_CONFERENCE;
    private static final int MSG_ON_CALL_AUDIO_STATE_CHANGED;
    private static final int MSG_ON_EXTRAS_CHANGED;
    private static final int MSG_ON_POST_DIAL_CONTINUE;
    private static final int MSG_ON_START_RTT;
    private static final int MSG_ON_STOP_RTT;
    private static final int MSG_PLAY_DTMF_TONE;
    private static final int MSG_PULL_EXTERNAL_CALL;
    private static final int MSG_REJECT;
    private static final int MSG_REJECT_WITH_MESSAGE;
    private static final int MSG_REJECT_WITH_REASON;
    private static final int MSG_REMOVE_CONNECTION_SERVICE_ADAPTER;
    private static final int MSG_RTT_UPGRADE_RESPONSE;
    private static final int MSG_SEND_CALL_EVENT;
    private static final int MSG_SILENCE;
    private static final int MSG_SPLIT_FROM_CONFERENCE;
    private static final int MSG_STOP_DTMF_TONE;
    private static final int MSG_SWAP_CONFERENCE;
    private static final int MSG_UNHOLD;
    private static final boolean PII_DEBUG;
    public static final java.lang.String SERVICE_INTERFACE;
    private static final java.lang.String SESSION_ABORT;
    private static final java.lang.String SESSION_ADD_CS_ADAPTER;
    private static final java.lang.String SESSION_ADD_PARTICIPANT;
    private static final java.lang.String SESSION_ANSWER;
    private static final java.lang.String SESSION_ANSWER_VIDEO;
    private static final java.lang.String SESSION_CALL_AUDIO_SC;
    private static final java.lang.String SESSION_CONFERENCE;
    private static final java.lang.String SESSION_CONNECTION_SERVICE_FOCUS_GAINED;
    private static final java.lang.String SESSION_CONNECTION_SERVICE_FOCUS_LOST;
    private static final java.lang.String SESSION_CONSULTATIVE_TRANSFER;
    private static final java.lang.String SESSION_CREATE_CONF;
    private static final java.lang.String SESSION_CREATE_CONF_COMPLETE;
    private static final java.lang.String SESSION_CREATE_CONF_FAILED;
    private static final java.lang.String SESSION_CREATE_CONN;
    private static final java.lang.String SESSION_CREATE_CONN_COMPLETE;
    private static final java.lang.String SESSION_CREATE_CONN_FAILED;
    private static final java.lang.String SESSION_DEFLECT;
    private static final java.lang.String SESSION_DISCONNECT;
    private static final java.lang.String SESSION_EXTRAS_CHANGED;
    private static final java.lang.String SESSION_HANDLER;
    private static final java.lang.String SESSION_HANDOVER_COMPLETE;
    private static final java.lang.String SESSION_HANDOVER_FAILED;
    private static final java.lang.String SESSION_HOLD;
    private static final java.lang.String SESSION_MERGE_CONFERENCE;
    private static final java.lang.String SESSION_PLAY_DTMF;
    private static final java.lang.String SESSION_POST_DIAL_CONT;
    private static final java.lang.String SESSION_PULL_EXTERNAL_CALL;
    private static final java.lang.String SESSION_REJECT;
    private static final java.lang.String SESSION_REJECT_MESSAGE;
    private static final java.lang.String SESSION_REMOVE_CS_ADAPTER;
    private static final java.lang.String SESSION_RTT_UPGRADE_RESPONSE;
    private static final java.lang.String SESSION_SEND_CALL_EVENT;
    private static final java.lang.String SESSION_SILENCE;
    private static final java.lang.String SESSION_SPLIT_CONFERENCE;
    private static final java.lang.String SESSION_START_RTT;
    private static final java.lang.String SESSION_STOP_DTMF;
    private static final java.lang.String SESSION_STOP_RTT;
    private static final java.lang.String SESSION_SWAP_CONFERENCE;
    private static final java.lang.String SESSION_TRANSFER;
    private static final java.lang.String SESSION_UNHOLD;
    private static final java.lang.String SESSION_UPDATE_RTT_PIPES;
    private static android.telecom.Connection sNullConnection;
    private final android.telecom.ConnectionServiceAdapter mAdapter;
    private boolean mAreAccountsInitialized;
    private final android.os.IBinder mBinder;
    private final java.util.Map mConferenceById;
    private final android.telecom.Conference$Listener mConferenceListener;
    private final java.util.Map mConnectionById;
    private final android.telecom.Connection$Listener mConnectionListener;
    private final android.os.Handler mHandler;
    private int mId;
    private final java.util.Map mIdByConference;
    private final java.util.Map mIdByConnection;
    private java.lang.Object mIdSyncRoot;
    private final java.util.List mPreInitializationConnectionRequests;
    private final android.telecom.RemoteConnectionManager mRemoteConnectionManager;
    private android.telecom.Conference sNullConference;

    static void <clinit>()
    {
        boolean $z0;

        <android.telecom.ConnectionService: java.lang.String SESSION_UPDATE_RTT_PIPES> = "CS.uRTT";

        <android.telecom.ConnectionService: java.lang.String SESSION_UNHOLD> = "CS.u";

        <android.telecom.ConnectionService: java.lang.String SESSION_TRANSFER> = "CS.trans";

        <android.telecom.ConnectionService: java.lang.String SESSION_SWAP_CONFERENCE> = "CS.sC";

        <android.telecom.ConnectionService: java.lang.String SESSION_STOP_RTT> = "CS.-RTT";

        <android.telecom.ConnectionService: java.lang.String SESSION_STOP_DTMF> = "CS.sDT";

        <android.telecom.ConnectionService: java.lang.String SESSION_START_RTT> = "CS.+RTT";

        <android.telecom.ConnectionService: java.lang.String SESSION_SPLIT_CONFERENCE> = "CS.sFC";

        <android.telecom.ConnectionService: java.lang.String SESSION_SILENCE> = "CS.s";

        <android.telecom.ConnectionService: java.lang.String SESSION_SEND_CALL_EVENT> = "CS.sCE";

        <android.telecom.ConnectionService: java.lang.String SESSION_RTT_UPGRADE_RESPONSE> = "CS.rTRUR";

        <android.telecom.ConnectionService: java.lang.String SESSION_REMOVE_CS_ADAPTER> = "CS.rCSA";

        <android.telecom.ConnectionService: java.lang.String SESSION_REJECT_MESSAGE> = "CS.rWM";

        <android.telecom.ConnectionService: java.lang.String SESSION_REJECT> = "CS.r";

        <android.telecom.ConnectionService: java.lang.String SESSION_PULL_EXTERNAL_CALL> = "CS.pEC";

        <android.telecom.ConnectionService: java.lang.String SESSION_POST_DIAL_CONT> = "CS.oPDC";

        <android.telecom.ConnectionService: java.lang.String SESSION_PLAY_DTMF> = "CS.pDT";

        <android.telecom.ConnectionService: java.lang.String SESSION_MERGE_CONFERENCE> = "CS.mC";

        <android.telecom.ConnectionService: java.lang.String SESSION_HOLD> = "CS.h";

        <android.telecom.ConnectionService: java.lang.String SESSION_HANDOVER_FAILED> = "CS.haF";

        <android.telecom.ConnectionService: java.lang.String SESSION_HANDOVER_COMPLETE> = "CS.hC";

        <android.telecom.ConnectionService: java.lang.String SESSION_HANDLER> = "H.";

        <android.telecom.ConnectionService: java.lang.String SESSION_EXTRAS_CHANGED> = "CS.oEC";

        <android.telecom.ConnectionService: java.lang.String SESSION_DISCONNECT> = "CS.d";

        <android.telecom.ConnectionService: java.lang.String SESSION_DEFLECT> = "CS.def";

        <android.telecom.ConnectionService: java.lang.String SESSION_CREATE_CONN_FAILED> = "CS.crCoF";

        <android.telecom.ConnectionService: java.lang.String SESSION_CREATE_CONN_COMPLETE> = "CS.crCoC";

        <android.telecom.ConnectionService: java.lang.String SESSION_CREATE_CONN> = "CS.crCo";

        <android.telecom.ConnectionService: java.lang.String SESSION_CREATE_CONF_FAILED> = "CS.crConfF";

        <android.telecom.ConnectionService: java.lang.String SESSION_CREATE_CONF_COMPLETE> = "CS.crConfC";

        <android.telecom.ConnectionService: java.lang.String SESSION_CREATE_CONF> = "CS.crConf";

        <android.telecom.ConnectionService: java.lang.String SESSION_CONSULTATIVE_TRANSFER> = "CS.cTrans";

        <android.telecom.ConnectionService: java.lang.String SESSION_CONNECTION_SERVICE_FOCUS_LOST> = "CS.cSFL";

        <android.telecom.ConnectionService: java.lang.String SESSION_CONNECTION_SERVICE_FOCUS_GAINED> = "CS.cSFG";

        <android.telecom.ConnectionService: java.lang.String SESSION_CONFERENCE> = "CS.c";

        <android.telecom.ConnectionService: java.lang.String SESSION_CALL_AUDIO_SC> = "CS.cASC";

        <android.telecom.ConnectionService: java.lang.String SESSION_ANSWER_VIDEO> = "CS.anV";

        <android.telecom.ConnectionService: java.lang.String SESSION_ANSWER> = "CS.an";

        <android.telecom.ConnectionService: java.lang.String SESSION_ADD_PARTICIPANT> = "CS.aP";

        <android.telecom.ConnectionService: java.lang.String SESSION_ADD_CS_ADAPTER> = "CS.aCSA";

        <android.telecom.ConnectionService: java.lang.String SESSION_ABORT> = "CS.ab";

        <android.telecom.ConnectionService: java.lang.String SERVICE_INTERFACE> = "android.telecom.ConnectionService";

        <android.telecom.ConnectionService: int MSG_UNHOLD> = 8;

        <android.telecom.ConnectionService: int MSG_SWAP_CONFERENCE> = 19;

        <android.telecom.ConnectionService: int MSG_STOP_DTMF_TONE> = 11;

        <android.telecom.ConnectionService: int MSG_SPLIT_FROM_CONFERENCE> = 13;

        <android.telecom.ConnectionService: int MSG_SILENCE> = 21;

        <android.telecom.ConnectionService: int MSG_SEND_CALL_EVENT> = 23;

        <android.telecom.ConnectionService: int MSG_RTT_UPGRADE_RESPONSE> = 28;

        <android.telecom.ConnectionService: int MSG_REMOVE_CONNECTION_SERVICE_ADAPTER> = 16;

        <android.telecom.ConnectionService: int MSG_REJECT_WITH_REASON> = 38;

        <android.telecom.ConnectionService: int MSG_REJECT_WITH_MESSAGE> = 20;

        <android.telecom.ConnectionService: int MSG_REJECT> = 5;

        <android.telecom.ConnectionService: int MSG_PULL_EXTERNAL_CALL> = 22;

        <android.telecom.ConnectionService: int MSG_PLAY_DTMF_TONE> = 10;

        <android.telecom.ConnectionService: int MSG_ON_STOP_RTT> = 27;

        <android.telecom.ConnectionService: int MSG_ON_START_RTT> = 26;

        <android.telecom.ConnectionService: int MSG_ON_POST_DIAL_CONTINUE> = 14;

        <android.telecom.ConnectionService: int MSG_ON_EXTRAS_CHANGED> = 24;

        <android.telecom.ConnectionService: int MSG_ON_CALL_AUDIO_STATE_CHANGED> = 9;

        <android.telecom.ConnectionService: int MSG_MERGE_CONFERENCE> = 18;

        <android.telecom.ConnectionService: int MSG_HOLD> = 7;

        <android.telecom.ConnectionService: int MSG_HANDOVER_FAILED> = 32;

        <android.telecom.ConnectionService: int MSG_HANDOVER_COMPLETE> = 33;

        <android.telecom.ConnectionService: int MSG_EXPLICIT_CALL_TRANSFER_CONSULTATIVE> = 41;

        <android.telecom.ConnectionService: int MSG_EXPLICIT_CALL_TRANSFER> = 40;

        <android.telecom.ConnectionService: int MSG_DISCONNECT> = 6;

        <android.telecom.ConnectionService: int MSG_DEFLECT> = 34;

        <android.telecom.ConnectionService: int MSG_CREATE_CONNECTION_FAILED> = 25;

        <android.telecom.ConnectionService: int MSG_CREATE_CONNECTION_COMPLETE> = 29;

        <android.telecom.ConnectionService: int MSG_CREATE_CONNECTION> = 2;

        <android.telecom.ConnectionService: int MSG_CREATE_CONFERENCE_FAILED> = 37;

        <android.telecom.ConnectionService: int MSG_CREATE_CONFERENCE_COMPLETE> = 36;

        <android.telecom.ConnectionService: int MSG_CREATE_CONFERENCE> = 35;

        <android.telecom.ConnectionService: int MSG_CONNECTION_SERVICE_FOCUS_LOST> = 30;

        <android.telecom.ConnectionService: int MSG_CONNECTION_SERVICE_FOCUS_GAINED> = 31;

        <android.telecom.ConnectionService: int MSG_CONFERENCE> = 12;

        <android.telecom.ConnectionService: int MSG_ANSWER_VIDEO> = 17;

        <android.telecom.ConnectionService: int MSG_ANSWER> = 4;

        <android.telecom.ConnectionService: int MSG_ADD_PARTICIPANT> = 39;

        <android.telecom.ConnectionService: int MSG_ADD_CONNECTION_SERVICE_ADAPTER> = 1;

        <android.telecom.ConnectionService: int MSG_ABORT> = 3;

        <android.telecom.ConnectionService: java.lang.String EXTRA_IS_HANDOVER> = "android.telecom.extra.IS_HANDOVER";

        $z0 = staticinvoke <android.telecom.Log: boolean isLoggable(int)>(3);

        <android.telecom.ConnectionService: boolean PII_DEBUG> = $z0;

        return;
    }

    public void <init>()
    {
        android.telecom.ConnectionService r0;
        java.util.concurrent.ConcurrentHashMap $r1, $r2, $r3, $r4;
        android.telecom.RemoteConnectionManager $r5;
        java.util.ArrayList $r6;
        android.telecom.ConnectionServiceAdapter $r7;
        java.lang.Object $r8;
        android.telecom.ConnectionService$1 $r9;
        android.telecom.ConnectionService$2 $r10;
        android.os.Looper $r11;
        android.telecom.ConnectionService$3 $r12;
        android.telecom.ConnectionService$4 $r13;

        r0 := @this: android.telecom.ConnectionService;

        specialinvoke r0.<android.app.Service: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<android.telecom.ConnectionService: java.util.Map mConnectionById> = $r1;

        $r2 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<android.telecom.ConnectionService: java.util.Map mIdByConnection> = $r2;

        $r3 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r3.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<android.telecom.ConnectionService: java.util.Map mConferenceById> = $r3;

        $r4 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r4.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<android.telecom.ConnectionService: java.util.Map mIdByConference> = $r4;

        $r5 = new android.telecom.RemoteConnectionManager;

        specialinvoke $r5.<android.telecom.RemoteConnectionManager: void <init>(android.telecom.ConnectionService)>(r0);

        r0.<android.telecom.ConnectionService: android.telecom.RemoteConnectionManager mRemoteConnectionManager> = $r5;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<android.telecom.ConnectionService: java.util.List mPreInitializationConnectionRequests> = $r6;

        $r7 = new android.telecom.ConnectionServiceAdapter;

        specialinvoke $r7.<android.telecom.ConnectionServiceAdapter: void <init>()>();

        r0.<android.telecom.ConnectionService: android.telecom.ConnectionServiceAdapter mAdapter> = $r7;

        r0.<android.telecom.ConnectionService: boolean mAreAccountsInitialized> = 0;

        $r8 = new java.lang.Object;

        specialinvoke $r8.<java.lang.Object: void <init>()>();

        r0.<android.telecom.ConnectionService: java.lang.Object mIdSyncRoot> = $r8;

        r0.<android.telecom.ConnectionService: int mId> = 0;

        $r9 = new android.telecom.ConnectionService$1;

        specialinvoke $r9.<android.telecom.ConnectionService$1: void <init>(android.telecom.ConnectionService)>(r0);

        r0.<android.telecom.ConnectionService: android.os.IBinder mBinder> = $r9;

        $r10 = new android.telecom.ConnectionService$2;

        $r11 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r10.<android.telecom.ConnectionService$2: void <init>(android.telecom.ConnectionService,android.os.Looper)>(r0, $r11);

        r0.<android.telecom.ConnectionService: android.os.Handler mHandler> = $r10;

        $r12 = new android.telecom.ConnectionService$3;

        specialinvoke $r12.<android.telecom.ConnectionService$3: void <init>(android.telecom.ConnectionService)>(r0);

        r0.<android.telecom.ConnectionService: android.telecom.Conference$Listener mConferenceListener> = $r12;

        $r13 = new android.telecom.ConnectionService$4;

        specialinvoke $r13.<android.telecom.ConnectionService$4: void <init>(android.telecom.ConnectionService)>(r0);

        r0.<android.telecom.ConnectionService: android.telecom.Connection$Listener mConnectionListener> = $r13;

        return;
    }

    private void abort(java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        java.lang.Object[] $r2;
        android.telecom.Connection $r3;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        staticinvoke <android.telecom.Log: void i(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "abort %s", $r2);

        $r3 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection findConnectionForAction(java.lang.String,java.lang.String)>(r1, "abort");

        virtualinvoke $r3.<android.telecom.Connection: void onAbort()>();

        return;
    }

    static android.os.Handler access$000(android.telecom.ConnectionService)
    {
        android.telecom.ConnectionService r0;
        android.os.Handler $r1;

        r0 := @parameter0: android.telecom.ConnectionService;

        $r1 = r0.<android.telecom.ConnectionService: android.os.Handler mHandler>;

        return $r1;
    }

    static android.telecom.ConnectionServiceAdapter access$100(android.telecom.ConnectionService)
    {
        android.telecom.ConnectionService r0;
        android.telecom.ConnectionServiceAdapter $r1;

        r0 := @parameter0: android.telecom.ConnectionService;

        $r1 = r0.<android.telecom.ConnectionService: android.telecom.ConnectionServiceAdapter mAdapter>;

        return $r1;
    }

    static void access$1000(android.telecom.ConnectionService, android.telecom.PhoneAccountHandle, java.lang.String, android.telecom.ConnectionRequest, boolean)
    {
        android.telecom.ConnectionService r0;
        android.telecom.PhoneAccountHandle r1;
        java.lang.String r2;
        android.telecom.ConnectionRequest r3;
        boolean z0;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: android.telecom.PhoneAccountHandle;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: android.telecom.ConnectionRequest;

        z0 := @parameter4: boolean;

        specialinvoke r0.<android.telecom.ConnectionService: void createConferenceFailed(android.telecom.PhoneAccountHandle,java.lang.String,android.telecom.ConnectionRequest,boolean)>(r1, r2, r3, z0);

        return;
    }

    static void access$1100(android.telecom.ConnectionService, java.lang.String, android.telecom.ConnectionRequest, int)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        android.telecom.ConnectionRequest r2;
        int i0;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.telecom.ConnectionRequest;

        i0 := @parameter3: int;

        specialinvoke r0.<android.telecom.ConnectionService: void handoverFailed(java.lang.String,android.telecom.ConnectionRequest,int)>(r1, r2, i0);

        return;
    }

    static void access$1200(android.telecom.ConnectionService, java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.telecom.ConnectionService: void abort(java.lang.String)>(r1);

        return;
    }

    static void access$1300(android.telecom.ConnectionService, java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.telecom.ConnectionService: void answer(java.lang.String)>(r1);

        return;
    }

    static void access$1400(android.telecom.ConnectionService, java.lang.String, int)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        int i0;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<android.telecom.ConnectionService: void answerVideo(java.lang.String,int)>(r1, i0);

        return;
    }

    static void access$1500(android.telecom.ConnectionService, java.lang.String, android.net.Uri)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        android.net.Uri r2;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.net.Uri;

        specialinvoke r0.<android.telecom.ConnectionService: void deflect(java.lang.String,android.net.Uri)>(r1, r2);

        return;
    }

    static void access$1600(android.telecom.ConnectionService, java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.telecom.ConnectionService: void reject(java.lang.String)>(r1);

        return;
    }

    static void access$1700(android.telecom.ConnectionService, java.lang.String, int)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        int i0;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<android.telecom.ConnectionService: void reject(java.lang.String,int)>(r1, i0);

        return;
    }

    static void access$1800(android.telecom.ConnectionService, java.lang.String, java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1, r2;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<android.telecom.ConnectionService: void reject(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    static void access$1900(android.telecom.ConnectionService, java.lang.String, android.net.Uri, boolean)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        android.net.Uri r2;
        boolean z0;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.net.Uri;

        z0 := @parameter3: boolean;

        specialinvoke r0.<android.telecom.ConnectionService: void transfer(java.lang.String,android.net.Uri,boolean)>(r1, r2, z0);

        return;
    }

    static void access$200(android.telecom.ConnectionService)
    {
        android.telecom.ConnectionService r0;

        r0 := @parameter0: android.telecom.ConnectionService;

        specialinvoke r0.<android.telecom.ConnectionService: void onAdapterAttached()>();

        return;
    }

    static void access$2000(android.telecom.ConnectionService, java.lang.String, java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1, r2;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<android.telecom.ConnectionService: void consultativeTransfer(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    static void access$2100(android.telecom.ConnectionService, java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.telecom.ConnectionService: void disconnect(java.lang.String)>(r1);

        return;
    }

    static void access$2200(android.telecom.ConnectionService, java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.telecom.ConnectionService: void silence(java.lang.String)>(r1);

        return;
    }

    static void access$2300(android.telecom.ConnectionService, java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.telecom.ConnectionService: void hold(java.lang.String)>(r1);

        return;
    }

    static void access$2400(android.telecom.ConnectionService, java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.telecom.ConnectionService: void unhold(java.lang.String)>(r1);

        return;
    }

    static void access$2500(android.telecom.ConnectionService, java.lang.String, android.telecom.CallAudioState)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        android.telecom.CallAudioState r2;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.telecom.CallAudioState;

        specialinvoke r0.<android.telecom.ConnectionService: void onCallAudioStateChanged(java.lang.String,android.telecom.CallAudioState)>(r1, r2);

        return;
    }

    static void access$2600(android.telecom.ConnectionService, java.lang.String, char)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        char c0;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        c0 := @parameter2: char;

        specialinvoke r0.<android.telecom.ConnectionService: void playDtmfTone(java.lang.String,char)>(r1, c0);

        return;
    }

    static void access$2700(android.telecom.ConnectionService, java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.telecom.ConnectionService: void stopDtmfTone(java.lang.String)>(r1);

        return;
    }

    static void access$2800(android.telecom.ConnectionService, java.lang.String, java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1, r2;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<android.telecom.ConnectionService: void conference(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    static void access$2900(android.telecom.ConnectionService, java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.telecom.ConnectionService: void splitFromConference(java.lang.String)>(r1);

        return;
    }

    static boolean access$300(android.telecom.ConnectionService)
    {
        android.telecom.ConnectionService r0;
        boolean $z0;

        r0 := @parameter0: android.telecom.ConnectionService;

        $z0 = r0.<android.telecom.ConnectionService: boolean mAreAccountsInitialized>;

        return $z0;
    }

    static void access$3000(android.telecom.ConnectionService, java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.telecom.ConnectionService: void mergeConference(java.lang.String)>(r1);

        return;
    }

    static boolean access$302(android.telecom.ConnectionService, boolean)
    {
        android.telecom.ConnectionService r0;
        boolean z0;

        r0 := @parameter0: android.telecom.ConnectionService;

        z0 := @parameter1: boolean;

        r0.<android.telecom.ConnectionService: boolean mAreAccountsInitialized> = z0;

        return z0;
    }

    static void access$3100(android.telecom.ConnectionService, java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.telecom.ConnectionService: void swapConference(java.lang.String)>(r1);

        return;
    }

    static void access$3200(android.telecom.ConnectionService, java.lang.String, java.util.List)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        java.util.List r2;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.List;

        specialinvoke r0.<android.telecom.ConnectionService: void addConferenceParticipants(java.lang.String,java.util.List)>(r1, r2);

        return;
    }

    static void access$3300(android.telecom.ConnectionService, java.lang.String, boolean)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        boolean z0;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        specialinvoke r0.<android.telecom.ConnectionService: void onPostDialContinue(java.lang.String,boolean)>(r1, z0);

        return;
    }

    static void access$3400(android.telecom.ConnectionService, java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.telecom.ConnectionService: void pullExternalCall(java.lang.String)>(r1);

        return;
    }

    static void access$3500(android.telecom.ConnectionService, java.lang.String, java.lang.String, android.os.Bundle)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1, r2;
        android.os.Bundle r3;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: android.os.Bundle;

        specialinvoke r0.<android.telecom.ConnectionService: void sendCallEvent(java.lang.String,java.lang.String,android.os.Bundle)>(r1, r2, r3);

        return;
    }

    static void access$3600(android.telecom.ConnectionService, java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.telecom.ConnectionService: void notifyHandoverComplete(java.lang.String)>(r1);

        return;
    }

    static void access$3700(android.telecom.ConnectionService, java.lang.String, android.os.Bundle)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        android.os.Bundle r2;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.os.Bundle;

        specialinvoke r0.<android.telecom.ConnectionService: void handleExtrasChanged(java.lang.String,android.os.Bundle)>(r1, r2);

        return;
    }

    static void access$3800(android.telecom.ConnectionService, java.lang.String, android.telecom.Connection$RttTextStream)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        android.telecom.Connection$RttTextStream r2;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.telecom.Connection$RttTextStream;

        specialinvoke r0.<android.telecom.ConnectionService: void startRtt(java.lang.String,android.telecom.Connection$RttTextStream)>(r1, r2);

        return;
    }

    static void access$3900(android.telecom.ConnectionService, java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.telecom.ConnectionService: void stopRtt(java.lang.String)>(r1);

        return;
    }

    static void access$400(android.telecom.ConnectionService, android.telecom.PhoneAccountHandle, java.lang.String, android.telecom.ConnectionRequest, boolean, boolean)
    {
        android.telecom.ConnectionService r0;
        android.telecom.PhoneAccountHandle r1;
        java.lang.String r2;
        android.telecom.ConnectionRequest r3;
        boolean z0, z1;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: android.telecom.PhoneAccountHandle;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: android.telecom.ConnectionRequest;

        z0 := @parameter4: boolean;

        z1 := @parameter5: boolean;

        specialinvoke r0.<android.telecom.ConnectionService: void createConnection(android.telecom.PhoneAccountHandle,java.lang.String,android.telecom.ConnectionRequest,boolean,boolean)>(r1, r2, r3, z0, z1);

        return;
    }

    static void access$4000(android.telecom.ConnectionService, java.lang.String, android.telecom.Connection$RttTextStream)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        android.telecom.Connection$RttTextStream r2;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.telecom.Connection$RttTextStream;

        specialinvoke r0.<android.telecom.ConnectionService: void handleRttUpgradeResponse(java.lang.String,android.telecom.Connection$RttTextStream)>(r1, r2);

        return;
    }

    static java.util.Map access$4100(android.telecom.ConnectionService)
    {
        android.telecom.ConnectionService r0;
        java.util.Map $r1;

        r0 := @parameter0: android.telecom.ConnectionService;

        $r1 = r0.<android.telecom.ConnectionService: java.util.Map mIdByConference>;

        return $r1;
    }

    static java.util.List access$4200(android.telecom.ConnectionService, java.util.List)
    {
        android.telecom.ConnectionService r0;
        java.util.List r1, $r2;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.util.List;

        $r2 = specialinvoke r0.<android.telecom.ConnectionService: java.util.List createConnectionIdList(java.util.List)>(r1);

        return $r2;
    }

    static void access$4300(android.telecom.ConnectionService, android.telecom.Conference)
    {
        android.telecom.ConnectionService r0;
        android.telecom.Conference r1;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: android.telecom.Conference;

        specialinvoke r0.<android.telecom.ConnectionService: void removeConference(android.telecom.Conference)>(r1);

        return;
    }

    static java.util.Map access$4400(android.telecom.ConnectionService)
    {
        android.telecom.ConnectionService r0;
        java.util.Map $r1;

        r0 := @parameter0: android.telecom.ConnectionService;

        $r1 = r0.<android.telecom.ConnectionService: java.util.Map mIdByConnection>;

        return $r1;
    }

    static java.util.List access$4500(android.telecom.ConnectionService, java.util.List)
    {
        android.telecom.ConnectionService r0;
        java.util.List r1, $r2;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.util.List;

        $r2 = specialinvoke r0.<android.telecom.ConnectionService: java.util.List createIdList(java.util.List)>(r1);

        return $r2;
    }

    static android.telecom.RemoteConnectionManager access$4600(android.telecom.ConnectionService)
    {
        android.telecom.ConnectionService r0;
        android.telecom.RemoteConnectionManager $r1;

        r0 := @parameter0: android.telecom.ConnectionService;

        $r1 = r0.<android.telecom.ConnectionService: android.telecom.RemoteConnectionManager mRemoteConnectionManager>;

        return $r1;
    }

    static void access$4700(android.telecom.ConnectionService)
    {
        android.telecom.ConnectionService r0;

        r0 := @parameter0: android.telecom.ConnectionService;

        specialinvoke r0.<android.telecom.ConnectionService: void onAccountsInitialized()>();

        return;
    }

    static java.util.List access$500(android.telecom.ConnectionService)
    {
        android.telecom.ConnectionService r0;
        java.util.List $r1;

        r0 := @parameter0: android.telecom.ConnectionService;

        $r1 = r0.<android.telecom.ConnectionService: java.util.List mPreInitializationConnectionRequests>;

        return $r1;
    }

    static void access$600(android.telecom.ConnectionService, java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.telecom.ConnectionService: void notifyCreateConnectionComplete(java.lang.String)>(r1);

        return;
    }

    static void access$700(android.telecom.ConnectionService, android.telecom.PhoneAccountHandle, java.lang.String, android.telecom.ConnectionRequest, boolean)
    {
        android.telecom.ConnectionService r0;
        android.telecom.PhoneAccountHandle r1;
        java.lang.String r2;
        android.telecom.ConnectionRequest r3;
        boolean z0;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: android.telecom.PhoneAccountHandle;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: android.telecom.ConnectionRequest;

        z0 := @parameter4: boolean;

        specialinvoke r0.<android.telecom.ConnectionService: void createConnectionFailed(android.telecom.PhoneAccountHandle,java.lang.String,android.telecom.ConnectionRequest,boolean)>(r1, r2, r3, z0);

        return;
    }

    static void access$800(android.telecom.ConnectionService, android.telecom.PhoneAccountHandle, java.lang.String, android.telecom.ConnectionRequest, boolean, boolean)
    {
        android.telecom.ConnectionService r0;
        android.telecom.PhoneAccountHandle r1;
        java.lang.String r2;
        android.telecom.ConnectionRequest r3;
        boolean z0, z1;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: android.telecom.PhoneAccountHandle;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: android.telecom.ConnectionRequest;

        z0 := @parameter4: boolean;

        z1 := @parameter5: boolean;

        specialinvoke r0.<android.telecom.ConnectionService: void createConference(android.telecom.PhoneAccountHandle,java.lang.String,android.telecom.ConnectionRequest,boolean,boolean)>(r1, r2, r3, z0, z1);

        return;
    }

    static void access$900(android.telecom.ConnectionService, java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;

        r0 := @parameter0: android.telecom.ConnectionService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<android.telecom.ConnectionService: void notifyCreateConferenceComplete(java.lang.String)>(r1);

        return;
    }

    private java.lang.String addConferenceInternal(android.telecom.Conference)
    {
        android.telecom.ConnectionService r0;
        android.telecom.Conference r1;
        android.os.Bundle $r2, $r8, $r9;
        java.util.Map $r3, $r4, $r13;
        android.telecom.Conference$Listener $r5;
        java.util.UUID $r6;
        java.lang.Object[] $r7, $r10;
        boolean $z0, $z1;
        java.lang.String $r11, r12;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.Conference;

        r12 = null;

        $r2 = virtualinvoke r1.<android.telecom.Conference: android.os.Bundle getExtras()>();

        if $r2 == null goto label1;

        r12 = null;

        $r8 = virtualinvoke r1.<android.telecom.Conference: android.os.Bundle getExtras()>();

        $z0 = virtualinvoke $r8.<android.os.Bundle: boolean containsKey(java.lang.String)>("android.telecom.extra.ORIGINAL_CONNECTION_ID");

        if $z0 == 0 goto label1;

        $r9 = virtualinvoke r1.<android.telecom.Conference: android.os.Bundle getExtras()>();

        r12 = virtualinvoke $r9.<android.os.Bundle: java.lang.String getString(java.lang.String)>("android.telecom.extra.ORIGINAL_CONNECTION_ID");

        $r10 = newarray (java.lang.Object)[2];

        $r11 = virtualinvoke r1.<android.telecom.Conference: java.lang.String getTelecomCallId()>();

        $r10[0] = $r11;

        $r10[1] = r12;

        staticinvoke <android.telecom.Log: void d(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "addConferenceInternal: conf %s reusing original id %s", $r10);

     label1:
        $r13 = r0.<android.telecom.ConnectionService: java.util.Map mIdByConference>;

        $z1 = interfaceinvoke $r13.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = r1;

        staticinvoke <android.telecom.Log: void w(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "Re-adding an existing conference: %s.", $r7);

        goto label4;

     label2:
        if r1 == null goto label4;

        if r12 != null goto label3;

        $r6 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();

        r12 = virtualinvoke $r6.<java.util.UUID: java.lang.String toString()>();

        goto label3;

     label3:
        $r3 = r0.<android.telecom.ConnectionService: java.util.Map mConferenceById>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, r1);

        $r4 = r0.<android.telecom.ConnectionService: java.util.Map mIdByConference>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r12);

        $r5 = r0.<android.telecom.ConnectionService: android.telecom.Conference$Listener mConferenceListener>;

        virtualinvoke r1.<android.telecom.Conference: android.telecom.Conference addListener(android.telecom.Conference$Listener)>($r5);

        return r12;

     label4:
        return null;
    }

    private void addConferenceParticipants(java.lang.String, java.util.List)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        java.util.List r2;
        java.lang.Object[] $r3;
        java.util.Map $r4;
        boolean $z0;
        android.telecom.Conference $r5;
        android.telecom.Connection $r6;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.List;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r1;

        staticinvoke <android.telecom.Log: void i(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "addConferenceParticipants(%s)", $r3);

        $r4 = r0.<android.telecom.ConnectionService: java.util.Map mConnectionById>;

        $z0 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r6 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection findConnectionForAction(java.lang.String,java.lang.String)>(r1, "addConferenceParticipants");

        virtualinvoke $r6.<android.telecom.Connection: void onAddConferenceParticipants(java.util.List)>(r2);

        goto label2;

     label1:
        $r5 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Conference findConferenceForAction(java.lang.String,java.lang.String)>(r1, "addConferenceParticipants");

        virtualinvoke $r5.<android.telecom.Conference: void onAddConferenceParticipants(java.util.List)>(r2);

     label2:
        return;
    }

    private void addConnection(android.telecom.PhoneAccountHandle, java.lang.String, android.telecom.Connection)
    {
        android.telecom.ConnectionService r0;
        android.telecom.PhoneAccountHandle r1;
        java.lang.String r2;
        android.telecom.Connection r3;
        java.util.Map $r4, $r6;
        android.telecom.Connection$Listener $r8;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.PhoneAccountHandle;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.telecom.Connection;

        virtualinvoke r3.<android.telecom.Connection: void setTelecomCallId(java.lang.String)>(r2);

        $r4 = r0.<android.telecom.ConnectionService: java.util.Map mConnectionById>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);

        $r6 = r0.<android.telecom.ConnectionService: java.util.Map mIdByConnection>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r2);

        $r8 = r0.<android.telecom.ConnectionService: android.telecom.Connection$Listener mConnectionListener>;

        virtualinvoke r3.<android.telecom.Connection: android.telecom.Connection addConnectionListener(android.telecom.Connection$Listener)>($r8);

        virtualinvoke r3.<android.telecom.Connection: void setConnectionService(android.telecom.ConnectionService)>(r0);

        virtualinvoke r3.<android.telecom.Connection: void setPhoneAccountHandle(android.telecom.PhoneAccountHandle)>(r1);

        virtualinvoke r0.<android.telecom.ConnectionService: void onConnectionAdded(android.telecom.Connection)>(r3);

        return;
    }

    private java.lang.String addExistingConnectionInternal(android.telecom.PhoneAccountHandle, android.telecom.Connection)
    {
        android.telecom.ConnectionService r0;
        android.telecom.PhoneAccountHandle r1;
        android.telecom.Connection r2;
        android.os.Bundle $r3, $r11, $r12;
        java.lang.StringBuilder $r4;
        android.content.ComponentName $r5;
        java.lang.String $r6, $r14, r15;
        int $i0;
        java.util.UUID $r10;
        boolean $z0;
        java.lang.Object[] $r13;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.PhoneAccountHandle;

        r2 := @parameter1: android.telecom.Connection;

        $r3 = virtualinvoke r2.<android.telecom.Connection: android.os.Bundle getExtras()>();

        if $r3 == null goto label1;

        $r11 = virtualinvoke r2.<android.telecom.Connection: android.os.Bundle getExtras()>();

        $z0 = virtualinvoke $r11.<android.os.Bundle: boolean containsKey(java.lang.String)>("android.telecom.extra.ORIGINAL_CONNECTION_ID");

        if $z0 == 0 goto label1;

        $r12 = virtualinvoke r2.<android.telecom.Connection: android.os.Bundle getExtras()>();

        r15 = virtualinvoke $r12.<android.os.Bundle: java.lang.String getString(java.lang.String)>("android.telecom.extra.ORIGINAL_CONNECTION_ID");

        $r13 = newarray (java.lang.Object)[2];

        $r14 = virtualinvoke r2.<android.telecom.Connection: java.lang.String getTelecomCallId()>();

        $r13[0] = $r14;

        $r13[1] = r15;

        staticinvoke <android.telecom.Log: void d(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "addExistingConnectionInternal - conn %s reusing original id %s", $r13);

        goto label3;

     label1:
        if r1 != null goto label2;

        $r10 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();

        r15 = virtualinvoke $r10.<java.util.UUID: java.lang.String toString()>();

        goto label3;

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r1.<android.telecom.PhoneAccountHandle: android.content.ComponentName getComponentName()>();

        $r6 = virtualinvoke $r5.<android.content.ComponentName: java.lang.String getClassName()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        $i0 = specialinvoke r0.<android.telecom.ConnectionService: int getNextCallId()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        r15 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        specialinvoke r0.<android.telecom.ConnectionService: void addConnection(android.telecom.PhoneAccountHandle,java.lang.String,android.telecom.Connection)>(r1, r15, r2);

        return r15;
    }

    private void answer(java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        java.lang.Object[] $r2;
        java.util.Map $r3;
        boolean $z0;
        android.telecom.Conference $r4;
        android.telecom.Connection $r5;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        staticinvoke <android.telecom.Log: void i(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "answer %s", $r2);

        $r3 = r0.<android.telecom.ConnectionService: java.util.Map mConnectionById>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r5 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection findConnectionForAction(java.lang.String,java.lang.String)>(r1, "answer");

        virtualinvoke $r5.<android.telecom.Connection: void onAnswer()>();

        goto label2;

     label1:
        $r4 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Conference findConferenceForAction(java.lang.String,java.lang.String)>(r1, "answer");

        virtualinvoke $r4.<android.telecom.Conference: void onAnswer()>();

     label2:
        return;
    }

    private void answerVideo(java.lang.String, int)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        int i0;
        java.lang.Object[] $r2;
        java.util.Map $r3;
        boolean $z0;
        android.telecom.Conference $r4;
        android.telecom.Connection $r5;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        staticinvoke <android.telecom.Log: void i(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "answerVideo %s", $r2);

        $r3 = r0.<android.telecom.ConnectionService: java.util.Map mConnectionById>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r5 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection findConnectionForAction(java.lang.String,java.lang.String)>(r1, "answer");

        virtualinvoke $r5.<android.telecom.Connection: void onAnswer(int)>(i0);

        goto label2;

     label1:
        $r4 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Conference findConferenceForAction(java.lang.String,java.lang.String)>(r1, "answer");

        virtualinvoke $r4.<android.telecom.Conference: void onAnswer(int)>(i0);

     label2:
        return;
    }

    private void conference(java.lang.String, java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1, r14;
        android.telecom.Connection r2, $r5, $r6, $r9, r16;
        android.telecom.Conference r3, $r7, $r8, $r12, r15, r17;
        java.lang.Object[] $r4, $r10, $r11, $r13;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        r14 := @parameter1: java.lang.String;

        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = r1;

        $r4[1] = r14;

        staticinvoke <android.telecom.Log: void i(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "conference %s, %s", $r4);

        r2 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection findConnectionForAction(java.lang.String,java.lang.String)>(r14, "conference");

        r15 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Conference getNullConference()>();

        $r5 = staticinvoke <android.telecom.ConnectionService: android.telecom.Connection getNullConnection()>();

        if r2 != $r5 goto label1;

        r3 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Conference findConferenceForAction(java.lang.String,java.lang.String)>(r14, "conference");

        r15 = r3;

        $r12 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Conference getNullConference()>();

        if r3 != $r12 goto label1;

        $r13 = newarray (java.lang.Object)[1];

        $r13[0] = r14;

        staticinvoke <android.telecom.Log: void w(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "Connection2 or Conference2 missing in conference request %s.", $r13);

        return;

     label1:
        r16 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection findConnectionForAction(java.lang.String,java.lang.String)>(r1, "conference");

        $r6 = staticinvoke <android.telecom.ConnectionService: android.telecom.Connection getNullConnection()>();

        if r16 != $r6 goto label5;

        r17 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Conference findConferenceForAction(java.lang.String,java.lang.String)>(r1, "addConnection");

        $r8 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Conference getNullConference()>();

        if r17 != $r8 goto label2;

        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = r1;

        staticinvoke <android.telecom.Log: void w(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "Connection1 or Conference1 missing in conference request %s.", $r11);

        goto label3;

     label2:
        $r9 = staticinvoke <android.telecom.ConnectionService: android.telecom.Connection getNullConnection()>();

        if r2 == $r9 goto label4;

        virtualinvoke r17.<android.telecom.Conference: void onMerge(android.telecom.Connection)>(r2);

     label3:
        goto label7;

     label4:
        $r10 = newarray (java.lang.Object)[0];

        staticinvoke <android.telecom.Log: void wtf(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "There can only be one conference and an attempt was made to merge two conferences.", $r10);

        return;

     label5:
        $r7 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Conference getNullConference()>();

        if r15 == $r7 goto label6;

        virtualinvoke r15.<android.telecom.Conference: void onMerge(android.telecom.Connection)>(r16);

        goto label7;

     label6:
        virtualinvoke r0.<android.telecom.ConnectionService: void onConference(android.telecom.Connection,android.telecom.Connection)>(r16, r2);

     label7:
        return;
    }

    private void consultativeTransfer(java.lang.String, java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1, r2;
        java.lang.Object[] $r3;
        android.telecom.Connection $r4, $r5;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r1;

        staticinvoke <android.telecom.Log: void i(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "consultativeTransfer %s", $r3);

        $r4 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection findConnectionForAction(java.lang.String,java.lang.String)>(r1, "consultativeTransfer");

        $r5 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection findConnectionForAction(java.lang.String,java.lang.String)>(r2, " consultativeTransfer");

        virtualinvoke $r4.<android.telecom.Connection: void onTransfer(android.telecom.Connection)>($r5);

        return;
    }

    private void createConference(android.telecom.PhoneAccountHandle, java.lang.String, android.telecom.ConnectionRequest, boolean, boolean)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1, $r17, $r27;
        android.telecom.ConnectionRequest r2;
        boolean z0, z1, $z2, $z3;
        java.lang.Object[] $r3, $r22, $r29;
        android.os.Bundle $r4, $r13, r36;
        android.telecom.Connection$VideoProvider $r8, $r25, $r45;
        int $i0, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        android.telecom.ParcelableConference$Builder $r9, $r10, $r12, $r14, $r16, $r18, $r20, $r21, $r41, $r43, r44;
        long $l1, $l2;
        android.telecom.StatusHints $r11;
        android.net.Uri $r15;
        android.telecom.DisconnectCause $r19, $r30;
        android.telecom.ConnectionServiceAdapter $r23, $r24, $r26;
        android.telecom.PhoneAccountHandle $r28, $r31, r32, $r42;
        android.telecom.Conference r33, r35;
        java.util.Map $r38, $r39;
        android.telecom.Conference$Listener $r40;
        com.android.internal.telecom.IVideoProvider r46;
        android.telecom.ParcelableConference r47;

        r0 := @this: android.telecom.ConnectionService;

        r32 := @parameter0: android.telecom.PhoneAccountHandle;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.telecom.ConnectionRequest;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        if z0 == 0 goto label1;

        r33 = virtualinvoke r0.<android.telecom.ConnectionService: android.telecom.Conference onCreateIncomingConference(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)>(r32, r2);

        goto label2;

     label1:
        r33 = virtualinvoke r0.<android.telecom.ConnectionService: android.telecom.Conference onCreateOutgoingConference(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)>(r32, r2);

     label2:
        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r33;

        staticinvoke <android.telecom.Log: void d(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "createConference, conference: %s", $r3);

        r35 = r33;

        if r33 != null goto label3;

        $r29 = newarray (java.lang.Object)[0];

        staticinvoke <android.telecom.Log: void i(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "createConference, implementation returned null conference.", $r29);

        $r30 = new android.telecom.DisconnectCause;

        specialinvoke $r30.<android.telecom.DisconnectCause: void <init>(int,java.lang.String)>(1, "IMPL_RETURNED_NULL_CONFERENCE");

        $r31 = virtualinvoke r2.<android.telecom.ConnectionRequest: android.telecom.PhoneAccountHandle getAccountHandle()>();

        r35 = staticinvoke <android.telecom.Conference: android.telecom.Conference createFailedConference(android.telecom.DisconnectCause,android.telecom.PhoneAccountHandle)>($r30, $r31);

     label3:
        r36 = virtualinvoke r2.<android.telecom.ConnectionRequest: android.os.Bundle getExtras()>();

        $r4 = new android.os.Bundle;

        specialinvoke $r4.<android.os.Bundle: void <init>()>();

        virtualinvoke $r4.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("android.telecom.extra.ORIGINAL_CONNECTION_ID", r1);

        if r36 == null goto label4;

        $z3 = virtualinvoke r36.<android.os.Bundle: boolean containsKey(java.lang.String)>("android.telecom.extra.REMOTE_CONNECTION_ORIGINATING_PACKAGE_NAME");

        if $z3 == 0 goto label4;

        $r27 = virtualinvoke r36.<android.os.Bundle: java.lang.String getString(java.lang.String)>("android.telecom.extra.REMOTE_CONNECTION_ORIGINATING_PACKAGE_NAME");

        virtualinvoke $r4.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("android.telecom.extra.REMOTE_CONNECTION_ORIGINATING_PACKAGE_NAME", $r27);

        $r28 = virtualinvoke r2.<android.telecom.ConnectionRequest: android.telecom.PhoneAccountHandle getAccountHandle()>();

        virtualinvoke $r4.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("android.telecom.extra.REMOTE_PHONE_ACCOUNT_HANDLE", $r28);

     label4:
        virtualinvoke r35.<android.telecom.Conference: void putExtras(android.os.Bundle)>($r4);

        $r38 = r0.<android.telecom.ConnectionService: java.util.Map mConferenceById>;

        interfaceinvoke $r38.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r35);

        $r39 = r0.<android.telecom.ConnectionService: java.util.Map mIdByConference>;

        interfaceinvoke $r39.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r35, r1);

        $r40 = r0.<android.telecom.ConnectionService: android.telecom.Conference$Listener mConferenceListener>;

        virtualinvoke r35.<android.telecom.Conference: android.telecom.Conference addListener(android.telecom.Conference$Listener)>($r40);

        $r41 = new android.telecom.ParcelableConference$Builder;

        $r42 = virtualinvoke r2.<android.telecom.ConnectionRequest: android.telecom.PhoneAccountHandle getAccountHandle()>();

        $i7 = virtualinvoke r35.<android.telecom.Conference: int getState()>();

        specialinvoke $r41.<android.telecom.ParcelableConference$Builder: void <init>(android.telecom.PhoneAccountHandle,int)>($r42, $i7);

        $i8 = virtualinvoke r35.<android.telecom.Conference: int getConnectionCapabilities()>();

        $r43 = virtualinvoke $r41.<android.telecom.ParcelableConference$Builder: android.telecom.ParcelableConference$Builder setConnectionCapabilities(int)>($i8);

        $i9 = virtualinvoke r35.<android.telecom.Conference: int getConnectionProperties()>();

        r44 = virtualinvoke $r43.<android.telecom.ParcelableConference$Builder: android.telecom.ParcelableConference$Builder setConnectionProperties(int)>($i9);

        $r45 = virtualinvoke r35.<android.telecom.Conference: android.telecom.Connection$VideoProvider getVideoProvider()>();

        if $r45 != null goto label5;

        r46 = null;

        goto label6;

     label5:
        $r8 = virtualinvoke r35.<android.telecom.Conference: android.telecom.Connection$VideoProvider getVideoProvider()>();

        r46 = virtualinvoke $r8.<android.telecom.Connection$VideoProvider: com.android.internal.telecom.IVideoProvider getInterface()>();

     label6:
        $i0 = virtualinvoke r35.<android.telecom.Conference: int getVideoState()>();

        $r9 = virtualinvoke r44.<android.telecom.ParcelableConference$Builder: android.telecom.ParcelableConference$Builder setVideoAttributes(com.android.internal.telecom.IVideoProvider,int)>(r46, $i0);

        $l1 = virtualinvoke r35.<android.telecom.Conference: long getConnectTimeMillis()>();

        $l2 = virtualinvoke r35.<android.telecom.Conference: long getConnectionStartElapsedRealtimeMillis()>();

        $r10 = virtualinvoke $r9.<android.telecom.ParcelableConference$Builder: android.telecom.ParcelableConference$Builder setConnectTimeMillis(long,long)>($l1, $l2);

        $r11 = virtualinvoke r35.<android.telecom.Conference: android.telecom.StatusHints getStatusHints()>();

        $r12 = virtualinvoke $r10.<android.telecom.ParcelableConference$Builder: android.telecom.ParcelableConference$Builder setStatusHints(android.telecom.StatusHints)>($r11);

        $r13 = virtualinvoke r35.<android.telecom.Conference: android.os.Bundle getExtras()>();

        $r14 = virtualinvoke $r12.<android.telecom.ParcelableConference$Builder: android.telecom.ParcelableConference$Builder setExtras(android.os.Bundle)>($r13);

        $r15 = virtualinvoke r35.<android.telecom.Conference: android.net.Uri getAddress()>();

        $i3 = virtualinvoke r35.<android.telecom.Conference: int getAddressPresentation()>();

        $r16 = virtualinvoke $r14.<android.telecom.ParcelableConference$Builder: android.telecom.ParcelableConference$Builder setAddress(android.net.Uri,int)>($r15, $i3);

        $r17 = virtualinvoke r35.<android.telecom.Conference: java.lang.String getCallerDisplayName()>();

        $i4 = virtualinvoke r35.<android.telecom.Conference: int getCallerDisplayNamePresentation()>();

        $r18 = virtualinvoke $r16.<android.telecom.ParcelableConference$Builder: android.telecom.ParcelableConference$Builder setCallerDisplayName(java.lang.String,int)>($r17, $i4);

        $r19 = virtualinvoke r35.<android.telecom.Conference: android.telecom.DisconnectCause getDisconnectCause()>();

        $r20 = virtualinvoke $r18.<android.telecom.ParcelableConference$Builder: android.telecom.ParcelableConference$Builder setDisconnectCause(android.telecom.DisconnectCause)>($r19);

        $z2 = virtualinvoke r35.<android.telecom.Conference: boolean isRingbackRequested()>();

        $r21 = virtualinvoke $r20.<android.telecom.ParcelableConference$Builder: android.telecom.ParcelableConference$Builder setRingbackRequested(boolean)>($z2);

        r47 = virtualinvoke $r21.<android.telecom.ParcelableConference$Builder: android.telecom.ParcelableConference build()>();

        $i5 = virtualinvoke r35.<android.telecom.Conference: int getState()>();

        if $i5 == 6 goto label7;

        virtualinvoke r35.<android.telecom.Conference: void setTelecomCallId(java.lang.String)>(r1);

        $r24 = r0.<android.telecom.ConnectionService: android.telecom.ConnectionServiceAdapter mAdapter>;

        $r25 = virtualinvoke r35.<android.telecom.Conference: android.telecom.Connection$VideoProvider getVideoProvider()>();

        virtualinvoke $r24.<android.telecom.ConnectionServiceAdapter: void setVideoProvider(java.lang.String,android.telecom.Connection$VideoProvider)>(r1, $r25);

        $r26 = r0.<android.telecom.ConnectionService: android.telecom.ConnectionServiceAdapter mAdapter>;

        $i6 = virtualinvoke r35.<android.telecom.Conference: int getVideoState()>();

        virtualinvoke $r26.<android.telecom.ConnectionServiceAdapter: void setVideoState(java.lang.String,int)>(r1, $i6);

        virtualinvoke r0.<android.telecom.ConnectionService: void onConferenceAdded(android.telecom.Conference)>(r35);

     label7:
        $r22 = newarray (java.lang.Object)[1];

        $r22[0] = r1;

        staticinvoke <android.telecom.Log: void d(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "createConference, calling handleCreateConferenceSuccessful %s", $r22);

        $r23 = r0.<android.telecom.ConnectionService: android.telecom.ConnectionServiceAdapter mAdapter>;

        virtualinvoke $r23.<android.telecom.ConnectionServiceAdapter: void handleCreateConferenceComplete(java.lang.String,android.telecom.ConnectionRequest,android.telecom.ParcelableConference)>(r1, r2, r47);

        return;
    }

    private void createConferenceFailed(android.telecom.PhoneAccountHandle, java.lang.String, android.telecom.ConnectionRequest, boolean)
    {
        android.telecom.ConnectionService r0;
        android.telecom.PhoneAccountHandle r1;
        java.lang.String r2;
        android.telecom.ConnectionRequest r3;
        boolean z0;
        java.lang.Object[] $r4;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.PhoneAccountHandle;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.telecom.ConnectionRequest;

        z0 := @parameter3: boolean;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r2;

        staticinvoke <android.telecom.Log: void i(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "createConferenceFailed %s", $r4);

        if z0 == 0 goto label1;

        virtualinvoke r0.<android.telecom.ConnectionService: void onCreateIncomingConferenceFailed(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)>(r1, r3);

        goto label2;

     label1:
        virtualinvoke r0.<android.telecom.ConnectionService: void onCreateOutgoingConferenceFailed(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)>(r1, r3);

     label2:
        return;
    }

    private void createConnection(android.telecom.PhoneAccountHandle, java.lang.String, android.telecom.ConnectionRequest, boolean, boolean)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1, r5, $r8, $r9, $r10, $r11, $r22, r46;
        android.telecom.ConnectionRequest r2;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, z9, z10;
        android.telecom.ConnectionServiceAdapter r3;
        android.telecom.PhoneAccountHandle r4, $r21, $r23, r32, r39;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i13, $i14, $i15;
        android.os.Bundle $r6, $r20, $r26, $r27, $r29, $r30, $r33, r42, r43;
        java.lang.Object[] $r7, $r12, $r24, $r34, $r41;
        android.telecom.Connection$VideoProvider $r13, $r14;
        android.telecom.ParcelableConnection $r15;
        long $l11, $l12;
        android.telecom.StatusHints $r16;
        android.telecom.DisconnectCause $r17, $r25;
        java.util.List $r18, $r19;
        android.os.Parcelable $r28;
        java.lang.Throwable $r31;
        java.lang.Boolean $r35, $r36, $r37, $r38;
        android.telecom.Connection r40;
        android.net.Uri r45, r47;
        com.android.internal.telecom.IVideoProvider r48;

        r0 := @this: android.telecom.ConnectionService;

        r32 := @parameter0: android.telecom.PhoneAccountHandle;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.telecom.ConnectionRequest;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        $r6 = virtualinvoke r2.<android.telecom.ConnectionRequest: android.os.Bundle getExtras()>();

        if $r6 == null goto label01;

        $r30 = virtualinvoke r2.<android.telecom.ConnectionRequest: android.os.Bundle getExtras()>();

        $z7 = virtualinvoke $r30.<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>("android.telecom.extra.IS_HANDOVER", 0);

        if $z7 == 0 goto label01;

        z8 = 1;

        goto label02;

     label01:
        z8 = 0;

     label02:
        $r33 = virtualinvoke r2.<android.telecom.ConnectionRequest: android.os.Bundle getExtras()>();

        if $r33 == null goto label03;

        $r29 = virtualinvoke r2.<android.telecom.ConnectionRequest: android.os.Bundle getExtras()>();

        $z6 = virtualinvoke $r29.<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>("android.telecom.extra.IS_HANDOVER_CONNECTION", 0);

        if $z6 == 0 goto label03;

        z9 = 1;

        goto label04;

     label03:
        z9 = 0;

     label04:
        $r34 = newarray (java.lang.Object)[7];

        $r34[0] = r32;

        $r34[1] = r1;

        $r34[2] = r2;

        $r35 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r34[3] = $r35;

        $r36 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        $r34[4] = $r36;

        $r37 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z8);

        $r34[5] = $r37;

        $r38 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z9);

        $r34[6] = $r38;

        staticinvoke <android.telecom.Log: void d(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "createConnection, callManagerAccount: %s, callId: %s, request: %s, isIncoming: %b, isUnknown: %b, isLegacyHandover: %b, isHandover: %b", $r34);

        if z9 == 0 goto label09;

        $r26 = virtualinvoke r2.<android.telecom.ConnectionRequest: android.os.Bundle getExtras()>();

        if $r26 == null goto label05;

        $r27 = virtualinvoke r2.<android.telecom.ConnectionRequest: android.os.Bundle getExtras()>();

        $r28 = virtualinvoke $r27.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("android.telecom.extra.HANDOVER_FROM_PHONE_ACCOUNT");

        r39 = (android.telecom.PhoneAccountHandle) $r28;

        goto label06;

     label05:
        r39 = null;

     label06:
        if z0 != 0 goto label07;

        r40 = virtualinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection onCreateOutgoingHandoverConnection(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)>(r39, r2);

        goto label08;

     label07:
        r40 = virtualinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection onCreateIncomingHandoverConnection(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)>(r39, r2);

     label08:
        goto label12;

     label09:
        if z1 == 0 goto label10;

        r40 = virtualinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection onCreateUnknownConnection(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)>(r32, r2);

        goto label12;

     label10:
        if z0 == 0 goto label11;

        r40 = virtualinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection onCreateIncomingConnection(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)>(r32, r2);

        goto label12;

     label11:
        r40 = virtualinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection onCreateOutgoingConnection(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)>(r32, r2);

     label12:
        $r41 = newarray (java.lang.Object)[1];

        $r41[0] = r40;

        staticinvoke <android.telecom.Log: void d(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "createConnection, connection: %s", $r41);

        if r40 != null goto label13;

        $r24 = newarray (java.lang.Object)[0];

        staticinvoke <android.telecom.Log: void i(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "createConnection, implementation returned null connection.", $r24);

        $r25 = new android.telecom.DisconnectCause;

        specialinvoke $r25.<android.telecom.DisconnectCause: void <init>(int,java.lang.String)>(1, "IMPL_RETURNED_NULL_CONNECTION");

        r40 = staticinvoke <android.telecom.Connection: android.telecom.Connection createFailedConnection(android.telecom.DisconnectCause)>($r25);

        goto label19;

     label13:
        r42 = virtualinvoke r2.<android.telecom.ConnectionRequest: android.os.Bundle getExtras()>();

     label14:
        if r42 == null goto label17;

     label15:
        $z5 = virtualinvoke r42.<android.os.Bundle: boolean containsKey(java.lang.String)>("android.telecom.extra.REMOTE_CONNECTION_ORIGINATING_PACKAGE_NAME");

        if $z5 == 0 goto label17;

        r43 = new android.os.Bundle;

        specialinvoke r43.<android.os.Bundle: void <init>()>();

     label16:
        $r22 = virtualinvoke r42.<android.os.Bundle: java.lang.String getString(java.lang.String)>("android.telecom.extra.REMOTE_CONNECTION_ORIGINATING_PACKAGE_NAME");

        virtualinvoke r43.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("android.telecom.extra.REMOTE_CONNECTION_ORIGINATING_PACKAGE_NAME", $r22);

        $r23 = virtualinvoke r2.<android.telecom.ConnectionRequest: android.telecom.PhoneAccountHandle getAccountHandle()>();

        virtualinvoke r43.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("android.telecom.extra.REMOTE_PHONE_ACCOUNT_HANDLE", $r23);

        virtualinvoke r40.<android.telecom.Connection: void putExtras(android.os.Bundle)>(r43);

     label17:
        goto label19;

     label18:
        $r31 := @caughtexception;

     label19:
        $i14 = virtualinvoke r40.<android.telecom.Connection: int getConnectionProperties()>();

        $i15 = $i14 & 128;

        if $i15 != 128 goto label20;

        z10 = 1;

        goto label21;

     label20:
        z10 = 0;

     label21:
        if z10 == 0 goto label22;

        virtualinvoke r40.<android.telecom.Connection: void setAudioModeIsVoip(boolean)>(1);

     label22:
        virtualinvoke r40.<android.telecom.Connection: void setTelecomCallId(java.lang.String)>(r1);

        $i6 = virtualinvoke r40.<android.telecom.Connection: int getState()>();

        if $i6 == 6 goto label23;

        $r21 = virtualinvoke r2.<android.telecom.ConnectionRequest: android.telecom.PhoneAccountHandle getAccountHandle()>();

        specialinvoke r0.<android.telecom.ConnectionService: void addConnection(android.telecom.PhoneAccountHandle,java.lang.String,android.telecom.Connection)>($r21, r1, r40);

     label23:
        r45 = virtualinvoke r40.<android.telecom.Connection: android.net.Uri getAddress()>();

        if r45 != null goto label24;

        r46 = "null";

        goto label25;

     label24:
        r46 = virtualinvoke r45.<android.net.Uri: java.lang.String getSchemeSpecificPart()>();

     label25:
        $r7 = newarray (java.lang.Object)[4];

        $r8 = staticinvoke <android.telecom.Connection: java.lang.String toLogSafePhoneNumber(java.lang.String)>(r46);

        $r7[0] = $r8;

        $i7 = virtualinvoke r40.<android.telecom.Connection: int getState()>();

        $r9 = staticinvoke <android.telecom.Connection: java.lang.String stateToString(int)>($i7);

        $r7[1] = $r9;

        $i8 = virtualinvoke r40.<android.telecom.Connection: int getConnectionCapabilities()>();

        $r10 = staticinvoke <android.telecom.Connection: java.lang.String capabilitiesToString(int)>($i8);

        $r7[2] = $r10;

        $i9 = virtualinvoke r40.<android.telecom.Connection: int getConnectionProperties()>();

        $r11 = staticinvoke <android.telecom.Connection: java.lang.String propertiesToString(int)>($i9);

        $r7[3] = $r11;

        staticinvoke <android.telecom.Log: void v(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "createConnection, number: %s, state: %s, capabilities: %s, properties: %s", $r7);

        $r12 = newarray (java.lang.Object)[1];

        $r12[0] = r1;

        staticinvoke <android.telecom.Log: void d(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "createConnection, calling handleCreateConnectionSuccessful %s", $r12);

        r3 = r0.<android.telecom.ConnectionService: android.telecom.ConnectionServiceAdapter mAdapter>;

        r4 = virtualinvoke r2.<android.telecom.ConnectionRequest: android.telecom.PhoneAccountHandle getAccountHandle()>();

        i0 = virtualinvoke r40.<android.telecom.Connection: int getState()>();

        i1 = virtualinvoke r40.<android.telecom.Connection: int getConnectionCapabilities()>();

        i2 = virtualinvoke r40.<android.telecom.Connection: int getConnectionProperties()>();

        i3 = virtualinvoke r40.<android.telecom.Connection: int getSupportedAudioRoutes()>();

        r47 = virtualinvoke r40.<android.telecom.Connection: android.net.Uri getAddress()>();

        i4 = virtualinvoke r40.<android.telecom.Connection: int getAddressPresentation()>();

        r5 = virtualinvoke r40.<android.telecom.Connection: java.lang.String getCallerDisplayName()>();

        i5 = virtualinvoke r40.<android.telecom.Connection: int getCallerDisplayNamePresentation()>();

        $r13 = virtualinvoke r40.<android.telecom.Connection: android.telecom.Connection$VideoProvider getVideoProvider()>();

        if $r13 != null goto label26;

        r48 = null;

        goto label27;

     label26:
        $r14 = virtualinvoke r40.<android.telecom.Connection: android.telecom.Connection$VideoProvider getVideoProvider()>();

        r48 = virtualinvoke $r14.<android.telecom.Connection$VideoProvider: com.android.internal.telecom.IVideoProvider getInterface()>();

     label27:
        $r15 = new android.telecom.ParcelableConnection;

        $i10 = virtualinvoke r40.<android.telecom.Connection: int getVideoState()>();

        $z2 = virtualinvoke r40.<android.telecom.Connection: boolean isRingbackRequested()>();

        $z3 = virtualinvoke r40.<android.telecom.Connection: boolean getAudioModeIsVoip()>();

        $l11 = virtualinvoke r40.<android.telecom.Connection: long getConnectTimeMillis()>();

        $l12 = virtualinvoke r40.<android.telecom.Connection: long getConnectionStartElapsedRealtimeMillis()>();

        $r16 = virtualinvoke r40.<android.telecom.Connection: android.telecom.StatusHints getStatusHints()>();

        $r17 = virtualinvoke r40.<android.telecom.Connection: android.telecom.DisconnectCause getDisconnectCause()>();

        $r18 = virtualinvoke r40.<android.telecom.Connection: java.util.List getConferenceables()>();

        $r19 = specialinvoke r0.<android.telecom.ConnectionService: java.util.List createIdList(java.util.List)>($r18);

        $r20 = virtualinvoke r40.<android.telecom.Connection: android.os.Bundle getExtras()>();

        $i13 = virtualinvoke r40.<android.telecom.Connection: int getCallerNumberVerificationStatus()>();

        specialinvoke $r15.<android.telecom.ParcelableConnection: void <init>(android.telecom.PhoneAccountHandle,int,int,int,int,android.net.Uri,int,java.lang.String,int,com.android.internal.telecom.IVideoProvider,int,boolean,boolean,long,long,android.telecom.StatusHints,android.telecom.DisconnectCause,java.util.List,android.os.Bundle,int)>(r4, i0, i1, i2, i3, r47, i4, r5, i5, r48, $i10, $z2, $z3, $l11, $l12, $r16, $r17, $r19, $r20, $i13);

        virtualinvoke r3.<android.telecom.ConnectionServiceAdapter: void handleCreateConnectionComplete(java.lang.String,android.telecom.ConnectionRequest,android.telecom.ParcelableConnection)>(r1, r2, $r15);

        if z0 == 0 goto label28;

        $z4 = virtualinvoke r2.<android.telecom.ConnectionRequest: boolean shouldShowIncomingCallUi()>();

        if $z4 == 0 goto label28;

        if z10 == 0 goto label28;

        virtualinvoke r40.<android.telecom.Connection: void onShowIncomingCallUi()>();

     label28:
        if z1 == 0 goto label29;

        virtualinvoke r0.<android.telecom.ConnectionService: void triggerConferenceRecalculate()>();

     label29:
        return;

        catch java.lang.UnsupportedOperationException from label13 to label14 with label18;
        catch java.lang.UnsupportedOperationException from label15 to label16 with label18;
        catch java.lang.UnsupportedOperationException from label16 to label17 with label18;
    }

    private void createConnectionFailed(android.telecom.PhoneAccountHandle, java.lang.String, android.telecom.ConnectionRequest, boolean)
    {
        android.telecom.ConnectionService r0;
        android.telecom.PhoneAccountHandle r1;
        java.lang.String r2;
        android.telecom.ConnectionRequest r3;
        boolean z0;
        java.lang.Object[] $r4;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.PhoneAccountHandle;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.telecom.ConnectionRequest;

        z0 := @parameter3: boolean;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r2;

        staticinvoke <android.telecom.Log: void i(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "createConnectionFailed %s", $r4);

        if z0 == 0 goto label1;

        virtualinvoke r0.<android.telecom.ConnectionService: void onCreateIncomingConnectionFailed(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)>(r1, r3);

        goto label2;

     label1:
        virtualinvoke r0.<android.telecom.ConnectionService: void onCreateOutgoingConnectionFailed(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest)>(r1, r3);

     label2:
        return;
    }

    private java.util.List createConnectionIdList(java.util.List)
    {
        android.telecom.ConnectionService r0;
        android.telecom.Connection r2;
        java.util.ArrayList $r3;
        boolean $z0, $z1;
        java.lang.Object $r4, $r7;
        java.util.Map $r5, $r6;
        java.lang.String $r8;
        java.util.List r9;
        java.util.Iterator r10;

        r0 := @this: android.telecom.ConnectionService;

        r9 := @parameter0: java.util.List;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r10 = interfaceinvoke r9.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.telecom.Connection) $r4;

        $r5 = r0.<android.telecom.ConnectionService: java.util.Map mIdByConnection>;

        $z1 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);

        if $z1 == 0 goto label2;

        $r6 = r0.<android.telecom.ConnectionService: java.util.Map mIdByConnection>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r8 = (java.lang.String) $r7;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r8);

     label2:
        goto label1;

     label3:
        staticinvoke <java.util.Collections: void sort(java.util.List)>($r3);

        return $r3;
    }

    private java.util.List createIdList(java.util.List)
    {
        android.telecom.ConnectionService r0;
        java.util.ArrayList $r2;
        boolean $z0, $z1, $z2, $z3, $z5;
        java.lang.Object $r3, $r6, $r10;
        java.util.Map $r4, $r5, $r8, $r9;
        java.lang.String $r7, $r11;
        java.util.List r12;
        java.util.Iterator r13;
        android.telecom.Conferenceable r14;
        android.telecom.Connection r15;
        android.telecom.Conference r16;

        r0 := @this: android.telecom.ConnectionService;

        r12 := @parameter0: java.util.List;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r13 = interfaceinvoke r12.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        r14 = (android.telecom.Conferenceable) $r3;

        $z1 = r14 instanceof android.telecom.Connection;

        if $z1 == 0 goto label2;

        r15 = (android.telecom.Connection) r14;

        $r8 = r0.<android.telecom.ConnectionService: java.util.Map mIdByConnection>;

        $z5 = interfaceinvoke $r8.<java.util.Map: boolean containsKey(java.lang.Object)>(r15);

        if $z5 == 0 goto label3;

        $r9 = r0.<android.telecom.ConnectionService: java.util.Map mIdByConnection>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r15);

        $r11 = (java.lang.String) $r10;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r11);

        goto label3;

     label2:
        $z2 = r14 instanceof android.telecom.Conference;

        if $z2 == 0 goto label3;

        r16 = (android.telecom.Conference) r14;

        $r4 = r0.<android.telecom.ConnectionService: java.util.Map mIdByConference>;

        $z3 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r16);

        if $z3 == 0 goto label3;

        $r5 = r0.<android.telecom.ConnectionService: java.util.Map mIdByConference>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r16);

        $r7 = (java.lang.String) $r6;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label3;

     label3:
        goto label1;

     label4:
        staticinvoke <java.util.Collections: void sort(java.util.List)>($r2);

        return $r2;
    }

    private void deflect(java.lang.String, android.net.Uri)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        android.net.Uri r2;
        java.lang.Object[] $r3;
        android.telecom.Connection $r4;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.net.Uri;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r1;

        staticinvoke <android.telecom.Log: void i(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "deflect %s", $r3);

        $r4 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection findConnectionForAction(java.lang.String,java.lang.String)>(r1, "deflect");

        virtualinvoke $r4.<android.telecom.Connection: void onDeflect(android.net.Uri)>(r2);

        return;
    }

    private void disconnect(java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        java.lang.Object[] $r2;
        java.util.Map $r3;
        boolean $z0;
        android.telecom.Conference $r4;
        android.telecom.Connection $r5;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        staticinvoke <android.telecom.Log: void i(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "disconnect %s", $r2);

        $r3 = r0.<android.telecom.ConnectionService: java.util.Map mConnectionById>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r5 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection findConnectionForAction(java.lang.String,java.lang.String)>(r1, "disconnect");

        virtualinvoke $r5.<android.telecom.Connection: void onDisconnect()>();

        goto label2;

     label1:
        $r4 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Conference findConferenceForAction(java.lang.String,java.lang.String)>(r1, "disconnect");

        virtualinvoke $r4.<android.telecom.Conference: void onDisconnect()>();

     label2:
        return;
    }

    private void endAllConnections()
    {
        android.telecom.ConnectionService r0;
        android.telecom.Connection r1;
        java.util.Map $r2, $r4;
        java.util.Set $r3, $r5;
        boolean $z0, $z1;
        java.lang.Object $r6, $r8;
        android.telecom.Conference $r7, $r9;
        java.util.Iterator r10, r11;

        r0 := @this: android.telecom.ConnectionService;

        $r2 = r0.<android.telecom.ConnectionService: java.util.Map mIdByConnection>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        r10 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r1 = (android.telecom.Connection) $r8;

        $r9 = virtualinvoke r1.<android.telecom.Connection: android.telecom.Conference getConference()>();

        if $r9 != null goto label2;

        virtualinvoke r1.<android.telecom.Connection: void onDisconnect()>();

     label2:
        goto label1;

     label3:
        $r4 = r0.<android.telecom.ConnectionService: java.util.Map mIdByConference>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>();

        r11 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r6 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (android.telecom.Conference) $r6;

        virtualinvoke $r7.<android.telecom.Conference: void onDisconnect()>();

        goto label4;

     label5:
        return;
    }

    private android.telecom.Conference findConferenceForAction(java.lang.String, java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1, r2;
        java.util.Map $r3, $r6;
        boolean $z0;
        java.lang.Object[] $r4;
        android.telecom.Conference $r5, $r8;
        java.lang.Object $r7;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<android.telecom.ConnectionService: java.util.Map mConferenceById>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r6 = r0.<android.telecom.ConnectionService: java.util.Map mConferenceById>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r8 = (android.telecom.Conference) $r7;

        return $r8;

     label1:
        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = r2;

        $r4[1] = r1;

        staticinvoke <android.telecom.Log: void w(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "%s - Cannot find conference %s", $r4);

        $r5 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Conference getNullConference()>();

        return $r5;
    }

    private android.telecom.Connection findConnectionForAction(java.lang.String, java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1, r2;
        java.lang.Object[] $r3;
        android.telecom.Connection $r4, $r8;
        java.util.Map $r5, $r6;
        boolean $z0;
        java.lang.Object $r7;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        if r1 == null goto label1;

        $r5 = r0.<android.telecom.ConnectionService: java.util.Map mConnectionById>;

        $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r6 = r0.<android.telecom.ConnectionService: java.util.Map mConnectionById>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r8 = (android.telecom.Connection) $r7;

        return $r8;

     label1:
        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = r2;

        $r3[1] = r1;

        staticinvoke <android.telecom.Log: void w(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "%s - Cannot find Connection %s", $r3);

        $r4 = staticinvoke <android.telecom.ConnectionService: android.telecom.Connection getNullConnection()>();

        return $r4;
    }

    private int getNextCallId()
    {
        android.telecom.ConnectionService r0;
        java.lang.Object r1;
        int i0, $i1;
        java.lang.Throwable $r3;

        r0 := @this: android.telecom.ConnectionService;

        r1 = r0.<android.telecom.ConnectionService: java.lang.Object mIdSyncRoot>;

        entermonitor r1;

     label1:
        $i1 = r0.<android.telecom.ConnectionService: int mId>;

        i0 = $i1 + 1;

        r0.<android.telecom.ConnectionService: int mId> = i0;

        exitmonitor r1;

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private android.telecom.Conference getNullConference()
    {
        android.telecom.ConnectionService r0;
        android.telecom.Conference $r1, $r2;
        android.telecom.ConnectionService$7 $r3;

        r0 := @this: android.telecom.ConnectionService;

        $r1 = r0.<android.telecom.ConnectionService: android.telecom.Conference sNullConference>;

        if $r1 != null goto label1;

        $r3 = new android.telecom.ConnectionService$7;

        specialinvoke $r3.<android.telecom.ConnectionService$7: void <init>(android.telecom.ConnectionService,android.telecom.PhoneAccountHandle)>(r0, null);

        r0.<android.telecom.ConnectionService: android.telecom.Conference sNullConference> = $r3;

     label1:
        $r2 = r0.<android.telecom.ConnectionService: android.telecom.Conference sNullConference>;

        return $r2;
    }

    static android.telecom.Connection getNullConnection()
    {
        android.telecom.Connection $r0, r3;
        java.lang.Throwable $r1;
        android.telecom.ConnectionService$6 r2;

        entermonitor class "Landroid/telecom/ConnectionService;";

     label1:
        $r0 = <android.telecom.ConnectionService: android.telecom.Connection sNullConnection>;

        if $r0 != null goto label2;

        r2 = new android.telecom.ConnectionService$6;

        specialinvoke r2.<android.telecom.ConnectionService$6: void <init>()>();

        <android.telecom.ConnectionService: android.telecom.Connection sNullConnection> = r2;

     label2:
        r3 = <android.telecom.ConnectionService: android.telecom.Connection sNullConnection>;

     label3:
        exitmonitor class "Landroid/telecom/ConnectionService;";

        return r3;

     label4:
        $r1 := @caughtexception;

        exitmonitor class "Landroid/telecom/ConnectionService;";

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    private void handleExtrasChanged(java.lang.String, android.os.Bundle)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        android.os.Bundle r2;
        java.lang.Object[] $r3;
        java.util.Map $r4, $r5;
        boolean $z0, $z1;
        android.telecom.Conference $r6;
        android.telecom.Connection $r7;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.Bundle;

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = r1;

        $r3[1] = r2;

        staticinvoke <android.telecom.Log: void i(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "handleExtrasChanged(%s, %s)", $r3);

        $r4 = r0.<android.telecom.ConnectionService: java.util.Map mConnectionById>;

        $z0 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r7 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection findConnectionForAction(java.lang.String,java.lang.String)>(r1, "handleExtrasChanged");

        virtualinvoke $r7.<android.telecom.Connection: void handleExtrasChanged(android.os.Bundle)>(r2);

        goto label2;

     label1:
        $r5 = r0.<android.telecom.ConnectionService: java.util.Map mConferenceById>;

        $z1 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        $r6 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Conference findConferenceForAction(java.lang.String,java.lang.String)>(r1, "handleExtrasChanged");

        virtualinvoke $r6.<android.telecom.Conference: void handleExtrasChanged(android.os.Bundle)>(r2);

     label2:
        return;
    }

    private void handleRttUpgradeResponse(java.lang.String, android.telecom.Connection$RttTextStream)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        android.telecom.Connection$RttTextStream r2;
        java.lang.Object[] $r3, $r7;
        java.lang.Boolean $r4;
        java.util.Map $r5, $r6;
        boolean $z0, $z1, z2;
        android.telecom.Connection $r8;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.telecom.Connection$RttTextStream;

        if r2 != null goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = r1;

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z2);

        $r3[1] = $r4;

        staticinvoke <android.telecom.Log: void i(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "handleRttUpgradeResponse(%s, %s)", $r3);

        $r5 = r0.<android.telecom.ConnectionService: java.util.Map mConnectionById>;

        $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label3;

        $r8 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection findConnectionForAction(java.lang.String,java.lang.String)>(r1, "handleRttUpgradeResponse");

        virtualinvoke $r8.<android.telecom.Connection: void handleRttUpgradeResponse(android.telecom.Connection$RttTextStream)>(r2);

        goto label4;

     label3:
        $r6 = r0.<android.telecom.ConnectionService: java.util.Map mConferenceById>;

        $z1 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z1 == 0 goto label4;

        $r7 = newarray (java.lang.Object)[0];

        staticinvoke <android.telecom.Log: void w(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "handleRttUpgradeResponse called on a conference.", $r7);

     label4:
        return;
    }

    private void handoverFailed(java.lang.String, android.telecom.ConnectionRequest, int)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        android.telecom.ConnectionRequest r2;
        int i0;
        java.lang.Object[] $r3;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.telecom.ConnectionRequest;

        i0 := @parameter2: int;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r1;

        staticinvoke <android.telecom.Log: void i(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "handoverFailed %s", $r3);

        virtualinvoke r0.<android.telecom.ConnectionService: void onHandoverFailed(android.telecom.ConnectionRequest,int)>(r2, i0);

        return;
    }

    private void hold(java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        java.lang.Object[] $r2;
        java.util.Map $r3;
        boolean $z0;
        android.telecom.Conference $r4;
        android.telecom.Connection $r5;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        staticinvoke <android.telecom.Log: void i(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "hold %s", $r2);

        $r3 = r0.<android.telecom.ConnectionService: java.util.Map mConnectionById>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r5 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection findConnectionForAction(java.lang.String,java.lang.String)>(r1, "hold");

        virtualinvoke $r5.<android.telecom.Connection: void onHold()>();

        goto label2;

     label1:
        $r4 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Conference findConferenceForAction(java.lang.String,java.lang.String)>(r1, "hold");

        virtualinvoke $r4.<android.telecom.Conference: void onHold()>();

     label2:
        return;
    }

    private void mergeConference(java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.Object[] $r1;
        java.lang.String r2;
        android.telecom.Conference r3;

        r0 := @this: android.telecom.ConnectionService;

        r2 := @parameter0: java.lang.String;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        staticinvoke <android.telecom.Log: void i(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "mergeConference(%s)", $r1);

        r3 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Conference findConferenceForAction(java.lang.String,java.lang.String)>(r2, "mergeConference");

        if r3 == null goto label1;

        virtualinvoke r3.<android.telecom.Conference: void onMerge()>();

     label1:
        return;
    }

    private void notifyCreateConferenceComplete(java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        java.lang.Object[] $r2, $r4;
        android.telecom.Conference $r3;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        staticinvoke <android.telecom.Log: void i(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "notifyCreateConferenceComplete %s", $r2);

        if r1 != null goto label1;

        $r4 = newarray (java.lang.Object)[0];

        staticinvoke <android.telecom.Log: void w(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "notifyCreateConferenceComplete: callId is null.", $r4);

        return;

     label1:
        $r3 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Conference findConferenceForAction(java.lang.String,java.lang.String)>(r1, "notifyCreateConferenceComplete");

        virtualinvoke r0.<android.telecom.ConnectionService: void onCreateConferenceComplete(android.telecom.Conference)>($r3);

        return;
    }

    private void notifyCreateConnectionComplete(java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        java.lang.Object[] $r2, $r4;
        android.telecom.Connection $r3;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        staticinvoke <android.telecom.Log: void i(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "notifyCreateConnectionComplete %s", $r2);

        if r1 != null goto label1;

        $r4 = newarray (java.lang.Object)[0];

        staticinvoke <android.telecom.Log: void w(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "notifyCreateConnectionComplete: callId is null.", $r4);

        return;

     label1:
        $r3 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection findConnectionForAction(java.lang.String,java.lang.String)>(r1, "notifyCreateConnectionComplete");

        virtualinvoke r0.<android.telecom.ConnectionService: void onCreateConnectionComplete(android.telecom.Connection)>($r3);

        return;
    }

    private void notifyHandoverComplete(java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.Object[] $r1;
        java.lang.String r2;
        android.telecom.Connection r3;

        r0 := @this: android.telecom.ConnectionService;

        r2 := @parameter0: java.lang.String;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        staticinvoke <android.telecom.Log: void i(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "notifyHandoverComplete(%s)", $r1);

        r3 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection findConnectionForAction(java.lang.String,java.lang.String)>(r2, "notifyHandoverComplete");

        if r3 == null goto label1;

        virtualinvoke r3.<android.telecom.Connection: void onHandoverComplete()>();

     label1:
        return;
    }

    private void onAccountsInitialized()
    {
        android.telecom.ConnectionService r0;
        java.util.Iterator r1;
        java.util.List $r2, $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.Runnable $r5;

        r0 := @this: android.telecom.ConnectionService;

        r0.<android.telecom.ConnectionService: boolean mAreAccountsInitialized> = 1;

        $r2 = r0.<android.telecom.ConnectionService: java.util.List mPreInitializationConnectionRequests>;

        r1 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.Runnable) $r4;

        interfaceinvoke $r5.<java.lang.Runnable: void run()>();

        goto label1;

     label2:
        $r3 = r0.<android.telecom.ConnectionService: java.util.List mPreInitializationConnectionRequests>;

        interfaceinvoke $r3.<java.util.List: void clear()>();

        return;
    }

    private void onAdapterAttached()
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        boolean $z0;
        android.telecom.ConnectionService$5 $r2;
        android.telecom.ConnectionServiceAdapter $r3;

        r0 := @this: android.telecom.ConnectionService;

        $z0 = r0.<android.telecom.ConnectionService: boolean mAreAccountsInitialized>;

        if $z0 == 0 goto label1;

        return;

     label1:
        r1 = virtualinvoke r0.<android.telecom.ConnectionService: java.lang.String getOpPackageName()>();

        $r3 = r0.<android.telecom.ConnectionService: android.telecom.ConnectionServiceAdapter mAdapter>;

        $r2 = new android.telecom.ConnectionService$5;

        specialinvoke $r2.<android.telecom.ConnectionService$5: void <init>(android.telecom.ConnectionService)>(r0);

        virtualinvoke $r3.<android.telecom.ConnectionServiceAdapter: void queryRemoteConnectionServices(com.android.internal.telecom.RemoteServiceCallback,java.lang.String)>($r2, r1);

        return;
    }

    private void onCallAudioStateChanged(java.lang.String, android.telecom.CallAudioState)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        android.telecom.CallAudioState r2;
        java.lang.Object[] $r3;
        java.util.Map $r4;
        boolean $z0;
        android.telecom.Conference $r5;
        android.telecom.Connection $r6;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.telecom.CallAudioState;

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = r1;

        $r3[1] = r2;

        staticinvoke <android.telecom.Log: void i(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "onAudioStateChanged %s %s", $r3);

        $r4 = r0.<android.telecom.ConnectionService: java.util.Map mConnectionById>;

        $z0 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r6 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection findConnectionForAction(java.lang.String,java.lang.String)>(r1, "onCallAudioStateChanged");

        virtualinvoke $r6.<android.telecom.Connection: void setCallAudioState(android.telecom.CallAudioState)>(r2);

        goto label2;

     label1:
        $r5 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Conference findConferenceForAction(java.lang.String,java.lang.String)>(r1, "onCallAudioStateChanged");

        virtualinvoke $r5.<android.telecom.Conference: void setCallAudioState(android.telecom.CallAudioState)>(r2);

     label2:
        return;
    }

    private void onPostDialContinue(java.lang.String, boolean)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        boolean z0;
        java.lang.Object[] $r2;
        android.telecom.Connection $r3;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        staticinvoke <android.telecom.Log: void i(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "onPostDialContinue(%s)", $r2);

        $r3 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection findConnectionForAction(java.lang.String,java.lang.String)>(r1, "stopDtmfTone");

        virtualinvoke $r3.<android.telecom.Connection: void onPostDialContinue(boolean)>(z0);

        return;
    }

    private void playDtmfTone(java.lang.String, char)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        char c0;
        java.lang.Object[] $r2;
        java.lang.Character $r3;
        java.util.Map $r4;
        boolean $z0;
        android.telecom.Conference $r5;
        android.telecom.Connection $r6;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        $r2 = newarray (java.lang.Object)[2];

        $r2[0] = r1;

        $r3 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c0);

        $r2[1] = $r3;

        staticinvoke <android.telecom.Log: void i(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "playDtmfTone %s %c", $r2);

        $r4 = r0.<android.telecom.ConnectionService: java.util.Map mConnectionById>;

        $z0 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r6 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection findConnectionForAction(java.lang.String,java.lang.String)>(r1, "playDtmfTone");

        virtualinvoke $r6.<android.telecom.Connection: void onPlayDtmfTone(char)>(c0);

        goto label2;

     label1:
        $r5 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Conference findConferenceForAction(java.lang.String,java.lang.String)>(r1, "playDtmfTone");

        virtualinvoke $r5.<android.telecom.Conference: void onPlayDtmfTone(char)>(c0);

     label2:
        return;
    }

    private void pullExternalCall(java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.Object[] $r1;
        java.lang.String r2;
        android.telecom.Connection r3;

        r0 := @this: android.telecom.ConnectionService;

        r2 := @parameter0: java.lang.String;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        staticinvoke <android.telecom.Log: void i(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "pullExternalCall(%s)", $r1);

        r3 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection findConnectionForAction(java.lang.String,java.lang.String)>(r2, "pullExternalCall");

        if r3 == null goto label1;

        virtualinvoke r3.<android.telecom.Connection: void onPullExternalCall()>();

     label1:
        return;
    }

    private void reject(java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        java.lang.Object[] $r2;
        java.util.Map $r3;
        boolean $z0;
        android.telecom.Conference $r4;
        android.telecom.Connection $r5;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        staticinvoke <android.telecom.Log: void i(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "reject %s", $r2);

        $r3 = r0.<android.telecom.ConnectionService: java.util.Map mConnectionById>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r5 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection findConnectionForAction(java.lang.String,java.lang.String)>(r1, "reject");

        virtualinvoke $r5.<android.telecom.Connection: void onReject()>();

        goto label2;

     label1:
        $r4 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Conference findConferenceForAction(java.lang.String,java.lang.String)>(r1, "reject");

        virtualinvoke $r4.<android.telecom.Conference: void onReject()>();

     label2:
        return;
    }

    private void reject(java.lang.String, int)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        int i0;
        java.lang.Object[] $r2;
        java.lang.Integer $r3;
        android.telecom.Connection $r4;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = newarray (java.lang.Object)[2];

        $r2[0] = r1;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[1] = $r3;

        staticinvoke <android.telecom.Log: void i(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "reject %s with reason %d", $r2);

        $r4 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection findConnectionForAction(java.lang.String,java.lang.String)>(r1, "reject");

        virtualinvoke $r4.<android.telecom.Connection: void onReject(int)>(i0);

        return;
    }

    private void reject(java.lang.String, java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1, r2;
        java.lang.Object[] $r3;
        android.telecom.Connection $r4;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r1;

        staticinvoke <android.telecom.Log: void i(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "reject %s with message", $r3);

        $r4 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection findConnectionForAction(java.lang.String,java.lang.String)>(r1, "reject");

        virtualinvoke $r4.<android.telecom.Connection: void onReject(java.lang.String)>(r2);

        return;
    }

    private void removeConference(android.telecom.Conference)
    {
        android.telecom.ConnectionService r0;
        android.telecom.Conference r1;
        java.lang.String r2;
        java.util.Map $r3, $r6, $r8, $r10;
        boolean $z0;
        android.telecom.Conference$Listener $r4;
        java.lang.Object $r7;
        android.telecom.ConnectionServiceAdapter $r12;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.Conference;

        $r3 = r0.<android.telecom.ConnectionService: java.util.Map mIdByConference>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r4 = r0.<android.telecom.ConnectionService: android.telecom.Conference$Listener mConferenceListener>;

        virtualinvoke r1.<android.telecom.Conference: android.telecom.Conference removeListener(android.telecom.Conference$Listener)>($r4);

        $r6 = r0.<android.telecom.ConnectionService: java.util.Map mIdByConference>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (java.lang.String) $r7;

        $r8 = r0.<android.telecom.ConnectionService: java.util.Map mConferenceById>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

        $r10 = r0.<android.telecom.ConnectionService: java.util.Map mIdByConference>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        $r12 = r0.<android.telecom.ConnectionService: android.telecom.ConnectionServiceAdapter mAdapter>;

        virtualinvoke $r12.<android.telecom.ConnectionServiceAdapter: void removeCall(java.lang.String)>(r2);

        virtualinvoke r0.<android.telecom.ConnectionService: void onConferenceRemoved(android.telecom.Conference)>(r1);

     label1:
        return;
    }

    private void sendCallEvent(java.lang.String, java.lang.String, android.os.Bundle)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1, r4;
        android.os.Bundle r2;
        java.lang.Object[] $r3;
        android.telecom.Connection r5;

        r0 := @this: android.telecom.ConnectionService;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.os.Bundle;

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = r4;

        $r3[1] = r1;

        staticinvoke <android.telecom.Log: void i(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "sendCallEvent(%s, %s)", $r3);

        r5 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection findConnectionForAction(java.lang.String,java.lang.String)>(r4, "sendCallEvent");

        if r5 == null goto label1;

        virtualinvoke r5.<android.telecom.Connection: void onCallEvent(java.lang.String,android.os.Bundle)>(r1, r2);

     label1:
        return;
    }

    private void silence(java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        java.lang.Object[] $r2;
        android.telecom.Connection $r3;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        staticinvoke <android.telecom.Log: void i(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "silence %s", $r2);

        $r3 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection findConnectionForAction(java.lang.String,java.lang.String)>(r1, "silence");

        virtualinvoke $r3.<android.telecom.Connection: void onSilence()>();

        return;
    }

    private void splitFromConference(java.lang.String)
    {
        android.telecom.ConnectionService r0;
        android.telecom.Connection r1, $r3;
        java.lang.Object[] $r2, $r4;
        java.lang.String r5;
        android.telecom.Conference r6;

        r0 := @this: android.telecom.ConnectionService;

        r5 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r5;

        staticinvoke <android.telecom.Log: void i(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "splitFromConference(%s)", $r2);

        r1 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection findConnectionForAction(java.lang.String,java.lang.String)>(r5, "splitFromConference");

        $r3 = staticinvoke <android.telecom.ConnectionService: android.telecom.Connection getNullConnection()>();

        if r1 != $r3 goto label1;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r5;

        staticinvoke <android.telecom.Log: void w(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "Connection missing in conference request %s.", $r4);

        return;

     label1:
        r6 = virtualinvoke r1.<android.telecom.Connection: android.telecom.Conference getConference()>();

        if r6 == null goto label2;

        virtualinvoke r6.<android.telecom.Conference: void onSeparate(android.telecom.Connection)>(r1);

     label2:
        return;
    }

    private void startRtt(java.lang.String, android.telecom.Connection$RttTextStream)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        android.telecom.Connection$RttTextStream r2;
        java.lang.Object[] $r3, $r6;
        java.util.Map $r4, $r5;
        boolean $z0, $z1;
        android.telecom.Connection $r7;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.telecom.Connection$RttTextStream;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r1;

        staticinvoke <android.telecom.Log: void i(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "startRtt(%s)", $r3);

        $r4 = r0.<android.telecom.ConnectionService: java.util.Map mConnectionById>;

        $z0 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r7 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection findConnectionForAction(java.lang.String,java.lang.String)>(r1, "startRtt");

        virtualinvoke $r7.<android.telecom.Connection: void onStartRtt(android.telecom.Connection$RttTextStream)>(r2);

        goto label2;

     label1:
        $r5 = r0.<android.telecom.ConnectionService: java.util.Map mConferenceById>;

        $z1 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        $r6 = newarray (java.lang.Object)[0];

        staticinvoke <android.telecom.Log: void w(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "startRtt called on a conference.", $r6);

     label2:
        return;
    }

    private void stopDtmfTone(java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        java.lang.Object[] $r2;
        java.util.Map $r3;
        boolean $z0;
        android.telecom.Conference $r4;
        android.telecom.Connection $r5;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        staticinvoke <android.telecom.Log: void i(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "stopDtmfTone %s", $r2);

        $r3 = r0.<android.telecom.ConnectionService: java.util.Map mConnectionById>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r5 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection findConnectionForAction(java.lang.String,java.lang.String)>(r1, "stopDtmfTone");

        virtualinvoke $r5.<android.telecom.Connection: void onStopDtmfTone()>();

        goto label2;

     label1:
        $r4 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Conference findConferenceForAction(java.lang.String,java.lang.String)>(r1, "stopDtmfTone");

        virtualinvoke $r4.<android.telecom.Conference: void onStopDtmfTone()>();

     label2:
        return;
    }

    private void stopRtt(java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        java.lang.Object[] $r2, $r5;
        java.util.Map $r3, $r4;
        boolean $z0, $z1;
        android.telecom.Connection $r6;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        staticinvoke <android.telecom.Log: void i(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "stopRtt(%s)", $r2);

        $r3 = r0.<android.telecom.ConnectionService: java.util.Map mConnectionById>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r6 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection findConnectionForAction(java.lang.String,java.lang.String)>(r1, "stopRtt");

        virtualinvoke $r6.<android.telecom.Connection: void onStopRtt()>();

        goto label2;

     label1:
        $r4 = r0.<android.telecom.ConnectionService: java.util.Map mConferenceById>;

        $z1 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        $r5 = newarray (java.lang.Object)[0];

        staticinvoke <android.telecom.Log: void w(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "stopRtt called on a conference.", $r5);

     label2:
        return;
    }

    private void swapConference(java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.Object[] $r1;
        java.lang.String r2;
        android.telecom.Conference r3;

        r0 := @this: android.telecom.ConnectionService;

        r2 := @parameter0: java.lang.String;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        staticinvoke <android.telecom.Log: void i(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "swapConference(%s)", $r1);

        r3 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Conference findConferenceForAction(java.lang.String,java.lang.String)>(r2, "swapConference");

        if r3 == null goto label1;

        virtualinvoke r3.<android.telecom.Conference: void onSwap()>();

     label1:
        return;
    }

    private void transfer(java.lang.String, android.net.Uri, boolean)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        android.net.Uri r2;
        boolean z0;
        java.lang.Object[] $r3;
        android.telecom.Connection $r4;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.net.Uri;

        z0 := @parameter2: boolean;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r1;

        staticinvoke <android.telecom.Log: void i(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "transfer %s", $r3);

        $r4 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection findConnectionForAction(java.lang.String,java.lang.String)>(r1, "transfer");

        virtualinvoke $r4.<android.telecom.Connection: void onTransfer(android.net.Uri,boolean)>(r2, z0);

        return;
    }

    private void unhold(java.lang.String)
    {
        android.telecom.ConnectionService r0;
        java.lang.String r1;
        java.lang.Object[] $r2;
        java.util.Map $r3;
        boolean $z0;
        android.telecom.Conference $r4;
        android.telecom.Connection $r5;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        staticinvoke <android.telecom.Log: void i(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "unhold %s", $r2);

        $r3 = r0.<android.telecom.ConnectionService: java.util.Map mConnectionById>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r5 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Connection findConnectionForAction(java.lang.String,java.lang.String)>(r1, "unhold");

        virtualinvoke $r5.<android.telecom.Connection: void onUnhold()>();

        goto label2;

     label1:
        $r4 = specialinvoke r0.<android.telecom.ConnectionService: android.telecom.Conference findConferenceForAction(java.lang.String,java.lang.String)>(r1, "unhold");

        virtualinvoke $r4.<android.telecom.Conference: void onUnhold()>();

     label2:
        return;
    }

    public final void addConference(android.telecom.Conference)
    {
        android.telecom.ConnectionService r0;
        android.telecom.Conference r1;
        java.lang.String r2, $r21, $r41, r49;
        java.util.Iterator r3, r47;
        java.lang.Object[] $r4;
        java.util.ArrayList $r5;
        java.util.List $r6, $r31;
        boolean $z0, $z1, $z2, $z3, $z4, $z6;
        android.telecom.ParcelableConference$Builder $r7, $r9, $r10, $r13, $r14, $r16, $r18, $r20, $r22, $r24, $r25, $r26, r44;
        android.telecom.PhoneAccountHandle $r8;
        int $i0, $i1, $i2, $i3, $i6, $i7, $i8, $i9;
        android.telecom.Connection$VideoProvider $r11, $r12, $r29;
        long $l4, $l5;
        android.telecom.StatusHints $r15;
        android.os.Bundle $r17;
        android.net.Uri $r19;
        android.telecom.DisconnectCause $r23;
        android.telecom.ConnectionServiceAdapter $r27, $r28, $r30, $r35, $r36;
        java.lang.Object $r32, $r34, $r37, $r40;
        java.util.Map $r33, $r38, $r39;
        android.telecom.Connection r43, r48;
        com.android.internal.telecom.IVideoProvider r45;
        android.telecom.ParcelableConference r46;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.Conference;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r1;

        staticinvoke <android.telecom.Log: void d(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "addConference: conference=%s", $r4);

        r2 = specialinvoke r0.<android.telecom.ConnectionService: java.lang.String addConferenceInternal(android.telecom.Conference)>(r1);

        if r2 == null goto label10;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>(2);

        $r6 = virtualinvoke r1.<android.telecom.Conference: java.util.List getConnections()>();

        r3 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label03;

        $r37 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r43 = (android.telecom.Connection) $r37;

        $r38 = r0.<android.telecom.ConnectionService: java.util.Map mIdByConnection>;

        $z4 = interfaceinvoke $r38.<java.util.Map: boolean containsKey(java.lang.Object)>(r43);

        if $z4 == 0 goto label02;

        $r39 = r0.<android.telecom.ConnectionService: java.util.Map mIdByConnection>;

        $r40 = interfaceinvoke $r39.<java.util.Map: java.lang.Object get(java.lang.Object)>(r43);

        $r41 = (java.lang.String) $r40;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r41);

     label02:
        goto label01;

     label03:
        virtualinvoke r1.<android.telecom.Conference: void setTelecomCallId(java.lang.String)>(r2);

        $r7 = new android.telecom.ParcelableConference$Builder;

        $r8 = virtualinvoke r1.<android.telecom.Conference: android.telecom.PhoneAccountHandle getPhoneAccountHandle()>();

        $i0 = virtualinvoke r1.<android.telecom.Conference: int getState()>();

        specialinvoke $r7.<android.telecom.ParcelableConference$Builder: void <init>(android.telecom.PhoneAccountHandle,int)>($r8, $i0);

        $i1 = virtualinvoke r1.<android.telecom.Conference: int getConnectionCapabilities()>();

        $r9 = virtualinvoke $r7.<android.telecom.ParcelableConference$Builder: android.telecom.ParcelableConference$Builder setConnectionCapabilities(int)>($i1);

        $i2 = virtualinvoke r1.<android.telecom.Conference: int getConnectionProperties()>();

        $r10 = virtualinvoke $r9.<android.telecom.ParcelableConference$Builder: android.telecom.ParcelableConference$Builder setConnectionProperties(int)>($i2);

        r44 = virtualinvoke $r10.<android.telecom.ParcelableConference$Builder: android.telecom.ParcelableConference$Builder setConnectionIds(java.util.List)>($r5);

        $r11 = virtualinvoke r1.<android.telecom.Conference: android.telecom.Connection$VideoProvider getVideoProvider()>();

        if $r11 != null goto label04;

        r45 = null;

        goto label05;

     label04:
        $r12 = virtualinvoke r1.<android.telecom.Conference: android.telecom.Connection$VideoProvider getVideoProvider()>();

        r45 = virtualinvoke $r12.<android.telecom.Connection$VideoProvider: com.android.internal.telecom.IVideoProvider getInterface()>();

     label05:
        $i3 = virtualinvoke r1.<android.telecom.Conference: int getVideoState()>();

        $r13 = virtualinvoke r44.<android.telecom.ParcelableConference$Builder: android.telecom.ParcelableConference$Builder setVideoAttributes(com.android.internal.telecom.IVideoProvider,int)>(r45, $i3);

        $l4 = virtualinvoke r1.<android.telecom.Conference: long getConnectTimeMillis()>();

        $l5 = virtualinvoke r1.<android.telecom.Conference: long getConnectionStartElapsedRealtimeMillis()>();

        $r14 = virtualinvoke $r13.<android.telecom.ParcelableConference$Builder: android.telecom.ParcelableConference$Builder setConnectTimeMillis(long,long)>($l4, $l5);

        $r15 = virtualinvoke r1.<android.telecom.Conference: android.telecom.StatusHints getStatusHints()>();

        $r16 = virtualinvoke $r14.<android.telecom.ParcelableConference$Builder: android.telecom.ParcelableConference$Builder setStatusHints(android.telecom.StatusHints)>($r15);

        $r17 = virtualinvoke r1.<android.telecom.Conference: android.os.Bundle getExtras()>();

        $r18 = virtualinvoke $r16.<android.telecom.ParcelableConference$Builder: android.telecom.ParcelableConference$Builder setExtras(android.os.Bundle)>($r17);

        $r19 = virtualinvoke r1.<android.telecom.Conference: android.net.Uri getAddress()>();

        $i6 = virtualinvoke r1.<android.telecom.Conference: int getAddressPresentation()>();

        $r20 = virtualinvoke $r18.<android.telecom.ParcelableConference$Builder: android.telecom.ParcelableConference$Builder setAddress(android.net.Uri,int)>($r19, $i6);

        $r21 = virtualinvoke r1.<android.telecom.Conference: java.lang.String getCallerDisplayName()>();

        $i7 = virtualinvoke r1.<android.telecom.Conference: int getCallerDisplayNamePresentation()>();

        $r22 = virtualinvoke $r20.<android.telecom.ParcelableConference$Builder: android.telecom.ParcelableConference$Builder setCallerDisplayName(java.lang.String,int)>($r21, $i7);

        $r23 = virtualinvoke r1.<android.telecom.Conference: android.telecom.DisconnectCause getDisconnectCause()>();

        $r24 = virtualinvoke $r22.<android.telecom.ParcelableConference$Builder: android.telecom.ParcelableConference$Builder setDisconnectCause(android.telecom.DisconnectCause)>($r23);

        $z1 = virtualinvoke r1.<android.telecom.Conference: boolean isRingbackRequested()>();

        $r25 = virtualinvoke $r24.<android.telecom.ParcelableConference$Builder: android.telecom.ParcelableConference$Builder setRingbackRequested(boolean)>($z1);

        $i8 = virtualinvoke r1.<android.telecom.Conference: int getCallDirection()>();

        $r26 = virtualinvoke $r25.<android.telecom.ParcelableConference$Builder: android.telecom.ParcelableConference$Builder setCallDirection(int)>($i8);

        r46 = virtualinvoke $r26.<android.telecom.ParcelableConference$Builder: android.telecom.ParcelableConference build()>();

        $r27 = r0.<android.telecom.ConnectionService: android.telecom.ConnectionServiceAdapter mAdapter>;

        virtualinvoke $r27.<android.telecom.ConnectionServiceAdapter: void addConferenceCall(java.lang.String,android.telecom.ParcelableConference)>(r2, r46);

        $r28 = r0.<android.telecom.ConnectionService: android.telecom.ConnectionServiceAdapter mAdapter>;

        $r29 = virtualinvoke r1.<android.telecom.Conference: android.telecom.Connection$VideoProvider getVideoProvider()>();

        virtualinvoke $r28.<android.telecom.ConnectionServiceAdapter: void setVideoProvider(java.lang.String,android.telecom.Connection$VideoProvider)>(r2, $r29);

        $r30 = r0.<android.telecom.ConnectionService: android.telecom.ConnectionServiceAdapter mAdapter>;

        $i9 = virtualinvoke r1.<android.telecom.Conference: int getVideoState()>();

        virtualinvoke $r30.<android.telecom.ConnectionServiceAdapter: void setVideoState(java.lang.String,int)>(r2, $i9);

        $z2 = virtualinvoke r1.<android.telecom.Conference: boolean isMultiparty()>();

        if $z2 != 0 goto label06;

        $r36 = r0.<android.telecom.ConnectionService: android.telecom.ConnectionServiceAdapter mAdapter>;

        $z3 = virtualinvoke r1.<android.telecom.Conference: boolean isMultiparty()>();

        virtualinvoke $r36.<android.telecom.ConnectionServiceAdapter: void setConferenceState(java.lang.String,boolean)>(r2, $z3);

     label06:
        $r31 = virtualinvoke r1.<android.telecom.Conference: java.util.List getConnections()>();

        r47 = interfaceinvoke $r31.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z6 = interfaceinvoke r47.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label09;

        $r32 = interfaceinvoke r47.<java.util.Iterator: java.lang.Object next()>();

        r48 = (android.telecom.Connection) $r32;

        $r33 = r0.<android.telecom.ConnectionService: java.util.Map mIdByConnection>;

        $r34 = interfaceinvoke $r33.<java.util.Map: java.lang.Object get(java.lang.Object)>(r48);

        r49 = (java.lang.String) $r34;

        if r49 == null goto label08;

        $r35 = r0.<android.telecom.ConnectionService: android.telecom.ConnectionServiceAdapter mAdapter>;

        virtualinvoke $r35.<android.telecom.ConnectionServiceAdapter: void setIsConferenced(java.lang.String,java.lang.String)>(r49, r2);

     label08:
        goto label07;

     label09:
        virtualinvoke r0.<android.telecom.ConnectionService: void onConferenceAdded(android.telecom.Conference)>(r1);

     label10:
        return;
    }

    public final void addExistingConnection(android.telecom.PhoneAccountHandle, android.telecom.Connection)
    {
        android.telecom.ConnectionService r0;
        android.telecom.PhoneAccountHandle r1;
        android.telecom.Connection r2;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.PhoneAccountHandle;

        r2 := @parameter1: android.telecom.Connection;

        virtualinvoke r0.<android.telecom.ConnectionService: void addExistingConnection(android.telecom.PhoneAccountHandle,android.telecom.Connection,android.telecom.Conference)>(r1, r2, null);

        return;
    }

    public final void addExistingConnection(android.telecom.PhoneAccountHandle, android.telecom.Connection, android.telecom.Conference)
    {
        android.telecom.ConnectionService r0;
        android.telecom.Connection r1;
        java.lang.String r2, r5, r18;
        int i0, i1, i2, i3, i4, i5, $i6, $i9;
        android.net.Uri r4;
        java.util.ArrayList $r6;
        android.telecom.Connection$VideoProvider $r7, $r8;
        android.telecom.ParcelableConnection $r9;
        boolean $z0, $z1;
        long $l7, $l8;
        android.telecom.StatusHints $r10;
        android.telecom.DisconnectCause $r11;
        android.os.Bundle $r12;
        android.telecom.ConnectionServiceAdapter $r13;
        java.util.Map $r14;
        java.lang.Object $r15;
        android.telecom.PhoneAccountHandle r16;
        android.telecom.Conference r17;
        com.android.internal.telecom.IVideoProvider r19;

        r0 := @this: android.telecom.ConnectionService;

        r16 := @parameter0: android.telecom.PhoneAccountHandle;

        r1 := @parameter1: android.telecom.Connection;

        r17 := @parameter2: android.telecom.Conference;

        r2 = specialinvoke r0.<android.telecom.ConnectionService: java.lang.String addExistingConnectionInternal(android.telecom.PhoneAccountHandle,android.telecom.Connection)>(r16, r1);

        if r2 == null goto label5;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>(0);

        if r17 == null goto label1;

        $r14 = r0.<android.telecom.ConnectionService: java.util.Map mIdByConference>;

        $r15 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>(r17);

        r18 = (java.lang.String) $r15;

        goto label2;

     label1:
        r18 = null;

     label2:
        i0 = virtualinvoke r1.<android.telecom.Connection: int getState()>();

        i1 = virtualinvoke r1.<android.telecom.Connection: int getConnectionCapabilities()>();

        i2 = virtualinvoke r1.<android.telecom.Connection: int getConnectionProperties()>();

        i3 = virtualinvoke r1.<android.telecom.Connection: int getSupportedAudioRoutes()>();

        r4 = virtualinvoke r1.<android.telecom.Connection: android.net.Uri getAddress()>();

        i4 = virtualinvoke r1.<android.telecom.Connection: int getAddressPresentation()>();

        r5 = virtualinvoke r1.<android.telecom.Connection: java.lang.String getCallerDisplayName()>();

        i5 = virtualinvoke r1.<android.telecom.Connection: int getCallerDisplayNamePresentation()>();

        $r7 = virtualinvoke r1.<android.telecom.Connection: android.telecom.Connection$VideoProvider getVideoProvider()>();

        if $r7 != null goto label3;

        r19 = null;

        goto label4;

     label3:
        $r8 = virtualinvoke r1.<android.telecom.Connection: android.telecom.Connection$VideoProvider getVideoProvider()>();

        r19 = virtualinvoke $r8.<android.telecom.Connection$VideoProvider: com.android.internal.telecom.IVideoProvider getInterface()>();

     label4:
        $r9 = new android.telecom.ParcelableConnection;

        $i6 = virtualinvoke r1.<android.telecom.Connection: int getVideoState()>();

        $z0 = virtualinvoke r1.<android.telecom.Connection: boolean isRingbackRequested()>();

        $z1 = virtualinvoke r1.<android.telecom.Connection: boolean getAudioModeIsVoip()>();

        $l7 = virtualinvoke r1.<android.telecom.Connection: long getConnectTimeMillis()>();

        $l8 = virtualinvoke r1.<android.telecom.Connection: long getConnectionStartElapsedRealtimeMillis()>();

        $r10 = virtualinvoke r1.<android.telecom.Connection: android.telecom.StatusHints getStatusHints()>();

        $r11 = virtualinvoke r1.<android.telecom.Connection: android.telecom.DisconnectCause getDisconnectCause()>();

        $r12 = virtualinvoke r1.<android.telecom.Connection: android.os.Bundle getExtras()>();

        $i9 = virtualinvoke r1.<android.telecom.Connection: int getCallDirection()>();

        specialinvoke $r9.<android.telecom.ParcelableConnection: void <init>(android.telecom.PhoneAccountHandle,int,int,int,int,android.net.Uri,int,java.lang.String,int,com.android.internal.telecom.IVideoProvider,int,boolean,boolean,long,long,android.telecom.StatusHints,android.telecom.DisconnectCause,java.util.List,android.os.Bundle,java.lang.String,int,int)>(r16, i0, i1, i2, i3, r4, i4, r5, i5, r19, $i6, $z0, $z1, $l7, $l8, $r10, $r11, $r6, $r12, r18, $i9, 0);

        $r13 = r0.<android.telecom.ConnectionService: android.telecom.ConnectionServiceAdapter mAdapter>;

        virtualinvoke $r13.<android.telecom.ConnectionServiceAdapter: void addExistingConnection(java.lang.String,android.telecom.ParcelableConnection)>(r2, $r9);

     label5:
        return;
    }

    void addRemoteConference(android.telecom.RemoteConference)
    {
        android.telecom.ConnectionService r0;
        android.telecom.RemoteConference r1;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.RemoteConference;

        virtualinvoke r0.<android.telecom.ConnectionService: void onRemoteConferenceAdded(android.telecom.RemoteConference)>(r1);

        return;
    }

    void addRemoteExistingConnection(android.telecom.RemoteConnection)
    {
        android.telecom.ConnectionService r0;
        android.telecom.RemoteConnection r1;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.RemoteConnection;

        virtualinvoke r0.<android.telecom.ConnectionService: void onRemoteExistingConnectionAdded(android.telecom.RemoteConnection)>(r1);

        return;
    }

    public final void conferenceRemoteConnections(android.telecom.RemoteConnection, android.telecom.RemoteConnection)
    {
        android.telecom.ConnectionService r0;
        android.telecom.RemoteConnection r1, r2;
        android.telecom.RemoteConnectionManager $r3;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.RemoteConnection;

        r2 := @parameter1: android.telecom.RemoteConnection;

        $r3 = r0.<android.telecom.ConnectionService: android.telecom.RemoteConnectionManager mRemoteConnectionManager>;

        virtualinvoke $r3.<android.telecom.RemoteConnectionManager: void conferenceRemoteConnections(android.telecom.RemoteConnection,android.telecom.RemoteConnection)>(r1, r2);

        return;
    }

    public final void connectionServiceFocusReleased()
    {
        android.telecom.ConnectionService r0;
        android.telecom.ConnectionServiceAdapter $r1;

        r0 := @this: android.telecom.ConnectionService;

        $r1 = r0.<android.telecom.ConnectionService: android.telecom.ConnectionServiceAdapter mAdapter>;

        virtualinvoke $r1.<android.telecom.ConnectionServiceAdapter: void onConnectionServiceFocusReleased()>();

        return;
    }

    public boolean containsConference(android.telecom.Conference)
    {
        android.telecom.ConnectionService r0;
        android.telecom.Conference r1;
        java.util.Map $r2;
        boolean $z0;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.Conference;

        $r2 = r0.<android.telecom.ConnectionService: java.util.Map mIdByConference>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public final android.telecom.RemoteConnection createRemoteIncomingConnection(android.telecom.PhoneAccountHandle, android.telecom.ConnectionRequest)
    {
        android.telecom.ConnectionService r0;
        android.telecom.PhoneAccountHandle r1;
        android.telecom.ConnectionRequest r2;
        android.telecom.RemoteConnectionManager $r3;
        android.telecom.RemoteConnection $r4;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.PhoneAccountHandle;

        r2 := @parameter1: android.telecom.ConnectionRequest;

        $r3 = r0.<android.telecom.ConnectionService: android.telecom.RemoteConnectionManager mRemoteConnectionManager>;

        $r4 = virtualinvoke $r3.<android.telecom.RemoteConnectionManager: android.telecom.RemoteConnection createRemoteConnection(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest,boolean)>(r1, r2, 1);

        return $r4;
    }

    public final android.telecom.RemoteConnection createRemoteOutgoingConnection(android.telecom.PhoneAccountHandle, android.telecom.ConnectionRequest)
    {
        android.telecom.ConnectionService r0;
        android.telecom.PhoneAccountHandle r1;
        android.telecom.ConnectionRequest r2;
        android.telecom.RemoteConnectionManager $r3;
        android.telecom.RemoteConnection $r4;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.PhoneAccountHandle;

        r2 := @parameter1: android.telecom.ConnectionRequest;

        $r3 = r0.<android.telecom.ConnectionService: android.telecom.RemoteConnectionManager mRemoteConnectionManager>;

        $r4 = virtualinvoke $r3.<android.telecom.RemoteConnectionManager: android.telecom.RemoteConnection createRemoteConnection(android.telecom.PhoneAccountHandle,android.telecom.ConnectionRequest,boolean)>(r1, r2, 0);

        return $r4;
    }

    public final java.util.Collection getAllConferences()
    {
        android.telecom.ConnectionService r0;
        java.util.Map $r1;
        java.util.Collection $r2;

        r0 := @this: android.telecom.ConnectionService;

        $r1 = r0.<android.telecom.ConnectionService: java.util.Map mConferenceById>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        return $r2;
    }

    public final java.util.Collection getAllConnections()
    {
        android.telecom.ConnectionService r0;
        java.util.Map $r1;
        java.util.Collection $r2;

        r0 := @this: android.telecom.ConnectionService;

        $r1 = r0.<android.telecom.ConnectionService: java.util.Map mConnectionById>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        return $r2;
    }

    public android.os.Handler getHandler()
    {
        android.telecom.ConnectionService r0;
        android.os.Handler $r1;

        r0 := @this: android.telecom.ConnectionService;

        $r1 = r0.<android.telecom.ConnectionService: android.os.Handler mHandler>;

        return $r1;
    }

    public final android.os.IBinder onBind(android.content.Intent)
    {
        android.telecom.ConnectionService r0;
        android.content.Intent r1;
        android.os.IBinder $r2;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.content.Intent;

        $r2 = r0.<android.telecom.ConnectionService: android.os.IBinder mBinder>;

        return $r2;
    }

    public void onConference(android.telecom.Connection, android.telecom.Connection)
    {
        android.telecom.ConnectionService r0;
        android.telecom.Connection r1, r2;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.Connection;

        r2 := @parameter1: android.telecom.Connection;

        return;
    }

    public void onConferenceAdded(android.telecom.Conference)
    {
        android.telecom.ConnectionService r0;
        android.telecom.Conference r1;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.Conference;

        return;
    }

    public void onConferenceRemoved(android.telecom.Conference)
    {
        android.telecom.ConnectionService r0;
        android.telecom.Conference r1;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.Conference;

        return;
    }

    public void onConnectionAdded(android.telecom.Connection)
    {
        android.telecom.ConnectionService r0;
        android.telecom.Connection r1;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.Connection;

        return;
    }

    public void onConnectionRemoved(android.telecom.Connection)
    {
        android.telecom.ConnectionService r0;
        android.telecom.Connection r1;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.Connection;

        return;
    }

    public void onConnectionServiceFocusGained()
    {
        android.telecom.ConnectionService r0;

        r0 := @this: android.telecom.ConnectionService;

        return;
    }

    public void onConnectionServiceFocusLost()
    {
        android.telecom.ConnectionService r0;

        r0 := @this: android.telecom.ConnectionService;

        return;
    }

    public void onCreateConferenceComplete(android.telecom.Conference)
    {
        android.telecom.ConnectionService r0;
        android.telecom.Conference r1;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.Conference;

        return;
    }

    public void onCreateConnectionComplete(android.telecom.Connection)
    {
        android.telecom.ConnectionService r0;
        android.telecom.Connection r1;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.Connection;

        return;
    }

    public android.telecom.Conference onCreateIncomingConference(android.telecom.PhoneAccountHandle, android.telecom.ConnectionRequest)
    {
        android.telecom.ConnectionService r0;
        android.telecom.PhoneAccountHandle r1;
        android.telecom.ConnectionRequest r2;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.PhoneAccountHandle;

        r2 := @parameter1: android.telecom.ConnectionRequest;

        return null;
    }

    public void onCreateIncomingConferenceFailed(android.telecom.PhoneAccountHandle, android.telecom.ConnectionRequest)
    {
        android.telecom.ConnectionService r0;
        android.telecom.PhoneAccountHandle r1;
        android.telecom.ConnectionRequest r2;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.PhoneAccountHandle;

        r2 := @parameter1: android.telecom.ConnectionRequest;

        return;
    }

    public android.telecom.Connection onCreateIncomingConnection(android.telecom.PhoneAccountHandle, android.telecom.ConnectionRequest)
    {
        android.telecom.ConnectionService r0;
        android.telecom.PhoneAccountHandle r1;
        android.telecom.ConnectionRequest r2;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.PhoneAccountHandle;

        r2 := @parameter1: android.telecom.ConnectionRequest;

        return null;
    }

    public void onCreateIncomingConnectionFailed(android.telecom.PhoneAccountHandle, android.telecom.ConnectionRequest)
    {
        android.telecom.ConnectionService r0;
        android.telecom.PhoneAccountHandle r1;
        android.telecom.ConnectionRequest r2;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.PhoneAccountHandle;

        r2 := @parameter1: android.telecom.ConnectionRequest;

        return;
    }

    public android.telecom.Connection onCreateIncomingHandoverConnection(android.telecom.PhoneAccountHandle, android.telecom.ConnectionRequest)
    {
        android.telecom.ConnectionService r0;
        android.telecom.PhoneAccountHandle r1;
        android.telecom.ConnectionRequest r2;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.PhoneAccountHandle;

        r2 := @parameter1: android.telecom.ConnectionRequest;

        return null;
    }

    public android.telecom.Conference onCreateOutgoingConference(android.telecom.PhoneAccountHandle, android.telecom.ConnectionRequest)
    {
        android.telecom.ConnectionService r0;
        android.telecom.PhoneAccountHandle r1;
        android.telecom.ConnectionRequest r2;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.PhoneAccountHandle;

        r2 := @parameter1: android.telecom.ConnectionRequest;

        return null;
    }

    public void onCreateOutgoingConferenceFailed(android.telecom.PhoneAccountHandle, android.telecom.ConnectionRequest)
    {
        android.telecom.ConnectionService r0;
        android.telecom.PhoneAccountHandle r1;
        android.telecom.ConnectionRequest r2;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.PhoneAccountHandle;

        r2 := @parameter1: android.telecom.ConnectionRequest;

        return;
    }

    public android.telecom.Connection onCreateOutgoingConnection(android.telecom.PhoneAccountHandle, android.telecom.ConnectionRequest)
    {
        android.telecom.ConnectionService r0;
        android.telecom.PhoneAccountHandle r1;
        android.telecom.ConnectionRequest r2;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.PhoneAccountHandle;

        r2 := @parameter1: android.telecom.ConnectionRequest;

        return null;
    }

    public void onCreateOutgoingConnectionFailed(android.telecom.PhoneAccountHandle, android.telecom.ConnectionRequest)
    {
        android.telecom.ConnectionService r0;
        android.telecom.PhoneAccountHandle r1;
        android.telecom.ConnectionRequest r2;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.PhoneAccountHandle;

        r2 := @parameter1: android.telecom.ConnectionRequest;

        return;
    }

    public android.telecom.Connection onCreateOutgoingHandoverConnection(android.telecom.PhoneAccountHandle, android.telecom.ConnectionRequest)
    {
        android.telecom.ConnectionService r0;
        android.telecom.PhoneAccountHandle r1;
        android.telecom.ConnectionRequest r2;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.PhoneAccountHandle;

        r2 := @parameter1: android.telecom.ConnectionRequest;

        return null;
    }

    public android.telecom.Connection onCreateUnknownConnection(android.telecom.PhoneAccountHandle, android.telecom.ConnectionRequest)
    {
        android.telecom.ConnectionService r0;
        android.telecom.PhoneAccountHandle r1;
        android.telecom.ConnectionRequest r2;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.PhoneAccountHandle;

        r2 := @parameter1: android.telecom.ConnectionRequest;

        return null;
    }

    public void onHandoverFailed(android.telecom.ConnectionRequest, int)
    {
        android.telecom.ConnectionService r0;
        android.telecom.ConnectionRequest r1;
        int i0;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.ConnectionRequest;

        i0 := @parameter1: int;

        return;
    }

    public void onRemoteConferenceAdded(android.telecom.RemoteConference)
    {
        android.telecom.ConnectionService r0;
        android.telecom.RemoteConference r1;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.RemoteConference;

        return;
    }

    public void onRemoteExistingConnectionAdded(android.telecom.RemoteConnection)
    {
        android.telecom.ConnectionService r0;
        android.telecom.RemoteConnection r1;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.RemoteConnection;

        return;
    }

    public boolean onUnbind(android.content.Intent)
    {
        android.telecom.ConnectionService r0;
        android.content.Intent r1;
        boolean $z0;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.content.Intent;

        specialinvoke r0.<android.telecom.ConnectionService: void endAllConnections()>();

        $z0 = specialinvoke r0.<android.app.Service: boolean onUnbind(android.content.Intent)>(r1);

        return $z0;
    }

    protected void removeConnection(android.telecom.Connection)
    {
        android.telecom.ConnectionService r0;
        android.telecom.Connection r1;
        java.lang.String r2;
        android.telecom.Connection$Listener $r3;
        java.util.Map $r5, $r7, $r9;
        java.lang.Object $r6;
        android.telecom.ConnectionServiceAdapter $r11;

        r0 := @this: android.telecom.ConnectionService;

        r1 := @parameter0: android.telecom.Connection;

        virtualinvoke r1.<android.telecom.Connection: void unsetConnectionService(android.telecom.ConnectionService)>(r0);

        $r3 = r0.<android.telecom.ConnectionService: android.telecom.Connection$Listener mConnectionListener>;

        virtualinvoke r1.<android.telecom.Connection: android.telecom.Connection removeConnectionListener(android.telecom.Connection$Listener)>($r3);

        $r5 = r0.<android.telecom.ConnectionService: java.util.Map mIdByConnection>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (java.lang.String) $r6;

        if r2 == null goto label1;

        $r7 = r0.<android.telecom.ConnectionService: java.util.Map mConnectionById>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

        $r9 = r0.<android.telecom.ConnectionService: java.util.Map mIdByConnection>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        $r11 = r0.<android.telecom.ConnectionService: android.telecom.ConnectionServiceAdapter mAdapter>;

        virtualinvoke $r11.<android.telecom.ConnectionServiceAdapter: void removeCall(java.lang.String)>(r2);

        virtualinvoke r0.<android.telecom.ConnectionService: void onConnectionRemoved(android.telecom.Connection)>(r1);

     label1:
        return;
    }

    public void triggerConferenceRecalculate()
    {
        android.telecom.ConnectionService r0;

        r0 := @this: android.telecom.ConnectionService;

        return;
    }
}
