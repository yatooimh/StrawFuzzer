public class android.telecom.Logging.EventManager extends java.lang.Object
{
    public static final java.time.format.DateTimeFormatter DATE_TIME_FORMATTER;
    public static final int DEFAULT_EVENTS_TO_CACHE;
    public static final java.lang.String TAG;
    private static final java.lang.Object mSync;
    private final java.util.Map mCallEventRecordMap;
    private java.util.List mEventListeners;
    private java.util.concurrent.LinkedBlockingQueue mEventRecords;
    private android.telecom.Logging.SessionManager$ISessionIdQueryHandler mSessionIdHandler;
    private final java.util.Map requestResponsePairs;

    static void <clinit>()
    {
        java.time.format.DateTimeFormatter $r0;
        java.lang.Object $r1;

        <android.telecom.Logging.EventManager: java.lang.String TAG> = "Logging.Events";

        <android.telecom.Logging.EventManager: int DEFAULT_EVENTS_TO_CACHE> = 10;

        $r0 = staticinvoke <java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofPattern(java.lang.String)>("HH:mm:ss.SSS");

        <android.telecom.Logging.EventManager: java.time.format.DateTimeFormatter DATE_TIME_FORMATTER> = $r0;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        <android.telecom.Logging.EventManager: java.lang.Object mSync> = $r1;

        return;
    }

    public void <init>(android.telecom.Logging.SessionManager$ISessionIdQueryHandler)
    {
        android.telecom.Logging.EventManager r0;
        android.telecom.Logging.SessionManager$ISessionIdQueryHandler r1;
        java.util.HashMap $r2, $r5;
        java.util.concurrent.LinkedBlockingQueue $r3;
        java.util.ArrayList $r4;

        r0 := @this: android.telecom.Logging.EventManager;

        r1 := @parameter0: android.telecom.Logging.SessionManager$ISessionIdQueryHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<android.telecom.Logging.EventManager: java.util.Map mCallEventRecordMap> = $r2;

        $r3 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r3.<java.util.concurrent.LinkedBlockingQueue: void <init>(int)>(10);

        r0.<android.telecom.Logging.EventManager: java.util.concurrent.LinkedBlockingQueue mEventRecords> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<android.telecom.Logging.EventManager: java.util.List mEventListeners> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<android.telecom.Logging.EventManager: java.util.Map requestResponsePairs> = $r5;

        r0.<android.telecom.Logging.EventManager: android.telecom.Logging.SessionManager$ISessionIdQueryHandler mSessionIdHandler> = r1;

        return;
    }

    static java.util.Map access$000(android.telecom.Logging.EventManager)
    {
        android.telecom.Logging.EventManager r0;
        java.util.Map $r1;

        r0 := @parameter0: android.telecom.Logging.EventManager;

        $r1 = r0.<android.telecom.Logging.EventManager: java.util.Map requestResponsePairs>;

        return $r1;
    }

    static java.util.Map access$100(android.telecom.Logging.EventManager)
    {
        android.telecom.Logging.EventManager r0;
        java.util.Map $r1;

        r0 := @parameter0: android.telecom.Logging.EventManager;

        $r1 = r0.<android.telecom.Logging.EventManager: java.util.Map mCallEventRecordMap>;

        return $r1;
    }

    private void addEventRecord(android.telecom.Logging.EventManager$EventRecord)
    {
        android.telecom.Logging.EventManager r0;
        java.util.concurrent.LinkedBlockingQueue $r1, $r5, $r14;
        int $i0;
        java.lang.Object $r3, $r6, r16;
        android.telecom.Logging.EventManager$EventListener $r4;
        java.util.Map $r7, $r15;
        android.telecom.Logging.EventManager$Loggable $r8, r12;
        java.lang.Throwable $r10;
        android.telecom.Logging.EventManager$EventRecord r11, r13;
        java.util.List $r17;
        java.util.Iterator r18;
        boolean $z1;

        r0 := @this: android.telecom.Logging.EventManager;

        r11 := @parameter0: android.telecom.Logging.EventManager$EventRecord;

        r12 = virtualinvoke r11.<android.telecom.Logging.EventManager$EventRecord: android.telecom.Logging.EventManager$Loggable getRecordEntry()>();

        $r1 = r0.<android.telecom.Logging.EventManager: java.util.concurrent.LinkedBlockingQueue mEventRecords>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.LinkedBlockingQueue: int remainingCapacity()>();

        if $i0 != 0 goto label1;

        $r5 = r0.<android.telecom.Logging.EventManager: java.util.concurrent.LinkedBlockingQueue mEventRecords>;

        $r6 = virtualinvoke $r5.<java.util.concurrent.LinkedBlockingQueue: java.lang.Object poll()>();

        r13 = (android.telecom.Logging.EventManager$EventRecord) $r6;

        if r13 == null goto label1;

        $r7 = r0.<android.telecom.Logging.EventManager: java.util.Map mCallEventRecordMap>;

        $r8 = virtualinvoke r13.<android.telecom.Logging.EventManager$EventRecord: android.telecom.Logging.EventManager$Loggable getRecordEntry()>();

        interfaceinvoke $r7.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r8);

     label1:
        $r14 = r0.<android.telecom.Logging.EventManager: java.util.concurrent.LinkedBlockingQueue mEventRecords>;

        virtualinvoke $r14.<java.util.concurrent.LinkedBlockingQueue: boolean add(java.lang.Object)>(r11);

        $r15 = r0.<android.telecom.Logging.EventManager: java.util.Map mCallEventRecordMap>;

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, r11);

        r16 = <android.telecom.Logging.EventManager: java.lang.Object mSync>;

        entermonitor r16;

     label2:
        $r17 = r0.<android.telecom.Logging.EventManager: java.util.List mEventListeners>;

        r18 = interfaceinvoke $r17.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r3 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (android.telecom.Logging.EventManager$EventListener) $r3;

        interfaceinvoke $r4.<android.telecom.Logging.EventManager$EventListener: void eventRecordAdded(android.telecom.Logging.EventManager$EventRecord)>(r11);

     label4:
        goto label3;

     label5:
        exitmonitor r16;

     label6:
        return;

     label7:
        $r10 := @caughtexception;

     label8:
        exitmonitor r16;

     label9:
        throw $r10;

        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    static long lambda$dumpEventsTimeline$0(android.util.Pair)
    {
        android.util.Pair r0;
        java.lang.Object $r1;
        android.telecom.Logging.EventManager$Event $r2;
        long $l0;

        r0 := @parameter0: android.util.Pair;

        $r1 = r0.<android.util.Pair: java.lang.Object second>;

        $r2 = (android.telecom.Logging.EventManager$Event) $r1;

        $l0 = $r2.<android.telecom.Logging.EventManager$Event: long time>;

        return $l0;
    }

    public void addRequestResponsePair(android.telecom.Logging.EventManager$TimedEventPair)
    {
        android.telecom.Logging.EventManager r0;
        android.telecom.Logging.EventManager$TimedEventPair r1;
        java.lang.String $r3, $r6, $r9;
        java.util.Map $r4, $r7, $r10;
        boolean $z0;
        java.util.ArrayList $r5;
        java.lang.Object $r11;
        java.util.List $r12;

        r0 := @this: android.telecom.Logging.EventManager;

        r1 := @parameter0: android.telecom.Logging.EventManager$TimedEventPair;

        $r4 = r0.<android.telecom.Logging.EventManager: java.util.Map requestResponsePairs>;

        $r3 = r1.<android.telecom.Logging.EventManager$TimedEventPair: java.lang.String mRequest>;

        $z0 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $r10 = r0.<android.telecom.Logging.EventManager: java.util.Map requestResponsePairs>;

        $r9 = r1.<android.telecom.Logging.EventManager$TimedEventPair: java.lang.String mRequest>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9);

        $r12 = (java.util.List) $r11;

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>(r1);

        goto label2;

     label1:
        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        $r7 = r0.<android.telecom.Logging.EventManager: java.util.Map requestResponsePairs>;

        $r6 = r1.<android.telecom.Logging.EventManager$TimedEventPair: java.lang.String mRequest>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r5);

     label2:
        return;
    }

    public void changeEventCacheSize(int)
    {
        android.telecom.Logging.EventManager r0;
        int i0;
        java.util.concurrent.LinkedBlockingQueue r1, $r2;
        java.util.Map $r3;
        android.telecom.Logging._$$Lambda$EventManager$uddp6XAJ90VBwdTiuzBdSYelntQ $r4;

        r0 := @this: android.telecom.Logging.EventManager;

        i0 := @parameter0: int;

        r1 = r0.<android.telecom.Logging.EventManager: java.util.concurrent.LinkedBlockingQueue mEventRecords>;

        $r2 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r2.<java.util.concurrent.LinkedBlockingQueue: void <init>(int)>(i0);

        r0.<android.telecom.Logging.EventManager: java.util.concurrent.LinkedBlockingQueue mEventRecords> = $r2;

        $r3 = r0.<android.telecom.Logging.EventManager: java.util.Map mCallEventRecordMap>;

        interfaceinvoke $r3.<java.util.Map: void clear()>();

        $r4 = new android.telecom.Logging._$$Lambda$EventManager$uddp6XAJ90VBwdTiuzBdSYelntQ;

        specialinvoke $r4.<android.telecom.Logging._$$Lambda$EventManager$uddp6XAJ90VBwdTiuzBdSYelntQ: void <init>(android.telecom.Logging.EventManager)>(r0);

        virtualinvoke r1.<java.util.concurrent.LinkedBlockingQueue: void forEach(java.util.function.Consumer)>($r4);

        return;
    }

    public void dumpEvents(com.android.internal.util.IndentingPrintWriter)
    {
        android.telecom.Logging.EventManager r0;
        com.android.internal.util.IndentingPrintWriter r1;
        java.util.Iterator r2;
        java.util.concurrent.LinkedBlockingQueue $r4;
        boolean $z0;
        java.lang.Object $r6;
        android.telecom.Logging.EventManager$EventRecord $r7;

        r0 := @this: android.telecom.Logging.EventManager;

        r1 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Historical Events:");

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r4 = r0.<android.telecom.Logging.EventManager: java.util.concurrent.LinkedBlockingQueue mEventRecords>;

        r2 = virtualinvoke $r4.<java.util.concurrent.LinkedBlockingQueue: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (android.telecom.Logging.EventManager$EventRecord) $r6;

        virtualinvoke $r7.<android.telecom.Logging.EventManager$EventRecord: void dump(com.android.internal.util.IndentingPrintWriter)>(r1);

        goto label1;

     label2:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        return;
    }

    public void dumpEventsTimeline(com.android.internal.util.IndentingPrintWriter)
    {
        android.telecom.Logging.EventManager r0;
        com.android.internal.util.IndentingPrintWriter r1;
        java.util.Iterator r3, r29, r31;
        android.telecom.Logging.EventManager$Event r4, $r13, $r19, $r22;
        java.util.concurrent.LinkedBlockingQueue $r6;
        boolean $z0, $z1, $z2;
        android.telecom.Logging.'-$$Lambda$EventManager$weOtitr8e1cZeiy1aDSqzNoKaY8' $r7;
        java.util.Comparator $r8;
        java.lang.Object $r11, $r12, $r15, $r18, $r21, $r23, $r24, $r26;
        java.lang.String $r14, $r17, $r20;
        android.telecom.Logging.EventManager$Loggable $r16, $r28;
        java.util.List $r25;
        android.telecom.Logging.EventManager$EventRecord r30;
        android.util.Pair r32, r34;
        java.util.ArrayList r33;
        java.util.function.ToLongFunction r35;

        r0 := @this: android.telecom.Logging.EventManager;

        r1 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Historical Events (sorted by time):");

        r33 = new java.util.ArrayList;

        specialinvoke r33.<java.util.ArrayList: void <init>()>();

        $r6 = r0.<android.telecom.Logging.EventManager: java.util.concurrent.LinkedBlockingQueue mEventRecords>;

        r29 = virtualinvoke $r6.<java.util.concurrent.LinkedBlockingQueue: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r24 = interfaceinvoke r29.<java.util.Iterator: java.lang.Object next()>();

        r30 = (android.telecom.Logging.EventManager$EventRecord) $r24;

        $r25 = virtualinvoke r30.<android.telecom.Logging.EventManager$EventRecord: java.util.List getEvents()>();

        r3 = interfaceinvoke $r25.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r26 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.telecom.Logging.EventManager$Event) $r26;

        r34 = new android.util.Pair;

        $r28 = virtualinvoke r30.<android.telecom.Logging.EventManager$EventRecord: android.telecom.Logging.EventManager$Loggable getRecordEntry()>();

        specialinvoke r34.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r28, r4);

        interfaceinvoke r33.<java.util.List: boolean add(java.lang.Object)>(r34);

        goto label2;

     label3:
        goto label1;

     label4:
        $r7 = <android.telecom.Logging._$$Lambda$EventManager$weOtitr8e1cZeiy1aDSqzNoKaY8: android.telecom.Logging.'-$$Lambda$EventManager$weOtitr8e1cZeiy1aDSqzNoKaY8' INSTANCE>;

        r35 = (java.util.function.ToLongFunction) $r7;

        $r8 = staticinvoke <java.util.Comparator: java.util.Comparator comparingLong(java.util.function.ToLongFunction)>(r35);

        interfaceinvoke r33.<java.util.List: void sort(java.util.Comparator)>($r8);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        r31 = interfaceinvoke r33.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke r31.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r11 = interfaceinvoke r31.<java.util.Iterator: java.lang.Object next()>();

        r32 = (android.util.Pair) $r11;

        $r12 = r32.<android.util.Pair: java.lang.Object second>;

        $r13 = (android.telecom.Logging.EventManager$Event) $r12;

        $r14 = $r13.<android.telecom.Logging.EventManager$Event: java.lang.String timestampString>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>($r14);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(",");

        $r15 = r32.<android.util.Pair: java.lang.Object first>;

        $r16 = (android.telecom.Logging.EventManager$Loggable) $r15;

        $r17 = interfaceinvoke $r16.<android.telecom.Logging.EventManager$Loggable: java.lang.String getId()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>($r17);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(",");

        $r18 = r32.<android.util.Pair: java.lang.Object second>;

        $r19 = (android.telecom.Logging.EventManager$Event) $r18;

        $r20 = $r19.<android.telecom.Logging.EventManager$Event: java.lang.String eventId>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>($r20);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(",");

        $r21 = r32.<android.util.Pair: java.lang.Object second>;

        $r22 = (android.telecom.Logging.EventManager$Event) $r21;

        $r23 = $r22.<android.telecom.Logging.EventManager$Event: java.lang.Object data>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.Object)>($r23);

        goto label5;

     label6:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        return;
    }

    public void event(android.telecom.Logging.EventManager$Loggable, java.lang.String, java.lang.Object)
    {
        android.telecom.Logging.EventManager r0;
        java.lang.String r1, r3;
        java.lang.Object r2, $r9;
        java.util.concurrent.LinkedBlockingQueue r4;
        android.telecom.Logging.EventManager$EventRecord r5, $r10;
        android.telecom.Logging.SessionManager$ISessionIdQueryHandler $r6;
        java.util.Map $r7, $r8;
        boolean $z0;
        java.lang.Object[] $r11;
        java.lang.Throwable $r12;
        android.telecom.Logging.EventManager$Loggable r13;

        r0 := @this: android.telecom.Logging.EventManager;

        r13 := @parameter0: android.telecom.Logging.EventManager$Loggable;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object;

        $r6 = r0.<android.telecom.Logging.EventManager: android.telecom.Logging.SessionManager$ISessionIdQueryHandler mSessionIdHandler>;

        r3 = interfaceinvoke $r6.<android.telecom.Logging.SessionManager$ISessionIdQueryHandler: java.lang.String getSessionId()>();

        if r13 != null goto label1;

        $r11 = newarray (java.lang.Object)[2];

        $r11[0] = r1;

        $r11[1] = r2;

        staticinvoke <android.telecom.Log: void i(java.lang.String,java.lang.String,java.lang.Object[])>("Logging.Events", "Non-call EVENT: %s, %s", $r11);

        return;

     label1:
        r4 = r0.<android.telecom.Logging.EventManager: java.util.concurrent.LinkedBlockingQueue mEventRecords>;

        entermonitor r4;

     label2:
        $r7 = r0.<android.telecom.Logging.EventManager: java.util.Map mCallEventRecordMap>;

        $z0 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>(r13);

        if $z0 != 0 goto label3;

        r5 = new android.telecom.Logging.EventManager$EventRecord;

        specialinvoke r5.<android.telecom.Logging.EventManager$EventRecord: void <init>(android.telecom.Logging.EventManager,android.telecom.Logging.EventManager$Loggable)>(r0, r13);

        specialinvoke r0.<android.telecom.Logging.EventManager: void addEventRecord(android.telecom.Logging.EventManager$EventRecord)>(r5);

     label3:
        $r8 = r0.<android.telecom.Logging.EventManager: java.util.Map mCallEventRecordMap>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r13);

        $r10 = (android.telecom.Logging.EventManager$EventRecord) $r9;

        virtualinvoke $r10.<android.telecom.Logging.EventManager$EventRecord: void addEvent(java.lang.String,java.lang.String,java.lang.Object)>(r1, r3, r2);

        exitmonitor r4;

     label4:
        return;

     label5:
        $r12 := @caughtexception;

     label6:
        exitmonitor r4;

     label7:
        throw $r12;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public transient void event(android.telecom.Logging.EventManager$Loggable, java.lang.String, java.lang.String, java.lang.Object[])
    {
        android.telecom.Logging.EventManager r0;
        android.telecom.Logging.EventManager$Loggable r1;
        java.lang.String r2, r10, r12;
        int $i0, $i1;
        java.util.Locale $r3;
        java.lang.Throwable $r4;
        java.lang.Object[] $r5, r11;
        java.lang.Integer $r6;
        java.lang.StringBuilder $r7;

        r0 := @this: android.telecom.Logging.EventManager;

        r1 := @parameter0: android.telecom.Logging.EventManager$Loggable;

        r2 := @parameter1: java.lang.String;

        r10 := @parameter2: java.lang.String;

        r11 := @parameter3: java.lang.Object[];

        if r11 == null goto label6;

     label1:
        $i0 = lengthof r11;

        if $i0 != 0 goto label3;

     label2:
        goto label6;

     label3:
        $r3 = <java.util.Locale: java.util.Locale US>;

        r12 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r3, r10, r11);

     label4:
        r10 = r12;

        goto label6;

     label5:
        $r4 := @caughtexception;

        $r5 = newarray (java.lang.Object)[2];

        $r5[0] = r10;

        $i1 = lengthof r11;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r5[1] = $r6;

        staticinvoke <android.telecom.Log: void e(java.lang.Object,java.lang.Throwable,java.lang.String,java.lang.Object[])>(r0, $r4, "IllegalFormatException: formatString=\'%s\' numArgs=%d", $r5);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (An error occurred while formatting the message.)");

        r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label6;

     label6:
        virtualinvoke r0.<android.telecom.Logging.EventManager: void event(android.telecom.Logging.EventManager$Loggable,java.lang.String,java.lang.Object)>(r1, r2, r10);

        return;

        catch java.util.IllegalFormatException from label1 to label2 with label5;
        catch java.util.IllegalFormatException from label3 to label4 with label5;
    }

    public java.util.Map getCallEventRecordMap()
    {
        android.telecom.Logging.EventManager r0;
        java.util.Map $r1;

        r0 := @this: android.telecom.Logging.EventManager;

        $r1 = r0.<android.telecom.Logging.EventManager: java.util.Map mCallEventRecordMap>;

        return $r1;
    }

    public java.util.concurrent.LinkedBlockingQueue getEventRecords()
    {
        android.telecom.Logging.EventManager r0;
        java.util.concurrent.LinkedBlockingQueue $r1;

        r0 := @this: android.telecom.Logging.EventManager;

        $r1 = r0.<android.telecom.Logging.EventManager: java.util.concurrent.LinkedBlockingQueue mEventRecords>;

        return $r1;
    }

    public void lambda$changeEventCacheSize$1$EventManager(android.telecom.Logging.EventManager$EventRecord)
    {
        android.telecom.Logging.EventManager r0;
        android.telecom.Logging.EventManager$EventRecord r1, r3;
        android.telecom.Logging.EventManager$Loggable r2, $r9;
        java.util.concurrent.LinkedBlockingQueue $r4, $r6, $r11;
        int $i0;
        java.lang.Object $r7;
        java.util.Map $r8, $r12;

        r0 := @this: android.telecom.Logging.EventManager;

        r1 := @parameter0: android.telecom.Logging.EventManager$EventRecord;

        r2 = virtualinvoke r1.<android.telecom.Logging.EventManager$EventRecord: android.telecom.Logging.EventManager$Loggable getRecordEntry()>();

        $r4 = r0.<android.telecom.Logging.EventManager: java.util.concurrent.LinkedBlockingQueue mEventRecords>;

        $i0 = virtualinvoke $r4.<java.util.concurrent.LinkedBlockingQueue: int remainingCapacity()>();

        if $i0 != 0 goto label1;

        $r6 = r0.<android.telecom.Logging.EventManager: java.util.concurrent.LinkedBlockingQueue mEventRecords>;

        $r7 = virtualinvoke $r6.<java.util.concurrent.LinkedBlockingQueue: java.lang.Object poll()>();

        r3 = (android.telecom.Logging.EventManager$EventRecord) $r7;

        if r3 == null goto label1;

        $r8 = r0.<android.telecom.Logging.EventManager: java.util.Map mCallEventRecordMap>;

        $r9 = virtualinvoke r3.<android.telecom.Logging.EventManager$EventRecord: android.telecom.Logging.EventManager$Loggable getRecordEntry()>();

        interfaceinvoke $r8.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r9);

     label1:
        $r11 = r0.<android.telecom.Logging.EventManager: java.util.concurrent.LinkedBlockingQueue mEventRecords>;

        virtualinvoke $r11.<java.util.concurrent.LinkedBlockingQueue: boolean add(java.lang.Object)>(r1);

        $r12 = r0.<android.telecom.Logging.EventManager: java.util.Map mCallEventRecordMap>;

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r1);

        return;
    }

    public void registerEventListener(android.telecom.Logging.EventManager$EventListener)
    {
        android.telecom.Logging.EventManager r0;
        java.lang.Object r1;
        java.util.List $r2;
        java.lang.Throwable $r3;
        android.telecom.Logging.EventManager$EventListener r4;

        r0 := @this: android.telecom.Logging.EventManager;

        r4 := @parameter0: android.telecom.Logging.EventManager$EventListener;

        if r4 == null goto label6;

        r1 = <android.telecom.Logging.EventManager: java.lang.Object mSync>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.telecom.Logging.EventManager: java.util.List mEventListeners>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r4);

        exitmonitor r1;

     label2:
        goto label6;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }
}
