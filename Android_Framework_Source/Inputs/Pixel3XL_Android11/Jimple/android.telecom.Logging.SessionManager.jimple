public class android.telecom.Logging.SessionManager extends java.lang.Object
{
    private static final long DEFAULT_SESSION_TIMEOUT_MS;
    private static final java.lang.String LOGGING_TAG;
    private static final long SESSION_ID_ROLLOVER_THRESHOLD;
    private static final java.lang.String TIMEOUTS_PREFIX;
    public java.lang.Runnable mCleanStaleSessions;
    private android.content.Context mContext;
    public android.telecom.Logging.SessionManager$ICurrentThreadId mCurrentThreadId;
    private android.os.Handler mSessionCleanupHandler;
    private android.telecom.Logging.SessionManager$ISessionCleanupTimeoutMs mSessionCleanupTimeoutMs;
    private java.util.List mSessionListeners;
    public java.util.concurrent.ConcurrentHashMap mSessionMapper;
    private int sCodeEntryCounter;

    public void <init>()
    {
        android.telecom.Logging.SessionManager r0;
        android.os.Looper $r4;
        android.telecom.Logging.'-$$Lambda$L5F_SL2jOCUETYvgdB36aGwY50E' $r5;
        java.util.concurrent.ConcurrentHashMap r8;
        android.telecom.Logging._$$Lambda$SessionManager$VyH2gT1EjIvzDy_C9JfTT60CISM r9;
        android.os.Handler r10;
        android.telecom.Logging._$$Lambda$SessionManager$hhtZwTEbvO_fLNlAvB6Do9_2gW4 r11;
        java.util.ArrayList r12;
        android.telecom.Logging.SessionManager$ICurrentThreadId r13;

        r0 := @this: android.telecom.Logging.SessionManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.telecom.Logging.SessionManager: int sCodeEntryCounter> = 0;

        r8 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke r8.<java.util.concurrent.ConcurrentHashMap: void <init>(int)>(100);

        r0.<android.telecom.Logging.SessionManager: java.util.concurrent.ConcurrentHashMap mSessionMapper> = r8;

        r9 = new android.telecom.Logging._$$Lambda$SessionManager$VyH2gT1EjIvzDy_C9JfTT60CISM;

        specialinvoke r9.<android.telecom.Logging._$$Lambda$SessionManager$VyH2gT1EjIvzDy_C9JfTT60CISM: void <init>(android.telecom.Logging.SessionManager)>(r0);

        r0.<android.telecom.Logging.SessionManager: java.lang.Runnable mCleanStaleSessions> = r9;

        r10 = new android.os.Handler;

        $r4 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke r10.<android.os.Handler: void <init>(android.os.Looper)>($r4);

        r0.<android.telecom.Logging.SessionManager: android.os.Handler mSessionCleanupHandler> = r10;

        $r5 = <android.telecom.Logging._$$Lambda$L5F_SL2jOCUETYvgdB36aGwY50E: android.telecom.Logging.'-$$Lambda$L5F_SL2jOCUETYvgdB36aGwY50E' INSTANCE>;

        r13 = (android.telecom.Logging.SessionManager$ICurrentThreadId) $r5;

        r0.<android.telecom.Logging.SessionManager: android.telecom.Logging.SessionManager$ICurrentThreadId mCurrentThreadId> = r13;

        r11 = new android.telecom.Logging._$$Lambda$SessionManager$hhtZwTEbvO_fLNlAvB6Do9_2gW4;

        specialinvoke r11.<android.telecom.Logging._$$Lambda$SessionManager$hhtZwTEbvO_fLNlAvB6Do9_2gW4: void <init>(android.telecom.Logging.SessionManager)>(r0);

        r0.<android.telecom.Logging.SessionManager: android.telecom.Logging.SessionManager$ISessionCleanupTimeoutMs mSessionCleanupTimeoutMs> = r11;

        r12 = new java.util.ArrayList;

        specialinvoke r12.<java.util.ArrayList: void <init>()>();

        r0.<android.telecom.Logging.SessionManager: java.util.List mSessionListeners> = r12;

        return;
    }

    private void endParentSessions(android.telecom.Logging.Session)
    {
        android.telecom.Logging.SessionManager r0;
        android.telecom.Logging.Session r1, r13;
        long l0, $l2, $l3, $l4, l5, l6;
        boolean $z0, $z1, $z2;
        java.util.ArrayList $r2;
        int $i1;
        java.lang.StringBuilder $r3;
        java.lang.String $r7, $r9, $r11, $r12;
        java.lang.Object[] $r10;

        r0 := @this: android.telecom.Logging.SessionManager;

        r1 := @parameter0: android.telecom.Logging.Session;

        $z0 = virtualinvoke r1.<android.telecom.Logging.Session: boolean isSessionCompleted()>();

        if $z0 == 0 goto label5;

        $r2 = virtualinvoke r1.<android.telecom.Logging.Session: java.util.ArrayList getChildSessions()>();

        $i1 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if $i1 == 0 goto label1;

        goto label5;

     label1:
        r13 = virtualinvoke r1.<android.telecom.Logging.Session: android.telecom.Logging.Session getParentSession()>();

        if r13 == null goto label3;

        virtualinvoke r1.<android.telecom.Logging.Session: void setParentSession(android.telecom.Logging.Session)>(null);

        virtualinvoke r13.<android.telecom.Logging.Session: void removeChild(android.telecom.Logging.Session)>(r1);

        $z2 = virtualinvoke r13.<android.telecom.Logging.Session: boolean isExternal()>();

        if $z2 == 0 goto label2;

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l5 = virtualinvoke r1.<android.telecom.Logging.Session: long getExecutionStartTimeMilliseconds()>();

        $r12 = virtualinvoke r1.<android.telecom.Logging.Session: java.lang.String getShortMethodName()>();

        $l4 = l0 - l5;

        specialinvoke r0.<android.telecom.Logging.SessionManager: void notifySessionCompleteListeners(java.lang.String,long)>($r12, $l4);

     label2:
        specialinvoke r0.<android.telecom.Logging.SessionManager: void endParentSessions(android.telecom.Logging.Session)>(r13);

        goto label4;

     label3:
        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l3 = virtualinvoke r1.<android.telecom.Logging.Session: long getExecutionStartTimeMilliseconds()>();

        l6 = $l2 - $l3;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("END_SESSION (dur: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l6);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms): ");

        $r7 = virtualinvoke r1.<android.telecom.Logging.Session: java.lang.String toString()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = newarray (java.lang.Object)[0];

        staticinvoke <android.telecom.Log: void d(java.lang.String,java.lang.String,java.lang.Object[])>("Logging", $r9, $r10);

        $z1 = virtualinvoke r1.<android.telecom.Logging.Session: boolean isExternal()>();

        if $z1 != 0 goto label4;

        $r11 = virtualinvoke r1.<android.telecom.Logging.Session: java.lang.String getShortMethodName()>();

        specialinvoke r0.<android.telecom.Logging.SessionManager: void notifySessionCompleteListeners(java.lang.String,long)>($r11, l6);

     label4:
        return;

     label5:
        return;
    }

    private java.lang.String getBase64Encoding(int)
    {
        android.telecom.Logging.SessionManager r0;
        int i0;
        java.nio.ByteBuffer $r1, $r2;
        byte[] $r3, $r4;
        java.lang.String $r5;

        r0 := @this: android.telecom.Logging.SessionManager;

        i0 := @parameter0: int;

        $r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(4);

        $r2 = virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>(i0);

        $r3 = virtualinvoke $r2.<java.nio.ByteBuffer: byte[] array()>();

        $r4 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>($r3, 2, 4);

        $r5 = staticinvoke <android.util.Base64: java.lang.String encodeToString(byte[],int)>($r4, 3);

        return $r5;
    }

    private int getCallingThreadId()
    {
        android.telecom.Logging.SessionManager r0;
        android.telecom.Logging.SessionManager$ICurrentThreadId $r1;
        int $i0;

        r0 := @this: android.telecom.Logging.SessionManager;

        $r1 = r0.<android.telecom.Logging.SessionManager: android.telecom.Logging.SessionManager$ICurrentThreadId mCurrentThreadId>;

        $i0 = interfaceinvoke $r1.<android.telecom.Logging.SessionManager$ICurrentThreadId: int get()>();

        return $i0;
    }

    private long getCleanupTimeout(android.content.Context)
    {
        android.telecom.Logging.SessionManager r0;
        android.content.Context r1;
        android.content.ContentResolver $r2;
        long $l0;

        r0 := @this: android.telecom.Logging.SessionManager;

        r1 := @parameter0: android.content.Context;

        $r2 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $l0 = staticinvoke <android.provider.Settings$Secure: long getLong(android.content.ContentResolver,java.lang.String,long)>($r2, "telecom.stale_session_cleanup_timeout_millis", 30000L);

        return $l0;
    }

    private java.lang.String getNextSessionID()
    {
        android.telecom.Logging.SessionManager r0;
        java.lang.Integer r1, r3;
        int $i0, $i1, $i4, $i5, i6, i7;
        long $l2;
        byte $b3;
        java.lang.Throwable $r2;
        java.lang.String r4;

        r0 := @this: android.telecom.Logging.SessionManager;

        entermonitor r0;

     label1:
        i6 = r0.<android.telecom.Logging.SessionManager: int sCodeEntryCounter>;

        $i0 = i6 + 1;

        r0.<android.telecom.Logging.SessionManager: int sCodeEntryCounter> = $i0;

        r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i6);

     label2:
        r3 = r1;

     label3:
        $i1 = virtualinvoke r1.<java.lang.Integer: int intValue()>();

        $l2 = (long) $i1;

        $b3 = $l2 cmp 262144L;

        if $b3 < 0 goto label4;

        specialinvoke r0.<android.telecom.Logging.SessionManager: void restartSessionCounter()>();

        i7 = r0.<android.telecom.Logging.SessionManager: int sCodeEntryCounter>;

        $i5 = i7 + 1;

        r0.<android.telecom.Logging.SessionManager: int sCodeEntryCounter> = $i5;

        r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i7);

     label4:
        $i4 = virtualinvoke r3.<java.lang.Integer: int intValue()>();

        r4 = specialinvoke r0.<android.telecom.Logging.SessionManager: java.lang.String getBase64Encoding(int)>($i4);

     label5:
        exitmonitor r0;

        return r4;

     label6:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    private long getSessionCleanupTimeoutMs()
    {
        android.telecom.Logging.SessionManager r0;
        android.telecom.Logging.SessionManager$ISessionCleanupTimeoutMs $r1;
        long $l0;

        r0 := @this: android.telecom.Logging.SessionManager;

        $r1 = r0.<android.telecom.Logging.SessionManager: android.telecom.Logging.SessionManager$ISessionCleanupTimeoutMs mSessionCleanupTimeoutMs>;

        $l0 = interfaceinvoke $r1.<android.telecom.Logging.SessionManager$ISessionCleanupTimeoutMs: long get()>();

        return $l0;
    }

    private void notifySessionCompleteListeners(java.lang.String, long)
    {
        android.telecom.Logging.SessionManager r0;
        java.lang.String r1;
        long l0;
        java.util.Iterator r2;
        java.util.List $r3;
        boolean $z0;
        java.lang.Object $r4;
        android.telecom.Logging.SessionManager$ISessionListener $r5;

        r0 := @this: android.telecom.Logging.SessionManager;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r3 = r0.<android.telecom.Logging.SessionManager: java.util.List mSessionListeners>;

        r2 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (android.telecom.Logging.SessionManager$ISessionListener) $r4;

        interfaceinvoke $r5.<android.telecom.Logging.SessionManager$ISessionListener: void sessionComplete(java.lang.String,long)>(r1, l0);

        goto label1;

     label2:
        return;
    }

    private void resetStaleSessionTimer()
    {
        android.telecom.Logging.SessionManager r0;
        android.os.Handler $r2, $r4;
        java.lang.Runnable $r3, $r5;
        long $l0;
        java.lang.Throwable $r6;

        r0 := @this: android.telecom.Logging.SessionManager;

        entermonitor r0;

     label1:
        $r2 = r0.<android.telecom.Logging.SessionManager: android.os.Handler mSessionCleanupHandler>;

        virtualinvoke $r2.<android.os.Handler: void removeCallbacksAndMessages(java.lang.Object)>(null);

        $r3 = r0.<android.telecom.Logging.SessionManager: java.lang.Runnable mCleanStaleSessions>;

        if $r3 == null goto label2;

        $r4 = r0.<android.telecom.Logging.SessionManager: android.os.Handler mSessionCleanupHandler>;

        $r5 = r0.<android.telecom.Logging.SessionManager: java.lang.Runnable mCleanStaleSessions>;

        $l0 = specialinvoke r0.<android.telecom.Logging.SessionManager: long getSessionCleanupTimeoutMs()>();

        virtualinvoke $r4.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r5, $l0);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r6 := @caughtexception;

        exitmonitor r0;

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void restartSessionCounter()
    {
        android.telecom.Logging.SessionManager r0;
        java.lang.Throwable $r2;

        r0 := @this: android.telecom.Logging.SessionManager;

        entermonitor r0;

     label1:
        r0.<android.telecom.Logging.SessionManager: int sCodeEntryCounter> = 0;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void cancelSubsession(android.telecom.Logging.Session)
    {
        android.telecom.Logging.SessionManager r0;
        java.lang.Throwable $r1;
        android.telecom.Logging.Session r2;

        r0 := @this: android.telecom.Logging.SessionManager;

        r2 := @parameter0: android.telecom.Logging.Session;

        entermonitor r0;

        if r2 != null goto label1;

        exitmonitor r0;

        return;

     label1:
        virtualinvoke r2.<android.telecom.Logging.Session: void markSessionCompleted(long)>(-1L);

        specialinvoke r0.<android.telecom.Logging.SessionManager: void endParentSessions(android.telecom.Logging.Session)>(r2);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void cleanupStaleSessions(long)
    {
        android.telecom.Logging.SessionManager r0;
        long l0, l1, $l2, $l3;
        java.util.Iterator r1;
        android.telecom.Logging.Session r2;
        java.util.concurrent.ConcurrentHashMap $r3;
        java.util.Set $r4;
        boolean $z0, z1;
        java.lang.Object[] $r5, $r6;
        java.lang.Object $r7, $r9;
        java.util.Map$Entry $r8;
        byte $b4;
        java.lang.String $r11, r15, r16;
        java.lang.Throwable $r14;
        java.lang.StringBuilder r17;

        r0 := @this: android.telecom.Logging.SessionManager;

        l0 := @parameter0: long;

        entermonitor r0;

        r15 = "Stale Sessions Cleaned:\n";

        z1 = 0;

     label01:
        l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r3 = r0.<android.telecom.Logging.SessionManager: java.util.concurrent.ConcurrentHashMap mSessionMapper>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()>();

        r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        $r7 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.util.Map$Entry) $r7;

        $r9 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        r2 = (android.telecom.Logging.Session) $r9;

     label03:
        r16 = r15;

     label04:
        $l2 = virtualinvoke r2.<android.telecom.Logging.Session: long getExecutionStartTimeMilliseconds()>();

        $l3 = l1 - $l2;

        $b4 = $l3 cmp l0;

        if $b4 <= 0 goto label06;

        interfaceinvoke r1.<java.util.Iterator: void remove()>();

        r17 = new java.lang.StringBuilder;

        specialinvoke r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        $r11 = virtualinvoke r2.<android.telecom.Logging.Session: java.lang.String printFullSessionTree()>();

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        r16 = virtualinvoke r17.<java.lang.StringBuilder: java.lang.String toString()>();

     label05:
        z1 = 1;

     label06:
        r15 = r16;

        goto label02;

     label07:
        if z1 == 0 goto label10;

     label08:
        $r6 = newarray (java.lang.Object)[0];

        staticinvoke <android.telecom.Log: void w(java.lang.String,java.lang.String,java.lang.Object[])>("Logging", r15, $r6);

     label09:
        goto label11;

     label10:
        $r5 = newarray (java.lang.Object)[0];

        staticinvoke <android.telecom.Log: void v(java.lang.String,java.lang.String,java.lang.Object[])>("Logging", "No stale logging sessions needed to be cleaned...", $r5);

     label11:
        exitmonitor r0;

        return;

     label12:
        $r14 := @caughtexception;

        exitmonitor r0;

        throw $r14;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
    }

    public void continueSession(android.telecom.Logging.Session, java.lang.String)
    {
        android.telecom.Logging.SessionManager r0;
        java.lang.String r1, $r8, $r13;
        long $l0;
        android.telecom.Logging.Session $r2, r16;
        java.util.concurrent.ConcurrentHashMap $r3;
        int $i1;
        java.lang.Integer $r4;
        boolean $z0;
        java.lang.Object[] $r9, $r10, $r14;
        java.lang.Throwable $r15;
        java.lang.StringBuilder r17, r18;

        r0 := @this: android.telecom.Logging.SessionManager;

        r16 := @parameter0: android.telecom.Logging.Session;

        r1 := @parameter1: java.lang.String;

        entermonitor r0;

        if r16 != null goto label1;

        exitmonitor r0;

        return;

     label1:
        specialinvoke r0.<android.telecom.Logging.SessionManager: void resetStaleSessionTimer()>();

        virtualinvoke r16.<android.telecom.Logging.Session: void setShortMethodName(java.lang.String)>(r1);

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        virtualinvoke r16.<android.telecom.Logging.Session: void setExecutionStartTimeMs(long)>($l0);

        $r2 = virtualinvoke r16.<android.telecom.Logging.Session: android.telecom.Logging.Session getParentSession()>();

        if $r2 != null goto label3;

        r17 = new java.lang.StringBuilder;

        specialinvoke r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Log.continueSession was called with no session active for method ");

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r13 = virtualinvoke r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = newarray (java.lang.Object)[0];

        staticinvoke <android.telecom.Log: void i(java.lang.String,java.lang.String,java.lang.Object[])>("Logging", $r13, $r14);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 = r0.<android.telecom.Logging.SessionManager: java.util.concurrent.ConcurrentHashMap mSessionMapper>;

        $i1 = specialinvoke r0.<android.telecom.Logging.SessionManager: int getCallingThreadId()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r16);

        $z0 = virtualinvoke r16.<android.telecom.Logging.Session: boolean isStartedFromActiveSession()>();

        if $z0 != 0 goto label5;

        $r10 = newarray (java.lang.Object)[0];

        staticinvoke <android.telecom.Log: void v(java.lang.String,java.lang.String,java.lang.Object[])>("Logging", "CONTINUE_SUBSESSION", $r10);

     label4:
        goto label6;

     label5:
        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CONTINUE_SUBSESSION (Invisible Subsession) with Method ");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = newarray (java.lang.Object)[0];

        staticinvoke <android.telecom.Log: void v(java.lang.String,java.lang.String,java.lang.Object[])>("Logging", $r8, $r9);

     label6:
        exitmonitor r0;

        return;

     label7:
        $r15 := @caughtexception;

        exitmonitor r0;

        throw $r15;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public android.telecom.Logging.Session createSubsession()
    {
        android.telecom.Logging.SessionManager r0;
        android.telecom.Logging.Session $r1;

        r0 := @this: android.telecom.Logging.SessionManager;

        $r1 = virtualinvoke r0.<android.telecom.Logging.SessionManager: android.telecom.Logging.Session createSubsession(boolean)>(0);

        return $r1;
    }

    public android.telecom.Logging.Session createSubsession(boolean)
    {
        android.telecom.Logging.SessionManager r0;
        boolean z0;
        int i0;
        java.util.concurrent.ConcurrentHashMap $r1;
        java.lang.Integer $r2;
        java.lang.Object $r3;
        java.lang.String $r4, $r5, $r6, $r9, $r11;
        long $l1;
        java.lang.Object[] $r7, $r12, $r13;
        java.lang.Throwable $r14;
        android.telecom.Logging.Session r15, r16;
        java.lang.StringBuilder r17;

        r0 := @this: android.telecom.Logging.SessionManager;

        z0 := @parameter0: boolean;

        entermonitor r0;

     label01:
        i0 = specialinvoke r0.<android.telecom.Logging.SessionManager: int getCallingThreadId()>();

        $r1 = r0.<android.telecom.Logging.SessionManager: java.util.concurrent.ConcurrentHashMap mSessionMapper>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r2);

        r15 = (android.telecom.Logging.Session) $r3;

     label02:
        if r15 != null goto label05;

     label03:
        $r13 = newarray (java.lang.Object)[0];

        staticinvoke <android.telecom.Log: void d(java.lang.String,java.lang.String,java.lang.Object[])>("Logging", "Log.createSubsession was called with no session active.", $r13);

     label04:
        exitmonitor r0;

        return null;

     label05:
        r16 = new android.telecom.Logging.Session;

        $r4 = virtualinvoke r15.<android.telecom.Logging.Session: java.lang.String getNextChildId()>();

        $r5 = virtualinvoke r15.<android.telecom.Logging.Session: java.lang.String getShortMethodName()>();

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r6 = virtualinvoke r15.<android.telecom.Logging.Session: java.lang.String getOwnerInfo()>();

        specialinvoke r16.<android.telecom.Logging.Session: void <init>(java.lang.String,java.lang.String,long,boolean,java.lang.String)>($r4, $r5, $l1, z0, $r6);

        virtualinvoke r15.<android.telecom.Logging.Session: void addChild(android.telecom.Logging.Session)>(r16);

        virtualinvoke r16.<android.telecom.Logging.Session: void setParentSession(android.telecom.Logging.Session)>(r15);

     label06:
        if z0 != 0 goto label09;

     label07:
        r17 = new java.lang.StringBuilder;

        specialinvoke r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CREATE_SUBSESSION ");

        $r9 = virtualinvoke r16.<android.telecom.Logging.Session: java.lang.String toString()>();

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = newarray (java.lang.Object)[0];

        staticinvoke <android.telecom.Log: void v(java.lang.String,java.lang.String,java.lang.Object[])>("Logging", $r11, $r12);

     label08:
        goto label10;

     label09:
        $r7 = newarray (java.lang.Object)[0];

        staticinvoke <android.telecom.Log: void v(java.lang.String,java.lang.String,java.lang.Object[])>("Logging", "CREATE_SUBSESSION (Invisible subsession)", $r7);

     label10:
        exitmonitor r0;

        return r16;

     label11:
        $r14 := @caughtexception;

        exitmonitor r0;

        throw $r14;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
    }

    public void endSession()
    {
        android.telecom.Logging.SessionManager r0;
        int i0;
        java.util.concurrent.ConcurrentHashMap $r1, $r9, $r12;
        java.lang.Integer $r2, $r10, $r13;
        java.lang.Object $r3;
        long $l1, $l2, $l3;
        boolean $z0, $z1, $z2;
        java.lang.String $r7, $r18;
        java.lang.Object[] $r8, $r19, $r20;
        java.lang.Throwable $r21;
        android.telecom.Logging.Session r22, r25;
        java.lang.StringBuilder r23, r24;

        r0 := @this: android.telecom.Logging.SessionManager;

        entermonitor r0;

     label01:
        i0 = specialinvoke r0.<android.telecom.Logging.SessionManager: int getCallingThreadId()>();

        $r1 = r0.<android.telecom.Logging.SessionManager: java.util.concurrent.ConcurrentHashMap mSessionMapper>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r2);

        r22 = (android.telecom.Logging.Session) $r3;

     label02:
        if r22 != null goto label05;

     label03:
        $r20 = newarray (java.lang.Object)[0];

        staticinvoke <android.telecom.Log: void w(java.lang.String,java.lang.String,java.lang.Object[])>("Logging", "Log.endSession was called with no session active.", $r20);

     label04:
        exitmonitor r0;

        return;

     label05:
        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        virtualinvoke r22.<android.telecom.Logging.Session: void markSessionCompleted(long)>($l1);

        $z0 = virtualinvoke r22.<android.telecom.Logging.Session: boolean isStartedFromActiveSession()>();

        if $z0 != 0 goto label07;

        r23 = new java.lang.StringBuilder;

        specialinvoke r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("END_SUBSESSION (dur: ");

        $l3 = virtualinvoke r22.<android.telecom.Logging.Session: long getLocalExecutionTime()>();

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mS)");

        $r18 = virtualinvoke r23.<java.lang.StringBuilder: java.lang.String toString()>();

        $r19 = newarray (java.lang.Object)[0];

        staticinvoke <android.telecom.Log: void v(java.lang.String,java.lang.String,java.lang.Object[])>("Logging", $r18, $r19);

     label06:
        goto label08;

     label07:
        r24 = new java.lang.StringBuilder;

        specialinvoke r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("END_SUBSESSION (Invisible Subsession) (dur: ");

        $l2 = virtualinvoke r22.<android.telecom.Logging.Session: long getLocalExecutionTime()>();

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms)");

        $r7 = virtualinvoke r24.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = newarray (java.lang.Object)[0];

        staticinvoke <android.telecom.Log: void v(java.lang.String,java.lang.String,java.lang.Object[])>("Logging", $r7, $r8);

     label08:
        r25 = virtualinvoke r22.<android.telecom.Logging.Session: android.telecom.Logging.Session getParentSession()>();

        $r9 = r0.<android.telecom.Logging.SessionManager: java.util.concurrent.ConcurrentHashMap mSessionMapper>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r9.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>($r10);

        specialinvoke r0.<android.telecom.Logging.SessionManager: void endParentSessions(android.telecom.Logging.Session)>(r22);

     label09:
        if r25 == null goto label11;

     label10:
        $z1 = virtualinvoke r25.<android.telecom.Logging.Session: boolean isSessionCompleted()>();

        if $z1 != 0 goto label11;

        $z2 = virtualinvoke r22.<android.telecom.Logging.Session: boolean isStartedFromActiveSession()>();

        if $z2 == 0 goto label11;

        $r12 = r0.<android.telecom.Logging.SessionManager: java.util.concurrent.ConcurrentHashMap mSessionMapper>;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r12.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, r25);

     label11:
        exitmonitor r0;

        return;

     label12:
        $r21 := @caughtexception;

        exitmonitor r0;

        throw $r21;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
    }

    public android.telecom.Logging.Session$Info getExternalSession()
    {
        android.telecom.Logging.SessionManager r0;
        java.lang.Throwable $r1;
        android.telecom.Logging.Session$Info r2;

        r0 := @this: android.telecom.Logging.SessionManager;

        entermonitor r0;

     label1:
        r2 = virtualinvoke r0.<android.telecom.Logging.SessionManager: android.telecom.Logging.Session$Info getExternalSession(java.lang.String)>(null);

     label2:
        exitmonitor r0;

        return r2;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.telecom.Logging.Session$Info getExternalSession(java.lang.String)
    {
        android.telecom.Logging.SessionManager r0;
        int i0;
        android.telecom.Logging.Session r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.Integer $r3;
        java.lang.Object $r4;
        java.lang.Object[] $r5;
        java.lang.Throwable $r6;
        java.lang.String r7;
        android.telecom.Logging.Session$Info r8;

        r0 := @this: android.telecom.Logging.SessionManager;

        r7 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        i0 = specialinvoke r0.<android.telecom.Logging.SessionManager: int getCallingThreadId()>();

        $r2 = r0.<android.telecom.Logging.SessionManager: java.util.concurrent.ConcurrentHashMap mSessionMapper>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r3);

        r1 = (android.telecom.Logging.Session) $r4;

     label2:
        if r1 != null goto label5;

     label3:
        $r5 = newarray (java.lang.Object)[0];

        staticinvoke <android.telecom.Log: void d(java.lang.String,java.lang.String,java.lang.Object[])>("Logging", "Log.getExternalSession was called with no session active.", $r5);

     label4:
        exitmonitor r0;

        return null;

     label5:
        r8 = virtualinvoke r1.<android.telecom.Logging.Session: android.telecom.Logging.Session$Info getExternalInfo(java.lang.String)>(r7);

     label6:
        exitmonitor r0;

        return r8;

     label7:
        $r6 := @caughtexception;

        exitmonitor r0;

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public java.lang.String getSessionId()
    {
        android.telecom.Logging.SessionManager r0;
        java.util.concurrent.ConcurrentHashMap $r1;
        int $i0;
        java.lang.Integer $r2;
        java.lang.Object $r3;
        android.telecom.Logging.Session r4;
        java.lang.String r5;

        r0 := @this: android.telecom.Logging.SessionManager;

        $r1 = r0.<android.telecom.Logging.SessionManager: java.util.concurrent.ConcurrentHashMap mSessionMapper>;

        $i0 = specialinvoke r0.<android.telecom.Logging.SessionManager: int getCallingThreadId()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r2);

        r4 = (android.telecom.Logging.Session) $r3;

        if r4 == null goto label1;

        r5 = virtualinvoke r4.<android.telecom.Logging.Session: java.lang.String toString()>();

        goto label2;

     label1:
        r5 = "";

     label2:
        return r5;
    }

    public void lambda$new$0$SessionManager()
    {
        android.telecom.Logging.SessionManager r0;
        long $l0;

        r0 := @this: android.telecom.Logging.SessionManager;

        $l0 = specialinvoke r0.<android.telecom.Logging.SessionManager: long getSessionCleanupTimeoutMs()>();

        virtualinvoke r0.<android.telecom.Logging.SessionManager: void cleanupStaleSessions(long)>($l0);

        return;
    }

    public long lambda$new$1$SessionManager()
    {
        android.telecom.Logging.SessionManager r0;
        android.content.Context r1;
        long $l0;

        r0 := @this: android.telecom.Logging.SessionManager;

        r1 = r0.<android.telecom.Logging.SessionManager: android.content.Context mContext>;

        if r1 != null goto label1;

        return 30000L;

     label1:
        $l0 = specialinvoke r0.<android.telecom.Logging.SessionManager: long getCleanupTimeout(android.content.Context)>(r1);

        return $l0;
    }

    public java.lang.String printActiveSessions()
    {
        android.telecom.Logging.SessionManager r0;
        java.lang.StringBuilder r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.util.Set $r3;
        boolean $z0;
        java.lang.Object $r4, $r6;
        java.util.Map$Entry $r5;
        android.telecom.Logging.Session $r7;
        java.lang.String $r8, r13;
        java.lang.Throwable $r11;
        java.util.Iterator r12;

        r0 := @this: android.telecom.Logging.SessionManager;

        entermonitor r0;

     label1:
        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<android.telecom.Logging.SessionManager: java.util.concurrent.ConcurrentHashMap mSessionMapper>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()>();

        r12 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r7 = (android.telecom.Logging.Session) $r6;

        $r8 = virtualinvoke $r7.<android.telecom.Logging.Session: java.lang.String printFullSessionTree()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

     label3:
        goto label2;

     label4:
        r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

     label5:
        exitmonitor r0;

        return r13;

     label6:
        $r11 := @caughtexception;

        exitmonitor r0;

        throw $r11;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public void registerSessionListener(android.telecom.Logging.SessionManager$ISessionListener)
    {
        android.telecom.Logging.SessionManager r0;
        java.util.List $r1;
        java.lang.Throwable $r2;
        android.telecom.Logging.SessionManager$ISessionListener r3;

        r0 := @this: android.telecom.Logging.SessionManager;

        r3 := @parameter0: android.telecom.Logging.SessionManager$ISessionListener;

        entermonitor r0;

        if r3 == null goto label4;

     label1:
        $r1 = r0.<android.telecom.Logging.SessionManager: java.util.List mSessionListeners>;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(r3);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

     label4:
        exitmonitor r0;

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setContext(android.content.Context)
    {
        android.telecom.Logging.SessionManager r0;
        android.content.Context r1;

        r0 := @this: android.telecom.Logging.SessionManager;

        r1 := @parameter0: android.content.Context;

        r0.<android.telecom.Logging.SessionManager: android.content.Context mContext> = r1;

        return;
    }

    public void startExternalSession(android.telecom.Logging.Session$Info, java.lang.String)
    {
        android.telecom.Logging.SessionManager r0;
        java.lang.String r1, $r10, $r12, $r13, $r14;
        int i0;
        android.telecom.Logging.Session r2, $r7, $r18;
        java.lang.StringBuilder r3;
        java.util.concurrent.ConcurrentHashMap $r4, $r15;
        java.lang.Integer $r5, $r16;
        java.lang.Object $r6;
        java.lang.Object[] $r8, $r19;
        long $l1;
        java.lang.Throwable $r20;
        android.telecom.Logging.Session$Info r21;

        r0 := @this: android.telecom.Logging.SessionManager;

        r21 := @parameter0: android.telecom.Logging.Session$Info;

        r1 := @parameter1: java.lang.String;

        entermonitor r0;

        if r21 != null goto label1;

        exitmonitor r0;

        return;

     label1:
        i0 = specialinvoke r0.<android.telecom.Logging.SessionManager: int getCallingThreadId()>();

        $r4 = r0.<android.telecom.Logging.SessionManager: java.util.concurrent.ConcurrentHashMap mSessionMapper>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6 = virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r5);

        $r7 = (android.telecom.Logging.Session) $r6;

        if $r7 == null goto label3;

        $r19 = newarray (java.lang.Object)[0];

        staticinvoke <android.telecom.Log: void w(java.lang.String,java.lang.String,java.lang.Object[])>("Logging", "trying to start an external session with a session already active.", $r19);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r8 = newarray (java.lang.Object)[0];

        staticinvoke <android.telecom.Log: void d(java.lang.String,java.lang.String,java.lang.Object[])>("Logging", "START_EXTERNAL_SESSION", $r8);

        r2 = new android.telecom.Logging.Session;

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("E-");

        $r10 = r21.<android.telecom.Logging.Session$Info: java.lang.String sessionId>;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = r21.<android.telecom.Logging.Session$Info: java.lang.String methodPath>;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r14 = r21.<android.telecom.Logging.Session$Info: java.lang.String ownerInfo>;

        specialinvoke r2.<android.telecom.Logging.Session: void <init>(java.lang.String,java.lang.String,long,boolean,java.lang.String)>($r12, $r13, $l1, 0, $r14);

        virtualinvoke r2.<android.telecom.Logging.Session: void setIsExternal(boolean)>(1);

        virtualinvoke r2.<android.telecom.Logging.Session: void markSessionCompleted(long)>(-1L);

        $r15 = r0.<android.telecom.Logging.SessionManager: java.util.concurrent.ConcurrentHashMap mSessionMapper>;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r15.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, r2);

        $r18 = virtualinvoke r0.<android.telecom.Logging.SessionManager: android.telecom.Logging.Session createSubsession()>();

        virtualinvoke r0.<android.telecom.Logging.SessionManager: void continueSession(android.telecom.Logging.Session,java.lang.String)>($r18, r1);

     label4:
        exitmonitor r0;

        return;

     label5:
        $r20 := @caughtexception;

        exitmonitor r0;

        throw $r20;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void startSession(android.telecom.Logging.Session$Info, java.lang.String, java.lang.String)
    {
        android.telecom.Logging.SessionManager r0;
        java.lang.String r1, r2;
        java.lang.Throwable $r3;
        android.telecom.Logging.Session$Info r4;

        r0 := @this: android.telecom.Logging.SessionManager;

        r4 := @parameter0: android.telecom.Logging.Session$Info;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        entermonitor r0;

        if r4 != null goto label3;

     label1:
        virtualinvoke r0.<android.telecom.Logging.SessionManager: void startSession(java.lang.String,java.lang.String)>(r1, r2);

     label2:
        goto label4;

     label3:
        virtualinvoke r0.<android.telecom.Logging.SessionManager: void startExternalSession(android.telecom.Logging.Session$Info,java.lang.String)>(r4, r1);

     label4:
        exitmonitor r0;

        return;

     label5:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void startSession(java.lang.String, java.lang.String)
    {
        android.telecom.Logging.SessionManager r0;
        java.lang.String r1, $r8, r14;
        int i0;
        android.telecom.Logging.Session r2, $r6, $r12;
        java.util.concurrent.ConcurrentHashMap $r3, $r9;
        java.lang.Integer $r4, $r10;
        java.lang.Object $r5;
        java.lang.Object[] $r7;
        long $l1;
        java.lang.Throwable $r13;

        r0 := @this: android.telecom.Logging.SessionManager;

        r14 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.telecom.Logging.SessionManager: void resetStaleSessionTimer()>();

        i0 = specialinvoke r0.<android.telecom.Logging.SessionManager: int getCallingThreadId()>();

        $r3 = r0.<android.telecom.Logging.SessionManager: java.util.concurrent.ConcurrentHashMap mSessionMapper>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5 = virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r4);

        $r6 = (android.telecom.Logging.Session) $r5;

        if $r6 == null goto label3;

        $r12 = virtualinvoke r0.<android.telecom.Logging.SessionManager: android.telecom.Logging.Session createSubsession(boolean)>(1);

        virtualinvoke r0.<android.telecom.Logging.SessionManager: void continueSession(android.telecom.Logging.Session,java.lang.String)>($r12, r14);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r7 = newarray (java.lang.Object)[0];

        staticinvoke <android.telecom.Log: void d(java.lang.String,java.lang.String,java.lang.Object[])>("Logging", "START_SESSION", $r7);

        r2 = new android.telecom.Logging.Session;

        $r8 = specialinvoke r0.<android.telecom.Logging.SessionManager: java.lang.String getNextSessionID()>();

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        specialinvoke r2.<android.telecom.Logging.Session: void <init>(java.lang.String,java.lang.String,long,boolean,java.lang.String)>($r8, r14, $l1, 0, r1);

        $r9 = r0.<android.telecom.Logging.SessionManager: java.util.concurrent.ConcurrentHashMap mSessionMapper>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r9.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r2);

     label4:
        exitmonitor r0;

        return;

     label5:
        $r13 := @caughtexception;

        exitmonitor r0;

        throw $r13;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public static void <clinit>()
    {
        <android.telecom.Logging.SessionManager: java.lang.String TIMEOUTS_PREFIX> = "telecom.";

        <android.telecom.Logging.SessionManager: long SESSION_ID_ROLLOVER_THRESHOLD> = 262144L;

        <android.telecom.Logging.SessionManager: java.lang.String LOGGING_TAG> = "Logging";

        <android.telecom.Logging.SessionManager: long DEFAULT_SESSION_TIMEOUT_MS> = 30000L;

        return;
    }
}
