public final class android.telephony.SmsManager extends java.lang.Object
{
    public static final int CDMA_SMS_RECORD_LENGTH;
    public static final java.lang.String EXTRA_MMS_DATA;
    public static final java.lang.String EXTRA_MMS_HTTP_STATUS;
    public static final java.lang.String EXTRA_SIM_SUBSCRIPTION_ID;
    public static final java.lang.String EXTRA_SMS_MESSAGE;
    public static final java.lang.String EXTRA_STATUS;
    private static final long GET_TARGET_SDK_VERSION_CODE_CHANGE;
    public static final java.lang.String MMS_CONFIG_ALIAS_ENABLED;
    public static final java.lang.String MMS_CONFIG_ALIAS_MAX_CHARS;
    public static final java.lang.String MMS_CONFIG_ALIAS_MIN_CHARS;
    public static final java.lang.String MMS_CONFIG_ALLOW_ATTACH_AUDIO;
    public static final java.lang.String MMS_CONFIG_APPEND_TRANSACTION_ID;
    public static final java.lang.String MMS_CONFIG_CLOSE_CONNECTION;
    public static final java.lang.String MMS_CONFIG_EMAIL_GATEWAY_NUMBER;
    public static final java.lang.String MMS_CONFIG_GROUP_MMS_ENABLED;
    public static final java.lang.String MMS_CONFIG_HTTP_PARAMS;
    public static final java.lang.String MMS_CONFIG_HTTP_SOCKET_TIMEOUT;
    public static final java.lang.String MMS_CONFIG_MAX_IMAGE_HEIGHT;
    public static final java.lang.String MMS_CONFIG_MAX_IMAGE_WIDTH;
    public static final java.lang.String MMS_CONFIG_MAX_MESSAGE_SIZE;
    public static final java.lang.String MMS_CONFIG_MESSAGE_TEXT_MAX_SIZE;
    public static final java.lang.String MMS_CONFIG_MMS_DELIVERY_REPORT_ENABLED;
    public static final java.lang.String MMS_CONFIG_MMS_ENABLED;
    public static final java.lang.String MMS_CONFIG_MMS_READ_REPORT_ENABLED;
    public static final java.lang.String MMS_CONFIG_MULTIPART_SMS_ENABLED;
    public static final java.lang.String MMS_CONFIG_NAI_SUFFIX;
    public static final java.lang.String MMS_CONFIG_NOTIFY_WAP_MMSC_ENABLED;
    public static final java.lang.String MMS_CONFIG_RECIPIENT_LIMIT;
    public static final java.lang.String MMS_CONFIG_SEND_MULTIPART_SMS_AS_SEPARATE_MESSAGES;
    public static final java.lang.String MMS_CONFIG_SHOW_CELL_BROADCAST_APP_LINKS;
    public static final java.lang.String MMS_CONFIG_SMS_DELIVERY_REPORT_ENABLED;
    public static final java.lang.String MMS_CONFIG_SMS_TO_MMS_TEXT_LENGTH_THRESHOLD;
    public static final java.lang.String MMS_CONFIG_SMS_TO_MMS_TEXT_THRESHOLD;
    public static final java.lang.String MMS_CONFIG_SUBJECT_MAX_LENGTH;
    public static final java.lang.String MMS_CONFIG_SUPPORT_HTTP_CHARSET_HEADER;
    public static final java.lang.String MMS_CONFIG_SUPPORT_MMS_CONTENT_DISPOSITION;
    public static final java.lang.String MMS_CONFIG_UA_PROF_TAG_NAME;
    public static final java.lang.String MMS_CONFIG_UA_PROF_URL;
    public static final java.lang.String MMS_CONFIG_USER_AGENT;
    public static final int MMS_ERROR_CONFIGURATION_ERROR;
    public static final int MMS_ERROR_HTTP_FAILURE;
    public static final int MMS_ERROR_INVALID_APN;
    public static final int MMS_ERROR_IO_ERROR;
    public static final int MMS_ERROR_NO_DATA_NETWORK;
    public static final int MMS_ERROR_RETRY;
    public static final int MMS_ERROR_UNABLE_CONNECT_MMS;
    public static final int MMS_ERROR_UNSPECIFIED;
    public static final int PREMIUM_SMS_CONSENT_ALWAYS_ALLOW;
    public static final int PREMIUM_SMS_CONSENT_ASK_USER;
    public static final int PREMIUM_SMS_CONSENT_NEVER_ALLOW;
    public static final int PREMIUM_SMS_CONSENT_UNKNOWN;
    public static final java.lang.String REGEX_PREFIX_DELIMITER;
    public static final int RESULT_BLUETOOTH_DISCONNECTED;
    public static final int RESULT_CANCELLED;
    public static final int RESULT_ENCODING_ERROR;
    public static final int RESULT_ERROR_FDN_CHECK_FAILURE;
    public static final int RESULT_ERROR_GENERIC_FAILURE;
    public static final int RESULT_ERROR_LIMIT_EXCEEDED;
    public static final int RESULT_ERROR_NONE;
    public static final int RESULT_ERROR_NO_SERVICE;
    public static final int RESULT_ERROR_NULL_PDU;
    public static final int RESULT_ERROR_RADIO_OFF;
    public static final int RESULT_ERROR_SHORT_CODE_NEVER_ALLOWED;
    public static final int RESULT_ERROR_SHORT_CODE_NOT_ALLOWED;
    public static final int RESULT_INTERNAL_ERROR;
    public static final int RESULT_INVALID_ARGUMENTS;
    public static final int RESULT_INVALID_BLUETOOTH_ADDRESS;
    public static final int RESULT_INVALID_SMSC_ADDRESS;
    public static final int RESULT_INVALID_SMS_FORMAT;
    public static final int RESULT_INVALID_STATE;
    public static final int RESULT_MODEM_ERROR;
    public static final int RESULT_NETWORK_ERROR;
    public static final int RESULT_NETWORK_REJECT;
    public static final int RESULT_NO_BLUETOOTH_SERVICE;
    public static final int RESULT_NO_DEFAULT_SMS_APP;
    public static final int RESULT_NO_MEMORY;
    public static final int RESULT_NO_RESOURCES;
    public static final int RESULT_OPERATION_NOT_ALLOWED;
    public static final int RESULT_RADIO_NOT_AVAILABLE;
    public static final int RESULT_RECEIVE_DISPATCH_FAILURE;
    public static final int RESULT_RECEIVE_INJECTED_NULL_PDU;
    public static final int RESULT_RECEIVE_NULL_MESSAGE_FROM_RIL;
    public static final int RESULT_RECEIVE_RUNTIME_EXCEPTION;
    public static final int RESULT_RECEIVE_SQL_EXCEPTION;
    public static final int RESULT_RECEIVE_URI_EXCEPTION;
    public static final int RESULT_RECEIVE_WHILE_ENCRYPTED;
    public static final int RESULT_REMOTE_EXCEPTION;
    public static final int RESULT_REQUEST_NOT_SUPPORTED;
    public static final int RESULT_RIL_CANCELLED;
    public static final int RESULT_RIL_ENCODING_ERR;
    public static final int RESULT_RIL_INTERNAL_ERR;
    public static final int RESULT_RIL_INVALID_ARGUMENTS;
    public static final int RESULT_RIL_INVALID_MODEM_STATE;
    public static final int RESULT_RIL_INVALID_SMSC_ADDRESS;
    public static final int RESULT_RIL_INVALID_SMS_FORMAT;
    public static final int RESULT_RIL_INVALID_STATE;
    public static final int RESULT_RIL_MODEM_ERR;
    public static final int RESULT_RIL_NETWORK_ERR;
    public static final int RESULT_RIL_NETWORK_NOT_READY;
    public static final int RESULT_RIL_NETWORK_REJECT;
    public static final int RESULT_RIL_NO_MEMORY;
    public static final int RESULT_RIL_NO_RESOURCES;
    public static final int RESULT_RIL_OPERATION_NOT_ALLOWED;
    public static final int RESULT_RIL_RADIO_NOT_AVAILABLE;
    public static final int RESULT_RIL_REQUEST_NOT_SUPPORTED;
    public static final int RESULT_RIL_REQUEST_RATE_LIMITED;
    public static final int RESULT_RIL_SIM_ABSENT;
    public static final int RESULT_RIL_SMS_SEND_FAIL_RETRY;
    public static final int RESULT_RIL_SYSTEM_ERR;
    public static final int RESULT_SMS_BLOCKED_DURING_EMERGENCY;
    public static final int RESULT_SMS_SEND_RETRY_FAILED;
    public static final int RESULT_STATUS_SUCCESS;
    public static final int RESULT_STATUS_TIMEOUT;
    public static final int RESULT_SYSTEM_ERROR;
    public static final int RESULT_UNEXPECTED_EVENT_STOP_SENDING;
    public static final int SMS_CATEGORY_FREE_SHORT_CODE;
    public static final int SMS_CATEGORY_NOT_SHORT_CODE;
    public static final int SMS_CATEGORY_POSSIBLE_PREMIUM_SHORT_CODE;
    public static final int SMS_CATEGORY_PREMIUM_SHORT_CODE;
    public static final int SMS_CATEGORY_STANDARD_SHORT_CODE;
    public static final int SMS_MESSAGE_PERIOD_NOT_SPECIFIED;
    public static final int SMS_MESSAGE_PRIORITY_NOT_SPECIFIED;
    public static final int SMS_RECORD_LENGTH;
    public static final int STATUS_ON_ICC_FREE;
    public static final int STATUS_ON_ICC_READ;
    public static final int STATUS_ON_ICC_SENT;
    public static final int STATUS_ON_ICC_UNREAD;
    public static final int STATUS_ON_ICC_UNSENT;
    private static final java.lang.String TAG;
    private static final android.telephony.SmsManager sInstance;
    private static final java.lang.Object sLockObject;
    private static final java.util.Map sSubInstances;
    private int mSubId;

    static void <clinit>()
    {
        android.telephony.SmsManager $r0;
        java.lang.Object $r1;
        android.util.ArrayMap $r2;

        <android.telephony.SmsManager: java.lang.String TAG> = "SmsManager";

        <android.telephony.SmsManager: int STATUS_ON_ICC_UNSENT> = 7;

        <android.telephony.SmsManager: int STATUS_ON_ICC_UNREAD> = 3;

        <android.telephony.SmsManager: int STATUS_ON_ICC_SENT> = 5;

        <android.telephony.SmsManager: int STATUS_ON_ICC_READ> = 1;

        <android.telephony.SmsManager: int STATUS_ON_ICC_FREE> = 0;

        <android.telephony.SmsManager: int SMS_RECORD_LENGTH> = 176;

        <android.telephony.SmsManager: int SMS_MESSAGE_PRIORITY_NOT_SPECIFIED> = -1;

        <android.telephony.SmsManager: int SMS_MESSAGE_PERIOD_NOT_SPECIFIED> = -1;

        <android.telephony.SmsManager: int SMS_CATEGORY_STANDARD_SHORT_CODE> = 2;

        <android.telephony.SmsManager: int SMS_CATEGORY_PREMIUM_SHORT_CODE> = 4;

        <android.telephony.SmsManager: int SMS_CATEGORY_POSSIBLE_PREMIUM_SHORT_CODE> = 3;

        <android.telephony.SmsManager: int SMS_CATEGORY_NOT_SHORT_CODE> = 0;

        <android.telephony.SmsManager: int SMS_CATEGORY_FREE_SHORT_CODE> = 1;

        <android.telephony.SmsManager: int RESULT_UNEXPECTED_EVENT_STOP_SENDING> = 28;

        <android.telephony.SmsManager: int RESULT_SYSTEM_ERROR> = 15;

        <android.telephony.SmsManager: int RESULT_STATUS_TIMEOUT> = 1;

        <android.telephony.SmsManager: int RESULT_STATUS_SUCCESS> = 0;

        <android.telephony.SmsManager: int RESULT_SMS_SEND_RETRY_FAILED> = 30;

        <android.telephony.SmsManager: int RESULT_SMS_BLOCKED_DURING_EMERGENCY> = 29;

        <android.telephony.SmsManager: int RESULT_RIL_SYSTEM_ERR> = 108;

        <android.telephony.SmsManager: int RESULT_RIL_SMS_SEND_FAIL_RETRY> = 101;

        <android.telephony.SmsManager: int RESULT_RIL_SIM_ABSENT> = 120;

        <android.telephony.SmsManager: int RESULT_RIL_REQUEST_RATE_LIMITED> = 106;

        <android.telephony.SmsManager: int RESULT_RIL_REQUEST_NOT_SUPPORTED> = 114;

        <android.telephony.SmsManager: int RESULT_RIL_RADIO_NOT_AVAILABLE> = 100;

        <android.telephony.SmsManager: int RESULT_RIL_OPERATION_NOT_ALLOWED> = 117;

        <android.telephony.SmsManager: int RESULT_RIL_NO_RESOURCES> = 118;

        <android.telephony.SmsManager: int RESULT_RIL_NO_MEMORY> = 105;

        <android.telephony.SmsManager: int RESULT_RIL_NETWORK_REJECT> = 102;

        <android.telephony.SmsManager: int RESULT_RIL_NETWORK_NOT_READY> = 116;

        <android.telephony.SmsManager: int RESULT_RIL_NETWORK_ERR> = 112;

        <android.telephony.SmsManager: int RESULT_RIL_MODEM_ERR> = 111;

        <android.telephony.SmsManager: int RESULT_RIL_INVALID_STATE> = 103;

        <android.telephony.SmsManager: int RESULT_RIL_INVALID_SMS_FORMAT> = 107;

        <android.telephony.SmsManager: int RESULT_RIL_INVALID_SMSC_ADDRESS> = 110;

        <android.telephony.SmsManager: int RESULT_RIL_INVALID_MODEM_STATE> = 115;

        <android.telephony.SmsManager: int RESULT_RIL_INVALID_ARGUMENTS> = 104;

        <android.telephony.SmsManager: int RESULT_RIL_INTERNAL_ERR> = 113;

        <android.telephony.SmsManager: int RESULT_RIL_ENCODING_ERR> = 109;

        <android.telephony.SmsManager: int RESULT_RIL_CANCELLED> = 119;

        <android.telephony.SmsManager: int RESULT_REQUEST_NOT_SUPPORTED> = 24;

        <android.telephony.SmsManager: int RESULT_REMOTE_EXCEPTION> = 31;

        <android.telephony.SmsManager: int RESULT_RECEIVE_WHILE_ENCRYPTED> = 504;

        <android.telephony.SmsManager: int RESULT_RECEIVE_URI_EXCEPTION> = 506;

        <android.telephony.SmsManager: int RESULT_RECEIVE_SQL_EXCEPTION> = 505;

        <android.telephony.SmsManager: int RESULT_RECEIVE_RUNTIME_EXCEPTION> = 502;

        <android.telephony.SmsManager: int RESULT_RECEIVE_NULL_MESSAGE_FROM_RIL> = 503;

        <android.telephony.SmsManager: int RESULT_RECEIVE_INJECTED_NULL_PDU> = 501;

        <android.telephony.SmsManager: int RESULT_RECEIVE_DISPATCH_FAILURE> = 500;

        <android.telephony.SmsManager: int RESULT_RADIO_NOT_AVAILABLE> = 9;

        <android.telephony.SmsManager: int RESULT_OPERATION_NOT_ALLOWED> = 20;

        <android.telephony.SmsManager: int RESULT_NO_RESOURCES> = 22;

        <android.telephony.SmsManager: int RESULT_NO_MEMORY> = 13;

        <android.telephony.SmsManager: int RESULT_NO_DEFAULT_SMS_APP> = 32;

        <android.telephony.SmsManager: int RESULT_NO_BLUETOOTH_SERVICE> = 25;

        <android.telephony.SmsManager: int RESULT_NETWORK_REJECT> = 10;

        <android.telephony.SmsManager: int RESULT_NETWORK_ERROR> = 17;

        <android.telephony.SmsManager: int RESULT_MODEM_ERROR> = 16;

        <android.telephony.SmsManager: int RESULT_INVALID_STATE> = 12;

        <android.telephony.SmsManager: int RESULT_INVALID_SMS_FORMAT> = 14;

        <android.telephony.SmsManager: int RESULT_INVALID_SMSC_ADDRESS> = 19;

        <android.telephony.SmsManager: int RESULT_INVALID_BLUETOOTH_ADDRESS> = 26;

        <android.telephony.SmsManager: int RESULT_INVALID_ARGUMENTS> = 11;

        <android.telephony.SmsManager: int RESULT_INTERNAL_ERROR> = 21;

        <android.telephony.SmsManager: int RESULT_ERROR_SHORT_CODE_NOT_ALLOWED> = 7;

        <android.telephony.SmsManager: int RESULT_ERROR_SHORT_CODE_NEVER_ALLOWED> = 8;

        <android.telephony.SmsManager: int RESULT_ERROR_RADIO_OFF> = 2;

        <android.telephony.SmsManager: int RESULT_ERROR_NULL_PDU> = 3;

        <android.telephony.SmsManager: int RESULT_ERROR_NO_SERVICE> = 4;

        <android.telephony.SmsManager: int RESULT_ERROR_NONE> = 0;

        <android.telephony.SmsManager: int RESULT_ERROR_LIMIT_EXCEEDED> = 5;

        <android.telephony.SmsManager: int RESULT_ERROR_GENERIC_FAILURE> = 1;

        <android.telephony.SmsManager: int RESULT_ERROR_FDN_CHECK_FAILURE> = 6;

        <android.telephony.SmsManager: int RESULT_ENCODING_ERROR> = 18;

        <android.telephony.SmsManager: int RESULT_CANCELLED> = 23;

        <android.telephony.SmsManager: int RESULT_BLUETOOTH_DISCONNECTED> = 27;

        <android.telephony.SmsManager: java.lang.String REGEX_PREFIX_DELIMITER> = ",";

        <android.telephony.SmsManager: int PREMIUM_SMS_CONSENT_UNKNOWN> = 0;

        <android.telephony.SmsManager: int PREMIUM_SMS_CONSENT_NEVER_ALLOW> = 2;

        <android.telephony.SmsManager: int PREMIUM_SMS_CONSENT_ASK_USER> = 1;

        <android.telephony.SmsManager: int PREMIUM_SMS_CONSENT_ALWAYS_ALLOW> = 3;

        <android.telephony.SmsManager: int MMS_ERROR_UNSPECIFIED> = 1;

        <android.telephony.SmsManager: int MMS_ERROR_UNABLE_CONNECT_MMS> = 3;

        <android.telephony.SmsManager: int MMS_ERROR_RETRY> = 6;

        <android.telephony.SmsManager: int MMS_ERROR_NO_DATA_NETWORK> = 8;

        <android.telephony.SmsManager: int MMS_ERROR_IO_ERROR> = 5;

        <android.telephony.SmsManager: int MMS_ERROR_INVALID_APN> = 2;

        <android.telephony.SmsManager: int MMS_ERROR_HTTP_FAILURE> = 4;

        <android.telephony.SmsManager: int MMS_ERROR_CONFIGURATION_ERROR> = 7;

        <android.telephony.SmsManager: java.lang.String MMS_CONFIG_USER_AGENT> = "userAgent";

        <android.telephony.SmsManager: java.lang.String MMS_CONFIG_UA_PROF_URL> = "uaProfUrl";

        <android.telephony.SmsManager: java.lang.String MMS_CONFIG_UA_PROF_TAG_NAME> = "uaProfTagName";

        <android.telephony.SmsManager: java.lang.String MMS_CONFIG_SUPPORT_MMS_CONTENT_DISPOSITION> = "supportMmsContentDisposition";

        <android.telephony.SmsManager: java.lang.String MMS_CONFIG_SUPPORT_HTTP_CHARSET_HEADER> = "supportHttpCharsetHeader";

        <android.telephony.SmsManager: java.lang.String MMS_CONFIG_SUBJECT_MAX_LENGTH> = "maxSubjectLength";

        <android.telephony.SmsManager: java.lang.String MMS_CONFIG_SMS_TO_MMS_TEXT_THRESHOLD> = "smsToMmsTextThreshold";

        <android.telephony.SmsManager: java.lang.String MMS_CONFIG_SMS_TO_MMS_TEXT_LENGTH_THRESHOLD> = "smsToMmsTextLengthThreshold";

        <android.telephony.SmsManager: java.lang.String MMS_CONFIG_SMS_DELIVERY_REPORT_ENABLED> = "enableSMSDeliveryReports";

        <android.telephony.SmsManager: java.lang.String MMS_CONFIG_SHOW_CELL_BROADCAST_APP_LINKS> = "config_cellBroadcastAppLinks";

        <android.telephony.SmsManager: java.lang.String MMS_CONFIG_SEND_MULTIPART_SMS_AS_SEPARATE_MESSAGES> = "sendMultipartSmsAsSeparateMessages";

        <android.telephony.SmsManager: java.lang.String MMS_CONFIG_RECIPIENT_LIMIT> = "recipientLimit";

        <android.telephony.SmsManager: java.lang.String MMS_CONFIG_NOTIFY_WAP_MMSC_ENABLED> = "enabledNotifyWapMMSC";

        <android.telephony.SmsManager: java.lang.String MMS_CONFIG_NAI_SUFFIX> = "naiSuffix";

        <android.telephony.SmsManager: java.lang.String MMS_CONFIG_MULTIPART_SMS_ENABLED> = "enableMultipartSMS";

        <android.telephony.SmsManager: java.lang.String MMS_CONFIG_MMS_READ_REPORT_ENABLED> = "enableMMSReadReports";

        <android.telephony.SmsManager: java.lang.String MMS_CONFIG_MMS_ENABLED> = "enabledMMS";

        <android.telephony.SmsManager: java.lang.String MMS_CONFIG_MMS_DELIVERY_REPORT_ENABLED> = "enableMMSDeliveryReports";

        <android.telephony.SmsManager: java.lang.String MMS_CONFIG_MESSAGE_TEXT_MAX_SIZE> = "maxMessageTextSize";

        <android.telephony.SmsManager: java.lang.String MMS_CONFIG_MAX_MESSAGE_SIZE> = "maxMessageSize";

        <android.telephony.SmsManager: java.lang.String MMS_CONFIG_MAX_IMAGE_WIDTH> = "maxImageWidth";

        <android.telephony.SmsManager: java.lang.String MMS_CONFIG_MAX_IMAGE_HEIGHT> = "maxImageHeight";

        <android.telephony.SmsManager: java.lang.String MMS_CONFIG_HTTP_SOCKET_TIMEOUT> = "httpSocketTimeout";

        <android.telephony.SmsManager: java.lang.String MMS_CONFIG_HTTP_PARAMS> = "httpParams";

        <android.telephony.SmsManager: java.lang.String MMS_CONFIG_GROUP_MMS_ENABLED> = "enableGroupMms";

        <android.telephony.SmsManager: java.lang.String MMS_CONFIG_EMAIL_GATEWAY_NUMBER> = "emailGatewayNumber";

        <android.telephony.SmsManager: java.lang.String MMS_CONFIG_CLOSE_CONNECTION> = "mmsCloseConnection";

        <android.telephony.SmsManager: java.lang.String MMS_CONFIG_APPEND_TRANSACTION_ID> = "enabledTransID";

        <android.telephony.SmsManager: java.lang.String MMS_CONFIG_ALLOW_ATTACH_AUDIO> = "allowAttachAudio";

        <android.telephony.SmsManager: java.lang.String MMS_CONFIG_ALIAS_MIN_CHARS> = "aliasMinChars";

        <android.telephony.SmsManager: java.lang.String MMS_CONFIG_ALIAS_MAX_CHARS> = "aliasMaxChars";

        <android.telephony.SmsManager: java.lang.String MMS_CONFIG_ALIAS_ENABLED> = "aliasEnabled";

        <android.telephony.SmsManager: long GET_TARGET_SDK_VERSION_CODE_CHANGE> = 145147528L;

        <android.telephony.SmsManager: java.lang.String EXTRA_STATUS> = "android.telephony.extra.STATUS";

        <android.telephony.SmsManager: java.lang.String EXTRA_SMS_MESSAGE> = "android.telephony.extra.SMS_MESSAGE";

        <android.telephony.SmsManager: java.lang.String EXTRA_SIM_SUBSCRIPTION_ID> = "android.telephony.extra.SIM_SUBSCRIPTION_ID";

        <android.telephony.SmsManager: java.lang.String EXTRA_MMS_HTTP_STATUS> = "android.telephony.extra.MMS_HTTP_STATUS";

        <android.telephony.SmsManager: java.lang.String EXTRA_MMS_DATA> = "android.telephony.extra.MMS_DATA";

        <android.telephony.SmsManager: int CDMA_SMS_RECORD_LENGTH> = 255;

        $r0 = new android.telephony.SmsManager;

        specialinvoke $r0.<android.telephony.SmsManager: void <init>(int)>(2147483647);

        <android.telephony.SmsManager: android.telephony.SmsManager sInstance> = $r0;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        <android.telephony.SmsManager: java.lang.Object sLockObject> = $r1;

        $r2 = new android.util.ArrayMap;

        specialinvoke $r2.<android.util.ArrayMap: void <init>()>();

        <android.telephony.SmsManager: java.util.Map sSubInstances> = $r2;

        return;
    }

    private void <init>(int)
    {
        android.telephony.SmsManager r0;
        int i0;

        r0 := @this: android.telephony.SmsManager;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.telephony.SmsManager: int mSubId> = i0;

        return;
    }

    static com.android.internal.telephony.ISms access$000()
    {
        com.android.internal.telephony.ISms $r0;

        $r0 = staticinvoke <android.telephony.SmsManager: com.android.internal.telephony.ISms getISmsServiceOrThrow()>();

        return $r0;
    }

    static void access$100(android.app.PendingIntent, int)
    {
        android.app.PendingIntent r0;
        int i0;

        r0 := @parameter0: android.app.PendingIntent;

        i0 := @parameter1: int;

        staticinvoke <android.telephony.SmsManager: void notifySmsError(android.app.PendingIntent,int)>(r0, i0);

        return;
    }

    static void access$200(java.util.List, int)
    {
        java.util.List r0;
        int i0;

        r0 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        staticinvoke <android.telephony.SmsManager: void notifySmsError(java.util.List,int)>(r0, i0);

        return;
    }

    static void access$300(android.telephony.SmsManager, android.telephony.SmsManager$SubscriptionResolverResult, int, boolean)
    {
        android.telephony.SmsManager r0;
        android.telephony.SmsManager$SubscriptionResolverResult r1;
        int i0;
        boolean z0;

        r0 := @parameter0: android.telephony.SmsManager;

        r1 := @parameter1: android.telephony.SmsManager$SubscriptionResolverResult;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        specialinvoke r0.<android.telephony.SmsManager: void sendResolverResult(android.telephony.SmsManager$SubscriptionResolverResult,int,boolean)>(r1, i0, z0);

        return;
    }

    private java.util.ArrayList createMessageListFromRawRecords(java.util.List)
    {
        android.telephony.SmsManager r0;
        java.util.List r1;
        int i0, $i1, $i2, i3;
        java.util.ArrayList $r3;
        java.lang.Object $r4;
        byte[] $r5;
        com.android.internal.telephony.SmsRawData r6;
        android.telephony.SmsMessage r7;

        r0 := @this: android.telephony.SmsManager;

        r1 := @parameter0: java.util.List;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        if r1 == null goto label3;

        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i3);

        r6 = (com.android.internal.telephony.SmsRawData) $r4;

        if r6 == null goto label2;

        $i1 = i3 + 1;

        $r5 = virtualinvoke r6.<com.android.internal.telephony.SmsRawData: byte[] getBytes()>();

        $i2 = virtualinvoke r0.<android.telephony.SmsManager: int getSubscriptionId()>();

        r7 = staticinvoke <android.telephony.SmsMessage: android.telephony.SmsMessage createFromEfRecord(int,byte[],int)>($i1, $r5, $i2);

        if r7 == null goto label2;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r7);

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return $r3;
    }

    public static android.telephony.SmsManager getDefault()
    {
        android.telephony.SmsManager $r0;

        $r0 = <android.telephony.SmsManager: android.telephony.SmsManager sInstance>;

        return $r0;
    }

    public static int getDefaultSmsSubscriptionId()
    {
        int i0;
        com.android.internal.telephony.ISms $r0;
        android.os.RemoteException $r1;
        java.lang.NullPointerException $r2;

     label1:
        $r0 = staticinvoke <android.telephony.SmsManager: com.android.internal.telephony.ISms getISmsService()>();

        i0 = interfaceinvoke $r0.<com.android.internal.telephony.ISms: int getPreferredSmsSubscription()>();

     label2:
        return i0;

     label3:
        $r2 := @caughtexception;

        return -1;

     label4:
        $r1 := @caughtexception;

        return -1;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    private static com.android.internal.telephony.ISms getISmsService()
    {
        com.android.internal.telephony.ISms $r0;

        $r0 = staticinvoke <android.telephony.TelephonyManager: com.android.internal.telephony.ISms getSmsService()>();

        return $r0;
    }

    private static com.android.internal.telephony.ISms getISmsServiceOrThrow()
    {
        com.android.internal.telephony.ISms r0;
        java.lang.UnsupportedOperationException $r1;

        r0 = staticinvoke <android.telephony.TelephonyManager: com.android.internal.telephony.ISms getSmsService()>();

        if r0 == null goto label1;

        return r0;

     label1:
        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Sms is not supported");

        throw $r1;
    }

    private static com.android.internal.telephony.ITelephony getITelephony()
    {
        com.android.internal.telephony.ITelephony r0;
        android.os.TelephonyServiceManager $r1;
        android.os.TelephonyServiceManager$ServiceRegisterer $r2;
        android.os.IBinder $r3;
        java.lang.RuntimeException $r4;

        $r1 = staticinvoke <android.telephony.TelephonyFrameworkInitializer: android.os.TelephonyServiceManager getTelephonyServiceManager()>();

        $r2 = virtualinvoke $r1.<android.os.TelephonyServiceManager: android.os.TelephonyServiceManager$ServiceRegisterer getTelephonyServiceRegisterer()>();

        $r3 = virtualinvoke $r2.<android.os.TelephonyServiceManager$ServiceRegisterer: android.os.IBinder get()>();

        r0 = staticinvoke <com.android.internal.telephony.ITelephony$Stub: com.android.internal.telephony.ITelephony asInterface(android.os.IBinder)>($r3);

        if r0 == null goto label1;

        return r0;

     label1:
        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Could not find Telephony Service.");

        throw $r4;
    }

    public static android.telephony.SmsManager getSmsManagerForSubscriptionId(int)
    {
        int i0;
        java.lang.Object r0, $r4;
        android.telephony.SmsManager r1, r9;
        java.util.Map $r2, $r5;
        java.lang.Integer $r3, $r6;
        java.lang.Throwable $r8;

        i0 := @parameter0: int;

        r0 = <android.telephony.SmsManager: java.lang.Object sLockObject>;

        entermonitor r0;

     label1:
        $r2 = <android.telephony.SmsManager: java.util.Map sSubInstances>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r1 = (android.telephony.SmsManager) $r4;

     label2:
        r9 = r1;

        if r1 != null goto label5;

     label3:
        r9 = new android.telephony.SmsManager;

        specialinvoke r9.<android.telephony.SmsManager: void <init>(int)>(i0);

     label4:
        $r5 = <android.telephony.SmsManager: java.util.Map sSubInstances>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r9);

     label5:
        exitmonitor r0;

     label6:
        return r9;

     label7:
        $r8 := @caughtexception;

     label8:
        exitmonitor r0;

     label9:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private static void notifySmsError(android.app.PendingIntent, int)
    {
        int i0;
        android.app.PendingIntent$CanceledException $r0;
        android.app.PendingIntent r1;

        r1 := @parameter0: android.app.PendingIntent;

        i0 := @parameter1: int;

        if r1 == null goto label4;

     label1:
        virtualinvoke r1.<android.app.PendingIntent: void send(int)>(i0);

     label2:
        goto label4;

     label3:
        $r0 := @caughtexception;

     label4:
        return;

        catch android.app.PendingIntent$CanceledException from label1 to label2 with label3;
    }

    private static void notifySmsError(java.util.List, int)
    {
        int i0;
        boolean $z0;
        java.lang.Object $r0;
        android.app.PendingIntent $r1;
        java.util.List r2;
        java.util.Iterator r3;

        r2 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        if r2 == null goto label2;

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r0 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r1 = (android.app.PendingIntent) $r0;

        staticinvoke <android.telephony.SmsManager: void notifySmsError(android.app.PendingIntent,int)>($r1, i0);

        goto label1;

     label2:
        return;
    }

    private void resolveSubscriptionForOperation(android.telephony.SmsManager$SubscriptionResolverResult)
    {
        android.telephony.SmsManager r0;
        android.telephony.SmsManager$SubscriptionResolverResult r1;
        int i0;
        android.telephony.SmsManager$6 r2;
        android.os.RemoteException $r3, $r4;
        boolean z1;
        com.android.internal.telephony.ISms r5;
        com.android.internal.telephony.ITelephony r7;

        r0 := @this: android.telephony.SmsManager;

        r1 := @parameter0: android.telephony.SmsManager$SubscriptionResolverResult;

        i0 = virtualinvoke r0.<android.telephony.SmsManager: int getSubscriptionId()>();

        z1 = 0;

     label01:
        r5 = staticinvoke <android.telephony.SmsManager: com.android.internal.telephony.ISms getISmsService()>();

     label02:
        if r5 == null goto label04;

     label03:
        z1 = interfaceinvoke r5.<com.android.internal.telephony.ISms: boolean isSmsSimPickActivityNeeded(int)>(i0);

     label04:
        goto label06;

     label05:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SmsManager", "resolveSubscriptionForOperation", $r4);

        z1 = 0;

     label06:
        if z1 != 0 goto label07;

        specialinvoke r0.<android.telephony.SmsManager: void sendResolverResult(android.telephony.SmsManager$SubscriptionResolverResult,int,boolean)>(r1, i0, 0);

        return;

     label07:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("SmsManager", "resolveSubscriptionForOperation isSmsSimPickActivityNeeded is true for calling package. ");

     label08:
        r7 = staticinvoke <android.telephony.SmsManager: com.android.internal.telephony.ITelephony getITelephony()>();

        r2 = new android.telephony.SmsManager$6;

        specialinvoke r2.<android.telephony.SmsManager$6: void <init>(android.telephony.SmsManager,android.telephony.SmsManager$SubscriptionResolverResult)>(r0, r1);

        interfaceinvoke r7.<com.android.internal.telephony.ITelephony: void enqueueSmsPickResult(java.lang.String,java.lang.String,com.android.internal.telephony.IIntegerConsumer)>(null, null, r2);

     label09:
        goto label11;

     label10:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SmsManager", "Unable to launch activity", $r3);

        specialinvoke r0.<android.telephony.SmsManager: void sendResolverResult(android.telephony.SmsManager$SubscriptionResolverResult,int,boolean)>(r1, i0, 1);

     label11:
        return;

        catch android.os.RemoteException from label01 to label02 with label05;
        catch android.os.RemoteException from label03 to label04 with label05;
        catch android.os.RemoteException from label08 to label09 with label10;
    }

    private void sendMultipartTextMessageInternal(java.lang.String, java.lang.String, java.util.List, java.util.List, java.util.List, boolean, int, boolean, int)
    {
        android.telephony.SmsManager r0;
        java.util.List r1, r2, r15;
        boolean z0, z1, $z2;
        int i0, $i1, $i2, $i3, i4, i5, $i6;
        java.lang.IllegalArgumentException $r3, $r4;
        java.lang.Object $r5, $r6, $r21;
        android.telephony.SmsManager$4 $r7;
        android.os.RemoteException $r8, $r12, r17;
        java.lang.StringBuilder $r9;
        java.lang.String $r10, $r11, r13, r14, $r22;
        com.android.internal.telephony.ISms r16;
        android.app.PendingIntent r19, r20;

        r0 := @this: android.telephony.SmsManager;

        r13 := @parameter0: java.lang.String;

        r14 := @parameter1: java.lang.String;

        r1 := @parameter2: java.util.List;

        r15 := @parameter3: java.util.List;

        r2 := @parameter4: java.util.List;

        z0 := @parameter5: boolean;

        i4 := @parameter6: int;

        z1 := @parameter7: boolean;

        i5 := @parameter8: int;

        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r13);

        if $z2 != 0 goto label23;

        if r1 == null goto label22;

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i1 < 1 goto label22;

        if i4 < 0 goto label02;

        if i4 <= 3 goto label01;

        goto label02;

     label01:
        goto label03;

     label02:
        i4 = -1;

     label03:
        if i5 < 5 goto label05;

        if i5 <= 635040 goto label04;

        goto label05;

     label04:
        goto label06;

     label05:
        i5 = -1;

     label06:
        $i6 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i6 <= 1 goto label17;

        if z0 == 0 goto label07;

        $r7 = new android.telephony.SmsManager$4;

        specialinvoke $r7.<android.telephony.SmsManager$4: void <init>(android.telephony.SmsManager,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,boolean,int,boolean,int)>(r0, r13, r14, r1, r15, r2, z0, i4, z1, i5);

        specialinvoke r0.<android.telephony.SmsManager: void resolveSubscriptionForOperation(android.telephony.SmsManager$SubscriptionResolverResult)>($r7);

        goto label16;

     label07:
        r16 = staticinvoke <android.telephony.SmsManager: com.android.internal.telephony.ISms getISmsServiceOrThrow()>();

     label08:
        if r16 == null goto label13;

     label09:
        i0 = virtualinvoke r0.<android.telephony.SmsManager: int getSubscriptionId()>();

     label10:
        interfaceinvoke r16.<com.android.internal.telephony.ISms: void sendMultipartTextForSubscriberWithOptions(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,boolean,int,boolean,int)>(i0, null, null, r13, r14, r1, r15, r2, z0, i4, z1, i5);

     label11:
        goto label13;

     label12:
        $r12 := @caughtexception;

        r17 = $r12;

        goto label15;

     label13:
        goto label16;

     label14:
        $r8 := @caughtexception;

        r17 = $r8;

     label15:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sendMultipartTextMessageInternal (no persist): Couldn\'t send SMS - ");

        $r10 = virtualinvoke r17.<android.os.RemoteException: java.lang.String getMessage()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("SmsManager", $r11);

        staticinvoke <android.telephony.SmsManager: void notifySmsError(java.util.List,int)>(r15, 31);

     label16:
        goto label21;

     label17:
        r19 = null;

        if r15 == null goto label18;

        r19 = null;

        $i3 = interfaceinvoke r15.<java.util.List: int size()>();

        if $i3 <= 0 goto label18;

        $r6 = interfaceinvoke r15.<java.util.List: java.lang.Object get(int)>(0);

        r19 = (android.app.PendingIntent) $r6;

     label18:
        if r2 == null goto label19;

        $i2 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i2 <= 0 goto label19;

        $r5 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0);

        r20 = (android.app.PendingIntent) $r5;

        goto label20;

     label19:
        r20 = null;

     label20:
        $r21 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r22 = (java.lang.String) $r21;

        specialinvoke r0.<android.telephony.SmsManager: void sendTextMessageInternal(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,int,boolean,int)>(r13, r14, $r22, r19, r20, z0, i4, z1, i5);

     label21:
        return;

     label22:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid message body");

        throw $r4;

     label23:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid destinationAddress");

        throw $r3;

        catch android.os.RemoteException from label07 to label08 with label14;
        catch android.os.RemoteException from label09 to label10 with label14;
        catch android.os.RemoteException from label10 to label11 with label12;
    }

    private void sendMultipartTextMessageInternal(java.lang.String, java.lang.String, java.util.List, java.util.List, java.util.List, boolean, java.lang.String, java.lang.String, long)
    {
        android.telephony.SmsManager r0;
        java.util.List r1, r2, r16;
        boolean z0, $z1;
        java.lang.String r3, r4, $r12, $r13, r14, r15, $r23;
        long l0;
        java.lang.IllegalArgumentException $r5, $r6;
        int $i1, $i2, $i3, $i4, $i5;
        java.lang.Object $r7, $r8, $r22;
        android.telephony.SmsManager$3 $r9;
        android.os.RemoteException $r10;
        java.lang.StringBuilder $r11;
        com.android.internal.telephony.ISms r17;
        android.app.PendingIntent r20, r21;

        r0 := @this: android.telephony.SmsManager;

        r14 := @parameter0: java.lang.String;

        r15 := @parameter1: java.lang.String;

        r1 := @parameter2: java.util.List;

        r16 := @parameter3: java.util.List;

        r2 := @parameter4: java.util.List;

        z0 := @parameter5: boolean;

        r3 := @parameter6: java.lang.String;

        r4 := @parameter7: java.lang.String;

        l0 := @parameter8: long;

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r14);

        if $z1 != 0 goto label13;

        if r1 == null goto label12;

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i1 < 1 goto label12;

        $i2 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i2 <= 1 goto label07;

        if z0 == 0 goto label01;

        $r9 = new android.telephony.SmsManager$3;

        specialinvoke $r9.<android.telephony.SmsManager$3: void <init>(android.telephony.SmsManager,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,boolean,long)>(r0, r3, r4, r14, r15, r1, r16, r2, z0, l0);

        specialinvoke r0.<android.telephony.SmsManager: void resolveSubscriptionForOperation(android.telephony.SmsManager$SubscriptionResolverResult)>($r9);

        goto label11;

     label01:
        r17 = staticinvoke <android.telephony.SmsManager: com.android.internal.telephony.ISms getISmsServiceOrThrow()>();

     label02:
        if r17 == null goto label06;

     label03:
        $i5 = virtualinvoke r0.<android.telephony.SmsManager: int getSubscriptionId()>();

        interfaceinvoke r17.<com.android.internal.telephony.ISms: void sendMultipartTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,boolean,long)>($i5, r3, r4, r14, r15, r1, r16, r2, z0, l0);

     label04:
        goto label06;

     label05:
        $r10 := @caughtexception;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sendMultipartTextMessageInternal: Couldn\'t send SMS - ");

        $r12 = virtualinvoke $r10.<android.os.RemoteException: java.lang.String getMessage()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" id: ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("SmsManager", $r13);

        staticinvoke <android.telephony.SmsManager: void notifySmsError(java.util.List,int)>(r16, 31);

     label06:
        goto label11;

     label07:
        r20 = null;

        if r16 == null goto label08;

        r20 = null;

        $i4 = interfaceinvoke r16.<java.util.List: int size()>();

        if $i4 <= 0 goto label08;

        $r8 = interfaceinvoke r16.<java.util.List: java.lang.Object get(int)>(0);

        r20 = (android.app.PendingIntent) $r8;

     label08:
        if r2 == null goto label09;

        $i3 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i3 <= 0 goto label09;

        $r7 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0);

        r21 = (android.app.PendingIntent) $r7;

        goto label10;

     label09:
        r21 = null;

     label10:
        $r22 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r23 = (java.lang.String) $r22;

        specialinvoke r0.<android.telephony.SmsManager: void sendTextMessageInternal(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,java.lang.String,java.lang.String,long)>(r14, r15, $r23, r20, r21, 1, r3, r4, l0);

     label11:
        return;

     label12:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid message body");

        throw $r6;

     label13:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid destinationAddress");

        throw $r5;

        catch android.os.RemoteException from label01 to label02 with label05;
        catch android.os.RemoteException from label03 to label04 with label05;
    }

    private void sendResolverResult(android.telephony.SmsManager$SubscriptionResolverResult, int, boolean)
    {
        android.telephony.SmsManager r0;
        android.telephony.SmsManager$SubscriptionResolverResult r1;
        int i0;
        boolean z0, $z1, $z2;

        r0 := @this: android.telephony.SmsManager;

        r1 := @parameter0: android.telephony.SmsManager$SubscriptionResolverResult;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $z1 = staticinvoke <android.telephony.SubscriptionManager: boolean isValidSubscriptionId(int)>(i0);

        if $z1 == 0 goto label1;

        interfaceinvoke r1.<android.telephony.SmsManager$SubscriptionResolverResult: void onSuccess(int)>(i0);

        return;

     label1:
        $z2 = staticinvoke <android.compat.Compatibility: boolean isChangeEnabled(long)>(145147528L);

        if $z2 != 0 goto label2;

        if z0 != 0 goto label2;

        interfaceinvoke r1.<android.telephony.SmsManager$SubscriptionResolverResult: void onSuccess(int)>(i0);

        goto label3;

     label2:
        interfaceinvoke r1.<android.telephony.SmsManager$SubscriptionResolverResult: void onFailure()>();

     label3:
        return;
    }

    private void sendTextMessageInternal(java.lang.String, java.lang.String, java.lang.String, android.app.PendingIntent, android.app.PendingIntent, boolean, int, boolean, int)
    {
        android.telephony.SmsManager r0;
        java.lang.String r1, $r11, $r13, r14, r15;
        android.app.PendingIntent r2, r3;
        boolean z0, z1, $z2, $z3;
        com.android.internal.telephony.ISms r4;
        java.lang.IllegalArgumentException $r5, $r6;
        int $i0, i2, i3;
        android.telephony.SmsManager$2 $r7;
        android.os.RemoteException $r8;
        java.lang.StringBuilder $r9;

        r0 := @this: android.telephony.SmsManager;

        r14 := @parameter0: java.lang.String;

        r15 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: android.app.PendingIntent;

        r3 := @parameter4: android.app.PendingIntent;

        z0 := @parameter5: boolean;

        i2 := @parameter6: int;

        z1 := @parameter7: boolean;

        i3 := @parameter8: int;

        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r14);

        if $z2 != 0 goto label14;

        $z3 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z3 != 0 goto label13;

        if i2 < 0 goto label02;

        if i2 <= 3 goto label01;

        goto label02;

     label01:
        goto label03;

     label02:
        i2 = -1;

     label03:
        if i3 < 5 goto label05;

        if i3 <= 635040 goto label04;

        goto label05;

     label04:
        goto label06;

     label05:
        i3 = -1;

     label06:
        if z0 == 0 goto label07;

        $r7 = new android.telephony.SmsManager$2;

        specialinvoke $r7.<android.telephony.SmsManager$2: void <init>(android.telephony.SmsManager,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,int,boolean,int)>(r0, r14, r15, r1, r2, r3, z0, i2, z1, i3);

        specialinvoke r0.<android.telephony.SmsManager: void resolveSubscriptionForOperation(android.telephony.SmsManager$SubscriptionResolverResult)>($r7);

        goto label12;

     label07:
        r4 = staticinvoke <android.telephony.SmsManager: com.android.internal.telephony.ISms getISmsServiceOrThrow()>();

     label08:
        if r4 == null goto label10;

     label09:
        $i0 = virtualinvoke r0.<android.telephony.SmsManager: int getSubscriptionId()>();

        interfaceinvoke r4.<com.android.internal.telephony.ISms: void sendTextForSubscriberWithOptions(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,int,boolean,int)>($i0, null, null, r14, r15, r1, r2, r3, z0, i2, z1, i3);

     label10:
        goto label12;

     label11:
        $r8 := @caughtexception;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sendTextMessageInternal(no persist): Couldn\'t send SMS, exception - ");

        $r11 = virtualinvoke $r8.<android.os.RemoteException: java.lang.String getMessage()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("SmsManager", $r13);

        staticinvoke <android.telephony.SmsManager: void notifySmsError(android.app.PendingIntent,int)>(r2, 31);

     label12:
        return;

     label13:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid message body");

        throw $r6;

     label14:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid destinationAddress");

        throw $r5;

        catch android.os.RemoteException from label07 to label08 with label11;
        catch android.os.RemoteException from label09 to label10 with label11;
    }

    private void sendTextMessageInternal(java.lang.String, java.lang.String, java.lang.String, android.app.PendingIntent, android.app.PendingIntent, boolean, java.lang.String, java.lang.String, long)
    {
        android.telephony.SmsManager r0;
        java.lang.String r1, r4, r5, $r13, $r17, r18, r19;
        android.app.PendingIntent r2, r3;
        boolean z0, $z1, $z2;
        long l0;
        com.android.internal.telephony.ISms r6;
        java.lang.IllegalArgumentException $r7, $r8;
        int $i1;
        android.telephony.SmsManager$1 $r9;
        android.os.RemoteException $r10;
        java.lang.StringBuilder $r11;

        r0 := @this: android.telephony.SmsManager;

        r18 := @parameter0: java.lang.String;

        r19 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: android.app.PendingIntent;

        r3 := @parameter4: android.app.PendingIntent;

        z0 := @parameter5: boolean;

        r4 := @parameter6: java.lang.String;

        r5 := @parameter7: java.lang.String;

        l0 := @parameter8: long;

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r18);

        if $z1 != 0 goto label7;

        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z2 != 0 goto label6;

        if z0 == 0 goto label1;

        $r9 = new android.telephony.SmsManager$1;

        specialinvoke $r9.<android.telephony.SmsManager$1: void <init>(android.telephony.SmsManager,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,long)>(r0, r4, r5, r18, r19, r1, r2, r3, z0, l0);

        specialinvoke r0.<android.telephony.SmsManager: void resolveSubscriptionForOperation(android.telephony.SmsManager$SubscriptionResolverResult)>($r9);

        goto label5;

     label1:
        r6 = staticinvoke <android.telephony.SmsManager: com.android.internal.telephony.ISms getISmsServiceOrThrow()>();

     label2:
        $i1 = virtualinvoke r0.<android.telephony.SmsManager: int getSubscriptionId()>();

        interfaceinvoke r6.<com.android.internal.telephony.ISms: void sendTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,long)>($i1, r4, r5, r18, r19, r1, r2, r3, z0, l0);

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sendTextMessageInternal (no persist): Couldn\'t send SMS, exception - ");

        $r13 = virtualinvoke $r10.<android.os.RemoteException: java.lang.String getMessage()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" id: ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r17 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("SmsManager", $r17);

        staticinvoke <android.telephony.SmsManager: void notifySmsError(android.app.PendingIntent,int)>(r2, 31);

     label5:
        return;

     label6:
        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid message body");

        throw $r8;

     label7:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid destinationAddress");

        throw $r7;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public int checkSmsShortCodeDestination(java.lang.String, java.lang.String)
    {
        android.telephony.SmsManager r0;
        java.lang.String r1, r4;
        com.android.internal.telephony.ISms r2;
        int i0, $i1;
        android.os.RemoteException $r3;

        r0 := @this: android.telephony.SmsManager;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

     label1:
        r2 = staticinvoke <android.telephony.SmsManager: com.android.internal.telephony.ISms getISmsServiceOrThrow()>();

     label2:
        if r2 == null goto label5;

     label3:
        $i1 = virtualinvoke r0.<android.telephony.SmsManager: int getSubscriptionId()>();

        i0 = interfaceinvoke r2.<com.android.internal.telephony.ISms: int checkSmsShortCodeDestination(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($i1, null, null, r4, r1);

     label4:
        return i0;

     label5:
        goto label7;

     label6:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SmsManager", "checkSmsShortCodeDestination() RemoteException", $r3);

     label7:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public boolean copyMessageToIcc(byte[], byte[], int)
    {
        android.telephony.SmsManager r0;
        byte[] r1, r5;
        int i0, $i1;
        com.android.internal.telephony.ISms r2;
        java.lang.IllegalArgumentException $r3;
        android.os.RemoteException $r4;
        boolean z1;

        r0 := @this: android.telephony.SmsManager;

        r5 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        z1 = 0;

        if r1 == null goto label7;

     label1:
        r2 = staticinvoke <android.telephony.SmsManager: com.android.internal.telephony.ISms getISmsService()>();

     label2:
        if r2 == null goto label4;

     label3:
        $i1 = virtualinvoke r0.<android.telephony.SmsManager: int getSubscriptionId()>();

        z1 = interfaceinvoke r2.<com.android.internal.telephony.ISms: boolean copyMessageToIccEfForSubscriber(int,java.lang.String,int,byte[],byte[])>($i1, null, i0, r1, r5);

     label4:
        goto label6;

     label5:
        $r4 := @caughtexception;

        z1 = 0;

     label6:
        return z1;

     label7:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("pdu is null");

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public java.lang.String createAppSpecificSmsToken(android.app.PendingIntent)
    {
        android.telephony.SmsManager r0;
        com.android.internal.telephony.ISms $r1;
        int $i0;
        android.os.RemoteException $r2;
        android.app.PendingIntent r4;
        java.lang.String r5;

        r0 := @this: android.telephony.SmsManager;

        r4 := @parameter0: android.app.PendingIntent;

     label1:
        $r1 = staticinvoke <android.telephony.SmsManager: com.android.internal.telephony.ISms getISmsServiceOrThrow()>();

        $i0 = virtualinvoke r0.<android.telephony.SmsManager: int getSubscriptionId()>();

        r5 = interfaceinvoke $r1.<com.android.internal.telephony.ISms: java.lang.String createAppSpecificSmsToken(int,java.lang.String,android.app.PendingIntent)>($i0, null, r4);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String createAppSpecificSmsTokenWithPackageInfo(java.lang.String, android.app.PendingIntent)
    {
        android.telephony.SmsManager r0;
        android.app.PendingIntent r1;
        com.android.internal.telephony.ISms $r2;
        int $i0;
        android.os.RemoteException $r3;
        java.lang.String r5, r6;

        r0 := @this: android.telephony.SmsManager;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: android.app.PendingIntent;

     label1:
        $r2 = staticinvoke <android.telephony.SmsManager: com.android.internal.telephony.ISms getISmsServiceOrThrow()>();

        $i0 = virtualinvoke r0.<android.telephony.SmsManager: int getSubscriptionId()>();

        r6 = interfaceinvoke $r2.<com.android.internal.telephony.ISms: java.lang.String createAppSpecificSmsTokenWithPackageInfo(int,java.lang.String,java.lang.String,android.app.PendingIntent)>($i0, null, r5, r1);

     label2:
        return r6;

     label3:
        $r3 := @caughtexception;

        virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean deleteMessageFromIcc(int)
    {
        android.telephony.SmsManager r0;
        int i0, $i1;
        android.os.RemoteException $r1;
        boolean z1;
        com.android.internal.telephony.ISms r2;

        r0 := @this: android.telephony.SmsManager;

        i0 := @parameter0: int;

        z1 = 0;

     label1:
        r2 = staticinvoke <android.telephony.SmsManager: com.android.internal.telephony.ISms getISmsService()>();

     label2:
        if r2 == null goto label4;

     label3:
        $i1 = virtualinvoke r0.<android.telephony.SmsManager: int getSubscriptionId()>();

        z1 = interfaceinvoke r2.<com.android.internal.telephony.ISms: boolean updateMessageOnIccEfForSubscriber(int,java.lang.String,int,int,byte[])>($i1, null, i0, 0, null);

     label4:
        goto label6;

     label5:
        $r1 := @caughtexception;

        z1 = 0;

     label6:
        return z1;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public boolean disableCellBroadcastRange(int, int, int)
    {
        android.telephony.SmsManager r0;
        int i0, i1, i2, $i3;
        java.lang.IllegalArgumentException $r1;
        android.os.RemoteException $r2;
        boolean z1;
        com.android.internal.telephony.ISms r3;

        r0 := @this: android.telephony.SmsManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        z1 = 0;

        if i1 < i0 goto label7;

     label1:
        r3 = staticinvoke <android.telephony.SmsManager: com.android.internal.telephony.ISms getISmsService()>();

     label2:
        if r3 == null goto label4;

     label3:
        $i3 = virtualinvoke r0.<android.telephony.SmsManager: int getSubscriptionId()>();

        z1 = interfaceinvoke r3.<com.android.internal.telephony.ISms: boolean disableCellBroadcastRangeForSubscriber(int,int,int,int)>($i3, i0, i1, i2);

     label4:
        goto label6;

     label5:
        $r2 := @caughtexception;

        z1 = 0;

     label6:
        return z1;

     label7:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("endMessageId < startMessageId");

        throw $r1;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public java.util.ArrayList divideMessage(java.lang.String)
    {
        android.telephony.SmsManager r0;
        java.lang.String r1;
        java.lang.IllegalArgumentException $r2;
        int $i0;
        java.util.ArrayList $r3;

        r0 := @this: android.telephony.SmsManager;

        r1 := @parameter0: java.lang.String;

        if r1 == null goto label1;

        $i0 = virtualinvoke r0.<android.telephony.SmsManager: int getSubscriptionId()>();

        $r3 = staticinvoke <android.telephony.SmsMessage: java.util.ArrayList fragmentText(java.lang.String,int)>(r1, $i0);

        return $r3;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("text is null");

        throw $r2;
    }

    public void downloadMultimediaMessage(android.content.Context, java.lang.String, android.net.Uri, android.os.Bundle, android.app.PendingIntent)
    {
        android.telephony.SmsManager r0;
        java.lang.String r1;
        android.net.Uri r2;
        android.os.Bundle r3;
        android.app.PendingIntent r4;
        boolean $z0;
        java.lang.IllegalArgumentException $r5, $r6;
        java.lang.Object $r7;
        int $i0;
        android.content.Context r8;
        android.telephony.MmsManager r9;

        r0 := @this: android.telephony.SmsManager;

        r8 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.net.Uri;

        r3 := @parameter3: android.os.Bundle;

        r4 := @parameter4: android.app.PendingIntent;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 != 0 goto label3;

        if r2 == null goto label2;

        $r7 = virtualinvoke r8.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("mms");

        r9 = (android.telephony.MmsManager) $r7;

        if r9 == null goto label1;

        $i0 = virtualinvoke r0.<android.telephony.SmsManager: int getSubscriptionId()>();

        virtualinvoke r9.<android.telephony.MmsManager: void downloadMultimediaMessage(int,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent,long)>($i0, r1, r2, r3, r4, 0L);

     label1:
        return;

     label2:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Uri contentUri null");

        throw $r6;

     label3:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Empty MMS location URL");

        throw $r5;
    }

    public boolean enableCellBroadcastRange(int, int, int)
    {
        android.telephony.SmsManager r0;
        int i0, i1, i2, $i3;
        java.lang.IllegalArgumentException $r1;
        android.os.RemoteException $r2;
        boolean z1;
        com.android.internal.telephony.ISms r3;

        r0 := @this: android.telephony.SmsManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        z1 = 0;

        if i1 < i0 goto label7;

     label1:
        r3 = staticinvoke <android.telephony.SmsManager: com.android.internal.telephony.ISms getISmsService()>();

     label2:
        if r3 == null goto label4;

     label3:
        $i3 = virtualinvoke r0.<android.telephony.SmsManager: int getSubscriptionId()>();

        z1 = interfaceinvoke r3.<com.android.internal.telephony.ISms: boolean enableCellBroadcastRangeForSubscriber(int,int,int,int)>($i3, i0, i1, i2);

     label4:
        goto label6;

     label5:
        $r2 := @caughtexception;

        z1 = 0;

     label6:
        return z1;

     label7:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("endMessageId < startMessageId");

        throw $r1;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public java.util.ArrayList getAllMessagesFromIcc()
    {
        android.telephony.SmsManager r0;
        com.android.internal.telephony.ISms r1;
        java.util.ArrayList $r2;
        int $i0;
        android.os.RemoteException $r3;
        java.util.List r4;

        r0 := @this: android.telephony.SmsManager;

        r4 = null;

     label1:
        r1 = staticinvoke <android.telephony.SmsManager: com.android.internal.telephony.ISms getISmsService()>();

     label2:
        if r1 == null goto label4;

     label3:
        $i0 = virtualinvoke r0.<android.telephony.SmsManager: int getSubscriptionId()>();

        r4 = interfaceinvoke r1.<com.android.internal.telephony.ISms: java.util.List getAllMessagesFromIccEfForSubscriber(int,java.lang.String)>($i0, null);

     label4:
        goto label6;

     label5:
        $r3 := @caughtexception;

        r4 = null;

     label6:
        $r2 = specialinvoke r0.<android.telephony.SmsManager: java.util.ArrayList createMessageListFromRawRecords(java.util.List)>(r4);

        return $r2;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public android.os.Bundle getCarrierConfigValues()
    {
        android.telephony.SmsManager r0;
        android.os.Bundle $r1, r4;
        int $i0;
        android.os.RemoteException $r2;
        com.android.internal.telephony.ISms r3;

        r0 := @this: android.telephony.SmsManager;

     label1:
        r3 = staticinvoke <android.telephony.SmsManager: com.android.internal.telephony.ISms getISmsService()>();

     label2:
        if r3 == null goto label5;

     label3:
        $i0 = virtualinvoke r0.<android.telephony.SmsManager: int getSubscriptionId()>();

        r4 = interfaceinvoke r3.<com.android.internal.telephony.ISms: android.os.Bundle getCarrierConfigValuesForSubscriber(int)>($i0);

     label4:
        return r4;

     label5:
        goto label7;

     label6:
        $r2 := @caughtexception;

     label7:
        $r1 = new android.os.Bundle;

        specialinvoke $r1.<android.os.Bundle: void <init>()>();

        return $r1;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public java.lang.String getImsSmsFormat()
    {
        android.telephony.SmsManager r0;
        com.android.internal.telephony.ISms r2;
        int $i0;
        android.os.RemoteException $r3;
        java.lang.String r4;

        r0 := @this: android.telephony.SmsManager;

     label1:
        r2 = staticinvoke <android.telephony.SmsManager: com.android.internal.telephony.ISms getISmsService()>();

     label2:
        r4 = "unknown";

        if r2 == null goto label4;

     label3:
        $i0 = virtualinvoke r0.<android.telephony.SmsManager: int getSubscriptionId()>();

        r4 = interfaceinvoke r2.<com.android.internal.telephony.ISms: java.lang.String getImsSmsFormatForSubscriber(int)>($i0);

     label4:
        goto label6;

     label5:
        $r3 := @caughtexception;

        r4 = "unknown";

     label6:
        return r4;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public java.util.List getMessagesFromIcc()
    {
        android.telephony.SmsManager r0;
        java.util.ArrayList $r1;

        r0 := @this: android.telephony.SmsManager;

        $r1 = virtualinvoke r0.<android.telephony.SmsManager: java.util.ArrayList getAllMessagesFromIcc()>();

        return $r1;
    }

    public int getPremiumSmsConsent(java.lang.String)
    {
        android.telephony.SmsManager r0;
        com.android.internal.telephony.ISms r1;
        android.os.RemoteException $r2;
        java.lang.String r3;
        int i2;

        r0 := @this: android.telephony.SmsManager;

        r3 := @parameter0: java.lang.String;

        i2 = 0;

     label1:
        r1 = staticinvoke <android.telephony.SmsManager: com.android.internal.telephony.ISms getISmsService()>();

     label2:
        if r1 == null goto label4;

     label3:
        i2 = interfaceinvoke r1.<com.android.internal.telephony.ISms: int getPremiumSmsPermission(java.lang.String)>(r3);

     label4:
        goto label6;

     label5:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SmsManager", "getPremiumSmsPermission() RemoteException", $r2);

        i2 = 0;

     label6:
        return i2;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public int getSmsCapacityOnIcc()
    {
        android.telephony.SmsManager r0;
        int $i1, i2;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ISms r2;

        r0 := @this: android.telephony.SmsManager;

        i2 = 0;

     label1:
        r2 = staticinvoke <android.telephony.SmsManager: com.android.internal.telephony.ISms getISmsService()>();

     label2:
        if r2 == null goto label4;

     label3:
        $i1 = virtualinvoke r0.<android.telephony.SmsManager: int getSubscriptionId()>();

        i2 = interfaceinvoke r2.<com.android.internal.telephony.ISms: int getSmsCapacityOnIccForSubscriber(int)>($i1);

     label4:
        goto label6;

     label5:
        $r1 := @caughtexception;

        i2 = 0;

     label6:
        return i2;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void getSmsMessagesForFinancialApp(android.os.Bundle, java.util.concurrent.Executor, android.telephony.SmsManager$FinancialSmsCallback)
    {
        android.telephony.SmsManager r0;
        android.os.Bundle r1;
        java.util.concurrent.Executor r2;
        android.telephony.SmsManager$FinancialSmsCallback r3;

        r0 := @this: android.telephony.SmsManager;

        r1 := @parameter0: android.os.Bundle;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: android.telephony.SmsManager$FinancialSmsCallback;

        return;
    }

    public java.lang.String getSmscAddress()
    {
        android.telephony.SmsManager r0;
        com.android.internal.telephony.ISms r1;
        int $i0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.telephony.SmsManager;

        r4 = null;

     label1:
        r1 = staticinvoke <android.telephony.SmsManager: com.android.internal.telephony.ISms getISmsService()>();

     label2:
        if r1 == null goto label4;

     label3:
        $i0 = virtualinvoke r0.<android.telephony.SmsManager: int getSubscriptionId()>();

        r4 = interfaceinvoke r1.<com.android.internal.telephony.ISms: java.lang.String getSmscAddressFromIccEfForSubscriber(int,java.lang.String)>($i0, null);

     label4:
        return r4;

     label5:
        $r2 := @caughtexception;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r2);

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public int getSubscriptionId()
    {
        android.telephony.SmsManager r0;
        int $i0, i1;
        com.android.internal.telephony.ISms $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.telephony.SmsManager;

     label1:
        $i0 = r0.<android.telephony.SmsManager: int mSubId>;

        if $i0 != 2147483647 goto label3;

        $r2 = staticinvoke <android.telephony.SmsManager: com.android.internal.telephony.ISms getISmsServiceOrThrow()>();

        i1 = interfaceinvoke $r2.<com.android.internal.telephony.ISms: int getPreferredSmsSubscription()>();

     label2:
        goto label4;

     label3:
        i1 = r0.<android.telephony.SmsManager: int mSubId>;

     label4:
        return i1;

     label5:
        $r3 := @caughtexception;

        return -1;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void injectSmsPdu(byte[], java.lang.String, android.app.PendingIntent)
    {
        android.telephony.SmsManager r0;
        java.lang.String r1;
        android.app.PendingIntent r2;
        com.android.internal.telephony.ISms r3;
        boolean $z0, $z1;
        int $i0;
        java.lang.IllegalArgumentException $r4;
        android.app.PendingIntent$CanceledException $r5;
        android.os.RemoteException $r6;
        byte[] r7;

        r0 := @this: android.telephony.SmsManager;

        r7 := @parameter0: byte[];

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.app.PendingIntent;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("3gpp");

        if $z0 != 0 goto label02;

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("3gpp2");

        if $z1 == 0 goto label01;

        goto label02;

     label01:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid pdu format. format must be either 3gpp or 3gpp2");

        throw $r4;

     label02:
        r3 = staticinvoke <android.telephony.TelephonyManager: com.android.internal.telephony.ISms getSmsService()>();

     label03:
        if r3 == null goto label05;

     label04:
        $i0 = virtualinvoke r0.<android.telephony.SmsManager: int getSubscriptionId()>();

        interfaceinvoke r3.<com.android.internal.telephony.ISms: void injectSmsPduForSubscriber(int,byte[],java.lang.String,android.app.PendingIntent)>($i0, r7, r1, r2);

     label05:
        goto label10;

     label06:
        $r6 := @caughtexception;

        if r2 == null goto label10;

     label07:
        virtualinvoke r2.<android.app.PendingIntent: void send(int)>(31);

     label08:
        goto label10;

     label09:
        $r5 := @caughtexception;

        goto label10;

     label10:
        return;

        catch android.os.RemoteException from label02 to label03 with label06;
        catch android.os.RemoteException from label04 to label05 with label06;
        catch android.app.PendingIntent$CanceledException from label07 to label08 with label09;
    }

    public boolean isImsSmsSupported()
    {
        android.telephony.SmsManager r0;
        int $i0;
        android.os.RemoteException $r1;
        boolean z1;
        com.android.internal.telephony.ISms r2;

        r0 := @this: android.telephony.SmsManager;

        z1 = 0;

     label1:
        r2 = staticinvoke <android.telephony.SmsManager: com.android.internal.telephony.ISms getISmsService()>();

     label2:
        if r2 == null goto label4;

     label3:
        $i0 = virtualinvoke r0.<android.telephony.SmsManager: int getSubscriptionId()>();

        z1 = interfaceinvoke r2.<com.android.internal.telephony.ISms: boolean isImsSmsSupportedForSubscriber(int)>($i0);

     label4:
        goto label6;

     label5:
        $r1 := @caughtexception;

        z1 = 0;

     label6:
        return z1;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public boolean isSMSPromptEnabled()
    {
        android.telephony.SmsManager r0;
        boolean z0;
        com.android.internal.telephony.ISms $r1;
        java.lang.NullPointerException $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.telephony.SmsManager;

     label1:
        $r1 = staticinvoke <android.telephony.TelephonyManager: com.android.internal.telephony.ISms getSmsService()>();

        z0 = interfaceinvoke $r1.<com.android.internal.telephony.ISms: boolean isSMSPromptEnabled()>();

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        return 0;

     label4:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public boolean resetAllCellBroadcastRanges()
    {
        android.telephony.SmsManager r0;
        int $i0;
        android.os.RemoteException $r1;
        boolean z1;
        com.android.internal.telephony.ISms r2;

        r0 := @this: android.telephony.SmsManager;

        z1 = 0;

     label1:
        r2 = staticinvoke <android.telephony.SmsManager: com.android.internal.telephony.ISms getISmsService()>();

     label2:
        if r2 == null goto label4;

     label3:
        $i0 = virtualinvoke r0.<android.telephony.SmsManager: int getSubscriptionId()>();

        z1 = interfaceinvoke r2.<com.android.internal.telephony.ISms: boolean resetAllCellBroadcastRanges(int)>($i0);

     label4:
        goto label6;

     label5:
        $r1 := @caughtexception;

        z1 = 0;

     label6:
        return z1;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void sendDataMessage(java.lang.String, java.lang.String, short, byte[], android.app.PendingIntent, android.app.PendingIntent)
    {
        android.telephony.SmsManager r0;
        java.lang.String r1, r2;
        short s0;
        byte[] r3;
        android.app.PendingIntent r4, r5;
        boolean $z0;
        java.lang.IllegalArgumentException $r6, $r7;
        int $i1;
        android.telephony.SmsManager$5 $r8;

        r0 := @this: android.telephony.SmsManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        s0 := @parameter2: short;

        r3 := @parameter3: byte[];

        r4 := @parameter4: android.app.PendingIntent;

        r5 := @parameter5: android.app.PendingIntent;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 != 0 goto label2;

        if r3 == null goto label1;

        $i1 = lengthof r3;

        if $i1 == 0 goto label1;

        $r8 = new android.telephony.SmsManager$5;

        specialinvoke $r8.<android.telephony.SmsManager$5: void <init>(android.telephony.SmsManager,java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)>(r0, r1, r2, s0, r3, r4, r5);

        specialinvoke r0.<android.telephony.SmsManager: void resolveSubscriptionForOperation(android.telephony.SmsManager$SubscriptionResolverResult)>($r8);

        return;

     label1:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid message data");

        throw $r7;

     label2:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid destinationAddress");

        throw $r6;
    }

    public void sendMultimediaMessage(android.content.Context, android.net.Uri, java.lang.String, android.os.Bundle, android.app.PendingIntent)
    {
        android.telephony.SmsManager r0;
        android.net.Uri r1;
        java.lang.String r2;
        android.os.Bundle r3;
        android.app.PendingIntent r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.Object $r6;
        int $i0;
        android.content.Context r7;
        android.telephony.MmsManager r8;

        r0 := @this: android.telephony.SmsManager;

        r7 := @parameter0: android.content.Context;

        r1 := @parameter1: android.net.Uri;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: android.os.Bundle;

        r4 := @parameter4: android.app.PendingIntent;

        if r1 == null goto label2;

        $r6 = virtualinvoke r7.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("mms");

        r8 = (android.telephony.MmsManager) $r6;

        if r8 == null goto label1;

        $i0 = virtualinvoke r0.<android.telephony.SmsManager: int getSubscriptionId()>();

        virtualinvoke r8.<android.telephony.MmsManager: void sendMultimediaMessage(int,android.net.Uri,java.lang.String,android.os.Bundle,android.app.PendingIntent,long)>($i0, r1, r2, r3, r4, 0L);

     label1:
        return;

     label2:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Uri contentUri null");

        throw $r5;
    }

    public void sendMultipartTextMessage(java.lang.String, java.lang.String, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList)
    {
        android.telephony.SmsManager r0;
        java.lang.String r1, r2;
        java.util.ArrayList r3, r4, r5;

        r0 := @this: android.telephony.SmsManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.ArrayList;

        r4 := @parameter3: java.util.ArrayList;

        r5 := @parameter4: java.util.ArrayList;

        specialinvoke r0.<android.telephony.SmsManager: void sendMultipartTextMessageInternal(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,boolean,java.lang.String,java.lang.String,long)>(r1, r2, r3, r4, r5, 1, null, null, 0L);

        return;
    }

    public void sendMultipartTextMessage(java.lang.String, java.lang.String, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, int, boolean, int)
    {
        android.telephony.SmsManager r0;
        java.lang.String r1, r2;
        java.util.ArrayList r3, r4, r5;
        int i0, i1;
        boolean z0;

        r0 := @this: android.telephony.SmsManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.ArrayList;

        r4 := @parameter3: java.util.ArrayList;

        r5 := @parameter4: java.util.ArrayList;

        i0 := @parameter5: int;

        z0 := @parameter6: boolean;

        i1 := @parameter7: int;

        specialinvoke r0.<android.telephony.SmsManager: void sendMultipartTextMessageInternal(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,boolean,int,boolean,int)>(r1, r2, r3, r4, r5, 1, i0, z0, i1);

        return;
    }

    public void sendMultipartTextMessage(java.lang.String, java.lang.String, java.util.List, java.util.List, java.util.List, long)
    {
        android.telephony.SmsManager r0;
        java.lang.String r1, r2;
        java.util.List r3, r4, r5;
        long l0;

        r0 := @this: android.telephony.SmsManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.List;

        r4 := @parameter3: java.util.List;

        r5 := @parameter4: java.util.List;

        l0 := @parameter5: long;

        specialinvoke r0.<android.telephony.SmsManager: void sendMultipartTextMessageInternal(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,boolean,java.lang.String,java.lang.String,long)>(r1, r2, r3, r4, r5, 1, null, null, l0);

        return;
    }

    public void sendMultipartTextMessage(java.lang.String, java.lang.String, java.util.List, java.util.List, java.util.List, java.lang.String, java.lang.String)
    {
        android.telephony.SmsManager r0;
        java.lang.String r1, r2, r6, r7;
        java.util.List r3, r4, r5;

        r0 := @this: android.telephony.SmsManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.List;

        r4 := @parameter3: java.util.List;

        r5 := @parameter4: java.util.List;

        r6 := @parameter5: java.lang.String;

        r7 := @parameter6: java.lang.String;

        specialinvoke r0.<android.telephony.SmsManager: void sendMultipartTextMessageInternal(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,boolean,java.lang.String,java.lang.String,long)>(r1, r2, r3, r4, r5, 1, r6, r7, 0L);

        return;
    }

    public void sendMultipartTextMessageWithoutPersisting(java.lang.String, java.lang.String, java.util.List, java.util.List, java.util.List)
    {
        android.telephony.SmsManager r0;
        java.lang.String r1, r2;
        java.util.List r3, r4, r5;

        r0 := @this: android.telephony.SmsManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.List;

        r4 := @parameter3: java.util.List;

        r5 := @parameter4: java.util.List;

        specialinvoke r0.<android.telephony.SmsManager: void sendMultipartTextMessageInternal(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,boolean,java.lang.String,java.lang.String,long)>(r1, r2, r3, r4, r5, 0, null, null, 0L);

        return;
    }

    public void sendTextMessage(java.lang.String, java.lang.String, java.lang.String, android.app.PendingIntent, android.app.PendingIntent)
    {
        android.telephony.SmsManager r0;
        java.lang.String r1, r2, r3;
        android.app.PendingIntent r4, r5;

        r0 := @this: android.telephony.SmsManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.app.PendingIntent;

        r5 := @parameter4: android.app.PendingIntent;

        specialinvoke r0.<android.telephony.SmsManager: void sendTextMessageInternal(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,java.lang.String,java.lang.String,long)>(r1, r2, r3, r4, r5, 1, null, null, 0L);

        return;
    }

    public void sendTextMessage(java.lang.String, java.lang.String, java.lang.String, android.app.PendingIntent, android.app.PendingIntent, int, boolean, int)
    {
        android.telephony.SmsManager r0;
        java.lang.String r1, r2, r3;
        android.app.PendingIntent r4, r5;
        int i0, i1;
        boolean z0;

        r0 := @this: android.telephony.SmsManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.app.PendingIntent;

        r5 := @parameter4: android.app.PendingIntent;

        i0 := @parameter5: int;

        z0 := @parameter6: boolean;

        i1 := @parameter7: int;

        specialinvoke r0.<android.telephony.SmsManager: void sendTextMessageInternal(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,int,boolean,int)>(r1, r2, r3, r4, r5, 1, i0, z0, i1);

        return;
    }

    public void sendTextMessage(java.lang.String, java.lang.String, java.lang.String, android.app.PendingIntent, android.app.PendingIntent, long)
    {
        android.telephony.SmsManager r0;
        java.lang.String r1, r2, r3;
        android.app.PendingIntent r4, r5;
        long l0;

        r0 := @this: android.telephony.SmsManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.app.PendingIntent;

        r5 := @parameter4: android.app.PendingIntent;

        l0 := @parameter5: long;

        specialinvoke r0.<android.telephony.SmsManager: void sendTextMessageInternal(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,java.lang.String,java.lang.String,long)>(r1, r2, r3, r4, r5, 1, null, null, l0);

        return;
    }

    public void sendTextMessageWithoutPersisting(java.lang.String, java.lang.String, java.lang.String, android.app.PendingIntent, android.app.PendingIntent)
    {
        android.telephony.SmsManager r0;
        java.lang.String r1, r2, r3;
        android.app.PendingIntent r4, r5;

        r0 := @this: android.telephony.SmsManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.app.PendingIntent;

        r5 := @parameter4: android.app.PendingIntent;

        specialinvoke r0.<android.telephony.SmsManager: void sendTextMessageInternal(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,java.lang.String,java.lang.String,long)>(r1, r2, r3, r4, r5, 0, null, null, 0L);

        return;
    }

    public void sendTextMessageWithoutPersisting(java.lang.String, java.lang.String, java.lang.String, android.app.PendingIntent, android.app.PendingIntent, int, boolean, int)
    {
        android.telephony.SmsManager r0;
        java.lang.String r1, r2, r3;
        android.app.PendingIntent r4, r5;
        int i0, i1;
        boolean z0;

        r0 := @this: android.telephony.SmsManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.app.PendingIntent;

        r5 := @parameter4: android.app.PendingIntent;

        i0 := @parameter5: int;

        z0 := @parameter6: boolean;

        i1 := @parameter7: int;

        specialinvoke r0.<android.telephony.SmsManager: void sendTextMessageInternal(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,int,boolean,int)>(r1, r2, r3, r4, r5, 0, i0, z0, i1);

        return;
    }

    public void setPremiumSmsConsent(java.lang.String, int)
    {
        android.telephony.SmsManager r0;
        int i0;
        com.android.internal.telephony.ISms r1;
        android.os.RemoteException $r2;
        java.lang.String r3;

        r0 := @this: android.telephony.SmsManager;

        r3 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        r1 = staticinvoke <android.telephony.SmsManager: com.android.internal.telephony.ISms getISmsService()>();

     label2:
        if r1 == null goto label4;

     label3:
        interfaceinvoke r1.<com.android.internal.telephony.ISms: void setPremiumSmsPermission(java.lang.String,int)>(r3, i0);

     label4:
        goto label6;

     label5:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SmsManager", "setPremiumSmsPermission() RemoteException", $r2);

     label6:
        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public boolean setSmscAddress(java.lang.String)
    {
        android.telephony.SmsManager r0;
        com.android.internal.telephony.ISms r1;
        boolean z0;
        int $i0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.telephony.SmsManager;

        r4 := @parameter0: java.lang.String;

     label1:
        r1 = staticinvoke <android.telephony.SmsManager: com.android.internal.telephony.ISms getISmsService()>();

     label2:
        if r1 == null goto label5;

     label3:
        $i0 = virtualinvoke r0.<android.telephony.SmsManager: int getSubscriptionId()>();

        z0 = interfaceinvoke r1.<com.android.internal.telephony.ISms: boolean setSmscAddressOnIccEfForSubscriber(java.lang.String,int,java.lang.String)>(r4, $i0, null);

     label4:
        return z0;

     label5:
        return 0;

     label6:
        $r2 := @caughtexception;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r2);

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public boolean updateMessageOnIcc(int, int, byte[])
    {
        android.telephony.SmsManager r0;
        int i0, i1, $i2;
        com.android.internal.telephony.ISms r1;
        android.os.RemoteException $r2;
        byte[] r3;
        boolean z1;

        r0 := @this: android.telephony.SmsManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r3 := @parameter2: byte[];

        z1 = 0;

     label1:
        r1 = staticinvoke <android.telephony.SmsManager: com.android.internal.telephony.ISms getISmsService()>();

     label2:
        if r1 == null goto label4;

     label3:
        $i2 = virtualinvoke r0.<android.telephony.SmsManager: int getSubscriptionId()>();

        z1 = interfaceinvoke r1.<com.android.internal.telephony.ISms: boolean updateMessageOnIccEfForSubscriber(int,java.lang.String,int,int,byte[])>($i2, null, i0, i1, r3);

     label4:
        goto label6;

     label5:
        $r2 := @caughtexception;

        z1 = 0;

     label6:
        return z1;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }
}
