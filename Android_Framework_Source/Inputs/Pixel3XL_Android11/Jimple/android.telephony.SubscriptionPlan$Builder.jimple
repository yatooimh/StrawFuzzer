public class android.telephony.SubscriptionPlan$Builder extends java.lang.Object
{
    private final android.telephony.SubscriptionPlan plan;

    public void <init>(java.time.ZonedDateTime, java.time.ZonedDateTime, java.time.Period)
    {
        android.telephony.SubscriptionPlan$Builder r0;
        java.time.ZonedDateTime r1, r2;
        java.time.Period r3;
        android.telephony.SubscriptionPlan $r4;
        android.util.RecurrenceRule $r5;

        r0 := @this: android.telephony.SubscriptionPlan$Builder;

        r1 := @parameter0: java.time.ZonedDateTime;

        r2 := @parameter1: java.time.ZonedDateTime;

        r3 := @parameter2: java.time.Period;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new android.telephony.SubscriptionPlan;

        $r5 = new android.util.RecurrenceRule;

        specialinvoke $r5.<android.util.RecurrenceRule: void <init>(java.time.ZonedDateTime,java.time.ZonedDateTime,java.time.Period)>(r1, r2, r3);

        specialinvoke $r4.<android.telephony.SubscriptionPlan: void <init>(android.util.RecurrenceRule,android.telephony.SubscriptionPlan$1)>($r5, null);

        r0.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan plan> = $r4;

        return;
    }

    public static android.telephony.SubscriptionPlan$Builder createNonrecurring(java.time.ZonedDateTime, java.time.ZonedDateTime)
    {
        java.time.ZonedDateTime r0, r1;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.IllegalArgumentException $r8;
        java.lang.String $r9;
        android.telephony.SubscriptionPlan$Builder $r10;

        r0 := @parameter0: java.time.ZonedDateTime;

        r1 := @parameter1: java.time.ZonedDateTime;

        $z0 = virtualinvoke r1.<java.time.ZonedDateTime: boolean isAfter(java.time.chrono.ChronoZonedDateTime)>(r0);

        if $z0 == 0 goto label1;

        $r10 = new android.telephony.SubscriptionPlan$Builder;

        specialinvoke $r10.<android.telephony.SubscriptionPlan$Builder: void <init>(java.time.ZonedDateTime,java.time.ZonedDateTime,java.time.Period)>(r0, r1, null);

        return $r10;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("End ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" isn\'t after start ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r8;
    }

    public static android.telephony.SubscriptionPlan$Builder createRecurring(java.time.ZonedDateTime, java.time.Period)
    {
        java.time.Period r0;
        boolean $z0, $z1;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r6;
        android.telephony.SubscriptionPlan$Builder $r7;
        java.time.ZonedDateTime r8;

        r8 := @parameter0: java.time.ZonedDateTime;

        r0 := @parameter1: java.time.Period;

        $z0 = virtualinvoke r0.<java.time.Period: boolean isZero()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.time.Period: boolean isNegative()>();

        if $z1 != 0 goto label1;

        $r7 = new android.telephony.SubscriptionPlan$Builder;

        specialinvoke $r7.<android.telephony.SubscriptionPlan$Builder: void <init>(java.time.ZonedDateTime,java.time.ZonedDateTime,java.time.Period)>(r8, null, r0);

        return $r7;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Period ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be positive");

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    public static android.telephony.SubscriptionPlan$Builder createRecurringDaily(java.time.ZonedDateTime)
    {
        java.time.ZonedDateTime r0;
        android.telephony.SubscriptionPlan$Builder $r1;
        java.time.Period $r2;

        r0 := @parameter0: java.time.ZonedDateTime;

        $r1 = new android.telephony.SubscriptionPlan$Builder;

        $r2 = staticinvoke <java.time.Period: java.time.Period ofDays(int)>(1);

        specialinvoke $r1.<android.telephony.SubscriptionPlan$Builder: void <init>(java.time.ZonedDateTime,java.time.ZonedDateTime,java.time.Period)>(r0, null, $r2);

        return $r1;
    }

    public static android.telephony.SubscriptionPlan$Builder createRecurringMonthly(java.time.ZonedDateTime)
    {
        java.time.ZonedDateTime r0;
        android.telephony.SubscriptionPlan$Builder $r1;
        java.time.Period $r2;

        r0 := @parameter0: java.time.ZonedDateTime;

        $r1 = new android.telephony.SubscriptionPlan$Builder;

        $r2 = staticinvoke <java.time.Period: java.time.Period ofMonths(int)>(1);

        specialinvoke $r1.<android.telephony.SubscriptionPlan$Builder: void <init>(java.time.ZonedDateTime,java.time.ZonedDateTime,java.time.Period)>(r0, null, $r2);

        return $r1;
    }

    public static android.telephony.SubscriptionPlan$Builder createRecurringWeekly(java.time.ZonedDateTime)
    {
        java.time.ZonedDateTime r0;
        android.telephony.SubscriptionPlan$Builder $r1;
        java.time.Period $r2;

        r0 := @parameter0: java.time.ZonedDateTime;

        $r1 = new android.telephony.SubscriptionPlan$Builder;

        $r2 = staticinvoke <java.time.Period: java.time.Period ofDays(int)>(7);

        specialinvoke $r1.<android.telephony.SubscriptionPlan$Builder: void <init>(java.time.ZonedDateTime,java.time.ZonedDateTime,java.time.Period)>(r0, null, $r2);

        return $r1;
    }

    public android.telephony.SubscriptionPlan build()
    {
        android.telephony.SubscriptionPlan$Builder r0;
        android.telephony.SubscriptionPlan $r1;

        r0 := @this: android.telephony.SubscriptionPlan$Builder;

        $r1 = r0.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan plan>;

        return $r1;
    }

    public android.telephony.SubscriptionPlan$Builder resetNetworkTypes()
    {
        android.telephony.SubscriptionPlan$Builder r0;
        android.telephony.SubscriptionPlan $r1;
        int[] $r2, $r3, $r4;
        int $i0;

        r0 := @this: android.telephony.SubscriptionPlan$Builder;

        $r1 = r0.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan plan>;

        $r2 = staticinvoke <android.telephony.TelephonyManager: int[] getAllNetworkTypes()>();

        $r3 = staticinvoke <android.telephony.TelephonyManager: int[] getAllNetworkTypes()>();

        $i0 = lengthof $r3;

        $r4 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r2, $i0);

        staticinvoke <android.telephony.SubscriptionPlan: int[] access$802(android.telephony.SubscriptionPlan,int[])>($r1, $r4);

        return r0;
    }

    public android.telephony.SubscriptionPlan$Builder setDataLimit(long, int)
    {
        android.telephony.SubscriptionPlan$Builder r0;
        long l0;
        int i1;
        byte $b2;
        java.lang.IllegalArgumentException $r1, $r2;
        android.telephony.SubscriptionPlan $r3, $r4;

        r0 := @this: android.telephony.SubscriptionPlan$Builder;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $b2 = l0 cmp 0L;

        if $b2 < 0 goto label2;

        if i1 < 0 goto label1;

        $r3 = r0.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan plan>;

        staticinvoke <android.telephony.SubscriptionPlan: long access$402(android.telephony.SubscriptionPlan,long)>($r3, l0);

        $r4 = r0.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan plan>;

        staticinvoke <android.telephony.SubscriptionPlan: int access$502(android.telephony.SubscriptionPlan,int)>($r4, i1);

        return r0;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Limit behavior must be defined");

        throw $r2;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Limit bytes must be positive");

        throw $r1;
    }

    public android.telephony.SubscriptionPlan$Builder setDataUsage(long, long)
    {
        android.telephony.SubscriptionPlan$Builder r0;
        long l0, l1;
        byte $b2, $b3;
        java.lang.IllegalArgumentException $r1, $r2;
        android.telephony.SubscriptionPlan $r3, $r4;

        r0 := @this: android.telephony.SubscriptionPlan$Builder;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $b2 = l0 cmp 0L;

        if $b2 < 0 goto label2;

        $b3 = l1 cmp 0L;

        if $b3 < 0 goto label1;

        $r3 = r0.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan plan>;

        staticinvoke <android.telephony.SubscriptionPlan: long access$602(android.telephony.SubscriptionPlan,long)>($r3, l0);

        $r4 = r0.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan plan>;

        staticinvoke <android.telephony.SubscriptionPlan: long access$702(android.telephony.SubscriptionPlan,long)>($r4, l1);

        return r0;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Usage time must be positive");

        throw $r2;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Usage bytes must be positive");

        throw $r1;
    }

    public android.telephony.SubscriptionPlan$Builder setNetworkTypes(int[])
    {
        android.telephony.SubscriptionPlan$Builder r0;
        int[] r1, $r3;
        int $i0;
        android.telephony.SubscriptionPlan $r2;

        r0 := @this: android.telephony.SubscriptionPlan$Builder;

        r1 := @parameter0: int[];

        $r2 = r0.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan plan>;

        $i0 = lengthof r1;

        $r3 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>(r1, $i0);

        staticinvoke <android.telephony.SubscriptionPlan: int[] access$802(android.telephony.SubscriptionPlan,int[])>($r2, $r3);

        return r0;
    }

    public android.telephony.SubscriptionPlan$Builder setSummary(java.lang.CharSequence)
    {
        android.telephony.SubscriptionPlan$Builder r0;
        java.lang.CharSequence r1;
        android.telephony.SubscriptionPlan $r2;

        r0 := @this: android.telephony.SubscriptionPlan$Builder;

        r1 := @parameter0: java.lang.CharSequence;

        $r2 = r0.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan plan>;

        staticinvoke <android.telephony.SubscriptionPlan: java.lang.CharSequence access$302(android.telephony.SubscriptionPlan,java.lang.CharSequence)>($r2, r1);

        return r0;
    }

    public android.telephony.SubscriptionPlan$Builder setTitle(java.lang.CharSequence)
    {
        android.telephony.SubscriptionPlan$Builder r0;
        java.lang.CharSequence r1;
        android.telephony.SubscriptionPlan $r2;

        r0 := @this: android.telephony.SubscriptionPlan$Builder;

        r1 := @parameter0: java.lang.CharSequence;

        $r2 = r0.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan plan>;

        staticinvoke <android.telephony.SubscriptionPlan: java.lang.CharSequence access$202(android.telephony.SubscriptionPlan,java.lang.CharSequence)>($r2, r1);

        return r0;
    }
}
