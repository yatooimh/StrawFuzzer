public class android.telephony.TelephonyManager extends java.lang.Object
{
    public static final java.lang.String ACTION_ANOMALY_REPORTED;
    public static final java.lang.String ACTION_CALL_DISCONNECT_CAUSE_CHANGED;
    public static final java.lang.String ACTION_CARRIER_MESSAGING_CLIENT_SERVICE;
    public static final java.lang.String ACTION_CARRIER_SIGNAL_DEFAULT_NETWORK_AVAILABLE;
    public static final java.lang.String ACTION_CARRIER_SIGNAL_PCO_VALUE;
    public static final java.lang.String ACTION_CARRIER_SIGNAL_REDIRECTED;
    public static final java.lang.String ACTION_CARRIER_SIGNAL_REQUEST_NETWORK_FAILED;
    public static final java.lang.String ACTION_CARRIER_SIGNAL_RESET;
    public static final java.lang.String ACTION_CONFIGURE_VOICEMAIL;
    public static final java.lang.String ACTION_DATA_STALL_DETECTED;
    public static final java.lang.String ACTION_DEFAULT_DATA_SUBSCRIPTION_CHANGED;
    public static final java.lang.String ACTION_DEFAULT_VOICE_SUBSCRIPTION_CHANGED;
    public static final java.lang.String ACTION_EMERGENCY_ASSISTANCE;
    public static final java.lang.String ACTION_EMERGENCY_CALLBACK_MODE_CHANGED;
    public static final java.lang.String ACTION_EMERGENCY_CALL_STATE_CHANGED;
    public static final java.lang.String ACTION_MULTI_SIM_CONFIG_CHANGED;
    public static final java.lang.String ACTION_NETWORK_COUNTRY_CHANGED;
    public static final java.lang.String ACTION_PHONE_STATE_CHANGED;
    public static final java.lang.String ACTION_PRIMARY_SUBSCRIPTION_LIST_CHANGED;
    public static final java.lang.String ACTION_REQUEST_OMADM_CONFIGURATION_UPDATE;
    public static final java.lang.String ACTION_RESPOND_VIA_MESSAGE;
    public static final java.lang.String ACTION_SECRET_CODE;
    public static final java.lang.String ACTION_SERVICE_PROVIDERS_UPDATED;
    public static final java.lang.String ACTION_SHOW_NOTICE_ECM_BLOCK_OTHERS;
    public static final java.lang.String ACTION_SHOW_VOICEMAIL_NOTIFICATION;
    public static final java.lang.String ACTION_SIM_APPLICATION_STATE_CHANGED;
    public static final java.lang.String ACTION_SIM_CARD_STATE_CHANGED;
    public static final java.lang.String ACTION_SIM_SLOT_STATUS_CHANGED;
    public static final java.lang.String ACTION_SUBSCRIPTION_CARRIER_IDENTITY_CHANGED;
    public static final java.lang.String ACTION_SUBSCRIPTION_SPECIFIC_CARRIER_IDENTITY_CHANGED;
    public static final int ALLOWED_NETWORK_TYPES_REASON_POWER;
    public static final int APPTYPE_CSIM;
    public static final int APPTYPE_ISIM;
    public static final int APPTYPE_RUIM;
    public static final int APPTYPE_SIM;
    public static final int APPTYPE_USIM;
    public static final int AUTHTYPE_EAP_AKA;
    public static final int AUTHTYPE_EAP_SIM;
    private static final long CALLBACK_ON_MORE_ERROR_CODE_CHANGE;
    public static final int CALL_STATE_IDLE;
    public static final int CALL_STATE_OFFHOOK;
    public static final int CALL_STATE_RINGING;
    public static final int CALL_WAITING_STATUS_ACTIVE;
    public static final int CALL_WAITING_STATUS_INACTIVE;
    public static final int CALL_WAITING_STATUS_NOT_SUPPORTED;
    public static final int CALL_WAITING_STATUS_UNKNOWN_ERROR;
    public static final int CARD_POWER_DOWN;
    public static final int CARD_POWER_UP;
    public static final int CARD_POWER_UP_PASS_THROUGH;
    public static final int CARRIER_PRIVILEGE_STATUS_ERROR_LOADING_RULES;
    public static final int CARRIER_PRIVILEGE_STATUS_HAS_ACCESS;
    public static final int CARRIER_PRIVILEGE_STATUS_NO_ACCESS;
    public static final int CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED;
    public static final int CDMA_ROAMING_MODE_AFFILIATED;
    public static final int CDMA_ROAMING_MODE_ANY;
    public static final int CDMA_ROAMING_MODE_HOME;
    public static final int CDMA_ROAMING_MODE_RADIO_DEFAULT;
    public static final int CDMA_SUBSCRIPTION_NV;
    public static final int CDMA_SUBSCRIPTION_RUIM_SIM;
    public static final int CDMA_SUBSCRIPTION_UNKNOWN;
    public static final int CHANGE_ICC_LOCK_SUCCESS;
    public static final int DATA_ACTIVITY_DORMANT;
    public static final int DATA_ACTIVITY_IN;
    public static final int DATA_ACTIVITY_INOUT;
    public static final int DATA_ACTIVITY_NONE;
    public static final int DATA_ACTIVITY_OUT;
    public static final int DATA_CONNECTED;
    public static final int DATA_CONNECTING;
    public static final int DATA_DISCONNECTED;
    public static final int DATA_DISCONNECTING;
    public static final int DATA_SUSPENDED;
    public static final int DATA_UNKNOWN;
    public static final int DEFAULT_PREFERRED_NETWORK_MODE;
    public static final boolean EMERGENCY_ASSISTANCE_ENABLED;
    public static final java.lang.String EVENT_CALL_FORWARDED;
    public static final java.lang.String EVENT_DOWNGRADE_DATA_DISABLED;
    public static final java.lang.String EVENT_DOWNGRADE_DATA_LIMIT_REACHED;
    public static final java.lang.String EVENT_HANDOVER_TO_WIFI_FAILED;
    public static final java.lang.String EVENT_HANDOVER_VIDEO_FROM_LTE_TO_WIFI;
    public static final java.lang.String EVENT_HANDOVER_VIDEO_FROM_WIFI_TO_LTE;
    public static final java.lang.String EVENT_NOTIFY_INTERNATIONAL_CALL_ON_WFC;
    public static final java.lang.String EVENT_SUPPLEMENTARY_SERVICE_NOTIFICATION;
    public static final java.lang.String EXTRA_ACTIVE_SIM_SUPPORTED_COUNT;
    public static final java.lang.String EXTRA_ANOMALY_DESCRIPTION;
    public static final java.lang.String EXTRA_ANOMALY_ID;
    public static final java.lang.String EXTRA_APN_PROTOCOL;
    public static final java.lang.String EXTRA_APN_PROTOCOL_INT;
    public static final java.lang.String EXTRA_APN_TYPE;
    public static final java.lang.String EXTRA_APN_TYPE_INT;
    public static final java.lang.String EXTRA_CALL_VOICEMAIL_INTENT;
    public static final java.lang.String EXTRA_CARRIER_ID;
    public static final java.lang.String EXTRA_CARRIER_NAME;
    public static final java.lang.String EXTRA_DATA_SPN;
    public static final java.lang.String EXTRA_DEFAULT_NETWORK_AVAILABLE;
    public static final java.lang.String EXTRA_DEFAULT_SUBSCRIPTION_SELECT_TYPE;
    public static final int EXTRA_DEFAULT_SUBSCRIPTION_SELECT_TYPE_ALL;
    public static final int EXTRA_DEFAULT_SUBSCRIPTION_SELECT_TYPE_DATA;
    public static final int EXTRA_DEFAULT_SUBSCRIPTION_SELECT_TYPE_NONE;
    public static final int EXTRA_DEFAULT_SUBSCRIPTION_SELECT_TYPE_SMS;
    public static final int EXTRA_DEFAULT_SUBSCRIPTION_SELECT_TYPE_VOICE;
    public static final java.lang.String EXTRA_DISCONNECT_CAUSE;
    public static final java.lang.String EXTRA_ERROR_CODE;
    public static final java.lang.String EXTRA_HIDE_PUBLIC_SETTINGS;
    public static final java.lang.String EXTRA_INCOMING_NUMBER;
    public static final java.lang.String EXTRA_IS_REFRESH;
    public static final java.lang.String EXTRA_LAST_KNOWN_NETWORK_COUNTRY;
    public static final java.lang.String EXTRA_LAUNCH_VOICEMAIL_SETTINGS_INTENT;
    public static final java.lang.String EXTRA_NETWORK_COUNTRY;
    public static final java.lang.String EXTRA_NOTIFICATION_CODE;
    public static final java.lang.String EXTRA_NOTIFICATION_COUNT;
    public static final java.lang.String EXTRA_NOTIFICATION_MESSAGE;
    public static final java.lang.String EXTRA_NOTIFICATION_TYPE;
    public static final java.lang.String EXTRA_PCO_ID;
    public static final java.lang.String EXTRA_PCO_VALUE;
    public static final java.lang.String EXTRA_PHONE_ACCOUNT_HANDLE;
    public static final java.lang.String EXTRA_PHONE_IN_ECM_STATE;
    public static final java.lang.String EXTRA_PHONE_IN_EMERGENCY_CALL;
    public static final java.lang.String EXTRA_PLMN;
    public static final java.lang.String EXTRA_PRECISE_DISCONNECT_CAUSE;
    public static final java.lang.String EXTRA_RECOVERY_ACTION;
    public static final java.lang.String EXTRA_REDIRECTION_URL;
    public static final java.lang.String EXTRA_SHOW_PLMN;
    public static final java.lang.String EXTRA_SHOW_SPN;
    public static final java.lang.String EXTRA_SIM_COMBINATION_NAMES;
    public static final java.lang.String EXTRA_SIM_COMBINATION_WARNING_TYPE;
    public static final int EXTRA_SIM_COMBINATION_WARNING_TYPE_DUAL_CDMA;
    public static final int EXTRA_SIM_COMBINATION_WARNING_TYPE_NONE;
    public static final java.lang.String EXTRA_SIM_STATE;
    public static final java.lang.String EXTRA_SPECIFIC_CARRIER_ID;
    public static final java.lang.String EXTRA_SPECIFIC_CARRIER_NAME;
    public static final java.lang.String EXTRA_SPN;
    public static final java.lang.String EXTRA_STATE;
    public static final java.lang.String EXTRA_STATE_IDLE;
    public static final java.lang.String EXTRA_STATE_OFFHOOK;
    public static final java.lang.String EXTRA_STATE_RINGING;
    public static final java.lang.String EXTRA_SUBSCRIPTION_ID;
    public static final java.lang.String EXTRA_VISUAL_VOICEMAIL_ENABLED_BY_USER_BOOL;
    public static final java.lang.String EXTRA_VOICEMAIL_NUMBER;
    public static final java.lang.String EXTRA_VOICEMAIL_SCRAMBLED_PIN_STRING;
    private static final long GET_DATA_STATE_R_VERSION;
    public static final int INDICATION_FILTER_DATA_CALL_DORMANCY_CHANGED;
    public static final int INDICATION_FILTER_FULL_NETWORK_STATE;
    public static final int INDICATION_FILTER_LINK_CAPACITY_ESTIMATE;
    public static final int INDICATION_FILTER_PHYSICAL_CHANNEL_CONFIG;
    public static final int INDICATION_FILTER_SIGNAL_STRENGTH;
    public static final int INDICATION_UPDATE_MODE_IGNORE_SCREEN_OFF;
    public static final int INDICATION_UPDATE_MODE_NORMAL;
    public static final int INVALID_EMERGENCY_NUMBER_DB_VERSION;
    public static final int KEY_TYPE_EPDG;
    public static final int KEY_TYPE_WLAN;
    private static final long MAX_NUMBER_VERIFICATION_TIMEOUT_MILLIS;
    public static final java.lang.String METADATA_HIDE_VOICEMAIL_SETTINGS_MENU;
    public static final java.lang.String MODEM_ACTIVITY_RESULT_KEY;
    public static final int MULTISIM_ALLOWED;
    public static final int MULTISIM_NOT_SUPPORTED_BY_CARRIER;
    public static final int MULTISIM_NOT_SUPPORTED_BY_HARDWARE;
    public static final long NETWORK_CLASS_BITMASK_2G;
    public static final long NETWORK_CLASS_BITMASK_3G;
    public static final long NETWORK_CLASS_BITMASK_4G;
    public static final long NETWORK_CLASS_BITMASK_5G;
    public static final int NETWORK_MODE_CDMA_EVDO;
    public static final int NETWORK_MODE_CDMA_NO_EVDO;
    public static final int NETWORK_MODE_EVDO_NO_CDMA;
    public static final int NETWORK_MODE_GLOBAL;
    public static final int NETWORK_MODE_GSM_ONLY;
    public static final int NETWORK_MODE_GSM_UMTS;
    public static final int NETWORK_MODE_LTE_CDMA_EVDO;
    public static final int NETWORK_MODE_LTE_CDMA_EVDO_GSM_WCDMA;
    public static final int NETWORK_MODE_LTE_GSM_WCDMA;
    public static final int NETWORK_MODE_LTE_ONLY;
    public static final int NETWORK_MODE_LTE_TDSCDMA;
    public static final int NETWORK_MODE_LTE_TDSCDMA_CDMA_EVDO_GSM_WCDMA;
    public static final int NETWORK_MODE_LTE_TDSCDMA_GSM;
    public static final int NETWORK_MODE_LTE_TDSCDMA_GSM_WCDMA;
    public static final int NETWORK_MODE_LTE_TDSCDMA_WCDMA;
    public static final int NETWORK_MODE_LTE_WCDMA;
    public static final int NETWORK_MODE_NR_LTE;
    public static final int NETWORK_MODE_NR_LTE_CDMA_EVDO;
    public static final int NETWORK_MODE_NR_LTE_CDMA_EVDO_GSM_WCDMA;
    public static final int NETWORK_MODE_NR_LTE_GSM_WCDMA;
    public static final int NETWORK_MODE_NR_LTE_TDSCDMA;
    public static final int NETWORK_MODE_NR_LTE_TDSCDMA_CDMA_EVDO_GSM_WCDMA;
    public static final int NETWORK_MODE_NR_LTE_TDSCDMA_GSM;
    public static final int NETWORK_MODE_NR_LTE_TDSCDMA_GSM_WCDMA;
    public static final int NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA;
    public static final int NETWORK_MODE_NR_LTE_WCDMA;
    public static final int NETWORK_MODE_NR_ONLY;
    public static final int NETWORK_MODE_TDSCDMA_CDMA_EVDO_GSM_WCDMA;
    public static final int NETWORK_MODE_TDSCDMA_GSM;
    public static final int NETWORK_MODE_TDSCDMA_GSM_WCDMA;
    public static final int NETWORK_MODE_TDSCDMA_ONLY;
    public static final int NETWORK_MODE_TDSCDMA_WCDMA;
    public static final int NETWORK_MODE_WCDMA_ONLY;
    public static final int NETWORK_MODE_WCDMA_PREF;
    public static final int NETWORK_SELECTION_MODE_AUTO;
    public static final int NETWORK_SELECTION_MODE_MANUAL;
    public static final int NETWORK_SELECTION_MODE_UNKNOWN;
    public static final long NETWORK_STANDARDS_FAMILY_BITMASK_3GPP;
    public static final long NETWORK_STANDARDS_FAMILY_BITMASK_3GPP2;
    private static final int[] NETWORK_TYPES;
    public static final int NETWORK_TYPE_1xRTT;
    public static final long NETWORK_TYPE_BITMASK_1xRTT;
    public static final long NETWORK_TYPE_BITMASK_CDMA;
    public static final long NETWORK_TYPE_BITMASK_EDGE;
    public static final long NETWORK_TYPE_BITMASK_EHRPD;
    public static final long NETWORK_TYPE_BITMASK_EVDO_0;
    public static final long NETWORK_TYPE_BITMASK_EVDO_A;
    public static final long NETWORK_TYPE_BITMASK_EVDO_B;
    public static final long NETWORK_TYPE_BITMASK_GPRS;
    public static final long NETWORK_TYPE_BITMASK_GSM;
    public static final long NETWORK_TYPE_BITMASK_HSDPA;
    public static final long NETWORK_TYPE_BITMASK_HSPA;
    public static final long NETWORK_TYPE_BITMASK_HSPAP;
    public static final long NETWORK_TYPE_BITMASK_HSUPA;
    public static final long NETWORK_TYPE_BITMASK_IWLAN;
    public static final long NETWORK_TYPE_BITMASK_LTE;
    public static final long NETWORK_TYPE_BITMASK_LTE_CA;
    public static final long NETWORK_TYPE_BITMASK_NR;
    public static final long NETWORK_TYPE_BITMASK_TD_SCDMA;
    public static final long NETWORK_TYPE_BITMASK_UMTS;
    public static final long NETWORK_TYPE_BITMASK_UNKNOWN;
    public static final int NETWORK_TYPE_CDMA;
    public static final int NETWORK_TYPE_EDGE;
    public static final int NETWORK_TYPE_EHRPD;
    public static final int NETWORK_TYPE_EVDO_0;
    public static final int NETWORK_TYPE_EVDO_A;
    public static final int NETWORK_TYPE_EVDO_B;
    public static final int NETWORK_TYPE_GPRS;
    public static final int NETWORK_TYPE_GSM;
    public static final int NETWORK_TYPE_HSDPA;
    public static final int NETWORK_TYPE_HSPA;
    public static final int NETWORK_TYPE_HSPAP;
    public static final int NETWORK_TYPE_HSUPA;
    public static final int NETWORK_TYPE_IDEN;
    public static final int NETWORK_TYPE_IWLAN;
    public static final int NETWORK_TYPE_LTE;
    public static final int NETWORK_TYPE_LTE_CA;
    public static final int NETWORK_TYPE_NR;
    public static final int NETWORK_TYPE_TD_SCDMA;
    public static final int NETWORK_TYPE_UMTS;
    public static final int NETWORK_TYPE_UNKNOWN;
    public static final int OTASP_NEEDED;
    public static final int OTASP_NOT_NEEDED;
    public static final int OTASP_SIM_UNPROVISIONED;
    public static final int OTASP_UNINITIALIZED;
    public static final int OTASP_UNKNOWN;
    public static final java.lang.String PHONE_PROCESS_NAME;
    public static final int PHONE_TYPE_CDMA;
    public static final int PHONE_TYPE_GSM;
    public static final int PHONE_TYPE_IMS;
    public static final int PHONE_TYPE_NONE;
    public static final int PHONE_TYPE_SIP;
    public static final int PHONE_TYPE_THIRD_PARTY;
    public static final int PREFERRED_CDMA_SUBSCRIPTION;
    public static final int RADIO_POWER_OFF;
    public static final int RADIO_POWER_ON;
    public static final int RADIO_POWER_UNAVAILABLE;
    public static final int SET_CARRIER_RESTRICTION_ERROR;
    public static final int SET_CARRIER_RESTRICTION_NOT_SUPPORTED;
    public static final int SET_CARRIER_RESTRICTION_SUCCESS;
    public static final int SET_OPPORTUNISTIC_SUB_INACTIVE_SUBSCRIPTION;
    public static final int SET_OPPORTUNISTIC_SUB_NO_OPPORTUNISTIC_SUB_AVAILABLE;
    public static final int SET_OPPORTUNISTIC_SUB_REMOTE_SERVICE_EXCEPTION;
    public static final int SET_OPPORTUNISTIC_SUB_SUCCESS;
    public static final int SET_OPPORTUNISTIC_SUB_VALIDATION_FAILED;
    public static final int SIM_ACTIVATION_STATE_ACTIVATED;
    public static final int SIM_ACTIVATION_STATE_ACTIVATING;
    public static final int SIM_ACTIVATION_STATE_DEACTIVATED;
    public static final int SIM_ACTIVATION_STATE_RESTRICTED;
    public static final int SIM_ACTIVATION_STATE_UNKNOWN;
    public static final int SIM_STATE_ABSENT;
    public static final int SIM_STATE_CARD_IO_ERROR;
    public static final int SIM_STATE_CARD_RESTRICTED;
    public static final int SIM_STATE_LOADED;
    public static final int SIM_STATE_NETWORK_LOCKED;
    public static final int SIM_STATE_NOT_READY;
    public static final int SIM_STATE_PERM_DISABLED;
    public static final int SIM_STATE_PIN_REQUIRED;
    public static final int SIM_STATE_PRESENT;
    public static final int SIM_STATE_PUK_REQUIRED;
    public static final int SIM_STATE_READY;
    public static final int SIM_STATE_UNKNOWN;
    public static final int SRVCC_STATE_HANDOVER_CANCELED;
    public static final int SRVCC_STATE_HANDOVER_COMPLETED;
    public static final int SRVCC_STATE_HANDOVER_FAILED;
    public static final int SRVCC_STATE_HANDOVER_NONE;
    public static final int SRVCC_STATE_HANDOVER_STARTED;
    private static final java.lang.String TAG;
    public static final int UNINITIALIZED_CARD_ID;
    public static final int UNKNOWN_CARRIER_ID;
    public static final int UNKNOWN_CARRIER_ID_LIST_VERSION;
    public static final int UNSUPPORTED_CARD_ID;
    public static final int UPDATE_AVAILABLE_NETWORKS_ABORTED;
    public static final int UPDATE_AVAILABLE_NETWORKS_DISABLE_MODEM_FAIL;
    public static final int UPDATE_AVAILABLE_NETWORKS_ENABLE_MODEM_FAIL;
    public static final int UPDATE_AVAILABLE_NETWORKS_INVALID_ARGUMENTS;
    public static final int UPDATE_AVAILABLE_NETWORKS_MULTIPLE_NETWORKS_NOT_SUPPORTED;
    public static final int UPDATE_AVAILABLE_NETWORKS_NO_CARRIER_PRIVILEGE;
    public static final int UPDATE_AVAILABLE_NETWORKS_NO_OPPORTUNISTIC_SUB_AVAILABLE;
    public static final int UPDATE_AVAILABLE_NETWORKS_REMOTE_SERVICE_EXCEPTION;
    public static final int UPDATE_AVAILABLE_NETWORKS_SERVICE_IS_DISABLED;
    public static final int UPDATE_AVAILABLE_NETWORKS_SUCCESS;
    public static final int UPDATE_AVAILABLE_NETWORKS_UNKNOWN_FAILURE;
    public static final int USSD_ERROR_SERVICE_UNAVAIL;
    public static final java.lang.String USSD_RESPONSE;
    public static final int USSD_RETURN_FAILURE;
    public static final int USSD_RETURN_SUCCESS;
    public static final java.lang.String VVM_TYPE_CVVM;
    public static final java.lang.String VVM_TYPE_OMTP;
    private static final java.lang.Object sCacheLock;
    private static com.android.internal.telephony.IPhoneSubInfo sIPhoneSubInfo;
    private static com.android.internal.telephony.ISms sISms;
    private static com.android.internal.telephony.ISub sISub;
    private static android.telephony.TelephonyManager sInstance;
    private static final java.lang.String sKernelCmdLine;
    private static final java.lang.String sLteOnCdmaProductType;
    private static final java.util.regex.Pattern sProductTypePattern;
    private static final android.telephony.TelephonyManager$DeathRecipient sServiceDeath;
    private static boolean sServiceHandleCacheEnabled;
    private final android.content.Context mContext;
    private final int mSubId;
    private android.telephony.SubscriptionManager mSubscriptionManager;
    private android.telephony.TelephonyScanManager mTelephonyScanManager;

    static void <clinit>()
    {
        java.lang.Object $r0, $r12;
        android.telephony.TelephonyManager$DeathRecipient $r1;
        android.telephony.TelephonyManager $r2;
        com.android.internal.telephony.PhoneConstants$State $r3, $r5, $r7;
        java.lang.String $r4, $r6, $r8, $r9, $r13;
        java.util.regex.Pattern $r10;
        java.util.Optional $r11;
        int[] $r14;
        int $i0;

        <android.telephony.TelephonyManager: java.lang.String VVM_TYPE_OMTP> = "vvm_type_omtp";

        <android.telephony.TelephonyManager: java.lang.String VVM_TYPE_CVVM> = "vvm_type_cvvm";

        <android.telephony.TelephonyManager: int USSD_RETURN_SUCCESS> = 100;

        <android.telephony.TelephonyManager: int USSD_RETURN_FAILURE> = -1;

        <android.telephony.TelephonyManager: java.lang.String USSD_RESPONSE> = "USSD_RESPONSE";

        <android.telephony.TelephonyManager: int USSD_ERROR_SERVICE_UNAVAIL> = -2;

        <android.telephony.TelephonyManager: int UPDATE_AVAILABLE_NETWORKS_UNKNOWN_FAILURE> = 1;

        <android.telephony.TelephonyManager: int UPDATE_AVAILABLE_NETWORKS_SUCCESS> = 0;

        <android.telephony.TelephonyManager: int UPDATE_AVAILABLE_NETWORKS_SERVICE_IS_DISABLED> = 10;

        <android.telephony.TelephonyManager: int UPDATE_AVAILABLE_NETWORKS_REMOTE_SERVICE_EXCEPTION> = 9;

        <android.telephony.TelephonyManager: int UPDATE_AVAILABLE_NETWORKS_NO_OPPORTUNISTIC_SUB_AVAILABLE> = 8;

        <android.telephony.TelephonyManager: int UPDATE_AVAILABLE_NETWORKS_NO_CARRIER_PRIVILEGE> = 4;

        <android.telephony.TelephonyManager: int UPDATE_AVAILABLE_NETWORKS_MULTIPLE_NETWORKS_NOT_SUPPORTED> = 7;

        <android.telephony.TelephonyManager: int UPDATE_AVAILABLE_NETWORKS_INVALID_ARGUMENTS> = 3;

        <android.telephony.TelephonyManager: int UPDATE_AVAILABLE_NETWORKS_ENABLE_MODEM_FAIL> = 6;

        <android.telephony.TelephonyManager: int UPDATE_AVAILABLE_NETWORKS_DISABLE_MODEM_FAIL> = 5;

        <android.telephony.TelephonyManager: int UPDATE_AVAILABLE_NETWORKS_ABORTED> = 2;

        <android.telephony.TelephonyManager: int UNSUPPORTED_CARD_ID> = -1;

        <android.telephony.TelephonyManager: int UNKNOWN_CARRIER_ID_LIST_VERSION> = -1;

        <android.telephony.TelephonyManager: int UNKNOWN_CARRIER_ID> = -1;

        <android.telephony.TelephonyManager: int UNINITIALIZED_CARD_ID> = -2;

        <android.telephony.TelephonyManager: java.lang.String TAG> = "TelephonyManager";

        <android.telephony.TelephonyManager: int SRVCC_STATE_HANDOVER_STARTED> = 0;

        <android.telephony.TelephonyManager: int SRVCC_STATE_HANDOVER_NONE> = -1;

        <android.telephony.TelephonyManager: int SRVCC_STATE_HANDOVER_FAILED> = 2;

        <android.telephony.TelephonyManager: int SRVCC_STATE_HANDOVER_COMPLETED> = 1;

        <android.telephony.TelephonyManager: int SRVCC_STATE_HANDOVER_CANCELED> = 3;

        <android.telephony.TelephonyManager: int SIM_STATE_UNKNOWN> = 0;

        <android.telephony.TelephonyManager: int SIM_STATE_READY> = 5;

        <android.telephony.TelephonyManager: int SIM_STATE_PUK_REQUIRED> = 3;

        <android.telephony.TelephonyManager: int SIM_STATE_PRESENT> = 11;

        <android.telephony.TelephonyManager: int SIM_STATE_PIN_REQUIRED> = 2;

        <android.telephony.TelephonyManager: int SIM_STATE_PERM_DISABLED> = 7;

        <android.telephony.TelephonyManager: int SIM_STATE_NOT_READY> = 6;

        <android.telephony.TelephonyManager: int SIM_STATE_NETWORK_LOCKED> = 4;

        <android.telephony.TelephonyManager: int SIM_STATE_LOADED> = 10;

        <android.telephony.TelephonyManager: int SIM_STATE_CARD_RESTRICTED> = 9;

        <android.telephony.TelephonyManager: int SIM_STATE_CARD_IO_ERROR> = 8;

        <android.telephony.TelephonyManager: int SIM_STATE_ABSENT> = 1;

        <android.telephony.TelephonyManager: int SIM_ACTIVATION_STATE_UNKNOWN> = 0;

        <android.telephony.TelephonyManager: int SIM_ACTIVATION_STATE_RESTRICTED> = 4;

        <android.telephony.TelephonyManager: int SIM_ACTIVATION_STATE_DEACTIVATED> = 3;

        <android.telephony.TelephonyManager: int SIM_ACTIVATION_STATE_ACTIVATING> = 1;

        <android.telephony.TelephonyManager: int SIM_ACTIVATION_STATE_ACTIVATED> = 2;

        <android.telephony.TelephonyManager: int SET_OPPORTUNISTIC_SUB_VALIDATION_FAILED> = 1;

        <android.telephony.TelephonyManager: int SET_OPPORTUNISTIC_SUB_SUCCESS> = 0;

        <android.telephony.TelephonyManager: int SET_OPPORTUNISTIC_SUB_REMOTE_SERVICE_EXCEPTION> = 4;

        <android.telephony.TelephonyManager: int SET_OPPORTUNISTIC_SUB_NO_OPPORTUNISTIC_SUB_AVAILABLE> = 3;

        <android.telephony.TelephonyManager: int SET_OPPORTUNISTIC_SUB_INACTIVE_SUBSCRIPTION> = 2;

        <android.telephony.TelephonyManager: int SET_CARRIER_RESTRICTION_SUCCESS> = 0;

        <android.telephony.TelephonyManager: int SET_CARRIER_RESTRICTION_NOT_SUPPORTED> = 1;

        <android.telephony.TelephonyManager: int SET_CARRIER_RESTRICTION_ERROR> = 2;

        <android.telephony.TelephonyManager: int RADIO_POWER_UNAVAILABLE> = 2;

        <android.telephony.TelephonyManager: int RADIO_POWER_ON> = 1;

        <android.telephony.TelephonyManager: int RADIO_POWER_OFF> = 0;

        <android.telephony.TelephonyManager: int PREFERRED_CDMA_SUBSCRIPTION> = 0;

        <android.telephony.TelephonyManager: int PHONE_TYPE_THIRD_PARTY> = 4;

        <android.telephony.TelephonyManager: int PHONE_TYPE_SIP> = 3;

        <android.telephony.TelephonyManager: int PHONE_TYPE_NONE> = 0;

        <android.telephony.TelephonyManager: int PHONE_TYPE_IMS> = 5;

        <android.telephony.TelephonyManager: int PHONE_TYPE_GSM> = 1;

        <android.telephony.TelephonyManager: int PHONE_TYPE_CDMA> = 2;

        <android.telephony.TelephonyManager: java.lang.String PHONE_PROCESS_NAME> = "com.android.phone";

        <android.telephony.TelephonyManager: int OTASP_UNKNOWN> = 1;

        <android.telephony.TelephonyManager: int OTASP_UNINITIALIZED> = 0;

        <android.telephony.TelephonyManager: int OTASP_SIM_UNPROVISIONED> = 5;

        <android.telephony.TelephonyManager: int OTASP_NOT_NEEDED> = 3;

        <android.telephony.TelephonyManager: int OTASP_NEEDED> = 2;

        <android.telephony.TelephonyManager: int NETWORK_TYPE_UNKNOWN> = 0;

        <android.telephony.TelephonyManager: int NETWORK_TYPE_UMTS> = 3;

        <android.telephony.TelephonyManager: int NETWORK_TYPE_TD_SCDMA> = 17;

        <android.telephony.TelephonyManager: int NETWORK_TYPE_NR> = 20;

        <android.telephony.TelephonyManager: int NETWORK_TYPE_LTE_CA> = 19;

        <android.telephony.TelephonyManager: int NETWORK_TYPE_LTE> = 13;

        <android.telephony.TelephonyManager: int NETWORK_TYPE_IWLAN> = 18;

        <android.telephony.TelephonyManager: int NETWORK_TYPE_IDEN> = 11;

        <android.telephony.TelephonyManager: int NETWORK_TYPE_HSUPA> = 9;

        <android.telephony.TelephonyManager: int NETWORK_TYPE_HSPAP> = 15;

        <android.telephony.TelephonyManager: int NETWORK_TYPE_HSPA> = 10;

        <android.telephony.TelephonyManager: int NETWORK_TYPE_HSDPA> = 8;

        <android.telephony.TelephonyManager: int NETWORK_TYPE_GSM> = 16;

        <android.telephony.TelephonyManager: int NETWORK_TYPE_GPRS> = 1;

        <android.telephony.TelephonyManager: int NETWORK_TYPE_EVDO_B> = 12;

        <android.telephony.TelephonyManager: int NETWORK_TYPE_EVDO_A> = 6;

        <android.telephony.TelephonyManager: int NETWORK_TYPE_EVDO_0> = 5;

        <android.telephony.TelephonyManager: int NETWORK_TYPE_EHRPD> = 14;

        <android.telephony.TelephonyManager: int NETWORK_TYPE_EDGE> = 2;

        <android.telephony.TelephonyManager: int NETWORK_TYPE_CDMA> = 4;

        <android.telephony.TelephonyManager: long NETWORK_TYPE_BITMASK_UNKNOWN> = 0L;

        <android.telephony.TelephonyManager: long NETWORK_TYPE_BITMASK_UMTS> = 4L;

        <android.telephony.TelephonyManager: long NETWORK_TYPE_BITMASK_TD_SCDMA> = 65536L;

        <android.telephony.TelephonyManager: long NETWORK_TYPE_BITMASK_NR> = 524288L;

        <android.telephony.TelephonyManager: long NETWORK_TYPE_BITMASK_LTE_CA> = 262144L;

        <android.telephony.TelephonyManager: long NETWORK_TYPE_BITMASK_LTE> = 4096L;

        <android.telephony.TelephonyManager: long NETWORK_TYPE_BITMASK_IWLAN> = 131072L;

        <android.telephony.TelephonyManager: long NETWORK_TYPE_BITMASK_HSUPA> = 256L;

        <android.telephony.TelephonyManager: long NETWORK_TYPE_BITMASK_HSPAP> = 16384L;

        <android.telephony.TelephonyManager: long NETWORK_TYPE_BITMASK_HSPA> = 512L;

        <android.telephony.TelephonyManager: long NETWORK_TYPE_BITMASK_HSDPA> = 128L;

        <android.telephony.TelephonyManager: long NETWORK_TYPE_BITMASK_GSM> = 32768L;

        <android.telephony.TelephonyManager: long NETWORK_TYPE_BITMASK_GPRS> = 1L;

        <android.telephony.TelephonyManager: long NETWORK_TYPE_BITMASK_EVDO_B> = 2048L;

        <android.telephony.TelephonyManager: long NETWORK_TYPE_BITMASK_EVDO_A> = 32L;

        <android.telephony.TelephonyManager: long NETWORK_TYPE_BITMASK_EVDO_0> = 16L;

        <android.telephony.TelephonyManager: long NETWORK_TYPE_BITMASK_EHRPD> = 8192L;

        <android.telephony.TelephonyManager: long NETWORK_TYPE_BITMASK_EDGE> = 2L;

        <android.telephony.TelephonyManager: long NETWORK_TYPE_BITMASK_CDMA> = 8L;

        <android.telephony.TelephonyManager: long NETWORK_TYPE_BITMASK_1xRTT> = 64L;

        <android.telephony.TelephonyManager: int NETWORK_TYPE_1xRTT> = 7;

        <android.telephony.TelephonyManager: long NETWORK_STANDARDS_FAMILY_BITMASK_3GPP2> = 10360L;

        <android.telephony.TelephonyManager: long NETWORK_STANDARDS_FAMILY_BITMASK_3GPP> = 906119L;

        <android.telephony.TelephonyManager: int NETWORK_SELECTION_MODE_UNKNOWN> = 0;

        <android.telephony.TelephonyManager: int NETWORK_SELECTION_MODE_MANUAL> = 2;

        <android.telephony.TelephonyManager: int NETWORK_SELECTION_MODE_AUTO> = 1;

        <android.telephony.TelephonyManager: int NETWORK_MODE_WCDMA_PREF> = 0;

        <android.telephony.TelephonyManager: int NETWORK_MODE_WCDMA_ONLY> = 2;

        <android.telephony.TelephonyManager: int NETWORK_MODE_TDSCDMA_WCDMA> = 14;

        <android.telephony.TelephonyManager: int NETWORK_MODE_TDSCDMA_ONLY> = 13;

        <android.telephony.TelephonyManager: int NETWORK_MODE_TDSCDMA_GSM_WCDMA> = 18;

        <android.telephony.TelephonyManager: int NETWORK_MODE_TDSCDMA_GSM> = 16;

        <android.telephony.TelephonyManager: int NETWORK_MODE_TDSCDMA_CDMA_EVDO_GSM_WCDMA> = 21;

        <android.telephony.TelephonyManager: int NETWORK_MODE_NR_ONLY> = 23;

        <android.telephony.TelephonyManager: int NETWORK_MODE_NR_LTE_WCDMA> = 28;

        <android.telephony.TelephonyManager: int NETWORK_MODE_NR_LTE_TDSCDMA_WCDMA> = 31;

        <android.telephony.TelephonyManager: int NETWORK_MODE_NR_LTE_TDSCDMA_GSM_WCDMA> = 32;

        <android.telephony.TelephonyManager: int NETWORK_MODE_NR_LTE_TDSCDMA_GSM> = 30;

        <android.telephony.TelephonyManager: int NETWORK_MODE_NR_LTE_TDSCDMA_CDMA_EVDO_GSM_WCDMA> = 33;

        <android.telephony.TelephonyManager: int NETWORK_MODE_NR_LTE_TDSCDMA> = 29;

        <android.telephony.TelephonyManager: int NETWORK_MODE_NR_LTE_GSM_WCDMA> = 26;

        <android.telephony.TelephonyManager: int NETWORK_MODE_NR_LTE_CDMA_EVDO_GSM_WCDMA> = 27;

        <android.telephony.TelephonyManager: int NETWORK_MODE_NR_LTE_CDMA_EVDO> = 25;

        <android.telephony.TelephonyManager: int NETWORK_MODE_NR_LTE> = 24;

        <android.telephony.TelephonyManager: int NETWORK_MODE_LTE_WCDMA> = 12;

        <android.telephony.TelephonyManager: int NETWORK_MODE_LTE_TDSCDMA_WCDMA> = 19;

        <android.telephony.TelephonyManager: int NETWORK_MODE_LTE_TDSCDMA_GSM_WCDMA> = 20;

        <android.telephony.TelephonyManager: int NETWORK_MODE_LTE_TDSCDMA_GSM> = 17;

        <android.telephony.TelephonyManager: int NETWORK_MODE_LTE_TDSCDMA_CDMA_EVDO_GSM_WCDMA> = 22;

        <android.telephony.TelephonyManager: int NETWORK_MODE_LTE_TDSCDMA> = 15;

        <android.telephony.TelephonyManager: int NETWORK_MODE_LTE_ONLY> = 11;

        <android.telephony.TelephonyManager: int NETWORK_MODE_LTE_GSM_WCDMA> = 9;

        <android.telephony.TelephonyManager: int NETWORK_MODE_LTE_CDMA_EVDO_GSM_WCDMA> = 10;

        <android.telephony.TelephonyManager: int NETWORK_MODE_LTE_CDMA_EVDO> = 8;

        <android.telephony.TelephonyManager: int NETWORK_MODE_GSM_UMTS> = 3;

        <android.telephony.TelephonyManager: int NETWORK_MODE_GSM_ONLY> = 1;

        <android.telephony.TelephonyManager: int NETWORK_MODE_GLOBAL> = 7;

        <android.telephony.TelephonyManager: int NETWORK_MODE_EVDO_NO_CDMA> = 6;

        <android.telephony.TelephonyManager: int NETWORK_MODE_CDMA_NO_EVDO> = 5;

        <android.telephony.TelephonyManager: int NETWORK_MODE_CDMA_EVDO> = 4;

        <android.telephony.TelephonyManager: long NETWORK_CLASS_BITMASK_5G> = 524288L;

        <android.telephony.TelephonyManager: long NETWORK_CLASS_BITMASK_4G> = 397312L;

        <android.telephony.TelephonyManager: long NETWORK_CLASS_BITMASK_3G> = 93108L;

        <android.telephony.TelephonyManager: long NETWORK_CLASS_BITMASK_2G> = 32843L;

        <android.telephony.TelephonyManager: int MULTISIM_NOT_SUPPORTED_BY_HARDWARE> = 1;

        <android.telephony.TelephonyManager: int MULTISIM_NOT_SUPPORTED_BY_CARRIER> = 2;

        <android.telephony.TelephonyManager: int MULTISIM_ALLOWED> = 0;

        <android.telephony.TelephonyManager: java.lang.String MODEM_ACTIVITY_RESULT_KEY> = "controller_activity";

        <android.telephony.TelephonyManager: java.lang.String METADATA_HIDE_VOICEMAIL_SETTINGS_MENU> = "android.telephony.HIDE_VOICEMAIL_SETTINGS_MENU";

        <android.telephony.TelephonyManager: long MAX_NUMBER_VERIFICATION_TIMEOUT_MILLIS> = 60000L;

        <android.telephony.TelephonyManager: int KEY_TYPE_WLAN> = 2;

        <android.telephony.TelephonyManager: int KEY_TYPE_EPDG> = 1;

        <android.telephony.TelephonyManager: int INVALID_EMERGENCY_NUMBER_DB_VERSION> = -1;

        <android.telephony.TelephonyManager: int INDICATION_UPDATE_MODE_NORMAL> = 1;

        <android.telephony.TelephonyManager: int INDICATION_UPDATE_MODE_IGNORE_SCREEN_OFF> = 2;

        <android.telephony.TelephonyManager: int INDICATION_FILTER_SIGNAL_STRENGTH> = 1;

        <android.telephony.TelephonyManager: int INDICATION_FILTER_PHYSICAL_CHANNEL_CONFIG> = 16;

        <android.telephony.TelephonyManager: int INDICATION_FILTER_LINK_CAPACITY_ESTIMATE> = 8;

        <android.telephony.TelephonyManager: int INDICATION_FILTER_FULL_NETWORK_STATE> = 2;

        <android.telephony.TelephonyManager: int INDICATION_FILTER_DATA_CALL_DORMANCY_CHANGED> = 4;

        <android.telephony.TelephonyManager: long GET_DATA_STATE_R_VERSION> = 148534348L;

        <android.telephony.TelephonyManager: java.lang.String EXTRA_VOICEMAIL_SCRAMBLED_PIN_STRING> = "android.telephony.extra.VOICEMAIL_SCRAMBLED_PIN_STRING";

        <android.telephony.TelephonyManager: java.lang.String EXTRA_VOICEMAIL_NUMBER> = "android.telephony.extra.VOICEMAIL_NUMBER";

        <android.telephony.TelephonyManager: java.lang.String EXTRA_VISUAL_VOICEMAIL_ENABLED_BY_USER_BOOL> = "android.telephony.extra.VISUAL_VOICEMAIL_ENABLED_BY_USER_BOOL";

        <android.telephony.TelephonyManager: java.lang.String EXTRA_SUBSCRIPTION_ID> = "android.telephony.extra.SUBSCRIPTION_ID";

        <android.telephony.TelephonyManager: java.lang.String EXTRA_STATE> = "state";

        <android.telephony.TelephonyManager: java.lang.String EXTRA_SPN> = "android.telephony.extra.SPN";

        <android.telephony.TelephonyManager: java.lang.String EXTRA_SPECIFIC_CARRIER_NAME> = "android.telephony.extra.SPECIFIC_CARRIER_NAME";

        <android.telephony.TelephonyManager: java.lang.String EXTRA_SPECIFIC_CARRIER_ID> = "android.telephony.extra.SPECIFIC_CARRIER_ID";

        <android.telephony.TelephonyManager: java.lang.String EXTRA_SIM_STATE> = "android.telephony.extra.SIM_STATE";

        <android.telephony.TelephonyManager: int EXTRA_SIM_COMBINATION_WARNING_TYPE_NONE> = 0;

        <android.telephony.TelephonyManager: int EXTRA_SIM_COMBINATION_WARNING_TYPE_DUAL_CDMA> = 1;

        <android.telephony.TelephonyManager: java.lang.String EXTRA_SIM_COMBINATION_WARNING_TYPE> = "android.telephony.extra.SIM_COMBINATION_WARNING_TYPE";

        <android.telephony.TelephonyManager: java.lang.String EXTRA_SIM_COMBINATION_NAMES> = "android.telephony.extra.SIM_COMBINATION_NAMES";

        <android.telephony.TelephonyManager: java.lang.String EXTRA_SHOW_SPN> = "android.telephony.extra.SHOW_SPN";

        <android.telephony.TelephonyManager: java.lang.String EXTRA_SHOW_PLMN> = "android.telephony.extra.SHOW_PLMN";

        <android.telephony.TelephonyManager: java.lang.String EXTRA_REDIRECTION_URL> = "redirectionUrl";

        <android.telephony.TelephonyManager: java.lang.String EXTRA_RECOVERY_ACTION> = "recoveryAction";

        <android.telephony.TelephonyManager: java.lang.String EXTRA_PRECISE_DISCONNECT_CAUSE> = "precise_disconnect_cause";

        <android.telephony.TelephonyManager: java.lang.String EXTRA_PLMN> = "android.telephony.extra.PLMN";

        <android.telephony.TelephonyManager: java.lang.String EXTRA_PHONE_IN_EMERGENCY_CALL> = "android.telephony.extra.PHONE_IN_EMERGENCY_CALL";

        <android.telephony.TelephonyManager: java.lang.String EXTRA_PHONE_IN_ECM_STATE> = "android.telephony.extra.PHONE_IN_ECM_STATE";

        <android.telephony.TelephonyManager: java.lang.String EXTRA_PHONE_ACCOUNT_HANDLE> = "android.telephony.extra.PHONE_ACCOUNT_HANDLE";

        <android.telephony.TelephonyManager: java.lang.String EXTRA_PCO_VALUE> = "pcoValue";

        <android.telephony.TelephonyManager: java.lang.String EXTRA_PCO_ID> = "pcoId";

        <android.telephony.TelephonyManager: java.lang.String EXTRA_NOTIFICATION_TYPE> = "android.telephony.extra.NOTIFICATION_TYPE";

        <android.telephony.TelephonyManager: java.lang.String EXTRA_NOTIFICATION_MESSAGE> = "android.telephony.extra.NOTIFICATION_MESSAGE";

        <android.telephony.TelephonyManager: java.lang.String EXTRA_NOTIFICATION_COUNT> = "android.telephony.extra.NOTIFICATION_COUNT";

        <android.telephony.TelephonyManager: java.lang.String EXTRA_NOTIFICATION_CODE> = "android.telephony.extra.NOTIFICATION_CODE";

        <android.telephony.TelephonyManager: java.lang.String EXTRA_NETWORK_COUNTRY> = "android.telephony.extra.NETWORK_COUNTRY";

        <android.telephony.TelephonyManager: java.lang.String EXTRA_LAUNCH_VOICEMAIL_SETTINGS_INTENT> = "android.telephony.extra.LAUNCH_VOICEMAIL_SETTINGS_INTENT";

        <android.telephony.TelephonyManager: java.lang.String EXTRA_LAST_KNOWN_NETWORK_COUNTRY> = "android.telephony.extra.LAST_KNOWN_NETWORK_COUNTRY";

        <android.telephony.TelephonyManager: java.lang.String EXTRA_IS_REFRESH> = "android.telephony.extra.IS_REFRESH";

        <android.telephony.TelephonyManager: java.lang.String EXTRA_INCOMING_NUMBER> = "incoming_number";

        <android.telephony.TelephonyManager: java.lang.String EXTRA_HIDE_PUBLIC_SETTINGS> = "android.telephony.extra.HIDE_PUBLIC_SETTINGS";

        <android.telephony.TelephonyManager: java.lang.String EXTRA_ERROR_CODE> = "errorCode";

        <android.telephony.TelephonyManager: java.lang.String EXTRA_DISCONNECT_CAUSE> = "disconnect_cause";

        <android.telephony.TelephonyManager: int EXTRA_DEFAULT_SUBSCRIPTION_SELECT_TYPE_VOICE> = 2;

        <android.telephony.TelephonyManager: int EXTRA_DEFAULT_SUBSCRIPTION_SELECT_TYPE_SMS> = 3;

        <android.telephony.TelephonyManager: int EXTRA_DEFAULT_SUBSCRIPTION_SELECT_TYPE_NONE> = 0;

        <android.telephony.TelephonyManager: int EXTRA_DEFAULT_SUBSCRIPTION_SELECT_TYPE_DATA> = 1;

        <android.telephony.TelephonyManager: int EXTRA_DEFAULT_SUBSCRIPTION_SELECT_TYPE_ALL> = 4;

        <android.telephony.TelephonyManager: java.lang.String EXTRA_DEFAULT_SUBSCRIPTION_SELECT_TYPE> = "android.telephony.extra.DEFAULT_SUBSCRIPTION_SELECT_TYPE";

        <android.telephony.TelephonyManager: java.lang.String EXTRA_DEFAULT_NETWORK_AVAILABLE> = "defaultNetworkAvailable";

        <android.telephony.TelephonyManager: java.lang.String EXTRA_DATA_SPN> = "android.telephony.extra.DATA_SPN";

        <android.telephony.TelephonyManager: java.lang.String EXTRA_CARRIER_NAME> = "android.telephony.extra.CARRIER_NAME";

        <android.telephony.TelephonyManager: java.lang.String EXTRA_CARRIER_ID> = "android.telephony.extra.CARRIER_ID";

        <android.telephony.TelephonyManager: java.lang.String EXTRA_CALL_VOICEMAIL_INTENT> = "android.telephony.extra.CALL_VOICEMAIL_INTENT";

        <android.telephony.TelephonyManager: java.lang.String EXTRA_APN_TYPE_INT> = "apnTypeInt";

        <android.telephony.TelephonyManager: java.lang.String EXTRA_APN_TYPE> = "apnType";

        <android.telephony.TelephonyManager: java.lang.String EXTRA_APN_PROTOCOL_INT> = "apnProtoInt";

        <android.telephony.TelephonyManager: java.lang.String EXTRA_APN_PROTOCOL> = "apnProto";

        <android.telephony.TelephonyManager: java.lang.String EXTRA_ANOMALY_ID> = "android.telephony.extra.ANOMALY_ID";

        <android.telephony.TelephonyManager: java.lang.String EXTRA_ANOMALY_DESCRIPTION> = "android.telephony.extra.ANOMALY_DESCRIPTION";

        <android.telephony.TelephonyManager: java.lang.String EXTRA_ACTIVE_SIM_SUPPORTED_COUNT> = "android.telephony.extra.ACTIVE_SIM_SUPPORTED_COUNT";

        <android.telephony.TelephonyManager: java.lang.String EVENT_SUPPLEMENTARY_SERVICE_NOTIFICATION> = "android.telephony.event.EVENT_SUPPLEMENTARY_SERVICE_NOTIFICATION";

        <android.telephony.TelephonyManager: java.lang.String EVENT_NOTIFY_INTERNATIONAL_CALL_ON_WFC> = "android.telephony.event.EVENT_NOTIFY_INTERNATIONAL_CALL_ON_WFC";

        <android.telephony.TelephonyManager: java.lang.String EVENT_HANDOVER_VIDEO_FROM_WIFI_TO_LTE> = "android.telephony.event.EVENT_HANDOVER_VIDEO_FROM_WIFI_TO_LTE";

        <android.telephony.TelephonyManager: java.lang.String EVENT_HANDOVER_VIDEO_FROM_LTE_TO_WIFI> = "android.telephony.event.EVENT_HANDOVER_VIDEO_FROM_LTE_TO_WIFI";

        <android.telephony.TelephonyManager: java.lang.String EVENT_HANDOVER_TO_WIFI_FAILED> = "android.telephony.event.EVENT_HANDOVER_TO_WIFI_FAILED";

        <android.telephony.TelephonyManager: java.lang.String EVENT_DOWNGRADE_DATA_LIMIT_REACHED> = "android.telephony.event.EVENT_DOWNGRADE_DATA_LIMIT_REACHED";

        <android.telephony.TelephonyManager: java.lang.String EVENT_DOWNGRADE_DATA_DISABLED> = "android.telephony.event.EVENT_DOWNGRADE_DATA_DISABLED";

        <android.telephony.TelephonyManager: java.lang.String EVENT_CALL_FORWARDED> = "android.telephony.event.EVENT_CALL_FORWARDED";

        <android.telephony.TelephonyManager: boolean EMERGENCY_ASSISTANCE_ENABLED> = 1;

        <android.telephony.TelephonyManager: int DATA_UNKNOWN> = -1;

        <android.telephony.TelephonyManager: int DATA_SUSPENDED> = 3;

        <android.telephony.TelephonyManager: int DATA_DISCONNECTING> = 4;

        <android.telephony.TelephonyManager: int DATA_DISCONNECTED> = 0;

        <android.telephony.TelephonyManager: int DATA_CONNECTING> = 1;

        <android.telephony.TelephonyManager: int DATA_CONNECTED> = 2;

        <android.telephony.TelephonyManager: int DATA_ACTIVITY_OUT> = 2;

        <android.telephony.TelephonyManager: int DATA_ACTIVITY_NONE> = 0;

        <android.telephony.TelephonyManager: int DATA_ACTIVITY_INOUT> = 3;

        <android.telephony.TelephonyManager: int DATA_ACTIVITY_IN> = 1;

        <android.telephony.TelephonyManager: int DATA_ACTIVITY_DORMANT> = 4;

        <android.telephony.TelephonyManager: int CHANGE_ICC_LOCK_SUCCESS> = 2147483647;

        <android.telephony.TelephonyManager: int CDMA_SUBSCRIPTION_UNKNOWN> = -1;

        <android.telephony.TelephonyManager: int CDMA_SUBSCRIPTION_RUIM_SIM> = 0;

        <android.telephony.TelephonyManager: int CDMA_SUBSCRIPTION_NV> = 1;

        <android.telephony.TelephonyManager: int CDMA_ROAMING_MODE_RADIO_DEFAULT> = -1;

        <android.telephony.TelephonyManager: int CDMA_ROAMING_MODE_HOME> = 0;

        <android.telephony.TelephonyManager: int CDMA_ROAMING_MODE_ANY> = 2;

        <android.telephony.TelephonyManager: int CDMA_ROAMING_MODE_AFFILIATED> = 1;

        <android.telephony.TelephonyManager: int CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED> = -1;

        <android.telephony.TelephonyManager: int CARRIER_PRIVILEGE_STATUS_NO_ACCESS> = 0;

        <android.telephony.TelephonyManager: int CARRIER_PRIVILEGE_STATUS_HAS_ACCESS> = 1;

        <android.telephony.TelephonyManager: int CARRIER_PRIVILEGE_STATUS_ERROR_LOADING_RULES> = -2;

        <android.telephony.TelephonyManager: int CARD_POWER_UP_PASS_THROUGH> = 2;

        <android.telephony.TelephonyManager: int CARD_POWER_UP> = 1;

        <android.telephony.TelephonyManager: int CARD_POWER_DOWN> = 0;

        <android.telephony.TelephonyManager: int CALL_WAITING_STATUS_UNKNOWN_ERROR> = 3;

        <android.telephony.TelephonyManager: int CALL_WAITING_STATUS_NOT_SUPPORTED> = 4;

        <android.telephony.TelephonyManager: int CALL_WAITING_STATUS_INACTIVE> = 2;

        <android.telephony.TelephonyManager: int CALL_WAITING_STATUS_ACTIVE> = 1;

        <android.telephony.TelephonyManager: int CALL_STATE_RINGING> = 1;

        <android.telephony.TelephonyManager: int CALL_STATE_OFFHOOK> = 2;

        <android.telephony.TelephonyManager: int CALL_STATE_IDLE> = 0;

        <android.telephony.TelephonyManager: long CALLBACK_ON_MORE_ERROR_CODE_CHANGE> = 130595455L;

        <android.telephony.TelephonyManager: int AUTHTYPE_EAP_SIM> = 128;

        <android.telephony.TelephonyManager: int AUTHTYPE_EAP_AKA> = 129;

        <android.telephony.TelephonyManager: int APPTYPE_USIM> = 2;

        <android.telephony.TelephonyManager: int APPTYPE_SIM> = 1;

        <android.telephony.TelephonyManager: int APPTYPE_RUIM> = 3;

        <android.telephony.TelephonyManager: int APPTYPE_ISIM> = 5;

        <android.telephony.TelephonyManager: int APPTYPE_CSIM> = 4;

        <android.telephony.TelephonyManager: int ALLOWED_NETWORK_TYPES_REASON_POWER> = 0;

        <android.telephony.TelephonyManager: java.lang.String ACTION_SUBSCRIPTION_SPECIFIC_CARRIER_IDENTITY_CHANGED> = "android.telephony.action.SUBSCRIPTION_SPECIFIC_CARRIER_IDENTITY_CHANGED";

        <android.telephony.TelephonyManager: java.lang.String ACTION_SUBSCRIPTION_CARRIER_IDENTITY_CHANGED> = "android.telephony.action.SUBSCRIPTION_CARRIER_IDENTITY_CHANGED";

        <android.telephony.TelephonyManager: java.lang.String ACTION_SIM_SLOT_STATUS_CHANGED> = "android.telephony.action.SIM_SLOT_STATUS_CHANGED";

        <android.telephony.TelephonyManager: java.lang.String ACTION_SIM_CARD_STATE_CHANGED> = "android.telephony.action.SIM_CARD_STATE_CHANGED";

        <android.telephony.TelephonyManager: java.lang.String ACTION_SIM_APPLICATION_STATE_CHANGED> = "android.telephony.action.SIM_APPLICATION_STATE_CHANGED";

        <android.telephony.TelephonyManager: java.lang.String ACTION_SHOW_VOICEMAIL_NOTIFICATION> = "android.telephony.action.SHOW_VOICEMAIL_NOTIFICATION";

        <android.telephony.TelephonyManager: java.lang.String ACTION_SHOW_NOTICE_ECM_BLOCK_OTHERS> = "android.telephony.action.SHOW_NOTICE_ECM_BLOCK_OTHERS";

        <android.telephony.TelephonyManager: java.lang.String ACTION_SERVICE_PROVIDERS_UPDATED> = "android.telephony.action.SERVICE_PROVIDERS_UPDATED";

        <android.telephony.TelephonyManager: java.lang.String ACTION_SECRET_CODE> = "android.telephony.action.SECRET_CODE";

        <android.telephony.TelephonyManager: java.lang.String ACTION_RESPOND_VIA_MESSAGE> = "android.intent.action.RESPOND_VIA_MESSAGE";

        <android.telephony.TelephonyManager: java.lang.String ACTION_REQUEST_OMADM_CONFIGURATION_UPDATE> = "com.android.omadm.service.CONFIGURATION_UPDATE";

        <android.telephony.TelephonyManager: java.lang.String ACTION_PRIMARY_SUBSCRIPTION_LIST_CHANGED> = "android.telephony.action.PRIMARY_SUBSCRIPTION_LIST_CHANGED";

        <android.telephony.TelephonyManager: java.lang.String ACTION_PHONE_STATE_CHANGED> = "android.intent.action.PHONE_STATE";

        <android.telephony.TelephonyManager: java.lang.String ACTION_NETWORK_COUNTRY_CHANGED> = "android.telephony.action.NETWORK_COUNTRY_CHANGED";

        <android.telephony.TelephonyManager: java.lang.String ACTION_MULTI_SIM_CONFIG_CHANGED> = "android.telephony.action.MULTI_SIM_CONFIG_CHANGED";

        <android.telephony.TelephonyManager: java.lang.String ACTION_EMERGENCY_CALL_STATE_CHANGED> = "android.intent.action.EMERGENCY_CALL_STATE_CHANGED";

        <android.telephony.TelephonyManager: java.lang.String ACTION_EMERGENCY_CALLBACK_MODE_CHANGED> = "android.intent.action.EMERGENCY_CALLBACK_MODE_CHANGED";

        <android.telephony.TelephonyManager: java.lang.String ACTION_EMERGENCY_ASSISTANCE> = "android.telephony.action.EMERGENCY_ASSISTANCE";

        <android.telephony.TelephonyManager: java.lang.String ACTION_DEFAULT_VOICE_SUBSCRIPTION_CHANGED> = "android.intent.action.ACTION_DEFAULT_VOICE_SUBSCRIPTION_CHANGED";

        <android.telephony.TelephonyManager: java.lang.String ACTION_DEFAULT_DATA_SUBSCRIPTION_CHANGED> = "android.intent.action.ACTION_DEFAULT_DATA_SUBSCRIPTION_CHANGED";

        <android.telephony.TelephonyManager: java.lang.String ACTION_DATA_STALL_DETECTED> = "android.intent.action.DATA_STALL_DETECTED";

        <android.telephony.TelephonyManager: java.lang.String ACTION_CONFIGURE_VOICEMAIL> = "android.telephony.action.CONFIGURE_VOICEMAIL";

        <android.telephony.TelephonyManager: java.lang.String ACTION_CARRIER_SIGNAL_RESET> = "com.android.internal.telephony.CARRIER_SIGNAL_RESET";

        <android.telephony.TelephonyManager: java.lang.String ACTION_CARRIER_SIGNAL_REQUEST_NETWORK_FAILED> = "com.android.internal.telephony.CARRIER_SIGNAL_REQUEST_NETWORK_FAILED";

        <android.telephony.TelephonyManager: java.lang.String ACTION_CARRIER_SIGNAL_REDIRECTED> = "com.android.internal.telephony.CARRIER_SIGNAL_REDIRECTED";

        <android.telephony.TelephonyManager: java.lang.String ACTION_CARRIER_SIGNAL_PCO_VALUE> = "com.android.internal.telephony.CARRIER_SIGNAL_PCO_VALUE";

        <android.telephony.TelephonyManager: java.lang.String ACTION_CARRIER_SIGNAL_DEFAULT_NETWORK_AVAILABLE> = "com.android.internal.telephony.CARRIER_SIGNAL_DEFAULT_NETWORK_AVAILABLE";

        <android.telephony.TelephonyManager: java.lang.String ACTION_CARRIER_MESSAGING_CLIENT_SERVICE> = "android.telephony.action.CARRIER_MESSAGING_CLIENT_SERVICE";

        <android.telephony.TelephonyManager: java.lang.String ACTION_CALL_DISCONNECT_CAUSE_CHANGED> = "android.intent.action.CALL_DISCONNECT_CAUSE";

        <android.telephony.TelephonyManager: java.lang.String ACTION_ANOMALY_REPORTED> = "android.telephony.action.ANOMALY_REPORTED";

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <android.telephony.TelephonyManager: java.lang.Object sCacheLock> = $r0;

        <android.telephony.TelephonyManager: boolean sServiceHandleCacheEnabled> = 1;

        $r1 = new android.telephony.TelephonyManager$DeathRecipient;

        specialinvoke $r1.<android.telephony.TelephonyManager$DeathRecipient: void <init>(android.telephony.TelephonyManager$1)>(null);

        <android.telephony.TelephonyManager: android.telephony.TelephonyManager$DeathRecipient sServiceDeath> = $r1;

        $r2 = new android.telephony.TelephonyManager;

        specialinvoke $r2.<android.telephony.TelephonyManager: void <init>()>();

        <android.telephony.TelephonyManager: android.telephony.TelephonyManager sInstance> = $r2;

        $r3 = <com.android.internal.telephony.PhoneConstants$State: com.android.internal.telephony.PhoneConstants$State IDLE>;

        $r4 = virtualinvoke $r3.<com.android.internal.telephony.PhoneConstants$State: java.lang.String toString()>();

        <android.telephony.TelephonyManager: java.lang.String EXTRA_STATE_IDLE> = $r4;

        $r5 = <com.android.internal.telephony.PhoneConstants$State: com.android.internal.telephony.PhoneConstants$State RINGING>;

        $r6 = virtualinvoke $r5.<com.android.internal.telephony.PhoneConstants$State: java.lang.String toString()>();

        <android.telephony.TelephonyManager: java.lang.String EXTRA_STATE_RINGING> = $r6;

        $r7 = <com.android.internal.telephony.PhoneConstants$State: com.android.internal.telephony.PhoneConstants$State OFFHOOK>;

        $r8 = virtualinvoke $r7.<com.android.internal.telephony.PhoneConstants$State: java.lang.String toString()>();

        <android.telephony.TelephonyManager: java.lang.String EXTRA_STATE_OFFHOOK> = $r8;

        $r9 = staticinvoke <android.telephony.TelephonyManager: java.lang.String getProcCmdLine()>();

        <android.telephony.TelephonyManager: java.lang.String sKernelCmdLine> = $r9;

        $r10 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\sproduct_type\\s*=\\s*(\\w+)");

        <android.telephony.TelephonyManager: java.util.regex.Pattern sProductTypePattern> = $r10;

        $r11 = staticinvoke <android.sysprop.TelephonyProperties: java.util.Optional lte_on_cdma_product_type()>();

        $r12 = virtualinvoke $r11.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>("");

        $r13 = (java.lang.String) $r12;

        <android.telephony.TelephonyManager: java.lang.String sLteOnCdmaProductType> = $r13;

        $r14 = newarray (int)[20];

        $r14[0] = 1;

        $r14[1] = 2;

        $r14[2] = 3;

        $r14[3] = 4;

        $r14[4] = 5;

        $r14[5] = 6;

        $r14[6] = 7;

        $r14[7] = 8;

        $r14[8] = 9;

        $r14[9] = 10;

        $r14[10] = 11;

        $r14[11] = 12;

        $r14[12] = 13;

        $r14[13] = 14;

        $r14[14] = 15;

        $r14[15] = 16;

        $r14[16] = 17;

        $r14[17] = 18;

        $r14[18] = 19;

        $r14[19] = 20;

        <android.telephony.TelephonyManager: int[] NETWORK_TYPES> = $r14;

        $i0 = <com.android.internal.telephony.RILConstants: int PREFERRED_NETWORK_MODE>;

        <android.telephony.TelephonyManager: int DEFAULT_PREFERRED_NETWORK_MODE> = $i0;

        return;
    }

    private void <init>()
    {
        android.telephony.TelephonyManager r0;

        r0 := @this: android.telephony.TelephonyManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.telephony.TelephonyManager: android.content.Context mContext> = null;

        r0.<android.telephony.TelephonyManager: int mSubId> = -1;

        return;
    }

    public void <init>(android.content.Context)
    {
        android.telephony.TelephonyManager r0;
        android.content.Context r1;

        r0 := @this: android.telephony.TelephonyManager;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.telephony.TelephonyManager: void <init>(android.content.Context,int)>(r1, 2147483647);

        return;
    }

    public void <init>(android.content.Context, int)
    {
        android.telephony.TelephonyManager r0;
        android.content.Context r1, r2, $r6, $r7;
        int i0;
        java.lang.String $r3, $r4, $r5;
        boolean $z0;
        android.telephony.SubscriptionManager $r8;

        r0 := @this: android.telephony.TelephonyManager;

        r1 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.telephony.TelephonyManager: int mSubId> = i0;

        r2 = virtualinvoke r1.<android.content.Context: android.content.Context getApplicationContext()>();

        if r2 == null goto label2;

        $r3 = virtualinvoke r1.<android.content.Context: java.lang.String getAttributionTag()>();

        $r4 = virtualinvoke r2.<android.content.Context: java.lang.String getAttributionTag()>();

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r3, $r4);

        if $z0 == 0 goto label1;

        r0.<android.telephony.TelephonyManager: android.content.Context mContext> = r2;

        goto label3;

     label1:
        $r5 = virtualinvoke r1.<android.content.Context: java.lang.String getAttributionTag()>();

        $r6 = virtualinvoke r2.<android.content.Context: android.content.Context createAttributionContext(java.lang.String)>($r5);

        r0.<android.telephony.TelephonyManager: android.content.Context mContext> = $r6;

        goto label3;

     label2:
        r0.<android.telephony.TelephonyManager: android.content.Context mContext> = r1;

     label3:
        $r7 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r8 = staticinvoke <android.telephony.SubscriptionManager: android.telephony.SubscriptionManager 'from'(android.content.Context)>($r7);

        r0.<android.telephony.TelephonyManager: android.telephony.SubscriptionManager mSubscriptionManager> = $r8;

        return;
    }

    static java.lang.Throwable access$100(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        java.lang.Throwable $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <android.telephony.TelephonyManager: java.lang.Throwable createThrowableByClassName(java.lang.String,java.lang.String)>(r0, r1);

        return $r2;
    }

    static void access$200()
    {
        staticinvoke <android.telephony.TelephonyManager: void resetServiceCache()>();

        return;
    }

    private static java.lang.Throwable createThrowableByClassName(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r13;
        java.lang.Class $r2;
        java.lang.Class[] $r3;
        java.lang.reflect.Constructor $r4;
        java.lang.Object[] $r5;
        java.lang.Object $r6;
        java.lang.Throwable $r7, r14;
        java.lang.StringBuilder $r8;
        java.lang.RuntimeException $r12;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        $r3 = newarray (java.lang.Class)[1];

        $r3[0] = class "Ljava/lang/String;";

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r3);

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = r1;

        $r6 = virtualinvoke $r4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r5);

        r14 = (java.lang.Throwable) $r6;

     label2:
        return r14;

     label3:
        $r7 := @caughtexception;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = new java.lang.RuntimeException;

        $r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String)>($r13);

        return $r12;

        catch java.lang.ReflectiveOperationException from label1 to label2 with label3;
        catch java.lang.ClassCastException from label1 to label2 with label3;
    }

    public static java.lang.String dataStateToString(int)
    {
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r5;

        i0 := @parameter0: int;

        if i0 == 0 goto label5;

        if i0 == 1 goto label4;

        if i0 == 2 goto label3;

        if i0 == 3 goto label2;

        if i0 == 4 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UNKNOWN(");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;

     label1:
        return "DISCONNECTING";

     label2:
        return "SUSPENDED";

     label3:
        return "CONNECTED";

     label4:
        return "CONNECTING";

     label5:
        return "DISCONNECTED";
    }

    public static void disableServiceHandleCaching()
    {
        <android.telephony.TelephonyManager: boolean sServiceHandleCacheEnabled> = 0;

        return;
    }

    public static void enableServiceHandleCaching()
    {
        <android.telephony.TelephonyManager: boolean sServiceHandleCacheEnabled> = 1;

        return;
    }

    public static android.telephony.TelephonyManager 'from'(android.content.Context)
    {
        android.content.Context r0;
        java.lang.Object $r1;
        android.telephony.TelephonyManager $r2;

        r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("phone");

        $r2 = (android.telephony.TelephonyManager) $r1;

        return $r2;
    }

    public static int[] getAllNetworkTypes()
    {
        int[] $r0;

        $r0 = <android.telephony.TelephonyManager: int[] NETWORK_TYPES>;

        return $r0;
    }

    public static long getAllNetworkTypesBitmask()
    {
        return 916479L;
    }

    private java.lang.String getAttributionTag()
    {
        android.telephony.TelephonyManager r0;
        android.content.Context r1;
        java.lang.String $r2;

        r0 := @this: android.telephony.TelephonyManager;

        r1 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        if r1 == null goto label1;

        $r2 = virtualinvoke r1.<android.content.Context: java.lang.String getAttributionTag()>();

        return $r2;

     label1:
        return null;
    }

    public static long getBitMaskForNetworkType(int)
    {
        int i0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label19;
            case 2: goto label18;
            case 3: goto label17;
            case 4: goto label16;
            case 5: goto label15;
            case 6: goto label14;
            case 7: goto label13;
            case 8: goto label12;
            case 9: goto label11;
            case 10: goto label10;
            case 11: goto label01;
            case 12: goto label09;
            case 13: goto label08;
            case 14: goto label07;
            case 15: goto label06;
            case 16: goto label05;
            case 17: goto label04;
            case 18: goto label01;
            case 19: goto label03;
            case 20: goto label02;
            default: goto label01;
        };

     label01:
        return 0L;

     label02:
        return 524288L;

     label03:
        return 262144L;

     label04:
        return 65536L;

     label05:
        return 32768L;

     label06:
        return 16384L;

     label07:
        return 8192L;

     label08:
        return 4096L;

     label09:
        return 2048L;

     label10:
        return 512L;

     label11:
        return 256L;

     label12:
        return 128L;

     label13:
        return 64L;

     label14:
        return 32L;

     label15:
        return 16L;

     label16:
        return 8L;

     label17:
        return 4L;

     label18:
        return 2L;

     label19:
        return 1L;
    }

    public static android.telephony.TelephonyManager getDefault()
    {
        android.telephony.TelephonyManager $r0;

        $r0 = <android.telephony.TelephonyManager: android.telephony.TelephonyManager sInstance>;

        return $r0;
    }

    private com.android.internal.telephony.IOns getIOns()
    {
        android.telephony.TelephonyManager r0;
        android.os.TelephonyServiceManager $r1;
        android.os.TelephonyServiceManager$ServiceRegisterer $r2;
        android.os.IBinder $r3;
        com.android.internal.telephony.IOns $r4;

        r0 := @this: android.telephony.TelephonyManager;

        $r1 = staticinvoke <android.telephony.TelephonyFrameworkInitializer: android.os.TelephonyServiceManager getTelephonyServiceManager()>();

        $r2 = virtualinvoke $r1.<android.os.TelephonyServiceManager: android.os.TelephonyServiceManager$ServiceRegisterer getOpportunisticNetworkServiceRegisterer()>();

        $r3 = virtualinvoke $r2.<android.os.TelephonyServiceManager$ServiceRegisterer: android.os.IBinder get()>();

        $r4 = staticinvoke <com.android.internal.telephony.IOns$Stub: com.android.internal.telephony.IOns asInterface(android.os.IBinder)>($r3);

        return $r4;
    }

    private com.android.internal.telephony.ITelephony getITelephony()
    {
        android.telephony.TelephonyManager r0;
        android.os.TelephonyServiceManager $r1;
        android.os.TelephonyServiceManager$ServiceRegisterer $r2;
        android.os.IBinder $r3;
        com.android.internal.telephony.ITelephony $r4;

        r0 := @this: android.telephony.TelephonyManager;

        $r1 = staticinvoke <android.telephony.TelephonyFrameworkInitializer: android.os.TelephonyServiceManager getTelephonyServiceManager()>();

        $r2 = virtualinvoke $r1.<android.os.TelephonyServiceManager: android.os.TelephonyServiceManager$ServiceRegisterer getTelephonyServiceRegisterer()>();

        $r3 = virtualinvoke $r2.<android.os.TelephonyServiceManager$ServiceRegisterer: android.os.IBinder get()>();

        $r4 = staticinvoke <com.android.internal.telephony.ITelephony$Stub: com.android.internal.telephony.ITelephony asInterface(android.os.IBinder)>($r3);

        return $r4;
    }

    public static int getIntAtIndex(android.content.ContentResolver, java.lang.String, int) throws android.provider.Settings$SettingNotFoundException
    {
        java.lang.String r0, $r1, $r2, r5;
        int $i0, i1, i2;
        java.lang.Throwable $r3;
        android.content.ContentResolver r4;
        java.lang.String[] r6;
        android.provider.Settings$SettingNotFoundException $r8;

        r4 := @parameter0: android.content.ContentResolver;

        r0 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        r5 = staticinvoke <android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>(r4, r0);

        if r5 == null goto label4;

        r6 = virtualinvoke r5.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        if i1 < 0 goto label4;

        $i0 = lengthof r6;

        if i1 >= $i0 goto label4;

        $r1 = r6[i1];

        if $r1 == null goto label4;

     label1:
        $r2 = r6[i1];

        i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

     label2:
        return i2;

     label3:
        $r3 := @caughtexception;

     label4:
        $r8 = new android.provider.Settings$SettingNotFoundException;

        specialinvoke $r8.<android.provider.Settings$SettingNotFoundException: void <init>(java.lang.String)>(r0);

        throw $r8;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    private int getLogicalSlotIndex(int)
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1, $i2;
        android.telephony.UiccSlotInfo[] r1;
        android.telephony.UiccSlotInfo $r2;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<android.telephony.TelephonyManager: android.telephony.UiccSlotInfo[] getUiccSlotsInfo()>();

        if r1 == null goto label1;

        if i0 < 0 goto label1;

        $i1 = lengthof r1;

        if i0 >= $i1 goto label1;

        $r2 = r1[i0];

        $i2 = virtualinvoke $r2.<android.telephony.UiccSlotInfo: int getLogicalSlotIdx()>();

        return $i2;

     label1:
        return -1;
    }

    public static int getLteOnCdmaModeStatic()
    {
        int i0, i3;
        java.util.Optional $r0;
        java.lang.Integer $r1, $r3;
        java.lang.Object $r2;
        java.lang.String $r13, $r15, r17, $r21, $r22;
        java.util.regex.Pattern $r14;
        boolean $z0, $z1;
        java.util.regex.Matcher r18;
        java.lang.StringBuilder $r19;

        $r0 = staticinvoke <android.sysprop.TelephonyProperties: java.util.Optional lte_on_cdma_device()>();

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        $r2 = virtualinvoke $r0.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>($r1);

        $r3 = (java.lang.Integer) $r2;

        i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        r17 = "";

        i3 = i0;

        if i0 != -1 goto label3;

        $r14 = <android.telephony.TelephonyManager: java.util.regex.Pattern sProductTypePattern>;

        $r13 = <android.telephony.TelephonyManager: java.lang.String sKernelCmdLine>;

        r18 = virtualinvoke $r14.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r13);

        $z0 = virtualinvoke r18.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label2;

        r17 = virtualinvoke r18.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r15 = <android.telephony.TelephonyManager: java.lang.String sLteOnCdmaProductType>;

        $z1 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r17);

        if $z1 == 0 goto label1;

        i3 = 1;

        goto label3;

     label1:
        i3 = 0;

        goto label3;

     label2:
        i3 = 0;

        r17 = "";

     label3:
        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getLteOnCdmaMode=");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" curVal=");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" product_type=\'");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' lteOnCdmaProductType=\'");

        $r21 = <android.telephony.TelephonyManager: java.lang.String sLteOnCdmaProductType>;

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("TelephonyManager", $r22);

        return i3;
    }

    public static long getMaxNumberVerificationTimeoutMillis()
    {
        return 60000L;
    }

    private java.lang.String getNaiBySubscriberId(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        java.lang.String r1, $r3, $r5, $r8;
        android.content.Context $r2, $r4;
        boolean $z0;
        java.lang.NullPointerException $r9;
        android.os.RemoteException $r10;
        com.android.internal.telephony.IPhoneSubInfo r11;
        java.lang.StringBuilder r12;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r11 = staticinvoke <android.telephony.TelephonyManager: com.android.internal.telephony.IPhoneSubInfo getSubscriberInfoService()>();

     label2:
        if r11 != null goto label3;

        return null;

     label3:
        $r2 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.String getOpPackageName()>();

        $r4 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.String getAttributionTag()>();

        r1 = interfaceinvoke r11.<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getNaiForSubscriber(int,java.lang.String,java.lang.String)>(i0, $r3, $r5);

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("TelephonyManager", 2);

        if $z0 == 0 goto label4;

        r12 = new java.lang.StringBuilder;

        specialinvoke r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Nai = ");

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int v(java.lang.String,java.lang.String)>("TelephonyManager", $r8);

     label4:
        return r1;

     label5:
        $r9 := @caughtexception;

        return null;

     label6:
        $r10 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.NullPointerException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public static java.lang.String getNetworkTypeName(int)
    {
        int i0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label21;
            case 2: goto label20;
            case 3: goto label19;
            case 4: goto label18;
            case 5: goto label17;
            case 6: goto label16;
            case 7: goto label15;
            case 8: goto label14;
            case 9: goto label13;
            case 10: goto label12;
            case 11: goto label11;
            case 12: goto label10;
            case 13: goto label09;
            case 14: goto label08;
            case 15: goto label07;
            case 16: goto label06;
            case 17: goto label05;
            case 18: goto label04;
            case 19: goto label03;
            case 20: goto label02;
            default: goto label01;
        };

     label01:
        return "UNKNOWN";

     label02:
        return "NR";

     label03:
        return "LTE_CA";

     label04:
        return "IWLAN";

     label05:
        return "TD_SCDMA";

     label06:
        return "GSM";

     label07:
        return "HSPA+";

     label08:
        return "CDMA - eHRPD";

     label09:
        return "LTE";

     label10:
        return "CDMA - EvDo rev. B";

     label11:
        return "iDEN";

     label12:
        return "HSPA";

     label13:
        return "HSUPA";

     label14:
        return "HSDPA";

     label15:
        return "CDMA - 1xRTT";

     label16:
        return "CDMA - EvDo rev. A";

     label17:
        return "CDMA - EvDo rev. 0";

     label18:
        return "CDMA";

     label19:
        return "UMTS";

     label20:
        return "EDGE";

     label21:
        return "GPRS";
    }

    private java.lang.String getOpPackageName()
    {
        android.telephony.TelephonyManager r0;
        java.lang.String $r1, r6;
        java.lang.NullPointerException $r2;
        android.os.RemoteException $r3;
        android.content.Context r4;
        com.android.internal.telephony.ITelephony r5;

        r0 := @this: android.telephony.TelephonyManager;

        r4 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        if r4 == null goto label1;

        $r1 = virtualinvoke r4.<android.content.Context: java.lang.String getOpPackageName()>();

        return $r1;

     label1:
        r5 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

        if r5 != null goto label2;

        return null;

     label2:
        r6 = interfaceinvoke r5.<com.android.internal.telephony.ITelephony: java.lang.String getCurrentPackageName()>();

     label3:
        return r6;

     label4:
        $r2 := @caughtexception;

        return null;

     label5:
        $r3 := @caughtexception;

        return null;

        catch android.os.RemoteException from label2 to label3 with label5;
        catch java.lang.NullPointerException from label2 to label3 with label4;
    }

    private int getPhoneId()
    {
        android.telephony.TelephonyManager r0;
        int $i0, $i1;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $i1 = staticinvoke <android.telephony.SubscriptionManager: int getPhoneId(int)>($i0);

        return $i1;
    }

    private int getPhoneId(int)
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1, $i2;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId(int)>(i0);

        $i2 = staticinvoke <android.telephony.SubscriptionManager: int getPhoneId(int)>($i1);

        return $i2;
    }

    public static int getPhoneType(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        if i0 == 11 goto label4;

        if i0 == 21 goto label3;

        tableswitch(i0)
        {
            case 4: goto label2;
            case 5: goto label2;
            case 6: goto label2;
            case 7: goto label3;
            case 8: goto label3;
            default: goto label1;
        };

     label1:
        return 1;

     label2:
        return 2;

     label3:
        return 2;

     label4:
        $i1 = staticinvoke <android.telephony.TelephonyManager: int getLteOnCdmaModeStatic()>();

        if $i1 != 1 goto label5;

        return 2;

     label5:
        return 1;
    }

    private int getPhoneTypeFromNetworkType()
    {
        android.telephony.TelephonyManager r0;
        int $i0, $i1;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getPhoneId()>();

        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getPhoneTypeFromNetworkType(int)>($i0);

        return $i1;
    }

    private int getPhoneTypeFromNetworkType(int)
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1, $i2;
        java.lang.Integer r1;
        java.util.List $r2;
        java.lang.Object $r3;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        $r2 = staticinvoke <android.sysprop.TelephonyProperties: java.util.List default_network()>();

        $r3 = staticinvoke <android.telephony.TelephonyManager: java.lang.Object getTelephonyProperty(int,java.util.List,java.lang.Object)>(i0, $r2, null);

        r1 = (java.lang.Integer) $r3;

        if r1 == null goto label1;

        $i1 = virtualinvoke r1.<java.lang.Integer: int intValue()>();

        $i2 = staticinvoke <android.telephony.TelephonyManager: int getPhoneType(int)>($i1);

        return $i2;

     label1:
        return 0;
    }

    private int getPhoneTypeFromProperty()
    {
        android.telephony.TelephonyManager r0;
        int $i0, $i1;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getPhoneId()>();

        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getPhoneTypeFromProperty(int)>($i0);

        return $i1;
    }

    private int getPhoneTypeFromProperty(int)
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1, $i2;
        java.lang.Integer r1;
        java.util.List $r2;
        java.lang.Object $r3;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        $r2 = staticinvoke <android.sysprop.TelephonyProperties: java.util.List current_active_phone()>();

        $r3 = staticinvoke <android.telephony.TelephonyManager: java.lang.Object getTelephonyProperty(int,java.util.List,java.lang.Object)>(i0, $r2, null);

        r1 = (java.lang.Integer) $r3;

        if r1 == null goto label1;

        $i2 = virtualinvoke r1.<java.lang.Integer: int intValue()>();

        return $i2;

     label1:
        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getPhoneTypeFromNetworkType(int)>(i0);

        return $i1;
    }

    private static java.lang.String getProcCmdLine()
    {
        int i0;
        java.lang.StringBuilder $r0, r19;
        java.lang.String $r1, $r5, r7, r13, r14, r15, r16;
        java.lang.Throwable $r2, $r3, $r4, $r6;
        java.io.FileInputStream r8, r9, r10;
        byte[] r12;

        r7 = "";

        r8 = null;

        r9 = null;

     label01:
        r10 = new java.io.FileInputStream;

     label02:
        r8 = null;

        r9 = null;

     label03:
        specialinvoke r10.<java.io.FileInputStream: void <init>(java.lang.String)>("/proc/cmdline");

     label04:
        r8 = r10;

        r9 = r10;

     label05:
        r12 = newarray (byte)[2048];

     label06:
        r8 = r10;

        r9 = r10;

     label07:
        i0 = virtualinvoke r10.<java.io.FileInputStream: int read(byte[])>(r12);

     label08:
        r13 = "";

        if i0 <= 0 goto label13;

        r8 = r10;

        r9 = r10;

     label09:
        r14 = new java.lang.String;

     label10:
        r8 = r10;

        r9 = r10;

     label11:
        specialinvoke r14.<java.lang.String: void <init>(byte[],int,int)>(r12, 0, i0);

     label12:
        r13 = r14;

     label13:
        r15 = r13;

     label14:
        virtualinvoke r10.<java.io.FileInputStream: void close()>();

     label15:
        r7 = r13;

     label16:
        r16 = r7;

        goto label32;

     label17:
        $r6 := @caughtexception;

        r7 = r15;

        goto label16;

     label18:
        $r2 := @caughtexception;

        goto label33;

     label19:
        $r4 := @caughtexception;

        r8 = r9;

     label20:
        r19 = new java.lang.StringBuilder;

     label21:
        r8 = r9;

     label22:
        specialinvoke r19.<java.lang.StringBuilder: void <init>()>();

     label23:
        r8 = r9;

     label24:
        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No /proc/cmdline exception=");

     label25:
        r8 = r9;

     label26:
        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

     label27:
        r8 = r9;

     label28:
        $r5 = virtualinvoke r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("TelephonyManager", $r5);

     label29:
        r16 = "";

        if r9 == null goto label32;

        r15 = "";

     label30:
        virtualinvoke r9.<java.io.FileInputStream: void close()>();

     label31:
        goto label16;

     label32:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/proc/cmdline=");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("TelephonyManager", $r1);

        return r16;

     label33:
        if r8 == null goto label37;

     label34:
        virtualinvoke r8.<java.io.FileInputStream: void close()>();

     label35:
        goto label37;

     label36:
        $r3 := @caughtexception;

     label37:
        throw $r2;

        catch java.io.IOException from label01 to label02 with label19;
        catch java.lang.Throwable from label01 to label02 with label18;
        catch java.io.IOException from label03 to label04 with label19;
        catch java.lang.Throwable from label03 to label04 with label18;
        catch java.io.IOException from label05 to label06 with label19;
        catch java.lang.Throwable from label05 to label06 with label18;
        catch java.io.IOException from label07 to label08 with label19;
        catch java.lang.Throwable from label07 to label08 with label18;
        catch java.io.IOException from label09 to label10 with label19;
        catch java.lang.Throwable from label09 to label10 with label18;
        catch java.io.IOException from label11 to label12 with label19;
        catch java.lang.Throwable from label11 to label12 with label18;
        catch java.io.IOException from label14 to label15 with label17;
        catch java.lang.Throwable from label20 to label21 with label18;
        catch java.lang.Throwable from label22 to label23 with label18;
        catch java.lang.Throwable from label24 to label25 with label18;
        catch java.lang.Throwable from label26 to label27 with label18;
        catch java.lang.Throwable from label28 to label29 with label18;
        catch java.io.IOException from label30 to label31 with label17;
        catch java.io.IOException from label34 to label35 with label36;
    }

    private int getSimApplicationStateFromSimState(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        if i0 == 0 goto label2;

        if i0 == 1 goto label2;

        if i0 == 5 goto label1;

        if i0 == 8 goto label2;

        if i0 == 9 goto label2;

        return i0;

     label1:
        return 6;

     label2:
        return 0;
    }

    private int getSimCardStateFromSimState(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        if i0 == 0 goto label1;

        if i0 == 1 goto label1;

        if i0 == 8 goto label1;

        if i0 == 9 goto label1;

        return 11;

     label1:
        return i0;
    }

    public static java.lang.String getSimCountryIso(int)
    {
        int i0, $i1;
        java.lang.String $r0;

        i0 := @parameter0: int;

        $i1 = staticinvoke <android.telephony.SubscriptionManager: int getPhoneId(int)>(i0);

        $r0 = staticinvoke <android.telephony.TelephonyManager: java.lang.String getSimCountryIsoForPhone(int)>($i1);

        return $r0;
    }

    public static java.lang.String getSimCountryIsoForPhone(int)
    {
        int i0;
        java.util.List $r0;
        java.lang.Object $r1;
        java.lang.String $r2;

        i0 := @parameter0: int;

        $r0 = staticinvoke <android.sysprop.TelephonyProperties: java.util.List icc_operator_iso_country()>();

        $r1 = staticinvoke <android.telephony.TelephonyManager: java.lang.Object getTelephonyProperty(int,java.util.List,java.lang.Object)>(i0, $r0, "");

        $r2 = (java.lang.String) $r1;

        return $r2;
    }

    private int getSimStateIncludingLoaded()
    {
        android.telephony.TelephonyManager r0;
        int i0, i1, $i2, $i3, i6;
        java.lang.StringBuilder $r1, $r6;
        java.lang.String $r5, $r14;

        r0 := @this: android.telephony.TelephonyManager;

        i0 = virtualinvoke r0.<android.telephony.TelephonyManager: int getSlotIndex()>();

        if i0 >= 0 goto label4;

        i6 = 0;

     label1:
        $i3 = virtualinvoke r0.<android.telephony.TelephonyManager: int getPhoneCount()>();

        if i6 >= $i3 goto label3;

        i1 = virtualinvoke r0.<android.telephony.TelephonyManager: int getSimState(int)>(i6);

        if i1 == 1 goto label2;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getSimState: default sim:");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", sim state for slotIndex=");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", return state as unknown");

        $r14 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("TelephonyManager", $r14);

        return 0;

     label2:
        i6 = i6 + 1;

        goto label1;

     label3:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getSimState: default sim:");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", all SIMs absent, return state as absent");

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("TelephonyManager", $r5);

        return 1;

     label4:
        $i2 = staticinvoke <android.telephony.SubscriptionManager: int getSimStateForSlotIndex(int)>(i0);

        return $i2;
    }

    static com.android.internal.telephony.ISms getSmsService()
    {
        java.lang.Object r0;
        com.android.internal.telephony.ISms r1, $r2, $r3, $r12, r15;
        boolean $z0;
        android.os.TelephonyServiceManager $r4, $r9;
        android.os.TelephonyServiceManager$ServiceRegisterer $r5, $r10;
        android.os.IBinder $r6, $r7, $r11;
        android.telephony.TelephonyManager$DeathRecipient $r8;
        java.lang.Throwable $r13;
        java.lang.Exception $r14;

        $z0 = <android.telephony.TelephonyManager: boolean sServiceHandleCacheEnabled>;

        if $z0 != 0 goto label01;

        $r9 = staticinvoke <android.telephony.TelephonyFrameworkInitializer: android.os.TelephonyServiceManager getTelephonyServiceManager()>();

        $r10 = virtualinvoke $r9.<android.os.TelephonyServiceManager: android.os.TelephonyServiceManager$ServiceRegisterer getSmsServiceRegisterer()>();

        $r11 = virtualinvoke $r10.<android.os.TelephonyServiceManager$ServiceRegisterer: android.os.IBinder get()>();

        $r12 = staticinvoke <com.android.internal.telephony.ISms$Stub: com.android.internal.telephony.ISms asInterface(android.os.IBinder)>($r11);

        return $r12;

     label01:
        $r2 = <android.telephony.TelephonyManager: com.android.internal.telephony.ISms sISms>;

        if $r2 != null goto label13;

        $r4 = staticinvoke <android.telephony.TelephonyFrameworkInitializer: android.os.TelephonyServiceManager getTelephonyServiceManager()>();

        $r5 = virtualinvoke $r4.<android.os.TelephonyServiceManager: android.os.TelephonyServiceManager$ServiceRegisterer getSmsServiceRegisterer()>();

        $r6 = virtualinvoke $r5.<android.os.TelephonyServiceManager$ServiceRegisterer: android.os.IBinder get()>();

        r15 = staticinvoke <com.android.internal.telephony.ISms$Stub: com.android.internal.telephony.ISms asInterface(android.os.IBinder)>($r6);

        r0 = <android.telephony.TelephonyManager: java.lang.Object sCacheLock>;

        entermonitor r0;

     label02:
        r1 = <android.telephony.TelephonyManager: com.android.internal.telephony.ISms sISms>;

     label03:
        if r1 != null goto label08;

        if r15 == null goto label08;

     label04:
        <android.telephony.TelephonyManager: com.android.internal.telephony.ISms sISms> = r15;

        $r7 = interfaceinvoke r15.<com.android.internal.telephony.ISms: android.os.IBinder asBinder()>();

        $r8 = <android.telephony.TelephonyManager: android.telephony.TelephonyManager$DeathRecipient sServiceDeath>;

        interfaceinvoke $r7.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r8, 0);

     label05:
        goto label08;

     label06:
        $r14 := @caughtexception;

     label07:
        <android.telephony.TelephonyManager: com.android.internal.telephony.ISms sISms> = null;

     label08:
        exitmonitor r0;

     label09:
        goto label13;

     label10:
        $r13 := @caughtexception;

     label11:
        exitmonitor r0;

     label12:
        throw $r13;

     label13:
        $r3 = <android.telephony.TelephonyManager: com.android.internal.telephony.ISms sISms>;

        return $r3;

        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Exception from label04 to label05 with label06;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private int getSubId()
    {
        android.telephony.TelephonyManager r0;
        int $i0, $i1, $i2;
        boolean $z0;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = r0.<android.telephony.TelephonyManager: int mSubId>;

        $z0 = staticinvoke <android.telephony.SubscriptionManager: boolean isUsableSubIdValue(int)>($i0);

        if $z0 == 0 goto label1;

        $i2 = r0.<android.telephony.TelephonyManager: int mSubId>;

        return $i2;

     label1:
        $i1 = staticinvoke <android.telephony.SubscriptionManager: int getDefaultSubscriptionId()>();

        return $i1;
    }

    private int getSubId(int)
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1, $i2;
        boolean $z0;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        $i1 = r0.<android.telephony.TelephonyManager: int mSubId>;

        $z0 = staticinvoke <android.telephony.SubscriptionManager: boolean isUsableSubIdValue(int)>($i1);

        if $z0 == 0 goto label1;

        $i2 = r0.<android.telephony.TelephonyManager: int mSubId>;

        return $i2;

     label1:
        return i0;
    }

    private com.android.internal.telephony.IPhoneSubInfo getSubscriberInfo()
    {
        android.telephony.TelephonyManager r0;
        com.android.internal.telephony.IPhoneSubInfo $r1;

        r0 := @this: android.telephony.TelephonyManager;

        $r1 = staticinvoke <android.telephony.TelephonyManager: com.android.internal.telephony.IPhoneSubInfo getSubscriberInfoService()>();

        return $r1;
    }

    static com.android.internal.telephony.IPhoneSubInfo getSubscriberInfoService()
    {
        java.lang.Object r0;
        com.android.internal.telephony.IPhoneSubInfo r1, $r2, $r3, $r12, r15;
        boolean $z0;
        android.os.TelephonyServiceManager $r4, $r9;
        android.os.TelephonyServiceManager$ServiceRegisterer $r5, $r10;
        android.os.IBinder $r6, $r7, $r11;
        android.telephony.TelephonyManager$DeathRecipient $r8;
        java.lang.Throwable $r13;
        java.lang.Exception $r14;

        $z0 = <android.telephony.TelephonyManager: boolean sServiceHandleCacheEnabled>;

        if $z0 != 0 goto label01;

        $r9 = staticinvoke <android.telephony.TelephonyFrameworkInitializer: android.os.TelephonyServiceManager getTelephonyServiceManager()>();

        $r10 = virtualinvoke $r9.<android.os.TelephonyServiceManager: android.os.TelephonyServiceManager$ServiceRegisterer getPhoneSubServiceRegisterer()>();

        $r11 = virtualinvoke $r10.<android.os.TelephonyServiceManager$ServiceRegisterer: android.os.IBinder get()>();

        $r12 = staticinvoke <com.android.internal.telephony.IPhoneSubInfo$Stub: com.android.internal.telephony.IPhoneSubInfo asInterface(android.os.IBinder)>($r11);

        return $r12;

     label01:
        $r2 = <android.telephony.TelephonyManager: com.android.internal.telephony.IPhoneSubInfo sIPhoneSubInfo>;

        if $r2 != null goto label13;

        $r4 = staticinvoke <android.telephony.TelephonyFrameworkInitializer: android.os.TelephonyServiceManager getTelephonyServiceManager()>();

        $r5 = virtualinvoke $r4.<android.os.TelephonyServiceManager: android.os.TelephonyServiceManager$ServiceRegisterer getPhoneSubServiceRegisterer()>();

        $r6 = virtualinvoke $r5.<android.os.TelephonyServiceManager$ServiceRegisterer: android.os.IBinder get()>();

        r15 = staticinvoke <com.android.internal.telephony.IPhoneSubInfo$Stub: com.android.internal.telephony.IPhoneSubInfo asInterface(android.os.IBinder)>($r6);

        r0 = <android.telephony.TelephonyManager: java.lang.Object sCacheLock>;

        entermonitor r0;

     label02:
        r1 = <android.telephony.TelephonyManager: com.android.internal.telephony.IPhoneSubInfo sIPhoneSubInfo>;

     label03:
        if r1 != null goto label08;

        if r15 == null goto label08;

     label04:
        <android.telephony.TelephonyManager: com.android.internal.telephony.IPhoneSubInfo sIPhoneSubInfo> = r15;

        $r7 = interfaceinvoke r15.<com.android.internal.telephony.IPhoneSubInfo: android.os.IBinder asBinder()>();

        $r8 = <android.telephony.TelephonyManager: android.telephony.TelephonyManager$DeathRecipient sServiceDeath>;

        interfaceinvoke $r7.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r8, 0);

     label05:
        goto label08;

     label06:
        $r14 := @caughtexception;

     label07:
        <android.telephony.TelephonyManager: com.android.internal.telephony.IPhoneSubInfo sIPhoneSubInfo> = null;

     label08:
        exitmonitor r0;

     label09:
        goto label13;

     label10:
        $r13 := @caughtexception;

     label11:
        exitmonitor r0;

     label12:
        throw $r13;

     label13:
        $r3 = <android.telephony.TelephonyManager: com.android.internal.telephony.IPhoneSubInfo sIPhoneSubInfo>;

        return $r3;

        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Exception from label04 to label05 with label06;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    static com.android.internal.telephony.ISub getSubscriptionService()
    {
        java.lang.Object r0;
        com.android.internal.telephony.ISub r1, $r2, $r3, $r12, r15;
        boolean $z0;
        android.os.TelephonyServiceManager $r4, $r9;
        android.os.TelephonyServiceManager$ServiceRegisterer $r5, $r10;
        android.os.IBinder $r6, $r7, $r11;
        android.telephony.TelephonyManager$DeathRecipient $r8;
        java.lang.Throwable $r13;
        java.lang.Exception $r14;

        $z0 = <android.telephony.TelephonyManager: boolean sServiceHandleCacheEnabled>;

        if $z0 != 0 goto label01;

        $r9 = staticinvoke <android.telephony.TelephonyFrameworkInitializer: android.os.TelephonyServiceManager getTelephonyServiceManager()>();

        $r10 = virtualinvoke $r9.<android.os.TelephonyServiceManager: android.os.TelephonyServiceManager$ServiceRegisterer getSubscriptionServiceRegisterer()>();

        $r11 = virtualinvoke $r10.<android.os.TelephonyServiceManager$ServiceRegisterer: android.os.IBinder get()>();

        $r12 = staticinvoke <com.android.internal.telephony.ISub$Stub: com.android.internal.telephony.ISub asInterface(android.os.IBinder)>($r11);

        return $r12;

     label01:
        $r2 = <android.telephony.TelephonyManager: com.android.internal.telephony.ISub sISub>;

        if $r2 != null goto label13;

        $r4 = staticinvoke <android.telephony.TelephonyFrameworkInitializer: android.os.TelephonyServiceManager getTelephonyServiceManager()>();

        $r5 = virtualinvoke $r4.<android.os.TelephonyServiceManager: android.os.TelephonyServiceManager$ServiceRegisterer getSubscriptionServiceRegisterer()>();

        $r6 = virtualinvoke $r5.<android.os.TelephonyServiceManager$ServiceRegisterer: android.os.IBinder get()>();

        r15 = staticinvoke <com.android.internal.telephony.ISub$Stub: com.android.internal.telephony.ISub asInterface(android.os.IBinder)>($r6);

        r0 = <android.telephony.TelephonyManager: java.lang.Object sCacheLock>;

        entermonitor r0;

     label02:
        r1 = <android.telephony.TelephonyManager: com.android.internal.telephony.ISub sISub>;

     label03:
        if r1 != null goto label08;

        if r15 == null goto label08;

     label04:
        <android.telephony.TelephonyManager: com.android.internal.telephony.ISub sISub> = r15;

        $r7 = interfaceinvoke r15.<com.android.internal.telephony.ISub: android.os.IBinder asBinder()>();

        $r8 = <android.telephony.TelephonyManager: android.telephony.TelephonyManager$DeathRecipient sServiceDeath>;

        interfaceinvoke $r7.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r8, 0);

     label05:
        goto label08;

     label06:
        $r14 := @caughtexception;

     label07:
        <android.telephony.TelephonyManager: com.android.internal.telephony.ISub sISub> = null;

     label08:
        exitmonitor r0;

     label09:
        goto label13;

     label10:
        $r13 := @caughtexception;

     label11:
        exitmonitor r0;

     label12:
        throw $r13;

     label13:
        $r3 = <android.telephony.TelephonyManager: com.android.internal.telephony.ISub sISub>;

        return $r3;

        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Exception from label04 to label05 with label06;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private static java.lang.Object getTelephonyProperty(int, java.util.List, java.lang.Object)
    {
        int i0, $i1;
        java.util.List r0;
        java.lang.Object r1, r2;

        i0 := @parameter0: int;

        r0 := @parameter1: java.util.List;

        r1 := @parameter2: java.lang.Object;

        r2 = null;

        if i0 < 0 goto label1;

        r2 = null;

        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        if i0 >= $i1 goto label1;

        r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i0);

     label1:
        if r2 == null goto label2;

        r1 = r2;

        goto label2;

     label2:
        return r1;
    }

    public static java.lang.String getTelephonyProperty(int, java.lang.String, java.lang.String)
    {
        int i0, $i1, $i2;
        java.lang.String r0, $r1, r2, r3, r4;
        java.lang.String[] r5;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        r0 := @parameter2: java.lang.String;

        r3 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>(r2);

        r4 = null;

        if r3 == null goto label1;

        r4 = null;

        $i1 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i1 <= 0 goto label1;

        r5 = virtualinvoke r3.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        r4 = null;

        if i0 < 0 goto label1;

        r4 = null;

        $i2 = lengthof r5;

        if i0 >= $i2 goto label1;

        r4 = null;

        $r1 = r5[i0];

        if $r1 == null goto label1;

        r4 = r5[i0];

     label1:
        if r4 != null goto label2;

        r4 = r0;

        goto label2;

     label2:
        return r4;
    }

    public static java.lang.String getTelephonyProperty(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, r2;
        boolean $z0;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        r2 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>(r1);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z0 == 0 goto label1;

        r2 = r0;

        goto label1;

     label1:
        return r2;
    }

    private boolean isImsiEncryptionRequired(int, int)
    {
        android.telephony.TelephonyManager r0;
        int i0, i1, $i2;
        android.content.Context $r1;
        java.lang.Object $r2;
        boolean $z0;
        android.telephony.CarrierConfigManager r3;
        android.os.PersistableBundle r4;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("carrier_config");

        r3 = (android.telephony.CarrierConfigManager) $r2;

        if r3 != null goto label1;

        return 0;

     label1:
        r4 = virtualinvoke r3.<android.telephony.CarrierConfigManager: android.os.PersistableBundle getConfigForSubId(int)>(i0);

        if r4 != null goto label2;

        return 0;

     label2:
        $i2 = virtualinvoke r4.<android.os.PersistableBundle: int getInt(java.lang.String)>("imsi_key_availability_int");

        $z0 = staticinvoke <android.telephony.TelephonyManager: boolean isKeyEnabled(int,int)>($i2, i1);

        return $z0;
    }

    private static boolean isKeyEnabled(int, int)
    {
        int i0, i1, $i2, $i3, $i4;
        boolean z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 = 1;

        $i2 = i1 - 1;

        $i3 = i0 >> $i2;

        $i4 = $i3 & 1;

        if $i4 != 1 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isSystemProcess()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        boolean z0;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = staticinvoke <android.os.Process: int myUid()>();

        if $i0 != 1000 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    static void lambda$requestNumberVerification$0(android.telephony.NumberVerificationCallback)
    {
        android.telephony.NumberVerificationCallback r0;

        r0 := @parameter0: android.telephony.NumberVerificationCallback;

        interfaceinvoke r0.<android.telephony.NumberVerificationCallback: void onVerificationFailed(int)>(0);

        return;
    }

    static void lambda$setPreferredOpportunisticDataSubscription$1(java.util.function.Consumer)
    {
        java.util.function.Consumer r0;
        boolean $z0;
        java.lang.Integer $r1, $r2;

        r0 := @parameter0: java.util.function.Consumer;

        $z0 = staticinvoke <android.compat.Compatibility: boolean isChangeEnabled(long)>(130595455L);

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke r0.<java.util.function.Consumer: void accept(java.lang.Object)>($r2);

        goto label2;

     label1:
        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke r0.<java.util.function.Consumer: void accept(java.lang.Object)>($r1);

     label2:
        return;
    }

    static void lambda$updateAvailableNetworks$2(java.util.function.Consumer)
    {
        java.util.function.Consumer r0;
        boolean $z0;
        java.lang.Integer $r1, $r2;

        r0 := @parameter0: java.util.function.Consumer;

        $z0 = staticinvoke <android.compat.Compatibility: boolean isChangeEnabled(long)>(130595455L);

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);

        interfaceinvoke r0.<java.util.function.Consumer: void accept(java.lang.Object)>($r2);

        goto label2;

     label1:
        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke r0.<java.util.function.Consumer: void accept(java.lang.Object)>($r1);

     label2:
        return;
    }

    static void lambda$updateAvailableNetworks$3(java.util.function.Consumer)
    {
        java.util.function.Consumer r0;
        java.lang.Integer $r1;

        r0 := @parameter0: java.util.function.Consumer;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke r0.<java.util.function.Consumer: void accept(java.lang.Object)>($r1);

        return;
    }

    public static boolean putIntAtIndex(android.content.ContentResolver, java.lang.String, int, int)
    {
        java.lang.String r0, $r5, $r10, $r17, r23, r25, r27, r31, r32;
        int i0, $i1, $i2, i3, i4, i5;
        java.lang.StringBuilder $r1, $r6, $r11, $r14, $r28;
        java.lang.IllegalArgumentException $r4, $r9;
        boolean $z0;
        android.content.ContentResolver r22;
        java.lang.String[] r24;

        r22 := @parameter0: android.content.ContentResolver;

        r0 := @parameter1: java.lang.String;

        i3 := @parameter2: int;

        i0 := @parameter3: int;

        r23 = "";

        r24 = null;

        r25 = staticinvoke <android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>(r22, r0);

        if i3 == 2147483647 goto label8;

        if i3 < 0 goto label7;

        if r25 == null goto label1;

        r24 = virtualinvoke r25.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

     label1:
        i4 = 0;

     label2:
        if i4 >= i3 goto label4;

        r27 = "";

        if r24 == null goto label3;

        r27 = "";

        $i2 = lengthof r24;

        if i4 >= $i2 goto label3;

        r27 = r24[i4];

     label3:
        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27);

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        r23 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        i4 = i4 + 1;

        goto label2;

     label4:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        r31 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        r32 = r31;

        if r24 == null goto label6;

        i5 = i3 + 1;

     label5:
        r32 = r31;

        $i1 = lengthof r24;

        if i5 >= $i1 goto label6;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r31);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r17 = r24[i5];

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        r31 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        i5 = i5 + 1;

        goto label5;

     label6:
        $z0 = staticinvoke <android.provider.Settings$Global: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>(r22, r0, r32);

        return $z0;

     label7:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("putIntAtIndex index < 0 index=");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r9;

     label8:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("putIntAtIndex index == MAX_VALUE index=");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    private static void resetServiceCache()
    {
        java.lang.Object r0;
        com.android.internal.telephony.ISub $r2, $r11;
        com.android.internal.telephony.ISms $r3, $r8;
        com.android.internal.telephony.IPhoneSubInfo $r4, $r5;
        android.os.IBinder $r6, $r9, $r12;
        android.telephony.TelephonyManager$DeathRecipient $r7, $r10, $r13;
        java.lang.Throwable $r14;

        r0 = <android.telephony.TelephonyManager: java.lang.Object sCacheLock>;

        entermonitor r0;

     label1:
        $r2 = <android.telephony.TelephonyManager: com.android.internal.telephony.ISub sISub>;

        if $r2 == null goto label2;

        $r11 = <android.telephony.TelephonyManager: com.android.internal.telephony.ISub sISub>;

        $r12 = interfaceinvoke $r11.<com.android.internal.telephony.ISub: android.os.IBinder asBinder()>();

        $r13 = <android.telephony.TelephonyManager: android.telephony.TelephonyManager$DeathRecipient sServiceDeath>;

        interfaceinvoke $r12.<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>($r13, 0);

        <android.telephony.TelephonyManager: com.android.internal.telephony.ISub sISub> = null;

        staticinvoke <android.telephony.SubscriptionManager: void clearCaches()>();

     label2:
        $r3 = <android.telephony.TelephonyManager: com.android.internal.telephony.ISms sISms>;

        if $r3 == null goto label3;

        $r8 = <android.telephony.TelephonyManager: com.android.internal.telephony.ISms sISms>;

        $r9 = interfaceinvoke $r8.<com.android.internal.telephony.ISms: android.os.IBinder asBinder()>();

        $r10 = <android.telephony.TelephonyManager: android.telephony.TelephonyManager$DeathRecipient sServiceDeath>;

        interfaceinvoke $r9.<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>($r10, 0);

        <android.telephony.TelephonyManager: com.android.internal.telephony.ISms sISms> = null;

     label3:
        $r4 = <android.telephony.TelephonyManager: com.android.internal.telephony.IPhoneSubInfo sIPhoneSubInfo>;

        if $r4 == null goto label4;

        $r5 = <android.telephony.TelephonyManager: com.android.internal.telephony.IPhoneSubInfo sIPhoneSubInfo>;

        $r6 = interfaceinvoke $r5.<com.android.internal.telephony.IPhoneSubInfo: android.os.IBinder asBinder()>();

        $r7 = <android.telephony.TelephonyManager: android.telephony.TelephonyManager$DeathRecipient sServiceDeath>;

        interfaceinvoke $r6.<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>($r7, 0);

        <android.telephony.TelephonyManager: com.android.internal.telephony.IPhoneSubInfo sIPhoneSubInfo> = null;

     label4:
        exitmonitor r0;

     label5:
        return;

     label6:
        $r14 := @caughtexception;

     label7:
        exitmonitor r0;

     label8:
        throw $r14;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void setSystemSelectionChannelsInternal(java.util.List, java.util.concurrent.Executor, java.util.function.Consumer)
    {
        android.telephony.TelephonyManager r0;
        android.telephony.TelephonyManager$7 $r1, r7;
        int $i0;
        android.os.RemoteException $r2;
        boolean $z0;
        java.util.List r4;
        java.util.concurrent.Executor r5;
        java.util.function.Consumer r6;
        com.android.internal.telephony.ITelephony r8;

        r0 := @this: android.telephony.TelephonyManager;

        r4 := @parameter0: java.util.List;

        r5 := @parameter1: java.util.concurrent.Executor;

        r6 := @parameter2: java.util.function.Consumer;

        if r6 != null goto label1;

        r7 = null;

        goto label2;

     label1:
        $r1 = new android.telephony.TelephonyManager$7;

        specialinvoke $r1.<android.telephony.TelephonyManager$7: void <init>(android.telephony.TelephonyManager,java.util.concurrent.Executor,java.util.function.Consumer)>(r0, r5, r6);

        r7 = $r1;

     label2:
        r8 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label3:
        if r8 == null goto label5;

     label4:
        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        interfaceinvoke r8.<com.android.internal.telephony.ITelephony: void setSystemSelectionChannels(java.util.List,int,com.android.internal.telephony.IBooleanConsumer)>(r4, $i0, r7);

     label5:
        goto label7;

     label6:
        $r2 := @caughtexception;

        $z0 = specialinvoke r0.<android.telephony.TelephonyManager: boolean isSystemProcess()>();

        if $z0 != 0 goto label7;

        virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

     label7:
        return;

        catch android.os.RemoteException from label2 to label3 with label6;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    private static java.util.List updateTelephonyProperty(java.util.List, int, java.lang.Object)
    {
        int i0, $i1;
        java.lang.Object r0;
        java.util.ArrayList $r1;
        java.util.List r3;

        r3 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        r0 := @parameter2: java.lang.Object;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r3);

     label1:
        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i1 > i0 goto label2;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(null);

        goto label1;

     label2:
        interfaceinvoke $r1.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, r0);

        return $r1;
    }

    public int addDevicePolicyOverrideApn(android.content.Context, android.telephony.data.ApnSetting)
    {
        android.telephony.TelephonyManager r0;
        android.content.ContentResolver $r1;
        android.net.Uri $r2, r13;
        android.content.ContentValues $r3;
        java.lang.String $r4, $r8, $r10;
        java.lang.Throwable $r5;
        java.lang.StringBuilder $r6;
        android.content.Context r11;
        android.telephony.data.ApnSetting r12;
        int i2;

        r0 := @this: android.telephony.TelephonyManager;

        r11 := @parameter0: android.content.Context;

        r12 := @parameter1: android.telephony.data.ApnSetting;

        $r1 = virtualinvoke r11.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r2 = <android.provider.Telephony$Carriers: android.net.Uri DPC_URI>;

        $r3 = virtualinvoke r12.<android.telephony.data.ApnSetting: android.content.ContentValues toContentValues()>();

        r13 = virtualinvoke $r1.<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>($r2, $r3);

        i2 = -1;

        if r13 == null goto label4;

     label1:
        $r4 = virtualinvoke r13.<android.net.Uri: java.lang.String getLastPathSegment()>();

        i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to parse inserted override APN id: ");

        $r8 = virtualinvoke r13.<android.net.Uri: java.lang.String getLastPathSegment()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("TelephonyManager", $r10);

        i2 = -1;

     label4:
        return i2;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public void answerRingingCall()
    {
        android.telephony.TelephonyManager r0;

        r0 := @this: android.telephony.TelephonyManager;

        return;
    }

    public void call(java.lang.String, java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        java.lang.String r1, r4;
        com.android.internal.telephony.ITelephony r2;
        android.os.RemoteException $r3;

        r0 := @this: android.telephony.TelephonyManager;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label4;

     label3:
        interfaceinvoke r2.<com.android.internal.telephony.ITelephony: void call(java.lang.String,java.lang.String)>(r4, r1);

     label4:
        goto label6;

     label5:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#call", $r3);

     label6:
        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public boolean canChangeDtmfToneLength()
    {
        android.telephony.TelephonyManager r0;
        boolean z0;
        int $i0;
        java.lang.String $r1, $r2;
        android.os.RemoteException $r3;
        java.lang.Throwable $r4;
        com.android.internal.telephony.ITelephony r5;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r5 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r5 == null goto label5;

     label3:
        $i0 = r0.<android.telephony.TelephonyManager: int mSubId>;

        $r1 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOpPackageName()>();

        $r2 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getAttributionTag()>();

        z0 = interfaceinvoke r5.<com.android.internal.telephony.ITelephony: boolean canChangeDtmfToneLength(int,java.lang.String,java.lang.String)>($i0, $r1, $r2);

     label4:
        return z0;

     label5:
        goto label8;

     label6:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Permission error calling ITelephony#canChangeDtmfToneLength", $r4);

        goto label8;

     label7:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#canChangeDtmfToneLength", $r3);

     label8:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.SecurityException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.SecurityException from label3 to label4 with label6;
    }

    public boolean canConnectTo5GInDsdsMode()
    {
        android.telephony.TelephonyManager r0;
        boolean z0;
        android.os.RemoteException $r1;
        java.lang.NullPointerException $r2;
        com.android.internal.telephony.ITelephony r3;

        r0 := @this: android.telephony.TelephonyManager;

        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

        if r3 != null goto label1;

        return 1;

     label1:
        z0 = interfaceinvoke r3.<com.android.internal.telephony.ITelephony: boolean canConnectTo5GInDsdsMode()>();

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        return 1;

     label4:
        $r1 := @caughtexception;

        return 1;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public int changeIccLockPassword(java.lang.String, java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        java.lang.String r1, r6;
        com.android.internal.telephony.ITelephony r2;
        int i0, $i1;
        android.os.RemoteException $r5;

        r0 := @this: android.telephony.TelephonyManager;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r6, "changeIccLockPassword oldPassword can\'t be null.");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "changeIccLockPassword newPassword can\'t be null.");

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label5;

     label3:
        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        i0 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: int changeIccLockPassword(int,java.lang.String,java.lang.String)>($i1, r6, r1);

     label4:
        return i0;

     label5:
        goto label7;

     label6:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "changeIccLockPassword RemoteException", $r5);

     label7:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public int checkCarrierPrivilegesForPackage(java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        com.android.internal.telephony.ITelephony r1;
        int i0, $i1;
        java.lang.NullPointerException $r2;
        android.os.RemoteException $r3;
        java.lang.String r4;

        r0 := @this: android.telephony.TelephonyManager;

        r4 := @parameter0: java.lang.String;

     label1:
        r1 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r1 == null goto label5;

     label3:
        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        i0 = interfaceinvoke r1.<com.android.internal.telephony.ITelephony: int checkCarrierPrivilegesForPackage(int,java.lang.String)>($i1, r4);

     label4:
        return i0;

     label5:
        goto label8;

     label6:
        $r2 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "checkCarrierPrivilegesForPackage NPE", $r2);

        goto label8;

     label7:
        $r3 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "checkCarrierPrivilegesForPackage RemoteException", $r3);

     label8:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public int checkCarrierPrivilegesForPackageAnyPhone(java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        com.android.internal.telephony.ITelephony r1;
        int i0;
        java.lang.NullPointerException $r2;
        android.os.RemoteException $r3;
        java.lang.String r4;

        r0 := @this: android.telephony.TelephonyManager;

        r4 := @parameter0: java.lang.String;

     label1:
        r1 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r1 == null goto label5;

     label3:
        i0 = interfaceinvoke r1.<com.android.internal.telephony.ITelephony: int checkCarrierPrivilegesForPackageAnyPhone(java.lang.String)>(r4);

     label4:
        return i0;

     label5:
        goto label8;

     label6:
        $r2 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "checkCarrierPrivilegesForPackageAnyPhone NPE", $r2);

        goto label8;

     label7:
        $r3 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "checkCarrierPrivilegesForPackageAnyPhone RemoteException", $r3);

     label8:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public android.telephony.TelephonyManager createForPhoneAccountHandle(android.telecom.PhoneAccountHandle)
    {
        android.telephony.TelephonyManager r0, $r2;
        android.telecom.PhoneAccountHandle r1;
        int i0;
        boolean $z0;
        android.content.Context $r3;

        r0 := @this: android.telephony.TelephonyManager;

        r1 := @parameter0: android.telecom.PhoneAccountHandle;

        i0 = virtualinvoke r0.<android.telephony.TelephonyManager: int getSubscriptionId(android.telecom.PhoneAccountHandle)>(r1);

        $z0 = staticinvoke <android.telephony.SubscriptionManager: boolean isValidSubscriptionId(int)>(i0);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = new android.telephony.TelephonyManager;

        $r3 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        specialinvoke $r2.<android.telephony.TelephonyManager: void <init>(android.content.Context,int)>($r3, i0);

        return $r2;
    }

    public android.telephony.TelephonyManager createForSubscriptionId(int)
    {
        android.telephony.TelephonyManager r0, $r1;
        int i0;
        android.content.Context $r2;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        $r1 = new android.telephony.TelephonyManager;

        $r2 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        specialinvoke $r1.<android.telephony.TelephonyManager: void <init>(android.content.Context,int)>($r2, i0);

        return $r1;
    }

    public void dial(java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        com.android.internal.telephony.ITelephony r1;
        android.os.RemoteException $r2;
        java.lang.String r3;

        r0 := @this: android.telephony.TelephonyManager;

        r3 := @parameter0: java.lang.String;

     label1:
        r1 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r1 == null goto label4;

     label3:
        interfaceinvoke r1.<com.android.internal.telephony.ITelephony: void dial(java.lang.String)>(r3);

     label4:
        goto label6;

     label5:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#dial", $r2);

     label6:
        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public boolean disableDataConnectivity()
    {
        android.telephony.TelephonyManager r0;
        boolean z0;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label5;

     label3:
        z0 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: boolean disableDataConnectivity()>();

     label4:
        return z0;

     label5:
        goto label7;

     label6:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#disableDataConnectivity", $r1);

     label7:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public void disableIms(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        android.os.RemoteException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r7;
        com.android.internal.telephony.ITelephony r8;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r8 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r8 == null goto label4;

     label3:
        interfaceinvoke r8.<com.android.internal.telephony.ITelephony: void disableIms(int)>(i0);

     label4:
        goto label6;

     label5:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("disableIms, RemoteException: ");

        $r5 = virtualinvoke $r2.<android.os.RemoteException: java.lang.String getMessage()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("TelephonyManager", $r7);

     label6:
        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void disableLocationUpdates()
    {
        android.telephony.TelephonyManager r0;
        int $i0;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        virtualinvoke r0.<android.telephony.TelephonyManager: void disableLocationUpdates(int)>($i0);

        return;
    }

    public void disableLocationUpdates(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        android.os.RemoteException $r1;
        java.lang.NullPointerException $r2;
        com.android.internal.telephony.ITelephony r3;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 == null goto label7;

     label3:
        interfaceinvoke r3.<com.android.internal.telephony.ITelephony: void disableLocationUpdatesForSubscriber(int)>(i0);

     label4:
        goto label7;

     label5:
        $r2 := @caughtexception;

        goto label7;

     label6:
        $r1 := @caughtexception;

     label7:
        return;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.NullPointerException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public void disableVisualVoicemailSmsFilter(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        android.content.Context $r1;
        java.lang.String $r2;
        java.lang.NullPointerException $r3;
        android.os.RemoteException $r4;
        com.android.internal.telephony.ITelephony r5;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r5 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r5 == null goto label7;

     label3:
        $r1 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke r5.<com.android.internal.telephony.ITelephony: void disableVisualVoicemailSmsFilter(java.lang.String,int)>($r2, i0);

     label4:
        goto label7;

     label5:
        $r3 := @caughtexception;

        goto label7;

     label6:
        $r4 := @caughtexception;

     label7:
        return;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.NullPointerException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public boolean doesSwitchMultiSimConfigTriggerReboot()
    {
        android.telephony.TelephonyManager r0;
        boolean z0;
        int $i0;
        java.lang.String $r1, $r2;
        android.os.RemoteException $r3;
        com.android.internal.telephony.ITelephony r4;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r4 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r4 == null goto label5;

     label3:
        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $r1 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOpPackageName()>();

        $r2 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getAttributionTag()>();

        z0 = interfaceinvoke r4.<com.android.internal.telephony.ITelephony: boolean doesSwitchMultiSimConfigTriggerReboot(int,java.lang.String,java.lang.String)>($i0, $r1, $r2);

     label4:
        return z0;

     label5:
        goto label7;

     label6:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "doesSwitchMultiSimConfigTriggerReboot RemoteException", $r3);

     label7:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public boolean enableDataConnectivity()
    {
        android.telephony.TelephonyManager r0;
        boolean z0;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label5;

     label3:
        z0 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: boolean enableDataConnectivity()>();

     label4:
        return z0;

     label5:
        goto label7;

     label6:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#enableDataConnectivity", $r1);

     label7:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public void enableIms(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        android.os.RemoteException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r7;
        com.android.internal.telephony.ITelephony r8;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r8 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r8 == null goto label4;

     label3:
        interfaceinvoke r8.<com.android.internal.telephony.ITelephony: void enableIms(int)>(i0);

     label4:
        goto label6;

     label5:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("enableIms, RemoteException: ");

        $r5 = virtualinvoke $r2.<android.os.RemoteException: java.lang.String getMessage()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("TelephonyManager", $r7);

     label6:
        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void enableLocationUpdates()
    {
        android.telephony.TelephonyManager r0;
        int $i0;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        virtualinvoke r0.<android.telephony.TelephonyManager: void enableLocationUpdates(int)>($i0);

        return;
    }

    public void enableLocationUpdates(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        android.os.RemoteException $r1;
        java.lang.NullPointerException $r2;
        com.android.internal.telephony.ITelephony r3;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 == null goto label7;

     label3:
        interfaceinvoke r3.<com.android.internal.telephony.ITelephony: void enableLocationUpdatesForSubscriber(int)>(i0);

     label4:
        goto label7;

     label5:
        $r2 := @caughtexception;

        goto label7;

     label6:
        $r1 := @caughtexception;

     label7:
        return;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.NullPointerException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public boolean enableModemForSlot(int, boolean)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        boolean z0, z2;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        z2 = 0;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label4;

     label3:
        z2 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: boolean enableModemForSlot(int,boolean)>(i0, z0);

     label4:
        goto label6;

     label5:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "enableModem RemoteException", $r1);

        z2 = 0;

     label6:
        return z2;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void enableVideoCalling(boolean)
    {
        android.telephony.TelephonyManager r0;
        boolean z0;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;

        r0 := @this: android.telephony.TelephonyManager;

        z0 := @parameter0: boolean;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label4;

     label3:
        interfaceinvoke r2.<com.android.internal.telephony.ITelephony: void enableVideoCalling(boolean)>(z0);

     label4:
        goto label6;

     label5:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#enableVideoCalling", $r1);

     label6:
        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void enableVisualVoicemailSmsFilter(int, android.telephony.VisualVoicemailSmsFilterSettings)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        com.android.internal.telephony.ITelephony r1;
        java.lang.IllegalArgumentException $r2;
        android.content.Context $r3;
        java.lang.String $r4;
        java.lang.NullPointerException $r5;
        android.os.RemoteException $r6;
        android.telephony.VisualVoicemailSmsFilterSettings r7;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        r7 := @parameter1: android.telephony.VisualVoicemailSmsFilterSettings;

        if r7 == null goto label8;

     label1:
        r1 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r1 == null goto label7;

     label3:
        $r3 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke r1.<com.android.internal.telephony.ITelephony: void enableVisualVoicemailSmsFilter(java.lang.String,int,android.telephony.VisualVoicemailSmsFilterSettings)>($r4, i0, r7);

     label4:
        goto label7;

     label5:
        $r5 := @caughtexception;

        goto label7;

     label6:
        $r6 := @caughtexception;

     label7:
        return;

     label8:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Settings cannot be null");

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.NullPointerException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public boolean endCall()
    {
        android.telephony.TelephonyManager r0;

        r0 := @this: android.telephony.TelephonyManager;

        return 0;
    }

    public void factoryReset(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        java.lang.String $r3;
        android.os.RemoteException $r4;
        java.lang.StringBuilder r5;
        com.android.internal.telephony.ITelephony r6;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r5 = new java.lang.StringBuilder;

        specialinvoke r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("factoryReset: subId=");

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r3 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("TelephonyManager", $r3);

        r6 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r6 == null goto label4;

     label3:
        interfaceinvoke r6.<com.android.internal.telephony.ITelephony: void factoryReset(int)>(i0);

     label4:
        goto label6;

     label5:
        $r4 := @caughtexception;

     label6:
        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public int getActiveModemCount()
    {
        android.telephony.TelephonyManager r0;
        int[] $r1;
        android.telephony.TelephonyManager$MultiSimVariants $r2;
        int $i0, i2;
        boolean $z0, $z1, $z2;
        byte b1;

        r0 := @this: android.telephony.TelephonyManager;

        b1 = 1;

        $r1 = <android.telephony.TelephonyManager$8: int[] $SwitchMap$android$telephony$TelephonyManager$MultiSimVariants>;

        $r2 = virtualinvoke r0.<android.telephony.TelephonyManager: android.telephony.TelephonyManager$MultiSimVariants getMultiSimConfiguration()>();

        $i0 = virtualinvoke $r2.<android.telephony.TelephonyManager$MultiSimVariants: int ordinal()>();

        i2 = $r1[$i0];

        if i2 == 1 goto label3;

        if i2 == 2 goto label2;

        if i2 == 3 goto label2;

        if i2 == 4 goto label1;

        goto label4;

     label1:
        b1 = 3;

        goto label4;

     label2:
        b1 = 2;

        goto label4;

     label3:
        b1 = 1;

        $z0 = virtualinvoke r0.<android.telephony.TelephonyManager: boolean isVoiceCapable()>();

        if $z0 != 0 goto label4;

        b1 = 1;

        $z1 = virtualinvoke r0.<android.telephony.TelephonyManager: boolean isSmsCapable()>();

        if $z1 != 0 goto label4;

        b1 = 1;

        $z2 = virtualinvoke r0.<android.telephony.TelephonyManager: boolean isDataCapable()>();

        if $z2 != 0 goto label4;

        b1 = 0;

     label4:
        return b1;
    }

    public android.telephony.VisualVoicemailSmsFilterSettings getActiveVisualVoicemailSmsFilterSettings(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        java.lang.NullPointerException $r1;
        android.os.RemoteException $r2;
        com.android.internal.telephony.ITelephony r3;
        android.telephony.VisualVoicemailSmsFilterSettings r4;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 == null goto label5;

     label3:
        r4 = interfaceinvoke r3.<com.android.internal.telephony.ITelephony: android.telephony.VisualVoicemailSmsFilterSettings getActiveVisualVoicemailSmsFilterSettings(int)>(i0);

     label4:
        return r4;

     label5:
        goto label8;

     label6:
        $r1 := @caughtexception;

        goto label8;

     label7:
        $r2 := @caughtexception;

     label8:
        return null;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public java.lang.String getAidForAppType(int)
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1;
        java.lang.String $r1;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $r1 = virtualinvoke r0.<android.telephony.TelephonyManager: java.lang.String getAidForAppType(int,int)>($i1, i0);

        return $r1;
    }

    public java.lang.String getAidForAppType(int, int)
    {
        android.telephony.TelephonyManager r0;
        int i0, i1;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;
        java.lang.String r3;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label5;

     label3:
        r3 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: java.lang.String getAidForAppType(int,int)>(i0, i1);

     label4:
        return r3;

     label5:
        goto label7;

     label6:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#getAidForAppType", $r1);

     label7:
        return null;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public java.util.List getAllCellInfo()
    {
        android.telephony.TelephonyManager r0;
        java.lang.String $r1, $r2;
        java.lang.NullPointerException $r3;
        android.os.RemoteException $r4;
        com.android.internal.telephony.ITelephony r5;
        java.util.List r6;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r5 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r5 != null goto label3;

        return null;

     label3:
        $r1 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOpPackageName()>();

        $r2 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getAttributionTag()>();

        r6 = interfaceinvoke r5.<com.android.internal.telephony.ITelephony: java.util.List getAllCellInfo(java.lang.String,java.lang.String)>($r1, $r2);

     label4:
        return r6;

     label5:
        $r3 := @caughtexception;

        goto label7;

     label6:
        $r4 := @caughtexception;

     label7:
        return null;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.NullPointerException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public java.util.List getAllowedCarriers(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        android.telephony.CarrierRestrictionRules r1;
        boolean $z0;
        java.util.ArrayList $r2;
        java.util.List $r3;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        $z0 = staticinvoke <android.telephony.SubscriptionManager: boolean isValidPhoneId(int)>(i0);

        if $z0 == 0 goto label1;

        r1 = virtualinvoke r0.<android.telephony.TelephonyManager: android.telephony.CarrierRestrictionRules getCarrierRestrictionRules()>();

        if r1 == null goto label1;

        $r3 = virtualinvoke r1.<android.telephony.CarrierRestrictionRules: java.util.List getAllowedCarriers()>();

        return $r3;

     label1:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>(0);

        return $r2;
    }

    public long getAllowedNetworkTypes()
    {
        android.telephony.TelephonyManager r0;
        long l0;
        int $i1;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label5;

     label3:
        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        l0 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: long getAllowedNetworkTypes(int)>($i1);

     label4:
        return l0;

     label5:
        goto label7;

     label6:
        $r1 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "getAllowedNetworkTypes RemoteException", $r1);

     label7:
        return -1L;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public long getAllowedNetworkTypesForReason(int)
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1;
        java.lang.IllegalArgumentException $r1;
        long $l2;
        android.os.RemoteException $r2;
        com.android.internal.telephony.ITelephony r4;
        java.lang.IllegalStateException r5;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        if i0 != 0 goto label6;

     label1:
        r4 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r4 == null goto label4;

     label3:
        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $l2 = interfaceinvoke r4.<com.android.internal.telephony.ITelephony: long getAllowedNetworkTypesForReason(int,int)>($i1, i0);

        return $l2;

     label4:
        r5 = new java.lang.IllegalStateException;

        specialinvoke r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("telephony service is null.");

        throw r5;

     label5:
        $r2 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "getAllowedNetworkTypesForReason RemoteException", $r2);

        virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        return -1L;

     label6:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("invalid AllowedNetworkTypesReason.");

        throw $r1;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
        catch android.os.RemoteException from label4 to label5 with label5;
    }

    public android.content.ComponentName getAndUpdateDefaultRespondViaMessageApplication()
    {
        android.telephony.TelephonyManager r0;
        android.content.Context $r1;
        android.content.ComponentName $r2;

        r0 := @this: android.telephony.TelephonyManager;

        $r1 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r2 = staticinvoke <com.android.internal.telephony.SmsApplication: android.content.ComponentName getDefaultRespondViaMessageApplication(android.content.Context,boolean)>($r1, 1);

        return $r2;
    }

    public com.android.internal.telephony.CellNetworkScanResult getAvailableNetworks()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        java.lang.String $r1, $r2;
        android.os.RemoteException $r3;
        java.lang.NullPointerException $r4;
        com.android.internal.telephony.ITelephony r5;
        com.android.internal.telephony.CellNetworkScanResult r6, $r9;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r5 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r5 == null goto label5;

     label3:
        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $r1 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOpPackageName()>();

        $r2 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getAttributionTag()>();

        r6 = interfaceinvoke r5.<com.android.internal.telephony.ITelephony: com.android.internal.telephony.CellNetworkScanResult getCellNetworkScanResults(int,java.lang.String,java.lang.String)>($i0, $r1, $r2);

     label4:
        return r6;

     label5:
        goto label8;

     label6:
        $r4 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "getAvailableNetworks NPE", $r4);

        goto label8;

     label7:
        $r3 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "getAvailableNetworks RemoteException", $r3);

     label8:
        $r9 = new com.android.internal.telephony.CellNetworkScanResult;

        specialinvoke $r9.<com.android.internal.telephony.CellNetworkScanResult: void <init>(int,java.util.List)>(4, null);

        return $r9;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public java.lang.String getBasebandVersion()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getPhoneId()>();

        $r1 = virtualinvoke r0.<android.telephony.TelephonyManager: java.lang.String getBasebandVersionForPhone(int)>($i0);

        return $r1;
    }

    public java.lang.String getBasebandVersionForPhone(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        java.util.List $r1;
        java.lang.Object $r2;
        java.lang.String $r3;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        $r1 = staticinvoke <android.sysprop.TelephonyProperties: java.util.List baseband_version()>();

        $r2 = staticinvoke <android.telephony.TelephonyManager: java.lang.Object getTelephonyProperty(int,java.util.List,java.lang.Object)>(i0, $r1, "");

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    public android.telephony.CallForwardingInfo getCallForwarding(int)
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1;
        java.lang.IllegalArgumentException $r1;
        java.lang.NullPointerException $r2;
        android.os.RemoteException $r3;
        com.android.internal.telephony.ITelephony r4;
        android.telephony.CallForwardingInfo r5, $r8;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        if i0 < 0 goto label9;

        if i0 > 5 goto label9;

     label1:
        r4 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r4 == null goto label5;

     label3:
        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        r5 = interfaceinvoke r4.<com.android.internal.telephony.ITelephony: android.telephony.CallForwardingInfo getCallForwarding(int,int)>($i1, i0);

     label4:
        return r5;

     label5:
        goto label8;

     label6:
        $r2 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "getCallForwarding NPE", $r2);

        goto label8;

     label7:
        $r3 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "getCallForwarding RemoteException", $r3);

     label8:
        $r8 = new android.telephony.CallForwardingInfo;

        specialinvoke $r8.<android.telephony.CallForwardingInfo: void <init>(int,int,java.lang.String,int)>(3, 0, null, 0);

        return $r8;

     label9:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("callForwardingReason is out of range");

        throw $r1;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public int getCallState()
    {
        android.telephony.TelephonyManager r0;
        java.lang.Object $r1;
        int $i0;
        android.content.Context r2;
        android.telecom.TelecomManager r3;

        r0 := @this: android.telephony.TelephonyManager;

        r2 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        if r2 == null goto label1;

        $r1 = virtualinvoke r2.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/telecom/TelecomManager;");

        r3 = (android.telecom.TelecomManager) $r1;

        if r3 == null goto label1;

        $i0 = virtualinvoke r3.<android.telecom.TelecomManager: int getCallState()>();

        return $i0;

     label1:
        return 0;
    }

    public int getCallState(int)
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1, $i2;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        $i1 = staticinvoke <android.telephony.SubscriptionManager: int getPhoneId(int)>(i0);

        $i2 = virtualinvoke r0.<android.telephony.TelephonyManager: int getCallStateForSlot(int)>($i1);

        return $i2;
    }

    public int getCallStateForSlot(int)
    {
        android.telephony.TelephonyManager r0;
        android.os.RemoteException $r1;
        java.lang.NullPointerException $r2;
        int i0, i1;
        com.android.internal.telephony.ITelephony r3;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 != null goto label3;

        return 0;

     label3:
        i1 = interfaceinvoke r3.<com.android.internal.telephony.ITelephony: int getCallStateForSlot(int)>(i0);

     label4:
        return i1;

     label5:
        $r2 := @caughtexception;

        return 0;

     label6:
        $r1 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.NullPointerException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public int getCallWaitingStatus()
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1;
        java.lang.NullPointerException $r1;
        android.os.RemoteException $r2;
        com.android.internal.telephony.ITelephony r3;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 == null goto label5;

     label3:
        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        i0 = interfaceinvoke r3.<com.android.internal.telephony.ITelephony: int getCallWaitingStatus(int)>($i1);

     label4:
        return i0;

     label5:
        goto label8;

     label6:
        $r1 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "getCallWaitingStatus NPE", $r1);

        goto label8;

     label7:
        $r2 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "getCallWaitingStatus RemoteException", $r2);

     label8:
        return 3;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public int getCardIdForDefaultEuicc()
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1;
        android.content.Context $r1;
        java.lang.String $r2;
        android.os.RemoteException $r3;
        com.android.internal.telephony.ITelephony r4;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r4 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r4 != null goto label3;

        return -2;

     label3:
        $i1 = r0.<android.telephony.TelephonyManager: int mSubId>;

        $r1 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        i0 = interfaceinvoke r4.<com.android.internal.telephony.ITelephony: int getCardIdForDefaultEuicc(int,java.lang.String)>($i1, $r2);

     label4:
        return i0;

     label5:
        $r3 := @caughtexception;

        return -2;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public android.os.PersistableBundle getCarrierConfig()
    {
        android.telephony.TelephonyManager r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.telephony.CarrierConfigManager $r3;
        int $i0;
        android.os.PersistableBundle $r4;

        r0 := @this: android.telephony.TelephonyManager;

        $r1 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/telephony/CarrierConfigManager;");

        $r3 = (android.telephony.CarrierConfigManager) $r2;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $r4 = virtualinvoke $r3.<android.telephony.CarrierConfigManager: android.os.PersistableBundle getConfigForSubId(int)>($i0);

        return $r4;
    }

    public int getCarrierIdFromMccMnc(java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        com.android.internal.telephony.ITelephony r1;
        int i0, $i1;
        android.os.RemoteException $r2;
        java.lang.String r3;

        r0 := @this: android.telephony.TelephonyManager;

        r3 := @parameter0: java.lang.String;

     label1:
        r1 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r1 == null goto label5;

     label3:
        $i1 = virtualinvoke r0.<android.telephony.TelephonyManager: int getSlotIndex()>();

        i0 = interfaceinvoke r1.<com.android.internal.telephony.ITelephony: int getCarrierIdFromMccMnc(int,java.lang.String,boolean)>($i1, r3, 0);

     label4:
        return i0;

     label5:
        goto label7;

     label6:
        $r2 := @caughtexception;

     label7:
        return -1;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public int getCarrierIdFromSimMccMnc()
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1;
        java.lang.String $r1;
        android.os.RemoteException $r2;
        com.android.internal.telephony.ITelephony r3;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 == null goto label5;

     label3:
        $i1 = virtualinvoke r0.<android.telephony.TelephonyManager: int getSlotIndex()>();

        $r1 = virtualinvoke r0.<android.telephony.TelephonyManager: java.lang.String getSimOperator()>();

        i0 = interfaceinvoke r3.<com.android.internal.telephony.ITelephony: int getCarrierIdFromMccMnc(int,java.lang.String,boolean)>($i1, $r1, 1);

     label4:
        return i0;

     label5:
        goto label7;

     label6:
        $r2 := @caughtexception;

     label7:
        return -1;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public int getCarrierIdListVersion()
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label5;

     label3:
        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        i0 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: int getCarrierIdListVersion(int)>($i1);

     label4:
        return i0;

     label5:
        goto label7;

     label6:
        $r1 := @caughtexception;

     label7:
        return -1;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public android.telephony.ImsiEncryptionInfo getCarrierInfoForImsiEncryption(int)
    {
        android.telephony.TelephonyManager r0;
        int i0, i1, $i2;
        android.content.Context $r1;
        java.lang.String $r2, $r7, $r12;
        boolean $z0;
        java.lang.NullPointerException $r3;
        java.lang.StringBuilder $r4, $r9;
        android.os.RemoteException $r8;
        com.android.internal.telephony.IPhoneSubInfo r13;
        java.lang.IllegalArgumentException r14, r16;
        android.telephony.ImsiEncryptionInfo r15;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label01:
        r13 = staticinvoke <android.telephony.TelephonyManager: com.android.internal.telephony.IPhoneSubInfo getSubscriberInfoService()>();

     label02:
        if r13 != null goto label05;

     label03:
        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("TelephonyManager", "IMSI error: Subscriber Info is null");

     label04:
        return null;

     label05:
        $i2 = staticinvoke <android.telephony.SubscriptionManager: int getDefaultDataSubscriptionId()>();

        i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId(int)>($i2);

     label06:
        if i0 == 1 goto label08;

        if i0 != 2 goto label07;

        goto label08;

     label07:
        r14 = new java.lang.IllegalArgumentException;

        specialinvoke r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("IMSI error: Invalid key type");

        throw r14;

     label08:
        $r1 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        r15 = interfaceinvoke r13.<com.android.internal.telephony.IPhoneSubInfo: android.telephony.ImsiEncryptionInfo getCarrierInfoForImsiEncryption(int,int,java.lang.String)>(i1, i0, $r2);

     label09:
        if r15 != null goto label13;

     label10:
        $z0 = specialinvoke r0.<android.telephony.TelephonyManager: boolean isImsiEncryptionRequired(int,int)>(i1, i0);

        if $z0 != 0 goto label12;

     label11:
        goto label13;

     label12:
        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("TelephonyManager", "IMSI error: key is required but not found");

        r16 = new java.lang.IllegalArgumentException;

        specialinvoke r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("IMSI error: key is required but not found");

        throw r16;

     label13:
        return r15;

     label14:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getCarrierInfoForImsiEncryption NullPointerException");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("TelephonyManager", $r7);

        goto label16;

     label15:
        $r8 := @caughtexception;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getCarrierInfoForImsiEncryption RemoteException");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("TelephonyManager", $r12);

     label16:
        return null;

        catch android.os.RemoteException from label01 to label02 with label15;
        catch java.lang.NullPointerException from label01 to label02 with label14;
        catch android.os.RemoteException from label03 to label04 with label15;
        catch java.lang.NullPointerException from label03 to label04 with label14;
        catch android.os.RemoteException from label05 to label06 with label15;
        catch java.lang.NullPointerException from label05 to label06 with label14;
        catch android.os.RemoteException from label07 to label08 with label15;
        catch java.lang.NullPointerException from label07 to label08 with label14;
        catch android.os.RemoteException from label08 to label09 with label15;
        catch java.lang.NullPointerException from label08 to label09 with label14;
        catch android.os.RemoteException from label10 to label11 with label15;
        catch java.lang.NullPointerException from label10 to label11 with label14;
        catch android.os.RemoteException from label12 to label13 with label15;
        catch java.lang.NullPointerException from label12 to label13 with label14;
    }

    public java.util.List getCarrierPackageNamesForIntent(android.content.Intent)
    {
        android.telephony.TelephonyManager r0;
        android.content.Intent r1;
        int $i0;
        java.util.List $r2;

        r0 := @this: android.telephony.TelephonyManager;

        r1 := @parameter0: android.content.Intent;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getPhoneId()>();

        $r2 = virtualinvoke r0.<android.telephony.TelephonyManager: java.util.List getCarrierPackageNamesForIntentAndPhone(android.content.Intent,int)>(r1, $i0);

        return $r2;
    }

    public java.util.List getCarrierPackageNamesForIntentAndPhone(android.content.Intent, int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        com.android.internal.telephony.ITelephony r1;
        java.lang.NullPointerException $r2;
        android.os.RemoteException $r3;
        android.content.Intent r4;
        java.util.List r5;

        r0 := @this: android.telephony.TelephonyManager;

        r4 := @parameter0: android.content.Intent;

        i0 := @parameter1: int;

     label1:
        r1 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r1 == null goto label5;

     label3:
        r5 = interfaceinvoke r1.<com.android.internal.telephony.ITelephony: java.util.List getCarrierPackageNamesForIntentAndPhone(android.content.Intent,int)>(r4, i0);

     label4:
        return r5;

     label5:
        goto label8;

     label6:
        $r2 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "getCarrierPackageNamesForIntentAndPhone NPE", $r2);

        goto label8;

     label7:
        $r3 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "getCarrierPackageNamesForIntentAndPhone RemoteException", $r3);

     label8:
        return null;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public int getCarrierPrivilegeStatus(int)
    {
        android.telephony.TelephonyManager r0;
        int $i0, i2, i3;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;

        r0 := @this: android.telephony.TelephonyManager;

        i2 := @parameter0: int;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label5;

     label3:
        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        i3 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: int getCarrierPrivilegeStatusForUid(int,int)>($i0, i2);

     label4:
        return i3;

     label5:
        goto label7;

     label6:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "getCarrierPrivilegeStatus RemoteException", $r1);

     label7:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public java.util.List getCarrierPrivilegedPackagesForAllActiveSubscriptions()
    {
        android.telephony.TelephonyManager r0;
        android.os.RemoteException $r1;
        java.lang.NullPointerException $r2;
        com.android.internal.telephony.ITelephony r3;
        java.util.List r4, $r7;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 == null goto label5;

     label3:
        r4 = interfaceinvoke r3.<com.android.internal.telephony.ITelephony: java.util.List getPackagesWithCarrierPrivilegesForAllPhones()>();

     label4:
        return r4;

     label5:
        goto label8;

     label6:
        $r2 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "getCarrierPrivilegedPackagesForAllActiveSubscriptions NPE", $r2);

        goto label8;

     label7:
        $r1 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "getCarrierPrivilegedPackagesForAllActiveSubscriptions RemoteException", $r1);

     label8:
        $r7 = <java.util.Collections: java.util.List EMPTY_LIST>;

        return $r7;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public android.telephony.CarrierRestrictionRules getCarrierRestrictionRules()
    {
        android.telephony.TelephonyManager r0;
        android.os.RemoteException $r1;
        java.lang.NullPointerException $r2;
        com.android.internal.telephony.ITelephony r3;
        android.telephony.CarrierRestrictionRules r4;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 == null goto label5;

     label3:
        r4 = interfaceinvoke r3.<com.android.internal.telephony.ITelephony: android.telephony.CarrierRestrictionRules getAllowedCarriers()>();

     label4:
        return r4;

     label5:
        goto label8;

     label6:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#getAllowedCarriers", $r2);

        goto label8;

     label7:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#getAllowedCarriers", $r1);

     label8:
        return null;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public int getCdmaEriIconIndex(int)
    {
        android.telephony.TelephonyManager r0;
        java.lang.String $r1, $r2;
        java.lang.NullPointerException $r3;
        android.os.RemoteException $r4;
        int i0, i1;
        com.android.internal.telephony.ITelephony r5;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r5 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r5 != null goto label3;

        return -1;

     label3:
        $r1 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOpPackageName()>();

        $r2 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getAttributionTag()>();

        i1 = interfaceinvoke r5.<com.android.internal.telephony.ITelephony: int getCdmaEriIconIndexForSubscriber(int,java.lang.String,java.lang.String)>(i0, $r1, $r2);

     label4:
        return i1;

     label5:
        $r3 := @caughtexception;

        return -1;

     label6:
        $r4 := @caughtexception;

        return -1;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.NullPointerException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public int getCdmaEriIconMode(int)
    {
        android.telephony.TelephonyManager r0;
        java.lang.String $r1, $r2;
        android.os.RemoteException $r3;
        java.lang.NullPointerException $r4;
        int i0, i1;
        com.android.internal.telephony.ITelephony r5;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r5 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r5 != null goto label3;

        return -1;

     label3:
        $r1 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOpPackageName()>();

        $r2 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getAttributionTag()>();

        i1 = interfaceinvoke r5.<com.android.internal.telephony.ITelephony: int getCdmaEriIconModeForSubscriber(int,java.lang.String,java.lang.String)>(i0, $r1, $r2);

     label4:
        return i1;

     label5:
        $r4 := @caughtexception;

        return -1;

     label6:
        $r3 := @caughtexception;

        return -1;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.NullPointerException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public android.telephony.CdmaEriInformation getCdmaEriInformation()
    {
        android.telephony.TelephonyManager r0;
        android.telephony.CdmaEriInformation $r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.telephony.TelephonyManager;

        $r1 = new android.telephony.CdmaEriInformation;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $i1 = virtualinvoke r0.<android.telephony.TelephonyManager: int getCdmaEriIconIndex(int)>($i0);

        $i2 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $i3 = virtualinvoke r0.<android.telephony.TelephonyManager: int getCdmaEriIconMode(int)>($i2);

        specialinvoke $r1.<android.telephony.CdmaEriInformation: void <init>(int,int)>($i1, $i3);

        return $r1;
    }

    public java.lang.String getCdmaEriText()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $r1 = virtualinvoke r0.<android.telephony.TelephonyManager: java.lang.String getCdmaEriText(int)>($i0);

        return $r1;
    }

    public java.lang.String getCdmaEriText(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        java.lang.String $r1, $r2, r6;
        java.lang.NullPointerException $r3;
        android.os.RemoteException $r4;
        com.android.internal.telephony.ITelephony r5;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r5 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r5 != null goto label3;

        return null;

     label3:
        $r1 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOpPackageName()>();

        $r2 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getAttributionTag()>();

        r6 = interfaceinvoke r5.<com.android.internal.telephony.ITelephony: java.lang.String getCdmaEriTextForSubscriber(int,java.lang.String,java.lang.String)>(i0, $r1, $r2);

     label4:
        return r6;

     label5:
        $r3 := @caughtexception;

        return null;

     label6:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.NullPointerException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public java.lang.String getCdmaMdn()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $r1 = virtualinvoke r0.<android.telephony.TelephonyManager: java.lang.String getCdmaMdn(int)>($i0);

        return $r1;
    }

    public java.lang.String getCdmaMdn(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        android.os.RemoteException $r1;
        java.lang.NullPointerException $r2;
        com.android.internal.telephony.ITelephony r3;
        java.lang.String r4;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 != null goto label3;

        return null;

     label3:
        r4 = interfaceinvoke r3.<com.android.internal.telephony.ITelephony: java.lang.String getCdmaMdn(int)>(i0);

     label4:
        return r4;

     label5:
        $r2 := @caughtexception;

        return null;

     label6:
        $r1 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.NullPointerException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public java.lang.String getCdmaMin()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $r1 = virtualinvoke r0.<android.telephony.TelephonyManager: java.lang.String getCdmaMin(int)>($i0);

        return $r1;
    }

    public java.lang.String getCdmaMin(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        android.os.RemoteException $r1;
        java.lang.NullPointerException $r2;
        com.android.internal.telephony.ITelephony r3;
        java.lang.String r4;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 != null goto label3;

        return null;

     label3:
        r4 = interfaceinvoke r3.<com.android.internal.telephony.ITelephony: java.lang.String getCdmaMin(int)>(i0);

     label4:
        return r4;

     label5:
        $r2 := @caughtexception;

        return null;

     label6:
        $r1 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.NullPointerException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public java.lang.String getCdmaPrlVersion()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $r1 = virtualinvoke r0.<android.telephony.TelephonyManager: java.lang.String getCdmaPrlVersion(int)>($i0);

        return $r1;
    }

    public java.lang.String getCdmaPrlVersion(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;
        java.lang.String r3;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label5;

     label3:
        r3 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: java.lang.String getCdmaPrlVersion(int)>(i0);

     label4:
        return r3;

     label5:
        goto label7;

     label6:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#getCdmaPrlVersion", $r1);

     label7:
        return null;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public int getCdmaRoamingMode()
    {
        android.telephony.TelephonyManager r0;
        int $i1, i3;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        i3 = -1;

        if r2 == null goto label4;

     label3:
        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        i3 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: int getCdmaRoamingMode(int)>($i1);

     label4:
        goto label6;

     label5:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#getCdmaRoamingMode", $r1);

        i3 = -1;

     label6:
        return i3;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public android.telephony.CellLocation getCellLocation()
    {
        android.telephony.TelephonyManager r0;
        android.content.Context $r2, $r4;
        java.lang.String $r3, $r5, $r11;
        android.telephony.CellIdentity $r6;
        boolean $z0;
        android.os.RemoteException $r7;
        java.lang.StringBuilder $r8;
        com.android.internal.telephony.ITelephony r12;
        android.telephony.CellLocation r13;

        r0 := @this: android.telephony.TelephonyManager;

     label01:
        r12 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label02:
        if r12 != null goto label05;

     label03:
        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("TelephonyManager", "getCellLocation returning null because telephony is null");

     label04:
        return null;

     label05:
        $r2 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.String getOpPackageName()>();

        $r4 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.String getAttributionTag()>();

        $r6 = interfaceinvoke r12.<com.android.internal.telephony.ITelephony: android.telephony.CellIdentity getCellLocation(java.lang.String,java.lang.String)>($r3, $r5);

        r13 = virtualinvoke $r6.<android.telephony.CellIdentity: android.telephony.CellLocation asCellLocation()>();

     label06:
        if r13 == null goto label10;

     label07:
        $z0 = virtualinvoke r13.<android.telephony.CellLocation: boolean isEmpty()>();

        if $z0 == 0 goto label09;

     label08:
        goto label10;

     label09:
        return r13;

     label10:
        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("TelephonyManager", "getCellLocation returning null because CellLocation is empty or phone type doesn\'t match CellLocation type");

     label11:
        return null;

     label12:
        $r7 := @caughtexception;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getCellLocation returning null due to RemoteException ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("TelephonyManager", $r11);

        return null;

        catch android.os.RemoteException from label01 to label02 with label12;
        catch android.os.RemoteException from label03 to label04 with label12;
        catch android.os.RemoteException from label05 to label06 with label12;
        catch android.os.RemoteException from label07 to label08 with label12;
        catch android.os.RemoteException from label10 to label11 with label12;
    }

    public java.util.List getCertsFromCarrierPrivilegeAccessRules()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;
        java.util.List r3;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label5;

     label3:
        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        r3 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: java.util.List getCertsFromCarrierPrivilegeAccessRules(int)>($i0);

     label4:
        return r3;

     label5:
        goto label7;

     label6:
        $r1 := @caughtexception;

     label7:
        return null;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public java.util.List getClientRequestStats(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        java.lang.String $r1, $r2;
        android.os.RemoteException $r3;
        com.android.internal.telephony.ITelephony r4;
        java.util.List r5;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r4 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r4 == null goto label5;

     label3:
        $r1 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOpPackageName()>();

        $r2 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getAttributionTag()>();

        r5 = interfaceinvoke r4.<com.android.internal.telephony.ITelephony: java.util.List getClientRequestStats(java.lang.String,java.lang.String,int)>($r1, $r2, i0);

     label4:
        return r5;

     label5:
        goto label7;

     label6:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#getClientRequestStats", $r3);

     label7:
        return null;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public int getCurrentPhoneType()
    {
        android.telephony.TelephonyManager r0;
        int $i0, $i1;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $i1 = virtualinvoke r0.<android.telephony.TelephonyManager: int getCurrentPhoneType(int)>($i0);

        return $i1;
    }

    public int getCurrentPhoneType(int)
    {
        android.telephony.TelephonyManager r0;
        int $i0, i1, i2;

        r0 := @this: android.telephony.TelephonyManager;

        i1 := @parameter0: int;

        if i1 != -1 goto label1;

        i2 = 0;

        goto label2;

     label1:
        i2 = staticinvoke <android.telephony.SubscriptionManager: int getPhoneId(int)>(i1);

     label2:
        $i0 = virtualinvoke r0.<android.telephony.TelephonyManager: int getCurrentPhoneTypeForSlot(int)>(i2);

        return $i0;
    }

    public int getCurrentPhoneTypeForSlot(int)
    {
        android.telephony.TelephonyManager r0;
        int i0, i1, $i2, $i3, $i4;
        android.os.RemoteException $r1;
        java.lang.NullPointerException $r2;
        com.android.internal.telephony.ITelephony r3;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 == null goto label4;

     label3:
        $i2 = interfaceinvoke r3.<com.android.internal.telephony.ITelephony: int getActivePhoneTypeForSlot(int)>(i0);

        return $i2;

     label4:
        i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getPhoneTypeFromProperty(int)>(i0);

     label5:
        return i1;

     label6:
        $r2 := @caughtexception;

        $i4 = specialinvoke r0.<android.telephony.TelephonyManager: int getPhoneTypeFromProperty(int)>(i0);

        return $i4;

     label7:
        $r1 := @caughtexception;

        $i3 = specialinvoke r0.<android.telephony.TelephonyManager: int getPhoneTypeFromProperty(int)>(i0);

        return $i3;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
        catch android.os.RemoteException from label4 to label5 with label7;
        catch java.lang.NullPointerException from label4 to label5 with label6;
    }

    public int getDataActivationState()
    {
        android.telephony.TelephonyManager r0;
        int $i0, $i1;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $i1 = virtualinvoke r0.<android.telephony.TelephonyManager: int getDataActivationState(int)>($i0);

        return $i1;
    }

    public int getDataActivationState(int)
    {
        android.telephony.TelephonyManager r0;
        java.lang.String $r1;
        android.os.RemoteException $r2;
        java.lang.NullPointerException $r3;
        int i0, i1;
        com.android.internal.telephony.ITelephony r4;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r4 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r4 == null goto label5;

     label3:
        $r1 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOpPackageName()>();

        i1 = interfaceinvoke r4.<com.android.internal.telephony.ITelephony: int getDataActivationState(int,java.lang.String)>(i0, $r1);

     label4:
        return i1;

     label5:
        goto label8;

     label6:
        $r3 := @caughtexception;

        goto label8;

     label7:
        $r2 := @caughtexception;

     label8:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public int getDataActivity()
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1, $i2;
        java.lang.NullPointerException $r1;
        android.os.RemoteException $r2;
        com.android.internal.telephony.ITelephony r3;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 != null goto label3;

        return 0;

     label3:
        $i1 = staticinvoke <android.telephony.SubscriptionManager: int getActiveDataSubscriptionId()>();

        $i2 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId(int)>($i1);

        i0 = interfaceinvoke r3.<com.android.internal.telephony.ITelephony: int getDataActivityForSubId(int)>($i2);

     label4:
        return i0;

     label5:
        $r1 := @caughtexception;

        return 0;

     label6:
        $r2 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.NullPointerException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public boolean getDataEnabled()
    {
        android.telephony.TelephonyManager r0;
        boolean $z0;

        r0 := @this: android.telephony.TelephonyManager;

        $z0 = virtualinvoke r0.<android.telephony.TelephonyManager: boolean isDataEnabled()>();

        return $z0;
    }

    public boolean getDataEnabled(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        java.lang.Exception $r1;
        boolean z1;
        com.android.internal.telephony.ITelephony r2;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        z1 = 0;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label4;

     label3:
        z1 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: boolean isUserDataEnabled(int)>(i0);

     label4:
        goto label6;

     label5:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#isUserDataEnabled", $r1);

        z1 = 0;

     label6:
        return z1;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch java.lang.NullPointerException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public int getDataNetworkType()
    {
        android.telephony.TelephonyManager r0;
        int $i0, $i1, $i2;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = staticinvoke <android.telephony.SubscriptionManager: int getActiveDataSubscriptionId()>();

        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId(int)>($i0);

        $i2 = virtualinvoke r0.<android.telephony.TelephonyManager: int getDataNetworkType(int)>($i1);

        return $i2;
    }

    public int getDataNetworkType(int)
    {
        android.telephony.TelephonyManager r0;
        java.lang.String $r1, $r2;
        android.os.RemoteException $r3;
        java.lang.NullPointerException $r4;
        int i0, i1;
        com.android.internal.telephony.ITelephony r5;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r5 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r5 == null goto label5;

     label3:
        $r1 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOpPackageName()>();

        $r2 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getAttributionTag()>();

        i1 = interfaceinvoke r5.<com.android.internal.telephony.ITelephony: int getDataNetworkTypeForSubscriber(int,java.lang.String,java.lang.String)>(i0, $r1, $r2);

     label4:
        return i1;

     label5:
        return 0;

     label6:
        $r4 := @caughtexception;

        return 0;

     label7:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public int getDataState()
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1, $i2;
        boolean z0;
        java.lang.NullPointerException $r1;
        android.os.RemoteException $r2;
        com.android.internal.telephony.ITelephony r3;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 != null goto label3;

        return 0;

     label3:
        $i1 = staticinvoke <android.telephony.SubscriptionManager: int getActiveDataSubscriptionId()>();

        $i2 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId(int)>($i1);

        i0 = interfaceinvoke r3.<com.android.internal.telephony.ITelephony: int getDataStateForSubId(int)>($i2);

     label4:
        if i0 != 4 goto label7;

     label5:
        z0 = staticinvoke <android.compat.Compatibility: boolean isChangeEnabled(long)>(148534348L);

     label6:
        if z0 != 0 goto label7;

        return 2;

     label7:
        return i0;

     label8:
        $r1 := @caughtexception;

        return 0;

     label9:
        $r2 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label9;
        catch java.lang.NullPointerException from label1 to label2 with label8;
        catch android.os.RemoteException from label3 to label4 with label9;
        catch java.lang.NullPointerException from label3 to label4 with label8;
        catch android.os.RemoteException from label5 to label6 with label9;
        catch java.lang.NullPointerException from label5 to label6 with label8;
    }

    public android.content.ComponentName getDefaultRespondViaMessageApplication()
    {
        android.telephony.TelephonyManager r0;
        android.content.Context $r1;
        android.content.ComponentName $r2;

        r0 := @this: android.telephony.TelephonyManager;

        $r1 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r2 = staticinvoke <com.android.internal.telephony.SmsApplication: android.content.ComponentName getDefaultRespondViaMessageApplication(android.content.Context,boolean)>($r1, 0);

        return $r2;
    }

    public java.lang.String getDeviceId()
    {
        android.telephony.TelephonyManager r0;
        android.content.Context $r1, $r3;
        java.lang.String $r2, $r4, r8;
        java.lang.NullPointerException $r5;
        android.os.RemoteException $r6;
        com.android.internal.telephony.ITelephony r7;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r7 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r7 != null goto label3;

        return null;

     label3:
        $r1 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        $r3 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getAttributionTag()>();

        r8 = interfaceinvoke r7.<com.android.internal.telephony.ITelephony: java.lang.String getDeviceIdWithFeature(java.lang.String,java.lang.String)>($r2, $r4);

     label4:
        return r8;

     label5:
        $r5 := @caughtexception;

        return null;

     label6:
        $r6 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.NullPointerException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public java.lang.String getDeviceId(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        android.content.Context $r1, $r3;
        java.lang.String $r2, $r4, r8;
        android.os.RemoteException $r5;
        java.lang.NullPointerException $r6;
        com.android.internal.telephony.IPhoneSubInfo r7;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r7 = staticinvoke <android.telephony.TelephonyManager: com.android.internal.telephony.IPhoneSubInfo getSubscriberInfoService()>();

     label2:
        if r7 != null goto label3;

        return null;

     label3:
        $r1 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        $r3 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getAttributionTag()>();

        r8 = interfaceinvoke r7.<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getDeviceIdForPhone(int,java.lang.String,java.lang.String)>(i0, $r2, $r4);

     label4:
        return r8;

     label5:
        $r6 := @caughtexception;

        return null;

     label6:
        $r5 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.NullPointerException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public java.util.List getDevicePolicyOverrideApns(android.content.Context)
    {
        android.telephony.TelephonyManager r0;
        android.content.ContentResolver $r1;
        android.net.Uri $r2;
        boolean $z1;
        android.telephony.data.ApnSetting $r3;
        java.lang.Throwable $r4, $r5;
        android.content.Context r6;
        android.database.Cursor r7;
        java.util.List r8;
        java.util.ArrayList r9;

        r0 := @this: android.telephony.TelephonyManager;

        r6 := @parameter0: android.content.Context;

        $r1 = virtualinvoke r6.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r2 = <android.provider.Telephony$Carriers: android.net.Uri DPC_URI>;

        r7 = virtualinvoke $r1.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>($r2, null, null, null, null);

        if r7 != null goto label04;

     label01:
        r8 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label02:
        if r7 == null goto label03;

        interfaceinvoke r7.<android.database.Cursor: void close()>();

     label03:
        return r8;

     label04:
        r9 = new java.util.ArrayList;

        specialinvoke r9.<java.util.ArrayList: void <init>()>();

        interfaceinvoke r7.<android.database.Cursor: boolean moveToPosition(int)>(-1);

     label05:
        $z1 = interfaceinvoke r7.<android.database.Cursor: boolean moveToNext()>();

        if $z1 == 0 goto label07;

        $r3 = staticinvoke <android.telephony.data.ApnSetting: android.telephony.data.ApnSetting makeApnSetting(android.database.Cursor)>(r7);

        interfaceinvoke r9.<java.util.List: boolean add(java.lang.Object)>($r3);

     label06:
        goto label05;

     label07:
        if r7 == null goto label08;

        interfaceinvoke r7.<android.database.Cursor: void close()>();

     label08:
        return r9;

     label09:
        $r4 := @caughtexception;

        if r7 == null goto label13;

     label10:
        interfaceinvoke r7.<android.database.Cursor: void close()>();

     label11:
        goto label13;

     label12:
        $r5 := @caughtexception;

        virtualinvoke $r4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r5);

     label13:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label10 to label11 with label12;
    }

    public java.lang.String getDeviceSoftwareVersion()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = virtualinvoke r0.<android.telephony.TelephonyManager: int getSlotIndex()>();

        $r1 = virtualinvoke r0.<android.telephony.TelephonyManager: java.lang.String getDeviceSoftwareVersion(int)>($i0);

        return $r1;
    }

    public java.lang.String getDeviceSoftwareVersion(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        java.lang.String $r1, $r2, r6;
        java.lang.NullPointerException $r3;
        android.os.RemoteException $r4;
        com.android.internal.telephony.ITelephony r5;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        r5 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

        if r5 != null goto label1;

        return null;

     label1:
        $r1 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOpPackageName()>();

        $r2 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getAttributionTag()>();

        r6 = interfaceinvoke r5.<com.android.internal.telephony.ITelephony: java.lang.String getDeviceSoftwareVersionForSlot(int,java.lang.String,java.lang.String)>(i0, $r1, $r2);

     label2:
        return r6;

     label3:
        $r3 := @caughtexception;

        return null;

     label4:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public long getEffectiveAllowedNetworkTypes()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        long $l1;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r3;
        java.lang.IllegalStateException r4;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 == null goto label4;

     label3:
        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $l1 = interfaceinvoke r3.<com.android.internal.telephony.ITelephony: long getEffectiveAllowedNetworkTypes(int)>($i0);

        return $l1;

     label4:
        r4 = new java.lang.IllegalStateException;

        specialinvoke r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("telephony service is null.");

        throw r4;

     label5:
        $r1 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "getEffectiveAllowedNetworkTypes RemoteException", $r1);

        virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        return -1L;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
        catch android.os.RemoteException from label4 to label5 with label5;
    }

    public boolean getEmergencyCallbackMode()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        boolean $z0;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $z0 = virtualinvoke r0.<android.telephony.TelephonyManager: boolean getEmergencyCallbackMode(int)>($i0);

        return $z0;
    }

    public boolean getEmergencyCallbackMode(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        boolean z0;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 != null goto label3;

        return 0;

     label3:
        z0 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: boolean getEmergencyCallbackMode(int)>(i0);

     label4:
        return z0;

     label5:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#getEmergencyCallbackMode", $r1);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public int getEmergencyNumberDbVersion()
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r3;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 == null goto label5;

     label3:
        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        i0 = interfaceinvoke r3.<com.android.internal.telephony.ITelephony: int getEmergencyNumberDbVersion(int)>($i1);

     label4:
        return i0;

     label5:
        goto label7;

     label6:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "getEmergencyNumberDbVersion RemoteException", $r1);

        virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

     label7:
        return -1;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public java.util.Map getEmergencyNumberList()
    {
        android.telephony.TelephonyManager r0;
        java.util.HashMap $r2;
        android.content.Context $r3, $r5;
        java.lang.String $r4, $r6;
        java.util.Map $r7;
        android.os.RemoteException $r8;
        com.android.internal.telephony.ITelephony r10;
        java.lang.IllegalStateException r11;

        r0 := @this: android.telephony.TelephonyManager;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

     label1:
        r10 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r10 == null goto label4;

     label3:
        $r3 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getOpPackageName()>();

        $r5 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.String getAttributionTag()>();

        $r7 = interfaceinvoke r10.<com.android.internal.telephony.ITelephony: java.util.Map getEmergencyNumberList(java.lang.String,java.lang.String)>($r4, $r6);

        return $r7;

     label4:
        r11 = new java.lang.IllegalStateException;

        specialinvoke r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>("telephony service is null.");

        throw r11;

     label5:
        $r8 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "getEmergencyNumberList RemoteException", $r8);

        virtualinvoke $r8.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        return $r2;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
        catch android.os.RemoteException from label4 to label5 with label5;
    }

    public java.util.Map getEmergencyNumberList(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        java.util.Iterator r1, r20;
        java.util.List r2;
        android.telephony.emergency.EmergencyNumber r3;
        android.content.Context $r5, $r7;
        java.lang.String $r6, $r8;
        java.util.Set $r9;
        boolean $z0, $z1, $z2;
        java.lang.Object $r10, $r12, $r13, r17;
        java.lang.Integer $r11;
        android.os.RemoteException $r14;
        com.android.internal.telephony.ITelephony r18;
        java.util.Map r19, r25;
        java.util.HashMap r23;
        java.lang.IllegalStateException r24;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        r23 = new java.util.HashMap;

        specialinvoke r23.<java.util.HashMap: void <init>()>();

        r17 = r23;

     label01:
        r18 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label02:
        if r18 == null goto label23;

        r17 = r23;

     label03:
        $r5 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.String getOpPackageName()>();

        $r7 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: java.lang.String getAttributionTag()>();

        r19 = interfaceinvoke r18.<com.android.internal.telephony.ITelephony: java.util.Map getEmergencyNumberList(java.lang.String,java.lang.String)>($r6, $r8);

     label04:
        if r19 == null goto label22;

        r17 = r19;

     label05:
        $r9 = interfaceinvoke r19.<java.util.Map: java.util.Set keySet()>();

        r1 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label06:
        r17 = r19;

     label07:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label22;

     label08:
        r17 = r19;

     label09:
        $r10 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (java.lang.Integer) $r10;

        $r12 = interfaceinvoke r19.<java.util.Map: java.lang.Object get(java.lang.Object)>($r11);

        r2 = (java.util.List) $r12;

     label10:
        r17 = r19;

     label11:
        r20 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label12:
        r17 = r19;

     label13:
        $z1 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label21;

     label14:
        r17 = r19;

     label15:
        $r13 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.telephony.emergency.EmergencyNumber) $r13;

     label16:
        r17 = r19;

     label17:
        $z2 = virtualinvoke r3.<android.telephony.emergency.EmergencyNumber: boolean isInEmergencyServiceCategories(int)>(i0);

        if $z2 != 0 goto label20;

     label18:
        r17 = r19;

     label19:
        interfaceinvoke r2.<java.util.List: boolean remove(java.lang.Object)>(r3);

     label20:
        goto label12;

     label21:
        goto label06;

     label22:
        return r19;

     label23:
        r17 = r23;

     label24:
        r24 = new java.lang.IllegalStateException;

     label25:
        r17 = r23;

     label26:
        specialinvoke r24.<java.lang.IllegalStateException: void <init>(java.lang.String)>("telephony service is null.");

     label27:
        r17 = r23;

     label28:
        throw r24;

     label29:
        $r14 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "getEmergencyNumberList with Categories RemoteException", $r14);

        virtualinvoke $r14.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        r25 = (java.util.Map) r17;

        return r25;

        catch android.os.RemoteException from label01 to label02 with label29;
        catch android.os.RemoteException from label03 to label04 with label29;
        catch android.os.RemoteException from label05 to label06 with label29;
        catch android.os.RemoteException from label07 to label08 with label29;
        catch android.os.RemoteException from label09 to label10 with label29;
        catch android.os.RemoteException from label11 to label12 with label29;
        catch android.os.RemoteException from label13 to label14 with label29;
        catch android.os.RemoteException from label15 to label16 with label29;
        catch android.os.RemoteException from label17 to label18 with label29;
        catch android.os.RemoteException from label19 to label20 with label29;
        catch android.os.RemoteException from label24 to label25 with label29;
        catch android.os.RemoteException from label26 to label27 with label29;
        catch android.os.RemoteException from label28 to label29 with label29;
    }

    public java.lang.String getEsn()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $r1 = virtualinvoke r0.<android.telephony.TelephonyManager: java.lang.String getEsn(int)>($i0);

        return $r1;
    }

    public java.lang.String getEsn(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;
        java.lang.String r3;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label5;

     label3:
        r3 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: java.lang.String getEsn(int)>(i0);

     label4:
        return r3;

     label5:
        goto label7;

     label6:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#getEsn", $r1);

     label7:
        return null;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public java.lang.String[] getForbiddenPlmns()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        java.lang.String[] $r1;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $r1 = virtualinvoke r0.<android.telephony.TelephonyManager: java.lang.String[] getForbiddenPlmns(int,int)>($i0, 2);

        return $r1;
    }

    public java.lang.String[] getForbiddenPlmns(int, int)
    {
        android.telephony.TelephonyManager r0;
        int i0, i1;
        android.content.Context $r1;
        java.lang.String $r2, $r3;
        android.os.RemoteException $r4;
        java.lang.NullPointerException $r5;
        com.android.internal.telephony.ITelephony r6;
        java.lang.String[] r7;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        r6 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r6 != null goto label3;

        return null;

     label3:
        $r1 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        $r3 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getAttributionTag()>();

        r7 = interfaceinvoke r6.<com.android.internal.telephony.ITelephony: java.lang.String[] getForbiddenPlmns(int,int,java.lang.String,java.lang.String)>(i0, i1, $r2, $r3);

     label4:
        return r7;

     label5:
        $r5 := @caughtexception;

        return null;

     label6:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.NullPointerException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public java.lang.String getGroupIdLevel1()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        android.content.Context $r1, $r3;
        java.lang.String $r2, $r4, r8;
        android.os.RemoteException $r5;
        java.lang.NullPointerException $r6;
        com.android.internal.telephony.IPhoneSubInfo r7;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r7 = staticinvoke <android.telephony.TelephonyManager: com.android.internal.telephony.IPhoneSubInfo getSubscriberInfoService()>();

     label2:
        if r7 != null goto label3;

        return null;

     label3:
        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $r1 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        $r3 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getAttributionTag()>();

        r8 = interfaceinvoke r7.<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getGroupIdLevel1ForSubscriber(int,java.lang.String,java.lang.String)>($i0, $r2, $r4);

     label4:
        return r8;

     label5:
        $r6 := @caughtexception;

        return null;

     label6:
        $r5 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.NullPointerException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public java.lang.String getGroupIdLevel1(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        android.content.Context $r1, $r3;
        java.lang.String $r2, $r4, r8;
        java.lang.NullPointerException $r5;
        android.os.RemoteException $r6;
        com.android.internal.telephony.IPhoneSubInfo r7;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r7 = staticinvoke <android.telephony.TelephonyManager: com.android.internal.telephony.IPhoneSubInfo getSubscriberInfoService()>();

     label2:
        if r7 != null goto label3;

        return null;

     label3:
        $r1 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        $r3 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getAttributionTag()>();

        r8 = interfaceinvoke r7.<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getGroupIdLevel1ForSubscriber(int,java.lang.String,java.lang.String)>(i0, $r2, $r4);

     label4:
        return r8;

     label5:
        $r5 := @caughtexception;

        return null;

     label6:
        $r6 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.NullPointerException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public java.lang.String getIccAuthentication(int, int, int, java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        int i0, i1, i2;
        com.android.internal.telephony.IPhoneSubInfo r1;
        android.os.RemoteException $r2;
        java.lang.NullPointerException $r3;
        java.lang.String r4, r5;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r4 := @parameter3: java.lang.String;

     label1:
        r1 = staticinvoke <android.telephony.TelephonyManager: com.android.internal.telephony.IPhoneSubInfo getSubscriberInfoService()>();

     label2:
        if r1 != null goto label3;

        return null;

     label3:
        r5 = interfaceinvoke r1.<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getIccSimChallengeResponse(int,int,int,java.lang.String)>(i0, i1, i2, r4);

     label4:
        return r5;

     label5:
        $r3 := @caughtexception;

        return null;

     label6:
        $r2 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.NullPointerException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public java.lang.String getIccAuthentication(int, int, java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        int i0, i1, $i2;
        java.lang.String r1, $r2;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $i2 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $r2 = virtualinvoke r0.<android.telephony.TelephonyManager: java.lang.String getIccAuthentication(int,int,int,java.lang.String)>($i2, i0, i1, r1);

        return $r2;
    }

    public java.lang.String getImei()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = virtualinvoke r0.<android.telephony.TelephonyManager: int getSlotIndex()>();

        $r1 = virtualinvoke r0.<android.telephony.TelephonyManager: java.lang.String getImei(int)>($i0);

        return $r1;
    }

    public java.lang.String getImei(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        java.lang.String $r1, $r2, r6;
        java.lang.NullPointerException $r3;
        android.os.RemoteException $r4;
        com.android.internal.telephony.ITelephony r5;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        r5 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

        if r5 != null goto label1;

        return null;

     label1:
        $r1 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOpPackageName()>();

        $r2 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getAttributionTag()>();

        r6 = interfaceinvoke r5.<com.android.internal.telephony.ITelephony: java.lang.String getImeiForSlot(int,java.lang.String,java.lang.String)>(i0, $r1, $r2);

     label2:
        return r6;

     label3:
        $r3 := @caughtexception;

        return null;

     label4:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public android.telephony.ims.aidl.IImsConfig getImsConfig(int, int)
    {
        android.telephony.TelephonyManager r0;
        int i0, i1;
        android.os.RemoteException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r7;
        com.android.internal.telephony.ITelephony r8;
        android.telephony.ims.aidl.IImsConfig r9;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        r8 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r8 == null goto label5;

     label3:
        r9 = interfaceinvoke r8.<com.android.internal.telephony.ITelephony: android.telephony.ims.aidl.IImsConfig getImsConfig(int,int)>(i0, i1);

     label4:
        return r9;

     label5:
        goto label7;

     label6:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getImsRegistration, RemoteException: ");

        $r5 = virtualinvoke $r2.<android.os.RemoteException: java.lang.String getMessage()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("TelephonyManager", $r7);

     label7:
        return null;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public android.telephony.ims.aidl.IImsMmTelFeature getImsMmTelFeatureAndListen(int, com.android.ims.internal.IImsServiceFeatureCallback)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        android.os.RemoteException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r4, $r6;
        com.android.ims.internal.IImsServiceFeatureCallback r7;
        com.android.internal.telephony.ITelephony r8;
        android.telephony.ims.aidl.IImsMmTelFeature r9;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        r7 := @parameter1: com.android.ims.internal.IImsServiceFeatureCallback;

     label1:
        r8 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r8 == null goto label5;

     label3:
        r9 = interfaceinvoke r8.<com.android.internal.telephony.ITelephony: android.telephony.ims.aidl.IImsMmTelFeature getMmTelFeatureAndListen(int,com.android.ims.internal.IImsServiceFeatureCallback)>(i0, r7);

     label4:
        return r9;

     label5:
        goto label7;

     label6:
        $r1 := @caughtexception;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getImsMmTelFeatureAndListen, RemoteException: ");

        $r4 = virtualinvoke $r1.<android.os.RemoteException: java.lang.String getMessage()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("TelephonyManager", $r6);

     label7:
        return null;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public android.telephony.ims.aidl.IImsRcsFeature getImsRcsFeatureAndListen(int, com.android.ims.internal.IImsServiceFeatureCallback)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        android.os.RemoteException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r4, $r6;
        com.android.ims.internal.IImsServiceFeatureCallback r7;
        com.android.internal.telephony.ITelephony r8;
        android.telephony.ims.aidl.IImsRcsFeature r9;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        r7 := @parameter1: com.android.ims.internal.IImsServiceFeatureCallback;

     label1:
        r8 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r8 == null goto label5;

     label3:
        r9 = interfaceinvoke r8.<com.android.internal.telephony.ITelephony: android.telephony.ims.aidl.IImsRcsFeature getRcsFeatureAndListen(int,com.android.ims.internal.IImsServiceFeatureCallback)>(i0, r7);

     label4:
        return r9;

     label5:
        goto label7;

     label6:
        $r1 := @caughtexception;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getImsRcsFeatureAndListen, RemoteException: ");

        $r4 = virtualinvoke $r1.<android.os.RemoteException: java.lang.String getMessage()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("TelephonyManager", $r6);

     label7:
        return null;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public int getImsRegTechnologyForMmTel()
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1;
        com.android.internal.telephony.ITelephony $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        $r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        i0 = interfaceinvoke $r2.<com.android.internal.telephony.ITelephony: int getImsRegTechnologyForMmTel(int)>($i1);

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        return -1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.telephony.ims.aidl.IImsRegistration getImsRegistration(int, int)
    {
        android.telephony.TelephonyManager r0;
        int i0, i1;
        android.os.RemoteException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r7;
        com.android.internal.telephony.ITelephony r8;
        android.telephony.ims.aidl.IImsRegistration r9;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        r8 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r8 == null goto label5;

     label3:
        r9 = interfaceinvoke r8.<com.android.internal.telephony.ITelephony: android.telephony.ims.aidl.IImsRegistration getImsRegistration(int,int)>(i0, i1);

     label4:
        return r9;

     label5:
        goto label7;

     label6:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getImsRegistration, RemoteException: ");

        $r5 = virtualinvoke $r2.<android.os.RemoteException: java.lang.String getMessage()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("TelephonyManager", $r7);

     label7:
        return null;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public java.lang.String getIsimDomain()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        java.lang.NullPointerException $r1;
        android.os.RemoteException $r2;
        com.android.internal.telephony.IPhoneSubInfo r3;
        java.lang.String r4;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r3 = staticinvoke <android.telephony.TelephonyManager: com.android.internal.telephony.IPhoneSubInfo getSubscriberInfoService()>();

     label2:
        if r3 != null goto label3;

        return null;

     label3:
        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        r4 = interfaceinvoke r3.<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getIsimDomain(int)>($i0);

     label4:
        return r4;

     label5:
        $r1 := @caughtexception;

        return null;

     label6:
        $r2 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.NullPointerException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public java.lang.String getIsimImpi()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        java.lang.NullPointerException $r1;
        android.os.RemoteException $r2;
        com.android.internal.telephony.IPhoneSubInfo r3;
        java.lang.String r4;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r3 = staticinvoke <android.telephony.TelephonyManager: com.android.internal.telephony.IPhoneSubInfo getSubscriberInfoService()>();

     label2:
        if r3 != null goto label3;

        return null;

     label3:
        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        r4 = interfaceinvoke r3.<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getIsimImpi(int)>($i0);

     label4:
        return r4;

     label5:
        $r1 := @caughtexception;

        return null;

     label6:
        $r2 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.NullPointerException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public java.lang.String[] getIsimImpu()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        java.lang.NullPointerException $r1;
        android.os.RemoteException $r2;
        com.android.internal.telephony.IPhoneSubInfo r3;
        java.lang.String[] r4;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r3 = staticinvoke <android.telephony.TelephonyManager: com.android.internal.telephony.IPhoneSubInfo getSubscriberInfoService()>();

     label2:
        if r3 != null goto label3;

        return null;

     label3:
        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        r4 = interfaceinvoke r3.<com.android.internal.telephony.IPhoneSubInfo: java.lang.String[] getIsimImpu(int)>($i0);

     label4:
        return r4;

     label5:
        $r1 := @caughtexception;

        return null;

     label6:
        $r2 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.NullPointerException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public java.lang.String getIsimIst()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        java.lang.NullPointerException $r1;
        android.os.RemoteException $r2;
        com.android.internal.telephony.IPhoneSubInfo r3;
        java.lang.String r4;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r3 = staticinvoke <android.telephony.TelephonyManager: com.android.internal.telephony.IPhoneSubInfo getSubscriberInfoService()>();

     label2:
        if r3 != null goto label3;

        return null;

     label3:
        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        r4 = interfaceinvoke r3.<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getIsimIst(int)>($i0);

     label4:
        return r4;

     label5:
        $r1 := @caughtexception;

        return null;

     label6:
        $r2 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.NullPointerException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public java.lang.String[] getIsimPcscf()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        android.os.RemoteException $r1;
        java.lang.NullPointerException $r2;
        com.android.internal.telephony.IPhoneSubInfo r3;
        java.lang.String[] r4;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r3 = staticinvoke <android.telephony.TelephonyManager: com.android.internal.telephony.IPhoneSubInfo getSubscriberInfoService()>();

     label2:
        if r3 != null goto label3;

        return null;

     label3:
        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        r4 = interfaceinvoke r3.<com.android.internal.telephony.IPhoneSubInfo: java.lang.String[] getIsimPcscf(int)>($i0);

     label4:
        return r4;

     label5:
        $r2 := @caughtexception;

        return null;

     label6:
        $r1 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.NullPointerException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public java.lang.String getLine1AlphaTag()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $r1 = virtualinvoke r0.<android.telephony.TelephonyManager: java.lang.String getLine1AlphaTag(int)>($i0);

        return $r1;
    }

    public java.lang.String getLine1AlphaTag(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        com.android.internal.telephony.ITelephony r1;
        java.lang.String $r2, $r3, $r4, $r5, r10, r12;
        java.lang.NullPointerException $r6, $r9;
        android.os.RemoteException $r7, $r8;
        com.android.internal.telephony.IPhoneSubInfo r11;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label01:
        r1 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label02:
        r10 = null;

        if r1 == null goto label04;

     label03:
        $r4 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOpPackageName()>();

        $r5 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getAttributionTag()>();

        r10 = interfaceinvoke r1.<com.android.internal.telephony.ITelephony: java.lang.String getLine1AlphaTagForDisplay(int,java.lang.String,java.lang.String)>(i0, $r4, $r5);

     label04:
        goto label07;

     label05:
        $r6 := @caughtexception;

        r10 = null;

        goto label07;

     label06:
        $r8 := @caughtexception;

        r10 = null;

        goto label04;

     label07:
        if r10 == null goto label08;

        return r10;

     label08:
        r11 = staticinvoke <android.telephony.TelephonyManager: com.android.internal.telephony.IPhoneSubInfo getSubscriberInfoService()>();

     label09:
        if r11 != null goto label10;

        return null;

     label10:
        $r2 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOpPackageName()>();

        $r3 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getAttributionTag()>();

        r12 = interfaceinvoke r11.<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getLine1AlphaTagForSubscriber(int,java.lang.String,java.lang.String)>(i0, $r2, $r3);

     label11:
        return r12;

     label12:
        $r9 := @caughtexception;

        return null;

     label13:
        $r7 := @caughtexception;

        return null;

        catch android.os.RemoteException from label01 to label02 with label06;
        catch java.lang.NullPointerException from label01 to label02 with label05;
        catch android.os.RemoteException from label03 to label04 with label06;
        catch java.lang.NullPointerException from label03 to label04 with label05;
        catch android.os.RemoteException from label08 to label09 with label13;
        catch java.lang.NullPointerException from label08 to label09 with label12;
        catch android.os.RemoteException from label10 to label11 with label13;
        catch java.lang.NullPointerException from label10 to label11 with label12;
    }

    public java.lang.String getLine1Number()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $r1 = virtualinvoke r0.<android.telephony.TelephonyManager: java.lang.String getLine1Number(int)>($i0);

        return $r1;
    }

    public java.lang.String getLine1Number(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        com.android.internal.telephony.ITelephony r1;
        android.content.Context $r2, $r4, $r6, $r8;
        java.lang.String $r3, $r5, $r7, $r9, r14, r16;
        java.lang.NullPointerException $r10, $r13;
        android.os.RemoteException $r11, $r12;
        com.android.internal.telephony.IPhoneSubInfo r15;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label01:
        r1 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label02:
        r14 = null;

        if r1 == null goto label04;

     label03:
        $r6 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: java.lang.String getOpPackageName()>();

        $r8 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: java.lang.String getAttributionTag()>();

        r14 = interfaceinvoke r1.<com.android.internal.telephony.ITelephony: java.lang.String getLine1NumberForDisplay(int,java.lang.String,java.lang.String)>(i0, $r7, $r9);

     label04:
        goto label07;

     label05:
        $r13 := @caughtexception;

        r14 = null;

        goto label07;

     label06:
        $r11 := @caughtexception;

        r14 = null;

        goto label04;

     label07:
        if r14 == null goto label08;

        return r14;

     label08:
        r15 = staticinvoke <android.telephony.TelephonyManager: com.android.internal.telephony.IPhoneSubInfo getSubscriberInfoService()>();

     label09:
        if r15 != null goto label10;

        return null;

     label10:
        $r2 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.String getOpPackageName()>();

        $r4 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.String getAttributionTag()>();

        r16 = interfaceinvoke r15.<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getLine1NumberForSubscriber(int,java.lang.String,java.lang.String)>(i0, $r3, $r5);

     label11:
        return r16;

     label12:
        $r10 := @caughtexception;

        return null;

     label13:
        $r12 := @caughtexception;

        return null;

        catch android.os.RemoteException from label01 to label02 with label06;
        catch java.lang.NullPointerException from label01 to label02 with label05;
        catch android.os.RemoteException from label03 to label04 with label06;
        catch java.lang.NullPointerException from label03 to label04 with label05;
        catch android.os.RemoteException from label08 to label09 with label13;
        catch java.lang.NullPointerException from label08 to label09 with label12;
        catch android.os.RemoteException from label10 to label11 with label13;
        catch java.lang.NullPointerException from label10 to label11 with label12;
    }

    public java.lang.String getLocaleFromDefaultSim()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;
        java.lang.String r3;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label5;

     label3:
        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        r3 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: java.lang.String getSimLocaleForSubscriber(int)>($i0);

     label4:
        return r3;

     label5:
        goto label7;

     label6:
        $r1 := @caughtexception;

     label7:
        return null;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public java.util.Map getLogicalToPhysicalSlotMapping()
    {
        android.telephony.TelephonyManager r0;
        java.util.HashMap $r2;
        int $i0, $i1, i3;
        java.lang.Integer $r3, $r4;
        android.os.RemoteException $r6;
        com.android.internal.telephony.ITelephony r7;
        int[] r8;

        r0 := @this: android.telephony.TelephonyManager;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

     label1:
        r7 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r7 == null goto label7;

     label3:
        r8 = interfaceinvoke r7.<com.android.internal.telephony.ITelephony: int[] getSlotsMapping()>();

     label4:
        i3 = 0;

     label5:
        $i0 = lengthof r8;

        if i3 >= $i0 goto label7;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $i1 = r8[i3];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

     label6:
        i3 = i3 + 1;

        goto label5;

     label7:
        goto label9;

     label8:
        $r6 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "getSlotsMapping RemoteException", $r6);

     label9:
        return $r2;

        catch android.os.RemoteException from label1 to label2 with label8;
        catch android.os.RemoteException from label3 to label4 with label8;
        catch android.os.RemoteException from label5 to label6 with label8;
    }

    public int getLteOnCdmaMode(int)
    {
        android.telephony.TelephonyManager r0;
        java.lang.String $r1, $r2;
        java.lang.NullPointerException $r3;
        android.os.RemoteException $r4;
        int i0, i1;
        com.android.internal.telephony.ITelephony r5;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r5 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r5 != null goto label3;

        return -1;

     label3:
        $r1 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOpPackageName()>();

        $r2 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getAttributionTag()>();

        i1 = interfaceinvoke r5.<com.android.internal.telephony.ITelephony: int getLteOnCdmaModeForSubscriber(int,java.lang.String,java.lang.String)>(i0, $r1, $r2);

     label4:
        return i1;

     label5:
        $r3 := @caughtexception;

        return -1;

     label6:
        $r4 := @caughtexception;

        return -1;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.NullPointerException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public java.lang.String getManualNetworkSelectionPlmn()
    {
        android.telephony.TelephonyManager r0;
        boolean $z0;
        int $i0;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;
        java.lang.String r3;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label5;

     label3:
        $z0 = virtualinvoke r0.<android.telephony.TelephonyManager: boolean isManualNetworkSelectionAllowed()>();

        if $z0 == 0 goto label5;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        r3 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: java.lang.String getManualNetworkSelectionPlmn(int)>($i0);

     label4:
        return r3;

     label5:
        goto label7;

     label6:
        $r1 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "getManualNetworkSelectionPlmn RemoteException", $r1);

     label7:
        return "";

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public java.lang.String getManufacturerCode()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = virtualinvoke r0.<android.telephony.TelephonyManager: int getSlotIndex()>();

        $r1 = virtualinvoke r0.<android.telephony.TelephonyManager: java.lang.String getManufacturerCode(int)>($i0);

        return $r1;
    }

    public java.lang.String getManufacturerCode(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        android.os.RemoteException $r1;
        java.lang.NullPointerException $r2;
        com.android.internal.telephony.ITelephony r3;
        java.lang.String r4;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

        if r3 != null goto label1;

        return null;

     label1:
        r4 = interfaceinvoke r3.<com.android.internal.telephony.ITelephony: java.lang.String getManufacturerCodeForSlot(int)>(i0);

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        return null;

     label4:
        $r1 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public int getMaxNumberOfSimultaneouslyActiveSims()
    {
        android.telephony.TelephonyManager r0;
        int[] $r1;
        android.telephony.TelephonyManager$MultiSimVariants $r2;
        int $i0, $i1;

        r0 := @this: android.telephony.TelephonyManager;

        $r1 = <android.telephony.TelephonyManager$8: int[] $SwitchMap$android$telephony$TelephonyManager$MultiSimVariants>;

        $r2 = virtualinvoke r0.<android.telephony.TelephonyManager: android.telephony.TelephonyManager$MultiSimVariants getMultiSimConfiguration()>();

        $i0 = virtualinvoke $r2.<android.telephony.TelephonyManager$MultiSimVariants: int ordinal()>();

        $i1 = $r1[$i0];

        if $i1 == 3 goto label1;

        return 1;

     label1:
        return 2;
    }

    public java.lang.String getMeid()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = virtualinvoke r0.<android.telephony.TelephonyManager: int getSlotIndex()>();

        $r1 = virtualinvoke r0.<android.telephony.TelephonyManager: java.lang.String getMeid(int)>($i0);

        return $r1;
    }

    public java.lang.String getMeid(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        java.lang.String $r1, $r2, r6;
        boolean $z0;
        java.lang.NullPointerException $r3;
        android.os.RemoteException $r4;
        com.android.internal.telephony.ITelephony r5;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        r5 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

        if r5 != null goto label1;

        return null;

     label1:
        $r1 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOpPackageName()>();

        $r2 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getAttributionTag()>();

        r6 = interfaceinvoke r5.<com.android.internal.telephony.ITelephony: java.lang.String getMeidForSlot(int,java.lang.String,java.lang.String)>(i0, $r1, $r2);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r6);

        if $z0 == 0 goto label3;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("TelephonyManager", "getMeid: return null because MEID is not available");

     label2:
        return null;

     label3:
        return r6;

     label4:
        $r3 := @caughtexception;

        return null;

     label5:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch java.lang.NullPointerException from label1 to label2 with label4;
    }

    public java.lang.String[] getMergedImsisFromGroup()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        java.lang.String $r1;
        java.lang.NullPointerException $r2;
        android.os.RemoteException $r3;
        com.android.internal.telephony.ITelephony r4;
        java.lang.String[] r5, $r8;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r4 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r4 == null goto label5;

     label3:
        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $r1 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOpPackageName()>();

        r5 = interfaceinvoke r4.<com.android.internal.telephony.ITelephony: java.lang.String[] getMergedImsisFromGroup(int,java.lang.String)>($i0, $r1);

     label4:
        return r5;

     label5:
        goto label8;

     label6:
        $r2 := @caughtexception;

        goto label8;

     label7:
        $r3 := @caughtexception;

     label8:
        $r8 = newarray (java.lang.String)[0];

        return $r8;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public java.lang.String[] getMergedSubscriberIds()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        java.lang.String $r1, $r2;
        java.lang.NullPointerException $r3;
        android.os.RemoteException $r4;
        com.android.internal.telephony.ITelephony r5;
        java.lang.String[] r6;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r5 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r5 == null goto label5;

     label3:
        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $r1 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOpPackageName()>();

        $r2 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getAttributionTag()>();

        r6 = interfaceinvoke r5.<com.android.internal.telephony.ITelephony: java.lang.String[] getMergedSubscriberIds(int,java.lang.String,java.lang.String)>($i0, $r1, $r2);

     label4:
        return r6;

     label5:
        goto label8;

     label6:
        $r3 := @caughtexception;

        goto label8;

     label7:
        $r4 := @caughtexception;

     label8:
        return null;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public java.lang.String getMmsUAProfUrl()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        java.lang.NullPointerException $r1;
        android.os.RemoteException $r2;
        com.android.internal.telephony.ITelephony r3;
        java.lang.String r4;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 == null goto label5;

     label3:
        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        r4 = interfaceinvoke r3.<com.android.internal.telephony.ITelephony: java.lang.String getMmsUAProfUrl(int)>($i0);

     label4:
        return r4;

     label5:
        goto label8;

     label6:
        $r1 := @caughtexception;

        goto label8;

     label7:
        $r2 := @caughtexception;

     label8:
        return null;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public java.lang.String getMmsUserAgent()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        android.os.RemoteException $r1;
        java.lang.NullPointerException $r2;
        com.android.internal.telephony.ITelephony r3;
        java.lang.String r4;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 == null goto label5;

     label3:
        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        r4 = interfaceinvoke r3.<com.android.internal.telephony.ITelephony: java.lang.String getMmsUserAgent(int)>($i0);

     label4:
        return r4;

     label5:
        goto label8;

     label6:
        $r2 := @caughtexception;

        goto label8;

     label7:
        $r1 := @caughtexception;

     label8:
        return null;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public java.lang.String getMsisdn()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $r1 = virtualinvoke r0.<android.telephony.TelephonyManager: java.lang.String getMsisdn(int)>($i0);

        return $r1;
    }

    public java.lang.String getMsisdn(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        java.lang.String $r1, $r2, r6;
        android.os.RemoteException $r3;
        java.lang.NullPointerException $r4;
        com.android.internal.telephony.IPhoneSubInfo r5;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r5 = staticinvoke <android.telephony.TelephonyManager: com.android.internal.telephony.IPhoneSubInfo getSubscriberInfoService()>();

     label2:
        if r5 != null goto label3;

        return null;

     label3:
        $r1 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOpPackageName()>();

        $r2 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getAttributionTag()>();

        r6 = interfaceinvoke r5.<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getMsisdnForSubscriber(int,java.lang.String,java.lang.String)>(i0, $r1, $r2);

     label4:
        return r6;

     label5:
        $r4 := @caughtexception;

        return null;

     label6:
        $r3 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.NullPointerException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public android.telephony.TelephonyManager$MultiSimVariants getMultiSimConfiguration()
    {
        android.telephony.TelephonyManager r0;
        java.lang.String r1;
        java.util.Optional $r2;
        java.lang.Object $r3;
        boolean $z0, $z1, $z2;
        android.telephony.TelephonyManager$MultiSimVariants $r4, $r5, $r6, $r7;

        r0 := @this: android.telephony.TelephonyManager;

        $r2 = staticinvoke <android.sysprop.TelephonyProperties: java.util.Optional multi_sim_config()>();

        $r3 = virtualinvoke $r2.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>("");

        r1 = (java.lang.String) $r3;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("dsds");

        if $z0 == 0 goto label1;

        $r7 = <android.telephony.TelephonyManager$MultiSimVariants: android.telephony.TelephonyManager$MultiSimVariants DSDS>;

        return $r7;

     label1:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("dsda");

        if $z1 == 0 goto label2;

        $r6 = <android.telephony.TelephonyManager$MultiSimVariants: android.telephony.TelephonyManager$MultiSimVariants DSDA>;

        return $r6;

     label2:
        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("tsts");

        if $z2 == 0 goto label3;

        $r5 = <android.telephony.TelephonyManager$MultiSimVariants: android.telephony.TelephonyManager$MultiSimVariants TSTS>;

        return $r5;

     label3:
        $r4 = <android.telephony.TelephonyManager$MultiSimVariants: android.telephony.TelephonyManager$MultiSimVariants UNKNOWN>;

        return $r4;
    }

    public java.lang.String getNai()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $r1 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getNaiBySubscriberId(int)>($i0);

        return $r1;
    }

    public java.lang.String getNai(int)
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1;
        int[] r1;
        java.lang.String $r2;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        r1 = staticinvoke <android.telephony.SubscriptionManager: int[] getSubId(int)>(i0);

        if r1 != null goto label1;

        return null;

     label1:
        $i1 = r1[0];

        $r2 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getNaiBySubscriberId(int)>($i1);

        return $r2;
    }

    public java.util.List getNeighboringCellInfo()
    {
        android.telephony.TelephonyManager r0;
        android.content.Context $r1, $r3;
        java.lang.String $r2, $r4;
        android.os.RemoteException $r5;
        java.lang.NullPointerException $r6;
        com.android.internal.telephony.ITelephony r7;
        java.util.List r8;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r7 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r7 != null goto label3;

        return null;

     label3:
        $r1 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        $r3 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getAttributionTag()>();

        r8 = interfaceinvoke r7.<com.android.internal.telephony.ITelephony: java.util.List getNeighboringCellInfo(java.lang.String,java.lang.String)>($r2, $r4);

     label4:
        return r8;

     label5:
        $r6 := @caughtexception;

        return null;

     label6:
        $r5 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.NullPointerException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public java.lang.String getNetworkCountryIso()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = virtualinvoke r0.<android.telephony.TelephonyManager: int getSlotIndex()>();

        $r1 = virtualinvoke r0.<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso(int)>($i0);

        return $r1;
    }

    public java.lang.String getNetworkCountryIso(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        java.lang.IllegalArgumentException r1;
        boolean $z0;
        java.lang.String $r4, r8;
        android.os.RemoteException $r5;
        java.lang.StringBuilder r6;
        com.android.internal.telephony.ITelephony r7;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        if i0 == 2147483647 goto label4;

     label1:
        $z0 = staticinvoke <android.telephony.SubscriptionManager: boolean isValidSlotIndex(int)>(i0);

        if $z0 == 0 goto label3;

     label2:
        goto label4;

     label3:
        r1 = new java.lang.IllegalArgumentException;

        r6 = new java.lang.StringBuilder;

        specialinvoke r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid slot index ");

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw r1;

     label4:
        r7 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label5:
        if r7 != null goto label6;

        return "";

     label6:
        r8 = interfaceinvoke r7.<com.android.internal.telephony.ITelephony: java.lang.String getNetworkCountryIsoForPhone(int)>(i0);

     label7:
        return r8;

     label8:
        $r5 := @caughtexception;

        return "";

        catch android.os.RemoteException from label1 to label2 with label8;
        catch android.os.RemoteException from label3 to label4 with label8;
        catch android.os.RemoteException from label4 to label5 with label8;
        catch android.os.RemoteException from label6 to label7 with label8;
    }

    public java.lang.String getNetworkCountryIsoForPhone(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        java.lang.String $r1;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso(int)>(i0);

        return $r1;
    }

    public java.lang.String getNetworkOperator()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getPhoneId()>();

        $r1 = virtualinvoke r0.<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorForPhone(int)>($i0);

        return $r1;
    }

    public java.lang.String getNetworkOperator(int)
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1;
        java.lang.String $r1;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        $i1 = staticinvoke <android.telephony.SubscriptionManager: int getPhoneId(int)>(i0);

        $r1 = virtualinvoke r0.<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorForPhone(int)>($i1);

        return $r1;
    }

    public java.lang.String getNetworkOperatorForPhone(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        java.util.List $r1;
        java.lang.Object $r2;
        java.lang.String $r3;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        $r1 = staticinvoke <android.sysprop.TelephonyProperties: java.util.List operator_numeric()>();

        $r2 = staticinvoke <android.telephony.TelephonyManager: java.lang.Object getTelephonyProperty(int,java.util.List,java.lang.Object)>(i0, $r1, "");

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    public java.lang.String getNetworkOperatorName()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $r1 = virtualinvoke r0.<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName(int)>($i0);

        return $r1;
    }

    public java.lang.String getNetworkOperatorName(int)
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1;
        java.util.List $r1;
        java.lang.Object $r2;
        java.lang.String $r3;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        $i1 = staticinvoke <android.telephony.SubscriptionManager: int getPhoneId(int)>(i0);

        $r1 = staticinvoke <android.sysprop.TelephonyProperties: java.util.List operator_alpha()>();

        $r2 = staticinvoke <android.telephony.TelephonyManager: java.lang.Object getTelephonyProperty(int,java.util.List,java.lang.Object)>($i1, $r1, "");

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    public int getNetworkSelectionMode()
    {
        android.telephony.TelephonyManager r0;
        int $i1, i3;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;

        r0 := @this: android.telephony.TelephonyManager;

        i3 = 0;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label4;

     label3:
        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        i3 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: int getNetworkSelectionMode(int)>($i1);

     label4:
        goto label6;

     label5:
        $r1 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "getNetworkSelectionMode RemoteException", $r1);

        i3 = 0;

     label6:
        return i3;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public java.lang.String getNetworkSpecifier()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        return $r1;
    }

    public int getNetworkType()
    {
        android.telephony.TelephonyManager r0;
        int $i0, $i1, $i2;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = staticinvoke <android.telephony.SubscriptionManager: int getActiveDataSubscriptionId()>();

        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId(int)>($i0);

        $i2 = virtualinvoke r0.<android.telephony.TelephonyManager: int getNetworkType(int)>($i1);

        return $i2;
    }

    public int getNetworkType(int)
    {
        android.telephony.TelephonyManager r0;
        java.lang.String $r1, $r2;
        java.lang.NullPointerException $r3;
        android.os.RemoteException $r4;
        int i0, i1;
        com.android.internal.telephony.ITelephony r5;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r5 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r5 == null goto label5;

     label3:
        $r1 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOpPackageName()>();

        $r2 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getAttributionTag()>();

        i1 = interfaceinvoke r5.<com.android.internal.telephony.ITelephony: int getNetworkTypeForSubscriber(int,java.lang.String,java.lang.String)>(i0, $r1, $r2);

     label4:
        return i1;

     label5:
        return 0;

     label6:
        $r3 := @caughtexception;

        return 0;

     label7:
        $r4 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public java.lang.String getNetworkTypeName()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = virtualinvoke r0.<android.telephony.TelephonyManager: int getNetworkType()>();

        $r1 = staticinvoke <android.telephony.TelephonyManager: java.lang.String getNetworkTypeName(int)>($i0);

        return $r1;
    }

    public int getNumberOfModemsWithSimultaneousDataConnections()
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1;
        java.lang.String $r1, $r2;
        android.os.RemoteException $r3;
        com.android.internal.telephony.ITelephony r4;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r4 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r4 == null goto label5;

     label3:
        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $r1 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOpPackageName()>();

        $r2 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getAttributionTag()>();

        i0 = interfaceinvoke r4.<com.android.internal.telephony.ITelephony: int getNumberOfModemsWithSimultaneousDataConnections(int,java.lang.String,java.lang.String)>($i1, $r1, $r2);

     label4:
        return i0;

     label5:
        goto label7;

     label6:
        $r3 := @caughtexception;

     label7:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public java.lang.String getOtaSpNumberSchema(java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        java.lang.String r1, $r2;
        int $i0;

        r0 := @this: android.telephony.TelephonyManager;

        r1 := @parameter0: java.lang.String;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getPhoneId()>();

        $r2 = virtualinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOtaSpNumberSchemaForPhone(int,java.lang.String)>($i0, r1);

        return $r2;
    }

    public java.lang.String getOtaSpNumberSchemaForPhone(int, java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        java.lang.String r1, $r4;
        boolean $z0;
        java.util.List $r2;
        java.lang.Object $r3;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <android.telephony.SubscriptionManager: boolean isValidPhoneId(int)>(i0);

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <android.sysprop.TelephonyProperties: java.util.List otasp_num_schema()>();

        $r3 = staticinvoke <android.telephony.TelephonyManager: java.lang.Object getTelephonyProperty(int,java.util.List,java.lang.Object)>(i0, $r2, r1);

        $r4 = (java.lang.String) $r3;

        return $r4;

     label1:
        return r1;
    }

    public java.util.List getPackagesWithCarrierPrivileges()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        android.os.RemoteException $r1;
        java.lang.NullPointerException $r2;
        com.android.internal.telephony.ITelephony r3;
        java.util.List r4, $r7;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 == null goto label5;

     label3:
        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getPhoneId()>();

        r4 = interfaceinvoke r3.<com.android.internal.telephony.ITelephony: java.util.List getPackagesWithCarrierPrivileges(int)>($i0);

     label4:
        return r4;

     label5:
        goto label8;

     label6:
        $r2 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "getPackagesWithCarrierPrivileges NPE", $r2);

        goto label8;

     label7:
        $r1 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "getPackagesWithCarrierPrivileges RemoteException", $r1);

     label8:
        $r7 = <java.util.Collections: java.util.List EMPTY_LIST>;

        return $r7;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public java.lang.String[] getPcscfAddress(java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        com.android.internal.telephony.ITelephony r1;
        java.lang.String $r2, $r3, r7;
        java.lang.String[] $r4, $r6, r8;
        android.os.RemoteException $r5;

        r0 := @this: android.telephony.TelephonyManager;

        r7 := @parameter0: java.lang.String;

     label1:
        r1 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r1 != null goto label4;

     label3:
        $r4 = newarray (java.lang.String)[0];

        return $r4;

     label4:
        $r2 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOpPackageName()>();

        $r3 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getAttributionTag()>();

        r8 = interfaceinvoke r1.<com.android.internal.telephony.ITelephony: java.lang.String[] getPcscfAddress(java.lang.String,java.lang.String,java.lang.String)>(r7, $r2, $r3);

     label5:
        return r8;

     label6:
        $r5 := @caughtexception;

        $r6 = newarray (java.lang.String)[0];

        return $r6;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    public android.telecom.PhoneAccountHandle getPhoneAccountHandleForSubscriptionId(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        com.android.internal.telephony.ITelephony r1;
        android.os.RemoteException $r2;
        android.telecom.PhoneAccountHandle r3;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        r3 = null;

     label1:
        r1 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r1 == null goto label4;

     label3:
        r3 = interfaceinvoke r1.<com.android.internal.telephony.ITelephony: android.telecom.PhoneAccountHandle getPhoneAccountHandleForSubscriptionId(int)>(i0);

     label4:
        goto label6;

     label5:
        $r2 := @caughtexception;

        r3 = null;

     label6:
        return r3;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public int getPhoneCount()
    {
        android.telephony.TelephonyManager r0;
        int $i0;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = virtualinvoke r0.<android.telephony.TelephonyManager: int getActiveModemCount()>();

        return $i0;
    }

    public int getPhoneType()
    {
        android.telephony.TelephonyManager r0;
        boolean $z0;
        int $i0;

        r0 := @this: android.telephony.TelephonyManager;

        $z0 = virtualinvoke r0.<android.telephony.TelephonyManager: boolean isVoiceCapable()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke r0.<android.telephony.TelephonyManager: int getCurrentPhoneType()>();

        return $i0;
    }

    public int getPreferredNetworkType(int)
    {
        android.telephony.TelephonyManager r0;
        android.os.RemoteException $r1;
        int i1, i2;
        com.android.internal.telephony.ITelephony r2;

        r0 := @this: android.telephony.TelephonyManager;

        i1 := @parameter0: int;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label5;

     label3:
        i2 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: int getPreferredNetworkType(int)>(i1);

     label4:
        return i2;

     label5:
        goto label7;

     label6:
        $r1 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "getPreferredNetworkType RemoteException", $r1);

     label7:
        return -1;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public long getPreferredNetworkTypeBitmask()
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1, $i2;
        long $l3;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label5;

     label3:
        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $i2 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: int getPreferredNetworkType(int)>($i1);

        i0 = staticinvoke <android.telephony.RadioAccessFamily: int getRafFromNetworkType(int)>($i2);

     label4:
        $l3 = (long) i0;

        return $l3;

     label5:
        goto label7;

     label6:
        $r1 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "getPreferredNetworkTypeBitmask RemoteException", $r1);

     label7:
        return 0L;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public int getPreferredOpportunisticDataSubscription()
    {
        android.telephony.TelephonyManager r0;
        com.android.internal.telephony.IOns r1;
        android.os.RemoteException $r2;
        android.content.Context r3, r5;
        java.lang.String r4, r6;
        int i2;

        r0 := @this: android.telephony.TelephonyManager;

        r3 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        if r3 == null goto label1;

        r4 = virtualinvoke r3.<android.content.Context: java.lang.String getOpPackageName()>();

        goto label2;

     label1:
        r4 = "<unknown>";

     label2:
        r5 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        if r5 == null goto label3;

        r6 = virtualinvoke r5.<android.content.Context: java.lang.String getAttributionTag()>();

        goto label4;

     label3:
        r6 = null;

     label4:
        r1 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.IOns getIOns()>();

     label5:
        i2 = -1;

        if r1 == null goto label7;

     label6:
        i2 = interfaceinvoke r1.<com.android.internal.telephony.IOns: int getPreferredDataSubscriptionId(java.lang.String,java.lang.String)>(r4, r6);

     label7:
        goto label9;

     label8:
        $r2 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "getPreferredDataSubscriptionId RemoteException", $r2);

        i2 = -1;

     label9:
        return i2;

        catch android.os.RemoteException from label4 to label5 with label8;
        catch android.os.RemoteException from label6 to label7 with label8;
    }

    public android.util.Pair getRadioHalVersion()
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1, $i2;
        android.util.Pair $r1, $r4, $r7;
        java.lang.Integer $r2, $r3, $r5, $r6, $r8, $r9;
        android.os.RemoteException $r10;
        com.android.internal.telephony.ITelephony r11;

        r0 := @this: android.telephony.TelephonyManager;

     label01:
        r11 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label02:
        if r11 == null goto label08;

     label03:
        i0 = interfaceinvoke r11.<com.android.internal.telephony.ITelephony: int getRadioHalVersion()>();

     label04:
        if i0 != -1 goto label06;

     label05:
        $r7 = new android.util.Pair;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        specialinvoke $r7.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r8, $r9);

        return $r7;

     label06:
        $r4 = new android.util.Pair;

        $i1 = i0 / 100;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $i2 = i0 % 100;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        specialinvoke $r4.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r5, $r6);

     label07:
        return $r4;

     label08:
        goto label10;

     label09:
        $r10 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "getRadioHalVersion() RemoteException", $r10);

     label10:
        $r1 = new android.util.Pair;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        specialinvoke $r1.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r2, $r3);

        return $r1;

        catch android.os.RemoteException from label01 to label02 with label09;
        catch android.os.RemoteException from label03 to label04 with label09;
        catch android.os.RemoteException from label05 to label06 with label09;
        catch android.os.RemoteException from label06 to label07 with label09;
    }

    public int getRadioPowerState()
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1;
        android.content.Context $r1, $r3;
        java.lang.String $r2, $r4;
        android.os.RemoteException $r5;
        com.android.internal.telephony.ITelephony r6;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r6 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r6 == null goto label5;

     label3:
        $i1 = virtualinvoke r0.<android.telephony.TelephonyManager: int getSlotIndex()>();

        $r1 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        $r3 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getAttributionTag()>();

        i0 = interfaceinvoke r6.<com.android.internal.telephony.ITelephony: int getRadioPowerState(int,java.lang.String,java.lang.String)>($i1, $r2, $r4);

     label4:
        return i0;

     label5:
        goto label7;

     label6:
        $r5 := @caughtexception;

     label7:
        return 2;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public android.telephony.ServiceState getServiceState()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        android.telephony.ServiceState $r1;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $r1 = virtualinvoke r0.<android.telephony.TelephonyManager: android.telephony.ServiceState getServiceStateForSubscriber(int)>($i0);

        return $r1;
    }

    public android.telephony.ServiceState getServiceStateForSubscriber(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        java.util.UUID r1;
        java.lang.String $r2, $r3, $r10;
        android.os.RemoteException $r4;
        java.lang.NullPointerException $r5;
        java.lang.StringBuilder $r6;
        com.android.internal.telephony.ITelephony r11;
        android.telephony.ServiceState r12;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r11 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r11 == null goto label5;

     label3:
        $r2 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOpPackageName()>();

        $r3 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getAttributionTag()>();

        r12 = interfaceinvoke r11.<com.android.internal.telephony.ITelephony: android.telephony.ServiceState getServiceStateForSubscriber(int,java.lang.String,java.lang.String)>(i0, $r2, $r3);

     label4:
        return r12;

     label5:
        goto label8;

     label6:
        $r5 := @caughtexception;

        r1 = staticinvoke <java.util.UUID: java.util.UUID fromString(java.lang.String)>("a3ab0b9d-f2aa-4baf-911d-7096c0d4645a");

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getServiceStateForSubscriber ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" NPE");

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.telephony.AnomalyReporter: void reportAnomaly(java.util.UUID,java.lang.String)>(r1, $r10);

        goto label8;

     label7:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#getServiceStateForSubscriber", $r4);

     label8:
        return null;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public android.telephony.SignalStrength getSignalStrength()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;
        android.telephony.SignalStrength r3;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label5;

     label3:
        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        r3 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: android.telephony.SignalStrength getSignalStrength(int)>($i0);

     label4:
        return r3;

     label5:
        goto label7;

     label6:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#getSignalStrength", $r1);

     label7:
        return null;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public int getSimApplicationState()
    {
        android.telephony.TelephonyManager r0;
        int $i0, $i1;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSimStateIncludingLoaded()>();

        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSimApplicationStateFromSimState(int)>($i0);

        return $i1;
    }

    public int getSimApplicationState(int)
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getLogicalSlotIndex(int)>(i0);

        $i2 = staticinvoke <android.telephony.SubscriptionManager: int getSimStateForSlotIndex(int)>($i1);

        $i3 = specialinvoke r0.<android.telephony.TelephonyManager: int getSimApplicationStateFromSimState(int)>($i2);

        return $i3;
    }

    public int getSimCardState()
    {
        android.telephony.TelephonyManager r0;
        int $i0, $i1;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = virtualinvoke r0.<android.telephony.TelephonyManager: int getSimState()>();

        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSimCardStateFromSimState(int)>($i0);

        return $i1;
    }

    public int getSimCardState(int)
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getLogicalSlotIndex(int)>(i0);

        $i2 = virtualinvoke r0.<android.telephony.TelephonyManager: int getSimState(int)>($i1);

        $i3 = specialinvoke r0.<android.telephony.TelephonyManager: int getSimCardStateFromSimState(int)>($i2);

        return $i3;
    }

    public int getSimCarrierId()
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label5;

     label3:
        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        i0 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: int getSubscriptionCarrierId(int)>($i1);

     label4:
        return i0;

     label5:
        goto label7;

     label6:
        $r1 := @caughtexception;

     label7:
        return -1;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public java.lang.CharSequence getSimCarrierIdName()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;
        java.lang.String r3;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label5;

     label3:
        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        r3 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: java.lang.String getSubscriptionCarrierName(int)>($i0);

     label4:
        return r3;

     label5:
        goto label7;

     label6:
        $r1 := @caughtexception;

     label7:
        return null;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public int getSimCount()
    {
        android.telephony.TelephonyManager r0;
        int $i0;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = virtualinvoke r0.<android.telephony.TelephonyManager: int getPhoneCount()>();

        return $i0;
    }

    public java.lang.String getSimCountryIso()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getPhoneId()>();

        $r1 = staticinvoke <android.telephony.TelephonyManager: java.lang.String getSimCountryIsoForPhone(int)>($i0);

        return $r1;
    }

    public java.util.Locale getSimLocale()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        boolean $z0;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;
        java.lang.String r3;
        java.util.Locale r4;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label5;

     label3:
        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        r3 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: java.lang.String getSimLocaleForSubscriber(int)>($i0);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r3);

        if $z0 != 0 goto label5;

        r4 = staticinvoke <java.util.Locale: java.util.Locale forLanguageTag(java.lang.String)>(r3);

     label4:
        return r4;

     label5:
        goto label7;

     label6:
        $r1 := @caughtexception;

     label7:
        return null;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public java.lang.String getSimOperator()
    {
        android.telephony.TelephonyManager r0;
        java.lang.String $r1;

        r0 := @this: android.telephony.TelephonyManager;

        $r1 = virtualinvoke r0.<android.telephony.TelephonyManager: java.lang.String getSimOperatorNumeric()>();

        return $r1;
    }

    public java.lang.String getSimOperator(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        java.lang.String $r1;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<android.telephony.TelephonyManager: java.lang.String getSimOperatorNumeric(int)>(i0);

        return $r1;
    }

    public java.lang.String getSimOperatorName()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getPhoneId()>();

        $r1 = virtualinvoke r0.<android.telephony.TelephonyManager: java.lang.String getSimOperatorNameForPhone(int)>($i0);

        return $r1;
    }

    public java.lang.String getSimOperatorName(int)
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1;
        java.lang.String $r1;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        $i1 = staticinvoke <android.telephony.SubscriptionManager: int getPhoneId(int)>(i0);

        $r1 = virtualinvoke r0.<android.telephony.TelephonyManager: java.lang.String getSimOperatorNameForPhone(int)>($i1);

        return $r1;
    }

    public java.lang.String getSimOperatorNameForPhone(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        java.util.List $r1;
        java.lang.Object $r2;
        java.lang.String $r3;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        $r1 = staticinvoke <android.sysprop.TelephonyProperties: java.util.List icc_operator_alpha()>();

        $r2 = staticinvoke <android.telephony.TelephonyManager: java.lang.Object getTelephonyProperty(int,java.util.List,java.lang.Object)>(i0, $r1, "");

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    public java.lang.String getSimOperatorNumeric()
    {
        android.telephony.TelephonyManager r0;
        boolean $z0, $z1, $z2, $z3;
        int i0, i1, i2, i3, i4;
        java.lang.String $r1;

        r0 := @this: android.telephony.TelephonyManager;

        i0 = r0.<android.telephony.TelephonyManager: int mSubId>;

        i1 = i0;

        $z0 = staticinvoke <android.telephony.SubscriptionManager: boolean isUsableSubIdValue(int)>(i0);

        if $z0 != 0 goto label1;

        i2 = staticinvoke <android.telephony.SubscriptionManager: int getDefaultDataSubscriptionId()>();

        i1 = i2;

        $z1 = staticinvoke <android.telephony.SubscriptionManager: boolean isUsableSubIdValue(int)>(i2);

        if $z1 != 0 goto label1;

        i3 = staticinvoke <android.telephony.SubscriptionManager: int getDefaultSmsSubscriptionId()>();

        i1 = i3;

        $z2 = staticinvoke <android.telephony.SubscriptionManager: boolean isUsableSubIdValue(int)>(i3);

        if $z2 != 0 goto label1;

        i4 = staticinvoke <android.telephony.SubscriptionManager: int getDefaultVoiceSubscriptionId()>();

        i1 = i4;

        $z3 = staticinvoke <android.telephony.SubscriptionManager: boolean isUsableSubIdValue(int)>(i4);

        if $z3 != 0 goto label1;

        i1 = staticinvoke <android.telephony.SubscriptionManager: int getDefaultSubscriptionId()>();

     label1:
        $r1 = virtualinvoke r0.<android.telephony.TelephonyManager: java.lang.String getSimOperatorNumeric(int)>(i1);

        return $r1;
    }

    public java.lang.String getSimOperatorNumeric(int)
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1;
        java.lang.String $r1;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        $i1 = staticinvoke <android.telephony.SubscriptionManager: int getPhoneId(int)>(i0);

        $r1 = virtualinvoke r0.<android.telephony.TelephonyManager: java.lang.String getSimOperatorNumericForPhone(int)>($i1);

        return $r1;
    }

    public java.lang.String getSimOperatorNumericForPhone(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        java.util.List $r1;
        java.lang.Object $r2;
        java.lang.String $r3;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        $r1 = staticinvoke <android.sysprop.TelephonyProperties: java.util.List icc_operator_numeric()>();

        $r2 = staticinvoke <android.telephony.TelephonyManager: java.lang.Object getTelephonyProperty(int,java.util.List,java.lang.Object)>(i0, $r1, "");

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    public java.lang.String getSimSerialNumber()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $r1 = virtualinvoke r0.<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber(int)>($i0);

        return $r1;
    }

    public java.lang.String getSimSerialNumber(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        android.content.Context $r1, $r3;
        java.lang.String $r2, $r4, r8;
        java.lang.NullPointerException $r5;
        android.os.RemoteException $r6;
        com.android.internal.telephony.IPhoneSubInfo r7;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r7 = staticinvoke <android.telephony.TelephonyManager: com.android.internal.telephony.IPhoneSubInfo getSubscriberInfoService()>();

     label2:
        if r7 != null goto label3;

        return null;

     label3:
        $r1 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        $r3 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getAttributionTag()>();

        r8 = interfaceinvoke r7.<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getIccSerialNumberForSubscriber(int,java.lang.String,java.lang.String)>(i0, $r2, $r4);

     label4:
        return r8;

     label5:
        $r5 := @caughtexception;

        return null;

     label6:
        $r6 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.NullPointerException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public int getSimSpecificCarrierId()
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label5;

     label3:
        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        i0 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: int getSubscriptionSpecificCarrierId(int)>($i1);

     label4:
        return i0;

     label5:
        goto label7;

     label6:
        $r1 := @caughtexception;

     label7:
        return -1;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public java.lang.CharSequence getSimSpecificCarrierIdName()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;
        java.lang.String r3;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label5;

     label3:
        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        r3 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: java.lang.String getSubscriptionSpecificCarrierName(int)>($i0);

     label4:
        return r3;

     label5:
        goto label7;

     label6:
        $r1 := @caughtexception;

     label7:
        return null;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public int getSimState()
    {
        android.telephony.TelephonyManager r0;
        int i0, i1;

        r0 := @this: android.telephony.TelephonyManager;

        i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSimStateIncludingLoaded()>();

        i1 = i0;

        if i0 != 10 goto label1;

        i1 = 5;

     label1:
        return i1;
    }

    public int getSimState(int)
    {
        android.telephony.TelephonyManager r0;
        int i0, i1, i2;

        r0 := @this: android.telephony.TelephonyManager;

        i1 := @parameter0: int;

        i0 = staticinvoke <android.telephony.SubscriptionManager: int getSimStateForSlotIndex(int)>(i1);

        i2 = i0;

        if i0 != 10 goto label1;

        i2 = 5;

     label1:
        return i2;
    }

    public int getSlotIndex()
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1, i2;

        r0 := @this: android.telephony.TelephonyManager;

        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        i0 = staticinvoke <android.telephony.SubscriptionManager: int getSlotIndex(int)>($i1);

        i2 = i0;

        if i0 != -1 goto label1;

        i2 = 2147483647;

     label1:
        return i2;
    }

    public boolean getSmsReceiveCapable(boolean)
    {
        android.telephony.TelephonyManager r0;
        boolean z0, $z1;
        int $i0;

        r0 := @this: android.telephony.TelephonyManager;

        z0 := @parameter0: boolean;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getPhoneId()>();

        $z1 = virtualinvoke r0.<android.telephony.TelephonyManager: boolean getSmsReceiveCapableForPhone(int,boolean)>($i0, z0);

        return $z1;
    }

    public boolean getSmsReceiveCapableForPhone(int, boolean)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        boolean z0, $z1, $z2;
        java.util.List $r1;
        java.lang.Boolean $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $z1 = staticinvoke <android.telephony.SubscriptionManager: boolean isValidPhoneId(int)>(i0);

        if $z1 == 0 goto label1;

        $r1 = staticinvoke <android.sysprop.TelephonyProperties: java.util.List sms_receive()>();

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r3 = staticinvoke <android.telephony.TelephonyManager: java.lang.Object getTelephonyProperty(int,java.util.List,java.lang.Object)>(i0, $r1, $r2);

        $r4 = (java.lang.Boolean) $r3;

        $z2 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        return $z2;

     label1:
        return z0;
    }

    public boolean getSmsSendCapable(boolean)
    {
        android.telephony.TelephonyManager r0;
        boolean z0, $z1;
        int $i0;

        r0 := @this: android.telephony.TelephonyManager;

        z0 := @parameter0: boolean;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getPhoneId()>();

        $z1 = virtualinvoke r0.<android.telephony.TelephonyManager: boolean getSmsSendCapableForPhone(int,boolean)>($i0, z0);

        return $z1;
    }

    public boolean getSmsSendCapableForPhone(int, boolean)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        boolean z0, $z1, $z2;
        java.util.List $r1;
        java.lang.Boolean $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $z1 = staticinvoke <android.telephony.SubscriptionManager: boolean isValidPhoneId(int)>(i0);

        if $z1 == 0 goto label1;

        $r1 = staticinvoke <android.sysprop.TelephonyProperties: java.util.List sms_send()>();

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r3 = staticinvoke <android.telephony.TelephonyManager: java.lang.Object getTelephonyProperty(int,java.util.List,java.lang.Object)>(i0, $r1, $r2);

        $r4 = (java.lang.Boolean) $r3;

        $z2 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        return $z2;

     label1:
        return z0;
    }

    public int getSubIdForPhoneAccount(android.telecom.PhoneAccount)
    {
        android.telephony.TelephonyManager r0;
        com.android.internal.telephony.ITelephony r1;
        android.os.RemoteException $r2;
        android.telecom.PhoneAccount r3;
        int i1;

        r0 := @this: android.telephony.TelephonyManager;

        r3 := @parameter0: android.telecom.PhoneAccount;

     label1:
        r1 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        i1 = -1;

        if r1 == null goto label4;

     label3:
        i1 = interfaceinvoke r1.<com.android.internal.telephony.ITelephony: int getSubIdForPhoneAccount(android.telecom.PhoneAccount)>(r3);

     label4:
        goto label6;

     label5:
        $r2 := @caughtexception;

        i1 = -1;

     label6:
        return i1;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public java.lang.String getSubscriberId()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $r1 = virtualinvoke r0.<android.telephony.TelephonyManager: java.lang.String getSubscriberId(int)>($i0);

        return $r1;
    }

    public java.lang.String getSubscriberId(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        android.content.Context $r1, $r3;
        java.lang.String $r2, $r4, r8;
        java.lang.NullPointerException $r5;
        android.os.RemoteException $r6;
        com.android.internal.telephony.IPhoneSubInfo r7;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r7 = staticinvoke <android.telephony.TelephonyManager: com.android.internal.telephony.IPhoneSubInfo getSubscriberInfoService()>();

     label2:
        if r7 != null goto label3;

        return null;

     label3:
        $r1 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        $r3 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getAttributionTag()>();

        r8 = interfaceinvoke r7.<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getSubscriberIdForSubscriber(int,java.lang.String,java.lang.String)>(i0, $r2, $r4);

     label4:
        return r8;

     label5:
        $r5 := @caughtexception;

        return null;

     label6:
        $r6 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.NullPointerException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public int getSubscriptionId()
    {
        android.telephony.TelephonyManager r0;
        int $i0;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        return $i0;
    }

    public int getSubscriptionId(android.telecom.PhoneAccountHandle)
    {
        android.telephony.TelephonyManager r0;
        com.android.internal.telephony.ITelephony r1;
        android.content.Context $r2, $r4;
        java.lang.String $r3, $r5;
        android.os.RemoteException $r6;
        android.telecom.PhoneAccountHandle r8;
        int i2;

        r0 := @this: android.telephony.TelephonyManager;

        r8 := @parameter0: android.telecom.PhoneAccountHandle;

     label1:
        r1 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        i2 = -1;

        if r1 == null goto label4;

     label3:
        $r2 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.String getOpPackageName()>();

        $r4 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.String getAttributionTag()>();

        i2 = interfaceinvoke r1.<com.android.internal.telephony.ITelephony: int getSubIdForPhoneAccountHandle(android.telecom.PhoneAccountHandle,java.lang.String,java.lang.String)>(r8, $r3, $r5);

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "getSubscriptionId RemoteException", $r6);

        virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        i2 = -1;

     label6:
        return i2;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public int getSupportedModemCount()
    {
        android.telephony.TelephonyManager r0;
        java.util.Optional $r1;
        int $i0, $i1;
        java.lang.Integer $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: android.telephony.TelephonyManager;

        $r1 = staticinvoke <android.sysprop.TelephonyProperties: java.util.Optional max_active_modems()>();

        $i0 = virtualinvoke r0.<android.telephony.TelephonyManager: int getActiveModemCount()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3 = virtualinvoke $r1.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>($r2);

        $r4 = (java.lang.Integer) $r3;

        $i1 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        return $i1;
    }

    public long getSupportedRadioAccessFamily()
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1;
        java.lang.String $r1;
        long $l2;
        android.os.RemoteException $r2;
        java.lang.NullPointerException $r3;
        com.android.internal.telephony.ITelephony r4;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r4 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r4 == null goto label5;

     label3:
        $i1 = virtualinvoke r0.<android.telephony.TelephonyManager: int getSlotIndex()>();

        $r1 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOpPackageName()>();

        i0 = interfaceinvoke r4.<com.android.internal.telephony.ITelephony: int getRadioAccessFamily(int,java.lang.String)>($i1, $r1);

     label4:
        $l2 = (long) i0;

        return $l2;

     label5:
        return 0L;

     label6:
        $r3 := @caughtexception;

        return 0L;

     label7:
        $r2 := @caughtexception;

        return 0L;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public java.util.List getTelephonyHistograms()
    {
        android.telephony.TelephonyManager r0;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;
        java.util.List r3;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label5;

     label3:
        r3 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: java.util.List getTelephonyHistograms()>();

     label4:
        return r3;

     label5:
        goto label7;

     label6:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#getTelephonyHistograms", $r1);

     label7:
        return null;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public java.lang.String getTypeAllocationCode()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = virtualinvoke r0.<android.telephony.TelephonyManager: int getSlotIndex()>();

        $r1 = virtualinvoke r0.<android.telephony.TelephonyManager: java.lang.String getTypeAllocationCode(int)>($i0);

        return $r1;
    }

    public java.lang.String getTypeAllocationCode(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        java.lang.NullPointerException $r1;
        android.os.RemoteException $r2;
        com.android.internal.telephony.ITelephony r3;
        java.lang.String r4;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

        if r3 != null goto label1;

        return null;

     label1:
        r4 = interfaceinvoke r3.<com.android.internal.telephony.ITelephony: java.lang.String getTypeAllocationCodeForSlot(int)>(i0);

     label2:
        return r4;

     label3:
        $r1 := @caughtexception;

        return null;

     label4:
        $r2 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public java.util.List getUiccCardsInfo()
    {
        android.telephony.TelephonyManager r0;
        android.content.Context $r2;
        java.lang.String $r3, $r9;
        java.util.ArrayList $r4, $r10;
        android.os.RemoteException $r5;
        java.lang.StringBuilder $r6;
        com.android.internal.telephony.ITelephony r11;
        java.util.List r12;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r11 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r11 != null goto label4;

     label3:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("TelephonyManager", "Error in getUiccCardsInfo: unable to connect to Telephony service.");

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        return $r4;

     label4:
        $r2 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.String getOpPackageName()>();

        r12 = interfaceinvoke r11.<com.android.internal.telephony.ITelephony: java.util.List getUiccCardsInfo(java.lang.String)>($r3);

     label5:
        return r12;

     label6:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error in getUiccCardsInfo: ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("TelephonyManager", $r9);

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        return $r10;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    public android.telephony.UiccSlotInfo[] getUiccSlotsInfo()
    {
        android.telephony.TelephonyManager r0;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;
        android.telephony.UiccSlotInfo[] r3;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 != null goto label3;

        return null;

     label3:
        r3 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: android.telephony.UiccSlotInfo[] getUiccSlotsInfo()>();

     label4:
        return r3;

     label5:
        $r1 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public java.lang.String getVisualVoicemailPackageName()
    {
        android.telephony.TelephonyManager r0;
        android.content.Context $r1;
        java.lang.String $r2, $r3, r7;
        int $i0;
        java.lang.NullPointerException $r4;
        android.os.RemoteException $r5;
        com.android.internal.telephony.ITelephony r6;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r6 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r6 == null goto label5;

     label3:
        $r1 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        $r3 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getAttributionTag()>();

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        r7 = interfaceinvoke r6.<com.android.internal.telephony.ITelephony: java.lang.String getVisualVoicemailPackageName(java.lang.String,java.lang.String,int)>($r2, $r3, $i0);

     label4:
        return r7;

     label5:
        goto label8;

     label6:
        $r4 := @caughtexception;

        goto label8;

     label7:
        $r5 := @caughtexception;

     label8:
        return null;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public android.os.Bundle getVisualVoicemailSettings()
    {
        android.telephony.TelephonyManager r0;
        android.content.Context $r1;
        java.lang.String $r2;
        int $i0;
        java.lang.NullPointerException $r3;
        android.os.RemoteException $r4;
        com.android.internal.telephony.ITelephony r5;
        android.os.Bundle r6;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r5 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r5 == null goto label5;

     label3:
        $r1 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        $i0 = r0.<android.telephony.TelephonyManager: int mSubId>;

        r6 = interfaceinvoke r5.<com.android.internal.telephony.ITelephony: android.os.Bundle getVisualVoicemailSettings(java.lang.String,int)>($r2, $i0);

     label4:
        return r6;

     label5:
        goto label8;

     label6:
        $r3 := @caughtexception;

        goto label8;

     label7:
        $r4 := @caughtexception;

     label8:
        return null;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public android.telephony.VisualVoicemailSmsFilterSettings getVisualVoicemailSmsFilterSettings(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        android.content.Context $r1;
        java.lang.String $r2;
        java.lang.NullPointerException $r3;
        android.os.RemoteException $r4;
        com.android.internal.telephony.ITelephony r5;
        android.telephony.VisualVoicemailSmsFilterSettings r6;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r5 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r5 == null goto label5;

     label3:
        $r1 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        r6 = interfaceinvoke r5.<com.android.internal.telephony.ITelephony: android.telephony.VisualVoicemailSmsFilterSettings getVisualVoicemailSmsFilterSettings(java.lang.String,int)>($r2, i0);

     label4:
        return r6;

     label5:
        goto label8;

     label6:
        $r3 := @caughtexception;

        goto label8;

     label7:
        $r4 := @caughtexception;

     label8:
        return null;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public int getVoiceActivationState()
    {
        android.telephony.TelephonyManager r0;
        int $i0, $i1;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $i1 = virtualinvoke r0.<android.telephony.TelephonyManager: int getVoiceActivationState(int)>($i0);

        return $i1;
    }

    public int getVoiceActivationState(int)
    {
        android.telephony.TelephonyManager r0;
        java.lang.String $r1;
        android.os.RemoteException $r2;
        java.lang.NullPointerException $r3;
        int i0, i1;
        com.android.internal.telephony.ITelephony r4;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r4 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r4 == null goto label5;

     label3:
        $r1 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOpPackageName()>();

        i1 = interfaceinvoke r4.<com.android.internal.telephony.ITelephony: int getVoiceActivationState(int,java.lang.String)>(i0, $r1);

     label4:
        return i1;

     label5:
        goto label8;

     label6:
        $r3 := @caughtexception;

        goto label8;

     label7:
        $r2 := @caughtexception;

     label8:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public java.lang.String getVoiceMailAlphaTag()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $r1 = virtualinvoke r0.<android.telephony.TelephonyManager: java.lang.String getVoiceMailAlphaTag(int)>($i0);

        return $r1;
    }

    public java.lang.String getVoiceMailAlphaTag(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        java.lang.String $r1, $r2, r6;
        android.os.RemoteException $r3;
        java.lang.NullPointerException $r4;
        com.android.internal.telephony.IPhoneSubInfo r5;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r5 = staticinvoke <android.telephony.TelephonyManager: com.android.internal.telephony.IPhoneSubInfo getSubscriberInfoService()>();

     label2:
        if r5 != null goto label3;

        return null;

     label3:
        $r1 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOpPackageName()>();

        $r2 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getAttributionTag()>();

        r6 = interfaceinvoke r5.<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getVoiceMailAlphaTagForSubscriber(int,java.lang.String,java.lang.String)>(i0, $r1, $r2);

     label4:
        return r6;

     label5:
        $r4 := @caughtexception;

        return null;

     label6:
        $r3 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.NullPointerException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public java.lang.String getVoiceMailNumber()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $r1 = virtualinvoke r0.<android.telephony.TelephonyManager: java.lang.String getVoiceMailNumber(int)>($i0);

        return $r1;
    }

    public java.lang.String getVoiceMailNumber(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        java.lang.String $r1, $r2, r6;
        java.lang.NullPointerException $r3;
        android.os.RemoteException $r4;
        com.android.internal.telephony.IPhoneSubInfo r5;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r5 = staticinvoke <android.telephony.TelephonyManager: com.android.internal.telephony.IPhoneSubInfo getSubscriberInfoService()>();

     label2:
        if r5 != null goto label3;

        return null;

     label3:
        $r1 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOpPackageName()>();

        $r2 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getAttributionTag()>();

        r6 = interfaceinvoke r5.<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getVoiceMailNumberForSubscriber(int,java.lang.String,java.lang.String)>(i0, $r1, $r2);

     label4:
        return r6;

     label5:
        $r3 := @caughtexception;

        return null;

     label6:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.NullPointerException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public int getVoiceMessageCount()
    {
        android.telephony.TelephonyManager r0;
        int $i0, $i1;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $i1 = virtualinvoke r0.<android.telephony.TelephonyManager: int getVoiceMessageCount(int)>($i0);

        return $i1;
    }

    public int getVoiceMessageCount(int)
    {
        android.telephony.TelephonyManager r0;
        java.lang.String $r1, $r2;
        java.lang.NullPointerException $r3;
        android.os.RemoteException $r4;
        int i0, i1;
        com.android.internal.telephony.ITelephony r5;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r5 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r5 != null goto label3;

        return 0;

     label3:
        $r1 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOpPackageName()>();

        $r2 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getAttributionTag()>();

        i1 = interfaceinvoke r5.<com.android.internal.telephony.ITelephony: int getVoiceMessageCountForSubscriber(int,java.lang.String,java.lang.String)>(i0, $r1, $r2);

     label4:
        return i1;

     label5:
        $r3 := @caughtexception;

        return 0;

     label6:
        $r4 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.NullPointerException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public int getVoiceNetworkType()
    {
        android.telephony.TelephonyManager r0;
        int $i0, $i1;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $i1 = virtualinvoke r0.<android.telephony.TelephonyManager: int getVoiceNetworkType(int)>($i0);

        return $i1;
    }

    public int getVoiceNetworkType(int)
    {
        android.telephony.TelephonyManager r0;
        java.lang.String $r1, $r2;
        android.os.RemoteException $r3;
        java.lang.NullPointerException $r4;
        int i0, i1;
        com.android.internal.telephony.ITelephony r5;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r5 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r5 == null goto label5;

     label3:
        $r1 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOpPackageName()>();

        $r2 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getAttributionTag()>();

        i1 = interfaceinvoke r5.<com.android.internal.telephony.ITelephony: int getVoiceNetworkTypeForSubscriber(int,java.lang.String,java.lang.String)>(i0, $r1, $r2);

     label4:
        return i1;

     label5:
        return 0;

     label6:
        $r4 := @caughtexception;

        return 0;

     label7:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public android.net.Uri getVoicemailRingtoneUri(android.telecom.PhoneAccountHandle)
    {
        android.telephony.TelephonyManager r0;
        com.android.internal.telephony.ITelephony r1;
        android.os.RemoteException $r2;
        android.telecom.PhoneAccountHandle r3;
        android.net.Uri r4;

        r0 := @this: android.telephony.TelephonyManager;

        r3 := @parameter0: android.telecom.PhoneAccountHandle;

     label1:
        r1 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r1 == null goto label5;

     label3:
        r4 = interfaceinvoke r1.<com.android.internal.telephony.ITelephony: android.net.Uri getVoicemailRingtoneUri(android.telecom.PhoneAccountHandle)>(r3);

     label4:
        return r4;

     label5:
        goto label7;

     label6:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#getVoicemailRingtoneUri", $r2);

     label7:
        return null;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public boolean handlePinMmi(java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        com.android.internal.telephony.ITelephony r1;
        boolean z0;
        android.os.RemoteException $r2;
        java.lang.String r3;

        r0 := @this: android.telephony.TelephonyManager;

        r3 := @parameter0: java.lang.String;

     label1:
        r1 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r1 == null goto label5;

     label3:
        z0 = interfaceinvoke r1.<com.android.internal.telephony.ITelephony: boolean handlePinMmi(java.lang.String)>(r3);

     label4:
        return z0;

     label5:
        goto label7;

     label6:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#handlePinMmi", $r2);

     label7:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public boolean handlePinMmiForSubscriber(int, java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        com.android.internal.telephony.ITelephony r1;
        boolean z0;
        android.os.RemoteException $r2;
        java.lang.String r3;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        r3 := @parameter1: java.lang.String;

     label1:
        r1 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r1 == null goto label5;

     label3:
        z0 = interfaceinvoke r1.<com.android.internal.telephony.ITelephony: boolean handlePinMmiForSubscriber(int,java.lang.String)>(i0, r3);

     label4:
        return z0;

     label5:
        goto label7;

     label6:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#handlePinMmi", $r2);

     label7:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public boolean hasCarrierPrivileges()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        boolean $z0;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $z0 = virtualinvoke r0.<android.telephony.TelephonyManager: boolean hasCarrierPrivileges(int)>($i0);

        return $z0;
    }

    public boolean hasCarrierPrivileges(int)
    {
        android.telephony.TelephonyManager r0;
        java.lang.NullPointerException $r1;
        android.os.RemoteException $r2;
        int i2, i3;
        boolean z0;
        com.android.internal.telephony.ITelephony r3;

        r0 := @this: android.telephony.TelephonyManager;

        i2 := @parameter0: int;

        z0 = 0;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 == null goto label6;

     label3:
        i3 = interfaceinvoke r3.<com.android.internal.telephony.ITelephony: int getCarrierPrivilegeStatus(int)>(i2);

     label4:
        if i3 != 1 goto label5;

        z0 = 1;

     label5:
        return z0;

     label6:
        goto label9;

     label7:
        $r1 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "hasCarrierPrivileges NPE", $r1);

        goto label9;

     label8:
        $r2 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "hasCarrierPrivileges RemoteException", $r2);

     label9:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label8;
        catch java.lang.NullPointerException from label1 to label2 with label7;
        catch android.os.RemoteException from label3 to label4 with label8;
        catch java.lang.NullPointerException from label3 to label4 with label7;
    }

    public boolean hasIccCard()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        boolean $z0;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = virtualinvoke r0.<android.telephony.TelephonyManager: int getSlotIndex()>();

        $z0 = virtualinvoke r0.<android.telephony.TelephonyManager: boolean hasIccCard(int)>($i0);

        return $z0;
    }

    public boolean hasIccCard(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        boolean z0;
        android.os.RemoteException $r1;
        java.lang.NullPointerException $r2;
        com.android.internal.telephony.ITelephony r3;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 != null goto label3;

        return 0;

     label3:
        z0 = interfaceinvoke r3.<com.android.internal.telephony.ITelephony: boolean hasIccCardUsingSlotIndex(int)>(i0);

     label4:
        return z0;

     label5:
        $r2 := @caughtexception;

        return 0;

     label6:
        $r1 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.NullPointerException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public boolean iccCloseLogicalChannel(int)
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1;
        boolean $z0;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $z0 = virtualinvoke r0.<android.telephony.TelephonyManager: boolean iccCloseLogicalChannel(int,int)>($i1, i0);

        return $z0;
    }

    public boolean iccCloseLogicalChannel(int, int)
    {
        android.telephony.TelephonyManager r0;
        int i0, i1;
        boolean z0;
        java.lang.NullPointerException $r1;
        android.os.RemoteException $r2;
        com.android.internal.telephony.ITelephony r3;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 == null goto label5;

     label3:
        z0 = interfaceinvoke r3.<com.android.internal.telephony.ITelephony: boolean iccCloseLogicalChannel(int,int)>(i0, i1);

     label4:
        return z0;

     label5:
        goto label8;

     label6:
        $r1 := @caughtexception;

        goto label8;

     label7:
        $r2 := @caughtexception;

     label8:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public boolean iccCloseLogicalChannelBySlot(int, int)
    {
        android.telephony.TelephonyManager r0;
        int i0, i1;
        boolean z0;
        java.lang.NullPointerException $r1;
        android.os.RemoteException $r2;
        com.android.internal.telephony.ITelephony r3;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 == null goto label5;

     label3:
        z0 = interfaceinvoke r3.<com.android.internal.telephony.ITelephony: boolean iccCloseLogicalChannelBySlot(int,int)>(i0, i1);

     label4:
        return z0;

     label5:
        goto label8;

     label6:
        $r1 := @caughtexception;

        goto label8;

     label7:
        $r2 := @caughtexception;

     label8:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public byte[] iccExchangeSimIO(int, int, int, int, int, int, java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        int i0, i1, i2, i3, i4, i5;
        com.android.internal.telephony.ITelephony r1;
        android.os.RemoteException $r2;
        java.lang.NullPointerException $r3;
        java.lang.String r4;
        byte[] r5;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        r4 := @parameter6: java.lang.String;

     label1:
        r1 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r1 == null goto label5;

     label3:
        r5 = interfaceinvoke r1.<com.android.internal.telephony.ITelephony: byte[] iccExchangeSimIO(int,int,int,int,int,int,java.lang.String)>(i0, i1, i2, i3, i4, i5, r4);

     label4:
        return r5;

     label5:
        goto label8;

     label6:
        $r3 := @caughtexception;

        goto label8;

     label7:
        $r2 := @caughtexception;

     label8:
        return null;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public byte[] iccExchangeSimIO(int, int, int, int, int, java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        int i0, i1, i2, i3, i4, $i5;
        java.lang.String r1;
        byte[] $r2;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        r1 := @parameter5: java.lang.String;

        $i5 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $r2 = virtualinvoke r0.<android.telephony.TelephonyManager: byte[] iccExchangeSimIO(int,int,int,int,int,int,java.lang.String)>($i5, i0, i1, i2, i3, i4, r1);

        return $r2;
    }

    public android.telephony.IccOpenLogicalChannelResponse iccOpenLogicalChannel(int, java.lang.String, int)
    {
        android.telephony.TelephonyManager r0;
        int i0, i1;
        com.android.internal.telephony.ITelephony r1;
        java.lang.String $r2, r5;
        java.lang.NullPointerException $r3;
        android.os.RemoteException $r4;
        android.telephony.IccOpenLogicalChannelResponse r6;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        r5 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

     label1:
        r1 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r1 == null goto label5;

     label3:
        $r2 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOpPackageName()>();

        r6 = interfaceinvoke r1.<com.android.internal.telephony.ITelephony: android.telephony.IccOpenLogicalChannelResponse iccOpenLogicalChannel(int,java.lang.String,java.lang.String,int)>(i0, $r2, r5, i1);

     label4:
        return r6;

     label5:
        goto label8;

     label6:
        $r3 := @caughtexception;

        goto label8;

     label7:
        $r4 := @caughtexception;

     label8:
        return null;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public android.telephony.IccOpenLogicalChannelResponse iccOpenLogicalChannel(java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        java.lang.String r1;
        int $i0;
        android.telephony.IccOpenLogicalChannelResponse $r2;

        r0 := @this: android.telephony.TelephonyManager;

        r1 := @parameter0: java.lang.String;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $r2 = virtualinvoke r0.<android.telephony.TelephonyManager: android.telephony.IccOpenLogicalChannelResponse iccOpenLogicalChannel(int,java.lang.String,int)>($i0, r1, -1);

        return $r2;
    }

    public android.telephony.IccOpenLogicalChannelResponse iccOpenLogicalChannel(java.lang.String, int)
    {
        android.telephony.TelephonyManager r0;
        java.lang.String r1;
        int i0, $i1;
        android.telephony.IccOpenLogicalChannelResponse $r2;

        r0 := @this: android.telephony.TelephonyManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $r2 = virtualinvoke r0.<android.telephony.TelephonyManager: android.telephony.IccOpenLogicalChannelResponse iccOpenLogicalChannel(int,java.lang.String,int)>($i1, r1, i0);

        return $r2;
    }

    public android.telephony.IccOpenLogicalChannelResponse iccOpenLogicalChannelBySlot(int, java.lang.String, int)
    {
        android.telephony.TelephonyManager r0;
        int i0, i1;
        com.android.internal.telephony.ITelephony r1;
        java.lang.String $r2, r5;
        android.os.RemoteException $r3;
        java.lang.NullPointerException $r4;
        android.telephony.IccOpenLogicalChannelResponse r6;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        r5 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

     label1:
        r1 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r1 == null goto label5;

     label3:
        $r2 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOpPackageName()>();

        r6 = interfaceinvoke r1.<com.android.internal.telephony.ITelephony: android.telephony.IccOpenLogicalChannelResponse iccOpenLogicalChannelBySlot(int,java.lang.String,java.lang.String,int)>(i0, $r2, r5, i1);

     label4:
        return r6;

     label5:
        goto label8;

     label6:
        $r4 := @caughtexception;

        goto label8;

     label7:
        $r3 := @caughtexception;

     label8:
        return null;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public java.lang.String iccTransmitApduBasicChannel(int, int, int, int, int, int, java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        int i0, i1, i2, i3, i4, i5;
        com.android.internal.telephony.ITelephony r1;
        java.lang.String $r2, r5, r6;
        android.os.RemoteException $r3;
        java.lang.NullPointerException $r4;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        r5 := @parameter6: java.lang.String;

     label1:
        r1 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r1 == null goto label5;

     label3:
        $r2 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOpPackageName()>();

        r6 = interfaceinvoke r1.<com.android.internal.telephony.ITelephony: java.lang.String iccTransmitApduBasicChannel(int,java.lang.String,int,int,int,int,int,java.lang.String)>(i0, $r2, i1, i2, i3, i4, i5, r5);

     label4:
        return r6;

     label5:
        goto label8;

     label6:
        $r4 := @caughtexception;

        goto label8;

     label7:
        $r3 := @caughtexception;

     label8:
        return "";

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public java.lang.String iccTransmitApduBasicChannel(int, int, int, int, int, java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        int i0, i1, i2, i3, i4, $i5;
        java.lang.String r1, $r2;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        r1 := @parameter5: java.lang.String;

        $i5 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $r2 = virtualinvoke r0.<android.telephony.TelephonyManager: java.lang.String iccTransmitApduBasicChannel(int,int,int,int,int,int,java.lang.String)>($i5, i0, i1, i2, i3, i4, r1);

        return $r2;
    }

    public java.lang.String iccTransmitApduBasicChannelBySlot(int, int, int, int, int, int, java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        int i0, i1, i2, i3, i4, i5;
        com.android.internal.telephony.ITelephony r1;
        java.lang.String $r2, r5, r6;
        android.os.RemoteException $r3;
        java.lang.NullPointerException $r4;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        r5 := @parameter6: java.lang.String;

     label1:
        r1 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r1 == null goto label5;

     label3:
        $r2 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOpPackageName()>();

        r6 = interfaceinvoke r1.<com.android.internal.telephony.ITelephony: java.lang.String iccTransmitApduBasicChannelBySlot(int,java.lang.String,int,int,int,int,int,java.lang.String)>(i0, $r2, i1, i2, i3, i4, i5, r5);

     label4:
        return r6;

     label5:
        goto label8;

     label6:
        $r4 := @caughtexception;

        goto label8;

     label7:
        $r3 := @caughtexception;

     label8:
        return null;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public java.lang.String iccTransmitApduLogicalChannel(int, int, int, int, int, int, int, java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        int i0, i1, i2, i3, i4, i5, i6;
        com.android.internal.telephony.ITelephony r1;
        android.os.RemoteException $r2;
        java.lang.NullPointerException $r3;
        java.lang.String r4, r5;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        i6 := @parameter6: int;

        r4 := @parameter7: java.lang.String;

     label1:
        r1 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r1 == null goto label5;

     label3:
        r5 = interfaceinvoke r1.<com.android.internal.telephony.ITelephony: java.lang.String iccTransmitApduLogicalChannel(int,int,int,int,int,int,int,java.lang.String)>(i0, i1, i2, i3, i4, i5, i6, r4);

     label4:
        return r5;

     label5:
        goto label8;

     label6:
        $r3 := @caughtexception;

        goto label8;

     label7:
        $r2 := @caughtexception;

     label8:
        return "";

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public java.lang.String iccTransmitApduLogicalChannel(int, int, int, int, int, int, java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        int i0, i1, i2, i3, i4, i5, $i6;
        java.lang.String r1, $r2;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        r1 := @parameter6: java.lang.String;

        $i6 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $r2 = virtualinvoke r0.<android.telephony.TelephonyManager: java.lang.String iccTransmitApduLogicalChannel(int,int,int,int,int,int,int,java.lang.String)>($i6, i0, i1, i2, i3, i4, i5, r1);

        return $r2;
    }

    public java.lang.String iccTransmitApduLogicalChannelBySlot(int, int, int, int, int, int, int, java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        int i0, i1, i2, i3, i4, i5, i6;
        com.android.internal.telephony.ITelephony r1;
        java.lang.NullPointerException $r2;
        android.os.RemoteException $r3;
        java.lang.String r4, r5;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        i6 := @parameter6: int;

        r4 := @parameter7: java.lang.String;

     label1:
        r1 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r1 == null goto label5;

     label3:
        r5 = interfaceinvoke r1.<com.android.internal.telephony.ITelephony: java.lang.String iccTransmitApduLogicalChannelBySlot(int,int,int,int,int,int,int,java.lang.String)>(i0, i1, i2, i3, i4, i5, i6, r4);

     label4:
        return r5;

     label5:
        goto label8;

     label6:
        $r2 := @caughtexception;

        goto label8;

     label7:
        $r3 := @caughtexception;

     label8:
        return null;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public int invokeOemRilRequestRaw(byte[], byte[])
    {
        android.telephony.TelephonyManager r0;
        byte[] r1, r5;
        com.android.internal.telephony.ITelephony r2;
        int i0;
        java.lang.NullPointerException $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.telephony.TelephonyManager;

        r5 := @parameter0: byte[];

        r1 := @parameter1: byte[];

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label5;

     label3:
        i0 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: int invokeOemRilRequestRaw(byte[],byte[])>(r5, r1);

     label4:
        return i0;

     label5:
        goto label8;

     label6:
        $r3 := @caughtexception;

        goto label8;

     label7:
        $r4 := @caughtexception;

     label8:
        return -1;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public boolean isAnyRadioPoweredOn()
    {
        android.telephony.TelephonyManager r0;
        boolean z0;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r3;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 == null goto label5;

     label3:
        z0 = interfaceinvoke r3.<com.android.internal.telephony.ITelephony: boolean needMobileRadioShutdown()>();

     label4:
        return z0;

     label5:
        goto label7;

     label6:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#isAnyRadioPoweredOn", $r1);

        virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

     label7:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public boolean isApnMetered(int)
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1;
        boolean z0, $z1;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r3;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 == null goto label5;

     label3:
        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        z0 = interfaceinvoke r3.<com.android.internal.telephony.ITelephony: boolean isApnMetered(int,int)>(i0, $i1);

     label4:
        return z0;

     label5:
        goto label7;

     label6:
        $r1 := @caughtexception;

        $z1 = specialinvoke r0.<android.telephony.TelephonyManager: boolean isSystemProcess()>();

        if $z1 != 0 goto label7;

        virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

     label7:
        return 1;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public boolean isApplicationOnUicc(int)
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1;
        boolean z0;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label5;

     label3:
        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        z0 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: boolean isApplicationOnUicc(int,int)>($i1, i0);

     label4:
        return z0;

     label5:
        goto label7;

     label6:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#isApplicationOnUicc", $r1);

     label7:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public boolean isConcurrentVoiceAndDataSupported()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        android.os.RemoteException $r1;
        boolean z0;
        com.android.internal.telephony.ITelephony r2;

        r0 := @this: android.telephony.TelephonyManager;

        z0 = 0;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 != null goto label4;

     label3:
        goto label6;

     label4:
        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        z0 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: boolean isConcurrentVoiceAndDataAllowed(int)>($i0);

     label5:
        goto label3;

     label6:
        return z0;

     label7:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#isConcurrentVoiceAndDataAllowed", $r1);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch android.os.RemoteException from label4 to label5 with label7;
    }

    public boolean isDataAllowedInVoiceCall()
    {
        android.telephony.TelephonyManager r0;
        boolean z0, $z1;
        int $i0;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r3;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 == null goto label5;

     label3:
        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        z0 = interfaceinvoke r3.<com.android.internal.telephony.ITelephony: boolean isDataAllowedInVoiceCall(int)>($i0);

     label4:
        return z0;

     label5:
        goto label7;

     label6:
        $r1 := @caughtexception;

        $z1 = specialinvoke r0.<android.telephony.TelephonyManager: boolean isSystemProcess()>();

        if $z1 != 0 goto label7;

        virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

     label7:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public boolean isDataCapable()
    {
        android.telephony.TelephonyManager r0;
        android.content.Context r1;
        android.content.res.Resources $r2;
        boolean $z0;

        r0 := @this: android.telephony.TelephonyManager;

        r1 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        if r1 != null goto label1;

        return 1;

     label1:
        $r2 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r2.<android.content.res.Resources: boolean getBoolean(int)>(17891487);

        return $z0;
    }

    public boolean isDataConnectionAllowed()
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1;
        android.os.RemoteException $r1;
        boolean z1;
        com.android.internal.telephony.ITelephony r2;

        r0 := @this: android.telephony.TelephonyManager;

        z1 = 0;

     label1:
        $i1 = staticinvoke <android.telephony.SubscriptionManager: int getDefaultDataSubscriptionId()>();

        i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId(int)>($i1);

        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label4;

     label3:
        z1 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: boolean isDataEnabled(int)>(i0);

     label4:
        goto label6;

     label5:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error isDataConnectionAllowed", $r1);

        z1 = 0;

     label6:
        return z1;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public boolean isDataConnectivityPossible()
    {
        android.telephony.TelephonyManager r0;
        boolean z0;
        int $i0, $i1;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label5;

     label3:
        $i0 = staticinvoke <android.telephony.SubscriptionManager: int getActiveDataSubscriptionId()>();

        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId(int)>($i0);

        z0 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: boolean isDataConnectivityPossible(int)>($i1);

     label4:
        return z0;

     label5:
        goto label7;

     label6:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#isDataAllowed", $r1);

     label7:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public boolean isDataEnabled()
    {
        android.telephony.TelephonyManager r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = staticinvoke <android.telephony.SubscriptionManager: int getDefaultDataSubscriptionId()>();

        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId(int)>($i0);

        $z0 = virtualinvoke r0.<android.telephony.TelephonyManager: boolean getDataEnabled(int)>($i1);

        return $z0;
    }

    public boolean isDataEnabledForApn(int)
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1;
        com.android.internal.telephony.ITelephony r1;
        boolean z0, $z1;
        android.os.RemoteException $r2;
        android.content.Context r4;
        java.lang.String r5;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        r4 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        if r4 == null goto label1;

        r5 = virtualinvoke r4.<android.content.Context: java.lang.String getOpPackageName()>();

        goto label2;

     label1:
        r5 = "<unknown>";

     label2:
        r1 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label3:
        if r1 == null goto label6;

     label4:
        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        z0 = interfaceinvoke r1.<com.android.internal.telephony.ITelephony: boolean isDataEnabledForApn(int,int,java.lang.String)>(i0, $i1, r5);

     label5:
        return z0;

     label6:
        goto label8;

     label7:
        $r2 := @caughtexception;

        $z1 = specialinvoke r0.<android.telephony.TelephonyManager: boolean isSystemProcess()>();

        if $z1 != 0 goto label8;

        virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

     label8:
        return 0;

        catch android.os.RemoteException from label2 to label3 with label7;
        catch android.os.RemoteException from label4 to label5 with label7;
    }

    public boolean isDataRoamingEnabled()
    {
        android.telephony.TelephonyManager r0;
        int $i0, $i1;
        android.os.RemoteException $r1;
        boolean z1;
        com.android.internal.telephony.ITelephony r2;

        r0 := @this: android.telephony.TelephonyManager;

        z1 = 0;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label4;

     label3:
        $i0 = staticinvoke <android.telephony.SubscriptionManager: int getDefaultDataSubscriptionId()>();

        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId(int)>($i0);

        z1 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: boolean isDataRoamingEnabled(int)>($i1);

     label4:
        goto label6;

     label5:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#isDataRoamingEnabled", $r1);

        z1 = 0;

     label6:
        return z1;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public boolean isEmergencyAssistanceEnabled()
    {
        android.telephony.TelephonyManager r0;
        android.content.Context $r1;

        r0 := @this: android.telephony.TelephonyManager;

        $r1 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.READ_PRIVILEGED_PHONE_STATE", "isEmergencyAssistanceEnabled");

        return 1;
    }

    public boolean isEmergencyNumber(java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        com.android.internal.telephony.ITelephony r1;
        boolean $z0;
        android.os.RemoteException $r2;
        java.lang.String r4;
        java.lang.IllegalStateException r5;

        r0 := @this: android.telephony.TelephonyManager;

        r4 := @parameter0: java.lang.String;

     label1:
        r1 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r1 == null goto label4;

     label3:
        $z0 = interfaceinvoke r1.<com.android.internal.telephony.ITelephony: boolean isEmergencyNumber(java.lang.String,boolean)>(r4, 1);

        return $z0;

     label4:
        r5 = new java.lang.IllegalStateException;

        specialinvoke r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("telephony service is null.");

        throw r5;

     label5:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "isEmergencyNumber RemoteException", $r2);

        virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        return 0;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
        catch android.os.RemoteException from label4 to label5 with label5;
    }

    public boolean isHearingAidCompatibilitySupported()
    {
        android.telephony.TelephonyManager r0;
        boolean z0;
        android.os.RemoteException $r1;
        java.lang.Throwable $r2;
        com.android.internal.telephony.ITelephony r3;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 == null goto label5;

     label3:
        z0 = interfaceinvoke r3.<com.android.internal.telephony.ITelephony: boolean isHearingAidCompatibilitySupported()>();

     label4:
        return z0;

     label5:
        goto label8;

     label6:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Permission error calling ITelephony#isHearingAidCompatibilitySupported", $r2);

        goto label8;

     label7:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#isHearingAidCompatibilitySupported", $r1);

     label8:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.SecurityException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.SecurityException from label3 to label4 with label6;
    }

    public boolean isIccLockEnabled()
    {
        android.telephony.TelephonyManager r0;
        boolean z0;
        int $i0;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label5;

     label3:
        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        z0 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: boolean isIccLockEnabled(int)>($i0);

     label4:
        return z0;

     label5:
        goto label7;

     label6:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "isIccLockEnabled RemoteException", $r1);

     label7:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public boolean isIdle()
    {
        android.telephony.TelephonyManager r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.telecom.TelecomManager $r3;
        boolean $z0, $z1;

        r0 := @this: android.telephony.TelephonyManager;

        $r1 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("telecom");

        $r3 = (android.telecom.TelecomManager) $r2;

        $z0 = virtualinvoke $r3.<android.telecom.TelecomManager: boolean isInCall()>();

        $z1 = $z0 ^ 1;

        return $z1;
    }

    public boolean isImsRegistered()
    {
        android.telephony.TelephonyManager r0;
        boolean z0;
        com.android.internal.telephony.ITelephony $r2;
        int $i0;
        java.lang.Exception $r3;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        $r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        z0 = interfaceinvoke $r2.<com.android.internal.telephony.ITelephony: boolean isImsRegistered(int)>($i0);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public boolean isImsRegistered(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        boolean z0;
        com.android.internal.telephony.ITelephony $r2;
        java.lang.Exception $r3;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        $r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

        z0 = interfaceinvoke $r2.<com.android.internal.telephony.ITelephony: boolean isImsRegistered(int)>(i0);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public boolean isInEmergencySmsMode()
    {
        android.telephony.TelephonyManager r0;
        boolean z0;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label5;

     label3:
        z0 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: boolean isInEmergencySmsMode()>();

     label4:
        return z0;

     label5:
        goto label7;

     label6:
        $r1 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "isInEmergencySmsMode RemoteException", $r1);

     label7:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public boolean isLteCdmaEvdoGsmWcdmaEnabled()
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1;
        boolean z0;

        r0 := @this: android.telephony.TelephonyManager;

        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        i0 = virtualinvoke r0.<android.telephony.TelephonyManager: int getLteOnCdmaMode(int)>($i1);

        z0 = 1;

        if i0 != 1 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isManualNetworkSelectionAllowed()
    {
        android.telephony.TelephonyManager r0;
        boolean z0;
        int $i0;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label5;

     label3:
        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        z0 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: boolean isManualNetworkSelectionAllowed(int)>($i0);

     label4:
        return z0;

     label5:
        goto label7;

     label6:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#isManualNetworkSelectionAllowed", $r1);

     label7:
        return 1;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public boolean isModemEnabledForSlot(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        boolean z0;
        android.content.Context $r1, $r3;
        java.lang.String $r2, $r4;
        android.os.RemoteException $r5;
        com.android.internal.telephony.ITelephony r6;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r6 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r6 == null goto label5;

     label3:
        $r1 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        $r3 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getAttributionTag()>();

        z0 = interfaceinvoke r6.<com.android.internal.telephony.ITelephony: boolean isModemEnabledForSlot(int,java.lang.String,java.lang.String)>(i0, $r2, $r4);

     label4:
        return z0;

     label5:
        goto label7;

     label6:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "enableModem RemoteException", $r5);

     label7:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public boolean isMultiSimEnabled()
    {
        android.telephony.TelephonyManager r0;
        int i0;
        boolean z0;

        r0 := @this: android.telephony.TelephonyManager;

        i0 = virtualinvoke r0.<android.telephony.TelephonyManager: int getPhoneCount()>();

        z0 = 1;

        if i0 <= 1 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public int isMultiSimSupported()
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1;
        java.lang.String $r1, $r2;
        android.os.RemoteException $r3;
        com.android.internal.telephony.ITelephony r4;

        r0 := @this: android.telephony.TelephonyManager;

        $i1 = virtualinvoke r0.<android.telephony.TelephonyManager: int getSupportedModemCount()>();

        if $i1 >= 2 goto label1;

        return 1;

     label1:
        r4 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r4 == null goto label5;

     label3:
        $r1 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOpPackageName()>();

        $r2 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getAttributionTag()>();

        i0 = interfaceinvoke r4.<com.android.internal.telephony.ITelephony: int isMultiSimSupported(java.lang.String,java.lang.String)>($r1, $r2);

     label4:
        return i0;

     label5:
        goto label7;

     label6:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "isMultiSimSupported RemoteException", $r3);

     label7:
        return 1;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public boolean isNetworkRoaming()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        boolean $z0;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $z0 = virtualinvoke r0.<android.telephony.TelephonyManager: boolean isNetworkRoaming(int)>($i0);

        return $z0;
    }

    public boolean isNetworkRoaming(int)
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1;
        java.util.List $r1;
        java.lang.Boolean $r2, $r4;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        $i1 = staticinvoke <android.telephony.SubscriptionManager: int getPhoneId(int)>(i0);

        $r1 = staticinvoke <android.sysprop.TelephonyProperties: java.util.List operator_is_roaming()>();

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r3 = staticinvoke <android.telephony.TelephonyManager: java.lang.Object getTelephonyProperty(int,java.util.List,java.lang.Object)>($i1, $r1, $r2);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public boolean isOffhook()
    {
        android.telephony.TelephonyManager r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.telecom.TelecomManager $r3;
        boolean $z0;

        r0 := @this: android.telephony.TelephonyManager;

        $r1 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("telecom");

        $r3 = (android.telecom.TelecomManager) $r2;

        $z0 = virtualinvoke $r3.<android.telecom.TelecomManager: boolean isInCall()>();

        return $z0;
    }

    public boolean isOpportunisticNetworkEnabled()
    {
        android.telephony.TelephonyManager r0;
        com.android.internal.telephony.IOns r1;
        android.os.RemoteException $r2;
        android.content.Context r3;
        java.lang.String r4;
        boolean z1;

        r0 := @this: android.telephony.TelephonyManager;

        r3 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        if r3 == null goto label1;

        r4 = virtualinvoke r3.<android.content.Context: java.lang.String getOpPackageName()>();

        goto label2;

     label1:
        r4 = "<unknown>";

     label2:
        z1 = 0;

     label3:
        r1 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.IOns getIOns()>();

     label4:
        if r1 == null goto label6;

     label5:
        z1 = interfaceinvoke r1.<com.android.internal.telephony.IOns: boolean isEnabled(java.lang.String)>(r4);

     label6:
        goto label8;

     label7:
        $r2 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "enableOpportunisticNetwork RemoteException", $r2);

        z1 = 0;

     label8:
        return z1;

        catch android.os.RemoteException from label3 to label4 with label7;
        catch android.os.RemoteException from label5 to label6 with label7;
    }

    public boolean isPotentialEmergencyNumber(java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        com.android.internal.telephony.ITelephony r1;
        boolean $z0;
        android.os.RemoteException $r2;
        java.lang.String r4;
        java.lang.IllegalStateException r5;

        r0 := @this: android.telephony.TelephonyManager;

        r4 := @parameter0: java.lang.String;

     label1:
        r1 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r1 == null goto label4;

     label3:
        $z0 = interfaceinvoke r1.<com.android.internal.telephony.ITelephony: boolean isEmergencyNumber(java.lang.String,boolean)>(r4, 0);

        return $z0;

     label4:
        r5 = new java.lang.IllegalStateException;

        specialinvoke r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("telephony service is null.");

        throw r5;

     label5:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "isEmergencyNumber RemoteException", $r2);

        virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        return 0;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
        catch android.os.RemoteException from label4 to label5 with label5;
    }

    public boolean isRadioOn()
    {
        android.telephony.TelephonyManager r0;
        boolean z0;
        java.lang.String $r1, $r2;
        android.os.RemoteException $r3;
        com.android.internal.telephony.ITelephony r4;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r4 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r4 == null goto label5;

     label3:
        $r1 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOpPackageName()>();

        $r2 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getAttributionTag()>();

        z0 = interfaceinvoke r4.<com.android.internal.telephony.ITelephony: boolean isRadioOnWithFeature(java.lang.String,java.lang.String)>($r1, $r2);

     label4:
        return z0;

     label5:
        goto label7;

     label6:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#isRadioOn", $r3);

     label7:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public boolean isRinging()
    {
        android.telephony.TelephonyManager r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.telecom.TelecomManager $r3;
        boolean $z0;

        r0 := @this: android.telephony.TelephonyManager;

        $r1 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("telecom");

        $r3 = (android.telecom.TelecomManager) $r2;

        $z0 = virtualinvoke $r3.<android.telecom.TelecomManager: boolean isRinging()>();

        return $z0;
    }

    public boolean isRttSupported()
    {
        android.telephony.TelephonyManager r0;
        boolean z0;
        int $i0;
        android.os.RemoteException $r1;
        java.lang.Throwable $r2;
        com.android.internal.telephony.ITelephony r3;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 == null goto label5;

     label3:
        $i0 = r0.<android.telephony.TelephonyManager: int mSubId>;

        z0 = interfaceinvoke r3.<com.android.internal.telephony.ITelephony: boolean isRttSupported(int)>($i0);

     label4:
        return z0;

     label5:
        goto label8;

     label6:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Permission error calling ITelephony#isWorldPhone", $r2);

        goto label8;

     label7:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#isRttSupported", $r1);

     label8:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.SecurityException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.SecurityException from label3 to label4 with label6;
    }

    public boolean isSmsCapable()
    {
        android.telephony.TelephonyManager r0;
        android.content.Context r1;
        android.content.res.Resources $r2;
        boolean $z0;

        r0 := @this: android.telephony.TelephonyManager;

        r1 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        if r1 != null goto label1;

        return 1;

     label1:
        $r2 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r2.<android.content.res.Resources: boolean getBoolean(int)>(17891533);

        return $z0;
    }

    public boolean isTetheringApnRequired()
    {
        android.telephony.TelephonyManager r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = staticinvoke <android.telephony.SubscriptionManager: int getActiveDataSubscriptionId()>();

        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId(int)>($i0);

        $z0 = virtualinvoke r0.<android.telephony.TelephonyManager: boolean isTetheringApnRequired(int)>($i1);

        return $z0;
    }

    public boolean isTetheringApnRequired(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        boolean z0;
        android.os.RemoteException $r1;
        java.lang.NullPointerException $r2;
        com.android.internal.telephony.ITelephony r3;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 == null goto label5;

     label3:
        z0 = interfaceinvoke r3.<com.android.internal.telephony.ITelephony: boolean isTetheringApnRequiredForSubscriber(int)>(i0);

     label4:
        return z0;

     label5:
        goto label8;

     label6:
        $r2 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "hasMatchedTetherApnSetting NPE", $r2);

        goto label8;

     label7:
        $r1 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "hasMatchedTetherApnSetting RemoteException", $r1);

     label8:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public boolean isTtyModeSupported()
    {
        android.telephony.TelephonyManager r0;
        boolean z0;
        android.content.Context $r1, $r2;
        java.lang.Object $r3;
        java.lang.Throwable $r4;
        android.telecom.TelecomManager r5;

        r0 := @this: android.telephony.TelephonyManager;

        r5 = null;

     label1:
        $r1 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        if $r1 == null goto label2;

        $r2 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/telecom/TelecomManager;");

        r5 = (android.telecom.TelecomManager) $r3;

     label2:
        if r5 == null goto label5;

     label3:
        z0 = virtualinvoke r5.<android.telecom.TelecomManager: boolean isTtySupported()>();

     label4:
        return z0;

     label5:
        goto label7;

     label6:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Permission error calling TelecomManager#isTtySupported", $r4);

     label7:
        return 0;

        catch java.lang.SecurityException from label1 to label2 with label6;
        catch java.lang.SecurityException from label3 to label4 with label6;
    }

    public boolean isVideoCallingEnabled()
    {
        android.telephony.TelephonyManager r0;
        boolean z0;
        java.lang.String $r1, $r2;
        android.os.RemoteException $r3;
        com.android.internal.telephony.ITelephony r4;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r4 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r4 == null goto label5;

     label3:
        $r1 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOpPackageName()>();

        $r2 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getAttributionTag()>();

        z0 = interfaceinvoke r4.<com.android.internal.telephony.ITelephony: boolean isVideoCallingEnabled(java.lang.String,java.lang.String)>($r1, $r2);

     label4:
        return z0;

     label5:
        goto label7;

     label6:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#isVideoCallingEnabled", $r3);

     label7:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public boolean isVideoTelephonyAvailable()
    {
        android.telephony.TelephonyManager r0;
        boolean z0;
        com.android.internal.telephony.ITelephony $r2;
        int $i0;
        java.lang.Exception $r3;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        $r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        z0 = interfaceinvoke $r2.<com.android.internal.telephony.ITelephony: boolean isVideoTelephonyAvailable(int)>($i0);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public boolean isVisualVoicemailEnabled(android.telecom.PhoneAccountHandle)
    {
        android.telephony.TelephonyManager r0;
        android.telecom.PhoneAccountHandle r1;

        r0 := @this: android.telephony.TelephonyManager;

        r1 := @parameter0: android.telecom.PhoneAccountHandle;

        return 0;
    }

    public boolean isVoiceCapable()
    {
        android.telephony.TelephonyManager r0;
        android.content.Context r1;
        android.content.res.Resources $r2;
        boolean $z0;

        r0 := @this: android.telephony.TelephonyManager;

        r1 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        if r1 != null goto label1;

        return 1;

     label1:
        $r2 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r2.<android.content.res.Resources: boolean getBoolean(int)>(17891584);

        return $z0;
    }

    public boolean isVoicemailVibrationEnabled(android.telecom.PhoneAccountHandle)
    {
        android.telephony.TelephonyManager r0;
        com.android.internal.telephony.ITelephony r1;
        boolean z0;
        android.os.RemoteException $r2;
        android.telecom.PhoneAccountHandle r3;

        r0 := @this: android.telephony.TelephonyManager;

        r3 := @parameter0: android.telecom.PhoneAccountHandle;

     label1:
        r1 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r1 == null goto label5;

     label3:
        z0 = interfaceinvoke r1.<com.android.internal.telephony.ITelephony: boolean isVoicemailVibrationEnabled(android.telecom.PhoneAccountHandle)>(r3);

     label4:
        return z0;

     label5:
        goto label7;

     label6:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#isVoicemailVibrationEnabled", $r2);

     label7:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public boolean isVolteAvailable()
    {
        android.telephony.TelephonyManager r0;
        boolean z0;
        com.android.internal.telephony.ITelephony $r2;
        int $i0;
        java.lang.Exception $r3;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        $r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        z0 = interfaceinvoke $r2.<com.android.internal.telephony.ITelephony: boolean isAvailable(int,int,int)>($i0, 1, 0);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public boolean isWifiCallingAvailable()
    {
        android.telephony.TelephonyManager r0;
        boolean z0;
        com.android.internal.telephony.ITelephony $r2;
        int $i0;
        java.lang.Exception $r3;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        $r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        z0 = interfaceinvoke $r2.<com.android.internal.telephony.ITelephony: boolean isWifiCallingAvailable(int)>($i0);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    public boolean isWorldPhone()
    {
        android.telephony.TelephonyManager r0;
        boolean z0;
        int $i0;
        java.lang.String $r1, $r2;
        android.os.RemoteException $r3;
        java.lang.Throwable $r4;
        com.android.internal.telephony.ITelephony r5;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r5 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r5 == null goto label5;

     label3:
        $i0 = r0.<android.telephony.TelephonyManager: int mSubId>;

        $r1 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOpPackageName()>();

        $r2 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getAttributionTag()>();

        z0 = interfaceinvoke r5.<com.android.internal.telephony.ITelephony: boolean isWorldPhone(int,java.lang.String,java.lang.String)>($i0, $r1, $r2);

     label4:
        return z0;

     label5:
        goto label8;

     label6:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Permission error calling ITelephony#isWorldPhone", $r4);

        goto label8;

     label7:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#isWorldPhone", $r3);

     label8:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.SecurityException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.SecurityException from label3 to label4 with label6;
    }

    public void listen(android.telephony.PhoneStateListener, int)
    {
        android.telephony.TelephonyManager r0;
        android.telephony.PhoneStateListener r1;
        int i0, $i2;
        android.telephony.TelephonyRegistryManager r2;
        android.content.Context $r3, $r5;
        com.android.internal.telephony.ITelephony $r4;
        java.lang.Object $r6;
        java.lang.String $r7, $r8;
        boolean z0;

        r0 := @this: android.telephony.TelephonyManager;

        r1 := @parameter0: android.telephony.PhoneStateListener;

        i0 := @parameter1: int;

        $r3 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        if $r3 != null goto label1;

        return;

     label1:
        $r4 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

        if $r4 == null goto label2;

        z0 = 1;

        goto label3;

     label2:
        z0 = 0;

     label3:
        $r5 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("telephony_registry");

        r2 = (android.telephony.TelephonyRegistryManager) $r6;

        if r2 == null goto label4;

        $i2 = r0.<android.telephony.TelephonyManager: int mSubId>;

        $r7 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOpPackageName()>();

        $r8 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getAttributionTag()>();

        virtualinvoke r2.<android.telephony.TelephonyRegistryManager: void listenForSubscriber(int,java.lang.String,java.lang.String,android.telephony.PhoneStateListener,int,boolean)>($i2, $r7, $r8, r1, i0, z0);

        goto label5;

     label4:
        staticinvoke <com.android.telephony.Rlog: int w(java.lang.String,java.lang.String)>("TelephonyManager", "telephony registry not ready.");

     label5:
        return;
    }

    public boolean matchesCurrentSimOperator(java.lang.String, int, java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1;
        java.lang.String r1, $r2, r5;
        boolean z0, $z1, $z2;
        android.os.RemoteException $r3;
        com.android.internal.telephony.ITelephony r6;

        r0 := @this: android.telephony.TelephonyManager;

        r5 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

     label1:
        $r2 = virtualinvoke r0.<android.telephony.TelephonyManager: java.lang.String getSimOperator()>();

        $z1 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z1 != 0 goto label3;

     label2:
        return 0;

     label3:
        r6 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label4:
        if r6 == null goto label7;

     label5:
        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        z0 = interfaceinvoke r6.<com.android.internal.telephony.ITelephony: boolean isMvnoMatched(int,int,java.lang.String)>($i1, i0, r1);

     label6:
        return z0;

     label7:
        goto label9;

     label8:
        $r3 := @caughtexception;

        $z2 = specialinvoke r0.<android.telephony.TelephonyManager: boolean isSystemProcess()>();

        if $z2 != 0 goto label9;

        virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

     label9:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label8;
        catch android.os.RemoteException from label3 to label4 with label8;
        catch android.os.RemoteException from label5 to label6 with label8;
    }

    public boolean modifyDevicePolicyOverrideApn(android.content.Context, int, android.telephony.data.ApnSetting)
    {
        android.telephony.TelephonyManager r0;
        android.content.Context r1;
        int i0, $i1;
        android.telephony.data.ApnSetting r2;
        android.content.ContentResolver $r3;
        android.net.Uri $r4, $r6;
        java.lang.String $r5;
        android.content.ContentValues $r7;
        boolean z0;

        r0 := @this: android.telephony.TelephonyManager;

        r1 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        r2 := @parameter2: android.telephony.data.ApnSetting;

        $r3 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r4 = <android.provider.Telephony$Carriers: android.net.Uri DPC_URI>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $r6 = staticinvoke <android.net.Uri: android.net.Uri withAppendedPath(android.net.Uri,java.lang.String)>($r4, $r5);

        $r7 = virtualinvoke r2.<android.telephony.data.ApnSetting: android.content.ContentValues toContentValues()>();

        $i1 = virtualinvoke $r3.<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>($r6, $r7, null, null);

        if $i1 <= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean needsOtaServiceProvisioning()
    {
        android.telephony.TelephonyManager r0;
        boolean z0;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label5;

     label3:
        z0 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: boolean needsOtaServiceProvisioning()>();

     label4:
        return z0;

     label5:
        goto label7;

     label6:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#needsOtaServiceProvisioning", $r1);

     label7:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public void notifyOtaEmergencyNumberDbInstalled()
    {
        android.telephony.TelephonyManager r0;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r3;
        java.lang.IllegalStateException r4;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 == null goto label5;

     label3:
        interfaceinvoke r3.<com.android.internal.telephony.ITelephony: void notifyOtaEmergencyNumberDbInstalled()>();

     label4:
        goto label7;

     label5:
        r4 = new java.lang.IllegalStateException;

        specialinvoke r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("telephony service is null.");

        throw r4;

     label6:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "notifyOtaEmergencyNumberDatabaseInstalled RemoteException", $r1);

        virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

     label7:
        return;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch android.os.RemoteException from label5 to label6 with label6;
    }

    public void notifyUserActivity()
    {
        android.telephony.TelephonyManager r0;
        android.os.RemoteException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r7;
        com.android.internal.telephony.ITelephony r8;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r8 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r8 == null goto label4;

     label3:
        interfaceinvoke r8.<com.android.internal.telephony.ITelephony: void userActivity()>();

     label4:
        goto label6;

     label5:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("notifyUserActivity exception: ");

        $r5 = virtualinvoke $r2.<android.os.RemoteException: java.lang.String getMessage()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TelephonyManager", $r7);

     label6:
        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public java.lang.String nvReadItem(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        java.lang.NullPointerException $r1;
        android.os.RemoteException $r2;
        com.android.internal.telephony.ITelephony r3;
        java.lang.String r4;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 == null goto label5;

     label3:
        r4 = interfaceinvoke r3.<com.android.internal.telephony.ITelephony: java.lang.String nvReadItem(int)>(i0);

     label4:
        return r4;

     label5:
        goto label8;

     label6:
        $r1 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "nvReadItem NPE", $r1);

        goto label8;

     label7:
        $r2 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "nvReadItem RemoteException", $r2);

     label8:
        return "";

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public boolean nvResetConfig(int)
    {
        android.telephony.TelephonyManager r0;
        int i0, $i2, $i3;
        boolean $z0, $z1;
        java.lang.NullPointerException $r1;
        android.os.RemoteException $r2;
        com.android.internal.telephony.ITelephony r3;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label01:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label02:
        if r3 == null goto label10;

        if i0 != 1 goto label04;

     label03:
        $i3 = virtualinvoke r0.<android.telephony.TelephonyManager: int getSlotIndex()>();

        $z1 = interfaceinvoke r3.<com.android.internal.telephony.ITelephony: boolean rebootModem(int)>($i3);

        return $z1;

     label04:
        if i0 != 3 goto label06;

     label05:
        $i2 = virtualinvoke r0.<android.telephony.TelephonyManager: int getSlotIndex()>();

        $z0 = interfaceinvoke r3.<com.android.internal.telephony.ITelephony: boolean resetModemConfig(int)>($i2);

        return $z0;

     label06:
        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("TelephonyManager", "nvResetConfig unsupported reset type");

     label07:
        goto label10;

     label08:
        $r1 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "nvResetConfig NPE", $r1);

        goto label10;

     label09:
        $r2 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "nvResetConfig RemoteException", $r2);

     label10:
        return 0;

        catch android.os.RemoteException from label01 to label02 with label09;
        catch java.lang.NullPointerException from label01 to label02 with label08;
        catch android.os.RemoteException from label03 to label04 with label09;
        catch java.lang.NullPointerException from label03 to label04 with label08;
        catch android.os.RemoteException from label05 to label06 with label09;
        catch java.lang.NullPointerException from label05 to label06 with label08;
        catch android.os.RemoteException from label06 to label07 with label09;
        catch java.lang.NullPointerException from label06 to label07 with label08;
    }

    public boolean nvWriteCdmaPrl(byte[])
    {
        android.telephony.TelephonyManager r0;
        com.android.internal.telephony.ITelephony r1;
        boolean z0;
        android.os.RemoteException $r2;
        java.lang.NullPointerException $r3;
        byte[] r4;

        r0 := @this: android.telephony.TelephonyManager;

        r4 := @parameter0: byte[];

     label1:
        r1 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r1 == null goto label5;

     label3:
        z0 = interfaceinvoke r1.<com.android.internal.telephony.ITelephony: boolean nvWriteCdmaPrl(byte[])>(r4);

     label4:
        return z0;

     label5:
        goto label8;

     label6:
        $r3 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "nvWriteCdmaPrl NPE", $r3);

        goto label8;

     label7:
        $r2 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "nvWriteCdmaPrl RemoteException", $r2);

     label8:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public boolean nvWriteItem(int, java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        com.android.internal.telephony.ITelephony r1;
        boolean z0;
        android.os.RemoteException $r2;
        java.lang.NullPointerException $r3;
        java.lang.String r4;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        r4 := @parameter1: java.lang.String;

     label1:
        r1 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r1 == null goto label5;

     label3:
        z0 = interfaceinvoke r1.<com.android.internal.telephony.ITelephony: boolean nvWriteItem(int,java.lang.String)>(i0, r4);

     label4:
        return z0;

     label5:
        goto label8;

     label6:
        $r3 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "nvWriteItem NPE", $r3);

        goto label8;

     label7:
        $r2 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "nvWriteItem RemoteException", $r2);

     label8:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public boolean rebootRadio()
    {
        android.telephony.TelephonyManager r0;
        boolean z0;
        int $i0;
        java.lang.NullPointerException $r1;
        android.os.RemoteException $r2;
        com.android.internal.telephony.ITelephony r3;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 == null goto label5;

     label3:
        $i0 = virtualinvoke r0.<android.telephony.TelephonyManager: int getSlotIndex()>();

        z0 = interfaceinvoke r3.<com.android.internal.telephony.ITelephony: boolean rebootModem(int)>($i0);

     label4:
        return z0;

     label5:
        goto label8;

     label6:
        $r1 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "rebootRadio NPE", $r1);

        goto label8;

     label7:
        $r2 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "rebootRadio RemoteException", $r2);

     label8:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public void refreshUiccProfile()
    {
        android.telephony.TelephonyManager r0;
        com.android.internal.telephony.ITelephony $r2;
        int $i0;
        android.os.RemoteException $r3;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        $r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

        $i0 = r0.<android.telephony.TelephonyManager: int mSubId>;

        interfaceinvoke $r2.<com.android.internal.telephony.ITelephony: void refreshUiccProfile(int)>($i0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "RemoteException", $r3);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void reportDefaultNetworkStatus(boolean)
    {
        android.telephony.TelephonyManager r0;
        boolean z0;
        int $i0, $i1;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;

        r0 := @this: android.telephony.TelephonyManager;

        z0 := @parameter0: boolean;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label4;

     label3:
        $i0 = staticinvoke <android.telephony.SubscriptionManager: int getDefaultDataSubscriptionId()>();

        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId(int)>($i0);

        interfaceinvoke r2.<com.android.internal.telephony.ITelephony: void carrierActionReportDefaultNetworkStatus(int,boolean)>($i1, z0);

     label4:
        goto label6;

     label5:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#carrierActionReportDefaultNetworkStatus", $r1);

     label6:
        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void requestCellInfoUpdate(android.os.WorkSource, java.util.concurrent.Executor, android.telephony.TelephonyManager$CellInfoCallback)
    {
        android.telephony.TelephonyManager r0;
        java.util.concurrent.Executor r1;
        android.telephony.TelephonyManager$CellInfoCallback r2;
        com.android.internal.telephony.ITelephony r3;
        int i0;
        android.telephony.TelephonyManager$2 r4;
        java.lang.String $r5, $r6;
        android.os.RemoteException $r7;
        android.os.WorkSource r8;

        r0 := @this: android.telephony.TelephonyManager;

        r8 := @parameter0: android.os.WorkSource;

        r1 := @parameter1: java.util.concurrent.Executor;

        r2 := @parameter2: android.telephony.TelephonyManager$CellInfoCallback;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 != null goto label3;

        return;

     label3:
        i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        r4 = new android.telephony.TelephonyManager$2;

        specialinvoke r4.<android.telephony.TelephonyManager$2: void <init>(android.telephony.TelephonyManager,java.util.concurrent.Executor,android.telephony.TelephonyManager$CellInfoCallback)>(r0, r1, r2);

        $r5 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOpPackageName()>();

        $r6 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getAttributionTag()>();

        interfaceinvoke r3.<com.android.internal.telephony.ITelephony: void requestCellInfoUpdateWithWorkSource(int,android.telephony.ICellInfoCallback,java.lang.String,java.lang.String,android.os.WorkSource)>(i0, r4, $r5, $r6, r8);

     label4:
        goto label6;

     label5:
        $r7 := @caughtexception;

     label6:
        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void requestCellInfoUpdate(java.util.concurrent.Executor, android.telephony.TelephonyManager$CellInfoCallback)
    {
        android.telephony.TelephonyManager r0;
        android.telephony.TelephonyManager$CellInfoCallback r1;
        com.android.internal.telephony.ITelephony r2;
        int i0;
        android.telephony.TelephonyManager$1 r3;
        java.lang.String $r4, $r5;
        android.os.RemoteException $r6;
        java.util.concurrent.Executor r7;

        r0 := @this: android.telephony.TelephonyManager;

        r7 := @parameter0: java.util.concurrent.Executor;

        r1 := @parameter1: android.telephony.TelephonyManager$CellInfoCallback;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 != null goto label3;

        return;

     label3:
        i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        r3 = new android.telephony.TelephonyManager$1;

        specialinvoke r3.<android.telephony.TelephonyManager$1: void <init>(android.telephony.TelephonyManager,java.util.concurrent.Executor,android.telephony.TelephonyManager$CellInfoCallback)>(r0, r7, r1);

        $r4 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOpPackageName()>();

        $r5 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getAttributionTag()>();

        interfaceinvoke r2.<com.android.internal.telephony.ITelephony: void requestCellInfoUpdate(int,android.telephony.ICellInfoCallback,java.lang.String,java.lang.String)>(i0, r3, $r4, $r5);

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

     label6:
        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void requestModemActivityInfo(android.os.ResultReceiver)
    {
        android.telephony.TelephonyManager r0;
        android.os.ResultReceiver r1;
        android.os.RemoteException $r2;
        com.android.internal.telephony.ITelephony r3;

        r0 := @this: android.telephony.TelephonyManager;

        r1 := @parameter0: android.os.ResultReceiver;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 == null goto label5;

     label3:
        interfaceinvoke r3.<com.android.internal.telephony.ITelephony: void requestModemActivityInfo(android.os.ResultReceiver)>(r1);

     label4:
        return;

     label5:
        goto label7;

     label6:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#getModemActivityInfo", $r2);

     label7:
        virtualinvoke r1.<android.os.ResultReceiver: void send(int,android.os.Bundle)>(0, null);

        return;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public android.telephony.NetworkScan requestNetworkScan(android.telephony.NetworkScanRequest, android.telephony.TelephonyScanManager$NetworkScanCallback)
    {
        android.telephony.TelephonyManager r0;
        android.telephony.NetworkScanRequest r1;
        android.telephony.TelephonyScanManager$NetworkScanCallback r2;
        java.util.concurrent.Executor $r3;
        android.telephony.NetworkScan $r4;

        r0 := @this: android.telephony.TelephonyManager;

        r1 := @parameter0: android.telephony.NetworkScanRequest;

        r2 := @parameter1: android.telephony.TelephonyScanManager$NetworkScanCallback;

        $r3 = <android.os.AsyncTask: java.util.concurrent.Executor SERIAL_EXECUTOR>;

        $r4 = virtualinvoke r0.<android.telephony.TelephonyManager: android.telephony.NetworkScan requestNetworkScan(android.telephony.NetworkScanRequest,java.util.concurrent.Executor,android.telephony.TelephonyScanManager$NetworkScanCallback)>(r1, $r3, r2);

        return $r4;
    }

    public android.telephony.NetworkScan requestNetworkScan(android.telephony.NetworkScanRequest, java.util.concurrent.Executor, android.telephony.TelephonyScanManager$NetworkScanCallback)
    {
        android.telephony.TelephonyManager r0;
        java.util.concurrent.Executor r1;
        android.telephony.TelephonyScanManager$NetworkScanCallback r2;
        android.telephony.TelephonyScanManager r3, $r4, $r5;
        int $i0;
        java.lang.String $r6, $r7;
        android.telephony.NetworkScan $r8;
        java.lang.Throwable $r9;
        android.telephony.NetworkScanRequest r10;

        r0 := @this: android.telephony.TelephonyManager;

        r10 := @parameter0: android.telephony.NetworkScanRequest;

        r1 := @parameter1: java.util.concurrent.Executor;

        r2 := @parameter2: android.telephony.TelephonyScanManager$NetworkScanCallback;

        entermonitor r0;

     label1:
        $r4 = r0.<android.telephony.TelephonyManager: android.telephony.TelephonyScanManager mTelephonyScanManager>;

        if $r4 != null goto label2;

        r3 = new android.telephony.TelephonyScanManager;

        specialinvoke r3.<android.telephony.TelephonyScanManager: void <init>()>();

        r0.<android.telephony.TelephonyManager: android.telephony.TelephonyScanManager mTelephonyScanManager> = r3;

     label2:
        exitmonitor r0;

     label3:
        $r5 = r0.<android.telephony.TelephonyManager: android.telephony.TelephonyScanManager mTelephonyScanManager>;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $r6 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOpPackageName()>();

        $r7 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getAttributionTag()>();

        $r8 = virtualinvoke $r5.<android.telephony.TelephonyScanManager: android.telephony.NetworkScan requestNetworkScan(int,android.telephony.NetworkScanRequest,java.util.concurrent.Executor,android.telephony.TelephonyScanManager$NetworkScanCallback,java.lang.String,java.lang.String)>($i0, r10, r1, r2, $r6, $r7);

        return $r8;

     label4:
        $r9 := @caughtexception;

     label5:
        exitmonitor r0;

     label6:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void requestNumberVerification(android.telephony.PhoneNumberRange, long, java.util.concurrent.Executor, android.telephony.NumberVerificationCallback)
    {
        android.telephony.TelephonyManager r0;
        long l0;
        java.util.concurrent.Executor r1;
        android.telephony.NumberVerificationCallback r2;
        com.android.internal.telephony.ITelephony r4;
        java.lang.NullPointerException $r5, $r6;
        android.telephony.TelephonyManager$3 $r7;
        java.lang.String $r8;
        android.os.RemoteException $r9;
        android.telephony._$$Lambda$TelephonyManager$4i1RRVjnCzfQvX2hIGG9K8g4DaY $r10;
        android.telephony.PhoneNumberRange r11;

        r0 := @this: android.telephony.TelephonyManager;

        r11 := @parameter0: android.telephony.PhoneNumberRange;

        l0 := @parameter1: long;

        r1 := @parameter2: java.util.concurrent.Executor;

        r2 := @parameter3: android.telephony.NumberVerificationCallback;

        if r1 == null goto label8;

        if r2 == null goto label7;

        $r7 = new android.telephony.TelephonyManager$3;

        specialinvoke $r7.<android.telephony.TelephonyManager$3: void <init>(android.telephony.TelephonyManager,java.util.concurrent.Executor,android.telephony.NumberVerificationCallback)>(r0, r1, r2);

     label1:
        r4 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r4 == null goto label4;

     label3:
        $r8 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOpPackageName()>();

        interfaceinvoke r4.<com.android.internal.telephony.ITelephony: void requestNumberVerification(android.telephony.PhoneNumberRange,long,com.android.internal.telephony.INumberVerificationCallback,java.lang.String)>(r11, l0, $r7, $r8);

     label4:
        goto label6;

     label5:
        $r9 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "requestNumberVerification RemoteException", $r9);

        $r10 = new android.telephony._$$Lambda$TelephonyManager$4i1RRVjnCzfQvX2hIGG9K8g4DaY;

        specialinvoke $r10.<android.telephony._$$Lambda$TelephonyManager$4i1RRVjnCzfQvX2hIGG9K8g4DaY: void <init>(android.telephony.NumberVerificationCallback)>(r2);

        interfaceinvoke r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r10);

     label6:
        return;

     label7:
        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("Callback must be non-null");

        throw $r6;

     label8:
        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("Executor must be non-null");

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void resetAllCarrierActions()
    {
        android.telephony.TelephonyManager r0;
        int $i0, $i1;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label4;

     label3:
        $i0 = staticinvoke <android.telephony.SubscriptionManager: int getDefaultDataSubscriptionId()>();

        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId(int)>($i0);

        interfaceinvoke r2.<com.android.internal.telephony.ITelephony: void carrierActionResetAll(int)>($i1);

     label4:
        goto label6;

     label5:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#carrierActionResetAll", $r1);

     label6:
        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void resetCarrierKeysForImsiEncryption()
    {
        android.telephony.TelephonyManager r0;
        int $i0, $i1;
        android.content.Context $r2;
        java.lang.String $r3, $r8;
        boolean $z0, $z1;
        android.os.RemoteException $r4;
        java.lang.StringBuilder $r5;
        com.android.internal.telephony.IPhoneSubInfo r10;
        java.lang.RuntimeException r11;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r10 = staticinvoke <android.telephony.TelephonyManager: com.android.internal.telephony.IPhoneSubInfo getSubscriberInfoService()>();

     label2:
        if r10 != null goto label6;

     label3:
        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("TelephonyManager", "IMSI error: Subscriber Info is null");

        $z0 = specialinvoke r0.<android.telephony.TelephonyManager: boolean isSystemProcess()>();

        if $z0 == 0 goto label5;

     label4:
        return;

     label5:
        r11 = new java.lang.RuntimeException;

        specialinvoke r11.<java.lang.RuntimeException: void <init>(java.lang.String)>("IMSI error: Subscriber Info is null");

        throw r11;

     label6:
        $i0 = staticinvoke <android.telephony.SubscriptionManager: int getDefaultDataSubscriptionId()>();

        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId(int)>($i0);

        $r2 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke r10.<com.android.internal.telephony.IPhoneSubInfo: void resetCarrierKeysForImsiEncryption(int,java.lang.String)>($i1, $r3);

     label7:
        goto label9;

     label8:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getCarrierInfoForImsiEncryption RemoteException");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("TelephonyManager", $r8);

        $z1 = specialinvoke r0.<android.telephony.TelephonyManager: boolean isSystemProcess()>();

        if $z1 != 0 goto label9;

        virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

     label9:
        return;

        catch android.os.RemoteException from label1 to label2 with label8;
        catch android.os.RemoteException from label3 to label4 with label8;
        catch android.os.RemoteException from label5 to label6 with label8;
        catch android.os.RemoteException from label6 to label7 with label8;
    }

    public void resetIms(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        android.os.RemoteException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r7;
        com.android.internal.telephony.ITelephony r8;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r8 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r8 == null goto label4;

     label3:
        interfaceinvoke r8.<com.android.internal.telephony.ITelephony: void resetIms(int)>(i0);

     label4:
        goto label6;

     label5:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("toggleImsOnOff, RemoteException: ");

        $r5 = virtualinvoke $r2.<android.os.RemoteException: java.lang.String getMessage()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("TelephonyManager", $r7);

     label6:
        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void resetOtaEmergencyNumberDbFilePath()
    {
        android.telephony.TelephonyManager r0;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r3;
        java.lang.IllegalStateException r4;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 == null goto label5;

     label3:
        interfaceinvoke r3.<com.android.internal.telephony.ITelephony: void resetOtaEmergencyNumberDbFilePath()>();

     label4:
        goto label7;

     label5:
        r4 = new java.lang.IllegalStateException;

        specialinvoke r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("telephony service is null.");

        throw r4;

     label6:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "resetOtaEmergencyNumberDbFilePath RemoteException", $r1);

        virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

     label7:
        return;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch android.os.RemoteException from label5 to label6 with label6;
    }

    public boolean resetRadioConfig()
    {
        android.telephony.TelephonyManager r0;
        boolean z0;
        int $i0;
        java.lang.NullPointerException $r1;
        android.os.RemoteException $r2;
        com.android.internal.telephony.ITelephony r3;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 == null goto label5;

     label3:
        $i0 = virtualinvoke r0.<android.telephony.TelephonyManager: int getSlotIndex()>();

        z0 = interfaceinvoke r3.<com.android.internal.telephony.ITelephony: boolean resetModemConfig(int)>($i0);

     label4:
        return z0;

     label5:
        goto label8;

     label6:
        $r1 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "resetRadioConfig NPE", $r1);

        goto label8;

     label7:
        $r2 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "resetRadioConfig RemoteException", $r2);

     label8:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public void resetSettings()
    {
        android.telephony.TelephonyManager r0;
        int $i0, $i2;
        java.lang.String $r3;
        android.os.RemoteException $r4;
        java.lang.StringBuilder r5;
        com.android.internal.telephony.ITelephony r6;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r5 = new java.lang.StringBuilder;

        specialinvoke r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("resetSettings: subId=");

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("TelephonyManager", $r3);

        r6 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r6 == null goto label4;

     label3:
        $i2 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        interfaceinvoke r6.<com.android.internal.telephony.ITelephony: void factoryReset(int)>($i2);

     label4:
        goto label6;

     label5:
        $r4 := @caughtexception;

     label6:
        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void sendDialerSpecialCode(java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        com.android.internal.telephony.ITelephony r1;
        android.content.Context $r2;
        java.lang.String $r3, r6;
        boolean $z0, $z1;
        android.os.RemoteException $r4;
        java.lang.RuntimeException r7;

        r0 := @this: android.telephony.TelephonyManager;

        r6 := @parameter0: java.lang.String;

     label1:
        r1 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r1 != null goto label6;

     label3:
        $z0 = specialinvoke r0.<android.telephony.TelephonyManager: boolean isSystemProcess()>();

        if $z0 == 0 goto label5;

     label4:
        return;

     label5:
        r7 = new java.lang.RuntimeException;

        specialinvoke r7.<java.lang.RuntimeException: void <init>(java.lang.String)>("Telephony service unavailable");

        throw r7;

     label6:
        $r2 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke r1.<com.android.internal.telephony.ITelephony: void sendDialerSpecialCode(java.lang.String,java.lang.String)>($r3, r6);

     label7:
        goto label9;

     label8:
        $r4 := @caughtexception;

        $z1 = specialinvoke r0.<android.telephony.TelephonyManager: boolean isSystemProcess()>();

        if $z1 != 0 goto label9;

        virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

     label9:
        return;

        catch android.os.RemoteException from label1 to label2 with label8;
        catch android.os.RemoteException from label3 to label4 with label8;
        catch android.os.RemoteException from label5 to label6 with label8;
        catch android.os.RemoteException from label6 to label7 with label8;
    }

    public java.lang.String sendEnvelopeWithStatus(int, java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        com.android.internal.telephony.ITelephony r1;
        android.os.RemoteException $r2;
        java.lang.NullPointerException $r3;
        java.lang.String r4, r5;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        r4 := @parameter1: java.lang.String;

     label1:
        r1 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r1 == null goto label5;

     label3:
        r5 = interfaceinvoke r1.<com.android.internal.telephony.ITelephony: java.lang.String sendEnvelopeWithStatus(int,java.lang.String)>(i0, r4);

     label4:
        return r5;

     label5:
        goto label8;

     label6:
        $r3 := @caughtexception;

        goto label8;

     label7:
        $r2 := @caughtexception;

     label8:
        return "";

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public java.lang.String sendEnvelopeWithStatus(java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        java.lang.String r1, $r2;
        int $i0;

        r0 := @this: android.telephony.TelephonyManager;

        r1 := @parameter0: java.lang.String;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $r2 = virtualinvoke r0.<android.telephony.TelephonyManager: java.lang.String sendEnvelopeWithStatus(int,java.lang.String)>($i0, r1);

        return $r2;
    }

    public void sendUssdRequest(java.lang.String, android.telephony.TelephonyManager$UssdResponseCallback, android.os.Handler)
    {
        android.telephony.TelephonyManager r0;
        android.telephony.TelephonyManager$4 $r2;
        int $i0;
        android.os.RemoteException $r3;
        android.telephony.UssdResponse $r4;
        android.os.Bundle $r5;
        java.lang.String r6;
        android.telephony.TelephonyManager$UssdResponseCallback r7;
        android.os.Handler r8;
        com.android.internal.telephony.ITelephony r10;

        r0 := @this: android.telephony.TelephonyManager;

        r6 := @parameter0: java.lang.String;

        r7 := @parameter1: android.telephony.TelephonyManager$UssdResponseCallback;

        r8 := @parameter2: android.os.Handler;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r7, "UssdResponseCallback cannot be null.");

        $r2 = new android.telephony.TelephonyManager$4;

        specialinvoke $r2.<android.telephony.TelephonyManager$4: void <init>(android.telephony.TelephonyManager,android.os.Handler,android.telephony.TelephonyManager$UssdResponseCallback,android.telephony.TelephonyManager)>(r0, r8, r7, r0);

     label1:
        r10 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r10 == null goto label4;

     label3:
        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        interfaceinvoke r10.<com.android.internal.telephony.ITelephony: void handleUssdRequest(int,java.lang.String,android.os.ResultReceiver)>($i0, r6, $r2);

     label4:
        goto label6;

     label5:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#sendUSSDCode", $r3);

        $r4 = new android.telephony.UssdResponse;

        specialinvoke $r4.<android.telephony.UssdResponse: void <init>(java.lang.String,java.lang.CharSequence)>(r6, "");

        $r5 = new android.os.Bundle;

        specialinvoke $r5.<android.os.Bundle: void <init>()>();

        virtualinvoke $r5.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("USSD_RESPONSE", $r4);

        virtualinvoke $r2.<android.os.ResultReceiver: void send(int,android.os.Bundle)>(-2, $r5);

     label6:
        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void sendVisualVoicemailSms(java.lang.String, int, java.lang.String, android.app.PendingIntent)
    {
        android.telephony.TelephonyManager r0;
        java.lang.String r1, r2;
        int i0, $i1;
        android.app.PendingIntent r3;

        r0 := @this: android.telephony.TelephonyManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: android.app.PendingIntent;

        $i1 = r0.<android.telephony.TelephonyManager: int mSubId>;

        virtualinvoke r0.<android.telephony.TelephonyManager: void sendVisualVoicemailSmsForSubscriber(int,java.lang.String,int,java.lang.String,android.app.PendingIntent)>($i1, r1, i0, r2, r3);

        return;
    }

    public void sendVisualVoicemailSmsForSubscriber(int, java.lang.String, int, java.lang.String, android.app.PendingIntent)
    {
        android.telephony.TelephonyManager r0;
        int i0, i1;
        java.lang.String r1, $r5, $r7, r9;
        android.app.PendingIntent r2;
        com.android.internal.telephony.ITelephony r3;
        android.content.Context $r4, $r6;
        android.os.RemoteException $r8;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        r9 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        r2 := @parameter4: android.app.PendingIntent;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 == null goto label4;

     label3:
        $r4 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.String getOpPackageName()>();

        $r6 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: java.lang.String getAttributionTag()>();

        interfaceinvoke r3.<com.android.internal.telephony.ITelephony: void sendVisualVoicemailSmsForSubscriber(java.lang.String,java.lang.String,int,java.lang.String,int,java.lang.String,android.app.PendingIntent)>($r5, $r7, i0, r9, i1, r1, r2);

     label4:
        goto label6;

     label5:
        $r8 := @caughtexception;

     label6:
        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public int setAllowedCarriers(int, java.util.List)
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1, $i2;
        java.util.List r1;
        boolean $z0;
        android.telephony.CarrierRestrictionRules$Builder $r2, $r3, $r4;
        android.telephony.CarrierRestrictionRules $r5;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.List;

        if r1 == null goto label3;

        $z0 = staticinvoke <android.telephony.SubscriptionManager: boolean isValidPhoneId(int)>(i0);

        if $z0 != 0 goto label1;

        goto label3;

     label1:
        $r2 = staticinvoke <android.telephony.CarrierRestrictionRules: android.telephony.CarrierRestrictionRules$Builder newBuilder()>();

        $r3 = virtualinvoke $r2.<android.telephony.CarrierRestrictionRules$Builder: android.telephony.CarrierRestrictionRules$Builder setAllowedCarriers(java.util.List)>(r1);

        $r4 = virtualinvoke $r3.<android.telephony.CarrierRestrictionRules$Builder: android.telephony.CarrierRestrictionRules$Builder setDefaultCarrierRestriction(int)>(0);

        $r5 = virtualinvoke $r4.<android.telephony.CarrierRestrictionRules$Builder: android.telephony.CarrierRestrictionRules build()>();

        $i1 = virtualinvoke r0.<android.telephony.TelephonyManager: int setCarrierRestrictionRules(android.telephony.CarrierRestrictionRules)>($r5);

        if $i1 != 0 goto label2;

        $i2 = interfaceinvoke r1.<java.util.List: int size()>();

        return $i2;

     label2:
        return -1;

     label3:
        return -1;
    }

    public boolean setAllowedNetworkTypes(long)
    {
        android.telephony.TelephonyManager r0;
        long l0;
        boolean z0;
        int $i1;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;

        r0 := @this: android.telephony.TelephonyManager;

        l0 := @parameter0: long;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label5;

     label3:
        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        z0 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: boolean setAllowedNetworkTypes(int,long)>($i1, l0);

     label4:
        return z0;

     label5:
        goto label7;

     label6:
        $r1 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "setAllowedNetworkTypes RemoteException", $r1);

     label7:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public void setAllowedNetworkTypesForReason(int, long)
    {
        android.telephony.TelephonyManager r0;
        int i0, $i2;
        long l1;
        java.lang.IllegalArgumentException $r1;
        android.os.RemoteException $r2;
        com.android.internal.telephony.ITelephony r4;
        java.lang.IllegalStateException r5;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        if i0 != 0 goto label8;

     label1:
        r4 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r4 == null goto label5;

     label3:
        $i2 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        interfaceinvoke r4.<com.android.internal.telephony.ITelephony: boolean setAllowedNetworkTypesForReason(int,int,long)>($i2, i0, l1);

     label4:
        goto label7;

     label5:
        r5 = new java.lang.IllegalStateException;

        specialinvoke r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("telephony service is null.");

        throw r5;

     label6:
        $r2 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "setAllowedNetworkTypesForReason RemoteException", $r2);

        virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

     label7:
        return;

     label8:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("invalid AllowedNetworkTypesReason.");

        throw $r1;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch android.os.RemoteException from label5 to label6 with label6;
    }

    public boolean setAlwaysAllowMmsData(boolean)
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        android.os.RemoteException $r1;
        boolean $z0, z1, z2;
        com.android.internal.telephony.ITelephony r3;

        r0 := @this: android.telephony.TelephonyManager;

        z1 := @parameter0: boolean;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 == null goto label5;

     label3:
        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        z2 = interfaceinvoke r3.<com.android.internal.telephony.ITelephony: boolean setAlwaysAllowMmsData(int,boolean)>($i0, z1);

     label4:
        return z2;

     label5:
        goto label7;

     label6:
        $r1 := @caughtexception;

        $z0 = specialinvoke r0.<android.telephony.TelephonyManager: boolean isSystemProcess()>();

        if $z0 != 0 goto label7;

        virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

     label7:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public void setAlwaysReportSignalStrength(boolean)
    {
        android.telephony.TelephonyManager r0;
        boolean z0;
        int $i0;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r3;

        r0 := @this: android.telephony.TelephonyManager;

        z0 := @parameter0: boolean;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 == null goto label4;

     label3:
        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        interfaceinvoke r3.<com.android.internal.telephony.ITelephony: void setAlwaysReportSignalStrength(int,boolean)>($i0, z0);

     label4:
        goto label6;

     label5:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "setAlwaysReportSignalStrength RemoteException", $r1);

        virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

     label6:
        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void setBasebandVersion(java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        java.lang.String r1;
        int $i0;

        r0 := @this: android.telephony.TelephonyManager;

        r1 := @parameter0: java.lang.String;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getPhoneId()>();

        virtualinvoke r0.<android.telephony.TelephonyManager: void setBasebandVersionForPhone(int,java.lang.String)>($i0, r1);

        return;
    }

    public void setBasebandVersionForPhone(int, java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        java.lang.String r1;
        boolean $z0;
        java.util.List $r2, $r3;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <android.telephony.SubscriptionManager: boolean isValidPhoneId(int)>(i0);

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <android.sysprop.TelephonyProperties: java.util.List baseband_version()>();

        $r3 = staticinvoke <android.telephony.TelephonyManager: java.util.List updateTelephonyProperty(java.util.List,int,java.lang.Object)>($r2, i0, r1);

        staticinvoke <android.sysprop.TelephonyProperties: void baseband_version(java.util.List)>($r3);

     label1:
        return;
    }

    public boolean setCallForwarding(android.telephony.CallForwardingInfo)
    {
        android.telephony.TelephonyManager r0;
        com.android.internal.telephony.ITelephony r1;
        boolean z0;
        java.lang.IllegalArgumentException $r2, $r3, $r5, $r6, $r7;
        java.lang.String $r4;
        int $i0, $i1, i4, i5;
        android.os.RemoteException $r8;
        java.lang.NullPointerException $r9;
        android.telephony.CallForwardingInfo r10;

        r0 := @this: android.telephony.TelephonyManager;

        r10 := @parameter0: android.telephony.CallForwardingInfo;

        if r10 == null goto label14;

        i4 = virtualinvoke r10.<android.telephony.CallForwardingInfo: int getStatus()>();

        if i4 == 1 goto label02;

        if i4 != 0 goto label01;

        goto label02;

     label01:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("callForwardingStatus is neither active nor inactive");

        throw $r7;

     label02:
        i5 = virtualinvoke r10.<android.telephony.CallForwardingInfo: int getReason()>();

        if i5 < 0 goto label13;

        if i5 > 5 goto label13;

        $r4 = virtualinvoke r10.<android.telephony.CallForwardingInfo: java.lang.String getNumber()>();

        if $r4 == null goto label12;

        $i0 = virtualinvoke r10.<android.telephony.CallForwardingInfo: int getTimeoutSeconds()>();

        if $i0 <= 0 goto label11;

     label03:
        r1 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label04:
        if r1 == null goto label07;

     label05:
        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        z0 = interfaceinvoke r1.<com.android.internal.telephony.ITelephony: boolean setCallForwarding(int,android.telephony.CallForwardingInfo)>($i1, r10);

     label06:
        return z0;

     label07:
        goto label10;

     label08:
        $r9 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "setCallForwarding NPE", $r9);

        goto label10;

     label09:
        $r8 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "setCallForwarding RemoteException", $r8);

     label10:
        return 0;

     label11:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("callForwarding timeout isn\'t positive");

        throw $r6;

     label12:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("callForwarding number is null");

        throw $r5;

     label13:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("callForwardingReason is out of range");

        throw $r3;

     label14:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("callForwardingInfo is null");

        throw $r2;

        catch android.os.RemoteException from label03 to label04 with label09;
        catch java.lang.NullPointerException from label03 to label04 with label08;
        catch android.os.RemoteException from label05 to label06 with label09;
        catch java.lang.NullPointerException from label05 to label06 with label08;
    }

    public boolean setCallWaitingStatus(boolean)
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        java.lang.NullPointerException $r1;
        android.os.RemoteException $r2;
        boolean z0, z1;
        com.android.internal.telephony.ITelephony r3;

        r0 := @this: android.telephony.TelephonyManager;

        z0 := @parameter0: boolean;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 == null goto label5;

     label3:
        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        z1 = interfaceinvoke r3.<com.android.internal.telephony.ITelephony: boolean setCallWaitingStatus(int,boolean)>($i0, z0);

     label4:
        return z1;

     label5:
        goto label8;

     label6:
        $r1 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "setCallWaitingStatus NPE", $r1);

        goto label8;

     label7:
        $r2 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "setCallWaitingStatus RemoteException", $r2);

     label8:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public void setCarrierDataEnabled(boolean)
    {
        android.telephony.TelephonyManager r0;
        boolean z0;
        int $i0, $i1;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;

        r0 := @this: android.telephony.TelephonyManager;

        z0 := @parameter0: boolean;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label4;

     label3:
        $i0 = staticinvoke <android.telephony.SubscriptionManager: int getDefaultDataSubscriptionId()>();

        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId(int)>($i0);

        interfaceinvoke r2.<com.android.internal.telephony.ITelephony: void carrierActionSetMeteredApnsEnabled(int,boolean)>($i1, z0);

     label4:
        goto label6;

     label5:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#setCarrierDataEnabled", $r1);

     label6:
        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void setCarrierInfoForImsiEncryption(android.telephony.ImsiEncryptionInfo)
    {
        android.telephony.TelephonyManager r0;
        com.android.internal.telephony.IPhoneSubInfo r1;
        android.content.Context $r2;
        int $i0;
        java.lang.String $r3;
        java.lang.NullPointerException $r4;
        android.os.RemoteException $r5;
        android.telephony.ImsiEncryptionInfo r6;

        r0 := @this: android.telephony.TelephonyManager;

        r6 := @parameter0: android.telephony.ImsiEncryptionInfo;

     label1:
        r1 = staticinvoke <android.telephony.TelephonyManager: com.android.internal.telephony.IPhoneSubInfo getSubscriberInfoService()>();

     label2:
        if r1 != null goto label3;

        return;

     label3:
        $i0 = r0.<android.telephony.TelephonyManager: int mSubId>;

        $r2 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.String getOpPackageName()>();

        interfaceinvoke r1.<com.android.internal.telephony.IPhoneSubInfo: void setCarrierInfoForImsiEncryption(int,java.lang.String,android.telephony.ImsiEncryptionInfo)>($i0, $r3, r6);

     label4:
        return;

     label5:
        $r5 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "setCarrierInfoForImsiEncryption RemoteException", $r5);

        return;

     label6:
        $r4 := @caughtexception;

        return;

        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label1 to label2 with label5;
        catch java.lang.NullPointerException from label3 to label4 with label6;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public int setCarrierRestrictionRules(android.telephony.CarrierRestrictionRules)
    {
        android.telephony.TelephonyManager r0;
        com.android.internal.telephony.ITelephony r1;
        int i0;
        android.os.RemoteException $r2;
        java.lang.NullPointerException $r3;
        android.telephony.CarrierRestrictionRules r4;

        r0 := @this: android.telephony.TelephonyManager;

        r4 := @parameter0: android.telephony.CarrierRestrictionRules;

     label1:
        r1 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r1 == null goto label5;

     label3:
        i0 = interfaceinvoke r1.<com.android.internal.telephony.ITelephony: int setAllowedCarriers(android.telephony.CarrierRestrictionRules)>(r4);

     label4:
        return i0;

     label5:
        goto label8;

     label6:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#setAllowedCarriers", $r3);

        goto label8;

     label7:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#setAllowedCarriers", $r2);

     label8:
        return 2;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public void setCarrierTestOverride(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        java.lang.String r1, r2, r3, r4, r5, r6, r9;
        com.android.internal.telephony.ITelephony r7;
        int $i0;
        android.os.RemoteException $r8;

        r0 := @this: android.telephony.TelephonyManager;

        r9 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String;

        r5 := @parameter5: java.lang.String;

        r6 := @parameter6: java.lang.String;

     label1:
        r7 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r7 == null goto label4;

     label3:
        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        interfaceinvoke r7.<com.android.internal.telephony.ITelephony: void setCarrierTestOverride(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($i0, r9, r1, r2, r3, r4, r5, r6, null, null);

     label4:
        goto label6;

     label5:
        $r8 := @caughtexception;

     label6:
        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void setCarrierTestOverride(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        java.lang.String r1, r2, r3, r4, r5, r6, r7, r8, r11;
        com.android.internal.telephony.ITelephony r9;
        int $i0;
        android.os.RemoteException $r10;

        r0 := @this: android.telephony.TelephonyManager;

        r11 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String;

        r5 := @parameter5: java.lang.String;

        r6 := @parameter6: java.lang.String;

        r7 := @parameter7: java.lang.String;

        r8 := @parameter8: java.lang.String;

     label1:
        r9 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r9 == null goto label4;

     label3:
        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        interfaceinvoke r9.<com.android.internal.telephony.ITelephony: void setCarrierTestOverride(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($i0, r11, r1, r2, r3, r4, r5, r6, r7, r8);

     label4:
        goto label6;

     label5:
        $r10 := @caughtexception;

     label6:
        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public boolean setCdmaRoamingMode(int)
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1;
        boolean z0;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label5;

     label3:
        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        z0 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: boolean setCdmaRoamingMode(int,int)>($i1, i0);

     label4:
        return z0;

     label5:
        goto label7;

     label6:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#setCdmaRoamingMode", $r1);

     label7:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public boolean setCdmaSubscriptionMode(int)
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1;
        boolean z0;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label5;

     label3:
        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        z0 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: boolean setCdmaSubscriptionMode(int,int)>($i1, i0);

     label4:
        return z0;

     label5:
        goto label7;

     label6:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#setCdmaSubscriptionMode", $r1);

     label7:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public void setCellInfoListRate(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        android.os.RemoteException $r1;
        java.lang.NullPointerException $r2;
        com.android.internal.telephony.ITelephony r3;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 == null goto label7;

     label3:
        interfaceinvoke r3.<com.android.internal.telephony.ITelephony: void setCellInfoListRate(int)>(i0);

     label4:
        goto label7;

     label5:
        $r2 := @caughtexception;

        goto label7;

     label6:
        $r1 := @caughtexception;

     label7:
        return;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.NullPointerException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public void setDataActivationState(int)
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        virtualinvoke r0.<android.telephony.TelephonyManager: void setDataActivationState(int,int)>($i1, i0);

        return;
    }

    public void setDataActivationState(int, int)
    {
        android.telephony.TelephonyManager r0;
        int i0, i1;
        java.lang.NullPointerException $r1;
        android.os.RemoteException $r2;
        com.android.internal.telephony.ITelephony r3;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 == null goto label7;

     label3:
        interfaceinvoke r3.<com.android.internal.telephony.ITelephony: void setDataActivationState(int,int)>(i0, i1);

     label4:
        goto label7;

     label5:
        $r1 := @caughtexception;

        goto label7;

     label6:
        $r2 := @caughtexception;

     label7:
        return;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.NullPointerException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public boolean setDataAllowedDuringVoiceCall(boolean)
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        android.os.RemoteException $r1;
        boolean $z0, z1, z2;
        com.android.internal.telephony.ITelephony r3;

        r0 := @this: android.telephony.TelephonyManager;

        z1 := @parameter0: boolean;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 == null goto label5;

     label3:
        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        z2 = interfaceinvoke r3.<com.android.internal.telephony.ITelephony: boolean setDataAllowedDuringVoiceCall(int,boolean)>($i0, z1);

     label4:
        return z2;

     label5:
        goto label7;

     label6:
        $r1 := @caughtexception;

        $z0 = specialinvoke r0.<android.telephony.TelephonyManager: boolean isSystemProcess()>();

        if $z0 != 0 goto label7;

        virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

     label7:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public void setDataEnabled(int, boolean)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        boolean z0;
        java.lang.String $r3;
        android.os.RemoteException $r4;
        java.lang.StringBuilder r5;
        com.android.internal.telephony.ITelephony r6;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

     label1:
        r5 = new java.lang.StringBuilder;

        specialinvoke r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setDataEnabled: enabled=");

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r3 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("TelephonyManager", $r3);

        r6 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r6 == null goto label4;

     label3:
        interfaceinvoke r6.<com.android.internal.telephony.ITelephony: void setUserDataEnabled(int,boolean)>(i0, z0);

     label4:
        goto label6;

     label5:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#setUserDataEnabled", $r4);

     label6:
        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void setDataEnabled(boolean)
    {
        android.telephony.TelephonyManager r0;
        boolean z0;
        int $i0, $i1;

        r0 := @this: android.telephony.TelephonyManager;

        z0 := @parameter0: boolean;

        $i0 = staticinvoke <android.telephony.SubscriptionManager: int getDefaultDataSubscriptionId()>();

        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId(int)>($i0);

        virtualinvoke r0.<android.telephony.TelephonyManager: void setDataEnabled(int,boolean)>($i1, z0);

        return;
    }

    public void setDataNetworkType(int)
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1, $i2;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        $i1 = staticinvoke <android.telephony.SubscriptionManager: int getDefaultDataSubscriptionId()>();

        $i2 = specialinvoke r0.<android.telephony.TelephonyManager: int getPhoneId(int)>($i1);

        virtualinvoke r0.<android.telephony.TelephonyManager: void setDataNetworkTypeForPhone(int,int)>($i2, i0);

        return;
    }

    public void setDataNetworkTypeForPhone(int, int)
    {
        android.telephony.TelephonyManager r0;
        int i0, i1;
        boolean $z0;
        java.util.List $r1, $r3;
        java.lang.String $r2;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = staticinvoke <android.telephony.SubscriptionManager: boolean isValidPhoneId(int)>(i0);

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <android.sysprop.TelephonyProperties: java.util.List data_network_type()>();

        $r2 = staticinvoke <android.telephony.ServiceState: java.lang.String rilRadioTechnologyToString(int)>(i1);

        $r3 = staticinvoke <android.telephony.TelephonyManager: java.util.List updateTelephonyProperty(java.util.List,int,java.lang.Object)>($r1, i0, $r2);

        staticinvoke <android.sysprop.TelephonyProperties: void data_network_type(java.util.List)>($r3);

     label1:
        return;
    }

    public void setDataRoamingEnabled(boolean)
    {
        android.telephony.TelephonyManager r0;
        boolean z0;
        int $i0, $i1;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;

        r0 := @this: android.telephony.TelephonyManager;

        z0 := @parameter0: boolean;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label4;

     label3:
        $i0 = staticinvoke <android.telephony.SubscriptionManager: int getDefaultDataSubscriptionId()>();

        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId(int)>($i0);

        interfaceinvoke r2.<com.android.internal.telephony.ITelephony: void setDataRoamingEnabled(int,boolean)>($i1, z0);

     label4:
        goto label6;

     label5:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#setDataRoamingEnabled", $r1);

     label6:
        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public int setForbiddenPlmns(java.util.List)
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1;
        java.lang.String $r1, $r2, $r6, $r8, $r12, $r14;
        android.os.RemoteException $r3;
        java.lang.StringBuilder $r4, $r10;
        java.lang.NullPointerException $r9;
        java.util.List r15;
        com.android.internal.telephony.ITelephony r16;

        r0 := @this: android.telephony.TelephonyManager;

        r15 := @parameter0: java.util.List;

     label1:
        r16 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r16 != null goto label3;

        return -1;

     label3:
        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $r1 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOpPackageName()>();

        $r2 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getAttributionTag()>();

        i0 = interfaceinvoke r16.<com.android.internal.telephony.ITelephony: int setForbiddenPlmns(int,int,java.util.List,java.lang.String,java.lang.String)>($i1, 2, r15, $r1, $r2);

     label4:
        return i0;

     label5:
        $r9 := @caughtexception;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setForbiddenPlmns NullPointerException: ");

        $r12 = virtualinvoke $r9.<java.lang.NullPointerException: java.lang.String getMessage()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("TelephonyManager", $r14);

        goto label7;

     label6:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setForbiddenPlmns RemoteException: ");

        $r6 = virtualinvoke $r3.<android.os.RemoteException: java.lang.String getMessage()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("TelephonyManager", $r8);

     label7:
        return -1;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.NullPointerException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public int setIccLockEnabled(boolean, java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        boolean z0;
        com.android.internal.telephony.ITelephony r1;
        int i0, $i1;
        android.os.RemoteException $r3;
        java.lang.String r4;

        r0 := @this: android.telephony.TelephonyManager;

        z0 := @parameter0: boolean;

        r4 := @parameter1: java.lang.String;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r4, "setIccLockEnabled password can\'t be null.");

     label1:
        r1 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r1 == null goto label5;

     label3:
        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        i0 = interfaceinvoke r1.<com.android.internal.telephony.ITelephony: int setIccLockEnabled(int,boolean,java.lang.String)>($i1, z0, r4);

     label4:
        return i0;

     label5:
        goto label7;

     label6:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "setIccLockEnabled RemoteException", $r3);

     label7:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public void setImsRegistrationState(boolean)
    {
        android.telephony.TelephonyManager r0;
        boolean z0;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;

        r0 := @this: android.telephony.TelephonyManager;

        z0 := @parameter0: boolean;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label4;

     label3:
        interfaceinvoke r2.<com.android.internal.telephony.ITelephony: void setImsRegistrationState(boolean)>(z0);

     label4:
        goto label6;

     label5:
        $r1 := @caughtexception;

     label6:
        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public boolean setLine1NumberForDisplay(int, java.lang.String, java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        java.lang.String r1, r5;
        com.android.internal.telephony.ITelephony r2;
        boolean z0;
        java.lang.NullPointerException $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        r5 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label5;

     label3:
        z0 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: boolean setLine1NumberForDisplayForSubscriber(int,java.lang.String,java.lang.String)>(i0, r5, r1);

     label4:
        return z0;

     label5:
        goto label8;

     label6:
        $r3 := @caughtexception;

        goto label8;

     label7:
        $r4 := @caughtexception;

     label8:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public boolean setLine1NumberForDisplay(java.lang.String, java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        java.lang.String r1, r2;
        int $i0;
        boolean $z0;

        r0 := @this: android.telephony.TelephonyManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $z0 = virtualinvoke r0.<android.telephony.TelephonyManager: boolean setLine1NumberForDisplay(int,java.lang.String,java.lang.String)>($i0, r1, r2);

        return $z0;
    }

    public void setMultiSimCarrierRestriction(boolean)
    {
        android.telephony.TelephonyManager r0;
        boolean z0;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;

        r0 := @this: android.telephony.TelephonyManager;

        z0 := @parameter0: boolean;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label4;

     label3:
        interfaceinvoke r2.<com.android.internal.telephony.ITelephony: void setMultiSimCarrierRestriction(boolean)>(z0);

     label4:
        goto label6;

     label5:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "setMultiSimCarrierRestriction RemoteException", $r1);

     label6:
        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void setNetworkOperatorName(java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        java.lang.String r1;
        int $i0;

        r0 := @this: android.telephony.TelephonyManager;

        r1 := @parameter0: java.lang.String;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getPhoneId()>();

        virtualinvoke r0.<android.telephony.TelephonyManager: void setNetworkOperatorNameForPhone(int,java.lang.String)>($i0, r1);

        return;
    }

    public void setNetworkOperatorNameForPhone(int, java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        java.lang.String r1;
        boolean $z0;
        java.util.List $r2, $r3;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <android.telephony.SubscriptionManager: boolean isValidPhoneId(int)>(i0);

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <android.sysprop.TelephonyProperties: java.util.List operator_alpha()>();

        $r3 = staticinvoke <android.telephony.TelephonyManager: java.util.List updateTelephonyProperty(java.util.List,int,java.lang.Object)>($r2, i0, r1);

        staticinvoke <android.sysprop.TelephonyProperties: void operator_alpha(java.util.List)>($r3);

     label1:
        return;
    }

    public void setNetworkOperatorNumeric(java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        java.lang.String r1;
        int $i0;

        r0 := @this: android.telephony.TelephonyManager;

        r1 := @parameter0: java.lang.String;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getPhoneId()>();

        virtualinvoke r0.<android.telephony.TelephonyManager: void setNetworkOperatorNumericForPhone(int,java.lang.String)>($i0, r1);

        return;
    }

    public void setNetworkOperatorNumericForPhone(int, java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        java.lang.String r1;
        boolean $z0;
        java.util.List $r2, $r3;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <android.telephony.SubscriptionManager: boolean isValidPhoneId(int)>(i0);

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <android.sysprop.TelephonyProperties: java.util.List operator_numeric()>();

        $r3 = staticinvoke <android.telephony.TelephonyManager: java.util.List updateTelephonyProperty(java.util.List,int,java.lang.Object)>($r2, i0, r1);

        staticinvoke <android.sysprop.TelephonyProperties: void operator_numeric(java.util.List)>($r3);

     label1:
        return;
    }

    public void setNetworkRoaming(boolean)
    {
        android.telephony.TelephonyManager r0;
        boolean z0;
        int $i0;

        r0 := @this: android.telephony.TelephonyManager;

        z0 := @parameter0: boolean;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getPhoneId()>();

        virtualinvoke r0.<android.telephony.TelephonyManager: void setNetworkRoamingForPhone(int,boolean)>($i0, z0);

        return;
    }

    public void setNetworkRoamingForPhone(int, boolean)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        boolean z0, $z1;
        java.util.List $r1, $r3;
        java.lang.Boolean $r2;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $z1 = staticinvoke <android.telephony.SubscriptionManager: boolean isValidPhoneId(int)>(i0);

        if $z1 == 0 goto label1;

        $r1 = staticinvoke <android.sysprop.TelephonyProperties: java.util.List operator_is_roaming()>();

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r3 = staticinvoke <android.telephony.TelephonyManager: java.util.List updateTelephonyProperty(java.util.List,int,java.lang.Object)>($r1, i0, $r2);

        staticinvoke <android.sysprop.TelephonyProperties: void operator_is_roaming(java.util.List)>($r3);

     label1:
        return;
    }

    public void setNetworkSelectionModeAutomatic()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        android.os.RemoteException $r1;
        java.lang.NullPointerException $r2;
        com.android.internal.telephony.ITelephony r3;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 == null goto label7;

     label3:
        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        interfaceinvoke r3.<com.android.internal.telephony.ITelephony: void setNetworkSelectionModeAutomatic(int)>($i0);

     label4:
        goto label7;

     label5:
        $r2 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "setNetworkSelectionModeAutomatic NPE", $r2);

        goto label7;

     label6:
        $r1 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "setNetworkSelectionModeAutomatic RemoteException", $r1);

     label7:
        return;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.NullPointerException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public boolean setNetworkSelectionModeManual(com.android.internal.telephony.OperatorInfo, boolean)
    {
        android.telephony.TelephonyManager r0;
        com.android.internal.telephony.ITelephony r1;
        int $i0;
        android.os.RemoteException $r2;
        com.android.internal.telephony.OperatorInfo r3;
        boolean z0, z1;

        r0 := @this: android.telephony.TelephonyManager;

        r3 := @parameter0: com.android.internal.telephony.OperatorInfo;

        z0 := @parameter1: boolean;

     label1:
        r1 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r1 == null goto label5;

     label3:
        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        z1 = interfaceinvoke r1.<com.android.internal.telephony.ITelephony: boolean setNetworkSelectionModeManual(int,com.android.internal.telephony.OperatorInfo,boolean)>($i0, r3, z0);

     label4:
        return z1;

     label5:
        goto label7;

     label6:
        $r2 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "setNetworkSelectionModeManual RemoteException", $r2);

     label7:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public boolean setNetworkSelectionModeManual(java.lang.String, boolean)
    {
        android.telephony.TelephonyManager r0;
        java.lang.String r1;
        boolean z0, $z1;
        com.android.internal.telephony.OperatorInfo $r2;

        r0 := @this: android.telephony.TelephonyManager;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = new com.android.internal.telephony.OperatorInfo;

        specialinvoke $r2.<com.android.internal.telephony.OperatorInfo: void <init>(java.lang.String,java.lang.String,java.lang.String)>("", "", r1);

        $z1 = virtualinvoke r0.<android.telephony.TelephonyManager: boolean setNetworkSelectionModeManual(com.android.internal.telephony.OperatorInfo,boolean)>($r2, z0);

        return $z1;
    }

    public boolean setNetworkSelectionModeManual(java.lang.String, boolean, int)
    {
        android.telephony.TelephonyManager r0;
        java.lang.String r1;
        boolean z0, $z1;
        int i0;
        com.android.internal.telephony.OperatorInfo $r2;

        r0 := @this: android.telephony.TelephonyManager;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        $r2 = new com.android.internal.telephony.OperatorInfo;

        specialinvoke $r2.<com.android.internal.telephony.OperatorInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,int)>("", "", r1, i0);

        $z1 = virtualinvoke r0.<android.telephony.TelephonyManager: boolean setNetworkSelectionModeManual(com.android.internal.telephony.OperatorInfo,boolean)>($r2, z0);

        return $z1;
    }

    public boolean setOperatorBrandOverride(int, java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        com.android.internal.telephony.ITelephony r1;
        boolean z0;
        android.os.RemoteException $r2;
        java.lang.NullPointerException $r3;
        java.lang.String r4;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        r4 := @parameter1: java.lang.String;

     label1:
        r1 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r1 == null goto label5;

     label3:
        z0 = interfaceinvoke r1.<com.android.internal.telephony.ITelephony: boolean setOperatorBrandOverride(int,java.lang.String)>(i0, r4);

     label4:
        return z0;

     label5:
        goto label8;

     label6:
        $r3 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "setOperatorBrandOverride NPE", $r3);

        goto label8;

     label7:
        $r2 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "setOperatorBrandOverride RemoteException", $r2);

     label8:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public boolean setOperatorBrandOverride(java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        java.lang.String r1;
        int $i0;
        boolean $z0;

        r0 := @this: android.telephony.TelephonyManager;

        r1 := @parameter0: java.lang.String;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $z0 = virtualinvoke r0.<android.telephony.TelephonyManager: boolean setOperatorBrandOverride(int,java.lang.String)>($i0, r1);

        return $z0;
    }

    public boolean setOpportunisticNetworkState(boolean)
    {
        android.telephony.TelephonyManager r0;
        boolean z0, z2;
        com.android.internal.telephony.IOns r1;
        android.os.RemoteException $r2;
        android.content.Context r3;
        java.lang.String r4;

        r0 := @this: android.telephony.TelephonyManager;

        z0 := @parameter0: boolean;

        r3 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        if r3 == null goto label1;

        r4 = virtualinvoke r3.<android.content.Context: java.lang.String getOpPackageName()>();

        goto label2;

     label1:
        r4 = "<unknown>";

     label2:
        z2 = 0;

     label3:
        r1 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.IOns getIOns()>();

     label4:
        if r1 == null goto label6;

     label5:
        z2 = interfaceinvoke r1.<com.android.internal.telephony.IOns: boolean setEnable(boolean,java.lang.String)>(z0, r4);

     label6:
        goto label8;

     label7:
        $r2 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "enableOpportunisticNetwork RemoteException", $r2);

        z2 = 0;

     label8:
        return z2;

        catch android.os.RemoteException from label3 to label4 with label7;
        catch android.os.RemoteException from label5 to label6 with label7;
    }

    public void setPhoneType(int)
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getPhoneId()>();

        virtualinvoke r0.<android.telephony.TelephonyManager: void setPhoneType(int,int)>($i1, i0);

        return;
    }

    public void setPhoneType(int, int)
    {
        android.telephony.TelephonyManager r0;
        int i0, i1;
        boolean $z0;
        java.util.List $r1, $r3;
        java.lang.Integer $r2;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = staticinvoke <android.telephony.SubscriptionManager: boolean isValidPhoneId(int)>(i0);

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <android.sysprop.TelephonyProperties: java.util.List current_active_phone()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r3 = staticinvoke <android.telephony.TelephonyManager: java.util.List updateTelephonyProperty(java.util.List,int,java.lang.Object)>($r1, i0, $r2);

        staticinvoke <android.sysprop.TelephonyProperties: void current_active_phone(java.util.List)>($r3);

     label1:
        return;
    }

    public void setPolicyDataEnabled(boolean)
    {
        android.telephony.TelephonyManager r0;
        boolean z0;
        int $i0;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;

        r0 := @this: android.telephony.TelephonyManager;

        z0 := @parameter0: boolean;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label4;

     label3:
        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        interfaceinvoke r2.<com.android.internal.telephony.ITelephony: void setPolicyDataEnabled(boolean,int)>(z0, $i0);

     label4:
        goto label6;

     label5:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#setPolicyDataEnabled", $r1);

     label6:
        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public boolean setPreferredNetworkType(int, int)
    {
        android.telephony.TelephonyManager r0;
        int i0, i1;
        boolean z0;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label5;

     label3:
        z0 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: boolean setPreferredNetworkType(int,int)>(i0, i1);

     label4:
        return z0;

     label5:
        goto label7;

     label6:
        $r1 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "setPreferredNetworkType RemoteException", $r1);

     label7:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public boolean setPreferredNetworkTypeBitmask(long)
    {
        android.telephony.TelephonyManager r0;
        long l0;
        boolean z0;
        int $i1, $i2, $i3;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;

        r0 := @this: android.telephony.TelephonyManager;

        l0 := @parameter0: long;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label5;

     label3:
        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $i2 = (int) l0;

        $i3 = staticinvoke <android.telephony.RadioAccessFamily: int getNetworkTypeFromRaf(int)>($i2);

        z0 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: boolean setPreferredNetworkType(int,int)>($i1, $i3);

     label4:
        return z0;

     label5:
        goto label7;

     label6:
        $r1 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "setPreferredNetworkTypeBitmask RemoteException", $r1);

     label7:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public boolean setPreferredNetworkTypeToGlobal()
    {
        android.telephony.TelephonyManager r0;
        int $i0;
        boolean $z0;

        r0 := @this: android.telephony.TelephonyManager;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $z0 = virtualinvoke r0.<android.telephony.TelephonyManager: boolean setPreferredNetworkTypeToGlobal(int)>($i0);

        return $z0;
    }

    public boolean setPreferredNetworkTypeToGlobal(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        boolean $z0;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<android.telephony.TelephonyManager: boolean setPreferredNetworkType(int,int)>(i0, 10);

        return $z0;
    }

    public void setPreferredOpportunisticDataSubscription(int, boolean, java.util.concurrent.Executor, java.util.function.Consumer)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        boolean z0;
        java.util.function.Consumer r1;
        com.android.internal.telephony.IOns r2;
        long l1;
        android.telephony.TelephonyManager$5 r3;
        java.lang.Throwable $r4;
        android.os.RemoteException $r5;
        java.util.concurrent.Executor r6;
        android.content.Context r7;
        java.lang.String r8;
        android.telephony._$$Lambda$TelephonyManager$bFqGX37e1Rs_GfEX9XeyjT1t0Ug r9;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r6 := @parameter2: java.util.concurrent.Executor;

        r1 := @parameter3: java.util.function.Consumer;

        r7 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        if r7 == null goto label01;

        r8 = virtualinvoke r7.<android.content.Context: java.lang.String getOpPackageName()>();

        goto label02;

     label01:
        r8 = "<unknown>";

     label02:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.IOns getIOns()>();

     label03:
        if r2 != null goto label12;

        if r6 == null goto label11;

        if r1 != null goto label04;

        goto label11;

     label04:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label05:
        r9 = new android.telephony._$$Lambda$TelephonyManager$bFqGX37e1Rs_GfEX9XeyjT1t0Ug;

        specialinvoke r9.<android.telephony._$$Lambda$TelephonyManager$bFqGX37e1Rs_GfEX9XeyjT1t0Ug: void <init>(java.util.function.Consumer)>(r1);

        interfaceinvoke r6.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r9);

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label07:
        return;

     label08:
        $r4 := @caughtexception;

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label10:
        throw $r4;

     label11:
        return;

     label12:
        r3 = new android.telephony.TelephonyManager$5;

        specialinvoke r3.<android.telephony.TelephonyManager$5: void <init>(android.telephony.TelephonyManager,java.util.concurrent.Executor,java.util.function.Consumer)>(r0, r6, r1);

     label13:
        interfaceinvoke r2.<com.android.internal.telephony.IOns: void setPreferredDataSubscriptionId(int,boolean,com.android.internal.telephony.ISetOpportunisticDataCallback,java.lang.String)>(i0, z0, r3, r8);

     label14:
        goto label16;

     label15:
        $r5 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "setPreferredDataSubscriptionId RemoteException", $r5);

     label16:
        return;

        catch android.os.RemoteException from label02 to label03 with label15;
        catch android.os.RemoteException from label04 to label05 with label15;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch android.os.RemoteException from label06 to label07 with label15;
        catch android.os.RemoteException from label09 to label10 with label15;
        catch android.os.RemoteException from label10 to label11 with label15;
        catch android.os.RemoteException from label12 to label13 with label15;
        catch android.os.RemoteException from label13 to label14 with label15;
    }

    public boolean setRadio(boolean)
    {
        android.telephony.TelephonyManager r0;
        android.os.RemoteException $r1;
        boolean z0, z1;
        com.android.internal.telephony.ITelephony r2;

        r0 := @this: android.telephony.TelephonyManager;

        z0 := @parameter0: boolean;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label5;

     label3:
        z1 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: boolean setRadio(boolean)>(z0);

     label4:
        return z1;

     label5:
        goto label7;

     label6:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#setRadio", $r1);

     label7:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public void setRadioEnabled(boolean)
    {
        android.telephony.TelephonyManager r0;
        boolean z0;
        int $i0, $i1;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;

        r0 := @this: android.telephony.TelephonyManager;

        z0 := @parameter0: boolean;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label4;

     label3:
        $i0 = staticinvoke <android.telephony.SubscriptionManager: int getDefaultDataSubscriptionId()>();

        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId(int)>($i0);

        interfaceinvoke r2.<com.android.internal.telephony.ITelephony: void carrierActionSetRadioEnabled(int,boolean)>($i1, z0);

     label4:
        goto label6;

     label5:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#carrierActionSetRadioEnabled", $r1);

     label6:
        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public boolean setRadioPower(boolean)
    {
        android.telephony.TelephonyManager r0;
        android.os.RemoteException $r1;
        boolean z0, z1;
        com.android.internal.telephony.ITelephony r2;

        r0 := @this: android.telephony.TelephonyManager;

        z0 := @parameter0: boolean;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label5;

     label3:
        z1 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: boolean setRadioPower(boolean)>(z0);

     label4:
        return z1;

     label5:
        goto label7;

     label6:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#setRadioPower", $r1);

     label7:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public boolean setRoamingOverride(int, java.util.List, java.util.List, java.util.List, java.util.List)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        java.util.List r1, r2, r3, r7;
        com.android.internal.telephony.ITelephony r4;
        boolean z0;
        java.lang.NullPointerException $r5;
        android.os.RemoteException $r6;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        r7 := @parameter1: java.util.List;

        r1 := @parameter2: java.util.List;

        r2 := @parameter3: java.util.List;

        r3 := @parameter4: java.util.List;

     label1:
        r4 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r4 == null goto label5;

     label3:
        z0 = interfaceinvoke r4.<com.android.internal.telephony.ITelephony: boolean setRoamingOverride(int,java.util.List,java.util.List,java.util.List,java.util.List)>(i0, r7, r1, r2, r3);

     label4:
        return z0;

     label5:
        goto label8;

     label6:
        $r5 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "setRoamingOverride NPE", $r5);

        goto label8;

     label7:
        $r6 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "setRoamingOverride RemoteException", $r6);

     label8:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public boolean setRoamingOverride(java.util.List, java.util.List, java.util.List, java.util.List)
    {
        android.telephony.TelephonyManager r0;
        java.util.List r1, r2, r3, r4;
        int $i0;
        boolean $z0;

        r0 := @this: android.telephony.TelephonyManager;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: java.util.List;

        r4 := @parameter3: java.util.List;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $z0 = virtualinvoke r0.<android.telephony.TelephonyManager: boolean setRoamingOverride(int,java.util.List,java.util.List,java.util.List,java.util.List)>($i0, r1, r2, r3, r4);

        return $z0;
    }

    public void setSimCountryIso(java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        java.lang.String r1;
        int $i0;

        r0 := @this: android.telephony.TelephonyManager;

        r1 := @parameter0: java.lang.String;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getPhoneId()>();

        virtualinvoke r0.<android.telephony.TelephonyManager: void setSimCountryIsoForPhone(int,java.lang.String)>($i0, r1);

        return;
    }

    public void setSimCountryIsoForPhone(int, java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        java.lang.String r1;
        boolean $z0;
        java.util.List $r2, $r3;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <android.telephony.SubscriptionManager: boolean isValidPhoneId(int)>(i0);

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <android.sysprop.TelephonyProperties: java.util.List icc_operator_iso_country()>();

        $r3 = staticinvoke <android.telephony.TelephonyManager: java.util.List updateTelephonyProperty(java.util.List,int,java.lang.Object)>($r2, i0, r1);

        staticinvoke <android.sysprop.TelephonyProperties: void icc_operator_iso_country(java.util.List)>($r3);

     label1:
        return;
    }

    public void setSimOperatorName(java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        java.lang.String r1;
        int $i0;

        r0 := @this: android.telephony.TelephonyManager;

        r1 := @parameter0: java.lang.String;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getPhoneId()>();

        virtualinvoke r0.<android.telephony.TelephonyManager: void setSimOperatorNameForPhone(int,java.lang.String)>($i0, r1);

        return;
    }

    public void setSimOperatorNameForPhone(int, java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        java.lang.String r1;
        boolean $z0;
        java.util.List $r2, $r3;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <android.telephony.SubscriptionManager: boolean isValidPhoneId(int)>(i0);

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <android.sysprop.TelephonyProperties: java.util.List icc_operator_alpha()>();

        $r3 = staticinvoke <android.telephony.TelephonyManager: java.util.List updateTelephonyProperty(java.util.List,int,java.lang.Object)>($r2, i0, r1);

        staticinvoke <android.sysprop.TelephonyProperties: void icc_operator_alpha(java.util.List)>($r3);

     label1:
        return;
    }

    public void setSimOperatorNumeric(java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        java.lang.String r1;
        int $i0;

        r0 := @this: android.telephony.TelephonyManager;

        r1 := @parameter0: java.lang.String;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getPhoneId()>();

        virtualinvoke r0.<android.telephony.TelephonyManager: void setSimOperatorNumericForPhone(int,java.lang.String)>($i0, r1);

        return;
    }

    public void setSimOperatorNumericForPhone(int, java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        java.lang.String r1;
        boolean $z0;
        java.util.List $r2, $r3;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <android.telephony.SubscriptionManager: boolean isValidPhoneId(int)>(i0);

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <android.sysprop.TelephonyProperties: java.util.List icc_operator_numeric()>();

        $r3 = staticinvoke <android.telephony.TelephonyManager: java.util.List updateTelephonyProperty(java.util.List,int,java.lang.Object)>($r2, i0, r1);

        staticinvoke <android.sysprop.TelephonyProperties: void icc_operator_numeric(java.util.List)>($r3);

     label1:
        return;
    }

    public void setSimPowerState(int)
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<android.telephony.TelephonyManager: int getSlotIndex()>();

        virtualinvoke r0.<android.telephony.TelephonyManager: void setSimPowerStateForSlot(int,int)>($i1, i0);

        return;
    }

    public void setSimPowerStateForSlot(int, int)
    {
        android.telephony.TelephonyManager r0;
        int i0, i1;
        android.os.RemoteException $r1;
        java.lang.Throwable $r2;
        com.android.internal.telephony.ITelephony r3;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 == null goto label7;

     label3:
        interfaceinvoke r3.<com.android.internal.telephony.ITelephony: void setSimPowerStateForSlot(int,int)>(i0, i1);

     label4:
        goto label7;

     label5:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Permission error calling ITelephony#setSimPowerStateForSlot", $r2);

        goto label7;

     label6:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#setSimPowerStateForSlot", $r1);

     label7:
        return;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.SecurityException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch java.lang.SecurityException from label3 to label4 with label5;
    }

    public void setSimState(java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        java.lang.String r1;
        int $i0;

        r0 := @this: android.telephony.TelephonyManager;

        r1 := @parameter0: java.lang.String;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getPhoneId()>();

        virtualinvoke r0.<android.telephony.TelephonyManager: void setSimStateForPhone(int,java.lang.String)>($i0, r1);

        return;
    }

    public void setSimStateForPhone(int, java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        java.lang.String r1;
        boolean $z0;
        java.util.List $r2, $r3;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <android.telephony.SubscriptionManager: boolean isValidPhoneId(int)>(i0);

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <android.sysprop.TelephonyProperties: java.util.List sim_state()>();

        $r3 = staticinvoke <android.telephony.TelephonyManager: java.util.List updateTelephonyProperty(java.util.List,int,java.lang.Object)>($r2, i0, r1);

        staticinvoke <android.sysprop.TelephonyProperties: void sim_state(java.util.List)>($r3);

     label1:
        return;
    }

    public void setSystemSelectionChannels(java.util.List)
    {
        android.telephony.TelephonyManager r0;
        java.util.List r1;

        r0 := @this: android.telephony.TelephonyManager;

        r1 := @parameter0: java.util.List;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "Specifiers must not be null.");

        specialinvoke r0.<android.telephony.TelephonyManager: void setSystemSelectionChannelsInternal(java.util.List,java.util.concurrent.Executor,java.util.function.Consumer)>(r1, null, null);

        return;
    }

    public void setSystemSelectionChannels(java.util.List, java.util.concurrent.Executor, java.util.function.Consumer)
    {
        android.telephony.TelephonyManager r0;
        java.util.List r1;
        java.util.concurrent.Executor r2;
        java.util.function.Consumer r3;

        r0 := @this: android.telephony.TelephonyManager;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.concurrent.Executor;

        r3 := @parameter2: java.util.function.Consumer;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "Specifiers must not be null.");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r2, "Executor must not be null.");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r3, "Callback must not be null.");

        specialinvoke r0.<android.telephony.TelephonyManager: void setSystemSelectionChannelsInternal(java.util.List,java.util.concurrent.Executor,java.util.function.Consumer)>(r1, r2, r3);

        return;
    }

    public void setVisualVoicemailEnabled(android.telecom.PhoneAccountHandle, boolean)
    {
        android.telephony.TelephonyManager r0;
        android.telecom.PhoneAccountHandle r1;
        boolean z0;

        r0 := @this: android.telephony.TelephonyManager;

        r1 := @parameter0: android.telecom.PhoneAccountHandle;

        z0 := @parameter1: boolean;

        return;
    }

    public void setVisualVoicemailSmsFilterSettings(android.telephony.VisualVoicemailSmsFilterSettings)
    {
        android.telephony.TelephonyManager r0;
        android.telephony.VisualVoicemailSmsFilterSettings r1;
        int $i0, $i1;

        r0 := @this: android.telephony.TelephonyManager;

        r1 := @parameter0: android.telephony.VisualVoicemailSmsFilterSettings;

        if r1 != null goto label1;

        $i1 = r0.<android.telephony.TelephonyManager: int mSubId>;

        virtualinvoke r0.<android.telephony.TelephonyManager: void disableVisualVoicemailSmsFilter(int)>($i1);

        goto label2;

     label1:
        $i0 = r0.<android.telephony.TelephonyManager: int mSubId>;

        virtualinvoke r0.<android.telephony.TelephonyManager: void enableVisualVoicemailSmsFilter(int,android.telephony.VisualVoicemailSmsFilterSettings)>($i0, r1);

     label2:
        return;
    }

    public void setVoiceActivationState(int)
    {
        android.telephony.TelephonyManager r0;
        int i0, $i1;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        virtualinvoke r0.<android.telephony.TelephonyManager: void setVoiceActivationState(int,int)>($i1, i0);

        return;
    }

    public void setVoiceActivationState(int, int)
    {
        android.telephony.TelephonyManager r0;
        int i0, i1;
        android.os.RemoteException $r1;
        java.lang.NullPointerException $r2;
        com.android.internal.telephony.ITelephony r3;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 == null goto label7;

     label3:
        interfaceinvoke r3.<com.android.internal.telephony.ITelephony: void setVoiceActivationState(int,int)>(i0, i1);

     label4:
        goto label7;

     label5:
        $r2 := @caughtexception;

        goto label7;

     label6:
        $r1 := @caughtexception;

     label7:
        return;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.NullPointerException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch java.lang.NullPointerException from label3 to label4 with label5;
    }

    public boolean setVoiceMailNumber(int, java.lang.String, java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        java.lang.String r1, r5;
        com.android.internal.telephony.ITelephony r2;
        boolean z0;
        java.lang.NullPointerException $r3;
        android.os.RemoteException $r4;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        r5 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label5;

     label3:
        z0 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: boolean setVoiceMailNumber(int,java.lang.String,java.lang.String)>(i0, r5, r1);

     label4:
        return z0;

     label5:
        goto label8;

     label6:
        $r3 := @caughtexception;

        goto label8;

     label7:
        $r4 := @caughtexception;

     label8:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label6;
    }

    public boolean setVoiceMailNumber(java.lang.String, java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        java.lang.String r1, r2;
        int $i0;
        boolean $z0;

        r0 := @this: android.telephony.TelephonyManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        $z0 = virtualinvoke r0.<android.telephony.TelephonyManager: boolean setVoiceMailNumber(int,java.lang.String,java.lang.String)>($i0, r1, r2);

        return $z0;
    }

    public void setVoicemailRingtoneUri(android.telecom.PhoneAccountHandle, android.net.Uri)
    {
        android.telephony.TelephonyManager r0;
        android.net.Uri r1;
        com.android.internal.telephony.ITelephony r2;
        java.lang.String $r3;
        android.os.RemoteException $r4;
        android.telecom.PhoneAccountHandle r5;

        r0 := @this: android.telephony.TelephonyManager;

        r5 := @parameter0: android.telecom.PhoneAccountHandle;

        r1 := @parameter1: android.net.Uri;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label4;

     label3:
        $r3 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOpPackageName()>();

        interfaceinvoke r2.<com.android.internal.telephony.ITelephony: void setVoicemailRingtoneUri(java.lang.String,android.telecom.PhoneAccountHandle,android.net.Uri)>($r3, r5, r1);

     label4:
        goto label6;

     label5:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#setVoicemailRingtoneUri", $r4);

     label6:
        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void setVoicemailVibrationEnabled(android.telecom.PhoneAccountHandle, boolean)
    {
        android.telephony.TelephonyManager r0;
        boolean z0;
        com.android.internal.telephony.ITelephony r1;
        java.lang.String $r2;
        android.os.RemoteException $r3;
        android.telecom.PhoneAccountHandle r4;

        r0 := @this: android.telephony.TelephonyManager;

        r4 := @parameter0: android.telecom.PhoneAccountHandle;

        z0 := @parameter1: boolean;

     label1:
        r1 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r1 == null goto label4;

     label3:
        $r2 = specialinvoke r0.<android.telephony.TelephonyManager: java.lang.String getOpPackageName()>();

        interfaceinvoke r1.<com.android.internal.telephony.ITelephony: void setVoicemailVibrationEnabled(java.lang.String,android.telecom.PhoneAccountHandle,boolean)>($r2, r4, z0);

     label4:
        goto label6;

     label5:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#isVoicemailVibrationEnabled", $r3);

     label6:
        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void shutdownAllRadios()
    {
        android.telephony.TelephonyManager r0;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r3;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r3 == null goto label4;

     label3:
        interfaceinvoke r3.<com.android.internal.telephony.ITelephony: void shutdownMobileRadios()>();

     label4:
        goto label6;

     label5:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#shutdownAllRadios", $r1);

        virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

     label6:
        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void silenceRinger()
    {
        android.telephony.TelephonyManager r0;

        r0 := @this: android.telephony.TelephonyManager;

        return;
    }

    public boolean supplyPin(java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        com.android.internal.telephony.ITelephony r1;
        boolean z0;
        int $i0;
        android.os.RemoteException $r2;
        java.lang.String r3;

        r0 := @this: android.telephony.TelephonyManager;

        r3 := @parameter0: java.lang.String;

     label1:
        r1 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r1 == null goto label5;

     label3:
        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        z0 = interfaceinvoke r1.<com.android.internal.telephony.ITelephony: boolean supplyPinForSubscriber(int,java.lang.String)>($i0, r3);

     label4:
        return z0;

     label5:
        goto label7;

     label6:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#supplyPinForSubscriber", $r2);

     label7:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public android.telephony.PinResult supplyPinReportPinResult(java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        com.android.internal.telephony.ITelephony r1;
        int $i0, $i1, $i2;
        android.telephony.PinResult $r2;
        android.os.RemoteException $r3;
        java.lang.String r4;
        int[] r5;

        r0 := @this: android.telephony.TelephonyManager;

        r4 := @parameter0: java.lang.String;

     label1:
        r1 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r1 == null goto label5;

     label3:
        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        r5 = interfaceinvoke r1.<com.android.internal.telephony.ITelephony: int[] supplyPinReportResultForSubscriber(int,java.lang.String)>($i0, r4);

        $r2 = new android.telephony.PinResult;

        $i2 = r5[0];

        $i1 = r5[1];

        specialinvoke $r2.<android.telephony.PinResult: void <init>(int,int)>($i2, $i1);

     label4:
        return $r2;

     label5:
        goto label7;

     label6:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#supplyPinReportResultForSubscriber", $r3);

     label7:
        return null;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public int[] supplyPinReportResult(java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        com.android.internal.telephony.ITelephony r1;
        int[] $r2, r5;
        int $i0;
        android.os.RemoteException $r3;
        java.lang.String r4;

        r0 := @this: android.telephony.TelephonyManager;

        r4 := @parameter0: java.lang.String;

     label1:
        r1 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r1 == null goto label5;

     label3:
        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        r5 = interfaceinvoke r1.<com.android.internal.telephony.ITelephony: int[] supplyPinReportResultForSubscriber(int,java.lang.String)>($i0, r4);

     label4:
        return r5;

     label5:
        goto label7;

     label6:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#supplyPinReportResultForSubscriber", $r3);

     label7:
        $r2 = newarray (int)[0];

        return $r2;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public boolean supplyPuk(java.lang.String, java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        java.lang.String r1, r4;
        com.android.internal.telephony.ITelephony r2;
        boolean z0;
        int $i0;
        android.os.RemoteException $r3;

        r0 := @this: android.telephony.TelephonyManager;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label5;

     label3:
        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        z0 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: boolean supplyPukForSubscriber(int,java.lang.String,java.lang.String)>($i0, r4, r1);

     label4:
        return z0;

     label5:
        goto label7;

     label6:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#supplyPukForSubscriber", $r3);

     label7:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public android.telephony.PinResult supplyPukReportPinResult(java.lang.String, java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        java.lang.String r1, r5;
        com.android.internal.telephony.ITelephony r2;
        int $i0, $i1, $i2;
        android.telephony.PinResult $r3;
        android.os.RemoteException $r4;
        int[] r6;

        r0 := @this: android.telephony.TelephonyManager;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label5;

     label3:
        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        r6 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: int[] supplyPukReportResultForSubscriber(int,java.lang.String,java.lang.String)>($i0, r5, r1);

        $r3 = new android.telephony.PinResult;

        $i2 = r6[0];

        $i1 = r6[1];

        specialinvoke $r3.<android.telephony.PinResult: void <init>(int,int)>($i2, $i1);

     label4:
        return $r3;

     label5:
        goto label7;

     label6:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#]", $r4);

     label7:
        return null;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public int[] supplyPukReportResult(java.lang.String, java.lang.String)
    {
        android.telephony.TelephonyManager r0;
        java.lang.String r1, r5;
        com.android.internal.telephony.ITelephony r2;
        int[] $r3, r6;
        int $i0;
        android.os.RemoteException $r4;

        r0 := @this: android.telephony.TelephonyManager;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label5;

     label3:
        $i0 = specialinvoke r0.<android.telephony.TelephonyManager: int getSubId()>();

        r6 = interfaceinvoke r2.<com.android.internal.telephony.ITelephony: int[] supplyPukReportResultForSubscriber(int,java.lang.String,java.lang.String)>($i0, r5, r1);

     label4:
        return r6;

     label5:
        goto label7;

     label6:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#]", $r4);

     label7:
        $r3 = newarray (int)[0];

        return $r3;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    public void switchMultiSimConfig(int)
    {
        android.telephony.TelephonyManager r0;
        int i0;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label4;

     label3:
        interfaceinvoke r2.<com.android.internal.telephony.ITelephony: void switchMultiSimConfig(int)>(i0);

     label4:
        goto label6;

     label5:
        $r1 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "switchMultiSimConfig RemoteException", $r1);

     label6:
        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public boolean switchSlots(int[])
    {
        android.telephony.TelephonyManager r0;
        com.android.internal.telephony.ITelephony r1;
        boolean z0;
        android.os.RemoteException $r2;
        int[] r3;

        r0 := @this: android.telephony.TelephonyManager;

        r3 := @parameter0: int[];

     label1:
        r1 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r1 != null goto label3;

        return 0;

     label3:
        z0 = interfaceinvoke r1.<com.android.internal.telephony.ITelephony: boolean switchSlots(int[])>(r3);

     label4:
        return z0;

     label5:
        $r2 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void toggleRadioOnOff()
    {
        android.telephony.TelephonyManager r0;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label4;

     label3:
        interfaceinvoke r2.<com.android.internal.telephony.ITelephony: void toggleRadioOnOff()>();

     label4:
        goto label6;

     label5:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#toggleRadioOnOff", $r1);

     label6:
        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void unregisterImsFeatureCallback(int, int, com.android.ims.internal.IImsServiceFeatureCallback)
    {
        android.telephony.TelephonyManager r0;
        int i0, i1;
        android.os.RemoteException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r4, $r6;
        com.android.ims.internal.IImsServiceFeatureCallback r7;
        com.android.internal.telephony.ITelephony r8;

        r0 := @this: android.telephony.TelephonyManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r7 := @parameter2: com.android.ims.internal.IImsServiceFeatureCallback;

     label1:
        r8 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r8 == null goto label4;

     label3:
        interfaceinvoke r8.<com.android.internal.telephony.ITelephony: void unregisterImsFeatureCallback(int,int,com.android.ims.internal.IImsServiceFeatureCallback)>(i0, i1, r7);

     label4:
        goto label6;

     label5:
        $r1 := @caughtexception;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unregisterImsFeatureCallback, RemoteException: ");

        $r4 = virtualinvoke $r1.<android.os.RemoteException: java.lang.String getMessage()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("TelephonyManager", $r6);

     label6:
        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void updateAvailableNetworks(java.util.List, java.util.concurrent.Executor, java.util.function.Consumer)
    {
        android.telephony.TelephonyManager r0;
        java.util.concurrent.Executor r1;
        java.util.function.Consumer r2;
        com.android.internal.telephony.IOns r3;
        android.telephony.TelephonyManager$6 r4;
        java.lang.Throwable $r5, $r7;
        android.os.RemoteException $r6;
        java.util.List r8;
        android.content.Context r9;
        java.lang.String r10;
        long l1, l2;
        android.telephony._$$Lambda$TelephonyManager$5Pi5a8OFp33Kx3BKVYB1lPE94F8 r11;
        android.telephony._$$Lambda$TelephonyManager$vzt8oYkDmrz31ou3_D2_gE5oG7s r13;

        r0 := @this: android.telephony.TelephonyManager;

        r8 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.concurrent.Executor;

        r2 := @parameter2: java.util.function.Consumer;

        r9 = r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        if r9 == null goto label01;

        r10 = virtualinvoke r9.<android.content.Context: java.lang.String getOpPackageName()>();

        goto label02;

     label01:
        r10 = "<unknown>";

     label02:
        r3 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.IOns getIOns()>();

     label03:
        if r3 == null goto label06;

        if r8 != null goto label04;

        goto label06;

     label04:
        r4 = new android.telephony.TelephonyManager$6;

        specialinvoke r4.<android.telephony.TelephonyManager$6: void <init>(android.telephony.TelephonyManager,java.util.concurrent.Executor,java.util.function.Consumer)>(r0, r1, r2);

        interfaceinvoke r3.<com.android.internal.telephony.IOns: void updateAvailableNetworks(java.util.List,com.android.internal.telephony.IUpdateAvailableNetworksCallback,java.lang.String)>(r8, r4, r10);

     label05:
        goto label24;

     label06:
        if r1 == null goto label22;

        if r2 != null goto label07;

        goto label22;

     label07:
        if r3 != null goto label15;

     label08:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label09:
        r11 = new android.telephony._$$Lambda$TelephonyManager$5Pi5a8OFp33Kx3BKVYB1lPE94F8;

        specialinvoke r11.<android.telephony._$$Lambda$TelephonyManager$5Pi5a8OFp33Kx3BKVYB1lPE94F8: void <init>(java.util.function.Consumer)>(r2);

        interfaceinvoke r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r11);

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label11:
        goto label18;

     label12:
        $r7 := @caughtexception;

     label13:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label14:
        throw $r7;

     label15:
        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label16:
        r13 = new android.telephony._$$Lambda$TelephonyManager$vzt8oYkDmrz31ou3_D2_gE5oG7s;

        specialinvoke r13.<android.telephony._$$Lambda$TelephonyManager$vzt8oYkDmrz31ou3_D2_gE5oG7s: void <init>(java.util.function.Consumer)>(r2);

        interfaceinvoke r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r13);

     label17:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

     label18:
        return;

     label19:
        $r5 := @caughtexception;

     label20:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

     label21:
        throw $r5;

     label22:
        return;

     label23:
        $r6 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "updateAvailableNetworks RemoteException", $r6);

     label24:
        return;

        catch android.os.RemoteException from label02 to label03 with label23;
        catch android.os.RemoteException from label04 to label05 with label23;
        catch android.os.RemoteException from label08 to label09 with label23;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch android.os.RemoteException from label10 to label11 with label23;
        catch android.os.RemoteException from label13 to label14 with label23;
        catch android.os.RemoteException from label14 to label15 with label23;
        catch android.os.RemoteException from label15 to label16 with label23;
        catch java.lang.Throwable from label16 to label17 with label19;
        catch android.os.RemoteException from label17 to label18 with label23;
        catch android.os.RemoteException from label20 to label21 with label23;
        catch android.os.RemoteException from label21 to label22 with label23;
    }

    public void updateOtaEmergencyNumberDbFilePath(android.os.ParcelFileDescriptor)
    {
        android.telephony.TelephonyManager r0;
        com.android.internal.telephony.ITelephony r1;
        android.os.RemoteException $r2;
        android.os.ParcelFileDescriptor r4;
        java.lang.IllegalStateException r5;

        r0 := @this: android.telephony.TelephonyManager;

        r4 := @parameter0: android.os.ParcelFileDescriptor;

     label1:
        r1 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r1 == null goto label5;

     label3:
        interfaceinvoke r1.<com.android.internal.telephony.ITelephony: void updateOtaEmergencyNumberDbFilePath(android.os.ParcelFileDescriptor)>(r4);

     label4:
        goto label7;

     label5:
        r5 = new java.lang.IllegalStateException;

        specialinvoke r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("telephony service is null.");

        throw r5;

     label6:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "updateOtaEmergencyNumberDbFilePath RemoteException", $r2);

        virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

     label7:
        return;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch android.os.RemoteException from label5 to label6 with label6;
    }

    public void updateServiceLocation()
    {
        android.telephony.TelephonyManager r0;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony r2;

        r0 := @this: android.telephony.TelephonyManager;

     label1:
        r2 = specialinvoke r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label2:
        if r2 == null goto label4;

     label3:
        interfaceinvoke r2.<com.android.internal.telephony.ITelephony: void updateServiceLocation()>();

     label4:
        goto label6;

     label5:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TelephonyManager", "Error calling ITelephony#updateServiceLocation", $r1);

     label6:
        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }
}
