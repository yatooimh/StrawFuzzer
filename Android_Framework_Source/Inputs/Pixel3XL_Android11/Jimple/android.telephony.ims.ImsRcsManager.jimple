public class android.telephony.ims.ImsRcsManager extends java.lang.Object
{
    public static final java.lang.String ACTION_SHOW_CAPABILITY_DISCOVERY_OPT_IN;
    private static final java.lang.String TAG;
    private final android.content.Context mContext;
    private final int mSubId;

    public void <init>(android.content.Context, int)
    {
        android.telephony.ims.ImsRcsManager r0;
        android.content.Context r1;
        int i0;

        r0 := @this: android.telephony.ims.ImsRcsManager;

        r1 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.telephony.ims.ImsRcsManager: int mSubId> = i0;

        r0.<android.telephony.ims.ImsRcsManager: android.content.Context mContext> = r1;

        return;
    }

    private android.telephony.ims.aidl.IImsRcsController getIImsRcsController()
    {
        android.telephony.ims.ImsRcsManager r0;
        android.os.TelephonyServiceManager $r1;
        android.os.TelephonyServiceManager$ServiceRegisterer $r2;
        android.os.IBinder $r3;
        android.telephony.ims.aidl.IImsRcsController $r4;

        r0 := @this: android.telephony.ims.ImsRcsManager;

        $r1 = staticinvoke <android.telephony.TelephonyFrameworkInitializer: android.os.TelephonyServiceManager getTelephonyServiceManager()>();

        $r2 = virtualinvoke $r1.<android.os.TelephonyServiceManager: android.os.TelephonyServiceManager$ServiceRegisterer getTelephonyImsServiceRegisterer()>();

        $r3 = virtualinvoke $r2.<android.os.TelephonyServiceManager$ServiceRegisterer: android.os.IBinder get()>();

        $r4 = staticinvoke <android.telephony.ims.aidl.IImsRcsController$Stub: android.telephony.ims.aidl.IImsRcsController asInterface(android.os.IBinder)>($r3);

        return $r4;
    }

    public void getRegistrationState(java.util.concurrent.Executor, java.util.function.Consumer)
    {
        android.telephony.ims.ImsRcsManager r0;
        java.util.function.Consumer r1;
        android.telephony.ims.aidl.IImsRcsController r2;
        int i0;
        android.telephony.ims.ImsRcsManager$1 r3;
        java.lang.IllegalArgumentException $r4, $r5;
        java.lang.IllegalStateException $r6;
        android.os.RemoteException $r7;
        java.lang.RuntimeException $r8;
        java.util.concurrent.Executor r9;

        r0 := @this: android.telephony.ims.ImsRcsManager;

        r9 := @parameter0: java.util.concurrent.Executor;

        r1 := @parameter1: java.util.function.Consumer;

        if r1 == null goto label6;

        if r9 == null goto label5;

        r2 = specialinvoke r0.<android.telephony.ims.ImsRcsManager: android.telephony.ims.aidl.IImsRcsController getIImsRcsController()>();

        if r2 == null goto label4;

     label1:
        i0 = r0.<android.telephony.ims.ImsRcsManager: int mSubId>;

        r3 = new android.telephony.ims.ImsRcsManager$1;

        specialinvoke r3.<android.telephony.ims.ImsRcsManager$1: void <init>(android.telephony.ims.ImsRcsManager,java.util.concurrent.Executor,java.util.function.Consumer)>(r0, r9, r1);

        interfaceinvoke r2.<android.telephony.ims.aidl.IImsRcsController: void getImsRcsRegistrationState(int,com.android.internal.telephony.IIntegerConsumer)>(i0, r3);

     label2:
        return;

     label3:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r8;

     label4:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ImsRcsManager", "Get registration state error: IImsRcsController is null");

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot find remote IMS service");

        throw $r6;

     label5:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must include a non-null Executor.");

        throw $r5;

     label6:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must include a non-null stateCallback.");

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void getRegistrationTransportType(java.util.concurrent.Executor, java.util.function.Consumer)
    {
        android.telephony.ims.ImsRcsManager r0;
        java.util.function.Consumer r1;
        android.telephony.ims.aidl.IImsRcsController r2;
        int i0;
        android.telephony.ims.ImsRcsManager$2 r3;
        java.lang.IllegalArgumentException $r4, $r5;
        java.lang.IllegalStateException $r6;
        android.os.RemoteException $r7;
        java.lang.RuntimeException $r8;
        java.util.concurrent.Executor r9;

        r0 := @this: android.telephony.ims.ImsRcsManager;

        r9 := @parameter0: java.util.concurrent.Executor;

        r1 := @parameter1: java.util.function.Consumer;

        if r1 == null goto label6;

        if r9 == null goto label5;

        r2 = specialinvoke r0.<android.telephony.ims.ImsRcsManager: android.telephony.ims.aidl.IImsRcsController getIImsRcsController()>();

        if r2 == null goto label4;

     label1:
        i0 = r0.<android.telephony.ims.ImsRcsManager: int mSubId>;

        r3 = new android.telephony.ims.ImsRcsManager$2;

        specialinvoke r3.<android.telephony.ims.ImsRcsManager$2: void <init>(android.telephony.ims.ImsRcsManager,java.util.concurrent.Executor,java.util.function.Consumer)>(r0, r9, r1);

        interfaceinvoke r2.<android.telephony.ims.aidl.IImsRcsController: void getImsRcsRegistrationTransportType(int,com.android.internal.telephony.IIntegerConsumer)>(i0, r3);

     label2:
        return;

     label3:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r8;

     label4:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ImsRcsManager", "Get registration transport type error: IImsRcsController is null");

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot find remote IMS service");

        throw $r6;

     label5:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must include a non-null Executor.");

        throw $r5;

     label6:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must include a non-null transportTypeCallback.");

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.telephony.ims.RcsUceAdapter getUceAdapter()
    {
        android.telephony.ims.ImsRcsManager r0;
        android.telephony.ims.RcsUceAdapter $r1;
        int $i0;
        android.content.Context $r2;

        r0 := @this: android.telephony.ims.ImsRcsManager;

        $r1 = new android.telephony.ims.RcsUceAdapter;

        $r2 = r0.<android.telephony.ims.ImsRcsManager: android.content.Context mContext>;

        $i0 = r0.<android.telephony.ims.ImsRcsManager: int mSubId>;

        specialinvoke $r1.<android.telephony.ims.RcsUceAdapter: void <init>(android.content.Context,int)>($r2, $i0);

        return $r1;
    }

    public boolean isAvailable(int) throws android.telephony.ims.ImsException
    {
        android.telephony.ims.ImsRcsManager r0;
        int i0, $i2;
        boolean z0;
        android.telephony.ims.ImsException $r1, $r3;
        android.os.RemoteException $r2;
        android.telephony.ims.aidl.IImsRcsController r4;

        r0 := @this: android.telephony.ims.ImsRcsManager;

        i0 := @parameter0: int;

        r4 = specialinvoke r0.<android.telephony.ims.ImsRcsManager: android.telephony.ims.aidl.IImsRcsController getIImsRcsController()>();

        if r4 == null goto label4;

     label1:
        $i2 = r0.<android.telephony.ims.ImsRcsManager: int mSubId>;

        z0 = interfaceinvoke r4.<android.telephony.ims.aidl.IImsRcsController: boolean isAvailable(int,int)>($i2, i0);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ImsRcsManager", "Error calling IImsRcsController#isAvailable", $r2);

        $r3 = new android.telephony.ims.ImsException;

        specialinvoke $r3.<android.telephony.ims.ImsException: void <init>(java.lang.String,int)>("Remote IMS Service is not available", 1);

        throw $r3;

     label4:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ImsRcsManager", "isAvailable: IImsRcsController is null");

        $r1 = new android.telephony.ims.ImsException;

        specialinvoke $r1.<android.telephony.ims.ImsException: void <init>(java.lang.String,int)>("Cannot find remote IMS service", 1);

        throw $r1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isCapable(int, int) throws android.telephony.ims.ImsException
    {
        android.telephony.ims.ImsRcsManager r0;
        int i0, i1, $i3;
        boolean z0;
        android.telephony.ims.ImsException $r1, $r3;
        android.os.RemoteException $r2;
        android.telephony.ims.aidl.IImsRcsController r4;

        r0 := @this: android.telephony.ims.ImsRcsManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r4 = specialinvoke r0.<android.telephony.ims.ImsRcsManager: android.telephony.ims.aidl.IImsRcsController getIImsRcsController()>();

        if r4 == null goto label4;

     label1:
        $i3 = r0.<android.telephony.ims.ImsRcsManager: int mSubId>;

        z0 = interfaceinvoke r4.<android.telephony.ims.aidl.IImsRcsController: boolean isCapable(int,int,int)>($i3, i0, i1);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ImsRcsManager", "Error calling IImsRcsController#isCapable", $r2);

        $r3 = new android.telephony.ims.ImsException;

        specialinvoke $r3.<android.telephony.ims.ImsException: void <init>(java.lang.String,int)>("Remote IMS Service is not available", 1);

        throw $r3;

     label4:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ImsRcsManager", "isCapable: IImsRcsController is null");

        $r1 = new android.telephony.ims.ImsException;

        specialinvoke $r1.<android.telephony.ims.ImsException: void <init>(java.lang.String,int)>("Cannot find remote IMS service", 1);

        throw $r1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void registerImsRegistrationCallback(java.util.concurrent.Executor, android.telephony.ims.RegistrationManager$RegistrationCallback) throws android.telephony.ims.ImsException
    {
        android.telephony.ims.ImsRcsManager r0;
        android.telephony.ims.RegistrationManager$RegistrationCallback r1;
        android.telephony.ims.aidl.IImsRcsController r2;
        int $i1;
        android.telephony.ims.aidl.IImsRegistrationCallback $r6;
        java.lang.Throwable $r7;
        java.lang.String $r9;
        java.util.concurrent.Executor r10;
        android.telephony.ims.ImsException r12, r13;
        java.lang.IllegalArgumentException r14, r15;
        java.lang.Exception r16;

        r0 := @this: android.telephony.ims.ImsRcsManager;

        r10 := @parameter0: java.util.concurrent.Executor;

        r1 := @parameter1: android.telephony.ims.RegistrationManager$RegistrationCallback;

        if r1 == null goto label6;

        if r10 == null goto label5;

        r2 = specialinvoke r0.<android.telephony.ims.ImsRcsManager: android.telephony.ims.aidl.IImsRcsController getIImsRcsController()>();

        if r2 == null goto label4;

        virtualinvoke r1.<android.telephony.ims.RegistrationManager$RegistrationCallback: void setExecutor(java.util.concurrent.Executor)>(r10);

     label1:
        $i1 = r0.<android.telephony.ims.ImsRcsManager: int mSubId>;

        $r6 = virtualinvoke r1.<android.telephony.ims.RegistrationManager$RegistrationCallback: android.telephony.ims.aidl.IImsRegistrationCallback getBinder()>();

        interfaceinvoke r2.<android.telephony.ims.aidl.IImsRcsController: void registerImsRegistrationCallback(int,android.telephony.ims.aidl.IImsRegistrationCallback)>($i1, $r6);

     label2:
        return;

     label3:
        $r7 := @caughtexception;

        r12 = new android.telephony.ims.ImsException;

        r16 = (java.lang.Exception) $r7;

        $r9 = virtualinvoke r16.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke r12.<android.telephony.ims.ImsException: void <init>(java.lang.String,int)>($r9, 1);

        throw r12;

     label4:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ImsRcsManager", "Register registration callback: IImsRcsController is null");

        r13 = new android.telephony.ims.ImsException;

        specialinvoke r13.<android.telephony.ims.ImsException: void <init>(java.lang.String,int)>("Cannot find remote IMS service", 1);

        throw r13;

     label5:
        r14 = new java.lang.IllegalArgumentException;

        specialinvoke r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must include a non-null Executor.");

        throw r14;

     label6:
        r15 = new java.lang.IllegalArgumentException;

        specialinvoke r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must include a non-null RegistrationCallback.");

        throw r15;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    public void registerRcsAvailabilityCallback(java.util.concurrent.Executor, android.telephony.ims.ImsRcsManager$AvailabilityCallback) throws android.telephony.ims.ImsException
    {
        android.telephony.ims.ImsRcsManager r0;
        android.telephony.ims.ImsRcsManager$AvailabilityCallback r1;
        android.telephony.ims.aidl.IImsRcsController r2;
        java.lang.IllegalArgumentException $r3, $r4;
        android.telephony.ims.ImsException $r5, $r8;
        int $i1;
        android.telephony.ims.aidl.IImsCapabilityCallback $r6;
        android.os.RemoteException $r7;
        java.util.concurrent.Executor r9;

        r0 := @this: android.telephony.ims.ImsRcsManager;

        r9 := @parameter0: java.util.concurrent.Executor;

        r1 := @parameter1: android.telephony.ims.ImsRcsManager$AvailabilityCallback;

        if r1 == null goto label6;

        if r9 == null goto label5;

        r2 = specialinvoke r0.<android.telephony.ims.ImsRcsManager: android.telephony.ims.aidl.IImsRcsController getIImsRcsController()>();

        if r2 == null goto label4;

        staticinvoke <android.telephony.ims.ImsRcsManager$AvailabilityCallback: void access$100(android.telephony.ims.ImsRcsManager$AvailabilityCallback,java.util.concurrent.Executor)>(r1, r9);

     label1:
        $i1 = r0.<android.telephony.ims.ImsRcsManager: int mSubId>;

        $r6 = virtualinvoke r1.<android.telephony.ims.ImsRcsManager$AvailabilityCallback: android.telephony.ims.aidl.IImsCapabilityCallback getBinder()>();

        interfaceinvoke r2.<android.telephony.ims.aidl.IImsRcsController: void registerRcsAvailabilityCallback(int,android.telephony.ims.aidl.IImsCapabilityCallback)>($i1, $r6);

     label2:
        return;

     label3:
        $r7 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ImsRcsManager", "Error calling IImsRcsController#registerRcsAvailabilityCallback", $r7);

        $r8 = new android.telephony.ims.ImsException;

        specialinvoke $r8.<android.telephony.ims.ImsException: void <init>(java.lang.String,int)>("Remote IMS Service is not available", 1);

        throw $r8;

     label4:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ImsRcsManager", "Register availability callback: IImsRcsController is null");

        $r5 = new android.telephony.ims.ImsException;

        specialinvoke $r5.<android.telephony.ims.ImsException: void <init>(java.lang.String,int)>("Cannot find remote IMS service", 1);

        throw $r5;

     label5:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must include a non-null Executor.");

        throw $r4;

     label6:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must include a non-null AvailabilityCallback.");

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void unregisterImsRegistrationCallback(android.telephony.ims.RegistrationManager$RegistrationCallback)
    {
        android.telephony.ims.ImsRcsManager r0;
        android.telephony.ims.aidl.IImsRcsController r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.IllegalStateException $r3;
        int $i1;
        android.telephony.ims.aidl.IImsRegistrationCallback $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        android.telephony.ims.RegistrationManager$RegistrationCallback r7;

        r0 := @this: android.telephony.ims.ImsRcsManager;

        r7 := @parameter0: android.telephony.ims.RegistrationManager$RegistrationCallback;

        if r7 == null goto label5;

        r1 = specialinvoke r0.<android.telephony.ims.ImsRcsManager: android.telephony.ims.aidl.IImsRcsController getIImsRcsController()>();

        if r1 == null goto label4;

     label1:
        $i1 = r0.<android.telephony.ims.ImsRcsManager: int mSubId>;

        $r4 = virtualinvoke r7.<android.telephony.ims.RegistrationManager$RegistrationCallback: android.telephony.ims.aidl.IImsRegistrationCallback getBinder()>();

        interfaceinvoke r1.<android.telephony.ims.aidl.IImsRcsController: void unregisterImsRegistrationCallback(int,android.telephony.ims.aidl.IImsRegistrationCallback)>($i1, $r4);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r6;

     label4:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ImsRcsManager", "Unregister registration callback: IImsRcsController is null");

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot find remote IMS service");

        throw $r3;

     label5:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must include a non-null RegistrationCallback.");

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void unregisterRcsAvailabilityCallback(android.telephony.ims.ImsRcsManager$AvailabilityCallback) throws android.telephony.ims.ImsException
    {
        android.telephony.ims.ImsRcsManager r0;
        android.telephony.ims.aidl.IImsRcsController r1;
        java.lang.IllegalArgumentException $r2;
        android.telephony.ims.ImsException $r3, $r6;
        int $i1;
        android.telephony.ims.aidl.IImsCapabilityCallback $r4;
        android.os.RemoteException $r5;
        android.telephony.ims.ImsRcsManager$AvailabilityCallback r7;

        r0 := @this: android.telephony.ims.ImsRcsManager;

        r7 := @parameter0: android.telephony.ims.ImsRcsManager$AvailabilityCallback;

        if r7 == null goto label5;

        r1 = specialinvoke r0.<android.telephony.ims.ImsRcsManager: android.telephony.ims.aidl.IImsRcsController getIImsRcsController()>();

        if r1 == null goto label4;

     label1:
        $i1 = r0.<android.telephony.ims.ImsRcsManager: int mSubId>;

        $r4 = virtualinvoke r7.<android.telephony.ims.ImsRcsManager$AvailabilityCallback: android.telephony.ims.aidl.IImsCapabilityCallback getBinder()>();

        interfaceinvoke r1.<android.telephony.ims.aidl.IImsRcsController: void unregisterRcsAvailabilityCallback(int,android.telephony.ims.aidl.IImsCapabilityCallback)>($i1, $r4);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ImsRcsManager", "Error calling IImsRcsController#unregisterRcsAvailabilityCallback", $r5);

        $r6 = new android.telephony.ims.ImsException;

        specialinvoke $r6.<android.telephony.ims.ImsException: void <init>(java.lang.String,int)>("Remote IMS Service is not available", 1);

        throw $r6;

     label4:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ImsRcsManager", "Unregister availability callback: IImsRcsController is null");

        $r3 = new android.telephony.ims.ImsException;

        specialinvoke $r3.<android.telephony.ims.ImsException: void <init>(java.lang.String,int)>("Cannot find remote IMS service", 1);

        throw $r3;

     label5:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must include a non-null AvailabilityCallback.");

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <android.telephony.ims.ImsRcsManager: java.lang.String TAG> = "ImsRcsManager";

        <android.telephony.ims.ImsRcsManager: java.lang.String ACTION_SHOW_CAPABILITY_DISCOVERY_OPT_IN> = "android.telephony.ims.action.SHOW_CAPABILITY_DISCOVERY_OPT_IN";

        return;
    }
}
