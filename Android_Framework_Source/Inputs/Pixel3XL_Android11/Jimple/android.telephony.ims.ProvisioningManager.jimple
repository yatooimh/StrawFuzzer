public class android.telephony.ims.ProvisioningManager extends java.lang.Object
{
    public static final int KEY_1X_EPDG_TIMER_SEC;
    public static final int KEY_1X_THRESHOLD;
    public static final int KEY_AMR_BANDWIDTH_EFFICIENT_PAYLOAD_TYPE;
    public static final int KEY_AMR_CODEC_MODE_SET_VALUES;
    public static final int KEY_AMR_DEFAULT_ENCODING_MODE;
    public static final int KEY_AMR_OCTET_ALIGNED_PAYLOAD_TYPE;
    public static final int KEY_AMR_WB_BANDWIDTH_EFFICIENT_PAYLOAD_TYPE;
    public static final int KEY_AMR_WB_CODEC_MODE_SET_VALUES;
    public static final int KEY_AMR_WB_OCTET_ALIGNED_PAYLOAD_TYPE;
    public static final int KEY_DTMF_NB_PAYLOAD_TYPE;
    public static final int KEY_DTMF_WB_PAYLOAD_TYPE;
    public static final int KEY_EAB_PROVISIONING_STATUS;
    public static final int KEY_ENABLE_SILENT_REDIAL;
    public static final int KEY_LOCAL_BREAKOUT_PCSCF_ADDRESS;
    public static final int KEY_LTE_EPDG_TIMER_SEC;
    public static final int KEY_LTE_THRESHOLD_1;
    public static final int KEY_LTE_THRESHOLD_2;
    public static final int KEY_LTE_THRESHOLD_3;
    public static final int KEY_MINIMUM_SIP_SESSION_EXPIRATION_TIMER_SEC;
    public static final int KEY_MOBILE_DATA_ENABLED;
    public static final int KEY_MULTIENDPOINT_ENABLED;
    public static final int KEY_RCS_AVAILABILITY_CACHE_EXPIRATION_SEC;
    public static final int KEY_RCS_CAPABILITIES_CACHE_EXPIRATION_SEC;
    public static final int KEY_RCS_CAPABILITIES_POLL_INTERVAL_SEC;
    public static final int KEY_RCS_CAPABILITY_DISCOVERY_ENABLED;
    public static final int KEY_RCS_CAPABILITY_POLL_LIST_SUB_EXP_SEC;
    public static final int KEY_RCS_MAX_NUM_ENTRIES_IN_RCL;
    public static final int KEY_RCS_PUBLISH_OFFLINE_AVAILABILITY_TIMER_SEC;
    public static final int KEY_RCS_PUBLISH_SOURCE_THROTTLE_MS;
    public static final int KEY_RCS_PUBLISH_TIMER_SEC;
    public static final int KEY_REGISTRATION_DOMAIN_NAME;
    public static final int KEY_REGISTRATION_RETRY_BASE_TIME_SEC;
    public static final int KEY_REGISTRATION_RETRY_MAX_TIME_SEC;
    public static final int KEY_RTP_SPEECH_END_PORT;
    public static final int KEY_RTP_SPEECH_START_PORT;
    public static final int KEY_RTT_ENABLED;
    public static final int KEY_SIP_ACK_RECEIPT_WAIT_TIME_MS;
    public static final int KEY_SIP_ACK_RETRANSMIT_WAIT_TIME_MS;
    public static final int KEY_SIP_INVITE_ACK_WAIT_TIME_MS;
    public static final int KEY_SIP_INVITE_CANCELLATION_TIMER_MS;
    public static final int KEY_SIP_INVITE_REQUEST_TRANSMIT_INTERVAL_MS;
    public static final int KEY_SIP_INVITE_RESPONSE_RETRANSMIT_INTERVAL_MS;
    public static final int KEY_SIP_INVITE_RESPONSE_RETRANSMIT_WAIT_TIME_MS;
    public static final int KEY_SIP_KEEP_ALIVE_ENABLED;
    public static final int KEY_SIP_NON_INVITE_REQUEST_RETRANSMISSION_WAIT_TIME_MS;
    public static final int KEY_SIP_NON_INVITE_REQUEST_RETRANSMIT_INTERVAL_MS;
    public static final int KEY_SIP_NON_INVITE_RESPONSE_RETRANSMISSION_WAIT_TIME_MS;
    public static final int KEY_SIP_NON_INVITE_TRANSACTION_TIMEOUT_TIMER_MS;
    public static final int KEY_SIP_SESSION_TIMER_SEC;
    public static final int KEY_SMS_FORMAT;
    public static final int KEY_SMS_OVER_IP_ENABLED;
    public static final int KEY_SMS_PUBLIC_SERVICE_IDENTITY;
    public static final int KEY_T1_TIMER_VALUE_MS;
    public static final int KEY_T2_TIMER_VALUE_MS;
    public static final int KEY_TF_TIMER_VALUE_MS;
    public static final int KEY_TRANSITION_TO_LTE_DELAY_MS;
    public static final int KEY_USE_GZIP_FOR_LIST_SUBSCRIPTION;
    public static final int KEY_VIDEO_QUALITY;
    public static final int KEY_VOICE_OVER_WIFI_ENABLED_OVERRIDE;
    public static final int KEY_VOICE_OVER_WIFI_MODE_OVERRIDE;
    public static final int KEY_VOICE_OVER_WIFI_ROAMING_ENABLED_OVERRIDE;
    public static final int KEY_VOLTE_PROVISIONING_STATUS;
    public static final int KEY_VOLTE_USER_OPT_IN_STATUS;
    public static final int KEY_VT_PROVISIONING_STATUS;
    public static final int KEY_WIFI_EPDG_TIMER_SEC;
    public static final int KEY_WIFI_THRESHOLD_A;
    public static final int KEY_WIFI_THRESHOLD_B;
    public static final int PROVISIONING_RESULT_UNKNOWN;
    public static final int PROVISIONING_VALUE_DISABLED;
    public static final int PROVISIONING_VALUE_ENABLED;
    public static final int SMS_FORMAT_3GPP;
    public static final int SMS_FORMAT_3GPP2;
    public static final java.lang.String STRING_QUERY_RESULT_ERROR_GENERIC;
    public static final java.lang.String STRING_QUERY_RESULT_ERROR_NOT_READY;
    public static final int VIDEO_QUALITY_HIGH;
    public static final int VIDEO_QUALITY_LOW;
    private int mSubId;

    private void <init>(int)
    {
        android.telephony.ims.ProvisioningManager r0;
        int i0;

        r0 := @this: android.telephony.ims.ProvisioningManager;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.telephony.ims.ProvisioningManager: int mSubId> = i0;

        return;
    }

    public static android.telephony.ims.ProvisioningManager createForSubscriptionId(int)
    {
        int i0;
        boolean $z0;
        java.lang.IllegalArgumentException $r0;
        android.telephony.ims.ProvisioningManager $r1;

        i0 := @parameter0: int;

        $z0 = staticinvoke <android.telephony.SubscriptionManager: boolean isValidSubscriptionId(int)>(i0);

        if $z0 == 0 goto label1;

        $r1 = new android.telephony.ims.ProvisioningManager;

        specialinvoke $r1.<android.telephony.ims.ProvisioningManager: void <init>(int)>(i0);

        return $r1;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid subscription ID");

        throw $r0;
    }

    private static com.android.internal.telephony.ITelephony getITelephony()
    {
        com.android.internal.telephony.ITelephony r0;
        android.os.TelephonyServiceManager $r1;
        android.os.TelephonyServiceManager$ServiceRegisterer $r2;
        android.os.IBinder $r3;
        java.lang.RuntimeException $r4;

        $r1 = staticinvoke <android.telephony.TelephonyFrameworkInitializer: android.os.TelephonyServiceManager getTelephonyServiceManager()>();

        $r2 = virtualinvoke $r1.<android.os.TelephonyServiceManager: android.os.TelephonyServiceManager$ServiceRegisterer getTelephonyServiceRegisterer()>();

        $r3 = virtualinvoke $r2.<android.os.TelephonyServiceManager$ServiceRegisterer: android.os.IBinder get()>();

        r0 = staticinvoke <com.android.internal.telephony.ITelephony$Stub: com.android.internal.telephony.ITelephony asInterface(android.os.IBinder)>($r3);

        if r0 == null goto label1;

        return r0;

     label1:
        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Could not find Telephony Service.");

        throw $r4;
    }

    public int getProvisioningIntValue(int)
    {
        android.telephony.ims.ProvisioningManager r0;
        com.android.internal.telephony.ITelephony $r2;
        int $i0, i1, i2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.telephony.ims.ProvisioningManager;

        i1 := @parameter0: int;

     label1:
        $r2 = staticinvoke <android.telephony.ims.ProvisioningManager: com.android.internal.telephony.ITelephony getITelephony()>();

        $i0 = r0.<android.telephony.ims.ProvisioningManager: int mSubId>;

        i2 = interfaceinvoke $r2.<com.android.internal.telephony.ITelephony: int getImsProvisioningInt(int,int)>($i0, i1);

     label2:
        return i2;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean getProvisioningStatusForCapability(int, int)
    {
        android.telephony.ims.ProvisioningManager r0;
        int i0, i1, $i2;
        boolean z0;
        com.android.internal.telephony.ITelephony $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.telephony.ims.ProvisioningManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        $r2 = staticinvoke <android.telephony.ims.ProvisioningManager: com.android.internal.telephony.ITelephony getITelephony()>();

        $i2 = r0.<android.telephony.ims.ProvisioningManager: int mSubId>;

        z0 = interfaceinvoke $r2.<com.android.internal.telephony.ITelephony: boolean getImsProvisioningStatusForCapability(int,int,int)>($i2, i0, i1);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getProvisioningStringValue(int)
    {
        android.telephony.ims.ProvisioningManager r0;
        int i0, $i1;
        com.android.internal.telephony.ITelephony $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.telephony.ims.ProvisioningManager;

        i0 := @parameter0: int;

     label1:
        $r1 = staticinvoke <android.telephony.ims.ProvisioningManager: com.android.internal.telephony.ITelephony getITelephony()>();

        $i1 = r0.<android.telephony.ims.ProvisioningManager: int mSubId>;

        r4 = interfaceinvoke $r1.<com.android.internal.telephony.ITelephony: java.lang.String getImsProvisioningString(int,int)>($i1, i0);

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean getRcsProvisioningStatusForCapability(int)
    {
        android.telephony.ims.ProvisioningManager r0;
        int i0, $i1;
        boolean z0;
        com.android.internal.telephony.ITelephony $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.telephony.ims.ProvisioningManager;

        i0 := @parameter0: int;

     label1:
        $r2 = staticinvoke <android.telephony.ims.ProvisioningManager: com.android.internal.telephony.ITelephony getITelephony()>();

        $i1 = r0.<android.telephony.ims.ProvisioningManager: int mSubId>;

        z0 = interfaceinvoke $r2.<com.android.internal.telephony.ITelephony: boolean getRcsProvisioningStatusForCapability(int,int)>($i1, i0);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void notifyRcsAutoConfigurationReceived(byte[], boolean)
    {
        android.telephony.ims.ProvisioningManager r0;
        boolean z0;
        java.lang.IllegalArgumentException $r1;
        com.android.internal.telephony.ITelephony $r2;
        int $i0;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        byte[] r5;

        r0 := @this: android.telephony.ims.ProvisioningManager;

        r5 := @parameter0: byte[];

        z0 := @parameter1: boolean;

        if r5 == null goto label4;

     label1:
        $r2 = staticinvoke <android.telephony.ims.ProvisioningManager: com.android.internal.telephony.ITelephony getITelephony()>();

        $i0 = r0.<android.telephony.ims.ProvisioningManager: int mSubId>;

        interfaceinvoke $r2.<com.android.internal.telephony.ITelephony: void notifyRcsAutoConfigurationReceived(int,byte[],boolean)>($i0, r5, z0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r4;

     label4:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must include a non-null config XML file.");

        throw $r1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void registerProvisioningChangedCallback(java.util.concurrent.Executor, android.telephony.ims.ProvisioningManager$Callback) throws android.telephony.ims.ImsException
    {
        android.telephony.ims.ProvisioningManager r0;
        android.telephony.ims.ProvisioningManager$Callback r1;
        com.android.internal.telephony.ITelephony $r2;
        int $i0, $i1;
        android.telephony.ims.aidl.IImsConfigCallback $r3;
        java.lang.Throwable $r4;
        java.lang.String $r6, $r9;
        android.os.ServiceSpecificException $r7;
        java.util.concurrent.Executor r10;
        android.telephony.ims.ImsException r13, r14;
        java.lang.Exception r15;

        r0 := @this: android.telephony.ims.ProvisioningManager;

        r10 := @parameter0: java.util.concurrent.Executor;

        r1 := @parameter1: android.telephony.ims.ProvisioningManager$Callback;

        virtualinvoke r1.<android.telephony.ims.ProvisioningManager$Callback: void setExecutor(java.util.concurrent.Executor)>(r10);

     label1:
        $r2 = staticinvoke <android.telephony.ims.ProvisioningManager: com.android.internal.telephony.ITelephony getITelephony()>();

        $i0 = r0.<android.telephony.ims.ProvisioningManager: int mSubId>;

        $r3 = virtualinvoke r1.<android.telephony.ims.ProvisioningManager$Callback: android.telephony.ims.aidl.IImsConfigCallback getBinder()>();

        interfaceinvoke $r2.<com.android.internal.telephony.ITelephony: void registerImsProvisioningChangedCallback(int,android.telephony.ims.aidl.IImsConfigCallback)>($i0, $r3);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r13 = new android.telephony.ims.ImsException;

        r15 = (java.lang.Exception) $r4;

        $r6 = virtualinvoke r15.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke r13.<android.telephony.ims.ImsException: void <init>(java.lang.String,int)>($r6, 1);

        throw r13;

     label4:
        $r7 := @caughtexception;

        r14 = new android.telephony.ims.ImsException;

        $r9 = virtualinvoke $r7.<android.os.ServiceSpecificException: java.lang.String getMessage()>();

        $i1 = $r7.<android.os.ServiceSpecificException: int errorCode>;

        specialinvoke r14.<android.telephony.ims.ImsException: void <init>(java.lang.String,int)>($r9, $i1);

        throw r14;

        catch android.os.ServiceSpecificException from label1 to label2 with label4;
        catch android.os.RemoteException from label1 to label2 with label3;
        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    public int setProvisioningIntValue(int, int)
    {
        android.telephony.ims.ProvisioningManager r0;
        int i0, $i1, i2, i3;
        com.android.internal.telephony.ITelephony $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.telephony.ims.ProvisioningManager;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

     label1:
        $r2 = staticinvoke <android.telephony.ims.ProvisioningManager: com.android.internal.telephony.ITelephony getITelephony()>();

        $i1 = r0.<android.telephony.ims.ProvisioningManager: int mSubId>;

        i3 = interfaceinvoke $r2.<com.android.internal.telephony.ITelephony: int setImsProvisioningInt(int,int,int)>($i1, i2, i0);

     label2:
        return i3;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setProvisioningStatusForCapability(int, int, boolean)
    {
        android.telephony.ims.ProvisioningManager r0;
        int i0, i1, $i2;
        boolean z0;
        com.android.internal.telephony.ITelephony $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.telephony.ims.ProvisioningManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

     label1:
        $r2 = staticinvoke <android.telephony.ims.ProvisioningManager: com.android.internal.telephony.ITelephony getITelephony()>();

        $i2 = r0.<android.telephony.ims.ProvisioningManager: int mSubId>;

        interfaceinvoke $r2.<com.android.internal.telephony.ITelephony: void setImsProvisioningStatusForCapability(int,int,int,boolean)>($i2, i0, i1, z0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int setProvisioningStringValue(int, java.lang.String)
    {
        android.telephony.ims.ProvisioningManager r0;
        com.android.internal.telephony.ITelephony $r1;
        int $i0, i1, i2;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.lang.String r4;

        r0 := @this: android.telephony.ims.ProvisioningManager;

        i1 := @parameter0: int;

        r4 := @parameter1: java.lang.String;

     label1:
        $r1 = staticinvoke <android.telephony.ims.ProvisioningManager: com.android.internal.telephony.ITelephony getITelephony()>();

        $i0 = r0.<android.telephony.ims.ProvisioningManager: int mSubId>;

        i2 = interfaceinvoke $r1.<com.android.internal.telephony.ITelephony: int setImsProvisioningString(int,int,java.lang.String)>($i0, i1, r4);

     label2:
        return i2;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setRcsProvisioningStatusForCapability(int, boolean)
    {
        android.telephony.ims.ProvisioningManager r0;
        int i0, $i1;
        boolean z0;
        com.android.internal.telephony.ITelephony $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.telephony.ims.ProvisioningManager;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

     label1:
        $r2 = staticinvoke <android.telephony.ims.ProvisioningManager: com.android.internal.telephony.ITelephony getITelephony()>();

        $i1 = r0.<android.telephony.ims.ProvisioningManager: int mSubId>;

        interfaceinvoke $r2.<com.android.internal.telephony.ITelephony: void setRcsProvisioningStatusForCapability(int,int,boolean)>($i1, i0, z0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void unregisterProvisioningChangedCallback(android.telephony.ims.ProvisioningManager$Callback)
    {
        android.telephony.ims.ProvisioningManager r0;
        com.android.internal.telephony.ITelephony $r1;
        int $i0;
        android.telephony.ims.aidl.IImsConfigCallback $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.telephony.ims.ProvisioningManager$Callback r5;

        r0 := @this: android.telephony.ims.ProvisioningManager;

        r5 := @parameter0: android.telephony.ims.ProvisioningManager$Callback;

     label1:
        $r1 = staticinvoke <android.telephony.ims.ProvisioningManager: com.android.internal.telephony.ITelephony getITelephony()>();

        $i0 = r0.<android.telephony.ims.ProvisioningManager: int mSubId>;

        $r2 = virtualinvoke r5.<android.telephony.ims.ProvisioningManager$Callback: android.telephony.ims.aidl.IImsConfigCallback getBinder()>();

        interfaceinvoke $r1.<com.android.internal.telephony.ITelephony: void unregisterImsProvisioningChangedCallback(int,android.telephony.ims.aidl.IImsConfigCallback)>($i0, $r2);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <android.telephony.ims.ProvisioningManager: int VIDEO_QUALITY_LOW> = 0;

        <android.telephony.ims.ProvisioningManager: int VIDEO_QUALITY_HIGH> = 1;

        <android.telephony.ims.ProvisioningManager: java.lang.String STRING_QUERY_RESULT_ERROR_NOT_READY> = "STRING_QUERY_RESULT_ERROR_NOT_READY";

        <android.telephony.ims.ProvisioningManager: java.lang.String STRING_QUERY_RESULT_ERROR_GENERIC> = "STRING_QUERY_RESULT_ERROR_GENERIC";

        <android.telephony.ims.ProvisioningManager: int SMS_FORMAT_3GPP2> = 0;

        <android.telephony.ims.ProvisioningManager: int SMS_FORMAT_3GPP> = 1;

        <android.telephony.ims.ProvisioningManager: int PROVISIONING_VALUE_ENABLED> = 1;

        <android.telephony.ims.ProvisioningManager: int PROVISIONING_VALUE_DISABLED> = 0;

        <android.telephony.ims.ProvisioningManager: int PROVISIONING_RESULT_UNKNOWN> = -1;

        <android.telephony.ims.ProvisioningManager: int KEY_WIFI_THRESHOLD_B> = 61;

        <android.telephony.ims.ProvisioningManager: int KEY_WIFI_THRESHOLD_A> = 60;

        <android.telephony.ims.ProvisioningManager: int KEY_WIFI_EPDG_TIMER_SEC> = 63;

        <android.telephony.ims.ProvisioningManager: int KEY_VT_PROVISIONING_STATUS> = 11;

        <android.telephony.ims.ProvisioningManager: int KEY_VOLTE_USER_OPT_IN_STATUS> = 30;

        <android.telephony.ims.ProvisioningManager: int KEY_VOLTE_PROVISIONING_STATUS> = 10;

        <android.telephony.ims.ProvisioningManager: int KEY_VOICE_OVER_WIFI_ROAMING_ENABLED_OVERRIDE> = 26;

        <android.telephony.ims.ProvisioningManager: int KEY_VOICE_OVER_WIFI_MODE_OVERRIDE> = 27;

        <android.telephony.ims.ProvisioningManager: int KEY_VOICE_OVER_WIFI_ENABLED_OVERRIDE> = 28;

        <android.telephony.ims.ProvisioningManager: int KEY_VIDEO_QUALITY> = 55;

        <android.telephony.ims.ProvisioningManager: int KEY_USE_GZIP_FOR_LIST_SUBSCRIPTION> = 24;

        <android.telephony.ims.ProvisioningManager: int KEY_TRANSITION_TO_LTE_DELAY_MS> = 5;

        <android.telephony.ims.ProvisioningManager: int KEY_TF_TIMER_VALUE_MS> = 9;

        <android.telephony.ims.ProvisioningManager: int KEY_T2_TIMER_VALUE_MS> = 8;

        <android.telephony.ims.ProvisioningManager: int KEY_T1_TIMER_VALUE_MS> = 7;

        <android.telephony.ims.ProvisioningManager: int KEY_SMS_PUBLIC_SERVICE_IDENTITY> = 54;

        <android.telephony.ims.ProvisioningManager: int KEY_SMS_OVER_IP_ENABLED> = 14;

        <android.telephony.ims.ProvisioningManager: int KEY_SMS_FORMAT> = 13;

        <android.telephony.ims.ProvisioningManager: int KEY_SIP_SESSION_TIMER_SEC> = 2;

        <android.telephony.ims.ProvisioningManager: int KEY_SIP_NON_INVITE_TRANSACTION_TIMEOUT_TIMER_MS> = 41;

        <android.telephony.ims.ProvisioningManager: int KEY_SIP_NON_INVITE_RESPONSE_RETRANSMISSION_WAIT_TIME_MS> = 46;

        <android.telephony.ims.ProvisioningManager: int KEY_SIP_NON_INVITE_REQUEST_RETRANSMIT_INTERVAL_MS> = 40;

        <android.telephony.ims.ProvisioningManager: int KEY_SIP_NON_INVITE_REQUEST_RETRANSMISSION_WAIT_TIME_MS> = 45;

        <android.telephony.ims.ProvisioningManager: int KEY_SIP_KEEP_ALIVE_ENABLED> = 32;

        <android.telephony.ims.ProvisioningManager: int KEY_SIP_INVITE_RESPONSE_RETRANSMIT_WAIT_TIME_MS> = 39;

        <android.telephony.ims.ProvisioningManager: int KEY_SIP_INVITE_RESPONSE_RETRANSMIT_INTERVAL_MS> = 42;

        <android.telephony.ims.ProvisioningManager: int KEY_SIP_INVITE_REQUEST_TRANSMIT_INTERVAL_MS> = 37;

        <android.telephony.ims.ProvisioningManager: int KEY_SIP_INVITE_CANCELLATION_TIMER_MS> = 4;

        <android.telephony.ims.ProvisioningManager: int KEY_SIP_INVITE_ACK_WAIT_TIME_MS> = 38;

        <android.telephony.ims.ProvisioningManager: int KEY_SIP_ACK_RETRANSMIT_WAIT_TIME_MS> = 44;

        <android.telephony.ims.ProvisioningManager: int KEY_SIP_ACK_RECEIPT_WAIT_TIME_MS> = 43;

        <android.telephony.ims.ProvisioningManager: int KEY_RTT_ENABLED> = 66;

        <android.telephony.ims.ProvisioningManager: int KEY_RTP_SPEECH_START_PORT> = 35;

        <android.telephony.ims.ProvisioningManager: int KEY_RTP_SPEECH_END_PORT> = 36;

        <android.telephony.ims.ProvisioningManager: int KEY_REGISTRATION_RETRY_MAX_TIME_SEC> = 34;

        <android.telephony.ims.ProvisioningManager: int KEY_REGISTRATION_RETRY_BASE_TIME_SEC> = 33;

        <android.telephony.ims.ProvisioningManager: int KEY_REGISTRATION_DOMAIN_NAME> = 12;

        <android.telephony.ims.ProvisioningManager: int KEY_RCS_PUBLISH_TIMER_SEC> = 15;

        <android.telephony.ims.ProvisioningManager: int KEY_RCS_PUBLISH_SOURCE_THROTTLE_MS> = 21;

        <android.telephony.ims.ProvisioningManager: int KEY_RCS_PUBLISH_OFFLINE_AVAILABILITY_TIMER_SEC> = 16;

        <android.telephony.ims.ProvisioningManager: int KEY_RCS_MAX_NUM_ENTRIES_IN_RCL> = 22;

        <android.telephony.ims.ProvisioningManager: int KEY_RCS_CAPABILITY_POLL_LIST_SUB_EXP_SEC> = 23;

        <android.telephony.ims.ProvisioningManager: int KEY_RCS_CAPABILITY_DISCOVERY_ENABLED> = 17;

        <android.telephony.ims.ProvisioningManager: int KEY_RCS_CAPABILITIES_POLL_INTERVAL_SEC> = 20;

        <android.telephony.ims.ProvisioningManager: int KEY_RCS_CAPABILITIES_CACHE_EXPIRATION_SEC> = 18;

        <android.telephony.ims.ProvisioningManager: int KEY_RCS_AVAILABILITY_CACHE_EXPIRATION_SEC> = 19;

        <android.telephony.ims.ProvisioningManager: int KEY_MULTIENDPOINT_ENABLED> = 65;

        <android.telephony.ims.ProvisioningManager: int KEY_MOBILE_DATA_ENABLED> = 29;

        <android.telephony.ims.ProvisioningManager: int KEY_MINIMUM_SIP_SESSION_EXPIRATION_TIMER_SEC> = 3;

        <android.telephony.ims.ProvisioningManager: int KEY_LTE_THRESHOLD_3> = 58;

        <android.telephony.ims.ProvisioningManager: int KEY_LTE_THRESHOLD_2> = 57;

        <android.telephony.ims.ProvisioningManager: int KEY_LTE_THRESHOLD_1> = 56;

        <android.telephony.ims.ProvisioningManager: int KEY_LTE_EPDG_TIMER_SEC> = 62;

        <android.telephony.ims.ProvisioningManager: int KEY_LOCAL_BREAKOUT_PCSCF_ADDRESS> = 31;

        <android.telephony.ims.ProvisioningManager: int KEY_ENABLE_SILENT_REDIAL> = 6;

        <android.telephony.ims.ProvisioningManager: int KEY_EAB_PROVISIONING_STATUS> = 25;

        <android.telephony.ims.ProvisioningManager: int KEY_DTMF_WB_PAYLOAD_TYPE> = 51;

        <android.telephony.ims.ProvisioningManager: int KEY_DTMF_NB_PAYLOAD_TYPE> = 52;

        <android.telephony.ims.ProvisioningManager: int KEY_AMR_WB_OCTET_ALIGNED_PAYLOAD_TYPE> = 47;

        <android.telephony.ims.ProvisioningManager: int KEY_AMR_WB_CODEC_MODE_SET_VALUES> = 1;

        <android.telephony.ims.ProvisioningManager: int KEY_AMR_WB_BANDWIDTH_EFFICIENT_PAYLOAD_TYPE> = 48;

        <android.telephony.ims.ProvisioningManager: int KEY_AMR_OCTET_ALIGNED_PAYLOAD_TYPE> = 49;

        <android.telephony.ims.ProvisioningManager: int KEY_AMR_DEFAULT_ENCODING_MODE> = 53;

        <android.telephony.ims.ProvisioningManager: int KEY_AMR_CODEC_MODE_SET_VALUES> = 0;

        <android.telephony.ims.ProvisioningManager: int KEY_AMR_BANDWIDTH_EFFICIENT_PAYLOAD_TYPE> = 50;

        <android.telephony.ims.ProvisioningManager: int KEY_1X_THRESHOLD> = 59;

        <android.telephony.ims.ProvisioningManager: int KEY_1X_EPDG_TIMER_SEC> = 64;

        return;
    }
}
