public class android.telephony.ims.RegistrationManager$RegistrationCallback extends java.lang.Object
{
    private final android.telephony.ims.RegistrationManager$RegistrationCallback$RegistrationBinder mBinder;

    public void <init>()
    {
        android.telephony.ims.RegistrationManager$RegistrationCallback r0;
        android.telephony.ims.RegistrationManager$RegistrationCallback$RegistrationBinder $r1;

        r0 := @this: android.telephony.ims.RegistrationManager$RegistrationCallback;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new android.telephony.ims.RegistrationManager$RegistrationCallback$RegistrationBinder;

        specialinvoke $r1.<android.telephony.ims.RegistrationManager$RegistrationCallback$RegistrationBinder: void <init>(android.telephony.ims.RegistrationManager$RegistrationCallback)>(r0);

        r0.<android.telephony.ims.RegistrationManager$RegistrationCallback: android.telephony.ims.RegistrationManager$RegistrationCallback$RegistrationBinder mBinder> = $r1;

        return;
    }

    public final android.telephony.ims.aidl.IImsRegistrationCallback getBinder()
    {
        android.telephony.ims.RegistrationManager$RegistrationCallback r0;
        android.telephony.ims.RegistrationManager$RegistrationCallback$RegistrationBinder $r1;

        r0 := @this: android.telephony.ims.RegistrationManager$RegistrationCallback;

        $r1 = r0.<android.telephony.ims.RegistrationManager$RegistrationCallback: android.telephony.ims.RegistrationManager$RegistrationCallback$RegistrationBinder mBinder>;

        return $r1;
    }

    public void onRegistered(int)
    {
        android.telephony.ims.RegistrationManager$RegistrationCallback r0;
        int i0;

        r0 := @this: android.telephony.ims.RegistrationManager$RegistrationCallback;

        i0 := @parameter0: int;

        return;
    }

    public void onRegistering(int)
    {
        android.telephony.ims.RegistrationManager$RegistrationCallback r0;
        int i0;

        r0 := @this: android.telephony.ims.RegistrationManager$RegistrationCallback;

        i0 := @parameter0: int;

        return;
    }

    public void onSubscriberAssociatedUriChanged(android.net.Uri[])
    {
        android.telephony.ims.RegistrationManager$RegistrationCallback r0;
        android.net.Uri[] r1;

        r0 := @this: android.telephony.ims.RegistrationManager$RegistrationCallback;

        r1 := @parameter0: android.net.Uri[];

        return;
    }

    public void onTechnologyChangeFailed(int, android.telephony.ims.ImsReasonInfo)
    {
        android.telephony.ims.RegistrationManager$RegistrationCallback r0;
        int i0;
        android.telephony.ims.ImsReasonInfo r1;

        r0 := @this: android.telephony.ims.RegistrationManager$RegistrationCallback;

        i0 := @parameter0: int;

        r1 := @parameter1: android.telephony.ims.ImsReasonInfo;

        return;
    }

    public void onUnregistered(android.telephony.ims.ImsReasonInfo)
    {
        android.telephony.ims.RegistrationManager$RegistrationCallback r0;
        android.telephony.ims.ImsReasonInfo r1;

        r0 := @this: android.telephony.ims.RegistrationManager$RegistrationCallback;

        r1 := @parameter0: android.telephony.ims.ImsReasonInfo;

        return;
    }

    public void setExecutor(java.util.concurrent.Executor)
    {
        android.telephony.ims.RegistrationManager$RegistrationCallback r0;
        java.util.concurrent.Executor r1;
        android.telephony.ims.RegistrationManager$RegistrationCallback$RegistrationBinder $r2;

        r0 := @this: android.telephony.ims.RegistrationManager$RegistrationCallback;

        r1 := @parameter0: java.util.concurrent.Executor;

        $r2 = r0.<android.telephony.ims.RegistrationManager$RegistrationCallback: android.telephony.ims.RegistrationManager$RegistrationCallback$RegistrationBinder mBinder>;

        staticinvoke <android.telephony.ims.RegistrationManager$RegistrationCallback$RegistrationBinder: void access$000(android.telephony.ims.RegistrationManager$RegistrationCallback$RegistrationBinder,java.util.concurrent.Executor)>($r2, r1);

        return;
    }
}
