public class android.test.AndroidTestCase extends junit.framework.TestCase
{
    protected android.content.Context mContext;
    private android.content.Context mTestContext;

    public void <init>()
    {
        android.test.AndroidTestCase r0;

        r0 := @this: android.test.AndroidTestCase;

        specialinvoke r0.<junit.framework.TestCase: void <init>()>();

        return;
    }

    public void assertActivityRequiresPermission(java.lang.String, java.lang.String, java.lang.String)
    {
        android.test.AndroidTestCase r0;
        java.lang.String r1, $r9, $r11, $r16, $r17, r18, r19;
        android.content.Context $r6;
        java.lang.Throwable $r10;
        boolean $z0;
        android.content.Intent r23;
        java.lang.StringBuilder r24, r25;
        java.lang.SecurityException r26, r27;

        r0 := @this: android.test.AndroidTestCase;

        r18 := @parameter0: java.lang.String;

        r19 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        r23 = new android.content.Intent;

        specialinvoke r23.<android.content.Intent: void <init>()>();

        virtualinvoke r23.<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>(r18, r19);

        virtualinvoke r23.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

     label1:
        $r6 = virtualinvoke r0.<android.test.AndroidTestCase: android.content.Context getContext()>();

        virtualinvoke $r6.<android.content.Context: void startActivity(android.content.Intent)>(r23);

        r24 = new java.lang.StringBuilder;

        specialinvoke r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected security exception for ");

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.test.AndroidTestCase: void fail(java.lang.String)>($r9);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        r26 = (java.lang.SecurityException) $r10;

        $r11 = virtualinvoke r26.<java.lang.SecurityException: java.lang.String getMessage()>();

        staticinvoke <android.test.AndroidTestCase: void assertNotNull(java.lang.String,java.lang.Object)>("security exception\'s error message.", $r11);

        r25 = new java.lang.StringBuilder;

        specialinvoke r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("error message should contain ");

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r16 = virtualinvoke r25.<java.lang.StringBuilder: java.lang.String toString()>();

        r27 = (java.lang.SecurityException) $r10;

        $r17 = virtualinvoke r27.<java.lang.SecurityException: java.lang.String getMessage()>();

        $z0 = virtualinvoke $r17.<java.lang.String: boolean contains(java.lang.CharSequence)>(r1);

        staticinvoke <android.test.AndroidTestCase: void assertTrue(java.lang.String,boolean)>($r16, $z0);

     label4:
        return;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }

    public void assertReadingContentUriRequiresPermission(android.net.Uri, java.lang.String)
    {
        android.test.AndroidTestCase r0;
        java.lang.String r1, $r8, $r10, $r15, $r16;
        android.content.Context $r3;
        android.content.ContentResolver $r4;
        java.lang.Throwable $r9;
        boolean $z0;
        android.net.Uri r17;
        java.lang.StringBuilder r20, r21;
        java.lang.SecurityException r22, r23;

        r0 := @this: android.test.AndroidTestCase;

        r17 := @parameter0: android.net.Uri;

        r1 := @parameter1: java.lang.String;

     label1:
        $r3 = virtualinvoke r0.<android.test.AndroidTestCase: android.content.Context getContext()>();

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        virtualinvoke $r4.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>(r17, null, null, null, null);

        r20 = new java.lang.StringBuilder;

        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected SecurityException requiring ");

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.test.AndroidTestCase: void fail(java.lang.String)>($r8);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        r22 = (java.lang.SecurityException) $r9;

        $r10 = virtualinvoke r22.<java.lang.SecurityException: java.lang.String getMessage()>();

        staticinvoke <android.test.AndroidTestCase: void assertNotNull(java.lang.String,java.lang.Object)>("security exception\'s error message.", $r10);

        r21 = new java.lang.StringBuilder;

        specialinvoke r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("error message should contain ");

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r15 = virtualinvoke r21.<java.lang.StringBuilder: java.lang.String toString()>();

        r23 = (java.lang.SecurityException) $r9;

        $r16 = virtualinvoke r23.<java.lang.SecurityException: java.lang.String getMessage()>();

        $z0 = virtualinvoke $r16.<java.lang.String: boolean contains(java.lang.CharSequence)>(r1);

        staticinvoke <android.test.AndroidTestCase: void assertTrue(java.lang.String,boolean)>($r15, $z0);

     label4:
        return;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }

    public void assertWritingContentUriRequiresPermission(android.net.Uri, java.lang.String)
    {
        android.test.AndroidTestCase r0;
        java.lang.String r1, $r7, $r9, $r14, $r17, $r18;
        android.content.ContentResolver r2;
        android.content.Context $r3;
        java.lang.Throwable $r8;
        boolean $z0;
        android.net.Uri r19;
        android.content.ContentValues r24;
        java.lang.StringBuilder r25, r26;
        java.lang.SecurityException r27, r28, r29;

        r0 := @this: android.test.AndroidTestCase;

        r19 := @parameter0: android.net.Uri;

        r1 := @parameter1: java.lang.String;

     label1:
        $r3 = virtualinvoke r0.<android.test.AndroidTestCase: android.content.Context getContext()>();

        r2 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r24 = new android.content.ContentValues;

        specialinvoke r24.<android.content.ContentValues: void <init>()>();

        virtualinvoke r2.<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>(r19, r24);

        r25 = new java.lang.StringBuilder;

        specialinvoke r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected SecurityException requiring ");

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.test.AndroidTestCase: void fail(java.lang.String)>($r7);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        r27 = (java.lang.SecurityException) $r8;

        $r9 = virtualinvoke r27.<java.lang.SecurityException: java.lang.String getMessage()>();

        staticinvoke <android.test.AndroidTestCase: void assertNotNull(java.lang.String,java.lang.Object)>("security exception\'s error message.", $r9);

        r26 = new java.lang.StringBuilder;

        specialinvoke r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("error message should contain \"");

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\". Got: \"");

        r28 = (java.lang.SecurityException) $r8;

        $r14 = virtualinvoke r28.<java.lang.SecurityException: java.lang.String getMessage()>();

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\".");

        $r17 = virtualinvoke r26.<java.lang.StringBuilder: java.lang.String toString()>();

        r29 = (java.lang.SecurityException) $r8;

        $r18 = virtualinvoke r29.<java.lang.SecurityException: java.lang.String getMessage()>();

        $z0 = virtualinvoke $r18.<java.lang.String: boolean contains(java.lang.CharSequence)>(r1);

        staticinvoke <android.test.AndroidTestCase: void assertTrue(java.lang.String,boolean)>($r17, $z0);

     label4:
        return;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }

    public android.content.Context getContext()
    {
        android.test.AndroidTestCase r0;
        android.content.Context $r1;

        r0 := @this: android.test.AndroidTestCase;

        $r1 = r0.<android.test.AndroidTestCase: android.content.Context mContext>;

        return $r1;
    }

    public android.content.Context getTestContext()
    {
        android.test.AndroidTestCase r0;
        android.content.Context $r1;

        r0 := @this: android.test.AndroidTestCase;

        $r1 = r0.<android.test.AndroidTestCase: android.content.Context mTestContext>;

        return $r1;
    }

    protected void scrubClass(java.lang.Class) throws java.lang.IllegalAccessException
    {
        android.test.AndroidTestCase r0;
        java.lang.reflect.Field[] r1;
        int i0, $i1, i4;
        java.lang.reflect.Field r2;
        java.lang.Class $r3, $r4, r7;
        boolean $z0, $z1;
        java.lang.Object $r5;
        java.lang.Exception $r6;

        r0 := @this: android.test.AndroidTestCase;

        r7 := @parameter0: java.lang.Class;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r1 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i0 = lengthof r1;

        i4 = 0;

     label1:
        if i4 >= i0 goto label7;

        r2 = r1[i4];

        $r4 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.Class getType()>();

        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isPrimitive()>();

        if $z0 != 0 goto label6;

        $i1 = virtualinvoke r2.<java.lang.reflect.Field: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i1);

        if $z1 != 0 goto label6;

     label2:
        virtualinvoke r2.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        virtualinvoke r2.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r0, null);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("TestCase", "Error: Could not nullify field!");

     label5:
        $r5 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        if $r5 == null goto label6;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("TestCase", "Error: Could not nullify field!");

     label6:
        i4 = i4 + 1;

        goto label1;

     label7:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public void setContext(android.content.Context)
    {
        android.test.AndroidTestCase r0;
        android.content.Context r1;

        r0 := @this: android.test.AndroidTestCase;

        r1 := @parameter0: android.content.Context;

        r0.<android.test.AndroidTestCase: android.content.Context mContext> = r1;

        return;
    }

    public void setTestContext(android.content.Context)
    {
        android.test.AndroidTestCase r0;
        android.content.Context r1;

        r0 := @this: android.test.AndroidTestCase;

        r1 := @parameter0: android.content.Context;

        r0.<android.test.AndroidTestCase: android.content.Context mTestContext> = r1;

        return;
    }

    protected void setUp() throws java.lang.Exception
    {
        android.test.AndroidTestCase r0;

        r0 := @this: android.test.AndroidTestCase;

        specialinvoke r0.<junit.framework.TestCase: void setUp()>();

        return;
    }

    protected void tearDown() throws java.lang.Exception
    {
        android.test.AndroidTestCase r0;

        r0 := @this: android.test.AndroidTestCase;

        specialinvoke r0.<junit.framework.TestCase: void tearDown()>();

        return;
    }

    public void testAndroidTestCaseSetupProperly()
    {
        android.test.AndroidTestCase r0;
        android.content.Context $r1;

        r0 := @this: android.test.AndroidTestCase;

        $r1 = r0.<android.test.AndroidTestCase: android.content.Context mContext>;

        staticinvoke <android.test.AndroidTestCase: void assertNotNull(java.lang.String,java.lang.Object)>("Context is null. setContext should be called before tests are run", $r1);

        return;
    }
}
