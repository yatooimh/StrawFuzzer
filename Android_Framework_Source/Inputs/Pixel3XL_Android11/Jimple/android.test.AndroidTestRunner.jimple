public class android.test.AndroidTestRunner extends junit.runner.BaseTestRunner
{
    private android.content.Context mContext;
    private android.app.Instrumentation mInstrumentation;
    private boolean mSkipExecution;
    private java.util.List mTestCases;
    private java.lang.String mTestClassName;
    private java.util.List mTestListeners;
    private junit.framework.TestResult mTestResult;

    public void <init>()
    {
        android.test.AndroidTestRunner r0;
        java.util.ArrayList $r1;

        r0 := @this: android.test.AndroidTestRunner;

        specialinvoke r0.<junit.runner.BaseTestRunner: void <init>()>();

        r0.<android.test.AndroidTestRunner: boolean mSkipExecution> = 0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<android.test.AndroidTestRunner: java.util.List mTestListeners> = $r1;

        return;
    }

    private junit.framework.TestCase buildSingleTestMethod(java.lang.Class, java.lang.String)
    {
        android.test.AndroidTestRunner r0;
        java.lang.String r1;
        java.lang.Class[] $r2, $r6;
        java.lang.reflect.Constructor $r3, $r7;
        java.lang.Object[] $r4, $r8;
        java.lang.Throwable $r5, $r9;
        java.lang.Class r10;
        junit.framework.TestCase r11, r13;

        r0 := @this: android.test.AndroidTestRunner;

        r10 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

     label1:
        $r2 = newarray (java.lang.Class)[0];

        $r3 = virtualinvoke r10.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r2);

        $r4 = newarray (java.lang.Object)[0];

        r11 = specialinvoke r0.<android.test.AndroidTestRunner: junit.framework.TestCase newSingleTestMethod(java.lang.Class,java.lang.String,java.lang.reflect.Constructor,java.lang.Object[])>(r10, r1, $r3, $r4);

     label2:
        return r11;

     label3:
        $r5 := @caughtexception;

     label4:
        $r6 = newarray (java.lang.Class)[1];

        $r6[0] = class "Ljava/lang/String;";

        $r7 = virtualinvoke r10.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r6);

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = r1;

        r13 = specialinvoke r0.<android.test.AndroidTestRunner: junit.framework.TestCase newSingleTestMethod(java.lang.Class,java.lang.String,java.lang.reflect.Constructor,java.lang.Object[])>(r10, r1, $r7, $r8);

     label5:
        return r13;

     label6:
        $r9 := @caughtexception;

        return null;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
        catch java.lang.NoSuchMethodException from label4 to label5 with label6;
    }

    private junit.framework.Test getTest(java.lang.Class)
    {
        android.test.AndroidTestRunner r0;
        java.lang.Class r1, $r2;
        boolean $z0;
        java.lang.Class[] $r3;
        java.lang.reflect.Constructor $r4;
        java.lang.Object[] $r5;
        java.lang.Object $r6;
        android.test.TestSuiteProvider $r7;
        java.lang.Throwable $r8, $r14, $r20, $r26;
        java.lang.StringBuilder $r9, $r15, $r21, $r27;
        java.lang.String $r11, $r13, $r17, $r19, $r23, $r25, $r29, $r31, $r41;
        junit.framework.TestSuite r32;
        junit.framework.Test $r42;

        r0 := @this: android.test.AndroidTestRunner;

        r1 := @parameter0: java.lang.Class;

        $r2 = class "Landroid/test/TestSuiteProvider;";

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z0 == 0 goto label7;

     label1:
        $r3 = newarray (java.lang.Class)[0];

        $r4 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r3);

        $r5 = newarray (java.lang.Object)[0];

        $r6 = virtualinvoke $r4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r5);

        $r7 = (android.test.TestSuiteProvider) $r6;

        r32 = interfaceinvoke $r7.<android.test.TestSuiteProvider: junit.framework.TestSuite getTestSuite()>();

     label2:
        return r32;

     label3:
        $r20 := @caughtexception;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No such method on test suite provider. Class: ");

        $r23 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.test.AndroidTestRunner: void runFailed(java.lang.String)>($r25);

        goto label7;

     label4:
        $r8 := @caughtexception;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invocation exception test suite provider. Class: ");

        $r11 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.test.AndroidTestRunner: void runFailed(java.lang.String)>($r13);

        goto label7;

     label5:
        $r14 := @caughtexception;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal access of test suite provider. Class: ");

        $r17 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.test.AndroidTestRunner: void runFailed(java.lang.String)>($r19);

        goto label7;

     label6:
        $r26 := @caughtexception;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not instantiate test suite provider. Class: ");

        $r29 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.test.AndroidTestRunner: void runFailed(java.lang.String)>($r31);

     label7:
        $r41 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r42 = virtualinvoke r0.<android.test.AndroidTestRunner: junit.framework.Test getTest(java.lang.String)>($r41);

        return $r42;

        catch java.lang.InstantiationException from label1 to label2 with label6;
        catch java.lang.IllegalAccessException from label1 to label2 with label5;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label4;
        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    private java.lang.Class loadTestClass(java.lang.String)
    {
        android.test.AndroidTestRunner r0;
        java.lang.String r1, $r8;
        android.content.Context $r2;
        java.lang.ClassLoader $r3;
        java.lang.ClassNotFoundException $r4;
        java.lang.StringBuilder $r5;
        java.lang.Class r9;

        r0 := @this: android.test.AndroidTestRunner;

        r1 := @parameter0: java.lang.String;

     label1:
        $r2 = r0.<android.test.AndroidTestRunner: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.ClassLoader getClassLoader()>();

        r9 = virtualinvoke $r3.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1);

     label2:
        return r9;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find test class. Class: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.test.AndroidTestRunner: void runFailed(java.lang.String)>($r8);

        return null;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    private transient junit.framework.TestCase newSingleTestMethod(java.lang.Class, java.lang.String, java.lang.reflect.Constructor, java.lang.Object[])
    {
        android.test.AndroidTestRunner r0;
        java.lang.Class r1;
        java.lang.Object[] r2;
        java.lang.Object $r3;
        java.lang.Throwable $r4, $r10, $r16, $r22;
        java.lang.StringBuilder $r5, $r11, $r17, $r23;
        java.lang.String $r7, $r9, $r13, $r15, $r19, $r21, $r25, $r27, r28;
        java.lang.reflect.Constructor r29;
        junit.framework.TestCase r30;

        r0 := @this: android.test.AndroidTestRunner;

        r1 := @parameter0: java.lang.Class;

        r28 := @parameter1: java.lang.String;

        r29 := @parameter2: java.lang.reflect.Constructor;

        r2 := @parameter3: java.lang.Object[];

     label1:
        $r3 = virtualinvoke r29.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(r2);

        r30 = (junit.framework.TestCase) $r3;

        virtualinvoke r30.<junit.framework.TestCase: void setName(java.lang.String)>(r28);

     label2:
        return r30;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Constructor thew an exception. Class: ");

        $r7 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.test.AndroidTestRunner: void runFailed(java.lang.String)>($r9);

        goto label7;

     label4:
        $r10 := @caughtexception;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal argument passed to constructor. Class: ");

        $r13 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.test.AndroidTestRunner: void runFailed(java.lang.String)>($r15);

        goto label7;

     label5:
        $r16 := @caughtexception;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not instantiate test class. Class: ");

        $r19 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.test.AndroidTestRunner: void runFailed(java.lang.String)>($r21);

        goto label7;

     label6:
        $r22 := @caughtexception;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not access test class. Class: ");

        $r25 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.test.AndroidTestRunner: void runFailed(java.lang.String)>($r27);

     label7:
        return null;

        catch java.lang.IllegalAccessException from label1 to label2 with label6;
        catch java.lang.InstantiationException from label1 to label2 with label5;
        catch java.lang.IllegalArgumentException from label1 to label2 with label4;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
    }

    private void setContextIfAndroidTestCase(junit.framework.Test, android.content.Context, android.content.Context)
    {
        android.test.AndroidTestRunner r0;
        junit.framework.Test r1;
        android.content.Context r2, r3;
        java.lang.Class $r4, $r5;
        boolean $z0;
        android.test.AndroidTestCase $r6, $r7;

        r0 := @this: android.test.AndroidTestRunner;

        r1 := @parameter0: junit.framework.Test;

        r2 := @parameter1: android.content.Context;

        r3 := @parameter2: android.content.Context;

        $r4 = class "Landroid/test/AndroidTestCase;";

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);

        if $z0 == 0 goto label1;

        $r6 = (android.test.AndroidTestCase) r1;

        virtualinvoke $r6.<android.test.AndroidTestCase: void setContext(android.content.Context)>(r2);

        $r7 = (android.test.AndroidTestCase) r1;

        virtualinvoke $r7.<android.test.AndroidTestCase: void setTestContext(android.content.Context)>(r3);

     label1:
        return;
    }

    private void setInstrumentationIfInstrumentationTestCase(junit.framework.Test, android.app.Instrumentation)
    {
        android.test.AndroidTestRunner r0;
        junit.framework.Test r1;
        android.app.Instrumentation r2;
        java.lang.Class $r3, $r4;
        boolean $z0;
        android.test.InstrumentationTestCase $r5;

        r0 := @this: android.test.AndroidTestRunner;

        r1 := @parameter0: junit.framework.Test;

        r2 := @parameter1: android.app.Instrumentation;

        $r3 = class "Landroid/test/InstrumentationTestCase;";

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r4);

        if $z0 == 0 goto label1;

        $r5 = (android.test.InstrumentationTestCase) r1;

        virtualinvoke $r5.<android.test.InstrumentationTestCase: void injectInstrumentation(android.app.Instrumentation)>(r2);

     label1:
        return;
    }

    private void setTest(junit.framework.Test, java.lang.Class)
    {
        android.test.AndroidTestRunner r0;
        junit.framework.Test r1;
        java.lang.Class r2, $r4;
        java.util.List $r3;
        boolean $z0;
        java.lang.String $r5, $r6;

        r0 := @this: android.test.AndroidTestRunner;

        r1 := @parameter0: junit.framework.Test;

        r2 := @parameter1: java.lang.Class;

        $r3 = staticinvoke <android.test.TestCaseUtil: java.util.List getTests(junit.framework.Test,boolean)>(r1, 1);

        r0.<android.test.AndroidTestRunner: java.util.List mTestCases> = $r3;

        $r4 = class "Ljunit/framework/TestSuite;";

        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z0 == 0 goto label1;

        $r6 = staticinvoke <android.test.TestCaseUtil: java.lang.String getTestName(junit.framework.Test)>(r1);

        r0.<android.test.AndroidTestRunner: java.lang.String mTestClassName> = $r6;

        goto label2;

     label1:
        $r5 = virtualinvoke r2.<java.lang.Class: java.lang.String getSimpleName()>();

        r0.<android.test.AndroidTestRunner: java.lang.String mTestClassName> = $r5;

     label2:
        return;
    }

    private boolean shouldRunSingleTestMethod(java.lang.String, java.lang.Class)
    {
        android.test.AndroidTestRunner r0;
        java.lang.String r1;
        java.lang.Class r2, $r3;
        boolean $z0, z1;

        r0 := @this: android.test.AndroidTestRunner;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        if r1 == null goto label1;

        $r3 = class "Ljunit/framework/TestCase;";

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2);

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public void addTestListener(junit.framework.TestListener)
    {
        android.test.AndroidTestRunner r0;
        junit.framework.TestListener r1;
        java.util.List $r2;

        r0 := @this: android.test.AndroidTestRunner;

        r1 := @parameter0: junit.framework.TestListener;

        if r1 == null goto label1;

        $r2 = r0.<android.test.AndroidTestRunner: java.util.List mTestListeners>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

     label1:
        return;
    }

    public void clearTestListeners()
    {
        android.test.AndroidTestRunner r0;
        java.util.List $r1;

        r0 := @this: android.test.AndroidTestRunner;

        $r1 = r0.<android.test.AndroidTestRunner: java.util.List mTestListeners>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        return;
    }

    protected junit.framework.TestResult createTestResult()
    {
        android.test.AndroidTestRunner r0;
        boolean $z0;
        junit.framework.TestResult $r1;
        android.test.NoExecTestResult $r2;

        r0 := @this: android.test.AndroidTestRunner;

        $z0 = r0.<android.test.AndroidTestRunner: boolean mSkipExecution>;

        if $z0 == 0 goto label1;

        $r2 = new android.test.NoExecTestResult;

        specialinvoke $r2.<android.test.NoExecTestResult: void <init>()>();

        return $r2;

     label1:
        $r1 = new junit.framework.TestResult;

        specialinvoke $r1.<junit.framework.TestResult: void <init>()>();

        return $r1;
    }

    public java.util.List getTestCases()
    {
        android.test.AndroidTestRunner r0;
        java.util.List $r1;

        r0 := @this: android.test.AndroidTestRunner;

        $r1 = r0.<android.test.AndroidTestRunner: java.util.List mTestCases>;

        return $r1;
    }

    public java.lang.String getTestClassName()
    {
        android.test.AndroidTestRunner r0;
        java.lang.String $r1;

        r0 := @this: android.test.AndroidTestRunner;

        $r1 = r0.<android.test.AndroidTestRunner: java.lang.String mTestClassName>;

        return $r1;
    }

    public junit.framework.TestResult getTestResult()
    {
        android.test.AndroidTestRunner r0;
        junit.framework.TestResult $r1;

        r0 := @this: android.test.AndroidTestRunner;

        $r1 = r0.<android.test.AndroidTestRunner: junit.framework.TestResult mTestResult>;

        return $r1;
    }

    protected java.lang.Class loadSuiteClass(java.lang.String) throws java.lang.ClassNotFoundException
    {
        android.test.AndroidTestRunner r0;
        java.lang.String r1;
        android.content.Context $r2;
        java.lang.ClassLoader $r3;
        java.lang.Class $r4;

        r0 := @this: android.test.AndroidTestRunner;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.test.AndroidTestRunner: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.ClassLoader getClassLoader()>();

        $r4 = virtualinvoke $r3.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1);

        return $r4;
    }

    protected void runFailed(java.lang.String)
    {
        android.test.AndroidTestRunner r0;
        java.lang.String r1;
        java.lang.RuntimeException $r2;

        r0 := @this: android.test.AndroidTestRunner;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>(r1);

        throw $r2;
    }

    public void runTest()
    {
        android.test.AndroidTestRunner r0;
        junit.framework.TestResult $r1;

        r0 := @this: android.test.AndroidTestRunner;

        $r1 = virtualinvoke r0.<android.test.AndroidTestRunner: junit.framework.TestResult createTestResult()>();

        virtualinvoke r0.<android.test.AndroidTestRunner: void runTest(junit.framework.TestResult)>($r1);

        return;
    }

    public void runTest(junit.framework.TestResult)
    {
        android.test.AndroidTestRunner r0;
        junit.framework.TestCase r1;
        java.util.List $r2, $r3;
        boolean $z0, $z1;
        java.lang.Object $r4, $r8;
        android.content.Context $r5, r14;
        android.app.Instrumentation $r6, r13;
        junit.framework.TestResult $r7, $r9, r10;
        java.util.Iterator r11, r15;
        junit.framework.TestListener r12;

        r0 := @this: android.test.AndroidTestRunner;

        r10 := @parameter0: junit.framework.TestResult;

        r0.<android.test.AndroidTestRunner: junit.framework.TestResult mTestResult> = r10;

        $r2 = r0.<android.test.AndroidTestRunner: java.util.List mTestListeners>;

        r11 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        r12 = (junit.framework.TestListener) $r8;

        $r9 = r0.<android.test.AndroidTestRunner: junit.framework.TestResult mTestResult>;

        virtualinvoke $r9.<junit.framework.TestResult: void addListener(junit.framework.TestListener)>(r12);

        goto label1;

     label2:
        r13 = r0.<android.test.AndroidTestRunner: android.app.Instrumentation mInstrumentation>;

        if r13 != null goto label3;

        r14 = r0.<android.test.AndroidTestRunner: android.content.Context mContext>;

        goto label4;

     label3:
        r14 = virtualinvoke r13.<android.app.Instrumentation: android.content.Context getContext()>();

     label4:
        $r3 = r0.<android.test.AndroidTestRunner: java.util.List mTestCases>;

        r15 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r4 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        r1 = (junit.framework.TestCase) $r4;

        $r5 = r0.<android.test.AndroidTestRunner: android.content.Context mContext>;

        specialinvoke r0.<android.test.AndroidTestRunner: void setContextIfAndroidTestCase(junit.framework.Test,android.content.Context,android.content.Context)>(r1, $r5, r14);

        $r6 = r0.<android.test.AndroidTestRunner: android.app.Instrumentation mInstrumentation>;

        specialinvoke r0.<android.test.AndroidTestRunner: void setInstrumentationIfInstrumentationTestCase(junit.framework.Test,android.app.Instrumentation)>(r1, $r6);

        $r7 = r0.<android.test.AndroidTestRunner: junit.framework.TestResult mTestResult>;

        virtualinvoke r1.<junit.framework.TestCase: void run(junit.framework.TestResult)>($r7);

        goto label5;

     label6:
        return;
    }

    public void setContext(android.content.Context)
    {
        android.test.AndroidTestRunner r0;
        android.content.Context r1;

        r0 := @this: android.test.AndroidTestRunner;

        r1 := @parameter0: android.content.Context;

        r0.<android.test.AndroidTestRunner: android.content.Context mContext> = r1;

        return;
    }

    public void setInstrumentaiton(android.app.Instrumentation)
    {
        android.test.AndroidTestRunner r0;
        android.app.Instrumentation r1;

        r0 := @this: android.test.AndroidTestRunner;

        r1 := @parameter0: android.app.Instrumentation;

        virtualinvoke r0.<android.test.AndroidTestRunner: void setInstrumentation(android.app.Instrumentation)>(r1);

        return;
    }

    public void setInstrumentation(android.app.Instrumentation)
    {
        android.test.AndroidTestRunner r0;
        android.app.Instrumentation r1;

        r0 := @this: android.test.AndroidTestRunner;

        r1 := @parameter0: android.app.Instrumentation;

        r0.<android.test.AndroidTestRunner: android.app.Instrumentation mInstrumentation> = r1;

        return;
    }

    void setSkipExecution(boolean)
    {
        android.test.AndroidTestRunner r0;
        boolean z0;

        r0 := @this: android.test.AndroidTestRunner;

        z0 := @parameter0: boolean;

        r0.<android.test.AndroidTestRunner: boolean mSkipExecution> = z0;

        return;
    }

    public void setTest(junit.framework.Test)
    {
        android.test.AndroidTestRunner r0;
        junit.framework.Test r1;
        java.lang.Class $r2;

        r0 := @this: android.test.AndroidTestRunner;

        r1 := @parameter0: junit.framework.Test;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        specialinvoke r0.<android.test.AndroidTestRunner: void setTest(junit.framework.Test,java.lang.Class)>(r1, $r2);

        return;
    }

    public void setTestClassName(java.lang.String, java.lang.String)
    {
        android.test.AndroidTestRunner r0;
        boolean $z0;
        junit.framework.Test $r2;
        java.util.ArrayList $r3;
        java.lang.String $r4, r5, r6;
        java.lang.Class r7;
        junit.framework.TestCase r8;

        r0 := @this: android.test.AndroidTestRunner;

        r5 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        r7 = specialinvoke r0.<android.test.AndroidTestRunner: java.lang.Class loadTestClass(java.lang.String)>(r5);

        $z0 = specialinvoke r0.<android.test.AndroidTestRunner: boolean shouldRunSingleTestMethod(java.lang.String,java.lang.Class)>(r6, r7);

        if $z0 == 0 goto label1;

        r8 = specialinvoke r0.<android.test.AndroidTestRunner: junit.framework.TestCase buildSingleTestMethod(java.lang.Class,java.lang.String)>(r7, r6);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<android.test.AndroidTestRunner: java.util.List mTestCases> = $r3;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r8);

        $r4 = virtualinvoke r7.<java.lang.Class: java.lang.String getSimpleName()>();

        r0.<android.test.AndroidTestRunner: java.lang.String mTestClassName> = $r4;

        goto label2;

     label1:
        $r2 = specialinvoke r0.<android.test.AndroidTestRunner: junit.framework.Test getTest(java.lang.Class)>(r7);

        specialinvoke r0.<android.test.AndroidTestRunner: void setTest(junit.framework.Test,java.lang.Class)>($r2, r7);

     label2:
        return;
    }

    public void testEnded(java.lang.String)
    {
        android.test.AndroidTestRunner r0;
        java.lang.String r1;

        r0 := @this: android.test.AndroidTestRunner;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void testFailed(int, junit.framework.Test, java.lang.Throwable)
    {
        android.test.AndroidTestRunner r0;
        int i0;
        junit.framework.Test r1;
        java.lang.Throwable r2;

        r0 := @this: android.test.AndroidTestRunner;

        i0 := @parameter0: int;

        r1 := @parameter1: junit.framework.Test;

        r2 := @parameter2: java.lang.Throwable;

        return;
    }

    public void testStarted(java.lang.String)
    {
        android.test.AndroidTestRunner r0;
        java.lang.String r1;

        r0 := @this: android.test.AndroidTestRunner;

        r1 := @parameter0: java.lang.String;

        return;
    }
}
