public class android.test.ClassPathPackageInfoSource extends java.lang.Object
{
    private static final java.lang.ClassLoader CLASS_LOADER;
    private static java.lang.String[] apkPaths;
    private static android.test.ClassPathPackageInfoSource classPathSource;
    private final android.test.SimpleCache cache;
    private final java.lang.ClassLoader classLoader;
    private final java.lang.String[] classPath;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.ClassLoader $r1;

        $r0 = class "Landroid/test/ClassPathPackageInfoSource;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        <android.test.ClassPathPackageInfoSource: java.lang.ClassLoader CLASS_LOADER> = $r1;

        return;
    }

    private void <init>(java.lang.ClassLoader)
    {
        android.test.ClassPathPackageInfoSource r0;
        java.lang.ClassLoader r1;
        android.test.ClassPathPackageInfoSource$1 $r2;
        java.lang.String[] $r3;

        r0 := @this: android.test.ClassPathPackageInfoSource;

        r1 := @parameter0: java.lang.ClassLoader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new android.test.ClassPathPackageInfoSource$1;

        specialinvoke $r2.<android.test.ClassPathPackageInfoSource$1: void <init>(android.test.ClassPathPackageInfoSource)>(r0);

        r0.<android.test.ClassPathPackageInfoSource: android.test.SimpleCache cache> = $r2;

        r0.<android.test.ClassPathPackageInfoSource: java.lang.ClassLoader classLoader> = r1;

        $r3 = staticinvoke <android.test.ClassPathPackageInfoSource: java.lang.String[] getClassPath()>();

        r0.<android.test.ClassPathPackageInfoSource: java.lang.String[] classPath> = $r3;

        return;
    }

    static android.test.ClassPathPackageInfoSource$ClassPathPackageInfo access$000(android.test.ClassPathPackageInfoSource, java.lang.String)
    {
        android.test.ClassPathPackageInfoSource r0;
        java.lang.String r1;
        android.test.ClassPathPackageInfoSource$ClassPathPackageInfo $r2;

        r0 := @parameter0: android.test.ClassPathPackageInfoSource;

        r1 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<android.test.ClassPathPackageInfoSource: android.test.ClassPathPackageInfoSource$ClassPathPackageInfo createPackageInfo(java.lang.String)>(r1);

        return $r2;
    }

    static android.test.SimpleCache access$300(android.test.ClassPathPackageInfoSource)
    {
        android.test.ClassPathPackageInfoSource r0;
        android.test.SimpleCache $r1;

        r0 := @parameter0: android.test.ClassPathPackageInfoSource;

        $r1 = r0.<android.test.ClassPathPackageInfoSource: android.test.SimpleCache cache>;

        return $r1;
    }

    private android.test.ClassPathPackageInfoSource$ClassPathPackageInfo createPackageInfo(java.lang.String)
    {
        android.test.ClassPathPackageInfoSource r0;
        java.lang.String r1, r5, $r19, $r21;
        java.util.Iterator r4;
        java.util.TreeSet $r7, $r8;
        java.util.HashSet $r9;
        android.test.ClassPathPackageInfoSource$ClassPathPackageInfo $r10;
        java.lang.Object $r11;
        boolean $z0, $z1, $z3;
        java.lang.ClassLoader $r12, r23;
        java.lang.Class $r13;
        java.lang.Throwable $r14;
        java.lang.StringBuilder $r15;

        r0 := @this: android.test.ClassPathPackageInfoSource;

        r1 := @parameter0: java.lang.String;

        $r7 = new java.util.TreeSet;

        specialinvoke $r7.<java.util.TreeSet: void <init>()>();

        $r8 = new java.util.TreeSet;

        specialinvoke $r8.<java.util.TreeSet: void <init>()>();

        $r9 = new java.util.HashSet;

        specialinvoke $r9.<java.util.HashSet: void <init>()>();

        specialinvoke r0.<android.test.ClassPathPackageInfoSource: void findClasses(java.lang.String,java.util.Set,java.util.Set)>(r1, $r8, $r7);

        r4 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label9;

        $r11 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r11;

        $z0 = virtualinvoke r5.<java.lang.String: boolean endsWith(java.lang.String)>(".R");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r5.<java.lang.String: boolean endsWith(java.lang.String)>(".Manifest");

        if $z1 == 0 goto label2;

        goto label1;

     label2:
        $r12 = r0.<android.test.ClassPathPackageInfoSource: java.lang.ClassLoader classLoader>;

        if $r12 == null goto label4;

        r23 = r0.<android.test.ClassPathPackageInfoSource: java.lang.ClassLoader classLoader>;

     label3:
        goto label5;

     label4:
        r23 = <android.test.ClassPathPackageInfoSource: java.lang.ClassLoader CLASS_LOADER>;

     label5:
        $r13 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r5, 0, r23);

        interfaceinvoke $r9.<java.util.Set: boolean add(java.lang.Object)>($r13);

     label6:
        goto label8;

     label7:
        $r14 := @caughtexception;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot load class. Make sure it is in your apk. Class name: \'");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'. Message: ");

        $r19 = virtualinvoke $r14.<java.lang.Throwable: java.lang.String getMessage()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ClassPathPackageInfoSource", $r21, $r14);

     label8:
        goto label1;

     label9:
        $r10 = new android.test.ClassPathPackageInfoSource$ClassPathPackageInfo;

        specialinvoke $r10.<android.test.ClassPathPackageInfoSource$ClassPathPackageInfo: void <init>(android.test.ClassPathPackageInfoSource,java.lang.String,java.util.Set,java.util.Set,android.test.ClassPathPackageInfoSource$1)>(r0, r1, $r7, $r9, null);

        return $r10;

        catch java.lang.ClassNotFoundException from label2 to label3 with label7;
        catch java.lang.NoClassDefFoundError from label2 to label3 with label7;
        catch java.lang.ClassNotFoundException from label4 to label5 with label7;
        catch java.lang.NoClassDefFoundError from label4 to label5 with label7;
        catch java.lang.ClassNotFoundException from label5 to label6 with label7;
        catch java.lang.NoClassDefFoundError from label5 to label6 with label7;
    }

    private void findClasses(java.lang.String, java.util.Set, java.util.Set)
    {
        android.test.ClassPathPackageInfoSource r0;
        java.util.Set r1, r18;
        java.lang.String[] r2, r4;
        int i0, i1, i2, i3;
        java.lang.String r3, r5, $r13, $r16, r17;
        boolean $z0, $z1;
        java.lang.Throwable $r8;
        java.io.File r21, r22;
        java.lang.StringBuilder r23;
        java.lang.AssertionError r24;
        java.io.IOException r25;

        r0 := @this: android.test.ClassPathPackageInfoSource;

        r17 := @parameter0: java.lang.String;

        r18 := @parameter1: java.util.Set;

        r1 := @parameter2: java.util.Set;

        r2 = r0.<android.test.ClassPathPackageInfoSource: java.lang.String[] classPath>;

        i0 = lengthof r2;

        i2 = 0;

     label01:
        if i2 >= i0 goto label12;

        r3 = r2[i2];

        r21 = new java.io.File;

        specialinvoke r21.<java.io.File: void <init>(java.lang.String)>(r3);

        $z0 = virtualinvoke r21.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label11;

     label02:
        $z1 = virtualinvoke r3.<java.lang.String: boolean endsWith(java.lang.String)>(".apk");

        if $z1 == 0 goto label04;

        specialinvoke r0.<android.test.ClassPathPackageInfoSource: void findClassesInApk(java.lang.String,java.lang.String,java.util.Set,java.util.Set)>(r3, r17, r18, r1);

     label03:
        goto label09;

     label04:
        r4 = <android.test.ClassPathPackageInfoSource: java.lang.String[] apkPaths>;

        i1 = lengthof r4;

     label05:
        i3 = 0;

     label06:
        if i3 >= i1 goto label09;

        r5 = r4[i3];

     label07:
        r22 = new java.io.File;

        specialinvoke r22.<java.io.File: void <init>(java.lang.String)>(r5);

        specialinvoke r0.<android.test.ClassPathPackageInfoSource: void scanForApkFiles(java.io.File,java.lang.String,java.util.Set,java.util.Set)>(r22, r17, r18, r1);

     label08:
        i3 = i3 + 1;

        goto label06;

     label09:
        goto label11;

     label10:
        $r8 := @caughtexception;

        r23 = new java.lang.StringBuilder;

        specialinvoke r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t read classpath entry ");

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        r25 = (java.io.IOException) $r8;

        $r13 = virtualinvoke r25.<java.io.IOException: java.lang.String getMessage()>();

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        r24 = new java.lang.AssertionError;

        $r16 = virtualinvoke r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r24.<java.lang.AssertionError: void <init>(java.lang.Object)>($r16);

        throw r24;

     label11:
        i2 = i2 + 1;

        goto label01;

     label12:
        return;

        catch java.io.IOException from label02 to label03 with label10;
        catch java.io.IOException from label04 to label05 with label10;
        catch java.io.IOException from label07 to label08 with label10;
    }

    private void findClassesInApk(java.lang.String, java.lang.String, java.util.Set, java.util.Set) throws java.io.IOException
    {
        android.test.ClassPathPackageInfoSource r0;
        java.lang.String r1, r4, r8, r11;
        java.util.Set r2, r3;
        int i0, $i1, $i2;
        boolean $z0, $z1, $z2;
        java.lang.Object $r5;
        java.lang.Throwable $r6, $r7;
        dalvik.system.DexFile r9;
        java.util.Enumeration r10;

        r0 := @this: android.test.ClassPathPackageInfoSource;

        r8 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.Set;

        r3 := @parameter3: java.util.Set;

     label01:
        r9 = new dalvik.system.DexFile;

        specialinvoke r9.<dalvik.system.DexFile: void <init>(java.lang.String)>(r8);

        r10 = virtualinvoke r9.<dalvik.system.DexFile: java.util.Enumeration entries()>();

     label02:
        $z0 = interfaceinvoke r10.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label11;

        $r5 = interfaceinvoke r10.<java.util.Enumeration: java.lang.Object nextElement()>();

        r4 = (java.lang.String) $r5;

        $z1 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>(r1);

        if $z1 == 0 goto label10;

     label03:
        r11 = r1;

     label04:
        i0 = virtualinvoke r4.<java.lang.String: int lastIndexOf(int)>(46);

     label05:
        if i0 <= 0 goto label07;

     label06:
        r11 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

     label07:
        $i1 = virtualinvoke r11.<java.lang.String: int length()>();

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i1 <= $i2 goto label09;

        interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>(r11);

     label08:
        goto label10;

     label09:
        $z2 = staticinvoke <android.test.ClassPathPackageInfoSource: boolean isToplevelClass(java.lang.String)>(r4);

        if $z2 == 0 goto label10;

        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>(r4);

     label10:
        goto label02;

     label11:
        goto label14;

     label12:
        $r6 := @caughtexception;

        throw $r6;

     label13:
        $r7 := @caughtexception;

        goto label11;

     label14:
        return;

        catch java.io.IOException from label01 to label02 with label13;
        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.io.IOException from label02 to label03 with label13;
        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.io.IOException from label04 to label05 with label13;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.io.IOException from label06 to label07 with label13;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.io.IOException from label07 to label08 with label13;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.io.IOException from label09 to label10 with label13;
        catch java.lang.Throwable from label09 to label10 with label12;
    }

    public static android.test.ClassPathPackageInfoSource forClassPath(java.lang.ClassLoader)
    {
        java.lang.ClassLoader r0;
        android.test.ClassPathPackageInfoSource $r1, $r2, $r3;

        r0 := @parameter0: java.lang.ClassLoader;

        $r1 = <android.test.ClassPathPackageInfoSource: android.test.ClassPathPackageInfoSource classPathSource>;

        if $r1 != null goto label1;

        $r3 = new android.test.ClassPathPackageInfoSource;

        specialinvoke $r3.<android.test.ClassPathPackageInfoSource: void <init>(java.lang.ClassLoader)>(r0);

        <android.test.ClassPathPackageInfoSource: android.test.ClassPathPackageInfoSource classPathSource> = $r3;

     label1:
        $r2 = <android.test.ClassPathPackageInfoSource: android.test.ClassPathPackageInfoSource classPathSource>;

        return $r2;
    }

    private static java.lang.String[] getClassPath()
    {
        java.lang.String $r0, $r1, $r2;
        java.lang.String[] $r3;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.class.path");

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("path.separator", ":");

        $r2 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>($r1);

        $r3 = virtualinvoke $r0.<java.lang.String: java.lang.String[] split(java.lang.String)>($r2);

        return $r3;
    }

    private static boolean isToplevelClass(java.lang.String)
    {
        java.lang.String r0;
        int $i0;
        boolean z0;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(36);

        if $i0 >= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private void scanForApkFiles(java.io.File, java.lang.String, java.util.Set, java.util.Set) throws java.io.IOException
    {
        android.test.ClassPathPackageInfoSource r0;
        java.lang.String r1, $r4, $r6;
        java.util.Set r2, r3;
        int i0, i1;
        boolean $z0;
        java.io.File $r5, r7;
        java.io.File[] r8;

        r0 := @this: android.test.ClassPathPackageInfoSource;

        r7 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.Set;

        r3 := @parameter3: java.util.Set;

        $r4 = virtualinvoke r7.<java.io.File: java.lang.String getPath()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean endsWith(java.lang.String)>(".apk");

        if $z0 == 0 goto label1;

        $r6 = virtualinvoke r7.<java.io.File: java.lang.String getPath()>();

        specialinvoke r0.<android.test.ClassPathPackageInfoSource: void findClassesInApk(java.lang.String,java.lang.String,java.util.Set,java.util.Set)>($r6, r1, r2, r3);

        goto label3;

     label1:
        r8 = virtualinvoke r7.<java.io.File: java.io.File[] listFiles()>();

        if r8 == null goto label3;

        i0 = lengthof r8;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r5 = r8[i1];

        specialinvoke r0.<android.test.ClassPathPackageInfoSource: void scanForApkFiles(java.io.File,java.lang.String,java.util.Set,java.util.Set)>($r5, r1, r2, r3);

        i1 = i1 + 1;

        goto label2;

     label3:
        return;
    }

    static void setApkPaths(java.lang.String[])
    {
        java.lang.String[] r0;

        r0 := @parameter0: java.lang.String[];

        <android.test.ClassPathPackageInfoSource: java.lang.String[] apkPaths> = r0;

        return;
    }

    public java.util.Set getTopLevelClassesRecursive(java.lang.String)
    {
        android.test.ClassPathPackageInfoSource r0;
        java.lang.String r1;
        android.test.SimpleCache $r2;
        java.lang.Object $r3;
        android.test.ClassPathPackageInfoSource$ClassPathPackageInfo $r4;
        java.util.Set $r5;

        r0 := @this: android.test.ClassPathPackageInfoSource;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.test.ClassPathPackageInfoSource: android.test.SimpleCache cache>;

        $r3 = virtualinvoke $r2.<android.test.SimpleCache: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (android.test.ClassPathPackageInfoSource$ClassPathPackageInfo) $r3;

        $r5 = staticinvoke <android.test.ClassPathPackageInfoSource$ClassPathPackageInfo: java.util.Set access$100(android.test.ClassPathPackageInfoSource$ClassPathPackageInfo)>($r4);

        return $r5;
    }
}
