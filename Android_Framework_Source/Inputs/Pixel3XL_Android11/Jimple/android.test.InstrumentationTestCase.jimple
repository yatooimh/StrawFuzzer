public class android.test.InstrumentationTestCase extends junit.framework.TestCase
{
    private android.app.Instrumentation mInstrumentation;

    public void <init>()
    {
        android.test.InstrumentationTestCase r0;

        r0 := @this: android.test.InstrumentationTestCase;

        specialinvoke r0.<junit.framework.TestCase: void <init>()>();

        return;
    }

    static void access$000(android.test.InstrumentationTestCase, java.lang.reflect.Method, int, boolean) throws java.lang.Throwable
    {
        android.test.InstrumentationTestCase r0;
        java.lang.reflect.Method r1;
        int i0;
        boolean z0;

        r0 := @parameter0: android.test.InstrumentationTestCase;

        r1 := @parameter1: java.lang.reflect.Method;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        specialinvoke r0.<android.test.InstrumentationTestCase: void runMethod(java.lang.reflect.Method,int,boolean)>(r1, i0, z0);

        return;
    }

    private void runMethod(java.lang.reflect.Method, int) throws java.lang.Throwable
    {
        android.test.InstrumentationTestCase r0;
        java.lang.reflect.Method r1;
        int i0;

        r0 := @this: android.test.InstrumentationTestCase;

        r1 := @parameter0: java.lang.reflect.Method;

        i0 := @parameter1: int;

        specialinvoke r0.<android.test.InstrumentationTestCase: void runMethod(java.lang.reflect.Method,int,boolean)>(r1, i0, 0);

        return;
    }

    private void runMethod(java.lang.reflect.Method, int, boolean) throws java.lang.Throwable
    {
        android.test.InstrumentationTestCase r0;
        int i0, $i1, i2, i3, i4, i5, i6;
        boolean z0;
        java.lang.Throwable $r2, $r4, $r7, r11, r18;
        android.app.Instrumentation $r6, $r13;
        java.lang.reflect.Method r9;
        java.lang.Object[] $r10;
        android.os.Bundle r12, r21, r22, r23, r24;
        java.lang.IllegalAccessException r25;
        java.lang.reflect.InvocationTargetException r26, r27;

        r0 := @this: android.test.InstrumentationTestCase;

        r9 := @parameter0: java.lang.reflect.Method;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        i2 = 0;

     label01:
        $r10 = (java.lang.Object[]) null;

        virtualinvoke r9.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r10);

     label02:
        r11 = null;

        i3 = i2 + 1;

        i4 = i3;

        if z0 == 0 goto label11;

        r21 = new android.os.Bundle;

        specialinvoke r21.<android.os.Bundle: void <init>()>();

        r12 = r21;

        i4 = i3;

        r11 = null;

     label03:
        virtualinvoke r12.<android.os.Bundle: void putInt(java.lang.String,int)>("currentiterations", i4);

        $r13 = virtualinvoke r0.<android.test.InstrumentationTestCase: android.app.Instrumentation getInstrumentation()>();

        virtualinvoke $r13.<android.app.Instrumentation: void sendStatus(int,android.os.Bundle)>(2, r12);

        goto label11;

     label04:
        $r4 := @caughtexception;

        goto label14;

     label05:
        $r2 := @caughtexception;

     label06:
        r25 = (java.lang.IllegalAccessException) $r2;

        virtualinvoke r25.<java.lang.IllegalAccessException: java.lang.Throwable fillInStackTrace()>();

     label07:
        i5 = i2 + 1;

        r11 = $r2;

        i4 = i5;

        if z0 == 0 goto label11;

        r22 = new android.os.Bundle;

        specialinvoke r22.<android.os.Bundle: void <init>()>();

        r11 = $r2;

        i4 = i5;

        r12 = r22;

        goto label03;

     label08:
        $r7 := @caughtexception;

     label09:
        r26 = (java.lang.reflect.InvocationTargetException) $r7;

        virtualinvoke r26.<java.lang.reflect.InvocationTargetException: java.lang.Throwable fillInStackTrace()>();

        r27 = (java.lang.reflect.InvocationTargetException) $r7;

        r18 = virtualinvoke r27.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

     label10:
        i6 = i2 + 1;

        r11 = r18;

        i4 = i6;

        if z0 == 0 goto label11;

        r23 = new android.os.Bundle;

        specialinvoke r23.<android.os.Bundle: void <init>()>();

        r11 = r18;

        i4 = i6;

        r12 = r23;

        goto label03;

     label11:
        if i4 >= i0 goto label12;

        i2 = i4;

        if z0 != 0 goto label01;

        i2 = i4;

        if r11 != null goto label01;

     label12:
        if r11 != null goto label13;

        return;

     label13:
        throw r11;

     label14:
        if z0 == 0 goto label15;

        r24 = new android.os.Bundle;

        specialinvoke r24.<android.os.Bundle: void <init>()>();

        $i1 = i2 + 1;

        virtualinvoke r24.<android.os.Bundle: void putInt(java.lang.String,int)>("currentiterations", $i1);

        $r6 = virtualinvoke r0.<android.test.InstrumentationTestCase: android.app.Instrumentation getInstrumentation()>();

        virtualinvoke $r6.<android.app.Instrumentation: void sendStatus(int,android.os.Bundle)>(2, r24);

     label15:
        throw $r4;

        catch java.lang.reflect.InvocationTargetException from label01 to label02 with label08;
        catch java.lang.IllegalAccessException from label01 to label02 with label05;
        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label06 to label07 with label04;
        catch java.lang.Throwable from label09 to label10 with label04;
    }

    public android.app.Instrumentation getInstrumentation()
    {
        android.test.InstrumentationTestCase r0;
        android.app.Instrumentation $r1;

        r0 := @this: android.test.InstrumentationTestCase;

        $r1 = r0.<android.test.InstrumentationTestCase: android.app.Instrumentation mInstrumentation>;

        return $r1;
    }

    public void injectInsrumentation(android.app.Instrumentation)
    {
        android.test.InstrumentationTestCase r0;
        android.app.Instrumentation r1;

        r0 := @this: android.test.InstrumentationTestCase;

        r1 := @parameter0: android.app.Instrumentation;

        virtualinvoke r0.<android.test.InstrumentationTestCase: void injectInstrumentation(android.app.Instrumentation)>(r1);

        return;
    }

    public void injectInstrumentation(android.app.Instrumentation)
    {
        android.test.InstrumentationTestCase r0;
        android.app.Instrumentation r1;

        r0 := @this: android.test.InstrumentationTestCase;

        r1 := @parameter0: android.app.Instrumentation;

        r0.<android.test.InstrumentationTestCase: android.app.Instrumentation mInstrumentation> = r1;

        return;
    }

    public final android.app.Activity launchActivity(java.lang.String, java.lang.Class, android.os.Bundle)
    {
        android.test.InstrumentationTestCase r0;
        java.lang.String r1;
        java.lang.Class r2;
        android.os.Bundle r3;
        android.content.Intent $r5;
        android.app.Activity $r6;

        r0 := @this: android.test.InstrumentationTestCase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        r3 := @parameter2: android.os.Bundle;

        $r5 = new android.content.Intent;

        specialinvoke $r5.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.MAIN");

        if r3 == null goto label1;

        virtualinvoke $r5.<android.content.Intent: android.content.Intent putExtras(android.os.Bundle)>(r3);

     label1:
        $r6 = virtualinvoke r0.<android.test.InstrumentationTestCase: android.app.Activity launchActivityWithIntent(java.lang.String,java.lang.Class,android.content.Intent)>(r1, r2, $r5);

        return $r6;
    }

    public final android.app.Activity launchActivityWithIntent(java.lang.String, java.lang.Class, android.content.Intent)
    {
        android.test.InstrumentationTestCase r0;
        java.lang.Class r1;
        android.content.Intent r2;
        java.lang.String $r3, r8;
        android.app.Instrumentation $r6, $r7;
        android.app.Activity r9;

        r0 := @this: android.test.InstrumentationTestCase;

        r8 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: android.content.Intent;

        $r3 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r2.<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>(r8, $r3);

        virtualinvoke r2.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

        $r6 = virtualinvoke r0.<android.test.InstrumentationTestCase: android.app.Instrumentation getInstrumentation()>();

        r9 = virtualinvoke $r6.<android.app.Instrumentation: android.app.Activity startActivitySync(android.content.Intent)>(r2);

        $r7 = virtualinvoke r0.<android.test.InstrumentationTestCase: android.app.Instrumentation getInstrumentation()>();

        virtualinvoke $r7.<android.app.Instrumentation: void waitForIdleSync()>();

        return r9;
    }

    protected void runTest() throws java.lang.Throwable
    {
        android.test.InstrumentationTestCase r0;
        java.lang.String r1, $r16, $r22;
        java.lang.Class $r2;
        java.lang.Class[] $r3;
        int $i0, i1;
        boolean $z0, $z1, $z2, z3, $z4;
        android.app.Instrumentation $r4;
        android.test.InstrumentationTestCase$2 $r5;
        java.lang.Throwable $r6, $r7, $r17;
        java.lang.'annotation'.Annotation $r8, $r10;
        android.test.RepetitiveTest $r9;
        android.test.FlakyTest $r11;
        java.lang.StringBuilder $r12, $r18;
        java.lang.reflect.Method r23, r24;
        java.lang.Throwable[] r28;

        r0 := @this: android.test.InstrumentationTestCase;

        r1 = virtualinvoke r0.<android.test.InstrumentationTestCase: java.lang.String getName()>();

        staticinvoke <android.test.InstrumentationTestCase: void assertNotNull(java.lang.Object)>(r1);

        r23 = null;

     label01:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = (java.lang.Class[]) null;

        r24 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r1, $r3);

     label02:
        r23 = r24;

        goto label04;

     label03:
        $r17 := @caughtexception;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Method \"");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" not found");

        $r22 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.test.InstrumentationTestCase: void fail(java.lang.String)>($r22);

     label04:
        $i0 = virtualinvoke r23.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z0 != 0 goto label05;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Method \"");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" should be public");

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.test.InstrumentationTestCase: void fail(java.lang.String)>($r16);

     label05:
        i1 = 1;

        z3 = 0;

        $z1 = virtualinvoke r23.<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class)>(class "Landroid/test/FlakyTest;");

        if $z1 == 0 goto label06;

        $r10 = virtualinvoke r23.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Landroid/test/FlakyTest;");

        $r11 = (android.test.FlakyTest) $r10;

        i1 = interfaceinvoke $r11.<android.test.FlakyTest: int tolerance()>();

        goto label07;

     label06:
        $z2 = virtualinvoke r23.<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class)>(class "Landroid/test/RepetitiveTest;");

        if $z2 == 0 goto label07;

        $r8 = virtualinvoke r23.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Landroid/test/RepetitiveTest;");

        $r9 = (android.test.RepetitiveTest) $r8;

        i1 = interfaceinvoke $r9.<android.test.RepetitiveTest: int numIterations()>();

        z3 = 1;

     label07:
        $z4 = virtualinvoke r23.<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class)>(class "Landroid/test/UiThreadTest;");

        if $z4 == 0 goto label09;

        r28 = newarray (java.lang.Throwable)[1];

        $r4 = virtualinvoke r0.<android.test.InstrumentationTestCase: android.app.Instrumentation getInstrumentation()>();

        $r5 = new android.test.InstrumentationTestCase$2;

        specialinvoke $r5.<android.test.InstrumentationTestCase$2: void <init>(android.test.InstrumentationTestCase,java.lang.reflect.Method,int,boolean,java.lang.Throwable[])>(r0, r23, i1, z3, r28);

        virtualinvoke $r4.<android.app.Instrumentation: void runOnMainSync(java.lang.Runnable)>($r5);

        $r6 = r28[0];

        if $r6 != null goto label08;

        goto label10;

     label08:
        $r7 = r28[0];

        throw $r7;

     label09:
        specialinvoke r0.<android.test.InstrumentationTestCase: void runMethod(java.lang.reflect.Method,int,boolean)>(r23, i1, z3);

     label10:
        return;

        catch java.lang.NoSuchMethodException from label01 to label02 with label03;
    }

    public void runTestOnUiThread(java.lang.Runnable) throws java.lang.Throwable
    {
        android.test.InstrumentationTestCase r0;
        java.lang.Runnable r1;
        java.lang.Throwable[] r2;
        android.app.Instrumentation $r3;
        android.test.InstrumentationTestCase$1 $r4;
        java.lang.Throwable $r5, $r6;

        r0 := @this: android.test.InstrumentationTestCase;

        r1 := @parameter0: java.lang.Runnable;

        r2 = newarray (java.lang.Throwable)[1];

        $r3 = virtualinvoke r0.<android.test.InstrumentationTestCase: android.app.Instrumentation getInstrumentation()>();

        $r4 = new android.test.InstrumentationTestCase$1;

        specialinvoke $r4.<android.test.InstrumentationTestCase$1: void <init>(android.test.InstrumentationTestCase,java.lang.Runnable,java.lang.Throwable[])>(r0, r1, r2);

        virtualinvoke $r3.<android.app.Instrumentation: void runOnMainSync(java.lang.Runnable)>($r4);

        $r5 = r2[0];

        if $r5 != null goto label1;

        return;

     label1:
        $r6 = r2[0];

        throw $r6;
    }

    public void sendKeys(java.lang.String)
    {
        android.test.InstrumentationTestCase r0;
        java.lang.String[] r1;
        int i0, i1, $i2, i6, i7, i8, i9;
        android.app.Instrumentation r2;
        java.lang.String $r3, $r7, $r13, $r18, $r24, r25, r26, r27;
        java.lang.Class $r6;
        java.lang.reflect.Field $r8;
        java.lang.Throwable $r9, $r14, $r19, $r20;
        java.lang.StringBuilder $r10, $r15, $r21, r28;

        r0 := @this: android.test.InstrumentationTestCase;

        r25 := @parameter0: java.lang.String;

        r1 = virtualinvoke r25.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ");

        i0 = lengthof r1;

        r2 = virtualinvoke r0.<android.test.InstrumentationTestCase: android.app.Instrumentation getInstrumentation()>();

        i6 = 0;

     label01:
        if i6 >= i0 goto label15;

        r26 = r1[i6];

        i7 = virtualinvoke r26.<java.lang.String: int indexOf(int)>(42);

        if i7 != -1 goto label02;

        i8 = 1;

        goto label03;

     label02:
        $r3 = virtualinvoke r26.<java.lang.String: java.lang.String substring(int,int)>(0, i7);

        i8 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

     label03:
        r27 = r26;

        if i7 == -1 goto label04;

        $i2 = i7 + 1;

        r27 = virtualinvoke r26.<java.lang.String: java.lang.String substring(int)>($i2);

     label04:
        i9 = 0;

     label05:
        if i9 >= i8 goto label14;

     label06:
        r28 = new java.lang.StringBuilder;

        specialinvoke r28.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("KEYCODE_");

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27);

        $r6 = class "Landroid/view/KeyEvent;";

        $r7 = virtualinvoke r28.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>($r7);

        i1 = virtualinvoke $r8.<java.lang.reflect.Field: int getInt(java.lang.Object)>(null);

     label07:
        virtualinvoke r2.<android.app.Instrumentation: void sendKeyDownUpSync(int)>(i1);

     label08:
        goto label10;

     label09:
        $r19 := @caughtexception;

     label10:
        i9 = i9 + 1;

        goto label05;

     label11:
        $r20 := @caughtexception;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown keycode: KEYCODE_");

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27);

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("ActivityTestCase", $r24);

        goto label14;

     label12:
        $r9 := @caughtexception;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown keycode: KEYCODE_");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("ActivityTestCase", $r13);

        goto label14;

     label13:
        $r14 := @caughtexception;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid repeat count: ");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("ActivityTestCase", $r18);

     label14:
        i6 = i6 + 1;

        goto label01;

     label15:
        virtualinvoke r2.<android.app.Instrumentation: void waitForIdleSync()>();

        return;

        catch java.lang.NumberFormatException from label02 to label03 with label13;
        catch java.lang.NoSuchFieldException from label06 to label07 with label12;
        catch java.lang.IllegalAccessException from label06 to label07 with label11;
        catch java.lang.SecurityException from label07 to label08 with label09;
        catch java.lang.NoSuchFieldException from label07 to label08 with label12;
        catch java.lang.IllegalAccessException from label07 to label08 with label11;
    }

    public transient void sendKeys(int[])
    {
        android.test.InstrumentationTestCase r0;
        int[] r1;
        int i0, $i1, i2;
        android.app.Instrumentation r2;
        java.lang.Throwable $r4;

        r0 := @this: android.test.InstrumentationTestCase;

        r1 := @parameter0: int[];

        i0 = lengthof r1;

        r2 = virtualinvoke r0.<android.test.InstrumentationTestCase: android.app.Instrumentation getInstrumentation()>();

        i2 = 0;

     label1:
        if i2 >= i0 goto label6;

     label2:
        $i1 = r1[i2];

        virtualinvoke r2.<android.app.Instrumentation: void sendKeyDownUpSync(int)>($i1);

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

     label5:
        i2 = i2 + 1;

        goto label1;

     label6:
        virtualinvoke r2.<android.app.Instrumentation: void waitForIdleSync()>();

        return;

        catch java.lang.SecurityException from label2 to label3 with label4;
    }

    public transient void sendRepeatedKeys(int[])
    {
        android.test.InstrumentationTestCase r0;
        int[] r1;
        int i0, i1, i2, $i3, $i4, i5, i6;
        android.app.Instrumentation r2;
        java.lang.IllegalArgumentException $r4;
        java.lang.Throwable $r5;

        r0 := @this: android.test.InstrumentationTestCase;

        r1 := @parameter0: int[];

        i0 = lengthof r1;

        $i3 = i0 & 1;

        if $i3 == 1 goto label9;

        r2 = virtualinvoke r0.<android.test.InstrumentationTestCase: android.app.Instrumentation getInstrumentation()>();

        i5 = 0;

     label1:
        if i5 >= i0 goto label8;

        i1 = r1[i5];

        $i4 = i5 + 1;

        i2 = r1[$i4];

        i6 = 0;

     label2:
        if i6 >= i1 goto label7;

     label3:
        virtualinvoke r2.<android.app.Instrumentation: void sendKeyDownUpSync(int)>(i2);

     label4:
        goto label6;

     label5:
        $r5 := @caughtexception;

     label6:
        i6 = i6 + 1;

        goto label2;

     label7:
        i5 = i5 + 2;

        goto label1;

     label8:
        virtualinvoke r2.<android.app.Instrumentation: void waitForIdleSync()>();

        return;

     label9:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The size of the keys array must be a multiple of 2");

        throw $r4;

        catch java.lang.SecurityException from label3 to label4 with label5;
    }

    protected void tearDown() throws java.lang.Exception
    {
        android.test.InstrumentationTestCase r0;
        java.lang.Runtime $r1, $r2, $r3;

        r0 := @this: android.test.InstrumentationTestCase;

        $r1 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        virtualinvoke $r1.<java.lang.Runtime: void gc()>();

        $r2 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        virtualinvoke $r2.<java.lang.Runtime: void runFinalization()>();

        $r3 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        virtualinvoke $r3.<java.lang.Runtime: void gc()>();

        specialinvoke r0.<junit.framework.TestCase: void tearDown()>();

        return;
    }
}
