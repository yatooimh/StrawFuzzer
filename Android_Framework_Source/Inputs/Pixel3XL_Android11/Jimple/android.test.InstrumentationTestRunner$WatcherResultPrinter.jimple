class android.test.InstrumentationTestRunner$WatcherResultPrinter extends java.lang.Object implements junit.framework.TestListener
{
    private final android.os.Bundle mResultTemplate;
    java.lang.String mTestClass;
    int mTestNum;
    android.os.Bundle mTestResult;
    int mTestResultCode;
    final android.test.InstrumentationTestRunner this$0;

    public void <init>(android.test.InstrumentationTestRunner, int)
    {
        android.test.InstrumentationTestRunner$WatcherResultPrinter r0;
        int i0;
        android.os.Bundle $r1, $r2;
        android.test.InstrumentationTestRunner r3;

        r0 := @this: android.test.InstrumentationTestRunner$WatcherResultPrinter;

        r3 := @parameter0: android.test.InstrumentationTestRunner;

        i0 := @parameter1: int;

        r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.test.InstrumentationTestRunner this$0> = r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: int mTestNum> = 0;

        r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: int mTestResultCode> = 0;

        r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: java.lang.String mTestClass> = null;

        $r1 = new android.os.Bundle;

        specialinvoke $r1.<android.os.Bundle: void <init>()>();

        r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mResultTemplate> = $r1;

        virtualinvoke $r1.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("id", "InstrumentationTestRunner");

        $r2 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mResultTemplate>;

        virtualinvoke $r2.<android.os.Bundle: void putInt(java.lang.String,int)>("numtests", i0);

        return;
    }

    public void addError(junit.framework.Test, java.lang.Throwable)
    {
        android.test.InstrumentationTestRunner$WatcherResultPrinter r0;
        junit.framework.Test r1;
        java.lang.Throwable r2;
        android.os.Bundle $r3, $r7;
        java.lang.String $r4, $r8, $r9, $r10;
        java.lang.Object[] $r5;
        junit.framework.TestCase $r6;

        r0 := @this: android.test.InstrumentationTestRunner$WatcherResultPrinter;

        r1 := @parameter0: junit.framework.Test;

        r2 := @parameter1: java.lang.Throwable;

        $r3 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        $r4 = staticinvoke <junit.runner.BaseTestRunner: java.lang.String getFilteredTrace(java.lang.Throwable)>(r2);

        virtualinvoke $r3.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stack", $r4);

        r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: int mTestResultCode> = -1;

        $r7 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        $r5 = newarray (java.lang.Object)[2];

        $r6 = (junit.framework.TestCase) r1;

        $r8 = virtualinvoke $r6.<junit.framework.TestCase: java.lang.String getName()>();

        $r5[0] = $r8;

        $r9 = staticinvoke <junit.runner.BaseTestRunner: java.lang.String getFilteredTrace(java.lang.Throwable)>(r2);

        $r5[1] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\nError in %s:\n%s", $r5);

        virtualinvoke $r7.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stream", $r10);

        return;
    }

    public void addFailure(junit.framework.Test, junit.framework.AssertionFailedError)
    {
        android.test.InstrumentationTestRunner$WatcherResultPrinter r0;
        junit.framework.Test r1;
        junit.framework.AssertionFailedError r2;
        android.os.Bundle $r3, $r7;
        java.lang.String $r4, $r8, $r9, $r10;
        java.lang.Object[] $r5;
        junit.framework.TestCase $r6;

        r0 := @this: android.test.InstrumentationTestRunner$WatcherResultPrinter;

        r1 := @parameter0: junit.framework.Test;

        r2 := @parameter1: junit.framework.AssertionFailedError;

        $r3 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        $r4 = staticinvoke <junit.runner.BaseTestRunner: java.lang.String getFilteredTrace(java.lang.Throwable)>(r2);

        virtualinvoke $r3.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stack", $r4);

        r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: int mTestResultCode> = -2;

        $r7 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        $r5 = newarray (java.lang.Object)[2];

        $r6 = (junit.framework.TestCase) r1;

        $r8 = virtualinvoke $r6.<junit.framework.TestCase: java.lang.String getName()>();

        $r5[0] = $r8;

        $r9 = staticinvoke <junit.runner.BaseTestRunner: java.lang.String getFilteredTrace(java.lang.Throwable)>(r2);

        $r5[1] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\nFailure in %s:\n%s", $r5);

        virtualinvoke $r7.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stream", $r10);

        return;
    }

    public void endTest(junit.framework.Test)
    {
        android.test.InstrumentationTestRunner$WatcherResultPrinter r0;
        int $i0, $i1, $i2;
        android.os.Bundle $r1, $r4;
        android.test.InstrumentationTestRunner $r2, $r3;
        long $l3;
        java.lang.Throwable $r5;
        java.lang.IllegalStateException $r6;
        junit.framework.Test r7;

        r0 := @this: android.test.InstrumentationTestRunner$WatcherResultPrinter;

        r7 := @parameter0: junit.framework.Test;

        $i0 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: int mTestResultCode>;

        if $i0 != 0 goto label1;

        $r4 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        virtualinvoke $r4.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stream", ".");

     label1:
        $r2 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.test.InstrumentationTestRunner this$0>;

        $i1 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: int mTestResultCode>;

        $r1 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        virtualinvoke $r2.<android.test.InstrumentationTestRunner: void sendStatus(int,android.os.Bundle)>($i1, $r1);

     label2:
        $r3 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.test.InstrumentationTestRunner this$0>;

        $i2 = staticinvoke <android.test.InstrumentationTestRunner: int access$000(android.test.InstrumentationTestRunner)>($r3);

        $l3 = (long) $i2;

        staticinvoke <java.lang.Thread: void sleep(long)>($l3);

     label3:
        return;

     label4:
        $r5 := @caughtexception;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

        catch java.lang.InterruptedException from label2 to label3 with label4;
    }

    public void startTest(junit.framework.Test)
    {
        android.test.InstrumentationTestRunner$WatcherResultPrinter r0;
        java.lang.String r1, r2, $r15, $r18;
        java.lang.Class $r3, $r25;
        junit.framework.TestCase $r4;
        android.os.Bundle $r5, $r6, $r7, $r8, $r9, $r14, $r17, r24;
        int $i0, $i1, $i2, i4, i5;
        android.test.InstrumentationTestRunner $r10, $r11;
        long $l3;
        java.lang.'annotation'.Annotation $r12;
        android.test.RepetitiveTest $r13;
        boolean $z0, $z1;
        java.lang.Object[] $r16;
        java.lang.Throwable $r19, $r21;
        java.lang.IllegalStateException $r20;
        junit.framework.Test r22;
        java.lang.Class[] $r26;
        java.lang.reflect.Method r27;

        r0 := @this: android.test.InstrumentationTestRunner$WatcherResultPrinter;

        r22 := @parameter0: junit.framework.Test;

        $r3 = virtualinvoke r22.<java.lang.Object: java.lang.Class getClass()>();

        r1 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r4 = (junit.framework.TestCase) r22;

        r2 = virtualinvoke $r4.<junit.framework.TestCase: java.lang.String getName()>();

        $r5 = new android.os.Bundle;

        $r6 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mResultTemplate>;

        specialinvoke $r5.<android.os.Bundle: void <init>(android.os.Bundle)>($r6);

        r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult> = $r5;

        virtualinvoke $r5.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("class", r1);

        $r7 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        virtualinvoke $r7.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("test", r2);

        r24 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        $i0 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: int mTestNum>;

        i4 = $i0 + 1;

        r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: int mTestNum> = i4;

        virtualinvoke r24.<android.os.Bundle: void putInt(java.lang.String,int)>("current", i4);

        if r1 == null goto label1;

        $r15 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: java.lang.String mTestClass>;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z0 != 0 goto label1;

        $r17 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        $r16 = newarray (java.lang.Object)[1];

        $r16[0] = r1;

        $r18 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\n%s:", $r16);

        virtualinvoke $r17.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stream", $r18);

        r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: java.lang.String mTestClass> = r1;

        goto label2;

     label1:
        $r8 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        virtualinvoke $r8.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stream", "");

     label2:
        $r25 = virtualinvoke r22.<java.lang.Object: java.lang.Class getClass()>();

        $r26 = newarray (java.lang.Class)[0];

        r27 = virtualinvoke $r25.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r2, $r26);

        $z1 = virtualinvoke r27.<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class)>(class "Landroid/test/RepetitiveTest;");

        if $z1 == 0 goto label3;

        $r12 = virtualinvoke r27.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Landroid/test/RepetitiveTest;");

        $r13 = (android.test.RepetitiveTest) $r12;

        i5 = interfaceinvoke $r13.<android.test.RepetitiveTest: int numIterations()>();

        $r14 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        virtualinvoke $r14.<android.os.Bundle: void putInt(java.lang.String,int)>("numiterations", i5);

     label3:
        goto label5;

     label4:
        $r21 := @caughtexception;

     label5:
        $i1 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: int mTestNum>;

        if $i1 != 1 goto label6;

        $r11 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.test.InstrumentationTestRunner this$0>;

        $i2 = staticinvoke <android.test.InstrumentationTestRunner: int access$000(android.test.InstrumentationTestRunner)>($r11);

        $l3 = (long) $i2;

        staticinvoke <java.lang.Thread: void sleep(long)>($l3);

     label6:
        $r10 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.test.InstrumentationTestRunner this$0>;

        $r9 = r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        virtualinvoke $r10.<android.test.InstrumentationTestRunner: void sendStatus(int,android.os.Bundle)>(1, $r9);

        r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: int mTestResultCode> = 0;

        return;

     label7:
        $r19 := @caughtexception;

        $r20 = new java.lang.IllegalStateException;

        specialinvoke $r20.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r19);

        throw $r20;

        catch java.lang.NoSuchMethodException from label2 to label3 with label4;
        catch java.lang.InterruptedException from label5 to label6 with label7;
    }
}
