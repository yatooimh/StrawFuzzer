public class android.test.InstrumentationTestRunner extends android.app.Instrumentation implements android.test.TestSuiteProvider
{
    static final java.lang.String ARGUMENT_ANNOTATION;
    static final java.lang.String ARGUMENT_DELAY_MSEC;
    private static final java.lang.String ARGUMENT_LOG_ONLY;
    static final java.lang.String ARGUMENT_NOT_ANNOTATION;
    static final java.lang.String ARGUMENT_TEST_CLASS;
    private static final java.lang.String ARGUMENT_TEST_PACKAGE;
    private static final java.lang.String ARGUMENT_TEST_SIZE_PREDICATE;
    private static final java.lang.String DEFAULT_COVERAGE_FILE_NAME;
    private static final java.lang.String LARGE_SUITE;
    private static final java.lang.String LOG_TAG;
    private static final java.lang.String MEDIUM_SUITE;
    private static final float MEDIUM_SUITE_MAX_RUNTIME;
    private static final java.lang.String REPORT_KEY_COVERAGE_PATH;
    public static final java.lang.String REPORT_KEY_NAME_CLASS;
    public static final java.lang.String REPORT_KEY_NAME_TEST;
    public static final java.lang.String REPORT_KEY_NUM_CURRENT;
    private static final java.lang.String REPORT_KEY_NUM_ITERATIONS;
    public static final java.lang.String REPORT_KEY_NUM_TOTAL;
    private static final java.lang.String REPORT_KEY_RUN_TIME;
    public static final java.lang.String REPORT_KEY_STACK;
    private static final java.lang.String REPORT_KEY_SUITE_ASSIGNMENT;
    public static final java.lang.String REPORT_VALUE_ID;
    public static final int REPORT_VALUE_RESULT_ERROR;
    public static final int REPORT_VALUE_RESULT_FAILURE;
    public static final int REPORT_VALUE_RESULT_OK;
    public static final int REPORT_VALUE_RESULT_START;
    private static final com.android.internal.util.Predicate SELECT_LARGE;
    private static final com.android.internal.util.Predicate SELECT_MEDIUM;
    private static final com.android.internal.util.Predicate SELECT_SMALL;
    private static final java.lang.String SMALL_SUITE;
    private static final float SMALL_SUITE_MAX_RUNTIME;
    private android.os.Bundle mArguments;
    private boolean mCoverage;
    private java.lang.String mCoverageFilePath;
    private boolean mDebug;
    private int mDelayMsec;
    private boolean mJustCount;
    private java.lang.String mPackageOfTests;
    private final android.os.Bundle mResults;
    private boolean mSuiteAssignmentMode;
    private int mTestCount;
    private android.test.AndroidTestRunner mTestRunner;

    static void <clinit>()
    {
        com.android.internal.util.Predicate $r0, $r1, $r2;

        <android.test.InstrumentationTestRunner: float SMALL_SUITE_MAX_RUNTIME> = 100.0F;

        <android.test.InstrumentationTestRunner: java.lang.String SMALL_SUITE> = "small";

        <android.test.InstrumentationTestRunner: int REPORT_VALUE_RESULT_START> = 1;

        <android.test.InstrumentationTestRunner: int REPORT_VALUE_RESULT_OK> = 0;

        <android.test.InstrumentationTestRunner: int REPORT_VALUE_RESULT_FAILURE> = -2;

        <android.test.InstrumentationTestRunner: int REPORT_VALUE_RESULT_ERROR> = -1;

        <android.test.InstrumentationTestRunner: java.lang.String REPORT_VALUE_ID> = "InstrumentationTestRunner";

        <android.test.InstrumentationTestRunner: java.lang.String REPORT_KEY_SUITE_ASSIGNMENT> = "suiteassignment";

        <android.test.InstrumentationTestRunner: java.lang.String REPORT_KEY_STACK> = "stack";

        <android.test.InstrumentationTestRunner: java.lang.String REPORT_KEY_RUN_TIME> = "runtime";

        <android.test.InstrumentationTestRunner: java.lang.String REPORT_KEY_NUM_TOTAL> = "numtests";

        <android.test.InstrumentationTestRunner: java.lang.String REPORT_KEY_NUM_ITERATIONS> = "numiterations";

        <android.test.InstrumentationTestRunner: java.lang.String REPORT_KEY_NUM_CURRENT> = "current";

        <android.test.InstrumentationTestRunner: java.lang.String REPORT_KEY_NAME_TEST> = "test";

        <android.test.InstrumentationTestRunner: java.lang.String REPORT_KEY_NAME_CLASS> = "class";

        <android.test.InstrumentationTestRunner: java.lang.String REPORT_KEY_COVERAGE_PATH> = "coverageFilePath";

        <android.test.InstrumentationTestRunner: float MEDIUM_SUITE_MAX_RUNTIME> = 1000.0F;

        <android.test.InstrumentationTestRunner: java.lang.String MEDIUM_SUITE> = "medium";

        <android.test.InstrumentationTestRunner: java.lang.String LOG_TAG> = "InstrumentationTestRunner";

        <android.test.InstrumentationTestRunner: java.lang.String LARGE_SUITE> = "large";

        <android.test.InstrumentationTestRunner: java.lang.String DEFAULT_COVERAGE_FILE_NAME> = "coverage.ec";

        <android.test.InstrumentationTestRunner: java.lang.String ARGUMENT_TEST_SIZE_PREDICATE> = "size";

        <android.test.InstrumentationTestRunner: java.lang.String ARGUMENT_TEST_PACKAGE> = "package";

        <android.test.InstrumentationTestRunner: java.lang.String ARGUMENT_TEST_CLASS> = "class";

        <android.test.InstrumentationTestRunner: java.lang.String ARGUMENT_NOT_ANNOTATION> = "notAnnotation";

        <android.test.InstrumentationTestRunner: java.lang.String ARGUMENT_LOG_ONLY> = "log";

        <android.test.InstrumentationTestRunner: java.lang.String ARGUMENT_DELAY_MSEC> = "delay_msec";

        <android.test.InstrumentationTestRunner: java.lang.String ARGUMENT_ANNOTATION> = "annotation";

        $r0 = staticinvoke <android.test.suitebuilder.TestPredicates: com.android.internal.util.Predicate hasAnnotation(java.lang.Class)>(class "Landroid/test/suitebuilder/annotation/SmallTest;");

        <android.test.InstrumentationTestRunner: com.android.internal.util.Predicate SELECT_SMALL> = $r0;

        $r1 = staticinvoke <android.test.suitebuilder.TestPredicates: com.android.internal.util.Predicate hasAnnotation(java.lang.Class)>(class "Landroid/test/suitebuilder/annotation/MediumTest;");

        <android.test.InstrumentationTestRunner: com.android.internal.util.Predicate SELECT_MEDIUM> = $r1;

        $r2 = staticinvoke <android.test.suitebuilder.TestPredicates: com.android.internal.util.Predicate hasAnnotation(java.lang.Class)>(class "Landroid/test/suitebuilder/annotation/LargeTest;");

        <android.test.InstrumentationTestRunner: com.android.internal.util.Predicate SELECT_LARGE> = $r2;

        return;
    }

    public void <init>()
    {
        android.test.InstrumentationTestRunner r0;
        android.os.Bundle $r1;

        r0 := @this: android.test.InstrumentationTestRunner;

        specialinvoke r0.<android.app.Instrumentation: void <init>()>();

        $r1 = new android.os.Bundle;

        specialinvoke $r1.<android.os.Bundle: void <init>()>();

        r0.<android.test.InstrumentationTestRunner: android.os.Bundle mResults> = $r1;

        return;
    }

    static int access$000(android.test.InstrumentationTestRunner)
    {
        android.test.InstrumentationTestRunner r0;
        int $i0;

        r0 := @parameter0: android.test.InstrumentationTestRunner;

        $i0 = r0.<android.test.InstrumentationTestRunner: int mDelayMsec>;

        return $i0;
    }

    private void generateCoverageReport()
    {
        android.test.InstrumentationTestRunner r0;
        java.lang.Class $r2, $r4, $r5, $r6;
        java.lang.Class[] $r3;
        java.lang.reflect.Method $r7;
        java.lang.Object[] $r8, $r14;
        java.lang.Boolean $r9, $r10;
        android.os.Bundle $r12, $r13, $r15;
        java.lang.String $r16, r23, r25;
        java.lang.Throwable $r17, $r18, $r19, $r20, $r21;
        java.lang.ClassNotFoundException $r22;
        java.io.File r32;
        java.lang.Exception r33, r34, r35, r36, r37;

        r0 := @this: android.test.InstrumentationTestRunner;

        r23 = specialinvoke r0.<android.test.InstrumentationTestRunner: java.lang.String getCoverageFilePath()>();

        r32 = new java.io.File;

        specialinvoke r32.<java.io.File: void <init>(java.lang.String)>(r23);

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("com.vladium.emma.rt.RT");

        $r3 = newarray (java.lang.Class)[3];

        $r4 = virtualinvoke r32.<java.lang.Object: java.lang.Class getClass()>();

        $r3[0] = $r4;

        $r5 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r3[1] = $r5;

        $r6 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r3[2] = $r6;

        $r7 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("dumpCoverageData", $r3);

        $r8 = newarray (java.lang.Object)[3];

        $r8[0] = r32;

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r8[1] = $r9;

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r8[2] = $r10;

        virtualinvoke $r7.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r8);

        $r12 = r0.<android.test.InstrumentationTestRunner: android.os.Bundle mResults>;

        virtualinvoke $r12.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("coverageFilePath", r23);

        $r13 = r0.<android.test.InstrumentationTestRunner: android.os.Bundle mResults>;

        r25 = virtualinvoke $r13.<android.os.Bundle: java.lang.String getString(java.lang.String)>("stream");

        $r15 = r0.<android.test.InstrumentationTestRunner: android.os.Bundle mResults>;

        $r14 = newarray (java.lang.Object)[2];

        $r14[0] = r25;

        $r14[1] = r23;

        $r16 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s\nGenerated code coverage data to %s", $r14);

        virtualinvoke $r15.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stream", $r16);

     label2:
        goto label9;

     label3:
        $r19 := @caughtexception;

        r33 = (java.lang.Exception) $r19;

        specialinvoke r0.<android.test.InstrumentationTestRunner: void reportEmmaError(java.lang.Exception)>(r33);

        goto label9;

     label4:
        $r18 := @caughtexception;

        r34 = (java.lang.Exception) $r18;

        specialinvoke r0.<android.test.InstrumentationTestRunner: void reportEmmaError(java.lang.Exception)>(r34);

        goto label9;

     label5:
        $r17 := @caughtexception;

        r35 = (java.lang.Exception) $r17;

        specialinvoke r0.<android.test.InstrumentationTestRunner: void reportEmmaError(java.lang.Exception)>(r35);

        goto label9;

     label6:
        $r21 := @caughtexception;

        r36 = (java.lang.Exception) $r21;

        specialinvoke r0.<android.test.InstrumentationTestRunner: void reportEmmaError(java.lang.Exception)>(r36);

        goto label9;

     label7:
        $r20 := @caughtexception;

        r37 = (java.lang.Exception) $r20;

        specialinvoke r0.<android.test.InstrumentationTestRunner: void reportEmmaError(java.lang.Exception)>(r37);

        goto label9;

     label8:
        $r22 := @caughtexception;

        specialinvoke r0.<android.test.InstrumentationTestRunner: void reportEmmaError(java.lang.String,java.lang.Exception)>("Is emma jar on classpath?", $r22);

     label9:
        return;

        catch java.lang.ClassNotFoundException from label1 to label2 with label8;
        catch java.lang.SecurityException from label1 to label2 with label7;
        catch java.lang.NoSuchMethodException from label1 to label2 with label6;
        catch java.lang.IllegalArgumentException from label1 to label2 with label5;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
    }

    private java.lang.Class getAnnotationClass(java.lang.String)
    {
        android.test.InstrumentationTestRunner r0;
        java.lang.String r1, $r3, $r6;
        boolean $z0;
        java.lang.Object[] $r2, $r5;
        java.lang.ClassNotFoundException $r4;
        java.lang.Class r7;

        r0 := @this: android.test.InstrumentationTestRunner;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        return null;

     label1:
        r7 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r1);

        $z0 = virtualinvoke r7.<java.lang.Class: boolean isAnnotation()>();

        if $z0 == 0 goto label3;

     label2:
        return r7;

     label3:
        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r1;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Provided annotation value %s is not an Annotation", $r2);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("InstrumentationTestRunner", $r3);

     label4:
        goto label6;

     label5:
        $r4 := @caughtexception;

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = r1;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Could not find class for specified annotation %s", $r5);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("InstrumentationTestRunner", $r6);

     label6:
        return null;

        catch java.lang.ClassNotFoundException from label1 to label2 with label5;
        catch java.lang.ClassNotFoundException from label3 to label4 with label5;
    }

    private com.android.internal.util.Predicate getAnnotationPredicate(java.lang.String)
    {
        android.test.InstrumentationTestRunner r0;
        com.android.internal.util.Predicate $r1;
        java.lang.String r2;
        java.lang.Class r3;

        r0 := @this: android.test.InstrumentationTestRunner;

        r2 := @parameter0: java.lang.String;

        r3 = specialinvoke r0.<android.test.InstrumentationTestRunner: java.lang.Class getAnnotationClass(java.lang.String)>(r2);

        if r3 == null goto label1;

        $r1 = staticinvoke <android.test.suitebuilder.TestPredicates: com.android.internal.util.Predicate hasAnnotation(java.lang.Class)>(r3);

        return $r1;

     label1:
        return null;
    }

    private boolean getBooleanArgument(android.os.Bundle, java.lang.String)
    {
        android.test.InstrumentationTestRunner r0;
        java.lang.String r1, r3;
        boolean $z0, z1;
        android.os.Bundle r2;

        r0 := @this: android.test.InstrumentationTestRunner;

        r2 := @parameter0: android.os.Bundle;

        r1 := @parameter1: java.lang.String;

        r3 = virtualinvoke r2.<android.os.Bundle: java.lang.String getString(java.lang.String)>(r1);

        if r3 == null goto label1;

        $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r3);

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    private java.lang.String getCoverageFilePath()
    {
        android.test.InstrumentationTestRunner r0;
        java.lang.StringBuilder $r1;
        android.content.Context $r2;
        java.io.File $r3;
        java.lang.String $r4, $r6, $r9, r10;

        r0 := @this: android.test.InstrumentationTestRunner;

        r10 = r0.<android.test.InstrumentationTestRunner: java.lang.String mCoverageFilePath>;

        if r10 != null goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<android.test.InstrumentationTestRunner: android.content.Context getTargetContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: java.io.File getFilesDir()>();

        $r4 = virtualinvoke $r3.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = <java.io.File: java.lang.String separator>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("coverage.ec");

        $r9 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;

     label1:
        return r10;
    }

    private com.android.internal.util.Predicate getNotAnnotationPredicate(java.lang.String)
    {
        android.test.InstrumentationTestRunner r0;
        com.android.internal.util.Predicate $r1, $r2;
        java.lang.String r3;
        java.lang.Class r4;

        r0 := @this: android.test.InstrumentationTestRunner;

        r3 := @parameter0: java.lang.String;

        r4 = specialinvoke r0.<android.test.InstrumentationTestRunner: java.lang.Class getAnnotationClass(java.lang.String)>(r3);

        if r4 == null goto label1;

        $r1 = staticinvoke <android.test.suitebuilder.TestPredicates: com.android.internal.util.Predicate hasAnnotation(java.lang.Class)>(r4);

        $r2 = staticinvoke <android.test.suitebuilder.TestPredicates: com.android.internal.util.Predicate not(com.android.internal.util.Predicate)>($r1);

        return $r2;

     label1:
        return null;
    }

    private com.android.internal.util.Predicate getSizePredicateFromArg(java.lang.String)
    {
        android.test.InstrumentationTestRunner r0;
        java.lang.String r1, $r2, $r3, $r4;
        boolean $z0, $z1, $z2;
        com.android.internal.util.Predicate $r5, $r6, $r7;

        r0 := @this: android.test.InstrumentationTestRunner;

        r1 := @parameter0: java.lang.String;

        $r2 = "small";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r7 = <android.test.InstrumentationTestRunner: com.android.internal.util.Predicate SELECT_SMALL>;

        return $r7;

     label1:
        $r3 = "medium";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        $r6 = <android.test.InstrumentationTestRunner: com.android.internal.util.Predicate SELECT_MEDIUM>;

        return $r6;

     label2:
        $r4 = "large";

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label3;

        $r5 = <android.test.InstrumentationTestRunner: com.android.internal.util.Predicate SELECT_LARGE>;

        return $r5;

     label3:
        return null;
    }

    private void parseTestClass(java.lang.String, android.test.suitebuilder.TestSuiteBuilder)
    {
        android.test.InstrumentationTestRunner r0;
        java.lang.String r1, r5, r6;
        android.test.suitebuilder.TestSuiteBuilder r2;
        int i0, $i1;
        android.content.Context $r3;

        r0 := @this: android.test.InstrumentationTestRunner;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.test.suitebuilder.TestSuiteBuilder;

        i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(35);

        r5 = null;

        r6 = r1;

        if i0 <= 0 goto label1;

        $i1 = i0 + 1;

        r5 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i1);

        r6 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

     label1:
        $r3 = virtualinvoke r0.<android.test.InstrumentationTestRunner: android.content.Context getTargetContext()>();

        virtualinvoke r2.<android.test.suitebuilder.TestSuiteBuilder: android.test.suitebuilder.TestSuiteBuilder addTestClassByName(java.lang.String,java.lang.String,android.content.Context)>(r6, r5, $r3);

        return;
    }

    private void parseTestClasses(java.lang.String, android.test.suitebuilder.TestSuiteBuilder)
    {
        android.test.InstrumentationTestRunner r0;
        android.test.suitebuilder.TestSuiteBuilder r1;
        int i0, i1;
        java.lang.String $r2, r3;
        java.lang.String[] r4;

        r0 := @this: android.test.InstrumentationTestRunner;

        r3 := @parameter0: java.lang.String;

        r1 := @parameter1: android.test.suitebuilder.TestSuiteBuilder;

        r4 = virtualinvoke r3.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        i0 = lengthof r4;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = r4[i1];

        specialinvoke r0.<android.test.InstrumentationTestRunner: void parseTestClass(java.lang.String,android.test.suitebuilder.TestSuiteBuilder)>($r2, r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void reportEmmaError(java.lang.Exception)
    {
        android.test.InstrumentationTestRunner r0;
        java.lang.Exception r1;

        r0 := @this: android.test.InstrumentationTestRunner;

        r1 := @parameter0: java.lang.Exception;

        specialinvoke r0.<android.test.InstrumentationTestRunner: void reportEmmaError(java.lang.String,java.lang.Exception)>("", r1);

        return;
    }

    private void reportEmmaError(java.lang.String, java.lang.Exception)
    {
        android.test.InstrumentationTestRunner r0;
        java.lang.StringBuilder $r1, $r4;
        java.lang.String $r7, r8, r11;
        java.lang.Exception r9;
        android.os.Bundle r12;

        r0 := @this: android.test.InstrumentationTestRunner;

        r8 := @parameter0: java.lang.String;

        r9 := @parameter1: java.lang.Exception;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to generate emma coverage. ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        r11 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("InstrumentationTestRunner", r11, r9);

        r12 = r0.<android.test.InstrumentationTestRunner: android.os.Bundle mResults>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nError: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r12.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stream", $r7);

        return;
    }

    protected void addTestListener(junit.framework.TestListener)
    {
        android.test.InstrumentationTestRunner r0;
        junit.framework.TestListener r1;
        android.test.AndroidTestRunner r2;

        r0 := @this: android.test.InstrumentationTestRunner;

        r1 := @parameter0: junit.framework.TestListener;

        r2 = r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner>;

        if r2 == null goto label1;

        if r1 == null goto label1;

        virtualinvoke r2.<android.test.AndroidTestRunner: void addTestListener(junit.framework.TestListener)>(r1);

     label1:
        return;
    }

    public junit.framework.TestSuite getAllTests()
    {
        android.test.InstrumentationTestRunner r0;

        r0 := @this: android.test.InstrumentationTestRunner;

        return null;
    }

    protected android.test.AndroidTestRunner getAndroidTestRunner()
    {
        android.test.InstrumentationTestRunner r0;
        android.test.AndroidTestRunner $r1;

        r0 := @this: android.test.InstrumentationTestRunner;

        $r1 = new android.test.AndroidTestRunner;

        specialinvoke $r1.<android.test.AndroidTestRunner: void <init>()>();

        return $r1;
    }

    public android.os.Bundle getArguments()
    {
        android.test.InstrumentationTestRunner r0;
        android.os.Bundle $r1;

        r0 := @this: android.test.InstrumentationTestRunner;

        $r1 = r0.<android.test.InstrumentationTestRunner: android.os.Bundle mArguments>;

        return $r1;
    }

    java.util.List getBuilderRequirements()
    {
        android.test.InstrumentationTestRunner r0;
        java.util.ArrayList $r1;

        r0 := @this: android.test.InstrumentationTestRunner;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        return $r1;
    }

    public java.lang.ClassLoader getLoader()
    {
        android.test.InstrumentationTestRunner r0;

        r0 := @this: android.test.InstrumentationTestRunner;

        return null;
    }

    public junit.framework.TestSuite getTestSuite()
    {
        android.test.InstrumentationTestRunner r0;
        junit.framework.TestSuite $r1;

        r0 := @this: android.test.InstrumentationTestRunner;

        $r1 = virtualinvoke r0.<android.test.InstrumentationTestRunner: junit.framework.TestSuite getAllTests()>();

        return $r1;
    }

    public void onCreate(android.os.Bundle)
    {
        android.test.InstrumentationTestRunner r0;
        int i0, $i1;
        java.lang.String[] $r1, $r13, $r16;
        android.content.Context $r2, $r4, $r41, $r48;
        java.lang.String $r3, $r5, $r24, $r25, $r26, $r27, $r28, $r29, r35, $r40, r44;
        android.test.InstrumentationTestRunner$WatcherResultPrinter $r7;
        android.test.TestPrinter $r8;
        android.test.AndroidTestRunner $r9, $r10, $r12, r47, $r49, $r50, $r51, $r53;
        android.test.InstrumentationTestRunner$SuiteAssignmentPrinter $r11;
        com.android.internal.util.Predicate[] $r18, $r20, $r22;
        boolean $z0, $z1, $z2, $z3, z4, $z5;
        java.lang.Throwable $r30;
        android.os.Bundle r31;
        com.android.internal.util.Predicate r32, r33, r34;
        java.lang.Object r36;
        android.test.suitebuilder.TestSuiteBuilder $r38;
        java.lang.Class $r39;
        java.lang.ClassLoader $r42;
        junit.framework.TestSuite r45, $r52;
        java.util.List $r46, $r54;

        r0 := @this: android.test.InstrumentationTestRunner;

        r31 := @parameter0: android.os.Bundle;

        specialinvoke r0.<android.app.Instrumentation: void onCreate(android.os.Bundle)>(r31);

        r0.<android.test.InstrumentationTestRunner: android.os.Bundle mArguments> = r31;

        $r1 = newarray (java.lang.String)[2];

        $r2 = virtualinvoke r0.<android.test.InstrumentationTestRunner: android.content.Context getTargetContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.String getPackageCodePath()>();

        $r1[0] = $r3;

        $r4 = virtualinvoke r0.<android.test.InstrumentationTestRunner: android.content.Context getContext()>();

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.String getPackageCodePath()>();

        $r1[1] = $r5;

        staticinvoke <android.test.ClassPathPackageInfoSource: void setApkPaths(java.lang.String[])>($r1);

        r32 = null;

        r33 = null;

        r34 = null;

        r35 = null;

        z4 = 0;

        if r31 == null goto label06;

        r35 = virtualinvoke r31.<android.os.Bundle: java.lang.String getString(java.lang.String)>("class");

        $z0 = specialinvoke r0.<android.test.InstrumentationTestRunner: boolean getBooleanArgument(android.os.Bundle,java.lang.String)>(r31, "debug");

        r0.<android.test.InstrumentationTestRunner: boolean mDebug> = $z0;

        $z1 = specialinvoke r0.<android.test.InstrumentationTestRunner: boolean getBooleanArgument(android.os.Bundle,java.lang.String)>(r31, "count");

        r0.<android.test.InstrumentationTestRunner: boolean mJustCount> = $z1;

        $z2 = specialinvoke r0.<android.test.InstrumentationTestRunner: boolean getBooleanArgument(android.os.Bundle,java.lang.String)>(r31, "suiteAssignment");

        r0.<android.test.InstrumentationTestRunner: boolean mSuiteAssignmentMode> = $z2;

        $r24 = virtualinvoke r31.<android.os.Bundle: java.lang.String getString(java.lang.String)>("package");

        r0.<android.test.InstrumentationTestRunner: java.lang.String mPackageOfTests> = $r24;

        $r25 = virtualinvoke r31.<android.os.Bundle: java.lang.String getString(java.lang.String)>("size");

        r32 = specialinvoke r0.<android.test.InstrumentationTestRunner: com.android.internal.util.Predicate getSizePredicateFromArg(java.lang.String)>($r25);

        $r26 = virtualinvoke r31.<android.os.Bundle: java.lang.String getString(java.lang.String)>("annotation");

        r33 = specialinvoke r0.<android.test.InstrumentationTestRunner: com.android.internal.util.Predicate getAnnotationPredicate(java.lang.String)>($r26);

        $r27 = virtualinvoke r31.<android.os.Bundle: java.lang.String getString(java.lang.String)>("notAnnotation");

        r34 = specialinvoke r0.<android.test.InstrumentationTestRunner: com.android.internal.util.Predicate getNotAnnotationPredicate(java.lang.String)>($r27);

        z4 = specialinvoke r0.<android.test.InstrumentationTestRunner: boolean getBooleanArgument(android.os.Bundle,java.lang.String)>(r31, "log");

        $z3 = specialinvoke r0.<android.test.InstrumentationTestRunner: boolean getBooleanArgument(android.os.Bundle,java.lang.String)>(r31, "coverage");

        r0.<android.test.InstrumentationTestRunner: boolean mCoverage> = $z3;

        $r28 = virtualinvoke r31.<android.os.Bundle: java.lang.String getString(java.lang.String)>("coverageFile");

        r0.<android.test.InstrumentationTestRunner: java.lang.String mCoverageFilePath> = $r28;

     label01:
        r36 = virtualinvoke r31.<android.os.Bundle: java.lang.Object get(java.lang.String)>("delay_msec");

     label02:
        if r36 == null goto label04;

     label03:
        $r29 = virtualinvoke r36.<java.lang.Object: java.lang.String toString()>();

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r29);

        r0.<android.test.InstrumentationTestRunner: int mDelayMsec> = $i1;

     label04:
        goto label06;

     label05:
        $r30 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("InstrumentationTestRunner", "Invalid delay_msec parameter", $r30);

     label06:
        $r38 = new android.test.suitebuilder.TestSuiteBuilder;

        $r39 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r40 = virtualinvoke $r39.<java.lang.Class: java.lang.String getName()>();

        $r41 = virtualinvoke r0.<android.test.InstrumentationTestRunner: android.content.Context getTargetContext()>();

        $r42 = virtualinvoke $r41.<android.content.Context: java.lang.ClassLoader getClassLoader()>();

        specialinvoke $r38.<android.test.suitebuilder.TestSuiteBuilder: void <init>(java.lang.String,java.lang.ClassLoader)>($r40, $r42);

        if r32 == null goto label07;

        $r22 = newarray (com.android.internal.util.Predicate)[1];

        $r22[0] = r32;

        virtualinvoke $r38.<android.test.suitebuilder.TestSuiteBuilder: android.test.suitebuilder.TestSuiteBuilder addRequirements(com.android.internal.util.Predicate[])>($r22);

     label07:
        if r33 == null goto label08;

        $r20 = newarray (com.android.internal.util.Predicate)[1];

        $r20[0] = r33;

        virtualinvoke $r38.<android.test.suitebuilder.TestSuiteBuilder: android.test.suitebuilder.TestSuiteBuilder addRequirements(com.android.internal.util.Predicate[])>($r20);

     label08:
        if r34 == null goto label09;

        $r18 = newarray (com.android.internal.util.Predicate)[1];

        $r18[0] = r34;

        virtualinvoke $r38.<android.test.suitebuilder.TestSuiteBuilder: android.test.suitebuilder.TestSuiteBuilder addRequirements(com.android.internal.util.Predicate[])>($r18);

     label09:
        if r35 != null goto label13;

        r44 = r0.<android.test.InstrumentationTestRunner: java.lang.String mPackageOfTests>;

        if r44 == null goto label10;

        $r16 = newarray (java.lang.String)[1];

        $r16[0] = r44;

        virtualinvoke $r38.<android.test.suitebuilder.TestSuiteBuilder: android.test.suitebuilder.TestSuiteBuilder includePackages(java.lang.String[])>($r16);

        goto label14;

     label10:
        r45 = virtualinvoke r0.<android.test.InstrumentationTestRunner: junit.framework.TestSuite getTestSuite()>();

        if r45 == null goto label11;

        virtualinvoke $r38.<android.test.suitebuilder.TestSuiteBuilder: android.test.suitebuilder.TestSuiteBuilder addTestSuite(junit.framework.TestSuite)>(r45);

        goto label12;

     label11:
        $r13 = newarray (java.lang.String)[1];

        $r13[0] = "";

        virtualinvoke $r38.<android.test.suitebuilder.TestSuiteBuilder: android.test.suitebuilder.TestSuiteBuilder includePackages(java.lang.String[])>($r13);

     label12:
        goto label14;

     label13:
        specialinvoke r0.<android.test.InstrumentationTestRunner: void parseTestClasses(java.lang.String,android.test.suitebuilder.TestSuiteBuilder)>(r35, $r38);

     label14:
        $r46 = virtualinvoke r0.<android.test.InstrumentationTestRunner: java.util.List getBuilderRequirements()>();

        virtualinvoke $r38.<android.test.suitebuilder.TestSuiteBuilder: android.test.suitebuilder.TestSuiteBuilder addRequirements(java.util.List)>($r46);

        r47 = virtualinvoke r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner getAndroidTestRunner()>();

        r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner> = r47;

        $r48 = virtualinvoke r0.<android.test.InstrumentationTestRunner: android.content.Context getTargetContext()>();

        virtualinvoke r47.<android.test.AndroidTestRunner: void setContext(android.content.Context)>($r48);

        $r49 = r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner>;

        virtualinvoke $r49.<android.test.AndroidTestRunner: void setInstrumentation(android.app.Instrumentation)>(r0);

        $r50 = r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner>;

        virtualinvoke $r50.<android.test.AndroidTestRunner: void setSkipExecution(boolean)>(z4);

        $r51 = r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner>;

        $r52 = virtualinvoke $r38.<android.test.suitebuilder.TestSuiteBuilder: junit.framework.TestSuite build()>();

        virtualinvoke $r51.<android.test.AndroidTestRunner: void setTest(junit.framework.Test)>($r52);

        $r53 = r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner>;

        $r54 = virtualinvoke $r53.<android.test.AndroidTestRunner: java.util.List getTestCases()>();

        i0 = interfaceinvoke $r54.<java.util.List: int size()>();

        r0.<android.test.InstrumentationTestRunner: int mTestCount> = i0;

        $z5 = r0.<android.test.InstrumentationTestRunner: boolean mSuiteAssignmentMode>;

        if $z5 == 0 goto label15;

        $r12 = r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner>;

        $r11 = new android.test.InstrumentationTestRunner$SuiteAssignmentPrinter;

        specialinvoke $r11.<android.test.InstrumentationTestRunner$SuiteAssignmentPrinter: void <init>(android.test.InstrumentationTestRunner)>(r0);

        virtualinvoke $r12.<android.test.AndroidTestRunner: void addTestListener(junit.framework.TestListener)>($r11);

        goto label16;

     label15:
        $r7 = new android.test.InstrumentationTestRunner$WatcherResultPrinter;

        specialinvoke $r7.<android.test.InstrumentationTestRunner$WatcherResultPrinter: void <init>(android.test.InstrumentationTestRunner,int)>(r0, i0);

        $r9 = r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner>;

        $r8 = new android.test.TestPrinter;

        specialinvoke $r8.<android.test.TestPrinter: void <init>(java.lang.String,boolean)>("TestRunner", 0);

        virtualinvoke $r9.<android.test.AndroidTestRunner: void addTestListener(junit.framework.TestListener)>($r8);

        $r10 = r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner>;

        virtualinvoke $r10.<android.test.AndroidTestRunner: void addTestListener(junit.framework.TestListener)>($r7);

     label16:
        virtualinvoke r0.<android.test.InstrumentationTestRunner: void start()>();

        return;

        catch java.lang.NumberFormatException from label01 to label02 with label05;
        catch java.lang.NumberFormatException from label03 to label04 with label05;
    }

    public void onStart()
    {
        android.test.InstrumentationTestRunner r0;
        long l0, l1, $l2;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.io.ByteArrayOutputStream $r3;
        java.io.PrintStream $r4;
        android.test.AndroidTestRunner $r5, $r6, $r7, $r10, $r23, $r30;
        junit.framework.TestResult $r8;
        java.lang.Object[] $r9, $r19, $r22, $r29;
        android.os.Bundle $r11, $r15, $r16, $r17, $r24, $r31, $r35, $r38;
        java.lang.String $r12, $r13, $r14, $r20, $r21, $r25, $r26, $r27, $r32, $r33, $r34;
        int $i3;
        java.lang.Throwable $r18, $r28;
        android.test.InstrumentationTestRunner$StringResultPrinter r36;

        r0 := @this: android.test.InstrumentationTestRunner;

        virtualinvoke r0.<android.test.InstrumentationTestRunner: void prepareLooper()>();

        $z0 = r0.<android.test.InstrumentationTestRunner: boolean mJustCount>;

        if $z0 == 0 goto label01;

        $r15 = r0.<android.test.InstrumentationTestRunner: android.os.Bundle mResults>;

        virtualinvoke $r15.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("id", "InstrumentationTestRunner");

        $r16 = r0.<android.test.InstrumentationTestRunner: android.os.Bundle mResults>;

        $i3 = r0.<android.test.InstrumentationTestRunner: int mTestCount>;

        virtualinvoke $r16.<android.os.Bundle: void putInt(java.lang.String,int)>("numtests", $i3);

        $r17 = r0.<android.test.InstrumentationTestRunner: android.os.Bundle mResults>;

        virtualinvoke r0.<android.test.InstrumentationTestRunner: void finish(int,android.os.Bundle)>(-1, $r17);

        goto label10;

     label01:
        $z1 = r0.<android.test.InstrumentationTestRunner: boolean mDebug>;

        if $z1 == 0 goto label02;

        staticinvoke <android.os.Debug: void waitForDebugger()>();

     label02:
        $r3 = new java.io.ByteArrayOutputStream;

        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>();

        $r4 = new java.io.PrintStream;

        specialinvoke $r4.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r3);

     label03:
        r36 = new android.test.InstrumentationTestRunner$StringResultPrinter;

        specialinvoke r36.<android.test.InstrumentationTestRunner$StringResultPrinter: void <init>(android.test.InstrumentationTestRunner,java.io.PrintStream)>(r0, $r4);

        $r5 = r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner>;

        virtualinvoke $r5.<android.test.AndroidTestRunner: void addTestListener(junit.framework.TestListener)>(r36);

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r6 = r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner>;

        virtualinvoke $r6.<android.test.AndroidTestRunner: void runTest()>();

        l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r7 = r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner>;

        $r8 = virtualinvoke $r7.<android.test.AndroidTestRunner: junit.framework.TestResult getTestResult()>();

        $l2 = l1 - l0;

        virtualinvoke r36.<android.test.InstrumentationTestRunner$StringResultPrinter: void printResult(junit.framework.TestResult,long)>($r8, $l2);

     label04:
        $r11 = r0.<android.test.InstrumentationTestRunner: android.os.Bundle mResults>;

        $r9 = newarray (java.lang.Object)[2];

        $r10 = r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner>;

        $r12 = virtualinvoke $r10.<android.test.AndroidTestRunner: java.lang.String getTestClassName()>();

        $r9[0] = $r12;

        $r13 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        $r9[1] = $r13;

        $r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\nTest results for %s=%s", $r9);

        virtualinvoke $r11.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stream", $r14);

        $z2 = r0.<android.test.InstrumentationTestRunner: boolean mCoverage>;

        if $z2 == 0 goto label09;

        goto label08;

     label05:
        $r18 := @caughtexception;

     label06:
        $r19 = newarray (java.lang.Object)[1];

        $r20 = virtualinvoke $r18.<java.lang.Throwable: java.lang.String getMessage()>();

        $r19[0] = $r20;

        $r21 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Test run aborted due to unexpected exception: %s", $r19);

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r21);

        virtualinvoke $r18.<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>($r4);

     label07:
        $r24 = r0.<android.test.InstrumentationTestRunner: android.os.Bundle mResults>;

        $r22 = newarray (java.lang.Object)[2];

        $r23 = r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner>;

        $r25 = virtualinvoke $r23.<android.test.AndroidTestRunner: java.lang.String getTestClassName()>();

        $r22[0] = $r25;

        $r26 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        $r22[1] = $r26;

        $r27 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\nTest results for %s=%s", $r22);

        virtualinvoke $r24.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stream", $r27);

        $z3 = r0.<android.test.InstrumentationTestRunner: boolean mCoverage>;

        if $z3 == 0 goto label09;

     label08:
        specialinvoke r0.<android.test.InstrumentationTestRunner: void generateCoverageReport()>();

     label09:
        virtualinvoke $r4.<java.io.PrintStream: void close()>();

        $r38 = r0.<android.test.InstrumentationTestRunner: android.os.Bundle mResults>;

        virtualinvoke r0.<android.test.InstrumentationTestRunner: void finish(int,android.os.Bundle)>(-1, $r38);

     label10:
        return;

     label11:
        $r28 := @caughtexception;

        $r31 = r0.<android.test.InstrumentationTestRunner: android.os.Bundle mResults>;

        $r29 = newarray (java.lang.Object)[2];

        $r30 = r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner>;

        $r32 = virtualinvoke $r30.<android.test.AndroidTestRunner: java.lang.String getTestClassName()>();

        $r29[0] = $r32;

        $r33 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        $r29[1] = $r33;

        $r34 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\nTest results for %s=%s", $r29);

        virtualinvoke $r31.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stream", $r34);

        $z4 = r0.<android.test.InstrumentationTestRunner: boolean mCoverage>;

        if $z4 == 0 goto label12;

        specialinvoke r0.<android.test.InstrumentationTestRunner: void generateCoverageReport()>();

     label12:
        virtualinvoke $r4.<java.io.PrintStream: void close()>();

        $r35 = r0.<android.test.InstrumentationTestRunner: android.os.Bundle mResults>;

        virtualinvoke r0.<android.test.InstrumentationTestRunner: void finish(int,android.os.Bundle)>(-1, $r35);

        throw $r28;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label11;
    }

    void prepareLooper()
    {
        android.test.InstrumentationTestRunner r0;

        r0 := @this: android.test.InstrumentationTestRunner;

        staticinvoke <android.os.Looper: void prepare()>();

        return;
    }
}
