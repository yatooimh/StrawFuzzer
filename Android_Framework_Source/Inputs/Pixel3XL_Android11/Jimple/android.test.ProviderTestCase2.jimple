public abstract class android.test.ProviderTestCase2 extends android.test.AndroidTestCase
{
    private android.content.ContentProvider mProvider;
    java.lang.String mProviderAuthority;
    java.lang.Class mProviderClass;
    private android.test.IsolatedContext mProviderContext;
    private android.test.mock.MockContentResolver mResolver;

    public void <init>(java.lang.Class, java.lang.String)
    {
        android.test.ProviderTestCase2 r0;
        java.lang.Class r1;
        java.lang.String r2;

        r0 := @this: android.test.ProviderTestCase2;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<android.test.AndroidTestCase: void <init>()>();

        r0.<android.test.ProviderTestCase2: java.lang.Class mProviderClass> = r1;

        r0.<android.test.ProviderTestCase2: java.lang.String mProviderAuthority> = r2;

        return;
    }

    static android.content.ContentProvider createProviderForTest(android.content.Context, java.lang.Class, java.lang.String) throws java.lang.IllegalAccessException, java.lang.InstantiationException
    {
        android.content.Context r0;
        java.lang.String r1;
        android.content.ContentProvider r2;
        java.lang.Object $r3;
        android.content.pm.ProviderInfo $r4;
        java.lang.Class r5;

        r0 := @parameter0: android.content.Context;

        r5 := @parameter1: java.lang.Class;

        r1 := @parameter2: java.lang.String;

        $r3 = virtualinvoke r5.<java.lang.Class: java.lang.Object newInstance()>();

        r2 = (android.content.ContentProvider) $r3;

        $r4 = new android.content.pm.ProviderInfo;

        specialinvoke $r4.<android.content.pm.ProviderInfo: void <init>()>();

        $r4.<android.content.pm.ProviderInfo: java.lang.String authority> = r1;

        staticinvoke <android.test.mock.MockContentProvider: void attachInfoForTesting(android.content.ContentProvider,android.content.Context,android.content.pm.ProviderInfo)>(r2, r0, $r4);

        return r2;
    }

    public static android.content.ContentResolver newResolverWithContentProviderFromSql(android.content.Context, java.lang.String, java.lang.Class, java.lang.String, java.lang.String, int, java.lang.String) throws java.lang.IllegalAccessException, java.lang.InstantiationException
    {
        java.lang.String r0, r2, r3, r4;
        java.lang.Class r1;
        int i0;
        android.test.mock.MockContentResolver $r6;
        android.test.IsolatedContext $r7;
        android.test.RenamingDelegatingContext $r8;
        android.test.mock.MockContext $r9;
        android.content.ContentProvider $r10;
        android.content.Context r11;

        r11 := @parameter0: android.content.Context;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.Class;

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: java.lang.String;

        i0 := @parameter5: int;

        r4 := @parameter6: java.lang.String;

        $r6 = new android.test.mock.MockContentResolver;

        specialinvoke $r6.<android.test.mock.MockContentResolver: void <init>()>();

        $r7 = new android.test.IsolatedContext;

        $r8 = new android.test.RenamingDelegatingContext;

        $r9 = new android.test.mock.MockContext;

        specialinvoke $r9.<android.test.mock.MockContext: void <init>()>();

        specialinvoke $r8.<android.test.RenamingDelegatingContext: void <init>(android.content.Context,android.content.Context,java.lang.String)>($r9, r11, r0);

        specialinvoke $r7.<android.test.IsolatedContext: void <init>(android.content.ContentResolver,android.content.Context)>($r6, $r8);

        staticinvoke <android.database.DatabaseUtils: void createDbFromSqlStatements(android.content.Context,java.lang.String,int,java.lang.String)>($r7, r3, i0, r4);

        $r10 = staticinvoke <android.test.ProviderTestCase2: android.content.ContentProvider createProviderForTest(android.content.Context,java.lang.Class,java.lang.String)>($r7, r1, r2);

        virtualinvoke $r6.<android.test.mock.MockContentResolver: void addProvider(java.lang.String,android.content.ContentProvider)>(r2, $r10);

        return $r6;
    }

    public android.test.mock.MockContentResolver getMockContentResolver()
    {
        android.test.ProviderTestCase2 r0;
        android.test.mock.MockContentResolver $r1;

        r0 := @this: android.test.ProviderTestCase2;

        $r1 = r0.<android.test.ProviderTestCase2: android.test.mock.MockContentResolver mResolver>;

        return $r1;
    }

    public android.test.IsolatedContext getMockContext()
    {
        android.test.ProviderTestCase2 r0;
        android.test.IsolatedContext $r1;

        r0 := @this: android.test.ProviderTestCase2;

        $r1 = r0.<android.test.ProviderTestCase2: android.test.IsolatedContext mProviderContext>;

        return $r1;
    }

    public android.content.ContentProvider getProvider()
    {
        android.test.ProviderTestCase2 r0;
        android.content.ContentProvider $r1;

        r0 := @this: android.test.ProviderTestCase2;

        $r1 = r0.<android.test.ProviderTestCase2: android.content.ContentProvider mProvider>;

        return $r1;
    }

    protected void setUp() throws java.lang.Exception
    {
        android.test.ProviderTestCase2 r0;
        android.test.mock.MockContentResolver $r1, $r6, $r10;
        android.test.RenamingDelegatingContext $r2;
        android.test.ProviderTestCase2$MockContext2 $r3;
        android.content.Context $r4;
        android.test.IsolatedContext $r5;
        java.lang.String $r7, $r11;
        java.lang.Class $r8;
        android.content.ContentProvider $r9, $r12;

        r0 := @this: android.test.ProviderTestCase2;

        specialinvoke r0.<android.test.AndroidTestCase: void setUp()>();

        $r1 = new android.test.mock.MockContentResolver;

        specialinvoke $r1.<android.test.mock.MockContentResolver: void <init>()>();

        r0.<android.test.ProviderTestCase2: android.test.mock.MockContentResolver mResolver> = $r1;

        $r2 = new android.test.RenamingDelegatingContext;

        $r3 = new android.test.ProviderTestCase2$MockContext2;

        specialinvoke $r3.<android.test.ProviderTestCase2$MockContext2: void <init>(android.test.ProviderTestCase2,android.test.ProviderTestCase2$1)>(r0, null);

        $r4 = virtualinvoke r0.<android.test.ProviderTestCase2: android.content.Context getContext()>();

        specialinvoke $r2.<android.test.RenamingDelegatingContext: void <init>(android.content.Context,android.content.Context,java.lang.String)>($r3, $r4, "test.");

        $r5 = new android.test.IsolatedContext;

        $r6 = r0.<android.test.ProviderTestCase2: android.test.mock.MockContentResolver mResolver>;

        specialinvoke $r5.<android.test.IsolatedContext: void <init>(android.content.ContentResolver,android.content.Context)>($r6, $r2);

        r0.<android.test.ProviderTestCase2: android.test.IsolatedContext mProviderContext> = $r5;

        $r8 = r0.<android.test.ProviderTestCase2: java.lang.Class mProviderClass>;

        $r7 = r0.<android.test.ProviderTestCase2: java.lang.String mProviderAuthority>;

        $r9 = staticinvoke <android.test.ProviderTestCase2: android.content.ContentProvider createProviderForTest(android.content.Context,java.lang.Class,java.lang.String)>($r5, $r8, $r7);

        r0.<android.test.ProviderTestCase2: android.content.ContentProvider mProvider> = $r9;

        $r10 = r0.<android.test.ProviderTestCase2: android.test.mock.MockContentResolver mResolver>;

        $r11 = r0.<android.test.ProviderTestCase2: java.lang.String mProviderAuthority>;

        $r12 = virtualinvoke r0.<android.test.ProviderTestCase2: android.content.ContentProvider getProvider()>();

        virtualinvoke $r10.<android.test.mock.MockContentResolver: void addProvider(java.lang.String,android.content.ContentProvider)>($r11, $r12);

        return;
    }

    protected void tearDown() throws java.lang.Exception
    {
        android.test.ProviderTestCase2 r0;
        android.content.ContentProvider $r1;

        r0 := @this: android.test.ProviderTestCase2;

        $r1 = r0.<android.test.ProviderTestCase2: android.content.ContentProvider mProvider>;

        virtualinvoke $r1.<android.content.ContentProvider: void shutdown()>();

        specialinvoke r0.<android.test.AndroidTestCase: void tearDown()>();

        return;
    }
}
