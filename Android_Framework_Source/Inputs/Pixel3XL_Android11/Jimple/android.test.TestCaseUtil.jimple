public class android.test.TestCaseUtil extends java.lang.Object
{

    private void <init>()
    {
        android.test.TestCaseUtil r0;

        r0 := @this: android.test.TestCaseUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static java.lang.String getTestName(junit.framework.Test)
    {
        int i0, $i1;
        boolean $z0, $z1;
        junit.framework.TestSuite $r0;
        java.lang.String $r1, $r3, r5;
        junit.framework.TestCase $r2;
        junit.framework.Test r4;

        r4 := @parameter0: junit.framework.Test;

        $z0 = r4 instanceof junit.framework.TestCase;

        if $z0 == 0 goto label1;

        $r2 = (junit.framework.TestCase) r4;

        $r3 = virtualinvoke $r2.<junit.framework.TestCase: java.lang.String getName()>();

        return $r3;

     label1:
        $z1 = r4 instanceof junit.framework.TestSuite;

        if $z1 == 0 goto label3;

        $r0 = (junit.framework.TestSuite) r4;

        r5 = virtualinvoke $r0.<junit.framework.TestSuite: java.lang.String getName()>();

        if r5 == null goto label3;

        i0 = virtualinvoke r5.<java.lang.String: int lastIndexOf(java.lang.String)>(".");

        if i0 <= -1 goto label2;

        $i1 = i0 + 1;

        $r1 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int)>($i1);

        return $r1;

     label2:
        return r5;

     label3:
        return "";
    }

    public static java.util.List getTests(junit.framework.Test, boolean)
    {
        junit.framework.Test r0;
        boolean z0;
        java.util.HashSet $r1;
        java.util.List $r2;

        r0 := @parameter0: junit.framework.Test;

        z0 := @parameter1: boolean;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        $r2 = staticinvoke <android.test.TestCaseUtil: java.util.List getTests(junit.framework.Test,boolean,java.util.Set)>(r0, z0, $r1);

        return $r2;
    }

    private static java.util.List getTests(junit.framework.Test, boolean, java.util.Set)
    {
        boolean z0, $z1, $z2, $z3;
        java.util.Set r0;
        java.util.ArrayList $r2;
        junit.framework.TestSuite $r3;
        java.lang.Object $r4;
        java.util.List $r5;
        junit.framework.TestCase $r6;
        java.lang.String $r7;
        java.lang.Class $r8;
        junit.framework.Test r9, r10, r11, r13;
        java.util.Enumeration r12;

        r9 := @parameter0: junit.framework.Test;

        z0 := @parameter1: boolean;

        r0 := @parameter2: java.util.Set;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        if r9 == null goto label8;

        r10 = null;

        $z1 = r9 instanceof junit.framework.TestCase;

        if $z1 == 0 goto label1;

        r10 = null;

        $r6 = (junit.framework.TestCase) r9;

        $r7 = virtualinvoke $r6.<junit.framework.TestCase: java.lang.String getName()>();

        if $r7 != null goto label1;

        $r8 = virtualinvoke r9.<java.lang.Object: java.lang.Class getClass()>();

        r10 = staticinvoke <android.test.TestCaseUtil: junit.framework.Test invokeSuiteMethodIfPossible(java.lang.Class,java.util.Set)>($r8, r0);

     label1:
        r11 = r10;

        if r10 != null goto label2;

        r11 = r9;

     label2:
        $z2 = r11 instanceof junit.framework.TestSuite;

        if $z2 == 0 goto label7;

        $r3 = (junit.framework.TestSuite) r11;

        r12 = virtualinvoke $r3.<junit.framework.TestSuite: java.util.Enumeration tests()>();

     label3:
        $z3 = interfaceinvoke r12.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z3 == 0 goto label6;

        $r4 = interfaceinvoke r12.<java.util.Enumeration: java.lang.Object nextElement()>();

        r13 = (junit.framework.Test) $r4;

        if z0 == 0 goto label4;

        $r5 = staticinvoke <android.test.TestCaseUtil: java.util.List getTests(junit.framework.Test,boolean,java.util.Set)>(r13, z0, r0);

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>($r5);

        goto label5;

     label4:
        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r13);

     label5:
        goto label3;

     label6:
        goto label8;

     label7:
        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r11);

     label8:
        return $r2;
    }

    static junit.framework.Test invokeSuiteMethodIfPossible(java.lang.Class, java.util.Set)
    {
        java.util.Set r0;
        java.lang.reflect.Method r1;
        java.lang.Class[] $r2;
        int $i0;
        boolean $z0, $z1;
        java.lang.Object[] $r3;
        java.lang.Object $r4;
        java.lang.Throwable $r5, $r6, $r7;
        java.lang.Class r8;
        junit.framework.Test r9;

        r8 := @parameter0: java.lang.Class;

        r0 := @parameter1: java.util.Set;

     label1:
        $r2 = newarray (java.lang.Class)[0];

        r1 = virtualinvoke r8.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("suite", $r2);

        $i0 = virtualinvoke r1.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z0 == 0 goto label6;

        $z1 = interfaceinvoke r0.<java.util.Set: boolean contains(java.lang.Object)>(r8);

        if $z1 != 0 goto label6;

        interfaceinvoke r0.<java.util.Set: boolean add(java.lang.Object)>(r8);

     label2:
        $r3 = (java.lang.Object[]) null;

        $r4 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r3);

        r9 = (junit.framework.Test) $r4;

     label3:
        return r9;

     label4:
        $r6 := @caughtexception;

        goto label6;

     label5:
        $r5 := @caughtexception;

     label6:
        goto label8;

     label7:
        $r7 := @caughtexception;

     label8:
        return null;

        catch java.lang.NoSuchMethodException from label1 to label2 with label7;
        catch java.lang.reflect.InvocationTargetException from label2 to label3 with label5;
        catch java.lang.IllegalAccessException from label2 to label3 with label4;
        catch java.lang.NoSuchMethodException from label2 to label3 with label7;
    }
}
