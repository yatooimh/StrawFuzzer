public class android.test.TouchUtils extends java.lang.Object
{

    public void <init>()
    {
        android.test.TouchUtils r0;

        r0 := @this: android.test.TouchUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void clickView(android.test.InstrumentationTestCase, android.view.View)
    {
        android.view.View r0;
        int[] r1;
        int i0, $i3, $i4, i7, i8;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, f12, f13;
        long l1, l2, $l5, $l6;
        android.view.MotionEvent $r2, $r5, $r6;
        android.content.Context $r3;
        android.view.ViewConfiguration $r4;
        java.lang.Throwable $r7;
        android.test.InstrumentationTestCase r8;
        android.app.Instrumentation r9;
        java.lang.InterruptedException r11;

        r8 := @parameter0: android.test.InstrumentationTestCase;

        r0 := @parameter1: android.view.View;

        r1 = newarray (int)[2];

        virtualinvoke r0.<android.view.View: void getLocationOnScreen(int[])>(r1);

        i7 = virtualinvoke r0.<android.view.View: int getWidth()>();

        i0 = virtualinvoke r0.<android.view.View: int getHeight()>();

        $i3 = r1[0];

        f12 = (float) $i3;

        $f1 = (float) i7;

        $f2 = $f1 / 2.0F;

        f0 = $f2 + f12;

        $i4 = r1[1];

        $f5 = (float) $i4;

        $f3 = (float) i0;

        $f4 = $f3 / 2.0F;

        f13 = $f5 + $f4;

        r9 = virtualinvoke r8.<android.test.InstrumentationTestCase: android.app.Instrumentation getInstrumentation()>();

        l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l5 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r2 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>(l1, $l5, 0, f0, f13, 0);

        virtualinvoke r9.<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)>($r2);

        virtualinvoke r9.<android.app.Instrumentation: void waitForIdleSync()>();

        l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r3 = virtualinvoke r0.<android.view.View: android.content.Context getContext()>();

        $r4 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r3);

        i8 = virtualinvoke $r4.<android.view.ViewConfiguration: int getScaledTouchSlop()>();

        $f6 = (float) i8;

        $f7 = $f6 / 2.0F;

        $f11 = f0 + $f7;

        $f8 = (float) i8;

        $f9 = $f8 / 2.0F;

        $f10 = f13 + $f9;

        $r5 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>(l1, l2, 2, $f11, $f10, 0);

        virtualinvoke r9.<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)>($r5);

        virtualinvoke r9.<android.app.Instrumentation: void waitForIdleSync()>();

        $l6 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r6 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>(l1, $l6, 1, f0, f13, 0);

        virtualinvoke r9.<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)>($r6);

        virtualinvoke r9.<android.app.Instrumentation: void waitForIdleSync()>();

     label1:
        staticinvoke <java.lang.Thread: void sleep(long)>(1000L);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r11 = (java.lang.InterruptedException) $r7;

        virtualinvoke r11.<java.lang.InterruptedException: void printStackTrace()>();

     label4:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public static void drag(android.test.ActivityInstrumentationTestCase, float, float, float, float, int)
    {
        android.test.ActivityInstrumentationTestCase r0;
        float f0, f1, f2, f3;
        int i0;

        r0 := @parameter0: android.test.ActivityInstrumentationTestCase;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        f2 := @parameter3: float;

        f3 := @parameter4: float;

        i0 := @parameter5: int;

        staticinvoke <android.test.TouchUtils: void drag(android.test.InstrumentationTestCase,float,float,float,float,int)>(r0, f0, f1, f2, f3, i0);

        return;
    }

    public static void drag(android.test.InstrumentationTestCase, float, float, float, float, int)
    {
        float f0, f1, $f2, $f3, $f4, $f5, f6, f7, f8, f9, f10;
        int i0, i5;
        long l1, l2, $l3, $l4;
        android.view.MotionEvent $r0, $r1, $r2;
        android.test.InstrumentationTestCase r3;
        android.app.Instrumentation r4;

        r3 := @parameter0: android.test.InstrumentationTestCase;

        f6 := @parameter1: float;

        f7 := @parameter2: float;

        f0 := @parameter3: float;

        f8 := @parameter4: float;

        i0 := @parameter5: int;

        r4 = virtualinvoke r3.<android.test.InstrumentationTestCase: android.app.Instrumentation getInstrumentation()>();

        l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $f3 = f8 - f0;

        $f2 = (float) i0;

        f9 = $f3 / $f2;

        $f5 = f7 - f6;

        $f4 = (float) i0;

        f1 = $f5 / $f4;

        $r0 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>(l1, l2, 0, f6, f0, 0);

        virtualinvoke r4.<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)>($r0);

        f10 = f0;

        i5 = 0;

     label1:
        if i5 >= i0 goto label2;

        f10 = f10 + f9;

        f6 = f6 + f1;

        $l4 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r2 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>(l1, $l4, 2, f6, f10, 0);

        virtualinvoke r4.<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)>($r2);

        i5 = i5 + 1;

        goto label1;

     label2:
        $l3 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r1 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>(l1, $l3, 1, f6, f10, 0);

        virtualinvoke r4.<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)>($r1);

        virtualinvoke r4.<android.app.Instrumentation: void waitForIdleSync()>();

        return;
    }

    public static void dragQuarterScreenDown(android.test.ActivityInstrumentationTestCase)
    {
        android.test.ActivityInstrumentationTestCase r0;
        android.app.Activity $r1;

        r0 := @parameter0: android.test.ActivityInstrumentationTestCase;

        $r1 = virtualinvoke r0.<android.test.ActivityInstrumentationTestCase: android.app.Activity getActivity()>();

        staticinvoke <android.test.TouchUtils: void dragQuarterScreenDown(android.test.InstrumentationTestCase,android.app.Activity)>(r0, $r1);

        return;
    }

    public static void dragQuarterScreenDown(android.test.InstrumentationTestCase, android.app.Activity)
    {
        android.test.InstrumentationTestCase r0;
        float f0, $f1, $f2, $f3, $f4, $f5;
        android.view.WindowManager $r1;
        android.view.WindowMetrics $r2;
        int $i0, $i1, $i2;
        android.app.Activity r3;
        android.util.Size r4;

        r0 := @parameter0: android.test.InstrumentationTestCase;

        r3 := @parameter1: android.app.Activity;

        $r1 = virtualinvoke r3.<android.app.Activity: android.view.WindowManager getWindowManager()>();

        $r2 = interfaceinvoke $r1.<android.view.WindowManager: android.view.WindowMetrics getCurrentWindowMetrics()>();

        r4 = staticinvoke <android.test.TouchUtils: android.util.Size getSizeExcludingNavigationBarAndCutout(android.view.WindowMetrics)>($r2);

        $i0 = virtualinvoke r4.<android.util.Size: int getWidth()>();

        $f1 = (float) $i0;

        f0 = $f1 / 2.0F;

        $i1 = virtualinvoke r4.<android.util.Size: int getHeight()>();

        $f2 = (float) $i1;

        $f3 = $f2 * 0.5F;

        $i2 = virtualinvoke r4.<android.util.Size: int getHeight()>();

        $f4 = (float) $i2;

        $f5 = $f4 * 0.75F;

        staticinvoke <android.test.TouchUtils: void drag(android.test.InstrumentationTestCase,float,float,float,float,int)>(r0, f0, f0, $f3, $f5, 4);

        return;
    }

    public static void dragQuarterScreenUp(android.test.ActivityInstrumentationTestCase)
    {
        android.test.ActivityInstrumentationTestCase r0;
        android.app.Activity $r1;

        r0 := @parameter0: android.test.ActivityInstrumentationTestCase;

        $r1 = virtualinvoke r0.<android.test.ActivityInstrumentationTestCase: android.app.Activity getActivity()>();

        staticinvoke <android.test.TouchUtils: void dragQuarterScreenUp(android.test.InstrumentationTestCase,android.app.Activity)>(r0, $r1);

        return;
    }

    public static void dragQuarterScreenUp(android.test.InstrumentationTestCase, android.app.Activity)
    {
        android.test.InstrumentationTestCase r0;
        float f0, $f1, $f2, $f3, $f4, $f5;
        android.view.WindowManager $r1;
        android.view.WindowMetrics $r2;
        int $i0, $i1, $i2;
        android.app.Activity r3;
        android.util.Size r4;

        r0 := @parameter0: android.test.InstrumentationTestCase;

        r3 := @parameter1: android.app.Activity;

        $r1 = virtualinvoke r3.<android.app.Activity: android.view.WindowManager getWindowManager()>();

        $r2 = interfaceinvoke $r1.<android.view.WindowManager: android.view.WindowMetrics getCurrentWindowMetrics()>();

        r4 = staticinvoke <android.test.TouchUtils: android.util.Size getSizeExcludingNavigationBarAndCutout(android.view.WindowMetrics)>($r2);

        $i0 = virtualinvoke r4.<android.util.Size: int getWidth()>();

        $f1 = (float) $i0;

        f0 = $f1 / 2.0F;

        $i1 = virtualinvoke r4.<android.util.Size: int getHeight()>();

        $f2 = (float) $i1;

        $f3 = $f2 * 0.5F;

        $i2 = virtualinvoke r4.<android.util.Size: int getHeight()>();

        $f4 = (float) $i2;

        $f5 = $f4 * 0.25F;

        staticinvoke <android.test.TouchUtils: void drag(android.test.InstrumentationTestCase,float,float,float,float,int)>(r0, f0, f0, $f3, $f5, 4);

        return;
    }

    public static int dragViewBy(android.test.ActivityInstrumentationTestCase, android.view.View, int, int, int)
    {
        android.test.ActivityInstrumentationTestCase r0;
        android.view.View r1;
        int i0, i1, i2, $i3;

        r0 := @parameter0: android.test.ActivityInstrumentationTestCase;

        r1 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        $i3 = staticinvoke <android.test.TouchUtils: int dragViewBy(android.test.InstrumentationTestCase,android.view.View,int,int,int)>(r0, r1, i0, i1, i2);

        return $i3;
    }

    public static int dragViewBy(android.test.InstrumentationTestCase, android.view.View, int, int, int)
    {
        android.test.InstrumentationTestCase r0;
        android.view.View r1;
        int i0, i1, i2, i3, $i4, $i5, i6, i7;
        int[] r2;
        double $d0, $d1, $d2;
        float $f0, $f1, $f2, $f3;

        r0 := @parameter0: android.test.InstrumentationTestCase;

        r1 := @parameter1: android.view.View;

        i6 := @parameter2: int;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        r2 = newarray (int)[2];

        staticinvoke <android.test.TouchUtils: void getStartLocation(android.view.View,int,int[])>(r1, i6, r2);

        i7 = r2[0];

        i2 = r2[1];

        $d1 = (double) i0;

        $d0 = (double) i1;

        $d2 = staticinvoke <java.lang.Math: double hypot(double,double)>($d1, $d0);

        i3 = (int) $d2;

        $f3 = (float) i7;

        $i4 = i7 + i0;

        $f2 = (float) $i4;

        $f1 = (float) i2;

        $i5 = i2 + i1;

        $f0 = (float) $i5;

        staticinvoke <android.test.TouchUtils: void drag(android.test.InstrumentationTestCase,float,float,float,float,int)>(r0, $f3, $f2, $f1, $f0, i3);

        return i3;
    }

    public static int dragViewTo(android.test.ActivityInstrumentationTestCase, android.view.View, int, int, int)
    {
        android.test.ActivityInstrumentationTestCase r0;
        android.view.View r1;
        int i0, i1, i2, $i3;

        r0 := @parameter0: android.test.ActivityInstrumentationTestCase;

        r1 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        $i3 = staticinvoke <android.test.TouchUtils: int dragViewTo(android.test.InstrumentationTestCase,android.view.View,int,int,int)>(r0, r1, i0, i1, i2);

        return $i3;
    }

    public static int dragViewTo(android.test.InstrumentationTestCase, android.view.View, int, int, int)
    {
        android.test.InstrumentationTestCase r0;
        android.view.View r1;
        int i0, i1, i2, i3, $i4, $i5, i6, i7;
        int[] r2;
        double $d0, $d1, $d2;
        float $f0, $f1, $f2, $f3;

        r0 := @parameter0: android.test.InstrumentationTestCase;

        r1 := @parameter1: android.view.View;

        i6 := @parameter2: int;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        r2 = newarray (int)[2];

        staticinvoke <android.test.TouchUtils: void getStartLocation(android.view.View,int,int[])>(r1, i6, r2);

        i2 = r2[0];

        i7 = r2[1];

        $i4 = i2 - i0;

        $d1 = (double) $i4;

        $i5 = i7 - i1;

        $d0 = (double) $i5;

        $d2 = staticinvoke <java.lang.Math: double hypot(double,double)>($d1, $d0);

        i3 = (int) $d2;

        $f3 = (float) i2;

        $f2 = (float) i0;

        $f1 = (float) i7;

        $f0 = (float) i1;

        staticinvoke <android.test.TouchUtils: void drag(android.test.InstrumentationTestCase,float,float,float,float,int)>(r0, $f3, $f2, $f1, $f0, i3);

        return i3;
    }

    public static void dragViewToBottom(android.test.ActivityInstrumentationTestCase, android.view.View)
    {
        android.test.ActivityInstrumentationTestCase r0;
        android.view.View r1;
        android.app.Activity $r2;

        r0 := @parameter0: android.test.ActivityInstrumentationTestCase;

        r1 := @parameter1: android.view.View;

        $r2 = virtualinvoke r0.<android.test.ActivityInstrumentationTestCase: android.app.Activity getActivity()>();

        staticinvoke <android.test.TouchUtils: void dragViewToBottom(android.test.InstrumentationTestCase,android.app.Activity,android.view.View,int)>(r0, $r2, r1, 4);

        return;
    }

    public static void dragViewToBottom(android.test.ActivityInstrumentationTestCase, android.view.View, int)
    {
        android.test.ActivityInstrumentationTestCase r0;
        android.view.View r1;
        int i0;
        android.app.Activity $r2;

        r0 := @parameter0: android.test.ActivityInstrumentationTestCase;

        r1 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        $r2 = virtualinvoke r0.<android.test.ActivityInstrumentationTestCase: android.app.Activity getActivity()>();

        staticinvoke <android.test.TouchUtils: void dragViewToBottom(android.test.InstrumentationTestCase,android.app.Activity,android.view.View,int)>(r0, $r2, r1, i0);

        return;
    }

    public static void dragViewToBottom(android.test.InstrumentationTestCase, android.app.Activity, android.view.View)
    {
        android.test.InstrumentationTestCase r0;
        android.app.Activity r1;
        android.view.View r2;

        r0 := @parameter0: android.test.InstrumentationTestCase;

        r1 := @parameter1: android.app.Activity;

        r2 := @parameter2: android.view.View;

        staticinvoke <android.test.TouchUtils: void dragViewToBottom(android.test.InstrumentationTestCase,android.app.Activity,android.view.View,int)>(r0, r1, r2, 4);

        return;
    }

    public static void dragViewToBottom(android.test.InstrumentationTestCase, android.app.Activity, android.view.View, int)
    {
        android.test.InstrumentationTestCase r0;
        android.view.View r1;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8;
        android.view.WindowMetrics $r2;
        android.util.Size $r3;
        android.app.Activity r4;
        android.view.WindowManager r5;
        int[] r6;

        r0 := @parameter0: android.test.InstrumentationTestCase;

        r4 := @parameter1: android.app.Activity;

        r1 := @parameter2: android.view.View;

        i0 := @parameter3: int;

        r5 = virtualinvoke r4.<android.app.Activity: android.view.WindowManager getWindowManager()>();

        $r2 = interfaceinvoke r5.<android.view.WindowManager: android.view.WindowMetrics getCurrentWindowMetrics()>();

        $r3 = staticinvoke <android.test.TouchUtils: android.util.Size getSizeExcludingNavigationBarAndCutout(android.view.WindowMetrics)>($r2);

        i1 = virtualinvoke $r3.<android.util.Size: int getHeight()>();

        r6 = newarray (int)[2];

        virtualinvoke r1.<android.view.View: void getLocationOnScreen(int[])>(r6);

        i2 = virtualinvoke r1.<android.view.View: int getWidth()>();

        i3 = virtualinvoke r1.<android.view.View: int getHeight()>();

        $i4 = r6[0];

        $f3 = (float) $i4;

        $f1 = (float) i2;

        $f2 = $f1 / 2.0F;

        f0 = $f3 + $f2;

        $i5 = r6[1];

        $f6 = (float) $i5;

        $f4 = (float) i3;

        $f5 = $f4 / 2.0F;

        $f8 = $f6 + $f5;

        $i6 = i1 - 1;

        $f7 = (float) $i6;

        staticinvoke <android.test.TouchUtils: void drag(android.test.InstrumentationTestCase,float,float,float,float,int)>(r0, f0, f0, $f8, $f7, i0);

        return;
    }

    public static void dragViewToTop(android.test.ActivityInstrumentationTestCase, android.view.View)
    {
        android.test.ActivityInstrumentationTestCase r0;
        android.view.View r1;

        r0 := @parameter0: android.test.ActivityInstrumentationTestCase;

        r1 := @parameter1: android.view.View;

        staticinvoke <android.test.TouchUtils: void dragViewToTop(android.test.InstrumentationTestCase,android.view.View,int)>(r0, r1, 4);

        return;
    }

    public static void dragViewToTop(android.test.ActivityInstrumentationTestCase, android.view.View, int)
    {
        android.test.ActivityInstrumentationTestCase r0;
        android.view.View r1;
        int i0;

        r0 := @parameter0: android.test.ActivityInstrumentationTestCase;

        r1 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        staticinvoke <android.test.TouchUtils: void dragViewToTop(android.test.InstrumentationTestCase,android.view.View,int)>(r0, r1, i0);

        return;
    }

    public static void dragViewToTop(android.test.InstrumentationTestCase, android.view.View)
    {
        android.test.InstrumentationTestCase r0;
        android.view.View r1;

        r0 := @parameter0: android.test.InstrumentationTestCase;

        r1 := @parameter1: android.view.View;

        staticinvoke <android.test.TouchUtils: void dragViewToTop(android.test.InstrumentationTestCase,android.view.View,int)>(r0, r1, 4);

        return;
    }

    public static void dragViewToTop(android.test.InstrumentationTestCase, android.view.View, int)
    {
        android.test.InstrumentationTestCase r0;
        android.view.View r1;
        int i0, i1, i2, $i3, $i4;
        int[] r2;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;

        r0 := @parameter0: android.test.InstrumentationTestCase;

        r1 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        r2 = newarray (int)[2];

        virtualinvoke r1.<android.view.View: void getLocationOnScreen(int[])>(r2);

        i1 = virtualinvoke r1.<android.view.View: int getWidth()>();

        i2 = virtualinvoke r1.<android.view.View: int getHeight()>();

        $i3 = r2[0];

        $f3 = (float) $i3;

        $f1 = (float) i1;

        $f2 = $f1 / 2.0F;

        f0 = $f3 + $f2;

        $i4 = r2[1];

        $f6 = (float) $i4;

        $f4 = (float) i2;

        $f5 = $f4 / 2.0F;

        $f7 = $f6 + $f5;

        staticinvoke <android.test.TouchUtils: void drag(android.test.InstrumentationTestCase,float,float,float,float,int)>(r0, f0, f0, $f7, 0.0F, i0);

        return;
    }

    public static int dragViewToX(android.test.ActivityInstrumentationTestCase, android.view.View, int, int)
    {
        android.test.ActivityInstrumentationTestCase r0;
        android.view.View r1;
        int i0, i1, $i2;

        r0 := @parameter0: android.test.ActivityInstrumentationTestCase;

        r1 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $i2 = staticinvoke <android.test.TouchUtils: int dragViewToX(android.test.InstrumentationTestCase,android.view.View,int,int)>(r0, r1, i0, i1);

        return $i2;
    }

    public static int dragViewToX(android.test.InstrumentationTestCase, android.view.View, int, int)
    {
        android.test.InstrumentationTestCase r0;
        android.view.View r1;
        int i0, i1, i2, i3, i4;
        int[] r2;
        float $f0, $f1, $f2, $f3;

        r0 := @parameter0: android.test.InstrumentationTestCase;

        r1 := @parameter1: android.view.View;

        i3 := @parameter2: int;

        i0 := @parameter3: int;

        r2 = newarray (int)[2];

        staticinvoke <android.test.TouchUtils: void getStartLocation(android.view.View,int,int[])>(r1, i3, r2);

        i4 = r2[0];

        i1 = r2[1];

        i2 = i4 - i0;

        $f3 = (float) i4;

        $f2 = (float) i0;

        $f1 = (float) i1;

        $f0 = (float) i1;

        staticinvoke <android.test.TouchUtils: void drag(android.test.InstrumentationTestCase,float,float,float,float,int)>(r0, $f3, $f2, $f1, $f0, i2);

        return i2;
    }

    public static int dragViewToY(android.test.ActivityInstrumentationTestCase, android.view.View, int, int)
    {
        android.test.ActivityInstrumentationTestCase r0;
        android.view.View r1;
        int i0, i1, $i2;

        r0 := @parameter0: android.test.ActivityInstrumentationTestCase;

        r1 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $i2 = staticinvoke <android.test.TouchUtils: int dragViewToY(android.test.InstrumentationTestCase,android.view.View,int,int)>(r0, r1, i0, i1);

        return $i2;
    }

    public static int dragViewToY(android.test.InstrumentationTestCase, android.view.View, int, int)
    {
        android.test.InstrumentationTestCase r0;
        android.view.View r1;
        int i0, i1, i2, i3, i4;
        int[] r2;
        float $f0, $f1, $f2, $f3;

        r0 := @parameter0: android.test.InstrumentationTestCase;

        r1 := @parameter1: android.view.View;

        i3 := @parameter2: int;

        i0 := @parameter3: int;

        r2 = newarray (int)[2];

        staticinvoke <android.test.TouchUtils: void getStartLocation(android.view.View,int,int[])>(r1, i3, r2);

        i1 = r2[0];

        i4 = r2[1];

        i2 = i4 - i0;

        $f3 = (float) i1;

        $f2 = (float) i1;

        $f1 = (float) i4;

        $f0 = (float) i0;

        staticinvoke <android.test.TouchUtils: void drag(android.test.InstrumentationTestCase,float,float,float,float,int)>(r0, $f3, $f2, $f1, $f0, i2);

        return i2;
    }

    private static android.util.Size getSizeExcludingNavigationBarAndCutout(android.view.WindowMetrics)
    {
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        android.util.Size $r0;
        android.view.WindowMetrics r1;
        android.view.WindowInsets r2;
        android.graphics.Insets r3;
        android.graphics.Rect r4;

        r1 := @parameter0: android.view.WindowMetrics;

        r2 = virtualinvoke r1.<android.view.WindowMetrics: android.view.WindowInsets getWindowInsets()>();

        $i4 = staticinvoke <android.view.WindowInsets$Type: int navigationBars()>();

        $i5 = staticinvoke <android.view.WindowInsets$Type: int displayCutout()>();

        $i6 = $i4 | $i5;

        r3 = virtualinvoke r2.<android.view.WindowInsets: android.graphics.Insets getInsetsIgnoringVisibility(int)>($i6);

        i0 = r3.<android.graphics.Insets: int left>;

        i1 = r3.<android.graphics.Insets: int right>;

        i2 = r3.<android.graphics.Insets: int top>;

        i3 = r3.<android.graphics.Insets: int bottom>;

        r4 = virtualinvoke r1.<android.view.WindowMetrics: android.graphics.Rect getBounds()>();

        $r0 = new android.util.Size;

        $i7 = virtualinvoke r4.<android.graphics.Rect: int width()>();

        $i8 = i0 + i1;

        $i9 = $i7 - $i8;

        $i10 = virtualinvoke r4.<android.graphics.Rect: int height()>();

        $i11 = i2 + i3;

        $i12 = $i10 - $i11;

        specialinvoke $r0.<android.util.Size: void <init>(int,int)>($i9, $i12);

        return $r0;
    }

    private static void getStartLocation(android.view.View, int, int[])
    {
        android.view.View r0;
        int[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16;

        r0 := @parameter0: android.view.View;

        i15 := @parameter1: int;

        r1 := @parameter2: int[];

        virtualinvoke r0.<android.view.View: void getLocationOnScreen(int[])>(r1);

        i0 = virtualinvoke r0.<android.view.View: int getWidth()>();

        i1 = virtualinvoke r0.<android.view.View: int getHeight()>();

        i2 = i15 & 112;

        if i2 == 16 goto label2;

        if i2 == 80 goto label1;

        goto label3;

     label1:
        $i13 = r1[1];

        $i12 = i1 - 1;

        $i14 = $i13 + $i12;

        r1[1] = $i14;

        goto label3;

     label2:
        $i4 = r1[1];

        $i3 = i1 / 2;

        $i5 = $i4 + $i3;

        r1[1] = $i5;

     label3:
        i16 = i15 & 7;

        if i16 == 1 goto label5;

        if i16 == 5 goto label4;

        goto label6;

     label4:
        $i10 = r1[0];

        $i9 = i0 - 1;

        $i11 = $i10 + $i9;

        r1[0] = $i11;

        goto label6;

     label5:
        $i7 = r1[0];

        $i6 = i0 / 2;

        $i8 = $i7 + $i6;

        r1[0] = $i8;

     label6:
        return;
    }

    public static void longClickView(android.test.ActivityInstrumentationTestCase, android.view.View)
    {
        android.test.ActivityInstrumentationTestCase r0;
        android.view.View r1;

        r0 := @parameter0: android.test.ActivityInstrumentationTestCase;

        r1 := @parameter1: android.view.View;

        staticinvoke <android.test.TouchUtils: void longClickView(android.test.InstrumentationTestCase,android.view.View)>(r0, r1);

        return;
    }

    public static void longClickView(android.test.InstrumentationTestCase, android.view.View)
    {
        int[] r0;
        int i0, $i3, $i4, $i6, $i7, $i8, i11, i12;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, f12, f13;
        long l1, l2, $l5, $l9, $l10;
        android.view.MotionEvent $r1, $r4, $r5;
        android.content.Context $r2;
        android.view.ViewConfiguration $r3;
        java.lang.Throwable $r6;
        android.test.InstrumentationTestCase r7;
        android.view.View r8;
        android.app.Instrumentation r9;
        java.lang.InterruptedException r11;

        r7 := @parameter0: android.test.InstrumentationTestCase;

        r8 := @parameter1: android.view.View;

        r0 = newarray (int)[2];

        virtualinvoke r8.<android.view.View: void getLocationOnScreen(int[])>(r0);

        i11 = virtualinvoke r8.<android.view.View: int getWidth()>();

        i0 = virtualinvoke r8.<android.view.View: int getHeight()>();

        $i3 = r0[0];

        f12 = (float) $i3;

        $f1 = (float) i11;

        $f2 = $f1 / 2.0F;

        f13 = $f2 + f12;

        $i4 = r0[1];

        $f5 = (float) $i4;

        $f3 = (float) i0;

        $f4 = $f3 / 2.0F;

        f0 = $f5 + $f4;

        r9 = virtualinvoke r7.<android.test.InstrumentationTestCase: android.app.Instrumentation getInstrumentation()>();

        l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l5 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r1 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>(l1, $l5, 0, f13, f0, 0);

        virtualinvoke r9.<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)>($r1);

        virtualinvoke r9.<android.app.Instrumentation: void waitForIdleSync()>();

        l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r2 = virtualinvoke r8.<android.view.View: android.content.Context getContext()>();

        $r3 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r2);

        i12 = virtualinvoke $r3.<android.view.ViewConfiguration: int getScaledTouchSlop()>();

        $i6 = i12 / 2;

        $f6 = (float) $i6;

        $f9 = f13 + $f6;

        $i7 = i12 / 2;

        $f7 = (float) $i7;

        $f8 = f0 + $f7;

        $r4 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>(l1, l2, 2, $f9, $f8, 0);

        virtualinvoke r9.<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)>($r4);

        virtualinvoke r9.<android.app.Instrumentation: void waitForIdleSync()>();

     label1:
        $i8 = staticinvoke <android.view.ViewConfiguration: int getLongPressTimeout()>();

        $f10 = (float) $i8;

        $f11 = $f10 * 1.5F;

        $l9 = (long) $f11;

        staticinvoke <java.lang.Thread: void sleep(long)>($l9);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r11 = (java.lang.InterruptedException) $r6;

        virtualinvoke r11.<java.lang.InterruptedException: void printStackTrace()>();

     label4:
        $l10 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r5 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>(l1, $l10, 1, f13, f0, 0);

        virtualinvoke r9.<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)>($r5);

        virtualinvoke r9.<android.app.Instrumentation: void waitForIdleSync()>();

        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public static void scrollToBottom(android.test.ActivityInstrumentationTestCase, android.view.ViewGroup)
    {
        android.test.ActivityInstrumentationTestCase r0;
        android.view.ViewGroup r1;
        android.app.Activity $r2;

        r0 := @parameter0: android.test.ActivityInstrumentationTestCase;

        r1 := @parameter1: android.view.ViewGroup;

        $r2 = virtualinvoke r0.<android.test.ActivityInstrumentationTestCase: android.app.Activity getActivity()>();

        staticinvoke <android.test.TouchUtils: void scrollToBottom(android.test.InstrumentationTestCase,android.app.Activity,android.view.ViewGroup)>(r0, $r2, r1);

        return;
    }

    public static void scrollToBottom(android.test.InstrumentationTestCase, android.app.Activity, android.view.ViewGroup)
    {
        android.test.InstrumentationTestCase r0;
        android.app.Activity r1;
        android.view.ViewGroup r2;
        android.test.TouchUtils$ViewStateSnapshot $r4, $r5, r6;
        boolean $z0;

        r0 := @parameter0: android.test.InstrumentationTestCase;

        r1 := @parameter1: android.app.Activity;

        r2 := @parameter2: android.view.ViewGroup;

        $r4 = new android.test.TouchUtils$ViewStateSnapshot;

        specialinvoke $r4.<android.test.TouchUtils$ViewStateSnapshot: void <init>(android.view.ViewGroup,android.test.TouchUtils$1)>(r2, null);

        r6 = $r4;

     label1:
        staticinvoke <android.test.TouchUtils: void dragQuarterScreenUp(android.test.InstrumentationTestCase,android.app.Activity)>(r0, r1);

        $r5 = new android.test.TouchUtils$ViewStateSnapshot;

        specialinvoke $r5.<android.test.TouchUtils$ViewStateSnapshot: void <init>(android.view.ViewGroup,android.test.TouchUtils$1)>(r2, null);

        $z0 = virtualinvoke r6.<android.test.TouchUtils$ViewStateSnapshot: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label2;

        return;

     label2:
        r6 = $r5;

        goto label1;
    }

    public static void scrollToTop(android.test.ActivityInstrumentationTestCase, android.view.ViewGroup)
    {
        android.test.ActivityInstrumentationTestCase r0;
        android.view.ViewGroup r1;
        android.app.Activity $r2;

        r0 := @parameter0: android.test.ActivityInstrumentationTestCase;

        r1 := @parameter1: android.view.ViewGroup;

        $r2 = virtualinvoke r0.<android.test.ActivityInstrumentationTestCase: android.app.Activity getActivity()>();

        staticinvoke <android.test.TouchUtils: void scrollToTop(android.test.InstrumentationTestCase,android.app.Activity,android.view.ViewGroup)>(r0, $r2, r1);

        return;
    }

    public static void scrollToTop(android.test.InstrumentationTestCase, android.app.Activity, android.view.ViewGroup)
    {
        android.test.InstrumentationTestCase r0;
        android.app.Activity r1;
        android.view.ViewGroup r2;
        android.test.TouchUtils$ViewStateSnapshot $r4, $r5, r6;
        boolean $z0;

        r0 := @parameter0: android.test.InstrumentationTestCase;

        r1 := @parameter1: android.app.Activity;

        r2 := @parameter2: android.view.ViewGroup;

        $r4 = new android.test.TouchUtils$ViewStateSnapshot;

        specialinvoke $r4.<android.test.TouchUtils$ViewStateSnapshot: void <init>(android.view.ViewGroup,android.test.TouchUtils$1)>(r2, null);

        r6 = $r4;

     label1:
        staticinvoke <android.test.TouchUtils: void dragQuarterScreenDown(android.test.InstrumentationTestCase,android.app.Activity)>(r0, r1);

        $r5 = new android.test.TouchUtils$ViewStateSnapshot;

        specialinvoke $r5.<android.test.TouchUtils$ViewStateSnapshot: void <init>(android.view.ViewGroup,android.test.TouchUtils$1)>(r2, null);

        $z0 = virtualinvoke r6.<android.test.TouchUtils$ViewStateSnapshot: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label2;

        return;

     label2:
        r6 = $r5;

        goto label1;
    }

    public static void tapView(android.test.InstrumentationTestCase, android.view.View)
    {
        android.view.View r0;
        int[] r1;
        int i0, $i3, $i4, i7, i8;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13;
        long l1, l2, $l5, $l6;
        android.view.MotionEvent $r2, $r5, $r6;
        android.content.Context $r3;
        android.view.ViewConfiguration $r4;
        android.test.InstrumentationTestCase r7;
        android.app.Instrumentation r8;

        r7 := @parameter0: android.test.InstrumentationTestCase;

        r0 := @parameter1: android.view.View;

        r1 = newarray (int)[2];

        virtualinvoke r0.<android.view.View: void getLocationOnScreen(int[])>(r1);

        i0 = virtualinvoke r0.<android.view.View: int getWidth()>();

        i7 = virtualinvoke r0.<android.view.View: int getHeight()>();

        $i3 = r1[0];

        $f4 = (float) $i3;

        $f2 = (float) i0;

        $f3 = $f2 / 2.0F;

        f0 = $f4 + $f3;

        $i4 = r1[1];

        $f7 = (float) $i4;

        $f5 = (float) i7;

        $f6 = $f5 / 2.0F;

        f1 = $f7 + $f6;

        r8 = virtualinvoke r7.<android.test.InstrumentationTestCase: android.app.Instrumentation getInstrumentation()>();

        l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l5 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r2 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>(l1, $l5, 0, f0, f1, 0);

        virtualinvoke r8.<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)>($r2);

        virtualinvoke r8.<android.app.Instrumentation: void waitForIdleSync()>();

        l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r3 = virtualinvoke r0.<android.view.View: android.content.Context getContext()>();

        $r4 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r3);

        i8 = virtualinvoke $r4.<android.view.ViewConfiguration: int getScaledTouchSlop()>();

        $f8 = (float) i8;

        $f9 = $f8 / 2.0F;

        $f13 = f0 + $f9;

        $f10 = (float) i8;

        $f11 = $f10 / 2.0F;

        $f12 = f1 + $f11;

        $r5 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>(l1, l2, 2, $f13, $f12, 0);

        virtualinvoke r8.<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)>($r5);

        virtualinvoke r8.<android.app.Instrumentation: void waitForIdleSync()>();

        $l6 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r6 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>(l1, $l6, 1, f0, f1, 0);

        virtualinvoke r8.<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)>($r6);

        virtualinvoke r8.<android.app.Instrumentation: void waitForIdleSync()>();

        return;
    }

    public static void touchAndCancelView(android.test.InstrumentationTestCase, android.view.View)
    {
        android.view.View r0;
        int[] r1;
        int i0, $i3, $i4, i6, i7;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13;
        long l1, l2, $l5;
        android.view.MotionEvent $r2, $r5;
        android.content.Context $r3;
        android.view.ViewConfiguration $r4;
        android.test.InstrumentationTestCase r6;
        android.app.Instrumentation r7;

        r6 := @parameter0: android.test.InstrumentationTestCase;

        r0 := @parameter1: android.view.View;

        r1 = newarray (int)[2];

        virtualinvoke r0.<android.view.View: void getLocationOnScreen(int[])>(r1);

        i0 = virtualinvoke r0.<android.view.View: int getWidth()>();

        i6 = virtualinvoke r0.<android.view.View: int getHeight()>();

        $i3 = r1[0];

        $f4 = (float) $i3;

        $f2 = (float) i0;

        $f3 = $f2 / 2.0F;

        f0 = $f4 + $f3;

        $i4 = r1[1];

        $f7 = (float) $i4;

        $f5 = (float) i6;

        $f6 = $f5 / 2.0F;

        f1 = $f7 + $f6;

        r7 = virtualinvoke r6.<android.test.InstrumentationTestCase: android.app.Instrumentation getInstrumentation()>();

        l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l5 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r2 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>(l1, $l5, 0, f0, f1, 0);

        virtualinvoke r7.<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)>($r2);

        virtualinvoke r7.<android.app.Instrumentation: void waitForIdleSync()>();

        l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r3 = virtualinvoke r0.<android.view.View: android.content.Context getContext()>();

        $r4 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r3);

        i7 = virtualinvoke $r4.<android.view.ViewConfiguration: int getScaledTouchSlop()>();

        $f8 = (float) i7;

        $f9 = $f8 / 2.0F;

        $f13 = f0 + $f9;

        $f10 = (float) i7;

        $f11 = $f10 / 2.0F;

        $f12 = f1 + $f11;

        $r5 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>(l1, l2, 3, $f13, $f12, 0);

        virtualinvoke r7.<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)>($r5);

        virtualinvoke r7.<android.app.Instrumentation: void waitForIdleSync()>();

        return;
    }
}
