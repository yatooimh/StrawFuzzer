public class android.test.ViewAsserts extends java.lang.Object
{

    private void <init>()
    {
        android.test.ViewAsserts r0;

        r0 := @this: android.test.ViewAsserts;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void assertBaselineAligned(android.view.View, android.view.View)
    {
        android.view.View r0, r1;
        int[] r2;
        int i0, i1, $i2, $i3, $i4, $i5;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: android.view.View;

        r2 = newarray (int)[2];

        virtualinvoke r0.<android.view.View: void getLocationOnScreen(int[])>(r2);

        i0 = r2[1];

        i1 = virtualinvoke r0.<android.view.View: int getBaseline()>();

        virtualinvoke r1.<android.view.View: void getLocationOnScreen(int[])>(r2);

        $i2 = i0 + i1;

        $i3 = r2[1];

        $i4 = virtualinvoke r1.<android.view.View: int getBaseline()>();

        $i5 = $i3 + $i4;

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("views are not baseline aligned", $i2, $i5);

        return;
    }

    public static void assertBottomAligned(android.view.View, android.view.View)
    {
        android.view.View r0, r1;
        int[] r2;
        int i0, i1, $i2, $i3, $i4, $i5;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: android.view.View;

        r2 = newarray (int)[2];

        virtualinvoke r0.<android.view.View: void getLocationOnScreen(int[])>(r2);

        i0 = r2[1];

        i1 = virtualinvoke r0.<android.view.View: int getMeasuredHeight()>();

        virtualinvoke r1.<android.view.View: void getLocationOnScreen(int[])>(r2);

        $i2 = i0 + i1;

        $i3 = r2[1];

        $i4 = virtualinvoke r1.<android.view.View: int getMeasuredHeight()>();

        $i5 = $i3 + $i4;

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("views are not bottom aligned", $i2, $i5);

        return;
    }

    public static void assertBottomAligned(android.view.View, android.view.View, int)
    {
        android.view.View r0, r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        int[] r2;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        r2 = newarray (int)[2];

        virtualinvoke r0.<android.view.View: void getLocationOnScreen(int[])>(r2);

        i1 = r2[1];

        i2 = virtualinvoke r0.<android.view.View: int getMeasuredHeight()>();

        virtualinvoke r1.<android.view.View: void getLocationOnScreen(int[])>(r2);

        $i3 = i1 + i2;

        $i4 = r2[1];

        $i5 = virtualinvoke r1.<android.view.View: int getMeasuredHeight()>();

        $i6 = $i4 + $i5;

        $i7 = $i3 - $i6;

        $i8 = staticinvoke <java.lang.Math: int abs(int)>($i7);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("views are not bottom aligned", $i8, i0);

        return;
    }

    public static void assertGroupContains(android.view.ViewGroup, android.view.View)
    {
        android.view.View r0, $r6;
        int i0, i1;
        java.lang.StringBuilder $r2, $r7;
        java.lang.String $r5, $r11;
        android.view.ViewGroup r12;
        boolean z0, z1, z2;

        r12 := @parameter0: android.view.ViewGroup;

        r0 := @parameter1: android.view.View;

        i0 = virtualinvoke r12.<android.view.ViewGroup: int getChildCount()>();

        if i0 < 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>("Child count should be >= 0", z0);

        z1 = 0;

        i1 = 0;

     label3:
        if i1 >= i0 goto label6;

        z2 = z1;

        $r6 = virtualinvoke r12.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        if $r6 != r0 goto label5;

        if z1 != 0 goto label4;

        z2 = 1;

        goto label5;

     label4:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("child ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is duplicated in parent");

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>($r11, 0);

        z2 = z1;

     label5:
        i1 = i1 + 1;

        z1 = z2;

        goto label3;

     label6:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("group does not contain ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>($r5, z1);

        return;
    }

    public static void assertGroupIntegrity(android.view.ViewGroup)
    {
        android.view.ViewGroup r0;
        int i0, i1;
        android.view.View $r1, $r2;
        android.view.ViewParent $r3;
        boolean z0;

        r0 := @parameter0: android.view.ViewGroup;

        i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        if i0 < 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>("child count should be >= 0", z0);

        i1 = 0;

     label3:
        if i1 >= i0 goto label4;

        $r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        staticinvoke <junit.framework.Assert: void assertNotNull(java.lang.String,java.lang.Object)>("group should not contain null children", $r1);

        $r2 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        $r3 = virtualinvoke $r2.<android.view.View: android.view.ViewParent getParent()>();

        staticinvoke <junit.framework.Assert: void assertSame(java.lang.Object,java.lang.Object)>(r0, $r3);

        i1 = i1 + 1;

        goto label3;

     label4:
        return;
    }

    public static void assertGroupNotContains(android.view.ViewGroup, android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1, $r3;
        int i0, i1;
        java.lang.StringBuilder $r4;
        java.lang.String $r8;
        boolean z0;

        r0 := @parameter0: android.view.ViewGroup;

        r1 := @parameter1: android.view.View;

        i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        if i0 < 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>("Child count should be >= 0", z0);

        i1 = 0;

     label3:
        if i1 >= i0 goto label5;

        $r3 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        if $r3 != r1 goto label4;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("child ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is found in parent");

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>($r8, 0);

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        return;
    }

    public static void assertHasScreenCoordinates(android.view.View, android.view.View, int, int)
    {
        android.view.View r0, r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        int[] r1, r3;

        r0 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r1 = newarray (int)[2];

        virtualinvoke r2.<android.view.View: void getLocationOnScreen(int[])>(r1);

        r3 = newarray (int)[2];

        virtualinvoke r0.<android.view.View: void getLocationOnScreen(int[])>(r3);

        $i3 = r1[0];

        $i2 = r3[0];

        $i4 = $i3 - $i2;

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("x coordinate", i0, $i4);

        $i6 = r1[1];

        $i5 = r3[1];

        $i7 = $i6 - $i5;

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("y coordinate", i1, $i7);

        return;
    }

    public static void assertHorizontalCenterAligned(android.view.View, android.view.View)
    {
        android.view.View r0, r1;
        int[] r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: android.view.View;

        r2 = newarray (int)[2];

        virtualinvoke r0.<android.view.View: void getLocationOnScreen(int[])>(r2);

        i0 = r2[0];

        virtualinvoke r1.<android.view.View: void getLocationOnScreen(int[])>(r2);

        i1 = r2[0];

        $i2 = virtualinvoke r0.<android.view.View: int getMeasuredWidth()>();

        $i3 = virtualinvoke r1.<android.view.View: int getMeasuredWidth()>();

        $i4 = $i2 - $i3;

        $i6 = $i4 / 2;

        $i5 = i1 - i0;

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("views are not horizontally center aligned", $i6, $i5);

        return;
    }

    public static void assertLeftAligned(android.view.View, android.view.View)
    {
        android.view.View r0, r1;
        int[] r2;
        int i0, $i1;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: android.view.View;

        r2 = newarray (int)[2];

        virtualinvoke r0.<android.view.View: void getLocationOnScreen(int[])>(r2);

        i0 = r2[0];

        virtualinvoke r1.<android.view.View: void getLocationOnScreen(int[])>(r2);

        $i1 = r2[0];

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("views are not left aligned", i0, $i1);

        return;
    }

    public static void assertLeftAligned(android.view.View, android.view.View, int)
    {
        android.view.View r0, r1;
        int i0, i1, $i2, $i3, $i4;
        int[] r2;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        r2 = newarray (int)[2];

        virtualinvoke r0.<android.view.View: void getLocationOnScreen(int[])>(r2);

        i1 = r2[0];

        virtualinvoke r1.<android.view.View: void getLocationOnScreen(int[])>(r2);

        $i2 = r2[0];

        $i3 = i1 - $i2;

        $i4 = staticinvoke <java.lang.Math: int abs(int)>($i3);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("views are not left aligned", $i4, i0);

        return;
    }

    public static void assertOffScreenAbove(android.view.View, android.view.View)
    {
        android.view.View r0, r2;
        int[] r1, r3;
        int $i0, $i1, $i2;
        boolean z0;

        r0 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        r1 = newarray (int)[2];

        virtualinvoke r2.<android.view.View: void getLocationOnScreen(int[])>(r1);

        r3 = newarray (int)[2];

        virtualinvoke r0.<android.view.View: void getLocationOnScreen(int[])>(r3);

        z0 = 1;

        $i1 = r1[1];

        $i0 = r3[1];

        $i2 = $i1 - $i0;

        if $i2 >= 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>("view should have y location less than that of origin view", z0);

        return;
    }

    public static void assertOffScreenBelow(android.view.View, android.view.View)
    {
        android.view.View r0, r8;
        int[] r1, r9;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.StringBuilder $r2;
        boolean z0;
        java.lang.String r11;

        r0 := @parameter0: android.view.View;

        r8 := @parameter1: android.view.View;

        r1 = newarray (int)[2];

        virtualinvoke r8.<android.view.View: void getLocationOnScreen(int[])>(r1);

        r9 = newarray (int)[2];

        virtualinvoke r0.<android.view.View: void getLocationOnScreen(int[])>(r9);

        z0 = 1;

        $i2 = r1[1];

        $i1 = r9[1];

        i0 = $i2 - $i1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("view should have y location on screen greater than drawing height of origen view (");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not greater than ");

        $i3 = virtualinvoke r0.<android.view.View: int getHeight()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        r11 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $i4 = virtualinvoke r0.<android.view.View: int getHeight()>();

        if i0 <= $i4 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>(r11, z0);

        return;
    }

    public static void assertOnScreen(android.view.View, android.view.View)
    {
        android.view.View r0, r1, $r4;
        int[] r2, r3;
        int i0, $i1, $i2, $i3;
        boolean z1, z2;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: android.view.View;

        r2 = newarray (int)[2];

        virtualinvoke r1.<android.view.View: void getLocationOnScreen(int[])>(r2);

        r3 = newarray (int)[2];

        virtualinvoke r0.<android.view.View: void getLocationOnScreen(int[])>(r3);

        $i2 = r2[1];

        $i1 = r3[1];

        i0 = $i2 - $i1;

        if i0 < 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>("view should have positive y coordinate on screen", z1);

        $r4 = virtualinvoke r1.<android.view.View: android.view.View getRootView()>();

        $i3 = virtualinvoke $r4.<android.view.View: int getHeight()>();

        if i0 > $i3 goto label3;

        z2 = 1;

        goto label4;

     label3:
        z2 = 0;

     label4:
        staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>("view should have y location on screen less than drawing height of root view", z2);

        return;
    }

    public static void assertRightAligned(android.view.View, android.view.View)
    {
        android.view.View r0, r1;
        int[] r2;
        int i0, i1, $i2, $i3, $i4, $i5;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: android.view.View;

        r2 = newarray (int)[2];

        virtualinvoke r0.<android.view.View: void getLocationOnScreen(int[])>(r2);

        i0 = r2[0];

        i1 = virtualinvoke r0.<android.view.View: int getMeasuredWidth()>();

        virtualinvoke r1.<android.view.View: void getLocationOnScreen(int[])>(r2);

        $i2 = i0 + i1;

        $i3 = r2[0];

        $i4 = virtualinvoke r1.<android.view.View: int getMeasuredWidth()>();

        $i5 = $i3 + $i4;

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("views are not right aligned", $i2, $i5);

        return;
    }

    public static void assertRightAligned(android.view.View, android.view.View, int)
    {
        android.view.View r0, r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        int[] r2;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        r2 = newarray (int)[2];

        virtualinvoke r0.<android.view.View: void getLocationOnScreen(int[])>(r2);

        i1 = r2[0];

        i2 = virtualinvoke r0.<android.view.View: int getMeasuredWidth()>();

        virtualinvoke r1.<android.view.View: void getLocationOnScreen(int[])>(r2);

        $i3 = i1 + i2;

        $i4 = r2[0];

        $i5 = virtualinvoke r1.<android.view.View: int getMeasuredWidth()>();

        $i6 = $i4 + $i5;

        $i7 = $i3 - $i6;

        $i8 = staticinvoke <java.lang.Math: int abs(int)>($i7);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("views are not right aligned", $i8, i0);

        return;
    }

    public static void assertTopAligned(android.view.View, android.view.View)
    {
        android.view.View r0, r1;
        int[] r2;
        int i0, $i1;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: android.view.View;

        r2 = newarray (int)[2];

        virtualinvoke r0.<android.view.View: void getLocationOnScreen(int[])>(r2);

        i0 = r2[1];

        virtualinvoke r1.<android.view.View: void getLocationOnScreen(int[])>(r2);

        $i1 = r2[1];

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("views are not top aligned", i0, $i1);

        return;
    }

    public static void assertTopAligned(android.view.View, android.view.View, int)
    {
        android.view.View r0, r1;
        int i0, i1, $i2, $i3, $i4;
        int[] r2;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        r2 = newarray (int)[2];

        virtualinvoke r0.<android.view.View: void getLocationOnScreen(int[])>(r2);

        i1 = r2[1];

        virtualinvoke r1.<android.view.View: void getLocationOnScreen(int[])>(r2);

        $i2 = r2[1];

        $i3 = i1 - $i2;

        $i4 = staticinvoke <java.lang.Math: int abs(int)>($i3);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("views are not top aligned", $i4, i0);

        return;
    }

    public static void assertVerticalCenterAligned(android.view.View, android.view.View)
    {
        android.view.View r0, r1;
        int[] r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: android.view.View;

        r2 = newarray (int)[2];

        virtualinvoke r0.<android.view.View: void getLocationOnScreen(int[])>(r2);

        i0 = r2[1];

        virtualinvoke r1.<android.view.View: void getLocationOnScreen(int[])>(r2);

        i1 = r2[1];

        $i2 = virtualinvoke r0.<android.view.View: int getMeasuredHeight()>();

        $i3 = virtualinvoke r1.<android.view.View: int getMeasuredHeight()>();

        $i4 = $i2 - $i3;

        $i6 = $i4 / 2;

        $i5 = i1 - i0;

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("views are not vertically center aligned", $i6, $i5);

        return;
    }
}
