class android.test.mock.MockAccountManager$MockAccountManagerImpl extends android.accounts.AccountManager
{

    void <init>(android.content.Context)
    {
        android.test.mock.MockAccountManager$MockAccountManagerImpl r0;
        android.content.Context r1;

        r0 := @this: android.test.mock.MockAccountManager$MockAccountManagerImpl;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.accounts.AccountManager: void <init>(android.content.Context,android.accounts.IAccountManager,android.os.Handler)>(r1, null, null);

        return;
    }

    public void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener, android.os.Handler, boolean)
    {
        android.test.mock.MockAccountManager$MockAccountManagerImpl r0;
        android.accounts.OnAccountsUpdateListener r1;
        android.os.Handler r2;
        boolean z0;

        r0 := @this: android.test.mock.MockAccountManager$MockAccountManagerImpl;

        r1 := @parameter0: android.accounts.OnAccountsUpdateListener;

        r2 := @parameter1: android.os.Handler;

        z0 := @parameter2: boolean;

        return;
    }

    public java.lang.String blockingGetAuthToken(android.accounts.Account, java.lang.String, boolean) throws android.accounts.OperationCanceledException, java.io.IOException, android.accounts.AuthenticatorException
    {
        android.test.mock.MockAccountManager$MockAccountManagerImpl r0;
        android.accounts.Account r1;
        java.lang.String r2;
        boolean z0;

        r0 := @this: android.test.mock.MockAccountManager$MockAccountManagerImpl;

        r1 := @parameter0: android.accounts.Account;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        return null;
    }

    public android.accounts.Account[] getAccounts()
    {
        android.test.mock.MockAccountManager$MockAccountManagerImpl r0;
        android.accounts.Account[] $r1;

        r0 := @this: android.test.mock.MockAccountManager$MockAccountManagerImpl;

        $r1 = newarray (android.accounts.Account)[0];

        return $r1;
    }

    public android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String, java.lang.String[], android.accounts.AccountManagerCallback, android.os.Handler)
    {
        android.test.mock.MockAccountManager$MockAccountManagerImpl r0;
        java.lang.String r1;
        java.lang.String[] r2;
        android.accounts.AccountManagerCallback r3;
        android.os.Handler r4;
        android.test.mock.MockAccountManager$MockAccountManagerFuture $r5;
        android.accounts.Account[] $r6;

        r0 := @this: android.test.mock.MockAccountManager$MockAccountManagerImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: android.accounts.AccountManagerCallback;

        r4 := @parameter3: android.os.Handler;

        $r5 = new android.test.mock.MockAccountManager$MockAccountManagerFuture;

        $r6 = newarray (android.accounts.Account)[0];

        specialinvoke $r5.<android.test.mock.MockAccountManager$MockAccountManagerFuture: void <init>(java.lang.Object)>($r6);

        return $r5;
    }
}
