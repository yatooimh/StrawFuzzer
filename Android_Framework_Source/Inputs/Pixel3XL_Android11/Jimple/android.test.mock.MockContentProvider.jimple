public class android.test.mock.MockContentProvider extends android.content.ContentProvider
{
    private final android.test.mock.MockContentProvider$InversionIContentProvider mIContentProvider;

    protected void <init>()
    {
        android.test.mock.MockContentProvider r0;
        android.test.mock.MockContext $r1;
        android.test.mock.MockContentProvider$InversionIContentProvider $r2;

        r0 := @this: android.test.mock.MockContentProvider;

        $r1 = new android.test.mock.MockContext;

        specialinvoke $r1.<android.test.mock.MockContext: void <init>()>();

        specialinvoke r0.<android.content.ContentProvider: void <init>(android.content.Context,java.lang.String,java.lang.String,android.content.pm.PathPermission[])>($r1, "", "", null);

        $r2 = new android.test.mock.MockContentProvider$InversionIContentProvider;

        specialinvoke $r2.<android.test.mock.MockContentProvider$InversionIContentProvider: void <init>(android.test.mock.MockContentProvider,android.test.mock.MockContentProvider$1)>(r0, null);

        r0.<android.test.mock.MockContentProvider: android.test.mock.MockContentProvider$InversionIContentProvider mIContentProvider> = $r2;

        return;
    }

    public void <init>(android.content.Context)
    {
        android.test.mock.MockContentProvider r0;
        android.content.Context r1;
        android.test.mock.MockContentProvider$InversionIContentProvider $r2;

        r0 := @this: android.test.mock.MockContentProvider;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.content.ContentProvider: void <init>(android.content.Context,java.lang.String,java.lang.String,android.content.pm.PathPermission[])>(r1, "", "", null);

        $r2 = new android.test.mock.MockContentProvider$InversionIContentProvider;

        specialinvoke $r2.<android.test.mock.MockContentProvider$InversionIContentProvider: void <init>(android.test.mock.MockContentProvider,android.test.mock.MockContentProvider$1)>(r0, null);

        r0.<android.test.mock.MockContentProvider: android.test.mock.MockContentProvider$InversionIContentProvider mIContentProvider> = $r2;

        return;
    }

    public void <init>(android.content.Context, java.lang.String, java.lang.String, android.content.pm.PathPermission[])
    {
        android.test.mock.MockContentProvider r0;
        android.content.Context r1;
        java.lang.String r2, r3;
        android.content.pm.PathPermission[] r4;
        android.test.mock.MockContentProvider$InversionIContentProvider $r5;

        r0 := @this: android.test.mock.MockContentProvider;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.content.pm.PathPermission[];

        specialinvoke r0.<android.content.ContentProvider: void <init>(android.content.Context,java.lang.String,java.lang.String,android.content.pm.PathPermission[])>(r1, r2, r3, r4);

        $r5 = new android.test.mock.MockContentProvider$InversionIContentProvider;

        specialinvoke $r5.<android.test.mock.MockContentProvider$InversionIContentProvider: void <init>(android.test.mock.MockContentProvider,android.test.mock.MockContentProvider$1)>(r0, null);

        r0.<android.test.mock.MockContentProvider: android.test.mock.MockContentProvider$InversionIContentProvider mIContentProvider> = $r5;

        return;
    }

    public static void attachInfoForTesting(android.content.ContentProvider, android.content.Context, android.content.pm.ProviderInfo)
    {
        android.content.ContentProvider r0;
        android.content.Context r1;
        android.content.pm.ProviderInfo r2;

        r0 := @parameter0: android.content.ContentProvider;

        r1 := @parameter1: android.content.Context;

        r2 := @parameter2: android.content.pm.ProviderInfo;

        virtualinvoke r0.<android.content.ContentProvider: void attachInfoForTesting(android.content.Context,android.content.pm.ProviderInfo)>(r1, r2);

        return;
    }

    public android.content.ContentProviderResult[] applyBatch(java.util.ArrayList)
    {
        android.test.mock.MockContentProvider r0;
        java.util.ArrayList r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockContentProvider;

        r1 := @parameter0: java.util.ArrayList;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("unimplemented mock method");

        throw $r2;
    }

    public void attachInfo(android.content.Context, android.content.pm.ProviderInfo)
    {
        android.test.mock.MockContentProvider r0;
        android.content.Context r1;
        android.content.pm.ProviderInfo r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockContentProvider;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.content.pm.ProviderInfo;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("unimplemented mock method");

        throw $r3;
    }

    public int bulkInsert(android.net.Uri, android.content.ContentValues[])
    {
        android.test.mock.MockContentProvider r0;
        android.net.Uri r1;
        android.content.ContentValues[] r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockContentProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: android.content.ContentValues[];

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("unimplemented mock method");

        throw $r3;
    }

    public android.os.Bundle call(java.lang.String, java.lang.String, android.os.Bundle)
    {
        android.test.mock.MockContentProvider r0;
        java.lang.String r1, r2;
        android.os.Bundle r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.test.mock.MockContentProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Bundle;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("unimplemented mock method call");

        throw $r4;
    }

    public void canonicalizeAsync(android.net.Uri, android.os.RemoteCallback)
    {
        android.test.mock.MockContentProvider r0;
        android.net.Uri r1;
        android.os.RemoteCallback r2;
        android.test.mock._$$Lambda$MockContentProvider$AHbj44jLj2g4zBFLqysQEsXuWaE $r3;
        java.util.concurrent.Executor $r4;

        r0 := @this: android.test.mock.MockContentProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: android.os.RemoteCallback;

        $r4 = <android.os.AsyncTask: java.util.concurrent.Executor SERIAL_EXECUTOR>;

        $r3 = new android.test.mock._$$Lambda$MockContentProvider$AHbj44jLj2g4zBFLqysQEsXuWaE;

        specialinvoke $r3.<android.test.mock._$$Lambda$MockContentProvider$AHbj44jLj2g4zBFLqysQEsXuWaE: void <init>(android.test.mock.MockContentProvider,android.net.Uri,android.os.RemoteCallback)>(r0, r1, r2);

        interfaceinvoke $r4.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r3);

        return;
    }

    public int checkUriPermission(android.net.Uri, int, int)
    {
        android.test.mock.MockContentProvider r0;
        android.net.Uri r1;
        int i0, i1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockContentProvider;

        r1 := @parameter0: android.net.Uri;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("unimplemented mock method call");

        throw $r2;
    }

    public int delete(android.net.Uri, java.lang.String, java.lang.String[])
    {
        android.test.mock.MockContentProvider r0;
        android.net.Uri r1;
        java.lang.String r2;
        java.lang.String[] r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.test.mock.MockContentProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String[];

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("unimplemented mock method");

        throw $r4;
    }

    public final android.content.IContentProvider getIContentProvider()
    {
        android.test.mock.MockContentProvider r0;
        android.test.mock.MockContentProvider$InversionIContentProvider $r1;

        r0 := @this: android.test.mock.MockContentProvider;

        $r1 = r0.<android.test.mock.MockContentProvider: android.test.mock.MockContentProvider$InversionIContentProvider mIContentProvider>;

        return $r1;
    }

    public android.os.IBinder getIContentProviderBinder()
    {
        android.test.mock.MockContentProvider r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockContentProvider;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("unimplemented mock method");

        throw $r1;
    }

    public java.lang.String[] getStreamTypes(android.net.Uri, java.lang.String)
    {
        android.test.mock.MockContentProvider r0;
        android.net.Uri r1;
        java.lang.String r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockContentProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("unimplemented mock method call");

        throw $r3;
    }

    public java.lang.String getType(android.net.Uri)
    {
        android.test.mock.MockContentProvider r0;
        android.net.Uri r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockContentProvider;

        r1 := @parameter0: android.net.Uri;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("unimplemented mock method");

        throw $r2;
    }

    public void getTypeAsync(android.net.Uri, android.os.RemoteCallback)
    {
        android.test.mock.MockContentProvider r0;
        android.net.Uri r1;
        android.os.RemoteCallback r2;
        android.test.mock._$$Lambda$MockContentProvider$0rINQzbz6pdJpN9ZiKyx_V7xbsE $r3;
        java.util.concurrent.Executor $r4;

        r0 := @this: android.test.mock.MockContentProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: android.os.RemoteCallback;

        $r4 = <android.os.AsyncTask: java.util.concurrent.Executor SERIAL_EXECUTOR>;

        $r3 = new android.test.mock._$$Lambda$MockContentProvider$0rINQzbz6pdJpN9ZiKyx_V7xbsE;

        specialinvoke $r3.<android.test.mock._$$Lambda$MockContentProvider$0rINQzbz6pdJpN9ZiKyx_V7xbsE: void <init>(android.test.mock.MockContentProvider,android.net.Uri,android.os.RemoteCallback)>(r0, r1, r2);

        interfaceinvoke $r4.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r3);

        return;
    }

    public android.net.Uri insert(android.net.Uri, android.content.ContentValues)
    {
        android.test.mock.MockContentProvider r0;
        android.net.Uri r1;
        android.content.ContentValues r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockContentProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: android.content.ContentValues;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("unimplemented mock method");

        throw $r3;
    }

    public void lambda$canonicalizeAsync$1$MockContentProvider(android.net.Uri, android.os.RemoteCallback)
    {
        android.test.mock.MockContentProvider r0;
        android.net.Uri r1, $r5;
        android.os.RemoteCallback r2;
        android.os.Bundle $r4;

        r0 := @this: android.test.mock.MockContentProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: android.os.RemoteCallback;

        $r4 = new android.os.Bundle;

        specialinvoke $r4.<android.os.Bundle: void <init>()>();

        $r5 = virtualinvoke r0.<android.test.mock.MockContentProvider: android.net.Uri canonicalize(android.net.Uri)>(r1);

        virtualinvoke $r4.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("result", $r5);

        virtualinvoke r2.<android.os.RemoteCallback: void sendResult(android.os.Bundle)>($r4);

        return;
    }

    public void lambda$getTypeAsync$0$MockContentProvider(android.net.Uri, android.os.RemoteCallback)
    {
        android.test.mock.MockContentProvider r0;
        android.net.Uri r1;
        android.os.RemoteCallback r2;
        android.os.Bundle $r4;
        java.lang.String $r5;

        r0 := @this: android.test.mock.MockContentProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: android.os.RemoteCallback;

        $r4 = new android.os.Bundle;

        specialinvoke $r4.<android.os.Bundle: void <init>()>();

        $r5 = virtualinvoke r0.<android.test.mock.MockContentProvider: java.lang.String getType(android.net.Uri)>(r1);

        virtualinvoke $r4.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("result", $r5);

        virtualinvoke r2.<android.os.RemoteCallback: void sendResult(android.os.Bundle)>($r4);

        return;
    }

    public boolean onCreate()
    {
        android.test.mock.MockContentProvider r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockContentProvider;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("unimplemented mock method");

        throw $r1;
    }

    public android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri, java.lang.String, android.os.Bundle)
    {
        android.test.mock.MockContentProvider r0;
        android.net.Uri r1;
        java.lang.String r2;
        android.os.Bundle r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.test.mock.MockContentProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Bundle;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("unimplemented mock method call");

        throw $r4;
    }

    public android.database.Cursor query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String)
    {
        android.test.mock.MockContentProvider r0;
        android.net.Uri r1;
        java.lang.String[] r2, r4;
        java.lang.String r3, r5;
        java.lang.UnsupportedOperationException $r6;

        r0 := @this: android.test.mock.MockContentProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String[];

        r5 := @parameter4: java.lang.String;

        $r6 = new java.lang.UnsupportedOperationException;

        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("unimplemented mock method");

        throw $r6;
    }

    public boolean refresh(android.net.Uri, android.os.Bundle)
    {
        android.test.mock.MockContentProvider r0;
        android.net.Uri r1;
        android.os.Bundle r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockContentProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: android.os.Bundle;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("unimplemented mock method call");

        throw $r3;
    }

    public int update(android.net.Uri, android.content.ContentValues, java.lang.String, java.lang.String[])
    {
        android.test.mock.MockContentProvider r0;
        android.net.Uri r1;
        android.content.ContentValues r2;
        java.lang.String r3;
        java.lang.String[] r4;
        java.lang.UnsupportedOperationException $r5;

        r0 := @this: android.test.mock.MockContentProvider;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: android.content.ContentValues;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String[];

        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("unimplemented mock method");

        throw $r5;
    }
}
