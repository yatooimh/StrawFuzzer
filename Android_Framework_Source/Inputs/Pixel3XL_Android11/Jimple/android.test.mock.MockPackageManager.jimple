public class android.test.mock.MockPackageManager extends android.content.pm.PackageManager
{

    public void <init>()
    {
        android.test.mock.MockPackageManager r0;

        r0 := @this: android.test.mock.MockPackageManager;

        specialinvoke r0.<android.content.pm.PackageManager: void <init>()>();

        return;
    }

    public void addCrossProfileIntentFilter(android.content.IntentFilter, int, int, int)
    {
        android.test.mock.MockPackageManager r0;
        android.content.IntentFilter r1;
        int i0, i1, i2;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.IntentFilter;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void addOnPermissionsChangeListener(android.content.pm.PackageManager$OnPermissionsChangedListener)
    {
        android.test.mock.MockPackageManager r0;
        android.content.pm.PackageManager$OnPermissionsChangedListener r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.pm.PackageManager$OnPermissionsChangedListener;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void addPackageToPreferred(java.lang.String)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public boolean addPermission(android.content.pm.PermissionInfo)
    {
        android.test.mock.MockPackageManager r0;
        android.content.pm.PermissionInfo r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.pm.PermissionInfo;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public boolean addPermissionAsync(android.content.pm.PermissionInfo)
    {
        android.test.mock.MockPackageManager r0;
        android.content.pm.PermissionInfo r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.pm.PermissionInfo;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void addPreferredActivity(android.content.IntentFilter, int, android.content.ComponentName[], android.content.ComponentName)
    {
        android.test.mock.MockPackageManager r0;
        android.content.IntentFilter r1;
        int i0;
        android.content.ComponentName[] r2;
        android.content.ComponentName r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.IntentFilter;

        i0 := @parameter1: int;

        r2 := @parameter2: android.content.ComponentName[];

        r3 := @parameter3: android.content.ComponentName;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r4;
    }

    public boolean addWhitelistedRestrictedPermission(java.lang.String, java.lang.String, int)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1, r2;
        int i0;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public boolean arePermissionsIndividuallyControlled()
    {
        android.test.mock.MockPackageManager r0;

        r0 := @this: android.test.mock.MockPackageManager;

        return 0;
    }

    public boolean canRequestPackageInstalls()
    {
        android.test.mock.MockPackageManager r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockPackageManager;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.lang.String[] canonicalToCurrentPackageNames(java.lang.String[])
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String[] r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String[];

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public int checkPermission(java.lang.String, java.lang.String)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1, r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public int checkSignatures(int, int)
    {
        android.test.mock.MockPackageManager r0;
        int i0, i1;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockPackageManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public int checkSignatures(java.lang.String, java.lang.String)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1, r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void clearApplicationUserData(java.lang.String, android.content.pm.IPackageDataObserver)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        android.content.pm.IPackageDataObserver r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.content.pm.IPackageDataObserver;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void clearCrossProfileIntentFilters(int)
    {
        android.test.mock.MockPackageManager r0;
        int i0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockPackageManager;

        i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public void clearInstantAppCookie()
    {
        android.test.mock.MockPackageManager r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockPackageManager;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public void clearPackagePreferredActivities(java.lang.String)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.lang.String[] currentToCanonicalPackageNames(java.lang.String[])
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String[] r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String[];

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void deleteApplicationCacheFiles(java.lang.String, android.content.pm.IPackageDataObserver)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        android.content.pm.IPackageDataObserver r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.content.pm.IPackageDataObserver;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void deleteApplicationCacheFilesAsUser(java.lang.String, int, android.content.pm.IPackageDataObserver)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        int i0;
        android.content.pm.IPackageDataObserver r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.content.pm.IPackageDataObserver;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void deletePackage(java.lang.String, android.content.pm.IPackageDeleteObserver, int)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        android.content.pm.IPackageDeleteObserver r2;
        int i0;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.content.pm.IPackageDeleteObserver;

        i0 := @parameter2: int;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void deletePackageAsUser(java.lang.String, android.content.pm.IPackageDeleteObserver, int, int)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        android.content.pm.IPackageDeleteObserver r2;
        int i0, i1;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.content.pm.IPackageDeleteObserver;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void extendVerificationTimeout(int, int, long)
    {
        android.test.mock.MockPackageManager r0;
        int i0, i1;
        long l2;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockPackageManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        l2 := @parameter2: long;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public void flushPackageRestrictionsAsUser(int)
    {
        android.test.mock.MockPackageManager r0;
        int i0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockPackageManager;

        i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public void freeStorage(java.lang.String, long, android.content.IntentSender)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        long l0;
        android.content.IntentSender r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        r2 := @parameter2: android.content.IntentSender;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void freeStorageAndNotify(java.lang.String, long, android.content.pm.IPackageDataObserver)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        long l0;
        android.content.pm.IPackageDataObserver r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        r2 := @parameter2: android.content.pm.IPackageDataObserver;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public android.graphics.drawable.Drawable getActivityBanner(android.content.ComponentName) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager r0;
        android.content.ComponentName r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.ComponentName;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.graphics.drawable.Drawable getActivityBanner(android.content.Intent) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager r0;
        android.content.Intent r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.Intent;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.graphics.drawable.Drawable getActivityIcon(android.content.ComponentName) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager r0;
        android.content.ComponentName r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.ComponentName;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.graphics.drawable.Drawable getActivityIcon(android.content.Intent) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager r0;
        android.content.Intent r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.Intent;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager r0;
        android.content.ComponentName r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.graphics.drawable.Drawable getActivityLogo(android.content.ComponentName) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager r0;
        android.content.ComponentName r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.ComponentName;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.graphics.drawable.Drawable getActivityLogo(android.content.Intent) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager r0;
        android.content.Intent r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.Intent;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.util.List getAllIntentFilters(java.lang.String)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.util.List getAllPermissionGroups(int)
    {
        android.test.mock.MockPackageManager r0;
        int i0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockPackageManager;

        i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public android.graphics.drawable.Drawable getApplicationBanner(android.content.pm.ApplicationInfo)
    {
        android.test.mock.MockPackageManager r0;
        android.content.pm.ApplicationInfo r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.pm.ApplicationInfo;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.graphics.drawable.Drawable getApplicationBanner(java.lang.String) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public int getApplicationEnabledSetting(java.lang.String)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public boolean getApplicationHiddenSettingAsUser(java.lang.String, android.os.UserHandle)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        android.os.UserHandle r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.UserHandle;

        return 0;
    }

    public android.graphics.drawable.Drawable getApplicationIcon(android.content.pm.ApplicationInfo)
    {
        android.test.mock.MockPackageManager r0;
        android.content.pm.ApplicationInfo r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.pm.ApplicationInfo;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.graphics.drawable.Drawable getApplicationIcon(java.lang.String) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.pm.ApplicationInfo getApplicationInfoAsUser(java.lang.String, int, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        int i0, i1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.lang.CharSequence getApplicationLabel(android.content.pm.ApplicationInfo)
    {
        android.test.mock.MockPackageManager r0;
        android.content.pm.ApplicationInfo r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.pm.ApplicationInfo;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.graphics.drawable.Drawable getApplicationLogo(android.content.pm.ApplicationInfo)
    {
        android.test.mock.MockPackageManager r0;
        android.content.pm.ApplicationInfo r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.pm.ApplicationInfo;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.graphics.drawable.Drawable getApplicationLogo(java.lang.String) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.pm.dex.ArtManager getArtManager()
    {
        android.test.mock.MockPackageManager r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockPackageManager;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public android.content.Intent getCarLaunchIntentForPackage(java.lang.String)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.pm.ChangedPackages getChangedPackages(int)
    {
        android.test.mock.MockPackageManager r0;
        int i0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockPackageManager;

        i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public int getComponentEnabledSetting(android.content.ComponentName)
    {
        android.test.mock.MockPackageManager r0;
        android.content.ComponentName r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.ComponentName;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.graphics.drawable.Drawable getDefaultActivityIcon()
    {
        android.test.mock.MockPackageManager r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockPackageManager;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.lang.String getDefaultBrowserPackageName(int)
    {
        android.test.mock.MockPackageManager r0;
        int i0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockPackageManager;

        i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.lang.String getDefaultBrowserPackageNameAsUser(int)
    {
        android.test.mock.MockPackageManager r0;
        int i0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockPackageManager;

        i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public android.graphics.drawable.Drawable getDrawable(java.lang.String, int, android.content.pm.ApplicationInfo)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        int i0;
        android.content.pm.ApplicationInfo r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.content.pm.ApplicationInfo;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public java.lang.CharSequence getHarmfulAppWarning(java.lang.String)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.ComponentName getHomeActivities(java.util.List)
    {
        android.test.mock.MockPackageManager r0;
        java.util.List r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.util.List;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public int getInstallReason(java.lang.String, android.os.UserHandle)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        android.os.UserHandle r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.UserHandle;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public java.util.List getInstalledApplications(int)
    {
        android.test.mock.MockPackageManager r0;
        int i0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockPackageManager;

        i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.util.List getInstalledApplicationsAsUser(int, int)
    {
        android.test.mock.MockPackageManager r0;
        int i0, i1;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockPackageManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.util.List getInstalledPackages(int)
    {
        android.test.mock.MockPackageManager r0;
        int i0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockPackageManager;

        i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.util.List getInstalledPackagesAsUser(int, int)
    {
        android.test.mock.MockPackageManager r0;
        int i0, i1;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockPackageManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.lang.String getInstallerPackageName(java.lang.String)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.lang.String getInstantAppAndroidId(java.lang.String, android.os.UserHandle)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        android.os.UserHandle r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.UserHandle;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public byte[] getInstantAppCookie()
    {
        android.test.mock.MockPackageManager r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockPackageManager;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public int getInstantAppCookieMaxBytes()
    {
        android.test.mock.MockPackageManager r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockPackageManager;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public int getInstantAppCookieMaxSize()
    {
        android.test.mock.MockPackageManager r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockPackageManager;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public android.graphics.drawable.Drawable getInstantAppIcon(java.lang.String)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.ComponentName getInstantAppInstallerComponent()
    {
        android.test.mock.MockPackageManager r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockPackageManager;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public android.content.ComponentName getInstantAppResolverSettingsComponent()
    {
        android.test.mock.MockPackageManager r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockPackageManager;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.util.List getInstantApps()
    {
        android.test.mock.MockPackageManager r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockPackageManager;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager r0;
        android.content.ComponentName r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.util.List getIntentFilterVerifications(java.lang.String)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public int getIntentVerificationStatusAsUser(java.lang.String, int)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.pm.KeySet getKeySetByAlias(java.lang.String, java.lang.String)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1, r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public android.content.Intent getLaunchIntentForPackage(java.lang.String)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.Intent getLeanbackLaunchIntentForPackage(java.lang.String)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public int getMoveStatus(int)
    {
        android.test.mock.MockPackageManager r0;
        int i0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockPackageManager;

        i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.lang.String getNameForUid(int)
    {
        android.test.mock.MockPackageManager r0;
        int i0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockPackageManager;

        i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.lang.String[] getNamesForUids(int[])
    {
        android.test.mock.MockPackageManager r0;
        int[] r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: int[];

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.pm.PackageInfo getPackageArchiveInfo(java.lang.String, int)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.util.List getPackageCandidateVolumes(android.content.pm.ApplicationInfo)
    {
        android.test.mock.MockPackageManager r0;
        android.content.pm.ApplicationInfo r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.pm.ApplicationInfo;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.os.storage.VolumeInfo getPackageCurrentVolume(android.content.pm.ApplicationInfo)
    {
        android.test.mock.MockPackageManager r0;
        android.content.pm.ApplicationInfo r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.pm.ApplicationInfo;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public int[] getPackageGids(java.lang.String) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public int[] getPackageGids(java.lang.String, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.pm.PackageInfo getPackageInfo(android.content.pm.VersionedPackage, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager r0;
        android.content.pm.VersionedPackage r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.pm.VersionedPackage;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.pm.PackageInfo getPackageInfo(java.lang.String, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.pm.PackageInfo getPackageInfoAsUser(java.lang.String, int, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        int i0, i1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.pm.PackageInstaller getPackageInstaller()
    {
        android.test.mock.MockPackageManager r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockPackageManager;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public void getPackageSizeInfoAsUser(java.lang.String, int, android.content.pm.IPackageStatsObserver)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        int i0;
        android.content.pm.IPackageStatsObserver r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.content.pm.IPackageStatsObserver;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public int getPackageUid(java.lang.String, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public int getPackageUidAsUser(java.lang.String, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public int getPackageUidAsUser(java.lang.String, int, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        int i0, i1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.lang.String[] getPackagesForUid(int)
    {
        android.test.mock.MockPackageManager r0;
        int i0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockPackageManager;

        i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.util.List getPackagesHoldingPermissions(java.lang.String[], int)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String[] r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String[];

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.lang.String getPermissionControllerPackageName()
    {
        android.test.mock.MockPackageManager r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockPackageManager;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public int getPermissionFlags(java.lang.String, java.lang.String, android.os.UserHandle)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1, r2;
        android.os.UserHandle r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.UserHandle;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r4;
    }

    public android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.pm.PermissionInfo getPermissionInfo(java.lang.String, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public int getPreferredActivities(java.util.List, java.util.List, java.lang.String)
    {
        android.test.mock.MockPackageManager r0;
        java.util.List r1, r2;
        java.lang.String r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: java.lang.String;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r4;
    }

    public java.util.List getPreferredPackages(int)
    {
        android.test.mock.MockPackageManager r0;
        int i0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockPackageManager;

        i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.util.List getPrimaryStorageCandidateVolumes()
    {
        android.test.mock.MockPackageManager r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockPackageManager;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public android.os.storage.VolumeInfo getPrimaryStorageCurrentVolume()
    {
        android.test.mock.MockPackageManager r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockPackageManager;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager r0;
        android.content.ComponentName r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager r0;
        android.content.ComponentName r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.res.Resources getResourcesForActivity(android.content.ComponentName) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager r0;
        android.content.ComponentName r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.ComponentName;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.res.Resources getResourcesForApplication(android.content.pm.ApplicationInfo)
    {
        android.test.mock.MockPackageManager r0;
        android.content.pm.ApplicationInfo r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.pm.ApplicationInfo;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.res.Resources getResourcesForApplication(java.lang.String) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.res.Resources getResourcesForApplicationAsUser(java.lang.String, int)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager r0;
        android.content.ComponentName r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.lang.String getServicesSystemSharedLibraryPackageName()
    {
        android.test.mock.MockPackageManager r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockPackageManager;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.util.List getSharedLibraries(int)
    {
        android.test.mock.MockPackageManager r0;
        int i0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockPackageManager;

        i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.util.List getSharedLibrariesAsUser(int, int)
    {
        android.test.mock.MockPackageManager r0;
        int i0, i1;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockPackageManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.lang.String getSharedSystemSharedLibraryPackageName()
    {
        android.test.mock.MockPackageManager r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockPackageManager;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public android.content.pm.KeySet getSigningKeySet(java.lang.String)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.pm.FeatureInfo[] getSystemAvailableFeatures()
    {
        android.test.mock.MockPackageManager r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockPackageManager;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.lang.String[] getSystemSharedLibraryNames()
    {
        android.test.mock.MockPackageManager r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockPackageManager;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.lang.CharSequence getText(java.lang.String, int, android.content.pm.ApplicationInfo)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        int i0;
        android.content.pm.ApplicationInfo r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.content.pm.ApplicationInfo;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public int getUidForSharedUser(java.lang.String)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.graphics.drawable.Drawable getUserBadgeForDensity(android.os.UserHandle, int)
    {
        android.test.mock.MockPackageManager r0;
        android.os.UserHandle r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.os.UserHandle;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.graphics.drawable.Drawable getUserBadgeForDensityNoBackground(android.os.UserHandle, int)
    {
        android.test.mock.MockPackageManager r0;
        android.os.UserHandle r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.os.UserHandle;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.graphics.drawable.Drawable getUserBadgedDrawableForDensity(android.graphics.drawable.Drawable, android.os.UserHandle, android.graphics.Rect, int)
    {
        android.test.mock.MockPackageManager r0;
        android.graphics.drawable.Drawable r1;
        android.os.UserHandle r2;
        android.graphics.Rect r3;
        int i0;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        r2 := @parameter1: android.os.UserHandle;

        r3 := @parameter2: android.graphics.Rect;

        i0 := @parameter3: int;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r4;
    }

    public android.graphics.drawable.Drawable getUserBadgedIcon(android.graphics.drawable.Drawable, android.os.UserHandle)
    {
        android.test.mock.MockPackageManager r0;
        android.graphics.drawable.Drawable r1;
        android.os.UserHandle r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        r2 := @parameter1: android.os.UserHandle;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public java.lang.CharSequence getUserBadgedLabel(java.lang.CharSequence, android.os.UserHandle)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.CharSequence r1;
        android.os.UserHandle r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: android.os.UserHandle;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentity()
    {
        android.test.mock.MockPackageManager r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockPackageManager;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.util.Set getWhitelistedRestrictedPermissions(java.lang.String, int)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.res.XmlResourceParser getXml(java.lang.String, int, android.content.pm.ApplicationInfo)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        int i0;
        android.content.pm.ApplicationInfo r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.content.pm.ApplicationInfo;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void grantRuntimePermission(java.lang.String, java.lang.String, android.os.UserHandle)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1, r2;
        android.os.UserHandle r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.UserHandle;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r4;
    }

    public boolean hasSigningCertificate(int, byte[], int)
    {
        android.test.mock.MockPackageManager r0;
        int i0, i1;
        byte[] r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        i1 := @parameter2: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public boolean hasSigningCertificate(java.lang.String, byte[], int)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        byte[] r2;
        int i0;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        i0 := @parameter2: int;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public boolean hasSystemFeature(java.lang.String)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public boolean hasSystemFeature(java.lang.String, int)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public int installExistingPackage(java.lang.String) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public int installExistingPackage(java.lang.String, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public int installExistingPackageAsUser(java.lang.String, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public boolean isDeviceUpgrading()
    {
        android.test.mock.MockPackageManager r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockPackageManager;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public boolean isInstantApp()
    {
        android.test.mock.MockPackageManager r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockPackageManager;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public boolean isInstantApp(java.lang.String)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public boolean isPackageAvailable(java.lang.String)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public boolean isPackageSuspendedForUser(java.lang.String, int)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public boolean isPermissionRevokedByPolicy(java.lang.String, java.lang.String)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1, r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public boolean isSafeMode()
    {
        android.test.mock.MockPackageManager r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockPackageManager;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public boolean isSignedBy(java.lang.String, android.content.pm.KeySet)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        android.content.pm.KeySet r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.content.pm.KeySet;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public boolean isSignedByExactly(java.lang.String, android.content.pm.KeySet)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        android.content.pm.KeySet r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.content.pm.KeySet;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public boolean isUpgrade()
    {
        android.test.mock.MockPackageManager r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockPackageManager;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public boolean isWirelessConsentModeEnabled()
    {
        android.test.mock.MockPackageManager r0;

        r0 := @this: android.test.mock.MockPackageManager;

        return 0;
    }

    public android.graphics.drawable.Drawable loadItemIcon(android.content.pm.PackageItemInfo, android.content.pm.ApplicationInfo)
    {
        android.test.mock.MockPackageManager r0;
        android.content.pm.PackageItemInfo r1;
        android.content.pm.ApplicationInfo r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.pm.PackageItemInfo;

        r2 := @parameter1: android.content.pm.ApplicationInfo;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public android.graphics.drawable.Drawable loadUnbadgedItemIcon(android.content.pm.PackageItemInfo, android.content.pm.ApplicationInfo)
    {
        android.test.mock.MockPackageManager r0;
        android.content.pm.PackageItemInfo r1;
        android.content.pm.ApplicationInfo r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.pm.PackageItemInfo;

        r2 := @parameter1: android.content.pm.ApplicationInfo;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public int movePackage(java.lang.String, android.os.storage.VolumeInfo)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        android.os.storage.VolumeInfo r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.storage.VolumeInfo;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public int movePrimaryStorage(android.os.storage.VolumeInfo)
    {
        android.test.mock.MockPackageManager r0;
        android.os.storage.VolumeInfo r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.os.storage.VolumeInfo;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.util.List queryBroadcastReceivers(android.content.Intent, int)
    {
        android.test.mock.MockPackageManager r0;
        android.content.Intent r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.Intent;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.util.List queryBroadcastReceiversAsUser(android.content.Intent, int, int)
    {
        android.test.mock.MockPackageManager r0;
        android.content.Intent r1;
        int i0, i1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.Intent;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.util.List queryContentProviders(java.lang.String, int, int)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        int i0, i1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.util.List queryInstrumentation(java.lang.String, int)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.util.List queryIntentActivities(android.content.Intent, int)
    {
        android.test.mock.MockPackageManager r0;
        android.content.Intent r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.Intent;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.util.List queryIntentActivitiesAsUser(android.content.Intent, int, int)
    {
        android.test.mock.MockPackageManager r0;
        android.content.Intent r1;
        int i0, i1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.Intent;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.util.List queryIntentActivityOptions(android.content.ComponentName, android.content.Intent[], android.content.Intent, int)
    {
        android.test.mock.MockPackageManager r0;
        android.content.ComponentName r1;
        android.content.Intent[] r2;
        android.content.Intent r3;
        int i0;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.content.Intent[];

        r3 := @parameter2: android.content.Intent;

        i0 := @parameter3: int;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r4;
    }

    public java.util.List queryIntentContentProviders(android.content.Intent, int)
    {
        android.test.mock.MockPackageManager r0;
        android.content.Intent r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.Intent;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.util.List queryIntentContentProvidersAsUser(android.content.Intent, int, int)
    {
        android.test.mock.MockPackageManager r0;
        android.content.Intent r1;
        int i0, i1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.Intent;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.util.List queryIntentServices(android.content.Intent, int)
    {
        android.test.mock.MockPackageManager r0;
        android.content.Intent r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.Intent;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.util.List queryIntentServicesAsUser(android.content.Intent, int, int)
    {
        android.test.mock.MockPackageManager r0;
        android.content.Intent r1;
        int i0, i1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.Intent;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.util.List queryPermissionsByGroup(java.lang.String, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void registerDexModule(java.lang.String, android.content.pm.PackageManager$DexModuleRegisterCallback)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        android.content.pm.PackageManager$DexModuleRegisterCallback r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.content.pm.PackageManager$DexModuleRegisterCallback;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void registerMoveCallback(android.content.pm.PackageManager$MoveCallback, android.os.Handler)
    {
        android.test.mock.MockPackageManager r0;
        android.content.pm.PackageManager$MoveCallback r1;
        android.os.Handler r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.pm.PackageManager$MoveCallback;

        r2 := @parameter1: android.os.Handler;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void removeOnPermissionsChangeListener(android.content.pm.PackageManager$OnPermissionsChangedListener)
    {
        android.test.mock.MockPackageManager r0;
        android.content.pm.PackageManager$OnPermissionsChangedListener r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.pm.PackageManager$OnPermissionsChangedListener;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void removePackageFromPreferred(java.lang.String)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void removePermission(java.lang.String)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public boolean removeWhitelistedRestrictedPermission(java.lang.String, java.lang.String, int)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1, r2;
        int i0;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void replacePreferredActivity(android.content.IntentFilter, int, android.content.ComponentName[], android.content.ComponentName)
    {
        android.test.mock.MockPackageManager r0;
        android.content.IntentFilter r1;
        int i0;
        android.content.ComponentName[] r2;
        android.content.ComponentName r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.IntentFilter;

        i0 := @parameter1: int;

        r2 := @parameter2: android.content.ComponentName[];

        r3 := @parameter3: android.content.ComponentName;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r4;
    }

    public android.content.pm.ResolveInfo resolveActivity(android.content.Intent, int)
    {
        android.test.mock.MockPackageManager r0;
        android.content.Intent r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.Intent;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.pm.ResolveInfo resolveActivityAsUser(android.content.Intent, int, int)
    {
        android.test.mock.MockPackageManager r0;
        android.content.Intent r1;
        int i0, i1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.Intent;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.pm.ProviderInfo resolveContentProvider(java.lang.String, int)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.pm.ProviderInfo resolveContentProviderAsUser(java.lang.String, int, int)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        int i0, i1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.pm.ResolveInfo resolveService(android.content.Intent, int)
    {
        android.test.mock.MockPackageManager r0;
        android.content.Intent r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.Intent;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.pm.ResolveInfo resolveServiceAsUser(android.content.Intent, int, int)
    {
        android.test.mock.MockPackageManager r0;
        android.content.Intent r1;
        int i0, i1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.Intent;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void revokeRuntimePermission(java.lang.String, java.lang.String, android.os.UserHandle)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1, r2;
        android.os.UserHandle r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.UserHandle;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r4;
    }

    public void setApplicationCategoryHint(java.lang.String, int)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void setApplicationEnabledSetting(java.lang.String, int, int)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        int i0, i1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public boolean setApplicationHiddenSettingAsUser(java.lang.String, boolean, android.os.UserHandle)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        boolean z0;
        android.os.UserHandle r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 := @parameter2: android.os.UserHandle;

        return 0;
    }

    public void setComponentEnabledSetting(android.content.ComponentName, int, int)
    {
        android.test.mock.MockPackageManager r0;
        android.content.ComponentName r1;
        int i0, i1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public boolean setDefaultBrowserPackageName(java.lang.String, int)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public boolean setDefaultBrowserPackageNameAsUser(java.lang.String, int)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        int i0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void setHarmfulAppWarning(java.lang.String, java.lang.CharSequence)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        java.lang.CharSequence r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.CharSequence;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void setInstallerPackageName(java.lang.String, java.lang.String)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1, r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public boolean setInstantAppCookie(byte[])
    {
        android.test.mock.MockPackageManager r0;
        byte[] r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: byte[];

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.lang.String[] setPackagesSuspended(java.lang.String[], boolean, android.os.PersistableBundle, android.os.PersistableBundle, java.lang.String)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String[] r1;
        boolean z0;
        android.os.PersistableBundle r2, r3;
        java.lang.String r4;
        java.lang.UnsupportedOperationException $r5;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String[];

        z0 := @parameter1: boolean;

        r2 := @parameter2: android.os.PersistableBundle;

        r3 := @parameter3: android.os.PersistableBundle;

        r4 := @parameter4: java.lang.String;

        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r5;
    }

    public void setUpdateAvailable(java.lang.String, boolean)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        boolean z0;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public boolean shouldShowRequestPermissionRationale(java.lang.String)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void unregisterMoveCallback(android.content.pm.PackageManager$MoveCallback)
    {
        android.test.mock.MockPackageManager r0;
        android.content.pm.PackageManager$MoveCallback r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: android.content.pm.PackageManager$MoveCallback;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void updateInstantAppCookie(byte[])
    {
        android.test.mock.MockPackageManager r0;
        byte[] r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: byte[];

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public boolean updateIntentVerificationStatusAsUser(java.lang.String, int, int)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1;
        int i0, i1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void updatePermissionFlags(java.lang.String, java.lang.String, int, int, android.os.UserHandle)
    {
        android.test.mock.MockPackageManager r0;
        java.lang.String r1, r2;
        int i0, i1;
        android.os.UserHandle r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: android.test.mock.MockPackageManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r3 := @parameter4: android.os.UserHandle;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r4;
    }

    public void verifyIntentFilter(int, int, java.util.List)
    {
        android.test.mock.MockPackageManager r0;
        int i0, i1;
        java.util.List r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.test.mock.MockPackageManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.util.List;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void verifyPendingInstall(int, int)
    {
        android.test.mock.MockPackageManager r0;
        int i0, i1;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.test.mock.MockPackageManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }
}
