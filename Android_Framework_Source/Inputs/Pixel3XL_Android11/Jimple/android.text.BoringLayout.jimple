public class android.text.BoringLayout extends android.text.Layout implements android.text.TextUtils$EllipsizeCallback
{
    int mBottom;
    private int mBottomPadding;
    int mDesc;
    private java.lang.String mDirect;
    private int mEllipsizedCount;
    private int mEllipsizedStart;
    private int mEllipsizedWidth;
    private float mMax;
    private android.graphics.Paint mPaint;
    private int mTopPadding;

    public void <init>(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout$Alignment, float, float, android.text.BoringLayout$Metrics, boolean)
    {
        android.text.BoringLayout r0;
        java.lang.CharSequence r1;
        android.text.TextPaint r2;
        int i0;
        android.text.Layout$Alignment r3;
        float f0, f1;
        android.text.BoringLayout$Metrics r4;
        boolean z0;

        r0 := @this: android.text.BoringLayout;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: android.text.TextPaint;

        i0 := @parameter2: int;

        r3 := @parameter3: android.text.Layout$Alignment;

        f0 := @parameter4: float;

        f1 := @parameter5: float;

        r4 := @parameter6: android.text.BoringLayout$Metrics;

        z0 := @parameter7: boolean;

        specialinvoke r0.<android.text.Layout: void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float)>(r1, r2, i0, r3, f0, f1);

        r0.<android.text.BoringLayout: int mEllipsizedWidth> = i0;

        r0.<android.text.BoringLayout: int mEllipsizedStart> = 0;

        r0.<android.text.BoringLayout: int mEllipsizedCount> = 0;

        virtualinvoke r0.<android.text.BoringLayout: void init(java.lang.CharSequence,android.text.TextPaint,android.text.Layout$Alignment,android.text.BoringLayout$Metrics,boolean,boolean)>(r1, r2, r3, r4, z0, 1);

        return;
    }

    public void <init>(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout$Alignment, float, float, android.text.BoringLayout$Metrics, boolean, android.text.TextUtils$TruncateAt, int)
    {
        android.text.BoringLayout r0;
        java.lang.CharSequence r1, $r7, $r8;
        android.text.TextPaint r2;
        int i0, i1;
        android.text.Layout$Alignment r3;
        float f0, f1, $f2;
        android.text.BoringLayout$Metrics r4;
        boolean z0, z1;
        android.text.TextUtils$TruncateAt r5, $r6;

        r0 := @this: android.text.BoringLayout;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: android.text.TextPaint;

        i0 := @parameter2: int;

        r3 := @parameter3: android.text.Layout$Alignment;

        f0 := @parameter4: float;

        f1 := @parameter5: float;

        r4 := @parameter6: android.text.BoringLayout$Metrics;

        z0 := @parameter7: boolean;

        r5 := @parameter8: android.text.TextUtils$TruncateAt;

        i1 := @parameter9: int;

        specialinvoke r0.<android.text.Layout: void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float)>(r1, r2, i0, r3, f0, f1);

        if r5 == null goto label2;

        $r6 = <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt MARQUEE>;

        if r5 != $r6 goto label1;

        goto label2;

     label1:
        $f2 = (float) i1;

        $r7 = staticinvoke <android.text.TextUtils: java.lang.CharSequence ellipsize(java.lang.CharSequence,android.text.TextPaint,float,android.text.TextUtils$TruncateAt,boolean,android.text.TextUtils$EllipsizeCallback)>(r1, r2, $f2, r5, 1, r0);

        virtualinvoke r0.<android.text.BoringLayout: void replaceWith(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float)>($r7, r2, i0, r3, f0, f1);

        r0.<android.text.BoringLayout: int mEllipsizedWidth> = i1;

        z1 = 0;

        goto label3;

     label2:
        r0.<android.text.BoringLayout: int mEllipsizedWidth> = i0;

        r0.<android.text.BoringLayout: int mEllipsizedStart> = 0;

        r0.<android.text.BoringLayout: int mEllipsizedCount> = 0;

        z1 = 1;

     label3:
        $r8 = virtualinvoke r0.<android.text.BoringLayout: java.lang.CharSequence getText()>();

        virtualinvoke r0.<android.text.BoringLayout: void init(java.lang.CharSequence,android.text.TextPaint,android.text.Layout$Alignment,android.text.BoringLayout$Metrics,boolean,boolean)>($r8, r2, r3, r4, z0, z1);

        return;
    }

    private static boolean hasAnyInterestingChars(java.lang.CharSequence, int)
    {
        int i0, i1, $i3, $i4, i5, i6;
        char[] r0;
        char c2;
        boolean z0;
        java.lang.Throwable $r1;
        java.lang.CharSequence r2;

        r2 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        r0 = staticinvoke <android.text.TextUtils: char[] obtain(int)>(500);

        i5 = 0;

     label01:
        if i5 >= i0 goto label11;

     label02:
        $i3 = i5 + 500;

        i1 = staticinvoke <java.lang.Math: int min(int,int)>($i3, i0);

        staticinvoke <android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>(r2, i5, i1, r0, 0);

     label03:
        i6 = 0;

     label04:
        $i4 = i1 - i5;

        if i6 >= $i4 goto label09;

        c2 = r0[i6];

        if c2 == 10 goto label08;

        if c2 == 9 goto label08;

     label05:
        z0 = staticinvoke <android.text.TextUtils: boolean couldAffectRtl(char)>(c2);

     label06:
        if z0 == 0 goto label07;

        goto label08;

     label07:
        i6 = i6 + 1;

        goto label04;

     label08:
        staticinvoke <android.text.TextUtils: void recycle(char[])>(r0);

        return 1;

     label09:
        i5 = i5 + 500;

        goto label01;

     label10:
        $r1 := @caughtexception;

        staticinvoke <android.text.TextUtils: void recycle(char[])>(r0);

        throw $r1;

     label11:
        staticinvoke <android.text.TextUtils: void recycle(char[])>(r0);

        return 0;

        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
    }

    public static android.text.BoringLayout$Metrics isBoring(java.lang.CharSequence, android.text.TextPaint)
    {
        java.lang.CharSequence r0;
        android.text.TextPaint r1;
        android.text.TextDirectionHeuristic $r2;
        android.text.BoringLayout$Metrics $r3;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: android.text.TextPaint;

        $r2 = <android.text.TextDirectionHeuristics: android.text.TextDirectionHeuristic FIRSTSTRONG_LTR>;

        $r3 = staticinvoke <android.text.BoringLayout: android.text.BoringLayout$Metrics isBoring(java.lang.CharSequence,android.text.TextPaint,android.text.TextDirectionHeuristic,android.text.BoringLayout$Metrics)>(r0, r1, $r2, null);

        return $r3;
    }

    public static android.text.BoringLayout$Metrics isBoring(java.lang.CharSequence, android.text.TextPaint, android.text.BoringLayout$Metrics)
    {
        java.lang.CharSequence r0;
        android.text.TextPaint r1;
        android.text.BoringLayout$Metrics r2, $r4;
        android.text.TextDirectionHeuristic $r3;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: android.text.TextPaint;

        r2 := @parameter2: android.text.BoringLayout$Metrics;

        $r3 = <android.text.TextDirectionHeuristics: android.text.TextDirectionHeuristic FIRSTSTRONG_LTR>;

        $r4 = staticinvoke <android.text.BoringLayout: android.text.BoringLayout$Metrics isBoring(java.lang.CharSequence,android.text.TextPaint,android.text.TextDirectionHeuristic,android.text.BoringLayout$Metrics)>(r0, r1, $r3, r2);

        return $r4;
    }

    public static android.text.BoringLayout$Metrics isBoring(java.lang.CharSequence, android.text.TextPaint, android.text.TextDirectionHeuristic, android.text.BoringLayout$Metrics)
    {
        java.lang.CharSequence r0;
        android.text.TextPaint r1;
        int i0, $i1, $i2;
        boolean $z0, $z1, $z2;
        android.text.Layout$Directions $r2;
        float $f0;
        double $d0, $d1;
        android.text.BoringLayout$Metrics $r4, r8, r9;
        android.text.Spanned $r5;
        java.lang.Object[] $r6;
        android.text.TextDirectionHeuristic r7;
        android.text.TextLine r10;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: android.text.TextPaint;

        r7 := @parameter2: android.text.TextDirectionHeuristic;

        r8 := @parameter3: android.text.BoringLayout$Metrics;

        i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $z0 = staticinvoke <android.text.BoringLayout: boolean hasAnyInterestingChars(java.lang.CharSequence,int)>(r0, i0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        if r7 == null goto label2;

        $z2 = interfaceinvoke r7.<android.text.TextDirectionHeuristic: boolean isRtl(java.lang.CharSequence,int,int)>(r0, 0, i0);

        if $z2 == 0 goto label2;

        return null;

     label2:
        $z1 = r0 instanceof android.text.Spanned;

        if $z1 == 0 goto label3;

        $r5 = (android.text.Spanned) r0;

        $r6 = interfaceinvoke $r5.<android.text.Spanned: java.lang.Object[] getSpans(int,int,java.lang.Class)>(0, i0, class "Landroid/text/style/ParagraphStyle;");

        $i2 = lengthof $r6;

        if $i2 <= 0 goto label3;

        return null;

     label3:
        if r8 != null goto label4;

        $r4 = new android.text.BoringLayout$Metrics;

        specialinvoke $r4.<android.text.BoringLayout$Metrics: void <init>()>();

        r9 = $r4;

        goto label5;

     label4:
        staticinvoke <android.text.BoringLayout$Metrics: void access$000(android.text.BoringLayout$Metrics)>(r8);

        r9 = r8;

     label5:
        r10 = staticinvoke <android.text.TextLine: android.text.TextLine obtain()>();

        $r2 = <android.text.Layout: android.text.Layout$Directions DIRS_ALL_LEFT_TO_RIGHT>;

        virtualinvoke r10.<android.text.TextLine: void set(android.text.TextPaint,java.lang.CharSequence,int,int,int,android.text.Layout$Directions,boolean,android.text.Layout$TabStops,int,int)>(r1, r0, 0, i0, 1, $r2, 0, null, 0, 0);

        $f0 = virtualinvoke r10.<android.text.TextLine: float metrics(android.graphics.Paint$FontMetricsInt)>(r9);

        $d0 = (double) $f0;

        $d1 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        $i1 = (int) $d1;

        r9.<android.text.BoringLayout$Metrics: int width> = $i1;

        staticinvoke <android.text.TextLine: android.text.TextLine recycle(android.text.TextLine)>(r10);

        return r9;
    }

    public static android.text.BoringLayout make(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout$Alignment, float, float, android.text.BoringLayout$Metrics, boolean)
    {
        java.lang.CharSequence r0;
        android.text.TextPaint r1;
        int i0;
        android.text.Layout$Alignment r2;
        float f0, f1;
        android.text.BoringLayout$Metrics r3;
        boolean z0;
        android.text.BoringLayout $r4;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: android.text.TextPaint;

        i0 := @parameter2: int;

        r2 := @parameter3: android.text.Layout$Alignment;

        f0 := @parameter4: float;

        f1 := @parameter5: float;

        r3 := @parameter6: android.text.BoringLayout$Metrics;

        z0 := @parameter7: boolean;

        $r4 = new android.text.BoringLayout;

        specialinvoke $r4.<android.text.BoringLayout: void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,android.text.BoringLayout$Metrics,boolean)>(r0, r1, i0, r2, f0, f1, r3, z0);

        return $r4;
    }

    public static android.text.BoringLayout make(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout$Alignment, float, float, android.text.BoringLayout$Metrics, boolean, android.text.TextUtils$TruncateAt, int)
    {
        java.lang.CharSequence r0;
        android.text.TextPaint r1;
        int i0, i1;
        android.text.Layout$Alignment r2;
        float f0, f1;
        android.text.BoringLayout$Metrics r3;
        boolean z0;
        android.text.TextUtils$TruncateAt r4;
        android.text.BoringLayout $r5;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: android.text.TextPaint;

        i0 := @parameter2: int;

        r2 := @parameter3: android.text.Layout$Alignment;

        f0 := @parameter4: float;

        f1 := @parameter5: float;

        r3 := @parameter6: android.text.BoringLayout$Metrics;

        z0 := @parameter7: boolean;

        r4 := @parameter8: android.text.TextUtils$TruncateAt;

        i1 := @parameter9: int;

        $r5 = new android.text.BoringLayout;

        specialinvoke $r5.<android.text.BoringLayout: void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,android.text.BoringLayout$Metrics,boolean,android.text.TextUtils$TruncateAt,int)>(r0, r1, i0, r2, f0, f1, r3, z0, r4, i1);

        return $r5;
    }

    public void draw(android.graphics.Canvas, android.graphics.Path, android.graphics.Paint, int)
    {
        android.text.BoringLayout r0;
        android.graphics.Canvas r1;
        android.graphics.Path r2;
        android.graphics.Paint r3, $r5;
        int i0, $i1, $i2, $i3;
        java.lang.String r4;
        float $f0;

        r0 := @this: android.text.BoringLayout;

        r1 := @parameter0: android.graphics.Canvas;

        r2 := @parameter1: android.graphics.Path;

        r3 := @parameter2: android.graphics.Paint;

        i0 := @parameter3: int;

        r4 = r0.<android.text.BoringLayout: java.lang.String mDirect>;

        if r4 == null goto label1;

        if r2 != null goto label1;

        $i2 = r0.<android.text.BoringLayout: int mBottom>;

        $i1 = r0.<android.text.BoringLayout: int mDesc>;

        $i3 = $i2 - $i1;

        $f0 = (float) $i3;

        $r5 = r0.<android.text.BoringLayout: android.graphics.Paint mPaint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawText(java.lang.String,float,float,android.graphics.Paint)>(r4, 0.0F, $f0, $r5);

        goto label2;

     label1:
        specialinvoke r0.<android.text.Layout: void draw(android.graphics.Canvas,android.graphics.Path,android.graphics.Paint,int)>(r1, r2, r3, i0);

     label2:
        return;
    }

    public void ellipsized(int, int)
    {
        android.text.BoringLayout r0;
        int i0, i1, $i2;

        r0 := @this: android.text.BoringLayout;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0.<android.text.BoringLayout: int mEllipsizedStart> = i0;

        $i2 = i1 - i0;

        r0.<android.text.BoringLayout: int mEllipsizedCount> = $i2;

        return;
    }

    public int getBottomPadding()
    {
        android.text.BoringLayout r0;
        int $i0;

        r0 := @this: android.text.BoringLayout;

        $i0 = r0.<android.text.BoringLayout: int mBottomPadding>;

        return $i0;
    }

    public int getEllipsisCount(int)
    {
        android.text.BoringLayout r0;
        int i0, $i1;

        r0 := @this: android.text.BoringLayout;

        i0 := @parameter0: int;

        $i1 = r0.<android.text.BoringLayout: int mEllipsizedCount>;

        return $i1;
    }

    public int getEllipsisStart(int)
    {
        android.text.BoringLayout r0;
        int i0, $i1;

        r0 := @this: android.text.BoringLayout;

        i0 := @parameter0: int;

        $i1 = r0.<android.text.BoringLayout: int mEllipsizedStart>;

        return $i1;
    }

    public int getEllipsizedWidth()
    {
        android.text.BoringLayout r0;
        int $i0;

        r0 := @this: android.text.BoringLayout;

        $i0 = r0.<android.text.BoringLayout: int mEllipsizedWidth>;

        return $i0;
    }

    public int getHeight()
    {
        android.text.BoringLayout r0;
        int $i0;

        r0 := @this: android.text.BoringLayout;

        $i0 = r0.<android.text.BoringLayout: int mBottom>;

        return $i0;
    }

    public boolean getLineContainsTab(int)
    {
        android.text.BoringLayout r0;
        int i0;

        r0 := @this: android.text.BoringLayout;

        i0 := @parameter0: int;

        return 0;
    }

    public int getLineCount()
    {
        android.text.BoringLayout r0;

        r0 := @this: android.text.BoringLayout;

        return 1;
    }

    public int getLineDescent(int)
    {
        android.text.BoringLayout r0;
        int i0, $i1;

        r0 := @this: android.text.BoringLayout;

        i0 := @parameter0: int;

        $i1 = r0.<android.text.BoringLayout: int mDesc>;

        return $i1;
    }

    public final android.text.Layout$Directions getLineDirections(int)
    {
        android.text.BoringLayout r0;
        int i0;
        android.text.Layout$Directions $r1;

        r0 := @this: android.text.BoringLayout;

        i0 := @parameter0: int;

        $r1 = <android.text.Layout: android.text.Layout$Directions DIRS_ALL_LEFT_TO_RIGHT>;

        return $r1;
    }

    public float getLineMax(int)
    {
        android.text.BoringLayout r0;
        int i0;
        float $f0;

        r0 := @this: android.text.BoringLayout;

        i0 := @parameter0: int;

        $f0 = r0.<android.text.BoringLayout: float mMax>;

        return $f0;
    }

    public int getLineStart(int)
    {
        android.text.BoringLayout r0;
        int i0, $i1;
        java.lang.CharSequence $r1;

        r0 := @this: android.text.BoringLayout;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return 0;

     label1:
        $r1 = virtualinvoke r0.<android.text.BoringLayout: java.lang.CharSequence getText()>();

        $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        return $i1;
    }

    public int getLineTop(int)
    {
        android.text.BoringLayout r0;
        int i0, $i1;

        r0 := @this: android.text.BoringLayout;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return 0;

     label1:
        $i1 = r0.<android.text.BoringLayout: int mBottom>;

        return $i1;
    }

    public float getLineWidth(int)
    {
        android.text.BoringLayout r0;
        int i0;
        float f0;

        r0 := @this: android.text.BoringLayout;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        f0 = r0.<android.text.BoringLayout: float mMax>;

        goto label2;

     label1:
        f0 = 0.0F;

     label2:
        return f0;
    }

    public int getParagraphDirection(int)
    {
        android.text.BoringLayout r0;
        int i0;

        r0 := @this: android.text.BoringLayout;

        i0 := @parameter0: int;

        return 1;
    }

    public int getTopPadding()
    {
        android.text.BoringLayout r0;
        int $i0;

        r0 := @this: android.text.BoringLayout;

        $i0 = r0.<android.text.BoringLayout: int mTopPadding>;

        return $i0;
    }

    void init(java.lang.CharSequence, android.text.TextPaint, android.text.Layout$Alignment, android.text.BoringLayout$Metrics, boolean, boolean)
    {
        android.text.BoringLayout r0;
        java.lang.CharSequence r1;
        android.text.TextPaint r2;
        android.text.BoringLayout$Metrics r3;
        boolean z0, z1, $z2;
        android.text.TextLine r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15, i16, i17, i18;
        float $f0, $f1, $f2;
        double $d0, $d1;
        android.text.Layout$Alignment $r6, r8;
        java.lang.String $r7;
        android.text.Layout$Directions r9;

        r0 := @this: android.text.BoringLayout;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: android.text.TextPaint;

        r8 := @parameter2: android.text.Layout$Alignment;

        r3 := @parameter3: android.text.BoringLayout$Metrics;

        z0 := @parameter4: boolean;

        z1 := @parameter5: boolean;

        $z2 = r1 instanceof java.lang.String;

        if $z2 == 0 goto label1;

        $r6 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_NORMAL>;

        if r8 != $r6 goto label1;

        $r7 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.String toString()>();

        r0.<android.text.BoringLayout: java.lang.String mDirect> = $r7;

        goto label2;

     label1:
        r0.<android.text.BoringLayout: java.lang.String mDirect> = null;

     label2:
        r0.<android.text.BoringLayout: android.graphics.Paint mPaint> = r2;

        if z0 == 0 goto label3;

        i12 = r3.<android.text.BoringLayout$Metrics: int bottom>;

        i13 = r3.<android.text.BoringLayout$Metrics: int top>;

        $i11 = r3.<android.text.BoringLayout$Metrics: int bottom>;

        r0.<android.text.BoringLayout: int mDesc> = $i11;

        i14 = i12 - i13;

        goto label4;

     label3:
        i15 = r3.<android.text.BoringLayout$Metrics: int descent>;

        i16 = r3.<android.text.BoringLayout$Metrics: int ascent>;

        $i0 = r3.<android.text.BoringLayout$Metrics: int descent>;

        r0.<android.text.BoringLayout: int mDesc> = $i0;

        i14 = i15 - i16;

     label4:
        r0.<android.text.BoringLayout: int mBottom> = i14;

        if z1 == 0 goto label5;

        $i10 = r3.<android.text.BoringLayout$Metrics: int width>;

        $f2 = (float) $i10;

        r0.<android.text.BoringLayout: float mMax> = $f2;

        goto label6;

     label5:
        r4 = staticinvoke <android.text.TextLine: android.text.TextLine obtain()>();

        i17 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        r9 = <android.text.Layout: android.text.Layout$Directions DIRS_ALL_LEFT_TO_RIGHT>;

        i18 = r0.<android.text.BoringLayout: int mEllipsizedStart>;

        $i1 = r0.<android.text.BoringLayout: int mEllipsizedCount>;

        $i2 = i18 + $i1;

        virtualinvoke r4.<android.text.TextLine: void set(android.text.TextPaint,java.lang.CharSequence,int,int,int,android.text.Layout$Directions,boolean,android.text.Layout$TabStops,int,int)>(r2, r1, 0, i17, 1, r9, 0, null, i18, $i2);

        $f0 = virtualinvoke r4.<android.text.TextLine: float metrics(android.graphics.Paint$FontMetricsInt)>(null);

        $d0 = (double) $f0;

        $d1 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        $i3 = (int) $d1;

        $f1 = (float) $i3;

        r0.<android.text.BoringLayout: float mMax> = $f1;

        staticinvoke <android.text.TextLine: android.text.TextLine recycle(android.text.TextLine)>(r4);

     label6:
        if z0 == 0 goto label7;

        $i5 = r3.<android.text.BoringLayout$Metrics: int top>;

        $i4 = r3.<android.text.BoringLayout$Metrics: int ascent>;

        $i6 = $i5 - $i4;

        r0.<android.text.BoringLayout: int mTopPadding> = $i6;

        $i8 = r3.<android.text.BoringLayout$Metrics: int bottom>;

        $i7 = r3.<android.text.BoringLayout$Metrics: int descent>;

        $i9 = $i8 - $i7;

        r0.<android.text.BoringLayout: int mBottomPadding> = $i9;

     label7:
        return;
    }

    public android.text.BoringLayout replaceOrMake(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout$Alignment, float, float, android.text.BoringLayout$Metrics, boolean)
    {
        android.text.BoringLayout r0;
        java.lang.CharSequence r1;
        android.text.TextPaint r2;
        int i0;
        android.text.Layout$Alignment r3;
        float f0, f1;
        android.text.BoringLayout$Metrics r4;
        boolean z0;

        r0 := @this: android.text.BoringLayout;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: android.text.TextPaint;

        i0 := @parameter2: int;

        r3 := @parameter3: android.text.Layout$Alignment;

        f0 := @parameter4: float;

        f1 := @parameter5: float;

        r4 := @parameter6: android.text.BoringLayout$Metrics;

        z0 := @parameter7: boolean;

        virtualinvoke r0.<android.text.BoringLayout: void replaceWith(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float)>(r1, r2, i0, r3, f0, f1);

        r0.<android.text.BoringLayout: int mEllipsizedWidth> = i0;

        r0.<android.text.BoringLayout: int mEllipsizedStart> = 0;

        r0.<android.text.BoringLayout: int mEllipsizedCount> = 0;

        virtualinvoke r0.<android.text.BoringLayout: void init(java.lang.CharSequence,android.text.TextPaint,android.text.Layout$Alignment,android.text.BoringLayout$Metrics,boolean,boolean)>(r1, r2, r3, r4, z0, 1);

        return r0;
    }

    public android.text.BoringLayout replaceOrMake(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout$Alignment, float, float, android.text.BoringLayout$Metrics, boolean, android.text.TextUtils$TruncateAt, int)
    {
        android.text.BoringLayout r0;
        java.lang.CharSequence r1, $r7, $r8;
        android.text.TextPaint r2;
        int i0, i1;
        android.text.Layout$Alignment r3;
        float f0, f1, $f2;
        android.text.BoringLayout$Metrics r4;
        boolean z0, z1;
        android.text.TextUtils$TruncateAt r5, $r6;

        r0 := @this: android.text.BoringLayout;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: android.text.TextPaint;

        i0 := @parameter2: int;

        r3 := @parameter3: android.text.Layout$Alignment;

        f0 := @parameter4: float;

        f1 := @parameter5: float;

        r4 := @parameter6: android.text.BoringLayout$Metrics;

        z0 := @parameter7: boolean;

        r5 := @parameter8: android.text.TextUtils$TruncateAt;

        i1 := @parameter9: int;

        if r5 == null goto label2;

        $r6 = <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt MARQUEE>;

        if r5 != $r6 goto label1;

        goto label2;

     label1:
        $f2 = (float) i1;

        $r7 = staticinvoke <android.text.TextUtils: java.lang.CharSequence ellipsize(java.lang.CharSequence,android.text.TextPaint,float,android.text.TextUtils$TruncateAt,boolean,android.text.TextUtils$EllipsizeCallback)>(r1, r2, $f2, r5, 1, r0);

        virtualinvoke r0.<android.text.BoringLayout: void replaceWith(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float)>($r7, r2, i0, r3, f0, f1);

        r0.<android.text.BoringLayout: int mEllipsizedWidth> = i1;

        z1 = 0;

        goto label3;

     label2:
        virtualinvoke r0.<android.text.BoringLayout: void replaceWith(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float)>(r1, r2, i0, r3, f0, f1);

        r0.<android.text.BoringLayout: int mEllipsizedWidth> = i0;

        r0.<android.text.BoringLayout: int mEllipsizedStart> = 0;

        r0.<android.text.BoringLayout: int mEllipsizedCount> = 0;

        z1 = 1;

     label3:
        $r8 = virtualinvoke r0.<android.text.BoringLayout: java.lang.CharSequence getText()>();

        virtualinvoke r0.<android.text.BoringLayout: void init(java.lang.CharSequence,android.text.TextPaint,android.text.Layout$Alignment,android.text.BoringLayout$Metrics,boolean,boolean)>($r8, r2, r3, r4, z0, z1);

        return r0;
    }
}
