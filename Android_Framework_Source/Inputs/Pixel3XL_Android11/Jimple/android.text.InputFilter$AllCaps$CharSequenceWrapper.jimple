class android.text.InputFilter$AllCaps$CharSequenceWrapper extends java.lang.Object implements java.lang.CharSequence, android.text.Spanned
{
    private final int mEnd;
    private final int mLength;
    private final java.lang.CharSequence mSource;
    private final int mStart;

    void <init>(java.lang.CharSequence, int, int)
    {
        android.text.InputFilter$AllCaps$CharSequenceWrapper r0;
        java.lang.CharSequence r1;
        int i0, i1, $i2;

        r0 := @this: android.text.InputFilter$AllCaps$CharSequenceWrapper;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.text.InputFilter$AllCaps$CharSequenceWrapper: java.lang.CharSequence mSource> = r1;

        r0.<android.text.InputFilter$AllCaps$CharSequenceWrapper: int mStart> = i0;

        r0.<android.text.InputFilter$AllCaps$CharSequenceWrapper: int mEnd> = i1;

        $i2 = i1 - i0;

        r0.<android.text.InputFilter$AllCaps$CharSequenceWrapper: int mLength> = $i2;

        return;
    }

    public char charAt(int)
    {
        android.text.InputFilter$AllCaps$CharSequenceWrapper r0;
        int i0, $i1, $i2, $i3;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.CharSequence $r2;
        char $c4;

        r0 := @this: android.text.InputFilter$AllCaps$CharSequenceWrapper;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = r0.<android.text.InputFilter$AllCaps$CharSequenceWrapper: int mLength>;

        if i0 >= $i1 goto label1;

        $r2 = r0.<android.text.InputFilter$AllCaps$CharSequenceWrapper: java.lang.CharSequence mSource>;

        $i2 = r0.<android.text.InputFilter$AllCaps$CharSequenceWrapper: int mStart>;

        $i3 = $i2 + i0;

        $c4 = interfaceinvoke $r2.<java.lang.CharSequence: char charAt(int)>($i3);

        return $c4;

     label1:
        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;
    }

    public int getSpanEnd(java.lang.Object)
    {
        android.text.InputFilter$AllCaps$CharSequenceWrapper r0;
        java.lang.Object r1;
        java.lang.CharSequence $r2;
        android.text.Spanned $r3;
        int $i0, $i1, $i2;

        r0 := @this: android.text.InputFilter$AllCaps$CharSequenceWrapper;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<android.text.InputFilter$AllCaps$CharSequenceWrapper: java.lang.CharSequence mSource>;

        $r3 = (android.text.Spanned) $r2;

        $i0 = interfaceinvoke $r3.<android.text.Spanned: int getSpanEnd(java.lang.Object)>(r1);

        $i1 = r0.<android.text.InputFilter$AllCaps$CharSequenceWrapper: int mStart>;

        $i2 = $i0 - $i1;

        return $i2;
    }

    public int getSpanFlags(java.lang.Object)
    {
        android.text.InputFilter$AllCaps$CharSequenceWrapper r0;
        java.lang.Object r1;
        java.lang.CharSequence $r2;
        android.text.Spanned $r3;
        int $i0;

        r0 := @this: android.text.InputFilter$AllCaps$CharSequenceWrapper;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<android.text.InputFilter$AllCaps$CharSequenceWrapper: java.lang.CharSequence mSource>;

        $r3 = (android.text.Spanned) $r2;

        $i0 = interfaceinvoke $r3.<android.text.Spanned: int getSpanFlags(java.lang.Object)>(r1);

        return $i0;
    }

    public int getSpanStart(java.lang.Object)
    {
        android.text.InputFilter$AllCaps$CharSequenceWrapper r0;
        java.lang.Object r1;
        java.lang.CharSequence $r2;
        android.text.Spanned $r3;
        int $i0, $i1, $i2;

        r0 := @this: android.text.InputFilter$AllCaps$CharSequenceWrapper;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<android.text.InputFilter$AllCaps$CharSequenceWrapper: java.lang.CharSequence mSource>;

        $r3 = (android.text.Spanned) $r2;

        $i0 = interfaceinvoke $r3.<android.text.Spanned: int getSpanStart(java.lang.Object)>(r1);

        $i1 = r0.<android.text.InputFilter$AllCaps$CharSequenceWrapper: int mStart>;

        $i2 = $i0 - $i1;

        return $i2;
    }

    public java.lang.Object[] getSpans(int, int, java.lang.Class)
    {
        android.text.InputFilter$AllCaps$CharSequenceWrapper r0;
        int i0, i1, i2, $i3, $i4;
        java.lang.Class r1;
        android.text.Spanned r2;
        java.lang.CharSequence $r3;
        java.lang.Object[] $r4;

        r0 := @this: android.text.InputFilter$AllCaps$CharSequenceWrapper;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.Class;

        $r3 = r0.<android.text.InputFilter$AllCaps$CharSequenceWrapper: java.lang.CharSequence mSource>;

        r2 = (android.text.Spanned) $r3;

        i2 = r0.<android.text.InputFilter$AllCaps$CharSequenceWrapper: int mStart>;

        $i4 = i2 + i0;

        $i3 = i2 + i1;

        $r4 = interfaceinvoke r2.<android.text.Spanned: java.lang.Object[] getSpans(int,int,java.lang.Class)>($i4, $i3, r1);

        return $r4;
    }

    public int length()
    {
        android.text.InputFilter$AllCaps$CharSequenceWrapper r0;
        int $i0;

        r0 := @this: android.text.InputFilter$AllCaps$CharSequenceWrapper;

        $i0 = r0.<android.text.InputFilter$AllCaps$CharSequenceWrapper: int mLength>;

        return $i0;
    }

    public int nextSpanTransition(int, int, java.lang.Class)
    {
        android.text.InputFilter$AllCaps$CharSequenceWrapper r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.Class r1;
        android.text.Spanned r2;
        java.lang.CharSequence $r3;

        r0 := @this: android.text.InputFilter$AllCaps$CharSequenceWrapper;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.Class;

        $r3 = r0.<android.text.InputFilter$AllCaps$CharSequenceWrapper: java.lang.CharSequence mSource>;

        r2 = (android.text.Spanned) $r3;

        i2 = r0.<android.text.InputFilter$AllCaps$CharSequenceWrapper: int mStart>;

        $i4 = i2 + i0;

        $i3 = i2 + i1;

        $i5 = interfaceinvoke r2.<android.text.Spanned: int nextSpanTransition(int,int,java.lang.Class)>($i4, $i3, r1);

        $i6 = r0.<android.text.InputFilter$AllCaps$CharSequenceWrapper: int mStart>;

        $i7 = $i5 - $i6;

        return $i7;
    }

    public java.lang.CharSequence subSequence(int, int)
    {
        android.text.InputFilter$AllCaps$CharSequenceWrapper r0, $r2;
        int i0, i1, i2, $i3, $i4, $i5;
        java.lang.CharSequence r1;
        java.lang.IndexOutOfBoundsException $r3;

        r0 := @this: android.text.InputFilter$AllCaps$CharSequenceWrapper;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < 0 goto label1;

        if i1 < 0 goto label1;

        $i3 = r0.<android.text.InputFilter$AllCaps$CharSequenceWrapper: int mLength>;

        if i1 > $i3 goto label1;

        if i0 > i1 goto label1;

        r1 = r0.<android.text.InputFilter$AllCaps$CharSequenceWrapper: java.lang.CharSequence mSource>;

        i2 = r0.<android.text.InputFilter$AllCaps$CharSequenceWrapper: int mStart>;

        $r2 = new android.text.InputFilter$AllCaps$CharSequenceWrapper;

        $i5 = i2 + i0;

        $i4 = i2 + i1;

        specialinvoke $r2.<android.text.InputFilter$AllCaps$CharSequenceWrapper: void <init>(java.lang.CharSequence,int,int)>(r1, $i5, $i4);

        return $r2;

     label1:
        $r3 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r3;
    }

    public java.lang.String toString()
    {
        android.text.InputFilter$AllCaps$CharSequenceWrapper r0;
        int $i0, $i1;
        java.lang.CharSequence $r1, $r2;
        java.lang.String $r3;

        r0 := @this: android.text.InputFilter$AllCaps$CharSequenceWrapper;

        $r1 = r0.<android.text.InputFilter$AllCaps$CharSequenceWrapper: java.lang.CharSequence mSource>;

        $i1 = r0.<android.text.InputFilter$AllCaps$CharSequenceWrapper: int mStart>;

        $i0 = r0.<android.text.InputFilter$AllCaps$CharSequenceWrapper: int mEnd>;

        $r2 = interfaceinvoke $r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i1, $i0);

        $r3 = interfaceinvoke $r2.<java.lang.CharSequence: java.lang.String toString()>();

        return $r3;
    }
}
