public abstract class android.text.Layout extends java.lang.Object
{
    public static final int BREAK_STRATEGY_BALANCED;
    public static final int BREAK_STRATEGY_HIGH_QUALITY;
    public static final int BREAK_STRATEGY_SIMPLE;
    public static final float DEFAULT_LINESPACING_ADDITION;
    public static final float DEFAULT_LINESPACING_MULTIPLIER;
    public static final android.text.Layout$Directions DIRS_ALL_LEFT_TO_RIGHT;
    public static final android.text.Layout$Directions DIRS_ALL_RIGHT_TO_LEFT;
    public static final int DIR_LEFT_TO_RIGHT;
    static final int DIR_REQUEST_DEFAULT_LTR;
    static final int DIR_REQUEST_DEFAULT_RTL;
    static final int DIR_REQUEST_LTR;
    static final int DIR_REQUEST_RTL;
    public static final int DIR_RIGHT_TO_LEFT;
    public static final int HYPHENATION_FREQUENCY_FULL;
    public static final int HYPHENATION_FREQUENCY_NONE;
    public static final int HYPHENATION_FREQUENCY_NORMAL;
    public static final int JUSTIFICATION_MODE_INTER_WORD;
    public static final int JUSTIFICATION_MODE_NONE;
    private static final android.text.style.ParagraphStyle[] NO_PARA_SPANS;
    static final int RUN_LENGTH_MASK;
    static final int RUN_LEVEL_MASK;
    static final int RUN_LEVEL_SHIFT;
    static final int RUN_RTL_FLAG;
    private static final float TAB_INCREMENT;
    public static final int TEXT_SELECTION_LAYOUT_LEFT_TO_RIGHT;
    public static final int TEXT_SELECTION_LAYOUT_RIGHT_TO_LEFT;
    private static final android.graphics.Rect sTempRect;
    private android.text.Layout$Alignment mAlignment;
    private int mJustificationMode;
    private android.text.SpanSet mLineBackgroundSpans;
    private android.text.TextPaint mPaint;
    private float mSpacingAdd;
    private float mSpacingMult;
    private boolean mSpannedText;
    private java.lang.CharSequence mText;
    private android.text.TextDirectionHeuristic mTextDir;
    private int mWidth;
    private android.text.TextPaint mWorkPaint;

    static void <clinit>()
    {
        java.lang.Object[] $r0;
        android.text.style.ParagraphStyle[] $r1;
        android.graphics.Rect $r2;
        android.text.Layout$Directions $r3, $r5;
        int[] $r4, $r6;

        <android.text.Layout: int TEXT_SELECTION_LAYOUT_RIGHT_TO_LEFT> = 0;

        <android.text.Layout: int TEXT_SELECTION_LAYOUT_LEFT_TO_RIGHT> = 1;

        <android.text.Layout: float TAB_INCREMENT> = 20.0F;

        <android.text.Layout: int RUN_RTL_FLAG> = 67108864;

        <android.text.Layout: int RUN_LEVEL_SHIFT> = 26;

        <android.text.Layout: int RUN_LEVEL_MASK> = 63;

        <android.text.Layout: int RUN_LENGTH_MASK> = 67108863;

        <android.text.Layout: int JUSTIFICATION_MODE_NONE> = 0;

        <android.text.Layout: int JUSTIFICATION_MODE_INTER_WORD> = 1;

        <android.text.Layout: int HYPHENATION_FREQUENCY_NORMAL> = 1;

        <android.text.Layout: int HYPHENATION_FREQUENCY_NONE> = 0;

        <android.text.Layout: int HYPHENATION_FREQUENCY_FULL> = 2;

        <android.text.Layout: int DIR_RIGHT_TO_LEFT> = -1;

        <android.text.Layout: int DIR_REQUEST_RTL> = -1;

        <android.text.Layout: int DIR_REQUEST_LTR> = 1;

        <android.text.Layout: int DIR_REQUEST_DEFAULT_RTL> = -2;

        <android.text.Layout: int DIR_REQUEST_DEFAULT_LTR> = 2;

        <android.text.Layout: int DIR_LEFT_TO_RIGHT> = 1;

        <android.text.Layout: float DEFAULT_LINESPACING_MULTIPLIER> = 1.0F;

        <android.text.Layout: float DEFAULT_LINESPACING_ADDITION> = 0.0F;

        <android.text.Layout: int BREAK_STRATEGY_SIMPLE> = 0;

        <android.text.Layout: int BREAK_STRATEGY_HIGH_QUALITY> = 1;

        <android.text.Layout: int BREAK_STRATEGY_BALANCED> = 2;

        $r0 = staticinvoke <com.android.internal.util.ArrayUtils: java.lang.Object[] emptyArray(java.lang.Class)>(class "Landroid/text/style/ParagraphStyle;");

        $r1 = (android.text.style.ParagraphStyle[]) $r0;

        <android.text.Layout: android.text.style.ParagraphStyle[] NO_PARA_SPANS> = $r1;

        $r2 = new android.graphics.Rect;

        specialinvoke $r2.<android.graphics.Rect: void <init>()>();

        <android.text.Layout: android.graphics.Rect sTempRect> = $r2;

        $r3 = new android.text.Layout$Directions;

        $r4 = newarray (int)[2];

        $r4[0] = 0;

        $r4[1] = 67108863;

        specialinvoke $r3.<android.text.Layout$Directions: void <init>(int[])>($r4);

        <android.text.Layout: android.text.Layout$Directions DIRS_ALL_LEFT_TO_RIGHT> = $r3;

        $r5 = new android.text.Layout$Directions;

        $r6 = newarray (int)[2];

        $r6[0] = 0;

        $r6[1] = 134217727;

        specialinvoke $r5.<android.text.Layout$Directions: void <init>(int[])>($r6);

        <android.text.Layout: android.text.Layout$Directions DIRS_ALL_RIGHT_TO_LEFT> = $r5;

        return;
    }

    protected void <init>(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout$Alignment, float, float)
    {
        android.text.Layout r0;
        java.lang.CharSequence r1;
        android.text.TextPaint r2;
        int i0;
        android.text.Layout$Alignment r3;
        float f0, f1;
        android.text.TextDirectionHeuristic $r4;

        r0 := @this: android.text.Layout;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: android.text.TextPaint;

        i0 := @parameter2: int;

        r3 := @parameter3: android.text.Layout$Alignment;

        f0 := @parameter4: float;

        f1 := @parameter5: float;

        $r4 = <android.text.TextDirectionHeuristics: android.text.TextDirectionHeuristic FIRSTSTRONG_LTR>;

        specialinvoke r0.<android.text.Layout: void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,android.text.TextDirectionHeuristic,float,float)>(r1, r2, i0, r3, $r4, f0, f1);

        return;
    }

    protected void <init>(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout$Alignment, android.text.TextDirectionHeuristic, float, float)
    {
        android.text.Layout r0;
        android.text.TextPaint r1, $r4;
        int i0;
        android.text.Layout$Alignment r2, $r5;
        android.text.TextDirectionHeuristic r3;
        float f0, f1;
        java.lang.StringBuilder $r6;
        java.lang.IllegalArgumentException $r10;
        java.lang.String $r11;
        boolean $z0;
        java.lang.CharSequence r12;

        r0 := @this: android.text.Layout;

        r12 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: android.text.TextPaint;

        i0 := @parameter2: int;

        r2 := @parameter3: android.text.Layout$Alignment;

        r3 := @parameter4: android.text.TextDirectionHeuristic;

        f0 := @parameter5: float;

        f1 := @parameter6: float;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new android.text.TextPaint;

        specialinvoke $r4.<android.text.TextPaint: void <init>()>();

        r0.<android.text.Layout: android.text.TextPaint mWorkPaint> = $r4;

        $r5 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_NORMAL>;

        r0.<android.text.Layout: android.text.Layout$Alignment mAlignment> = $r5;

        if i0 < 0 goto label2;

        if r1 == null goto label1;

        r1.<android.text.TextPaint: int bgColor> = 0;

        r1.<android.text.TextPaint: int baselineShift> = 0;

     label1:
        r0.<android.text.Layout: java.lang.CharSequence mText> = r12;

        r0.<android.text.Layout: android.text.TextPaint mPaint> = r1;

        r0.<android.text.Layout: int mWidth> = i0;

        r0.<android.text.Layout: android.text.Layout$Alignment mAlignment> = r2;

        r0.<android.text.Layout: float mSpacingMult> = f0;

        r0.<android.text.Layout: float mSpacingAdd> = f1;

        $z0 = r12 instanceof android.text.Spanned;

        r0.<android.text.Layout: boolean mSpannedText> = $z0;

        r0.<android.text.Layout: android.text.TextDirectionHeuristic mTextDir> = r3;

        return;

     label2:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Layout: ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" < 0");

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r10;
    }

    static float[] access$000(android.text.Layout, int, boolean, boolean)
    {
        android.text.Layout r0;
        int i0;
        boolean z0, z1;
        float[] $r1;

        r0 := @parameter0: android.text.Layout;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $r1 = specialinvoke r0.<android.text.Layout: float[] getLineHorizontals(int,boolean,boolean)>(i0, z0, z1);

        return $r1;
    }

    static float access$100(android.text.Layout, int, boolean)
    {
        android.text.Layout r0;
        int i0;
        boolean z0;
        float $f0;

        r0 := @parameter0: android.text.Layout;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $f0 = specialinvoke r0.<android.text.Layout: float getHorizontal(int,boolean)>(i0, z0);

        return $f0;
    }

    static void access$200(android.text.Layout, int, int, int, char[], int, android.text.TextUtils$TruncateAt)
    {
        android.text.Layout r0;
        int i0, i1, i2, i3;
        char[] r1;
        android.text.TextUtils$TruncateAt r2;

        r0 := @parameter0: android.text.Layout;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r1 := @parameter4: char[];

        i3 := @parameter5: int;

        r2 := @parameter6: android.text.TextUtils$TruncateAt;

        specialinvoke r0.<android.text.Layout: void ellipsize(int,int,int,char[],int,android.text.TextUtils$TruncateAt)>(i0, i1, i2, r1, i3, r2);

        return;
    }

    private void addSelection(int, int, int, int, int, android.text.Layout$SelectionRectangleConsumer)
    {
        android.text.Layout r0;
        int i0, i1, i2, i3, i4, i5, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i17, i18, i19, $i20, i21, i22, i23, i24;
        android.text.Layout$SelectionRectangleConsumer r1;
        android.text.Layout$Directions r2;
        float f0, f1, $f2, $f3, f4, f5;
        int[] $r4, $r5, $r6, $r8;
        java.lang.CharSequence $r7;
        char $c16;
        byte b25;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        r1 := @parameter5: android.text.Layout$SelectionRectangleConsumer;

        i5 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>(i0);

        i17 = virtualinvoke r0.<android.text.Layout: int getLineEnd(int)>(i0);

        r2 = virtualinvoke r0.<android.text.Layout: android.text.Layout$Directions getLineDirections(int)>(i0);

        i18 = i17;

        if i17 <= i5 goto label1;

        i18 = i17;

        $r7 = r0.<android.text.Layout: java.lang.CharSequence mText>;

        $i15 = i17 - 1;

        $c16 = interfaceinvoke $r7.<java.lang.CharSequence: char charAt(int)>($i15);

        if $c16 != 10 goto label1;

        i18 = i17 - 1;

     label1:
        i19 = 0;

     label2:
        $r8 = r2.<android.text.Layout$Directions: int[] mDirections>;

        $i20 = lengthof $r8;

        if i19 >= $i20 goto label8;

        $r4 = r2.<android.text.Layout$Directions: int[] mDirections>;

        $i8 = $r4[i19];

        i7 = $i8 + i5;

        $r5 = r2.<android.text.Layout$Directions: int[] mDirections>;

        $i9 = i19 + 1;

        $i10 = $r5[$i9];

        $i11 = $i10 & 67108863;

        i21 = $i11 + i7;

        i22 = i21;

        if i21 <= i18 goto label3;

        i22 = i18;

     label3:
        if i1 > i22 goto label7;

        if i2 < i7 goto label7;

        i23 = staticinvoke <java.lang.Math: int max(int,int)>(i1, i7);

        i24 = staticinvoke <java.lang.Math: int min(int,int)>(i2, i22);

        if i23 == i24 goto label6;

        f0 = specialinvoke r0.<android.text.Layout: float getHorizontal(int,boolean,int,boolean)>(i23, 0, i0, 0);

        f4 = specialinvoke r0.<android.text.Layout: float getHorizontal(int,boolean,int,boolean)>(i24, 1, i0, 0);

        f1 = staticinvoke <java.lang.Math: float min(float,float)>(f0, f4);

        f5 = staticinvoke <java.lang.Math: float max(float,float)>(f0, f4);

        $r6 = r2.<android.text.Layout$Directions: int[] mDirections>;

        $i12 = i19 + 1;

        $i13 = $r6[$i12];

        $i14 = $i13 & 67108864;

        if $i14 == 0 goto label4;

        b25 = 0;

        goto label5;

     label4:
        b25 = 1;

     label5:
        $f3 = (float) i3;

        $f2 = (float) i4;

        interfaceinvoke r1.<android.text.Layout$SelectionRectangleConsumer: void accept(float,float,float,float,int)>(f1, $f3, f5, $f2, b25);

        goto label7;

     label6:
        goto label7;

     label7:
        i19 = i19 + 2;

        goto label2;

     label8:
        return;
    }

    private void ellipsize(int, int, int, char[], int, android.text.TextUtils$TruncateAt)
    {
        android.text.Layout r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i10, i11, i12, $i14;
        char[] r1;
        char $c9, c13;
        android.text.TextUtils$TruncateAt r2;
        java.lang.String r3;
        boolean z0;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i11 := @parameter2: int;

        r1 := @parameter3: char[];

        i2 := @parameter4: int;

        r2 := @parameter5: android.text.TextUtils$TruncateAt;

        i3 = virtualinvoke r0.<android.text.Layout: int getEllipsisCount(int)>(i11);

        if i3 != 0 goto label1;

        return;

     label1:
        i4 = virtualinvoke r0.<android.text.Layout: int getEllipsisStart(int)>(i11);

        i5 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>(i11);

        r3 = staticinvoke <android.text.TextUtils: java.lang.String getEllipsisString(android.text.TextUtils$TruncateAt)>(r2);

        i6 = virtualinvoke r3.<java.lang.String: int length()>();

        if i3 < i6 goto label2;

        z0 = 1;

        goto label3;

     label2:
        z0 = 0;

     label3:
        i12 = 0;

     label4:
        if i12 >= i3 goto label8;

        if z0 == 0 goto label5;

        if i12 >= i6 goto label5;

        c13 = virtualinvoke r3.<java.lang.String: char charAt(int)>(i12);

        goto label6;

     label5:
        c13 = 65279;

     label6:
        $i14 = i12 + i4;

        i7 = $i14 + i5;

        if i0 > i7 goto label7;

        if i7 >= i1 goto label7;

        $i8 = i2 + i7;

        $i10 = $i8 - i0;

        $c9 = (char) c13;

        r1[$i10] = $c9;

        goto label7;

     label7:
        i12 = i12 + 1;

        goto label4;

     label8:
        return;
    }

    public static float getDesiredWidth(java.lang.CharSequence, int, int, android.text.TextPaint)
    {
        java.lang.CharSequence r0;
        int i0, i1;
        android.text.TextPaint r1;
        android.text.TextDirectionHeuristic $r2;
        float $f0;

        r0 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: android.text.TextPaint;

        $r2 = <android.text.TextDirectionHeuristics: android.text.TextDirectionHeuristic FIRSTSTRONG_LTR>;

        $f0 = staticinvoke <android.text.Layout: float getDesiredWidth(java.lang.CharSequence,int,int,android.text.TextPaint,android.text.TextDirectionHeuristic)>(r0, i0, i1, r1, $r2);

        return $f0;
    }

    public static float getDesiredWidth(java.lang.CharSequence, int, int, android.text.TextPaint, android.text.TextDirectionHeuristic)
    {
        java.lang.CharSequence r0;
        int i0, i1;
        android.text.TextPaint r1;
        android.text.TextDirectionHeuristic r2;
        float $f0;

        r0 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: android.text.TextPaint;

        r2 := @parameter4: android.text.TextDirectionHeuristic;

        $f0 = staticinvoke <android.text.Layout: float getDesiredWidthWithLimit(java.lang.CharSequence,int,int,android.text.TextPaint,android.text.TextDirectionHeuristic,float)>(r0, i0, i1, r1, r2, 3.4028235E38F);

        return $f0;
    }

    public static float getDesiredWidth(java.lang.CharSequence, android.text.TextPaint)
    {
        java.lang.CharSequence r0;
        android.text.TextPaint r1;
        int $i0;
        float $f0;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: android.text.TextPaint;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $f0 = staticinvoke <android.text.Layout: float getDesiredWidth(java.lang.CharSequence,int,int,android.text.TextPaint)>(r0, 0, $i0, r1);

        return $f0;
    }

    public static float getDesiredWidthWithLimit(java.lang.CharSequence, int, int, android.text.TextPaint, android.text.TextDirectionHeuristic, float)
    {
        java.lang.CharSequence r0;
        int i0, i1, i4, i5;
        android.text.TextPaint r1;
        android.text.TextDirectionHeuristic r2;
        float f0, f1, f2, f3;
        byte $b2, $b3;

        r0 := @parameter0: java.lang.CharSequence;

        i4 := @parameter1: int;

        i0 := @parameter2: int;

        r1 := @parameter3: android.text.TextPaint;

        r2 := @parameter4: android.text.TextDirectionHeuristic;

        f0 := @parameter5: float;

        f2 = 0.0F;

     label1:
        if i4 > i0 goto label5;

        i1 = staticinvoke <android.text.TextUtils: int indexOf(java.lang.CharSequence,char,int,int)>(r0, 10, i4, i0);

        i5 = i1;

        if i1 >= 0 goto label2;

        i5 = i0;

     label2:
        f1 = staticinvoke <android.text.Layout: float measurePara(android.text.TextPaint,java.lang.CharSequence,int,int,android.text.TextDirectionHeuristic)>(r1, r0, i4, i5, r2);

        $b2 = f1 cmpl f0;

        if $b2 <= 0 goto label3;

        return f0;

     label3:
        f3 = f2;

        $b3 = f1 cmpl f2;

        if $b3 <= 0 goto label4;

        f3 = f1;

     label4:
        i4 = i5 + 1;

        f2 = f3;

        goto label1;

     label5:
        return f2;
    }

    private float getHorizontal(int, boolean)
    {
        android.text.Layout r0;
        int i0;
        boolean z0;
        float f0;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        f0 = virtualinvoke r0.<android.text.Layout: float getPrimaryHorizontal(int)>(i0);

        goto label2;

     label1:
        f0 = virtualinvoke r0.<android.text.Layout: float getSecondaryHorizontal(int)>(i0);

     label2:
        return f0;
    }

    private float getHorizontal(int, boolean, int, boolean)
    {
        android.text.Layout r0;
        boolean z0, z1, z2, $z3;
        int i0, i1, i2, i3, $i5, i6, $i7, $i8, $i9, $i10, $i11, i12, $i13, $i14, $i15;
        android.text.Layout$Directions r1;
        android.text.TextLine r2;
        float f0, $f1, f2, $f3, $f4;
        byte $b4;
        android.text.Spanned $r4;
        java.lang.Object[] $r5;
        android.text.Layout$TabStops $r6, r9;
        java.lang.CharSequence r7, $r11;
        android.text.style.TabStopSpan[] r8;
        android.text.TextPaint $r10;

        r0 := @this: android.text.Layout;

        i6 := @parameter0: int;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        z1 := @parameter3: boolean;

        i1 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>(i0);

        i2 = virtualinvoke r0.<android.text.Layout: int getLineEnd(int)>(i0);

        i3 = virtualinvoke r0.<android.text.Layout: int getParagraphDirection(int)>(i0);

        z2 = virtualinvoke r0.<android.text.Layout: boolean getLineContainsTab(int)>(i0);

        r1 = virtualinvoke r0.<android.text.Layout: android.text.Layout$Directions getLineDirections(int)>(i0);

        if z2 == 0 goto label1;

        r7 = r0.<android.text.Layout: java.lang.CharSequence mText>;

        $z3 = r7 instanceof android.text.Spanned;

        if $z3 == 0 goto label1;

        $r4 = (android.text.Spanned) r7;

        $r5 = staticinvoke <android.text.Layout: java.lang.Object[] getParagraphSpans(android.text.Spanned,int,int,java.lang.Class)>($r4, i1, i2, class "Landroid/text/style/TabStopSpan;");

        r8 = (android.text.style.TabStopSpan[]) $r5;

        $i5 = lengthof r8;

        if $i5 <= 0 goto label1;

        $r6 = new android.text.Layout$TabStops;

        specialinvoke $r6.<android.text.Layout$TabStops: void <init>(float,java.lang.Object[])>(20.0F, r8);

        r9 = $r6;

        goto label2;

     label1:
        r9 = null;

     label2:
        r2 = staticinvoke <android.text.TextLine: android.text.TextLine obtain()>();

        $r10 = r0.<android.text.Layout: android.text.TextPaint mPaint>;

        $r11 = r0.<android.text.Layout: java.lang.CharSequence mText>;

        $i7 = virtualinvoke r0.<android.text.Layout: int getEllipsisStart(int)>(i0);

        $i8 = virtualinvoke r0.<android.text.Layout: int getEllipsisStart(int)>(i0);

        $i9 = virtualinvoke r0.<android.text.Layout: int getEllipsisCount(int)>(i0);

        $i10 = $i8 + $i9;

        virtualinvoke r2.<android.text.TextLine: void set(android.text.TextPaint,java.lang.CharSequence,int,int,int,android.text.Layout$Directions,boolean,android.text.Layout$TabStops,int,int)>($r10, $r11, i1, i2, i3, r1, z2, r9, $i7, $i10);

        $i11 = i6 - i1;

        f0 = virtualinvoke r2.<android.text.TextLine: float measure(int,boolean,android.graphics.Paint$FontMetricsInt)>($i11, z0, null);

        staticinvoke <android.text.TextLine: android.text.TextLine recycle(android.text.TextLine)>(r2);

        f2 = f0;

        if z1 == 0 goto label3;

        i12 = r0.<android.text.Layout: int mWidth>;

        f2 = f0;

        $f1 = (float) i12;

        $b4 = f0 cmpl $f1;

        if $b4 <= 0 goto label3;

        f2 = (float) i12;

     label3:
        $i13 = virtualinvoke r0.<android.text.Layout: int getParagraphLeft(int)>(i0);

        $i14 = virtualinvoke r0.<android.text.Layout: int getParagraphRight(int)>(i0);

        $i15 = specialinvoke r0.<android.text.Layout: int getLineStartPos(int,int,int)>(i0, $i13, $i14);

        $f3 = (float) $i15;

        $f4 = $f3 + f2;

        return $f4;
    }

    private float getHorizontal(int, boolean, boolean)
    {
        android.text.Layout r0;
        int i0, $i1;
        boolean z0, z1;
        float $f0;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $i1 = virtualinvoke r0.<android.text.Layout: int getLineForOffset(int)>(i0);

        $f0 = specialinvoke r0.<android.text.Layout: float getHorizontal(int,boolean,int,boolean)>(i0, z0, $i1, z1);

        return $f0;
    }

    private float getJustifyWidth(int)
    {
        android.text.Layout r0;
        android.text.Layout$Alignment r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, r25, r26, r29, $r30;
        int i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, $i28, $i29;
        android.text.Spanned r2;
        boolean z0, $z1, $z2, $z3, $z4, z5, z6;
        java.lang.CharSequence $r11, $r18, $r23;
        android.text.style.ParagraphStyle $r12, $r13, $r14, $r15, $r17, $r20, $r21;
        android.text.style.LeadingMarginSpan$LeadingMarginSpan2 $r16;
        java.lang.Object[] $r19;
        android.text.style.AlignmentSpan $r22;
        char $c14;
        android.text.style.ParagraphStyle[] r24, r27;
        android.text.style.LeadingMarginSpan r28;
        float $f0;

        r0 := @this: android.text.Layout;

        i15 := @parameter0: int;

        r1 = r0.<android.text.Layout: android.text.Layout$Alignment mAlignment>;

        i16 = 0;

        i17 = r0.<android.text.Layout: int mWidth>;

        i1 = virtualinvoke r0.<android.text.Layout: int getParagraphDirection(int)>(i15);

        r24 = <android.text.Layout: android.text.style.ParagraphStyle[] NO_PARA_SPANS>;

        r25 = r1;

        i18 = i17;

        $z1 = r0.<android.text.Layout: boolean mSpannedText>;

        if $z1 == 0 goto label13;

        $r11 = r0.<android.text.Layout: java.lang.CharSequence mText>;

        r2 = (android.text.Spanned) $r11;

        i19 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>(i15);

        if i19 == 0 goto label02;

        $r23 = r0.<android.text.Layout: java.lang.CharSequence mText>;

        $i13 = i19 - 1;

        $c14 = interfaceinvoke $r23.<java.lang.CharSequence: char charAt(int)>($i13);

        if $c14 != 10 goto label01;

        goto label02;

     label01:
        z5 = 0;

        goto label03;

     label02:
        z5 = 1;

     label03:
        r26 = r1;

        if z5 == 0 goto label06;

        $r18 = r0.<android.text.Layout: java.lang.CharSequence mText>;

        $i10 = interfaceinvoke $r18.<java.lang.CharSequence: int length()>();

        $i11 = interfaceinvoke r2.<android.text.Spanned: int nextSpanTransition(int,int,java.lang.Class)>(i19, $i10, class "Landroid/text/style/ParagraphStyle;");

        $r19 = staticinvoke <android.text.Layout: java.lang.Object[] getParagraphSpans(android.text.Spanned,int,int,java.lang.Class)>(r2, i19, $i11, class "Landroid/text/style/ParagraphStyle;");

        r27 = (android.text.style.ParagraphStyle[]) $r19;

        $i12 = lengthof r27;

        i20 = $i12 - 1;

     label04:
        r26 = r1;

        r24 = r27;

        if i20 < 0 goto label06;

        $r20 = r27[i20];

        $z4 = $r20 instanceof android.text.style.AlignmentSpan;

        if $z4 == 0 goto label05;

        $r21 = r27[i20];

        $r22 = (android.text.style.AlignmentSpan) $r21;

        r26 = interfaceinvoke $r22.<android.text.style.AlignmentSpan: android.text.Layout$Alignment getAlignment()>();

        r24 = r27;

        goto label06;

     label05:
        i20 = i20 + -1;

        goto label04;

     label06:
        i2 = lengthof r24;

        z0 = z5;

        i21 = 0;

     label07:
        z6 = z0;

        if i21 >= i2 goto label09;

        $r14 = r24[i21];

        $z3 = $r14 instanceof android.text.style.LeadingMarginSpan$LeadingMarginSpan2;

        if $z3 == 0 goto label08;

        $r15 = r24[i21];

        $r16 = (android.text.style.LeadingMarginSpan$LeadingMarginSpan2) $r15;

        i22 = interfaceinvoke $r16.<android.text.style.LeadingMarginSpan$LeadingMarginSpan2: int getLeadingMarginLineCount()>();

        $r17 = r24[i21];

        $i7 = interfaceinvoke r2.<android.text.Spanned: int getSpanStart(java.lang.Object)>($r17);

        $i8 = virtualinvoke r0.<android.text.Layout: int getLineForOffset(int)>($i7);

        $i9 = $i8 + i22;

        if i15 >= $i9 goto label08;

        z6 = 1;

        goto label09;

     label08:
        i21 = i21 + 1;

        goto label07;

     label09:
        i23 = 0;

        i24 = 0;

     label10:
        r25 = r26;

        i16 = i24;

        i18 = i17;

        if i23 >= i2 goto label13;

        i25 = i24;

        i26 = i17;

        $r12 = r24[i23];

        $z2 = $r12 instanceof android.text.style.LeadingMarginSpan;

        if $z2 == 0 goto label12;

        $r13 = r24[i23];

        r28 = (android.text.style.LeadingMarginSpan) $r13;

        if i1 != -1 goto label11;

        $i6 = interfaceinvoke r28.<android.text.style.LeadingMarginSpan: int getLeadingMargin(boolean)>(z6);

        i26 = i17 - $i6;

        i25 = i24;

        goto label12;

     label11:
        $i5 = interfaceinvoke r28.<android.text.style.LeadingMarginSpan: int getLeadingMargin(boolean)>(z6);

        i25 = i24 + $i5;

        i26 = i17;

     label12:
        i23 = i23 + 1;

        i24 = i25;

        i17 = i26;

        goto label10;

     label13:
        $r3 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_LEFT>;

        if r25 != $r3 goto label16;

        if i1 != 1 goto label14;

        r29 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_NORMAL>;

        goto label15;

     label14:
        r29 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_OPPOSITE>;

     label15:
        goto label20;

     label16:
        $r4 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_RIGHT>;

        if r25 != $r4 goto label19;

        if i1 != 1 goto label17;

        r29 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_OPPOSITE>;

        goto label18;

     label17:
        r29 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_NORMAL>;

     label18:
        goto label20;

     label19:
        r29 = r25;

     label20:
        $r30 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_NORMAL>;

        if r29 != $r30 goto label22;

        if i1 != 1 goto label21;

        $r10 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_LEFT>;

        i27 = virtualinvoke r0.<android.text.Layout: int getIndentAdjust(int,android.text.Layout$Alignment)>(i15, $r10);

        goto label25;

     label21:
        $r9 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_RIGHT>;

        $i4 = virtualinvoke r0.<android.text.Layout: int getIndentAdjust(int,android.text.Layout$Alignment)>(i15, $r9);

        i27 = neg $i4;

        goto label25;

     label22:
        $r5 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_OPPOSITE>;

        if r29 != $r5 goto label24;

        if i1 != 1 goto label23;

        $r8 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_RIGHT>;

        $i3 = virtualinvoke r0.<android.text.Layout: int getIndentAdjust(int,android.text.Layout$Alignment)>(i15, $r8);

        i27 = neg $i3;

        goto label25;

     label23:
        $r7 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_LEFT>;

        i27 = virtualinvoke r0.<android.text.Layout: int getIndentAdjust(int,android.text.Layout$Alignment)>(i15, $r7);

        goto label25;

     label24:
        $r6 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_CENTER>;

        i27 = virtualinvoke r0.<android.text.Layout: int getIndentAdjust(int,android.text.Layout$Alignment)>(i15, $r6);

     label25:
        $i28 = i18 - i16;

        $i29 = $i28 - i27;

        $f0 = (float) $i29;

        return $f0;
    }

    private float getLineExtent(int, android.text.Layout$TabStops, boolean)
    {
        android.text.Layout r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        android.text.Layout$TabStops r1;
        android.text.Layout$Directions r2;
        android.text.TextLine r3;
        android.text.TextPaint r4, $r5;
        float f0, $f1;
        java.lang.CharSequence $r6;
        boolean $z0, z1, z2;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        r1 := @parameter1: android.text.Layout$TabStops;

        z1 := @parameter2: boolean;

        i1 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>(i0);

        if z1 == 0 goto label1;

        i9 = virtualinvoke r0.<android.text.Layout: int getLineEnd(int)>(i0);

        goto label2;

     label1:
        i9 = virtualinvoke r0.<android.text.Layout: int getLineVisibleEnd(int)>(i0);

     label2:
        z2 = virtualinvoke r0.<android.text.Layout: boolean getLineContainsTab(int)>(i0);

        r2 = virtualinvoke r0.<android.text.Layout: android.text.Layout$Directions getLineDirections(int)>(i0);

        i2 = virtualinvoke r0.<android.text.Layout: int getParagraphDirection(int)>(i0);

        r3 = staticinvoke <android.text.TextLine: android.text.TextLine obtain()>();

        r4 = r0.<android.text.Layout: android.text.TextPaint mWorkPaint>;

        $r5 = r0.<android.text.Layout: android.text.TextPaint mPaint>;

        virtualinvoke r4.<android.text.TextPaint: void set(android.text.TextPaint)>($r5);

        $i3 = virtualinvoke r0.<android.text.Layout: int getStartHyphenEdit(int)>(i0);

        virtualinvoke r4.<android.text.TextPaint: void setStartHyphenEdit(int)>($i3);

        $i4 = virtualinvoke r0.<android.text.Layout: int getEndHyphenEdit(int)>(i0);

        virtualinvoke r4.<android.text.TextPaint: void setEndHyphenEdit(int)>($i4);

        $r6 = r0.<android.text.Layout: java.lang.CharSequence mText>;

        $i5 = virtualinvoke r0.<android.text.Layout: int getEllipsisStart(int)>(i0);

        $i6 = virtualinvoke r0.<android.text.Layout: int getEllipsisStart(int)>(i0);

        $i7 = virtualinvoke r0.<android.text.Layout: int getEllipsisCount(int)>(i0);

        $i8 = $i6 + $i7;

        virtualinvoke r3.<android.text.TextLine: void set(android.text.TextPaint,java.lang.CharSequence,int,int,int,android.text.Layout$Directions,boolean,android.text.Layout$TabStops,int,int)>(r4, $r6, i1, i9, i2, r2, z2, r1, $i5, $i8);

        $z0 = specialinvoke r0.<android.text.Layout: boolean isJustificationRequired(int)>(i0);

        if $z0 == 0 goto label3;

        $f1 = specialinvoke r0.<android.text.Layout: float getJustifyWidth(int)>(i0);

        virtualinvoke r3.<android.text.TextLine: void justify(float)>($f1);

     label3:
        f0 = virtualinvoke r3.<android.text.TextLine: float metrics(android.graphics.Paint$FontMetricsInt)>(null);

        staticinvoke <android.text.TextLine: android.text.TextLine recycle(android.text.TextLine)>(r3);

        return f0;
    }

    private float getLineExtent(int, boolean)
    {
        android.text.Layout r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10;
        android.text.Layout$Directions r1;
        android.text.TextLine r2;
        android.text.TextPaint r3, $r4;
        float f0, $f1;
        java.lang.CharSequence $r5, r10;
        boolean $z0, $z1, z2, z3;
        android.text.Spanned $r7;
        java.lang.Object[] $r8;
        android.text.Layout$TabStops $r9, r12;
        android.text.style.TabStopSpan[] r11;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        z2 := @parameter1: boolean;

        i1 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>(i0);

        if z2 == 0 goto label1;

        i10 = virtualinvoke r0.<android.text.Layout: int getLineEnd(int)>(i0);

        goto label2;

     label1:
        i10 = virtualinvoke r0.<android.text.Layout: int getLineVisibleEnd(int)>(i0);

     label2:
        z3 = virtualinvoke r0.<android.text.Layout: boolean getLineContainsTab(int)>(i0);

        if z3 == 0 goto label3;

        r10 = r0.<android.text.Layout: java.lang.CharSequence mText>;

        $z1 = r10 instanceof android.text.Spanned;

        if $z1 == 0 goto label3;

        $r7 = (android.text.Spanned) r10;

        $r8 = staticinvoke <android.text.Layout: java.lang.Object[] getParagraphSpans(android.text.Spanned,int,int,java.lang.Class)>($r7, i1, i10, class "Landroid/text/style/TabStopSpan;");

        r11 = (android.text.style.TabStopSpan[]) $r8;

        $i9 = lengthof r11;

        if $i9 <= 0 goto label3;

        $r9 = new android.text.Layout$TabStops;

        specialinvoke $r9.<android.text.Layout$TabStops: void <init>(float,java.lang.Object[])>(20.0F, r11);

        r12 = $r9;

        goto label4;

     label3:
        r12 = null;

     label4:
        r1 = virtualinvoke r0.<android.text.Layout: android.text.Layout$Directions getLineDirections(int)>(i0);

        if r1 != null goto label5;

        return 0.0F;

     label5:
        i2 = virtualinvoke r0.<android.text.Layout: int getParagraphDirection(int)>(i0);

        r2 = staticinvoke <android.text.TextLine: android.text.TextLine obtain()>();

        r3 = r0.<android.text.Layout: android.text.TextPaint mWorkPaint>;

        $r4 = r0.<android.text.Layout: android.text.TextPaint mPaint>;

        virtualinvoke r3.<android.text.TextPaint: void set(android.text.TextPaint)>($r4);

        $i3 = virtualinvoke r0.<android.text.Layout: int getStartHyphenEdit(int)>(i0);

        virtualinvoke r3.<android.text.TextPaint: void setStartHyphenEdit(int)>($i3);

        $i4 = virtualinvoke r0.<android.text.Layout: int getEndHyphenEdit(int)>(i0);

        virtualinvoke r3.<android.text.TextPaint: void setEndHyphenEdit(int)>($i4);

        $r5 = r0.<android.text.Layout: java.lang.CharSequence mText>;

        $i5 = virtualinvoke r0.<android.text.Layout: int getEllipsisStart(int)>(i0);

        $i6 = virtualinvoke r0.<android.text.Layout: int getEllipsisStart(int)>(i0);

        $i7 = virtualinvoke r0.<android.text.Layout: int getEllipsisCount(int)>(i0);

        $i8 = $i6 + $i7;

        virtualinvoke r2.<android.text.TextLine: void set(android.text.TextPaint,java.lang.CharSequence,int,int,int,android.text.Layout$Directions,boolean,android.text.Layout$TabStops,int,int)>(r3, $r5, i1, i10, i2, r1, z3, r12, $i5, $i8);

        $z0 = specialinvoke r0.<android.text.Layout: boolean isJustificationRequired(int)>(i0);

        if $z0 == 0 goto label6;

        $f1 = specialinvoke r0.<android.text.Layout: float getJustifyWidth(int)>(i0);

        virtualinvoke r2.<android.text.TextLine: void justify(float)>($f1);

     label6:
        f0 = virtualinvoke r2.<android.text.TextLine: float metrics(android.graphics.Paint$FontMetricsInt)>(null);

        staticinvoke <android.text.TextLine: android.text.TextLine recycle(android.text.TextLine)>(r2);

        return f0;
    }

    private float[] getLineHorizontals(int, boolean, boolean)
    {
        android.text.Layout r0;
        boolean z0, z1, z2, $z3, $z4, $z5;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i9, $i10, i11, i12, $i13, $i14, $i15, $i16, i17, i18, i19, i20, $i21;
        android.text.TextLine r1;
        float f0, $f1, $f2, $f3, $f4, $f5;
        byte $b8;
        android.text.Spanned $r3;
        java.lang.Object[] $r4;
        android.text.Layout$TabStops $r5, r9;
        android.text.Layout$Directions r6;
        java.lang.CharSequence r7, $r11;
        android.text.style.TabStopSpan[] r8;
        android.text.TextPaint $r10;
        boolean[] r12;
        float[] r13, r14;

        r0 := @this: android.text.Layout;

        i11 := @parameter0: int;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        i0 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>(i11);

        i1 = virtualinvoke r0.<android.text.Layout: int getLineEnd(int)>(i11);

        i12 = virtualinvoke r0.<android.text.Layout: int getParagraphDirection(int)>(i11);

        z2 = virtualinvoke r0.<android.text.Layout: boolean getLineContainsTab(int)>(i11);

        r6 = virtualinvoke r0.<android.text.Layout: android.text.Layout$Directions getLineDirections(int)>(i11);

        if z2 == 0 goto label1;

        r7 = r0.<android.text.Layout: java.lang.CharSequence mText>;

        $z5 = r7 instanceof android.text.Spanned;

        if $z5 == 0 goto label1;

        $r3 = (android.text.Spanned) r7;

        $r4 = staticinvoke <android.text.Layout: java.lang.Object[] getParagraphSpans(android.text.Spanned,int,int,java.lang.Class)>($r3, i0, i1, class "Landroid/text/style/TabStopSpan;");

        r8 = (android.text.style.TabStopSpan[]) $r4;

        $i10 = lengthof r8;

        if $i10 <= 0 goto label1;

        $r5 = new android.text.Layout$TabStops;

        specialinvoke $r5.<android.text.Layout$TabStops: void <init>(float,java.lang.Object[])>(20.0F, r8);

        r9 = $r5;

        goto label2;

     label1:
        r9 = null;

     label2:
        r1 = staticinvoke <android.text.TextLine: android.text.TextLine obtain()>();

        $r10 = r0.<android.text.Layout: android.text.TextPaint mPaint>;

        $r11 = r0.<android.text.Layout: java.lang.CharSequence mText>;

        $i13 = virtualinvoke r0.<android.text.Layout: int getEllipsisStart(int)>(i11);

        $i14 = virtualinvoke r0.<android.text.Layout: int getEllipsisStart(int)>(i11);

        $i15 = virtualinvoke r0.<android.text.Layout: int getEllipsisCount(int)>(i11);

        $i16 = $i14 + $i15;

        virtualinvoke r1.<android.text.TextLine: void set(android.text.TextPaint,java.lang.CharSequence,int,int,int,android.text.Layout$Directions,boolean,android.text.Layout$TabStops,int,int)>($r10, $r11, i0, i1, i12, r6, z2, r9, $i13, $i16);

        r12 = virtualinvoke r0.<android.text.Layout: boolean[] primaryIsTrailingPreviousAllLineOffsets(int)>(i11);

        if z1 != 0 goto label4;

        i17 = 0;

     label3:
        $i9 = lengthof r12;

        if i17 >= $i9 goto label4;

        $z3 = r12[i17];

        $z4 = $z3 ^ 1;

        r12[i17] = $z4;

        i17 = i17 + 1;

        goto label3;

     label4:
        r13 = virtualinvoke r1.<android.text.TextLine: float[] measureAllOffsets(boolean[],android.graphics.Paint$FontMetricsInt)>(r12, null);

        staticinvoke <android.text.TextLine: android.text.TextLine recycle(android.text.TextLine)>(r1);

        if z0 == 0 goto label7;

        i18 = 0;

     label5:
        $i7 = lengthof r13;

        if i18 >= $i7 goto label7;

        f0 = r13[i18];

        i2 = r0.<android.text.Layout: int mWidth>;

        $f4 = (float) i2;

        $b8 = f0 cmpl $f4;

        if $b8 <= 0 goto label6;

        $f5 = (float) i2;

        r13[i18] = $f5;

     label6:
        i18 = i18 + 1;

        goto label5;

     label7:
        $i3 = virtualinvoke r0.<android.text.Layout: int getParagraphLeft(int)>(i11);

        $i4 = virtualinvoke r0.<android.text.Layout: int getParagraphRight(int)>(i11);

        i19 = specialinvoke r0.<android.text.Layout: int getLineStartPos(int,int,int)>(i11, $i3, $i4);

        $i5 = i1 - i0;

        $i6 = $i5 + 1;

        r14 = newarray (float)[$i6];

        i20 = 0;

     label8:
        $i21 = lengthof r14;

        if i20 >= $i21 goto label9;

        $f2 = (float) i19;

        $f1 = r13[i20];

        $f3 = $f2 + $f1;

        r14[i20] = $f3;

        i20 = i20 + 1;

        goto label8;

     label9:
        return r14;
    }

    private int getLineStartPos(int, int, int)
    {
        android.text.Layout r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, i18, i19, i20;
        android.text.style.TabStopSpan[] r1;
        android.text.Layout$Alignment $r2, $r3, $r4, $r5, $r6, $r10, $r11, r12, r13, $r14, $r17;
        boolean $z0, $z1;
        java.lang.CharSequence $r7;
        java.lang.Object[] $r8;
        android.text.Layout$TabStops $r9, r15;
        android.text.Spanned r16;
        float $f0;

        r0 := @this: android.text.Layout;

        i17 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r12 = virtualinvoke r0.<android.text.Layout: android.text.Layout$Alignment getParagraphAlignment(int)>(i17);

        i2 = virtualinvoke r0.<android.text.Layout: int getParagraphDirection(int)>(i17);

        $r2 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_LEFT>;

        if r12 != $r2 goto label03;

        if i2 != 1 goto label01;

        r13 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_NORMAL>;

        goto label02;

     label01:
        r13 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_OPPOSITE>;

     label02:
        goto label05;

     label03:
        r13 = r12;

        $r3 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_RIGHT>;

        if r12 != $r3 goto label05;

        if i2 != 1 goto label04;

        r13 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_OPPOSITE>;

        goto label05;

     label04:
        r13 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_NORMAL>;

     label05:
        $r14 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_NORMAL>;

        if r13 != $r14 goto label07;

        if i2 != 1 goto label06;

        $r11 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_LEFT>;

        $i16 = virtualinvoke r0.<android.text.Layout: int getIndentAdjust(int,android.text.Layout$Alignment)>(i17, $r11);

        i18 = $i16 + i0;

        goto label11;

     label06:
        $r10 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_RIGHT>;

        $i15 = virtualinvoke r0.<android.text.Layout: int getIndentAdjust(int,android.text.Layout$Alignment)>(i17, $r10);

        i18 = $i15 + i1;

        goto label11;

     label07:
        r15 = null;

        $z0 = r0.<android.text.Layout: boolean mSpannedText>;

        if $z0 == 0 goto label08;

        r15 = null;

        $z1 = virtualinvoke r0.<android.text.Layout: boolean getLineContainsTab(int)>(i17);

        if $z1 == 0 goto label08;

        $r7 = r0.<android.text.Layout: java.lang.CharSequence mText>;

        r16 = (android.text.Spanned) $r7;

        i19 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>(i17);

        $i12 = interfaceinvoke r16.<android.text.Spanned: int length()>();

        $i13 = interfaceinvoke r16.<android.text.Spanned: int nextSpanTransition(int,int,java.lang.Class)>(i19, $i12, class "Landroid/text/style/TabStopSpan;");

        $r8 = staticinvoke <android.text.Layout: java.lang.Object[] getParagraphSpans(android.text.Spanned,int,int,java.lang.Class)>(r16, i19, $i13, class "Landroid/text/style/TabStopSpan;");

        r1 = (android.text.style.TabStopSpan[]) $r8;

        r15 = null;

        $i14 = lengthof r1;

        if $i14 <= 0 goto label08;

        $r9 = new android.text.Layout$TabStops;

        specialinvoke $r9.<android.text.Layout$TabStops: void <init>(float,java.lang.Object[])>(20.0F, r1);

        r15 = $r9;

     label08:
        $f0 = specialinvoke r0.<android.text.Layout: float getLineExtent(int,android.text.Layout$TabStops,boolean)>(i17, r15, 0);

        i20 = (int) $f0;

        $r17 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_OPPOSITE>;

        if r13 != $r17 goto label10;

        if i2 != 1 goto label09;

        $i10 = i1 - i20;

        $r6 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_RIGHT>;

        $i11 = virtualinvoke r0.<android.text.Layout: int getIndentAdjust(int,android.text.Layout$Alignment)>(i17, $r6);

        i18 = $i10 + $i11;

        goto label11;

     label09:
        $i8 = i0 - i20;

        $r5 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_LEFT>;

        $i9 = virtualinvoke r0.<android.text.Layout: int getIndentAdjust(int,android.text.Layout$Alignment)>(i17, $r5);

        i18 = $i8 + $i9;

        goto label11;

     label10:
        $i4 = i0 + i1;

        $i3 = i20 & -2;

        $i5 = $i4 - $i3;

        $r4 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_CENTER>;

        $i6 = virtualinvoke r0.<android.text.Layout: int getIndentAdjust(int,android.text.Layout$Alignment)>(i17, $r4);

        $i7 = $i6 + 1;

        i18 = $i5 >> $i7;

     label11:
        return i18;
    }

    private int getLineVisibleEnd(int, int, int)
    {
        android.text.Layout r0;
        int i0, i1, i2, $i4, $i5, $i6, $i7, i8;
        java.lang.CharSequence r1;
        char c3;
        boolean $z0;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 = r0.<android.text.Layout: java.lang.CharSequence mText>;

        i8 = i2;

        $i4 = virtualinvoke r0.<android.text.Layout: int getLineCount()>();

        $i5 = $i4 - 1;

        if i0 != $i5 goto label1;

        return i2;

     label1:
        if i8 <= i1 goto label4;

        $i6 = i8 - 1;

        c3 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>($i6);

        if c3 != 10 goto label2;

        $i7 = i8 - 1;

        return $i7;

     label2:
        $z0 = staticinvoke <android.text.TextLine: boolean isLineEndSpace(char)>(c3);

        if $z0 != 0 goto label3;

        goto label4;

     label3:
        i8 = i8 + -1;

        goto label1;

     label4:
        return i8;
    }

    private int getOffsetAtStartOf(int)
    {
        android.text.Layout r0;
        java.lang.CharSequence r1;
        android.text.style.ReplacementSpan[] r2;
        int i0, i1, $i2, $i3, i4, i6, i8, i9, i10;
        android.text.Spanned $r3, $r6, $r8;
        java.lang.Object[] $r4;
        android.text.style.ReplacementSpan $r5, $r7;
        char c5, c7;
        boolean $z0;

        r0 := @this: android.text.Layout;

        i4 := @parameter0: int;

        if i4 != 0 goto label1;

        return 0;

     label1:
        r1 = r0.<android.text.Layout: java.lang.CharSequence mText>;

        c5 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(i4);

        i6 = i4;

        if c5 < 56320 goto label2;

        i6 = i4;

        if c5 > 57343 goto label2;

        $i3 = i4 - 1;

        c7 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>($i3);

        i6 = i4;

        if c7 < 55296 goto label2;

        i6 = i4;

        if c7 > 56319 goto label2;

        i6 = i4 - 1;

     label2:
        i8 = i6;

        $z0 = r0.<android.text.Layout: boolean mSpannedText>;

        if $z0 == 0 goto label5;

        $r3 = (android.text.Spanned) r1;

        $r4 = interfaceinvoke $r3.<android.text.Spanned: java.lang.Object[] getSpans(int,int,java.lang.Class)>(i6, i6, class "Landroid/text/style/ReplacementSpan;");

        r2 = (android.text.style.ReplacementSpan[]) $r4;

        i9 = 0;

     label3:
        i8 = i6;

        $i2 = lengthof r2;

        if i9 >= $i2 goto label5;

        $r6 = (android.text.Spanned) r1;

        $r5 = r2[i9];

        i0 = interfaceinvoke $r6.<android.text.Spanned: int getSpanStart(java.lang.Object)>($r5);

        $r8 = (android.text.Spanned) r1;

        $r7 = r2[i9];

        i1 = interfaceinvoke $r8.<android.text.Spanned: int getSpanEnd(java.lang.Object)>($r7);

        i10 = i6;

        if i0 >= i6 goto label4;

        i10 = i6;

        if i1 <= i6 goto label4;

        i10 = i0;

     label4:
        i9 = i9 + 1;

        i6 = i10;

        goto label3;

     label5:
        return i8;
    }

    private int getOffsetToLeftRightOf(int, boolean)
    {
        android.text.Layout r0;
        boolean z0, z1, z2, z3, z4;
        int i0, i1, i2, $i3, $i4, i5, i6, i7, i8, i9, i10, i11, $i12, $i13, $i14, $i15, $i16, i17, $i18;
        android.text.Layout$Directions r1;
        android.text.TextLine r2;
        android.text.TextPaint $r4;
        java.lang.CharSequence $r5;

        r0 := @this: android.text.Layout;

        i5 := @parameter0: int;

        z0 := @parameter1: boolean;

        i6 = virtualinvoke r0.<android.text.Layout: int getLineForOffset(int)>(i5);

        i7 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>(i6);

        i8 = virtualinvoke r0.<android.text.Layout: int getLineEnd(int)>(i6);

        i0 = virtualinvoke r0.<android.text.Layout: int getParagraphDirection(int)>(i6);

        z1 = 0;

        z2 = 0;

        if i0 != -1 goto label1;

        z3 = 1;

        goto label2;

     label1:
        z3 = 0;

     label2:
        if z0 != z3 goto label3;

        z2 = 1;

     label3:
        if z2 == 0 goto label5;

        i9 = i6;

        if i5 != i8 goto label7;

        $i3 = virtualinvoke r0.<android.text.Layout: int getLineCount()>();

        $i4 = $i3 - 1;

        if i6 >= $i4 goto label4;

        z1 = 1;

        i9 = i6 + 1;

        goto label7;

     label4:
        return i5;

     label5:
        i9 = i6;

        if i5 != i7 goto label7;

        if i6 <= 0 goto label6;

        z1 = 1;

        i9 = i6 - 1;

        goto label7;

     label6:
        return i5;

     label7:
        z4 = z0;

        i10 = i0;

        if z1 == 0 goto label8;

        i1 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>(i9);

        i11 = virtualinvoke r0.<android.text.Layout: int getLineEnd(int)>(i9);

        i2 = virtualinvoke r0.<android.text.Layout: int getParagraphDirection(int)>(i9);

        z4 = z0;

        i7 = i1;

        i8 = i11;

        i10 = i0;

        if i2 == i0 goto label8;

        z4 = z0 ^ 1;

        i10 = i2;

        i8 = i11;

        i7 = i1;

     label8:
        r1 = virtualinvoke r0.<android.text.Layout: android.text.Layout$Directions getLineDirections(int)>(i9);

        r2 = staticinvoke <android.text.TextLine: android.text.TextLine obtain()>();

        $r4 = r0.<android.text.Layout: android.text.TextPaint mPaint>;

        $r5 = r0.<android.text.Layout: java.lang.CharSequence mText>;

        $i12 = virtualinvoke r0.<android.text.Layout: int getEllipsisStart(int)>(i9);

        $i13 = virtualinvoke r0.<android.text.Layout: int getEllipsisStart(int)>(i9);

        $i14 = virtualinvoke r0.<android.text.Layout: int getEllipsisCount(int)>(i9);

        $i15 = $i13 + $i14;

        virtualinvoke r2.<android.text.TextLine: void set(android.text.TextPaint,java.lang.CharSequence,int,int,int,android.text.Layout$Directions,boolean,android.text.Layout$TabStops,int,int)>($r4, $r5, i7, i8, i10, r1, 0, null, $i12, $i15);

        $i16 = i5 - i7;

        i17 = virtualinvoke r2.<android.text.TextLine: int getOffsetToLeftRightOf(int,boolean)>($i16, z4);

        staticinvoke <android.text.TextLine: android.text.TextLine recycle(android.text.TextLine)>(r2);

        $i18 = i17 + i7;

        return $i18;
    }

    private int getParagraphLeadingMargin(int)
    {
        android.text.Layout r0;
        android.text.Spanned r1;
        android.text.style.LeadingMarginSpan[] r2;
        boolean $z0, $z1, z2, z3, z4;
        java.lang.CharSequence $r3;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i12, i13, i14, $i15, i16, i17;
        java.lang.Object[] $r4;
        android.text.style.LeadingMarginSpan $r5, $r6, $r7, $r8;
        android.text.style.LeadingMarginSpan$LeadingMarginSpan2 $r9;
        char $c11;

        r0 := @this: android.text.Layout;

        i12 := @parameter0: int;

        $z0 = r0.<android.text.Layout: boolean mSpannedText>;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        $r3 = r0.<android.text.Layout: java.lang.CharSequence mText>;

        r1 = (android.text.Spanned) $r3;

        i13 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>(i12);

        $i1 = virtualinvoke r0.<android.text.Layout: int getLineEnd(int)>(i12);

        $i2 = interfaceinvoke r1.<android.text.Spanned: int nextSpanTransition(int,int,java.lang.Class)>(i13, $i1, class "Landroid/text/style/LeadingMarginSpan;");

        $r4 = staticinvoke <android.text.Layout: java.lang.Object[] getParagraphSpans(android.text.Spanned,int,int,java.lang.Class)>(r1, i13, $i2, class "Landroid/text/style/LeadingMarginSpan;");

        r2 = (android.text.style.LeadingMarginSpan[]) $r4;

        $i3 = lengthof r2;

        if $i3 != 0 goto label02;

        return 0;

     label02:
        if i13 == 0 goto label04;

        $i10 = i13 - 1;

        $c11 = interfaceinvoke r1.<android.text.Spanned: char charAt(int)>($i10);

        if $c11 != 10 goto label03;

        goto label04;

     label03:
        z2 = 0;

        goto label05;

     label04:
        z2 = 1;

     label05:
        i14 = 0;

     label06:
        $i15 = lengthof r2;

        if i14 >= $i15 goto label10;

        z3 = z2;

        $r6 = r2[i14];

        $z1 = $r6 instanceof android.text.style.LeadingMarginSpan$LeadingMarginSpan2;

        if $z1 == 0 goto label09;

        $r7 = r2[i14];

        $i6 = interfaceinvoke r1.<android.text.Spanned: int getSpanStart(java.lang.Object)>($r7);

        $i7 = virtualinvoke r0.<android.text.Layout: int getLineForOffset(int)>($i6);

        $r8 = r2[i14];

        $r9 = (android.text.style.LeadingMarginSpan$LeadingMarginSpan2) $r8;

        $i8 = interfaceinvoke $r9.<android.text.style.LeadingMarginSpan$LeadingMarginSpan2: int getLeadingMarginLineCount()>();

        $i9 = $i7 + $i8;

        if i12 >= $i9 goto label07;

        z4 = 1;

        goto label08;

     label07:
        z4 = 0;

     label08:
        z3 = z2 | z4;

     label09:
        i14 = i14 + 1;

        z2 = z3;

        goto label06;

     label10:
        i16 = 0;

        i17 = 0;

     label11:
        $i4 = lengthof r2;

        if i16 >= $i4 goto label12;

        $r5 = r2[i16];

        $i5 = interfaceinvoke $r5.<android.text.style.LeadingMarginSpan: int getLeadingMargin(boolean)>(z2);

        i17 = i17 + $i5;

        i16 = i16 + 1;

        goto label11;

     label12:
        return i17;
    }

    static java.lang.Object[] getParagraphSpans(android.text.Spanned, int, int, java.lang.Class)
    {
        android.text.Spanned r0;
        int i0, i1;
        java.lang.Class r1;
        boolean $z0;
        java.lang.Object[] $r2, $r4, $r5;
        android.text.SpannableStringBuilder $r3;

        r0 := @parameter0: android.text.Spanned;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.lang.Class;

        if i0 != i1 goto label1;

        if i0 <= 0 goto label1;

        $r5 = staticinvoke <com.android.internal.util.ArrayUtils: java.lang.Object[] emptyArray(java.lang.Class)>(r1);

        return $r5;

     label1:
        $z0 = r0 instanceof android.text.SpannableStringBuilder;

        if $z0 == 0 goto label2;

        $r3 = (android.text.SpannableStringBuilder) r0;

        $r4 = virtualinvoke $r3.<android.text.SpannableStringBuilder: java.lang.Object[] getSpans(int,int,java.lang.Class,boolean)>(i0, i1, r1, 0);

        return $r4;

     label2:
        $r2 = interfaceinvoke r0.<android.text.Spanned: java.lang.Object[] getSpans(int,int,java.lang.Class)>(i0, i1, r1);

        return $r2;
    }

    private boolean isJustificationRequired(int)
    {
        android.text.Layout r0;
        int i0, $i1, $i2, i4, i5;
        java.lang.CharSequence $r1, $r2;
        char $c3;
        boolean z1;

        r0 := @this: android.text.Layout;

        i4 := @parameter0: int;

        i0 = r0.<android.text.Layout: int mJustificationMode>;

        if i0 != 0 goto label1;

        return 0;

     label1:
        i5 = virtualinvoke r0.<android.text.Layout: int getLineEnd(int)>(i4);

        z1 = 0;

        $r1 = r0.<android.text.Layout: java.lang.CharSequence mText>;

        $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        if i5 >= $i1 goto label2;

        z1 = 0;

        $r2 = r0.<android.text.Layout: java.lang.CharSequence mText>;

        $i2 = i5 - 1;

        $c3 = interfaceinvoke $r2.<java.lang.CharSequence: char charAt(int)>($i2);

        if $c3 == 10 goto label2;

        z1 = 1;

     label2:
        return z1;
    }

    static void lambda$getSelectionPath$0(android.graphics.Path, float, float, float, float, int)
    {
        android.graphics.Path r0;
        float f0, f1, f2, f3;
        int i0;
        android.graphics.Path$Direction $r1;

        r0 := @parameter0: android.graphics.Path;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        f2 := @parameter3: float;

        f3 := @parameter4: float;

        i0 := @parameter5: int;

        $r1 = <android.graphics.Path$Direction: android.graphics.Path$Direction CW>;

        virtualinvoke r0.<android.graphics.Path: void addRect(float,float,float,float,android.graphics.Path$Direction)>(f0, f1, f2, f3, $r1);

        return;
    }

    private static float measurePara(android.text.TextPaint, java.lang.CharSequence, int, int, android.text.TextDirectionHeuristic)
    {
        int i0, i1, i2, i3, i4, $i6, $i7, $i8, i9, i10, i11;
        android.text.TextLine r0;
        char[] r1;
        android.text.Layout$Directions r2;
        boolean z0, $z1, z2;
        float f0, f1, $f2, $f3;
        char $c5;
        java.lang.Object[] $r3, $r6;
        android.text.Layout$TabStops $r4, r16;
        android.text.Spanned $r5, r20;
        android.text.style.LeadingMarginSpan $r7;
        java.lang.Throwable $r8, $r9, $r10, $r11, r18;
        android.text.TextPaint r12;
        java.lang.CharSequence r13;
        android.text.TextDirectionHeuristic r14;
        android.text.MeasuredParagraph r15, r19;
        android.text.style.LeadingMarginSpan[] r17;
        android.text.style.TabStopSpan[] r21;

        r12 := @parameter0: android.text.TextPaint;

        r13 := @parameter1: java.lang.CharSequence;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r14 := @parameter4: android.text.TextDirectionHeuristic;

        r0 = staticinvoke <android.text.TextLine: android.text.TextLine obtain()>();

     label01:
        r15 = staticinvoke <android.text.MeasuredParagraph: android.text.MeasuredParagraph buildForBidi(java.lang.CharSequence,int,int,android.text.TextDirectionHeuristic,android.text.MeasuredParagraph)>(r13, i0, i1, r14, null);

     label02:
        r1 = virtualinvoke r15.<android.text.MeasuredParagraph: char[] getChars()>();

        i2 = lengthof r1;

        r2 = virtualinvoke r15.<android.text.MeasuredParagraph: android.text.Layout$Directions getDirections(int,int)>(0, i2);

        i3 = virtualinvoke r15.<android.text.MeasuredParagraph: int getParagraphDir()>();

     label03:
        z2 = 0;

        r16 = null;

     label04:
        z0 = r13 instanceof android.text.Spanned;

     label05:
        if z0 == 0 goto label13;

     label06:
        $r5 = (android.text.Spanned) r13;

        $r6 = staticinvoke <android.text.Layout: java.lang.Object[] getParagraphSpans(android.text.Spanned,int,int,java.lang.Class)>($r5, i0, i1, class "Landroid/text/style/LeadingMarginSpan;");

        r17 = (android.text.style.LeadingMarginSpan[]) $r6;

        i4 = lengthof r17;

     label07:
        i9 = 0;

        i10 = 0;

     label08:
        if i10 >= i4 goto label11;

     label09:
        $r7 = r17[i10];

        $i8 = interfaceinvoke $r7.<android.text.style.LeadingMarginSpan: int getLeadingMargin(boolean)>(1);

        i9 = i9 + $i8;

     label10:
        i10 = i10 + 1;

        goto label08;

     label11:
        goto label14;

     label12:
        $r8 := @caughtexception;

        r18 = $r8;

        r19 = r15;

        goto label32;

     label13:
        z2 = 0;

        i9 = 0;

     label14:
        i11 = 0;

     label15:
        if i11 >= i2 goto label23;

        $c5 = r1[i11];

        if $c5 != 9 goto label22;

     label16:
        $z1 = r13 instanceof android.text.Spanned;

        if $z1 == 0 goto label21;

        r20 = (android.text.Spanned) r13;

        $i6 = interfaceinvoke r20.<android.text.Spanned: int nextSpanTransition(int,int,java.lang.Class)>(i0, i1, class "Landroid/text/style/TabStopSpan;");

        $r3 = staticinvoke <android.text.Layout: java.lang.Object[] getParagraphSpans(android.text.Spanned,int,int,java.lang.Class)>(r20, i0, $i6, class "Landroid/text/style/TabStopSpan;");

        r21 = (android.text.style.TabStopSpan[]) $r3;

     label17:
        z2 = 1;

     label18:
        $i7 = lengthof r21;

        if $i7 <= 0 goto label20;

        $r4 = new android.text.Layout$TabStops;

        specialinvoke $r4.<android.text.Layout$TabStops: void <init>(float,java.lang.Object[])>(20.0F, r21);

        r16 = $r4;

     label19:
        goto label20;

     label20:
        goto label24;

     label21:
        z2 = 1;

        r16 = null;

        goto label24;

     label22:
        i11 = i11 + 1;

        goto label15;

     label23:
        r16 = null;

     label24:
        virtualinvoke r0.<android.text.TextLine: void set(android.text.TextPaint,java.lang.CharSequence,int,int,int,android.text.Layout$Directions,boolean,android.text.Layout$TabStops,int,int)>(r12, r13, i0, i1, i3, r2, z2, r16, 0, 0);

     label25:
        f0 = (float) i9;

     label26:
        $f3 = virtualinvoke r0.<android.text.TextLine: float metrics(android.graphics.Paint$FontMetricsInt)>(null);

        f1 = staticinvoke <java.lang.Math: float abs(float)>($f3);

     label27:
        staticinvoke <android.text.TextLine: android.text.TextLine recycle(android.text.TextLine)>(r0);

        if r15 == null goto label28;

        virtualinvoke r15.<android.text.MeasuredParagraph: void recycle()>();

     label28:
        $f2 = f0 + f1;

        return $f2;

     label29:
        $r11 := @caughtexception;

        r18 = $r11;

        r19 = r15;

        goto label32;

     label30:
        $r9 := @caughtexception;

        r18 = $r9;

        r19 = r15;

        goto label32;

     label31:
        $r10 := @caughtexception;

        r18 = $r10;

        r19 = null;

     label32:
        staticinvoke <android.text.TextLine: android.text.TextLine recycle(android.text.TextLine)>(r0);

        if r19 == null goto label33;

        virtualinvoke r19.<android.text.MeasuredParagraph: void recycle()>();

     label33:
        throw r18;

        catch java.lang.Throwable from label01 to label02 with label31;
        catch java.lang.Throwable from label02 to label03 with label30;
        catch java.lang.Throwable from label04 to label05 with label30;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label16 to label17 with label12;
        catch java.lang.Throwable from label18 to label19 with label12;
        catch java.lang.Throwable from label24 to label25 with label29;
        catch java.lang.Throwable from label26 to label27 with label29;
    }

    static float nextTab(java.lang.CharSequence, int, int, float, java.lang.Object[])
    {
        java.lang.CharSequence r0;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, f7, f8;
        java.lang.Object[] r1, r6;
        boolean $z0, $z1, z2;
        int $i0, i4, i5, i6, $i7, i8;
        byte $b1, $b2, $b3;
        java.lang.Object $r2, $r4;
        android.text.style.TabStopSpan $r3;
        android.text.Spanned $r5;

        r0 := @parameter0: java.lang.CharSequence;

        i4 := @parameter1: int;

        i5 := @parameter2: int;

        f0 := @parameter3: float;

        r1 := @parameter4: java.lang.Object[];

        f7 = 3.4028235E38F;

        z2 = 0;

        $z0 = r0 instanceof android.text.Spanned;

        if $z0 == 0 goto label6;

        r6 = r1;

        if r1 != null goto label1;

        $r5 = (android.text.Spanned) r0;

        r6 = staticinvoke <android.text.Layout: java.lang.Object[] getParagraphSpans(android.text.Spanned,int,int,java.lang.Class)>($r5, i4, i5, class "Landroid/text/style/TabStopSpan;");

        z2 = 1;

     label1:
        i6 = 0;

     label2:
        $i7 = lengthof r6;

        if i6 >= $i7 goto label5;

        if z2 != 0 goto label3;

        $r4 = r6[i6];

        $z1 = $r4 instanceof android.text.style.TabStopSpan;

        if $z1 != 0 goto label3;

        f8 = f7;

        goto label4;

     label3:
        $r2 = r6[i6];

        $r3 = (android.text.style.TabStopSpan) $r2;

        i8 = interfaceinvoke $r3.<android.text.style.TabStopSpan: int getTabStop()>();

        f8 = f7;

        $f5 = (float) i8;

        $b2 = $f5 cmpg f7;

        if $b2 >= 0 goto label4;

        f8 = f7;

        $f6 = (float) i8;

        $b3 = $f6 cmpl f0;

        if $b3 <= 0 goto label4;

        f8 = (float) i8;

     label4:
        i6 = i6 + 1;

        f7 = f8;

        goto label2;

     label5:
        $b1 = f7 cmpl 3.4028235E38F;

        if $b1 == 0 goto label6;

        return f7;

     label6:
        $f1 = f0 + 20.0F;

        $f2 = $f1 / 20.0F;

        $i0 = (int) $f2;

        $f3 = (float) $i0;

        $f4 = $f3 * 20.0F;

        return $f4;
    }

    public void draw(android.graphics.Canvas)
    {
        android.text.Layout r0;
        android.graphics.Canvas r1;

        r0 := @this: android.text.Layout;

        r1 := @parameter0: android.graphics.Canvas;

        virtualinvoke r0.<android.text.Layout: void draw(android.graphics.Canvas,android.graphics.Path,android.graphics.Paint,int)>(r1, null, null, 0);

        return;
    }

    public void draw(android.graphics.Canvas, android.graphics.Path, android.graphics.Paint, int)
    {
        android.text.Layout r0;
        android.graphics.Canvas r1;
        android.graphics.Path r2;
        android.graphics.Paint r3;
        int i0, i2, i3;
        long l1;

        r0 := @this: android.text.Layout;

        r1 := @parameter0: android.graphics.Canvas;

        r2 := @parameter1: android.graphics.Path;

        r3 := @parameter2: android.graphics.Paint;

        i0 := @parameter3: int;

        l1 = virtualinvoke r0.<android.text.Layout: long getLineRangeForDraw(android.graphics.Canvas)>(r1);

        i2 = staticinvoke <android.text.TextUtils: int unpackRangeStartFromLong(long)>(l1);

        i3 = staticinvoke <android.text.TextUtils: int unpackRangeEndFromLong(long)>(l1);

        if i3 >= 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<android.text.Layout: void drawBackground(android.graphics.Canvas,android.graphics.Path,android.graphics.Paint,int,int,int)>(r1, r2, r3, i0, i2, i3);

        virtualinvoke r0.<android.text.Layout: void drawText(android.graphics.Canvas,int,int)>(r1, i2, i3);

        return;
    }

    public void drawBackground(android.graphics.Canvas, android.graphics.Path, android.graphics.Paint, int, int, int)
    {
        android.text.Layout r0;
        android.graphics.Canvas r1;
        android.graphics.Path r2;
        android.graphics.Paint r3;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, i15, i17, i18, i19, i20, i21, i23, i24, i25, i26, $i27, i28, i30, i31, i33;
        android.text.Spanned r4;
        android.text.TextPaint r5;
        boolean $z0;
        float $f0, $f1;
        android.text.SpanSet $r6, $r8, $r9, $r10, $r13, $r14, $r16, $r18, $r23, $r25;
        java.lang.CharSequence $r7;
        android.text.style.ParagraphStyle $r11;
        android.text.style.LineBackgroundSpan $r12, $r21;
        int[] $r15, $r17;
        java.lang.Object[] $r19, $r22;
        android.text.style.LineBackgroundSpan[] $r20;
        android.text.style.ParagraphStyle[] r24, r26;

        r0 := @this: android.text.Layout;

        r1 := @parameter0: android.graphics.Canvas;

        r2 := @parameter1: android.graphics.Path;

        r3 := @parameter2: android.graphics.Paint;

        i0 := @parameter3: int;

        i13 := @parameter4: int;

        i1 := @parameter5: int;

        $z0 = r0.<android.text.Layout: boolean mSpannedText>;

        if $z0 == 0 goto label15;

        $r6 = r0.<android.text.Layout: android.text.SpanSet mLineBackgroundSpans>;

        if $r6 != null goto label01;

        $r23 = new android.text.SpanSet;

        specialinvoke $r23.<android.text.SpanSet: void <init>(java.lang.Class)>(class "Landroid/text/style/LineBackgroundSpan;");

        r0.<android.text.Layout: android.text.SpanSet mLineBackgroundSpans> = $r23;

     label01:
        $r7 = r0.<android.text.Layout: java.lang.CharSequence mText>;

        r4 = (android.text.Spanned) $r7;

        i2 = interfaceinvoke r4.<android.text.Spanned: int length()>();

        $r8 = r0.<android.text.Layout: android.text.SpanSet mLineBackgroundSpans>;

        virtualinvoke $r8.<android.text.SpanSet: void init(android.text.Spanned,int,int)>(r4, 0, i2);

        $r9 = r0.<android.text.Layout: android.text.SpanSet mLineBackgroundSpans>;

        $i7 = $r9.<android.text.SpanSet: int numberOfSpans>;

        if $i7 <= 0 goto label14;

        i14 = virtualinvoke r0.<android.text.Layout: int getLineTop(int)>(i13);

        i15 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>(i13);

        r24 = <android.text.Layout: android.text.style.ParagraphStyle[] NO_PARA_SPANS>;

        r5 = r0.<android.text.Layout: android.text.TextPaint mPaint>;

        i17 = 0;

        i3 = r0.<android.text.Layout: int mWidth>;

        i18 = i13;

        i19 = 0;

     label02:
        if i18 > i1 goto label13;

        $i8 = i18 + 1;

        i20 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>($i8);

        $i9 = i18 + 1;

        i4 = virtualinvoke r0.<android.text.Layout: int getLineTop(int)>($i9);

        i5 = virtualinvoke r0.<android.text.Layout: int getLineDescent(int)>(i18);

        if i20 < i17 goto label09;

        $r13 = r0.<android.text.Layout: android.text.SpanSet mLineBackgroundSpans>;

        i21 = virtualinvoke $r13.<android.text.SpanSet: int getNextTransition(int,int)>(i15, i2);

        if i15 != i20 goto label04;

        if i15 != 0 goto label03;

        goto label04;

     label03:
        i23 = 0;

        goto label10;

     label04:
        i24 = i21;

        i25 = 0;

        i26 = 0;

     label05:
        $r25 = r0.<android.text.Layout: android.text.SpanSet mLineBackgroundSpans>;

        $i27 = $r25.<android.text.SpanSet: int numberOfSpans>;

        if i25 >= $i27 goto label08;

        r26 = r24;

        i28 = i26;

        $r14 = r0.<android.text.Layout: android.text.SpanSet mLineBackgroundSpans>;

        $r15 = $r14.<android.text.SpanSet: int[] spanStarts>;

        $i11 = $r15[i25];

        if $i11 >= i20 goto label07;

        $r16 = r0.<android.text.Layout: android.text.SpanSet mLineBackgroundSpans>;

        $r17 = $r16.<android.text.SpanSet: int[] spanEnds>;

        $i12 = $r17[i25];

        if $i12 > i15 goto label06;

        r26 = r24;

        i28 = i26;

        goto label07;

     label06:
        $r18 = r0.<android.text.Layout: android.text.SpanSet mLineBackgroundSpans>;

        $r19 = $r18.<android.text.SpanSet: java.lang.Object[] spans>;

        $r20 = (android.text.style.LineBackgroundSpan[]) $r19;

        $r21 = $r20[i25];

        $r22 = staticinvoke <com.android.internal.util.GrowingArrayUtils: java.lang.Object[] append(java.lang.Object[],int,java.lang.Object)>(r24, i26, $r21);

        r26 = (android.text.style.ParagraphStyle[]) $r22;

        i28 = i26 + 1;

     label07:
        i25 = i25 + 1;

        r24 = r26;

        i26 = i28;

        goto label05;

     label08:
        i23 = i26;

        i21 = i24;

        goto label10;

     label09:
        i23 = i19;

        i21 = i17;

     label10:
        i30 = 0;

        i31 = i18;

     label11:
        if i30 >= i23 goto label12;

        $r11 = r24[i30];

        $r12 = (android.text.style.LineBackgroundSpan) $r11;

        $i10 = i4 - i5;

        interfaceinvoke $r12.<android.text.style.LineBackgroundSpan: void drawBackground(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,int)>(r1, r5, 0, i3, i14, $i10, i4, r4, i15, i20, i31);

        i30 = i30 + 1;

        goto label11;

     label12:
        i33 = i31 + 1;

        i15 = i20;

        i14 = i4;

        i19 = i23;

        i17 = i21;

        i18 = i33;

        goto label02;

     label13:
        goto label14;

     label14:
        $r10 = r0.<android.text.Layout: android.text.SpanSet mLineBackgroundSpans>;

        virtualinvoke $r10.<android.text.SpanSet: void recycle()>();

     label15:
        if r2 == null goto label17;

        if i0 == 0 goto label16;

        $f1 = (float) i0;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>(0.0F, $f1);

     label16:
        virtualinvoke r1.<android.graphics.Canvas: void drawPath(android.graphics.Path,android.graphics.Paint)>(r2, r3);

        if i0 == 0 goto label17;

        $i6 = neg i0;

        $f0 = (float) $i6;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>(0.0F, $f0);

     label17:
        return;
    }

    public void drawText(android.graphics.Canvas, int, int)
    {
        android.text.Layout r0, r23, r39, r42;
        android.graphics.Canvas r1;
        int i0, i1, i2, i3, i4, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i41, i43, i44, i45, i46, i49, i51, i52, i53, i54, i55, i59, i60, i61, i62, i63, i64, i65, i66, $i67, $i68, $i69, $i70;
        boolean z0, $z1, $z2, $z3, $z4, z5, z6, z7, z8, z9, z10;
        android.text.TextPaint $r3, r25, r34;
        android.text.Layout$Alignment $r5, $r6, $r7, $r8, $r9, $r10, $r11, r27, r32, r43, $r47, r48, $r49;
        float $f0, $f1, $f2, $f3, $f4;
        android.text.Layout$TabStops $r12, r29, r36, r40;
        android.text.style.ParagraphStyle $r13, $r14, $r15, $r16, $r18, $r20, $r21;
        android.text.style.LeadingMarginSpan$LeadingMarginSpan2 $r17;
        java.lang.Object[] $r19;
        android.text.style.AlignmentSpan $r22;
        char $c27;
        android.text.style.ParagraphStyle[] r24, r31, r37;
        java.lang.CharSequence r26, r35;
        android.text.TextLine r28, r44;
        android.text.Spanned r30;
        android.text.style.LeadingMarginSpan r38;
        android.text.Layout$Directions r50, $r51;

        r0 := @this: android.text.Layout;

        r1 := @parameter0: android.graphics.Canvas;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r23 = r0;

        i29 = virtualinvoke r0.<android.text.Layout: int getLineTop(int)>(i0);

        i30 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>(i0);

        r24 = <android.text.Layout: android.text.style.ParagraphStyle[] NO_PARA_SPANS>;

        i31 = 0;

        r25 = r0.<android.text.Layout: android.text.TextPaint mWorkPaint>;

        $r3 = r0.<android.text.Layout: android.text.TextPaint mPaint>;

        virtualinvoke r25.<android.text.TextPaint: void set(android.text.TextPaint)>($r3);

        r26 = r0.<android.text.Layout: java.lang.CharSequence mText>;

        r27 = r0.<android.text.Layout: android.text.Layout$Alignment mAlignment>;

        z5 = 0;

        r28 = staticinvoke <android.text.TextLine: android.text.TextLine obtain()>();

        r29 = null;

        i32 = i0;

     label01:
        if i32 > i1 goto label41;

        $i6 = i32 + 1;

        i2 = virtualinvoke r23.<android.text.Layout: int getLineStart(int)>($i6);

        z0 = specialinvoke r23.<android.text.Layout: boolean isJustificationRequired(int)>(i32);

        i3 = specialinvoke r23.<android.text.Layout: int getLineVisibleEnd(int,int,int)>(i32, i30, i2);

        $i7 = virtualinvoke r23.<android.text.Layout: int getStartHyphenEdit(int)>(i32);

        virtualinvoke r25.<android.text.TextPaint: void setStartHyphenEdit(int)>($i7);

        $i8 = virtualinvoke r23.<android.text.Layout: int getEndHyphenEdit(int)>(i32);

        virtualinvoke r25.<android.text.TextPaint: void setEndHyphenEdit(int)>($i8);

        $i9 = i32 + 1;

        i4 = virtualinvoke r23.<android.text.Layout: int getLineTop(int)>($i9);

        i33 = virtualinvoke r23.<android.text.Layout: int getLineDescent(int)>(i32);

        i34 = virtualinvoke r23.<android.text.Layout: int getParagraphDirection(int)>(i32);

        i35 = i4 - i33;

        i36 = r23.<android.text.Layout: int mWidth>;

        z6 = r23.<android.text.Layout: boolean mSpannedText>;

        if z6 == 0 goto label20;

        r30 = (android.text.Spanned) r26;

        i37 = interfaceinvoke r26.<java.lang.CharSequence: int length()>();

        if i30 == 0 goto label03;

        $i26 = i30 - 1;

        $c27 = interfaceinvoke r26.<java.lang.CharSequence: char charAt(int)>($i26);

        if $c27 != 10 goto label02;

        goto label03;

     label02:
        z7 = 0;

        goto label04;

     label03:
        z7 = 1;

     label04:
        if i30 < i31 goto label10;

        if i32 == i0 goto label06;

        if z7 == 0 goto label05;

        goto label06;

     label05:
        goto label10;

     label06:
        i31 = interfaceinvoke r30.<android.text.Spanned: int nextSpanTransition(int,int,java.lang.Class)>(i30, i37, class "Landroid/text/style/ParagraphStyle;");

        $r19 = staticinvoke <android.text.Layout: java.lang.Object[] getParagraphSpans(android.text.Spanned,int,int,java.lang.Class)>(r30, i30, i31, class "Landroid/text/style/ParagraphStyle;");

        r31 = (android.text.style.ParagraphStyle[]) $r19;

        r32 = r23.<android.text.Layout: android.text.Layout$Alignment mAlignment>;

        $i25 = lengthof r31;

        i38 = $i25 - 1;

     label07:
        if i38 < 0 goto label09;

        $r20 = r31[i38];

        $z4 = $r20 instanceof android.text.style.AlignmentSpan;

        if $z4 == 0 goto label08;

        $r21 = r31[i38];

        $r22 = (android.text.style.AlignmentSpan) $r21;

        r32 = interfaceinvoke $r22.<android.text.style.AlignmentSpan: android.text.Layout$Alignment getAlignment()>();

        goto label09;

     label08:
        i38 = i38 + -1;

        goto label07;

     label09:
        z5 = 0;

        goto label11;

     label10:
        r31 = r24;

        r32 = r27;

     label11:
        i39 = lengthof r31;

        z8 = z7;

        i40 = 0;

     label12:
        if i40 >= i39 goto label14;

        $r15 = r31[i40];

        $z3 = $r15 instanceof android.text.style.LeadingMarginSpan$LeadingMarginSpan2;

        if $z3 == 0 goto label13;

        $r16 = r31[i40];

        $r17 = (android.text.style.LeadingMarginSpan$LeadingMarginSpan2) $r16;

        i41 = interfaceinvoke $r17.<android.text.style.LeadingMarginSpan$LeadingMarginSpan2: int getLeadingMarginLineCount()>();

        $r18 = r31[i40];

        $i22 = interfaceinvoke r30.<android.text.Spanned: int getSpanStart(java.lang.Object)>($r18);

        $i23 = virtualinvoke r23.<android.text.Layout: int getLineForOffset(int)>($i22);

        $i24 = $i23 + i41;

        if i32 >= $i24 goto label13;

        z8 = 1;

        goto label14;

     label13:
        i40 = i40 + 1;

        goto label12;

     label14:
        i43 = i36;

        i44 = 0;

        i45 = i29;

        i46 = i35;

        r34 = r25;

        r35 = r26;

        r36 = r29;

        r37 = r31;

        i49 = 0;

     label15:
        if i49 >= i39 goto label19;

        $r13 = r37[i49];

        $z2 = $r13 instanceof android.text.style.LeadingMarginSpan;

        if $z2 == 0 goto label17;

        $r14 = r37[i49];

        r38 = (android.text.style.LeadingMarginSpan) $r14;

        if i34 != -1 goto label16;

        interfaceinvoke r38.<android.text.style.LeadingMarginSpan: void drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,boolean,android.text.Layout)>(r1, r34, i43, i34, i45, i46, i4, r35, i30, i3, z7, r0);

        $i21 = interfaceinvoke r38.<android.text.style.LeadingMarginSpan: int getLeadingMargin(boolean)>(z8);

        i43 = i43 - $i21;

        r39 = r0;

        goto label18;

     label16:
        r39 = r0;

        interfaceinvoke r38.<android.text.style.LeadingMarginSpan: void drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,boolean,android.text.Layout)>(r1, r34, i44, i34, i45, i46, i4, r35, i30, i3, z7, r0);

        $i20 = interfaceinvoke r38.<android.text.style.LeadingMarginSpan: int getLeadingMargin(boolean)>(z8);

        i44 = i44 + $i20;

        goto label18;

     label17:
        r39 = r23;

     label18:
        i49 = i49 + 1;

        r23 = r39;

        goto label15;

     label19:
        r40 = r36;

        r26 = r35;

        i35 = i46;

        i29 = i45;

        r42 = r23;

        i51 = i31;

        r43 = r32;

        i52 = i34;

        i53 = i44;

        i54 = i30;

        i55 = i32;

        r44 = r28;

        goto label21;

     label20:
        i55 = i32;

        i53 = 0;

        r44 = r28;

        r40 = r29;

        i54 = i30;

        i43 = i36;

        i52 = i34;

        r43 = r27;

        i51 = i31;

        r42 = r23;

        r37 = r24;

        r34 = r25;

     label21:
        z9 = virtualinvoke r42.<android.text.Layout: boolean getLineContainsTab(int)>(i55);

        if z9 == 0 goto label24;

        if z5 != 0 goto label24;

        if r40 != null goto label22;

        $r12 = new android.text.Layout$TabStops;

        specialinvoke $r12.<android.text.Layout$TabStops: void <init>(float,java.lang.Object[])>(20.0F, r37);

        r40 = $r12;

        goto label23;

     label22:
        virtualinvoke r40.<android.text.Layout$TabStops: void reset(float,java.lang.Object[])>(20.0F, r37);

     label23:
        z10 = 1;

        goto label25;

     label24:
        z10 = z5;

     label25:
        $r47 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_LEFT>;

        if r43 != $r47 goto label28;

        if i52 != 1 goto label26;

        r48 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_NORMAL>;

        goto label27;

     label26:
        r48 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_OPPOSITE>;

     label27:
        goto label32;

     label28:
        $r5 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_RIGHT>;

        if r43 != $r5 goto label31;

        if i52 != 1 goto label29;

        r48 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_OPPOSITE>;

        goto label30;

     label29:
        r48 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_NORMAL>;

     label30:
        goto label32;

     label31:
        r48 = r43;

     label32:
        i59 = i52;

        $r49 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_NORMAL>;

        if r48 != $r49 goto label34;

        if i52 != 1 goto label33;

        $r11 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_LEFT>;

        i60 = virtualinvoke r42.<android.text.Layout: int getIndentAdjust(int,android.text.Layout$Alignment)>(i55, $r11);

        i61 = i60;

        i62 = i53 + i60;

        goto label37;

     label33:
        $r10 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_RIGHT>;

        $i19 = virtualinvoke r42.<android.text.Layout: int getIndentAdjust(int,android.text.Layout$Alignment)>(i55, $r10);

        i63 = neg $i19;

        i61 = i63;

        i62 = i43 - i63;

        goto label37;

     label34:
        $f0 = specialinvoke r42.<android.text.Layout: float getLineExtent(int,android.text.Layout$TabStops,boolean)>(i55, r40, 0);

        i64 = (int) $f0;

        $r6 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_OPPOSITE>;

        if r48 != $r6 goto label36;

        if i52 != 1 goto label35;

        $r9 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_RIGHT>;

        $i17 = virtualinvoke r42.<android.text.Layout: int getIndentAdjust(int,android.text.Layout$Alignment)>(i55, $r9);

        i65 = neg $i17;

        i61 = i65;

        $i18 = i43 - i64;

        i62 = $i18 - i65;

        goto label37;

     label35:
        $r8 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_LEFT>;

        i66 = virtualinvoke r42.<android.text.Layout: int getIndentAdjust(int,android.text.Layout$Alignment)>(i55, $r8);

        i61 = i66;

        $i16 = i53 - i64;

        i62 = $i16 + i66;

        goto label37;

     label36:
        $r7 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_CENTER>;

        i61 = virtualinvoke r42.<android.text.Layout: int getIndentAdjust(int,android.text.Layout$Alignment)>(i55, $r7);

        $i11 = i43 + i53;

        $i10 = i64 & -2;

        $i12 = $i11 - $i10;

        $i13 = $i12 >> 1;

        i62 = $i13 + i61;

     label37:
        r50 = virtualinvoke r42.<android.text.Layout: android.text.Layout$Directions getLineDirections(int)>(i55);

        $r51 = <android.text.Layout: android.text.Layout$Directions DIRS_ALL_LEFT_TO_RIGHT>;

        if r50 != $r51 goto label38;

        $z1 = r42.<android.text.Layout: boolean mSpannedText>;

        if $z1 != 0 goto label38;

        if z9 != 0 goto label38;

        if z0 != 0 goto label38;

        $f4 = (float) i62;

        $f3 = (float) i35;

        virtualinvoke r1.<android.graphics.Canvas: void drawText(java.lang.CharSequence,int,int,float,float,android.graphics.Paint)>(r26, i54, i3, $f4, $f3, r34);

        goto label40;

     label38:
        $i67 = virtualinvoke r42.<android.text.Layout: int getEllipsisStart(int)>(i55);

        $i68 = virtualinvoke r42.<android.text.Layout: int getEllipsisStart(int)>(i55);

        $i69 = virtualinvoke r42.<android.text.Layout: int getEllipsisCount(int)>(i55);

        $i70 = $i68 + $i69;

        virtualinvoke r44.<android.text.TextLine: void set(android.text.TextPaint,java.lang.CharSequence,int,int,int,android.text.Layout$Directions,boolean,android.text.Layout$TabStops,int,int)>(r34, r26, i54, i3, i59, r50, z9, r40, $i67, $i70);

        if z0 == 0 goto label39;

        $i14 = i43 - i53;

        $i15 = $i14 - i61;

        $f2 = (float) $i15;

        virtualinvoke r44.<android.text.TextLine: void justify(float)>($f2);

        goto label39;

     label39:
        $f1 = (float) i62;

        virtualinvoke r44.<android.text.TextLine: void draw(android.graphics.Canvas,float,int,int,int)>(r1, $f1, i29, i35, i4);

     label40:
        i32 = i55 + 1;

        r28 = r44;

        i29 = i4;

        i30 = i2;

        z5 = z10;

        r24 = r37;

        i31 = i51;

        r27 = r43;

        r29 = r40;

        r25 = r34;

        r23 = r42;

        goto label01;

     label41:
        staticinvoke <android.text.TextLine: android.text.TextLine recycle(android.text.TextLine)>(r28);

        return;
    }

    public final android.text.Layout$Alignment getAlignment()
    {
        android.text.Layout r0;
        android.text.Layout$Alignment $r1;

        r0 := @this: android.text.Layout;

        $r1 = r0.<android.text.Layout: android.text.Layout$Alignment mAlignment>;

        return $r1;
    }

    public abstract int getBottomPadding();

    public void getCursorPath(int, android.graphics.Path, java.lang.CharSequence)
    {
        android.text.Layout r0;
        android.graphics.Path r1;
        java.lang.CharSequence r2;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, i21, i22, i23, i24, i25;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36, $f37, $f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45, $f46, $f47, $f48, $f49, $f50, $f51, f52;
        boolean $z0;
        byte $b26;

        r0 := @this: android.text.Layout;

        i20 := @parameter0: int;

        r1 := @parameter1: android.graphics.Path;

        r2 := @parameter2: java.lang.CharSequence;

        virtualinvoke r1.<android.graphics.Path: void reset()>();

        i21 = virtualinvoke r0.<android.text.Layout: int getLineForOffset(int)>(i20);

        i0 = virtualinvoke r0.<android.text.Layout: int getLineTop(int)>(i21);

        i1 = virtualinvoke r0.<android.text.Layout: int getLineBottomWithoutSpacing(int)>(i21);

        $z0 = virtualinvoke r0.<android.text.Layout: boolean shouldClampCursor(int)>(i21);

        $f1 = virtualinvoke r0.<android.text.Layout: float getPrimaryHorizontal(int,boolean)>(i20, $z0);

        f0 = $f1 - 0.5F;

        $i5 = staticinvoke <android.text.method.TextKeyListener: int getMetaState(java.lang.CharSequence,int)>(r2, 1);

        $i6 = staticinvoke <android.text.method.TextKeyListener: int getMetaState(java.lang.CharSequence,int)>(r2, 2048);

        i2 = $i5 | $i6;

        i3 = staticinvoke <android.text.method.TextKeyListener: int getMetaState(java.lang.CharSequence,int)>(r2, 2);

        i22 = 0;

        if i2 != 0 goto label1;

        i23 = i0;

        i24 = i1;

        if i3 == 0 goto label3;

     label1:
        $i7 = i1 - i0;

        i4 = $i7 >> 2;

        i25 = i0;

        if i3 == 0 goto label2;

        i25 = i0 + i4;

     label2:
        i23 = i25;

        i24 = i1;

        i22 = i4;

        if i2 == 0 goto label3;

        i24 = i1 - i4;

        i22 = i4;

        i23 = i25;

     label3:
        f52 = f0;

        $b26 = f0 cmpg 0.5F;

        if $b26 >= 0 goto label4;

        f52 = 0.5F;

     label4:
        $f2 = (float) i23;

        virtualinvoke r1.<android.graphics.Path: void moveTo(float,float)>(f52, $f2);

        $f3 = (float) i24;

        virtualinvoke r1.<android.graphics.Path: void lineTo(float,float)>(f52, $f3);

        if i2 != 2 goto label5;

        $f44 = (float) i24;

        virtualinvoke r1.<android.graphics.Path: void moveTo(float,float)>(f52, $f44);

        $f45 = (float) i22;

        $f47 = f52 - $f45;

        $i18 = i24 + i22;

        $f46 = (float) $i18;

        virtualinvoke r1.<android.graphics.Path: void lineTo(float,float)>($f47, $f46);

        $f48 = (float) i24;

        virtualinvoke r1.<android.graphics.Path: void lineTo(float,float)>(f52, $f48);

        $f49 = (float) i22;

        $f51 = $f49 + f52;

        $i19 = i24 + i22;

        $f50 = (float) $i19;

        virtualinvoke r1.<android.graphics.Path: void lineTo(float,float)>($f51, $f50);

        goto label6;

     label5:
        if i2 != 1 goto label6;

        $f28 = (float) i24;

        virtualinvoke r1.<android.graphics.Path: void moveTo(float,float)>(f52, $f28);

        $f29 = (float) i22;

        $f31 = f52 - $f29;

        $i14 = i24 + i22;

        $f30 = (float) $i14;

        virtualinvoke r1.<android.graphics.Path: void lineTo(float,float)>($f31, $f30);

        $f32 = (float) i22;

        $f35 = f52 - $f32;

        $i15 = i24 + i22;

        $f33 = (float) $i15;

        $f34 = $f33 - 0.5F;

        virtualinvoke r1.<android.graphics.Path: void moveTo(float,float)>($f35, $f34);

        $f36 = (float) i22;

        $f39 = $f36 + f52;

        $i16 = i24 + i22;

        $f37 = (float) $i16;

        $f38 = $f37 - 0.5F;

        virtualinvoke r1.<android.graphics.Path: void lineTo(float,float)>($f39, $f38);

        $f40 = (float) i22;

        $f42 = $f40 + f52;

        $i17 = i24 + i22;

        $f41 = (float) $i17;

        virtualinvoke r1.<android.graphics.Path: void moveTo(float,float)>($f42, $f41);

        $f43 = (float) i24;

        virtualinvoke r1.<android.graphics.Path: void lineTo(float,float)>(f52, $f43);

     label6:
        if i3 != 2 goto label7;

        $f20 = (float) i23;

        virtualinvoke r1.<android.graphics.Path: void moveTo(float,float)>(f52, $f20);

        $f21 = (float) i22;

        $f23 = f52 - $f21;

        $i12 = i23 - i22;

        $f22 = (float) $i12;

        virtualinvoke r1.<android.graphics.Path: void lineTo(float,float)>($f23, $f22);

        $f24 = (float) i23;

        virtualinvoke r1.<android.graphics.Path: void lineTo(float,float)>(f52, $f24);

        $f25 = (float) i22;

        $f27 = $f25 + f52;

        $i13 = i23 - i22;

        $f26 = (float) $i13;

        virtualinvoke r1.<android.graphics.Path: void lineTo(float,float)>($f27, $f26);

        goto label8;

     label7:
        if i3 != 1 goto label8;

        $f4 = (float) i23;

        virtualinvoke r1.<android.graphics.Path: void moveTo(float,float)>(f52, $f4);

        $f5 = (float) i22;

        $f7 = f52 - $f5;

        $i8 = i23 - i22;

        $f6 = (float) $i8;

        virtualinvoke r1.<android.graphics.Path: void lineTo(float,float)>($f7, $f6);

        $f8 = (float) i22;

        $f11 = f52 - $f8;

        $i9 = i23 - i22;

        $f9 = (float) $i9;

        $f10 = $f9 + 0.5F;

        virtualinvoke r1.<android.graphics.Path: void moveTo(float,float)>($f11, $f10);

        $f12 = (float) i22;

        $f15 = $f12 + f52;

        $i10 = i23 - i22;

        $f13 = (float) $i10;

        $f14 = $f13 + 0.5F;

        virtualinvoke r1.<android.graphics.Path: void lineTo(float,float)>($f15, $f14);

        $f16 = (float) i22;

        $f18 = $f16 + f52;

        $i11 = i23 - i22;

        $f17 = (float) $i11;

        virtualinvoke r1.<android.graphics.Path: void moveTo(float,float)>($f18, $f17);

        $f19 = (float) i23;

        virtualinvoke r1.<android.graphics.Path: void lineTo(float,float)>(f52, $f19);

     label8:
        return;
    }

    public abstract int getEllipsisCount(int);

    public abstract int getEllipsisStart(int);

    public int getEllipsizedWidth()
    {
        android.text.Layout r0;
        int $i0;

        r0 := @this: android.text.Layout;

        $i0 = r0.<android.text.Layout: int mWidth>;

        return $i0;
    }

    public int getEndHyphenEdit(int)
    {
        android.text.Layout r0;
        int i0;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        return 0;
    }

    public int getHeight()
    {
        android.text.Layout r0;
        int $i0, $i1;

        r0 := @this: android.text.Layout;

        $i0 = virtualinvoke r0.<android.text.Layout: int getLineCount()>();

        $i1 = virtualinvoke r0.<android.text.Layout: int getLineTop(int)>($i0);

        return $i1;
    }

    public int getHeight(boolean)
    {
        android.text.Layout r0;
        boolean z0;
        int $i0;

        r0 := @this: android.text.Layout;

        z0 := @parameter0: boolean;

        $i0 = virtualinvoke r0.<android.text.Layout: int getHeight()>();

        return $i0;
    }

    public int getIndentAdjust(int, android.text.Layout$Alignment)
    {
        android.text.Layout r0;
        int i0;
        android.text.Layout$Alignment r1;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        r1 := @parameter1: android.text.Layout$Alignment;

        return 0;
    }

    public final int getLineAscent(int)
    {
        android.text.Layout r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<android.text.Layout: int getLineTop(int)>(i0);

        $i2 = i0 + 1;

        $i3 = virtualinvoke r0.<android.text.Layout: int getLineTop(int)>($i2);

        $i4 = virtualinvoke r0.<android.text.Layout: int getLineDescent(int)>(i0);

        $i5 = $i3 - $i4;

        $i6 = $i1 - $i5;

        return $i6;
    }

    public final int getLineBaseline(int)
    {
        android.text.Layout r0;
        int i0, $i1, $i2, $i3, $i4;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        $i1 = i0 + 1;

        $i2 = virtualinvoke r0.<android.text.Layout: int getLineTop(int)>($i1);

        $i3 = virtualinvoke r0.<android.text.Layout: int getLineDescent(int)>(i0);

        $i4 = $i2 - $i3;

        return $i4;
    }

    public final int getLineBottom(int)
    {
        android.text.Layout r0;
        int i0, $i1, $i2;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        $i1 = i0 + 1;

        $i2 = virtualinvoke r0.<android.text.Layout: int getLineTop(int)>($i1);

        return $i2;
    }

    public final int getLineBottomWithoutSpacing(int)
    {
        android.text.Layout r0;
        int i0, $i1, $i2, $i3, $i4;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        $i1 = i0 + 1;

        $i2 = virtualinvoke r0.<android.text.Layout: int getLineTop(int)>($i1);

        $i3 = virtualinvoke r0.<android.text.Layout: int getLineExtra(int)>(i0);

        $i4 = $i2 - $i3;

        return $i4;
    }

    public int getLineBounds(int, android.graphics.Rect)
    {
        android.text.Layout r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        android.graphics.Rect r1;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Rect;

        if r1 == null goto label1;

        r1.<android.graphics.Rect: int left> = 0;

        $i2 = virtualinvoke r0.<android.text.Layout: int getLineTop(int)>(i0);

        r1.<android.graphics.Rect: int top> = $i2;

        $i3 = r0.<android.text.Layout: int mWidth>;

        r1.<android.graphics.Rect: int right> = $i3;

        $i4 = i0 + 1;

        $i5 = virtualinvoke r0.<android.text.Layout: int getLineTop(int)>($i4);

        r1.<android.graphics.Rect: int bottom> = $i5;

     label1:
        $i1 = virtualinvoke r0.<android.text.Layout: int getLineBaseline(int)>(i0);

        return $i1;
    }

    public abstract boolean getLineContainsTab(int);

    public abstract int getLineCount();

    public abstract int getLineDescent(int);

    public abstract android.text.Layout$Directions getLineDirections(int);

    public final int getLineEnd(int)
    {
        android.text.Layout r0;
        int i0, $i1, $i2;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        $i1 = i0 + 1;

        $i2 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>($i1);

        return $i2;
    }

    public int getLineExtra(int)
    {
        android.text.Layout r0;
        int i0;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        return 0;
    }

    public int getLineForOffset(int)
    {
        android.text.Layout r0;
        int i0, i1, $i2, $i3, i4, i5, $i6;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        i4 = virtualinvoke r0.<android.text.Layout: int getLineCount()>();

        i5 = -1;

     label1:
        $i6 = i4 - i5;

        if $i6 <= 1 goto label3;

        $i2 = i4 + i5;

        i1 = $i2 / 2;

        $i3 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>(i1);

        if $i3 <= i0 goto label2;

        i4 = i1;

        goto label1;

     label2:
        i5 = i1;

        goto label1;

     label3:
        if i5 >= 0 goto label4;

        return 0;

     label4:
        return i5;
    }

    public int getLineForVertical(int)
    {
        android.text.Layout r0;
        int i0, i1, $i2, $i3, i4, i5, $i6;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        i4 = virtualinvoke r0.<android.text.Layout: int getLineCount()>();

        i5 = -1;

     label1:
        $i6 = i4 - i5;

        if $i6 <= 1 goto label3;

        $i2 = i4 + i5;

        i1 = $i2 / 2;

        $i3 = virtualinvoke r0.<android.text.Layout: int getLineTop(int)>(i1);

        if $i3 <= i0 goto label2;

        i4 = i1;

        goto label1;

     label2:
        i5 = i1;

        goto label1;

     label3:
        if i5 >= 0 goto label4;

        return 0;

     label4:
        return i5;
    }

    public float getLineLeft(int)
    {
        android.text.Layout r0;
        int i0, i1, $i2, $i3, $i4, i5, $i6, i7, i8;
        android.text.Layout$Alignment r1, r3, r4;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9;
        int[] $r2, $r5;
        double $d0, $d1;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        i5 = virtualinvoke r0.<android.text.Layout: int getParagraphDirection(int)>(i0);

        r1 = virtualinvoke r0.<android.text.Layout: android.text.Layout$Alignment getParagraphAlignment(int)>(i0);

        r3 = r1;

        if r1 != null goto label01;

        r3 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_CENTER>;

     label01:
        $r2 = <android.text.Layout$1: int[] $SwitchMap$android$text$Layout$Alignment>;

        $i2 = virtualinvoke r3.<android.text.Layout$Alignment: int ordinal()>();

        i1 = $r2[$i2];

        if i1 == 1 goto label07;

        if i1 == 2 goto label04;

        if i1 == 3 goto label03;

        if i1 == 4 goto label02;

        r4 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_LEFT>;

        goto label09;

     label02:
        r4 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_RIGHT>;

        goto label09;

     label03:
        r4 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_CENTER>;

        goto label09;

     label04:
        if i5 != -1 goto label05;

        r4 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_LEFT>;

        goto label06;

     label05:
        r4 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_RIGHT>;

     label06:
        goto label09;

     label07:
        if i5 != -1 goto label08;

        r4 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_RIGHT>;

        goto label09;

     label08:
        r4 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_LEFT>;

     label09:
        $r5 = <android.text.Layout$1: int[] $SwitchMap$android$text$Layout$Alignment>;

        $i6 = virtualinvoke r4.<android.text.Layout$Alignment: int ordinal()>();

        i7 = $r5[$i6];

        if i7 == 3 goto label11;

        if i7 == 4 goto label10;

        return 0.0F;

     label10:
        $i4 = r0.<android.text.Layout: int mWidth>;

        $f7 = (float) $i4;

        $f8 = virtualinvoke r0.<android.text.Layout: float getLineMax(int)>(i0);

        $f9 = $f7 - $f8;

        return $f9;

     label11:
        i8 = virtualinvoke r0.<android.text.Layout: int getParagraphLeft(int)>(i0);

        f0 = virtualinvoke r0.<android.text.Layout: float getLineMax(int)>(i0);

        $f4 = (float) i8;

        $i3 = r0.<android.text.Layout: int mWidth>;

        $f1 = (float) $i3;

        $f2 = $f1 - f0;

        $f3 = $f2 / 2.0F;

        $f5 = $f4 + $f3;

        $d0 = (double) $f5;

        $d1 = staticinvoke <java.lang.Math: double floor(double)>($d0);

        $f6 = (float) $d1;

        return $f6;
    }

    public float getLineMax(int)
    {
        android.text.Layout r0;
        int i0, $i1;
        float f0, $f1, f2;
        byte $b2;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<android.text.Layout: int getParagraphLeadingMargin(int)>(i0);

        f0 = (float) $i1;

        f2 = specialinvoke r0.<android.text.Layout: float getLineExtent(int,boolean)>(i0, 0);

        $b2 = f2 cmpl 0.0F;

        if $b2 < 0 goto label1;

        goto label2;

     label1:
        f2 = neg f2;

     label2:
        $f1 = f2 + f0;

        return $f1;
    }

    public long getLineRangeForDraw(android.graphics.Canvas)
    {
        android.text.Layout r0;
        android.graphics.Rect r1, $r2, $r3, $r4;
        long l0, $l5, $l6;
        boolean $z0;
        int $i1, $i2, $i3, $i4, i7, i8, i9, i10;
        java.lang.Throwable $r5;
        android.graphics.Canvas r6;

        r0 := @this: android.text.Layout;

        r6 := @parameter0: android.graphics.Canvas;

        r1 = <android.text.Layout: android.graphics.Rect sTempRect>;

        entermonitor r1;

     label1:
        $r2 = <android.text.Layout: android.graphics.Rect sTempRect>;

        $z0 = virtualinvoke r6.<android.graphics.Canvas: boolean getClipBounds(android.graphics.Rect)>($r2);

        if $z0 != 0 goto label3;

        l0 = staticinvoke <android.text.TextUtils: long packRangeInLong(int,int)>(0, -1);

        exitmonitor r1;

     label2:
        return l0;

     label3:
        $r3 = <android.text.Layout: android.graphics.Rect sTempRect>;

        i7 = $r3.<android.graphics.Rect: int top>;

        $r4 = <android.text.Layout: android.graphics.Rect sTempRect>;

        i8 = $r4.<android.graphics.Rect: int bottom>;

        exitmonitor r1;

     label4:
        i9 = staticinvoke <java.lang.Math: int max(int,int)>(i7, 0);

        $i1 = virtualinvoke r0.<android.text.Layout: int getLineCount()>();

        $i2 = virtualinvoke r0.<android.text.Layout: int getLineTop(int)>($i1);

        i10 = staticinvoke <java.lang.Math: int min(int,int)>($i2, i8);

        if i9 < i10 goto label5;

        $l6 = staticinvoke <android.text.TextUtils: long packRangeInLong(int,int)>(0, -1);

        return $l6;

     label5:
        $i3 = virtualinvoke r0.<android.text.Layout: int getLineForVertical(int)>(i9);

        $i4 = virtualinvoke r0.<android.text.Layout: int getLineForVertical(int)>(i10);

        $l5 = staticinvoke <android.text.TextUtils: long packRangeInLong(int,int)>($i3, $i4);

        return $l5;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public float getLineRight(int)
    {
        android.text.Layout r0;
        int i0, i1, $i2, $i3, $i4, i5, $i6, i7, i8;
        android.text.Layout$Alignment r1, r3, r4;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8;
        int[] $r2, $r5;
        double $d0, $d1;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<android.text.Layout: int getParagraphDirection(int)>(i0);

        r1 = virtualinvoke r0.<android.text.Layout: android.text.Layout$Alignment getParagraphAlignment(int)>(i0);

        r3 = r1;

        if r1 != null goto label01;

        r3 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_CENTER>;

     label01:
        $r2 = <android.text.Layout$1: int[] $SwitchMap$android$text$Layout$Alignment>;

        $i2 = virtualinvoke r3.<android.text.Layout$Alignment: int ordinal()>();

        i5 = $r2[$i2];

        if i5 == 1 goto label07;

        if i5 == 2 goto label04;

        if i5 == 3 goto label03;

        if i5 == 4 goto label02;

        r4 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_LEFT>;

        goto label09;

     label02:
        r4 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_RIGHT>;

        goto label09;

     label03:
        r4 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_CENTER>;

        goto label09;

     label04:
        if i1 != -1 goto label05;

        r4 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_LEFT>;

        goto label06;

     label05:
        r4 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_RIGHT>;

     label06:
        goto label09;

     label07:
        if i1 != -1 goto label08;

        r4 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_RIGHT>;

        goto label09;

     label08:
        r4 = <android.text.Layout$Alignment: android.text.Layout$Alignment ALIGN_LEFT>;

     label09:
        $r5 = <android.text.Layout$1: int[] $SwitchMap$android$text$Layout$Alignment>;

        $i6 = virtualinvoke r4.<android.text.Layout$Alignment: int ordinal()>();

        i7 = $r5[$i6];

        if i7 == 3 goto label11;

        if i7 == 4 goto label10;

        $f8 = virtualinvoke r0.<android.text.Layout: float getLineMax(int)>(i0);

        return $f8;

     label10:
        $i4 = r0.<android.text.Layout: int mWidth>;

        $f7 = (float) $i4;

        return $f7;

     label11:
        i8 = virtualinvoke r0.<android.text.Layout: int getParagraphRight(int)>(i0);

        f0 = virtualinvoke r0.<android.text.Layout: float getLineMax(int)>(i0);

        $f4 = (float) i8;

        $i3 = r0.<android.text.Layout: int mWidth>;

        $f1 = (float) $i3;

        $f2 = $f1 - f0;

        $f3 = $f2 / 2.0F;

        $f5 = $f4 - $f3;

        $d0 = (double) $f5;

        $d1 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        $f6 = (float) $d1;

        return $f6;
    }

    public abstract int getLineStart(int);

    public abstract int getLineTop(int);

    public int getLineVisibleEnd(int)
    {
        android.text.Layout r0;
        int i0, $i1, $i2, $i3, $i4;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>(i0);

        $i2 = i0 + 1;

        $i3 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>($i2);

        $i4 = specialinvoke r0.<android.text.Layout: int getLineVisibleEnd(int,int,int)>(i0, $i1, $i3);

        return $i4;
    }

    public float getLineWidth(int)
    {
        android.text.Layout r0;
        int i0, $i1;
        float f0, $f1, f2;
        byte $b2;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<android.text.Layout: int getParagraphLeadingMargin(int)>(i0);

        f0 = (float) $i1;

        f2 = specialinvoke r0.<android.text.Layout: float getLineExtent(int,boolean)>(i0, 1);

        $b2 = f2 cmpl 0.0F;

        if $b2 < 0 goto label1;

        goto label2;

     label1:
        f2 = neg f2;

     label2:
        $f1 = f2 + f0;

        return $f1;
    }

    public int getOffsetForHorizontal(int, float)
    {
        android.text.Layout r0;
        int i0, $i1;
        float f0;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        $i1 = virtualinvoke r0.<android.text.Layout: int getOffsetForHorizontal(int,float,boolean)>(i0, f0, 1);

        return $i1;
    }

    public int getOffsetForHorizontal(int, float, boolean)
    {
        android.text.Layout r0;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, f16, f17, f18, f19, $f20, $f21, f22;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i24, $i25, i27, i28, i29, i30, i31, i32, i33, i34, i35, $i36, i37, i39, i40, i41, i43, $i44, i45, i46, i47, i48, i49, i50;
        android.text.TextLine r2;
        android.text.TextPaint r3;
        java.lang.CharSequence r4;
        android.text.Layout$HorizontalMeasurementProvider $r6;
        boolean $z0, $z1, z2, z3, z4;
        byte $b8, $b23, $b26, b38, b42, $b51, $b52;
        int[] $r8, $r9, $r10, $r13;
        android.text.Layout$Directions r11;

        r0 := @this: android.text.Layout;

        i27 := @parameter0: int;

        f0 := @parameter1: float;

        z2 := @parameter2: boolean;

        i28 = virtualinvoke r0.<android.text.Layout: int getLineEnd(int)>(i27);

        i0 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>(i27);

        r11 = virtualinvoke r0.<android.text.Layout: android.text.Layout$Directions getLineDirections(int)>(i27);

        r2 = staticinvoke <android.text.TextLine: android.text.TextLine obtain()>();

        r3 = r0.<android.text.Layout: android.text.TextPaint mPaint>;

        r4 = r0.<android.text.Layout: java.lang.CharSequence mText>;

        i29 = virtualinvoke r0.<android.text.Layout: int getParagraphDirection(int)>(i27);

        i30 = virtualinvoke r0.<android.text.Layout: int getEllipsisStart(int)>(i27);

        i31 = virtualinvoke r0.<android.text.Layout: int getEllipsisStart(int)>(i27);

        i32 = virtualinvoke r0.<android.text.Layout: int getEllipsisCount(int)>(i27);

        $i2 = i31 + i32;

        virtualinvoke r2.<android.text.TextLine: void set(android.text.TextPaint,java.lang.CharSequence,int,int,int,android.text.Layout$Directions,boolean,android.text.Layout$TabStops,int,int)>(r3, r4, i0, i28, i29, r11, 0, null, i30, $i2);

        $r6 = new android.text.Layout$HorizontalMeasurementProvider;

        specialinvoke $r6.<android.text.Layout$HorizontalMeasurementProvider: void <init>(android.text.Layout,int,boolean)>(r0, i27, z2);

        $i3 = virtualinvoke r0.<android.text.Layout: int getLineCount()>();

        $i4 = $i3 - 1;

        if i27 != $i4 goto label01;

        i33 = i28;

        goto label02;

     label01:
        $i6 = i28 - i0;

        $i5 = i28 - 1;

        $z0 = virtualinvoke r0.<android.text.Layout: boolean isRtlCharAt(int)>($i5);

        $z1 = $z0 ^ 1;

        $i7 = virtualinvoke r2.<android.text.TextLine: int getOffsetToLeftRightOf(int,boolean)>($i6, $z1);

        i33 = $i7 + i0;

     label02:
        i34 = i0;

        $f2 = virtualinvoke $r6.<android.text.Layout$HorizontalMeasurementProvider: float get(int)>(i0);

        $f3 = $f2 - f0;

        f16 = staticinvoke <java.lang.Math: float abs(float)>($f3);

        i35 = 0;

     label03:
        $r13 = r11.<android.text.Layout$Directions: int[] mDirections>;

        $i36 = lengthof $r13;

        if i35 >= $i36 goto label20;

        $r8 = r11.<android.text.Layout$Directions: int[] mDirections>;

        $i9 = $r8[i35];

        i1 = $i9 + i0;

        $r9 = r11.<android.text.Layout$Directions: int[] mDirections>;

        $i10 = i35 + 1;

        $i11 = $r9[$i10];

        $i12 = $i11 & 67108863;

        i37 = $i12 + i1;

        $r10 = r11.<android.text.Layout$Directions: int[] mDirections>;

        $i13 = i35 + 1;

        $i14 = $r10[$i13];

        $i15 = $i14 & 67108864;

        if $i15 == 0 goto label04;

        z3 = 1;

        goto label05;

     label04:
        z3 = 0;

     label05:
        if z3 == 0 goto label06;

        b38 = -1;

        goto label07;

     label06:
        b38 = 1;

     label07:
        i39 = i37;

        if i37 <= i33 goto label08;

        i39 = i33;

     label08:
        $i16 = i39 - 1;

        i40 = $i16 + 1;

        $i17 = i1 + 1;

        i41 = $i17 - 1;

        b42 = b38;

        i43 = i41;

     label09:
        $i44 = i40 - i43;

        if $i44 <= 1 goto label12;

        $i24 = i40 + i43;

        i45 = $i24 / 2;

        $i25 = specialinvoke r0.<android.text.Layout: int getOffsetAtStartOf(int)>(i45);

        $f11 = virtualinvoke $r6.<android.text.Layout$HorizontalMeasurementProvider: float get(int)>($i25);

        $f12 = (float) b42;

        $f15 = $f11 * $f12;

        $f13 = (float) b42;

        $f14 = $f13 * f0;

        $b26 = $f15 cmpl $f14;

        if $b26 < 0 goto label10;

        i40 = i45;

        goto label11;

     label10:
        i43 = i45;

     label11:
        goto label09;

     label12:
        i46 = i43;

        $i18 = i1 + 1;

        if i43 >= $i18 goto label13;

        i46 = i1 + 1;

     label13:
        if i46 >= i39 goto label17;

        $i19 = i46 - i0;

        $i20 = virtualinvoke r2.<android.text.TextLine: int getOffsetToLeftRightOf(int,boolean)>($i19, z3);

        i47 = $i20 + i0;

        if z3 != 0 goto label14;

        z4 = 1;

        goto label15;

     label14:
        z4 = 0;

     label15:
        $i21 = i47 - i0;

        $i22 = virtualinvoke r2.<android.text.TextLine: int getOffsetToLeftRightOf(int,boolean)>($i21, z4);

        i48 = $i22 + i0;

        i49 = i34;

        f17 = f16;

        if i48 < i1 goto label18;

        i49 = i34;

        f17 = f16;

        if i48 >= i39 goto label18;

        $f7 = virtualinvoke $r6.<android.text.Layout$HorizontalMeasurementProvider: float get(int)>(i48);

        $f8 = $f7 - f0;

        f1 = staticinvoke <java.lang.Math: float abs(float)>($f8);

        f18 = f1;

        i50 = i48;

        if i47 >= i39 goto label16;

        $f9 = virtualinvoke $r6.<android.text.Layout$HorizontalMeasurementProvider: float get(int)>(i47);

        $f10 = $f9 - f0;

        f19 = staticinvoke <java.lang.Math: float abs(float)>($f10);

        f18 = f1;

        i50 = i48;

        $b23 = f19 cmpg f1;

        if $b23 >= 0 goto label16;

        f18 = f19;

        i50 = i47;

     label16:
        i49 = i34;

        f17 = f16;

        $b51 = f18 cmpg f16;

        if $b51 >= 0 goto label18;

        i49 = i50;

        f17 = f18;

        goto label18;

     label17:
        f17 = f16;

        i49 = i34;

     label18:
        $f20 = virtualinvoke $r6.<android.text.Layout$HorizontalMeasurementProvider: float get(int)>(i1);

        $f21 = $f20 - f0;

        f22 = staticinvoke <java.lang.Math: float abs(float)>($f21);

        i34 = i49;

        f16 = f17;

        $b52 = f22 cmpg f17;

        if $b52 >= 0 goto label19;

        f16 = f22;

        i34 = i1;

     label19:
        i35 = i35 + 2;

        goto label03;

     label20:
        $f4 = virtualinvoke $r6.<android.text.Layout$HorizontalMeasurementProvider: float get(int)>(i33);

        $f5 = $f4 - f0;

        $f6 = staticinvoke <java.lang.Math: float abs(float)>($f5);

        $b8 = $f6 cmpg f16;

        if $b8 > 0 goto label21;

        i34 = i33;

     label21:
        staticinvoke <android.text.TextLine: android.text.TextLine recycle(android.text.TextLine)>(r2);

        return i34;
    }

    public int getOffsetToLeftOf(int)
    {
        android.text.Layout r0;
        int i0, $i1;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<android.text.Layout: int getOffsetToLeftRightOf(int,boolean)>(i0, 1);

        return $i1;
    }

    public int getOffsetToRightOf(int)
    {
        android.text.Layout r0;
        int i0, $i1;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<android.text.Layout: int getOffsetToLeftRightOf(int,boolean)>(i0, 0);

        return $i1;
    }

    public final android.text.TextPaint getPaint()
    {
        android.text.Layout r0;
        android.text.TextPaint $r1;

        r0 := @this: android.text.Layout;

        $r1 = r0.<android.text.Layout: android.text.TextPaint mPaint>;

        return $r1;
    }

    public final android.text.Layout$Alignment getParagraphAlignment(int)
    {
        android.text.Layout r0;
        android.text.Layout$Alignment r1, r7;
        android.text.style.AlignmentSpan[] r2;
        boolean $z0;
        java.lang.CharSequence $r3;
        android.text.Spanned $r4;
        int $i0, $i1, $i2, i3, i4;
        java.lang.Object[] $r5;
        android.text.style.AlignmentSpan $r6;

        r0 := @this: android.text.Layout;

        i3 := @parameter0: int;

        r1 = r0.<android.text.Layout: android.text.Layout$Alignment mAlignment>;

        r7 = r1;

        $z0 = r0.<android.text.Layout: boolean mSpannedText>;

        if $z0 == 0 goto label1;

        $r3 = r0.<android.text.Layout: java.lang.CharSequence mText>;

        $r4 = (android.text.Spanned) $r3;

        $i0 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>(i3);

        $i1 = virtualinvoke r0.<android.text.Layout: int getLineEnd(int)>(i3);

        $r5 = staticinvoke <android.text.Layout: java.lang.Object[] getParagraphSpans(android.text.Spanned,int,int,java.lang.Class)>($r4, $i0, $i1, class "Landroid/text/style/AlignmentSpan;");

        r2 = (android.text.style.AlignmentSpan[]) $r5;

        i4 = lengthof r2;

        r7 = r1;

        if i4 <= 0 goto label1;

        $i2 = i4 - 1;

        $r6 = r2[$i2];

        r7 = interfaceinvoke $r6.<android.text.style.AlignmentSpan: android.text.Layout$Alignment getAlignment()>();

     label1:
        return r7;
    }

    public abstract int getParagraphDirection(int);

    public final int getParagraphLeft(int)
    {
        android.text.Layout r0;
        int i0, $i1, $i2;
        boolean $z0;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<android.text.Layout: int getParagraphDirection(int)>(i0);

        if $i1 == -1 goto label2;

        $z0 = r0.<android.text.Layout: boolean mSpannedText>;

        if $z0 != 0 goto label1;

        goto label2;

     label1:
        $i2 = specialinvoke r0.<android.text.Layout: int getParagraphLeadingMargin(int)>(i0);

        return $i2;

     label2:
        return 0;
    }

    public final int getParagraphRight(int)
    {
        android.text.Layout r0;
        int i0, i1, $i2, $i3, $i4;
        boolean $z0;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        i1 = r0.<android.text.Layout: int mWidth>;

        $i2 = virtualinvoke r0.<android.text.Layout: int getParagraphDirection(int)>(i0);

        if $i2 == 1 goto label2;

        $z0 = r0.<android.text.Layout: boolean mSpannedText>;

        if $z0 != 0 goto label1;

        goto label2;

     label1:
        $i3 = specialinvoke r0.<android.text.Layout: int getParagraphLeadingMargin(int)>(i0);

        $i4 = i1 - $i3;

        return $i4;

     label2:
        return i1;
    }

    public float getPrimaryHorizontal(int)
    {
        android.text.Layout r0;
        int i0;
        float $f0;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        $f0 = virtualinvoke r0.<android.text.Layout: float getPrimaryHorizontal(int,boolean)>(i0, 0);

        return $f0;
    }

    public float getPrimaryHorizontal(int, boolean)
    {
        android.text.Layout r0;
        int i0;
        boolean z0, $z1;
        float $f0;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $z1 = virtualinvoke r0.<android.text.Layout: boolean primaryIsTrailingPrevious(int)>(i0);

        $f0 = specialinvoke r0.<android.text.Layout: float getHorizontal(int,boolean,boolean)>(i0, $z1, z0);

        return $f0;
    }

    public long getRunRange(int)
    {
        android.text.Layout r0;
        int i0, i1, i2, i3, i4, $i5, $i7, $i8, $i10, $i11, $i12, $i13, i15;
        android.text.Layout$Directions $r1, $r2, r3;
        long $l6, $l9, $l14;
        int[] r4;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<android.text.Layout: int getLineForOffset(int)>(i0);

        r3 = virtualinvoke r0.<android.text.Layout: android.text.Layout$Directions getLineDirections(int)>(i1);

        $r1 = <android.text.Layout: android.text.Layout$Directions DIRS_ALL_LEFT_TO_RIGHT>;

        if r3 == $r1 goto label5;

        $r2 = <android.text.Layout: android.text.Layout$Directions DIRS_ALL_RIGHT_TO_LEFT>;

        if r3 != $r2 goto label1;

        goto label5;

     label1:
        r4 = r3.<android.text.Layout$Directions: int[] mDirections>;

        i2 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>(i1);

        i15 = 0;

     label2:
        $i7 = lengthof r4;

        if i15 >= $i7 goto label4;

        $i10 = r4[i15];

        i3 = $i10 + i2;

        $i11 = i15 + 1;

        $i12 = r4[$i11];

        $i13 = $i12 & 67108863;

        i4 = $i13 + i3;

        if i0 < i3 goto label3;

        if i0 >= i4 goto label3;

        $l14 = staticinvoke <android.text.TextUtils: long packRangeInLong(int,int)>(i3, i4);

        return $l14;

     label3:
        i15 = i15 + 2;

        goto label2;

     label4:
        $i8 = virtualinvoke r0.<android.text.Layout: int getLineEnd(int)>(i1);

        $l9 = staticinvoke <android.text.TextUtils: long packRangeInLong(int,int)>(0, $i8);

        return $l9;

     label5:
        $i5 = virtualinvoke r0.<android.text.Layout: int getLineEnd(int)>(i1);

        $l6 = staticinvoke <android.text.TextUtils: long packRangeInLong(int,int)>(0, $i5);

        return $l6;
    }

    public float getSecondaryHorizontal(int)
    {
        android.text.Layout r0;
        int i0;
        float $f0;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        $f0 = virtualinvoke r0.<android.text.Layout: float getSecondaryHorizontal(int,boolean)>(i0, 0);

        return $f0;
    }

    public float getSecondaryHorizontal(int, boolean)
    {
        android.text.Layout r0;
        int i0;
        boolean z0, $z1, $z2;
        float $f0;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $z1 = virtualinvoke r0.<android.text.Layout: boolean primaryIsTrailingPrevious(int)>(i0);

        $z2 = $z1 ^ 1;

        $f0 = specialinvoke r0.<android.text.Layout: float getHorizontal(int,boolean,boolean)>(i0, $z2, z0);

        return $f0;
    }

    public final void getSelection(int, int, android.text.Layout$SelectionRectangleConsumer)
    {
        android.text.Layout r0;
        android.text.Layout$SelectionRectangleConsumer r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16;

        r0 := @this: android.text.Layout;

        i10 := @parameter0: int;

        i11 := @parameter1: int;

        r1 := @parameter2: android.text.Layout$SelectionRectangleConsumer;

        if i10 != i11 goto label01;

        return;

     label01:
        if i11 >= i10 goto label02;

        goto label03;

     label02:
        i12 = i10;

        i10 = i11;

        i11 = i12;

     label03:
        i0 = virtualinvoke r0.<android.text.Layout: int getLineForOffset(int)>(i11);

        i13 = virtualinvoke r0.<android.text.Layout: int getLineForOffset(int)>(i10);

        i14 = virtualinvoke r0.<android.text.Layout: int getLineTop(int)>(i0);

        i15 = virtualinvoke r0.<android.text.Layout: int getLineBottomWithoutSpacing(int)>(i13);

        if i0 != i13 goto label04;

        specialinvoke r0.<android.text.Layout: void addSelection(int,int,int,int,int,android.text.Layout$SelectionRectangleConsumer)>(i0, i11, i10, i14, i15, r1);

        goto label12;

     label04:
        $i1 = r0.<android.text.Layout: int mWidth>;

        f0 = (float) $i1;

        $i2 = virtualinvoke r0.<android.text.Layout: int getLineEnd(int)>(i0);

        $i3 = virtualinvoke r0.<android.text.Layout: int getLineBottom(int)>(i0);

        specialinvoke r0.<android.text.Layout: void addSelection(int,int,int,int,int,android.text.Layout$SelectionRectangleConsumer)>(i0, i11, $i2, i14, $i3, r1);

        $i4 = virtualinvoke r0.<android.text.Layout: int getParagraphDirection(int)>(i0);

        if $i4 != -1 goto label05;

        $f14 = virtualinvoke r0.<android.text.Layout: float getLineLeft(int)>(i0);

        $f15 = (float) i14;

        $i9 = virtualinvoke r0.<android.text.Layout: int getLineBottom(int)>(i0);

        $f16 = (float) $i9;

        interfaceinvoke r1.<android.text.Layout$SelectionRectangleConsumer: void accept(float,float,float,float,int)>($f14, $f15, 0.0F, $f16, 0);

        goto label06;

     label05:
        $f1 = virtualinvoke r0.<android.text.Layout: float getLineRight(int)>(i0);

        $f2 = (float) i14;

        $i5 = virtualinvoke r0.<android.text.Layout: int getLineBottom(int)>(i0);

        $f3 = (float) $i5;

        interfaceinvoke r1.<android.text.Layout$SelectionRectangleConsumer: void accept(float,float,float,float,int)>($f1, $f2, f0, $f3, 1);

     label06:
        i16 = i0 + 1;

     label07:
        if i16 >= i13 goto label10;

        i17 = virtualinvoke r0.<android.text.Layout: int getLineTop(int)>(i16);

        i18 = virtualinvoke r0.<android.text.Layout: int getLineBottom(int)>(i16);

        $i8 = virtualinvoke r0.<android.text.Layout: int getParagraphDirection(int)>(i16);

        if $i8 != -1 goto label08;

        $f13 = (float) i17;

        $f12 = (float) i18;

        interfaceinvoke r1.<android.text.Layout$SelectionRectangleConsumer: void accept(float,float,float,float,int)>(0.0F, $f13, f0, $f12, 0);

        goto label09;

     label08:
        $f11 = (float) i17;

        $f10 = (float) i18;

        interfaceinvoke r1.<android.text.Layout$SelectionRectangleConsumer: void accept(float,float,float,float,int)>(0.0F, $f11, f0, $f10, 1);

     label09:
        i16 = i16 + 1;

        goto label07;

     label10:
        i19 = virtualinvoke r0.<android.text.Layout: int getLineTop(int)>(i13);

        i20 = virtualinvoke r0.<android.text.Layout: int getLineBottomWithoutSpacing(int)>(i13);

        $i6 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>(i13);

        specialinvoke r0.<android.text.Layout: void addSelection(int,int,int,int,int,android.text.Layout$SelectionRectangleConsumer)>(i13, $i6, i10, i19, i20, r1);

        $i7 = virtualinvoke r0.<android.text.Layout: int getParagraphDirection(int)>(i13);

        if $i7 != -1 goto label11;

        $f7 = (float) i19;

        $f8 = virtualinvoke r0.<android.text.Layout: float getLineRight(int)>(i13);

        $f9 = (float) i20;

        interfaceinvoke r1.<android.text.Layout$SelectionRectangleConsumer: void accept(float,float,float,float,int)>(f0, $f7, $f8, $f9, 0);

        goto label12;

     label11:
        $f4 = (float) i19;

        $f5 = virtualinvoke r0.<android.text.Layout: float getLineLeft(int)>(i13);

        $f6 = (float) i20;

        interfaceinvoke r1.<android.text.Layout$SelectionRectangleConsumer: void accept(float,float,float,float,int)>(0.0F, $f4, $f5, $f6, 1);

     label12:
        return;
    }

    public void getSelectionPath(int, int, android.graphics.Path)
    {
        android.text.Layout r0;
        int i0, i1;
        android.graphics.Path r1;
        android.text._$$Lambda$Layout$MzjK2UE2G8VG0asK8_KWY3gHAmY $r2;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.graphics.Path;

        virtualinvoke r1.<android.graphics.Path: void reset()>();

        $r2 = new android.text._$$Lambda$Layout$MzjK2UE2G8VG0asK8_KWY3gHAmY;

        specialinvoke $r2.<android.text._$$Lambda$Layout$MzjK2UE2G8VG0asK8_KWY3gHAmY: void <init>(android.graphics.Path)>(r1);

        virtualinvoke r0.<android.text.Layout: void getSelection(int,int,android.text.Layout$SelectionRectangleConsumer)>(i0, i1, $r2);

        return;
    }

    public final float getSpacingAdd()
    {
        android.text.Layout r0;
        float $f0;

        r0 := @this: android.text.Layout;

        $f0 = r0.<android.text.Layout: float mSpacingAdd>;

        return $f0;
    }

    public final float getSpacingMultiplier()
    {
        android.text.Layout r0;
        float $f0;

        r0 := @this: android.text.Layout;

        $f0 = r0.<android.text.Layout: float mSpacingMult>;

        return $f0;
    }

    public int getStartHyphenEdit(int)
    {
        android.text.Layout r0;
        int i0;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        return 0;
    }

    public final java.lang.CharSequence getText()
    {
        android.text.Layout r0;
        java.lang.CharSequence $r1;

        r0 := @this: android.text.Layout;

        $r1 = r0.<android.text.Layout: java.lang.CharSequence mText>;

        return $r1;
    }

    public final android.text.TextDirectionHeuristic getTextDirectionHeuristic()
    {
        android.text.Layout r0;
        android.text.TextDirectionHeuristic $r1;

        r0 := @this: android.text.Layout;

        $r1 = r0.<android.text.Layout: android.text.TextDirectionHeuristic mTextDir>;

        return $r1;
    }

    public abstract int getTopPadding();

    public final int getWidth()
    {
        android.text.Layout r0;
        int $i0;

        r0 := @this: android.text.Layout;

        $i0 = r0.<android.text.Layout: int mWidth>;

        return $i0;
    }

    public final void increaseWidthTo(int)
    {
        android.text.Layout r0;
        int i0, $i1;
        java.lang.RuntimeException $r1;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        $i1 = r0.<android.text.Layout: int mWidth>;

        if i0 < $i1 goto label1;

        r0.<android.text.Layout: int mWidth> = i0;

        return;

     label1:
        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("attempted to reduce Layout width");

        throw $r1;
    }

    public boolean isLevelBoundary(int)
    {
        android.text.Layout r0;
        android.text.Layout$Directions r1, $r2, r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13, i14, i15;
        boolean z0;
        int[] r4;

        r0 := @this: android.text.Layout;

        i11 := @parameter0: int;

        i12 = virtualinvoke r0.<android.text.Layout: int getLineForOffset(int)>(i11);

        r3 = virtualinvoke r0.<android.text.Layout: android.text.Layout$Directions getLineDirections(int)>(i12);

        r1 = <android.text.Layout: android.text.Layout$Directions DIRS_ALL_LEFT_TO_RIGHT>;

        z0 = 0;

        if r3 == r1 goto label12;

        $r2 = <android.text.Layout: android.text.Layout$Directions DIRS_ALL_RIGHT_TO_LEFT>;

        if r3 != $r2 goto label01;

        goto label12;

     label01:
        r4 = r3.<android.text.Layout$Directions: int[] mDirections>;

        i0 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>(i12);

        i1 = virtualinvoke r0.<android.text.Layout: int getLineEnd(int)>(i12);

        if i11 == i0 goto label06;

        if i11 != i1 goto label02;

        goto label06;

     label02:
        i13 = 0;

     label03:
        $i8 = lengthof r4;

        if i13 >= $i8 goto label05;

        $i10 = i11 - i0;

        $i9 = r4[i13];

        if $i10 != $i9 goto label04;

        return 1;

     label04:
        i13 = i13 + 2;

        goto label03;

     label05:
        return 0;

     label06:
        $i2 = virtualinvoke r0.<android.text.Layout: int getParagraphDirection(int)>(i12);

        if $i2 != 1 goto label07;

        i14 = 0;

        goto label08;

     label07:
        i14 = 1;

     label08:
        if i11 != i0 goto label09;

        i15 = 0;

        goto label10;

     label09:
        $i3 = lengthof r4;

        i15 = $i3 - 2;

     label10:
        $i4 = i15 + 1;

        $i5 = r4[$i4];

        $i6 = $i5 >>> 26;

        $i7 = $i6 & 63;

        if $i7 == i14 goto label11;

        z0 = 1;

     label11:
        return z0;

     label12:
        return 0;
    }

    public boolean isRtlCharAt(int)
    {
        android.text.Layout r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15;
        android.text.Layout$Directions r1, $r2, r3;
        boolean z0;
        int[] r4;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        i14 = virtualinvoke r0.<android.text.Layout: int getLineForOffset(int)>(i0);

        r3 = virtualinvoke r0.<android.text.Layout: android.text.Layout$Directions getLineDirections(int)>(i14);

        r1 = <android.text.Layout: android.text.Layout$Directions DIRS_ALL_LEFT_TO_RIGHT>;

        z0 = 0;

        if r3 != r1 goto label1;

        return 0;

     label1:
        $r2 = <android.text.Layout: android.text.Layout$Directions DIRS_ALL_RIGHT_TO_LEFT>;

        if r3 != $r2 goto label2;

        return 1;

     label2:
        r4 = r3.<android.text.Layout$Directions: int[] mDirections>;

        i1 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>(i14);

        i15 = 0;

     label3:
        $i4 = lengthof r4;

        if i15 >= $i4 goto label6;

        $i5 = r4[i15];

        i2 = $i5 + i1;

        $i6 = i15 + 1;

        i3 = r4[$i6];

        if i0 < i2 goto label5;

        $i7 = i3 & 67108863;

        $i8 = $i7 + i2;

        if i0 >= $i8 goto label5;

        $i9 = i15 + 1;

        $i10 = r4[$i9];

        $i11 = $i10 >>> 26;

        $i12 = $i11 & 63;

        $i13 = $i12 & 1;

        if $i13 == 0 goto label4;

        z0 = 1;

     label4:
        return z0;

     label5:
        i15 = i15 + 2;

        goto label3;

     label6:
        return 0;
    }

    protected final boolean isSpanned()
    {
        android.text.Layout r0;
        boolean $z0;

        r0 := @this: android.text.Layout;

        $z0 = r0.<android.text.Layout: boolean mSpannedText>;

        return $z0;
    }

    public boolean primaryIsTrailingPrevious(int)
    {
        android.text.Layout r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19, i20, i22, i23, i24, i25, i26, i27, i28, i31, i32, i33, i34, i35, i36;
        int[] r1;
        android.text.Layout$Directions $r2;
        boolean z0;
        byte b29;

        r0 := @this: android.text.Layout;

        i19 := @parameter0: int;

        i20 = virtualinvoke r0.<android.text.Layout: int getLineForOffset(int)>(i19);

        i0 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>(i20);

        i1 = virtualinvoke r0.<android.text.Layout: int getLineEnd(int)>(i20);

        $r2 = virtualinvoke r0.<android.text.Layout: android.text.Layout$Directions getLineDirections(int)>(i20);

        r1 = $r2.<android.text.Layout$Directions: int[] mDirections>;

        i22 = 0;

     label01:
        i23 = lengthof r1;

        z0 = 0;

        i24 = -1;

        if i22 >= i23 goto label05;

        $i12 = r1[i22];

        i25 = $i12 + i0;

        $i13 = i22 + 1;

        $i14 = r1[$i13];

        $i15 = $i14 & 67108863;

        i26 = $i15 + i25;

        i27 = i26;

        if i26 <= i1 goto label02;

        i27 = i1;

     label02:
        if i19 < i25 goto label04;

        if i19 >= i27 goto label04;

        if i19 <= i25 goto label03;

        return 0;

     label03:
        $i16 = i22 + 1;

        $i17 = r1[$i16];

        $i18 = $i17 >>> 26;

        i24 = $i18 & 63;

        goto label05;

     label04:
        i22 = i22 + 2;

        goto label01;

     label05:
        i28 = i24;

        if i24 != -1 goto label08;

        $i11 = virtualinvoke r0.<android.text.Layout: int getParagraphDirection(int)>(i20);

        if $i11 != 1 goto label06;

        b29 = 0;

        goto label07;

     label06:
        b29 = 1;

     label07:
        i28 = b29;

     label08:
        if i19 != i0 goto label11;

        $i10 = virtualinvoke r0.<android.text.Layout: int getParagraphDirection(int)>(i20);

        if $i10 != 1 goto label09;

        i31 = 0;

        goto label10;

     label09:
        i31 = 1;

     label10:
        goto label15;

     label11:
        i32 = i19 - 1;

        i33 = 0;

     label12:
        i31 = -1;

        $i2 = lengthof r1;

        if i33 >= $i2 goto label15;

        $i3 = r1[i33];

        i34 = $i3 + i0;

        $i4 = i33 + 1;

        $i5 = r1[$i4];

        $i6 = $i5 & 67108863;

        i35 = $i6 + i34;

        i36 = i35;

        if i35 <= i1 goto label13;

        i36 = i1;

     label13:
        if i32 < i34 goto label14;

        if i32 >= i36 goto label14;

        $i7 = i33 + 1;

        $i8 = r1[$i7];

        $i9 = $i8 >>> 26;

        i31 = $i9 & 63;

        goto label15;

     label14:
        i33 = i33 + 2;

        goto label12;

     label15:
        if i31 >= i28 goto label16;

        z0 = 1;

     label16:
        return z0;
    }

    public boolean[] primaryIsTrailingPreviousAllLineOffsets(int)
    {
        android.text.Layout r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i29, i30, i31, i32, i33, i34, i35;
        int[] r1;
        boolean[] r2;
        byte[] r3;
        android.text.Layout$Directions $r4;
        byte $b27, $b28, b36, b37;
        boolean z0;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<android.text.Layout: int getLineStart(int)>(i0);

        i30 = virtualinvoke r0.<android.text.Layout: int getLineEnd(int)>(i0);

        $r4 = virtualinvoke r0.<android.text.Layout: android.text.Layout$Directions getLineDirections(int)>(i0);

        r1 = $r4.<android.text.Layout$Directions: int[] mDirections>;

        $i3 = i30 - i1;

        $i4 = $i3 + 1;

        r2 = newarray (boolean)[$i4];

        $i5 = i30 - i1;

        $i6 = $i5 + 1;

        r3 = newarray (byte)[$i6];

        i31 = 0;

     label01:
        $i7 = lengthof r1;

        if i31 >= $i7 goto label05;

        $i18 = r1[i31];

        i2 = $i18 + i1;

        $i19 = i31 + 1;

        $i20 = r1[$i19];

        $i21 = $i20 & 67108863;

        i32 = $i21 + i2;

        i33 = i32;

        if i32 <= i30 goto label02;

        i33 = i30;

     label02:
        if i33 != i2 goto label03;

        goto label04;

     label03:
        $i22 = i33 - i1;

        $i29 = $i22 - 1;

        $i23 = i31 + 1;

        $i24 = r1[$i23];

        $i25 = $i24 >>> 26;

        $i26 = $i25 & 63;

        $b27 = (byte) $i26;

        $b28 = (byte) $b27;

        r3[$i29] = $b28;

     label04:
        i31 = i31 + 2;

        goto label01;

     label05:
        i34 = 0;

     label06:
        $i8 = lengthof r1;

        if i34 >= $i8 goto label11;

        $i9 = r1[i34];

        i35 = $i9 + i1;

        $i10 = i34 + 1;

        $i11 = r1[$i10];

        $i12 = $i11 >>> 26;

        $i13 = $i12 & 63;

        b36 = (byte) $i13;

        z0 = 0;

        if i35 != i1 goto label08;

        $i17 = virtualinvoke r0.<android.text.Layout: int getParagraphDirection(int)>(i0);

        if $i17 != 1 goto label07;

        b37 = 0;

        goto label09;

     label07:
        b37 = 1;

        goto label09;

     label08:
        $i14 = i35 - i1;

        $i15 = $i14 - 1;

        b37 = r3[$i15];

     label09:
        if b36 <= b37 goto label10;

        z0 = 1;

     label10:
        $i16 = i35 - i1;

        r2[$i16] = z0;

        i34 = i34 + 2;

        goto label06;

     label11:
        return r2;
    }

    void replaceWith(java.lang.CharSequence, android.text.TextPaint, int, android.text.Layout$Alignment, float, float)
    {
        android.text.Layout r0;
        android.text.TextPaint r1;
        int i0;
        android.text.Layout$Alignment r2;
        float f0, f1;
        java.lang.StringBuilder $r3;
        java.lang.IllegalArgumentException $r7;
        java.lang.String $r8;
        boolean $z0;
        java.lang.CharSequence r9;

        r0 := @this: android.text.Layout;

        r9 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: android.text.TextPaint;

        i0 := @parameter2: int;

        r2 := @parameter3: android.text.Layout$Alignment;

        f0 := @parameter4: float;

        f1 := @parameter5: float;

        if i0 < 0 goto label1;

        r0.<android.text.Layout: java.lang.CharSequence mText> = r9;

        r0.<android.text.Layout: android.text.TextPaint mPaint> = r1;

        r0.<android.text.Layout: int mWidth> = i0;

        r0.<android.text.Layout: android.text.Layout$Alignment mAlignment> = r2;

        r0.<android.text.Layout: float mSpacingMult> = f0;

        r0.<android.text.Layout: float mSpacingAdd> = f1;

        $z0 = r9 instanceof android.text.Spanned;

        r0.<android.text.Layout: boolean mSpannedText> = $z0;

        return;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Layout: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" < 0");

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r7;
    }

    protected void setJustificationMode(int)
    {
        android.text.Layout r0;
        int i0;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        r0.<android.text.Layout: int mJustificationMode> = i0;

        return;
    }

    public boolean shouldClampCursor(int)
    {
        android.text.Layout r0;
        int i0, i1, $i2, $i3;
        int[] $r1;
        android.text.Layout$Alignment $r2;
        boolean z0;

        r0 := @this: android.text.Layout;

        i0 := @parameter0: int;

        $r1 = <android.text.Layout$1: int[] $SwitchMap$android$text$Layout$Alignment>;

        $r2 = virtualinvoke r0.<android.text.Layout: android.text.Layout$Alignment getParagraphAlignment(int)>(i0);

        $i2 = virtualinvoke $r2.<android.text.Layout$Alignment: int ordinal()>();

        i1 = $r1[$i2];

        z0 = 0;

        if i1 == 1 goto label2;

        if i1 == 5 goto label1;

        return 0;

     label1:
        return 1;

     label2:
        $i3 = virtualinvoke r0.<android.text.Layout: int getParagraphDirection(int)>(i0);

        if $i3 <= 0 goto label3;

        z0 = 1;

     label3:
        return z0;
    }
}
