public class android.text.PrecomputedText extends java.lang.Object implements android.text.Spannable
{
    private static final char LINE_FEED;
    private final int mEnd;
    private final android.text.PrecomputedText$ParagraphInfo[] mParagraphInfo;
    private final android.text.PrecomputedText$Params mParams;
    private final int mStart;
    private final android.text.SpannableString mText;

    private void <init>(java.lang.CharSequence, int, int, android.text.PrecomputedText$Params, android.text.PrecomputedText$ParagraphInfo[])
    {
        android.text.PrecomputedText r0;
        java.lang.CharSequence r1;
        int i0, i1;
        android.text.PrecomputedText$Params r2;
        android.text.PrecomputedText$ParagraphInfo[] r3;
        android.text.SpannableString $r4;

        r0 := @this: android.text.PrecomputedText;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: android.text.PrecomputedText$Params;

        r3 := @parameter4: android.text.PrecomputedText$ParagraphInfo[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new android.text.SpannableString;

        specialinvoke $r4.<android.text.SpannableString: void <init>(java.lang.CharSequence,boolean)>(r1, 1);

        r0.<android.text.PrecomputedText: android.text.SpannableString mText> = $r4;

        r0.<android.text.PrecomputedText: int mStart> = i0;

        r0.<android.text.PrecomputedText: int mEnd> = i1;

        r0.<android.text.PrecomputedText: android.text.PrecomputedText$Params mParams> = r2;

        r0.<android.text.PrecomputedText: android.text.PrecomputedText$ParagraphInfo[] mParagraphInfo> = r3;

        return;
    }

    public static android.text.PrecomputedText create(java.lang.CharSequence, android.text.PrecomputedText$Params)
    {
        java.lang.CharSequence r0;
        android.text.PrecomputedText$Params r1, r3;
        android.text.PrecomputedText r2, $r4;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean $z0;
        android.text.TextPaint $r5;
        android.text.TextDirectionHeuristic $r6;
        android.text.PrecomputedText$ParagraphInfo[] r7, r8;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: android.text.PrecomputedText$Params;

        r7 = null;

        $z0 = r0 instanceof android.text.PrecomputedText;

        if $z0 == 0 goto label3;

        r2 = (android.text.PrecomputedText) r0;

        r3 = virtualinvoke r2.<android.text.PrecomputedText: android.text.PrecomputedText$Params getParams()>();

        $r5 = staticinvoke <android.text.PrecomputedText$Params: android.text.TextPaint access$000(android.text.PrecomputedText$Params)>(r1);

        $r6 = staticinvoke <android.text.PrecomputedText$Params: android.text.TextDirectionHeuristic access$100(android.text.PrecomputedText$Params)>(r1);

        $i3 = staticinvoke <android.text.PrecomputedText$Params: int access$200(android.text.PrecomputedText$Params)>(r1);

        $i4 = staticinvoke <android.text.PrecomputedText$Params: int access$300(android.text.PrecomputedText$Params)>(r1);

        i0 = virtualinvoke r3.<android.text.PrecomputedText$Params: int checkResultUsable(android.text.TextPaint,android.text.TextDirectionHeuristic,int,int)>($r5, $r6, $i3, $i4);

        if i0 == 1 goto label2;

        if i0 == 2 goto label1;

        r7 = null;

        goto label3;

     label1:
        return r2;

     label2:
        r7 = null;

        $i5 = virtualinvoke r1.<android.text.PrecomputedText$Params: int getBreakStrategy()>();

        $i6 = virtualinvoke r3.<android.text.PrecomputedText$Params: int getBreakStrategy()>();

        if $i5 != $i6 goto label3;

        r7 = null;

        $i7 = virtualinvoke r1.<android.text.PrecomputedText$Params: int getHyphenationFrequency()>();

        $i8 = virtualinvoke r3.<android.text.PrecomputedText$Params: int getHyphenationFrequency()>();

        if $i7 != $i8 goto label3;

        r7 = staticinvoke <android.text.PrecomputedText: android.text.PrecomputedText$ParagraphInfo[] createMeasuredParagraphsFromPrecomputedText(android.text.PrecomputedText,android.text.PrecomputedText$Params,boolean)>(r2, r1, 1);

     label3:
        r8 = r7;

        if r7 != null goto label4;

        $i2 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        r8 = staticinvoke <android.text.PrecomputedText: android.text.PrecomputedText$ParagraphInfo[] createMeasuredParagraphs(java.lang.CharSequence,android.text.PrecomputedText$Params,int,int,boolean)>(r0, r1, 0, $i2, 1);

     label4:
        $r4 = new android.text.PrecomputedText;

        $i1 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        specialinvoke $r4.<android.text.PrecomputedText: void <init>(java.lang.CharSequence,int,int,android.text.PrecomputedText$Params,android.text.PrecomputedText$ParagraphInfo[])>(r0, 0, $i1, r1, r8);

        return $r4;
    }

    public static android.text.PrecomputedText$ParagraphInfo[] createMeasuredParagraphs(java.lang.CharSequence, android.text.PrecomputedText$Params, int, int, boolean)
    {
        java.lang.CharSequence r0;
        android.text.PrecomputedText$Params r1;
        int i0, $i1, $i2, $i3, i4, i5, i6, i7;
        boolean z0, z2;
        java.util.ArrayList $r3;
        android.text.PrecomputedText$ParagraphInfo[] $r6, $r8;
        java.lang.Object[] $r7;
        android.text.PrecomputedText$ParagraphInfo $r9;
        android.text.TextPaint $r10;
        android.text.TextDirectionHeuristic $r11;
        android.text.MeasuredParagraph $r12;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: android.text.PrecomputedText$Params;

        i4 := @parameter2: int;

        i0 := @parameter3: int;

        z0 := @parameter4: boolean;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $i1 = virtualinvoke r1.<android.text.PrecomputedText$Params: int getBreakStrategy()>();

        if $i1 == 0 goto label1;

        $i3 = virtualinvoke r1.<android.text.PrecomputedText$Params: int getHyphenationFrequency()>();

        if $i3 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        i5 = i4;

     label3:
        if i5 >= i0 goto label6;

        i6 = staticinvoke <android.text.TextUtils: int indexOf(java.lang.CharSequence,char,int,int)>(r0, 10, i5, i0);

        if i6 >= 0 goto label4;

        i7 = i0;

        goto label5;

     label4:
        i7 = i6 + 1;

     label5:
        $r9 = new android.text.PrecomputedText$ParagraphInfo;

        $r10 = virtualinvoke r1.<android.text.PrecomputedText$Params: android.text.TextPaint getTextPaint()>();

        $r11 = virtualinvoke r1.<android.text.PrecomputedText$Params: android.text.TextDirectionHeuristic getTextDirection()>();

        $r12 = staticinvoke <android.text.MeasuredParagraph: android.text.MeasuredParagraph buildForStaticLayout(android.text.TextPaint,java.lang.CharSequence,int,int,android.text.TextDirectionHeuristic,boolean,boolean,android.text.MeasuredParagraph,android.text.MeasuredParagraph)>($r10, r0, i5, i7, $r11, z2, z0, null, null);

        specialinvoke $r9.<android.text.PrecomputedText$ParagraphInfo: void <init>(int,android.text.MeasuredParagraph)>(i7, $r12);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r9);

        i5 = i7;

        goto label3;

     label6:
        $i2 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        $r6 = newarray (android.text.PrecomputedText$ParagraphInfo)[$i2];

        $r7 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r8 = (android.text.PrecomputedText$ParagraphInfo[]) $r7;

        return $r8;
    }

    private static android.text.PrecomputedText$ParagraphInfo[] createMeasuredParagraphsFromPrecomputedText(android.text.PrecomputedText, android.text.PrecomputedText$Params, boolean)
    {
        android.text.PrecomputedText r0;
        android.text.PrecomputedText$Params r1;
        boolean z0, z2;
        int i0, i1, $i2, $i3, $i4, i5, $i6;
        android.text.PrecomputedText$ParagraphInfo[] $r3, $r5;
        java.lang.Object[] $r4;
        android.text.PrecomputedText$ParagraphInfo $r6;
        android.text.TextPaint $r7;
        android.text.TextDirectionHeuristic $r8;
        android.text.MeasuredParagraph $r9, $r10;
        java.util.ArrayList $r11;

        r0 := @parameter0: android.text.PrecomputedText;

        r1 := @parameter1: android.text.PrecomputedText$Params;

        z0 := @parameter2: boolean;

        $i2 = virtualinvoke r1.<android.text.PrecomputedText$Params: int getBreakStrategy()>();

        if $i2 == 0 goto label1;

        $i4 = virtualinvoke r1.<android.text.PrecomputedText$Params: int getHyphenationFrequency()>();

        if $i4 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        i5 = 0;

     label3:
        $i6 = virtualinvoke r0.<android.text.PrecomputedText: int getParagraphCount()>();

        if i5 >= $i6 goto label4;

        i0 = virtualinvoke r0.<android.text.PrecomputedText: int getParagraphStart(int)>(i5);

        i1 = virtualinvoke r0.<android.text.PrecomputedText: int getParagraphEnd(int)>(i5);

        $r6 = new android.text.PrecomputedText$ParagraphInfo;

        $r7 = virtualinvoke r1.<android.text.PrecomputedText$Params: android.text.TextPaint getTextPaint()>();

        $r8 = virtualinvoke r1.<android.text.PrecomputedText$Params: android.text.TextDirectionHeuristic getTextDirection()>();

        $r9 = virtualinvoke r0.<android.text.PrecomputedText: android.text.MeasuredParagraph getMeasuredParagraph(int)>(i5);

        $r10 = staticinvoke <android.text.MeasuredParagraph: android.text.MeasuredParagraph buildForStaticLayout(android.text.TextPaint,java.lang.CharSequence,int,int,android.text.TextDirectionHeuristic,boolean,boolean,android.text.MeasuredParagraph,android.text.MeasuredParagraph)>($r7, r0, i0, i1, $r8, z2, z0, $r9, null);

        specialinvoke $r6.<android.text.PrecomputedText$ParagraphInfo: void <init>(int,android.text.MeasuredParagraph)>(i1, $r10);

        virtualinvoke $r11.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        i5 = i5 + 1;

        goto label3;

     label4:
        $i3 = virtualinvoke $r11.<java.util.ArrayList: int size()>();

        $r3 = newarray (android.text.PrecomputedText$ParagraphInfo)[$i3];

        $r4 = virtualinvoke $r11.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (android.text.PrecomputedText$ParagraphInfo[]) $r4;

        return $r5;
    }

    public char charAt(int)
    {
        android.text.PrecomputedText r0;
        int i0;
        android.text.SpannableString $r1;
        char $c1;

        r0 := @this: android.text.PrecomputedText;

        i0 := @parameter0: int;

        $r1 = r0.<android.text.PrecomputedText: android.text.SpannableString mText>;

        $c1 = virtualinvoke $r1.<android.text.SpannableString: char charAt(int)>(i0);

        return $c1;
    }

    public int checkResultUsable(int, int, android.text.TextDirectionHeuristic, android.text.TextPaint, int, int)
    {
        android.text.PrecomputedText r0;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        android.text.TextDirectionHeuristic r1;
        android.text.TextPaint r2;
        android.text.PrecomputedText$Params $r3;

        r0 := @this: android.text.PrecomputedText;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.text.TextDirectionHeuristic;

        r2 := @parameter3: android.text.TextPaint;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        $i4 = r0.<android.text.PrecomputedText: int mStart>;

        if $i4 != i0 goto label2;

        $i5 = r0.<android.text.PrecomputedText: int mEnd>;

        if $i5 == i1 goto label1;

        goto label2;

     label1:
        $r3 = r0.<android.text.PrecomputedText: android.text.PrecomputedText$Params mParams>;

        $i6 = virtualinvoke $r3.<android.text.PrecomputedText$Params: int checkResultUsable(android.text.TextPaint,android.text.TextDirectionHeuristic,int,int)>(r2, r1, i2, i3);

        return $i6;

     label2:
        return 0;
    }

    public int findParaIndex(int)
    {
        android.text.PrecomputedText r0;
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        android.text.PrecomputedText$ParagraphInfo[] r1, r11;
        java.lang.StringBuilder $r2;
        android.text.PrecomputedText$ParagraphInfo $r4, $r10;
        java.lang.IndexOutOfBoundsException $r8;
        java.lang.String $r9;

        r0 := @this: android.text.PrecomputedText;

        i0 := @parameter0: int;

        i6 = 0;

     label1:
        r11 = r0.<android.text.PrecomputedText: android.text.PrecomputedText$ParagraphInfo[] mParagraphInfo>;

        $i1 = lengthof r11;

        if i6 >= $i1 goto label3;

        $r10 = r11[i6];

        $i5 = $r10.<android.text.PrecomputedText$ParagraphInfo: int paragraphEnd>;

        if i0 >= $i5 goto label2;

        return i6;

     label2:
        i6 = i6 + 1;

        goto label1;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pos must be less than ");

        r1 = r0.<android.text.PrecomputedText: android.text.PrecomputedText$ParagraphInfo[] mParagraphInfo>;

        $i2 = lengthof r1;

        $i3 = $i2 - 1;

        $r4 = r1[$i3];

        $i4 = $r4.<android.text.PrecomputedText$ParagraphInfo: int paragraphEnd>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", gave ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = new java.lang.IndexOutOfBoundsException;

        $r9 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r9);

        throw $r8;
    }

    public void getBounds(int, int, android.graphics.Rect)
    {
        android.text.PrecomputedText r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r12;
        java.lang.String $r13;
        android.text.MeasuredParagraph $r14;
        android.text.SpannableString $r15, $r16;
        android.graphics.Rect r17;
        boolean z1, z2, z3;

        r0 := @this: android.text.PrecomputedText;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r17 := @parameter2: android.graphics.Rect;

        if i0 < 0 goto label1;

        $r16 = r0.<android.text.PrecomputedText: android.text.SpannableString mText>;

        $i8 = virtualinvoke $r16.<android.text.SpannableString: int length()>();

        if i0 > $i8 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z1, "invalid start offset");

        if i1 < 0 goto label3;

        $r15 = r0.<android.text.PrecomputedText: android.text.SpannableString mText>;

        $i7 = virtualinvoke $r15.<android.text.SpannableString: int length()>();

        if i1 > $i7 goto label3;

        z2 = 1;

        goto label4;

     label3:
        z2 = 0;

     label4:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z2, "invalid end offset");

        if i0 > i1 goto label5;

        z3 = 1;

        goto label6;

     label5:
        z3 = 0;

     label6:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z3, "start offset can not be larger than end offset");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r17);

        if i0 != i1 goto label7;

        virtualinvoke r17.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, 0, 0);

        return;

     label7:
        i2 = virtualinvoke r0.<android.text.PrecomputedText: int findParaIndex(int)>(i0);

        i3 = virtualinvoke r0.<android.text.PrecomputedText: int getParagraphStart(int)>(i2);

        i4 = virtualinvoke r0.<android.text.PrecomputedText: int getParagraphEnd(int)>(i2);

        if i0 < i3 goto label8;

        if i4 < i1 goto label8;

        $r14 = virtualinvoke r0.<android.text.PrecomputedText: android.text.MeasuredParagraph getMeasuredParagraph(int)>(i2);

        $i6 = i0 - i3;

        $i5 = i1 - i3;

        virtualinvoke $r14.<android.text.MeasuredParagraph: void getBounds(int,int,android.graphics.Rect)>($i6, $i5, r17);

        return;

     label8:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot measured across the paragraph:para: (");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("), request: (");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r12;
    }

    public float getCharWidthAt(int)
    {
        android.text.PrecomputedText r0;
        int i0, i1, i2, $i4, $i5;
        android.text.SpannableString $r1;
        boolean z0;
        android.text.MeasuredParagraph $r2;
        float $f0;

        r0 := @this: android.text.PrecomputedText;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r1 = r0.<android.text.PrecomputedText: android.text.SpannableString mText>;

        $i4 = virtualinvoke $r1.<android.text.SpannableString: int length()>();

        if i0 >= $i4 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z0, "invalid offset");

        i1 = virtualinvoke r0.<android.text.PrecomputedText: int findParaIndex(int)>(i0);

        i2 = virtualinvoke r0.<android.text.PrecomputedText: int getParagraphStart(int)>(i1);

        virtualinvoke r0.<android.text.PrecomputedText: int getParagraphEnd(int)>(i1);

        $r2 = virtualinvoke r0.<android.text.PrecomputedText: android.text.MeasuredParagraph getMeasuredParagraph(int)>(i1);

        $i5 = i0 - i2;

        $f0 = virtualinvoke $r2.<android.text.MeasuredParagraph: float getCharWidthAt(int)>($i5);

        return $f0;
    }

    public int getEnd()
    {
        android.text.PrecomputedText r0;
        int $i0;

        r0 := @this: android.text.PrecomputedText;

        $i0 = r0.<android.text.PrecomputedText: int mEnd>;

        return $i0;
    }

    public android.text.MeasuredParagraph getMeasuredParagraph(int)
    {
        android.text.PrecomputedText r0;
        int i0;
        android.text.PrecomputedText$ParagraphInfo[] $r1;
        android.text.PrecomputedText$ParagraphInfo $r2;
        android.text.MeasuredParagraph $r3;

        r0 := @this: android.text.PrecomputedText;

        i0 := @parameter0: int;

        $r1 = r0.<android.text.PrecomputedText: android.text.PrecomputedText$ParagraphInfo[] mParagraphInfo>;

        $r2 = $r1[i0];

        $r3 = $r2.<android.text.PrecomputedText$ParagraphInfo: android.text.MeasuredParagraph measured>;

        return $r3;
    }

    public int getMemoryUsage()
    {
        android.text.PrecomputedText r0;
        int $i0, $i1, i2, i3;
        android.text.MeasuredParagraph $r1;

        r0 := @this: android.text.PrecomputedText;

        i2 = 0;

        i3 = 0;

     label1:
        $i0 = virtualinvoke r0.<android.text.PrecomputedText: int getParagraphCount()>();

        if i3 >= $i0 goto label2;

        $r1 = virtualinvoke r0.<android.text.PrecomputedText: android.text.MeasuredParagraph getMeasuredParagraph(int)>(i3);

        $i1 = virtualinvoke $r1.<android.text.MeasuredParagraph: int getMemoryUsage()>();

        i2 = i2 + $i1;

        i3 = i3 + 1;

        goto label1;

     label2:
        return i2;
    }

    public int getParagraphCount()
    {
        android.text.PrecomputedText r0;
        android.text.PrecomputedText$ParagraphInfo[] $r1;
        int $i0;

        r0 := @this: android.text.PrecomputedText;

        $r1 = r0.<android.text.PrecomputedText: android.text.PrecomputedText$ParagraphInfo[] mParagraphInfo>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public int getParagraphEnd(int)
    {
        android.text.PrecomputedText r0;
        int i0, $i1, $i3;
        android.text.PrecomputedText$ParagraphInfo[] $r1;
        android.text.PrecomputedText$ParagraphInfo $r2;

        r0 := @this: android.text.PrecomputedText;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<android.text.PrecomputedText: int getParagraphCount()>();

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentInRange(int,int,int,java.lang.String)>(i0, 0, $i1, "paraIndex");

        $r1 = r0.<android.text.PrecomputedText: android.text.PrecomputedText$ParagraphInfo[] mParagraphInfo>;

        $r2 = $r1[i0];

        $i3 = $r2.<android.text.PrecomputedText$ParagraphInfo: int paragraphEnd>;

        return $i3;
    }

    public android.text.PrecomputedText$ParagraphInfo[] getParagraphInfo()
    {
        android.text.PrecomputedText r0;
        android.text.PrecomputedText$ParagraphInfo[] $r1;

        r0 := @this: android.text.PrecomputedText;

        $r1 = r0.<android.text.PrecomputedText: android.text.PrecomputedText$ParagraphInfo[] mParagraphInfo>;

        return $r1;
    }

    public int getParagraphStart(int)
    {
        android.text.PrecomputedText r0;
        int $i0, $i2, i3, i4;

        r0 := @this: android.text.PrecomputedText;

        i3 := @parameter0: int;

        $i0 = virtualinvoke r0.<android.text.PrecomputedText: int getParagraphCount()>();

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentInRange(int,int,int,java.lang.String)>(i3, 0, $i0, "paraIndex");

        if i3 != 0 goto label1;

        i4 = r0.<android.text.PrecomputedText: int mStart>;

        goto label2;

     label1:
        $i2 = i3 - 1;

        i4 = virtualinvoke r0.<android.text.PrecomputedText: int getParagraphEnd(int)>($i2);

     label2:
        return i4;
    }

    public android.text.PrecomputedText$Params getParams()
    {
        android.text.PrecomputedText r0;
        android.text.PrecomputedText$Params $r1;

        r0 := @this: android.text.PrecomputedText;

        $r1 = r0.<android.text.PrecomputedText: android.text.PrecomputedText$Params mParams>;

        return $r1;
    }

    public int getSpanEnd(java.lang.Object)
    {
        android.text.PrecomputedText r0;
        java.lang.Object r1;
        android.text.SpannableString $r2;
        int $i0;

        r0 := @this: android.text.PrecomputedText;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<android.text.PrecomputedText: android.text.SpannableString mText>;

        $i0 = virtualinvoke $r2.<android.text.SpannableString: int getSpanEnd(java.lang.Object)>(r1);

        return $i0;
    }

    public int getSpanFlags(java.lang.Object)
    {
        android.text.PrecomputedText r0;
        java.lang.Object r1;
        android.text.SpannableString $r2;
        int $i0;

        r0 := @this: android.text.PrecomputedText;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<android.text.PrecomputedText: android.text.SpannableString mText>;

        $i0 = virtualinvoke $r2.<android.text.SpannableString: int getSpanFlags(java.lang.Object)>(r1);

        return $i0;
    }

    public int getSpanStart(java.lang.Object)
    {
        android.text.PrecomputedText r0;
        java.lang.Object r1;
        android.text.SpannableString $r2;
        int $i0;

        r0 := @this: android.text.PrecomputedText;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<android.text.PrecomputedText: android.text.SpannableString mText>;

        $i0 = virtualinvoke $r2.<android.text.SpannableString: int getSpanStart(java.lang.Object)>(r1);

        return $i0;
    }

    public java.lang.Object[] getSpans(int, int, java.lang.Class)
    {
        android.text.PrecomputedText r0;
        int i0, i1;
        java.lang.Class r1;
        android.text.SpannableString $r2;
        java.lang.Object[] $r3;

        r0 := @this: android.text.PrecomputedText;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.Class;

        $r2 = r0.<android.text.PrecomputedText: android.text.SpannableString mText>;

        $r3 = virtualinvoke $r2.<android.text.SpannableString: java.lang.Object[] getSpans(int,int,java.lang.Class)>(i0, i1, r1);

        return $r3;
    }

    public int getStart()
    {
        android.text.PrecomputedText r0;
        int $i0;

        r0 := @this: android.text.PrecomputedText;

        $i0 = r0.<android.text.PrecomputedText: int mStart>;

        return $i0;
    }

    public java.lang.CharSequence getText()
    {
        android.text.PrecomputedText r0;
        android.text.SpannableString $r1;

        r0 := @this: android.text.PrecomputedText;

        $r1 = r0.<android.text.PrecomputedText: android.text.SpannableString mText>;

        return $r1;
    }

    public float getWidth(int, int)
    {
        android.text.PrecomputedText r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r12;
        java.lang.String $r13;
        android.text.MeasuredParagraph $r14;
        float $f0;
        android.text.SpannableString $r15, $r16;
        boolean z1, z2, z3;

        r0 := @this: android.text.PrecomputedText;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < 0 goto label1;

        $r16 = r0.<android.text.PrecomputedText: android.text.SpannableString mText>;

        $i8 = virtualinvoke $r16.<android.text.SpannableString: int length()>();

        if i0 > $i8 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z1, "invalid start offset");

        if i1 < 0 goto label3;

        $r15 = r0.<android.text.PrecomputedText: android.text.SpannableString mText>;

        $i7 = virtualinvoke $r15.<android.text.SpannableString: int length()>();

        if i1 > $i7 goto label3;

        z2 = 1;

        goto label4;

     label3:
        z2 = 0;

     label4:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z2, "invalid end offset");

        if i0 > i1 goto label5;

        z3 = 1;

        goto label6;

     label5:
        z3 = 0;

     label6:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z3, "start offset can not be larger than end offset");

        if i0 != i1 goto label7;

        return 0.0F;

     label7:
        i2 = virtualinvoke r0.<android.text.PrecomputedText: int findParaIndex(int)>(i0);

        i3 = virtualinvoke r0.<android.text.PrecomputedText: int getParagraphStart(int)>(i2);

        i4 = virtualinvoke r0.<android.text.PrecomputedText: int getParagraphEnd(int)>(i2);

        if i0 < i3 goto label8;

        if i4 < i1 goto label8;

        $r14 = virtualinvoke r0.<android.text.PrecomputedText: android.text.MeasuredParagraph getMeasuredParagraph(int)>(i2);

        $i6 = i0 - i3;

        $i5 = i1 - i3;

        $f0 = virtualinvoke $r14.<android.text.MeasuredParagraph: float getWidth(int,int)>($i6, $i5);

        return $f0;

     label8:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot measured across the paragraph:para: (");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("), request: (");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r12;
    }

    public int length()
    {
        android.text.PrecomputedText r0;
        android.text.SpannableString $r1;
        int $i0;

        r0 := @this: android.text.PrecomputedText;

        $r1 = r0.<android.text.PrecomputedText: android.text.SpannableString mText>;

        $i0 = virtualinvoke $r1.<android.text.SpannableString: int length()>();

        return $i0;
    }

    public int nextSpanTransition(int, int, java.lang.Class)
    {
        android.text.PrecomputedText r0;
        int i0, i1, $i2;
        java.lang.Class r1;
        android.text.SpannableString $r2;

        r0 := @this: android.text.PrecomputedText;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.Class;

        $r2 = r0.<android.text.PrecomputedText: android.text.SpannableString mText>;

        $i2 = virtualinvoke $r2.<android.text.SpannableString: int nextSpanTransition(int,int,java.lang.Class)>(i0, i1, r1);

        return $i2;
    }

    public void removeSpan(java.lang.Object)
    {
        android.text.PrecomputedText r0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        android.text.SpannableString $r3;

        r0 := @this: android.text.PrecomputedText;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof android.text.style.MetricAffectingSpan;

        if $z0 != 0 goto label1;

        $r3 = r0.<android.text.PrecomputedText: android.text.SpannableString mText>;

        virtualinvoke $r3.<android.text.SpannableString: void removeSpan(java.lang.Object)>(r1);

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("MetricAffectingSpan can not be removed from PrecomputedText.");

        throw $r2;
    }

    public void setSpan(java.lang.Object, int, int, int)
    {
        android.text.PrecomputedText r0;
        java.lang.Object r1;
        int i0, i1, i2;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        android.text.SpannableString $r3;

        r0 := @this: android.text.PrecomputedText;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $z0 = r1 instanceof android.text.style.MetricAffectingSpan;

        if $z0 != 0 goto label1;

        $r3 = r0.<android.text.PrecomputedText: android.text.SpannableString mText>;

        virtualinvoke $r3.<android.text.SpannableString: void setSpan(java.lang.Object,int,int,int)>(r1, i0, i1, i2);

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("MetricAffectingSpan can not be set to PrecomputedText.");

        throw $r2;
    }

    public java.lang.CharSequence subSequence(int, int)
    {
        android.text.PrecomputedText r0, $r4;
        int i0, i1;
        android.text.SpannableString $r1;
        java.lang.CharSequence $r2;
        android.text.PrecomputedText$Params $r3;

        r0 := @this: android.text.PrecomputedText;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<android.text.PrecomputedText: android.text.SpannableString mText>;

        $r2 = virtualinvoke $r1.<android.text.SpannableString: java.lang.CharSequence subSequence(int,int)>(i0, i1);

        $r3 = r0.<android.text.PrecomputedText: android.text.PrecomputedText$Params mParams>;

        $r4 = staticinvoke <android.text.PrecomputedText: android.text.PrecomputedText create(java.lang.CharSequence,android.text.PrecomputedText$Params)>($r2, $r3);

        return $r4;
    }

    public java.lang.String toString()
    {
        android.text.PrecomputedText r0;
        android.text.SpannableString $r1;
        java.lang.String $r2;

        r0 := @this: android.text.PrecomputedText;

        $r1 = r0.<android.text.PrecomputedText: android.text.SpannableString mText>;

        $r2 = virtualinvoke $r1.<android.text.SpannableString: java.lang.String toString()>();

        return $r2;
    }

    public static void <clinit>()
    {
        <android.text.PrecomputedText: char LINE_FEED> = 10;

        return;
    }
}
