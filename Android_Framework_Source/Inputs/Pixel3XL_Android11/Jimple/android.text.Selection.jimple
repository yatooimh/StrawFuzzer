public class android.text.Selection extends java.lang.Object
{
    public static final java.lang.Object SELECTION_END;
    private static final java.lang.Object SELECTION_MEMORY;
    public static final java.lang.Object SELECTION_START;

    static void <clinit>()
    {
        android.text.Selection$MEMORY $r0;
        android.text.Selection$START $r1;
        android.text.Selection$END $r2;

        $r0 = new android.text.Selection$MEMORY;

        specialinvoke $r0.<android.text.Selection$MEMORY: void <init>(android.text.Selection$1)>(null);

        <android.text.Selection: java.lang.Object SELECTION_MEMORY> = $r0;

        $r1 = new android.text.Selection$START;

        specialinvoke $r1.<android.text.Selection$START: void <init>(android.text.Selection$1)>(null);

        <android.text.Selection: java.lang.Object SELECTION_START> = $r1;

        $r2 = new android.text.Selection$END;

        specialinvoke $r2.<android.text.Selection$END: void <init>(android.text.Selection$1)>(null);

        <android.text.Selection: java.lang.Object SELECTION_END> = $r2;

        return;
    }

    private void <init>()
    {
        android.text.Selection r0;

        r0 := @this: android.text.Selection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static java.lang.Object access$000()
    {
        java.lang.Object $r0;

        $r0 = <android.text.Selection: java.lang.Object SELECTION_MEMORY>;

        return $r0;
    }

    private static int chooseHorizontal(android.text.Layout, int, int, int)
    {
        android.text.Layout r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        float f0, f1;
        byte $b9, $b10;

        r0 := @parameter0: android.text.Layout;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $i3 = virtualinvoke r0.<android.text.Layout: int getLineForOffset(int)>(i1);

        $i4 = virtualinvoke r0.<android.text.Layout: int getLineForOffset(int)>(i2);

        if $i3 != $i4 goto label4;

        f0 = virtualinvoke r0.<android.text.Layout: float getPrimaryHorizontal(int)>(i1);

        f1 = virtualinvoke r0.<android.text.Layout: float getPrimaryHorizontal(int)>(i2);

        if i0 >= 0 goto label2;

        $b10 = f0 cmpg f1;

        if $b10 >= 0 goto label1;

        return i1;

     label1:
        return i2;

     label2:
        $b9 = f0 cmpl f1;

        if $b9 <= 0 goto label3;

        return i1;

     label3:
        return i2;

     label4:
        $i5 = virtualinvoke r0.<android.text.Layout: int getLineForOffset(int)>(i1);

        $i6 = virtualinvoke r0.<android.text.Layout: int getParagraphDirection(int)>($i5);

        if $i6 != i0 goto label5;

        $i8 = staticinvoke <java.lang.Math: int max(int,int)>(i1, i2);

        return $i8;

     label5:
        $i7 = staticinvoke <java.lang.Math: int min(int,int)>(i1, i2);

        return $i7;
    }

    public static boolean extendDown(android.text.Spannable, android.text.Layout)
    {
        android.text.Spannable r0;
        android.text.Layout r1;
        int i0, i1, $i2, $i3, $i4, $i5;

        r0 := @parameter0: android.text.Spannable;

        r1 := @parameter1: android.text.Layout;

        i0 = staticinvoke <android.text.Selection: int getSelectionEnd(java.lang.CharSequence)>(r0);

        i1 = virtualinvoke r1.<android.text.Layout: int getLineForOffset(int)>(i0);

        $i2 = virtualinvoke r1.<android.text.Layout: int getLineCount()>();

        $i3 = $i2 - 1;

        if i1 >= $i3 goto label1;

        staticinvoke <android.text.Selection: void setSelectionAndMemory(android.text.Spannable,android.text.Layout,int,int,int,boolean)>(r0, r1, i1, i0, 1, 1);

        return 1;

     label1:
        $i4 = interfaceinvoke r0.<android.text.Spannable: int length()>();

        if i0 == $i4 goto label2;

        $i5 = interfaceinvoke r0.<android.text.Spannable: int length()>();

        staticinvoke <android.text.Selection: void extendSelection(android.text.Spannable,int,int)>(r0, $i5, -1);

        return 1;

     label2:
        return 1;
    }

    public static boolean extendLeft(android.text.Spannable, android.text.Layout)
    {
        android.text.Spannable r0;
        android.text.Layout r1;
        int i0, i1;

        r0 := @parameter0: android.text.Spannable;

        r1 := @parameter1: android.text.Layout;

        i0 = staticinvoke <android.text.Selection: int getSelectionEnd(java.lang.CharSequence)>(r0);

        i1 = virtualinvoke r1.<android.text.Layout: int getOffsetToLeftOf(int)>(i0);

        if i1 == i0 goto label1;

        staticinvoke <android.text.Selection: void extendSelection(android.text.Spannable,int)>(r0, i1);

        return 1;

     label1:
        return 1;
    }

    public static boolean extendRight(android.text.Spannable, android.text.Layout)
    {
        android.text.Spannable r0;
        android.text.Layout r1;
        int i0, i1;

        r0 := @parameter0: android.text.Spannable;

        r1 := @parameter1: android.text.Layout;

        i0 = staticinvoke <android.text.Selection: int getSelectionEnd(java.lang.CharSequence)>(r0);

        i1 = virtualinvoke r1.<android.text.Layout: int getOffsetToRightOf(int)>(i0);

        if i1 == i0 goto label1;

        staticinvoke <android.text.Selection: void extendSelection(android.text.Spannable,int)>(r0, i1);

        return 1;

     label1:
        return 1;
    }

    public static final void extendSelection(android.text.Spannable, int)
    {
        android.text.Spannable r0;
        int i0;

        r0 := @parameter0: android.text.Spannable;

        i0 := @parameter1: int;

        staticinvoke <android.text.Selection: void extendSelection(android.text.Spannable,int,int)>(r0, i0, -1);

        return;
    }

    private static void extendSelection(android.text.Spannable, int, int)
    {
        android.text.Spannable r0;
        int i0, i1, $i2;
        java.lang.Object $r1, $r2;

        r0 := @parameter0: android.text.Spannable;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = <android.text.Selection: java.lang.Object SELECTION_END>;

        $i2 = interfaceinvoke r0.<android.text.Spannable: int getSpanStart(java.lang.Object)>($r1);

        if $i2 == i0 goto label1;

        $r2 = <android.text.Selection: java.lang.Object SELECTION_END>;

        interfaceinvoke r0.<android.text.Spannable: void setSpan(java.lang.Object,int,int,int)>($r2, i0, i0, 34);

     label1:
        staticinvoke <android.text.Selection: void updateMemory(android.text.Spannable,int)>(r0, i1);

        return;
    }

    public static boolean extendToLeftEdge(android.text.Spannable, android.text.Layout)
    {
        android.text.Spannable r0;
        android.text.Layout r1;
        int $i0;

        r0 := @parameter0: android.text.Spannable;

        r1 := @parameter1: android.text.Layout;

        $i0 = staticinvoke <android.text.Selection: int findEdge(android.text.Spannable,android.text.Layout,int)>(r0, r1, -1);

        staticinvoke <android.text.Selection: void extendSelection(android.text.Spannable,int)>(r0, $i0);

        return 1;
    }

    public static boolean extendToRightEdge(android.text.Spannable, android.text.Layout)
    {
        android.text.Spannable r0;
        android.text.Layout r1;
        int $i0;

        r0 := @parameter0: android.text.Spannable;

        r1 := @parameter1: android.text.Layout;

        $i0 = staticinvoke <android.text.Selection: int findEdge(android.text.Spannable,android.text.Layout,int)>(r0, r1, 1);

        staticinvoke <android.text.Selection: void extendSelection(android.text.Spannable,int)>(r0, $i0);

        return 1;
    }

    public static boolean extendUp(android.text.Spannable, android.text.Layout)
    {
        android.text.Spannable r0;
        android.text.Layout r1;
        int i0, i1;

        r0 := @parameter0: android.text.Spannable;

        r1 := @parameter1: android.text.Layout;

        i0 = staticinvoke <android.text.Selection: int getSelectionEnd(java.lang.CharSequence)>(r0);

        i1 = virtualinvoke r1.<android.text.Layout: int getLineForOffset(int)>(i0);

        if i1 <= 0 goto label1;

        staticinvoke <android.text.Selection: void setSelectionAndMemory(android.text.Spannable,android.text.Layout,int,int,int,boolean)>(r0, r1, i1, i0, -1, 1);

        return 1;

     label1:
        if i0 == 0 goto label2;

        staticinvoke <android.text.Selection: void extendSelection(android.text.Spannable,int)>(r0, 0);

        return 1;

     label2:
        return 1;
    }

    private static int findEdge(android.text.Spannable, android.text.Layout, int)
    {
        android.text.Spannable r0;
        android.text.Layout r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9;

        r0 := @parameter0: android.text.Spannable;

        r1 := @parameter1: android.text.Layout;

        i8 := @parameter2: int;

        $i1 = staticinvoke <android.text.Selection: int getSelectionEnd(java.lang.CharSequence)>(r0);

        i0 = virtualinvoke r1.<android.text.Layout: int getLineForOffset(int)>($i1);

        $i2 = virtualinvoke r1.<android.text.Layout: int getParagraphDirection(int)>(i0);

        $i3 = i8 * $i2;

        if $i3 >= 0 goto label1;

        $i7 = virtualinvoke r1.<android.text.Layout: int getLineStart(int)>(i0);

        return $i7;

     label1:
        i9 = virtualinvoke r1.<android.text.Layout: int getLineEnd(int)>(i0);

        $i4 = virtualinvoke r1.<android.text.Layout: int getLineCount()>();

        $i5 = $i4 - 1;

        if i0 != $i5 goto label2;

        return i9;

     label2:
        $i6 = i9 - 1;

        return $i6;
    }

    public static final int getSelectionEnd(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        boolean $z0;
        java.lang.Object $r1;
        android.text.Spanned $r2;
        int $i0;

        r0 := @parameter0: java.lang.CharSequence;

        $z0 = r0 instanceof android.text.Spanned;

        if $z0 == 0 goto label1;

        $r2 = (android.text.Spanned) r0;

        $r1 = <android.text.Selection: java.lang.Object SELECTION_END>;

        $i0 = interfaceinvoke $r2.<android.text.Spanned: int getSpanStart(java.lang.Object)>($r1);

        return $i0;

     label1:
        return -1;
    }

    private static int getSelectionMemory(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        boolean $z0;
        java.lang.Object $r1;
        android.text.Spanned $r2;
        int $i0;

        r0 := @parameter0: java.lang.CharSequence;

        $z0 = r0 instanceof android.text.Spanned;

        if $z0 == 0 goto label1;

        $r2 = (android.text.Spanned) r0;

        $r1 = <android.text.Selection: java.lang.Object SELECTION_MEMORY>;

        $i0 = interfaceinvoke $r2.<android.text.Spanned: int getSpanStart(java.lang.Object)>($r1);

        return $i0;

     label1:
        return -1;
    }

    public static final int getSelectionStart(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        boolean $z0;
        java.lang.Object $r1;
        android.text.Spanned $r2;
        int $i0;

        r0 := @parameter0: java.lang.CharSequence;

        $z0 = r0 instanceof android.text.Spanned;

        if $z0 == 0 goto label1;

        $r2 = (android.text.Spanned) r0;

        $r1 = <android.text.Selection: java.lang.Object SELECTION_START>;

        $i0 = interfaceinvoke $r2.<android.text.Spanned: int getSpanStart(java.lang.Object)>($r1);

        return $i0;

     label1:
        return -1;
    }

    public static boolean moveDown(android.text.Spannable, android.text.Layout)
    {
        android.text.Spannable r0;
        android.text.Layout r1;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8, i9;

        r0 := @parameter0: android.text.Spannable;

        r1 := @parameter1: android.text.Layout;

        i0 = staticinvoke <android.text.Selection: int getSelectionStart(java.lang.CharSequence)>(r0);

        i6 = staticinvoke <android.text.Selection: int getSelectionEnd(java.lang.CharSequence)>(r0);

        if i0 == i6 goto label2;

        i7 = staticinvoke <java.lang.Math: int min(int,int)>(i0, i6);

        i8 = staticinvoke <java.lang.Math: int max(int,int)>(i0, i6);

        staticinvoke <android.text.Selection: void setSelection(android.text.Spannable,int)>(r0, i8);

        if i7 != 0 goto label1;

        $i5 = interfaceinvoke r0.<android.text.Spannable: int length()>();

        if i8 != $i5 goto label1;

        return 0;

     label1:
        return 1;

     label2:
        i9 = virtualinvoke r1.<android.text.Layout: int getLineForOffset(int)>(i6);

        $i1 = virtualinvoke r1.<android.text.Layout: int getLineCount()>();

        $i2 = $i1 - 1;

        if i9 >= $i2 goto label3;

        staticinvoke <android.text.Selection: void setSelectionAndMemory(android.text.Spannable,android.text.Layout,int,int,int,boolean)>(r0, r1, i9, i6, 1, 0);

        return 1;

     label3:
        $i3 = interfaceinvoke r0.<android.text.Spannable: int length()>();

        if i6 == $i3 goto label4;

        $i4 = interfaceinvoke r0.<android.text.Spannable: int length()>();

        staticinvoke <android.text.Selection: void setSelection(android.text.Spannable,int)>(r0, $i4);

        return 1;

     label4:
        return 0;
    }

    public static boolean moveLeft(android.text.Spannable, android.text.Layout)
    {
        android.text.Spannable r0;
        android.text.Layout r1;
        int i0, $i1, i2, i3;

        r0 := @parameter0: android.text.Spannable;

        r1 := @parameter1: android.text.Layout;

        i2 = staticinvoke <android.text.Selection: int getSelectionStart(java.lang.CharSequence)>(r0);

        i0 = staticinvoke <android.text.Selection: int getSelectionEnd(java.lang.CharSequence)>(r0);

        if i2 == i0 goto label1;

        $i1 = staticinvoke <android.text.Selection: int chooseHorizontal(android.text.Layout,int,int,int)>(r1, -1, i2, i0);

        staticinvoke <android.text.Selection: void setSelection(android.text.Spannable,int)>(r0, $i1);

        return 1;

     label1:
        i3 = virtualinvoke r1.<android.text.Layout: int getOffsetToLeftOf(int)>(i0);

        if i3 == i0 goto label2;

        staticinvoke <android.text.Selection: void setSelection(android.text.Spannable,int)>(r0, i3);

        return 1;

     label2:
        return 0;
    }

    public static boolean moveRight(android.text.Spannable, android.text.Layout)
    {
        android.text.Spannable r0;
        android.text.Layout r1;
        int i0, $i1, i2, i3;

        r0 := @parameter0: android.text.Spannable;

        r1 := @parameter1: android.text.Layout;

        i2 = staticinvoke <android.text.Selection: int getSelectionStart(java.lang.CharSequence)>(r0);

        i0 = staticinvoke <android.text.Selection: int getSelectionEnd(java.lang.CharSequence)>(r0);

        if i2 == i0 goto label1;

        $i1 = staticinvoke <android.text.Selection: int chooseHorizontal(android.text.Layout,int,int,int)>(r1, 1, i2, i0);

        staticinvoke <android.text.Selection: void setSelection(android.text.Spannable,int)>(r0, $i1);

        return 1;

     label1:
        i3 = virtualinvoke r1.<android.text.Layout: int getOffsetToRightOf(int)>(i0);

        if i3 == i0 goto label2;

        staticinvoke <android.text.Selection: void setSelection(android.text.Spannable,int)>(r0, i3);

        return 1;

     label2:
        return 0;
    }

    public static boolean moveToFollowing(android.text.Spannable, android.text.Selection$PositionIterator, boolean)
    {
        android.text.Spannable r0;
        android.text.Selection$PositionIterator r1;
        boolean z0;
        int i0, $i1;

        r0 := @parameter0: android.text.Spannable;

        r1 := @parameter1: android.text.Selection$PositionIterator;

        z0 := @parameter2: boolean;

        $i1 = staticinvoke <android.text.Selection: int getSelectionEnd(java.lang.CharSequence)>(r0);

        i0 = interfaceinvoke r1.<android.text.Selection$PositionIterator: int following(int)>($i1);

        if i0 == -1 goto label2;

        if z0 == 0 goto label1;

        staticinvoke <android.text.Selection: void extendSelection(android.text.Spannable,int)>(r0, i0);

        goto label2;

     label1:
        staticinvoke <android.text.Selection: void setSelection(android.text.Spannable,int)>(r0, i0);

     label2:
        return 1;
    }

    public static boolean moveToLeftEdge(android.text.Spannable, android.text.Layout)
    {
        android.text.Spannable r0;
        android.text.Layout r1;
        int $i0;

        r0 := @parameter0: android.text.Spannable;

        r1 := @parameter1: android.text.Layout;

        $i0 = staticinvoke <android.text.Selection: int findEdge(android.text.Spannable,android.text.Layout,int)>(r0, r1, -1);

        staticinvoke <android.text.Selection: void setSelection(android.text.Spannable,int)>(r0, $i0);

        return 1;
    }

    public static boolean moveToPreceding(android.text.Spannable, android.text.Selection$PositionIterator, boolean)
    {
        android.text.Spannable r0;
        android.text.Selection$PositionIterator r1;
        boolean z0;
        int i0, $i1;

        r0 := @parameter0: android.text.Spannable;

        r1 := @parameter1: android.text.Selection$PositionIterator;

        z0 := @parameter2: boolean;

        $i1 = staticinvoke <android.text.Selection: int getSelectionEnd(java.lang.CharSequence)>(r0);

        i0 = interfaceinvoke r1.<android.text.Selection$PositionIterator: int preceding(int)>($i1);

        if i0 == -1 goto label2;

        if z0 == 0 goto label1;

        staticinvoke <android.text.Selection: void extendSelection(android.text.Spannable,int)>(r0, i0);

        goto label2;

     label1:
        staticinvoke <android.text.Selection: void setSelection(android.text.Spannable,int)>(r0, i0);

     label2:
        return 1;
    }

    public static boolean moveToRightEdge(android.text.Spannable, android.text.Layout)
    {
        android.text.Spannable r0;
        android.text.Layout r1;
        int $i0;

        r0 := @parameter0: android.text.Spannable;

        r1 := @parameter1: android.text.Layout;

        $i0 = staticinvoke <android.text.Selection: int findEdge(android.text.Spannable,android.text.Layout,int)>(r0, r1, 1);

        staticinvoke <android.text.Selection: void setSelection(android.text.Spannable,int)>(r0, $i0);

        return 1;
    }

    public static boolean moveUp(android.text.Spannable, android.text.Layout)
    {
        android.text.Spannable r0;
        android.text.Layout r1;
        int i0, $i1, i2, i3, i4, i5;

        r0 := @parameter0: android.text.Spannable;

        r1 := @parameter1: android.text.Layout;

        i0 = staticinvoke <android.text.Selection: int getSelectionStart(java.lang.CharSequence)>(r0);

        i2 = staticinvoke <android.text.Selection: int getSelectionEnd(java.lang.CharSequence)>(r0);

        if i0 == i2 goto label2;

        i3 = staticinvoke <java.lang.Math: int min(int,int)>(i0, i2);

        i4 = staticinvoke <java.lang.Math: int max(int,int)>(i0, i2);

        staticinvoke <android.text.Selection: void setSelection(android.text.Spannable,int)>(r0, i3);

        if i3 != 0 goto label1;

        $i1 = interfaceinvoke r0.<android.text.Spannable: int length()>();

        if i4 != $i1 goto label1;

        return 0;

     label1:
        return 1;

     label2:
        i5 = virtualinvoke r1.<android.text.Layout: int getLineForOffset(int)>(i2);

        if i5 <= 0 goto label3;

        staticinvoke <android.text.Selection: void setSelectionAndMemory(android.text.Spannable,android.text.Layout,int,int,int,boolean)>(r0, r1, i5, i2, -1, 0);

        return 1;

     label3:
        if i2 == 0 goto label4;

        staticinvoke <android.text.Selection: void setSelection(android.text.Spannable,int)>(r0, 0);

        return 1;

     label4:
        return 0;
    }

    private static void removeMemory(android.text.Spannable)
    {
        android.text.Spannable r0;
        android.text.Selection$MemoryTextWatcher[] r1;
        java.lang.Object $r2;
        java.lang.Object[] $r3;
        android.text.Selection$MemoryTextWatcher $r4;
        int i0, i1, i2;

        r0 := @parameter0: android.text.Spannable;

        $r2 = <android.text.Selection: java.lang.Object SELECTION_MEMORY>;

        interfaceinvoke r0.<android.text.Spannable: void removeSpan(java.lang.Object)>($r2);

        i0 = interfaceinvoke r0.<android.text.Spannable: int length()>();

        i1 = 0;

        $r3 = interfaceinvoke r0.<android.text.Spannable: java.lang.Object[] getSpans(int,int,java.lang.Class)>(0, i0, class "Landroid/text/Selection$MemoryTextWatcher;");

        r1 = (android.text.Selection$MemoryTextWatcher[]) $r3;

        i2 = lengthof r1;

     label1:
        if i1 >= i2 goto label2;

        $r4 = r1[i1];

        interfaceinvoke r0.<android.text.Spannable: void removeSpan(java.lang.Object)>($r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static final void removeSelection(android.text.Spannable)
    {
        android.text.Spannable r0;
        java.lang.Object $r1, $r2;

        r0 := @parameter0: android.text.Spannable;

        $r1 = <android.text.Selection: java.lang.Object SELECTION_START>;

        interfaceinvoke r0.<android.text.Spannable: void removeSpan(java.lang.Object,int)>($r1, 512);

        $r2 = <android.text.Selection: java.lang.Object SELECTION_END>;

        interfaceinvoke r0.<android.text.Spannable: void removeSpan(java.lang.Object)>($r2);

        staticinvoke <android.text.Selection: void removeMemory(android.text.Spannable)>(r0);

        return;
    }

    public static final void selectAll(android.text.Spannable)
    {
        android.text.Spannable r0;
        int $i0;

        r0 := @parameter0: android.text.Spannable;

        $i0 = interfaceinvoke r0.<android.text.Spannable: int length()>();

        staticinvoke <android.text.Selection: void setSelection(android.text.Spannable,int,int)>(r0, 0, $i0);

        return;
    }

    public static final void setSelection(android.text.Spannable, int)
    {
        android.text.Spannable r0;
        int i0;

        r0 := @parameter0: android.text.Spannable;

        i0 := @parameter1: int;

        staticinvoke <android.text.Selection: void setSelection(android.text.Spannable,int,int)>(r0, i0, i0);

        return;
    }

    public static void setSelection(android.text.Spannable, int, int)
    {
        android.text.Spannable r0;
        int i0, i1;

        r0 := @parameter0: android.text.Spannable;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <android.text.Selection: void setSelection(android.text.Spannable,int,int,int)>(r0, i0, i1, -1);

        return;
    }

    private static void setSelection(android.text.Spannable, int, int, int)
    {
        android.text.Spannable r0;
        int i0, i1, i2, i3, i4;
        java.lang.Object $r1, $r2;

        r0 := @parameter0: android.text.Spannable;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 = staticinvoke <android.text.Selection: int getSelectionStart(java.lang.CharSequence)>(r0);

        i4 = staticinvoke <android.text.Selection: int getSelectionEnd(java.lang.CharSequence)>(r0);

        if i3 != i0 goto label1;

        if i4 == i1 goto label2;

     label1:
        $r1 = <android.text.Selection: java.lang.Object SELECTION_START>;

        interfaceinvoke r0.<android.text.Spannable: void setSpan(java.lang.Object,int,int,int)>($r1, i0, i0, 546);

        $r2 = <android.text.Selection: java.lang.Object SELECTION_END>;

        interfaceinvoke r0.<android.text.Spannable: void setSpan(java.lang.Object,int,int,int)>($r2, i1, i1, 34);

        staticinvoke <android.text.Selection: void updateMemory(android.text.Spannable,int)>(r0, i2);

     label2:
        return;
    }

    private static void setSelectionAndMemory(android.text.Spannable, android.text.Layout, int, int, int, boolean)
    {
        android.text.Spannable r0;
        android.text.Layout r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10;
        boolean z0;
        float $f0, $f1;

        r0 := @parameter0: android.text.Spannable;

        r1 := @parameter1: android.text.Layout;

        i8 := @parameter2: int;

        i9 := @parameter3: int;

        i0 := @parameter4: int;

        z0 := @parameter5: boolean;

        $i2 = virtualinvoke r1.<android.text.Layout: int getParagraphDirection(int)>(i8);

        $i3 = i8 + i0;

        $i4 = virtualinvoke r1.<android.text.Layout: int getParagraphDirection(int)>($i3);

        if $i2 != $i4 goto label3;

        i1 = staticinvoke <android.text.Selection: int getSelectionMemory(java.lang.CharSequence)>(r0);

        if i1 <= -1 goto label1;

        $i7 = i8 + i0;

        $f1 = virtualinvoke r1.<android.text.Layout: float getPrimaryHorizontal(int)>(i1);

        i10 = virtualinvoke r1.<android.text.Layout: int getOffsetForHorizontal(int,float)>($i7, $f1);

        i9 = i1;

        goto label2;

     label1:
        $i6 = i8 + i0;

        $f0 = virtualinvoke r1.<android.text.Layout: float getPrimaryHorizontal(int)>(i9);

        i10 = virtualinvoke r1.<android.text.Layout: int getOffsetForHorizontal(int,float)>($i6, $f0);

     label2:
        goto label4;

     label3:
        $i5 = i8 + i0;

        i10 = virtualinvoke r1.<android.text.Layout: int getLineStart(int)>($i5);

        i9 = -1;

     label4:
        if z0 == 0 goto label5;

        staticinvoke <android.text.Selection: void extendSelection(android.text.Spannable,int,int)>(r0, i10, i9);

        goto label6;

     label5:
        staticinvoke <android.text.Selection: void setSelection(android.text.Spannable,int,int,int)>(r0, i10, i10, i9);

     label6:
        return;
    }

    private static void updateMemory(android.text.Spannable, int)
    {
        android.text.Spannable r0;
        int i0, i1, $i2;
        java.lang.Object $r1;
        android.text.Selection$MemoryTextWatcher $r2;

        r0 := @parameter0: android.text.Spannable;

        i0 := @parameter1: int;

        if i0 <= -1 goto label2;

        i1 = staticinvoke <android.text.Selection: int getSelectionMemory(java.lang.CharSequence)>(r0);

        if i0 == i1 goto label1;

        $r1 = <android.text.Selection: java.lang.Object SELECTION_MEMORY>;

        interfaceinvoke r0.<android.text.Spannable: void setSpan(java.lang.Object,int,int,int)>($r1, i0, i0, 34);

        if i1 != -1 goto label1;

        $r2 = new android.text.Selection$MemoryTextWatcher;

        specialinvoke $r2.<android.text.Selection$MemoryTextWatcher: void <init>()>();

        $i2 = interfaceinvoke r0.<android.text.Spannable: int length()>();

        interfaceinvoke r0.<android.text.Spannable: void setSpan(java.lang.Object,int,int,int)>($r2, 0, $i2, 18);

     label1:
        goto label3;

     label2:
        staticinvoke <android.text.Selection: void removeMemory(android.text.Spannable)>(r0);

     label3:
        return;
    }
}
