public class android.text.SpannableStringBuilder extends java.lang.Object implements java.lang.CharSequence, android.text.GetChars, android.text.Spannable, android.text.Editable, java.lang.Appendable, android.text.GraphicsOperations
{
    private static final int END_MASK;
    private static final int MARK;
    private static final android.text.InputFilter[] NO_FILTERS;
    private static final int PARAGRAPH;
    private static final int POINT;
    private static final int SPAN_ADDED;
    private static final int SPAN_END_AT_END;
    private static final int SPAN_END_AT_START;
    private static final int SPAN_START_AT_END;
    private static final int SPAN_START_AT_START;
    private static final int SPAN_START_END_MASK;
    private static final int START_MASK;
    private static final int START_SHIFT;
    private static final java.lang.String TAG;
    private static final int[][] sCachedIntBuffer;
    private android.text.InputFilter[] mFilters;
    private int mGapLength;
    private int mGapStart;
    private java.util.IdentityHashMap mIndexOfSpan;
    private int mLowWaterMark;
    private int mSpanCount;
    private int[] mSpanEnds;
    private int[] mSpanFlags;
    private int mSpanInsertCount;
    private int[] mSpanMax;
    private int[] mSpanOrder;
    private int[] mSpanStarts;
    private java.lang.Object[] mSpans;
    private char[] mText;
    private int mTextWatcherDepth;

    static void <clinit>()
    {
        android.text.InputFilter[] $r0;
        int[][] $r1;

        <android.text.SpannableStringBuilder: java.lang.String TAG> = "SpannableStringBuilder";

        <android.text.SpannableStringBuilder: int START_SHIFT> = 4;

        <android.text.SpannableStringBuilder: int START_MASK> = 240;

        <android.text.SpannableStringBuilder: int SPAN_START_END_MASK> = 61440;

        <android.text.SpannableStringBuilder: int SPAN_START_AT_START> = 4096;

        <android.text.SpannableStringBuilder: int SPAN_START_AT_END> = 8192;

        <android.text.SpannableStringBuilder: int SPAN_END_AT_START> = 16384;

        <android.text.SpannableStringBuilder: int SPAN_END_AT_END> = 32768;

        <android.text.SpannableStringBuilder: int SPAN_ADDED> = 2048;

        <android.text.SpannableStringBuilder: int POINT> = 2;

        <android.text.SpannableStringBuilder: int PARAGRAPH> = 3;

        <android.text.SpannableStringBuilder: int MARK> = 1;

        <android.text.SpannableStringBuilder: int END_MASK> = 15;

        $r0 = newarray (android.text.InputFilter)[0];

        <android.text.SpannableStringBuilder: android.text.InputFilter[] NO_FILTERS> = $r0;

        $r1 = newmultiarray (int)[6][0];

        <android.text.SpannableStringBuilder: int[][] sCachedIntBuffer> = $r1;

        return;
    }

    public void <init>()
    {
        android.text.SpannableStringBuilder r0;

        r0 := @this: android.text.SpannableStringBuilder;

        specialinvoke r0.<android.text.SpannableStringBuilder: void <init>(java.lang.CharSequence)>("");

        return;
    }

    public void <init>(java.lang.CharSequence)
    {
        android.text.SpannableStringBuilder r0;
        java.lang.CharSequence r1;
        int $i0;

        r0 := @this: android.text.SpannableStringBuilder;

        r1 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        specialinvoke r0.<android.text.SpannableStringBuilder: void <init>(java.lang.CharSequence,int,int)>(r1, 0, $i0);

        return;
    }

    public void <init>(java.lang.CharSequence, int, int)
    {
        android.text.SpannableStringBuilder r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15, i16, i17;
        android.text.InputFilter[] $r1;
        java.lang.StringIndexOutOfBoundsException $r2;
        java.lang.Object[] $r3, r17;
        int[] $r4, $r5, $r6, $r7, $r8;
        boolean $z0, $z1;
        java.lang.Object $r9, $r10, $r11, $r12, $r13;
        java.lang.CharSequence r14;
        char[] r15;
        android.text.Spanned r16;

        r0 := @this: android.text.SpannableStringBuilder;

        r14 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <android.text.SpannableStringBuilder: android.text.InputFilter[] NO_FILTERS>;

        r0.<android.text.SpannableStringBuilder: android.text.InputFilter[] mFilters> = $r1;

        i12 = i1 - i0;

        if i12 < 0 goto label11;

        $i4 = staticinvoke <com.android.internal.util.GrowingArrayUtils: int growSize(int)>(i12);

        r15 = staticinvoke <com.android.internal.util.ArrayUtils: char[] newUnpaddedCharArray(int)>($i4);

        r0.<android.text.SpannableStringBuilder: char[] mText> = r15;

        r0.<android.text.SpannableStringBuilder: int mGapStart> = i12;

        $i5 = lengthof r15;

        $i6 = $i5 - i12;

        r0.<android.text.SpannableStringBuilder: int mGapLength> = $i6;

        staticinvoke <android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>(r14, i0, i1, r15, 0);

        r0.<android.text.SpannableStringBuilder: int mSpanCount> = 0;

        r0.<android.text.SpannableStringBuilder: int mSpanInsertCount> = 0;

        $r3 = <libcore.util.EmptyArray: java.lang.Object[] OBJECT>;

        r0.<android.text.SpannableStringBuilder: java.lang.Object[] mSpans> = $r3;

        $r4 = <libcore.util.EmptyArray: int[] INT>;

        r0.<android.text.SpannableStringBuilder: int[] mSpanStarts> = $r4;

        $r5 = <libcore.util.EmptyArray: int[] INT>;

        r0.<android.text.SpannableStringBuilder: int[] mSpanEnds> = $r5;

        $r6 = <libcore.util.EmptyArray: int[] INT>;

        r0.<android.text.SpannableStringBuilder: int[] mSpanFlags> = $r6;

        $r7 = <libcore.util.EmptyArray: int[] INT>;

        r0.<android.text.SpannableStringBuilder: int[] mSpanMax> = $r7;

        $r8 = <libcore.util.EmptyArray: int[] INT>;

        r0.<android.text.SpannableStringBuilder: int[] mSpanOrder> = $r8;

        $z0 = r14 instanceof android.text.Spanned;

        if $z0 == 0 goto label10;

        r16 = (android.text.Spanned) r14;

        r17 = interfaceinvoke r16.<android.text.Spanned: java.lang.Object[] getSpans(int,int,java.lang.Class)>(i0, i1, class "Ljava/lang/Object;");

        i13 = 0;

     label01:
        $i7 = lengthof r17;

        if i13 >= $i7 goto label09;

        $r9 = r17[i13];

        $z1 = $r9 instanceof android.text.NoCopySpan;

        if $z1 == 0 goto label02;

        goto label08;

     label02:
        $r10 = r17[i13];

        $i8 = interfaceinvoke r16.<android.text.Spanned: int getSpanStart(java.lang.Object)>($r10);

        i14 = $i8 - i0;

        $r11 = r17[i13];

        $i9 = interfaceinvoke r16.<android.text.Spanned: int getSpanEnd(java.lang.Object)>($r11);

        i2 = $i9 - i0;

        $r12 = r17[i13];

        i3 = interfaceinvoke r16.<android.text.Spanned: int getSpanFlags(java.lang.Object)>($r12);

        i15 = i14;

        if i14 >= 0 goto label03;

        i15 = 0;

     label03:
        $i10 = i1 - i0;

        if i15 <= $i10 goto label04;

        i16 = i1 - i0;

        goto label05;

     label04:
        i16 = i15;

     label05:
        i17 = i2;

        if i2 >= 0 goto label06;

        i17 = 0;

     label06:
        $i11 = i1 - i0;

        if i17 <= $i11 goto label07;

        i17 = i1 - i0;

        goto label07;

     label07:
        $r13 = r17[i13];

        specialinvoke r0.<android.text.SpannableStringBuilder: void setSpan(boolean,java.lang.Object,int,int,int,boolean)>(0, $r13, i16, i17, i3, 0);

     label08:
        i13 = i13 + 1;

        goto label01;

     label09:
        specialinvoke r0.<android.text.SpannableStringBuilder: void restoreInvariants()>();

     label10:
        return;

     label11:
        $r2 = new java.lang.StringIndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.StringIndexOutOfBoundsException: void <init>()>();

        throw $r2;
    }

    private int calcMax(int)
    {
        android.text.SpannableStringBuilder r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10;
        int[] $r1, $r2;

        r0 := @this: android.text.SpannableStringBuilder;

        i0 := @parameter0: int;

        i8 = 0;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        $i7 = staticinvoke <android.text.SpannableStringBuilder: int leftChild(int)>(i0);

        i8 = specialinvoke r0.<android.text.SpannableStringBuilder: int calcMax(int)>($i7);

     label1:
        i9 = i8;

        $i2 = r0.<android.text.SpannableStringBuilder: int mSpanCount>;

        if i0 >= $i2 goto label2;

        $r1 = r0.<android.text.SpannableStringBuilder: int[] mSpanEnds>;

        $i3 = $r1[i0];

        i10 = staticinvoke <java.lang.Math: int max(int,int)>(i8, $i3);

        i9 = i10;

        $i4 = i0 & 1;

        if $i4 == 0 goto label2;

        $i5 = staticinvoke <android.text.SpannableStringBuilder: int rightChild(int)>(i0);

        $i6 = specialinvoke r0.<android.text.SpannableStringBuilder: int calcMax(int)>($i5);

        i9 = staticinvoke <java.lang.Math: int max(int,int)>(i10, $i6);

     label2:
        $r2 = r0.<android.text.SpannableStringBuilder: int[] mSpanMax>;

        $r2[i0] = i9;

        return i9;
    }

    private void change(int, int, java.lang.CharSequence, int, int)
    {
        android.text.SpannableStringBuilder r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i38, $i40, $i41, i42, i45, i46, i47, i48, i49, i50, i51, i52, i53, i54, $i57, $i58, i59, $i60, $i61, $i62, i63, i64, $i65, i66, i67, i68, i69, i70, i71, i72, i73, i74, i75;
        boolean z0, $z1, $z2, z3, z4, z5, z6;
        char[] $r1, $r7, $r11;
        java.lang.Object $r2, $r3, $r4, $r5, $r6, $r17;
        int[] $r8, $r9, $r12, $r13, $r14, $r16, r19, r20, r21;
        java.lang.Exception $r10;
        java.lang.Object[] $r15, r23;
        char $c37, $c39, c55, c56;
        java.lang.CharSequence r18;
        android.text.Spanned r22;

        r0 := @this: android.text.SpannableStringBuilder;

        i0 := @parameter0: int;

        i42 := @parameter1: int;

        r18 := @parameter2: java.lang.CharSequence;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 = i42 - i0;

        i4 = i2 - i1;

        i5 = i4 - i3;

        i45 = r0.<android.text.SpannableStringBuilder: int mSpanCount>;

        z3 = 0;

        i46 = i45 - 1;

     label01:
        if i46 < 0 goto label19;

        $r12 = r0.<android.text.SpannableStringBuilder: int[] mSpanStarts>;

        i47 = $r12[i46];

        i48 = i47;

        $i29 = r0.<android.text.SpannableStringBuilder: int mGapStart>;

        if i47 <= $i29 goto label02;

        $i41 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        i48 = i47 - $i41;

     label02:
        $r13 = r0.<android.text.SpannableStringBuilder: int[] mSpanEnds>;

        i49 = $r13[i46];

        i50 = i49;

        $i30 = r0.<android.text.SpannableStringBuilder: int mGapStart>;

        if i49 <= $i30 goto label03;

        $i40 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        i50 = i49 - $i40;

     label03:
        i51 = i48;

        i52 = i50;

        z4 = z3;

        $r14 = r0.<android.text.SpannableStringBuilder: int[] mSpanFlags>;

        $i31 = $r14[i46];

        $i32 = $i31 & 51;

        if $i32 != 51 goto label14;

        i53 = virtualinvoke r0.<android.text.SpannableStringBuilder: int length()>();

        i51 = i48;

        if i48 <= i0 goto label06;

        i51 = i48;

        if i48 > i42 goto label06;

        i54 = i42;

     label04:
        i51 = i54;

        if i54 >= i53 goto label06;

        if i54 <= i42 goto label05;

        $i38 = i54 - 1;

        $c39 = virtualinvoke r0.<android.text.SpannableStringBuilder: char charAt(int)>($i38);

        if $c39 != 10 goto label05;

        i51 = i54;

        goto label06;

     label05:
        i54 = i54 + 1;

        goto label04;

     label06:
        if i50 <= i0 goto label10;

        if i50 > i42 goto label10;

        i52 = i42;

     label07:
        if i52 >= i53 goto label09;

        if i52 <= i42 goto label08;

        $i36 = i52 - 1;

        $c37 = virtualinvoke r0.<android.text.SpannableStringBuilder: char charAt(int)>($i36);

        if $c37 != 10 goto label08;

        goto label09;

     label08:
        i52 = i52 + 1;

        goto label07;

     label09:
        goto label11;

     label10:
        i52 = i50;

     label11:
        if i51 != i48 goto label13;

        if i52 == i50 goto label12;

        goto label13;

     label12:
        z4 = z3;

        goto label14;

     label13:
        $r15 = r0.<android.text.SpannableStringBuilder: java.lang.Object[] mSpans>;

        $r17 = $r15[i46];

        $r16 = r0.<android.text.SpannableStringBuilder: int[] mSpanFlags>;

        $i35 = $r16[i46];

        specialinvoke r0.<android.text.SpannableStringBuilder: void setSpan(boolean,java.lang.Object,int,int,int,boolean)>(0, $r17, i51, i52, $i35, 1);

        z4 = 1;

     label14:
        c55 = 0;

        if i51 != i0 goto label15;

        c55 = 0 | 4096;

        goto label16;

     label15:
        $i33 = i42 + i5;

        if i51 != $i33 goto label16;

        c55 = 0 | 8192;

     label16:
        if i52 != i0 goto label17;

        c56 = c55 | 16384;

        goto label18;

     label17:
        c56 = c55;

        $i34 = i42 + i5;

        if i52 != $i34 goto label18;

        c56 = c55 | 32768;

     label18:
        r19 = r0.<android.text.SpannableStringBuilder: int[] mSpanFlags>;

        $i57 = r19[i46];

        $i58 = $i57 | c56;

        r19[i46] = $i58;

        i46 = i46 + -1;

        z3 = z4;

        goto label01;

     label19:
        if z3 == 0 goto label20;

        specialinvoke r0.<android.text.SpannableStringBuilder: void restoreInvariants()>();

     label20:
        specialinvoke r0.<android.text.SpannableStringBuilder: void moveGapTo(int)>(i42);

        i59 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        if i5 < i59 goto label21;

        $r11 = r0.<android.text.SpannableStringBuilder: char[] mText>;

        $i26 = lengthof $r11;

        $i27 = $i26 + i5;

        $i28 = $i27 - i59;

        specialinvoke r0.<android.text.SpannableStringBuilder: void resizeFor(int)>($i28);

     label21:
        if i4 != 0 goto label22;

        z5 = 1;

        goto label23;

     label22:
        z5 = 0;

     label23:
        z0 = z5;

        if i3 <= 0 goto label25;

     label24:
        $i24 = r0.<android.text.SpannableStringBuilder: int mSpanCount>;

        if $i24 <= 0 goto label25;

        $i25 = specialinvoke r0.<android.text.SpannableStringBuilder: int treeRoot()>();

        $z2 = specialinvoke r0.<android.text.SpannableStringBuilder: boolean removeSpansForChange(int,int,boolean,int)>(i0, i42, z0, $i25);

        if $z2 == 0 goto label25;

        goto label24;

     label25:
        $i60 = r0.<android.text.SpannableStringBuilder: int mGapStart>;

        $i61 = $i60 + i5;

        r0.<android.text.SpannableStringBuilder: int mGapStart> = $i61;

        $i62 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        i63 = $i62 - i5;

        r0.<android.text.SpannableStringBuilder: int mGapLength> = i63;

        if i63 >= 1 goto label26;

        $r10 = new java.lang.Exception;

        specialinvoke $r10.<java.lang.Exception: void <init>(java.lang.String)>("mGapLength < 1");

        virtualinvoke $r10.<java.lang.Exception: void printStackTrace()>();

     label26:
        $r1 = r0.<android.text.SpannableStringBuilder: char[] mText>;

        staticinvoke <android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>(r18, i1, i2, $r1, i0);

        if i3 <= 0 goto label31;

        $i14 = r0.<android.text.SpannableStringBuilder: int mGapStart>;

        $i13 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        $i16 = $i14 + $i13;

        $r7 = r0.<android.text.SpannableStringBuilder: char[] mText>;

        $i15 = lengthof $r7;

        if $i16 != $i15 goto label27;

        z6 = 1;

        goto label28;

     label27:
        z6 = 0;

     label28:
        i64 = 0;

     label29:
        $i65 = r0.<android.text.SpannableStringBuilder: int mSpanCount>;

        if i64 >= $i65 goto label30;

        $r8 = r0.<android.text.SpannableStringBuilder: int[] mSpanFlags>;

        i66 = $r8[i64];

        r20 = r0.<android.text.SpannableStringBuilder: int[] mSpanStarts>;

        $i19 = r20[i64];

        $i17 = i66 & 240;

        $i18 = $i17 >> 4;

        $i20 = specialinvoke r0.<android.text.SpannableStringBuilder: int updatedIntervalBound(int,int,int,int,boolean,boolean)>($i19, i0, i5, $i18, z6, z0);

        r20[i64] = $i20;

        $r9 = r0.<android.text.SpannableStringBuilder: int[] mSpanFlags>;

        i67 = $r9[i64];

        r21 = r0.<android.text.SpannableStringBuilder: int[] mSpanEnds>;

        $i22 = r21[i64];

        $i21 = i67 & 15;

        $i23 = specialinvoke r0.<android.text.SpannableStringBuilder: int updatedIntervalBound(int,int,int,int,boolean,boolean)>($i22, i0, i5, $i21, z6, z0);

        r21[i64] = $i23;

        i64 = i64 + 1;

        goto label29;

     label30:
        i68 = i2;

        i69 = i1;

        specialinvoke r0.<android.text.SpannableStringBuilder: void restoreInvariants()>();

        goto label32;

     label31:
        i68 = i2;

        i69 = i1;

     label32:
        $z1 = r18 instanceof android.text.Spanned;

        if $z1 == 0 goto label38;

        r22 = (android.text.Spanned) r18;

        r23 = interfaceinvoke r22.<android.text.Spanned: java.lang.Object[] getSpans(int,int,java.lang.Class)>(i69, i68, class "Ljava/lang/Object;");

        i70 = 0;

     label33:
        $i6 = lengthof r23;

        if i70 >= $i6 goto label37;

        $r2 = r23[i70];

        i71 = interfaceinvoke r22.<android.text.Spanned: int getSpanStart(java.lang.Object)>($r2);

        $r3 = r23[i70];

        i72 = interfaceinvoke r22.<android.text.Spanned: int getSpanEnd(java.lang.Object)>($r3);

        i73 = i71;

        if i71 >= i69 goto label34;

        i73 = i1;

     label34:
        i74 = i72;

        if i72 <= i68 goto label35;

        i74 = i2;

     label35:
        $r4 = r23[i70];

        $i7 = virtualinvoke r0.<android.text.SpannableStringBuilder: int getSpanStart(java.lang.Object)>($r4);

        if $i7 >= 0 goto label36;

        $r5 = r23[i70];

        i75 = interfaceinvoke r22.<android.text.Spanned: int getSpanFlags(java.lang.Object)>($r5);

        $r6 = r23[i70];

        $i8 = i73 - i69;

        $i12 = $i8 + i0;

        $i9 = i74 - i69;

        $i11 = $i9 + i0;

        $i10 = i75 | 2048;

        specialinvoke r0.<android.text.SpannableStringBuilder: void setSpan(boolean,java.lang.Object,int,int,int,boolean)>(0, $r6, $i12, $i11, $i10, 0);

     label36:
        i70 = i70 + 1;

        i69 = i1;

        i68 = i2;

        goto label33;

     label37:
        specialinvoke r0.<android.text.SpannableStringBuilder: void restoreInvariants()>();

     label38:
        return;
    }

    private void checkRange(java.lang.String, int, int)
    {
        android.text.SpannableStringBuilder r0;
        java.lang.String r1, $r5, $r9, $r13, $r18, $r22, $r26;
        int i0, i1, i2;
        java.lang.StringBuilder $r2, $r10, $r19;
        java.lang.IndexOutOfBoundsException $r8, $r17, $r25;

        r0 := @this: android.text.SpannableStringBuilder;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i1 < i0 goto label3;

        i2 = virtualinvoke r0.<android.text.SpannableStringBuilder: int length()>();

        if i0 > i2 goto label2;

        if i1 > i2 goto label2;

        if i0 < 0 goto label1;

        if i1 < 0 goto label1;

        return;

     label1:
        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r22 = staticinvoke <android.text.SpannableStringBuilder: java.lang.String region(int,int)>(i0, i1);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" starts before 0");

        $r25 = new java.lang.IndexOutOfBoundsException;

        $r26 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r26);

        throw $r25;

     label2:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r13 = staticinvoke <android.text.SpannableStringBuilder: java.lang.String region(int,int)>(i0, i1);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ends beyond length ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r17 = new java.lang.IndexOutOfBoundsException;

        $r18 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r18);

        throw $r17;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r5 = staticinvoke <android.text.SpannableStringBuilder: java.lang.String region(int,int)>(i0, i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has end before start");

        $r8 = new java.lang.IndexOutOfBoundsException;

        $r9 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r9);

        throw $r8;
    }

    private static int[] checkSortBuffer(int[], int)
    {
        int[] r0, $r1;
        int i0, $i1, $i2;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        if r0 == null goto label2;

        $i2 = lengthof r0;

        if i0 <= $i2 goto label1;

        goto label2;

     label1:
        return r0;

     label2:
        $i1 = staticinvoke <com.android.internal.util.GrowingArrayUtils: int growSize(int)>(i0);

        $r1 = staticinvoke <com.android.internal.util.ArrayUtils: int[] newUnpaddedIntArray(int)>($i1);

        return $r1;
    }

    private final int compareSpans(int, int, int[], int[])
    {
        android.text.SpannableStringBuilder r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7;
        int[] r1, r2;

        r0 := @this: android.text.SpannableStringBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: int[];

        r2 := @parameter3: int[];

        i2 = r1[i0];

        i3 = r1[i1];

        if i2 != i3 goto label1;

        $i6 = r2[i0];

        $i5 = r2[i1];

        $i7 = staticinvoke <java.lang.Integer: int compare(int,int)>($i6, $i5);

        return $i7;

     label1:
        $i4 = staticinvoke <java.lang.Integer: int compare(int,int)>(i3, i2);

        return $i4;
    }

    private int countSpans(int, int, java.lang.Class, int)
    {
        android.text.SpannableStringBuilder r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i13, i14, i15, i16, i17, $i18, i19, i20, i21, i22, i23, $i24;
        java.lang.Class r1;
        int[] $r2, $r3, $r6;
        java.lang.Object[] $r4;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: android.text.SpannableStringBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.Class;

        i2 := @parameter3: int;

        i13 = 0;

        $i3 = i2 & 1;

        if $i3 == 0 goto label2;

        i14 = staticinvoke <android.text.SpannableStringBuilder: int leftChild(int)>(i2);

        $r6 = r0.<android.text.SpannableStringBuilder: int[] mSpanMax>;

        i15 = $r6[i14];

        i16 = i15;

        $i10 = r0.<android.text.SpannableStringBuilder: int mGapStart>;

        if i15 <= $i10 goto label1;

        $i11 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        i16 = i15 - $i11;

     label1:
        i13 = 0;

        if i16 < i0 goto label2;

        i13 = specialinvoke r0.<android.text.SpannableStringBuilder: int countSpans(int,int,java.lang.Class,int)>(i0, i1, r1, i14);

     label2:
        i17 = i13;

        $i18 = r0.<android.text.SpannableStringBuilder: int mSpanCount>;

        if i2 >= $i18 goto label8;

        $r2 = r0.<android.text.SpannableStringBuilder: int[] mSpanStarts>;

        i19 = $r2[i2];

        i20 = i19;

        $i4 = r0.<android.text.SpannableStringBuilder: int mGapStart>;

        if i19 <= $i4 goto label3;

        $i9 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        i20 = i19 - $i9;

     label3:
        i17 = i13;

        if i20 > i1 goto label8;

        $r3 = r0.<android.text.SpannableStringBuilder: int[] mSpanEnds>;

        i21 = $r3[i2];

        i22 = i21;

        $i5 = r0.<android.text.SpannableStringBuilder: int mGapStart>;

        if i21 <= $i5 goto label4;

        $i8 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        i22 = i21 - $i8;

     label4:
        i23 = i13;

        if i22 < i0 goto label7;

        if i20 == i22 goto label5;

        if i0 == i1 goto label5;

        i23 = i13;

        if i20 == i1 goto label7;

        i23 = i13;

        if i22 == i0 goto label7;

     label5:
        if class "Ljava/lang/Object;" == r1 goto label6;

        i23 = i13;

        $r4 = r0.<android.text.SpannableStringBuilder: java.lang.Object[] mSpans>;

        $r5 = $r4[i2];

        $z0 = virtualinvoke r1.<java.lang.Class: boolean isInstance(java.lang.Object)>($r5);

        if $z0 == 0 goto label7;

     label6:
        i23 = i13 + 1;

     label7:
        i17 = i23;

        $i24 = i2 & 1;

        if $i24 == 0 goto label8;

        $i6 = staticinvoke <android.text.SpannableStringBuilder: int rightChild(int)>(i2);

        $i7 = specialinvoke r0.<android.text.SpannableStringBuilder: int countSpans(int,int,java.lang.Class,int)>(i0, i1, r1, $i6);

        i17 = i23 + $i7;

     label8:
        return i17;
    }

    private int getSpansRec(int, int, java.lang.Class, int, java.lang.Object[], int[], int[], int, boolean)
    {
        android.text.SpannableStringBuilder r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18, i19, i20, $i21, i22, i23, i24, i25, $i26;
        java.lang.Class r1;
        java.lang.Object[] r2, $r10, $r13;
        int[] r3, r4, $r5, $r6, $r7, $r9, $r12;
        boolean z0, $z1;
        java.lang.Object $r8, $r11, $r14;

        r0 := @this: android.text.SpannableStringBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.Class;

        i2 := @parameter3: int;

        r2 := @parameter4: java.lang.Object[];

        r3 := @parameter5: int[];

        r4 := @parameter6: int[];

        i18 := @parameter7: int;

        z0 := @parameter8: boolean;

        $i3 = i2 & 1;

        if $i3 == 0 goto label02;

        i19 = staticinvoke <android.text.SpannableStringBuilder: int leftChild(int)>(i2);

        $r12 = r0.<android.text.SpannableStringBuilder: int[] mSpanMax>;

        i20 = $r12[i19];

        $i16 = r0.<android.text.SpannableStringBuilder: int mGapStart>;

        if i20 <= $i16 goto label01;

        $i17 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        i20 = i20 - $i17;

        goto label01;

     label01:
        if i20 < i0 goto label02;

        i18 = specialinvoke r0.<android.text.SpannableStringBuilder: int getSpansRec(int,int,java.lang.Class,int,java.lang.Object[],int[],int[],int,boolean)>(i0, i1, r1, i19, r2, r3, r4, i18, z0);

        goto label02;

     label02:
        $i21 = r0.<android.text.SpannableStringBuilder: int mSpanCount>;

        if i2 < $i21 goto label03;

        return i18;

     label03:
        $r5 = r0.<android.text.SpannableStringBuilder: int[] mSpanStarts>;

        i22 = $r5[i2];

        $i4 = r0.<android.text.SpannableStringBuilder: int mGapStart>;

        if i22 <= $i4 goto label04;

        $i15 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        i22 = i22 - $i15;

        goto label04;

     label04:
        if i22 > i1 goto label15;

        $r6 = r0.<android.text.SpannableStringBuilder: int[] mSpanEnds>;

        i23 = $r6[i2];

        $i5 = r0.<android.text.SpannableStringBuilder: int mGapStart>;

        if i23 <= $i5 goto label05;

        $i14 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        i23 = i23 - $i14;

        goto label05;

     label05:
        if i23 < i0 goto label13;

        if i22 == i23 goto label06;

        if i0 == i1 goto label06;

        if i22 == i1 goto label13;

        if i23 == i0 goto label13;

     label06:
        if class "Ljava/lang/Object;" == r1 goto label07;

        $r10 = r0.<android.text.SpannableStringBuilder: java.lang.Object[] mSpans>;

        $r11 = $r10[i2];

        $z1 = virtualinvoke r1.<java.lang.Class: boolean isInstance(java.lang.Object)>($r11);

        if $z1 == 0 goto label13;

     label07:
        $r7 = r0.<android.text.SpannableStringBuilder: int[] mSpanFlags>;

        $i8 = $r7[i2];

        i24 = $i8 & 16711680;

        i25 = i18;

        if z0 == 0 goto label08;

        r3[i18] = i24;

        $r9 = r0.<android.text.SpannableStringBuilder: int[] mSpanOrder>;

        $i13 = $r9[i2];

        r4[i18] = $i13;

        goto label12;

     label08:
        if i24 == 0 goto label12;

        i25 = 0;

     label09:
        if i25 >= i18 goto label11;

        $r8 = r2[i25];

        $i11 = virtualinvoke r0.<android.text.SpannableStringBuilder: int getSpanFlags(java.lang.Object)>($r8);

        $i12 = $i11 & 16711680;

        if i24 <= $i12 goto label10;

        goto label11;

     label10:
        i25 = i25 + 1;

        goto label09;

     label11:
        $i10 = i25 + 1;

        $i9 = i18 - i25;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i25, r2, $i10, $i9);

     label12:
        $r13 = r0.<android.text.SpannableStringBuilder: java.lang.Object[] mSpans>;

        $r14 = $r13[i2];

        r2[i25] = $r14;

        i18 = i18 + 1;

        goto label13;

     label13:
        $i26 = lengthof r2;

        if i18 >= $i26 goto label14;

        $i6 = i2 & 1;

        if $i6 == 0 goto label14;

        $i7 = staticinvoke <android.text.SpannableStringBuilder: int rightChild(int)>(i2);

        i18 = specialinvoke r0.<android.text.SpannableStringBuilder: int getSpansRec(int,int,java.lang.Class,int,java.lang.Object[],int[],int[],int,boolean)>(i0, i1, r1, $i7, r2, r3, r4, i18, z0);

        goto label15;

     label14:
        goto label15;

     label15:
        return i18;
    }

    private static boolean hasNonExclusiveExclusiveSpanAt(java.lang.CharSequence, int)
    {
        java.lang.Object[] r0;
        int i0, $i1, i2, i3;
        boolean $z0;
        java.lang.Object $r1;
        java.lang.CharSequence r2;
        android.text.Spanned r3;

        r2 := @parameter0: java.lang.CharSequence;

        i2 := @parameter1: int;

        $z0 = r2 instanceof android.text.Spanned;

        if $z0 == 0 goto label3;

        r3 = (android.text.Spanned) r2;

        r0 = interfaceinvoke r3.<android.text.Spanned: java.lang.Object[] getSpans(int,int,java.lang.Class)>(i2, i2, class "Ljava/lang/Object;");

        i0 = lengthof r0;

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        $r1 = r0[i3];

        $i1 = interfaceinvoke r3.<android.text.Spanned: int getSpanFlags(java.lang.Object)>($r1);

        if $i1 == 33 goto label2;

        return 1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 0;
    }

    private void invalidateIndex(int)
    {
        android.text.SpannableStringBuilder r0;
        int i0, $i1, $i2;

        r0 := @this: android.text.SpannableStringBuilder;

        i0 := @parameter0: int;

        $i1 = r0.<android.text.SpannableStringBuilder: int mLowWaterMark>;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>(i0, $i1);

        r0.<android.text.SpannableStringBuilder: int mLowWaterMark> = $i2;

        return;
    }

    private boolean isInvalidParagraph(int, int)
    {
        android.text.SpannableStringBuilder r0;
        int i0, i1, $i2, $i3;
        char $c4;
        boolean z0;

        r0 := @this: android.text.SpannableStringBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 != 3 goto label1;

        if i0 == 0 goto label1;

        $i2 = virtualinvoke r0.<android.text.SpannableStringBuilder: int length()>();

        if i0 == $i2 goto label1;

        $i3 = i0 - 1;

        $c4 = virtualinvoke r0.<android.text.SpannableStringBuilder: char charAt(int)>($i3);

        if $c4 == 10 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private static int leftChild(int)
    {
        int i0, $i1, $i2, $i3, $i4;

        i0 := @parameter0: int;

        $i1 = i0 + 1;

        $i2 = $i1 & i0;

        $i3 = $i2 >> 1;

        $i4 = i0 - $i3;

        return $i4;
    }

    private void moveGapTo(int)
    {
        android.text.SpannableStringBuilder r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, $i33, i34, i35;
        int[] $r1, $r2, $r3, $r4, $r7, $r8;
        boolean z0;
        char[] r5, r6;

        r0 := @this: android.text.SpannableStringBuilder;

        i0 := @parameter0: int;

        $i1 = r0.<android.text.SpannableStringBuilder: int mGapStart>;

        if i0 != $i1 goto label01;

        return;

     label01:
        $i2 = virtualinvoke r0.<android.text.SpannableStringBuilder: int length()>();

        if i0 != $i2 goto label02;

        z0 = 1;

        goto label03;

     label02:
        z0 = 0;

     label03:
        i23 = r0.<android.text.SpannableStringBuilder: int mGapStart>;

        if i0 >= i23 goto label04;

        i24 = i23 - i0;

        r5 = r0.<android.text.SpannableStringBuilder: char[] mText>;

        $i20 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        $i21 = i23 + $i20;

        $i22 = $i21 - i24;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, i0, r5, $i22, i24);

        goto label05;

     label04:
        i25 = i0 - i23;

        r6 = r0.<android.text.SpannableStringBuilder: char[] mText>;

        $i3 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        $i4 = $i3 + i0;

        $i5 = $i4 - i25;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, $i5, r6, i23, i25);

     label05:
        $i6 = r0.<android.text.SpannableStringBuilder: int mSpanCount>;

        if $i6 == 0 goto label16;

        i26 = 0;

     label06:
        $i7 = r0.<android.text.SpannableStringBuilder: int mSpanCount>;

        if i26 >= $i7 goto label15;

        $r1 = r0.<android.text.SpannableStringBuilder: int[] mSpanStarts>;

        i27 = $r1[i26];

        $r2 = r0.<android.text.SpannableStringBuilder: int[] mSpanEnds>;

        i28 = $r2[i26];

        i29 = i27;

        $i10 = r0.<android.text.SpannableStringBuilder: int mGapStart>;

        if i27 <= $i10 goto label07;

        $i19 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        i29 = i27 - $i19;

     label07:
        if i29 <= i0 goto label08;

        $i18 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        i30 = i29 + $i18;

        goto label10;

     label08:
        i30 = i29;

        if i29 != i0 goto label10;

        $r4 = r0.<android.text.SpannableStringBuilder: int[] mSpanFlags>;

        $i15 = $r4[i26];

        $i16 = $i15 & 240;

        i31 = $i16 >> 4;

        if i31 == 2 goto label09;

        i30 = i29;

        if z0 == 0 goto label10;

        i30 = i29;

        if i31 != 3 goto label10;

     label09:
        $i17 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        i30 = i29 + $i17;

     label10:
        i32 = i28;

        $i33 = r0.<android.text.SpannableStringBuilder: int mGapStart>;

        if i28 <= $i33 goto label11;

        $i14 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        i32 = i28 - $i14;

     label11:
        if i32 <= i0 goto label12;

        $i13 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        i34 = i32 + $i13;

        goto label14;

     label12:
        i34 = i32;

        if i32 != i0 goto label14;

        $r3 = r0.<android.text.SpannableStringBuilder: int[] mSpanFlags>;

        $i11 = $r3[i26];

        i35 = $i11 & 15;

        if i35 == 2 goto label13;

        i34 = i32;

        if z0 == 0 goto label14;

        i34 = i32;

        if i35 != 3 goto label14;

     label13:
        $i12 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        i34 = i32 + $i12;

     label14:
        $r7 = r0.<android.text.SpannableStringBuilder: int[] mSpanStarts>;

        $r7[i26] = i30;

        $r8 = r0.<android.text.SpannableStringBuilder: int[] mSpanEnds>;

        $r8[i26] = i34;

        i26 = i26 + 1;

        goto label06;

     label15:
        $i8 = specialinvoke r0.<android.text.SpannableStringBuilder: int treeRoot()>();

        specialinvoke r0.<android.text.SpannableStringBuilder: int calcMax(int)>($i8);

     label16:
        r0.<android.text.SpannableStringBuilder: int mGapStart> = i0;

        return;
    }

    private int nextSpanTransitionRec(int, int, java.lang.Class, int)
    {
        android.text.SpannableStringBuilder r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13, $i14, i15, i16, i17;
        java.lang.Class r1;
        int[] $r2, $r3, $r8;
        java.lang.Object[] $r4, $r6;
        java.lang.Object $r5, $r7;
        boolean $z0, $z1;

        r0 := @this: android.text.SpannableStringBuilder;

        i0 := @parameter0: int;

        i10 := @parameter1: int;

        r1 := @parameter2: java.lang.Class;

        i1 := @parameter3: int;

        i11 = i10;

        $i3 = i1 & 1;

        if $i3 == 0 goto label1;

        i12 = staticinvoke <android.text.SpannableStringBuilder: int leftChild(int)>(i1);

        i11 = i10;

        $r8 = r0.<android.text.SpannableStringBuilder: int[] mSpanMax>;

        $i8 = $r8[i12];

        $i9 = specialinvoke r0.<android.text.SpannableStringBuilder: int resolveGap(int)>($i8);

        if $i9 <= i0 goto label1;

        i11 = specialinvoke r0.<android.text.SpannableStringBuilder: int nextSpanTransitionRec(int,int,java.lang.Class,int)>(i0, i10, r1, i12);

     label1:
        i13 = i11;

        $i14 = r0.<android.text.SpannableStringBuilder: int mSpanCount>;

        if i1 >= $i14 goto label4;

        $r2 = r0.<android.text.SpannableStringBuilder: int[] mSpanStarts>;

        $i4 = $r2[i1];

        i15 = specialinvoke r0.<android.text.SpannableStringBuilder: int resolveGap(int)>($i4);

        $r3 = r0.<android.text.SpannableStringBuilder: int[] mSpanEnds>;

        $i5 = $r3[i1];

        i2 = specialinvoke r0.<android.text.SpannableStringBuilder: int resolveGap(int)>($i5);

        i16 = i11;

        if i15 <= i0 goto label2;

        i16 = i11;

        if i15 >= i11 goto label2;

        i16 = i11;

        $r6 = r0.<android.text.SpannableStringBuilder: java.lang.Object[] mSpans>;

        $r7 = $r6[i1];

        $z1 = virtualinvoke r1.<java.lang.Class: boolean isInstance(java.lang.Object)>($r7);

        if $z1 == 0 goto label2;

        i16 = i15;

     label2:
        i17 = i16;

        if i2 <= i0 goto label3;

        i17 = i16;

        if i2 >= i16 goto label3;

        i17 = i16;

        $r4 = r0.<android.text.SpannableStringBuilder: java.lang.Object[] mSpans>;

        $r5 = $r4[i1];

        $z0 = virtualinvoke r1.<java.lang.Class: boolean isInstance(java.lang.Object)>($r5);

        if $z0 == 0 goto label3;

        i17 = i2;

     label3:
        i13 = i17;

        if i15 >= i17 goto label4;

        i13 = i17;

        $i6 = i1 & 1;

        if $i6 == 0 goto label4;

        $i7 = staticinvoke <android.text.SpannableStringBuilder: int rightChild(int)>(i1);

        i13 = specialinvoke r0.<android.text.SpannableStringBuilder: int nextSpanTransitionRec(int,int,java.lang.Class,int)>(i0, i17, r1, $i7);

     label4:
        return i13;
    }

    private static int[] obtain(int)
    {
        int i0, $i1, $i2, i3, i4, i5, i6;
        int[][] r0, $r1, $r3, $r4, $r5, $r7;
        int[] $r2, $r6, $r8, r10;
        java.lang.Throwable $r9;

        i0 := @parameter0: int;

        r10 = null;

        r0 = <android.text.SpannableStringBuilder: int[][] sCachedIntBuffer>;

        entermonitor r0;

        i3 = -1;

     label01:
        $r1 = <android.text.SpannableStringBuilder: int[][] sCachedIntBuffer>;

        $i1 = lengthof $r1;

        i4 = $i1 - 1;

     label02:
        i5 = i3;

        if i4 < 0 goto label07;

        i6 = i3;

     label03:
        $r5 = <android.text.SpannableStringBuilder: int[][] sCachedIntBuffer>;

        $r6 = $r5[i4];

        if $r6 == null goto label06;

        $r7 = <android.text.SpannableStringBuilder: int[][] sCachedIntBuffer>;

        $r8 = $r7[i4];

        $i2 = lengthof $r8;

        if $i2 < i0 goto label05;

     label04:
        i5 = i4;

        goto label07;

     label05:
        i6 = i3;

        if i3 != -1 goto label06;

        i6 = i4;

     label06:
        i4 = i4 + -1;

        i3 = i6;

        goto label02;

     label07:
        if i5 == -1 goto label09;

     label08:
        $r3 = <android.text.SpannableStringBuilder: int[][] sCachedIntBuffer>;

        r10 = $r3[i5];

        $r4 = <android.text.SpannableStringBuilder: int[][] sCachedIntBuffer>;

        $r4[i5] = null;

     label09:
        exitmonitor r0;

     label10:
        $r2 = staticinvoke <android.text.SpannableStringBuilder: int[] checkSortBuffer(int[],int)>(r10, i0);

        return $r2;

     label11:
        $r9 := @caughtexception;

     label12:
        exitmonitor r0;

     label13:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    private static void recycle(int[])
    {
        int[][] r0, $r1, $r2, $r4, $r5;
        int $i0, $i1, $i2, i3;
        int[] $r3, $r6, r8;
        java.lang.Throwable $r7;

        r8 := @parameter0: int[];

        r0 = <android.text.SpannableStringBuilder: int[][] sCachedIntBuffer>;

        entermonitor r0;

        i3 = 0;

     label1:
        $r1 = <android.text.SpannableStringBuilder: int[][] sCachedIntBuffer>;

        $i0 = lengthof $r1;

        if i3 >= $i0 goto label5;

        $r2 = <android.text.SpannableStringBuilder: int[][] sCachedIntBuffer>;

        $r3 = $r2[i3];

        if $r3 == null goto label4;

        $i2 = lengthof r8;

        $r5 = <android.text.SpannableStringBuilder: int[][] sCachedIntBuffer>;

        $r6 = $r5[i3];

        $i1 = lengthof $r6;

        if $i2 <= $i1 goto label3;

     label2:
        goto label4;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        $r4 = <android.text.SpannableStringBuilder: int[][] sCachedIntBuffer>;

        $r4[i3] = r8;

     label5:
        exitmonitor r0;

     label6:
        return;

     label7:
        $r7 := @caughtexception;

     label8:
        exitmonitor r0;

     label9:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private static java.lang.String region(int, int)
    {
        int i0, i1;
        java.lang.StringBuilder $r1;
        java.lang.String $r7;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ... ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    private void removeSpan(int, int)
    {
        android.text.SpannableStringBuilder r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, i18, i19, i20, i21;
        java.lang.Object r1;
        java.lang.Object[] $r2, $r5, r6;
        int[] $r3, $r4, r7, r8, r9, r10;

        r0 := @this: android.text.SpannableStringBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<android.text.SpannableStringBuilder: java.lang.Object[] mSpans>;

        r1 = $r2[i0];

        $r3 = r0.<android.text.SpannableStringBuilder: int[] mSpanStarts>;

        i17 = $r3[i0];

        $r4 = r0.<android.text.SpannableStringBuilder: int[] mSpanEnds>;

        i18 = $r4[i0];

        i19 = i17;

        $i2 = r0.<android.text.SpannableStringBuilder: int mGapStart>;

        if i17 <= $i2 goto label1;

        $i16 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        i19 = i17 - $i16;

     label1:
        i20 = i18;

        $i3 = r0.<android.text.SpannableStringBuilder: int mGapStart>;

        if i18 <= $i3 goto label2;

        $i15 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        i20 = i18 - $i15;

     label2:
        $i5 = r0.<android.text.SpannableStringBuilder: int mSpanCount>;

        $i4 = i0 + 1;

        i21 = $i5 - $i4;

        r6 = r0.<android.text.SpannableStringBuilder: java.lang.Object[] mSpans>;

        $i6 = i0 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, $i6, r6, i0, i21);

        r7 = r0.<android.text.SpannableStringBuilder: int[] mSpanStarts>;

        $i7 = i0 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r7, $i7, r7, i0, i21);

        r8 = r0.<android.text.SpannableStringBuilder: int[] mSpanEnds>;

        $i8 = i0 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r8, $i8, r8, i0, i21);

        r9 = r0.<android.text.SpannableStringBuilder: int[] mSpanFlags>;

        $i9 = i0 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r9, $i9, r9, i0, i21);

        r10 = r0.<android.text.SpannableStringBuilder: int[] mSpanOrder>;

        $i10 = i0 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r10, $i10, r10, i0, i21);

        $i11 = r0.<android.text.SpannableStringBuilder: int mSpanCount>;

        $i12 = $i11 - 1;

        r0.<android.text.SpannableStringBuilder: int mSpanCount> = $i12;

        specialinvoke r0.<android.text.SpannableStringBuilder: void invalidateIndex(int)>(i0);

        $r5 = r0.<android.text.SpannableStringBuilder: java.lang.Object[] mSpans>;

        $i13 = r0.<android.text.SpannableStringBuilder: int mSpanCount>;

        $r5[$i13] = null;

        specialinvoke r0.<android.text.SpannableStringBuilder: void restoreInvariants()>();

        $i14 = i1 & 512;

        if $i14 != 0 goto label3;

        specialinvoke r0.<android.text.SpannableStringBuilder: void sendSpanRemoved(java.lang.Object,int,int)>(r1, i19, i20);

     label3:
        return;
    }

    private boolean removeSpansForChange(int, int, boolean, int)
    {
        android.text.SpannableStringBuilder r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23;
        int[] r1, r2, $r3, $r5, $r9;
        boolean $z1, $z2, z3, z4;
        java.util.IdentityHashMap $r6;
        java.lang.Object[] $r7;
        java.lang.Object $r8;

        r0 := @this: android.text.SpannableStringBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z3 := @parameter2: boolean;

        i2 := @parameter3: int;

        $i6 = i2 & 1;

        if $i6 == 0 goto label1;

        $r5 = r0.<android.text.SpannableStringBuilder: int[] mSpanMax>;

        $i18 = $r5[i2];

        $i19 = specialinvoke r0.<android.text.SpannableStringBuilder: int resolveGap(int)>($i18);

        if $i19 < i0 goto label1;

        $i20 = staticinvoke <android.text.SpannableStringBuilder: int leftChild(int)>(i2);

        $z2 = specialinvoke r0.<android.text.SpannableStringBuilder: boolean removeSpansForChange(int,int,boolean,int)>(i0, i1, z3, $i20);

        if $z2 == 0 goto label1;

        return 1;

     label1:
        $i21 = r0.<android.text.SpannableStringBuilder: int mSpanCount>;

        if i2 >= $i21 goto label6;

        $r3 = r0.<android.text.SpannableStringBuilder: int[] mSpanFlags>;

        $i7 = $r3[i2];

        $i8 = $i7 & 33;

        if $i8 != 33 goto label3;

        r1 = r0.<android.text.SpannableStringBuilder: int[] mSpanStarts>;

        $i11 = r1[i2];

        if $i11 < i0 goto label3;

        i3 = r1[i2];

        i4 = r0.<android.text.SpannableStringBuilder: int mGapStart>;

        i5 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        $i12 = i4 + i5;

        if i3 >= $i12 goto label3;

        r2 = r0.<android.text.SpannableStringBuilder: int[] mSpanEnds>;

        $i13 = r2[i2];

        if $i13 < i0 goto label3;

        $i15 = r2[i2];

        $i14 = i5 + i4;

        if $i15 >= $i14 goto label3;

        if z3 != 0 goto label2;

        $i16 = r1[i2];

        if $i16 > i0 goto label2;

        $i17 = r2[i2];

        if $i17 >= i4 goto label3;

     label2:
        $r6 = r0.<android.text.SpannableStringBuilder: java.util.IdentityHashMap mIndexOfSpan>;

        $r7 = r0.<android.text.SpannableStringBuilder: java.lang.Object[] mSpans>;

        $r8 = $r7[i2];

        virtualinvoke $r6.<java.util.IdentityHashMap: java.lang.Object remove(java.lang.Object)>($r8);

        specialinvoke r0.<android.text.SpannableStringBuilder: void removeSpan(int,int)>(i2, 0);

        return 1;

     label3:
        $r9 = r0.<android.text.SpannableStringBuilder: int[] mSpanStarts>;

        $i22 = $r9[i2];

        $i23 = specialinvoke r0.<android.text.SpannableStringBuilder: int resolveGap(int)>($i22);

        if $i23 > i1 goto label4;

        $i9 = i2 & 1;

        if $i9 == 0 goto label4;

        $i10 = staticinvoke <android.text.SpannableStringBuilder: int rightChild(int)>(i2);

        $z1 = specialinvoke r0.<android.text.SpannableStringBuilder: boolean removeSpansForChange(int,int,boolean,int)>(i0, i1, z3, $i10);

        if $z1 == 0 goto label4;

        z4 = 1;

        goto label5;

     label4:
        z4 = 0;

     label5:
        return z4;

     label6:
        return 0;
    }

    private void resizeFor(int)
    {
        android.text.SpannableStringBuilder r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, i24, i25, i26, i27;
        char[] $r1, $r2, $r3, r5;
        java.lang.Exception $r4;
        int[] r6, r7;

        r0 := @this: android.text.SpannableStringBuilder;

        i24 := @parameter0: int;

        $r1 = r0.<android.text.SpannableStringBuilder: char[] mText>;

        i0 = lengthof $r1;

        $i3 = i24 + 1;

        if $i3 > i0 goto label1;

        return;

     label1:
        $i4 = staticinvoke <com.android.internal.util.GrowingArrayUtils: int growSize(int)>(i24);

        r5 = staticinvoke <com.android.internal.util.ArrayUtils: char[] newUnpaddedCharArray(int)>($i4);

        $r2 = r0.<android.text.SpannableStringBuilder: char[] mText>;

        $i5 = r0.<android.text.SpannableStringBuilder: int mGapStart>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r5, 0, $i5);

        i25 = lengthof r5;

        i1 = i25 - i0;

        $i7 = r0.<android.text.SpannableStringBuilder: int mGapStart>;

        $i6 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        $i8 = $i7 + $i6;

        i2 = i0 - $i8;

        $r3 = r0.<android.text.SpannableStringBuilder: char[] mText>;

        $i10 = i0 - i2;

        $i9 = i25 - i2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i10, r5, $i9, i2);

        r0.<android.text.SpannableStringBuilder: char[] mText> = r5;

        $i11 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        i26 = $i11 + i1;

        r0.<android.text.SpannableStringBuilder: int mGapLength> = i26;

        if i26 >= 1 goto label2;

        $r4 = new java.lang.Exception;

        specialinvoke $r4.<java.lang.Exception: void <init>(java.lang.String)>("mGapLength < 1");

        virtualinvoke $r4.<java.lang.Exception: void printStackTrace()>();

     label2:
        $i12 = r0.<android.text.SpannableStringBuilder: int mSpanCount>;

        if $i12 == 0 goto label7;

        i27 = 0;

     label3:
        $i13 = r0.<android.text.SpannableStringBuilder: int mSpanCount>;

        if i27 >= $i13 goto label6;

        r6 = r0.<android.text.SpannableStringBuilder: int[] mSpanStarts>;

        $i17 = r6[i27];

        $i16 = r0.<android.text.SpannableStringBuilder: int mGapStart>;

        if $i17 <= $i16 goto label4;

        $i22 = r6[i27];

        $i23 = $i22 + i1;

        r6[i27] = $i23;

     label4:
        r7 = r0.<android.text.SpannableStringBuilder: int[] mSpanEnds>;

        $i19 = r7[i27];

        $i18 = r0.<android.text.SpannableStringBuilder: int mGapStart>;

        if $i19 <= $i18 goto label5;

        $i20 = r7[i27];

        $i21 = $i20 + i1;

        r7[i27] = $i21;

     label5:
        i27 = i27 + 1;

        goto label3;

     label6:
        $i14 = specialinvoke r0.<android.text.SpannableStringBuilder: int treeRoot()>();

        specialinvoke r0.<android.text.SpannableStringBuilder: int calcMax(int)>($i14);

     label7:
        return;
    }

    private int resolveGap(int)
    {
        android.text.SpannableStringBuilder r0;
        int $i0, $i1, i2;

        r0 := @this: android.text.SpannableStringBuilder;

        i2 := @parameter0: int;

        $i0 = r0.<android.text.SpannableStringBuilder: int mGapStart>;

        if i2 <= $i0 goto label1;

        $i1 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        i2 = i2 - $i1;

        goto label1;

     label1:
        return i2;
    }

    private void restoreInvariants()
    {
        android.text.SpannableStringBuilder r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, i24, i25, i26, $i27;
        java.util.IdentityHashMap $r1, $r4, $r7, $r11;
        java.lang.Object[] $r2, $r6, $r12, $r17, r24;
        java.lang.Object $r3, $r5, $r8, $r16, r23;
        java.lang.Integer $r9, r29;
        int[] $r13, $r14, $r15, $r18, $r19, $r20, $r21, r22, r25, r26, r27, r28;

        r0 := @this: android.text.SpannableStringBuilder;

        $i5 = r0.<android.text.SpannableStringBuilder: int mSpanCount>;

        if $i5 != 0 goto label01;

        return;

     label01:
        i24 = 1;

     label02:
        $i6 = r0.<android.text.SpannableStringBuilder: int mSpanCount>;

        if i24 >= $i6 goto label06;

        r22 = r0.<android.text.SpannableStringBuilder: int[] mSpanStarts>;

        $i12 = r22[i24];

        $i10 = i24 - 1;

        $i11 = r22[$i10];

        if $i12 >= $i11 goto label05;

        $r12 = r0.<android.text.SpannableStringBuilder: java.lang.Object[] mSpans>;

        r23 = $r12[i24];

        i0 = r22[i24];

        $r13 = r0.<android.text.SpannableStringBuilder: int[] mSpanEnds>;

        i1 = $r13[i24];

        $r14 = r0.<android.text.SpannableStringBuilder: int[] mSpanFlags>;

        i2 = $r14[i24];

        $r15 = r0.<android.text.SpannableStringBuilder: int[] mSpanOrder>;

        i3 = $r15[i24];

        i25 = i24;

     label03:
        r24 = r0.<android.text.SpannableStringBuilder: java.lang.Object[] mSpans>;

        $i13 = i25 - 1;

        $r16 = r24[$i13];

        r24[i25] = $r16;

        r25 = r0.<android.text.SpannableStringBuilder: int[] mSpanStarts>;

        $i14 = i25 - 1;

        $i15 = r25[$i14];

        r25[i25] = $i15;

        r26 = r0.<android.text.SpannableStringBuilder: int[] mSpanEnds>;

        $i16 = i25 - 1;

        $i17 = r26[$i16];

        r26[i25] = $i17;

        r27 = r0.<android.text.SpannableStringBuilder: int[] mSpanFlags>;

        $i18 = i25 - 1;

        $i19 = r27[$i18];

        r27[i25] = $i19;

        r28 = r0.<android.text.SpannableStringBuilder: int[] mSpanOrder>;

        $i20 = i25 - 1;

        $i21 = r28[$i20];

        r28[i25] = $i21;

        i4 = i25 - 1;

        if i4 <= 0 goto label04;

        i25 = i4;

        $i22 = i4 - 1;

        $i23 = r25[$i22];

        if i0 < $i23 goto label03;

     label04:
        $r17 = r0.<android.text.SpannableStringBuilder: java.lang.Object[] mSpans>;

        $r17[i4] = r23;

        $r18 = r0.<android.text.SpannableStringBuilder: int[] mSpanStarts>;

        $r18[i4] = i0;

        $r19 = r0.<android.text.SpannableStringBuilder: int[] mSpanEnds>;

        $r19[i4] = i1;

        $r20 = r0.<android.text.SpannableStringBuilder: int[] mSpanFlags>;

        $r20[i4] = i2;

        $r21 = r0.<android.text.SpannableStringBuilder: int[] mSpanOrder>;

        $r21[i4] = i3;

        specialinvoke r0.<android.text.SpannableStringBuilder: void invalidateIndex(int)>(i4);

     label05:
        i24 = i24 + 1;

        goto label02;

     label06:
        $i7 = specialinvoke r0.<android.text.SpannableStringBuilder: int treeRoot()>();

        specialinvoke r0.<android.text.SpannableStringBuilder: int calcMax(int)>($i7);

        $r1 = r0.<android.text.SpannableStringBuilder: java.util.IdentityHashMap mIndexOfSpan>;

        if $r1 != null goto label07;

        $r11 = new java.util.IdentityHashMap;

        specialinvoke $r11.<java.util.IdentityHashMap: void <init>()>();

        r0.<android.text.SpannableStringBuilder: java.util.IdentityHashMap mIndexOfSpan> = $r11;

     label07:
        i26 = r0.<android.text.SpannableStringBuilder: int mLowWaterMark>;

     label08:
        $i27 = r0.<android.text.SpannableStringBuilder: int mSpanCount>;

        if i26 >= $i27 goto label11;

        $r4 = r0.<android.text.SpannableStringBuilder: java.util.IdentityHashMap mIndexOfSpan>;

        $r2 = r0.<android.text.SpannableStringBuilder: java.lang.Object[] mSpans>;

        $r3 = $r2[i26];

        $r5 = virtualinvoke $r4.<java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>($r3);

        r29 = (java.lang.Integer) $r5;

        if r29 == null goto label09;

        $i9 = virtualinvoke r29.<java.lang.Integer: int intValue()>();

        if $i9 == i26 goto label10;

     label09:
        $r7 = r0.<android.text.SpannableStringBuilder: java.util.IdentityHashMap mIndexOfSpan>;

        $r6 = r0.<android.text.SpannableStringBuilder: java.lang.Object[] mSpans>;

        $r8 = $r6[i26];

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i26);

        virtualinvoke $r7.<java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r9);

     label10:
        i26 = i26 + 1;

        goto label08;

     label11:
        r0.<android.text.SpannableStringBuilder: int mLowWaterMark> = 2147483647;

        return;
    }

    private static int rightChild(int)
    {
        int i0, $i1, $i2, $i3, $i4;

        i0 := @parameter0: int;

        $i1 = i0 + 1;

        $i2 = $i1 & i0;

        $i3 = $i2 >> 1;

        $i4 = $i3 + i0;

        return $i4;
    }

    private void sendAfterTextChanged(android.text.TextWatcher[])
    {
        android.text.SpannableStringBuilder r0;
        android.text.TextWatcher[] r1;
        int i0, $i1, $i2, $i3, $i4, i5;
        android.text.TextWatcher $r2;

        r0 := @this: android.text.SpannableStringBuilder;

        r1 := @parameter0: android.text.TextWatcher[];

        i0 = lengthof r1;

        $i1 = r0.<android.text.SpannableStringBuilder: int mTextWatcherDepth>;

        $i2 = $i1 + 1;

        r0.<android.text.SpannableStringBuilder: int mTextWatcherDepth> = $i2;

        i5 = 0;

     label1:
        if i5 >= i0 goto label2;

        $r2 = r1[i5];

        interfaceinvoke $r2.<android.text.TextWatcher: void afterTextChanged(android.text.Editable)>(r0);

        i5 = i5 + 1;

        goto label1;

     label2:
        $i3 = r0.<android.text.SpannableStringBuilder: int mTextWatcherDepth>;

        $i4 = $i3 - 1;

        r0.<android.text.SpannableStringBuilder: int mTextWatcherDepth> = $i4;

        return;
    }

    private void sendBeforeTextChanged(android.text.TextWatcher[], int, int, int)
    {
        android.text.SpannableStringBuilder r0;
        android.text.TextWatcher[] r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, i8;
        android.text.TextWatcher $r2;

        r0 := @this: android.text.SpannableStringBuilder;

        r1 := @parameter0: android.text.TextWatcher[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 = lengthof r1;

        $i4 = r0.<android.text.SpannableStringBuilder: int mTextWatcherDepth>;

        $i5 = $i4 + 1;

        r0.<android.text.SpannableStringBuilder: int mTextWatcherDepth> = $i5;

        i8 = 0;

     label1:
        if i8 >= i3 goto label2;

        $r2 = r1[i8];

        interfaceinvoke $r2.<android.text.TextWatcher: void beforeTextChanged(java.lang.CharSequence,int,int,int)>(r0, i0, i1, i2);

        i8 = i8 + 1;

        goto label1;

     label2:
        $i6 = r0.<android.text.SpannableStringBuilder: int mTextWatcherDepth>;

        $i7 = $i6 - 1;

        r0.<android.text.SpannableStringBuilder: int mTextWatcherDepth> = $i7;

        return;
    }

    private void sendSpanAdded(java.lang.Object, int, int)
    {
        android.text.SpannableStringBuilder r0;
        java.lang.Object r1;
        int i0, i1, i2, i3;
        android.text.SpanWatcher[] r2;
        java.lang.Object[] $r3;
        android.text.SpanWatcher $r4;

        r0 := @this: android.text.SpannableStringBuilder;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r3 = virtualinvoke r0.<android.text.SpannableStringBuilder: java.lang.Object[] getSpans(int,int,java.lang.Class)>(i0, i1, class "Landroid/text/SpanWatcher;");

        r2 = (android.text.SpanWatcher[]) $r3;

        i2 = lengthof r2;

        i3 = 0;

     label1:
        if i3 >= i2 goto label2;

        $r4 = r2[i3];

        interfaceinvoke $r4.<android.text.SpanWatcher: void onSpanAdded(android.text.Spannable,java.lang.Object,int,int)>(r0, r1, i0, i1);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    private void sendSpanChanged(java.lang.Object, int, int, int, int)
    {
        android.text.SpannableStringBuilder r0;
        java.lang.Object r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, i9;
        android.text.SpanWatcher[] r2;
        java.lang.Object[] $r3;
        android.text.SpanWatcher $r4;

        r0 := @this: android.text.SpannableStringBuilder;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>(i0, i2);

        $i6 = staticinvoke <java.lang.Math: int max(int,int)>(i1, i3);

        $i7 = virtualinvoke r0.<android.text.SpannableStringBuilder: int length()>();

        $i8 = staticinvoke <java.lang.Math: int min(int,int)>($i6, $i7);

        $r3 = virtualinvoke r0.<android.text.SpannableStringBuilder: java.lang.Object[] getSpans(int,int,java.lang.Class)>($i5, $i8, class "Landroid/text/SpanWatcher;");

        r2 = (android.text.SpanWatcher[]) $r3;

        i4 = lengthof r2;

        i9 = 0;

     label1:
        if i9 >= i4 goto label2;

        $r4 = r2[i9];

        interfaceinvoke $r4.<android.text.SpanWatcher: void onSpanChanged(android.text.Spannable,java.lang.Object,int,int,int,int)>(r0, r1, i0, i1, i2, i3);

        i9 = i9 + 1;

        goto label1;

     label2:
        return;
    }

    private void sendSpanRemoved(java.lang.Object, int, int)
    {
        android.text.SpannableStringBuilder r0;
        java.lang.Object r1;
        int i0, i1, i2, i3;
        android.text.SpanWatcher[] r2;
        java.lang.Object[] $r3;
        android.text.SpanWatcher $r4;

        r0 := @this: android.text.SpannableStringBuilder;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r3 = virtualinvoke r0.<android.text.SpannableStringBuilder: java.lang.Object[] getSpans(int,int,java.lang.Class)>(i0, i1, class "Landroid/text/SpanWatcher;");

        r2 = (android.text.SpanWatcher[]) $r3;

        i2 = lengthof r2;

        i3 = 0;

     label1:
        if i3 >= i2 goto label2;

        $r4 = r2[i3];

        interfaceinvoke $r4.<android.text.SpanWatcher: void onSpanRemoved(android.text.Spannable,java.lang.Object,int,int)>(r0, r1, i0, i1);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    private void sendTextChanged(android.text.TextWatcher[], int, int, int)
    {
        android.text.SpannableStringBuilder r0;
        android.text.TextWatcher[] r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, i8;
        android.text.TextWatcher $r2;

        r0 := @this: android.text.SpannableStringBuilder;

        r1 := @parameter0: android.text.TextWatcher[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 = lengthof r1;

        $i4 = r0.<android.text.SpannableStringBuilder: int mTextWatcherDepth>;

        $i5 = $i4 + 1;

        r0.<android.text.SpannableStringBuilder: int mTextWatcherDepth> = $i5;

        i8 = 0;

     label1:
        if i8 >= i3 goto label2;

        $r2 = r1[i8];

        interfaceinvoke $r2.<android.text.TextWatcher: void onTextChanged(java.lang.CharSequence,int,int,int)>(r0, i0, i1, i2);

        i8 = i8 + 1;

        goto label1;

     label2:
        $i6 = r0.<android.text.SpannableStringBuilder: int mTextWatcherDepth>;

        $i7 = $i6 - 1;

        r0.<android.text.SpannableStringBuilder: int mTextWatcherDepth> = $i7;

        return;
    }

    private void sendToSpanWatchers(int, int, int)
    {
        android.text.SpannableStringBuilder r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37;
        int[] $r1, $r2, $r5, $r6, $r7, r10, r11;
        java.lang.Object[] $r3, $r8;
        java.lang.Object $r4, $r9;
        boolean z0;

        r0 := @this: android.text.SpannableStringBuilder;

        i22 := @parameter0: int;

        i23 := @parameter1: int;

        i24 := @parameter2: int;

        i25 = 0;

     label01:
        $i1 = r0.<android.text.SpannableStringBuilder: int mSpanCount>;

        if i25 >= $i1 goto label17;

        $r5 = r0.<android.text.SpannableStringBuilder: int[] mSpanFlags>;

        i26 = $r5[i25];

        $i11 = i26 & 2048;

        if $i11 == 0 goto label02;

        goto label16;

     label02:
        $r6 = r0.<android.text.SpannableStringBuilder: int[] mSpanStarts>;

        i27 = $r6[i25];

        $r7 = r0.<android.text.SpannableStringBuilder: int[] mSpanEnds>;

        i28 = $r7[i25];

        i29 = i27;

        $i12 = r0.<android.text.SpannableStringBuilder: int mGapStart>;

        if i27 <= $i12 goto label03;

        $i21 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        i29 = i27 - $i21;

     label03:
        i30 = i28;

        $i13 = r0.<android.text.SpannableStringBuilder: int mGapStart>;

        if i28 <= $i13 goto label04;

        $i20 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        i30 = i28 - $i20;

     label04:
        i0 = i23 + i24;

        z0 = 0;

        if i29 <= i0 goto label05;

        if i24 == 0 goto label08;

        z0 = 1;

        i31 = i29 - i24;

        goto label09;

     label05:
        if i29 < i22 goto label08;

        if i29 != i22 goto label06;

        $i19 = i26 & 4096;

        if $i19 == 4096 goto label08;

     label06:
        if i29 != i0 goto label07;

        $i18 = i26 & 8192;

        if $i18 == 8192 goto label08;

     label07:
        z0 = 1;

        i31 = i29;

        goto label09;

     label08:
        i31 = i29;

     label09:
        if i30 <= i0 goto label10;

        if i24 == 0 goto label13;

        z0 = 1;

        i32 = i30 - i24;

        goto label14;

     label10:
        if i30 < i22 goto label13;

        if i30 != i22 goto label11;

        $i17 = i26 & 16384;

        if $i17 == 16384 goto label13;

     label11:
        if i30 != i0 goto label12;

        $i16 = i26 & 32768;

        if $i16 == 32768 goto label13;

     label12:
        z0 = 1;

        i32 = i30;

        goto label14;

     label13:
        i32 = i30;

     label14:
        if z0 == 0 goto label15;

        $r8 = r0.<android.text.SpannableStringBuilder: java.lang.Object[] mSpans>;

        $r9 = $r8[i25];

        specialinvoke r0.<android.text.SpannableStringBuilder: void sendSpanChanged(java.lang.Object,int,int,int,int)>($r9, i31, i32, i29, i30);

     label15:
        r10 = r0.<android.text.SpannableStringBuilder: int[] mSpanFlags>;

        $i14 = r10[i25];

        $i15 = $i14 & -61441;

        r10[i25] = $i15;

     label16:
        i25 = i25 + 1;

        goto label01;

     label17:
        i33 = 0;

     label18:
        $i2 = r0.<android.text.SpannableStringBuilder: int mSpanCount>;

        if i33 >= $i2 goto label22;

        r11 = r0.<android.text.SpannableStringBuilder: int[] mSpanFlags>;

        $i3 = r11[i33];

        $i4 = $i3 & 2048;

        if $i4 == 0 goto label21;

        $i5 = r11[i33];

        $i6 = $i5 & -2049;

        r11[i33] = $i6;

        $r1 = r0.<android.text.SpannableStringBuilder: int[] mSpanStarts>;

        i34 = $r1[i33];

        $r2 = r0.<android.text.SpannableStringBuilder: int[] mSpanEnds>;

        i35 = $r2[i33];

        i36 = i34;

        $i7 = r0.<android.text.SpannableStringBuilder: int mGapStart>;

        if i34 <= $i7 goto label19;

        $i10 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        i36 = i34 - $i10;

     label19:
        i37 = i35;

        $i8 = r0.<android.text.SpannableStringBuilder: int mGapStart>;

        if i35 <= $i8 goto label20;

        $i9 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        i37 = i35 - $i9;

     label20:
        $r3 = r0.<android.text.SpannableStringBuilder: java.lang.Object[] mSpans>;

        $r4 = $r3[i33];

        specialinvoke r0.<android.text.SpannableStringBuilder: void sendSpanAdded(java.lang.Object,int,int)>($r4, i36, i37);

     label21:
        i33 = i33 + 1;

        goto label18;

     label22:
        return;
    }

    private void setSpan(boolean, java.lang.Object, int, int, int, boolean)
    {
        android.text.SpannableStringBuilder r0;
        boolean z0, z1, $z2, $z3;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i29, $i31, i33, i34, i35, i36, i37, i38, i39, i40, i41, i42;
        java.lang.Object[] $r1, $r2;
        int[] $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r14, $r15, $r16, $r17, $r18;
        java.lang.Object $r13, r35;
        java.lang.StringBuilder $r19, $r27;
        char $c30, $c32;
        java.lang.RuntimeException $r25, $r33;
        java.lang.String $r26, $r34;
        java.util.IdentityHashMap r38;
        java.lang.Integer r39;

        r0 := @this: android.text.SpannableStringBuilder;

        z0 := @parameter0: boolean;

        r35 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i33 := @parameter4: int;

        z1 := @parameter5: boolean;

        specialinvoke r0.<android.text.SpannableStringBuilder: void checkRange(java.lang.String,int,int)>("setSpan", i0, i1);

        $i3 = i33 & 240;

        i34 = $i3 >> 4;

        $z2 = specialinvoke r0.<android.text.SpannableStringBuilder: boolean isInvalidParagraph(int,int)>(i0, i34);

        if $z2 == 0 goto label02;

        if z1 != 0 goto label01;

        return;

     label01:
        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PARAGRAPH span must start at paragraph boundary (");

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" follows ");

        $i31 = i0 - 1;

        $c32 = virtualinvoke r0.<android.text.SpannableStringBuilder: char charAt(int)>($i31);

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c32);

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r33 = new java.lang.RuntimeException;

        $r34 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<java.lang.RuntimeException: void <init>(java.lang.String)>($r34);

        throw $r33;

     label02:
        i35 = i33 & 15;

        $z3 = specialinvoke r0.<android.text.SpannableStringBuilder: boolean isInvalidParagraph(int,int)>(i1, i35);

        if $z3 == 0 goto label04;

        if z1 != 0 goto label03;

        return;

     label03:
        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PARAGRAPH span must end at paragraph boundary (");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" follows ");

        $i29 = i1 - 1;

        $c30 = virtualinvoke r0.<android.text.SpannableStringBuilder: char charAt(int)>($i29);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c30);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r25 = new java.lang.RuntimeException;

        $r26 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.RuntimeException: void <init>(java.lang.String)>($r26);

        throw $r25;

     label04:
        if i34 != 2 goto label06;

        if i35 != 1 goto label06;

        if i0 != i1 goto label06;

        if z0 == 0 goto label05;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("SpannableStringBuilder", "SPAN_EXCLUSIVE_EXCLUSIVE spans cannot have a zero length");

     label05:
        return;

     label06:
        i36 = r0.<android.text.SpannableStringBuilder: int mGapStart>;

        if i0 <= i36 goto label07;

        $i27 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        i37 = i0 + $i27;

        goto label10;

     label07:
        if i0 != i36 goto label09;

        if i34 == 2 goto label08;

        if i34 != 3 goto label09;

        $i26 = virtualinvoke r0.<android.text.SpannableStringBuilder: int length()>();

        if i0 != $i26 goto label09;

     label08:
        $i25 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        i37 = i0 + $i25;

        goto label10;

     label09:
        i37 = i0;

     label10:
        i38 = r0.<android.text.SpannableStringBuilder: int mGapStart>;

        if i1 <= i38 goto label11;

        $i24 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        i39 = $i24 + i1;

        goto label14;

     label11:
        if i1 != i38 goto label13;

        if i35 == 2 goto label12;

        if i35 != 3 goto label13;

        $i23 = virtualinvoke r0.<android.text.SpannableStringBuilder: int length()>();

        if i1 != $i23 goto label13;

     label12:
        $i22 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        i39 = $i22 + i1;

        goto label14;

     label13:
        i39 = i1;

     label14:
        r38 = r0.<android.text.SpannableStringBuilder: java.util.IdentityHashMap mIndexOfSpan>;

        if r38 == null goto label18;

        $r13 = virtualinvoke r38.<java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>(r35);

        r39 = (java.lang.Integer) $r13;

        if r39 == null goto label18;

        i2 = virtualinvoke r39.<java.lang.Integer: int intValue()>();

        $r14 = r0.<android.text.SpannableStringBuilder: int[] mSpanStarts>;

        i40 = $r14[i2];

        $r15 = r0.<android.text.SpannableStringBuilder: int[] mSpanEnds>;

        i41 = $r15[i2];

        $i18 = r0.<android.text.SpannableStringBuilder: int mGapStart>;

        if i40 <= $i18 goto label15;

        $i21 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        i40 = i40 - $i21;

        goto label15;

     label15:
        $i19 = r0.<android.text.SpannableStringBuilder: int mGapStart>;

        if i41 <= $i19 goto label16;

        $i20 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        i41 = i41 - $i20;

        goto label16;

     label16:
        $r16 = r0.<android.text.SpannableStringBuilder: int[] mSpanStarts>;

        $r16[i2] = i37;

        $r17 = r0.<android.text.SpannableStringBuilder: int[] mSpanEnds>;

        $r17[i2] = i39;

        $r18 = r0.<android.text.SpannableStringBuilder: int[] mSpanFlags>;

        $r18[i2] = i33;

        if z0 == 0 goto label17;

        specialinvoke r0.<android.text.SpannableStringBuilder: void restoreInvariants()>();

        specialinvoke r0.<android.text.SpannableStringBuilder: void sendSpanChanged(java.lang.Object,int,int,int,int)>(r35, i40, i41, i0, i1);

     label17:
        return;

     label18:
        $r1 = r0.<android.text.SpannableStringBuilder: java.lang.Object[] mSpans>;

        $i4 = r0.<android.text.SpannableStringBuilder: int mSpanCount>;

        $r2 = staticinvoke <com.android.internal.util.GrowingArrayUtils: java.lang.Object[] append(java.lang.Object[],int,java.lang.Object)>($r1, $i4, r35);

        r0.<android.text.SpannableStringBuilder: java.lang.Object[] mSpans> = $r2;

        $r3 = r0.<android.text.SpannableStringBuilder: int[] mSpanStarts>;

        $i5 = r0.<android.text.SpannableStringBuilder: int mSpanCount>;

        $r4 = staticinvoke <com.android.internal.util.GrowingArrayUtils: int[] append(int[],int,int)>($r3, $i5, i37);

        r0.<android.text.SpannableStringBuilder: int[] mSpanStarts> = $r4;

        $r5 = r0.<android.text.SpannableStringBuilder: int[] mSpanEnds>;

        $i6 = r0.<android.text.SpannableStringBuilder: int mSpanCount>;

        $r6 = staticinvoke <com.android.internal.util.GrowingArrayUtils: int[] append(int[],int,int)>($r5, $i6, i39);

        r0.<android.text.SpannableStringBuilder: int[] mSpanEnds> = $r6;

        $r7 = r0.<android.text.SpannableStringBuilder: int[] mSpanFlags>;

        $i7 = r0.<android.text.SpannableStringBuilder: int mSpanCount>;

        $r8 = staticinvoke <com.android.internal.util.GrowingArrayUtils: int[] append(int[],int,int)>($r7, $i7, i33);

        r0.<android.text.SpannableStringBuilder: int[] mSpanFlags> = $r8;

        $r9 = r0.<android.text.SpannableStringBuilder: int[] mSpanOrder>;

        $i9 = r0.<android.text.SpannableStringBuilder: int mSpanCount>;

        $i8 = r0.<android.text.SpannableStringBuilder: int mSpanInsertCount>;

        $r10 = staticinvoke <com.android.internal.util.GrowingArrayUtils: int[] append(int[],int,int)>($r9, $i9, $i8);

        r0.<android.text.SpannableStringBuilder: int[] mSpanOrder> = $r10;

        $i10 = r0.<android.text.SpannableStringBuilder: int mSpanCount>;

        specialinvoke r0.<android.text.SpannableStringBuilder: void invalidateIndex(int)>($i10);

        $i11 = r0.<android.text.SpannableStringBuilder: int mSpanCount>;

        $i12 = $i11 + 1;

        r0.<android.text.SpannableStringBuilder: int mSpanCount> = $i12;

        $i13 = r0.<android.text.SpannableStringBuilder: int mSpanInsertCount>;

        $i14 = $i13 + 1;

        r0.<android.text.SpannableStringBuilder: int mSpanInsertCount> = $i14;

        $i15 = specialinvoke r0.<android.text.SpannableStringBuilder: int treeRoot()>();

        $i16 = $i15 * 2;

        i42 = $i16 + 1;

        $r11 = r0.<android.text.SpannableStringBuilder: int[] mSpanMax>;

        $i17 = lengthof $r11;

        if $i17 >= i42 goto label19;

        $r12 = newarray (int)[i42];

        r0.<android.text.SpannableStringBuilder: int[] mSpanMax> = $r12;

     label19:
        if z0 == 0 goto label20;

        specialinvoke r0.<android.text.SpannableStringBuilder: void restoreInvariants()>();

        specialinvoke r0.<android.text.SpannableStringBuilder: void sendSpanAdded(java.lang.Object,int,int)>(r35, i0, i1);

     label20:
        return;
    }

    private final void siftDown(int, java.lang.Object[], int, int[], int[])
    {
        android.text.SpannableStringBuilder r0;
        java.lang.Object[] r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11, $i12, i13, i14;
        int[] r2, r3;
        java.lang.Object r4, $r5;

        r0 := @this: android.text.SpannableStringBuilder;

        i8 := @parameter0: int;

        r1 := @parameter1: java.lang.Object[];

        i0 := @parameter2: int;

        r2 := @parameter3: int[];

        r3 := @parameter4: int[];

        $i1 = i8 * 2;

        i9 = $i1 + 1;

        i10 = i8;

     label1:
        if i9 >= i0 goto label4;

        i11 = i9;

        $i2 = i0 - 1;

        if i9 >= $i2 goto label2;

        i11 = i9;

        $i6 = i9 + 1;

        $i7 = specialinvoke r0.<android.text.SpannableStringBuilder: int compareSpans(int,int,int[],int[])>(i9, $i6, r2, r3);

        if $i7 >= 0 goto label2;

        i11 = i9 + 1;

     label2:
        $i12 = specialinvoke r0.<android.text.SpannableStringBuilder: int compareSpans(int,int,int[],int[])>(i10, i11, r2, r3);

        if $i12 < 0 goto label3;

        goto label4;

     label3:
        r4 = r1[i10];

        $r5 = r1[i11];

        r1[i10] = $r5;

        r1[i11] = r4;

        i13 = r2[i10];

        $i3 = r2[i11];

        r2[i10] = $i3;

        r2[i11] = i13;

        i14 = r3[i10];

        $i4 = r3[i11];

        r3[i10] = $i4;

        r3[i11] = i14;

        $i5 = i11 * 2;

        i9 = $i5 + 1;

        i10 = i11;

        goto label1;

     label4:
        return;
    }

    private final void sort(java.lang.Object[], int[], int[])
    {
        android.text.SpannableStringBuilder r0;
        java.lang.Object[] r1;
        int[] r2, r3;
        java.lang.Object r4, $r5;
        int $i0, $i1, $i2, i3, i4, i5, i6, i7;

        r0 := @this: android.text.SpannableStringBuilder;

        r1 := @parameter0: java.lang.Object[];

        r2 := @parameter1: int[];

        r3 := @parameter2: int[];

        i3 = lengthof r1;

        $i0 = i3 / 2;

        i4 = $i0 - 1;

     label1:
        if i4 < 0 goto label2;

        specialinvoke r0.<android.text.SpannableStringBuilder: void siftDown(int,java.lang.Object[],int,int[],int[])>(i4, r1, i3, r2, r3);

        i4 = i4 + -1;

        goto label1;

     label2:
        i5 = i3 - 1;

     label3:
        if i5 <= 0 goto label4;

        r4 = r1[0];

        $r5 = r1[i5];

        r1[0] = $r5;

        r1[i5] = r4;

        i6 = r2[0];

        $i1 = r2[i5];

        r2[0] = $i1;

        r2[i5] = i6;

        i7 = r3[0];

        $i2 = r3[i5];

        r3[0] = $i2;

        r3[i5] = i7;

        specialinvoke r0.<android.text.SpannableStringBuilder: void siftDown(int,java.lang.Object[],int,int[],int[])>(0, r1, i5, r2, r3);

        i5 = i5 + -1;

        goto label3;

     label4:
        return;
    }

    private int treeRoot()
    {
        android.text.SpannableStringBuilder r0;
        int $i0, $i1, $i2;

        r0 := @this: android.text.SpannableStringBuilder;

        $i0 = r0.<android.text.SpannableStringBuilder: int mSpanCount>;

        $i1 = staticinvoke <java.lang.Integer: int highestOneBit(int)>($i0);

        $i2 = $i1 - 1;

        return $i2;
    }

    private int updatedIntervalBound(int, int, int, int, boolean, boolean)
    {
        android.text.SpannableStringBuilder r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11;
        boolean z0, z1;

        r0 := @this: android.text.SpannableStringBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        z0 := @parameter4: boolean;

        z1 := @parameter5: boolean;

        if i0 < i1 goto label6;

        i4 = r0.<android.text.SpannableStringBuilder: int mGapStart>;

        i5 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        $i6 = i4 + i5;

        if i0 >= $i6 goto label6;

        if i3 != 2 goto label2;

        if z1 != 0 goto label1;

        if i0 <= i1 goto label6;

     label1:
        $i10 = r0.<android.text.SpannableStringBuilder: int mGapStart>;

        $i9 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        $i11 = $i10 + $i9;

        return $i11;

     label2:
        if i3 != 3 goto label3;

        if z0 == 0 goto label6;

        $i8 = i4 + i5;

        return $i8;

     label3:
        if z1 != 0 goto label5;

        $i7 = i4 - i2;

        if i0 >= $i7 goto label4;

        goto label5;

     label4:
        return i4;

     label5:
        return i1;

     label6:
        return i0;
    }

    public static android.text.SpannableStringBuilder valueOf(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        boolean $z0;
        android.text.SpannableStringBuilder $r1, $r2;

        r0 := @parameter0: java.lang.CharSequence;

        $z0 = r0 instanceof android.text.SpannableStringBuilder;

        if $z0 == 0 goto label1;

        $r2 = (android.text.SpannableStringBuilder) r0;

        return $r2;

     label1:
        $r1 = new android.text.SpannableStringBuilder;

        specialinvoke $r1.<android.text.SpannableStringBuilder: void <init>(java.lang.CharSequence)>(r0);

        return $r1;
    }

    public volatile android.text.Editable append(char)
    {
        android.text.SpannableStringBuilder r0, $r1;
        char c0;

        r0 := @this: android.text.SpannableStringBuilder;

        c0 := @parameter0: char;

        $r1 = virtualinvoke r0.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(char)>(c0);

        return $r1;
    }

    public volatile android.text.Editable append(java.lang.CharSequence)
    {
        android.text.SpannableStringBuilder r0, $r2;
        java.lang.CharSequence r1;

        r0 := @this: android.text.SpannableStringBuilder;

        r1 := @parameter0: java.lang.CharSequence;

        $r2 = virtualinvoke r0.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence)>(r1);

        return $r2;
    }

    public volatile android.text.Editable append(java.lang.CharSequence, int, int)
    {
        android.text.SpannableStringBuilder r0, $r2;
        java.lang.CharSequence r1;
        int i0, i1;

        r0 := @this: android.text.SpannableStringBuilder;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = virtualinvoke r0.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence,int,int)>(r1, i0, i1);

        return $r2;
    }

    public android.text.SpannableStringBuilder append(char)
    {
        android.text.SpannableStringBuilder r0, $r2;
        char c0;
        java.lang.String $r1;

        r0 := @this: android.text.SpannableStringBuilder;

        c0 := @parameter0: char;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c0);

        $r2 = virtualinvoke r0.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence)>($r1);

        return $r2;
    }

    public android.text.SpannableStringBuilder append(java.lang.CharSequence)
    {
        android.text.SpannableStringBuilder r0, $r2;
        java.lang.CharSequence r1;
        int i0, $i1;

        r0 := @this: android.text.SpannableStringBuilder;

        r1 := @parameter0: java.lang.CharSequence;

        i0 = virtualinvoke r0.<android.text.SpannableStringBuilder: int length()>();

        $i1 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $r2 = virtualinvoke r0.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder replace(int,int,java.lang.CharSequence,int,int)>(i0, i0, r1, 0, $i1);

        return $r2;
    }

    public android.text.SpannableStringBuilder append(java.lang.CharSequence, int, int)
    {
        android.text.SpannableStringBuilder r0, $r2;
        java.lang.CharSequence r1;
        int i0, i1, i2;

        r0 := @this: android.text.SpannableStringBuilder;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = virtualinvoke r0.<android.text.SpannableStringBuilder: int length()>();

        $r2 = virtualinvoke r0.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder replace(int,int,java.lang.CharSequence,int,int)>(i2, i2, r1, i0, i1);

        return $r2;
    }

    public android.text.SpannableStringBuilder append(java.lang.CharSequence, java.lang.Object, int)
    {
        android.text.SpannableStringBuilder r0;
        java.lang.CharSequence r1;
        java.lang.Object r2;
        int i0, i1, $i2;

        r0 := @this: android.text.SpannableStringBuilder;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        i1 = virtualinvoke r0.<android.text.SpannableStringBuilder: int length()>();

        virtualinvoke r0.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence)>(r1);

        $i2 = virtualinvoke r0.<android.text.SpannableStringBuilder: int length()>();

        virtualinvoke r0.<android.text.SpannableStringBuilder: void setSpan(java.lang.Object,int,int,int)>(r2, i1, $i2, i0);

        return r0;
    }

    public volatile java.lang.Appendable append(char) throws java.io.IOException
    {
        android.text.SpannableStringBuilder r0, $r1;
        char c0;

        r0 := @this: android.text.SpannableStringBuilder;

        c0 := @parameter0: char;

        $r1 = virtualinvoke r0.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(char)>(c0);

        return $r1;
    }

    public volatile java.lang.Appendable append(java.lang.CharSequence) throws java.io.IOException
    {
        android.text.SpannableStringBuilder r0, $r2;
        java.lang.CharSequence r1;

        r0 := @this: android.text.SpannableStringBuilder;

        r1 := @parameter0: java.lang.CharSequence;

        $r2 = virtualinvoke r0.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence)>(r1);

        return $r2;
    }

    public volatile java.lang.Appendable append(java.lang.CharSequence, int, int) throws java.io.IOException
    {
        android.text.SpannableStringBuilder r0, $r2;
        java.lang.CharSequence r1;
        int i0, i1;

        r0 := @this: android.text.SpannableStringBuilder;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = virtualinvoke r0.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence,int,int)>(r1, i0, i1);

        return $r2;
    }

    public char charAt(int)
    {
        android.text.SpannableStringBuilder r0;
        int i0, i1, $i2, $i4, $i5;
        java.lang.StringBuilder $r1, $r7;
        java.lang.IndexOutOfBoundsException $r5, $r12;
        java.lang.String $r6, $r13;
        char[] $r14, $r15;
        char $c3, $c6;

        r0 := @this: android.text.SpannableStringBuilder;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<android.text.SpannableStringBuilder: int length()>();

        if i0 < 0 goto label3;

        if i0 >= i1 goto label2;

        $i2 = r0.<android.text.SpannableStringBuilder: int mGapStart>;

        if i0 < $i2 goto label1;

        $r15 = r0.<android.text.SpannableStringBuilder: char[] mText>;

        $i4 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        $i5 = $i4 + i0;

        $c6 = $r15[$i5];

        return $c6;

     label1:
        $r14 = r0.<android.text.SpannableStringBuilder: char[] mText>;

        $c3 = $r14[i0];

        return $c3;

     label2:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("charAt: ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" >= length ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r12 = new java.lang.IndexOutOfBoundsException;

        $r13 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r13);

        throw $r12;

     label3:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("charAt: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" < 0");

        $r5 = new java.lang.IndexOutOfBoundsException;

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    public void clear()
    {
        android.text.SpannableStringBuilder r0;
        int $i0;

        r0 := @this: android.text.SpannableStringBuilder;

        $i0 = virtualinvoke r0.<android.text.SpannableStringBuilder: int length()>();

        virtualinvoke r0.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder replace(int,int,java.lang.CharSequence,int,int)>(0, $i0, "", 0, 0);

        r0.<android.text.SpannableStringBuilder: int mSpanInsertCount> = 0;

        return;
    }

    public void clearSpans()
    {
        android.text.SpannableStringBuilder r0;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8, i9;
        java.lang.Object[] $r1, $r4;
        int[] $r2, $r3;
        java.lang.Object r5;
        java.util.IdentityHashMap r6;

        r0 := @this: android.text.SpannableStringBuilder;

        $i1 = r0.<android.text.SpannableStringBuilder: int mSpanCount>;

        i6 = $i1 - 1;

     label1:
        if i6 < 0 goto label4;

        $r1 = r0.<android.text.SpannableStringBuilder: java.lang.Object[] mSpans>;

        r5 = $r1[i6];

        $r2 = r0.<android.text.SpannableStringBuilder: int[] mSpanStarts>;

        i7 = $r2[i6];

        $r3 = r0.<android.text.SpannableStringBuilder: int[] mSpanEnds>;

        i0 = $r3[i6];

        i8 = i7;

        $i2 = r0.<android.text.SpannableStringBuilder: int mGapStart>;

        if i7 <= $i2 goto label2;

        $i5 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        i8 = i7 - $i5;

     label2:
        i9 = i0;

        $i3 = r0.<android.text.SpannableStringBuilder: int mGapStart>;

        if i0 <= $i3 goto label3;

        $i4 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        i9 = i0 - $i4;

     label3:
        r0.<android.text.SpannableStringBuilder: int mSpanCount> = i6;

        $r4 = r0.<android.text.SpannableStringBuilder: java.lang.Object[] mSpans>;

        $r4[i6] = null;

        specialinvoke r0.<android.text.SpannableStringBuilder: void sendSpanRemoved(java.lang.Object,int,int)>(r5, i8, i9);

        i6 = i6 + -1;

        goto label1;

     label4:
        r6 = r0.<android.text.SpannableStringBuilder: java.util.IdentityHashMap mIndexOfSpan>;

        if r6 == null goto label5;

        virtualinvoke r6.<java.util.IdentityHashMap: void clear()>();

     label5:
        r0.<android.text.SpannableStringBuilder: int mSpanInsertCount> = 0;

        return;
    }

    public volatile android.text.Editable delete(int, int)
    {
        android.text.SpannableStringBuilder r0, $r1;
        int i0, i1;

        r0 := @this: android.text.SpannableStringBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder delete(int,int)>(i0, i1);

        return $r1;
    }

    public android.text.SpannableStringBuilder delete(int, int)
    {
        android.text.SpannableStringBuilder r0, r1;
        int i0, i1, $i2, $i3, $i4, $i5;

        r0 := @this: android.text.SpannableStringBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = virtualinvoke r0.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder replace(int,int,java.lang.CharSequence,int,int)>(i0, i1, "", 0, 0);

        $i2 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        $i3 = virtualinvoke r0.<android.text.SpannableStringBuilder: int length()>();

        $i4 = $i3 * 2;

        if $i2 <= $i4 goto label1;

        $i5 = virtualinvoke r0.<android.text.SpannableStringBuilder: int length()>();

        specialinvoke r0.<android.text.SpannableStringBuilder: void resizeFor(int)>($i5);

     label1:
        return r1;
    }

    public void drawText(android.graphics.BaseCanvas, int, int, float, float, android.graphics.Paint)
    {
        android.text.SpannableStringBuilder r0;
        android.graphics.BaseCanvas r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        float f0, f1;
        android.graphics.Paint r2;
        char[] r3, $r4, $r5;

        r0 := @this: android.text.SpannableStringBuilder;

        r1 := @parameter0: android.graphics.BaseCanvas;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        f0 := @parameter3: float;

        f1 := @parameter4: float;

        r2 := @parameter5: android.graphics.Paint;

        specialinvoke r0.<android.text.SpannableStringBuilder: void checkRange(java.lang.String,int,int)>("drawText", i0, i1);

        i2 = r0.<android.text.SpannableStringBuilder: int mGapStart>;

        if i1 > i2 goto label1;

        $r5 = r0.<android.text.SpannableStringBuilder: char[] mText>;

        $i8 = i1 - i0;

        virtualinvoke r1.<android.graphics.BaseCanvas: void drawText(char[],int,int,float,float,android.graphics.Paint)>($r5, i0, $i8, f0, f1, r2);

        goto label3;

     label1:
        if i0 < i2 goto label2;

        $r4 = r0.<android.text.SpannableStringBuilder: char[] mText>;

        $i5 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        $i7 = i0 + $i5;

        $i6 = i1 - i0;

        virtualinvoke r1.<android.graphics.BaseCanvas: void drawText(char[],int,int,float,float,android.graphics.Paint)>($r4, $i7, $i6, f0, f1, r2);

        goto label3;

     label2:
        $i3 = i1 - i0;

        r3 = staticinvoke <android.text.TextUtils: char[] obtain(int)>($i3);

        virtualinvoke r0.<android.text.SpannableStringBuilder: void getChars(int,int,char[],int)>(i0, i1, r3, 0);

        $i4 = i1 - i0;

        virtualinvoke r1.<android.graphics.BaseCanvas: void drawText(char[],int,int,float,float,android.graphics.Paint)>(r3, 0, $i4, f0, f1, r2);

        staticinvoke <android.text.TextUtils: void recycle(char[])>(r3);

     label3:
        return;
    }

    public void drawTextRun(android.graphics.BaseCanvas, int, int, int, int, float, float, boolean, android.graphics.Paint)
    {
        android.text.SpannableStringBuilder r0;
        android.graphics.BaseCanvas r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, i7, i8, i9, i10;
        float f0, f1;
        boolean z0;
        android.graphics.Paint r2;
        char[] $r3, r4, r5;

        r0 := @this: android.text.SpannableStringBuilder;

        r1 := @parameter0: android.graphics.BaseCanvas;

        i0 := @parameter1: int;

        i7 := @parameter2: int;

        i1 := @parameter3: int;

        i8 := @parameter4: int;

        f0 := @parameter5: float;

        f1 := @parameter6: float;

        z0 := @parameter7: boolean;

        r2 := @parameter8: android.graphics.Paint;

        specialinvoke r0.<android.text.SpannableStringBuilder: void checkRange(java.lang.String,int,int)>("drawTextRun", i0, i7);

        i2 = i8 - i1;

        i9 = i7 - i0;

        i3 = r0.<android.text.SpannableStringBuilder: int mGapStart>;

        if i8 > i3 goto label1;

        $r3 = r0.<android.text.SpannableStringBuilder: char[] mText>;

        virtualinvoke r1.<android.graphics.BaseCanvas: void drawTextRun(char[],int,int,int,int,float,float,boolean,android.graphics.Paint)>($r3, i0, i9, i1, i2, f0, f1, z0, r2);

        goto label3;

     label1:
        if i1 < i3 goto label2;

        r4 = r0.<android.text.SpannableStringBuilder: char[] mText>;

        i10 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        $i6 = i0 + i10;

        $i5 = i1 + i10;

        virtualinvoke r1.<android.graphics.BaseCanvas: void drawTextRun(char[],int,int,int,int,float,float,boolean,android.graphics.Paint)>(r4, $i6, i9, $i5, i2, f0, f1, z0, r2);

        goto label3;

     label2:
        r5 = staticinvoke <android.text.TextUtils: char[] obtain(int)>(i2);

        virtualinvoke r0.<android.text.SpannableStringBuilder: void getChars(int,int,char[],int)>(i1, i8, r5, 0);

        $i4 = i0 - i1;

        virtualinvoke r1.<android.graphics.BaseCanvas: void drawTextRun(char[],int,int,int,int,float,float,boolean,android.graphics.Paint)>(r5, $i4, i9, 0, i2, f0, f1, z0, r2);

        staticinvoke <android.text.TextUtils: void recycle(char[])>(r5);

     label3:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        android.text.SpannableStringBuilder r0;
        android.text.Spanned r1;
        java.lang.Object[] r2, r3;
        java.lang.Object r4, r7, r8;
        boolean $z0, $z1, $z2;
        java.lang.String $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17;

        r0 := @this: android.text.SpannableStringBuilder;

        r7 := @parameter0: java.lang.Object;

        $z0 = r7 instanceof android.text.Spanned;

        if $z0 == 0 goto label7;

        $r5 = virtualinvoke r0.<android.text.SpannableStringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r7.<java.lang.Object: java.lang.String toString()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label7;

        r1 = (android.text.Spanned) r7;

        $i0 = interfaceinvoke r1.<android.text.Spanned: int length()>();

        r2 = interfaceinvoke r1.<android.text.Spanned: java.lang.Object[] getSpans(int,int,java.lang.Class)>(0, $i0, class "Ljava/lang/Object;");

        $i1 = virtualinvoke r0.<android.text.SpannableStringBuilder: int length()>();

        r3 = virtualinvoke r0.<android.text.SpannableStringBuilder: java.lang.Object[] getSpans(int,int,java.lang.Class)>(0, $i1, class "Ljava/lang/Object;");

        $i3 = r0.<android.text.SpannableStringBuilder: int mSpanCount>;

        $i2 = lengthof r2;

        if $i3 != $i2 goto label7;

        i17 = 0;

     label1:
        $i4 = r0.<android.text.SpannableStringBuilder: int mSpanCount>;

        if i17 >= $i4 goto label6;

        r4 = r3[i17];

        r8 = r2[i17];

        if r4 != r0 goto label3;

        if r1 != r8 goto label2;

        $i11 = virtualinvoke r0.<android.text.SpannableStringBuilder: int getSpanStart(java.lang.Object)>(r4);

        $i12 = interfaceinvoke r1.<android.text.Spanned: int getSpanStart(java.lang.Object)>(r8);

        if $i11 != $i12 goto label2;

        $i13 = virtualinvoke r0.<android.text.SpannableStringBuilder: int getSpanEnd(java.lang.Object)>(r4);

        $i14 = interfaceinvoke r1.<android.text.Spanned: int getSpanEnd(java.lang.Object)>(r8);

        if $i13 != $i14 goto label2;

        $i15 = virtualinvoke r0.<android.text.SpannableStringBuilder: int getSpanFlags(java.lang.Object)>(r4);

        $i16 = interfaceinvoke r1.<android.text.Spanned: int getSpanFlags(java.lang.Object)>(r8);

        if $i15 == $i16 goto label4;

     label2:
        return 0;

     label3:
        $z2 = virtualinvoke r4.<java.lang.Object: boolean equals(java.lang.Object)>(r8);

        if $z2 == 0 goto label5;

        $i5 = virtualinvoke r0.<android.text.SpannableStringBuilder: int getSpanStart(java.lang.Object)>(r4);

        $i6 = interfaceinvoke r1.<android.text.Spanned: int getSpanStart(java.lang.Object)>(r8);

        if $i5 != $i6 goto label5;

        $i7 = virtualinvoke r0.<android.text.SpannableStringBuilder: int getSpanEnd(java.lang.Object)>(r4);

        $i8 = interfaceinvoke r1.<android.text.Spanned: int getSpanEnd(java.lang.Object)>(r8);

        if $i7 != $i8 goto label5;

        $i9 = virtualinvoke r0.<android.text.SpannableStringBuilder: int getSpanFlags(java.lang.Object)>(r4);

        $i10 = interfaceinvoke r1.<android.text.Spanned: int getSpanFlags(java.lang.Object)>(r8);

        if $i9 == $i10 goto label4;

        goto label5;

     label4:
        i17 = i17 + 1;

        goto label1;

     label5:
        return 0;

     label6:
        return 1;

     label7:
        return 0;
    }

    public void getChars(int, int, char[], int)
    {
        android.text.SpannableStringBuilder r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14;
        char[] r1, r2, $r3, $r4, $r5;

        r0 := @this: android.text.SpannableStringBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: char[];

        i2 := @parameter3: int;

        specialinvoke r0.<android.text.SpannableStringBuilder: void checkRange(java.lang.String,int,int)>("getChars", i0, i1);

        i13 = r0.<android.text.SpannableStringBuilder: int mGapStart>;

        if i1 > i13 goto label1;

        $r5 = r0.<android.text.SpannableStringBuilder: char[] mText>;

        $i12 = i1 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, i0, r1, i2, $i12);

        goto label3;

     label1:
        if i0 < i13 goto label2;

        $r4 = r0.<android.text.SpannableStringBuilder: char[] mText>;

        $i9 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        $i11 = $i9 + i0;

        $i10 = i1 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i11, r1, i2, $i10);

        goto label3;

     label2:
        $r3 = r0.<android.text.SpannableStringBuilder: char[] mText>;

        $i3 = i13 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, i0, r1, i2, $i3);

        r2 = r0.<android.text.SpannableStringBuilder: char[] mText>;

        i14 = r0.<android.text.SpannableStringBuilder: int mGapStart>;

        $i4 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        $i8 = $i4 + i14;

        $i5 = i14 - i0;

        $i7 = $i5 + i2;

        $i6 = i1 - i14;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, $i8, r1, $i7, $i6);

     label3:
        return;
    }

    public android.text.InputFilter[] getFilters()
    {
        android.text.SpannableStringBuilder r0;
        android.text.InputFilter[] $r1;

        r0 := @this: android.text.SpannableStringBuilder;

        $r1 = r0.<android.text.SpannableStringBuilder: android.text.InputFilter[] mFilters>;

        return $r1;
    }

    public int getSpanEnd(java.lang.Object)
    {
        android.text.SpannableStringBuilder r0;
        java.util.IdentityHashMap r1;
        java.lang.Object $r2, r4;
        int[] $r3;
        int $i0, $i1, i2;
        java.lang.Integer r5;

        r0 := @this: android.text.SpannableStringBuilder;

        r4 := @parameter0: java.lang.Object;

        r1 = r0.<android.text.SpannableStringBuilder: java.util.IdentityHashMap mIndexOfSpan>;

        i2 = -1;

        if r1 != null goto label1;

        return -1;

     label1:
        $r2 = virtualinvoke r1.<java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>(r4);

        r5 = (java.lang.Integer) $r2;

        if r5 != null goto label2;

        goto label3;

     label2:
        $r3 = r0.<android.text.SpannableStringBuilder: int[] mSpanEnds>;

        $i0 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        $i1 = $r3[$i0];

        i2 = specialinvoke r0.<android.text.SpannableStringBuilder: int resolveGap(int)>($i1);

     label3:
        return i2;
    }

    public int getSpanFlags(java.lang.Object)
    {
        android.text.SpannableStringBuilder r0;
        java.util.IdentityHashMap r1;
        java.lang.Object $r2, r4;
        int[] $r3;
        int $i0, i1;
        java.lang.Integer r5;

        r0 := @this: android.text.SpannableStringBuilder;

        r4 := @parameter0: java.lang.Object;

        r1 = r0.<android.text.SpannableStringBuilder: java.util.IdentityHashMap mIndexOfSpan>;

        i1 = 0;

        if r1 != null goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r1.<java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>(r4);

        r5 = (java.lang.Integer) $r2;

        if r5 != null goto label2;

        goto label3;

     label2:
        $r3 = r0.<android.text.SpannableStringBuilder: int[] mSpanFlags>;

        $i0 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        i1 = $r3[$i0];

     label3:
        return i1;
    }

    public int getSpanStart(java.lang.Object)
    {
        android.text.SpannableStringBuilder r0;
        java.util.IdentityHashMap r1;
        java.lang.Object $r2, r4;
        int[] $r3;
        int $i0, $i1, i2;
        java.lang.Integer r5;

        r0 := @this: android.text.SpannableStringBuilder;

        r4 := @parameter0: java.lang.Object;

        r1 = r0.<android.text.SpannableStringBuilder: java.util.IdentityHashMap mIndexOfSpan>;

        i2 = -1;

        if r1 != null goto label1;

        return -1;

     label1:
        $r2 = virtualinvoke r1.<java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>(r4);

        r5 = (java.lang.Integer) $r2;

        if r5 != null goto label2;

        goto label3;

     label2:
        $r3 = r0.<android.text.SpannableStringBuilder: int[] mSpanStarts>;

        $i0 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        $i1 = $r3[$i0];

        i2 = specialinvoke r0.<android.text.SpannableStringBuilder: int resolveGap(int)>($i1);

     label3:
        return i2;
    }

    public java.lang.Object[] getSpans(int, int, java.lang.Class)
    {
        android.text.SpannableStringBuilder r0;
        int i0, i1;
        java.lang.Class r1;
        java.lang.Object[] $r2;

        r0 := @this: android.text.SpannableStringBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.Class;

        $r2 = virtualinvoke r0.<android.text.SpannableStringBuilder: java.lang.Object[] getSpans(int,int,java.lang.Class,boolean)>(i0, i1, r1, 1);

        return $r2;
    }

    public java.lang.Object[] getSpans(int, int, java.lang.Class, boolean)
    {
        android.text.SpannableStringBuilder r0;
        int i0, i1, i2, $i3, $i4, $i5;
        java.lang.Class r1;
        boolean z0;
        java.lang.Object[] r2, $r4, $r5, $r6;
        java.lang.Object $r3;
        int[] r7, r8;

        r0 := @this: android.text.SpannableStringBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.Class;

        z0 := @parameter3: boolean;

        if r1 != null goto label1;

        $r6 = staticinvoke <com.android.internal.util.ArrayUtils: java.lang.Object[] emptyArray(java.lang.Class)>(class "Ljava/lang/Object;");

        return $r6;

     label1:
        $i3 = r0.<android.text.SpannableStringBuilder: int mSpanCount>;

        if $i3 != 0 goto label2;

        $r5 = staticinvoke <com.android.internal.util.ArrayUtils: java.lang.Object[] emptyArray(java.lang.Class)>(r1);

        return $r5;

     label2:
        $i4 = specialinvoke r0.<android.text.SpannableStringBuilder: int treeRoot()>();

        i2 = specialinvoke r0.<android.text.SpannableStringBuilder: int countSpans(int,int,java.lang.Class,int)>(i0, i1, r1, $i4);

        if i2 != 0 goto label3;

        $r4 = staticinvoke <com.android.internal.util.ArrayUtils: java.lang.Object[] emptyArray(java.lang.Class)>(r1);

        return $r4;

     label3:
        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r1, i2);

        r2 = (java.lang.Object[]) $r3;

        if z0 == 0 goto label4;

        r7 = staticinvoke <android.text.SpannableStringBuilder: int[] obtain(int)>(i2);

        goto label5;

     label4:
        r7 = <libcore.util.EmptyArray: int[] INT>;

     label5:
        if z0 == 0 goto label6;

        r8 = staticinvoke <android.text.SpannableStringBuilder: int[] obtain(int)>(i2);

        goto label7;

     label6:
        r8 = <libcore.util.EmptyArray: int[] INT>;

     label7:
        $i5 = specialinvoke r0.<android.text.SpannableStringBuilder: int treeRoot()>();

        specialinvoke r0.<android.text.SpannableStringBuilder: int getSpansRec(int,int,java.lang.Class,int,java.lang.Object[],int[],int[],int,boolean)>(i0, i1, r1, $i5, r2, r7, r8, 0, z0);

        if z0 == 0 goto label8;

        specialinvoke r0.<android.text.SpannableStringBuilder: void sort(java.lang.Object[],int[],int[])>(r2, r7, r8);

        staticinvoke <android.text.SpannableStringBuilder: void recycle(int[])>(r7);

        staticinvoke <android.text.SpannableStringBuilder: void recycle(int[])>(r8);

     label8:
        return r2;
    }

    public float getTextRunAdvances(int, int, int, int, boolean, float[], int, android.graphics.Paint)
    {
        android.text.SpannableStringBuilder r0;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, i10, i11;
        boolean z0;
        float[] r1;
        android.graphics.Paint r2;
        char[] $r3, r4, r5;
        float f0;

        r0 := @this: android.text.SpannableStringBuilder;

        i0 := @parameter0: int;

        i10 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        z0 := @parameter4: boolean;

        r1 := @parameter5: float[];

        i3 := @parameter6: int;

        r2 := @parameter7: android.graphics.Paint;

        i4 = i2 - i1;

        i5 = i10 - i0;

        i6 = r0.<android.text.SpannableStringBuilder: int mGapStart>;

        if i10 > i6 goto label1;

        $r3 = r0.<android.text.SpannableStringBuilder: char[] mText>;

        f0 = virtualinvoke r2.<android.graphics.Paint: float getTextRunAdvances(char[],int,int,int,int,boolean,float[],int)>($r3, i0, i5, i1, i4, z0, r1, i3);

        goto label3;

     label1:
        if i0 < i6 goto label2;

        r4 = r0.<android.text.SpannableStringBuilder: char[] mText>;

        i11 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        $i9 = i0 + i11;

        $i8 = i1 + i11;

        f0 = virtualinvoke r2.<android.graphics.Paint: float getTextRunAdvances(char[],int,int,int,int,boolean,float[],int)>(r4, $i9, i5, $i8, i4, z0, r1, i3);

        goto label3;

     label2:
        r5 = staticinvoke <android.text.TextUtils: char[] obtain(int)>(i4);

        virtualinvoke r0.<android.text.SpannableStringBuilder: void getChars(int,int,char[],int)>(i1, i2, r5, 0);

        $i7 = i0 - i1;

        f0 = virtualinvoke r2.<android.graphics.Paint: float getTextRunAdvances(char[],int,int,int,int,boolean,float[],int)>(r5, $i7, i5, 0, i4, z0, r1, i3);

        staticinvoke <android.text.TextUtils: void recycle(char[])>(r5);

     label3:
        return f0;
    }

    public int getTextRunCursor(int, int, int, int, int, android.graphics.Paint)
    {
        android.text.SpannableStringBuilder r0;
        int i0, i1, i2, i3, i4, $i5;
        android.graphics.Paint r1;
        boolean z0;

        r0 := @this: android.text.SpannableStringBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        r1 := @parameter5: android.graphics.Paint;

        z0 = 1;

        if i2 != 1 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        $i5 = virtualinvoke r0.<android.text.SpannableStringBuilder: int getTextRunCursor(int,int,boolean,int,int,android.graphics.Paint)>(i0, i1, z0, i3, i4, r1);

        return $i5;
    }

    public int getTextRunCursor(int, int, boolean, int, int, android.graphics.Paint)
    {
        android.text.SpannableStringBuilder r0;
        boolean z0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13;
        android.graphics.Paint r1;
        char[] $r2, r3, r4;

        r0 := @this: android.text.SpannableStringBuilder;

        i10 := @parameter0: int;

        i11 := @parameter1: int;

        z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        r1 := @parameter5: android.graphics.Paint;

        i2 = i11 - i10;

        i3 = r0.<android.text.SpannableStringBuilder: int mGapStart>;

        if i11 > i3 goto label1;

        $r2 = r0.<android.text.SpannableStringBuilder: char[] mText>;

        i12 = virtualinvoke r1.<android.graphics.Paint: int getTextRunCursor(char[],int,int,boolean,int,int)>($r2, i10, i2, z0, i0, i1);

        goto label3;

     label1:
        if i10 < i3 goto label2;

        r3 = r0.<android.text.SpannableStringBuilder: char[] mText>;

        i13 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        $i7 = i10 + i13;

        $i6 = i0 + i13;

        $i8 = virtualinvoke r1.<android.graphics.Paint: int getTextRunCursor(char[],int,int,boolean,int,int)>(r3, $i7, i2, z0, $i6, i1);

        $i9 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        i12 = $i8 - $i9;

        goto label3;

     label2:
        r4 = staticinvoke <android.text.TextUtils: char[] obtain(int)>(i2);

        virtualinvoke r0.<android.text.SpannableStringBuilder: void getChars(int,int,char[],int)>(i10, i11, r4, 0);

        $i4 = i0 - i10;

        $i5 = virtualinvoke r1.<android.graphics.Paint: int getTextRunCursor(char[],int,int,boolean,int,int)>(r4, 0, i2, z0, $i4, i1);

        i12 = $i5 + i10;

        staticinvoke <android.text.TextUtils: void recycle(char[])>(r4);

     label3:
        return i12;
    }

    public int getTextWatcherDepth()
    {
        android.text.SpannableStringBuilder r0;
        int $i0;

        r0 := @this: android.text.SpannableStringBuilder;

        $i0 = r0.<android.text.SpannableStringBuilder: int mTextWatcherDepth>;

        return $i0;
    }

    public int getTextWidths(int, int, float[], android.graphics.Paint)
    {
        android.text.SpannableStringBuilder r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        float[] r1;
        android.graphics.Paint r2;
        char[] r3, $r4, $r5;

        r0 := @this: android.text.SpannableStringBuilder;

        i8 := @parameter0: int;

        i0 := @parameter1: int;

        r1 := @parameter2: float[];

        r2 := @parameter3: android.graphics.Paint;

        specialinvoke r0.<android.text.SpannableStringBuilder: void checkRange(java.lang.String,int,int)>("getTextWidths", i8, i0);

        i1 = r0.<android.text.SpannableStringBuilder: int mGapStart>;

        if i0 > i1 goto label1;

        $r5 = r0.<android.text.SpannableStringBuilder: char[] mText>;

        $i7 = i0 - i8;

        i9 = virtualinvoke r2.<android.graphics.Paint: int getTextWidths(char[],int,int,float[])>($r5, i8, $i7, r1);

        goto label3;

     label1:
        if i8 < i1 goto label2;

        $r4 = r0.<android.text.SpannableStringBuilder: char[] mText>;

        $i4 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        $i6 = $i4 + i8;

        $i5 = i0 - i8;

        i9 = virtualinvoke r2.<android.graphics.Paint: int getTextWidths(char[],int,int,float[])>($r4, $i6, $i5, r1);

        goto label3;

     label2:
        $i2 = i0 - i8;

        r3 = staticinvoke <android.text.TextUtils: char[] obtain(int)>($i2);

        virtualinvoke r0.<android.text.SpannableStringBuilder: void getChars(int,int,char[],int)>(i8, i0, r3, 0);

        $i3 = i0 - i8;

        i9 = virtualinvoke r2.<android.graphics.Paint: int getTextWidths(char[],int,int,float[])>(r3, 0, $i3, r1);

        staticinvoke <android.text.TextUtils: void recycle(char[])>(r3);

     label3:
        return i9;
    }

    public int hashCode()
    {
        android.text.SpannableStringBuilder r0;
        java.lang.Object r1;
        java.lang.String $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15, i16;
        java.lang.Object[] $r3;

        r0 := @this: android.text.SpannableStringBuilder;

        $r2 = virtualinvoke r0.<android.text.SpannableStringBuilder: java.lang.String toString()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int hashCode()>();

        $i2 = $i0 * 31;

        $i1 = r0.<android.text.SpannableStringBuilder: int mSpanCount>;

        i14 = $i2 + $i1;

        i15 = 0;

     label1:
        $i3 = r0.<android.text.SpannableStringBuilder: int mSpanCount>;

        if i15 >= $i3 goto label3;

        $r3 = r0.<android.text.SpannableStringBuilder: java.lang.Object[] mSpans>;

        r1 = $r3[i15];

        i16 = i14;

        if r1 == r0 goto label2;

        $i12 = i14 * 31;

        $i13 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        i16 = $i12 + $i13;

     label2:
        $i4 = i16 * 31;

        $i5 = virtualinvoke r0.<android.text.SpannableStringBuilder: int getSpanStart(java.lang.Object)>(r1);

        $i6 = $i4 + $i5;

        $i7 = $i6 * 31;

        $i8 = virtualinvoke r0.<android.text.SpannableStringBuilder: int getSpanEnd(java.lang.Object)>(r1);

        $i9 = $i7 + $i8;

        $i10 = $i9 * 31;

        $i11 = virtualinvoke r0.<android.text.SpannableStringBuilder: int getSpanFlags(java.lang.Object)>(r1);

        i14 = $i10 + $i11;

        i15 = i15 + 1;

        goto label1;

     label3:
        return i14;
    }

    public volatile android.text.Editable insert(int, java.lang.CharSequence)
    {
        android.text.SpannableStringBuilder r0, $r2;
        int i0;
        java.lang.CharSequence r1;

        r0 := @this: android.text.SpannableStringBuilder;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.CharSequence;

        $r2 = virtualinvoke r0.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder insert(int,java.lang.CharSequence)>(i0, r1);

        return $r2;
    }

    public volatile android.text.Editable insert(int, java.lang.CharSequence, int, int)
    {
        android.text.SpannableStringBuilder r0, $r2;
        int i0, i1, i2;
        java.lang.CharSequence r1;

        r0 := @this: android.text.SpannableStringBuilder;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.CharSequence;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r2 = virtualinvoke r0.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder insert(int,java.lang.CharSequence,int,int)>(i0, r1, i1, i2);

        return $r2;
    }

    public android.text.SpannableStringBuilder insert(int, java.lang.CharSequence)
    {
        android.text.SpannableStringBuilder r0, $r2;
        int i0, $i1;
        java.lang.CharSequence r1;

        r0 := @this: android.text.SpannableStringBuilder;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.CharSequence;

        $i1 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $r2 = virtualinvoke r0.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder replace(int,int,java.lang.CharSequence,int,int)>(i0, i0, r1, 0, $i1);

        return $r2;
    }

    public android.text.SpannableStringBuilder insert(int, java.lang.CharSequence, int, int)
    {
        android.text.SpannableStringBuilder r0, $r2;
        int i0, i1, i2;
        java.lang.CharSequence r1;

        r0 := @this: android.text.SpannableStringBuilder;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.CharSequence;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r2 = virtualinvoke r0.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder replace(int,int,java.lang.CharSequence,int,int)>(i0, i0, r1, i1, i2);

        return $r2;
    }

    public int length()
    {
        android.text.SpannableStringBuilder r0;
        char[] $r1;
        int $i0, $i1, $i2;

        r0 := @this: android.text.SpannableStringBuilder;

        $r1 = r0.<android.text.SpannableStringBuilder: char[] mText>;

        $i1 = lengthof $r1;

        $i0 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        $i2 = $i1 - $i0;

        return $i2;
    }

    public float measureText(int, int, android.graphics.Paint)
    {
        android.text.SpannableStringBuilder r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        android.graphics.Paint r1;
        char[] r2, $r3, $r4;
        float f0;

        r0 := @this: android.text.SpannableStringBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.graphics.Paint;

        specialinvoke r0.<android.text.SpannableStringBuilder: void checkRange(java.lang.String,int,int)>("measureText", i0, i1);

        i2 = r0.<android.text.SpannableStringBuilder: int mGapStart>;

        if i1 > i2 goto label1;

        $r4 = r0.<android.text.SpannableStringBuilder: char[] mText>;

        $i8 = i1 - i0;

        f0 = virtualinvoke r1.<android.graphics.Paint: float measureText(char[],int,int)>($r4, i0, $i8);

        goto label3;

     label1:
        if i0 < i2 goto label2;

        $r3 = r0.<android.text.SpannableStringBuilder: char[] mText>;

        $i5 = r0.<android.text.SpannableStringBuilder: int mGapLength>;

        $i7 = $i5 + i0;

        $i6 = i1 - i0;

        f0 = virtualinvoke r1.<android.graphics.Paint: float measureText(char[],int,int)>($r3, $i7, $i6);

        goto label3;

     label2:
        $i3 = i1 - i0;

        r2 = staticinvoke <android.text.TextUtils: char[] obtain(int)>($i3);

        virtualinvoke r0.<android.text.SpannableStringBuilder: void getChars(int,int,char[],int)>(i0, i1, r2, 0);

        $i4 = i1 - i0;

        f0 = virtualinvoke r1.<android.graphics.Paint: float measureText(char[],int,int)>(r2, 0, $i4);

        staticinvoke <android.text.TextUtils: void recycle(char[])>(r2);

     label3:
        return f0;
    }

    public int nextSpanTransition(int, int, java.lang.Class)
    {
        android.text.SpannableStringBuilder r0;
        int i0, i1, $i2, $i3, $i4;
        java.lang.Class r1, r2;

        r0 := @this: android.text.SpannableStringBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.Class;

        $i2 = r0.<android.text.SpannableStringBuilder: int mSpanCount>;

        if $i2 != 0 goto label1;

        return i1;

     label1:
        r2 = r1;

        if r1 != null goto label2;

        r2 = class "Ljava/lang/Object;";

     label2:
        $i3 = specialinvoke r0.<android.text.SpannableStringBuilder: int treeRoot()>();

        $i4 = specialinvoke r0.<android.text.SpannableStringBuilder: int nextSpanTransitionRec(int,int,java.lang.Class,int)>(i0, i1, r2, $i3);

        return $i4;
    }

    public void removeSpan(java.lang.Object)
    {
        android.text.SpannableStringBuilder r0;
        java.lang.Object r1;

        r0 := @this: android.text.SpannableStringBuilder;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<android.text.SpannableStringBuilder: void removeSpan(java.lang.Object,int)>(r1, 0);

        return;
    }

    public void removeSpan(java.lang.Object, int)
    {
        android.text.SpannableStringBuilder r0;
        int i0, $i1;
        java.util.IdentityHashMap r1;
        java.lang.Object $r2, r3;
        java.lang.Integer r4;

        r0 := @this: android.text.SpannableStringBuilder;

        r3 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r1 = r0.<android.text.SpannableStringBuilder: java.util.IdentityHashMap mIndexOfSpan>;

        if r1 != null goto label1;

        return;

     label1:
        $r2 = virtualinvoke r1.<java.util.IdentityHashMap: java.lang.Object remove(java.lang.Object)>(r3);

        r4 = (java.lang.Integer) $r2;

        if r4 == null goto label2;

        $i1 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

        specialinvoke r0.<android.text.SpannableStringBuilder: void removeSpan(int,int)>($i1, i0);

     label2:
        return;
    }

    public volatile android.text.Editable replace(int, int, java.lang.CharSequence)
    {
        android.text.SpannableStringBuilder r0, $r2;
        int i0, i1;
        java.lang.CharSequence r1;

        r0 := @this: android.text.SpannableStringBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.CharSequence;

        $r2 = virtualinvoke r0.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder replace(int,int,java.lang.CharSequence)>(i0, i1, r1);

        return $r2;
    }

    public volatile android.text.Editable replace(int, int, java.lang.CharSequence, int, int)
    {
        android.text.SpannableStringBuilder r0, $r2;
        int i0, i1, i2, i3;
        java.lang.CharSequence r1;

        r0 := @this: android.text.SpannableStringBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.CharSequence;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $r2 = virtualinvoke r0.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder replace(int,int,java.lang.CharSequence,int,int)>(i0, i1, r1, i2, i3);

        return $r2;
    }

    public android.text.SpannableStringBuilder replace(int, int, java.lang.CharSequence)
    {
        android.text.SpannableStringBuilder r0, $r2;
        int i0, i1, $i2;
        java.lang.CharSequence r1;

        r0 := @this: android.text.SpannableStringBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.CharSequence;

        $i2 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $r2 = virtualinvoke r0.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder replace(int,int,java.lang.CharSequence,int,int)>(i0, i1, r1, 0, $i2);

        return $r2;
    }

    public android.text.SpannableStringBuilder replace(int, int, java.lang.CharSequence, int, int)
    {
        android.text.SpannableStringBuilder r0;
        int i0, i1, i2, i3, $i4, $i5, $i10, $i11, $i16, i17, i18, i19, i20, i21, $i22, i23, i24, i26, i29;
        android.text.InputFilter[] $r1, $r4;
        long $l6, $l7, $l8, $l9, $l12, $l13, $l14, $l15, l25, l28;
        java.lang.Object $r2, $r3;
        boolean $z0, z1, z3;
        android.text.InputFilter $r5;
        java.lang.CharSequence r6, r7;
        java.lang.Object[] $r8;
        android.text.TextWatcher[] r9;

        r0 := @this: android.text.SpannableStringBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r6 := @parameter2: java.lang.CharSequence;

        i17 := @parameter3: int;

        i18 := @parameter4: int;

        specialinvoke r0.<android.text.SpannableStringBuilder: void checkRange(java.lang.String,int,int)>("replace", i0, i1);

        $r1 = r0.<android.text.SpannableStringBuilder: android.text.InputFilter[] mFilters>;

        i19 = lengthof $r1;

        i20 = i17;

        i21 = 0;

     label01:
        if i21 >= i19 goto label03;

        $r4 = r0.<android.text.SpannableStringBuilder: android.text.InputFilter[] mFilters>;

        $r5 = $r4[i21];

        r7 = interfaceinvoke $r5.<android.text.InputFilter: java.lang.CharSequence filter(java.lang.CharSequence,int,int,android.text.Spanned,int,int)>(r6, i20, i18, r0, i0, i1);

        if r7 == null goto label02;

        i18 = interfaceinvoke r7.<java.lang.CharSequence: int length()>();

        r6 = r7;

        i20 = 0;

     label02:
        i21 = i21 + 1;

        goto label01;

     label03:
        i2 = i1 - i0;

        i3 = i18 - i20;

        if i2 != 0 goto label04;

        if i3 != 0 goto label04;

        $z0 = staticinvoke <android.text.SpannableStringBuilder: boolean hasNonExclusiveExclusiveSpanAt(java.lang.CharSequence,int)>(r6, i20);

        if $z0 != 0 goto label04;

        return r0;

     label04:
        $i22 = i0 + i2;

        $r8 = virtualinvoke r0.<android.text.SpannableStringBuilder: java.lang.Object[] getSpans(int,int,java.lang.Class)>(i0, $i22, class "Landroid/text/TextWatcher;");

        r9 = (android.text.TextWatcher[]) $r8;

        specialinvoke r0.<android.text.SpannableStringBuilder: void sendBeforeTextChanged(android.text.TextWatcher[],int,int,int)>(r9, i0, i2, i3);

        if i2 == 0 goto label05;

        if i3 == 0 goto label05;

        z1 = 1;

        goto label06;

     label05:
        z1 = 0;

     label06:
        if z1 == 0 goto label07;

        i23 = staticinvoke <android.text.Selection: int getSelectionStart(java.lang.CharSequence)>(r0);

        i24 = staticinvoke <android.text.Selection: int getSelectionEnd(java.lang.CharSequence)>(r0);

        goto label08;

     label07:
        i23 = 0;

        i24 = 0;

     label08:
        specialinvoke r0.<android.text.SpannableStringBuilder: void change(int,int,java.lang.CharSequence,int,int)>(i0, i1, r6, i20, i18);

        if z1 == 0 goto label13;

        if i23 <= i0 goto label09;

        if i23 >= i1 goto label09;

        $i11 = i23 - i0;

        l25 = (long) $i11;

        $l12 = (long) i3;

        $l14 = $l12 * l25;

        $l13 = (long) i2;

        $l15 = $l14 / $l13;

        $i16 = staticinvoke <java.lang.Math: int toIntExact(long)>($l15);

        i26 = i0 + $i16;

        $r3 = <android.text.Selection: java.lang.Object SELECTION_START>;

        specialinvoke r0.<android.text.SpannableStringBuilder: void setSpan(boolean,java.lang.Object,int,int,int,boolean)>(0, $r3, i26, i26, 34, 1);

        z3 = 1;

        goto label10;

     label09:
        z3 = 0;

     label10:
        if i24 <= i0 goto label11;

        if i24 >= i1 goto label11;

        $i5 = i24 - i0;

        l28 = (long) $i5;

        $l6 = (long) i3;

        $l8 = $l6 * l28;

        $l7 = (long) i2;

        $l9 = $l8 / $l7;

        $i10 = staticinvoke <java.lang.Math: int toIntExact(long)>($l9);

        i29 = i0 + $i10;

        $r2 = <android.text.Selection: java.lang.Object SELECTION_END>;

        specialinvoke r0.<android.text.SpannableStringBuilder: void setSpan(boolean,java.lang.Object,int,int,int,boolean)>(0, $r2, i29, i29, 34, 1);

        z3 = 1;

        goto label11;

     label11:
        if z3 == 0 goto label12;

        specialinvoke r0.<android.text.SpannableStringBuilder: void restoreInvariants()>();

     label12:
        goto label13;

     label13:
        specialinvoke r0.<android.text.SpannableStringBuilder: void sendTextChanged(android.text.TextWatcher[],int,int,int)>(r9, i0, i2, i3);

        specialinvoke r0.<android.text.SpannableStringBuilder: void sendAfterTextChanged(android.text.TextWatcher[])>(r9);

        $i4 = i3 - i2;

        specialinvoke r0.<android.text.SpannableStringBuilder: void sendToSpanWatchers(int,int,int)>(i0, i1, $i4);

        return r0;
    }

    public void setFilters(android.text.InputFilter[])
    {
        android.text.SpannableStringBuilder r0;
        android.text.InputFilter[] r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: android.text.SpannableStringBuilder;

        r1 := @parameter0: android.text.InputFilter[];

        if r1 == null goto label1;

        r0.<android.text.SpannableStringBuilder: android.text.InputFilter[] mFilters> = r1;

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;
    }

    public void setSpan(java.lang.Object, int, int, int)
    {
        android.text.SpannableStringBuilder r0;
        java.lang.Object r1;
        int i0, i1, i2;

        r0 := @this: android.text.SpannableStringBuilder;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        specialinvoke r0.<android.text.SpannableStringBuilder: void setSpan(boolean,java.lang.Object,int,int,int,boolean)>(1, r1, i0, i1, i2, 1);

        return;
    }

    public java.lang.CharSequence subSequence(int, int)
    {
        android.text.SpannableStringBuilder r0, $r1;
        int i0, i1;

        r0 := @this: android.text.SpannableStringBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = new android.text.SpannableStringBuilder;

        specialinvoke $r1.<android.text.SpannableStringBuilder: void <init>(java.lang.CharSequence,int,int)>(r0, i0, i1);

        return $r1;
    }

    public java.lang.String substring(int, int)
    {
        android.text.SpannableStringBuilder r0;
        int i0, i1, $i2;
        char[] r1;
        java.lang.String $r2;

        r0 := @this: android.text.SpannableStringBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = i1 - i0;

        r1 = newarray (char)[$i2];

        virtualinvoke r0.<android.text.SpannableStringBuilder: void getChars(int,int,char[],int)>(i0, i1, r1, 0);

        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[])>(r1);

        return $r2;
    }

    public java.lang.String toString()
    {
        android.text.SpannableStringBuilder r0;
        int i0;
        char[] r1;
        java.lang.String $r2;

        r0 := @this: android.text.SpannableStringBuilder;

        i0 = virtualinvoke r0.<android.text.SpannableStringBuilder: int length()>();

        r1 = newarray (char)[i0];

        virtualinvoke r0.<android.text.SpannableStringBuilder: void getChars(int,int,char[],int)>(0, i0, r1, 0);

        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[])>(r1);

        return $r2;
    }
}
