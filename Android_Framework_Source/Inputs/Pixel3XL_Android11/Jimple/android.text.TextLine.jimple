public class android.text.TextLine extends java.lang.Object
{
    private static final boolean DEBUG;
    private static final char TAB_CHAR;
    private static final int TAB_INCREMENT;
    private static final android.text.TextLine[] sCached;
    private final android.text.TextPaint mActivePaint;
    private float mAddedWidthForJustify;
    private final android.text.SpanSet mCharacterStyleSpanSet;
    private char[] mChars;
    private boolean mCharsValid;
    private android.text.PrecomputedText mComputed;
    private final android.text.TextLine$DecorationInfo mDecorationInfo;
    private final java.util.ArrayList mDecorations;
    private int mDir;
    private android.text.Layout$Directions mDirections;
    private int mEllipsisEnd;
    private int mEllipsisStart;
    private boolean mHasTabs;
    private boolean mIsJustifying;
    private int mLen;
    private final android.text.SpanSet mMetricAffectingSpanSpanSet;
    private android.text.TextPaint mPaint;
    private final android.text.SpanSet mReplacementSpanSpanSet;
    private android.text.Spanned mSpanned;
    private int mStart;
    private android.text.Layout$TabStops mTabs;
    private java.lang.CharSequence mText;
    private final android.text.TextPaint mWorkPaint;

    static void <clinit>()
    {
        android.text.TextLine[] $r0;

        <android.text.TextLine: int TAB_INCREMENT> = 20;

        <android.text.TextLine: char TAB_CHAR> = 9;

        <android.text.TextLine: boolean DEBUG> = 0;

        $r0 = newarray (android.text.TextLine)[3];

        <android.text.TextLine: android.text.TextLine[] sCached> = $r0;

        return;
    }

    public void <init>()
    {
        android.text.TextLine r0;
        android.text.TextPaint $r1, $r2;
        android.text.SpanSet $r3, $r4, $r5;
        android.text.TextLine$DecorationInfo $r6;
        java.util.ArrayList $r7;

        r0 := @this: android.text.TextLine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new android.text.TextPaint;

        specialinvoke $r1.<android.text.TextPaint: void <init>()>();

        r0.<android.text.TextLine: android.text.TextPaint mWorkPaint> = $r1;

        $r2 = new android.text.TextPaint;

        specialinvoke $r2.<android.text.TextPaint: void <init>()>();

        r0.<android.text.TextLine: android.text.TextPaint mActivePaint> = $r2;

        $r3 = new android.text.SpanSet;

        specialinvoke $r3.<android.text.SpanSet: void <init>(java.lang.Class)>(class "Landroid/text/style/MetricAffectingSpan;");

        r0.<android.text.TextLine: android.text.SpanSet mMetricAffectingSpanSpanSet> = $r3;

        $r4 = new android.text.SpanSet;

        specialinvoke $r4.<android.text.SpanSet: void <init>(java.lang.Class)>(class "Landroid/text/style/CharacterStyle;");

        r0.<android.text.TextLine: android.text.SpanSet mCharacterStyleSpanSet> = $r4;

        $r5 = new android.text.SpanSet;

        specialinvoke $r5.<android.text.SpanSet: void <init>(java.lang.Class)>(class "Landroid/text/style/ReplacementSpan;");

        r0.<android.text.TextLine: android.text.SpanSet mReplacementSpanSpanSet> = $r5;

        $r6 = new android.text.TextLine$DecorationInfo;

        specialinvoke $r6.<android.text.TextLine$DecorationInfo: void <init>(android.text.TextLine$1)>(null);

        r0.<android.text.TextLine: android.text.TextLine$DecorationInfo mDecorationInfo> = $r6;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r0.<android.text.TextLine: java.util.ArrayList mDecorations> = $r7;

        return;
    }

    private int adjustEndHyphenEdit(int, int)
    {
        android.text.TextLine r0;
        int i0, $i1, i2;

        r0 := @this: android.text.TextLine;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        $i1 = r0.<android.text.TextLine: int mLen>;

        if i0 >= $i1 goto label1;

        i2 = 0;

        goto label1;

     label1:
        return i2;
    }

    private int adjustStartHyphenEdit(int, int)
    {
        android.text.TextLine r0;
        int i0, i1, i2;

        r0 := @this: android.text.TextLine;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        if i1 <= 0 goto label1;

        i2 = 0;

        goto label2;

     label1:
        i2 = i0;

     label2:
        return i2;
    }

    private char charAt(int)
    {
        android.text.TextLine r0;
        boolean $z0;
        int $i0, $i1, i2;
        java.lang.CharSequence $r1;
        char[] $r2;
        char c3, c4, c5;

        r0 := @this: android.text.TextLine;

        i2 := @parameter0: int;

        $z0 = r0.<android.text.TextLine: boolean mCharsValid>;

        if $z0 == 0 goto label1;

        $r2 = r0.<android.text.TextLine: char[] mChars>;

        c3 = $r2[i2];

        c4 = c3;

        goto label2;

     label1:
        $r1 = r0.<android.text.TextLine: java.lang.CharSequence mText>;

        $i0 = r0.<android.text.TextLine: int mStart>;

        $i1 = $i0 + i2;

        c5 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i1);

        c4 = c5;

     label2:
        return c4;
    }

    private int countStretchableSpaces(int, int)
    {
        android.text.TextLine r0;
        int i0, $i1, $i2, i3, i4, i6;
        boolean $z0, $z1;
        java.lang.CharSequence $r1;
        char[] $r2;
        char c5;

        r0 := @this: android.text.TextLine;

        i3 := @parameter0: int;

        i0 := @parameter1: int;

        i4 = 0;

     label1:
        if i3 >= i0 goto label5;

        $z0 = r0.<android.text.TextLine: boolean mCharsValid>;

        if $z0 == 0 goto label2;

        $r2 = r0.<android.text.TextLine: char[] mChars>;

        c5 = $r2[i3];

        goto label3;

     label2:
        $r1 = r0.<android.text.TextLine: java.lang.CharSequence mText>;

        $i1 = r0.<android.text.TextLine: int mStart>;

        $i2 = $i1 + i3;

        c5 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i2);

     label3:
        i6 = i4;

        $z1 = specialinvoke r0.<android.text.TextLine: boolean isStretchableWhitespace(int)>(c5);

        if $z1 == 0 goto label4;

        i6 = i4 + 1;

     label4:
        i3 = i3 + 1;

        i4 = i6;

        goto label1;

     label5:
        return i4;
    }

    private float drawRun(android.graphics.Canvas, int, int, boolean, float, int, int, int, boolean)
    {
        android.text.TextLine r0;
        android.graphics.Canvas r1;
        int i0, i1, i2, i3, i4, i5;
        boolean z0, z1, z2;
        float f0, f1, $f2, $f3, $f4;

        r0 := @this: android.text.TextLine;

        r1 := @parameter0: android.graphics.Canvas;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        f0 := @parameter4: float;

        i2 := @parameter5: int;

        i3 := @parameter6: int;

        i4 := @parameter7: int;

        z1 := @parameter8: boolean;

        i5 = r0.<android.text.TextLine: int mDir>;

        z2 = 1;

        if i5 != 1 goto label1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        if z2 != z0 goto label3;

        $f3 = specialinvoke r0.<android.text.TextLine: float measureRun(int,int,int,boolean,android.graphics.Paint$FontMetricsInt)>(i0, i1, i1, z0, null);

        f1 = neg $f3;

        $f4 = f0 + f1;

        specialinvoke r0.<android.text.TextLine: float handleRun(int,int,int,boolean,android.graphics.Canvas,float,int,int,int,android.graphics.Paint$FontMetricsInt,boolean)>(i0, i1, i1, z0, r1, $f4, i2, i3, i4, null, 0);

        return f1;

     label3:
        $f2 = specialinvoke r0.<android.text.TextLine: float handleRun(int,int,int,boolean,android.graphics.Canvas,float,int,int,int,android.graphics.Paint$FontMetricsInt,boolean)>(i0, i1, i1, z0, r1, f0, i2, i3, i4, null, z1);

        return $f2;
    }

    private static void drawStroke(android.text.TextPaint, android.graphics.Canvas, int, float, float, float, float, float)
    {
        android.text.TextPaint r0;
        android.graphics.Canvas r1;
        int i0, i1, $i2;
        float f0, f1, f2, f3, $f4, $f5, $f6, f7, f8;
        android.graphics.Paint$Style r2, $r3;
        boolean z0;

        r0 := @parameter0: android.text.TextPaint;

        r1 := @parameter1: android.graphics.Canvas;

        i0 := @parameter2: int;

        f7 := @parameter3: float;

        f0 := @parameter4: float;

        f1 := @parameter5: float;

        f2 := @parameter6: float;

        f3 := @parameter7: float;

        $i2 = r0.<android.text.TextPaint: int baselineShift>;

        $f4 = (float) $i2;

        $f5 = f3 + $f4;

        f8 = $f5 + f7;

        i1 = virtualinvoke r0.<android.text.TextPaint: int getColor()>();

        r2 = virtualinvoke r0.<android.text.TextPaint: android.graphics.Paint$Style getStyle()>();

        z0 = virtualinvoke r0.<android.text.TextPaint: boolean isAntiAlias()>();

        $r3 = <android.graphics.Paint$Style: android.graphics.Paint$Style FILL>;

        virtualinvoke r0.<android.text.TextPaint: void setStyle(android.graphics.Paint$Style)>($r3);

        virtualinvoke r0.<android.text.TextPaint: void setAntiAlias(boolean)>(1);

        virtualinvoke r0.<android.text.TextPaint: void setColor(int)>(i0);

        $f6 = f8 + f0;

        virtualinvoke r1.<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>(f1, f8, f2, $f6, r0);

        virtualinvoke r0.<android.text.TextPaint: void setStyle(android.graphics.Paint$Style)>(r2);

        virtualinvoke r0.<android.text.TextPaint: void setColor(int)>(i1);

        virtualinvoke r0.<android.text.TextPaint: void setAntiAlias(boolean)>(z0);

        return;
    }

    private void drawTextRun(android.graphics.Canvas, android.text.TextPaint, int, int, int, int, boolean, float, int)
    {
        android.text.TextLine r0;
        android.graphics.Canvas r1;
        android.text.TextPaint r2;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11;
        boolean z0, $z1;
        float f0, $f1, $f2;
        java.lang.CharSequence $r3;
        char[] $r4;

        r0 := @this: android.text.TextLine;

        r1 := @parameter0: android.graphics.Canvas;

        r2 := @parameter1: android.text.TextPaint;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        z0 := @parameter6: boolean;

        f0 := @parameter7: float;

        i4 := @parameter8: int;

        $z1 = r0.<android.text.TextLine: boolean mCharsValid>;

        if $z1 == 0 goto label1;

        $r4 = r0.<android.text.TextLine: char[] mChars>;

        $i11 = i1 - i0;

        $i10 = i3 - i2;

        $f2 = (float) i4;

        virtualinvoke r1.<android.graphics.Canvas: void drawTextRun(char[],int,int,int,int,float,float,boolean,android.graphics.Paint)>($r4, i0, $i11, i2, $i10, f0, $f2, z0, r2);

        goto label2;

     label1:
        i5 = r0.<android.text.TextLine: int mStart>;

        $r3 = r0.<android.text.TextLine: java.lang.CharSequence mText>;

        $i9 = i5 + i0;

        $i8 = i5 + i1;

        $i7 = i5 + i2;

        $i6 = i5 + i3;

        $f1 = (float) i4;

        virtualinvoke r1.<android.graphics.Canvas: void drawTextRun(java.lang.CharSequence,int,int,int,int,float,float,boolean,android.graphics.Paint)>($r3, $i9, $i8, $i7, $i6, f0, $f1, z0, r2);

     label2:
        return;
    }

    private static boolean equalAttributes(android.text.TextPaint, android.text.TextPaint)
    {
        android.text.TextPaint r0, r1;
        android.graphics.ColorFilter $r2, $r3;
        android.graphics.MaskFilter $r4, $r5;
        android.graphics.Shader $r6, $r7;
        android.graphics.Typeface $r8, $r9;
        android.graphics.Xfermode $r10, $r11;
        android.os.LocaleList $r12, $r13;
        boolean $z0, $z1, $z2, $z3, $z4, z5;
        java.lang.String $r14, $r15, $r16, $r17;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23;
        byte $b0, $b1, $b2, $b11, $b12, $b13, $b14, $b15, $b16, $b17, $b28, $b31;
        int $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i29, $i30;
        android.graphics.Paint$Style $r18, $r19;
        android.graphics.Paint$Cap $r20, $r21;
        android.graphics.Paint$Join $r22, $r23;
        android.graphics.Paint$Align $r24, $r25;
        int[] $r26, $r27;

        r0 := @parameter0: android.text.TextPaint;

        r1 := @parameter1: android.text.TextPaint;

        $r2 = virtualinvoke r0.<android.text.TextPaint: android.graphics.ColorFilter getColorFilter()>();

        $r3 = virtualinvoke r1.<android.text.TextPaint: android.graphics.ColorFilter getColorFilter()>();

        if $r2 != $r3 goto label1;

        $r4 = virtualinvoke r0.<android.text.TextPaint: android.graphics.MaskFilter getMaskFilter()>();

        $r5 = virtualinvoke r1.<android.text.TextPaint: android.graphics.MaskFilter getMaskFilter()>();

        if $r4 != $r5 goto label1;

        $r6 = virtualinvoke r0.<android.text.TextPaint: android.graphics.Shader getShader()>();

        $r7 = virtualinvoke r1.<android.text.TextPaint: android.graphics.Shader getShader()>();

        if $r6 != $r7 goto label1;

        $r8 = virtualinvoke r0.<android.text.TextPaint: android.graphics.Typeface getTypeface()>();

        $r9 = virtualinvoke r1.<android.text.TextPaint: android.graphics.Typeface getTypeface()>();

        if $r8 != $r9 goto label1;

        $r10 = virtualinvoke r0.<android.text.TextPaint: android.graphics.Xfermode getXfermode()>();

        $r11 = virtualinvoke r1.<android.text.TextPaint: android.graphics.Xfermode getXfermode()>();

        if $r10 != $r11 goto label1;

        $r12 = virtualinvoke r0.<android.text.TextPaint: android.os.LocaleList getTextLocales()>();

        $r13 = virtualinvoke r1.<android.text.TextPaint: android.os.LocaleList getTextLocales()>();

        $z0 = virtualinvoke $r12.<android.os.LocaleList: boolean equals(java.lang.Object)>($r13);

        if $z0 == 0 goto label1;

        $r14 = virtualinvoke r0.<android.text.TextPaint: java.lang.String getFontFeatureSettings()>();

        $r15 = virtualinvoke r1.<android.text.TextPaint: java.lang.String getFontFeatureSettings()>();

        $z1 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r14, $r15);

        if $z1 == 0 goto label1;

        $r16 = virtualinvoke r0.<android.text.TextPaint: java.lang.String getFontVariationSettings()>();

        $r17 = virtualinvoke r1.<android.text.TextPaint: java.lang.String getFontVariationSettings()>();

        $z2 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r16, $r17);

        if $z2 == 0 goto label1;

        $f0 = virtualinvoke r0.<android.text.TextPaint: float getShadowLayerRadius()>();

        $f1 = virtualinvoke r1.<android.text.TextPaint: float getShadowLayerRadius()>();

        $b0 = $f0 cmpl $f1;

        if $b0 != 0 goto label1;

        $f2 = virtualinvoke r0.<android.text.TextPaint: float getShadowLayerDx()>();

        $f3 = virtualinvoke r1.<android.text.TextPaint: float getShadowLayerDx()>();

        $b1 = $f2 cmpl $f3;

        if $b1 != 0 goto label1;

        $f4 = virtualinvoke r0.<android.text.TextPaint: float getShadowLayerDy()>();

        $f5 = virtualinvoke r1.<android.text.TextPaint: float getShadowLayerDy()>();

        $b2 = $f4 cmpl $f5;

        if $b2 != 0 goto label1;

        $i3 = virtualinvoke r0.<android.text.TextPaint: int getShadowLayerColor()>();

        $i4 = virtualinvoke r1.<android.text.TextPaint: int getShadowLayerColor()>();

        if $i3 != $i4 goto label1;

        $i5 = virtualinvoke r0.<android.text.TextPaint: int getFlags()>();

        $i6 = virtualinvoke r1.<android.text.TextPaint: int getFlags()>();

        if $i5 != $i6 goto label1;

        $i7 = virtualinvoke r0.<android.text.TextPaint: int getHinting()>();

        $i8 = virtualinvoke r1.<android.text.TextPaint: int getHinting()>();

        if $i7 != $i8 goto label1;

        $r18 = virtualinvoke r0.<android.text.TextPaint: android.graphics.Paint$Style getStyle()>();

        $r19 = virtualinvoke r1.<android.text.TextPaint: android.graphics.Paint$Style getStyle()>();

        if $r18 != $r19 goto label1;

        $i9 = virtualinvoke r0.<android.text.TextPaint: int getColor()>();

        $i10 = virtualinvoke r1.<android.text.TextPaint: int getColor()>();

        if $i9 != $i10 goto label1;

        $f6 = virtualinvoke r0.<android.text.TextPaint: float getStrokeWidth()>();

        $f7 = virtualinvoke r1.<android.text.TextPaint: float getStrokeWidth()>();

        $b11 = $f6 cmpl $f7;

        if $b11 != 0 goto label1;

        $f8 = virtualinvoke r0.<android.text.TextPaint: float getStrokeMiter()>();

        $f9 = virtualinvoke r1.<android.text.TextPaint: float getStrokeMiter()>();

        $b12 = $f8 cmpl $f9;

        if $b12 != 0 goto label1;

        $r20 = virtualinvoke r0.<android.text.TextPaint: android.graphics.Paint$Cap getStrokeCap()>();

        $r21 = virtualinvoke r1.<android.text.TextPaint: android.graphics.Paint$Cap getStrokeCap()>();

        if $r20 != $r21 goto label1;

        $r22 = virtualinvoke r0.<android.text.TextPaint: android.graphics.Paint$Join getStrokeJoin()>();

        $r23 = virtualinvoke r1.<android.text.TextPaint: android.graphics.Paint$Join getStrokeJoin()>();

        if $r22 != $r23 goto label1;

        $r24 = virtualinvoke r0.<android.text.TextPaint: android.graphics.Paint$Align getTextAlign()>();

        $r25 = virtualinvoke r1.<android.text.TextPaint: android.graphics.Paint$Align getTextAlign()>();

        if $r24 != $r25 goto label1;

        $z3 = virtualinvoke r0.<android.text.TextPaint: boolean isElegantTextHeight()>();

        $z4 = virtualinvoke r1.<android.text.TextPaint: boolean isElegantTextHeight()>();

        if $z3 != $z4 goto label1;

        $f10 = virtualinvoke r0.<android.text.TextPaint: float getTextSize()>();

        $f11 = virtualinvoke r1.<android.text.TextPaint: float getTextSize()>();

        $b13 = $f10 cmpl $f11;

        if $b13 != 0 goto label1;

        $f12 = virtualinvoke r0.<android.text.TextPaint: float getTextScaleX()>();

        $f13 = virtualinvoke r1.<android.text.TextPaint: float getTextScaleX()>();

        $b14 = $f12 cmpl $f13;

        if $b14 != 0 goto label1;

        $f14 = virtualinvoke r0.<android.text.TextPaint: float getTextSkewX()>();

        $f15 = virtualinvoke r1.<android.text.TextPaint: float getTextSkewX()>();

        $b15 = $f14 cmpl $f15;

        if $b15 != 0 goto label1;

        $f16 = virtualinvoke r0.<android.text.TextPaint: float getLetterSpacing()>();

        $f17 = virtualinvoke r1.<android.text.TextPaint: float getLetterSpacing()>();

        $b16 = $f16 cmpl $f17;

        if $b16 != 0 goto label1;

        $f18 = virtualinvoke r0.<android.text.TextPaint: float getWordSpacing()>();

        $f19 = virtualinvoke r1.<android.text.TextPaint: float getWordSpacing()>();

        $b17 = $f18 cmpl $f19;

        if $b17 != 0 goto label1;

        $i18 = virtualinvoke r0.<android.text.TextPaint: int getStartHyphenEdit()>();

        $i19 = virtualinvoke r1.<android.text.TextPaint: int getStartHyphenEdit()>();

        if $i18 != $i19 goto label1;

        $i20 = virtualinvoke r0.<android.text.TextPaint: int getEndHyphenEdit()>();

        $i21 = virtualinvoke r1.<android.text.TextPaint: int getEndHyphenEdit()>();

        if $i20 != $i21 goto label1;

        $i23 = r0.<android.text.TextPaint: int bgColor>;

        $i22 = r1.<android.text.TextPaint: int bgColor>;

        if $i23 != $i22 goto label1;

        $i25 = r0.<android.text.TextPaint: int baselineShift>;

        $i24 = r1.<android.text.TextPaint: int baselineShift>;

        if $i25 != $i24 goto label1;

        $i27 = r0.<android.text.TextPaint: int linkColor>;

        $i26 = r1.<android.text.TextPaint: int linkColor>;

        if $i27 != $i26 goto label1;

        $r27 = r0.<android.text.TextPaint: int[] drawableState>;

        $r26 = r1.<android.text.TextPaint: int[] drawableState>;

        if $r27 != $r26 goto label1;

        $f21 = r0.<android.text.TextPaint: float density>;

        $f20 = r1.<android.text.TextPaint: float density>;

        $b28 = $f21 cmpl $f20;

        if $b28 != 0 goto label1;

        $i30 = r0.<android.text.TextPaint: int underlineColor>;

        $i29 = r1.<android.text.TextPaint: int underlineColor>;

        if $i30 != $i29 goto label1;

        $f23 = r0.<android.text.TextPaint: float underlineThickness>;

        $f22 = r1.<android.text.TextPaint: float underlineThickness>;

        $b31 = $f23 cmpl $f22;

        if $b31 != 0 goto label1;

        z5 = 1;

        goto label2;

     label1:
        z5 = 0;

     label2:
        return z5;
    }

    private static void expandMetricsFromPaint(android.graphics.Paint$FontMetricsInt, android.text.TextPaint)
    {
        android.graphics.Paint$FontMetricsInt r0;
        android.text.TextPaint r1;
        int i0, i1, i2, i3, i4;

        r0 := @parameter0: android.graphics.Paint$FontMetricsInt;

        r1 := @parameter1: android.text.TextPaint;

        i0 = r0.<android.graphics.Paint$FontMetricsInt: int top>;

        i1 = r0.<android.graphics.Paint$FontMetricsInt: int ascent>;

        i2 = r0.<android.graphics.Paint$FontMetricsInt: int descent>;

        i3 = r0.<android.graphics.Paint$FontMetricsInt: int bottom>;

        i4 = r0.<android.graphics.Paint$FontMetricsInt: int leading>;

        virtualinvoke r1.<android.text.TextPaint: int getFontMetricsInt(android.graphics.Paint$FontMetricsInt)>(r0);

        staticinvoke <android.text.TextLine: void updateMetrics(android.graphics.Paint$FontMetricsInt,int,int,int,int,int)>(r0, i0, i1, i2, i3, i4);

        return;
    }

    private void extractDecorationInfo(android.text.TextPaint, android.text.TextLine$DecorationInfo)
    {
        android.text.TextLine r0;
        android.text.TextPaint r1;
        android.text.TextLine$DecorationInfo r2;
        boolean $z0, $z1, $z2, $z3;
        int $i0;
        float $f0;

        r0 := @this: android.text.TextLine;

        r1 := @parameter0: android.text.TextPaint;

        r2 := @parameter1: android.text.TextLine$DecorationInfo;

        $z0 = virtualinvoke r1.<android.text.TextPaint: boolean isStrikeThruText()>();

        r2.<android.text.TextLine$DecorationInfo: boolean isStrikeThruText> = $z0;

        $z1 = r2.<android.text.TextLine$DecorationInfo: boolean isStrikeThruText>;

        if $z1 == 0 goto label1;

        virtualinvoke r1.<android.text.TextPaint: void setStrikeThruText(boolean)>(0);

     label1:
        $z2 = virtualinvoke r1.<android.text.TextPaint: boolean isUnderlineText()>();

        r2.<android.text.TextLine$DecorationInfo: boolean isUnderlineText> = $z2;

        $z3 = r2.<android.text.TextLine$DecorationInfo: boolean isUnderlineText>;

        if $z3 == 0 goto label2;

        virtualinvoke r1.<android.text.TextPaint: void setUnderlineText(boolean)>(0);

     label2:
        $i0 = r1.<android.text.TextPaint: int underlineColor>;

        r2.<android.text.TextLine$DecorationInfo: int underlineColor> = $i0;

        $f0 = r1.<android.text.TextPaint: float underlineThickness>;

        r2.<android.text.TextLine$DecorationInfo: float underlineThickness> = $f0;

        virtualinvoke r1.<android.text.TextPaint: void setUnderlineText(int,float)>(0, 0.0F);

        return;
    }

    private int getOffsetBeforeAfter(int, int, int, boolean, int, boolean)
    {
        android.text.TextLine r0;
        boolean z0, z1, $z2, $z3, $z4;
        int i0, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, i26, i27, i28, i29, i30, i31, i32, i33, $i34, $i35, $i36, i37, i38, i39, i42;
        android.text.TextPaint r1, $r6;
        android.text.style.MetricAffectingSpan[] r2, $r11;
        android.text.style.MetricAffectingSpan r3;
        java.lang.CharSequence $r4, $r5, r16;
        android.text.Spanned $r7, $r8, $r10, $r14;
        java.lang.Object[] $r9, $r12;
        char[] $r13;
        float $f0;
        android.text.style.ReplacementSpan r15;
        byte b41;

        r0 := @this: android.text.TextLine;

        i26 := @parameter0: int;

        i27 := @parameter1: int;

        i28 := @parameter2: int;

        z0 := @parameter3: boolean;

        i0 := @parameter4: int;

        z1 := @parameter5: boolean;

        if i26 < 0 goto label20;

        if z1 == 0 goto label01;

        i29 = r0.<android.text.TextLine: int mLen>;

        goto label02;

     label01:
        i29 = 0;

     label02:
        if i0 != i29 goto label03;

        goto label20;

     label03:
        r1 = r0.<android.text.TextLine: android.text.TextPaint mWorkPaint>;

        $r6 = r0.<android.text.TextLine: android.text.TextPaint mPaint>;

        virtualinvoke r1.<android.text.TextPaint: void set(android.text.TextPaint)>($r6);

        $z2 = r0.<android.text.TextLine: boolean mIsJustifying>;

        if $z2 == 0 goto label04;

        $f0 = r0.<android.text.TextLine: float mAddedWidthForJustify>;

        virtualinvoke r1.<android.text.TextPaint: void setWordSpacing(float)>($f0);

     label04:
        i30 = i27;

        $r7 = r0.<android.text.TextLine: android.text.Spanned mSpanned>;

        if $r7 != null goto label05;

        i31 = i27;

        i32 = i28;

        goto label15;

     label05:
        if z1 == 0 goto label06;

        i33 = i0 + 1;

        goto label07;

     label06:
        i33 = i0;

     label07:
        i2 = r0.<android.text.TextLine: int mStart>;

     label08:
        $r14 = r0.<android.text.TextLine: android.text.Spanned mSpanned>;

        $i34 = r0.<android.text.TextLine: int mStart>;

        $i35 = $i34 + i30;

        $i36 = i2 + i28;

        i37 = interfaceinvoke $r14.<android.text.Spanned: int nextSpanTransition(int,int,java.lang.Class)>($i35, $i36, class "Landroid/text/style/MetricAffectingSpan;");

        i3 = r0.<android.text.TextLine: int mStart>;

        i38 = i37 - i3;

        if i38 < i33 goto label19;

        $r8 = r0.<android.text.TextLine: android.text.Spanned mSpanned>;

        $i15 = i3 + i30;

        $i14 = i3 + i38;

        $r9 = interfaceinvoke $r8.<android.text.Spanned: java.lang.Object[] getSpans(int,int,java.lang.Class)>($i15, $i14, class "Landroid/text/style/MetricAffectingSpan;");

        $r11 = (android.text.style.MetricAffectingSpan[]) $r9;

        $r10 = r0.<android.text.TextLine: android.text.Spanned mSpanned>;

        $r12 = staticinvoke <android.text.TextUtils: java.lang.Object[] removeEmptySpans(java.lang.Object[],android.text.Spanned,java.lang.Class)>($r11, $r10, class "Landroid/text/style/MetricAffectingSpan;");

        r2 = (android.text.style.MetricAffectingSpan[]) $r12;

        $i16 = lengthof r2;

        if $i16 <= 0 goto label14;

        r15 = null;

        i39 = 0;

     label09:
        $i25 = lengthof r2;

        if i39 >= $i25 goto label12;

        r3 = r2[i39];

        $z4 = r3 instanceof android.text.style.ReplacementSpan;

        if $z4 == 0 goto label10;

        r15 = (android.text.style.ReplacementSpan) r3;

        goto label11;

     label10:
        virtualinvoke r3.<android.text.style.MetricAffectingSpan: void updateMeasureState(android.text.TextPaint)>(r1);

     label11:
        i39 = i39 + 1;

        goto label09;

     label12:
        if r15 == null goto label14;

        if z1 == 0 goto label13;

        i30 = i38;

        goto label13;

     label13:
        return i30;

     label14:
        i32 = i38;

        i31 = i30;

     label15:
        if z1 == 0 goto label16;

        b41 = 0;

        goto label17;

     label16:
        b41 = 2;

     label17:
        $z3 = r0.<android.text.TextLine: boolean mCharsValid>;

        if $z3 == 0 goto label18;

        $r13 = r0.<android.text.TextLine: char[] mChars>;

        $i23 = i32 - i31;

        $i24 = virtualinvoke r1.<android.text.TextPaint: int getTextRunCursor(char[],int,int,boolean,int,int)>($r13, i31, $i23, z0, i0, b41);

        return $i24;

     label18:
        r16 = r0.<android.text.TextLine: java.lang.CharSequence mText>;

        i42 = r0.<android.text.TextLine: int mStart>;

        $i19 = i42 + i31;

        $i18 = i42 + i32;

        $i17 = i42 + i0;

        $i20 = virtualinvoke r1.<android.text.TextPaint: int getTextRunCursor(java.lang.CharSequence,int,int,boolean,int,int)>(r16, $i19, $i18, z0, $i17, b41);

        $i21 = r0.<android.text.TextLine: int mStart>;

        $i22 = $i20 - $i21;

        return $i22;

     label19:
        i30 = i38;

        goto label08;

     label20:
        if z1 == 0 goto label21;

        $r5 = r0.<android.text.TextLine: java.lang.CharSequence mText>;

        $i9 = r0.<android.text.TextLine: int mStart>;

        $i10 = $i9 + i0;

        $i11 = staticinvoke <android.text.TextUtils: int getOffsetAfter(java.lang.CharSequence,int)>($r5, $i10);

        $i12 = r0.<android.text.TextLine: int mStart>;

        $i13 = $i11 - $i12;

        return $i13;

     label21:
        $r4 = r0.<android.text.TextLine: java.lang.CharSequence mText>;

        $i4 = r0.<android.text.TextLine: int mStart>;

        $i5 = $i4 + i0;

        $i6 = staticinvoke <android.text.TextUtils: int getOffsetBefore(java.lang.CharSequence,int)>($r4, $i5);

        $i7 = r0.<android.text.TextLine: int mStart>;

        $i8 = $i6 - $i7;

        return $i8;
    }

    private float getRunAdvance(android.text.TextPaint, int, int, int, int, boolean, int)
    {
        android.text.TextLine r0;
        android.text.TextPaint r1;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        boolean z0, $z1;
        android.text.PrecomputedText r2;
        float $f0, $f1, $f2;
        java.lang.CharSequence $r3;
        char[] $r4;

        r0 := @this: android.text.TextLine;

        r1 := @parameter0: android.text.TextPaint;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        z0 := @parameter5: boolean;

        i4 := @parameter6: int;

        $z1 = r0.<android.text.TextLine: boolean mCharsValid>;

        if $z1 == 0 goto label1;

        $r4 = r0.<android.text.TextLine: char[] mChars>;

        $f2 = virtualinvoke r1.<android.text.TextPaint: float getRunAdvance(char[],int,int,int,int,boolean,int)>($r4, i0, i1, i2, i3, z0, i4);

        return $f2;

     label1:
        i5 = r0.<android.text.TextLine: int mStart>;

        r2 = r0.<android.text.TextLine: android.text.PrecomputedText mComputed>;

        if r2 != null goto label2;

        $r3 = r0.<android.text.TextLine: java.lang.CharSequence mText>;

        $i12 = i5 + i0;

        $i11 = i5 + i1;

        $i10 = i5 + i2;

        $i9 = i5 + i3;

        $i8 = i5 + i4;

        $f1 = virtualinvoke r1.<android.text.TextPaint: float getRunAdvance(java.lang.CharSequence,int,int,int,int,boolean,int)>($r3, $i12, $i11, $i10, $i9, z0, $i8);

        return $f1;

     label2:
        $i7 = i0 + i5;

        $i6 = i1 + i5;

        $f0 = virtualinvoke r2.<android.text.PrecomputedText: float getWidth(int,int)>($i7, $i6);

        return $f0;
    }

    private float handleReplacement(android.text.style.ReplacementSpan, android.text.TextPaint, int, int, boolean, android.graphics.Canvas, float, int, int, int, android.graphics.Paint$FontMetricsInt, boolean)
    {
        android.text.TextLine r0;
        android.text.style.ReplacementSpan r1;
        android.text.TextPaint r2;
        boolean z0, z1, z2;
        android.graphics.Canvas r3;
        int i0, i1, i2, i3, i4, i5, $i6, i7, i8, i9, i10, i11, i12, i13, i14, i15;
        android.graphics.Paint$FontMetricsInt r4;
        java.lang.CharSequence $r5, $r6;
        float f0, f2, f3;

        r0 := @this: android.text.TextLine;

        r1 := @parameter0: android.text.style.ReplacementSpan;

        r2 := @parameter1: android.text.TextPaint;

        i7 := @parameter2: int;

        i8 := @parameter3: int;

        z0 := @parameter4: boolean;

        r3 := @parameter5: android.graphics.Canvas;

        f0 := @parameter6: float;

        i0 := @parameter7: int;

        i1 := @parameter8: int;

        i2 := @parameter9: int;

        r4 := @parameter10: android.graphics.Paint$FontMetricsInt;

        z1 := @parameter11: boolean;

        i9 = r0.<android.text.TextLine: int mStart>;

        i3 = i9 + i7;

        i4 = i9 + i8;

        if z1 != 0 goto label02;

        f2 = 0.0F;

        if r3 == null goto label01;

        f2 = 0.0F;

        if z0 == 0 goto label01;

        goto label02;

     label01:
        goto label07;

     label02:
        if r4 == null goto label03;

        z2 = 1;

        goto label04;

     label03:
        z2 = 0;

     label04:
        if z2 == 0 goto label05;

        i10 = r4.<android.graphics.Paint$FontMetricsInt: int top>;

        i11 = r4.<android.graphics.Paint$FontMetricsInt: int ascent>;

        i12 = r4.<android.graphics.Paint$FontMetricsInt: int descent>;

        i13 = r4.<android.graphics.Paint$FontMetricsInt: int bottom>;

        i5 = r4.<android.graphics.Paint$FontMetricsInt: int leading>;

        i14 = i10;

        i15 = i5;

        goto label06;

     label05:
        i14 = 0;

        i11 = 0;

        i12 = 0;

        i13 = 0;

        i15 = 0;

     label06:
        $r5 = r0.<android.text.TextLine: java.lang.CharSequence mText>;

        $i6 = virtualinvoke r1.<android.text.style.ReplacementSpan: int getSize(android.graphics.Paint,java.lang.CharSequence,int,int,android.graphics.Paint$FontMetricsInt)>(r2, $r5, i3, i4, r4);

        f3 = (float) $i6;

        f2 = f3;

        if z2 == 0 goto label01;

        staticinvoke <android.text.TextLine: void updateMetrics(android.graphics.Paint$FontMetricsInt,int,int,int,int,int)>(r4, i14, i11, i12, i13, i15);

        f2 = f3;

        goto label01;

     label07:
        if r3 == null goto label09;

        if z0 == 0 goto label08;

        f0 = f0 - f2;

        goto label08;

     label08:
        $r6 = r0.<android.text.TextLine: java.lang.CharSequence mText>;

        virtualinvoke r1.<android.text.style.ReplacementSpan: void draw(android.graphics.Canvas,java.lang.CharSequence,int,int,float,int,int,int,android.graphics.Paint)>(r3, $r6, i3, i4, f0, i0, i1, i2, r2);

        goto label09;

     label09:
        if z0 == 0 goto label10;

        f2 = neg f2;

        goto label10;

     label10:
        return f2;
    }

    private float handleRun(int, int, int, boolean, android.graphics.Canvas, float, int, int, int, android.graphics.Paint$FontMetricsInt, boolean)
    {
        android.text.TextLine r0, r61;
        int i0, i1, i2, i3, i4, i5, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, i53, i54, i55, i56, i57, i58, i59, i60, i62, i66, i67, i68, i69, i70, i71, $i72, $i75;
        boolean z0, z1, $z2, z4, z5, $z6, z7, z8, $z9, z10;
        float f0, $f1, $f2, f3, $f4, $f5, $f6;
        android.graphics.Paint$FontMetricsInt r1;
        android.text.TextPaint r2, $r14, $r16, $r18, $r19, $r20, $r23, $r24, $r41, $r43, r45, r50, r51;
        java.lang.StringBuilder $r3;
        java.lang.IndexOutOfBoundsException $r11;
        java.lang.String $r12;
        android.text.SpanSet $r13, $r15, $r21, $r25, $r27, $r29, $r33, $r35, $r37, $r39, $r42, r47, r48, r52, $r55, r63;
        java.util.ArrayList $r17, $r22, $r64, $r65, $r67;
        int[] $r26, $r28, $r34, $r36, $r38, $r40;
        java.lang.Object[] $r30, $r56;
        android.text.style.CharacterStyle[] $r31;
        android.text.style.CharacterStyle $r32;
        android.graphics.Canvas r44;
        android.text.Spanned r46, r49;
        android.text.style.ReplacementSpan r53, r54, r59;
        android.text.style.MetricAffectingSpan[] $r57;
        android.text.style.MetricAffectingSpan r58;
        android.text.TextLine$DecorationInfo r62, r66;

        r0 := @this: android.text.TextLine;

        i53 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        r44 := @parameter4: android.graphics.Canvas;

        f0 := @parameter5: float;

        i2 := @parameter6: int;

        i3 := @parameter7: int;

        i4 := @parameter8: int;

        r1 := @parameter9: android.graphics.Paint$FontMetricsInt;

        z1 := @parameter10: boolean;

        if i0 < i53 goto label39;

        if i0 > i1 goto label39;

        if i53 != i0 goto label02;

        r45 = r0.<android.text.TextLine: android.text.TextPaint mWorkPaint>;

        $r43 = r0.<android.text.TextLine: android.text.TextPaint mPaint>;

        virtualinvoke r45.<android.text.TextPaint: void set(android.text.TextPaint)>($r43);

        if r1 == null goto label01;

        staticinvoke <android.text.TextLine: void expandMetricsFromPaint(android.graphics.Paint$FontMetricsInt,android.text.TextPaint)>(r1, r45);

     label01:
        return 0.0F;

     label02:
        r46 = r0.<android.text.TextLine: android.text.Spanned mSpanned>;

        if r46 != null goto label03;

        z4 = 0;

        goto label06;

     label03:
        r47 = r0.<android.text.TextLine: android.text.SpanSet mMetricAffectingSpanSpanSet>;

        i54 = r0.<android.text.TextLine: int mStart>;

        $i9 = i54 + i53;

        $i8 = i54 + i1;

        virtualinvoke r47.<android.text.SpanSet: void init(android.text.Spanned,int,int)>(r46, $i9, $i8);

        r48 = r0.<android.text.TextLine: android.text.SpanSet mCharacterStyleSpanSet>;

        r49 = r0.<android.text.TextLine: android.text.Spanned mSpanned>;

        i55 = r0.<android.text.TextLine: int mStart>;

        $i11 = i55 + i53;

        $i10 = i55 + i1;

        virtualinvoke r48.<android.text.SpanSet: void init(android.text.Spanned,int,int)>(r49, $i11, $i10);

        $r13 = r0.<android.text.TextLine: android.text.SpanSet mMetricAffectingSpanSpanSet>;

        $i12 = $r13.<android.text.SpanSet: int numberOfSpans>;

        if $i12 != 0 goto label05;

        $r42 = r0.<android.text.TextLine: android.text.SpanSet mCharacterStyleSpanSet>;

        $i52 = $r42.<android.text.SpanSet: int numberOfSpans>;

        if $i52 == 0 goto label04;

        goto label05;

     label04:
        z4 = 0;

        goto label06;

     label05:
        z4 = 1;

     label06:
        if z4 != 0 goto label07;

        r50 = r0.<android.text.TextLine: android.text.TextPaint mWorkPaint>;

        $r41 = r0.<android.text.TextLine: android.text.TextPaint mPaint>;

        virtualinvoke r50.<android.text.TextPaint: void set(android.text.TextPaint)>($r41);

        $i48 = virtualinvoke r50.<android.text.TextPaint: int getStartHyphenEdit()>();

        $i49 = specialinvoke r0.<android.text.TextLine: int adjustStartHyphenEdit(int,int)>(i53, $i48);

        virtualinvoke r50.<android.text.TextPaint: void setStartHyphenEdit(int)>($i49);

        $i50 = virtualinvoke r50.<android.text.TextPaint: int getEndHyphenEdit()>();

        $i51 = specialinvoke r0.<android.text.TextLine: int adjustEndHyphenEdit(int,int)>(i1, $i50);

        virtualinvoke r50.<android.text.TextPaint: void setEndHyphenEdit(int)>($i51);

        $f2 = specialinvoke r0.<android.text.TextLine: float handleText(android.text.TextPaint,int,int,int,int,boolean,android.graphics.Canvas,float,int,int,int,android.graphics.Paint$FontMetricsInt,boolean,int,java.util.ArrayList)>(r50, i53, i1, i53, i1, z0, r44, f0, i2, i3, i4, r1, z1, i0, null);

        return $f2;

     label07:
        f3 = f0;

     label08:
        if i53 >= i0 goto label38;

        r51 = r0.<android.text.TextLine: android.text.TextPaint mWorkPaint>;

        $r14 = r0.<android.text.TextLine: android.text.TextPaint mPaint>;

        virtualinvoke r51.<android.text.TextPaint: void set(android.text.TextPaint)>($r14);

        r52 = r0.<android.text.TextLine: android.text.SpanSet mMetricAffectingSpanSpanSet>;

        i56 = r0.<android.text.TextLine: int mStart>;

        $i14 = i56 + i53;

        $i13 = i56 + i1;

        $i15 = virtualinvoke r52.<android.text.SpanSet: int getNextTransition(int,int)>($i14, $i13);

        $i16 = r0.<android.text.TextLine: int mStart>;

        i5 = $i15 - $i16;

        i57 = staticinvoke <java.lang.Math: int min(int,int)>(i5, i0);

        i58 = 0;

        r53 = null;

     label09:
        $r15 = r0.<android.text.TextLine: android.text.SpanSet mMetricAffectingSpanSpanSet>;

        $i17 = $r15.<android.text.SpanSet: int numberOfSpans>;

        if i58 >= $i17 goto label17;

        r54 = r53;

        $r33 = r0.<android.text.TextLine: android.text.SpanSet mMetricAffectingSpanSpanSet>;

        $r34 = $r33.<android.text.SpanSet: int[] spanStarts>;

        $i39 = $r34[i58];

        $i37 = r0.<android.text.TextLine: int mStart>;

        $i38 = $i37 + i57;

        if $i39 >= $i38 goto label16;

        $r35 = r0.<android.text.TextLine: android.text.SpanSet mMetricAffectingSpanSpanSet>;

        $r36 = $r35.<android.text.SpanSet: int[] spanEnds>;

        i59 = $r36[i58];

        i60 = r0.<android.text.TextLine: int mStart>;

        $i40 = i60 + i53;

        if i59 > $i40 goto label10;

        r54 = r53;

        goto label16;

     label10:
        $i41 = r0.<android.text.TextLine: int mEllipsisStart>;

        $i43 = i60 + $i41;

        $r37 = r0.<android.text.TextLine: android.text.SpanSet mMetricAffectingSpanSpanSet>;

        $r38 = $r37.<android.text.SpanSet: int[] spanStarts>;

        $i42 = $r38[i58];

        if $i43 > $i42 goto label11;

        $r39 = r0.<android.text.TextLine: android.text.SpanSet mMetricAffectingSpanSpanSet>;

        $r40 = $r39.<android.text.SpanSet: int[] spanEnds>;

        $i47 = $r40[i58];

        $i45 = r0.<android.text.TextLine: int mStart>;

        $i44 = r0.<android.text.TextLine: int mEllipsisEnd>;

        $i46 = $i45 + $i44;

        if $i47 > $i46 goto label11;

        z5 = 1;

        goto label12;

     label11:
        z5 = 0;

     label12:
        $r55 = r0.<android.text.TextLine: android.text.SpanSet mMetricAffectingSpanSpanSet>;

        $r56 = $r55.<android.text.SpanSet: java.lang.Object[] spans>;

        $r57 = (android.text.style.MetricAffectingSpan[]) $r56;

        r58 = $r57[i58];

        $z6 = r58 instanceof android.text.style.ReplacementSpan;

        if $z6 == 0 goto label15;

        if z5 != 0 goto label13;

        r59 = (android.text.style.ReplacementSpan) r58;

        goto label14;

     label13:
        r59 = null;

     label14:
        r54 = r59;

        goto label16;

     label15:
        virtualinvoke r58.<android.text.style.MetricAffectingSpan: void updateDrawState(android.text.TextPaint)>(r51);

        r54 = r53;

     label16:
        i58 = i58 + 1;

        r53 = r54;

        goto label09;

     label17:
        if r53 == null goto label21;

        if z1 != 0 goto label19;

        if i57 >= i0 goto label18;

        goto label19;

     label18:
        z7 = 0;

        goto label20;

     label19:
        z7 = 1;

     label20:
        $f4 = specialinvoke r0.<android.text.TextLine: float handleReplacement(android.text.style.ReplacementSpan,android.text.TextPaint,int,int,boolean,android.graphics.Canvas,float,int,int,int,android.graphics.Paint$FontMetricsInt,boolean)>(r53, r51, i53, i57, z0, r44, f3, i2, i3, i4, r1, z7);

        f3 = f3 + $f4;

        goto label37;

     label21:
        r61 = r0;

        r2 = r0.<android.text.TextLine: android.text.TextPaint mActivePaint>;

        $r16 = r0.<android.text.TextLine: android.text.TextPaint mPaint>;

        virtualinvoke r2.<android.text.TextPaint: void set(android.text.TextPaint)>($r16);

        r62 = r0.<android.text.TextLine: android.text.TextLine$DecorationInfo mDecorationInfo>;

        $r17 = r0.<android.text.TextLine: java.util.ArrayList mDecorations>;

        virtualinvoke $r17.<java.util.ArrayList: void clear()>();

        i62 = i57;

        i66 = i53;

        i67 = i53;

        i68 = i53;

     label22:
        if i68 >= i57 goto label33;

        r63 = r61.<android.text.TextLine: android.text.SpanSet mCharacterStyleSpanSet>;

        i69 = r61.<android.text.TextLine: int mStart>;

        $i23 = i69 + i68;

        $i22 = i69 + i5;

        $i24 = virtualinvoke r63.<android.text.SpanSet: int getNextTransition(int,int)>($i23, $i22);

        $i25 = r61.<android.text.TextLine: int mStart>;

        i70 = $i24 - $i25;

        i7 = staticinvoke <java.lang.Math: int min(int,int)>(i70, i57);

        $r20 = r61.<android.text.TextLine: android.text.TextPaint mPaint>;

        virtualinvoke r51.<android.text.TextPaint: void set(android.text.TextPaint)>($r20);

        i71 = 0;

     label23:
        $r21 = r61.<android.text.TextLine: android.text.SpanSet mCharacterStyleSpanSet>;

        $i26 = $r21.<android.text.SpanSet: int numberOfSpans>;

        if i71 >= $i26 goto label26;

        $r25 = r61.<android.text.TextLine: android.text.SpanSet mCharacterStyleSpanSet>;

        $r26 = $r25.<android.text.SpanSet: int[] spanStarts>;

        $i33 = $r26[i71];

        $i31 = r61.<android.text.TextLine: int mStart>;

        $i32 = $i31 + i7;

        if $i33 >= $i32 goto label25;

        $r27 = r61.<android.text.TextLine: android.text.SpanSet mCharacterStyleSpanSet>;

        $r28 = $r27.<android.text.SpanSet: int[] spanEnds>;

        $i36 = $r28[i71];

        $i34 = r61.<android.text.TextLine: int mStart>;

        $i35 = $i34 + i68;

        if $i36 > $i35 goto label24;

        goto label25;

     label24:
        $r29 = r61.<android.text.TextLine: android.text.SpanSet mCharacterStyleSpanSet>;

        $r30 = $r29.<android.text.SpanSet: java.lang.Object[] spans>;

        $r31 = (android.text.style.CharacterStyle[]) $r30;

        $r32 = $r31[i71];

        virtualinvoke $r32.<android.text.style.CharacterStyle: void updateDrawState(android.text.TextPaint)>(r51);

     label25:
        i71 = i71 + 1;

        goto label23;

     label26:
        specialinvoke r61.<android.text.TextLine: void extractDecorationInfo(android.text.TextPaint,android.text.TextLine$DecorationInfo)>(r51, r62);

        if i68 != i66 goto label27;

        virtualinvoke r2.<android.text.TextPaint: void set(android.text.TextPaint)>(r51);

        goto label31;

     label27:
        $z2 = staticinvoke <android.text.TextLine: boolean equalAttributes(android.text.TextPaint,android.text.TextPaint)>(r51, r2);

        if $z2 != 0 goto label31;

        $r23 = r61.<android.text.TextLine: android.text.TextPaint mPaint>;

        $i27 = virtualinvoke $r23.<android.text.TextPaint: int getStartHyphenEdit()>();

        $i28 = specialinvoke r61.<android.text.TextLine: int adjustStartHyphenEdit(int,int)>(i67, $i27);

        virtualinvoke r2.<android.text.TextPaint: void setStartHyphenEdit(int)>($i28);

        $r24 = r61.<android.text.TextLine: android.text.TextPaint mPaint>;

        $i29 = virtualinvoke $r24.<android.text.TextPaint: int getEndHyphenEdit()>();

        $i30 = specialinvoke r61.<android.text.TextLine: int adjustEndHyphenEdit(int,int)>(i62, $i29);

        virtualinvoke r2.<android.text.TextPaint: void setEndHyphenEdit(int)>($i30);

        if z1 != 0 goto label29;

        if i62 >= i0 goto label28;

        goto label29;

     label28:
        z8 = 0;

        goto label30;

     label29:
        z8 = 1;

     label30:
        $i72 = staticinvoke <java.lang.Math: int min(int,int)>(i62, i57);

        $r64 = r61.<android.text.TextLine: java.util.ArrayList mDecorations>;

        $f5 = specialinvoke r0.<android.text.TextLine: float handleText(android.text.TextPaint,int,int,int,int,boolean,android.graphics.Canvas,float,int,int,int,android.graphics.Paint$FontMetricsInt,boolean,int,java.util.ArrayList)>(r2, i67, i62, i66, i5, z0, r44, f3, i2, i3, i4, r1, z8, $i72, $r64);

        f3 = f3 + $f5;

        i67 = i68;

        virtualinvoke r2.<android.text.TextPaint: void set(android.text.TextPaint)>(r51);

        r61 = r0;

        $r65 = r0.<android.text.TextLine: java.util.ArrayList mDecorations>;

        virtualinvoke $r65.<java.util.ArrayList: void clear()>();

        goto label31;

     label31:
        $z9 = virtualinvoke r62.<android.text.TextLine$DecorationInfo: boolean hasDecoration()>();

        if $z9 == 0 goto label32;

        r66 = virtualinvoke r62.<android.text.TextLine$DecorationInfo: android.text.TextLine$DecorationInfo copyInfo()>();

        r66.<android.text.TextLine$DecorationInfo: int start> = i68;

        r66.<android.text.TextLine$DecorationInfo: int end> = i70;

        $r22 = r61.<android.text.TextLine: java.util.ArrayList mDecorations>;

        virtualinvoke $r22.<java.util.ArrayList: boolean add(java.lang.Object)>(r66);

        goto label32;

     label32:
        i68 = i70;

        i62 = i70;

        goto label22;

     label33:
        $r18 = r61.<android.text.TextLine: android.text.TextPaint mPaint>;

        $i18 = virtualinvoke $r18.<android.text.TextPaint: int getStartHyphenEdit()>();

        $i19 = specialinvoke r61.<android.text.TextLine: int adjustStartHyphenEdit(int,int)>(i67, $i18);

        virtualinvoke r2.<android.text.TextPaint: void setStartHyphenEdit(int)>($i19);

        $r19 = r61.<android.text.TextLine: android.text.TextPaint mPaint>;

        $i20 = virtualinvoke $r19.<android.text.TextPaint: int getEndHyphenEdit()>();

        $i21 = specialinvoke r61.<android.text.TextLine: int adjustEndHyphenEdit(int,int)>(i62, $i20);

        virtualinvoke r2.<android.text.TextPaint: void setEndHyphenEdit(int)>($i21);

        if z1 != 0 goto label35;

        if i62 >= i0 goto label34;

        goto label35;

     label34:
        z10 = 0;

        goto label36;

     label35:
        z10 = 1;

     label36:
        $i75 = staticinvoke <java.lang.Math: int min(int,int)>(i62, i57);

        $r67 = r61.<android.text.TextLine: java.util.ArrayList mDecorations>;

        $f6 = specialinvoke r0.<android.text.TextLine: float handleText(android.text.TextPaint,int,int,int,int,boolean,android.graphics.Canvas,float,int,int,int,android.graphics.Paint$FontMetricsInt,boolean,int,java.util.ArrayList)>(r2, i67, i62, i66, i5, z0, r44, f3, i2, i3, i4, r1, z10, $i75, $r67);

        f3 = f3 + $f6;

     label37:
        i53 = i5;

        goto label08;

     label38:
        $f1 = f3 - f0;

        return $f1;

     label39:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("measureLimit (");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is out of start (");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i53);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") and limit (");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") bounds");

        $r11 = new java.lang.IndexOutOfBoundsException;

        $r12 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r12);

        throw $r11;
    }

    private float handleText(android.text.TextPaint, int, int, int, int, boolean, android.graphics.Canvas, float, int, int, int, android.graphics.Paint$FontMetricsInt, boolean, int, java.util.ArrayList)
    {
        android.text.TextLine r0;
        android.text.TextPaint r1;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, i18, i19, i20, i21, i22, i23, i24;
        boolean z0, z1, $z2, $z3, $z4;
        android.graphics.Canvas r2;
        java.util.ArrayList r3;
        java.lang.Object $r4;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, f12, f13, f14, f15, f16, f18, f19, f20, f21, f22, f23, f24;
        android.graphics.Paint$Style $r5, r7;
        android.graphics.Paint$FontMetricsInt r6;
        android.text.TextLine$DecorationInfo r8;

        r0 := @this: android.text.TextLine;

        r1 := @parameter0: android.text.TextPaint;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        z0 := @parameter5: boolean;

        r2 := @parameter6: android.graphics.Canvas;

        f12 := @parameter7: float;

        i17 := @parameter8: int;

        i4 := @parameter9: int;

        i18 := @parameter10: int;

        r6 := @parameter11: android.graphics.Paint$FontMetricsInt;

        z1 := @parameter12: boolean;

        i5 := @parameter13: int;

        r3 := @parameter14: java.util.ArrayList;

        $z2 = r0.<android.text.TextLine: boolean mIsJustifying>;

        if $z2 == 0 goto label01;

        $f11 = r0.<android.text.TextLine: float mAddedWidthForJustify>;

        virtualinvoke r1.<android.text.TextPaint: void setWordSpacing(float)>($f11);

     label01:
        if r6 == null goto label02;

        staticinvoke <android.text.TextLine: void expandMetricsFromPaint(android.graphics.Paint$FontMetricsInt,android.text.TextPaint)>(r6, r1);

     label02:
        if i1 != i0 goto label03;

        return 0.0F;

     label03:
        f13 = 0.0F;

        if r3 != null goto label04;

        i19 = 0;

        goto label05;

     label04:
        i19 = virtualinvoke r3.<java.util.ArrayList: int size()>();

     label05:
        if z1 != 0 goto label07;

        if r2 == null goto label06;

        $i16 = r1.<android.text.TextPaint: int bgColor>;

        if $i16 != 0 goto label07;

        if i19 != 0 goto label07;

        if z0 == 0 goto label06;

        goto label07;

     label06:
        goto label08;

     label07:
        f13 = specialinvoke r0.<android.text.TextLine: float getRunAdvance(android.text.TextPaint,int,int,int,int,boolean,int)>(r1, i0, i1, i2, i3, z0, i5);

     label08:
        if r2 == null goto label20;

        if z0 == 0 goto label09;

        f14 = f12 - f13;

        f15 = f12;

        f16 = f14;

        goto label10;

     label09:
        f15 = f12 + f13;

        f16 = f12;

     label10:
        $i6 = r1.<android.text.TextPaint: int bgColor>;

        if $i6 == 0 goto label11;

        i20 = virtualinvoke r1.<android.text.TextPaint: int getColor()>();

        r7 = virtualinvoke r1.<android.text.TextPaint: android.graphics.Paint$Style getStyle()>();

        $i15 = r1.<android.text.TextPaint: int bgColor>;

        virtualinvoke r1.<android.text.TextPaint: void setColor(int)>($i15);

        $r5 = <android.graphics.Paint$Style: android.graphics.Paint$Style FILL>;

        virtualinvoke r1.<android.text.TextPaint: void setStyle(android.graphics.Paint$Style)>($r5);

        $f10 = (float) i17;

        $f9 = (float) i18;

        virtualinvoke r2.<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>(f16, $f10, f15, $f9, r1);

        virtualinvoke r1.<android.text.TextPaint: void setStyle(android.graphics.Paint$Style)>(r7);

        virtualinvoke r1.<android.text.TextPaint: void setColor(int)>(i20);

     label11:
        $i7 = r1.<android.text.TextPaint: int baselineShift>;

        $i8 = i4 + $i7;

        specialinvoke r0.<android.text.TextLine: void drawTextRun(android.graphics.Canvas,android.text.TextPaint,int,int,int,int,boolean,float,int)>(r2, r1, i0, i1, i2, i3, z0, f16, $i8);

        if i19 == 0 goto label19;

        i21 = 0;

        i22 = i19;

     label12:
        if i21 >= i22 goto label18;

        $r4 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(i21);

        r8 = (android.text.TextLine$DecorationInfo) $r4;

        $i9 = r8.<android.text.TextLine$DecorationInfo: int start>;

        i23 = staticinvoke <java.lang.Math: int max(int,int)>($i9, i0);

        $i10 = r8.<android.text.TextLine$DecorationInfo: int end>;

        i24 = staticinvoke <java.lang.Math: int min(int,int)>($i10, i5);

        f18 = specialinvoke r0.<android.text.TextLine: float getRunAdvance(android.text.TextPaint,int,int,int,int,boolean,int)>(r1, i0, i1, i2, i3, z0, i23);

        f19 = specialinvoke r0.<android.text.TextLine: float getRunAdvance(android.text.TextPaint,int,int,int,int,boolean,int)>(r1, i0, i1, i2, i3, z0, i24);

        if z0 == 0 goto label13;

        f20 = f15 - f19;

        f21 = f15 - f18;

        goto label14;

     label13:
        f20 = f16 + f18;

        f21 = f16 + f19;

     label14:
        $i11 = r8.<android.text.TextLine$DecorationInfo: int underlineColor>;

        if $i11 == 0 goto label15;

        $i14 = r8.<android.text.TextLine$DecorationInfo: int underlineColor>;

        $f6 = virtualinvoke r1.<android.text.TextPaint: float getUnderlinePosition()>();

        $f8 = r8.<android.text.TextLine$DecorationInfo: float underlineThickness>;

        $f7 = (float) i4;

        staticinvoke <android.text.TextLine: void drawStroke(android.text.TextPaint,android.graphics.Canvas,int,float,float,float,float,float)>(r1, r2, $i14, $f6, $f8, f20, f21, $f7);

     label15:
        $z3 = r8.<android.text.TextLine$DecorationInfo: boolean isUnderlineText>;

        if $z3 == 0 goto label16;

        $f3 = virtualinvoke r1.<android.text.TextPaint: float getUnderlineThickness()>();

        f22 = staticinvoke <java.lang.Math: float max(float,float)>($f3, 1.0F);

        $i13 = virtualinvoke r1.<android.text.TextPaint: int getColor()>();

        $f4 = virtualinvoke r1.<android.text.TextPaint: float getUnderlinePosition()>();

        $f5 = (float) i4;

        staticinvoke <android.text.TextLine: void drawStroke(android.text.TextPaint,android.graphics.Canvas,int,float,float,float,float,float)>(r1, r2, $i13, $f4, f22, f20, f21, $f5);

        goto label16;

     label16:
        $z4 = r8.<android.text.TextLine$DecorationInfo: boolean isStrikeThruText>;

        if $z4 == 0 goto label17;

        $f0 = virtualinvoke r1.<android.text.TextPaint: float getStrikeThruThickness()>();

        f23 = staticinvoke <java.lang.Math: float max(float,float)>($f0, 1.0F);

        $i12 = virtualinvoke r1.<android.text.TextPaint: int getColor()>();

        $f1 = virtualinvoke r1.<android.text.TextPaint: float getStrikeThruPosition()>();

        $f2 = (float) i4;

        staticinvoke <android.text.TextLine: void drawStroke(android.text.TextPaint,android.graphics.Canvas,int,float,float,float,float,float)>(r1, r2, $i12, $f1, f23, f20, f21, $f2);

     label17:
        i21 = i21 + 1;

        goto label12;

     label18:
        goto label20;

     label19:
        goto label20;

     label20:
        f24 = f13;

        if z0 == 0 goto label21;

        f24 = neg f13;

        goto label21;

     label21:
        return f24;
    }

    public static boolean isLineEndSpace(char)
    {
        char c0;
        boolean z0;

        c0 := @parameter0: char;

        if c0 == 32 goto label3;

        if c0 == 9 goto label3;

        if c0 == 5760 goto label3;

        if 8192 > c0 goto label1;

        if c0 > 8202 goto label1;

        if c0 != 8199 goto label3;

     label1:
        if c0 == 8287 goto label3;

        if c0 != 12288 goto label2;

        goto label3;

     label2:
        z0 = 0;

        goto label4;

     label3:
        z0 = 1;

     label4:
        return z0;
    }

    private boolean isStretchableWhitespace(int)
    {
        android.text.TextLine r0;
        int i0;
        boolean z0;

        r0 := @this: android.text.TextLine;

        i0 := @parameter0: int;

        if i0 != 32 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private float measureRun(int, int, int, boolean, android.graphics.Paint$FontMetricsInt)
    {
        android.text.TextLine r0;
        int i0, i1, i2;
        boolean z0;
        android.graphics.Paint$FontMetricsInt r1;
        float $f0;

        r0 := @this: android.text.TextLine;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        z0 := @parameter3: boolean;

        r1 := @parameter4: android.graphics.Paint$FontMetricsInt;

        $f0 = specialinvoke r0.<android.text.TextLine: float handleRun(int,int,int,boolean,android.graphics.Canvas,float,int,int,int,android.graphics.Paint$FontMetricsInt,boolean)>(i0, i1, i2, z0, null, 0.0F, 0, 0, 0, r1, 1);

        return $f0;
    }

    public static android.text.TextLine obtain()
    {
        android.text.TextLine[] r0, $r1, $r3, $r5, $r6;
        int i0, i1;
        android.text.TextLine $r2, $r4, r8;
        java.lang.Throwable $r7;

        r0 = <android.text.TextLine: android.text.TextLine[] sCached>;

        entermonitor r0;

     label1:
        $r1 = <android.text.TextLine: android.text.TextLine[] sCached>;

        i1 = lengthof $r1;

     label2:
        i0 = i1 - 1;

        if i0 < 0 goto label5;

        i1 = i0;

     label3:
        $r3 = <android.text.TextLine: android.text.TextLine[] sCached>;

        $r4 = $r3[i0];

        if $r4 == null goto label2;

        $r5 = <android.text.TextLine: android.text.TextLine[] sCached>;

        r8 = $r5[i0];

        $r6 = <android.text.TextLine: android.text.TextLine[] sCached>;

        $r6[i0] = null;

        exitmonitor r0;

     label4:
        return r8;

     label5:
        exitmonitor r0;

     label6:
        $r2 = new android.text.TextLine;

        specialinvoke $r2.<android.text.TextLine: void <init>()>();

        return $r2;

     label7:
        $r7 := @caughtexception;

     label8:
        exitmonitor r0;

     label9:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public static android.text.TextLine recycle(android.text.TextLine)
    {
        android.text.TextLine[] r0, $r4, $r5, $r7;
        android.text.SpanSet $r1, $r2, $r3;
        int $i0, i1;
        android.text.TextLine $r6, r9;
        java.lang.Throwable $r8;

        r9 := @parameter0: android.text.TextLine;

        r9.<android.text.TextLine: java.lang.CharSequence mText> = null;

        r9.<android.text.TextLine: android.text.TextPaint mPaint> = null;

        r9.<android.text.TextLine: android.text.Layout$Directions mDirections> = null;

        r9.<android.text.TextLine: android.text.Spanned mSpanned> = null;

        r9.<android.text.TextLine: android.text.Layout$TabStops mTabs> = null;

        r9.<android.text.TextLine: char[] mChars> = null;

        r9.<android.text.TextLine: android.text.PrecomputedText mComputed> = null;

        $r1 = r9.<android.text.TextLine: android.text.SpanSet mMetricAffectingSpanSpanSet>;

        virtualinvoke $r1.<android.text.SpanSet: void recycle()>();

        $r2 = r9.<android.text.TextLine: android.text.SpanSet mCharacterStyleSpanSet>;

        virtualinvoke $r2.<android.text.SpanSet: void recycle()>();

        $r3 = r9.<android.text.TextLine: android.text.SpanSet mReplacementSpanSpanSet>;

        virtualinvoke $r3.<android.text.SpanSet: void recycle()>();

        r0 = <android.text.TextLine: android.text.TextLine[] sCached>;

        entermonitor r0;

        i1 = 0;

     label1:
        $r4 = <android.text.TextLine: android.text.TextLine[] sCached>;

        $i0 = lengthof $r4;

        if i1 >= $i0 goto label4;

        $r5 = <android.text.TextLine: android.text.TextLine[] sCached>;

        $r6 = $r5[i1];

        if $r6 != null goto label3;

        $r7 = <android.text.TextLine: android.text.TextLine[] sCached>;

        $r7[i1] = r9;

     label2:
        goto label4;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        exitmonitor r0;

     label5:
        return null;

     label6:
        $r8 := @caughtexception;

     label7:
        exitmonitor r0;

     label8:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    static void updateMetrics(android.graphics.Paint$FontMetricsInt, int, int, int, int, int)
    {
        android.graphics.Paint$FontMetricsInt r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;

        r0 := @parameter0: android.graphics.Paint$FontMetricsInt;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        $i5 = r0.<android.graphics.Paint$FontMetricsInt: int top>;

        $i6 = staticinvoke <java.lang.Math: int min(int,int)>($i5, i0);

        r0.<android.graphics.Paint$FontMetricsInt: int top> = $i6;

        $i7 = r0.<android.graphics.Paint$FontMetricsInt: int ascent>;

        $i8 = staticinvoke <java.lang.Math: int min(int,int)>($i7, i1);

        r0.<android.graphics.Paint$FontMetricsInt: int ascent> = $i8;

        $i9 = r0.<android.graphics.Paint$FontMetricsInt: int descent>;

        $i10 = staticinvoke <java.lang.Math: int max(int,int)>($i9, i2);

        r0.<android.graphics.Paint$FontMetricsInt: int descent> = $i10;

        $i11 = r0.<android.graphics.Paint$FontMetricsInt: int bottom>;

        $i12 = staticinvoke <java.lang.Math: int max(int,int)>($i11, i3);

        r0.<android.graphics.Paint$FontMetricsInt: int bottom> = $i12;

        $i13 = r0.<android.graphics.Paint$FontMetricsInt: int leading>;

        $i14 = staticinvoke <java.lang.Math: int max(int,int)>($i13, i4);

        r0.<android.graphics.Paint$FontMetricsInt: int leading> = $i14;

        return;
    }

    void draw(android.graphics.Canvas, float, int, int, int)
    {
        android.text.TextLine r0;
        android.graphics.Canvas r1;
        float f0, f1, $f2, $f3, $f4, $f5, f6, $f7, $f8;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, i13, i14, i15, i16;
        boolean z0, $z1, z2;
        android.text.Layout$Directions $r2, $r3, $r4, $r5;
        char $c12;

        r0 := @this: android.text.TextLine;

        r1 := @parameter0: android.graphics.Canvas;

        f0 := @parameter1: float;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        f6 = 0.0F;

        $r2 = r0.<android.text.TextLine: android.text.Layout$Directions mDirections>;

        i3 = virtualinvoke $r2.<android.text.Layout$Directions: int getRunCount()>();

        i13 = 0;

     label01:
        if i13 >= i3 goto label13;

        $r3 = r0.<android.text.TextLine: android.text.Layout$Directions mDirections>;

        i14 = virtualinvoke $r3.<android.text.Layout$Directions: int getRunStart(int)>(i13);

        $i6 = r0.<android.text.TextLine: int mLen>;

        if i14 <= $i6 goto label02;

        goto label13;

     label02:
        $r4 = r0.<android.text.TextLine: android.text.Layout$Directions mDirections>;

        $i7 = virtualinvoke $r4.<android.text.Layout$Directions: int getRunLength(int)>(i13);

        $i9 = $i7 + i14;

        $i8 = r0.<android.text.TextLine: int mLen>;

        i4 = staticinvoke <java.lang.Math: int min(int,int)>($i9, $i8);

        $r5 = r0.<android.text.TextLine: android.text.Layout$Directions mDirections>;

        z0 = virtualinvoke $r5.<android.text.Layout$Directions: boolean isRunRtl(int)>(i13);

        $z1 = r0.<android.text.TextLine: boolean mHasTabs>;

        if $z1 == 0 goto label03;

        i15 = i14;

        goto label04;

     label03:
        i15 = i4;

     label04:
        if i15 > i4 goto label12;

        if i15 == i4 goto label06;

        $c12 = specialinvoke r0.<android.text.TextLine: char charAt(int)>(i15);

        if $c12 != 9 goto label05;

        goto label06;

     label05:
        goto label11;

     label06:
        $i10 = i3 - 1;

        if i13 != $i10 goto label08;

        $i11 = r0.<android.text.TextLine: int mLen>;

        if i15 == $i11 goto label07;

        goto label08;

     label07:
        z2 = 0;

        goto label09;

     label08:
        z2 = 1;

     label09:
        i5 = i15;

        $f7 = f0 + f6;

        $f8 = specialinvoke r0.<android.text.TextLine: float drawRun(android.graphics.Canvas,int,int,boolean,float,int,int,int,boolean)>(r1, i14, i15, z0, $f7, i0, i1, i2, z2);

        f1 = f6 + $f8;

        f6 = f1;

        if i15 == i4 goto label10;

        i16 = r0.<android.text.TextLine: int mDir>;

        $f4 = (float) i16;

        $f2 = (float) i16;

        $f3 = $f2 * f1;

        $f5 = virtualinvoke r0.<android.text.TextLine: float nextTab(float)>($f3);

        f6 = $f4 * $f5;

     label10:
        i14 = i5 + 1;

     label11:
        i15 = i15 + 1;

        goto label04;

     label12:
        i13 = i13 + 1;

        goto label01;

     label13:
        return;
    }

    int getOffsetToLeftRightOf(int, boolean)
    {
        android.text.TextLine r0;
        boolean z0, z1, z2, z3, z4, z5, z6, z7;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i41, i42, $i45, i46, i47, i48, i49, i51, i52, i53, i54, i55, i56;
        int[] r1;
        android.text.Layout$Directions $r2;
        byte b50;

        r0 := @this: android.text.TextLine;

        i31 := @parameter0: int;

        z0 := @parameter1: boolean;

        i0 = r0.<android.text.TextLine: int mLen>;

        $i3 = r0.<android.text.TextLine: int mDir>;

        if $i3 != -1 goto label01;

        z1 = 1;

        goto label02;

     label01:
        z1 = 0;

     label02:
        $r2 = r0.<android.text.TextLine: android.text.Layout$Directions mDirections>;

        r1 = $r2.<android.text.Layout$Directions: int[] mDirections>;

        i32 = 0;

        i33 = i0;

        z2 = 0;

        if i31 != 0 goto label03;

        i34 = 0;

        i35 = -2;

        i36 = -1;

        goto label30;

     label03:
        if i31 != i0 goto label04;

        i35 = lengthof r1;

        i34 = 0;

        i36 = -1;

        goto label30;

     label04:
        i35 = 0;

     label05:
        $i4 = lengthof r1;

        if i35 >= $i4 goto label16;

        $i16 = r1[i35];

        i32 = 0 + $i16;

        if i31 < i32 goto label15;

        $i17 = i35 + 1;

        $i18 = r1[$i17];

        $i19 = $i18 & 67108863;

        i37 = $i19 + i32;

        i33 = i37;

        if i37 <= i0 goto label06;

        i33 = i0;

     label06:
        if i31 >= i33 goto label14;

        $i20 = i35 + 1;

        $i21 = r1[$i20];

        $i22 = $i21 >>> 26;

        i38 = $i22 & 63;

        if i31 != i32 goto label13;

        i1 = i31 - 1;

        i39 = 0;

     label07:
        $i23 = lengthof r1;

        if i39 >= $i23 goto label11;

        $i24 = r1[i39];

        i2 = $i24 + 0;

        if i1 < i2 goto label10;

        $i25 = i39 + 1;

        $i26 = r1[$i25];

        $i27 = $i26 & 67108863;

        i40 = i2 + $i27;

        i41 = i40;

        if i40 <= i0 goto label08;

        i41 = i0;

     label08:
        if i1 >= i41 goto label09;

        $i28 = i39 + 1;

        $i29 = r1[$i28];

        $i30 = $i29 >>> 26;

        i42 = $i30 & 63;

        if i42 >= i38 goto label10;

        i35 = i39;

        i33 = i41;

        z2 = 1;

        i34 = i42;

        i32 = i2;

        goto label12;

     label09:
        goto label10;

     label10:
        i39 = i39 + 2;

        goto label07;

     label11:
        i34 = i38;

     label12:
        goto label17;

     label13:
        i34 = i38;

        z2 = 0;

        goto label17;

     label14:
        goto label15;

     label15:
        i35 = i35 + 2;

        goto label05;

     label16:
        i34 = 0;

        z2 = 0;

     label17:
        $i45 = lengthof r1;

        if i35 == $i45 goto label29;

        $i15 = i34 & 1;

        if $i15 == 0 goto label18;

        z3 = 1;

        goto label19;

     label18:
        z3 = 0;

     label19:
        if z0 != z3 goto label20;

        z4 = 1;

        goto label21;

     label20:
        z4 = 0;

     label21:
        if z4 == 0 goto label22;

        i46 = i33;

        goto label23;

     label22:
        i46 = i32;

     label23:
        if i31 != i46 goto label25;

        if z4 == z2 goto label24;

        goto label25;

     label24:
        goto label29;

     label25:
        i47 = i35;

        i48 = specialinvoke r0.<android.text.TextLine: int getOffsetBeforeAfter(int,int,int,boolean,int,boolean)>(i35, i32, i33, z3, i31, z4);

        if z4 == 0 goto label26;

        i49 = i33;

        goto label27;

     label26:
        i49 = i32;

     label27:
        if i48 == i49 goto label28;

        return i48;

     label28:
        i36 = i48;

        i35 = i47;

        goto label30;

     label29:
        i36 = -1;

     label30:
        if z0 != z1 goto label31;

        z5 = 1;

        goto label32;

     label31:
        z5 = 0;

     label32:
        if z5 == 0 goto label33;

        b50 = 2;

        goto label34;

     label33:
        b50 = -2;

     label34:
        i51 = i35 + b50;

        if i51 < 0 goto label47;

        $i6 = lengthof r1;

        if i51 >= $i6 goto label47;

        $i7 = r1[i51];

        i52 = 0 + $i7;

        $i8 = i51 + 1;

        $i9 = r1[$i8];

        $i10 = $i9 & 67108863;

        i53 = i52 + $i10;

        if i53 <= i0 goto label35;

        i53 = i0;

        goto label35;

     label35:
        $i11 = i51 + 1;

        $i12 = r1[$i11];

        $i13 = $i12 >>> 26;

        i54 = $i13 & 63;

        $i14 = i54 & 1;

        if $i14 == 0 goto label36;

        z6 = 1;

        goto label37;

     label36:
        z6 = 0;

     label37:
        if z0 != z6 goto label38;

        z7 = 1;

        goto label39;

     label38:
        z7 = 0;

     label39:
        if i36 != -1 goto label44;

        if z7 == 0 goto label40;

        i55 = i52;

        goto label41;

     label40:
        i55 = i53;

     label41:
        i56 = specialinvoke r0.<android.text.TextLine: int getOffsetBeforeAfter(int,int,int,boolean,int,boolean)>(i51, i52, i53, z6, i55, z7);

        if z7 == 0 goto label42;

        goto label43;

     label42:
        i53 = i52;

     label43:
        i36 = i56;

        if i56 != i53 goto label52;

        i35 = i51;

        i34 = i54;

        i36 = i56;

        goto label30;

     label44:
        if i54 >= i34 goto label52;

        if z7 == 0 goto label45;

        i36 = i52;

        goto label46;

     label45:
        i36 = i53;

     label46:
        goto label52;

     label47:
        if i36 != -1 goto label49;

        i36 = -1;

        if z5 == 0 goto label48;

        $i5 = r0.<android.text.TextLine: int mLen>;

        i36 = $i5 + 1;

     label48:
        goto label52;

     label49:
        if i36 > i0 goto label52;

        if z5 == 0 goto label50;

        i36 = i0;

        goto label51;

     label50:
        i36 = 0;

     label51:
        goto label52;

     label52:
        return i36;
    }

    public void justify(float)
    {
        android.text.TextLine r0;
        float f0, $f1, $f2, $f3, $f4, $f5;
        int i0, $i1, $i2, $i3, i5;
        java.lang.CharSequence $r1;
        char $c4;
        boolean $z0;

        r0 := @this: android.text.TextLine;

        f0 := @parameter0: float;

        i5 = r0.<android.text.TextLine: int mLen>;

     label1:
        if i5 <= 0 goto label2;

        $r1 = r0.<android.text.TextLine: java.lang.CharSequence mText>;

        $i1 = r0.<android.text.TextLine: int mStart>;

        $i2 = $i1 + i5;

        $i3 = $i2 - 1;

        $c4 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i3);

        $z0 = staticinvoke <android.text.TextLine: boolean isLineEndSpace(char)>($c4);

        if $z0 == 0 goto label2;

        i5 = i5 + -1;

        goto label1;

     label2:
        i0 = specialinvoke r0.<android.text.TextLine: int countStretchableSpaces(int,int)>(0, i5);

        if i0 != 0 goto label3;

        return;

     label3:
        $f1 = virtualinvoke r0.<android.text.TextLine: float measure(int,boolean,android.graphics.Paint$FontMetricsInt)>(i5, 0, null);

        $f2 = staticinvoke <java.lang.Math: float abs(float)>($f1);

        $f4 = f0 - $f2;

        $f3 = (float) i0;

        $f5 = $f4 / $f3;

        r0.<android.text.TextLine: float mAddedWidthForJustify> = $f5;

        r0.<android.text.TextLine: boolean mIsJustifying> = 1;

        return;
    }

    public float measure(int, boolean, android.graphics.Paint$FontMetricsInt)
    {
        android.text.TextLine r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i10, i11, i12, i13, i14, $i15, i16;
        boolean z0, $z1, z2, z3, z4, z5;
        java.lang.StringBuilder $r1;
        java.lang.IndexOutOfBoundsException $r7;
        java.lang.String $r8;
        android.text.Layout$Directions $r9, $r10, $r11, $r12;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, f8, f9, f10, f11, f12;
        char $c9;
        android.graphics.Paint$FontMetricsInt r13;

        r0 := @this: android.text.TextLine;

        i0 := @parameter0: int;

        z2 := @parameter1: boolean;

        r13 := @parameter2: android.graphics.Paint$FontMetricsInt;

        $i2 = r0.<android.text.TextLine: int mLen>;

        if i0 > $i2 goto label23;

        if z2 == 0 goto label01;

        i10 = i0 - 1;

        goto label02;

     label01:
        i10 = i0;

     label02:
        if i10 >= 0 goto label03;

        return 0.0F;

     label03:
        f8 = 0.0F;

        i11 = 0;

     label04:
        $r9 = r0.<android.text.TextLine: android.text.Layout$Directions mDirections>;

        $i4 = virtualinvoke $r9.<android.text.Layout$Directions: int getRunCount()>();

        if i11 >= $i4 goto label22;

        $r10 = r0.<android.text.TextLine: android.text.Layout$Directions mDirections>;

        i12 = virtualinvoke $r10.<android.text.Layout$Directions: int getRunStart(int)>(i11);

        $i5 = r0.<android.text.TextLine: int mLen>;

        if i12 <= $i5 goto label05;

        goto label22;

     label05:
        $r11 = r0.<android.text.TextLine: android.text.Layout$Directions mDirections>;

        $i6 = virtualinvoke $r11.<android.text.Layout$Directions: int getRunLength(int)>(i11);

        $i8 = $i6 + i12;

        $i7 = r0.<android.text.TextLine: int mLen>;

        i1 = staticinvoke <java.lang.Math: int min(int,int)>($i8, $i7);

        $r12 = r0.<android.text.TextLine: android.text.Layout$Directions mDirections>;

        z0 = virtualinvoke $r12.<android.text.Layout$Directions: boolean isRunRtl(int)>(i11);

        $z1 = r0.<android.text.TextLine: boolean mHasTabs>;

        if $z1 == 0 goto label06;

        i13 = i12;

        goto label07;

     label06:
        i13 = i1;

     label07:
        if i13 > i1 goto label21;

        if i13 == i1 goto label08;

        f9 = f8;

        i14 = i12;

        $c9 = specialinvoke r0.<android.text.TextLine: char charAt(int)>(i13);

        if $c9 != 9 goto label20;

     label08:
        z3 = 0;

        if i10 < i12 goto label09;

        if i10 >= i13 goto label09;

        z4 = 1;

        goto label10;

     label09:
        z4 = 0;

     label10:
        $i15 = r0.<android.text.TextLine: int mDir>;

        if $i15 != -1 goto label11;

        z5 = 1;

        goto label12;

     label11:
        z5 = 0;

     label12:
        if z5 != z0 goto label13;

        z3 = 1;

     label13:
        if z4 == 0 goto label14;

        if z3 == 0 goto label14;

        $f6 = specialinvoke r0.<android.text.TextLine: float measureRun(int,int,int,boolean,android.graphics.Paint$FontMetricsInt)>(i12, i0, i13, z0, r13);

        $f7 = $f6 + f8;

        return $f7;

     label14:
        f10 = specialinvoke r0.<android.text.TextLine: float measureRun(int,int,int,boolean,android.graphics.Paint$FontMetricsInt)>(i12, i13, i13, z0, r13);

        if z3 == 0 goto label15;

        goto label16;

     label15:
        f10 = neg f10;

     label16:
        f11 = f8 + f10;

        if z4 == 0 goto label17;

        $f4 = specialinvoke r0.<android.text.TextLine: float measureRun(int,int,int,boolean,android.graphics.Paint$FontMetricsInt)>(i12, i0, i13, z0, null);

        $f5 = $f4 + f11;

        return $f5;

     label17:
        f12 = f11;

        if i13 == i1 goto label19;

        if i0 != i13 goto label18;

        return f11;

     label18:
        i16 = r0.<android.text.TextLine: int mDir>;

        $f2 = (float) i16;

        $f0 = (float) i16;

        $f1 = $f0 * f11;

        $f3 = virtualinvoke r0.<android.text.TextLine: float nextTab(float)>($f1);

        f12 = $f2 * $f3;

        if i10 != i13 goto label19;

        return f12;

     label19:
        i14 = i13 + 1;

        f9 = f12;

     label20:
        i13 = i13 + 1;

        f8 = f9;

        i12 = i14;

        goto label07;

     label21:
        i11 = i11 + 1;

        goto label04;

     label22:
        return f8;

     label23:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("offset(");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") should be less than line limit(");

        $i3 = r0.<android.text.TextLine: int mLen>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = new java.lang.IndexOutOfBoundsException;

        $r8 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r8);

        throw $r7;
    }

    public float[] measureAllOffsets(boolean[], android.graphics.Paint$FontMetricsInt)
    {
        android.text.TextLine r0;
        android.graphics.Paint$FontMetricsInt r1, r9;
        float[] r2;
        int[] r3;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i21, i22, i23, i24, $i25, i26, i27, i28, i29, i30;
        boolean z0, $z1, $z2, z3, z4;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, f7, f8, f9;
        android.text.Layout$Directions $r4, $r5, $r6, $r8;
        char $c20;
        boolean[] r7;

        r0 := @this: android.text.TextLine;

        r7 := @parameter0: boolean[];

        r1 := @parameter1: android.graphics.Paint$FontMetricsInt;

        i21 = r0.<android.text.TextLine: int mLen>;

        $i3 = i21 + 1;

        r2 = newarray (float)[$i3];

        $i4 = i21 + 1;

        r3 = newarray (int)[$i4];

        i22 = 0;

     label01:
        $i5 = lengthof r3;

        if i22 >= $i5 goto label04;

        $z2 = r7[i22];

        if $z2 == 0 goto label02;

        i23 = i22 - 1;

        goto label03;

     label02:
        i23 = i22;

     label03:
        r3[i22] = i23;

        i22 = i22 + 1;

        goto label01;

     label04:
        $i6 = r3[0];

        if $i6 >= 0 goto label05;

        r2[0] = 0.0F;

     label05:
        f7 = 0.0F;

        i24 = 0;

     label06:
        $r8 = r0.<android.text.TextLine: android.text.Layout$Directions mDirections>;

        $i25 = virtualinvoke $r8.<android.text.Layout$Directions: int getRunCount()>();

        if i24 >= $i25 goto label29;

        $r4 = r0.<android.text.TextLine: android.text.Layout$Directions mDirections>;

        i26 = virtualinvoke $r4.<android.text.Layout$Directions: int getRunStart(int)>(i24);

        $i8 = r0.<android.text.TextLine: int mLen>;

        if i26 <= $i8 goto label07;

        goto label29;

     label07:
        $r5 = r0.<android.text.TextLine: android.text.Layout$Directions mDirections>;

        $i9 = virtualinvoke $r5.<android.text.Layout$Directions: int getRunLength(int)>(i24);

        $i11 = $i9 + i26;

        $i10 = r0.<android.text.TextLine: int mLen>;

        i0 = staticinvoke <java.lang.Math: int min(int,int)>($i11, $i10);

        $r6 = r0.<android.text.TextLine: android.text.Layout$Directions mDirections>;

        z0 = virtualinvoke $r6.<android.text.Layout$Directions: boolean isRunRtl(int)>(i24);

        $z1 = r0.<android.text.TextLine: boolean mHasTabs>;

        if $z1 == 0 goto label08;

        i27 = i26;

        goto label09;

     label08:
        i27 = i0;

     label09:
        if i27 > i0 goto label28;

        if i27 == i0 goto label11;

        $c20 = specialinvoke r0.<android.text.TextLine: char charAt(int)>(i27);

        if $c20 != 9 goto label10;

        goto label11;

     label10:
        goto label27;

     label11:
        $i12 = r0.<android.text.TextLine: int mDir>;

        if $i12 != -1 goto label12;

        z3 = 1;

        goto label13;

     label12:
        z3 = 0;

     label13:
        if z3 != z0 goto label14;

        z4 = 1;

        goto label15;

     label14:
        z4 = 0;

     label15:
        i1 = i27;

        i2 = i26;

        f0 = specialinvoke r0.<android.text.TextLine: float measureRun(int,int,int,boolean,android.graphics.Paint$FontMetricsInt)>(i26, i27, i27, z0, r1);

        if z4 == 0 goto label16;

        f8 = f0;

        goto label17;

     label16:
        f8 = neg f0;

     label17:
        f9 = f7 + f8;

        if z4 == 0 goto label18;

        goto label19;

     label18:
        f7 = f9;

     label19:
        if z4 == 0 goto label20;

        r9 = r1;

        goto label21;

     label20:
        r9 = null;

     label21:
        i28 = i2;

     label22:
        if i28 > i1 goto label24;

        $i17 = r0.<android.text.TextLine: int mLen>;

        if i28 > $i17 goto label24;

        $i18 = r3[i28];

        if $i18 < i2 goto label23;

        $i19 = r3[i28];

        if $i19 >= i1 goto label23;

        $f5 = specialinvoke r0.<android.text.TextLine: float measureRun(int,int,int,boolean,android.graphics.Paint$FontMetricsInt)>(i2, i28, i1, z0, r9);

        $f6 = f7 + $f5;

        r2[i28] = $f6;

        goto label23;

     label23:
        i28 = i28 + 1;

        goto label22;

     label24:
        f7 = f9;

        if i1 == i0 goto label26;

        $i13 = r3[i1];

        if $i13 != i1 goto label25;

        r2[i1] = f9;

     label25:
        i29 = r0.<android.text.TextLine: int mDir>;

        $f3 = (float) i29;

        $f1 = (float) i29;

        $f2 = $f1 * f9;

        $f4 = virtualinvoke r0.<android.text.TextLine: float nextTab(float)>($f2);

        f7 = $f3 * $f4;

        $i14 = i1 + 1;

        $i15 = r3[$i14];

        if $i15 != i1 goto label26;

        $i16 = i1 + 1;

        r2[$i16] = f7;

     label26:
        i26 = i1 + 1;

     label27:
        i27 = i27 + 1;

        goto label09;

     label28:
        i24 = i24 + 1;

        goto label06;

     label29:
        i30 = r0.<android.text.TextLine: int mLen>;

        $i7 = r3[i30];

        if $i7 != i30 goto label30;

        r2[i30] = f7;

     label30:
        return r2;
    }

    public float metrics(android.graphics.Paint$FontMetricsInt)
    {
        android.text.TextLine r0;
        android.graphics.Paint$FontMetricsInt r1;
        int $i0;
        float $f0;

        r0 := @this: android.text.TextLine;

        r1 := @parameter0: android.graphics.Paint$FontMetricsInt;

        $i0 = r0.<android.text.TextLine: int mLen>;

        $f0 = virtualinvoke r0.<android.text.TextLine: float measure(int,boolean,android.graphics.Paint$FontMetricsInt)>($i0, 0, r1);

        return $f0;
    }

    float nextTab(float)
    {
        android.text.TextLine r0;
        float f0, $f1, $f2;
        android.text.Layout$TabStops r1;

        r0 := @this: android.text.TextLine;

        f0 := @parameter0: float;

        r1 = r0.<android.text.TextLine: android.text.Layout$TabStops mTabs>;

        if r1 == null goto label1;

        $f2 = virtualinvoke r1.<android.text.Layout$TabStops: float nextTab(float)>(f0);

        return $f2;

     label1:
        $f1 = staticinvoke <android.text.Layout$TabStops: float nextDefaultStop(float,float)>(f0, 20.0F);

        return $f1;
    }

    public void set(android.text.TextPaint, java.lang.CharSequence, int, int, int, android.text.Layout$Directions, boolean, android.text.Layout$TabStops, int, int)
    {
        android.text.TextLine r0;
        java.lang.CharSequence r1;
        int i0, i1, i2, $i3, $i4, $i5, $i7, $i8, $i10, $i11, $i12, $i13, i14, i15, i16, i17, i18, $i19, i20;
        android.text.Layout$TabStops r2;
        java.lang.IllegalArgumentException $r3;
        boolean $z0, $z1, $z2, z3, z4, $z5;
        char[] $r4, r15, $r16, r17;
        android.text.SpanSet $r5, $r6, $r9, $r10;
        char $c6, $c9;
        android.text.PrecomputedText$Params $r7;
        android.text.TextPaint $r8, r11;
        android.text.Layout$Directions r12;
        android.text.Spanned r13;
        android.text.PrecomputedText r14;

        r0 := @this: android.text.TextLine;

        r11 := @parameter0: android.text.TextPaint;

        r1 := @parameter1: java.lang.CharSequence;

        i14 := @parameter2: int;

        i0 := @parameter3: int;

        i15 := @parameter4: int;

        r12 := @parameter5: android.text.Layout$Directions;

        z3 := @parameter6: boolean;

        r2 := @parameter7: android.text.Layout$TabStops;

        i1 := @parameter8: int;

        i16 := @parameter9: int;

        r0.<android.text.TextLine: android.text.TextPaint mPaint> = r11;

        r0.<android.text.TextLine: java.lang.CharSequence mText> = r1;

        r0.<android.text.TextLine: int mStart> = i14;

        $i3 = i0 - i14;

        r0.<android.text.TextLine: int mLen> = $i3;

        r0.<android.text.TextLine: int mDir> = i15;

        r0.<android.text.TextLine: android.text.Layout$Directions mDirections> = r12;

        if r12 == null goto label15;

        r0.<android.text.TextLine: boolean mHasTabs> = z3;

        r0.<android.text.TextLine: android.text.Spanned mSpanned> = null;

        z4 = 0;

        $z0 = r1 instanceof android.text.Spanned;

        if $z0 == 0 goto label02;

        r13 = (android.text.Spanned) r1;

        r0.<android.text.TextLine: android.text.Spanned mSpanned> = r13;

        $r9 = r0.<android.text.TextLine: android.text.SpanSet mReplacementSpanSpanSet>;

        virtualinvoke $r9.<android.text.SpanSet: void init(android.text.Spanned,int,int)>(r13, i14, i0);

        $r10 = r0.<android.text.TextLine: android.text.SpanSet mReplacementSpanSpanSet>;

        $i13 = $r10.<android.text.SpanSet: int numberOfSpans>;

        if $i13 <= 0 goto label01;

        z4 = 1;

        goto label02;

     label01:
        z4 = 0;

     label02:
        r0.<android.text.TextLine: android.text.PrecomputedText mComputed> = null;

        $z5 = r1 instanceof android.text.PrecomputedText;

        if $z5 == 0 goto label03;

        r14 = (android.text.PrecomputedText) r1;

        r0.<android.text.TextLine: android.text.PrecomputedText mComputed> = r14;

        $r7 = virtualinvoke r14.<android.text.PrecomputedText: android.text.PrecomputedText$Params getParams()>();

        $r8 = virtualinvoke $r7.<android.text.PrecomputedText$Params: android.text.TextPaint getTextPaint()>();

        $z2 = virtualinvoke $r8.<android.text.TextPaint: boolean equalsForTextMeasurement(android.graphics.Paint)>(r11);

        if $z2 != 0 goto label03;

        r0.<android.text.TextLine: android.text.PrecomputedText mComputed> = null;

     label03:
        r0.<android.text.TextLine: boolean mCharsValid> = z4;

        if z4 == 0 goto label10;

        r15 = r0.<android.text.TextLine: char[] mChars>;

        if r15 == null goto label04;

        $i12 = lengthof r15;

        $i11 = r0.<android.text.TextLine: int mLen>;

        if $i12 >= $i11 goto label05;

     label04:
        $i4 = r0.<android.text.TextLine: int mLen>;

        $r4 = staticinvoke <com.android.internal.util.ArrayUtils: char[] newUnpaddedCharArray(int)>($i4);

        r0.<android.text.TextLine: char[] mChars> = $r4;

     label05:
        $r16 = r0.<android.text.TextLine: char[] mChars>;

        staticinvoke <android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>(r1, i14, i0, $r16, 0);

        if z4 == 0 goto label10;

        r17 = r0.<android.text.TextLine: char[] mChars>;

        i17 = i14;

     label06:
        if i17 >= i0 goto label10;

        $r5 = r0.<android.text.TextLine: android.text.SpanSet mReplacementSpanSpanSet>;

        i2 = virtualinvoke $r5.<android.text.SpanSet: int getNextTransition(int,int)>(i17, i0);

        $r6 = r0.<android.text.TextLine: android.text.SpanSet mReplacementSpanSpanSet>;

        $z1 = virtualinvoke $r6.<android.text.SpanSet: boolean hasSpansIntersecting(int,int)>(i17, i2);

        if $z1 == 0 goto label09;

        $i5 = i17 - i14;

        if $i5 >= i16 goto label07;

        $i10 = i2 - i14;

        if $i10 > i1 goto label09;

     label07:
        $i7 = i17 - i14;

        $c6 = (char) 65532;

        r17[$i7] = $c6;

        $i8 = i17 - i14;

        i18 = $i8 + 1;

     label08:
        $i19 = i2 - i14;

        if i18 >= $i19 goto label09;

        $c9 = (char) 65279;

        r17[i18] = $c9;

        i18 = i18 + 1;

        goto label08;

     label09:
        i17 = i2;

        goto label06;

     label10:
        r0.<android.text.TextLine: android.text.Layout$TabStops mTabs> = r2;

        r0.<android.text.TextLine: float mAddedWidthForJustify> = 0.0F;

        r0.<android.text.TextLine: boolean mIsJustifying> = 0;

        if i1 == i16 goto label11;

        i20 = i1;

        goto label12;

     label11:
        i20 = 0;

     label12:
        r0.<android.text.TextLine: int mEllipsisStart> = i20;

        if i1 == i16 goto label13;

        goto label14;

     label13:
        i16 = 0;

     label14:
        r0.<android.text.TextLine: int mEllipsisEnd> = i16;

        return;

     label15:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Directions cannot be null");

        throw $r3;
    }
}
