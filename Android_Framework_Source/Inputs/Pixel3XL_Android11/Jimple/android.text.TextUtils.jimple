public class android.text.TextUtils extends java.lang.Object
{
    public static final int ABSOLUTE_SIZE_SPAN;
    public static final int ACCESSIBILITY_CLICKABLE_SPAN;
    public static final int ACCESSIBILITY_REPLACEMENT_SPAN;
    public static final int ACCESSIBILITY_URL_SPAN;
    public static final int ALIGNMENT_SPAN;
    public static final int ANNOTATION;
    public static final int BACKGROUND_COLOR_SPAN;
    public static final int BULLET_SPAN;
    public static final int CAP_MODE_CHARACTERS;
    public static final int CAP_MODE_SENTENCES;
    public static final int CAP_MODE_WORDS;
    public static final android.os.Parcelable$Creator CHAR_SEQUENCE_CREATOR;
    public static final int EASY_EDIT_SPAN;
    static final char ELLIPSIS_FILLER;
    private static final java.lang.String ELLIPSIS_NORMAL;
    private static final java.lang.String ELLIPSIS_TWO_DOTS;
    private static java.lang.String[] EMPTY_STRING_ARRAY;
    public static final int FIRST_SPAN;
    public static final int FOREGROUND_COLOR_SPAN;
    public static final int LAST_SPAN;
    public static final int LEADING_MARGIN_SPAN;
    public static final int LINE_BACKGROUND_SPAN;
    private static final int LINE_FEED_CODE_POINT;
    public static final int LINE_HEIGHT_SPAN;
    public static final int LOCALE_SPAN;
    private static final int NBSP_CODE_POINT;
    private static final int PARCEL_SAFE_TEXT_LENGTH;
    public static final int QUOTE_SPAN;
    public static final int RELATIVE_SIZE_SPAN;
    public static final int SAFE_STRING_FLAG_FIRST_LINE;
    public static final int SAFE_STRING_FLAG_SINGLE_LINE;
    public static final int SAFE_STRING_FLAG_TRIM;
    public static final int SCALE_X_SPAN;
    public static final int SPELL_CHECK_SPAN;
    public static final int STRIKETHROUGH_SPAN;
    public static final int STYLE_SPAN;
    public static final int SUBSCRIPT_SPAN;
    public static final int SUGGESTION_RANGE_SPAN;
    public static final int SUGGESTION_SPAN;
    public static final int SUPERSCRIPT_SPAN;
    private static final java.lang.String TAG;
    public static final int TEXT_APPEARANCE_SPAN;
    public static final int TTS_SPAN;
    public static final int TYPEFACE_SPAN;
    public static final int UNDERLINE_SPAN;
    public static final int URL_SPAN;
    private static java.lang.Object sLock;
    private static char[] sTemp;

    static void <clinit>()
    {
        android.text.TextUtils$1 $r0;
        java.lang.Object $r1;
        java.lang.String[] $r2;

        <android.text.TextUtils: int URL_SPAN> = 11;

        <android.text.TextUtils: int UNDERLINE_SPAN> = 6;

        <android.text.TextUtils: int TYPEFACE_SPAN> = 13;

        <android.text.TextUtils: int TTS_SPAN> = 24;

        <android.text.TextUtils: int TEXT_APPEARANCE_SPAN> = 17;

        <android.text.TextUtils: java.lang.String TAG> = "TextUtils";

        <android.text.TextUtils: int SUPERSCRIPT_SPAN> = 14;

        <android.text.TextUtils: int SUGGESTION_SPAN> = 19;

        <android.text.TextUtils: int SUGGESTION_RANGE_SPAN> = 21;

        <android.text.TextUtils: int SUBSCRIPT_SPAN> = 15;

        <android.text.TextUtils: int STYLE_SPAN> = 7;

        <android.text.TextUtils: int STRIKETHROUGH_SPAN> = 5;

        <android.text.TextUtils: int SPELL_CHECK_SPAN> = 20;

        <android.text.TextUtils: int SCALE_X_SPAN> = 4;

        <android.text.TextUtils: int SAFE_STRING_FLAG_TRIM> = 1;

        <android.text.TextUtils: int SAFE_STRING_FLAG_SINGLE_LINE> = 2;

        <android.text.TextUtils: int SAFE_STRING_FLAG_FIRST_LINE> = 4;

        <android.text.TextUtils: int RELATIVE_SIZE_SPAN> = 3;

        <android.text.TextUtils: int QUOTE_SPAN> = 9;

        <android.text.TextUtils: int PARCEL_SAFE_TEXT_LENGTH> = 100000;

        <android.text.TextUtils: int NBSP_CODE_POINT> = 160;

        <android.text.TextUtils: int LOCALE_SPAN> = 23;

        <android.text.TextUtils: int LINE_HEIGHT_SPAN> = 28;

        <android.text.TextUtils: int LINE_FEED_CODE_POINT> = 10;

        <android.text.TextUtils: int LINE_BACKGROUND_SPAN> = 27;

        <android.text.TextUtils: int LEADING_MARGIN_SPAN> = 10;

        <android.text.TextUtils: int LAST_SPAN> = 29;

        <android.text.TextUtils: int FOREGROUND_COLOR_SPAN> = 2;

        <android.text.TextUtils: int FIRST_SPAN> = 1;

        <android.text.TextUtils: java.lang.String ELLIPSIS_TWO_DOTS> = "\u2025";

        <android.text.TextUtils: java.lang.String ELLIPSIS_NORMAL> = "\u2026";

        <android.text.TextUtils: char ELLIPSIS_FILLER> = 65279;

        <android.text.TextUtils: int EASY_EDIT_SPAN> = 22;

        <android.text.TextUtils: int CAP_MODE_WORDS> = 8192;

        <android.text.TextUtils: int CAP_MODE_SENTENCES> = 16384;

        <android.text.TextUtils: int CAP_MODE_CHARACTERS> = 4096;

        <android.text.TextUtils: int BULLET_SPAN> = 8;

        <android.text.TextUtils: int BACKGROUND_COLOR_SPAN> = 12;

        <android.text.TextUtils: int ANNOTATION> = 18;

        <android.text.TextUtils: int ALIGNMENT_SPAN> = 1;

        <android.text.TextUtils: int ACCESSIBILITY_URL_SPAN> = 26;

        <android.text.TextUtils: int ACCESSIBILITY_REPLACEMENT_SPAN> = 29;

        <android.text.TextUtils: int ACCESSIBILITY_CLICKABLE_SPAN> = 25;

        <android.text.TextUtils: int ABSOLUTE_SIZE_SPAN> = 16;

        $r0 = new android.text.TextUtils$1;

        specialinvoke $r0.<android.text.TextUtils$1: void <init>()>();

        <android.text.TextUtils: android.os.Parcelable$Creator CHAR_SEQUENCE_CREATOR> = $r0;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        <android.text.TextUtils: java.lang.Object sLock> = $r1;

        <android.text.TextUtils: char[] sTemp> = null;

        $r2 = newarray (java.lang.String)[0];

        <android.text.TextUtils: java.lang.String[] EMPTY_STRING_ARRAY> = $r2;

        return;
    }

    private void <init>()
    {
        android.text.TextUtils r0;

        r0 := @this: android.text.TextUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void access$000(android.os.Parcel, android.text.Spannable, java.lang.Object)
    {
        android.os.Parcel r0;
        android.text.Spannable r1;
        java.lang.Object r2;

        r0 := @parameter0: android.os.Parcel;

        r1 := @parameter1: android.text.Spannable;

        r2 := @parameter2: java.lang.Object;

        staticinvoke <android.text.TextUtils: void readSpan(android.os.Parcel,android.text.Spannable,java.lang.Object)>(r0, r1, r2);

        return;
    }

    public static java.lang.CharSequence commaEllipsize(java.lang.CharSequence, android.text.TextPaint, float, java.lang.String, java.lang.String)
    {
        java.lang.CharSequence r0, $r5;
        android.text.TextPaint r1;
        float f0;
        java.lang.String r2, r3;
        android.text.TextDirectionHeuristic $r4;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: android.text.TextPaint;

        f0 := @parameter2: float;

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: java.lang.String;

        $r4 = <android.text.TextDirectionHeuristics: android.text.TextDirectionHeuristic FIRSTSTRONG_LTR>;

        $r5 = staticinvoke <android.text.TextUtils: java.lang.CharSequence commaEllipsize(java.lang.CharSequence,android.text.TextPaint,float,java.lang.String,java.lang.String,android.text.TextDirectionHeuristic)>(r0, r1, f0, r2, r3, $r4);

        return $r5;
    }

    public static java.lang.CharSequence commaEllipsize(java.lang.CharSequence, android.text.TextPaint, float, java.lang.String, java.lang.String, android.text.TextDirectionHeuristic)
    {
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7;
        java.lang.String r0, r1, $r8, r19, r21, r22;
        android.text.TextDirectionHeuristic r2;
        int i0, i1, $i3, i6, i7, i8, i9, i10, i11, i12;
        char[] r3;
        float[] r4;
        byte $b2, $b4;
        android.text.AutoGrowArray$FloatArray $r5;
        java.lang.Object[] $r6;
        java.lang.Integer $r7;
        char $c5, c13;
        java.lang.Throwable $r10, $r11, $r12, r23;
        java.lang.CharSequence r13;
        android.text.TextPaint r14;
        android.text.MeasuredParagraph r15, r16, r17, r18, r25, r26, r27;
        java.lang.StringBuilder r20, r24;
        android.text.SpannableStringBuilder r28;

        r13 := @parameter0: java.lang.CharSequence;

        r14 := @parameter1: android.text.TextPaint;

        f0 := @parameter2: float;

        r0 := @parameter3: java.lang.String;

        r1 := @parameter4: java.lang.String;

        r2 := @parameter5: android.text.TextDirectionHeuristic;

        r15 = null;

        r16 = null;

        r17 = null;

     label01:
        i0 = interfaceinvoke r13.<java.lang.CharSequence: int length()>();

     label02:
        r16 = null;

        r17 = null;

     label03:
        r18 = staticinvoke <android.text.MeasuredParagraph: android.text.MeasuredParagraph buildForMeasurement(android.text.TextPaint,java.lang.CharSequence,int,int,android.text.TextDirectionHeuristic,android.text.MeasuredParagraph)>(r14, r13, 0, i0, r2, null);

     label04:
        r16 = r18;

        r17 = null;

     label05:
        f1 = virtualinvoke r18.<android.text.MeasuredParagraph: float getWholeWidth()>();

     label06:
        $b2 = f1 cmpg f0;

        if $b2 > 0 goto label09;

        if r18 == null goto label07;

        virtualinvoke r18.<android.text.MeasuredParagraph: void recycle()>();

     label07:
        goto label08;

     label08:
        return r13;

     label09:
        r16 = r18;

        r17 = null;

     label10:
        r3 = virtualinvoke r18.<android.text.MeasuredParagraph: char[] getChars()>();

     label11:
        i6 = 0;

        i7 = 0;

     label12:
        if i7 >= i0 goto label14;

        i8 = i6;

        $c5 = r3[i7];

        if $c5 != 44 goto label13;

        i8 = i6 + 1;

     label13:
        i7 = i7 + 1;

        i6 = i8;

        goto label12;

     label14:
        i9 = i6 + 1;

        i10 = 0;

        r19 = "";

        i11 = 0;

        r16 = r18;

        r17 = null;

     label15:
        $r5 = virtualinvoke r18.<android.text.MeasuredParagraph: android.text.AutoGrowArray$FloatArray getWidths()>();

        r4 = virtualinvoke $r5.<android.text.AutoGrowArray$FloatArray: float[] getRawArray()>();

     label16:
        i12 = 0;

     label17:
        if i12 >= i0 goto label42;

        $f4 = (float) i11;

        $f3 = r4[i12];

        $f5 = $f4 + $f3;

        i11 = (int) $f5;

        c13 = r3[i12];

        if c13 != 44 goto label40;

        i1 = i9 - 1;

        if i1 != 1 goto label25;

     label18:
        r20 = new java.lang.StringBuilder;

        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

     label19:
        r16 = r18;

        r17 = r15;

     label20:
        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

     label21:
        r16 = r18;

        r17 = r15;

     label22:
        r21 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.String toString()>();

     label23:
        r22 = r21;

        goto label35;

     label24:
        $r10 := @caughtexception;

        r23 = $r10;

        goto label53;

     label25:
        r16 = r18;

        r17 = r15;

     label26:
        r24 = new java.lang.StringBuilder;

     label27:
        r16 = r18;

        r17 = r15;

     label28:
        specialinvoke r24.<java.lang.StringBuilder: void <init>()>();

     label29:
        r16 = r18;

        r17 = r15;

     label30:
        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

     label31:
        r25 = r15;

     label32:
        $r6 = newarray (java.lang.Object)[1];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r6[0] = $r7;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, $r6);

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

     label33:
        r25 = r15;

     label34:
        r22 = virtualinvoke r24.<java.lang.StringBuilder: java.lang.String toString()>();

     label35:
        r25 = r15;

     label36:
        $i3 = virtualinvoke r22.<java.lang.String: int length()>();

        r26 = staticinvoke <android.text.MeasuredParagraph: android.text.MeasuredParagraph buildForMeasurement(android.text.TextPaint,java.lang.CharSequence,int,int,android.text.TextDirectionHeuristic,android.text.MeasuredParagraph)>(r14, r22, 0, $i3, r2, r15);

     label37:
        r25 = r26;

     label38:
        f2 = virtualinvoke r26.<android.text.MeasuredParagraph: float getWholeWidth()>();

     label39:
        i9 = i1;

        r27 = r26;

        $f6 = (float) i11;

        $f7 = $f6 + f2;

        $b4 = $f7 cmpg f0;

        if $b4 > 0 goto label41;

        i10 = i12 + 1;

        i9 = i1;

        r27 = r26;

        r19 = r22;

        goto label41;

     label40:
        r27 = r15;

     label41:
        i12 = i12 + 1;

        r15 = r27;

        goto label17;

     label42:
        r25 = r15;

     label43:
        r28 = new android.text.SpannableStringBuilder;

     label44:
        r25 = r15;

     label45:
        specialinvoke r28.<android.text.SpannableStringBuilder: void <init>(java.lang.CharSequence)>(r19);

     label46:
        r25 = r15;

     label47:
        virtualinvoke r28.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder insert(int,java.lang.CharSequence,int,int)>(0, r13, 0, i10);

     label48:
        if r18 == null goto label49;

        virtualinvoke r18.<android.text.MeasuredParagraph: void recycle()>();

     label49:
        if r15 == null goto label50;

        virtualinvoke r15.<android.text.MeasuredParagraph: void recycle()>();

     label50:
        return r28;

     label51:
        $r12 := @caughtexception;

        r23 = $r12;

        r15 = r25;

        goto label53;

     label52:
        $r11 := @caughtexception;

        r23 = $r11;

        r15 = r17;

        r18 = r16;

     label53:
        if r18 == null goto label54;

        virtualinvoke r18.<android.text.MeasuredParagraph: void recycle()>();

     label54:
        if r15 == null goto label55;

        virtualinvoke r15.<android.text.MeasuredParagraph: void recycle()>();

     label55:
        throw r23;

        catch java.lang.Throwable from label01 to label02 with label52;
        catch java.lang.Throwable from label03 to label04 with label52;
        catch java.lang.Throwable from label05 to label06 with label52;
        catch java.lang.Throwable from label10 to label11 with label52;
        catch java.lang.Throwable from label15 to label16 with label52;
        catch java.lang.Throwable from label18 to label19 with label24;
        catch java.lang.Throwable from label20 to label21 with label52;
        catch java.lang.Throwable from label22 to label23 with label52;
        catch java.lang.Throwable from label26 to label27 with label52;
        catch java.lang.Throwable from label28 to label29 with label52;
        catch java.lang.Throwable from label30 to label31 with label52;
        catch java.lang.Throwable from label32 to label33 with label51;
        catch java.lang.Throwable from label34 to label35 with label51;
        catch java.lang.Throwable from label36 to label37 with label51;
        catch java.lang.Throwable from label38 to label39 with label51;
        catch java.lang.Throwable from label43 to label44 with label51;
        catch java.lang.Throwable from label45 to label46 with label51;
        catch java.lang.Throwable from label47 to label48 with label51;
    }

    public static transient java.lang.CharSequence concat(java.lang.CharSequence[])
    {
        java.lang.CharSequence[] r0;
        int i2, $i3, i4, i5, i6, i7, i8, i9;
        java.lang.String $r3;
        java.lang.CharSequence $r4, $r9, $r10, r16;
        boolean $z1, z2;
        java.lang.Object r11;
        android.text.SpannableStringBuilder r13;
        android.text.SpannedString r14;
        java.lang.StringBuilder r15;

        r0 := @parameter0: java.lang.CharSequence[];

        $i3 = lengthof r0;

        if $i3 != 0 goto label01;

        return "";

     label01:
        i4 = lengthof r0;

        if i4 != 1 goto label02;

        $r10 = r0[0];

        return $r10;

     label02:
        i2 = lengthof r0;

        i5 = 0;

     label03:
        z2 = 0;

        if i5 >= i2 goto label05;

        $r9 = r0[i5];

        $z1 = $r9 instanceof android.text.Spanned;

        if $z1 == 0 goto label04;

        z2 = 1;

        goto label05;

     label04:
        i5 = i5 + 1;

        goto label03;

     label05:
        if z2 == 0 goto label09;

        r13 = new android.text.SpannableStringBuilder;

        specialinvoke r13.<android.text.SpannableStringBuilder: void <init>()>();

        i6 = lengthof r0;

        i7 = 0;

     label06:
        if i7 >= i6 goto label08;

        r11 = r0[i7];

        if r11 != null goto label07;

        r11 = "null";

        goto label07;

     label07:
        r16 = (java.lang.CharSequence) r11;

        virtualinvoke r13.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence)>(r16);

        i7 = i7 + 1;

        goto label06;

     label08:
        r14 = new android.text.SpannedString;

        specialinvoke r14.<android.text.SpannedString: void <init>(java.lang.CharSequence)>(r13);

        return r14;

     label09:
        r15 = new java.lang.StringBuilder;

        specialinvoke r15.<java.lang.StringBuilder: void <init>()>();

        i8 = lengthof r0;

        i9 = 0;

     label10:
        if i9 >= i8 goto label11;

        $r4 = r0[i9];

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r4);

        i9 = i9 + 1;

        goto label10;

     label11:
        $r3 = virtualinvoke r15.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static void copySpansFrom(android.text.Spanned, int, int, java.lang.Class, android.text.Spannable, int)
    {
        android.text.Spanned r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, i9, $i10, i11, i12, i13;
        android.text.Spannable r1;
        java.lang.Object $r2, $r3, $r4, $r5;
        java.lang.Class r6, r7;
        java.lang.Object[] r8;

        r0 := @parameter0: android.text.Spanned;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r6 := @parameter3: java.lang.Class;

        r1 := @parameter4: android.text.Spannable;

        i2 := @parameter5: int;

        r7 = r6;

        if r6 != null goto label1;

        r7 = class "Ljava/lang/Object;";

     label1:
        r8 = interfaceinvoke r0.<android.text.Spanned: java.lang.Object[] getSpans(int,int,java.lang.Class)>(i0, i1, r7);

        i9 = 0;

     label2:
        $i10 = lengthof r8;

        if i9 >= $i10 goto label5;

        $r2 = r8[i9];

        i11 = interfaceinvoke r0.<android.text.Spanned: int getSpanStart(java.lang.Object)>($r2);

        $r3 = r8[i9];

        i3 = interfaceinvoke r0.<android.text.Spanned: int getSpanEnd(java.lang.Object)>($r3);

        $r4 = r8[i9];

        i4 = interfaceinvoke r0.<android.text.Spanned: int getSpanFlags(java.lang.Object)>($r4);

        i12 = i11;

        if i11 >= i0 goto label3;

        i12 = i0;

     label3:
        i13 = i3;

        if i3 <= i1 goto label4;

        i13 = i1;

     label4:
        $r5 = r8[i9];

        $i5 = i12 - i0;

        $i8 = $i5 + i2;

        $i6 = i13 - i0;

        $i7 = $i6 + i2;

        interfaceinvoke r1.<android.text.Spannable: void setSpan(java.lang.Object,int,int,int)>($r5, $i8, $i7, i4);

        i9 = i9 + 1;

        goto label2;

     label5:
        return;
    }

    static boolean couldAffectRtl(char)
    {
        char c0;
        boolean z0;

        c0 := @parameter0: char;

        if 1424 > c0 goto label1;

        if c0 <= 2303 goto label7;

     label1:
        if c0 == 8206 goto label7;

        if c0 == 8207 goto label7;

        if 8234 > c0 goto label2;

        if c0 <= 8238 goto label7;

     label2:
        if 8294 > c0 goto label3;

        if c0 <= 8297 goto label7;

     label3:
        if 55296 > c0 goto label4;

        if c0 <= 57343 goto label7;

     label4:
        if 64285 > c0 goto label5;

        if c0 <= 65023 goto label7;

     label5:
        if 65136 > c0 goto label6;

        if c0 > 65278 goto label6;

        goto label7;

     label6:
        z0 = 0;

        goto label8;

     label7:
        z0 = 1;

     label8:
        return z0;
    }

    public static boolean delimitedStringContains(java.lang.String, char, java.lang.String)
    {
        java.lang.String r0, r1;
        char c0, $c3, $c5;
        int i1, $i2, $i4, i6, $i7, i8, i9;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        c0 := @parameter1: char;

        r1 := @parameter2: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 != 0 goto label7;

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z1 == 0 goto label1;

        goto label7;

     label1:
        i6 = -1;

        i1 = virtualinvoke r0.<java.lang.String: int length()>();

     label2:
        $i7 = i6 + 1;

        i8 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>(r1, $i7);

        i6 = i8;

        if i8 == -1 goto label6;

        if i8 <= 0 goto label3;

        $i4 = i8 - 1;

        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i4);

        if $c5 == c0 goto label3;

        goto label2;

     label3:
        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        i9 = $i2 + i8;

        if i9 != i1 goto label4;

        return 1;

     label4:
        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i9);

        if $c3 != c0 goto label5;

        return 1;

     label5:
        goto label2;

     label6:
        return 0;

     label7:
        return 0;
    }

    static boolean doesNotNeedBidi(char[], int, int)
    {
        char[] r0;
        int i0, i1, $i2, i4;
        char $c3;
        boolean $z0;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i4 = i0;

     label1:
        $i2 = i0 + i1;

        if i4 >= $i2 goto label3;

        $c3 = r0[i4];

        $z0 = staticinvoke <android.text.TextUtils: boolean couldAffectRtl(char)>($c3);

        if $z0 == 0 goto label2;

        return 0;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        return 1;
    }

    public static void dumpSpans(java.lang.CharSequence, android.util.Printer, java.lang.String)
    {
        java.lang.CharSequence r0, $r13;
        android.util.Printer r1;
        java.lang.String r2, $r10, $r16, $r20, $r28;
        java.lang.Object[] r3;
        java.lang.Object r4;
        boolean $z0;
        java.lang.StringBuilder $r6, $r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        java.lang.Class $r19;
        android.text.Spanned r29;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: android.util.Printer;

        r2 := @parameter2: java.lang.String;

        $z0 = r0 instanceof android.text.Spanned;

        if $z0 == 0 goto label3;

        r29 = (android.text.Spanned) r0;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        r3 = interfaceinvoke r29.<android.text.Spanned: java.lang.Object[] getSpans(int,int,java.lang.Class)>(0, $i0, class "Ljava/lang/Object;");

        i8 = 0;

     label1:
        $i1 = lengthof r3;

        if i8 >= $i1 goto label2;

        r4 = r3[i8];

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $i2 = interfaceinvoke r29.<android.text.Spanned: int getSpanStart(java.lang.Object)>(r4);

        $i3 = interfaceinvoke r29.<android.text.Spanned: int getSpanEnd(java.lang.Object)>(r4);

        $r13 = interfaceinvoke r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i2, $i3);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $i4 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r4);

        $r16 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i4);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r19 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        $r20 = virtualinvoke $r19.<java.lang.Class: java.lang.String getCanonicalName()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $i5 = interfaceinvoke r29.<android.text.Spanned: int getSpanStart(java.lang.Object)>(r4);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $i6 = interfaceinvoke r29.<android.text.Spanned: int getSpanEnd(java.lang.Object)>(r4);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") fl=#");

        $i7 = interfaceinvoke r29.<android.text.Spanned: int getSpanFlags(java.lang.Object)>(r4);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r28 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r1.<android.util.Printer: void println(java.lang.String)>($r28);

        i8 = i8 + 1;

        goto label1;

     label2:
        goto label4;

     label3:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": (no spans)");

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r1.<android.util.Printer: void println(java.lang.String)>($r10);

     label4:
        return;
    }

    public static java.lang.CharSequence ellipsize(java.lang.CharSequence, android.text.TextPaint, float, android.text.TextUtils$TruncateAt)
    {
        java.lang.CharSequence r0, $r3;
        android.text.TextPaint r1;
        float f0;
        android.text.TextUtils$TruncateAt r2;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: android.text.TextPaint;

        f0 := @parameter2: float;

        r2 := @parameter3: android.text.TextUtils$TruncateAt;

        $r3 = staticinvoke <android.text.TextUtils: java.lang.CharSequence ellipsize(java.lang.CharSequence,android.text.TextPaint,float,android.text.TextUtils$TruncateAt,boolean,android.text.TextUtils$EllipsizeCallback)>(r0, r1, f0, r2, 0, null);

        return $r3;
    }

    public static java.lang.CharSequence ellipsize(java.lang.CharSequence, android.text.TextPaint, float, android.text.TextUtils$TruncateAt, boolean, android.text.TextUtils$EllipsizeCallback)
    {
        java.lang.CharSequence r0, $r6;
        android.text.TextPaint r1;
        float f0;
        android.text.TextUtils$TruncateAt r2;
        boolean z0;
        android.text.TextUtils$EllipsizeCallback r3;
        android.text.TextDirectionHeuristic $r4;
        java.lang.String $r5;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: android.text.TextPaint;

        f0 := @parameter2: float;

        r2 := @parameter3: android.text.TextUtils$TruncateAt;

        z0 := @parameter4: boolean;

        r3 := @parameter5: android.text.TextUtils$EllipsizeCallback;

        $r4 = <android.text.TextDirectionHeuristics: android.text.TextDirectionHeuristic FIRSTSTRONG_LTR>;

        $r5 = staticinvoke <android.text.TextUtils: java.lang.String getEllipsisString(android.text.TextUtils$TruncateAt)>(r2);

        $r6 = staticinvoke <android.text.TextUtils: java.lang.CharSequence ellipsize(java.lang.CharSequence,android.text.TextPaint,float,android.text.TextUtils$TruncateAt,boolean,android.text.TextUtils$EllipsizeCallback,android.text.TextDirectionHeuristic,java.lang.String)>(r0, r1, f0, r2, z0, r3, $r4, $r5);

        return $r6;
    }

    public static java.lang.CharSequence ellipsize(java.lang.CharSequence, android.text.TextPaint, float, android.text.TextUtils$TruncateAt, boolean, android.text.TextUtils$EllipsizeCallback, android.text.TextDirectionHeuristic, java.lang.String)
    {
        boolean z0, $z1;
        android.text.TextUtils$EllipsizeCallback r0;
        java.lang.String r1, r23, r26;
        int i0, i1, i2, $i3, $i6, $i7, $i8, $i10, $i11, $i12, $i13, $i14, i15, i16;
        float $f0, $f1, $f2, f3, f4, f5, f12;
        byte $b4, $b5;
        android.text.TextUtils$TruncateAt $r2, $r3, $r10, r17;
        char $c9;
        java.lang.Throwable $r11, $r12, $r13, $r14, r28;
        java.lang.CharSequence r15;
        android.text.TextPaint r16;
        android.text.TextDirectionHeuristic r18;
        android.text.MeasuredParagraph r19, r20;
        char[] r21;
        android.text.Spanned r22;
        android.text.SpannableString r24;
        java.lang.StringBuilder r25;
        android.text.SpannableStringBuilder r27;

        r15 := @parameter0: java.lang.CharSequence;

        r16 := @parameter1: android.text.TextPaint;

        f3 := @parameter2: float;

        r17 := @parameter3: android.text.TextUtils$TruncateAt;

        z0 := @parameter4: boolean;

        r0 := @parameter5: android.text.TextUtils$EllipsizeCallback;

        r18 := @parameter6: android.text.TextDirectionHeuristic;

        r1 := @parameter7: java.lang.String;

        i0 = interfaceinvoke r15.<java.lang.CharSequence: int length()>();

        r19 = null;

     label01:
        $i3 = interfaceinvoke r15.<java.lang.CharSequence: int length()>();

        r20 = staticinvoke <android.text.MeasuredParagraph: android.text.MeasuredParagraph buildForMeasurement(android.text.TextPaint,java.lang.CharSequence,int,int,android.text.TextDirectionHeuristic,android.text.MeasuredParagraph)>(r16, r15, 0, $i3, r18, null);

     label02:
        r19 = r20;

     label03:
        $f0 = virtualinvoke r20.<android.text.MeasuredParagraph: float getWholeWidth()>();

        $b4 = $f0 cmpg f3;

        if $b4 > 0 goto label08;

     label04:
        if r0 == null goto label06;

        r19 = r20;

     label05:
        interfaceinvoke r0.<android.text.TextUtils$EllipsizeCallback: void ellipsized(int,int)>(0, 0);

     label06:
        if r20 == null goto label07;

        virtualinvoke r20.<android.text.MeasuredParagraph: void recycle()>();

     label07:
        return r15;

     label08:
        f4 = virtualinvoke r16.<android.text.TextPaint: float measureText(java.lang.String)>(r1);

     label09:
        f5 = f3 - f4;

        i15 = 0;

        $b5 = f5 cmpg 0.0F;

        if $b5 >= 0 goto label10;

        i16 = i0;

        goto label22;

     label10:
        $r2 = <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt START>;

        if r17 != $r2 goto label13;

     label11:
        $i14 = virtualinvoke r20.<android.text.MeasuredParagraph: int breakText(int,boolean,float)>(i0, 0, f5);

        i16 = i0 - $i14;

     label12:
        goto label22;

     label13:
        $r3 = <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt END>;

        if r17 == $r3 goto label20;

     label14:
        $r10 = <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt END_SMALL>;

        if r17 != $r10 goto label16;

     label15:
        goto label20;

     label16:
        $f1 = f5 / 2.0F;

        $i13 = virtualinvoke r20.<android.text.MeasuredParagraph: int breakText(int,boolean,float)>(i0, 0, $f1);

        i16 = i0 - $i13;

     label17:
        $f2 = virtualinvoke r20.<android.text.MeasuredParagraph: float measure(int,int)>(i16, i0);

        f12 = f5 - $f2;

     label18:
        i15 = virtualinvoke r20.<android.text.MeasuredParagraph: int breakText(int,boolean,float)>(i16, 1, f12);

     label19:
        goto label22;

     label20:
        i15 = virtualinvoke r20.<android.text.MeasuredParagraph: int breakText(int,boolean,float)>(i0, 1, f5);

     label21:
        i16 = i0;

     label22:
        if r0 == null goto label24;

     label23:
        interfaceinvoke r0.<android.text.TextUtils$EllipsizeCallback: void ellipsized(int,int)>(i15, i16);

     label24:
        r21 = virtualinvoke r20.<android.text.MeasuredParagraph: char[] getChars()>();

        $z1 = r15 instanceof android.text.Spanned;

        if $z1 == 0 goto label26;

        r22 = (android.text.Spanned) r15;

     label25:
        goto label27;

     label26:
        r22 = null;

     label27:
        i1 = i16 - i15;

        i2 = i0 - i1;

        if z0 == 0 goto label37;

        if i2 <= 0 goto label30;

     label28:
        $i10 = virtualinvoke r1.<java.lang.String: int length()>();

        if i1 < $i10 goto label30;

        $i11 = virtualinvoke r1.<java.lang.String: int length()>();

        virtualinvoke r1.<java.lang.String: void getChars(int,int,char[],int)>(0, $i11, r21, i15);

        $i12 = virtualinvoke r1.<java.lang.String: int length()>();

        i15 = i15 + $i12;

     label29:
        goto label30;

     label30:
        if i15 >= i16 goto label31;

        $c9 = (char) 65279;

        r21[i15] = $c9;

        i15 = i15 + 1;

        goto label30;

     label31:
        r23 = new java.lang.String;

        specialinvoke r23.<java.lang.String: void <init>(char[],int,int)>(r21, 0, i0);

     label32:
        if r22 != null goto label34;

        if r20 == null goto label33;

        virtualinvoke r20.<android.text.MeasuredParagraph: void recycle()>();

     label33:
        return r23;

     label34:
        r24 = new android.text.SpannableString;

        specialinvoke r24.<android.text.SpannableString: void <init>(java.lang.CharSequence)>(r23);

        staticinvoke <android.text.TextUtils: void copySpansFrom(android.text.Spanned,int,int,java.lang.Class,android.text.Spannable,int)>(r22, 0, i0, class "Ljava/lang/Object;", r24, 0);

     label35:
        if r20 == null goto label36;

        virtualinvoke r20.<android.text.MeasuredParagraph: void recycle()>();

     label36:
        return r24;

     label37:
        if i2 != 0 goto label39;

        if r20 == null goto label38;

        virtualinvoke r20.<android.text.MeasuredParagraph: void recycle()>();

     label38:
        return "";

     label39:
        if r22 != null goto label43;

     label40:
        r25 = new java.lang.StringBuilder;

        $i6 = virtualinvoke r1.<java.lang.String: int length()>();

        $i7 = i2 + $i6;

        specialinvoke r25.<java.lang.StringBuilder: void <init>(int)>($i7);

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>(r21, 0, i15);

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $i8 = i0 - i16;

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>(r21, i16, $i8);

        r26 = virtualinvoke r25.<java.lang.StringBuilder: java.lang.String toString()>();

     label41:
        if r20 == null goto label42;

        virtualinvoke r20.<android.text.MeasuredParagraph: void recycle()>();

     label42:
        return r26;

     label43:
        r27 = new android.text.SpannableStringBuilder;

        specialinvoke r27.<android.text.SpannableStringBuilder: void <init>()>();

        virtualinvoke r27.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence,int,int)>(r15, 0, i15);

        virtualinvoke r27.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence)>(r1);

        virtualinvoke r27.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence,int,int)>(r15, i16, i0);

     label44:
        if r20 == null goto label45;

        virtualinvoke r20.<android.text.MeasuredParagraph: void recycle()>();

     label45:
        return r27;

     label46:
        $r12 := @caughtexception;

        r28 = $r12;

        goto label50;

     label47:
        $r11 := @caughtexception;

        r28 = $r11;

        goto label50;

     label48:
        $r14 := @caughtexception;

        r28 = $r14;

        goto label50;

     label49:
        $r13 := @caughtexception;

        r28 = $r13;

        r20 = r19;

     label50:
        if r20 == null goto label51;

        virtualinvoke r20.<android.text.MeasuredParagraph: void recycle()>();

     label51:
        throw r28;

        catch java.lang.Throwable from label01 to label02 with label49;
        catch java.lang.Throwable from label03 to label04 with label49;
        catch java.lang.Throwable from label05 to label06 with label49;
        catch java.lang.Throwable from label08 to label09 with label48;
        catch java.lang.Throwable from label10 to label11 with label47;
        catch java.lang.Throwable from label11 to label12 with label47;
        catch java.lang.Throwable from label13 to label14 with label47;
        catch java.lang.Throwable from label14 to label15 with label47;
        catch java.lang.Throwable from label16 to label17 with label47;
        catch java.lang.Throwable from label17 to label18 with label47;
        catch java.lang.Throwable from label18 to label19 with label47;
        catch java.lang.Throwable from label20 to label21 with label47;
        catch java.lang.Throwable from label23 to label24 with label46;
        catch java.lang.Throwable from label24 to label25 with label46;
        catch java.lang.Throwable from label28 to label29 with label46;
        catch java.lang.Throwable from label31 to label32 with label46;
        catch java.lang.Throwable from label34 to label35 with label46;
        catch java.lang.Throwable from label40 to label41 with label46;
        catch java.lang.Throwable from label43 to label44 with label46;
    }

    public static java.lang.String emptyIfNull(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        r0 = "";

        goto label1;

     label1:
        return r0;
    }

    public static boolean equals(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence r0, r1;
        int i0, $i1, i4;
        boolean $z0, $z1, $z2;
        char $c2, $c3;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r0 == null goto label6;

        if r1 == null goto label6;

        i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i1 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if i0 != $i1 goto label6;

        $z0 = r0 instanceof java.lang.String;

        if $z0 == 0 goto label2;

        $z1 = r1 instanceof java.lang.String;

        if $z1 == 0 goto label2;

        $z2 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z2;

     label2:
        i4 = 0;

     label3:
        if i4 >= i0 goto label5;

        $c2 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i4);

        $c3 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(i4);

        if $c2 == $c3 goto label4;

        return 0;

     label4:
        i4 = i4 + 1;

        goto label3;

     label5:
        return 1;

     label6:
        return 0;
    }

    public static transient java.lang.CharSequence expandTemplate(java.lang.CharSequence, java.lang.CharSequence[])
    {
        char c0, $c2;
        java.lang.StringBuilder r0, r22;
        int $i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, $i13, i14, i15;
        java.lang.IllegalArgumentException $r1, r20, r21;
        android.text.SpannableStringBuilder $r2;
        boolean $z0;
        java.lang.String $r5, $r11;
        java.lang.CharSequence $r12, $r14, r17;
        java.lang.IndexOutOfBoundsException $r16;
        java.lang.CharSequence[] r18;

        r17 := @parameter0: java.lang.CharSequence;

        r18 := @parameter1: java.lang.CharSequence[];

        $i1 = lengthof r18;

        if $i1 > 9 goto label15;

        $r2 = new android.text.SpannableStringBuilder;

        specialinvoke $r2.<android.text.SpannableStringBuilder: void <init>(java.lang.CharSequence)>(r17);

        i12 = 0;

     label01:
        $i13 = virtualinvoke $r2.<android.text.SpannableStringBuilder: int length()>();

        if i12 >= $i13 goto label12;

        $c2 = virtualinvoke $r2.<android.text.SpannableStringBuilder: char charAt(int)>(i12);

        if $c2 != 94 goto label11;

        $i3 = i12 + 1;

        c0 = virtualinvoke $r2.<android.text.SpannableStringBuilder: char charAt(int)>($i3);

     label02:
        if c0 != 94 goto label05;

     label03:
        $i11 = i12 + 1;

        $i10 = i12 + 2;

        virtualinvoke $r2.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder delete(int,int)>($i11, $i10);

     label04:
        i12 = i12 + 1;

        goto label01;

     label05:
        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c0);

        if $z0 == 0 goto label11;

        i14 = staticinvoke <java.lang.Character: int getNumericValue(char)>(c0);

     label06:
        i15 = i14 + -1;

        if i15 < 0 goto label10;

     label07:
        $i5 = lengthof r18;

        if i15 >= $i5 goto label09;

        $i8 = i12 + 2;

        $r12 = r18[i15];

        virtualinvoke $r2.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder replace(int,int,java.lang.CharSequence)>(i12, $i8, $r12);

        $r14 = r18[i15];

        $i9 = interfaceinvoke $r14.<java.lang.CharSequence: int length()>();

        i12 = i12 + $i9;

     label08:
        goto label01;

     label09:
        r20 = new java.lang.IllegalArgumentException;

        r0 = new java.lang.StringBuilder;

        specialinvoke r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("template requests value ^");

        $i6 = i15 + 1;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; only ");

        $i7 = lengthof r18;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" provided");

        $r11 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw r20;

     label10:
        r21 = new java.lang.IllegalArgumentException;

        r22 = new java.lang.StringBuilder;

        specialinvoke r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("template requests value ^");

        $i4 = i15 + 1;

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r5 = virtualinvoke r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw r21;

     label11:
        i12 = i12 + 1;

        goto label01;

     label12:
        goto label14;

     label13:
        $r16 := @caughtexception;

     label14:
        return $r2;

     label15:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("max of 9 values are supported");

        throw $r1;

        catch java.lang.IndexOutOfBoundsException from label01 to label02 with label13;
        catch java.lang.IndexOutOfBoundsException from label03 to label04 with label13;
        catch java.lang.IndexOutOfBoundsException from label05 to label06 with label13;
        catch java.lang.IndexOutOfBoundsException from label07 to label08 with label13;
        catch java.lang.IndexOutOfBoundsException from label09 to label10 with label13;
        catch java.lang.IndexOutOfBoundsException from label10 to label11 with label13;
    }

    public static java.lang.String firstNotEmpty(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r2;
        boolean $z0;
        java.lang.CharSequence $r1;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z0 != 0 goto label1;

        goto label2;

     label1:
        $r1 = staticinvoke <com.android.internal.util.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence)>(r0);

        r2 = (java.lang.String) $r1;

     label2:
        return r2;
    }

    public static java.lang.CharSequence formatSelectedCount(int)
    {
        int i0;
        android.content.res.Resources $r0;
        java.lang.Object[] $r1;
        java.lang.Integer $r2;
        java.lang.String $r3;

        i0 := @parameter0: int;

        $r0 = staticinvoke <android.content.res.Resources: android.content.res.Resources getSystem()>();

        $r1 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r2;

        $r3 = virtualinvoke $r0.<android.content.res.Resources: java.lang.String getQuantityString(int,int,java.lang.Object[])>(18153496, i0, $r1);

        return $r3;
    }

    public static int getCapsMode(java.lang.CharSequence, int, int)
    {
        java.lang.CharSequence r0;
        char c0, $c5, c16, c20, c21, c23;
        int $i1, $i2, $i4, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, i17, i19, i22;
        short $s3, s15, s18, $s24;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        i13 := @parameter1: int;

        i14 := @parameter2: int;

        if i13 >= 0 goto label01;

        return 0;

     label01:
        s15 = 0;

        $i1 = i14 & 4096;

        if $i1 == 0 goto label02;

        s15 = 0 | 4096;

     label02:
        $i2 = i14 & 24576;

        if $i2 != 0 goto label03;

        return s15;

     label03:
        if i13 <= 0 goto label05;

        $i11 = i13 - 1;

        c16 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i11);

        if c16 == 34 goto label04;

        if c16 == 39 goto label04;

        $i12 = staticinvoke <java.lang.Character: int getType(char)>(c16);

        if $i12 == 21 goto label04;

        goto label05;

     label04:
        i13 = i13 + -1;

        goto label03;

     label05:
        i17 = i13;

     label06:
        if i17 <= 0 goto label08;

        $i10 = i17 - 1;

        c0 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i10);

        if c0 == 32 goto label07;

        if c0 != 9 goto label08;

     label07:
        i17 = i17 + -1;

        goto label06;

     label08:
        if i17 == 0 goto label21;

        $i4 = i17 - 1;

        $c5 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i4);

        if $c5 != 10 goto label09;

        goto label21;

     label09:
        $i6 = i14 & 16384;

        if $i6 != 0 goto label11;

        s18 = s15;

        if i13 == i17 goto label10;

        s18 = s15 | 8192;

     label10:
        return s18;

     label11:
        i19 = i17;

        if i13 != i17 goto label12;

        return s15;

     label12:
        if i19 <= 0 goto label14;

        $i8 = i19 - 1;

        c20 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i8);

        if c20 == 34 goto label13;

        if c20 == 39 goto label13;

        $i9 = staticinvoke <java.lang.Character: int getType(char)>(c20);

        if $i9 == 22 goto label13;

        goto label14;

     label13:
        i19 = i19 + -1;

        goto label12;

     label14:
        if i19 <= 0 goto label20;

        $i7 = i19 - 1;

        c21 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i7);

        if c21 == 46 goto label15;

        if c21 == 63 goto label15;

        if c21 != 33 goto label20;

     label15:
        if c21 != 46 goto label19;

        i22 = i19 - 2;

     label16:
        if i22 < 0 goto label19;

        c23 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i22);

        if c23 != 46 goto label17;

        return s15;

     label17:
        $z0 = staticinvoke <java.lang.Character: boolean isLetter(char)>(c23);

        if $z0 != 0 goto label18;

        goto label19;

     label18:
        i22 = i22 + -1;

        goto label16;

     label19:
        $s24 = s15 | 16384;

        return $s24;

     label20:
        return s15;

     label21:
        $s3 = s15 | 8192;

        return $s3;
    }

    public static void getChars(java.lang.CharSequence, int, int, char[], int)
    {
        java.lang.CharSequence r0;
        int i0, i2, i3;
        char[] r1;
        java.lang.Class r2;
        boolean $z0;
        char $c1;
        android.text.GetChars $r3;
        java.lang.StringBuilder $r4;
        java.lang.StringBuffer $r5;
        java.lang.String $r6;

        r0 := @parameter0: java.lang.CharSequence;

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        r1 := @parameter3: char[];

        i3 := @parameter4: int;

        r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if r2 != class "Ljava/lang/String;" goto label1;

        $r6 = (java.lang.String) r0;

        virtualinvoke $r6.<java.lang.String: void getChars(int,int,char[],int)>(i2, i0, r1, i3);

        goto label5;

     label1:
        if r2 != class "Ljava/lang/StringBuffer;" goto label2;

        $r5 = (java.lang.StringBuffer) r0;

        virtualinvoke $r5.<java.lang.StringBuffer: void getChars(int,int,char[],int)>(i2, i0, r1, i3);

        goto label5;

     label2:
        if r2 != class "Ljava/lang/StringBuilder;" goto label3;

        $r4 = (java.lang.StringBuilder) r0;

        virtualinvoke $r4.<java.lang.StringBuilder: void getChars(int,int,char[],int)>(i2, i0, r1, i3);

        goto label5;

     label3:
        $z0 = r0 instanceof android.text.GetChars;

        if $z0 == 0 goto label4;

        $r3 = (android.text.GetChars) r0;

        interfaceinvoke $r3.<android.text.GetChars: void getChars(int,int,char[],int)>(i2, i0, r1, i3);

        goto label5;

     label4:
        if i2 >= i0 goto label5;

        $c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i2);

        r1[i3] = $c1;

        i2 = i2 + 1;

        i3 = i3 + 1;

        goto label4;

     label5:
        return;
    }

    public static java.lang.String getEllipsisString(android.text.TextUtils$TruncateAt)
    {
        android.text.TextUtils$TruncateAt $r0, r1;
        java.lang.String r2;

        r1 := @parameter0: android.text.TextUtils$TruncateAt;

        $r0 = <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt END_SMALL>;

        if r1 != $r0 goto label1;

        r2 = "\u2025";

        goto label2;

     label1:
        r2 = "\u2026";

     label2:
        return r2;
    }

    public static int getLayoutDirectionFromLocale(java.util.Locale)
    {
        java.util.Locale r0, $r1;
        boolean $z0, $z1, $z2;
        android.icu.util.ULocale $r2;
        byte b0;
        java.util.Optional $r3;
        java.lang.Boolean $r4, $r6;
        java.lang.Object $r5;

        r0 := @parameter0: java.util.Locale;

        b0 = 0;

        if r0 == null goto label1;

        $r1 = <java.util.Locale: java.util.Locale ROOT>;

        $z0 = virtualinvoke r0.<java.util.Locale: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        $r2 = staticinvoke <android.icu.util.ULocale: android.icu.util.ULocale forLocale(java.util.Locale)>(r0);

        $z1 = virtualinvoke $r2.<android.icu.util.ULocale: boolean isRightToLeft()>();

        if $z1 != 0 goto label2;

     label1:
        $r3 = staticinvoke <android.sysprop.DisplayProperties: java.util.Optional debug_force_rtl()>();

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r5 = virtualinvoke $r3.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>($r4);

        $r6 = (java.lang.Boolean) $r5;

        $z2 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        if $z2 == 0 goto label3;

     label2:
        b0 = 1;

        goto label3;

     label3:
        return b0;
    }

    public static int getOffsetAfter(java.lang.CharSequence, int)
    {
        java.lang.CharSequence r0;
        android.text.style.ReplacementSpan[] r1;
        int i0, i1, $i2, $i3, $i4, i5, i6, i9, i10, i11, i12;
        android.text.Spanned $r2, $r5, $r7;
        java.lang.Object[] $r3;
        android.text.style.ReplacementSpan $r4, $r6;
        char c7, c8;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        i5 := @parameter1: int;

        i6 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if i5 != i6 goto label1;

        return i6;

     label1:
        $i2 = i6 - 1;

        if i5 != $i2 goto label2;

        return i6;

     label2:
        c7 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i5);

        if c7 < 55296 goto label5;

        if c7 > 56319 goto label5;

        $i4 = i5 + 1;

        c8 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i4);

        if c8 < 56320 goto label3;

        if c8 > 57343 goto label3;

        i9 = i5 + 2;

        goto label4;

     label3:
        i9 = i5 + 1;

     label4:
        goto label6;

     label5:
        i9 = i5 + 1;

     label6:
        i10 = i9;

        $z0 = r0 instanceof android.text.Spanned;

        if $z0 == 0 goto label9;

        $r2 = (android.text.Spanned) r0;

        $r3 = interfaceinvoke $r2.<android.text.Spanned: java.lang.Object[] getSpans(int,int,java.lang.Class)>(i9, i9, class "Landroid/text/style/ReplacementSpan;");

        r1 = (android.text.style.ReplacementSpan[]) $r3;

        i11 = 0;

     label7:
        i10 = i9;

        $i3 = lengthof r1;

        if i11 >= $i3 goto label9;

        $r5 = (android.text.Spanned) r0;

        $r4 = r1[i11];

        i0 = interfaceinvoke $r5.<android.text.Spanned: int getSpanStart(java.lang.Object)>($r4);

        $r7 = (android.text.Spanned) r0;

        $r6 = r1[i11];

        i1 = interfaceinvoke $r7.<android.text.Spanned: int getSpanEnd(java.lang.Object)>($r6);

        i12 = i9;

        if i0 >= i9 goto label8;

        i12 = i9;

        if i1 <= i9 goto label8;

        i12 = i1;

     label8:
        i11 = i11 + 1;

        i9 = i12;

        goto label7;

     label9:
        return i10;
    }

    public static int getOffsetBefore(java.lang.CharSequence, int)
    {
        java.lang.CharSequence r0;
        android.text.style.ReplacementSpan[] r1;
        int i0, i1, $i2, $i3, $i4, i5, i8, i9, i10, i11;
        android.text.Spanned $r2, $r5, $r7;
        java.lang.Object[] $r3;
        android.text.style.ReplacementSpan $r4, $r6;
        char c6, c7;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        i5 := @parameter1: int;

        if i5 != 0 goto label1;

        return 0;

     label1:
        if i5 != 1 goto label2;

        return 0;

     label2:
        $i2 = i5 - 1;

        c6 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i2);

        if c6 < 56320 goto label5;

        if c6 > 57343 goto label5;

        $i4 = i5 - 2;

        c7 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i4);

        if c7 < 55296 goto label3;

        if c7 > 56319 goto label3;

        i8 = i5 + -2;

        goto label4;

     label3:
        i8 = i5 + -1;

     label4:
        goto label6;

     label5:
        i8 = i5 + -1;

     label6:
        i9 = i8;

        $z0 = r0 instanceof android.text.Spanned;

        if $z0 == 0 goto label9;

        $r2 = (android.text.Spanned) r0;

        $r3 = interfaceinvoke $r2.<android.text.Spanned: java.lang.Object[] getSpans(int,int,java.lang.Class)>(i8, i8, class "Landroid/text/style/ReplacementSpan;");

        r1 = (android.text.style.ReplacementSpan[]) $r3;

        i10 = 0;

     label7:
        i9 = i8;

        $i3 = lengthof r1;

        if i10 >= $i3 goto label9;

        $r5 = (android.text.Spanned) r0;

        $r4 = r1[i10];

        i0 = interfaceinvoke $r5.<android.text.Spanned: int getSpanStart(java.lang.Object)>($r4);

        $r7 = (android.text.Spanned) r0;

        $r6 = r1[i10];

        i1 = interfaceinvoke $r7.<android.text.Spanned: int getSpanEnd(java.lang.Object)>($r6);

        i11 = i8;

        if i0 >= i8 goto label8;

        i11 = i8;

        if i1 <= i8 goto label8;

        i11 = i0;

     label8:
        i10 = i10 + 1;

        i8 = i11;

        goto label7;

     label9:
        return i9;
    }

    public static java.lang.CharSequence getReverse(java.lang.CharSequence, int, int)
    {
        java.lang.CharSequence r0;
        int i0, i1;
        android.text.TextUtils$Reverser $r1;

        r0 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = new android.text.TextUtils$Reverser;

        specialinvoke $r1.<android.text.TextUtils$Reverser: void <init>(java.lang.CharSequence,int,int)>(r0, i0, i1);

        return $r1;
    }

    public static int getTrimmedLength(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        int $i0, $i1, i4, i5;
        char $c2, $c3;

        r0 := @parameter0: java.lang.CharSequence;

        i4 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i5 = 0;

     label1:
        if i5 >= i4 goto label2;

        $c3 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i5);

        if $c3 > 32 goto label2;

        i5 = i5 + 1;

        goto label1;

     label2:
        if i4 <= i5 goto label3;

        $i1 = i4 - 1;

        $c2 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i1);

        if $c2 > 32 goto label3;

        i4 = i4 + -1;

        goto label2;

     label3:
        $i0 = i4 - i5;

        return $i0;
    }

    public static boolean hasStyleSpan(android.text.Spanned)
    {
        android.text.Spanned r0;
        java.lang.Class[] r1;
        int i0, $i1, $i2, $i3, i4;
        java.lang.Class r2;
        boolean z0;

        r0 := @parameter0: android.text.Spanned;

        if r0 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean)>(z0);

        r1 = newarray (java.lang.Class)[3];

        r1[0] = class "Landroid/text/style/CharacterStyle;";

        r1[1] = class "Landroid/text/style/ParagraphStyle;";

        r1[2] = class "Landroid/text/style/UpdateAppearance;";

        i0 = lengthof r1;

        i4 = 0;

     label3:
        if i4 >= i0 goto label5;

        r2 = r1[i4];

        $i1 = interfaceinvoke r0.<android.text.Spanned: int length()>();

        $i2 = interfaceinvoke r0.<android.text.Spanned: int nextSpanTransition(int,int,java.lang.Class)>(-1, $i1, r2);

        $i3 = interfaceinvoke r0.<android.text.Spanned: int length()>();

        if $i2 >= $i3 goto label4;

        return 1;

     label4:
        i4 = i4 + 1;

        goto label3;

     label5:
        return 0;
    }

    public static java.lang.String htmlEncode(java.lang.String)
    {
        java.lang.String r0, $r3;
        char c0;
        java.lang.StringBuilder $r2;
        int $i1, i2;

        r0 := @parameter0: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        i2 = 0;

     label1:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if i2 >= $i1 goto label8;

        c0 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2);

        if c0 == 34 goto label6;

        if c0 == 60 goto label5;

        if c0 == 62 goto label4;

        if c0 == 38 goto label3;

        if c0 == 39 goto label2;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        goto label7;

     label2:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&#39;");

        goto label7;

     label3:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&amp;");

        goto label7;

     label4:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&gt;");

        goto label7;

     label5:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&lt;");

        goto label7;

     label6:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&quot;");

     label7:
        i2 = i2 + 1;

        goto label1;

     label8:
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static int indexOf(java.lang.CharSequence, char)
    {
        java.lang.CharSequence r0;
        char c0;
        int $i1;

        r0 := @parameter0: java.lang.CharSequence;

        c0 := @parameter1: char;

        $i1 = staticinvoke <android.text.TextUtils: int indexOf(java.lang.CharSequence,char,int)>(r0, c0, 0);

        return $i1;
    }

    public static int indexOf(java.lang.CharSequence, char, int)
    {
        java.lang.CharSequence r0;
        char c0;
        int i1, $i2, $i3, $i4;
        java.lang.Class $r1;
        java.lang.String $r2;

        r0 := @parameter0: java.lang.CharSequence;

        c0 := @parameter1: char;

        i1 := @parameter2: int;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r1 != class "Ljava/lang/String;" goto label1;

        $r2 = (java.lang.String) r0;

        $i4 = virtualinvoke $r2.<java.lang.String: int indexOf(int,int)>(c0, i1);

        return $i4;

     label1:
        $i2 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i3 = staticinvoke <android.text.TextUtils: int indexOf(java.lang.CharSequence,char,int,int)>(r0, c0, i1, $i2);

        return $i3;
    }

    public static int indexOf(java.lang.CharSequence, char, int, int)
    {
        java.lang.CharSequence r0;
        char c0, $c2, $c4;
        int i1, $i3, i5, i6, i7, i8, i9, $i10;
        boolean $z0;
        java.lang.Class r1;
        char[] r2;

        r0 := @parameter0: java.lang.CharSequence;

        c0 := @parameter1: char;

        i5 := @parameter2: int;

        i1 := @parameter3: int;

        r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = r0 instanceof android.text.GetChars;

        if $z0 != 0 goto label04;

        if r1 == class "Ljava/lang/StringBuffer;" goto label04;

        if r1 == class "Ljava/lang/StringBuilder;" goto label04;

        if r1 != class "Ljava/lang/String;" goto label01;

        goto label04;

     label01:
        if i5 >= i1 goto label03;

        $c4 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i5);

        if $c4 != c0 goto label02;

        return i5;

     label02:
        i5 = i5 + 1;

        goto label01;

     label03:
        return -1;

     label04:
        r2 = staticinvoke <android.text.TextUtils: char[] obtain(int)>(500);

        i6 = i5;

     label05:
        if i6 >= i1 goto label10;

        i7 = i6 + 500;

        i8 = i7;

        if i7 <= i1 goto label06;

        i8 = i1;

     label06:
        staticinvoke <android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>(r0, i6, i8, r2, 0);

        i9 = 0;

     label07:
        $i10 = i8 - i6;

        if i9 >= $i10 goto label09;

        $c2 = r2[i9];

        if $c2 != c0 goto label08;

        staticinvoke <android.text.TextUtils: void recycle(char[])>(r2);

        $i3 = i9 + i6;

        return $i3;

     label08:
        i9 = i9 + 1;

        goto label07;

     label09:
        i6 = i8;

        goto label05;

     label10:
        staticinvoke <android.text.TextUtils: void recycle(char[])>(r2);

        return -1;
    }

    public static int indexOf(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence r0, r1;
        int $i0, $i1;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i1 = staticinvoke <android.text.TextUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence,int,int)>(r0, r1, 0, $i0);

        return $i1;
    }

    public static int indexOf(java.lang.CharSequence, java.lang.CharSequence, int)
    {
        java.lang.CharSequence r0, r1;
        int i0, $i1, $i2;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        i0 := @parameter2: int;

        $i1 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i2 = staticinvoke <android.text.TextUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence,int,int)>(r0, r1, i0, $i1);

        return $i2;
    }

    public static int indexOf(java.lang.CharSequence, java.lang.CharSequence, int, int)
    {
        java.lang.CharSequence r0, r1;
        int i0, i1, $i3, i4, i5;
        char c2;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

        i4 := @parameter2: int;

        i0 := @parameter3: int;

        i1 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if i1 != 0 goto label1;

        return i4;

     label1:
        c2 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(0);

     label2:
        i5 = staticinvoke <android.text.TextUtils: int indexOf(java.lang.CharSequence,char,int)>(r0, c2, i4);

        $i3 = i0 - i1;

        if i5 <= $i3 goto label3;

        return -1;

     label3:
        if i5 >= 0 goto label4;

        return -1;

     label4:
        $z0 = staticinvoke <android.text.TextUtils: boolean regionMatches(java.lang.CharSequence,int,java.lang.CharSequence,int,int)>(r0, i5, r1, 0, i1);

        if $z0 == 0 goto label5;

        return i5;

     label5:
        i4 = i5 + 1;

        goto label2;
    }

    public static boolean isDigitsOnly(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        int i0, i1, $i2, i3;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        i1 = staticinvoke <java.lang.Character: int codePointAt(java.lang.CharSequence,int)>(r0, i3);

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(int)>(i1);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $i2 = staticinvoke <java.lang.Character: int charCount(int)>(i1);

        i3 = i3 + $i2;

        goto label1;

     label3:
        return 1;
    }

    public static boolean isEmpty(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        int $i0;
        boolean z0;

        r0 := @parameter0: java.lang.CharSequence;

        if r0 == null goto label2;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if $i0 != 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    public static boolean isGraphic(char)
    {
        char c0;
        int i1;
        boolean z0;

        c0 := @parameter0: char;

        i1 = staticinvoke <java.lang.Character: int getType(char)>(c0);

        if i1 == 15 goto label1;

        if i1 == 16 goto label1;

        if i1 == 19 goto label1;

        if i1 == 0 goto label1;

        if i1 == 13 goto label1;

        if i1 == 14 goto label1;

        if i1 == 12 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static boolean isGraphic(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        int i0, i1, i2, i3, $i4;

        r0 := @parameter0: java.lang.CharSequence;

        i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        i1 = staticinvoke <java.lang.Character: int codePointAt(java.lang.CharSequence,int)>(r0, i3);

        i2 = staticinvoke <java.lang.Character: int getType(int)>(i1);

        if i2 == 15 goto label2;

        if i2 == 16 goto label2;

        if i2 == 19 goto label2;

        if i2 == 0 goto label2;

        if i2 == 13 goto label2;

        if i2 == 14 goto label2;

        if i2 == 12 goto label2;

        return 1;

     label2:
        $i4 = staticinvoke <java.lang.Character: int charCount(int)>(i1);

        i3 = i3 + $i4;

        goto label1;

     label3:
        return 0;
    }

    private static boolean isNewline(int)
    {
        int i0, i1;
        boolean z0;

        i0 := @parameter0: int;

        i1 = staticinvoke <java.lang.Character: int getType(int)>(i0);

        if i1 == 14 goto label2;

        if i1 == 13 goto label2;

        if i0 != 10 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    public static boolean isPrintableAscii(char)
    {
        char c0;
        boolean z0;

        c0 := @parameter0: char;

        if 32 > c0 goto label1;

        if c0 <= 126 goto label3;

     label1:
        if c0 == 13 goto label3;

        if c0 != 10 goto label2;

        goto label3;

     label2:
        z0 = 0;

        goto label4;

     label3:
        z0 = 1;

     label4:
        return z0;
    }

    public static boolean isPrintableAsciiOnly(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        int i0, i2;
        char $c1;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        $c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i2);

        $z0 = staticinvoke <android.text.TextUtils: boolean isPrintableAscii(char)>($c1);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return 1;
    }

    private static boolean isWhiteSpace(int)
    {
        int i0;
        boolean $z0, z1;

        i0 := @parameter0: int;

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(int)>(i0);

        if $z0 != 0 goto label2;

        if i0 != 160 goto label1;

        goto label2;

     label1:
        z1 = 0;

        goto label3;

     label2:
        z1 = 1;

     label3:
        return z1;
    }

    public static java.lang.String join(java.lang.CharSequence, java.lang.Iterable)
    {
        java.lang.CharSequence r0;
        boolean $z0, $z1;
        java.lang.StringBuilder $r2;
        java.lang.Object $r3, $r7;
        java.lang.String $r5;
        java.lang.Iterable r9;
        java.util.Iterator r10;

        r0 := @parameter0: java.lang.CharSequence;

        r9 := @parameter1: java.lang.Iterable;

        r10 = interfaceinvoke r9.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return "";

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

     label2:
        $z1 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(r0);

        $r7 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        goto label2;

     label3:
        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static java.lang.String join(java.lang.CharSequence, java.lang.Object[])
    {
        java.lang.CharSequence r0;
        java.lang.Object[] r1;
        int i0, i1;
        java.lang.StringBuilder $r3;
        java.lang.Object $r4, $r8;
        java.lang.String $r6;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.Object[];

        i0 = lengthof r1;

        if i0 != 0 goto label1;

        return "";

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = r1[0];

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        i1 = 1;

     label2:
        if i1 >= i0 goto label3;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>(r0);

        $r8 = r1[i1];

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        i1 = i1 + 1;

        goto label2;

     label3:
        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static int lastIndexOf(java.lang.CharSequence, char)
    {
        java.lang.CharSequence r0;
        char c0;
        int $i1, $i2, $i3;

        r0 := @parameter0: java.lang.CharSequence;

        c0 := @parameter1: char;

        $i1 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i2 = $i1 - 1;

        $i3 = staticinvoke <android.text.TextUtils: int lastIndexOf(java.lang.CharSequence,char,int)>(r0, c0, $i2);

        return $i3;
    }

    public static int lastIndexOf(java.lang.CharSequence, char, int)
    {
        java.lang.CharSequence r0;
        char c0;
        int i1, $i2, $i3;
        java.lang.Class $r1;
        java.lang.String $r2;

        r0 := @parameter0: java.lang.CharSequence;

        c0 := @parameter1: char;

        i1 := @parameter2: int;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r1 != class "Ljava/lang/String;" goto label1;

        $r2 = (java.lang.String) r0;

        $i3 = virtualinvoke $r2.<java.lang.String: int lastIndexOf(int,int)>(c0, i1);

        return $i3;

     label1:
        $i2 = staticinvoke <android.text.TextUtils: int lastIndexOf(java.lang.CharSequence,char,int,int)>(r0, c0, 0, i1);

        return $i2;
    }

    public static int lastIndexOf(java.lang.CharSequence, char, int, int)
    {
        java.lang.CharSequence r0;
        char c0, $c5, $c7;
        int i1, i2, $i3, $i4, $i6, $i8, i9, i10, i11, i12, i13, i14;
        boolean $z0;
        java.lang.Class r1;
        char[] r2;

        r0 := @parameter0: java.lang.CharSequence;

        c0 := @parameter1: char;

        i1 := @parameter2: int;

        i9 := @parameter3: int;

        if i9 >= 0 goto label01;

        return -1;

     label01:
        i10 = i9;

        $i3 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if i9 < $i3 goto label02;

        $i8 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i10 = $i8 - 1;

     label02:
        i11 = i10 + 1;

        r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = r0 instanceof android.text.GetChars;

        if $z0 != 0 goto label07;

        if r1 == class "Ljava/lang/StringBuffer;" goto label07;

        if r1 == class "Ljava/lang/StringBuilder;" goto label07;

        if r1 != class "Ljava/lang/String;" goto label03;

        goto label07;

     label03:
        i12 = i11 - 1;

     label04:
        if i12 < i1 goto label06;

        $c7 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i12);

        if $c7 != c0 goto label05;

        return i12;

     label05:
        i12 = i12 + -1;

        goto label04;

     label06:
        return -1;

     label07:
        r2 = staticinvoke <android.text.TextUtils: char[] obtain(int)>(500);

     label08:
        if i1 >= i11 goto label13;

        i2 = i11 - 500;

        i13 = i2;

        if i2 >= i1 goto label09;

        i13 = i1;

     label09:
        staticinvoke <android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>(r0, i13, i11, r2, 0);

        $i4 = i11 - i13;

        i14 = $i4 - 1;

     label10:
        if i14 < 0 goto label12;

        $c5 = r2[i14];

        if $c5 != c0 goto label11;

        staticinvoke <android.text.TextUtils: void recycle(char[])>(r2);

        $i6 = i14 + i13;

        return $i6;

     label11:
        i14 = i14 + -1;

        goto label10;

     label12:
        i11 = i13;

        goto label08;

     label13:
        staticinvoke <android.text.TextUtils: void recycle(char[])>(r2);

        return -1;
    }

    public static int length(java.lang.String)
    {
        java.lang.String r0;
        int i0;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        goto label2;

     label1:
        i0 = 0;

     label2:
        return i0;
    }

    public static java.lang.CharSequence listEllipsize(android.content.Context, java.util.List, java.lang.String, android.text.TextPaint, float, int)
    {
        java.lang.String r0, r22;
        android.text.TextPaint r1;
        float f0, $f1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i8, $i9, i10, i11;
        int[] r3;
        android.content.res.Configuration $r4;
        android.os.LocaleList $r5;
        java.util.Locale $r6;
        android.text.SpannableStringBuilder $r7;
        byte $b7;
        java.lang.Object[] $r9;
        java.lang.Integer $r10;
        java.lang.CharSequence $r11, $r14, $r15;
        java.lang.Object $r13;
        android.content.Context r18;
        java.util.List r19;
        android.content.res.Resources r20;
        android.text.BidiFormatter r21;

        r18 := @parameter0: android.content.Context;

        r19 := @parameter1: java.util.List;

        r0 := @parameter2: java.lang.String;

        r1 := @parameter3: android.text.TextPaint;

        f0 := @parameter4: float;

        i0 := @parameter5: int;

        if r19 != null goto label01;

        return "";

     label01:
        i1 = interfaceinvoke r19.<java.util.List: int size()>();

        if i1 != 0 goto label02;

        return "";

     label02:
        if r18 != null goto label03;

        r20 = null;

        r21 = staticinvoke <android.text.BidiFormatter: android.text.BidiFormatter getInstance()>();

        goto label04;

     label03:
        r20 = virtualinvoke r18.<android.content.Context: android.content.res.Resources getResources()>();

        $r4 = virtualinvoke r20.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        $r5 = virtualinvoke $r4.<android.content.res.Configuration: android.os.LocaleList getLocales()>();

        $r6 = virtualinvoke $r5.<android.os.LocaleList: java.util.Locale get(int)>(0);

        r21 = staticinvoke <android.text.BidiFormatter: android.text.BidiFormatter getInstance(java.util.Locale)>($r6);

     label04:
        $r7 = new android.text.SpannableStringBuilder;

        specialinvoke $r7.<android.text.SpannableStringBuilder: void <init>()>();

        r3 = newarray (int)[i1];

        i10 = 0;

     label05:
        if i10 >= i1 goto label07;

        $r13 = interfaceinvoke r19.<java.util.List: java.lang.Object get(int)>(i10);

        $r14 = (java.lang.CharSequence) $r13;

        $r15 = virtualinvoke r21.<android.text.BidiFormatter: java.lang.CharSequence unicodeWrap(java.lang.CharSequence)>($r14);

        virtualinvoke $r7.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence)>($r15);

        $i8 = i1 - 1;

        if i10 == $i8 goto label06;

        virtualinvoke $r7.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence)>(r0);

        goto label06;

     label06:
        $i9 = virtualinvoke $r7.<android.text.SpannableStringBuilder: int length()>();

        r3[i10] = $i9;

        i10 = i10 + 1;

        goto label05;

     label07:
        i11 = i1 - 1;

     label08:
        if i11 < 0 goto label13;

        $i3 = r3[i11];

        $i4 = virtualinvoke $r7.<android.text.SpannableStringBuilder: int length()>();

        virtualinvoke $r7.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder delete(int,int)>($i3, $i4);

        $i5 = i1 - i11;

        i2 = $i5 - 1;

        if i2 <= 0 goto label11;

        if r20 != null goto label09;

        r22 = "\u2026";

        goto label10;

     label09:
        $r9 = newarray (java.lang.Object)[1];

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r9[0] = $r10;

        r22 = virtualinvoke r20.<android.content.res.Resources: java.lang.String getQuantityString(int,int,java.lang.Object[])>(i0, i2, $r9);

     label10:
        $r11 = virtualinvoke r21.<android.text.BidiFormatter: java.lang.CharSequence unicodeWrap(java.lang.CharSequence)>(r22);

        virtualinvoke $r7.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence)>($r11);

        goto label11;

     label11:
        $i6 = virtualinvoke $r7.<android.text.SpannableStringBuilder: int length()>();

        $f1 = virtualinvoke r1.<android.text.TextPaint: float measureText(java.lang.CharSequence,int,int)>($r7, 0, $i6);

        $b7 = $f1 cmpg f0;

        if $b7 > 0 goto label12;

        return $r7;

     label12:
        i11 = i11 + -1;

        goto label08;

     label13:
        return "";
    }

    public static java.lang.CharSequence makeSafeForPresentation(java.lang.String, int, float, int)
    {
        float f0;
        int i0, i1, i2, $i3, $i4, $i5, $i8, $i9, $i10, $i11, i12, i13, i14, i15, i16, i17, i18, i19, i20;
        android.text.TextUtils$StringWithRemovedChars $r2;
        android.text.Spanned $r3;
        java.lang.String $r4, $r6, $r9, r10;
        android.text.TextPaint $r5;
        android.text.TextUtils$TruncateAt $r7;
        java.lang.CharSequence $r8;
        boolean $z1, z2, z3, z4, z5, z6;
        byte $b21;

        r10 := @parameter0: java.lang.String;

        i12 := @parameter1: int;

        f0 := @parameter2: float;

        i13 := @parameter3: int;

        $i3 = i13 & 4;

        if $i3 == 0 goto label01;

        z2 = 1;

        goto label02;

     label01:
        z2 = 0;

     label02:
        $i4 = i13 & 2;

        if $i4 == 0 goto label03;

        z3 = 1;

        goto label04;

     label03:
        z3 = 0;

     label04:
        $i5 = i13 & 1;

        if $i5 == 0 goto label05;

        z4 = 1;

        goto label06;

     label05:
        z4 = 0;

     label06:
        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r10);

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentNonnegative(int)>(i12);

        staticinvoke <com.android.internal.util.Preconditions: float checkArgumentNonNegative(float,java.lang.String)>(f0, "ellipsizeDip");

        staticinvoke <com.android.internal.util.Preconditions: int checkFlagsArgument(int,int)>(i13, 7);

        z5 = 1;

        if z2 == 0 goto label08;

        if z3 != 0 goto label07;

        z5 = 1;

        goto label08;

     label07:
        z5 = 0;

     label08:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z5, "Cannot set SAFE_STRING_FLAG_SINGLE_LINE and SAFE_STRING_FLAG_FIRST_LINE at thesame time");

        if i12 <= 0 goto label09;

        $i10 = virtualinvoke r10.<java.lang.String: int length()>();

        $i11 = staticinvoke <java.lang.Math: int min(int,int)>($i10, i12);

        r10 = virtualinvoke r10.<java.lang.String: java.lang.String substring(int,int)>(0, $i11);

        goto label09;

     label09:
        $r2 = new android.text.TextUtils$StringWithRemovedChars;

        $r3 = staticinvoke <android.text.Html: android.text.Spanned fromHtml(java.lang.String)>(r10);

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r2.<android.text.TextUtils$StringWithRemovedChars: void <init>(java.lang.String)>($r4);

        i14 = -1;

        i15 = -1;

        i0 = virtualinvoke $r2.<android.text.TextUtils$StringWithRemovedChars: int length()>();

        i16 = 0;

     label10:
        if i16 >= i0 goto label16;

        i1 = virtualinvoke $r2.<android.text.TextUtils$StringWithRemovedChars: int codePointAt(int)>(i16);

        i17 = staticinvoke <java.lang.Character: int getType(int)>(i1);

        i2 = staticinvoke <java.lang.Character: int charCount(int)>(i1);

        z6 = staticinvoke <android.text.TextUtils: boolean isNewline(int)>(i1);

        if z2 == 0 goto label11;

        if z6 == 0 goto label11;

        virtualinvoke $r2.<android.text.TextUtils$StringWithRemovedChars: void removeAllCharAfter(int)>(i16);

        goto label16;

     label11:
        if z3 == 0 goto label12;

        if z6 == 0 goto label12;

        $i9 = i16 + i2;

        virtualinvoke $r2.<android.text.TextUtils$StringWithRemovedChars: void removeRange(int,int)>(i16, $i9);

        i18 = i14;

        i19 = i15;

        goto label15;

     label12:
        if i17 != 15 goto label13;

        if z6 != 0 goto label13;

        $i8 = i16 + i2;

        virtualinvoke $r2.<android.text.TextUtils$StringWithRemovedChars: void removeRange(int,int)>(i16, $i8);

        i18 = i14;

        i19 = i15;

        goto label15;

     label13:
        i18 = i14;

        i19 = i15;

        if z4 == 0 goto label15;

        i18 = i14;

        i19 = i15;

        $z1 = staticinvoke <android.text.TextUtils: boolean isWhiteSpace(int)>(i1);

        if $z1 != 0 goto label15;

        i20 = i14;

        if i14 != -1 goto label14;

        i20 = i16;

     label14:
        i19 = i16 + i2;

        i18 = i20;

     label15:
        i16 = i16 + i2;

        i14 = i18;

        i15 = i19;

        goto label10;

     label16:
        if z4 == 0 goto label19;

        if i14 != -1 goto label17;

        virtualinvoke $r2.<android.text.TextUtils$StringWithRemovedChars: void removeAllCharAfter(int)>(0);

        goto label19;

     label17:
        if i14 <= 0 goto label18;

        virtualinvoke $r2.<android.text.TextUtils$StringWithRemovedChars: void removeAllCharBefore(int)>(i14);

     label18:
        if i15 >= i0 goto label19;

        virtualinvoke $r2.<android.text.TextUtils$StringWithRemovedChars: void removeAllCharAfter(int)>(i15);

     label19:
        $b21 = f0 cmpl 0.0F;

        if $b21 != 0 goto label20;

        $r9 = virtualinvoke $r2.<android.text.TextUtils$StringWithRemovedChars: java.lang.String toString()>();

        return $r9;

     label20:
        $r5 = new android.text.TextPaint;

        specialinvoke $r5.<android.text.TextPaint: void <init>()>();

        virtualinvoke $r5.<android.text.TextPaint: void setTextSize(float)>(42.0F);

        $r6 = virtualinvoke $r2.<android.text.TextUtils$StringWithRemovedChars: java.lang.String toString()>();

        $r7 = <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt END>;

        $r8 = staticinvoke <android.text.TextUtils: java.lang.CharSequence ellipsize(java.lang.CharSequence,android.text.TextPaint,float,android.text.TextUtils$TruncateAt)>($r6, $r5, f0, $r7);

        return $r8;
    }

    public static java.lang.String nullIfEmpty(java.lang.String)
    {
        boolean $z0;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 == 0 goto label1;

        r0 = null;

        goto label1;

     label1:
        return r0;
    }

    static char[] obtain(int)
    {
        int i0, $i1;
        java.lang.Throwable $r0;
        java.lang.Object r1;
        char[] r2, r3;

        i0 := @parameter0: int;

        r1 = <android.text.TextUtils: java.lang.Object sLock>;

        entermonitor r1;

     label1:
        r2 = <android.text.TextUtils: char[] sTemp>;

        <android.text.TextUtils: char[] sTemp> = null;

        exitmonitor r1;

     label2:
        if r2 == null goto label3;

        r3 = r2;

        $i1 = lengthof r2;

        if $i1 >= i0 goto label4;

     label3:
        r3 = staticinvoke <com.android.internal.util.ArrayUtils: char[] newUnpaddedCharArray(int)>(i0);

     label4:
        return r3;

     label5:
        $r0 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r0;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public static long packRangeInLong(int, int)
    {
        int i0, i1;
        long $l2, $l3, $l4, $l5;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $l2 = (long) i0;

        $l4 = $l2 << 32;

        $l3 = (long) i1;

        $l5 = $l4 | $l3;

        return $l5;
    }

    private static void readSpan(android.os.Parcel, android.text.Spannable, java.lang.Object)
    {
        android.os.Parcel r0;
        android.text.Spannable r1;
        java.lang.Object r2;
        int $i0, $i1, $i2;

        r0 := @parameter0: android.os.Parcel;

        r1 := @parameter1: android.text.Spannable;

        r2 := @parameter2: java.lang.Object;

        $i0 = virtualinvoke r0.<android.os.Parcel: int readInt()>();

        $i1 = virtualinvoke r0.<android.os.Parcel: int readInt()>();

        $i2 = virtualinvoke r0.<android.os.Parcel: int readInt()>();

        interfaceinvoke r1.<android.text.Spannable: void setSpan(java.lang.Object,int,int,int)>(r2, $i0, $i1, $i2);

        return;
    }

    static void recycle(char[])
    {
        java.lang.Object r0;
        int $i0;
        java.lang.Throwable $r1;
        char[] r2;

        r2 := @parameter0: char[];

        $i0 = lengthof r2;

        if $i0 <= 1000 goto label1;

        return;

     label1:
        r0 = <android.text.TextUtils: java.lang.Object sLock>;

        entermonitor r0;

     label2:
        <android.text.TextUtils: char[] sTemp> = r2;

        exitmonitor r0;

     label3:
        return;

     label4:
        $r1 := @caughtexception;

     label5:
        exitmonitor r0;

     label6:
        throw $r1;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public static boolean regionMatches(java.lang.CharSequence, int, java.lang.CharSequence, int, int)
    {
        java.lang.CharSequence r0, r1;
        int i0, i1, i2, $i3, $i4, $i5, i8, i9;
        char[] r2;
        java.lang.IndexOutOfBoundsException $r3;
        char $c6, $c7;
        boolean z1;

        r0 := @parameter0: java.lang.CharSequence;

        i8 := @parameter1: int;

        r1 := @parameter2: java.lang.CharSequence;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        i2 = i1 * 2;

        if i2 < i1 goto label4;

        r2 = staticinvoke <android.text.TextUtils: char[] obtain(int)>(i2);

        $i3 = i8 + i1;

        staticinvoke <android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>(r0, i8, $i3, r2, 0);

        $i4 = i0 + i1;

        staticinvoke <android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>(r1, i0, $i4, r2, i1);

        i9 = 0;

     label1:
        z1 = 1;

        if i9 >= i1 goto label3;

        $c7 = r2[i9];

        $i5 = i9 + i1;

        $c6 = r2[$i5];

        if $c7 == $c6 goto label2;

        z1 = 0;

        goto label3;

     label2:
        i9 = i9 + 1;

        goto label1;

     label3:
        staticinvoke <android.text.TextUtils: void recycle(char[])>(r2);

        return z1;

     label4:
        $r3 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r3;
    }

    public static java.lang.Object[] removeEmptySpans(java.lang.Object[], android.text.Spanned, java.lang.Class)
    {
        android.text.Spanned r0;
        java.lang.Class r1;
        java.lang.Object r2, $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7;
        java.lang.Object[] r5, r6, r7, r8;

        r5 := @parameter0: java.lang.Object[];

        r0 := @parameter1: android.text.Spanned;

        r1 := @parameter2: java.lang.Class;

        r6 = null;

        i5 = 0;

        i6 = 0;

     label1:
        $i0 = lengthof r5;

        if i6 >= $i0 goto label4;

        r2 = r5[i6];

        $i1 = interfaceinvoke r0.<android.text.Spanned: int getSpanStart(java.lang.Object)>(r2);

        $i2 = interfaceinvoke r0.<android.text.Spanned: int getSpanEnd(java.lang.Object)>(r2);

        if $i1 != $i2 goto label2;

        r7 = r6;

        i7 = i5;

        if r6 != null goto label3;

        $i3 = lengthof r5;

        $i4 = $i3 - 1;

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r1, $i4);

        r7 = (java.lang.Object[]) $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, r7, 0, i6);

        i7 = i6;

        goto label3;

     label2:
        r7 = r6;

        i7 = i5;

        if r6 == null goto label3;

        r6[i5] = r2;

        i7 = i5 + 1;

        r7 = r6;

     label3:
        i6 = i6 + 1;

        r6 = r7;

        i5 = i7;

        goto label1;

     label4:
        if r6 == null goto label5;

        $r3 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r1, i5);

        r8 = (java.lang.Object[]) $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, 0, r8, 0, i5);

        return r8;

     label5:
        return r5;
    }

    public static java.lang.CharSequence replace(java.lang.CharSequence, java.lang.String[], java.lang.CharSequence[])
    {
        java.lang.String[] r0;
        java.lang.CharSequence[] r1;
        int i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8;
        android.text.SpannableStringBuilder $r2;
        java.lang.String $r3, $r4, $r7, $r8, $r9;
        java.lang.CharSequence $r5, r10;

        r10 := @parameter0: java.lang.CharSequence;

        r0 := @parameter1: java.lang.String[];

        r1 := @parameter2: java.lang.CharSequence[];

        $r2 = new android.text.SpannableStringBuilder;

        specialinvoke $r2.<android.text.SpannableStringBuilder: void <init>(java.lang.CharSequence)>(r10);

        i5 = 0;

     label1:
        $i1 = lengthof r0;

        if i5 >= $i1 goto label3;

        $r7 = r0[i5];

        i6 = staticinvoke <android.text.TextUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence)>($r2, $r7);

        if i6 < 0 goto label2;

        $r9 = r0[i5];

        $r8 = r0[i5];

        $i3 = virtualinvoke $r8.<java.lang.String: int length()>();

        $i4 = $i3 + i6;

        virtualinvoke $r2.<android.text.SpannableStringBuilder: void setSpan(java.lang.Object,int,int,int)>($r9, i6, $i4, 33);

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        i7 = 0;

     label4:
        $i2 = lengthof r0;

        if i7 >= $i2 goto label6;

        $r3 = r0[i7];

        i0 = virtualinvoke $r2.<android.text.SpannableStringBuilder: int getSpanStart(java.lang.Object)>($r3);

        $r4 = r0[i7];

        i8 = virtualinvoke $r2.<android.text.SpannableStringBuilder: int getSpanEnd(java.lang.Object)>($r4);

        if i0 < 0 goto label5;

        $r5 = r1[i7];

        virtualinvoke $r2.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder replace(int,int,java.lang.CharSequence)>(i0, i8, $r5);

     label5:
        i7 = i7 + 1;

        goto label4;

     label6:
        return $r2;
    }

    public static java.lang.String safeIntern(java.lang.String)
    {
        java.lang.String r0, r1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        r1 = virtualinvoke r0.<java.lang.String: java.lang.String intern()>();

        goto label2;

     label1:
        r1 = null;

     label2:
        return r1;
    }

    public static java.lang.String[] split(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        int $i0;
        java.lang.String[] $r2, $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $r3 = <android.text.TextUtils: java.lang.String[] EMPTY_STRING_ARRAY>;

        return $r3;

     label1:
        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(r1, -1);

        return $r2;
    }

    public static java.lang.String[] split(java.lang.String, java.util.regex.Pattern)
    {
        java.lang.String r0;
        java.util.regex.Pattern r1;
        int $i0;
        java.lang.String[] $r2, $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.regex.Pattern;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $r3 = <android.text.TextUtils: java.lang.String[] EMPTY_STRING_ARRAY>;

        return $r3;

     label1:
        $r2 = virtualinvoke r1.<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>(r0, -1);

        return $r2;
    }

    public static java.lang.CharSequence stringOrSpannedString(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        boolean $z0, $z1;
        java.lang.String $r1;
        android.text.SpannedString $r2;

        r0 := @parameter0: java.lang.CharSequence;

        if r0 != null goto label1;

        return null;

     label1:
        $z0 = r0 instanceof android.text.SpannedString;

        if $z0 == 0 goto label2;

        return r0;

     label2:
        $z1 = r0 instanceof android.text.Spanned;

        if $z1 == 0 goto label3;

        $r2 = new android.text.SpannedString;

        specialinvoke $r2.<android.text.SpannedString: void <init>(java.lang.CharSequence)>(r0);

        return $r2;

     label3:
        $r1 = interfaceinvoke r0.<java.lang.CharSequence: java.lang.String toString()>();

        return $r1;
    }

    public static java.lang.String substring(java.lang.CharSequence, int, int)
    {
        int i0, i1, $i2, $i3;
        char[] r0;
        boolean $z0, $z1, $z2;
        java.lang.String $r1, $r3, $r5, $r6, $r7;
        java.lang.StringBuffer $r2;
        java.lang.StringBuilder $r4;
        java.lang.CharSequence r8;

        r8 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r8 instanceof java.lang.String;

        if $z0 == 0 goto label1;

        $r6 = (java.lang.String) r8;

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);

        return $r7;

     label1:
        $z1 = r8 instanceof java.lang.StringBuilder;

        if $z1 == 0 goto label2;

        $r4 = (java.lang.StringBuilder) r8;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String substring(int,int)>(i0, i1);

        return $r5;

     label2:
        $z2 = r8 instanceof java.lang.StringBuffer;

        if $z2 == 0 goto label3;

        $r2 = (java.lang.StringBuffer) r8;

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String substring(int,int)>(i0, i1);

        return $r3;

     label3:
        $i2 = i1 - i0;

        r0 = staticinvoke <android.text.TextUtils: char[] obtain(int)>($i2);

        staticinvoke <android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>(r8, i0, i1, r0, 0);

        $r1 = new java.lang.String;

        $i3 = i1 - i0;

        specialinvoke $r1.<java.lang.String: void <init>(char[],int,int)>(r0, 0, $i3);

        staticinvoke <android.text.TextUtils: void recycle(char[])>(r0);

        return $r1;
    }

    public static java.lang.CharSequence toUpperCase(java.util.Locale, java.lang.CharSequence, boolean)
    {
        boolean z0, $z1, $z2;
        int i0, i1, i2, i3, i4, i5, i6, i7;
        android.text.Spanned r0;
        java.lang.Object[] r1;
        android.icu.text.CaseMap$Upper $r3, $r6;
        java.lang.Appendable $r5, $r8;
        java.util.Locale r9;
        java.lang.CharSequence r10, r19;
        java.lang.Object r12, r15;
        android.text.SpannableStringBuilder r13, r18;
        android.icu.text.Edits$Iterator r14;
        android.icu.text.Edits r16;
        java.lang.StringBuilder r17;

        r9 := @parameter0: java.util.Locale;

        r10 := @parameter1: java.lang.CharSequence;

        z0 := @parameter2: boolean;

        r16 = new android.icu.text.Edits;

        specialinvoke r16.<android.icu.text.Edits: void <init>()>();

        if z0 != 0 goto label03;

        $r6 = staticinvoke <android.icu.text.CaseMap: android.icu.text.CaseMap$Upper toUpper()>();

        r17 = new java.lang.StringBuilder;

        specialinvoke r17.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<android.icu.text.CaseMap$Upper: java.lang.Appendable apply(java.util.Locale,java.lang.CharSequence,java.lang.Appendable,android.icu.text.Edits)>(r9, r10, r17, r16);

        r12 = (java.lang.StringBuilder) $r8;

        $z2 = virtualinvoke r16.<android.icu.text.Edits: boolean hasChanges()>();

        if $z2 == 0 goto label01;

        goto label02;

     label01:
        r12 = r10;

     label02:
        r19 = (java.lang.CharSequence) r12;

        return r19;

     label03:
        $r3 = staticinvoke <android.icu.text.CaseMap: android.icu.text.CaseMap$Upper toUpper()>();

        r18 = new android.text.SpannableStringBuilder;

        specialinvoke r18.<android.text.SpannableStringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<android.icu.text.CaseMap$Upper: java.lang.Appendable apply(java.util.Locale,java.lang.CharSequence,java.lang.Appendable,android.icu.text.Edits)>(r9, r10, r18, r16);

        r13 = (android.text.SpannableStringBuilder) $r5;

        $z1 = virtualinvoke r16.<android.icu.text.Edits: boolean hasChanges()>();

        if $z1 != 0 goto label04;

        return r10;

     label04:
        r14 = virtualinvoke r16.<android.icu.text.Edits: android.icu.text.Edits$Iterator getFineIterator()>();

        i0 = interfaceinvoke r10.<java.lang.CharSequence: int length()>();

        r0 = (android.text.Spanned) r10;

        i3 = 0;

        r1 = interfaceinvoke r0.<android.text.Spanned: java.lang.Object[] getSpans(int,int,java.lang.Class)>(0, i0, class "Ljava/lang/Object;");

        i1 = lengthof r1;

     label05:
        if i3 >= i1 goto label10;

        r15 = r1[i3];

        i4 = interfaceinvoke r0.<android.text.Spanned: int getSpanStart(java.lang.Object)>(r15);

        i5 = interfaceinvoke r0.<android.text.Spanned: int getSpanEnd(java.lang.Object)>(r15);

        i2 = interfaceinvoke r0.<android.text.Spanned: int getSpanFlags(java.lang.Object)>(r15);

        if i4 != i0 goto label06;

        i6 = virtualinvoke r13.<android.text.SpannableStringBuilder: int length()>();

        goto label07;

     label06:
        i6 = staticinvoke <android.text.TextUtils: int toUpperMapToDest(android.icu.text.Edits$Iterator,int)>(r14, i4);

     label07:
        if i5 != i0 goto label08;

        i7 = virtualinvoke r13.<android.text.SpannableStringBuilder: int length()>();

        goto label09;

     label08:
        i7 = staticinvoke <android.text.TextUtils: int toUpperMapToDest(android.icu.text.Edits$Iterator,int)>(r14, i5);

     label09:
        virtualinvoke r13.<android.text.SpannableStringBuilder: void setSpan(java.lang.Object,int,int,int)>(r15, i6, i7, i2);

        i3 = i3 + 1;

        goto label05;

     label10:
        return r13;
    }

    private static int toUpperMapToDest(android.icu.text.Edits$Iterator, int)
    {
        android.icu.text.Edits$Iterator r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        boolean $z1;

        r0 := @parameter0: android.icu.text.Edits$Iterator;

        i0 := @parameter1: int;

        virtualinvoke r0.<android.icu.text.Edits$Iterator: boolean findSourceIndex(int)>(i0);

        $i1 = virtualinvoke r0.<android.icu.text.Edits$Iterator: int sourceIndex()>();

        if i0 != $i1 goto label1;

        $i9 = virtualinvoke r0.<android.icu.text.Edits$Iterator: int destinationIndex()>();

        return $i9;

     label1:
        $z1 = virtualinvoke r0.<android.icu.text.Edits$Iterator: boolean hasChange()>();

        if $z1 == 0 goto label2;

        $i6 = virtualinvoke r0.<android.icu.text.Edits$Iterator: int destinationIndex()>();

        $i7 = virtualinvoke r0.<android.icu.text.Edits$Iterator: int newLength()>();

        $i8 = $i6 + $i7;

        return $i8;

     label2:
        $i2 = virtualinvoke r0.<android.icu.text.Edits$Iterator: int destinationIndex()>();

        $i3 = virtualinvoke r0.<android.icu.text.Edits$Iterator: int sourceIndex()>();

        $i4 = i0 - $i3;

        $i5 = $i2 + $i4;

        return $i5;
    }

    public static java.lang.CharSequence trimNoCopySpans(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        boolean $z0;
        android.text.SpannableStringBuilder $r1;

        r0 := @parameter0: java.lang.CharSequence;

        if r0 == null goto label1;

        $z0 = r0 instanceof android.text.Spanned;

        if $z0 == 0 goto label1;

        $r1 = new android.text.SpannableStringBuilder;

        specialinvoke $r1.<android.text.SpannableStringBuilder: void <init>(java.lang.CharSequence)>(r0);

        return $r1;

     label1:
        return r0;
    }

    public static java.lang.CharSequence trimToLengthWithEllipsis(java.lang.CharSequence, int)
    {
        int i0, $i1, $i2;
        java.lang.CharSequence r0, r5, r9;
        java.lang.String $r2;
        java.lang.Object r6;
        java.lang.StringBuilder r8;

        r5 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        r0 = staticinvoke <android.text.TextUtils: java.lang.CharSequence trimToSize(java.lang.CharSequence,int)>(r5, i0);

        r6 = r0;

        $i1 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i2 = interfaceinvoke r5.<java.lang.CharSequence: int length()>();

        if $i1 >= $i2 goto label1;

        r8 = new java.lang.StringBuilder;

        specialinvoke r8.<java.lang.StringBuilder: void <init>()>();

        $r2 = interfaceinvoke r0.<java.lang.CharSequence: java.lang.String toString()>();

        virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...");

        r6 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        r9 = (java.lang.CharSequence) r6;

        return r9;
    }

    public static java.lang.CharSequence trimToParcelableSize(java.lang.CharSequence)
    {
        java.lang.CharSequence r0, $r1;

        r0 := @parameter0: java.lang.CharSequence;

        $r1 = staticinvoke <android.text.TextUtils: java.lang.CharSequence trimToSize(java.lang.CharSequence,int)>(r0, 100000);

        return $r1;
    }

    public static java.lang.CharSequence trimToSize(java.lang.CharSequence, int)
    {
        java.lang.CharSequence r0, $r1;
        int i0, $i1, $i2, i5;
        boolean $z0, $z1, $z2, z3;
        char $c3, $c4;

        r0 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        if i0 <= 0 goto label1;

        z3 = 1;

        goto label2;

     label1:
        z3 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean)>(z3);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 != 0 goto label5;

        $i1 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if $i1 > i0 goto label3;

        goto label5;

     label3:
        i5 = i0;

        $i2 = i0 - 1;

        $c3 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i2);

        $z1 = staticinvoke <java.lang.Character: boolean isHighSurrogate(char)>($c3);

        if $z1 == 0 goto label4;

        i5 = i0;

        $c4 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i0);

        $z2 = staticinvoke <java.lang.Character: boolean isLowSurrogate(char)>($c4);

        if $z2 == 0 goto label4;

        i5 = i0 - 1;

     label4:
        $r1 = interfaceinvoke r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(0, i5);

        return $r1;

     label5:
        return r0;
    }

    public static int unpackRangeEndFromLong(long)
    {
        long l0, $l1;
        int $i2;

        l0 := @parameter0: long;

        $l1 = 4294967295L & l0;

        $i2 = (int) $l1;

        return $i2;
    }

    public static int unpackRangeStartFromLong(long)
    {
        long l0, $l1;
        int $i2;

        l0 := @parameter0: long;

        $l1 = l0 >>> 32;

        $i2 = (int) $l1;

        return $i2;
    }

    public static java.lang.String withoutPrefix(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        boolean $z0;
        int $i0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label3;

        if r1 != null goto label1;

        goto label3;

     label1:
        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>(r0);

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i0);

        goto label2;

     label2:
        return r1;

     label3:
        return r1;
    }

    public static void wrap(java.lang.StringBuilder, java.lang.String, java.lang.String)
    {
        java.lang.StringBuilder r0;
        java.lang.String r1, r2;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(0, r1);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        return;
    }

    public static void writeToParcel(java.lang.CharSequence, android.os.Parcel, int)
    {
        android.os.Parcel r0;
        int i0, i1, $i2, $i3, i5;
        android.text.Spanned r1;
        java.lang.Object[] r2;
        java.lang.Object r3, r15, r16;
        boolean $z0, $z1, $z2;
        java.lang.String $r4, $r5, $r9, $r12;
        java.lang.StringBuilder $r6;
        java.lang.Class $r8;
        android.text.style.CharacterStyle $r13;
        java.lang.CharSequence r14;
        android.text.ParcelableSpan r17;

        r14 := @parameter0: java.lang.CharSequence;

        r0 := @parameter1: android.os.Parcel;

        i0 := @parameter2: int;

        $z0 = r14 instanceof android.text.Spanned;

        if $z0 == 0 goto label7;

        virtualinvoke r0.<android.os.Parcel: void writeInt(int)>(0);

        $r5 = interfaceinvoke r14.<java.lang.CharSequence: java.lang.String toString()>();

        virtualinvoke r0.<android.os.Parcel: void writeString8(java.lang.String)>($r5);

        r1 = (android.text.Spanned) r14;

        $i2 = interfaceinvoke r14.<java.lang.CharSequence: int length()>();

        r2 = interfaceinvoke r1.<android.text.Spanned: java.lang.Object[] getSpans(int,int,java.lang.Class)>(0, $i2, class "Ljava/lang/Object;");

        i5 = 0;

     label1:
        $i3 = lengthof r2;

        if i5 >= $i3 goto label6;

        r3 = r2[i5];

        r15 = r2[i5];

        r16 = r15;

        $z1 = r15 instanceof android.text.style.CharacterStyle;

        if $z1 == 0 goto label2;

        $r13 = (android.text.style.CharacterStyle) r15;

        r16 = virtualinvoke $r13.<android.text.style.CharacterStyle: android.text.style.CharacterStyle getUnderlying()>();

     label2:
        $z2 = r16 instanceof android.text.ParcelableSpan;

        if $z2 == 0 goto label5;

        r17 = (android.text.ParcelableSpan) r16;

        i1 = interfaceinvoke r17.<android.text.ParcelableSpan: int getSpanTypeIdInternal()>();

        if i1 < 1 goto label4;

        if i1 <= 29 goto label3;

        goto label4;

     label3:
        virtualinvoke r0.<android.os.Parcel: void writeInt(int)>(i1);

        interfaceinvoke r17.<android.text.ParcelableSpan: void writeToParcelInternal(android.os.Parcel,int)>(r0, i0);

        staticinvoke <android.text.TextUtils: void writeWhere(android.os.Parcel,android.text.Spanned,java.lang.Object)>(r0, r1, r3);

        goto label5;

     label4:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("External class \"");

        $r8 = virtualinvoke r17.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" is attempting to use the frameworks-only ParcelableSpan interface");

        $r12 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("TextUtils", $r12);

     label5:
        i5 = i5 + 1;

        goto label1;

     label6:
        virtualinvoke r0.<android.os.Parcel: void writeInt(int)>(0);

        goto label9;

     label7:
        virtualinvoke r0.<android.os.Parcel: void writeInt(int)>(1);

        if r14 == null goto label8;

        $r4 = interfaceinvoke r14.<java.lang.CharSequence: java.lang.String toString()>();

        virtualinvoke r0.<android.os.Parcel: void writeString8(java.lang.String)>($r4);

        goto label9;

     label8:
        virtualinvoke r0.<android.os.Parcel: void writeString8(java.lang.String)>(null);

     label9:
        return;
    }

    private static void writeWhere(android.os.Parcel, android.text.Spanned, java.lang.Object)
    {
        android.os.Parcel r0;
        android.text.Spanned r1;
        java.lang.Object r2;
        int $i0, $i1, $i2;

        r0 := @parameter0: android.os.Parcel;

        r1 := @parameter1: android.text.Spanned;

        r2 := @parameter2: java.lang.Object;

        $i0 = interfaceinvoke r1.<android.text.Spanned: int getSpanStart(java.lang.Object)>(r2);

        virtualinvoke r0.<android.os.Parcel: void writeInt(int)>($i0);

        $i1 = interfaceinvoke r1.<android.text.Spanned: int getSpanEnd(java.lang.Object)>(r2);

        virtualinvoke r0.<android.os.Parcel: void writeInt(int)>($i1);

        $i2 = interfaceinvoke r1.<android.text.Spanned: int getSpanFlags(java.lang.Object)>(r2);

        virtualinvoke r0.<android.os.Parcel: void writeInt(int)>($i2);

        return;
    }
}
