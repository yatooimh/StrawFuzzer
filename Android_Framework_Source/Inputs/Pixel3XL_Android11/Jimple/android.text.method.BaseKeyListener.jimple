public abstract class android.text.method.BaseKeyListener extends android.text.method.MetaKeyKeyListener implements android.text.method.KeyListener
{
    private static final int CARRIAGE_RETURN;
    private static final int LINE_FEED;
    static final java.lang.Object OLD_SEL_START;
    static android.graphics.Paint sCachedPaint;
    private final java.lang.Object mLock;

    static void <clinit>()
    {
        android.text.NoCopySpan$Concrete $r0;

        <android.text.method.BaseKeyListener: int LINE_FEED> = 10;

        <android.text.method.BaseKeyListener: int CARRIAGE_RETURN> = 13;

        $r0 = new android.text.NoCopySpan$Concrete;

        specialinvoke $r0.<android.text.NoCopySpan$Concrete: void <init>()>();

        <android.text.method.BaseKeyListener: java.lang.Object OLD_SEL_START> = $r0;

        <android.text.method.BaseKeyListener: android.graphics.Paint sCachedPaint> = null;

        return;
    }

    public void <init>()
    {
        android.text.method.BaseKeyListener r0;
        java.lang.Object $r1;

        r0 := @this: android.text.method.BaseKeyListener;

        specialinvoke r0.<android.text.method.MetaKeyKeyListener: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<android.text.method.BaseKeyListener: java.lang.Object mLock> = $r1;

        return;
    }

    private static int adjustReplacementSpan(java.lang.CharSequence, int, boolean)
    {
        java.lang.CharSequence r0;
        boolean z0, $z1;
        android.text.style.ReplacementSpan[] r1;
        int i0, i1, $i2, i3, i4, i5, i6;
        android.text.Spanned $r2, $r5, $r7;
        java.lang.Object[] $r3;
        android.text.style.ReplacementSpan $r4, $r6;

        r0 := @parameter0: java.lang.CharSequence;

        i3 := @parameter1: int;

        z0 := @parameter2: boolean;

        $z1 = r0 instanceof android.text.Spanned;

        if $z1 != 0 goto label1;

        return i3;

     label1:
        $r2 = (android.text.Spanned) r0;

        $r3 = interfaceinvoke $r2.<android.text.Spanned: java.lang.Object[] getSpans(int,int,java.lang.Class)>(i3, i3, class "Landroid/text/style/ReplacementSpan;");

        r1 = (android.text.style.ReplacementSpan[]) $r3;

        i4 = 0;

        i5 = i3;

     label2:
        $i2 = lengthof r1;

        if i4 >= $i2 goto label5;

        $r5 = (android.text.Spanned) r0;

        $r4 = r1[i4];

        i0 = interfaceinvoke $r5.<android.text.Spanned: int getSpanStart(java.lang.Object)>($r4);

        $r7 = (android.text.Spanned) r0;

        $r6 = r1[i4];

        i1 = interfaceinvoke $r7.<android.text.Spanned: int getSpanEnd(java.lang.Object)>($r6);

        i6 = i5;

        if i0 >= i5 goto label4;

        i6 = i5;

        if i1 <= i5 goto label4;

        if z0 == 0 goto label3;

        i6 = i0;

        goto label4;

     label3:
        i6 = i1;

     label4:
        i4 = i4 + 1;

        i5 = i6;

        goto label2;

     label5:
        return i5;
    }

    private boolean backspaceOrForwardDelete(android.view.View, android.text.Editable, int, android.view.KeyEvent, boolean)
    {
        android.text.method.BaseKeyListener r0;
        android.text.Editable r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, z6, z7, z8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10;
        android.graphics.Paint $r3, r8, r10;
        android.widget.TextView $r4;
        java.lang.Throwable $r5;
        android.view.View r6;
        android.view.KeyEvent r7;
        java.lang.Object r9;

        r0 := @this: android.text.method.BaseKeyListener;

        r6 := @parameter0: android.view.View;

        r1 := @parameter1: android.text.Editable;

        i8 := @parameter2: int;

        r7 := @parameter3: android.view.KeyEvent;

        z0 := @parameter4: boolean;

        $i0 = virtualinvoke r7.<android.view.KeyEvent: int getMetaState()>();

        $i1 = $i0 & -28916;

        $z1 = staticinvoke <android.view.KeyEvent: boolean metaStateHasNoModifiers(int)>($i1);

        if $z1 != 0 goto label01;

        return 0;

     label01:
        $z2 = specialinvoke r0.<android.text.method.BaseKeyListener: boolean deleteSelection(android.view.View,android.text.Editable)>(r6, r1);

        if $z2 == 0 goto label02;

        return 1;

     label02:
        $i2 = virtualinvoke r7.<android.view.KeyEvent: int getMetaState()>();

        $i3 = $i2 & 4096;

        if $i3 == 0 goto label03;

        z6 = 1;

        goto label04;

     label03:
        z6 = 0;

     label04:
        $i4 = staticinvoke <android.text.method.BaseKeyListener: int getMetaState(java.lang.CharSequence,int,android.view.KeyEvent)>(r1, 1, r7);

        if $i4 != 1 goto label05;

        z7 = 1;

        goto label06;

     label05:
        z7 = 0;

     label06:
        $i5 = staticinvoke <android.text.method.BaseKeyListener: int getMetaState(java.lang.CharSequence,int,android.view.KeyEvent)>(r1, 2, r7);

        if $i5 != 1 goto label07;

        z8 = 1;

        goto label08;

     label07:
        z8 = 0;

     label08:
        if z6 == 0 goto label11;

        if z8 != 0 goto label10;

        if z7 == 0 goto label09;

        goto label10;

     label09:
        $z5 = specialinvoke r0.<android.text.method.BaseKeyListener: boolean deleteUntilWordBoundary(android.view.View,android.text.Editable,boolean)>(r6, r1, z0);

        return $z5;

     label10:
        return 0;

     label11:
        if z8 == 0 goto label12;

        $z4 = specialinvoke r0.<android.text.method.BaseKeyListener: boolean deleteLine(android.view.View,android.text.Editable)>(r6, r1);

        if $z4 == 0 goto label12;

        return 1;

     label12:
        i9 = staticinvoke <android.text.Selection: int getSelectionEnd(java.lang.CharSequence)>(r1);

        if z0 == 0 goto label20;

        $z3 = r6 instanceof android.widget.TextView;

        if $z3 == 0 goto label13;

        $r4 = (android.widget.TextView) r6;

        r8 = virtualinvoke $r4.<android.widget.TextView: android.text.TextPaint getPaint()>();

        goto label16;

     label13:
        r9 = r0.<android.text.method.BaseKeyListener: java.lang.Object mLock>;

        entermonitor r9;

     label14:
        $r3 = <android.text.method.BaseKeyListener: android.graphics.Paint sCachedPaint>;

        if $r3 != null goto label15;

        r10 = new android.graphics.Paint;

        specialinvoke r10.<android.graphics.Paint: void <init>()>();

        <android.text.method.BaseKeyListener: android.graphics.Paint sCachedPaint> = r10;

     label15:
        r8 = <android.text.method.BaseKeyListener: android.graphics.Paint sCachedPaint>;

        exitmonitor r9;

     label16:
        i10 = staticinvoke <android.text.method.BaseKeyListener: int getOffsetForForwardDeleteKey(java.lang.CharSequence,int,android.graphics.Paint)>(r1, i9, r8);

        goto label21;

     label17:
        $r5 := @caughtexception;

     label18:
        exitmonitor r9;

     label19:
        throw $r5;

     label20:
        i10 = staticinvoke <android.text.method.BaseKeyListener: int getOffsetForBackspaceKey(java.lang.CharSequence,int)>(r1, i9);

     label21:
        if i9 == i10 goto label22;

        $i6 = staticinvoke <java.lang.Math: int min(int,int)>(i9, i10);

        $i7 = staticinvoke <java.lang.Math: int max(int,int)>(i9, i10);

        interfaceinvoke r1.<android.text.Editable: android.text.Editable delete(int,int)>($i6, $i7);

        return 1;

     label22:
        return 0;

        catch java.lang.Throwable from label14 to label15 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    private boolean deleteLine(android.view.View, android.text.Editable)
    {
        android.text.method.BaseKeyListener r0;
        android.text.Editable r1;
        int i0, $i1, i2, i3;
        boolean $z0;
        android.widget.TextView $r2;
        android.view.View r4;
        android.text.Layout r5;

        r0 := @this: android.text.method.BaseKeyListener;

        r4 := @parameter0: android.view.View;

        r1 := @parameter1: android.text.Editable;

        $z0 = r4 instanceof android.widget.TextView;

        if $z0 == 0 goto label1;

        $r2 = (android.widget.TextView) r4;

        r5 = virtualinvoke $r2.<android.widget.TextView: android.text.Layout getLayout()>();

        if r5 == null goto label1;

        $i1 = staticinvoke <android.text.Selection: int getSelectionStart(java.lang.CharSequence)>(r1);

        i2 = virtualinvoke r5.<android.text.Layout: int getLineForOffset(int)>($i1);

        i0 = virtualinvoke r5.<android.text.Layout: int getLineStart(int)>(i2);

        i3 = virtualinvoke r5.<android.text.Layout: int getLineEnd(int)>(i2);

        if i3 == i0 goto label1;

        interfaceinvoke r1.<android.text.Editable: android.text.Editable delete(int,int)>(i0, i3);

        return 1;

     label1:
        return 0;
    }

    private boolean deleteSelection(android.view.View, android.text.Editable)
    {
        android.text.method.BaseKeyListener r0;
        android.view.View r1;
        android.text.Editable r2;
        int i0, i1, i2, i3;

        r0 := @this: android.text.method.BaseKeyListener;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.text.Editable;

        i0 = staticinvoke <android.text.Selection: int getSelectionStart(java.lang.CharSequence)>(r2);

        i1 = staticinvoke <android.text.Selection: int getSelectionEnd(java.lang.CharSequence)>(r2);

        i2 = i0;

        i3 = i1;

        if i1 >= i0 goto label1;

        i3 = i0;

        i2 = i1;

     label1:
        if i2 == i3 goto label2;

        interfaceinvoke r2.<android.text.Editable: android.text.Editable delete(int,int)>(i2, i3);

        return 1;

     label2:
        return 0;
    }

    private boolean deleteUntilWordBoundary(android.view.View, android.text.Editable, boolean)
    {
        android.text.method.BaseKeyListener r0;
        android.text.Editable r1;
        boolean z0, $z1;
        int $i0, $i1, $i2, i3, i5, i6, i7, i9;
        android.text.method.WordIterator $r3, r6, r7;
        android.widget.TextView $r4;
        android.view.View r5;

        r0 := @this: android.text.method.BaseKeyListener;

        r5 := @parameter0: android.view.View;

        r1 := @parameter1: android.text.Editable;

        z0 := @parameter2: boolean;

        i3 = staticinvoke <android.text.Selection: int getSelectionStart(java.lang.CharSequence)>(r1);

        $i0 = staticinvoke <android.text.Selection: int getSelectionEnd(java.lang.CharSequence)>(r1);

        if i3 == $i0 goto label1;

        return 0;

     label1:
        if z0 != 0 goto label2;

        if i3 == 0 goto label3;

     label2:
        if z0 == 0 goto label4;

        $i2 = interfaceinvoke r1.<android.text.Editable: int length()>();

        if i3 != $i2 goto label4;

     label3:
        return 0;

     label4:
        r6 = null;

        $z1 = r5 instanceof android.widget.TextView;

        if $z1 == 0 goto label5;

        $r4 = (android.widget.TextView) r5;

        r6 = virtualinvoke $r4.<android.widget.TextView: android.text.method.WordIterator getWordIterator()>();

     label5:
        r7 = r6;

        if r6 != null goto label6;

        $r3 = new android.text.method.WordIterator;

        specialinvoke $r3.<android.text.method.WordIterator: void <init>()>();

        r7 = $r3;

     label6:
        if z0 == 0 goto label7;

        $i1 = interfaceinvoke r1.<android.text.Editable: int length()>();

        virtualinvoke r7.<android.text.method.WordIterator: void setCharSequence(java.lang.CharSequence,int,int)>(r1, i3, $i1);

        i5 = virtualinvoke r7.<android.text.method.WordIterator: int following(int)>(i3);

        i6 = i3;

        i7 = i5;

        if i5 != -1 goto label8;

        i7 = interfaceinvoke r1.<android.text.Editable: int length()>();

        i6 = i3;

        goto label8;

     label7:
        virtualinvoke r7.<android.text.method.WordIterator: void setCharSequence(java.lang.CharSequence,int,int)>(r1, 0, i3);

        i9 = virtualinvoke r7.<android.text.method.WordIterator: int preceding(int)>(i3);

        i6 = i9;

        i7 = i3;

        if i9 != -1 goto label8;

        i6 = 0;

        i7 = i3;

     label8:
        interfaceinvoke r1.<android.text.Editable: android.text.Editable delete(int,int)>(i6, i7);

        return 1;
    }

    private static int getOffsetForBackspaceKey(java.lang.CharSequence, int)
    {
        int i0, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, i24, i25, i27, i28, i29, i30, i31, i32, i33, i34;
        boolean $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20;
        java.lang.StringBuilder $r0;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5;
        java.lang.CharSequence r6;
        byte b26;

        r6 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        if i0 > 1 goto label01;

        return 0;

     label01:
        i24 = 0;

        i25 = 0;

        b26 = 0;

        i27 = i0;

     label02:
        i2 = staticinvoke <java.lang.Character: int codePointBefore(java.lang.CharSequence,int)>(r6, i27);

        $i3 = staticinvoke <java.lang.Character: int charCount(int)>(i2);

        i27 = i27 - $i3;

        tableswitch(b26)
        {
            case 0: goto label35;
            case 1: goto label33;
            case 2: goto label30;
            case 3: goto label28;
            case 4: goto label25;
            case 5: goto label23;
            case 6: goto label20;
            case 7: goto label18;
            case 8: goto label13;
            case 9: goto label11;
            case 10: goto label09;
            case 11: goto label07;
            case 12: goto label04;
            default: goto label03;
        };

     label03:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("state ");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b26);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is unknown");

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label04:
        $z1 = staticinvoke <android.text.Emoji: boolean isTagSpecChar(int)>(i2);

        if $z1 == 0 goto label05;

        i24 = i24 + 2;

        i28 = i25;

        goto label43;

     label05:
        $z2 = staticinvoke <android.text.Emoji: boolean isEmoji(int)>(i2);

        if $z2 == 0 goto label06;

        $i6 = staticinvoke <java.lang.Character: int charCount(int)>(i2);

        i24 = i24 + $i6;

        b26 = 13;

        i28 = i25;

        goto label43;

     label06:
        i24 = 2;

        b26 = 13;

        i28 = i25;

        goto label43;

     label07:
        $z3 = staticinvoke <android.text.Emoji: boolean isRegionalIndicatorSymbol(int)>(i2);

        if $z3 == 0 goto label08;

        i24 = i24 + -2;

        b26 = 10;

        i28 = i25;

        goto label43;

     label08:
        b26 = 13;

        i28 = i25;

        goto label43;

     label09:
        $z4 = staticinvoke <android.text.Emoji: boolean isRegionalIndicatorSymbol(int)>(i2);

        if $z4 == 0 goto label10;

        i24 = i24 + 2;

        b26 = 11;

        i28 = i25;

        goto label43;

     label10:
        b26 = 13;

        i28 = i25;

        goto label43;

     label11:
        $z5 = staticinvoke <android.text.Emoji: boolean isEmoji(int)>(i2);

        if $z5 == 0 goto label12;

        $i7 = i25 + 1;

        $i8 = staticinvoke <java.lang.Character: int charCount(int)>(i2);

        $i9 = $i7 + $i8;

        i24 = i24 + $i9;

        i28 = 0;

        b26 = 7;

        goto label43;

     label12:
        b26 = 13;

        i28 = i25;

        goto label43;

     label13:
        $z6 = staticinvoke <android.text.Emoji: boolean isEmoji(int)>(i2);

        if $z6 == 0 goto label16;

        $i10 = staticinvoke <java.lang.Character: int charCount(int)>(i2);

        $i11 = $i10 + 1;

        i24 = i24 + $i11;

        $z8 = staticinvoke <android.text.Emoji: boolean isEmojiModifier(int)>(i2);

        if $z8 == 0 goto label14;

        b26 = 4;

        goto label15;

     label14:
        b26 = 7;

     label15:
        i28 = i25;

        goto label43;

     label16:
        $z7 = staticinvoke <android.text.method.BaseKeyListener: boolean isVariationSelector(int)>(i2);

        if $z7 == 0 goto label17;

        i28 = staticinvoke <java.lang.Character: int charCount(int)>(i2);

        b26 = 9;

        goto label43;

     label17:
        b26 = 13;

        i28 = i25;

        goto label43;

     label18:
        $i12 = <android.text.Emoji: int ZERO_WIDTH_JOINER>;

        if i2 != $i12 goto label19;

        b26 = 8;

        i28 = i25;

        goto label43;

     label19:
        b26 = 13;

        i28 = i25;

        goto label43;

     label20:
        $z9 = staticinvoke <android.text.Emoji: boolean isEmoji(int)>(i2);

        if $z9 == 0 goto label21;

        $i15 = staticinvoke <java.lang.Character: int charCount(int)>(i2);

        i24 = i24 + $i15;

        b26 = 7;

        i28 = i25;

        goto label43;

     label21:
        i29 = i24;

        $z10 = staticinvoke <android.text.method.BaseKeyListener: boolean isVariationSelector(int)>(i2);

        if $z10 != 0 goto label22;

        i29 = i24;

        $i13 = staticinvoke <android.icu.lang.UCharacter: int getCombiningClass(int)>(i2);

        if $i13 != 0 goto label22;

        $i14 = staticinvoke <java.lang.Character: int charCount(int)>(i2);

        i29 = i24 + $i14;

     label22:
        b26 = 13;

        i24 = i29;

        i28 = i25;

        goto label43;

     label23:
        i30 = i24;

        $z11 = staticinvoke <android.text.Emoji: boolean isEmojiModifierBase(int)>(i2);

        if $z11 == 0 goto label24;

        $i16 = staticinvoke <java.lang.Character: int charCount(int)>(i2);

        $i17 = i25 + $i16;

        i30 = i24 + $i17;

     label24:
        b26 = 13;

        i24 = i30;

        i28 = i25;

        goto label43;

     label25:
        $z12 = staticinvoke <android.text.method.BaseKeyListener: boolean isVariationSelector(int)>(i2);

        if $z12 == 0 goto label26;

        i28 = staticinvoke <java.lang.Character: int charCount(int)>(i2);

        b26 = 5;

        goto label43;

     label26:
        i31 = i24;

        $z13 = staticinvoke <android.text.Emoji: boolean isEmojiModifierBase(int)>(i2);

        if $z13 == 0 goto label27;

        $i18 = staticinvoke <java.lang.Character: int charCount(int)>(i2);

        i31 = i24 + $i18;

     label27:
        b26 = 13;

        i24 = i31;

        i28 = i25;

        goto label43;

     label28:
        i32 = i24;

        $z14 = staticinvoke <android.text.Emoji: boolean isKeycapBase(int)>(i2);

        if $z14 == 0 goto label29;

        $i19 = staticinvoke <java.lang.Character: int charCount(int)>(i2);

        $i20 = i25 + $i19;

        i32 = i24 + $i20;

     label29:
        b26 = 13;

        i24 = i32;

        i28 = i25;

        goto label43;

     label30:
        $z15 = staticinvoke <android.text.method.BaseKeyListener: boolean isVariationSelector(int)>(i2);

        if $z15 == 0 goto label31;

        i28 = staticinvoke <java.lang.Character: int charCount(int)>(i2);

        b26 = 3;

        goto label43;

     label31:
        i33 = i24;

        $z16 = staticinvoke <android.text.Emoji: boolean isKeycapBase(int)>(i2);

        if $z16 == 0 goto label32;

        $i21 = staticinvoke <java.lang.Character: int charCount(int)>(i2);

        i33 = i24 + $i21;

     label32:
        b26 = 13;

        i24 = i33;

        i28 = i25;

        goto label43;

     label33:
        i34 = i24;

        if i2 != 13 goto label34;

        i34 = i24 + 1;

     label34:
        b26 = 13;

        i24 = i34;

        i28 = i25;

        goto label43;

     label35:
        i24 = staticinvoke <java.lang.Character: int charCount(int)>(i2);

        if i2 != 10 goto label36;

        b26 = 1;

        i28 = i25;

        goto label43;

     label36:
        $z17 = staticinvoke <android.text.method.BaseKeyListener: boolean isVariationSelector(int)>(i2);

        if $z17 == 0 goto label37;

        b26 = 6;

        i28 = i25;

        goto label43;

     label37:
        $z18 = staticinvoke <android.text.Emoji: boolean isRegionalIndicatorSymbol(int)>(i2);

        if $z18 == 0 goto label38;

        b26 = 10;

        i28 = i25;

        goto label43;

     label38:
        $z19 = staticinvoke <android.text.Emoji: boolean isEmojiModifier(int)>(i2);

        if $z19 == 0 goto label39;

        b26 = 4;

        i28 = i25;

        goto label43;

     label39:
        $i22 = <android.text.Emoji: int COMBINING_ENCLOSING_KEYCAP>;

        if i2 != $i22 goto label40;

        b26 = 2;

        i28 = i25;

        goto label43;

     label40:
        $z20 = staticinvoke <android.text.Emoji: boolean isEmoji(int)>(i2);

        if $z20 == 0 goto label41;

        b26 = 7;

        i28 = i25;

        goto label43;

     label41:
        $i23 = <android.text.Emoji: int CANCEL_TAG>;

        if i2 != $i23 goto label42;

        b26 = 12;

        i28 = i25;

        goto label43;

     label42:
        b26 = 13;

        i28 = i25;

     label43:
        if i27 <= 0 goto label45;

        if b26 != 13 goto label44;

        goto label45;

     label44:
        i25 = i28;

        goto label02;

     label45:
        $i4 = i0 - i24;

        $i5 = staticinvoke <android.text.method.BaseKeyListener: int adjustReplacementSpan(java.lang.CharSequence,int,boolean)>(r6, $i4, 1);

        return $i5;
    }

    private static int getOffsetForForwardDeleteKey(java.lang.CharSequence, int, android.graphics.Paint)
    {
        java.lang.CharSequence r0;
        int i0, i1, $i2, $i3, $i4;
        android.graphics.Paint r1;

        r0 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        r1 := @parameter2: android.graphics.Paint;

        i1 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i2 = i1 - 1;

        if i0 < $i2 goto label1;

        return i1;

     label1:
        $i3 = virtualinvoke r1.<android.graphics.Paint: int getTextRunCursor(java.lang.CharSequence,int,int,boolean,int,int)>(r0, i0, i1, 0, i0, 0);

        $i4 = staticinvoke <android.text.method.BaseKeyListener: int adjustReplacementSpan(java.lang.CharSequence,int,boolean)>(r0, $i3, 0);

        return $i4;
    }

    private static boolean isVariationSelector(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        $z0 = staticinvoke <android.icu.lang.UCharacter: boolean hasBinaryProperty(int,int)>(i0, 36);

        return $z0;
    }

    static int makeTextContentType(android.text.method.TextKeyListener$Capitalize, boolean)
    {
        android.text.method.TextKeyListener$Capitalize r0;
        boolean z0;
        int[] $r1;
        int $i0, i2;
        char c1, c3;

        r0 := @parameter0: android.text.method.TextKeyListener$Capitalize;

        z0 := @parameter1: boolean;

        c1 = 1;

        $r1 = <android.text.method.BaseKeyListener$1: int[] $SwitchMap$android$text$method$TextKeyListener$Capitalize>;

        $i0 = virtualinvoke r0.<android.text.method.TextKeyListener$Capitalize: int ordinal()>();

        i2 = $r1[$i0];

        if i2 == 1 goto label3;

        if i2 == 2 goto label2;

        if i2 == 3 goto label1;

        goto label4;

     label1:
        c1 = 1 | 16384;

        goto label4;

     label2:
        c1 = 1 | 8192;

        goto label4;

     label3:
        c1 = 1 | 4096;

     label4:
        c3 = c1;

        if z0 == 0 goto label5;

        c3 = c1 | 32768;

     label5:
        return c3;
    }

    public boolean backspace(android.view.View, android.text.Editable, int, android.view.KeyEvent)
    {
        android.text.method.BaseKeyListener r0;
        android.view.View r1;
        android.text.Editable r2;
        int i0;
        android.view.KeyEvent r3;
        boolean $z0;

        r0 := @this: android.text.method.BaseKeyListener;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.text.Editable;

        i0 := @parameter2: int;

        r3 := @parameter3: android.view.KeyEvent;

        $z0 = specialinvoke r0.<android.text.method.BaseKeyListener: boolean backspaceOrForwardDelete(android.view.View,android.text.Editable,int,android.view.KeyEvent,boolean)>(r1, r2, i0, r3, 0);

        return $z0;
    }

    public boolean forwardDelete(android.view.View, android.text.Editable, int, android.view.KeyEvent)
    {
        android.text.method.BaseKeyListener r0;
        android.view.View r1;
        android.text.Editable r2;
        int i0;
        android.view.KeyEvent r3;
        boolean $z0;

        r0 := @this: android.text.method.BaseKeyListener;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.text.Editable;

        i0 := @parameter2: int;

        r3 := @parameter3: android.view.KeyEvent;

        $z0 = specialinvoke r0.<android.text.method.BaseKeyListener: boolean backspaceOrForwardDelete(android.view.View,android.text.Editable,int,android.view.KeyEvent,boolean)>(r1, r2, i0, r3, 1);

        return $z0;
    }

    public boolean onKeyDown(android.view.View, android.text.Editable, int, android.view.KeyEvent)
    {
        android.text.method.BaseKeyListener r0;
        android.view.View r1;
        android.text.Editable r2;
        int i0;
        android.view.KeyEvent r3;
        boolean $z0, z1;

        r0 := @this: android.text.method.BaseKeyListener;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.text.Editable;

        i0 := @parameter2: int;

        r3 := @parameter3: android.view.KeyEvent;

        if i0 == 67 goto label2;

        if i0 == 112 goto label1;

        z1 = 0;

        goto label3;

     label1:
        z1 = virtualinvoke r0.<android.text.method.BaseKeyListener: boolean forwardDelete(android.view.View,android.text.Editable,int,android.view.KeyEvent)>(r1, r2, i0, r3);

        goto label3;

     label2:
        z1 = virtualinvoke r0.<android.text.method.BaseKeyListener: boolean backspace(android.view.View,android.text.Editable,int,android.view.KeyEvent)>(r1, r2, i0, r3);

     label3:
        if z1 == 0 goto label4;

        staticinvoke <android.text.method.BaseKeyListener: void adjustMetaAfterKeypress(android.text.Spannable)>(r2);

        return 1;

     label4:
        $z0 = specialinvoke r0.<android.text.method.MetaKeyKeyListener: boolean onKeyDown(android.view.View,android.text.Editable,int,android.view.KeyEvent)>(r1, r2, i0, r3);

        return $z0;
    }

    public boolean onKeyOther(android.view.View, android.text.Editable, android.view.KeyEvent)
    {
        android.text.method.BaseKeyListener r0;
        android.text.Editable r1;
        android.view.KeyEvent r2;
        int i0, i1, $i2, $i3, i4, i5;
        android.view.View r4;
        java.lang.String r5;

        r0 := @this: android.text.method.BaseKeyListener;

        r4 := @parameter0: android.view.View;

        r1 := @parameter1: android.text.Editable;

        r2 := @parameter2: android.view.KeyEvent;

        $i2 = virtualinvoke r2.<android.view.KeyEvent: int getAction()>();

        if $i2 != 2 goto label4;

        $i3 = virtualinvoke r2.<android.view.KeyEvent: int getKeyCode()>();

        if $i3 == 0 goto label1;

        goto label4;

     label1:
        i0 = staticinvoke <android.text.Selection: int getSelectionStart(java.lang.CharSequence)>(r1);

        i1 = staticinvoke <android.text.Selection: int getSelectionEnd(java.lang.CharSequence)>(r1);

        i4 = i0;

        i5 = i1;

        if i1 >= i0 goto label2;

        i5 = i0;

        i4 = i1;

     label2:
        r5 = virtualinvoke r2.<android.view.KeyEvent: java.lang.String getCharacters()>();

        if r5 != null goto label3;

        return 0;

     label3:
        interfaceinvoke r1.<android.text.Editable: android.text.Editable replace(int,int,java.lang.CharSequence)>(i4, i5, r5);

        return 1;

     label4:
        return 0;
    }
}
