public class android.text.method.WordIterator extends java.lang.Object implements android.text.Selection$PositionIterator
{
    private static final int WINDOW_WIDTH;
    private java.lang.CharSequence mCharSeq;
    private int mEnd;
    private final android.icu.text.BreakIterator mIterator;
    private int mStart;

    public void <init>()
    {
        android.text.method.WordIterator r0;
        java.util.Locale $r1;

        r0 := @this: android.text.method.WordIterator;

        $r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        specialinvoke r0.<android.text.method.WordIterator: void <init>(java.util.Locale)>($r1);

        return;
    }

    public void <init>(java.util.Locale)
    {
        android.text.method.WordIterator r0;
        java.util.Locale r1;
        android.icu.text.BreakIterator $r2;

        r0 := @this: android.text.method.WordIterator;

        r1 := @parameter0: java.util.Locale;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <android.icu.text.BreakIterator: android.icu.text.BreakIterator getWordInstance(java.util.Locale)>(r1);

        r0.<android.text.method.WordIterator: android.icu.text.BreakIterator mIterator> = $r2;

        return;
    }

    private void checkOffsetIsValid(int)
    {
        android.text.method.WordIterator r0;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r10;
        java.lang.String $r11;

        r0 := @this: android.text.method.WordIterator;

        i0 := @parameter0: int;

        $i1 = r0.<android.text.method.WordIterator: int mStart>;

        if $i1 > i0 goto label1;

        $i4 = r0.<android.text.method.WordIterator: int mEnd>;

        if i0 > $i4 goto label1;

        return;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid offset: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Valid range is [");

        $i2 = r0.<android.text.method.WordIterator: int mStart>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $i3 = r0.<android.text.method.WordIterator: int mEnd>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r10;
    }

    private int getBeginning(int, boolean)
    {
        android.text.method.WordIterator r0;
        int i0, $i1, $i2;
        boolean z0, $z1, $z2, $z3, $z4;
        android.icu.text.BreakIterator $r1, $r2, $r3;

        r0 := @this: android.text.method.WordIterator;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.text.method.WordIterator: void checkOffsetIsValid(int)>(i0);

        $z1 = specialinvoke r0.<android.text.method.WordIterator: boolean isOnLetterOrDigit(int)>(i0);

        if $z1 == 0 goto label3;

        $r2 = r0.<android.text.method.WordIterator: android.icu.text.BreakIterator mIterator>;

        $z3 = virtualinvoke $r2.<android.icu.text.BreakIterator: boolean isBoundary(int)>(i0);

        if $z3 == 0 goto label2;

        $z4 = specialinvoke r0.<android.text.method.WordIterator: boolean isAfterLetterOrDigit(int)>(i0);

        if $z4 == 0 goto label1;

        if z0 != 0 goto label2;

     label1:
        return i0;

     label2:
        $r3 = r0.<android.text.method.WordIterator: android.icu.text.BreakIterator mIterator>;

        $i2 = virtualinvoke $r3.<android.icu.text.BreakIterator: int preceding(int)>(i0);

        return $i2;

     label3:
        $z2 = specialinvoke r0.<android.text.method.WordIterator: boolean isAfterLetterOrDigit(int)>(i0);

        if $z2 == 0 goto label4;

        $r1 = r0.<android.text.method.WordIterator: android.icu.text.BreakIterator mIterator>;

        $i1 = virtualinvoke $r1.<android.icu.text.BreakIterator: int preceding(int)>(i0);

        return $i1;

     label4:
        return -1;
    }

    private int getEnd(int, boolean)
    {
        android.text.method.WordIterator r0;
        int i0, $i1, $i2;
        boolean z0, $z1, $z2, $z3, $z4;
        android.icu.text.BreakIterator $r1, $r2, $r3;

        r0 := @this: android.text.method.WordIterator;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.text.method.WordIterator: void checkOffsetIsValid(int)>(i0);

        $z1 = specialinvoke r0.<android.text.method.WordIterator: boolean isAfterLetterOrDigit(int)>(i0);

        if $z1 == 0 goto label3;

        $r2 = r0.<android.text.method.WordIterator: android.icu.text.BreakIterator mIterator>;

        $z3 = virtualinvoke $r2.<android.icu.text.BreakIterator: boolean isBoundary(int)>(i0);

        if $z3 == 0 goto label2;

        $z4 = specialinvoke r0.<android.text.method.WordIterator: boolean isOnLetterOrDigit(int)>(i0);

        if $z4 == 0 goto label1;

        if z0 != 0 goto label2;

     label1:
        return i0;

     label2:
        $r3 = r0.<android.text.method.WordIterator: android.icu.text.BreakIterator mIterator>;

        $i2 = virtualinvoke $r3.<android.icu.text.BreakIterator: int following(int)>(i0);

        return $i2;

     label3:
        $z2 = specialinvoke r0.<android.text.method.WordIterator: boolean isOnLetterOrDigit(int)>(i0);

        if $z2 == 0 goto label4;

        $r1 = r0.<android.text.method.WordIterator: android.icu.text.BreakIterator mIterator>;

        $i1 = virtualinvoke $r1.<android.icu.text.BreakIterator: int following(int)>(i0);

        return $i1;

     label4:
        return -1;
    }

    private boolean isAfterLetterOrDigit(int)
    {
        android.text.method.WordIterator r0;
        int i0, $i1, $i2, $i3;
        java.lang.CharSequence $r1;
        boolean $z0;

        r0 := @this: android.text.method.WordIterator;

        i0 := @parameter0: int;

        $i1 = r0.<android.text.method.WordIterator: int mStart>;

        if $i1 >= i0 goto label1;

        $i2 = r0.<android.text.method.WordIterator: int mEnd>;

        if i0 > $i2 goto label1;

        $r1 = r0.<android.text.method.WordIterator: java.lang.CharSequence mCharSeq>;

        $i3 = staticinvoke <java.lang.Character: int codePointBefore(java.lang.CharSequence,int)>($r1, i0);

        $z0 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(int)>($i3);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean isMidWordPunctuation(java.util.Locale, int)
    {
        java.util.Locale r0;
        int i0, i1;
        boolean z0;

        r0 := @parameter0: java.util.Locale;

        i0 := @parameter1: int;

        i1 = staticinvoke <android.icu.lang.UCharacter: int getIntPropertyValue(int,int)>(i0, 4116);

        if i1 == 4 goto label2;

        if i1 == 11 goto label2;

        if i1 != 15 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    private boolean isOnLetterOrDigit(int)
    {
        android.text.method.WordIterator r0;
        int i0, $i1, $i2, $i3;
        java.lang.CharSequence $r1;
        boolean $z0;

        r0 := @this: android.text.method.WordIterator;

        i0 := @parameter0: int;

        $i1 = r0.<android.text.method.WordIterator: int mStart>;

        if $i1 > i0 goto label1;

        $i2 = r0.<android.text.method.WordIterator: int mEnd>;

        if i0 >= $i2 goto label1;

        $r1 = r0.<android.text.method.WordIterator: java.lang.CharSequence mCharSeq>;

        $i3 = staticinvoke <java.lang.Character: int codePointAt(java.lang.CharSequence,int)>($r1, i0);

        $z0 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(int)>($i3);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private static boolean isPunctuation(int)
    {
        int i0, i1;
        boolean z0;

        i0 := @parameter0: int;

        i1 = staticinvoke <java.lang.Character: int getType(int)>(i0);

        if i1 == 23 goto label2;

        if i1 == 20 goto label2;

        if i1 == 22 goto label2;

        if i1 == 30 goto label2;

        if i1 == 29 goto label2;

        if i1 == 24 goto label2;

        if i1 != 21 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    private boolean isPunctuationEndBoundary(int)
    {
        android.text.method.WordIterator r0;
        int i0;
        boolean $z0, $z1, z2;

        r0 := @this: android.text.method.WordIterator;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<android.text.method.WordIterator: boolean isOnPunctuation(int)>(i0);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<android.text.method.WordIterator: boolean isAfterPunctuation(int)>(i0);

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    private boolean isPunctuationStartBoundary(int)
    {
        android.text.method.WordIterator r0;
        int i0;
        boolean $z0, $z1, z2;

        r0 := @this: android.text.method.WordIterator;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<android.text.method.WordIterator: boolean isOnPunctuation(int)>(i0);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<android.text.method.WordIterator: boolean isAfterPunctuation(int)>(i0);

        if $z1 != 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    public int following(int)
    {
        android.text.method.WordIterator r0;
        int i0, i1;
        android.icu.text.BreakIterator $r1;
        boolean $z0;

        r0 := @this: android.text.method.WordIterator;

        i1 := @parameter0: int;

        specialinvoke r0.<android.text.method.WordIterator: void checkOffsetIsValid(int)>(i1);

     label1:
        $r1 = r0.<android.text.method.WordIterator: android.icu.text.BreakIterator mIterator>;

        i0 = virtualinvoke $r1.<android.icu.text.BreakIterator: int following(int)>(i1);

        if i0 == -1 goto label2;

        i1 = i0;

        $z0 = specialinvoke r0.<android.text.method.WordIterator: boolean isAfterLetterOrDigit(int)>(i0);

        if $z0 == 0 goto label1;

     label2:
        return i0;
    }

    public int getBeginning(int)
    {
        android.text.method.WordIterator r0;
        int i0, $i1;

        r0 := @this: android.text.method.WordIterator;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<android.text.method.WordIterator: int getBeginning(int,boolean)>(i0, 0);

        return $i1;
    }

    public int getEnd(int)
    {
        android.text.method.WordIterator r0;
        int i0, $i1;

        r0 := @this: android.text.method.WordIterator;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<android.text.method.WordIterator: int getEnd(int,boolean)>(i0, 0);

        return $i1;
    }

    public int getNextWordEndOnTwoWordBoundary(int)
    {
        android.text.method.WordIterator r0;
        int i0, $i1;

        r0 := @this: android.text.method.WordIterator;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<android.text.method.WordIterator: int getEnd(int,boolean)>(i0, 1);

        return $i1;
    }

    public int getPrevWordBeginningOnTwoWordsBoundary(int)
    {
        android.text.method.WordIterator r0;
        int i0, $i1;

        r0 := @this: android.text.method.WordIterator;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<android.text.method.WordIterator: int getBeginning(int,boolean)>(i0, 1);

        return $i1;
    }

    public int getPunctuationBeginning(int)
    {
        android.text.method.WordIterator r0;
        boolean $z0;
        int i0;

        r0 := @this: android.text.method.WordIterator;

        i0 := @parameter0: int;

        specialinvoke r0.<android.text.method.WordIterator: void checkOffsetIsValid(int)>(i0);

     label1:
        if i0 == -1 goto label2;

        $z0 = specialinvoke r0.<android.text.method.WordIterator: boolean isPunctuationStartBoundary(int)>(i0);

        if $z0 != 0 goto label2;

        i0 = virtualinvoke r0.<android.text.method.WordIterator: int prevBoundary(int)>(i0);

        goto label1;

     label2:
        return i0;
    }

    public int getPunctuationEnd(int)
    {
        android.text.method.WordIterator r0;
        boolean $z0;
        int i0;

        r0 := @this: android.text.method.WordIterator;

        i0 := @parameter0: int;

        specialinvoke r0.<android.text.method.WordIterator: void checkOffsetIsValid(int)>(i0);

     label1:
        if i0 == -1 goto label2;

        $z0 = specialinvoke r0.<android.text.method.WordIterator: boolean isPunctuationEndBoundary(int)>(i0);

        if $z0 != 0 goto label2;

        i0 = virtualinvoke r0.<android.text.method.WordIterator: int nextBoundary(int)>(i0);

        goto label1;

     label2:
        return i0;
    }

    public boolean isAfterPunctuation(int)
    {
        android.text.method.WordIterator r0;
        int i0, $i1, $i2, $i3;
        java.lang.CharSequence $r1;
        boolean $z0;

        r0 := @this: android.text.method.WordIterator;

        i0 := @parameter0: int;

        $i1 = r0.<android.text.method.WordIterator: int mStart>;

        if $i1 >= i0 goto label1;

        $i2 = r0.<android.text.method.WordIterator: int mEnd>;

        if i0 > $i2 goto label1;

        $r1 = r0.<android.text.method.WordIterator: java.lang.CharSequence mCharSeq>;

        $i3 = staticinvoke <java.lang.Character: int codePointBefore(java.lang.CharSequence,int)>($r1, i0);

        $z0 = staticinvoke <android.text.method.WordIterator: boolean isPunctuation(int)>($i3);

        return $z0;

     label1:
        return 0;
    }

    public boolean isBoundary(int)
    {
        android.text.method.WordIterator r0;
        int i0;
        android.icu.text.BreakIterator $r1;
        boolean $z0;

        r0 := @this: android.text.method.WordIterator;

        i0 := @parameter0: int;

        specialinvoke r0.<android.text.method.WordIterator: void checkOffsetIsValid(int)>(i0);

        $r1 = r0.<android.text.method.WordIterator: android.icu.text.BreakIterator mIterator>;

        $z0 = virtualinvoke $r1.<android.icu.text.BreakIterator: boolean isBoundary(int)>(i0);

        return $z0;
    }

    public boolean isOnPunctuation(int)
    {
        android.text.method.WordIterator r0;
        int i0, $i1, $i2, $i3;
        java.lang.CharSequence $r1;
        boolean $z0;

        r0 := @this: android.text.method.WordIterator;

        i0 := @parameter0: int;

        $i1 = r0.<android.text.method.WordIterator: int mStart>;

        if $i1 > i0 goto label1;

        $i2 = r0.<android.text.method.WordIterator: int mEnd>;

        if i0 >= $i2 goto label1;

        $r1 = r0.<android.text.method.WordIterator: java.lang.CharSequence mCharSeq>;

        $i3 = staticinvoke <java.lang.Character: int codePointAt(java.lang.CharSequence,int)>($r1, i0);

        $z0 = staticinvoke <android.text.method.WordIterator: boolean isPunctuation(int)>($i3);

        return $z0;

     label1:
        return 0;
    }

    public int nextBoundary(int)
    {
        android.text.method.WordIterator r0;
        int i0, $i1;
        android.icu.text.BreakIterator $r1;

        r0 := @this: android.text.method.WordIterator;

        i0 := @parameter0: int;

        specialinvoke r0.<android.text.method.WordIterator: void checkOffsetIsValid(int)>(i0);

        $r1 = r0.<android.text.method.WordIterator: android.icu.text.BreakIterator mIterator>;

        $i1 = virtualinvoke $r1.<android.icu.text.BreakIterator: int following(int)>(i0);

        return $i1;
    }

    public int preceding(int)
    {
        android.text.method.WordIterator r0;
        int i0, i1;
        android.icu.text.BreakIterator $r1;
        boolean $z0;

        r0 := @this: android.text.method.WordIterator;

        i1 := @parameter0: int;

        specialinvoke r0.<android.text.method.WordIterator: void checkOffsetIsValid(int)>(i1);

     label1:
        $r1 = r0.<android.text.method.WordIterator: android.icu.text.BreakIterator mIterator>;

        i0 = virtualinvoke $r1.<android.icu.text.BreakIterator: int preceding(int)>(i1);

        if i0 == -1 goto label2;

        i1 = i0;

        $z0 = specialinvoke r0.<android.text.method.WordIterator: boolean isOnLetterOrDigit(int)>(i0);

        if $z0 == 0 goto label1;

     label2:
        return i0;
    }

    public int prevBoundary(int)
    {
        android.text.method.WordIterator r0;
        int i0, $i1;
        android.icu.text.BreakIterator $r1;

        r0 := @this: android.text.method.WordIterator;

        i0 := @parameter0: int;

        specialinvoke r0.<android.text.method.WordIterator: void checkOffsetIsValid(int)>(i0);

        $r1 = r0.<android.text.method.WordIterator: android.icu.text.BreakIterator mIterator>;

        $i1 = virtualinvoke $r1.<android.icu.text.BreakIterator: int preceding(int)>(i0);

        return $i1;
    }

    public void setCharSequence(java.lang.CharSequence, int, int)
    {
        android.text.method.WordIterator r0;
        java.lang.CharSequence r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        java.lang.IndexOutOfBoundsException $r2;
        android.text.CharSequenceCharacterIterator $r3;
        android.icu.text.BreakIterator $r4;

        r0 := @this: android.text.method.WordIterator;

        r1 := @parameter0: java.lang.CharSequence;

        i7 := @parameter1: int;

        i0 := @parameter2: int;

        if i7 < 0 goto label1;

        $i1 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if i0 > $i1 goto label1;

        r0.<android.text.method.WordIterator: java.lang.CharSequence mCharSeq> = r1;

        $i2 = i7 - 50;

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i2);

        r0.<android.text.method.WordIterator: int mStart> = $i3;

        $i4 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        $i5 = i0 + 50;

        i8 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i5);

        r0.<android.text.method.WordIterator: int mEnd> = i8;

        $r4 = r0.<android.text.method.WordIterator: android.icu.text.BreakIterator mIterator>;

        $r3 = new android.text.CharSequenceCharacterIterator;

        $i6 = r0.<android.text.method.WordIterator: int mStart>;

        specialinvoke $r3.<android.text.CharSequenceCharacterIterator: void <init>(java.lang.CharSequence,int,int)>(r1, $i6, i8);

        virtualinvoke $r4.<android.icu.text.BreakIterator: void setText(java.text.CharacterIterator)>($r3);

        return;

     label1:
        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("input indexes are outside the CharSequence");

        throw $r2;
    }

    public static void <clinit>()
    {
        <android.text.method.WordIterator: int WINDOW_WIDTH> = 50;

        return;
    }
}
