public class android.text.style.LineHeightSpan$Standard extends java.lang.Object implements android.text.style.LineHeightSpan, android.text.ParcelableSpan
{
    private final int mHeight;

    public void <init>(int)
    {
        android.text.style.LineHeightSpan$Standard r0;
        int i0;
        java.lang.StringBuilder $r2;
        java.lang.String $r6;
        boolean z0;

        r0 := @this: android.text.style.LineHeightSpan$Standard;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 <= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Height:");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("must be positive");

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z0, $r6);

        r0.<android.text.style.LineHeightSpan$Standard: int mHeight> = i0;

        return;
    }

    public void <init>(android.os.Parcel)
    {
        android.text.style.LineHeightSpan$Standard r0;
        android.os.Parcel r1;
        int $i0;

        r0 := @this: android.text.style.LineHeightSpan$Standard;

        r1 := @parameter0: android.os.Parcel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r0.<android.text.style.LineHeightSpan$Standard: int mHeight> = $i0;

        return;
    }

    public void chooseHeight(java.lang.CharSequence, int, int, int, int, android.graphics.Paint$FontMetricsInt)
    {
        android.text.style.LineHeightSpan$Standard r0;
        java.lang.CharSequence r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12;
        android.graphics.Paint$FontMetricsInt r2;
        float f0, $f1, $f2, $f3, $f4, $f5;

        r0 := @this: android.text.style.LineHeightSpan$Standard;

        r1 := @parameter0: java.lang.CharSequence;

        i11 := @parameter1: int;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r2 := @parameter5: android.graphics.Paint$FontMetricsInt;

        $i4 = r2.<android.graphics.Paint$FontMetricsInt: int descent>;

        $i3 = r2.<android.graphics.Paint$FontMetricsInt: int ascent>;

        i12 = $i4 - $i3;

        if i12 > 0 goto label1;

        return;

     label1:
        $i5 = r0.<android.text.style.LineHeightSpan$Standard: int mHeight>;

        $f1 = (float) $i5;

        $f3 = $f1 * 1.0F;

        $f2 = (float) i12;

        f0 = $f3 / $f2;

        $i6 = r2.<android.graphics.Paint$FontMetricsInt: int descent>;

        $f4 = (float) $i6;

        $f5 = $f4 * f0;

        $i7 = staticinvoke <java.lang.Math: int round(float)>($f5);

        r2.<android.graphics.Paint$FontMetricsInt: int descent> = $i7;

        $i9 = r2.<android.graphics.Paint$FontMetricsInt: int descent>;

        $i8 = r0.<android.text.style.LineHeightSpan$Standard: int mHeight>;

        $i10 = $i9 - $i8;

        r2.<android.graphics.Paint$FontMetricsInt: int ascent> = $i10;

        return;
    }

    public int describeContents()
    {
        android.text.style.LineHeightSpan$Standard r0;

        r0 := @this: android.text.style.LineHeightSpan$Standard;

        return 0;
    }

    public int getHeight()
    {
        android.text.style.LineHeightSpan$Standard r0;
        int $i0;

        r0 := @this: android.text.style.LineHeightSpan$Standard;

        $i0 = r0.<android.text.style.LineHeightSpan$Standard: int mHeight>;

        return $i0;
    }

    public int getSpanTypeId()
    {
        android.text.style.LineHeightSpan$Standard r0;
        int $i0;

        r0 := @this: android.text.style.LineHeightSpan$Standard;

        $i0 = virtualinvoke r0.<android.text.style.LineHeightSpan$Standard: int getSpanTypeIdInternal()>();

        return $i0;
    }

    public int getSpanTypeIdInternal()
    {
        android.text.style.LineHeightSpan$Standard r0;

        r0 := @this: android.text.style.LineHeightSpan$Standard;

        return 28;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        android.text.style.LineHeightSpan$Standard r0;
        android.os.Parcel r1;
        int i0;

        r0 := @this: android.text.style.LineHeightSpan$Standard;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        virtualinvoke r0.<android.text.style.LineHeightSpan$Standard: void writeToParcelInternal(android.os.Parcel,int)>(r1, i0);

        return;
    }

    public void writeToParcelInternal(android.os.Parcel, int)
    {
        android.text.style.LineHeightSpan$Standard r0;
        android.os.Parcel r1;
        int i0, $i1;

        r0 := @this: android.text.style.LineHeightSpan$Standard;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        $i1 = r0.<android.text.style.LineHeightSpan$Standard: int mHeight>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i1);

        return;
    }
}
