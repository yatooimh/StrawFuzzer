public class android.util.Base64 extends java.lang.Object
{
    static final boolean $assertionsDisabled;
    public static final int CRLF;
    public static final int DEFAULT;
    public static final int NO_CLOSE;
    public static final int NO_PADDING;
    public static final int NO_WRAP;
    public static final int URL_SAFE;

    static void <clinit>()
    {
        <android.util.Base64: int URL_SAFE> = 8;

        <android.util.Base64: int NO_WRAP> = 2;

        <android.util.Base64: int NO_PADDING> = 1;

        <android.util.Base64: int NO_CLOSE> = 16;

        <android.util.Base64: int DEFAULT> = 0;

        <android.util.Base64: int CRLF> = 4;

        <android.util.Base64: boolean $assertionsDisabled> = 0;

        return;
    }

    private void <init>()
    {
        android.util.Base64 r0;

        r0 := @this: android.util.Base64;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static byte[] decode(java.lang.String, int)
    {
        java.lang.String r0;
        int i0;
        byte[] $r1, $r2;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<java.lang.String: byte[] getBytes()>();

        $r2 = staticinvoke <android.util.Base64: byte[] decode(byte[],int)>($r1, i0);

        return $r2;
    }

    public static byte[] decode(byte[], int)
    {
        byte[] r0, $r1;
        int i0, $i1;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i1 = lengthof r0;

        $r1 = staticinvoke <android.util.Base64: byte[] decode(byte[],int,int,int)>(r0, 0, $i1, i0);

        return $r1;
    }

    public static byte[] decode(byte[], int, int, int)
    {
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        android.util.Base64$Decoder $r1;
        byte[] $r2, $r4, $r5, $r6, r7, r8;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;

        r7 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r1 = new android.util.Base64$Decoder;

        $i3 = i1 * 3;

        $i4 = $i3 / 4;

        $r2 = newarray (byte)[$i4];

        specialinvoke $r1.<android.util.Base64$Decoder: void <init>(int,byte[])>(i2, $r2);

        $z0 = virtualinvoke $r1.<android.util.Base64$Decoder: boolean process(byte[],int,int,boolean)>(r7, i0, i1, 1);

        if $z0 == 0 goto label2;

        $i6 = $r1.<android.util.Base64$Decoder: int op>;

        $r4 = $r1.<android.util.Base64$Decoder: byte[] output>;

        $i5 = lengthof $r4;

        if $i6 != $i5 goto label1;

        $r6 = $r1.<android.util.Base64$Decoder: byte[] output>;

        return $r6;

     label1:
        $i7 = $r1.<android.util.Base64$Decoder: int op>;

        r8 = newarray (byte)[$i7];

        $r5 = $r1.<android.util.Base64$Decoder: byte[] output>;

        $i8 = $r1.<android.util.Base64$Decoder: int op>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r8, 0, $i8);

        return r8;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("bad base-64");

        throw $r3;
    }

    public static byte[] encode(byte[], int)
    {
        byte[] r0, $r1;
        int i0, $i1;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i1 = lengthof r0;

        $r1 = staticinvoke <android.util.Base64: byte[] encode(byte[],int,int,int)>(r0, 0, $i1, i0);

        return $r1;
    }

    public static byte[] encode(byte[], int, int, int)
    {
        byte[] r0, $r3, $r4;
        int i0, i1, i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11, i12, i13;
        boolean z0, $z2, $z3;
        android.util.Base64$Encoder $r2;
        byte b14;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i9 := @parameter3: int;

        $r2 = new android.util.Base64$Encoder;

        specialinvoke $r2.<android.util.Base64$Encoder: void <init>(int,byte[])>(i9, null);

        $i4 = i1 / 3;

        i10 = $i4 * 4;

        z0 = $r2.<android.util.Base64$Encoder: boolean do_padding>;

        if z0 == 0 goto label1;

        i11 = i10;

        $i8 = i1 % 3;

        if $i8 <= 0 goto label4;

        i11 = i10 + 4;

        goto label4;

     label1:
        i12 = i1 % 3;

        if i12 == 1 goto label3;

        if i12 == 2 goto label2;

        i11 = i10;

        goto label4;

     label2:
        i11 = i10 + 3;

        goto label4;

     label3:
        i11 = i10 + 2;

     label4:
        i13 = i11;

        $z3 = $r2.<android.util.Base64$Encoder: boolean do_newline>;

        if $z3 == 0 goto label7;

        i13 = i11;

        if i1 <= 0 goto label7;

        $i5 = i1 - 1;

        i3 = $i5 / 57;

        $z2 = $r2.<android.util.Base64$Encoder: boolean do_cr>;

        if $z2 == 0 goto label5;

        b14 = 2;

        goto label6;

     label5:
        b14 = 1;

     label6:
        $i6 = i3 + 1;

        $i7 = $i6 * b14;

        i13 = i11 + $i7;

     label7:
        $r3 = newarray (byte)[i13];

        $r2.<android.util.Base64$Encoder: byte[] output> = $r3;

        virtualinvoke $r2.<android.util.Base64$Encoder: boolean process(byte[],int,int,boolean)>(r0, i0, i1, 1);

        $r4 = $r2.<android.util.Base64$Encoder: byte[] output>;

        return $r4;
    }

    public static java.lang.String encodeToString(byte[], int)
    {
        int i0;
        java.lang.String $r0;
        byte[] $r1, r4;
        java.lang.Throwable $r2;
        java.lang.AssertionError $r3;

        r4 := @parameter0: byte[];

        i0 := @parameter1: int;

     label1:
        $r0 = new java.lang.String;

        $r1 = staticinvoke <android.util.Base64: byte[] encode(byte[],int)>(r4, i0);

        specialinvoke $r0.<java.lang.String: void <init>(byte[],java.lang.String)>($r1, "US-ASCII");

     label2:
        return $r0;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>($r2);

        throw $r3;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public static java.lang.String encodeToString(byte[], int, int, int)
    {
        int i0, i1, i2;
        java.lang.String $r0;
        byte[] $r1, r4;
        java.lang.Throwable $r2;
        java.lang.AssertionError $r3;

        r4 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

     label1:
        $r0 = new java.lang.String;

        $r1 = staticinvoke <android.util.Base64: byte[] encode(byte[],int,int,int)>(r4, i0, i1, i2);

        specialinvoke $r0.<java.lang.String: void <init>(byte[],java.lang.String)>($r1, "US-ASCII");

     label2:
        return $r0;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>($r2);

        throw $r3;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }
}
