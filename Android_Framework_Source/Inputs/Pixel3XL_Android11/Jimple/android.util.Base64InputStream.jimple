public class android.util.Base64InputStream extends java.io.FilterInputStream
{
    private static final int BUFFER_SIZE;
    private static byte[] EMPTY;
    private final android.util.Base64$Coder coder;
    private boolean eof;
    private byte[] inputBuffer;
    private int outputEnd;
    private int outputStart;

    static void <clinit>()
    {
        byte[] $r0;

        <android.util.Base64InputStream: int BUFFER_SIZE> = 2048;

        $r0 = newarray (byte)[0];

        <android.util.Base64InputStream: byte[] EMPTY> = $r0;

        return;
    }

    public void <init>(java.io.InputStream, int)
    {
        android.util.Base64InputStream r0;
        java.io.InputStream r1;
        int i0;

        r0 := @this: android.util.Base64InputStream;

        r1 := @parameter0: java.io.InputStream;

        i0 := @parameter1: int;

        specialinvoke r0.<android.util.Base64InputStream: void <init>(java.io.InputStream,int,boolean)>(r1, i0, 0);

        return;
    }

    public void <init>(java.io.InputStream, int, boolean)
    {
        android.util.Base64InputStream r0;
        int i0, $i1;
        boolean z0;
        byte[] $r1, $r3;
        android.util.Base64$Decoder $r2;
        android.util.Base64$Encoder $r4;
        java.io.InputStream r5;
        android.util.Base64$Coder r6;

        r0 := @this: android.util.Base64InputStream;

        r5 := @parameter0: java.io.InputStream;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.io.FilterInputStream: void <init>(java.io.InputStream)>(r5);

        r0.<android.util.Base64InputStream: boolean eof> = 0;

        $r1 = newarray (byte)[2048];

        r0.<android.util.Base64InputStream: byte[] inputBuffer> = $r1;

        if z0 == 0 goto label1;

        $r4 = new android.util.Base64$Encoder;

        specialinvoke $r4.<android.util.Base64$Encoder: void <init>(int,byte[])>(i0, null);

        r0.<android.util.Base64InputStream: android.util.Base64$Coder coder> = $r4;

        goto label2;

     label1:
        $r2 = new android.util.Base64$Decoder;

        specialinvoke $r2.<android.util.Base64$Decoder: void <init>(int,byte[])>(i0, null);

        r0.<android.util.Base64InputStream: android.util.Base64$Coder coder> = $r2;

     label2:
        r6 = r0.<android.util.Base64InputStream: android.util.Base64$Coder coder>;

        $i1 = virtualinvoke r6.<android.util.Base64$Coder: int maxOutputSize(int)>(2048);

        $r3 = newarray (byte)[$i1];

        r6.<android.util.Base64$Coder: byte[] output> = $r3;

        r0.<android.util.Base64InputStream: int outputStart> = 0;

        r0.<android.util.Base64InputStream: int outputEnd> = 0;

        return;
    }

    private void refill() throws java.io.IOException
    {
        android.util.Base64InputStream r0;
        int i0, $i1;
        boolean $z0, z1;
        byte[] $r1, $r3, $r7;
        java.io.InputStream $r2;
        android.util.Base64$Coder $r4, $r6, $r8;
        android.util.Base64DataException $r5;

        r0 := @this: android.util.Base64InputStream;

        $z0 = r0.<android.util.Base64InputStream: boolean eof>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = r0.<android.util.Base64InputStream: java.io.InputStream in>;

        $r1 = r0.<android.util.Base64InputStream: byte[] inputBuffer>;

        i0 = virtualinvoke $r2.<java.io.InputStream: int read(byte[])>($r1);

        if i0 != -1 goto label2;

        r0.<android.util.Base64InputStream: boolean eof> = 1;

        $r8 = r0.<android.util.Base64InputStream: android.util.Base64$Coder coder>;

        $r7 = <android.util.Base64InputStream: byte[] EMPTY>;

        z1 = virtualinvoke $r8.<android.util.Base64$Coder: boolean process(byte[],int,int,boolean)>($r7, 0, 0, 1);

        goto label3;

     label2:
        $r4 = r0.<android.util.Base64InputStream: android.util.Base64$Coder coder>;

        $r3 = r0.<android.util.Base64InputStream: byte[] inputBuffer>;

        z1 = virtualinvoke $r4.<android.util.Base64$Coder: boolean process(byte[],int,int,boolean)>($r3, 0, i0, 0);

     label3:
        if z1 == 0 goto label4;

        $r6 = r0.<android.util.Base64InputStream: android.util.Base64$Coder coder>;

        $i1 = $r6.<android.util.Base64$Coder: int op>;

        r0.<android.util.Base64InputStream: int outputEnd> = $i1;

        r0.<android.util.Base64InputStream: int outputStart> = 0;

        return;

     label4:
        $r5 = new android.util.Base64DataException;

        specialinvoke $r5.<android.util.Base64DataException: void <init>(java.lang.String)>("bad base-64");

        throw $r5;
    }

    public int available()
    {
        android.util.Base64InputStream r0;
        int $i0, $i1, $i2;

        r0 := @this: android.util.Base64InputStream;

        $i1 = r0.<android.util.Base64InputStream: int outputEnd>;

        $i0 = r0.<android.util.Base64InputStream: int outputStart>;

        $i2 = $i1 - $i0;

        return $i2;
    }

    public void close() throws java.io.IOException
    {
        android.util.Base64InputStream r0;
        java.io.InputStream $r1;

        r0 := @this: android.util.Base64InputStream;

        $r1 = r0.<android.util.Base64InputStream: java.io.InputStream in>;

        virtualinvoke $r1.<java.io.InputStream: void close()>();

        r0.<android.util.Base64InputStream: byte[] inputBuffer> = null;

        return;
    }

    public void mark(int)
    {
        android.util.Base64InputStream r0;
        int i0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.util.Base64InputStream;

        i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public boolean markSupported()
    {
        android.util.Base64InputStream r0;

        r0 := @this: android.util.Base64InputStream;

        return 0;
    }

    public int read() throws java.io.IOException
    {
        android.util.Base64InputStream r0;
        byte[] r1;
        int i0, $i1, $i2, $i3, $i4, $i5;
        android.util.Base64$Coder $r2;
        byte $b6;
        short $s7;

        r0 := @this: android.util.Base64InputStream;

        $i2 = r0.<android.util.Base64InputStream: int outputStart>;

        $i1 = r0.<android.util.Base64InputStream: int outputEnd>;

        if $i2 < $i1 goto label1;

        specialinvoke r0.<android.util.Base64InputStream: void refill()>();

     label1:
        $i4 = r0.<android.util.Base64InputStream: int outputStart>;

        $i3 = r0.<android.util.Base64InputStream: int outputEnd>;

        if $i4 < $i3 goto label2;

        return -1;

     label2:
        $r2 = r0.<android.util.Base64InputStream: android.util.Base64$Coder coder>;

        r1 = $r2.<android.util.Base64$Coder: byte[] output>;

        i0 = r0.<android.util.Base64InputStream: int outputStart>;

        $i5 = i0 + 1;

        r0.<android.util.Base64InputStream: int outputStart> = $i5;

        $b6 = r1[i0];

        $s7 = $b6 & 255;

        return $s7;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        android.util.Base64InputStream r0;
        byte[] r1, $r3;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10;
        android.util.Base64$Coder $r2;

        r0 := @this: android.util.Base64InputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i9 := @parameter2: int;

        $i4 = r0.<android.util.Base64InputStream: int outputStart>;

        $i3 = r0.<android.util.Base64InputStream: int outputEnd>;

        if $i4 < $i3 goto label1;

        specialinvoke r0.<android.util.Base64InputStream: void refill()>();

     label1:
        i1 = r0.<android.util.Base64InputStream: int outputStart>;

        i2 = r0.<android.util.Base64InputStream: int outputEnd>;

        if i1 < i2 goto label2;

        return -1;

     label2:
        $i5 = i2 - i1;

        i10 = staticinvoke <java.lang.Math: int min(int,int)>(i9, $i5);

        $r2 = r0.<android.util.Base64InputStream: android.util.Base64$Coder coder>;

        $r3 = $r2.<android.util.Base64$Coder: byte[] output>;

        $i6 = r0.<android.util.Base64InputStream: int outputStart>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i6, r1, i0, i10);

        $i7 = r0.<android.util.Base64InputStream: int outputStart>;

        $i8 = $i7 + i10;

        r0.<android.util.Base64InputStream: int outputStart> = $i8;

        return i10;
    }

    public void reset()
    {
        android.util.Base64InputStream r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.util.Base64InputStream;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public long skip(long) throws java.io.IOException
    {
        android.util.Base64InputStream r0;
        int i0, i1, $i2, $i3, $i4, $i6, $i9;
        long $l5, $l7, $l8, l10, l11;

        r0 := @this: android.util.Base64InputStream;

        l10 := @parameter0: long;

        $i3 = r0.<android.util.Base64InputStream: int outputStart>;

        $i2 = r0.<android.util.Base64InputStream: int outputEnd>;

        if $i3 < $i2 goto label1;

        specialinvoke r0.<android.util.Base64InputStream: void refill()>();

     label1:
        i0 = r0.<android.util.Base64InputStream: int outputStart>;

        i1 = r0.<android.util.Base64InputStream: int outputEnd>;

        if i0 < i1 goto label2;

        return 0L;

     label2:
        $i4 = i1 - i0;

        $l5 = (long) $i4;

        l11 = staticinvoke <java.lang.Math: long min(long,long)>(l10, $l5);

        $i6 = r0.<android.util.Base64InputStream: int outputStart>;

        $l7 = (long) $i6;

        $l8 = $l7 + l11;

        $i9 = (int) $l8;

        r0.<android.util.Base64InputStream: int outputStart> = $i9;

        return l11;
    }
}
