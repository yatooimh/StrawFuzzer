public class android.util.Base64OutputStream extends java.io.FilterOutputStream
{
    private static byte[] EMPTY;
    private int bpos;
    private byte[] buffer;
    private final android.util.Base64$Coder coder;
    private final int flags;

    static void <clinit>()
    {
        byte[] $r0;

        $r0 = newarray (byte)[0];

        <android.util.Base64OutputStream: byte[] EMPTY> = $r0;

        return;
    }

    public void <init>(java.io.OutputStream, int)
    {
        android.util.Base64OutputStream r0;
        java.io.OutputStream r1;
        int i0;

        r0 := @this: android.util.Base64OutputStream;

        r1 := @parameter0: java.io.OutputStream;

        i0 := @parameter1: int;

        specialinvoke r0.<android.util.Base64OutputStream: void <init>(java.io.OutputStream,int,boolean)>(r1, i0, 1);

        return;
    }

    public void <init>(java.io.OutputStream, int, boolean)
    {
        android.util.Base64OutputStream r0;
        java.io.OutputStream r1;
        int i0;
        boolean z0;
        android.util.Base64$Decoder $r2;
        android.util.Base64$Encoder $r3;

        r0 := @this: android.util.Base64OutputStream;

        r1 := @parameter0: java.io.OutputStream;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>(r1);

        r0.<android.util.Base64OutputStream: byte[] buffer> = null;

        r0.<android.util.Base64OutputStream: int bpos> = 0;

        r0.<android.util.Base64OutputStream: int flags> = i0;

        if z0 == 0 goto label1;

        $r3 = new android.util.Base64$Encoder;

        specialinvoke $r3.<android.util.Base64$Encoder: void <init>(int,byte[])>(i0, null);

        r0.<android.util.Base64OutputStream: android.util.Base64$Coder coder> = $r3;

        goto label2;

     label1:
        $r2 = new android.util.Base64$Decoder;

        specialinvoke $r2.<android.util.Base64$Decoder: void <init>(int,byte[])>(i0, null);

        r0.<android.util.Base64OutputStream: android.util.Base64$Coder coder> = $r2;

     label2:
        return;
    }

    private byte[] embiggen(byte[], int)
    {
        android.util.Base64OutputStream r0;
        byte[] r1, $r2;
        int i0, $i1;

        r0 := @this: android.util.Base64OutputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        if r1 == null goto label2;

        $i1 = lengthof r1;

        if $i1 >= i0 goto label1;

        goto label2;

     label1:
        return r1;

     label2:
        $r2 = newarray (byte)[i0];

        return $r2;
    }

    private void flushBuffer() throws java.io.IOException
    {
        android.util.Base64OutputStream r0;
        int i0;
        byte[] $r1;

        r0 := @this: android.util.Base64OutputStream;

        i0 = r0.<android.util.Base64OutputStream: int bpos>;

        if i0 <= 0 goto label1;

        $r1 = r0.<android.util.Base64OutputStream: byte[] buffer>;

        specialinvoke r0.<android.util.Base64OutputStream: void internalWrite(byte[],int,int,boolean)>($r1, 0, i0, 0);

        r0.<android.util.Base64OutputStream: int bpos> = 0;

     label1:
        return;
    }

    private void internalWrite(byte[], int, int, boolean) throws java.io.IOException
    {
        android.util.Base64OutputStream r0;
        byte[] r1, $r4, $r5, $r10;
        int i0, i1, $i2, $i3;
        boolean z0, $z1;
        android.util.Base64$Coder r2, $r3, $r6, $r8, $r9;
        android.util.Base64DataException $r7;
        java.io.OutputStream $r11;

        r0 := @this: android.util.Base64OutputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        r2 = r0.<android.util.Base64OutputStream: android.util.Base64$Coder coder>;

        $r4 = r2.<android.util.Base64$Coder: byte[] output>;

        $r3 = r0.<android.util.Base64OutputStream: android.util.Base64$Coder coder>;

        $i2 = virtualinvoke $r3.<android.util.Base64$Coder: int maxOutputSize(int)>(i1);

        $r5 = specialinvoke r0.<android.util.Base64OutputStream: byte[] embiggen(byte[],int)>($r4, $i2);

        r2.<android.util.Base64$Coder: byte[] output> = $r5;

        $r6 = r0.<android.util.Base64OutputStream: android.util.Base64$Coder coder>;

        $z1 = virtualinvoke $r6.<android.util.Base64$Coder: boolean process(byte[],int,int,boolean)>(r1, i0, i1, z0);

        if $z1 == 0 goto label1;

        $r11 = r0.<android.util.Base64OutputStream: java.io.OutputStream out>;

        $r8 = r0.<android.util.Base64OutputStream: android.util.Base64$Coder coder>;

        $r10 = $r8.<android.util.Base64$Coder: byte[] output>;

        $r9 = r0.<android.util.Base64OutputStream: android.util.Base64$Coder coder>;

        $i3 = $r9.<android.util.Base64$Coder: int op>;

        virtualinvoke $r11.<java.io.OutputStream: void write(byte[],int,int)>($r10, 0, $i3);

        return;

     label1:
        $r7 = new android.util.Base64DataException;

        specialinvoke $r7.<android.util.Base64DataException: void <init>(java.lang.String)>("bad base-64");

        throw $r7;
    }

    public void close() throws java.io.IOException
    {
        android.util.Base64OutputStream r0;
        byte[] $r2;
        int $i0, $i1;
        java.io.OutputStream $r3, $r4;
        java.lang.Throwable $r5, $r6, r7;
        java.io.IOException r8;

        r0 := @this: android.util.Base64OutputStream;

        r7 = null;

     label01:
        specialinvoke r0.<android.util.Base64OutputStream: void flushBuffer()>();

        $r2 = <android.util.Base64OutputStream: byte[] EMPTY>;

        specialinvoke r0.<android.util.Base64OutputStream: void internalWrite(byte[],int,int,boolean)>($r2, 0, 0, 1);

     label02:
        goto label04;

     label03:
        $r6 := @caughtexception;

        r7 = $r6;

     label04:
        $i0 = r0.<android.util.Base64OutputStream: int flags>;

        $i1 = $i0 & 16;

        if $i1 != 0 goto label06;

        $r4 = r0.<android.util.Base64OutputStream: java.io.OutputStream out>;

        virtualinvoke $r4.<java.io.OutputStream: void close()>();

     label05:
        goto label07;

     label06:
        $r3 = r0.<android.util.Base64OutputStream: java.io.OutputStream out>;

        virtualinvoke $r3.<java.io.OutputStream: void flush()>();

     label07:
        goto label10;

     label08:
        $r5 := @caughtexception;

        if r7 != null goto label09;

        r7 = $r5;

        goto label10;

     label09:
        r8 = (java.io.IOException) r7;

        virtualinvoke r8.<java.io.IOException: void addSuppressed(java.lang.Throwable)>($r5);

     label10:
        if r7 != null goto label11;

        return;

     label11:
        throw r7;

        catch java.io.IOException from label01 to label02 with label03;
        catch java.io.IOException from label04 to label05 with label08;
        catch java.io.IOException from label06 to label07 with label08;
    }

    public void write(int) throws java.io.IOException
    {
        android.util.Base64OutputStream r0;
        int i0, $i1, $i2, i5, i6;
        byte[] $r1, $r2, r3, r4;
        byte $b3, $b4;

        r0 := @this: android.util.Base64OutputStream;

        i0 := @parameter0: int;

        $r1 = r0.<android.util.Base64OutputStream: byte[] buffer>;

        if $r1 != null goto label1;

        $r2 = newarray (byte)[1024];

        r0.<android.util.Base64OutputStream: byte[] buffer> = $r2;

     label1:
        i5 = r0.<android.util.Base64OutputStream: int bpos>;

        r3 = r0.<android.util.Base64OutputStream: byte[] buffer>;

        $i1 = lengthof r3;

        if i5 < $i1 goto label2;

        specialinvoke r0.<android.util.Base64OutputStream: void internalWrite(byte[],int,int,boolean)>(r3, 0, i5, 0);

        r0.<android.util.Base64OutputStream: int bpos> = 0;

     label2:
        r4 = r0.<android.util.Base64OutputStream: byte[] buffer>;

        i6 = r0.<android.util.Base64OutputStream: int bpos>;

        $i2 = i6 + 1;

        r0.<android.util.Base64OutputStream: int bpos> = $i2;

        $b3 = (byte) i0;

        $b4 = (byte) $b3;

        r4[i6] = $b4;

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        android.util.Base64OutputStream r0;
        byte[] r1;
        int i0, i1;

        r0 := @this: android.util.Base64OutputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i1 > 0 goto label1;

        return;

     label1:
        specialinvoke r0.<android.util.Base64OutputStream: void flushBuffer()>();

        specialinvoke r0.<android.util.Base64OutputStream: void internalWrite(byte[],int,int,boolean)>(r1, i0, i1, 0);

        return;
    }
}
