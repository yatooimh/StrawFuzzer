public class android.util.EventLog extends java.lang.Object
{
    private static final java.lang.String COMMENT_PATTERN;
    private static final java.lang.String TAG;
    private static final java.lang.String TAGS_FILE;
    private static final java.lang.String TAG_PATTERN;
    private static java.util.HashMap sTagCodes;
    private static java.util.HashMap sTagNames;

    static void <clinit>()
    {
        <android.util.EventLog: java.lang.String TAG_PATTERN> = "^\\s*(\\d+)\\s+(\\w+)\\s*(\\(.*\\))?\\s*$";

        <android.util.EventLog: java.lang.String TAGS_FILE> = "/system/etc/event-log-tags";

        <android.util.EventLog: java.lang.String TAG> = "EventLog";

        <android.util.EventLog: java.lang.String COMMENT_PATTERN> = "^\\s*(#.*)?$";

        <android.util.EventLog: java.util.HashMap sTagCodes> = null;

        <android.util.EventLog: java.util.HashMap sTagNames> = null;

        return;
    }

    public void <init>()
    {
        android.util.EventLog r0;

        r0 := @this: android.util.EventLog;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int getTagCode(java.lang.String)
    {
        java.util.HashMap $r0;
        java.lang.Object $r1;
        java.lang.String r2;
        java.lang.Integer r3;
        int i0;

        r2 := @parameter0: java.lang.String;

        staticinvoke <android.util.EventLog: void readTagsFile()>();

        $r0 = <android.util.EventLog: java.util.HashMap sTagCodes>;

        $r1 = virtualinvoke $r0.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (java.lang.Integer) $r1;

        if r3 == null goto label1;

        i0 = virtualinvoke r3.<java.lang.Integer: int intValue()>();

        goto label2;

     label1:
        i0 = -1;

     label2:
        return i0;
    }

    public static java.lang.String getTagName(int)
    {
        int i0;
        java.util.HashMap $r0;
        java.lang.Integer $r1;
        java.lang.Object $r2;
        java.lang.String $r3;

        i0 := @parameter0: int;

        staticinvoke <android.util.EventLog: void readTagsFile()>();

        $r0 = <android.util.EventLog: java.util.HashMap sTagNames>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2 = virtualinvoke $r0.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r1);

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    public static native void readEvents(int[], java.util.Collection) throws java.io.IOException;

    public static native void readEventsOnWrapping(int[], long, java.util.Collection) throws java.io.IOException;

    private static void readTagsFile()
    {
        java.util.regex.Pattern r0, r1;
        int i0;
        java.util.HashMap $r2, $r5, $r7, r18, r19, r20;
        java.util.regex.Matcher $r3, r26;
        boolean $z0, $z1;
        java.lang.String $r4, $r9, $r13, r25, r28;
        java.lang.Integer $r6, $r8;
        java.lang.Throwable $r10, $r11, $r12, $r14, $r15, $r16, $r17;
        java.io.BufferedReader r21, r22, r23;
        java.io.FileReader r24;
        java.lang.StringBuilder r27, r30;

        entermonitor class "Landroid/util/EventLog;";

     label01:
        $r2 = <android.util.EventLog: java.util.HashMap sTagCodes>;

        if $r2 == null goto label03;

        r18 = <android.util.EventLog: java.util.HashMap sTagNames>;

     label02:
        if r18 == null goto label03;

        exitmonitor class "Landroid/util/EventLog;";

        return;

     label03:
        r19 = new java.util.HashMap;

        specialinvoke r19.<java.util.HashMap: void <init>()>();

        <android.util.EventLog: java.util.HashMap sTagCodes> = r19;

        r20 = new java.util.HashMap;

        specialinvoke r20.<java.util.HashMap: void <init>()>();

        <android.util.EventLog: java.util.HashMap sTagNames> = r20;

        r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^\\s*(#.*)?$");

        r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^\\s*(\\d+)\\s+(\\w+)\\s*(\\(.*\\))?\\s*$");

     label04:
        r21 = null;

        r22 = null;

     label05:
        r23 = new java.io.BufferedReader;

     label06:
        r21 = null;

        r22 = null;

     label07:
        r24 = new java.io.FileReader;

     label08:
        r21 = null;

        r22 = null;

     label09:
        specialinvoke r24.<java.io.FileReader: void <init>(java.lang.String)>("/system/etc/event-log-tags");

     label10:
        r21 = null;

        r22 = null;

     label11:
        specialinvoke r23.<java.io.BufferedReader: void <init>(java.io.Reader,int)>(r24, 256);

     label12:
        r21 = r23;

        r22 = r23;

     label13:
        r25 = virtualinvoke r23.<java.io.BufferedReader: java.lang.String readLine()>();

     label14:
        if r25 == null goto label52;

        r21 = r23;

        r22 = r23;

     label15:
        $r3 = virtualinvoke r0.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r25);

        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean matches()>();

        if $z0 == 0 goto label17;

     label16:
        goto label12;

     label17:
        r21 = r23;

        r22 = r23;

     label18:
        r26 = virtualinvoke r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r25);

     label19:
        r21 = r23;

        r22 = r23;

     label20:
        $z1 = virtualinvoke r26.<java.util.regex.Matcher: boolean matches()>();

        if $z1 != 0 goto label32;

     label21:
        r21 = r23;

        r22 = r23;

     label22:
        r27 = new java.lang.StringBuilder;

     label23:
        r21 = r23;

        r22 = r23;

     label24:
        specialinvoke r27.<java.lang.StringBuilder: void <init>()>();

     label25:
        r21 = r23;

        r22 = r23;

     label26:
        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad entry in /system/etc/event-log-tags: ");

     label27:
        r21 = r23;

        r22 = r23;

     label28:
        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25);

     label29:
        r21 = r23;

        r22 = r23;

     label30:
        $r9 = virtualinvoke r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>("EventLog", $r9);

     label31:
        goto label12;

     label32:
        r21 = r23;

        r22 = r23;

     label33:
        $r4 = virtualinvoke r26.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

     label34:
        r21 = r23;

        r22 = r23;

     label35:
        r28 = virtualinvoke r26.<java.util.regex.Matcher: java.lang.String group(int)>(2);

     label36:
        r21 = r23;

        r22 = r23;

     label37:
        $r5 = <android.util.EventLog: java.util.HashMap sTagCodes>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r28, $r6);

     label38:
        r21 = r23;

        r22 = r23;

     label39:
        $r7 = <android.util.EventLog: java.util.HashMap sTagNames>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, r28);

     label40:
        goto label51;

     label41:
        $r12 := @caughtexception;

        r21 = r23;

        r22 = r23;

     label42:
        r30 = new java.lang.StringBuilder;

     label43:
        r21 = r23;

        r22 = r23;

     label44:
        specialinvoke r30.<java.lang.StringBuilder: void <init>()>();

     label45:
        r21 = r23;

        r22 = r23;

     label46:
        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error in /system/etc/event-log-tags: ");

     label47:
        r21 = r23;

        r22 = r23;

     label48:
        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25);

     label49:
        r21 = r23;

        r22 = r23;

     label50:
        $r13 = virtualinvoke r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("EventLog", $r13, $r12);

     label51:
        goto label12;

     label52:
        virtualinvoke r23.<java.io.BufferedReader: void close()>();

     label53:
        goto label62;

     label54:
        $r15 := @caughtexception;

        goto label62;

     label55:
        $r10 := @caughtexception;

        goto label63;

     label56:
        $r17 := @caughtexception;

        r21 = r22;

     label57:
        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("EventLog", "Error reading /system/etc/event-log-tags", $r17);

     label58:
        if r22 == null goto label62;

     label59:
        virtualinvoke r22.<java.io.BufferedReader: void close()>();

     label60:
        goto label62;

     label61:
        $r11 := @caughtexception;

     label62:
        exitmonitor class "Landroid/util/EventLog;";

        return;

     label63:
        if r21 == null goto label67;

     label64:
        virtualinvoke r21.<java.io.BufferedReader: void close()>();

     label65:
        goto label67;

     label66:
        $r16 := @caughtexception;

     label67:
        throw $r10;

     label68:
        $r14 := @caughtexception;

        exitmonitor class "Landroid/util/EventLog;";

        throw $r14;

        catch java.lang.Throwable from label01 to label02 with label68;
        catch java.lang.Throwable from label03 to label04 with label68;
        catch java.io.IOException from label05 to label06 with label56;
        catch java.lang.Throwable from label05 to label06 with label55;
        catch java.io.IOException from label07 to label08 with label56;
        catch java.lang.Throwable from label07 to label08 with label55;
        catch java.io.IOException from label09 to label10 with label56;
        catch java.lang.Throwable from label09 to label10 with label55;
        catch java.io.IOException from label11 to label12 with label56;
        catch java.lang.Throwable from label11 to label12 with label55;
        catch java.io.IOException from label13 to label14 with label56;
        catch java.lang.Throwable from label13 to label14 with label55;
        catch java.io.IOException from label15 to label16 with label56;
        catch java.lang.Throwable from label15 to label16 with label55;
        catch java.io.IOException from label18 to label19 with label56;
        catch java.lang.Throwable from label18 to label19 with label55;
        catch java.io.IOException from label20 to label21 with label56;
        catch java.lang.Throwable from label20 to label21 with label55;
        catch java.io.IOException from label22 to label23 with label56;
        catch java.lang.Throwable from label22 to label23 with label55;
        catch java.io.IOException from label24 to label25 with label56;
        catch java.lang.Throwable from label24 to label25 with label55;
        catch java.io.IOException from label26 to label27 with label56;
        catch java.lang.Throwable from label26 to label27 with label55;
        catch java.io.IOException from label28 to label29 with label56;
        catch java.lang.Throwable from label28 to label29 with label55;
        catch java.io.IOException from label30 to label31 with label56;
        catch java.lang.Throwable from label30 to label31 with label55;
        catch java.lang.NumberFormatException from label33 to label34 with label41;
        catch java.io.IOException from label33 to label34 with label56;
        catch java.lang.Throwable from label33 to label34 with label55;
        catch java.lang.NumberFormatException from label35 to label36 with label41;
        catch java.io.IOException from label35 to label36 with label56;
        catch java.lang.Throwable from label35 to label36 with label55;
        catch java.lang.NumberFormatException from label37 to label38 with label41;
        catch java.io.IOException from label37 to label38 with label56;
        catch java.lang.Throwable from label37 to label38 with label55;
        catch java.lang.NumberFormatException from label39 to label40 with label41;
        catch java.io.IOException from label39 to label40 with label56;
        catch java.lang.Throwable from label39 to label40 with label55;
        catch java.io.IOException from label42 to label43 with label56;
        catch java.lang.Throwable from label42 to label43 with label55;
        catch java.io.IOException from label44 to label45 with label56;
        catch java.lang.Throwable from label44 to label45 with label55;
        catch java.io.IOException from label46 to label47 with label56;
        catch java.lang.Throwable from label46 to label47 with label55;
        catch java.io.IOException from label48 to label49 with label56;
        catch java.lang.Throwable from label48 to label49 with label55;
        catch java.io.IOException from label50 to label51 with label56;
        catch java.lang.Throwable from label50 to label51 with label55;
        catch java.io.IOException from label52 to label53 with label54;
        catch java.lang.Throwable from label52 to label53 with label68;
        catch java.lang.Throwable from label57 to label58 with label55;
        catch java.io.IOException from label59 to label60 with label61;
        catch java.lang.Throwable from label59 to label60 with label68;
        catch java.io.IOException from label64 to label65 with label66;
        catch java.lang.Throwable from label64 to label65 with label68;
        catch java.lang.Throwable from label67 to label68 with label68;
    }

    public static native int writeEvent(int, float);

    public static native int writeEvent(int, int);

    public static native int writeEvent(int, long);

    public static native int writeEvent(int, java.lang.String);

    public static native transient int writeEvent(int, java.lang.Object[]);
}
