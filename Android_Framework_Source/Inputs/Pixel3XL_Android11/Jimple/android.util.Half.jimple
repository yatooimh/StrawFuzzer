public final class android.util.Half extends java.lang.Number implements java.lang.Comparable
{
    public static final short EPSILON;
    public static final short LOWEST_VALUE;
    public static final int MAX_EXPONENT;
    public static final short MAX_VALUE;
    public static final int MIN_EXPONENT;
    public static final short MIN_NORMAL;
    public static final short MIN_VALUE;
    public static final short NEGATIVE_INFINITY;
    public static final short NEGATIVE_ZERO;
    public static final short NaN;
    public static final short POSITIVE_INFINITY;
    public static final short POSITIVE_ZERO;
    public static final int SIZE;
    private final short mValue;

    public void <init>(double)
    {
        android.util.Half r0;
        double d0;
        float $f0;
        short $s0;

        r0 := @this: android.util.Half;

        d0 := @parameter0: double;

        specialinvoke r0.<java.lang.Number: void <init>()>();

        $f0 = (float) d0;

        $s0 = staticinvoke <android.util.Half: short toHalf(float)>($f0);

        r0.<android.util.Half: short mValue> = $s0;

        return;
    }

    public void <init>(float)
    {
        android.util.Half r0;
        float f0;
        short $s0;

        r0 := @this: android.util.Half;

        f0 := @parameter0: float;

        specialinvoke r0.<java.lang.Number: void <init>()>();

        $s0 = staticinvoke <android.util.Half: short toHalf(float)>(f0);

        r0.<android.util.Half: short mValue> = $s0;

        return;
    }

    public void <init>(java.lang.String) throws java.lang.NumberFormatException
    {
        android.util.Half r0;
        java.lang.String r1;
        float $f0;
        short $s0;

        r0 := @this: android.util.Half;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Number: void <init>()>();

        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r1);

        $s0 = staticinvoke <android.util.Half: short toHalf(float)>($f0);

        r0.<android.util.Half: short mValue> = $s0;

        return;
    }

    public void <init>(short)
    {
        android.util.Half r0;
        short s0, $s1;

        r0 := @this: android.util.Half;

        s0 := @parameter0: short;

        specialinvoke r0.<java.lang.Number: void <init>()>();

        $s1 = (short) s0;

        r0.<android.util.Half: short mValue> = $s1;

        return;
    }

    public static short abs(short)
    {
        short s0, $s1, $s2;

        s0 := @parameter0: short;

        $s1 = s0 & 32767;

        $s2 = (short) $s1;

        return $s2;
    }

    public static short ceil(short)
    {
        short s0, $s1;

        s0 := @parameter0: short;

        $s1 = staticinvoke <libcore.util.FP16: short ceil(short)>(s0);

        return $s1;
    }

    public static int compare(short, short)
    {
        short s0, s1;
        int $i2;

        s0 := @parameter0: short;

        s1 := @parameter1: short;

        $i2 = staticinvoke <libcore.util.FP16: int compare(short,short)>(s0, s1);

        return $i2;
    }

    public static short copySign(short, short)
    {
        short s0, s1, $s2, $s5;
        int $i3, $i4;

        s0 := @parameter0: short;

        s1 := @parameter1: short;

        $i3 = 32768 & s1;

        $s2 = s0 & 32767;

        $i4 = $i3 | $s2;

        $s5 = (short) $i4;

        return $s5;
    }

    public static boolean equals(short, short)
    {
        short s0, s1;
        boolean $z0;

        s0 := @parameter0: short;

        s1 := @parameter1: short;

        $z0 = staticinvoke <libcore.util.FP16: boolean equals(short,short)>(s0, s1);

        return $z0;
    }

    public static short floor(short)
    {
        short s0, $s1;

        s0 := @parameter0: short;

        $s1 = staticinvoke <libcore.util.FP16: short floor(short)>(s0);

        return $s1;
    }

    public static int getExponent(short)
    {
        short s0, $s1, $s2;
        int $i3;

        s0 := @parameter0: short;

        $s1 = s0 >>> 10;

        $s2 = $s1 & 31;

        $i3 = $s2 - 15;

        return $i3;
    }

    public static int getSign(short)
    {
        int $i0;
        short s1;
        byte b2;

        s1 := @parameter0: short;

        $i0 = 32768 & s1;

        if $i0 != 0 goto label1;

        b2 = 1;

        goto label2;

     label1:
        b2 = -1;

     label2:
        return b2;
    }

    public static int getSignificand(short)
    {
        short s0, $s1;

        s0 := @parameter0: short;

        $s1 = s0 & 1023;

        return $s1;
    }

    public static boolean greater(short, short)
    {
        short s0, s1;
        boolean $z0;

        s0 := @parameter0: short;

        s1 := @parameter1: short;

        $z0 = staticinvoke <libcore.util.FP16: boolean greater(short,short)>(s0, s1);

        return $z0;
    }

    public static boolean greaterEquals(short, short)
    {
        short s0, s1;
        boolean $z0;

        s0 := @parameter0: short;

        s1 := @parameter1: short;

        $z0 = staticinvoke <libcore.util.FP16: boolean greaterEquals(short,short)>(s0, s1);

        return $z0;
    }

    public static int halfToIntBits(short)
    {
        short $s0, s1;
        int i2;

        s1 := @parameter0: short;

        $s0 = s1 & 32767;

        if $s0 <= 31744 goto label1;

        i2 = 32256;

        goto label2;

     label1:
        i2 = 65535 & s1;

     label2:
        return i2;
    }

    public static int halfToRawIntBits(short)
    {
        short s0;
        int $i1;

        s0 := @parameter0: short;

        $i1 = 65535 & s0;

        return $i1;
    }

    public static short halfToShortBits(short)
    {
        short $s0, s1, s3;

        s1 := @parameter0: short;

        $s0 = s1 & 32767;

        if $s0 <= 31744 goto label1;

        s3 = 32256;

        goto label2;

     label1:
        s3 = s1;

     label2:
        return s3;
    }

    public static int hashCode(short)
    {
        short s0;
        int $i1;

        s0 := @parameter0: short;

        $i1 = staticinvoke <android.util.Half: int halfToIntBits(short)>(s0);

        return $i1;
    }

    public static short intBitsToHalf(int)
    {
        int i0, $i1;
        short $s2;

        i0 := @parameter0: int;

        $i1 = 65535 & i0;

        $s2 = (short) $i1;

        return $s2;
    }

    public static boolean isInfinite(short)
    {
        short s0;
        boolean $z0;

        s0 := @parameter0: short;

        $z0 = staticinvoke <libcore.util.FP16: boolean isInfinite(short)>(s0);

        return $z0;
    }

    public static boolean isNaN(short)
    {
        short s0;
        boolean $z0;

        s0 := @parameter0: short;

        $z0 = staticinvoke <libcore.util.FP16: boolean isNaN(short)>(s0);

        return $z0;
    }

    public static boolean isNormalized(short)
    {
        short s0;
        boolean $z0;

        s0 := @parameter0: short;

        $z0 = staticinvoke <libcore.util.FP16: boolean isNormalized(short)>(s0);

        return $z0;
    }

    public static boolean less(short, short)
    {
        short s0, s1;
        boolean $z0;

        s0 := @parameter0: short;

        s1 := @parameter1: short;

        $z0 = staticinvoke <libcore.util.FP16: boolean less(short,short)>(s0, s1);

        return $z0;
    }

    public static boolean lessEquals(short, short)
    {
        short s0, s1;
        boolean $z0;

        s0 := @parameter0: short;

        s1 := @parameter1: short;

        $z0 = staticinvoke <libcore.util.FP16: boolean lessEquals(short,short)>(s0, s1);

        return $z0;
    }

    public static short max(short, short)
    {
        short s0, s1, $s2;

        s0 := @parameter0: short;

        s1 := @parameter1: short;

        $s2 = staticinvoke <libcore.util.FP16: short max(short,short)>(s0, s1);

        return $s2;
    }

    public static short min(short, short)
    {
        short s0, s1, $s2;

        s0 := @parameter0: short;

        s1 := @parameter1: short;

        $s2 = staticinvoke <libcore.util.FP16: short min(short,short)>(s0, s1);

        return $s2;
    }

    public static short parseHalf(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String r0;
        float $f0;
        short $s0;

        r0 := @parameter0: java.lang.String;

        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r0);

        $s0 = staticinvoke <android.util.Half: short toHalf(float)>($f0);

        return $s0;
    }

    public static short round(short)
    {
        short s0, $s1;

        s0 := @parameter0: short;

        $s1 = staticinvoke <libcore.util.FP16: short rint(short)>(s0);

        return $s1;
    }

    public static float toFloat(short)
    {
        short s0;
        float $f0;

        s0 := @parameter0: short;

        $f0 = staticinvoke <libcore.util.FP16: float toFloat(short)>(s0);

        return $f0;
    }

    public static short toHalf(float)
    {
        float f0;
        short $s0;

        f0 := @parameter0: float;

        $s0 = staticinvoke <libcore.util.FP16: short toHalf(float)>(f0);

        return $s0;
    }

    public static java.lang.String toHexString(short)
    {
        short s0;
        java.lang.String $r0;

        s0 := @parameter0: short;

        $r0 = staticinvoke <libcore.util.FP16: java.lang.String toHexString(short)>(s0);

        return $r0;
    }

    public static java.lang.String toString(short)
    {
        short s0;
        float $f0;
        java.lang.String $r0;

        s0 := @parameter0: short;

        $f0 = staticinvoke <android.util.Half: float toFloat(short)>(s0);

        $r0 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f0);

        return $r0;
    }

    public static short trunc(short)
    {
        short s0, $s1;

        s0 := @parameter0: short;

        $s1 = staticinvoke <libcore.util.FP16: short trunc(short)>(s0);

        return $s1;
    }

    public static android.util.Half valueOf(float)
    {
        float f0;
        android.util.Half $r0;

        f0 := @parameter0: float;

        $r0 = new android.util.Half;

        specialinvoke $r0.<android.util.Half: void <init>(float)>(f0);

        return $r0;
    }

    public static android.util.Half valueOf(java.lang.String)
    {
        java.lang.String r0;
        android.util.Half $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = new android.util.Half;

        specialinvoke $r1.<android.util.Half: void <init>(java.lang.String)>(r0);

        return $r1;
    }

    public static android.util.Half valueOf(short)
    {
        short s0;
        android.util.Half $r0;

        s0 := @parameter0: short;

        $r0 = new android.util.Half;

        specialinvoke $r0.<android.util.Half: void <init>(short)>(s0);

        return $r0;
    }

    public byte byteValue()
    {
        android.util.Half r0;
        short $s0;
        float $f0;
        int $i1;
        byte $b2;

        r0 := @this: android.util.Half;

        $s0 = r0.<android.util.Half: short mValue>;

        $f0 = staticinvoke <android.util.Half: float toFloat(short)>($s0);

        $i1 = (int) $f0;

        $b2 = (byte) $i1;

        return $b2;
    }

    public int compareTo(android.util.Half)
    {
        android.util.Half r0, r1;
        short $s0, $s1;
        int $i2;

        r0 := @this: android.util.Half;

        r1 := @parameter0: android.util.Half;

        $s1 = r0.<android.util.Half: short mValue>;

        $s0 = r1.<android.util.Half: short mValue>;

        $i2 = staticinvoke <android.util.Half: int compare(short,short)>($s1, $s0);

        return $i2;
    }

    public volatile int compareTo(java.lang.Object)
    {
        android.util.Half r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: android.util.Half;

        r1 := @parameter0: java.lang.Object;

        $r2 = (android.util.Half) r1;

        $i0 = virtualinvoke r0.<android.util.Half: int compareTo(android.util.Half)>($r2);

        return $i0;
    }

    public double doubleValue()
    {
        android.util.Half r0;
        short $s0;
        float $f0;
        double $d0;

        r0 := @this: android.util.Half;

        $s0 = r0.<android.util.Half: short mValue>;

        $f0 = staticinvoke <android.util.Half: float toFloat(short)>($s0);

        $d0 = (double) $f0;

        return $d0;
    }

    public boolean equals(java.lang.Object)
    {
        android.util.Half r0, $r2;
        java.lang.Object r1;
        boolean $z0, z1;
        short $s0, $s2;
        int $i1, $i3;

        r0 := @this: android.util.Half;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof android.util.Half;

        if $z0 == 0 goto label1;

        $r2 = (android.util.Half) r1;

        $s0 = $r2.<android.util.Half: short mValue>;

        $i1 = staticinvoke <android.util.Half: int halfToIntBits(short)>($s0);

        $s2 = r0.<android.util.Half: short mValue>;

        $i3 = staticinvoke <android.util.Half: int halfToIntBits(short)>($s2);

        if $i1 != $i3 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public float floatValue()
    {
        android.util.Half r0;
        short $s0;
        float $f0;

        r0 := @this: android.util.Half;

        $s0 = r0.<android.util.Half: short mValue>;

        $f0 = staticinvoke <android.util.Half: float toFloat(short)>($s0);

        return $f0;
    }

    public short halfValue()
    {
        android.util.Half r0;
        short $s0;

        r0 := @this: android.util.Half;

        $s0 = r0.<android.util.Half: short mValue>;

        return $s0;
    }

    public int hashCode()
    {
        android.util.Half r0;
        short $s0;
        int $i1;

        r0 := @this: android.util.Half;

        $s0 = r0.<android.util.Half: short mValue>;

        $i1 = staticinvoke <android.util.Half: int hashCode(short)>($s0);

        return $i1;
    }

    public int intValue()
    {
        android.util.Half r0;
        short $s0;
        float $f0;
        int $i1;

        r0 := @this: android.util.Half;

        $s0 = r0.<android.util.Half: short mValue>;

        $f0 = staticinvoke <android.util.Half: float toFloat(short)>($s0);

        $i1 = (int) $f0;

        return $i1;
    }

    public boolean isNaN()
    {
        android.util.Half r0;
        short $s0;
        boolean $z0;

        r0 := @this: android.util.Half;

        $s0 = r0.<android.util.Half: short mValue>;

        $z0 = staticinvoke <android.util.Half: boolean isNaN(short)>($s0);

        return $z0;
    }

    public long longValue()
    {
        android.util.Half r0;
        short $s0;
        float $f0;
        long $l1;

        r0 := @this: android.util.Half;

        $s0 = r0.<android.util.Half: short mValue>;

        $f0 = staticinvoke <android.util.Half: float toFloat(short)>($s0);

        $l1 = (long) $f0;

        return $l1;
    }

    public short shortValue()
    {
        android.util.Half r0;
        short $s0, $s2;
        float $f0;
        int $i1;

        r0 := @this: android.util.Half;

        $s0 = r0.<android.util.Half: short mValue>;

        $f0 = staticinvoke <android.util.Half: float toFloat(short)>($s0);

        $i1 = (int) $f0;

        $s2 = (short) $i1;

        return $s2;
    }

    public java.lang.String toString()
    {
        android.util.Half r0;
        short $s0;
        java.lang.String $r1;

        r0 := @this: android.util.Half;

        $s0 = r0.<android.util.Half: short mValue>;

        $r1 = staticinvoke <android.util.Half: java.lang.String toString(short)>($s0);

        return $r1;
    }

    public static void <clinit>()
    {
        <android.util.Half: int SIZE> = 16;

        <android.util.Half: short POSITIVE_ZERO> = 0;

        <android.util.Half: short POSITIVE_INFINITY> = 31744;

        <android.util.Half: short NaN> = 32256;

        <android.util.Half: short NEGATIVE_ZERO> = -32768;

        <android.util.Half: short NEGATIVE_INFINITY> = -1024;

        <android.util.Half: short MIN_VALUE> = 1;

        <android.util.Half: short MIN_NORMAL> = 1024;

        <android.util.Half: int MIN_EXPONENT> = -14;

        <android.util.Half: short MAX_VALUE> = 31743;

        <android.util.Half: int MAX_EXPONENT> = 15;

        <android.util.Half: short LOWEST_VALUE> = -1025;

        <android.util.Half: short EPSILON> = 5120;

        return;
    }
}
