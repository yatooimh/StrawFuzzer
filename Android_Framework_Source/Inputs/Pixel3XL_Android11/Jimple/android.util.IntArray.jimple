public class android.util.IntArray extends java.lang.Object implements java.lang.Cloneable
{
    private static final int MIN_CAPACITY_INCREMENT;
    private int mSize;
    private int[] mValues;

    public void <init>()
    {
        android.util.IntArray r0;

        r0 := @this: android.util.IntArray;

        specialinvoke r0.<android.util.IntArray: void <init>(int)>(10);

        return;
    }

    public void <init>(int)
    {
        android.util.IntArray r0;
        int i0;
        int[] $r1, $r2;

        r0 := @this: android.util.IntArray;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 != 0 goto label1;

        $r2 = <libcore.util.EmptyArray: int[] INT>;

        r0.<android.util.IntArray: int[] mValues> = $r2;

        goto label2;

     label1:
        $r1 = staticinvoke <com.android.internal.util.ArrayUtils: int[] newUnpaddedIntArray(int)>(i0);

        r0.<android.util.IntArray: int[] mValues> = $r1;

     label2:
        r0.<android.util.IntArray: int mSize> = 0;

        return;
    }

    private void <init>(int[], int)
    {
        android.util.IntArray r0;
        int[] r1;
        int i0, $i1, $i2;

        r0 := @this: android.util.IntArray;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.util.IntArray: int[] mValues> = r1;

        $i1 = lengthof r1;

        $i2 = staticinvoke <com.android.internal.util.Preconditions: int checkArgumentInRange(int,int,int,java.lang.String)>(i0, 0, $i1, "size");

        r0.<android.util.IntArray: int mSize> = $i2;

        return;
    }

    private void ensureCapacity(int)
    {
        android.util.IntArray r0;
        int i0, i1, $i2, i3, i4, i5;
        int[] r1, $r2, $r3;

        r0 := @this: android.util.IntArray;

        i3 := @parameter0: int;

        i0 = r0.<android.util.IntArray: int mSize>;

        i1 = i0 + i3;

        $r2 = r0.<android.util.IntArray: int[] mValues>;

        $i2 = lengthof $r2;

        if i1 < $i2 goto label5;

        if i0 >= 6 goto label1;

        i4 = 12;

        goto label2;

     label1:
        i4 = i0 >> 1;

     label2:
        i5 = i4 + i0;

        if i5 <= i1 goto label3;

        goto label4;

     label3:
        i5 = i1;

     label4:
        r1 = staticinvoke <com.android.internal.util.ArrayUtils: int[] newUnpaddedIntArray(int)>(i5);

        $r3 = r0.<android.util.IntArray: int[] mValues>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r1, 0, i0);

        r0.<android.util.IntArray: int[] mValues> = r1;

     label5:
        return;
    }

    public static android.util.IntArray fromArray(int[], int)
    {
        int[] r0, $r1;
        int i0;
        android.util.IntArray $r2;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $r1 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>(r0, i0);

        $r2 = staticinvoke <android.util.IntArray: android.util.IntArray wrap(int[])>($r1);

        return $r2;
    }

    public static android.util.IntArray wrap(int[])
    {
        int[] r0;
        android.util.IntArray $r1;
        int $i0;

        r0 := @parameter0: int[];

        $r1 = new android.util.IntArray;

        $i0 = lengthof r0;

        specialinvoke $r1.<android.util.IntArray: void <init>(int[],int)>(r0, $i0);

        return $r1;
    }

    public void add(int)
    {
        android.util.IntArray r0;
        int i0, $i1;

        r0 := @this: android.util.IntArray;

        i0 := @parameter0: int;

        $i1 = r0.<android.util.IntArray: int mSize>;

        virtualinvoke r0.<android.util.IntArray: void add(int,int)>($i1, i0);

        return;
    }

    public void add(int, int)
    {
        android.util.IntArray r0;
        int i0, i1, i2, $i3, i4, i5;
        int[] r1, $r2;

        r0 := @this: android.util.IntArray;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<android.util.IntArray: void ensureCapacity(int)>(1);

        i4 = r0.<android.util.IntArray: int mSize>;

        i2 = i4 - i0;

        i5 = i4 + 1;

        r0.<android.util.IntArray: int mSize> = i5;

        staticinvoke <com.android.internal.util.ArrayUtils: void checkBounds(int,int)>(i5, i0);

        if i2 == 0 goto label1;

        r1 = r0.<android.util.IntArray: int[] mValues>;

        $i3 = i0 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i0, r1, $i3, i2);

     label1:
        $r2 = r0.<android.util.IntArray: int[] mValues>;

        $r2[i0] = i1;

        return;
    }

    public void addAll(android.util.IntArray)
    {
        android.util.IntArray r0, r1;
        int i0, $i1, $i2, $i3;
        int[] $r2, $r3;

        r0 := @this: android.util.IntArray;

        r1 := @parameter0: android.util.IntArray;

        i0 = r1.<android.util.IntArray: int mSize>;

        specialinvoke r0.<android.util.IntArray: void ensureCapacity(int)>(i0);

        $r3 = r1.<android.util.IntArray: int[] mValues>;

        $r2 = r0.<android.util.IntArray: int[] mValues>;

        $i1 = r0.<android.util.IntArray: int mSize>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r2, $i1, i0);

        $i2 = r0.<android.util.IntArray: int mSize>;

        $i3 = $i2 + i0;

        r0.<android.util.IntArray: int mSize> = $i3;

        return;
    }

    public int binarySearch(int)
    {
        android.util.IntArray r0;
        int i0, $i1, $i2;
        int[] $r1;

        r0 := @this: android.util.IntArray;

        i0 := @parameter0: int;

        $r1 = r0.<android.util.IntArray: int[] mValues>;

        $i1 = r0.<android.util.IntArray: int mSize>;

        $i2 = staticinvoke <android.util.ContainerHelpers: int binarySearch(int[],int,int)>($r1, $i1, i0);

        return $i2;
    }

    public void clear()
    {
        android.util.IntArray r0;

        r0 := @this: android.util.IntArray;

        r0.<android.util.IntArray: int mSize> = 0;

        return;
    }

    public android.util.IntArray clone() throws java.lang.CloneNotSupportedException
    {
        android.util.IntArray r0, r1;
        java.lang.Object $r2, $r4;
        int[] $r3, $r5;

        r0 := @this: android.util.IntArray;

        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r1 = (android.util.IntArray) $r2;

        $r3 = r0.<android.util.IntArray: int[] mValues>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();

        $r5 = (int[]) $r4;

        r1.<android.util.IntArray: int[] mValues> = $r5;

        return r1;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        android.util.IntArray r0, $r1;

        r0 := @this: android.util.IntArray;

        $r1 = virtualinvoke r0.<android.util.IntArray: android.util.IntArray clone()>();

        return $r1;
    }

    public int get(int)
    {
        android.util.IntArray r0;
        int i0, $i1, $i2;
        int[] $r1;

        r0 := @this: android.util.IntArray;

        i0 := @parameter0: int;

        $i1 = r0.<android.util.IntArray: int mSize>;

        staticinvoke <com.android.internal.util.ArrayUtils: void checkBounds(int,int)>($i1, i0);

        $r1 = r0.<android.util.IntArray: int[] mValues>;

        $i2 = $r1[i0];

        return $i2;
    }

    public int indexOf(int)
    {
        android.util.IntArray r0;
        int i0, i1, $i2, i3;
        int[] $r1;

        r0 := @this: android.util.IntArray;

        i0 := @parameter0: int;

        i1 = r0.<android.util.IntArray: int mSize>;

        i3 = 0;

     label1:
        if i3 >= i1 goto label3;

        $r1 = r0.<android.util.IntArray: int[] mValues>;

        $i2 = $r1[i3];

        if $i2 != i0 goto label2;

        return i3;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return -1;
    }

    public void remove(int)
    {
        android.util.IntArray r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        int[] r1;

        r0 := @this: android.util.IntArray;

        i0 := @parameter0: int;

        $i1 = r0.<android.util.IntArray: int mSize>;

        staticinvoke <com.android.internal.util.ArrayUtils: void checkBounds(int,int)>($i1, i0);

        r1 = r0.<android.util.IntArray: int[] mValues>;

        $i5 = i0 + 1;

        $i2 = r0.<android.util.IntArray: int mSize>;

        $i3 = $i2 - i0;

        $i4 = $i3 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i5, r1, i0, $i4);

        $i6 = r0.<android.util.IntArray: int mSize>;

        $i7 = $i6 - 1;

        r0.<android.util.IntArray: int mSize> = $i7;

        return;
    }

    public void resize(int)
    {
        android.util.IntArray r0;
        int i0, $i2, $i3, $i4, $i5;
        int[] r1;

        r0 := @this: android.util.IntArray;

        i0 := @parameter0: int;

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentNonnegative(int)>(i0);

        r1 = r0.<android.util.IntArray: int[] mValues>;

        $i2 = lengthof r1;

        if i0 > $i2 goto label1;

        $i5 = lengthof r1;

        staticinvoke <java.util.Arrays: void fill(int[],int,int,int)>(r1, i0, $i5, 0);

        goto label2;

     label1:
        $i3 = r0.<android.util.IntArray: int mSize>;

        $i4 = i0 - $i3;

        specialinvoke r0.<android.util.IntArray: void ensureCapacity(int)>($i4);

     label2:
        r0.<android.util.IntArray: int mSize> = i0;

        return;
    }

    public void set(int, int)
    {
        android.util.IntArray r0;
        int i0, i1, $i2;
        int[] $r1;

        r0 := @this: android.util.IntArray;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = r0.<android.util.IntArray: int mSize>;

        staticinvoke <com.android.internal.util.ArrayUtils: void checkBounds(int,int)>($i2, i0);

        $r1 = r0.<android.util.IntArray: int[] mValues>;

        $r1[i0] = i1;

        return;
    }

    public int size()
    {
        android.util.IntArray r0;
        int $i0;

        r0 := @this: android.util.IntArray;

        $i0 = r0.<android.util.IntArray: int mSize>;

        return $i0;
    }

    public int[] toArray()
    {
        android.util.IntArray r0;
        int $i0;
        int[] $r1, $r2;

        r0 := @this: android.util.IntArray;

        $r1 = r0.<android.util.IntArray: int[] mValues>;

        $i0 = r0.<android.util.IntArray: int mSize>;

        $r2 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r1, $i0);

        return $r2;
    }

    public static void <clinit>()
    {
        <android.util.IntArray: int MIN_CAPACITY_INCREMENT> = 12;

        return;
    }
}
