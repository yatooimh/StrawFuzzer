public class android.util.LongArray extends java.lang.Object implements java.lang.Cloneable
{
    private static final int MIN_CAPACITY_INCREMENT;
    private int mSize;
    private long[] mValues;

    public void <init>()
    {
        android.util.LongArray r0;

        r0 := @this: android.util.LongArray;

        specialinvoke r0.<android.util.LongArray: void <init>(int)>(10);

        return;
    }

    public void <init>(int)
    {
        android.util.LongArray r0;
        int i0;
        long[] $r1, $r2;

        r0 := @this: android.util.LongArray;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 != 0 goto label1;

        $r2 = <libcore.util.EmptyArray: long[] LONG>;

        r0.<android.util.LongArray: long[] mValues> = $r2;

        goto label2;

     label1:
        $r1 = staticinvoke <com.android.internal.util.ArrayUtils: long[] newUnpaddedLongArray(int)>(i0);

        r0.<android.util.LongArray: long[] mValues> = $r1;

     label2:
        r0.<android.util.LongArray: int mSize> = 0;

        return;
    }

    private void <init>(long[], int)
    {
        android.util.LongArray r0;
        long[] r1;
        int i0, $i1, $i2;

        r0 := @this: android.util.LongArray;

        r1 := @parameter0: long[];

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.util.LongArray: long[] mValues> = r1;

        $i1 = lengthof r1;

        $i2 = staticinvoke <com.android.internal.util.Preconditions: int checkArgumentInRange(int,int,int,java.lang.String)>(i0, 0, $i1, "size");

        r0.<android.util.LongArray: int mSize> = $i2;

        return;
    }

    public static boolean elementsEqual(android.util.LongArray, android.util.LongArray)
    {
        android.util.LongArray r0, r1;
        int $i0, $i1, $i2, i6;
        long $l3, $l4;
        byte $b5;
        boolean z0;

        r0 := @parameter0: android.util.LongArray;

        r1 := @parameter1: android.util.LongArray;

        z0 = 1;

        if r0 == null goto label6;

        if r1 != null goto label1;

        goto label6;

     label1:
        $i1 = r0.<android.util.LongArray: int mSize>;

        $i0 = r1.<android.util.LongArray: int mSize>;

        if $i1 == $i0 goto label2;

        return 0;

     label2:
        i6 = 0;

     label3:
        $i2 = r0.<android.util.LongArray: int mSize>;

        if i6 >= $i2 goto label5;

        $l3 = virtualinvoke r0.<android.util.LongArray: long get(int)>(i6);

        $l4 = virtualinvoke r1.<android.util.LongArray: long get(int)>(i6);

        $b5 = $l3 cmp $l4;

        if $b5 == 0 goto label4;

        return 0;

     label4:
        i6 = i6 + 1;

        goto label3;

     label5:
        return 1;

     label6:
        if r0 != r1 goto label7;

        goto label8;

     label7:
        z0 = 0;

     label8:
        return z0;
    }

    private void ensureCapacity(int)
    {
        android.util.LongArray r0;
        int i0, i1, $i2, i3, i4, i5;
        long[] r1, $r2, $r3;

        r0 := @this: android.util.LongArray;

        i3 := @parameter0: int;

        i0 = r0.<android.util.LongArray: int mSize>;

        i1 = i0 + i3;

        $r2 = r0.<android.util.LongArray: long[] mValues>;

        $i2 = lengthof $r2;

        if i1 < $i2 goto label5;

        if i0 >= 6 goto label1;

        i4 = 12;

        goto label2;

     label1:
        i4 = i0 >> 1;

     label2:
        i5 = i4 + i0;

        if i5 <= i1 goto label3;

        goto label4;

     label3:
        i5 = i1;

     label4:
        r1 = staticinvoke <com.android.internal.util.ArrayUtils: long[] newUnpaddedLongArray(int)>(i5);

        $r3 = r0.<android.util.LongArray: long[] mValues>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r1, 0, i0);

        r0.<android.util.LongArray: long[] mValues> = r1;

     label5:
        return;
    }

    public static android.util.LongArray fromArray(long[], int)
    {
        long[] r0, $r1;
        int i0;
        android.util.LongArray $r2;

        r0 := @parameter0: long[];

        i0 := @parameter1: int;

        $r1 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>(r0, i0);

        $r2 = staticinvoke <android.util.LongArray: android.util.LongArray wrap(long[])>($r1);

        return $r2;
    }

    public static android.util.LongArray wrap(long[])
    {
        long[] r0;
        android.util.LongArray $r1;
        int $i0;

        r0 := @parameter0: long[];

        $r1 = new android.util.LongArray;

        $i0 = lengthof r0;

        specialinvoke $r1.<android.util.LongArray: void <init>(long[],int)>(r0, $i0);

        return $r1;
    }

    public void add(int, long)
    {
        android.util.LongArray r0;
        int i0, i2, $i3, i4, i5;
        long l1;
        long[] r1, $r2;

        r0 := @this: android.util.LongArray;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        specialinvoke r0.<android.util.LongArray: void ensureCapacity(int)>(1);

        i4 = r0.<android.util.LongArray: int mSize>;

        i2 = i4 - i0;

        i5 = i4 + 1;

        r0.<android.util.LongArray: int mSize> = i5;

        staticinvoke <com.android.internal.util.ArrayUtils: void checkBounds(int,int)>(i5, i0);

        if i2 == 0 goto label1;

        r1 = r0.<android.util.LongArray: long[] mValues>;

        $i3 = i0 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i0, r1, $i3, i2);

     label1:
        $r2 = r0.<android.util.LongArray: long[] mValues>;

        $r2[i0] = l1;

        return;
    }

    public void add(long)
    {
        android.util.LongArray r0;
        long l0;
        int $i1;

        r0 := @this: android.util.LongArray;

        l0 := @parameter0: long;

        $i1 = r0.<android.util.LongArray: int mSize>;

        virtualinvoke r0.<android.util.LongArray: void add(int,long)>($i1, l0);

        return;
    }

    public void addAll(android.util.LongArray)
    {
        android.util.LongArray r0, r1;
        int i0, $i1, $i2, $i3;
        long[] $r2, $r3;

        r0 := @this: android.util.LongArray;

        r1 := @parameter0: android.util.LongArray;

        i0 = r1.<android.util.LongArray: int mSize>;

        specialinvoke r0.<android.util.LongArray: void ensureCapacity(int)>(i0);

        $r3 = r1.<android.util.LongArray: long[] mValues>;

        $r2 = r0.<android.util.LongArray: long[] mValues>;

        $i1 = r0.<android.util.LongArray: int mSize>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r2, $i1, i0);

        $i2 = r0.<android.util.LongArray: int mSize>;

        $i3 = $i2 + i0;

        r0.<android.util.LongArray: int mSize> = $i3;

        return;
    }

    public void clear()
    {
        android.util.LongArray r0;

        r0 := @this: android.util.LongArray;

        r0.<android.util.LongArray: int mSize> = 0;

        return;
    }

    public android.util.LongArray clone()
    {
        android.util.LongArray r0, r6, r7;
        java.lang.Object $r1, $r3;
        long[] $r2, $r4;
        java.lang.Throwable $r5;

        r0 := @this: android.util.LongArray;

        r6 = null;

     label1:
        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r7 = (android.util.LongArray) $r1;

     label2:
        r6 = r7;

     label3:
        $r2 = r0.<android.util.LongArray: long[] mValues>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (long[]) $r3;

        r7.<android.util.LongArray: long[] mValues> = $r4;

     label4:
        r6 = r7;

        goto label6;

     label5:
        $r5 := @caughtexception;

     label6:
        return r6;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label5;
        catch java.lang.CloneNotSupportedException from label3 to label4 with label5;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        android.util.LongArray r0, $r1;

        r0 := @this: android.util.LongArray;

        $r1 = virtualinvoke r0.<android.util.LongArray: android.util.LongArray clone()>();

        return $r1;
    }

    public long get(int)
    {
        android.util.LongArray r0;
        int i0, $i1;
        long[] $r1;
        long $l2;

        r0 := @this: android.util.LongArray;

        i0 := @parameter0: int;

        $i1 = r0.<android.util.LongArray: int mSize>;

        staticinvoke <com.android.internal.util.ArrayUtils: void checkBounds(int,int)>($i1, i0);

        $r1 = r0.<android.util.LongArray: long[] mValues>;

        $l2 = $r1[i0];

        return $l2;
    }

    public int indexOf(long)
    {
        android.util.LongArray r0;
        long l0, $l2;
        int i1, i4;
        long[] $r1;
        byte $b3;

        r0 := @this: android.util.LongArray;

        l0 := @parameter0: long;

        i1 = r0.<android.util.LongArray: int mSize>;

        i4 = 0;

     label1:
        if i4 >= i1 goto label3;

        $r1 = r0.<android.util.LongArray: long[] mValues>;

        $l2 = $r1[i4];

        $b3 = $l2 cmp l0;

        if $b3 != 0 goto label2;

        return i4;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        return -1;
    }

    public void remove(int)
    {
        android.util.LongArray r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        long[] r1;

        r0 := @this: android.util.LongArray;

        i0 := @parameter0: int;

        $i1 = r0.<android.util.LongArray: int mSize>;

        staticinvoke <com.android.internal.util.ArrayUtils: void checkBounds(int,int)>($i1, i0);

        r1 = r0.<android.util.LongArray: long[] mValues>;

        $i5 = i0 + 1;

        $i2 = r0.<android.util.LongArray: int mSize>;

        $i3 = $i2 - i0;

        $i4 = $i3 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i5, r1, i0, $i4);

        $i6 = r0.<android.util.LongArray: int mSize>;

        $i7 = $i6 - 1;

        r0.<android.util.LongArray: int mSize> = $i7;

        return;
    }

    public void resize(int)
    {
        android.util.LongArray r0;
        int i0, $i2, $i3, $i4, $i5;
        long[] r1;

        r0 := @this: android.util.LongArray;

        i0 := @parameter0: int;

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentNonnegative(int)>(i0);

        r1 = r0.<android.util.LongArray: long[] mValues>;

        $i2 = lengthof r1;

        if i0 > $i2 goto label1;

        $i5 = lengthof r1;

        staticinvoke <java.util.Arrays: void fill(long[],int,int,long)>(r1, i0, $i5, 0L);

        goto label2;

     label1:
        $i3 = r0.<android.util.LongArray: int mSize>;

        $i4 = i0 - $i3;

        specialinvoke r0.<android.util.LongArray: void ensureCapacity(int)>($i4);

     label2:
        r0.<android.util.LongArray: int mSize> = i0;

        return;
    }

    public void set(int, long)
    {
        android.util.LongArray r0;
        int i0, $i2;
        long l1;
        long[] $r1;

        r0 := @this: android.util.LongArray;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        $i2 = r0.<android.util.LongArray: int mSize>;

        staticinvoke <com.android.internal.util.ArrayUtils: void checkBounds(int,int)>($i2, i0);

        $r1 = r0.<android.util.LongArray: long[] mValues>;

        $r1[i0] = l1;

        return;
    }

    public int size()
    {
        android.util.LongArray r0;
        int $i0;

        r0 := @this: android.util.LongArray;

        $i0 = r0.<android.util.LongArray: int mSize>;

        return $i0;
    }

    public long[] toArray()
    {
        android.util.LongArray r0;
        int $i0;
        long[] $r1, $r2;

        r0 := @this: android.util.LongArray;

        $r1 = r0.<android.util.LongArray: long[] mValues>;

        $i0 = r0.<android.util.LongArray: int mSize>;

        $r2 = staticinvoke <java.util.Arrays: long[] copyOf(long[],int)>($r1, $i0);

        return $r2;
    }

    public static void <clinit>()
    {
        <android.util.LongArray: int MIN_CAPACITY_INCREMENT> = 12;

        return;
    }
}
