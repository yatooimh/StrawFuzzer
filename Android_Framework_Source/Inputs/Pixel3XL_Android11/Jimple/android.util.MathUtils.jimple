public final class android.util.MathUtils extends java.lang.Object
{
    private static final float DEG_TO_RAD;
    private static final float RAD_TO_DEG;

    private void <init>()
    {
        android.util.MathUtils r0;

        r0 := @this: android.util.MathUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static float abs(float)
    {
        byte $b0;
        float f0;

        f0 := @parameter0: float;

        $b0 = f0 cmpl 0.0F;

        if $b0 <= 0 goto label1;

        goto label2;

     label1:
        f0 = neg f0;

     label2:
        return f0;
    }

    public static float acos(float)
    {
        float f0, $f1;
        double $d0, $d1;

        f0 := @parameter0: float;

        $d0 = (double) f0;

        $d1 = staticinvoke <java.lang.Math: double acos(double)>($d0);

        $f1 = (float) $d1;

        return $f1;
    }

    public static int addOrThrow(int, int) throws java.lang.IllegalArgumentException
    {
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r6;
        java.lang.String $r7;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 != 0 goto label1;

        return i0;

     label1:
        if i1 <= 0 goto label2;

        $i4 = 2147483647 - i1;

        if i0 > $i4 goto label2;

        $i5 = i0 + i1;

        return $i5;

     label2:
        if i1 >= 0 goto label3;

        $i2 = -2147483648 - i1;

        if i0 < $i2 goto label3;

        $i3 = i0 + i1;

        return $i3;

     label3:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Addition overflow: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" + ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    public static float asin(float)
    {
        float f0, $f1;
        double $d0, $d1;

        f0 := @parameter0: float;

        $d0 = (double) f0;

        $d1 = staticinvoke <java.lang.Math: double asin(double)>($d0);

        $f1 = (float) $d1;

        return $f1;
    }

    public static float atan(float)
    {
        float f0, $f1;
        double $d0, $d1;

        f0 := @parameter0: float;

        $d0 = (double) f0;

        $d1 = staticinvoke <java.lang.Math: double atan(double)>($d0);

        $f1 = (float) $d1;

        return $f1;
    }

    public static float atan2(float, float)
    {
        float f0, f1, $f2;
        double $d0, $d1, $d2;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $d1 = (double) f0;

        $d0 = (double) f1;

        $d2 = staticinvoke <java.lang.Math: double atan2(double,double)>($d1, $d0);

        $f2 = (float) $d2;

        return $f2;
    }

    public static float constrain(float, float, float)
    {
        float f0, f1, f2;
        byte $b0, $b1;

        f2 := @parameter0: float;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        $b0 = f2 cmpg f0;

        if $b0 >= 0 goto label1;

        f2 = f0;

        goto label2;

     label1:
        $b1 = f2 cmpl f1;

        if $b1 <= 0 goto label2;

        f2 = f1;

        goto label2;

     label2:
        return f2;
    }

    public static int constrain(int, int, int)
    {
        int i0, i1, i2;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i2 >= i0 goto label1;

        i2 = i0;

        goto label2;

     label1:
        if i2 <= i1 goto label2;

        i2 = i1;

        goto label2;

     label2:
        return i2;
    }

    public static long constrain(long, long, long)
    {
        long l0, l1, l4;
        byte $b2, $b3;

        l4 := @parameter0: long;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $b2 = l4 cmp l0;

        if $b2 >= 0 goto label1;

        l4 = l0;

        goto label2;

     label1:
        $b3 = l4 cmp l1;

        if $b3 <= 0 goto label2;

        l4 = l1;

        goto label2;

     label2:
        return l4;
    }

    public static float constrainedMap(float, float, float, float, float)
    {
        float f0, f1, f2, f3, f4, $f5, $f6;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        f4 := @parameter4: float;

        $f5 = staticinvoke <android.util.MathUtils: float lerpInvSat(float,float,float)>(f2, f3, f4);

        $f6 = staticinvoke <android.util.MathUtils: float lerp(float,float,float)>(f0, f1, $f5);

        return $f6;
    }

    public static float cross(float, float, float, float)
    {
        float f0, f1, f2, f3, $f4, $f5, $f6;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        $f5 = f0 * f3;

        $f4 = f1 * f2;

        $f6 = $f5 - $f4;

        return $f6;
    }

    public static float degrees(float)
    {
        float f0, $f1;

        f0 := @parameter0: float;

        $f1 = 57.295784F * f0;

        return $f1;
    }

    public static float dist(float, float, float, float)
    {
        float f0, f1, f2, f3, $f4, $f5, $f6;
        double $d0, $d1, $d2;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        $f4 = f2 - f0;

        $d1 = (double) $f4;

        $f5 = f3 - f1;

        $d0 = (double) $f5;

        $d2 = staticinvoke <java.lang.Math: double hypot(double,double)>($d1, $d0);

        $f6 = (float) $d2;

        return $f6;
    }

    public static float dist(float, float, float, float, float, float)
    {
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8, f9, f10, f11, f12, f13, f14;
        double $d0, $d1;

        f9 := @parameter0: float;

        f10 := @parameter1: float;

        f11 := @parameter2: float;

        f0 := @parameter3: float;

        f1 := @parameter4: float;

        f2 := @parameter5: float;

        f12 = f0 - f9;

        f13 = f1 - f10;

        f14 = f2 - f11;

        $f4 = f12 * f12;

        $f3 = f13 * f13;

        $f6 = $f4 + $f3;

        $f5 = f14 * f14;

        $f7 = $f6 + $f5;

        $d0 = (double) $f7;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $f8 = (float) $d1;

        return $f8;
    }

    public static float dot(float, float, float, float)
    {
        float f0, f1, f2, f3, $f4, $f5, $f6;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        $f5 = f0 * f2;

        $f4 = f1 * f3;

        $f6 = $f5 + $f4;

        return $f6;
    }

    public static float exp(float)
    {
        float f0, $f1;
        double $d0, $d1;

        f0 := @parameter0: float;

        $d0 = (double) f0;

        $d1 = staticinvoke <java.lang.Math: double exp(double)>($d0);

        $f1 = (float) $d1;

        return $f1;
    }

    public static void fitRect(android.graphics.Rect, int)
    {
        android.graphics.Rect r0;
        int i0, $i1, $i2, $i3;
        float f0, $f1, $f2;
        boolean $z0;

        r0 := @parameter0: android.graphics.Rect;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<android.graphics.Rect: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $i1 = virtualinvoke r0.<android.graphics.Rect: int width()>();

        $i2 = virtualinvoke r0.<android.graphics.Rect: int height()>();

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>($i1, $i2);

        f0 = (float) $i3;

        $f1 = (float) i0;

        $f2 = $f1 / f0;

        virtualinvoke r0.<android.graphics.Rect: void scale(float)>($f2);

        return;
    }

    public static float lerp(float, float, float)
    {
        float f0, f1, f2, $f3, $f4, $f5;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        $f3 = f1 - f0;

        $f4 = $f3 * f2;

        $f5 = $f4 + f0;

        return $f5;
    }

    public static float lerpDeg(float, float, float)
    {
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        $f3 = f1 - f0;

        $f4 = $f3 + 180.0F;

        $f5 = $f4 % 360.0F;

        $f6 = $f5 - 180.0F;

        $f7 = $f6 * f2;

        $f8 = $f7 + f0;

        return $f8;
    }

    public static float lerpInv(float, float, float)
    {
        float f0, f1, $f2, $f3, f4, f5;
        byte $b0;

        f4 := @parameter0: float;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        $b0 = f4 cmpl f0;

        if $b0 == 0 goto label1;

        $f3 = f1 - f4;

        $f2 = f0 - f4;

        f5 = $f3 / $f2;

        goto label2;

     label1:
        f5 = 0.0F;

     label2:
        return f5;
    }

    public static float lerpInvSat(float, float, float)
    {
        float f0, f1, f2, $f3, $f4;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        $f3 = staticinvoke <android.util.MathUtils: float lerpInv(float,float,float)>(f0, f1, f2);

        $f4 = staticinvoke <android.util.MathUtils: float saturate(float)>($f3);

        return $f4;
    }

    public static float log(float)
    {
        float f0, $f1;
        double $d0, $d1;

        f0 := @parameter0: float;

        $d0 = (double) f0;

        $d1 = staticinvoke <java.lang.Math: double log(double)>($d0);

        $f1 = (float) $d1;

        return $f1;
    }

    public static float mag(float, float)
    {
        float f0, f1, $f2;
        double $d0, $d1, $d2;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $d1 = (double) f0;

        $d0 = (double) f1;

        $d2 = staticinvoke <java.lang.Math: double hypot(double,double)>($d1, $d0);

        $f2 = (float) $d2;

        return $f2;
    }

    public static float mag(float, float, float)
    {
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8;
        double $d0, $d1;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        $f4 = f0 * f0;

        $f3 = f1 * f1;

        $f6 = $f4 + $f3;

        $f5 = f2 * f2;

        $f7 = $f6 + $f5;

        $d0 = (double) $f7;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $f8 = (float) $d1;

        return $f8;
    }

    public static float map(float, float, float, float, float)
    {
        float f0, f1, f2, f3, f4, $f5, $f6, $f7, $f8, $f9, $f10;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        f4 := @parameter4: float;

        $f8 = f3 - f2;

        $f6 = f4 - f0;

        $f5 = f1 - f0;

        $f7 = $f6 / $f5;

        $f9 = $f8 * $f7;

        $f10 = $f9 + f2;

        return $f10;
    }

    public static float max(float, float)
    {
        float f0, f1;
        byte $b0;

        f1 := @parameter0: float;

        f0 := @parameter1: float;

        $b0 = f1 cmpl f0;

        if $b0 <= 0 goto label1;

        goto label2;

     label1:
        f1 = f0;

     label2:
        return f1;
    }

    public static float max(float, float, float)
    {
        float f0, f1, f2;
        byte $b0, $b1, $b2;

        f2 := @parameter0: float;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        $b0 = f2 cmpl f0;

        if $b0 <= 0 goto label1;

        $b2 = f2 cmpl f1;

        if $b2 <= 0 goto label2;

        goto label3;

     label1:
        $b1 = f0 cmpl f1;

        if $b1 <= 0 goto label2;

        f2 = f0;

        goto label3;

     label2:
        f2 = f1;

     label3:
        return f2;
    }

    public static float max(int, int)
    {
        int i0, i1;
        float f0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 <= i1 goto label1;

        f0 = (float) i0;

        goto label2;

     label1:
        f0 = (float) i1;

     label2:
        return f0;
    }

    public static float max(int, int, int)
    {
        int i0, i1, i2;
        float $f0;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i2 <= i0 goto label1;

        if i2 <= i1 goto label2;

        goto label3;

     label1:
        if i0 <= i1 goto label2;

        i2 = i0;

        goto label3;

     label2:
        i2 = i1;

     label3:
        $f0 = (float) i2;

        return $f0;
    }

    public static float min(float, float)
    {
        float f0, f1;
        byte $b0;

        f1 := @parameter0: float;

        f0 := @parameter1: float;

        $b0 = f1 cmpg f0;

        if $b0 >= 0 goto label1;

        goto label2;

     label1:
        f1 = f0;

     label2:
        return f1;
    }

    public static float min(float, float, float)
    {
        float f0, f1, f2;
        byte $b0, $b1, $b2;

        f2 := @parameter0: float;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        $b0 = f2 cmpg f0;

        if $b0 >= 0 goto label1;

        $b2 = f2 cmpg f1;

        if $b2 >= 0 goto label2;

        goto label3;

     label1:
        $b1 = f0 cmpg f1;

        if $b1 >= 0 goto label2;

        f2 = f0;

        goto label3;

     label2:
        f2 = f1;

     label3:
        return f2;
    }

    public static float min(int, int)
    {
        int i0, i1;
        float f0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 >= i1 goto label1;

        f0 = (float) i0;

        goto label2;

     label1:
        f0 = (float) i1;

     label2:
        return f0;
    }

    public static float min(int, int, int)
    {
        int i0, i1, i2;
        float $f0;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i2 >= i0 goto label1;

        if i2 >= i1 goto label2;

        goto label3;

     label1:
        if i0 >= i1 goto label2;

        i2 = i0;

        goto label3;

     label2:
        i2 = i1;

     label3:
        $f0 = (float) i2;

        return $f0;
    }

    public static float norm(float, float, float)
    {
        float f0, f1, f2, $f3, $f4, $f5;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        $f4 = f2 - f0;

        $f3 = f1 - f0;

        $f5 = $f4 / $f3;

        return $f5;
    }

    public static float pow(float, float)
    {
        float f0, f1, $f2;
        double $d0, $d1, $d2;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $d1 = (double) f0;

        $d0 = (double) f1;

        $d2 = staticinvoke <java.lang.Math: double pow(double,double)>($d1, $d0);

        $f2 = (float) $d2;

        return $f2;
    }

    public static float radians(float)
    {
        float f0, $f1;

        f0 := @parameter0: float;

        $f1 = 0.017453292F * f0;

        return $f1;
    }

    public static float saturate(float)
    {
        float f0, $f1;

        f0 := @parameter0: float;

        $f1 = staticinvoke <android.util.MathUtils: float constrain(float,float,float)>(f0, 0.0F, 1.0F);

        return $f1;
    }

    public static float smoothStep(float, float, float)
    {
        float f0, f1, f2, $f3, $f4, $f5, $f6;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        $f4 = f2 - f0;

        $f3 = f1 - f0;

        $f5 = $f4 / $f3;

        $f6 = staticinvoke <android.util.MathUtils: float constrain(float,float,float)>($f5, 0.0F, 1.0F);

        return $f6;
    }

    public static float sq(float)
    {
        float f0, $f1;

        f0 := @parameter0: float;

        $f1 = f0 * f0;

        return $f1;
    }

    public static float sqrt(float)
    {
        float f0, $f1;
        double $d0, $d1;

        f0 := @parameter0: float;

        $d0 = (double) f0;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $f1 = (float) $d1;

        return $f1;
    }

    public static float tan(float)
    {
        float f0, $f1;
        double $d0, $d1;

        f0 := @parameter0: float;

        $d0 = (double) f0;

        $d1 = staticinvoke <java.lang.Math: double tan(double)>($d0);

        $f1 = (float) $d1;

        return $f1;
    }

    public static void <clinit>()
    {
        <android.util.MathUtils: float RAD_TO_DEG> = 57.295784F;

        <android.util.MathUtils: float DEG_TO_RAD> = 0.017453292F;

        return;
    }
}
