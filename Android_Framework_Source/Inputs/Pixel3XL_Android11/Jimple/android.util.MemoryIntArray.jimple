public final class android.util.MemoryIntArray extends java.lang.Object implements android.os.Parcelable, java.io.Closeable
{
    public static final android.os.Parcelable$Creator CREATOR;
    private static final int MAX_SIZE;
    private static final java.lang.String TAG;
    private final dalvik.system.CloseGuard mCloseGuard;
    private int mFd;
    private final boolean mIsOwner;
    private final long mMemoryAddr;

    static void <clinit>()
    {
        android.util.MemoryIntArray$1 $r0;

        <android.util.MemoryIntArray: java.lang.String TAG> = "MemoryIntArray";

        <android.util.MemoryIntArray: int MAX_SIZE> = 1024;

        $r0 = new android.util.MemoryIntArray$1;

        specialinvoke $r0.<android.util.MemoryIntArray$1: void <init>()>();

        <android.util.MemoryIntArray: android.os.Parcelable$Creator CREATOR> = $r0;

        return;
    }

    public void <init>(int) throws java.io.IOException
    {
        android.util.MemoryIntArray r0;
        dalvik.system.CloseGuard $r1, $r5;
        java.lang.IllegalArgumentException $r2;
        java.util.UUID $r3;
        java.lang.String $r4;
        boolean $z0;
        long $l0;
        int i1, i2;

        r0 := @this: android.util.MemoryIntArray;

        i1 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.util.MemoryIntArray: dalvik.system.CloseGuard mCloseGuard> = $r1;

        r0.<android.util.MemoryIntArray: int mFd> = -1;

        if i1 > 1024 goto label1;

        r0.<android.util.MemoryIntArray: boolean mIsOwner> = 1;

        $r3 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();

        $r4 = virtualinvoke $r3.<java.util.UUID: java.lang.String toString()>();

        i2 = specialinvoke r0.<android.util.MemoryIntArray: int nativeCreate(java.lang.String,int)>($r4, i1);

        r0.<android.util.MemoryIntArray: int mFd> = i2;

        $z0 = r0.<android.util.MemoryIntArray: boolean mIsOwner>;

        $l0 = specialinvoke r0.<android.util.MemoryIntArray: long nativeOpen(int,boolean)>(i2, $z0);

        r0.<android.util.MemoryIntArray: long mMemoryAddr> = $l0;

        $r5 = r0.<android.util.MemoryIntArray: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r5.<dalvik.system.CloseGuard: void open(java.lang.String)>("close");

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Max size is 1024");

        throw $r2;
    }

    private void <init>(android.os.Parcel) throws java.io.IOException
    {
        android.util.MemoryIntArray r0;
        int i0;
        dalvik.system.CloseGuard $r1, $r4;
        android.os.Parcelable $r2;
        java.io.IOException $r3;
        boolean $z0;
        long $l1;
        android.os.Parcel r5;
        android.os.ParcelFileDescriptor r6;

        r0 := @this: android.util.MemoryIntArray;

        r5 := @parameter0: android.os.Parcel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.util.MemoryIntArray: dalvik.system.CloseGuard mCloseGuard> = $r1;

        r0.<android.util.MemoryIntArray: int mFd> = -1;

        r0.<android.util.MemoryIntArray: boolean mIsOwner> = 0;

        $r2 = virtualinvoke r5.<android.os.Parcel: android.os.Parcelable readParcelable(java.lang.ClassLoader)>(null);

        r6 = (android.os.ParcelFileDescriptor) $r2;

        if r6 == null goto label1;

        i0 = virtualinvoke r6.<android.os.ParcelFileDescriptor: int detachFd()>();

        r0.<android.util.MemoryIntArray: int mFd> = i0;

        $z0 = r0.<android.util.MemoryIntArray: boolean mIsOwner>;

        $l1 = specialinvoke r0.<android.util.MemoryIntArray: long nativeOpen(int,boolean)>(i0, $z0);

        r0.<android.util.MemoryIntArray: long mMemoryAddr> = $l1;

        $r4 = r0.<android.util.MemoryIntArray: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r4.<dalvik.system.CloseGuard: void open(java.lang.String)>("close");

        return;

     label1:
        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("No backing file descriptor");

        throw $r3;
    }

    void <init>(android.os.Parcel, android.util.MemoryIntArray$1) throws java.io.IOException
    {
        android.util.MemoryIntArray r0;
        android.os.Parcel r1;
        android.util.MemoryIntArray$1 r2;

        r0 := @this: android.util.MemoryIntArray;

        r1 := @parameter0: android.os.Parcel;

        r2 := @parameter1: android.util.MemoryIntArray$1;

        specialinvoke r0.<android.util.MemoryIntArray: void <init>(android.os.Parcel)>(r1);

        return;
    }

    private void enforceNotClosed()
    {
        android.util.MemoryIntArray r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;

        r0 := @this: android.util.MemoryIntArray;

        $z0 = virtualinvoke r0.<android.util.MemoryIntArray: boolean isClosed()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cannot interact with a closed instance");

        throw $r1;
    }

    private void enforceValidIndex(int) throws java.io.IOException
    {
        android.util.MemoryIntArray r0;
        int i0, i1, $i2, $i3;
        java.lang.StringBuilder $r2;
        java.lang.IndexOutOfBoundsException $r6;
        java.lang.String $r7;

        r0 := @this: android.util.MemoryIntArray;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<android.util.MemoryIntArray: int size()>();

        if i0 < 0 goto label1;

        $i3 = i1 - 1;

        if i0 > $i3 goto label1;

        return;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not between 0 and ");

        $i2 = i1 - 1;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r6 = new java.lang.IndexOutOfBoundsException;

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    private void enforceWritable()
    {
        android.util.MemoryIntArray r0;
        boolean $z0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: android.util.MemoryIntArray;

        $z0 = virtualinvoke r0.<android.util.MemoryIntArray: boolean isWritable()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("array is not writable");

        throw $r1;
    }

    public static int getMaxSize()
    {
        return 1024;
    }

    private native void nativeClose(int, long, boolean);

    private native int nativeCreate(java.lang.String, int);

    private native int nativeGet(int, long, int);

    private native long nativeOpen(int, boolean);

    private native void nativeSet(int, long, int, int);

    private native int nativeSize(int);

    public void close() throws java.io.IOException
    {
        android.util.MemoryIntArray r0;
        boolean $z0, $z1;
        long $l0;
        int $i1;
        dalvik.system.CloseGuard $r1;

        r0 := @this: android.util.MemoryIntArray;

        $z0 = virtualinvoke r0.<android.util.MemoryIntArray: boolean isClosed()>();

        if $z0 != 0 goto label1;

        $i1 = r0.<android.util.MemoryIntArray: int mFd>;

        $l0 = r0.<android.util.MemoryIntArray: long mMemoryAddr>;

        $z1 = r0.<android.util.MemoryIntArray: boolean mIsOwner>;

        specialinvoke r0.<android.util.MemoryIntArray: void nativeClose(int,long,boolean)>($i1, $l0, $z1);

        r0.<android.util.MemoryIntArray: int mFd> = -1;

        $r1 = r0.<android.util.MemoryIntArray: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r1.<dalvik.system.CloseGuard: void close()>();

     label1:
        return;
    }

    public int describeContents()
    {
        android.util.MemoryIntArray r0;

        r0 := @this: android.util.MemoryIntArray;

        return 1;
    }

    public boolean equals(java.lang.Object)
    {
        android.util.MemoryIntArray r0, r4;
        java.lang.Class $r1, $r2;
        int $i0, $i1;
        java.lang.Object r3;
        boolean z0;

        r0 := @this: android.util.MemoryIntArray;

        r3 := @parameter0: java.lang.Object;

        z0 = 0;

        if r3 != null goto label1;

        return 0;

     label1:
        if r0 != r3 goto label2;

        return 1;

     label2:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        if $r1 == $r2 goto label3;

        return 0;

     label3:
        r4 = (android.util.MemoryIntArray) r3;

        $i1 = r0.<android.util.MemoryIntArray: int mFd>;

        $i0 = r4.<android.util.MemoryIntArray: int mFd>;

        if $i1 != $i0 goto label4;

        z0 = 1;

     label4:
        return z0;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.util.MemoryIntArray r0;
        dalvik.system.CloseGuard $r2, $r3;
        java.lang.Throwable $r4;

        r0 := @this: android.util.MemoryIntArray;

     label1:
        $r2 = r0.<android.util.MemoryIntArray: dalvik.system.CloseGuard mCloseGuard>;

        if $r2 == null goto label2;

        $r3 = r0.<android.util.MemoryIntArray: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r3.<dalvik.system.CloseGuard: void warnIfOpen()>();

     label2:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r0);

     label3:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label4:
        $r4 := @caughtexception;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public int get(int) throws java.io.IOException
    {
        android.util.MemoryIntArray r0;
        int i0, $i2, $i3;
        long $l1;

        r0 := @this: android.util.MemoryIntArray;

        i0 := @parameter0: int;

        specialinvoke r0.<android.util.MemoryIntArray: void enforceNotClosed()>();

        specialinvoke r0.<android.util.MemoryIntArray: void enforceValidIndex(int)>(i0);

        $i2 = r0.<android.util.MemoryIntArray: int mFd>;

        $l1 = r0.<android.util.MemoryIntArray: long mMemoryAddr>;

        $i3 = specialinvoke r0.<android.util.MemoryIntArray: int nativeGet(int,long,int)>($i2, $l1, i0);

        return $i3;
    }

    public int hashCode()
    {
        android.util.MemoryIntArray r0;
        int $i0;

        r0 := @this: android.util.MemoryIntArray;

        $i0 = r0.<android.util.MemoryIntArray: int mFd>;

        return $i0;
    }

    public boolean isClosed()
    {
        android.util.MemoryIntArray r0;
        int $i0;
        boolean z0;

        r0 := @this: android.util.MemoryIntArray;

        $i0 = r0.<android.util.MemoryIntArray: int mFd>;

        if $i0 != -1 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isWritable()
    {
        android.util.MemoryIntArray r0;
        boolean $z0;

        r0 := @this: android.util.MemoryIntArray;

        specialinvoke r0.<android.util.MemoryIntArray: void enforceNotClosed()>();

        $z0 = r0.<android.util.MemoryIntArray: boolean mIsOwner>;

        return $z0;
    }

    public void set(int, int) throws java.io.IOException
    {
        android.util.MemoryIntArray r0;
        int i0, i1, $i3;
        long $l2;

        r0 := @this: android.util.MemoryIntArray;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<android.util.MemoryIntArray: void enforceNotClosed()>();

        specialinvoke r0.<android.util.MemoryIntArray: void enforceWritable()>();

        specialinvoke r0.<android.util.MemoryIntArray: void enforceValidIndex(int)>(i0);

        $i3 = r0.<android.util.MemoryIntArray: int mFd>;

        $l2 = r0.<android.util.MemoryIntArray: long mMemoryAddr>;

        specialinvoke r0.<android.util.MemoryIntArray: void nativeSet(int,long,int,int)>($i3, $l2, i0, i1);

        return;
    }

    public int size() throws java.io.IOException
    {
        android.util.MemoryIntArray r0;
        int $i0, $i1;

        r0 := @this: android.util.MemoryIntArray;

        specialinvoke r0.<android.util.MemoryIntArray: void enforceNotClosed()>();

        $i0 = r0.<android.util.MemoryIntArray: int mFd>;

        $i1 = specialinvoke r0.<android.util.MemoryIntArray: int nativeSize(int)>($i0);

        return $i1;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        android.util.MemoryIntArray r0;
        int i0, $i1;
        java.lang.Throwable $r1, $r3, $r4;
        java.lang.RuntimeException $r2;
        android.os.Parcel r5;
        android.os.ParcelFileDescriptor r6;

        r0 := @this: android.util.MemoryIntArray;

        r5 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

     label01:
        $i1 = r0.<android.util.MemoryIntArray: int mFd>;

        r6 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromFd(int)>($i1);

     label02:
        virtualinvoke r5.<android.os.Parcel: void writeParcelable(android.os.Parcelable,int)>(r6, i0);

     label03:
        if r6 == null goto label05;

     label04:
        virtualinvoke r6.<android.os.ParcelFileDescriptor: void close()>();

     label05:
        return;

     label06:
        $r4 := @caughtexception;

        if r6 == null goto label11;

     label07:
        virtualinvoke r6.<android.os.ParcelFileDescriptor: void close()>();

     label08:
        goto label11;

     label09:
        $r3 := @caughtexception;

     label10:
        virtualinvoke $r4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r3);

     label11:
        throw $r4;

     label12:
        $r1 := @caughtexception;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r1);

        throw $r2;

        catch java.io.IOException from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.io.IOException from label04 to label05 with label12;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.io.IOException from label11 to label12 with label12;
    }
}
