public class android.util.Pools$SimplePool extends java.lang.Object implements android.util.Pools$Pool
{
    private final java.lang.Object[] mPool;
    private int mPoolSize;

    public void <init>(int)
    {
        android.util.Pools$SimplePool r0;
        int i0;
        java.lang.IllegalArgumentException $r1;
        java.lang.Object[] $r2;

        r0 := @this: android.util.Pools$SimplePool;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 <= 0 goto label1;

        $r2 = newarray (java.lang.Object)[i0];

        r0.<android.util.Pools$SimplePool: java.lang.Object[] mPool> = $r2;

        return;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The max pool size must be > 0");

        throw $r1;
    }

    private boolean isInPool(java.lang.Object)
    {
        android.util.Pools$SimplePool r0;
        java.lang.Object r1, $r3;
        int $i0, i1;
        java.lang.Object[] $r2;

        r0 := @this: android.util.Pools$SimplePool;

        r1 := @parameter0: java.lang.Object;

        i1 = 0;

     label1:
        $i0 = r0.<android.util.Pools$SimplePool: int mPoolSize>;

        if i1 >= $i0 goto label3;

        $r2 = r0.<android.util.Pools$SimplePool: java.lang.Object[] mPool>;

        $r3 = $r2[i1];

        if $r3 != r1 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public java.lang.Object acquire()
    {
        android.util.Pools$SimplePool r0;
        int i0, i1, $i2;
        java.lang.Object[] r1;
        java.lang.Object r2;

        r0 := @this: android.util.Pools$SimplePool;

        i0 = r0.<android.util.Pools$SimplePool: int mPoolSize>;

        if i0 <= 0 goto label1;

        i1 = i0 - 1;

        r1 = r0.<android.util.Pools$SimplePool: java.lang.Object[] mPool>;

        r2 = r1[i1];

        r1[i1] = null;

        $i2 = i0 - 1;

        r0.<android.util.Pools$SimplePool: int mPoolSize> = $i2;

        return r2;

     label1:
        return null;
    }

    public boolean release(java.lang.Object)
    {
        android.util.Pools$SimplePool r0;
        java.lang.Object r1;
        int i0, $i1, $i2;
        java.lang.Object[] r2;
        boolean $z0;
        java.lang.IllegalStateException $r3;

        r0 := @this: android.util.Pools$SimplePool;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<android.util.Pools$SimplePool: boolean isInPool(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

        i0 = r0.<android.util.Pools$SimplePool: int mPoolSize>;

        r2 = r0.<android.util.Pools$SimplePool: java.lang.Object[] mPool>;

        $i1 = lengthof r2;

        if i0 >= $i1 goto label1;

        r2[i0] = r1;

        $i2 = i0 + 1;

        r0.<android.util.Pools$SimplePool: int mPoolSize> = $i2;

        return 1;

     label1:
        return 0;

     label2:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Already in the pool!");

        throw $r3;
    }
}
