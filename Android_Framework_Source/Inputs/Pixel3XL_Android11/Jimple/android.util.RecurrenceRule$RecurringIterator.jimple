class android.util.RecurrenceRule$RecurringIterator extends java.lang.Object implements java.util.Iterator
{
    java.time.ZonedDateTime cycleEnd;
    java.time.ZonedDateTime cycleStart;
    int i;
    final android.util.RecurrenceRule this$0;

    public void <init>(android.util.RecurrenceRule)
    {
        android.util.RecurrenceRule$RecurringIterator r0;
        java.time.ZonedDateTime $r2, $r4, $r5, $r7, r13, $r14;
        java.time.Clock $r3;
        java.time.ZoneId $r6;
        boolean $z0;
        long $l0, $l1, $l8, $l9;
        byte $b2, $b10;
        int $i3, $i4, $i5, $i6;
        java.lang.StringBuilder $r8;
        java.lang.String $r11;
        android.util.RecurrenceRule r12;

        r0 := @this: android.util.RecurrenceRule$RecurringIterator;

        r12 := @parameter0: android.util.RecurrenceRule;

        r0.<android.util.RecurrenceRule$RecurringIterator: android.util.RecurrenceRule this$0> = r12;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = r12.<android.util.RecurrenceRule: java.time.ZonedDateTime end>;

        if $r2 == null goto label1;

        r13 = r12.<android.util.RecurrenceRule: java.time.ZonedDateTime end>;

        goto label2;

     label1:
        $r3 = <android.util.RecurrenceRule: java.time.Clock sClock>;

        $r4 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime now(java.time.Clock)>($r3);

        $r5 = r12.<android.util.RecurrenceRule: java.time.ZonedDateTime start>;

        $r6 = virtualinvoke $r5.<java.time.ZonedDateTime: java.time.ZoneId getZone()>();

        r13 = virtualinvoke $r4.<java.time.ZonedDateTime: java.time.ZonedDateTime withZoneSameInstant(java.time.ZoneId)>($r6);

     label2:
        $z0 = staticinvoke <android.util.RecurrenceRule: boolean access$100()>();

        if $z0 == 0 goto label3;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resolving using anchor ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r13);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("RecurrenceRule", $r11);

     label3:
        specialinvoke r0.<android.util.RecurrenceRule$RecurringIterator: void updateCycle()>();

     label4:
        $l8 = virtualinvoke r13.<java.time.ZonedDateTime: long toEpochSecond()>();

        $r14 = r0.<android.util.RecurrenceRule$RecurringIterator: java.time.ZonedDateTime cycleEnd>;

        $l9 = virtualinvoke $r14.<java.time.ZonedDateTime: long toEpochSecond()>();

        $b10 = $l8 cmp $l9;

        if $b10 <= 0 goto label5;

        $i5 = r0.<android.util.RecurrenceRule$RecurringIterator: int i>;

        $i6 = $i5 + 1;

        r0.<android.util.RecurrenceRule$RecurringIterator: int i> = $i6;

        specialinvoke r0.<android.util.RecurrenceRule$RecurringIterator: void updateCycle()>();

        goto label4;

     label5:
        $l0 = virtualinvoke r13.<java.time.ZonedDateTime: long toEpochSecond()>();

        $r7 = r0.<android.util.RecurrenceRule$RecurringIterator: java.time.ZonedDateTime cycleStart>;

        $l1 = virtualinvoke $r7.<java.time.ZonedDateTime: long toEpochSecond()>();

        $b2 = $l0 cmp $l1;

        if $b2 > 0 goto label6;

        $i3 = r0.<android.util.RecurrenceRule$RecurringIterator: int i>;

        $i4 = $i3 - 1;

        r0.<android.util.RecurrenceRule$RecurringIterator: int i> = $i4;

        specialinvoke r0.<android.util.RecurrenceRule$RecurringIterator: void updateCycle()>();

        goto label5;

     label6:
        return;
    }

    private java.time.ZonedDateTime roundBoundaryTime(java.time.ZonedDateTime)
    {
        android.util.RecurrenceRule$RecurringIterator r0;
        java.time.ZonedDateTime r1, $r4, $r7, $r10;
        android.util.RecurrenceRule $r2, $r3, $r6;
        boolean $z0;
        int $i0, $i1;
        java.time.LocalDate $r5;
        java.time.LocalTime $r8;
        java.time.ZoneId $r9;

        r0 := @this: android.util.RecurrenceRule$RecurringIterator;

        r1 := @parameter0: java.time.ZonedDateTime;

        $r2 = r0.<android.util.RecurrenceRule$RecurringIterator: android.util.RecurrenceRule this$0>;

        $z0 = virtualinvoke $r2.<android.util.RecurrenceRule: boolean isMonthly()>();

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r1.<java.time.ZonedDateTime: int getDayOfMonth()>();

        $r3 = r0.<android.util.RecurrenceRule$RecurringIterator: android.util.RecurrenceRule this$0>;

        $r4 = $r3.<android.util.RecurrenceRule: java.time.ZonedDateTime start>;

        $i1 = virtualinvoke $r4.<java.time.ZonedDateTime: int getDayOfMonth()>();

        if $i0 >= $i1 goto label1;

        $r5 = virtualinvoke r1.<java.time.ZonedDateTime: java.time.LocalDate toLocalDate()>();

        $r8 = <java.time.LocalTime: java.time.LocalTime MAX>;

        $r6 = r0.<android.util.RecurrenceRule$RecurringIterator: android.util.RecurrenceRule this$0>;

        $r7 = $r6.<android.util.RecurrenceRule: java.time.ZonedDateTime start>;

        $r9 = virtualinvoke $r7.<java.time.ZonedDateTime: java.time.ZoneId getZone()>();

        $r10 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime of(java.time.LocalDate,java.time.LocalTime,java.time.ZoneId)>($r5, $r8, $r9);

        return $r10;

     label1:
        return r1;
    }

    private void updateCycle()
    {
        android.util.RecurrenceRule$RecurringIterator r0;
        android.util.RecurrenceRule $r1, $r2, $r8, $r9;
        int $i0, $i1, $i2;
        java.time.Period $r3, $r5, $r10, $r12;
        java.time.ZonedDateTime $r4, $r6, $r7, $r11, $r13, $r14;

        r0 := @this: android.util.RecurrenceRule$RecurringIterator;

        $r1 = r0.<android.util.RecurrenceRule$RecurringIterator: android.util.RecurrenceRule this$0>;

        $r4 = $r1.<android.util.RecurrenceRule: java.time.ZonedDateTime start>;

        $r2 = r0.<android.util.RecurrenceRule$RecurringIterator: android.util.RecurrenceRule this$0>;

        $r3 = $r2.<android.util.RecurrenceRule: java.time.Period period>;

        $i0 = r0.<android.util.RecurrenceRule$RecurringIterator: int i>;

        $r5 = virtualinvoke $r3.<java.time.Period: java.time.Period multipliedBy(int)>($i0);

        $r6 = virtualinvoke $r4.<java.time.ZonedDateTime: java.time.ZonedDateTime plus(java.time.temporal.TemporalAmount)>($r5);

        $r7 = specialinvoke r0.<android.util.RecurrenceRule$RecurringIterator: java.time.ZonedDateTime roundBoundaryTime(java.time.ZonedDateTime)>($r6);

        r0.<android.util.RecurrenceRule$RecurringIterator: java.time.ZonedDateTime cycleStart> = $r7;

        $r8 = r0.<android.util.RecurrenceRule$RecurringIterator: android.util.RecurrenceRule this$0>;

        $r11 = $r8.<android.util.RecurrenceRule: java.time.ZonedDateTime start>;

        $r9 = r0.<android.util.RecurrenceRule$RecurringIterator: android.util.RecurrenceRule this$0>;

        $r10 = $r9.<android.util.RecurrenceRule: java.time.Period period>;

        $i1 = r0.<android.util.RecurrenceRule$RecurringIterator: int i>;

        $i2 = $i1 + 1;

        $r12 = virtualinvoke $r10.<java.time.Period: java.time.Period multipliedBy(int)>($i2);

        $r13 = virtualinvoke $r11.<java.time.ZonedDateTime: java.time.ZonedDateTime plus(java.time.temporal.TemporalAmount)>($r12);

        $r14 = specialinvoke r0.<android.util.RecurrenceRule$RecurringIterator: java.time.ZonedDateTime roundBoundaryTime(java.time.ZonedDateTime)>($r13);

        r0.<android.util.RecurrenceRule$RecurringIterator: java.time.ZonedDateTime cycleEnd> = $r14;

        return;
    }

    public boolean hasNext()
    {
        android.util.RecurrenceRule$RecurringIterator r0;
        java.time.ZonedDateTime $r1, $r3;
        long $l0, $l1;
        android.util.RecurrenceRule $r2;
        byte $b2;
        boolean z0;

        r0 := @this: android.util.RecurrenceRule$RecurringIterator;

        $r1 = r0.<android.util.RecurrenceRule$RecurringIterator: java.time.ZonedDateTime cycleStart>;

        $l0 = virtualinvoke $r1.<java.time.ZonedDateTime: long toEpochSecond()>();

        $r2 = r0.<android.util.RecurrenceRule$RecurringIterator: android.util.RecurrenceRule this$0>;

        $r3 = $r2.<android.util.RecurrenceRule: java.time.ZonedDateTime start>;

        $l1 = virtualinvoke $r3.<java.time.ZonedDateTime: long toEpochSecond()>();

        $b2 = $l0 cmp $l1;

        if $b2 < 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public android.util.Range next()
    {
        android.util.RecurrenceRule$RecurringIterator r0;
        boolean $z0;
        android.util.Range $r1;
        java.time.ZonedDateTime $r2, $r3, $r8, $r11;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r4;
        java.lang.String $r13;

        r0 := @this: android.util.RecurrenceRule$RecurringIterator;

        $z0 = staticinvoke <android.util.RecurrenceRule: boolean access$100()>();

        if $z0 == 0 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cycle ");

        $i2 = r0.<android.util.RecurrenceRule$RecurringIterator: int i>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from ");

        $r8 = r0.<android.util.RecurrenceRule$RecurringIterator: java.time.ZonedDateTime cycleStart>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r11 = r0.<android.util.RecurrenceRule$RecurringIterator: java.time.ZonedDateTime cycleEnd>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("RecurrenceRule", $r13);

     label1:
        $r1 = new android.util.Range;

        $r3 = r0.<android.util.RecurrenceRule$RecurringIterator: java.time.ZonedDateTime cycleStart>;

        $r2 = r0.<android.util.RecurrenceRule$RecurringIterator: java.time.ZonedDateTime cycleEnd>;

        specialinvoke $r1.<android.util.Range: void <init>(java.lang.Comparable,java.lang.Comparable)>($r3, $r2);

        $i0 = r0.<android.util.RecurrenceRule$RecurringIterator: int i>;

        $i1 = $i0 - 1;

        r0.<android.util.RecurrenceRule$RecurringIterator: int i> = $i1;

        specialinvoke r0.<android.util.RecurrenceRule$RecurringIterator: void updateCycle()>();

        return $r1;
    }

    public volatile java.lang.Object next()
    {
        android.util.RecurrenceRule$RecurringIterator r0;
        android.util.Range $r1;

        r0 := @this: android.util.RecurrenceRule$RecurringIterator;

        $r1 = virtualinvoke r0.<android.util.RecurrenceRule$RecurringIterator: android.util.Range next()>();

        return $r1;
    }
}
