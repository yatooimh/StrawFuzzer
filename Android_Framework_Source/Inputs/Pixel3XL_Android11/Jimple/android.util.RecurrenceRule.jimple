public class android.util.RecurrenceRule extends java.lang.Object implements android.os.Parcelable
{
    public static final android.os.Parcelable$Creator CREATOR;
    private static final boolean LOGD;
    private static final java.lang.String TAG;
    private static final int VERSION_INIT;
    public static java.time.Clock sClock;
    public final java.time.ZonedDateTime end;
    public final java.time.Period period;
    public final java.time.ZonedDateTime start;

    static void <clinit>()
    {
        boolean $z0;
        java.time.Clock $r0;
        android.util.RecurrenceRule$1 $r1;

        <android.util.RecurrenceRule: int VERSION_INIT> = 0;

        <android.util.RecurrenceRule: java.lang.String TAG> = "RecurrenceRule";

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("RecurrenceRule", 3);

        <android.util.RecurrenceRule: boolean LOGD> = $z0;

        $r0 = staticinvoke <java.time.Clock: java.time.Clock systemDefaultZone()>();

        <android.util.RecurrenceRule: java.time.Clock sClock> = $r0;

        $r1 = new android.util.RecurrenceRule$1;

        specialinvoke $r1.<android.util.RecurrenceRule$1: void <init>()>();

        <android.util.RecurrenceRule: android.os.Parcelable$Creator CREATOR> = $r1;

        return;
    }

    private void <init>(android.os.Parcel)
    {
        android.util.RecurrenceRule r0;
        android.os.Parcel r1;
        java.lang.String $r2, $r4, $r6;
        java.time.ZonedDateTime $r3, $r5;
        java.time.Period $r7;

        r0 := @this: android.util.RecurrenceRule;

        r1 := @parameter0: android.os.Parcel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke r1.<android.os.Parcel: java.lang.String readString()>();

        $r3 = staticinvoke <android.util.RecurrenceRule: java.time.ZonedDateTime convertZonedDateTime(java.lang.String)>($r2);

        r0.<android.util.RecurrenceRule: java.time.ZonedDateTime start> = $r3;

        $r4 = virtualinvoke r1.<android.os.Parcel: java.lang.String readString()>();

        $r5 = staticinvoke <android.util.RecurrenceRule: java.time.ZonedDateTime convertZonedDateTime(java.lang.String)>($r4);

        r0.<android.util.RecurrenceRule: java.time.ZonedDateTime end> = $r5;

        $r6 = virtualinvoke r1.<android.os.Parcel: java.lang.String readString()>();

        $r7 = staticinvoke <android.util.RecurrenceRule: java.time.Period convertPeriod(java.lang.String)>($r6);

        r0.<android.util.RecurrenceRule: java.time.Period period> = $r7;

        return;
    }

    void <init>(android.os.Parcel, android.util.RecurrenceRule$1)
    {
        android.util.RecurrenceRule r0;
        android.os.Parcel r1;
        android.util.RecurrenceRule$1 r2;

        r0 := @this: android.util.RecurrenceRule;

        r1 := @parameter0: android.os.Parcel;

        r2 := @parameter1: android.util.RecurrenceRule$1;

        specialinvoke r0.<android.util.RecurrenceRule: void <init>(android.os.Parcel)>(r1);

        return;
    }

    public void <init>(java.io.DataInputStream) throws java.io.IOException
    {
        android.util.RecurrenceRule r0;
        int i0;
        java.lang.StringBuilder $r1;
        java.net.ProtocolException $r4;
        java.lang.String $r5, $r6, $r8, $r10;
        java.time.ZonedDateTime $r7, $r9;
        java.time.Period $r11;
        java.io.DataInputStream r12;

        r0 := @this: android.util.RecurrenceRule;

        r12 := @parameter0: java.io.DataInputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        i0 = virtualinvoke r12.<java.io.DataInputStream: int readInt()>();

        if i0 != 0 goto label1;

        $r6 = staticinvoke <android.util.BackupUtils: java.lang.String readString(java.io.DataInputStream)>(r12);

        $r7 = staticinvoke <android.util.RecurrenceRule: java.time.ZonedDateTime convertZonedDateTime(java.lang.String)>($r6);

        r0.<android.util.RecurrenceRule: java.time.ZonedDateTime start> = $r7;

        $r8 = staticinvoke <android.util.BackupUtils: java.lang.String readString(java.io.DataInputStream)>(r12);

        $r9 = staticinvoke <android.util.RecurrenceRule: java.time.ZonedDateTime convertZonedDateTime(java.lang.String)>($r8);

        r0.<android.util.RecurrenceRule: java.time.ZonedDateTime end> = $r9;

        $r10 = staticinvoke <android.util.BackupUtils: java.lang.String readString(java.io.DataInputStream)>(r12);

        $r11 = staticinvoke <android.util.RecurrenceRule: java.time.Period convertPeriod(java.lang.String)>($r10);

        r0.<android.util.RecurrenceRule: java.time.Period period> = $r11;

        return;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown version ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = new java.net.ProtocolException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.net.ProtocolException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    public void <init>(java.time.ZonedDateTime, java.time.ZonedDateTime, java.time.Period)
    {
        android.util.RecurrenceRule r0;
        java.time.ZonedDateTime r1, r2;
        java.time.Period r3;

        r0 := @this: android.util.RecurrenceRule;

        r1 := @parameter0: java.time.ZonedDateTime;

        r2 := @parameter1: java.time.ZonedDateTime;

        r3 := @parameter2: java.time.Period;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.util.RecurrenceRule: java.time.ZonedDateTime start> = r1;

        r0.<android.util.RecurrenceRule: java.time.ZonedDateTime end> = r2;

        r0.<android.util.RecurrenceRule: java.time.Period period> = r3;

        return;
    }

    static boolean access$100()
    {
        boolean $z0;

        $z0 = <android.util.RecurrenceRule: boolean LOGD>;

        return $z0;
    }

    public static android.util.RecurrenceRule buildNever()
    {
        android.util.RecurrenceRule $r0;

        $r0 = new android.util.RecurrenceRule;

        specialinvoke $r0.<android.util.RecurrenceRule: void <init>(java.time.ZonedDateTime,java.time.ZonedDateTime,java.time.Period)>(null, null, null);

        return $r0;
    }

    public static android.util.RecurrenceRule buildRecurringMonthly(int, java.time.ZoneId)
    {
        int i0;
        java.time.ZoneId r0;
        java.time.ZonedDateTime r1, $r3, $r10;
        java.time.Clock $r2;
        android.util.RecurrenceRule $r4;
        java.time.LocalDate $r5, $r6, $r7, $r8;
        java.time.LocalTime $r9;
        java.time.Period $r11;

        i0 := @parameter0: int;

        r0 := @parameter1: java.time.ZoneId;

        $r2 = <android.util.RecurrenceRule: java.time.Clock sClock>;

        $r3 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime now(java.time.Clock)>($r2);

        r1 = virtualinvoke $r3.<java.time.ZonedDateTime: java.time.ZonedDateTime withZoneSameInstant(java.time.ZoneId)>(r0);

        $r4 = new android.util.RecurrenceRule;

        $r5 = virtualinvoke r1.<java.time.ZonedDateTime: java.time.LocalDate toLocalDate()>();

        $r6 = virtualinvoke $r5.<java.time.LocalDate: java.time.LocalDate minusYears(long)>(1L);

        $r7 = virtualinvoke $r6.<java.time.LocalDate: java.time.LocalDate withMonth(int)>(1);

        $r8 = virtualinvoke $r7.<java.time.LocalDate: java.time.LocalDate withDayOfMonth(int)>(i0);

        $r9 = <java.time.LocalTime: java.time.LocalTime MIDNIGHT>;

        $r10 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime of(java.time.LocalDate,java.time.LocalTime,java.time.ZoneId)>($r8, $r9, r0);

        $r11 = staticinvoke <java.time.Period: java.time.Period ofMonths(int)>(1);

        specialinvoke $r4.<android.util.RecurrenceRule: void <init>(java.time.ZonedDateTime,java.time.ZonedDateTime,java.time.Period)>($r10, null, $r11);

        return $r4;
    }

    public static java.lang.String convertPeriod(java.time.Period)
    {
        java.time.Period r0;
        java.lang.String r1;

        r0 := @parameter0: java.time.Period;

        if r0 == null goto label1;

        r1 = virtualinvoke r0.<java.time.Period: java.lang.String toString()>();

        goto label2;

     label1:
        r1 = null;

     label2:
        return r1;
    }

    public static java.time.Period convertPeriod(java.lang.String)
    {
        java.lang.String r0;
        java.time.Period r1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        r1 = staticinvoke <java.time.Period: java.time.Period parse(java.lang.CharSequence)>(r0);

        goto label2;

     label1:
        r1 = null;

     label2:
        return r1;
    }

    public static java.lang.String convertZonedDateTime(java.time.ZonedDateTime)
    {
        java.time.ZonedDateTime r0;
        java.lang.String r1;

        r0 := @parameter0: java.time.ZonedDateTime;

        if r0 == null goto label1;

        r1 = virtualinvoke r0.<java.time.ZonedDateTime: java.lang.String toString()>();

        goto label2;

     label1:
        r1 = null;

     label2:
        return r1;
    }

    public static java.time.ZonedDateTime convertZonedDateTime(java.lang.String)
    {
        java.lang.String r0;
        java.time.ZonedDateTime r1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        r1 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime parse(java.lang.CharSequence)>(r0);

        goto label2;

     label1:
        r1 = null;

     label2:
        return r1;
    }

    public java.util.Iterator cycleIterator()
    {
        android.util.RecurrenceRule r0;
        java.time.Period $r1;
        android.util.RecurrenceRule$NonrecurringIterator $r2;
        android.util.RecurrenceRule$RecurringIterator $r3;

        r0 := @this: android.util.RecurrenceRule;

        $r1 = r0.<android.util.RecurrenceRule: java.time.Period period>;

        if $r1 == null goto label1;

        $r3 = new android.util.RecurrenceRule$RecurringIterator;

        specialinvoke $r3.<android.util.RecurrenceRule$RecurringIterator: void <init>(android.util.RecurrenceRule)>(r0);

        return $r3;

     label1:
        $r2 = new android.util.RecurrenceRule$NonrecurringIterator;

        specialinvoke $r2.<android.util.RecurrenceRule$NonrecurringIterator: void <init>(android.util.RecurrenceRule)>(r0);

        return $r2;
    }

    public int describeContents()
    {
        android.util.RecurrenceRule r0;

        r0 := @this: android.util.RecurrenceRule;

        return 0;
    }

    public boolean equals(java.lang.Object)
    {
        android.util.RecurrenceRule r0, r8;
        boolean z0, $z1, $z2, $z3, z4;
        java.time.ZonedDateTime $r1, $r2, $r3, $r4;
        java.time.Period $r5, $r6;
        java.lang.Object r7;

        r0 := @this: android.util.RecurrenceRule;

        r7 := @parameter0: java.lang.Object;

        z0 = r7 instanceof android.util.RecurrenceRule;

        z4 = 0;

        if z0 == 0 goto label2;

        r8 = (android.util.RecurrenceRule) r7;

        $r2 = r0.<android.util.RecurrenceRule: java.time.ZonedDateTime start>;

        $r1 = r8.<android.util.RecurrenceRule: java.time.ZonedDateTime start>;

        $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r2, $r1);

        if $z1 == 0 goto label1;

        $r4 = r0.<android.util.RecurrenceRule: java.time.ZonedDateTime end>;

        $r3 = r8.<android.util.RecurrenceRule: java.time.ZonedDateTime end>;

        $z2 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r4, $r3);

        if $z2 == 0 goto label1;

        $r6 = r0.<android.util.RecurrenceRule: java.time.Period period>;

        $r5 = r8.<android.util.RecurrenceRule: java.time.Period period>;

        $z3 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r6, $r5);

        if $z3 == 0 goto label1;

        z4 = 1;

        goto label1;

     label1:
        return z4;

     label2:
        return 0;
    }

    public int hashCode()
    {
        android.util.RecurrenceRule r0;
        java.lang.Object[] $r1;
        java.time.ZonedDateTime $r2, $r3;
        java.time.Period $r4;
        int $i0;

        r0 := @this: android.util.RecurrenceRule;

        $r1 = newarray (java.lang.Object)[3];

        $r2 = r0.<android.util.RecurrenceRule: java.time.ZonedDateTime start>;

        $r1[0] = $r2;

        $r3 = r0.<android.util.RecurrenceRule: java.time.ZonedDateTime end>;

        $r1[1] = $r3;

        $r4 = r0.<android.util.RecurrenceRule: java.time.Period period>;

        $r1[2] = $r4;

        $i0 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>($r1);

        return $i0;
    }

    public boolean isMonthly()
    {
        android.util.RecurrenceRule r0;
        int $i0, $i1, $i2;
        java.time.Period $r1, $r2, r4;
        java.time.ZonedDateTime r3;
        boolean z0;

        r0 := @this: android.util.RecurrenceRule;

        r3 = r0.<android.util.RecurrenceRule: java.time.ZonedDateTime start>;

        z0 = 1;

        if r3 == null goto label1;

        r4 = r0.<android.util.RecurrenceRule: java.time.Period period>;

        if r4 == null goto label1;

        $i0 = virtualinvoke r4.<java.time.Period: int getYears()>();

        if $i0 != 0 goto label1;

        $r1 = r0.<android.util.RecurrenceRule: java.time.Period period>;

        $i1 = virtualinvoke $r1.<java.time.Period: int getMonths()>();

        if $i1 != 1 goto label1;

        $r2 = r0.<android.util.RecurrenceRule: java.time.Period period>;

        $i2 = virtualinvoke $r2.<java.time.Period: int getDays()>();

        if $i2 != 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isRecurring()
    {
        android.util.RecurrenceRule r0;
        java.time.Period $r1;
        boolean z0;

        r0 := @this: android.util.RecurrenceRule;

        $r1 = r0.<android.util.RecurrenceRule: java.time.Period period>;

        if $r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public java.lang.String toString()
    {
        android.util.RecurrenceRule r0;
        java.lang.StringBuilder $r2;
        java.time.ZonedDateTime $r4, $r7;
        java.time.Period $r10;
        java.lang.String $r13;

        r0 := @this: android.util.RecurrenceRule;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("RecurrenceRule{");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("start=");

        $r4 = r0.<android.util.RecurrenceRule: java.time.ZonedDateTime start>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" end=");

        $r7 = r0.<android.util.RecurrenceRule: java.time.ZonedDateTime end>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" period=");

        $r10 = r0.<android.util.RecurrenceRule: java.time.Period period>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r13 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        android.util.RecurrenceRule r0;
        android.os.Parcel r1;
        int i0;
        java.time.ZonedDateTime $r2, $r4;
        java.lang.String $r3, $r5, $r7;
        java.time.Period $r6;

        r0 := @this: android.util.RecurrenceRule;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        $r2 = r0.<android.util.RecurrenceRule: java.time.ZonedDateTime start>;

        $r3 = staticinvoke <android.util.RecurrenceRule: java.lang.String convertZonedDateTime(java.time.ZonedDateTime)>($r2);

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>($r3);

        $r4 = r0.<android.util.RecurrenceRule: java.time.ZonedDateTime end>;

        $r5 = staticinvoke <android.util.RecurrenceRule: java.lang.String convertZonedDateTime(java.time.ZonedDateTime)>($r4);

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>($r5);

        $r6 = r0.<android.util.RecurrenceRule: java.time.Period period>;

        $r7 = staticinvoke <android.util.RecurrenceRule: java.lang.String convertPeriod(java.time.Period)>($r6);

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>($r7);

        return;
    }

    public void writeToStream(java.io.DataOutputStream) throws java.io.IOException
    {
        android.util.RecurrenceRule r0;
        java.io.DataOutputStream r1;
        java.time.ZonedDateTime $r2, $r4;
        java.lang.String $r3, $r5, $r7;
        java.time.Period $r6;

        r0 := @this: android.util.RecurrenceRule;

        r1 := @parameter0: java.io.DataOutputStream;

        virtualinvoke r1.<java.io.DataOutputStream: void writeInt(int)>(0);

        $r2 = r0.<android.util.RecurrenceRule: java.time.ZonedDateTime start>;

        $r3 = staticinvoke <android.util.RecurrenceRule: java.lang.String convertZonedDateTime(java.time.ZonedDateTime)>($r2);

        staticinvoke <android.util.BackupUtils: void writeString(java.io.DataOutputStream,java.lang.String)>(r1, $r3);

        $r4 = r0.<android.util.RecurrenceRule: java.time.ZonedDateTime end>;

        $r5 = staticinvoke <android.util.RecurrenceRule: java.lang.String convertZonedDateTime(java.time.ZonedDateTime)>($r4);

        staticinvoke <android.util.BackupUtils: void writeString(java.io.DataOutputStream,java.lang.String)>(r1, $r5);

        $r6 = r0.<android.util.RecurrenceRule: java.time.Period period>;

        $r7 = staticinvoke <android.util.RecurrenceRule: java.lang.String convertPeriod(java.time.Period)>($r6);

        staticinvoke <android.util.BackupUtils: void writeString(java.io.DataOutputStream,java.lang.String)>(r1, $r7);

        return;
    }
}
