class android.util.ReflectiveProperty extends android.util.Property
{
    private static final java.lang.String PREFIX_GET;
    private static final java.lang.String PREFIX_IS;
    private static final java.lang.String PREFIX_SET;
    private java.lang.reflect.Field mField;
    private java.lang.reflect.Method mGetter;
    private java.lang.reflect.Method mSetter;

    public void <init>(java.lang.Class, java.lang.Class, java.lang.String)
    {
        android.util.ReflectiveProperty r0;
        char c0, $c1;
        java.lang.StringBuilder $r1, $r4, $r10, $r18, $r24, $r30, r63;
        java.lang.Class[] $r7, $r21, $r33;
        java.lang.reflect.Method $r8, $r9, $r22, $r34;
        boolean $z0, $z1;
        android.util.NoSuchPropertyException $r16, $r27, r62;
        java.lang.String $r17, $r28, $r41, r45, r46, r48, r50, r53, r56;
        java.lang.Throwable $r23, $r29, $r35, $r42;
        java.lang.Class r43, r44, r54, r61;
        java.lang.reflect.Field r60;

        r0 := @this: android.util.ReflectiveProperty;

        r43 := @parameter0: java.lang.Class;

        r44 := @parameter1: java.lang.Class;

        r45 := @parameter2: java.lang.String;

        specialinvoke r0.<android.util.Property: void <init>(java.lang.Class,java.lang.String)>(r44, r45);

        $c1 = virtualinvoke r45.<java.lang.String: char charAt(int)>(0);

        c0 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c1);

        r46 = virtualinvoke r45.<java.lang.String: java.lang.String substring(int)>(1);

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r46);

        r48 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("get");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r48);

        r50 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

     label01:
        $r7 = (java.lang.Class[]) null;

        $r8 = virtualinvoke r43.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r50, $r7);

        r0.<android.util.ReflectiveProperty: java.lang.reflect.Method mGetter> = $r8;

     label02:
        goto label05;

     label03:
        $r29 := @caughtexception;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("is");

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r48);

        r53 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

     label04:
        $r33 = (java.lang.Class[]) null;

        $r34 = virtualinvoke r43.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r53, $r33);

        r0.<android.util.ReflectiveProperty: java.lang.reflect.Method mGetter> = $r34;

     label05:
        $r9 = r0.<android.util.ReflectiveProperty: java.lang.reflect.Method mGetter>;

        r54 = virtualinvoke $r9.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $z0 = specialinvoke r0.<android.util.ReflectiveProperty: boolean typesMatch(java.lang.Class,java.lang.Class)>(r44, r54);

        if $z0 == 0 goto label10;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("set");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r48);

        r56 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

     label06:
        $r21 = newarray (java.lang.Class)[1];

        $r21[0] = r54;

        $r22 = virtualinvoke r43.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r56, $r21);

        r0.<android.util.ReflectiveProperty: java.lang.reflect.Method mSetter> = $r22;

     label07:
        goto label09;

     label08:
        $r42 := @caughtexception;

     label09:
        return;

     label10:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Underlying type (");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r54);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") does not match Property type (");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r44);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r16 = new android.util.NoSuchPropertyException;

        $r17 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<android.util.NoSuchPropertyException: void <init>(java.lang.String)>($r17);

        throw $r16;

     label11:
        $r35 := @caughtexception;

     label12:
        r60 = virtualinvoke r43.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(r45);

        r0.<android.util.ReflectiveProperty: java.lang.reflect.Field mField> = r60;

        r61 = virtualinvoke r60.<java.lang.reflect.Field: java.lang.Class getType()>();

        $z1 = specialinvoke r0.<android.util.ReflectiveProperty: boolean typesMatch(java.lang.Class,java.lang.Class)>(r44, r61);

        if $z1 == 0 goto label14;

     label13:
        return;

     label14:
        r62 = new android.util.NoSuchPropertyException;

        r63 = new java.lang.StringBuilder;

        specialinvoke r63.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Underlying type (");

        virtualinvoke r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r61);

        virtualinvoke r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") does not match Property type (");

        virtualinvoke r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r44);

        virtualinvoke r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r41 = virtualinvoke r63.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r62.<android.util.NoSuchPropertyException: void <init>(java.lang.String)>($r41);

        throw r62;

     label15:
        $r23 := @caughtexception;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No accessor method or field found for property with name ");

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r45);

        $r27 = new android.util.NoSuchPropertyException;

        $r28 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<android.util.NoSuchPropertyException: void <init>(java.lang.String)>($r28);

        throw $r27;

        catch java.lang.NoSuchMethodException from label01 to label02 with label03;
        catch java.lang.NoSuchMethodException from label04 to label05 with label11;
        catch java.lang.NoSuchMethodException from label06 to label07 with label08;
        catch java.lang.NoSuchFieldException from label12 to label13 with label15;
        catch java.lang.NoSuchFieldException from label14 to label15 with label15;
    }

    private boolean typesMatch(java.lang.Class, java.lang.Class)
    {
        android.util.ReflectiveProperty r0;
        java.lang.Class r1, r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        boolean $z1, z2;

        r0 := @this: android.util.ReflectiveProperty;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        if r2 == r1 goto label11;

        $z1 = virtualinvoke r2.<java.lang.Class: boolean isPrimitive()>();

        if $z1 == 0 goto label10;

        $r3 = <java.lang.Float: java.lang.Class TYPE>;

        if r2 != $r3 goto label01;

        z2 = 1;

        if r1 == class "Ljava/lang/Float;" goto label09;

     label01:
        $r4 = <java.lang.Integer: java.lang.Class TYPE>;

        if r2 != $r4 goto label02;

        z2 = 1;

        if r1 == class "Ljava/lang/Integer;" goto label09;

     label02:
        $r5 = <java.lang.Boolean: java.lang.Class TYPE>;

        if r2 != $r5 goto label03;

        z2 = 1;

        if r1 == class "Ljava/lang/Boolean;" goto label09;

     label03:
        $r6 = <java.lang.Long: java.lang.Class TYPE>;

        if r2 != $r6 goto label04;

        z2 = 1;

        if r1 == class "Ljava/lang/Long;" goto label09;

     label04:
        $r7 = <java.lang.Double: java.lang.Class TYPE>;

        if r2 != $r7 goto label05;

        z2 = 1;

        if r1 == class "Ljava/lang/Double;" goto label09;

     label05:
        $r8 = <java.lang.Short: java.lang.Class TYPE>;

        if r2 != $r8 goto label06;

        z2 = 1;

        if r1 == class "Ljava/lang/Short;" goto label09;

     label06:
        $r9 = <java.lang.Byte: java.lang.Class TYPE>;

        if r2 != $r9 goto label07;

        z2 = 1;

        if r1 == class "Ljava/lang/Byte;" goto label09;

     label07:
        $r10 = <java.lang.Character: java.lang.Class TYPE>;

        if r2 != $r10 goto label08;

        if r1 != class "Ljava/lang/Character;" goto label08;

        z2 = 1;

        goto label09;

     label08:
        z2 = 0;

     label09:
        return z2;

     label10:
        return 0;

     label11:
        return 1;
    }

    public java.lang.Object get(java.lang.Object)
    {
        android.util.ReflectiveProperty r0;
        java.lang.Object[] $r2;
        java.lang.Throwable $r3, $r5, $r6, $r8;
        java.lang.Object r10, r12, r16;
        java.lang.reflect.Method r11;
        java.lang.reflect.Field r15;
        java.lang.RuntimeException r18;
        java.lang.AssertionError r19, r20, r21;
        java.lang.reflect.InvocationTargetException r22;

        r0 := @this: android.util.ReflectiveProperty;

        r10 := @parameter0: java.lang.Object;

        r11 = r0.<android.util.ReflectiveProperty: java.lang.reflect.Method mGetter>;

        if r11 == null goto label5;

     label1:
        $r2 = (java.lang.Object[]) null;

        r12 = virtualinvoke r11.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r10, $r2);

     label2:
        return r12;

     label3:
        $r3 := @caughtexception;

        r18 = new java.lang.RuntimeException;

        r22 = (java.lang.reflect.InvocationTargetException) $r3;

        $r5 = virtualinvoke r22.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        specialinvoke r18.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r5);

        throw r18;

     label4:
        $r6 := @caughtexception;

        r19 = new java.lang.AssertionError;

        specialinvoke r19.<java.lang.AssertionError: void <init>()>();

        throw r19;

     label5:
        r15 = r0.<android.util.ReflectiveProperty: java.lang.reflect.Field mField>;

        if r15 == null goto label9;

     label6:
        r16 = virtualinvoke r15.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r10);

     label7:
        return r16;

     label8:
        $r8 := @caughtexception;

        r20 = new java.lang.AssertionError;

        specialinvoke r20.<java.lang.AssertionError: void <init>()>();

        throw r20;

     label9:
        r21 = new java.lang.AssertionError;

        specialinvoke r21.<java.lang.AssertionError: void <init>()>();

        throw r21;

        catch java.lang.IllegalAccessException from label1 to label2 with label4;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label6 to label7 with label8;
    }

    public boolean isReadOnly()
    {
        android.util.ReflectiveProperty r0;
        java.lang.reflect.Method $r1;
        java.lang.reflect.Field $r2;
        boolean z0;

        r0 := @this: android.util.ReflectiveProperty;

        $r1 = r0.<android.util.ReflectiveProperty: java.lang.reflect.Method mSetter>;

        if $r1 != null goto label1;

        $r2 = r0.<android.util.ReflectiveProperty: java.lang.reflect.Field mField>;

        if $r2 != null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public void set(java.lang.Object, java.lang.Object)
    {
        android.util.ReflectiveProperty r0;
        java.lang.Object r1, r18;
        java.lang.String $r4, $r8;
        java.lang.Object[] $r9;
        java.lang.Throwable $r11, $r13, $r14, $r16;
        java.lang.reflect.Method r19;
        java.lang.reflect.Field r22;
        java.lang.RuntimeException r25;
        java.lang.AssertionError r26, r27;
        java.lang.StringBuilder r28;
        java.lang.UnsupportedOperationException r29;
        java.lang.reflect.InvocationTargetException r30;

        r0 := @this: android.util.ReflectiveProperty;

        r18 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r19 = r0.<android.util.ReflectiveProperty: java.lang.reflect.Method mSetter>;

        if r19 == null goto label5;

     label1:
        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = r1;

        virtualinvoke r19.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r18, $r9);

     label2:
        goto label7;

     label3:
        $r11 := @caughtexception;

        r25 = new java.lang.RuntimeException;

        r30 = (java.lang.reflect.InvocationTargetException) $r11;

        $r13 = virtualinvoke r30.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        specialinvoke r25.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r13);

        throw r25;

     label4:
        $r14 := @caughtexception;

        r26 = new java.lang.AssertionError;

        specialinvoke r26.<java.lang.AssertionError: void <init>()>();

        throw r26;

     label5:
        r22 = r0.<android.util.ReflectiveProperty: java.lang.reflect.Field mField>;

        if r22 == null goto label9;

     label6:
        virtualinvoke r22.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r18, r1);

     label7:
        return;

     label8:
        $r16 := @caughtexception;

        r27 = new java.lang.AssertionError;

        specialinvoke r27.<java.lang.AssertionError: void <init>()>();

        throw r27;

     label9:
        r28 = new java.lang.StringBuilder;

        specialinvoke r28.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Property ");

        $r4 = virtualinvoke r0.<android.util.ReflectiveProperty: java.lang.String getName()>();

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is read-only");

        r29 = new java.lang.UnsupportedOperationException;

        $r8 = virtualinvoke r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r29.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r8);

        throw r29;

        catch java.lang.IllegalAccessException from label1 to label2 with label4;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label6 to label7 with label8;
    }

    public static void <clinit>()
    {
        <android.util.ReflectiveProperty: java.lang.String PREFIX_SET> = "set";

        <android.util.ReflectiveProperty: java.lang.String PREFIX_IS> = "is";

        <android.util.ReflectiveProperty: java.lang.String PREFIX_GET> = "get";

        return;
    }
}
