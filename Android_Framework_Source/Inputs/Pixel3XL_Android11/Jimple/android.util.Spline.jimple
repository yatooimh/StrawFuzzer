public abstract class android.util.Spline extends java.lang.Object
{

    public void <init>()
    {
        android.util.Spline r0;

        r0 := @this: android.util.Spline;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static android.util.Spline createLinearSpline(float[], float[])
    {
        float[] r0, r1;
        android.util.Spline$LinearSpline $r2;

        r0 := @parameter0: float[];

        r1 := @parameter1: float[];

        $r2 = new android.util.Spline$LinearSpline;

        specialinvoke $r2.<android.util.Spline$LinearSpline: void <init>(float[],float[])>(r0, r1);

        return $r2;
    }

    public static android.util.Spline createMonotoneCubicSpline(float[], float[])
    {
        float[] r0, r1;
        android.util.Spline$MonotoneCubicSpline $r2;

        r0 := @parameter0: float[];

        r1 := @parameter1: float[];

        $r2 = new android.util.Spline$MonotoneCubicSpline;

        specialinvoke $r2.<android.util.Spline$MonotoneCubicSpline: void <init>(float[],float[])>(r0, r1);

        return $r2;
    }

    public static android.util.Spline createSpline(float[], float[])
    {
        float[] r0, r1;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r2;
        android.util.Spline $r3, $r4;

        r0 := @parameter0: float[];

        r1 := @parameter1: float[];

        $z0 = staticinvoke <android.util.Spline: boolean isStrictlyIncreasing(float[])>(r0);

        if $z0 == 0 goto label2;

        $z1 = staticinvoke <android.util.Spline: boolean isMonotonic(float[])>(r1);

        if $z1 == 0 goto label1;

        $r4 = staticinvoke <android.util.Spline: android.util.Spline createMonotoneCubicSpline(float[],float[])>(r0, r1);

        return $r4;

     label1:
        $r3 = staticinvoke <android.util.Spline: android.util.Spline createLinearSpline(float[],float[])>(r0, r1);

        return $r3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The control points must all have strictly increasing X values.");

        throw $r2;
    }

    private static boolean isMonotonic(float[])
    {
        float[] r0;
        float f0, f1;
        java.lang.IllegalArgumentException $r1;
        int $i0, $i1, i3;
        byte $b2;

        r0 := @parameter0: float[];

        if r0 == null goto label4;

        $i0 = lengthof r0;

        if $i0 < 2 goto label4;

        f1 = r0[0];

        i3 = 1;

     label1:
        $i1 = lengthof r0;

        if i3 >= $i1 goto label3;

        f0 = r0[i3];

        $b2 = f0 cmpg f1;

        if $b2 >= 0 goto label2;

        return 0;

     label2:
        f1 = f0;

        i3 = i3 + 1;

        goto label1;

     label3:
        return 1;

     label4:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("There must be at least two control points.");

        throw $r1;
    }

    private static boolean isStrictlyIncreasing(float[])
    {
        float[] r0;
        float f0, f1;
        java.lang.IllegalArgumentException $r1;
        int $i0, $i1, i3;
        byte $b2;

        r0 := @parameter0: float[];

        if r0 == null goto label4;

        $i0 = lengthof r0;

        if $i0 < 2 goto label4;

        f1 = r0[0];

        i3 = 1;

     label1:
        $i1 = lengthof r0;

        if i3 >= $i1 goto label3;

        f0 = r0[i3];

        $b2 = f0 cmpg f1;

        if $b2 > 0 goto label2;

        return 0;

     label2:
        f1 = f0;

        i3 = i3 + 1;

        goto label1;

     label3:
        return 1;

     label4:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("There must be at least two control points.");

        throw $r1;
    }

    public abstract float interpolate(float);
}
