public class android.util.TimingsTraceLog extends java.lang.Object
{
    private static final boolean DEBUG_BOOT_TIME;
    private static final int MAX_NESTED_CALLS;
    private int mCurrentLevel;
    private final int mMaxNestedCalls;
    private final java.lang.String[] mStartNames;
    private final long[] mStartTimes;
    private final java.lang.String mTag;
    private final long mThreadId;
    private final long mTraceTag;

    static void <clinit>()
    {
        boolean $z0, $z1;

        <android.util.TimingsTraceLog: int MAX_NESTED_CALLS> = 10;

        $z0 = <android.os.Build: boolean IS_USER>;

        $z1 = $z0 ^ 1;

        <android.util.TimingsTraceLog: boolean DEBUG_BOOT_TIME> = $z1;

        return;
    }

    public void <init>(java.lang.String, long)
    {
        android.util.TimingsTraceLog r0;
        java.lang.String r1;
        long l0;
        boolean $z0;
        byte b1;

        r0 := @this: android.util.TimingsTraceLog;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $z0 = <android.util.TimingsTraceLog: boolean DEBUG_BOOT_TIME>;

        if $z0 == 0 goto label1;

        b1 = 10;

        goto label2;

     label1:
        b1 = -1;

     label2:
        specialinvoke r0.<android.util.TimingsTraceLog: void <init>(java.lang.String,long,int)>(r1, l0, b1);

        return;
    }

    public void <init>(java.lang.String, long, int)
    {
        android.util.TimingsTraceLog r0;
        java.lang.String r1;
        long l0, $l2;
        int i1;
        java.lang.Thread $r2;
        java.lang.String[] $r3;
        long[] $r4;

        r0 := @this: android.util.TimingsTraceLog;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.util.TimingsTraceLog: int mCurrentLevel> = -1;

        r0.<android.util.TimingsTraceLog: java.lang.String mTag> = r1;

        r0.<android.util.TimingsTraceLog: long mTraceTag> = l0;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $l2 = virtualinvoke $r2.<java.lang.Thread: long getId()>();

        r0.<android.util.TimingsTraceLog: long mThreadId> = $l2;

        r0.<android.util.TimingsTraceLog: int mMaxNestedCalls> = i1;

        if i1 <= 0 goto label1;

        $r3 = newarray (java.lang.String)[i1];

        r0.<android.util.TimingsTraceLog: java.lang.String[] mStartNames> = $r3;

        $r4 = newarray (long)[i1];

        r0.<android.util.TimingsTraceLog: long[] mStartTimes> = $r4;

        goto label2;

     label1:
        r0.<android.util.TimingsTraceLog: java.lang.String[] mStartNames> = null;

        r0.<android.util.TimingsTraceLog: long[] mStartTimes> = null;

     label2:
        return;
    }

    private void assertSameThread()
    {
        android.util.TimingsTraceLog r0;
        java.lang.Thread r1;
        long $l0, $l1, $l3, $l4;
        byte $b2;
        java.lang.StringBuilder $r3;
        java.lang.String $r7, $r13;
        java.lang.IllegalStateException $r12;

        r0 := @this: android.util.TimingsTraceLog;

        r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $l0 = virtualinvoke r1.<java.lang.Thread: long getId()>();

        $l1 = r0.<android.util.TimingsTraceLog: long mThreadId>;

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label1;

        return;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Instance of TimingsTraceLog can only be called from the thread it was created on (tid: ");

        $l3 = r0.<android.util.TimingsTraceLog: long mThreadId>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("), but was from ");

        $r7 = virtualinvoke r1.<java.lang.Thread: java.lang.String getName()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (tid: ");

        $l4 = virtualinvoke r1.<java.lang.Thread: long getId()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r12 = new java.lang.IllegalStateException;

        $r13 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        throw $r12;
    }

    public final java.util.List getUnfinishedTracesForDebug()
    {
        android.util.TimingsTraceLog r0;
        long[] $r2;
        java.util.List $r3;
        int $i0, $i1, $i2, $i3, i4;
        java.util.ArrayList $r4;
        java.lang.String[] $r5;
        java.lang.String $r6;

        r0 := @this: android.util.TimingsTraceLog;

        $r2 = r0.<android.util.TimingsTraceLog: long[] mStartTimes>;

        if $r2 == null goto label4;

        $i0 = r0.<android.util.TimingsTraceLog: int mCurrentLevel>;

        if $i0 >= 0 goto label1;

        goto label4;

     label1:
        $r4 = new java.util.ArrayList;

        $i1 = r0.<android.util.TimingsTraceLog: int mCurrentLevel>;

        $i2 = $i1 + 1;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i2);

        i4 = 0;

     label2:
        $i3 = r0.<android.util.TimingsTraceLog: int mCurrentLevel>;

        if i4 > $i3 goto label3;

        $r5 = r0.<android.util.TimingsTraceLog: java.lang.String[] mStartNames>;

        $r6 = $r5[i4];

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        i4 = i4 + 1;

        goto label2;

     label3:
        return $r4;

     label4:
        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r3;
    }

    public void logDuration(java.lang.String, long)
    {
        android.util.TimingsTraceLog r0;
        java.lang.String r1, r2, $r9;
        long l0;
        java.lang.StringBuilder $r4;

        r0 := @this: android.util.TimingsTraceLog;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        r2 = r0.<android.util.TimingsTraceLog: java.lang.String mTag>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" took to complete: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms");

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>(r2, $r9);

        return;
    }

    public void traceBegin(java.lang.String)
    {
        android.util.TimingsTraceLog r0;
        java.lang.String r1, r2, $r12;
        long $l0, $l3;
        boolean $z0;
        int $i1, $i2, $i4, i6, i7;
        java.lang.String[] $r4;
        long[] $r5;
        java.lang.StringBuilder $r6;

        r0 := @this: android.util.TimingsTraceLog;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<android.util.TimingsTraceLog: void assertSameThread()>();

        $l0 = r0.<android.util.TimingsTraceLog: long mTraceTag>;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>($l0, r1);

        $z0 = <android.util.TimingsTraceLog: boolean DEBUG_BOOT_TIME>;

        if $z0 != 0 goto label1;

        return;

     label1:
        i6 = r0.<android.util.TimingsTraceLog: int mCurrentLevel>;

        $i2 = i6 + 1;

        $i1 = r0.<android.util.TimingsTraceLog: int mMaxNestedCalls>;

        if $i2 < $i1 goto label2;

        r2 = r0.<android.util.TimingsTraceLog: java.lang.String mTag>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("not tracing duration of \'");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' because already reached ");

        $i4 = r0.<android.util.TimingsTraceLog: int mMaxNestedCalls>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" levels");

        $r12 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>(r2, $r12);

        return;

     label2:
        i7 = i6 + 1;

        r0.<android.util.TimingsTraceLog: int mCurrentLevel> = i7;

        $r4 = r0.<android.util.TimingsTraceLog: java.lang.String[] mStartNames>;

        $r4[i7] = r1;

        $r5 = r0.<android.util.TimingsTraceLog: long[] mStartTimes>;

        $l3 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $r5[i7] = $l3;

        return;
    }

    public void traceEnd()
    {
        android.util.TimingsTraceLog r0;
        java.lang.String r1, $r4;
        long l0, l1, $l2, $l4;
        long[] r2;
        boolean $z0;
        java.lang.String[] $r3;
        int $i3, i6, i7;

        r0 := @this: android.util.TimingsTraceLog;

        specialinvoke r0.<android.util.TimingsTraceLog: void assertSameThread()>();

        $l2 = r0.<android.util.TimingsTraceLog: long mTraceTag>;

        staticinvoke <android.os.Trace: void traceEnd(long)>($l2);

        $z0 = <android.util.TimingsTraceLog: boolean DEBUG_BOOT_TIME>;

        if $z0 != 0 goto label1;

        return;

     label1:
        i6 = r0.<android.util.TimingsTraceLog: int mCurrentLevel>;

        if i6 >= 0 goto label2;

        $r4 = r0.<android.util.TimingsTraceLog: java.lang.String mTag>;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>($r4, "traceEnd called more times than traceBegin");

        return;

     label2:
        $r3 = r0.<android.util.TimingsTraceLog: java.lang.String[] mStartNames>;

        r1 = $r3[i6];

        l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r2 = r0.<android.util.TimingsTraceLog: long[] mStartTimes>;

        i7 = r0.<android.util.TimingsTraceLog: int mCurrentLevel>;

        l1 = r2[i7];

        $i3 = i7 - 1;

        r0.<android.util.TimingsTraceLog: int mCurrentLevel> = $i3;

        $l4 = l0 - l1;

        virtualinvoke r0.<android.util.TimingsTraceLog: void logDuration(java.lang.String,long)>(r1, $l4);

        return;
    }
}
