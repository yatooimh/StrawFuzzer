public class android.util.apk.ApkSignatureSchemeV2Verifier extends java.lang.Object
{
    private static final int APK_SIGNATURE_SCHEME_V2_BLOCK_ID;
    public static final int SF_ATTRIBUTE_ANDROID_APK_SIGNED_ID;
    private static final int STRIPPING_PROTECTION_ATTR_ID;

    public void <init>()
    {
        android.util.apk.ApkSignatureSchemeV2Verifier r0;

        r0 := @this: android.util.apk.ApkSignatureSchemeV2Verifier;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static android.util.apk.SignatureInfo findSignature(java.io.RandomAccessFile) throws java.io.IOException, android.util.apk.SignatureNotFoundException
    {
        java.io.RandomAccessFile r0;
        android.util.apk.SignatureInfo $r1;

        r0 := @parameter0: java.io.RandomAccessFile;

        $r1 = staticinvoke <android.util.apk.ApkSigningBlockUtils: android.util.apk.SignatureInfo findSignature(java.io.RandomAccessFile,int)>(r0, 1896449818);

        return $r1;
    }

    static byte[] generateApkVerity(java.lang.String, android.util.apk.ByteBufferFactory) throws java.io.IOException, android.util.apk.SignatureNotFoundException, java.lang.SecurityException, java.security.DigestException, java.security.NoSuchAlgorithmException
    {
        java.io.RandomAccessFile $r1;
        android.util.apk.SignatureInfo $r2;
        java.lang.Throwable $r3, $r4;
        java.lang.String r5;
        android.util.apk.ByteBufferFactory r6;
        byte[] r7;

        r5 := @parameter0: java.lang.String;

        r6 := @parameter1: android.util.apk.ByteBufferFactory;

        $r1 = new java.io.RandomAccessFile;

        specialinvoke $r1.<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>(r5, "r");

     label1:
        $r2 = staticinvoke <android.util.apk.ApkSignatureSchemeV2Verifier: android.util.apk.SignatureInfo findSignature(java.io.RandomAccessFile)>($r1);

        r7 = staticinvoke <android.util.apk.VerityBuilder: byte[] generateApkVerity(java.lang.String,android.util.apk.ByteBufferFactory,android.util.apk.SignatureInfo)>(r5, r6, $r2);

     label2:
        virtualinvoke $r1.<java.io.RandomAccessFile: void close()>();

        return r7;

     label3:
        $r3 := @caughtexception;

     label4:
        virtualinvoke $r1.<java.io.RandomAccessFile: void close()>();

     label5:
        goto label7;

     label6:
        $r4 := @caughtexception;

        virtualinvoke $r3.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r4);

     label7:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    static byte[] generateApkVerityRootHash(java.lang.String) throws java.io.IOException, android.util.apk.SignatureNotFoundException, java.security.DigestException, java.security.NoSuchAlgorithmException
    {
        android.util.apk.SignatureInfo r0;
        android.util.apk.ApkSignatureSchemeV2Verifier$VerifiedSigner r1;
        java.io.RandomAccessFile $r2;
        byte[] $r3, r9, r10;
        java.nio.ByteBuffer $r4;
        java.lang.Throwable $r5, $r6;
        java.lang.String r7;

        r7 := @parameter0: java.lang.String;

        $r2 = new java.io.RandomAccessFile;

        specialinvoke $r2.<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>(r7, "r");

     label1:
        r0 = staticinvoke <android.util.apk.ApkSignatureSchemeV2Verifier: android.util.apk.SignatureInfo findSignature(java.io.RandomAccessFile)>($r2);

        r1 = staticinvoke <android.util.apk.ApkSignatureSchemeV2Verifier: android.util.apk.ApkSignatureSchemeV2Verifier$VerifiedSigner verify(java.io.RandomAccessFile,boolean)>($r2, 0);

        r9 = r1.<android.util.apk.ApkSignatureSchemeV2Verifier$VerifiedSigner: byte[] verityRootHash>;

     label2:
        if r9 != null goto label3;

        virtualinvoke $r2.<java.io.RandomAccessFile: void close()>();

        return null;

     label3:
        $r3 = r1.<android.util.apk.ApkSignatureSchemeV2Verifier$VerifiedSigner: byte[] verityRootHash>;

        $r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r3);

        r10 = staticinvoke <android.util.apk.VerityBuilder: byte[] generateApkVerityRootHash(java.io.RandomAccessFile,java.nio.ByteBuffer,android.util.apk.SignatureInfo)>($r2, $r4, r0);

     label4:
        virtualinvoke $r2.<java.io.RandomAccessFile: void close()>();

        return r10;

     label5:
        $r5 := @caughtexception;

     label6:
        virtualinvoke $r2.<java.io.RandomAccessFile: void close()>();

     label7:
        goto label9;

     label8:
        $r6 := @caughtexception;

        virtualinvoke $r5.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r6);

     label9:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    static byte[] getVerityRootHash(java.lang.String) throws java.io.IOException, android.util.apk.SignatureNotFoundException, java.lang.SecurityException
    {
        java.io.RandomAccessFile $r0;
        android.util.apk.ApkSignatureSchemeV2Verifier$VerifiedSigner $r2;
        java.lang.Throwable $r3, $r4;
        java.lang.String r5;
        byte[] r7;

        r5 := @parameter0: java.lang.String;

        $r0 = new java.io.RandomAccessFile;

        specialinvoke $r0.<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>(r5, "r");

     label1:
        staticinvoke <android.util.apk.ApkSignatureSchemeV2Verifier: android.util.apk.SignatureInfo findSignature(java.io.RandomAccessFile)>($r0);

        $r2 = staticinvoke <android.util.apk.ApkSignatureSchemeV2Verifier: android.util.apk.ApkSignatureSchemeV2Verifier$VerifiedSigner verify(java.io.RandomAccessFile,boolean)>($r0, 0);

        r7 = $r2.<android.util.apk.ApkSignatureSchemeV2Verifier$VerifiedSigner: byte[] verityRootHash>;

     label2:
        virtualinvoke $r0.<java.io.RandomAccessFile: void close()>();

        return r7;

     label3:
        $r4 := @caughtexception;

     label4:
        virtualinvoke $r0.<java.io.RandomAccessFile: void close()>();

     label5:
        goto label7;

     label6:
        $r3 := @caughtexception;

        virtualinvoke $r4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r3);

     label7:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public static boolean hasSignature(java.lang.String) throws java.io.IOException
    {
        java.lang.Throwable $r1, $r3;
        android.util.apk.SignatureNotFoundException $r2;
        java.lang.String r4;
        java.io.RandomAccessFile r5;

        r4 := @parameter0: java.lang.String;

     label01:
        r5 = new java.io.RandomAccessFile;

        specialinvoke r5.<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>(r4, "r");

     label02:
        staticinvoke <android.util.apk.ApkSignatureSchemeV2Verifier: android.util.apk.SignatureInfo findSignature(java.io.RandomAccessFile)>(r5);

     label03:
        virtualinvoke r5.<java.io.RandomAccessFile: void close()>();

     label04:
        return 1;

     label05:
        $r3 := @caughtexception;

     label06:
        virtualinvoke r5.<java.io.RandomAccessFile: void close()>();

     label07:
        goto label10;

     label08:
        $r1 := @caughtexception;

     label09:
        virtualinvoke $r3.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r1);

     label10:
        throw $r3;

     label11:
        $r2 := @caughtexception;

        return 0;

        catch android.util.apk.SignatureNotFoundException from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch android.util.apk.SignatureNotFoundException from label03 to label04 with label11;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch android.util.apk.SignatureNotFoundException from label09 to label10 with label11;
        catch android.util.apk.SignatureNotFoundException from label10 to label11 with label11;
    }

    public static java.security.cert.X509Certificate[][] unsafeGetCertsWithoutVerification(java.lang.String) throws android.util.apk.SignatureNotFoundException, java.lang.SecurityException, java.io.IOException
    {
        java.lang.String r0;
        android.util.apk.ApkSignatureSchemeV2Verifier$VerifiedSigner $r1;
        java.security.cert.X509Certificate[][] $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <android.util.apk.ApkSignatureSchemeV2Verifier: android.util.apk.ApkSignatureSchemeV2Verifier$VerifiedSigner verify(java.lang.String,boolean)>(r0, 0);

        $r2 = $r1.<android.util.apk.ApkSignatureSchemeV2Verifier$VerifiedSigner: java.security.cert.X509Certificate[][] certs>;

        return $r2;
    }

    private static android.util.apk.ApkSignatureSchemeV2Verifier$VerifiedSigner verify(java.io.RandomAccessFile, android.util.apk.SignatureInfo, boolean) throws java.lang.SecurityException, java.io.IOException
    {
        boolean z0, $z1, $z2, $z3;
        java.security.cert.CertificateFactory r2;
        android.util.ArrayMap $r3;
        java.util.ArrayList $r4;
        java.nio.ByteBuffer $r5, $r15, r30;
        java.lang.SecurityException $r6, $r7, $r22, $r27;
        java.lang.Integer $r8, $r13;
        android.util.apk.ApkSignatureSchemeV2Verifier$VerifiedSigner $r9;
        int $i0, i2;
        java.security.cert.X509Certificate[][] $r10, $r12;
        java.lang.Object[] $r11;
        java.lang.Object $r14;
        long $l1;
        java.security.cert.X509Certificate[] $r16;
        java.lang.Throwable $r17, $r24, $r26;
        java.lang.StringBuilder $r18;
        java.lang.String $r23;
        java.lang.RuntimeException $r25;
        java.io.RandomAccessFile r28;
        android.util.apk.SignatureInfo r29;
        byte[] r33, r34, r35;

        r28 := @parameter0: java.io.RandomAccessFile;

        r29 := @parameter1: android.util.apk.SignatureInfo;

        z0 := @parameter2: boolean;

        i2 = 0;

        $r3 = new android.util.ArrayMap;

        specialinvoke $r3.<android.util.ArrayMap: void <init>()>();

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

     label01:
        r2 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");

     label02:
        $r5 = r29.<android.util.apk.SignatureInfo: java.nio.ByteBuffer signatureBlock>;

        r30 = staticinvoke <android.util.apk.ApkSigningBlockUtils: java.nio.ByteBuffer getLengthPrefixedSlice(java.nio.ByteBuffer)>($r5);

     label03:
        $z1 = virtualinvoke r30.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z1 == 0 goto label07;

        i2 = i2 + 1;

     label04:
        $r15 = staticinvoke <android.util.apk.ApkSigningBlockUtils: java.nio.ByteBuffer getLengthPrefixedSlice(java.nio.ByteBuffer)>(r30);

        $r16 = staticinvoke <android.util.apk.ApkSignatureSchemeV2Verifier: java.security.cert.X509Certificate[] verifySigner(java.nio.ByteBuffer,java.util.Map,java.security.cert.CertificateFactory)>($r15, $r3, r2);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r16);

     label05:
        goto label03;

     label06:
        $r17 := @caughtexception;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to parse/verify signer #");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" block");

        $r22 = new java.lang.SecurityException;

        $r23 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>($r23, $r17);

        throw $r22;

     label07:
        if i2 < 1 goto label11;

        $z2 = interfaceinvoke $r3.<java.util.Map: boolean isEmpty()>();

        if $z2 != 0 goto label10;

        if z0 == 0 goto label08;

        staticinvoke <android.util.apk.ApkSigningBlockUtils: void verifyIntegrity(java.util.Map,java.io.RandomAccessFile,android.util.apk.SignatureInfo)>($r3, r28, r29);

     label08:
        r33 = null;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $z3 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r8);

        if $z3 == 0 goto label09;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r14 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r13);

        r34 = (byte[]) $r14;

        $l1 = virtualinvoke r28.<java.io.RandomAccessFile: long length()>();

        r33 = staticinvoke <android.util.apk.ApkSigningBlockUtils: byte[] parseVerityDigestAndVerifySourceLength(byte[],long,android.util.apk.SignatureInfo)>(r34, $l1, r29);

     label09:
        r35 = staticinvoke <android.util.apk.ApkSigningBlockUtils: byte[] pickBestDigestForV4(java.util.Map)>($r3);

        $r9 = new android.util.apk.ApkSignatureSchemeV2Verifier$VerifiedSigner;

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        $r10 = newarray (java.security.cert.X509Certificate[])[$i0];

        $r11 = interfaceinvoke $r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r10);

        $r12 = (java.security.cert.X509Certificate[][]) $r11;

        specialinvoke $r9.<android.util.apk.ApkSignatureSchemeV2Verifier$VerifiedSigner: void <init>(java.security.cert.X509Certificate[][],byte[],byte[])>($r12, r33, r35);

        return $r9;

     label10:
        $r7 = new java.lang.SecurityException;

        specialinvoke $r7.<java.lang.SecurityException: void <init>(java.lang.String)>("No content digests found");

        throw $r7;

     label11:
        $r6 = new java.lang.SecurityException;

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>("No signers found");

        throw $r6;

     label12:
        $r26 := @caughtexception;

        $r27 = new java.lang.SecurityException;

        specialinvoke $r27.<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to read list of signers", $r26);

        throw $r27;

     label13:
        $r24 := @caughtexception;

        $r25 = new java.lang.RuntimeException;

        specialinvoke $r25.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to obtain X.509 CertificateFactory", $r24);

        throw $r25;

        catch java.security.cert.CertificateException from label01 to label02 with label13;
        catch java.io.IOException from label02 to label03 with label12;
        catch java.io.IOException from label04 to label05 with label06;
        catch java.nio.BufferUnderflowException from label04 to label05 with label06;
        catch java.lang.SecurityException from label04 to label05 with label06;
    }

    private static android.util.apk.ApkSignatureSchemeV2Verifier$VerifiedSigner verify(java.io.RandomAccessFile, boolean) throws android.util.apk.SignatureNotFoundException, java.lang.SecurityException, java.io.IOException
    {
        java.io.RandomAccessFile r0;
        boolean z0;
        android.util.apk.SignatureInfo $r1;
        android.util.apk.ApkSignatureSchemeV2Verifier$VerifiedSigner $r2;

        r0 := @parameter0: java.io.RandomAccessFile;

        z0 := @parameter1: boolean;

        $r1 = staticinvoke <android.util.apk.ApkSignatureSchemeV2Verifier: android.util.apk.SignatureInfo findSignature(java.io.RandomAccessFile)>(r0);

        $r2 = staticinvoke <android.util.apk.ApkSignatureSchemeV2Verifier: android.util.apk.ApkSignatureSchemeV2Verifier$VerifiedSigner verify(java.io.RandomAccessFile,android.util.apk.SignatureInfo,boolean)>(r0, $r1, z0);

        return $r2;
    }

    public static android.util.apk.ApkSignatureSchemeV2Verifier$VerifiedSigner verify(java.lang.String, boolean) throws android.util.apk.SignatureNotFoundException, java.lang.SecurityException, java.io.IOException
    {
        boolean z0;
        java.io.RandomAccessFile $r0;
        java.lang.Throwable $r1, $r2;
        java.lang.String r3;
        android.util.apk.ApkSignatureSchemeV2Verifier$VerifiedSigner r5;

        r3 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r0 = new java.io.RandomAccessFile;

        specialinvoke $r0.<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>(r3, "r");

     label1:
        r5 = staticinvoke <android.util.apk.ApkSignatureSchemeV2Verifier: android.util.apk.ApkSignatureSchemeV2Verifier$VerifiedSigner verify(java.io.RandomAccessFile,boolean)>($r0, z0);

     label2:
        virtualinvoke $r0.<java.io.RandomAccessFile: void close()>();

        return r5;

     label3:
        $r2 := @caughtexception;

     label4:
        virtualinvoke $r0.<java.io.RandomAccessFile: void close()>();

     label5:
        goto label7;

     label6:
        $r1 := @caughtexception;

        virtualinvoke $r2.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r1);

     label7:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public static java.security.cert.X509Certificate[][] verify(java.lang.String) throws android.util.apk.SignatureNotFoundException, java.lang.SecurityException, java.io.IOException
    {
        java.lang.String r0;
        android.util.apk.ApkSignatureSchemeV2Verifier$VerifiedSigner $r1;
        java.security.cert.X509Certificate[][] $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <android.util.apk.ApkSignatureSchemeV2Verifier: android.util.apk.ApkSignatureSchemeV2Verifier$VerifiedSigner verify(java.lang.String,boolean)>(r0, 1);

        $r2 = $r1.<android.util.apk.ApkSignatureSchemeV2Verifier$VerifiedSigner: java.security.cert.X509Certificate[][] certs>;

        return $r2;
    }

    private static void verifyAdditionalAttributes(java.nio.ByteBuffer) throws java.lang.SecurityException, java.io.IOException
    {
        java.nio.ByteBuffer r0, r12;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.StringBuilder $r1, $r6;
        java.io.IOException $r4, $r9;
        java.lang.String $r5, $r10;
        java.lang.SecurityException $r11;

        r12 := @parameter0: java.nio.ByteBuffer;

     label1:
        $z0 = virtualinvoke r12.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 == 0 goto label7;

        r0 = staticinvoke <android.util.apk.ApkSigningBlockUtils: java.nio.ByteBuffer getLengthPrefixedSlice(java.nio.ByteBuffer)>(r12);

        $i0 = virtualinvoke r0.<java.nio.ByteBuffer: int remaining()>();

        if $i0 < 4 goto label6;

        $i2 = virtualinvoke r0.<java.nio.ByteBuffer: int getInt()>();

        if $i2 == -1091571699 goto label2;

        goto label3;

     label2:
        $i3 = virtualinvoke r0.<java.nio.ByteBuffer: int remaining()>();

        if $i3 < 4 goto label5;

        $i5 = virtualinvoke r0.<java.nio.ByteBuffer: int getInt()>();

        if $i5 == 3 goto label4;

     label3:
        goto label1;

     label4:
        $r11 = new java.lang.SecurityException;

        specialinvoke $r11.<java.lang.SecurityException: void <init>(java.lang.String)>("V2 signature indicates APK is signed using APK Signature Scheme v3, but none was found. Signature stripped?");

        throw $r11;

     label5:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("V2 Signature Scheme Stripping Protection Attribute  value too small.  Expected 4 bytes, but found ");

        $i4 = virtualinvoke r0.<java.nio.ByteBuffer: int remaining()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r9 = new java.io.IOException;

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw $r9;

     label6:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Remaining buffer too short to contain additional attribute ID. Remaining: ");

        $i1 = virtualinvoke r0.<java.nio.ByteBuffer: int remaining()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r4 = new java.io.IOException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label7:
        return;
    }

    private static java.security.cert.X509Certificate[] verifySigner(java.nio.ByteBuffer, java.util.Map, java.security.cert.CertificateFactory) throws java.lang.SecurityException, java.io.IOException
    {
        java.security.cert.CertificateFactory r0;
        java.nio.ByteBuffer r1, $r23, r67, r69, r72, r85, r89, r95;
        byte[] r2, $r21, r71, r87, r93, r98;
        int i0, $i1, $i2, $i3, i4, i5, i6, i7, i8, i9, i10, i11;
        boolean z0, $z1, $z2, $z3, $z4, $z6, $z9, $z10, $z11;
        java.util.ArrayList $r3, $r12, $r16;
        java.lang.Object $r4, $r5, $r15, $r18;
        java.lang.StringBuilder $r6, $r29, $r40, $r46, $r53, $r61;
        java.lang.SecurityException $r9, $r13, $r17, $r22, $r33, $r36, $r37, $r43, $r50, $r64, r73;
        java.lang.String $r10, $r30, $r34, $r44, $r51, $r57, $r65, r76, r78;
        java.lang.Integer $r14, $r35, $r38;
        java.security.cert.X509Certificate $r19, r100;
        java.security.PublicKey $r20, r82;
        java.security.cert.X509Certificate[] $r24, $r26;
        java.lang.Object[] $r25;
        java.security.cert.Certificate $r27;
        android.util.apk.VerbatimX509Certificate $r28;
        java.lang.Throwable $r39, $r45, $r52, $r58, $r59, $r60, $r66, r84, r90, r101;
        java.io.IOException $r56, r91;
        java.util.Map r68;
        android.util.Pair r77;
        java.security.spec.AlgorithmParameterSpec r79;
        java.security.KeyFactory r80;
        java.security.spec.X509EncodedKeySpec r81;
        java.security.Signature r83;
        java.io.ByteArrayInputStream r99;

        r67 := @parameter0: java.nio.ByteBuffer;

        r68 := @parameter1: java.util.Map;

        r0 := @parameter2: java.security.cert.CertificateFactory;

        r1 = staticinvoke <android.util.apk.ApkSigningBlockUtils: java.nio.ByteBuffer getLengthPrefixedSlice(java.nio.ByteBuffer)>(r67);

        r69 = staticinvoke <android.util.apk.ApkSigningBlockUtils: java.nio.ByteBuffer getLengthPrefixedSlice(java.nio.ByteBuffer)>(r67);

        r2 = staticinvoke <android.util.apk.ApkSigningBlockUtils: byte[] readLengthPrefixedByteArray(java.nio.ByteBuffer)>(r67);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r71 = null;

        i4 = -1;

        i5 = 0;

     label01:
        $z10 = virtualinvoke r69.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z10 == 0 goto label11;

        i5 = i5 + 1;

     label02:
        r72 = staticinvoke <android.util.apk.ApkSigningBlockUtils: java.nio.ByteBuffer getLengthPrefixedSlice(java.nio.ByteBuffer)>(r69);

        $i2 = virtualinvoke r72.<java.nio.ByteBuffer: int remaining()>();

        if $i2 < 8 goto label09;

        i0 = virtualinvoke r72.<java.nio.ByteBuffer: int getInt()>();

        $r38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r38);

        $z9 = staticinvoke <android.util.apk.ApkSigningBlockUtils: boolean isSupportedSignatureAlgorithm(int)>(i0);

        if $z9 != 0 goto label04;

     label03:
        goto label01;

     label04:
        if i4 == -1 goto label06;

        i6 = i4;

     label05:
        $i3 = staticinvoke <android.util.apk.ApkSigningBlockUtils: int compareSignatureAlgorithm(int,int)>(i0, i4);

        if $i3 <= 0 goto label08;

     label06:
        i6 = i0;

     label07:
        r71 = staticinvoke <android.util.apk.ApkSigningBlockUtils: byte[] readLengthPrefixedByteArray(java.nio.ByteBuffer)>(r72);

     label08:
        i4 = i6;

        goto label01;

     label09:
        r73 = new java.lang.SecurityException;

        specialinvoke r73.<java.lang.SecurityException: void <init>(java.lang.String)>("Signature record too short");

        throw r73;

     label10:
        $r39 := @caughtexception;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to parse signature record #");

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r43 = new java.lang.SecurityException;

        $r44 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r43.<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>($r44, $r39);

        throw $r43;

     label11:
        if i4 != -1 goto label13;

        if i5 != 0 goto label12;

        $r37 = new java.lang.SecurityException;

        specialinvoke $r37.<java.lang.SecurityException: void <init>(java.lang.String)>("No signatures found");

        throw $r37;

     label12:
        $r36 = new java.lang.SecurityException;

        specialinvoke $r36.<java.lang.SecurityException: void <init>(java.lang.String)>("No supported signatures found");

        throw $r36;

     label13:
        r76 = staticinvoke <android.util.apk.ApkSigningBlockUtils: java.lang.String getSignatureAlgorithmJcaKeyAlgorithm(int)>(i4);

        r77 = staticinvoke <android.util.apk.ApkSigningBlockUtils: android.util.Pair getSignatureAlgorithmJcaSignatureAlgorithm(int)>(i4);

        $r4 = r77.<android.util.Pair: java.lang.Object first>;

        r78 = (java.lang.String) $r4;

        $r5 = r77.<android.util.Pair: java.lang.Object second>;

        r79 = (java.security.spec.AlgorithmParameterSpec) $r5;

     label14:
        r80 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(r76);

        r81 = new java.security.spec.X509EncodedKeySpec;

        specialinvoke r81.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>(r2);

        r82 = virtualinvoke r80.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>(r81);

        r83 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(r78);

        virtualinvoke r83.<java.security.Signature: void initVerify(java.security.PublicKey)>(r82);

     label15:
        if r79 == null goto label19;

     label16:
        virtualinvoke r83.<java.security.Signature: void setParameter(java.security.spec.AlgorithmParameterSpec)>(r79);

     label17:
        goto label19;

     label18:
        $r45 := @caughtexception;

        r84 = $r45;

        goto label48;

     label19:
        virtualinvoke r83.<java.security.Signature: void update(java.nio.ByteBuffer)>(r1);

        z0 = virtualinvoke r83.<java.security.Signature: boolean verify(byte[])>(r71);

     label20:
        if z0 == 0 goto label46;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

        r85 = staticinvoke <android.util.apk.ApkSigningBlockUtils: java.nio.ByteBuffer getLengthPrefixedSlice(java.nio.ByteBuffer)>(r1);

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        i7 = 0;

        r87 = null;

     label21:
        $z1 = virtualinvoke r85.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z1 == 0 goto label32;

        i7 = i7 + 1;

     label22:
        r89 = staticinvoke <android.util.apk.ApkSigningBlockUtils: java.nio.ByteBuffer getLengthPrefixedSlice(java.nio.ByteBuffer)>(r85);

        i8 = virtualinvoke r89.<java.nio.ByteBuffer: int remaining()>();

     label23:
        if i8 < 8 goto label29;

     label24:
        i9 = virtualinvoke r89.<java.nio.ByteBuffer: int getInt()>();

        $r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i9);

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r35);

     label25:
        if i9 != i4 goto label27;

     label26:
        r87 = staticinvoke <android.util.apk.ApkSigningBlockUtils: byte[] readLengthPrefixedByteArray(java.nio.ByteBuffer)>(r89);

     label27:
        goto label21;

     label28:
        $r52 := @caughtexception;

        r90 = $r52;

        goto label31;

     label29:
        r91 = new java.io.IOException;

        specialinvoke r91.<java.io.IOException: void <init>(java.lang.String)>("Record too short");

        throw r91;

     label30:
        $r58 := @caughtexception;

        r90 = $r58;

     label31:
        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to parse digest record #");

        virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r56 = new java.io.IOException;

        $r57 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r56.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>($r57, r90);

        throw $r56;

     label32:
        $z2 = interfaceinvoke $r3.<java.util.List: boolean equals(java.lang.Object)>($r12);

        if $z2 == 0 goto label45;

        i10 = staticinvoke <android.util.apk.ApkSigningBlockUtils: int getSignatureAlgorithmContentDigestAlgorithm(int)>(i4);

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i10);

        $r15 = interfaceinvoke r68.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, r87);

        r93 = (byte[]) $r15;

        if r93 == null goto label34;

        $z6 = staticinvoke <java.security.MessageDigest: boolean isEqual(byte[],byte[])>(r93, r87);

        if $z6 == 0 goto label33;

        goto label34;

     label33:
        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = staticinvoke <android.util.apk.ApkSigningBlockUtils: java.lang.String getContentDigestAlgorithmJcaDigestAlgorithm(int)>(i10);

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" contents digest does not match the digest specified by a preceding signer");

        $r33 = new java.lang.SecurityException;

        $r34 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<java.lang.SecurityException: void <init>(java.lang.String)>($r34);

        throw $r33;

     label34:
        r95 = staticinvoke <android.util.apk.ApkSigningBlockUtils: java.nio.ByteBuffer getLengthPrefixedSlice(java.nio.ByteBuffer)>(r1);

        $r16 = new java.util.ArrayList;

        specialinvoke $r16.<java.util.ArrayList: void <init>()>();

        i11 = 0;

     label35:
        $z11 = virtualinvoke r95.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z11 == 0 goto label42;

        i11 = i11 + 1;

        r98 = staticinvoke <android.util.apk.ApkSigningBlockUtils: byte[] readLengthPrefixedByteArray(java.nio.ByteBuffer)>(r95);

     label36:
        r99 = new java.io.ByteArrayInputStream;

        specialinvoke r99.<java.io.ByteArrayInputStream: void <init>(byte[])>(r98);

     label37:
        $r27 = virtualinvoke r0.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>(r99);

        r100 = (java.security.cert.X509Certificate) $r27;

     label38:
        $r28 = new android.util.apk.VerbatimX509Certificate;

        specialinvoke $r28.<android.util.apk.VerbatimX509Certificate: void <init>(java.security.cert.X509Certificate,byte[])>(r100, r98);

        interfaceinvoke $r16.<java.util.List: boolean add(java.lang.Object)>($r28);

        goto label35;

     label39:
        $r60 := @caughtexception;

        r101 = $r60;

        goto label41;

     label40:
        $r66 := @caughtexception;

        r101 = $r66;

     label41:
        $r61 = new java.lang.StringBuilder;

        specialinvoke $r61.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to decode certificate #");

        virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);

        $r64 = new java.lang.SecurityException;

        $r65 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r64.<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>($r65, r101);

        throw $r64;

     label42:
        $z3 = interfaceinvoke $r16.<java.util.List: boolean isEmpty()>();

        if $z3 != 0 goto label44;

        $r18 = interfaceinvoke $r16.<java.util.List: java.lang.Object get(int)>(0);

        $r19 = (java.security.cert.X509Certificate) $r18;

        $r20 = virtualinvoke $r19.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();

        $r21 = interfaceinvoke $r20.<java.security.PublicKey: byte[] getEncoded()>();

        $z4 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r2, $r21);

        if $z4 == 0 goto label43;

        $r23 = staticinvoke <android.util.apk.ApkSigningBlockUtils: java.nio.ByteBuffer getLengthPrefixedSlice(java.nio.ByteBuffer)>(r1);

        staticinvoke <android.util.apk.ApkSignatureSchemeV2Verifier: void verifyAdditionalAttributes(java.nio.ByteBuffer)>($r23);

        $i1 = interfaceinvoke $r16.<java.util.List: int size()>();

        $r24 = newarray (java.security.cert.X509Certificate)[$i1];

        $r25 = interfaceinvoke $r16.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r24);

        $r26 = (java.security.cert.X509Certificate[]) $r25;

        return $r26;

     label43:
        $r22 = new java.lang.SecurityException;

        specialinvoke $r22.<java.lang.SecurityException: void <init>(java.lang.String)>("Public key mismatch between certificate and signature record");

        throw $r22;

     label44:
        $r17 = new java.lang.SecurityException;

        specialinvoke $r17.<java.lang.SecurityException: void <init>(java.lang.String)>("No certificates listed");

        throw $r17;

     label45:
        $r13 = new java.lang.SecurityException;

        specialinvoke $r13.<java.lang.SecurityException: void <init>(java.lang.String)>("Signature algorithms don\'t match between digests and signatures records");

        throw $r13;

     label46:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r78);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" signature did not verify");

        $r9 = new java.lang.SecurityException;

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.SecurityException: void <init>(java.lang.String)>($r10);

        throw $r9;

     label47:
        $r59 := @caughtexception;

        r84 = $r59;

     label48:
        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to verify ");

        virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r78);

        virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" signature");

        $r50 = new java.lang.SecurityException;

        $r51 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r50.<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>($r51, r84);

        throw $r50;

        catch java.io.IOException from label02 to label03 with label10;
        catch java.nio.BufferUnderflowException from label02 to label03 with label10;
        catch java.io.IOException from label05 to label06 with label10;
        catch java.nio.BufferUnderflowException from label05 to label06 with label10;
        catch java.io.IOException from label07 to label08 with label10;
        catch java.nio.BufferUnderflowException from label07 to label08 with label10;
        catch java.io.IOException from label09 to label10 with label10;
        catch java.nio.BufferUnderflowException from label09 to label10 with label10;
        catch java.security.NoSuchAlgorithmException from label14 to label15 with label47;
        catch java.security.spec.InvalidKeySpecException from label14 to label15 with label47;
        catch java.security.InvalidKeyException from label14 to label15 with label47;
        catch java.security.InvalidAlgorithmParameterException from label14 to label15 with label47;
        catch java.security.SignatureException from label14 to label15 with label47;
        catch java.security.NoSuchAlgorithmException from label16 to label17 with label18;
        catch java.security.spec.InvalidKeySpecException from label16 to label17 with label18;
        catch java.security.InvalidKeyException from label16 to label17 with label18;
        catch java.security.InvalidAlgorithmParameterException from label16 to label17 with label18;
        catch java.security.SignatureException from label16 to label17 with label18;
        catch java.security.NoSuchAlgorithmException from label19 to label20 with label47;
        catch java.security.spec.InvalidKeySpecException from label19 to label20 with label47;
        catch java.security.InvalidKeyException from label19 to label20 with label47;
        catch java.security.InvalidAlgorithmParameterException from label19 to label20 with label47;
        catch java.security.SignatureException from label19 to label20 with label47;
        catch java.io.IOException from label22 to label23 with label30;
        catch java.nio.BufferUnderflowException from label22 to label23 with label30;
        catch java.io.IOException from label24 to label25 with label28;
        catch java.nio.BufferUnderflowException from label24 to label25 with label28;
        catch java.io.IOException from label26 to label27 with label28;
        catch java.nio.BufferUnderflowException from label26 to label27 with label28;
        catch java.io.IOException from label29 to label30 with label28;
        catch java.nio.BufferUnderflowException from label29 to label30 with label28;
        catch java.security.cert.CertificateException from label36 to label37 with label40;
        catch java.security.cert.CertificateException from label37 to label38 with label39;
    }

    public static void <clinit>()
    {
        <android.util.apk.ApkSignatureSchemeV2Verifier: int STRIPPING_PROTECTION_ATTR_ID> = -1091571699;

        <android.util.apk.ApkSignatureSchemeV2Verifier: int SF_ATTRIBUTE_ANDROID_APK_SIGNED_ID> = 2;

        <android.util.apk.ApkSignatureSchemeV2Verifier: int APK_SIGNATURE_SCHEME_V2_BLOCK_ID> = 1896449818;

        return;
    }
}
