public class android.util.apk.ApkSignatureSchemeV3Verifier extends java.lang.Object
{
    private static final int APK_SIGNATURE_SCHEME_V3_BLOCK_ID;
    private static final int PROOF_OF_ROTATION_ATTR_ID;
    public static final int SF_ATTRIBUTE_ANDROID_APK_SIGNED_ID;

    public void <init>()
    {
        android.util.apk.ApkSignatureSchemeV3Verifier r0;

        r0 := @this: android.util.apk.ApkSignatureSchemeV3Verifier;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static android.util.apk.SignatureInfo findSignature(java.io.RandomAccessFile) throws java.io.IOException, android.util.apk.SignatureNotFoundException
    {
        java.io.RandomAccessFile r0;
        android.util.apk.SignatureInfo $r1;

        r0 := @parameter0: java.io.RandomAccessFile;

        $r1 = staticinvoke <android.util.apk.ApkSigningBlockUtils: android.util.apk.SignatureInfo findSignature(java.io.RandomAccessFile,int)>(r0, -262969152);

        return $r1;
    }

    static byte[] generateApkVerity(java.lang.String, android.util.apk.ByteBufferFactory) throws java.io.IOException, android.util.apk.SignatureNotFoundException, java.lang.SecurityException, java.security.DigestException, java.security.NoSuchAlgorithmException
    {
        java.io.RandomAccessFile $r1;
        android.util.apk.SignatureInfo $r2;
        java.lang.Throwable $r3, $r4;
        java.lang.String r5;
        android.util.apk.ByteBufferFactory r6;
        byte[] r7;

        r5 := @parameter0: java.lang.String;

        r6 := @parameter1: android.util.apk.ByteBufferFactory;

        $r1 = new java.io.RandomAccessFile;

        specialinvoke $r1.<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>(r5, "r");

     label1:
        $r2 = staticinvoke <android.util.apk.ApkSignatureSchemeV3Verifier: android.util.apk.SignatureInfo findSignature(java.io.RandomAccessFile)>($r1);

        r7 = staticinvoke <android.util.apk.VerityBuilder: byte[] generateApkVerity(java.lang.String,android.util.apk.ByteBufferFactory,android.util.apk.SignatureInfo)>(r5, r6, $r2);

     label2:
        virtualinvoke $r1.<java.io.RandomAccessFile: void close()>();

        return r7;

     label3:
        $r4 := @caughtexception;

     label4:
        virtualinvoke $r1.<java.io.RandomAccessFile: void close()>();

     label5:
        goto label7;

     label6:
        $r3 := @caughtexception;

        virtualinvoke $r4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r3);

     label7:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    static byte[] generateApkVerityRootHash(java.lang.String) throws java.security.NoSuchAlgorithmException, java.security.DigestException, java.io.IOException, android.util.apk.SignatureNotFoundException
    {
        android.util.apk.ApkSignatureSchemeV3Verifier$VerifiedSigner r0;
        byte[] r1, $r3, r10;
        java.io.RandomAccessFile $r2;
        java.nio.ByteBuffer $r4;
        java.lang.Throwable $r5, $r6;
        java.lang.String r7;
        android.util.apk.SignatureInfo r9;

        r7 := @parameter0: java.lang.String;

        $r2 = new java.io.RandomAccessFile;

        specialinvoke $r2.<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>(r7, "r");

     label1:
        r9 = staticinvoke <android.util.apk.ApkSignatureSchemeV3Verifier: android.util.apk.SignatureInfo findSignature(java.io.RandomAccessFile)>($r2);

        r0 = staticinvoke <android.util.apk.ApkSignatureSchemeV3Verifier: android.util.apk.ApkSignatureSchemeV3Verifier$VerifiedSigner verify(java.io.RandomAccessFile,boolean)>($r2, 0);

        r1 = r0.<android.util.apk.ApkSignatureSchemeV3Verifier$VerifiedSigner: byte[] verityRootHash>;

     label2:
        if r1 != null goto label3;

        virtualinvoke $r2.<java.io.RandomAccessFile: void close()>();

        return null;

     label3:
        $r3 = r0.<android.util.apk.ApkSignatureSchemeV3Verifier$VerifiedSigner: byte[] verityRootHash>;

        $r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r3);

        r10 = staticinvoke <android.util.apk.VerityBuilder: byte[] generateApkVerityRootHash(java.io.RandomAccessFile,java.nio.ByteBuffer,android.util.apk.SignatureInfo)>($r2, $r4, r9);

     label4:
        virtualinvoke $r2.<java.io.RandomAccessFile: void close()>();

        return r10;

     label5:
        $r6 := @caughtexception;

     label6:
        virtualinvoke $r2.<java.io.RandomAccessFile: void close()>();

     label7:
        goto label9;

     label8:
        $r5 := @caughtexception;

        virtualinvoke $r6.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r5);

     label9:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    static byte[] getVerityRootHash(java.lang.String) throws java.io.IOException, android.util.apk.SignatureNotFoundException, java.lang.SecurityException
    {
        java.io.RandomAccessFile $r0;
        android.util.apk.ApkSignatureSchemeV3Verifier$VerifiedSigner $r2;
        java.lang.Throwable $r3, $r4;
        java.lang.String r5;
        byte[] r7;

        r5 := @parameter0: java.lang.String;

        $r0 = new java.io.RandomAccessFile;

        specialinvoke $r0.<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>(r5, "r");

     label1:
        staticinvoke <android.util.apk.ApkSignatureSchemeV3Verifier: android.util.apk.SignatureInfo findSignature(java.io.RandomAccessFile)>($r0);

        $r2 = staticinvoke <android.util.apk.ApkSignatureSchemeV3Verifier: android.util.apk.ApkSignatureSchemeV3Verifier$VerifiedSigner verify(java.io.RandomAccessFile,boolean)>($r0, 0);

        r7 = $r2.<android.util.apk.ApkSignatureSchemeV3Verifier$VerifiedSigner: byte[] verityRootHash>;

     label2:
        virtualinvoke $r0.<java.io.RandomAccessFile: void close()>();

        return r7;

     label3:
        $r4 := @caughtexception;

     label4:
        virtualinvoke $r0.<java.io.RandomAccessFile: void close()>();

     label5:
        goto label7;

     label6:
        $r3 := @caughtexception;

        virtualinvoke $r4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r3);

     label7:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public static boolean hasSignature(java.lang.String) throws java.io.IOException
    {
        java.lang.Throwable $r1, $r2;
        android.util.apk.SignatureNotFoundException $r3;
        java.lang.String r4;
        java.io.RandomAccessFile r5;

        r4 := @parameter0: java.lang.String;

     label01:
        r5 = new java.io.RandomAccessFile;

        specialinvoke r5.<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>(r4, "r");

     label02:
        staticinvoke <android.util.apk.ApkSignatureSchemeV3Verifier: android.util.apk.SignatureInfo findSignature(java.io.RandomAccessFile)>(r5);

     label03:
        virtualinvoke r5.<java.io.RandomAccessFile: void close()>();

     label04:
        return 1;

     label05:
        $r2 := @caughtexception;

     label06:
        virtualinvoke r5.<java.io.RandomAccessFile: void close()>();

     label07:
        goto label10;

     label08:
        $r1 := @caughtexception;

     label09:
        virtualinvoke $r2.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r1);

     label10:
        throw $r2;

     label11:
        $r3 := @caughtexception;

        return 0;

        catch android.util.apk.SignatureNotFoundException from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch android.util.apk.SignatureNotFoundException from label03 to label04 with label11;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch android.util.apk.SignatureNotFoundException from label09 to label10 with label11;
        catch android.util.apk.SignatureNotFoundException from label10 to label11 with label11;
    }

    public static android.util.apk.ApkSignatureSchemeV3Verifier$VerifiedSigner unsafeGetCertsWithoutVerification(java.lang.String) throws android.util.apk.SignatureNotFoundException, java.lang.SecurityException, java.io.IOException
    {
        java.lang.String r0;
        android.util.apk.ApkSignatureSchemeV3Verifier$VerifiedSigner $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <android.util.apk.ApkSignatureSchemeV3Verifier: android.util.apk.ApkSignatureSchemeV3Verifier$VerifiedSigner verify(java.lang.String,boolean)>(r0, 0);

        return $r1;
    }

    private static android.util.apk.ApkSignatureSchemeV3Verifier$VerifiedSigner verify(java.io.RandomAccessFile, android.util.apk.SignatureInfo, boolean) throws java.lang.SecurityException, java.io.IOException
    {
        boolean z0, $z1, $z2, $z3;
        java.security.cert.CertificateFactory r1;
        java.nio.ByteBuffer r2, $r4, $r13;
        android.util.ArrayMap $r3;
        java.lang.SecurityException $r5, $r6, $r7, $r21, $r24;
        java.lang.Integer $r8, $r10;
        byte[] $r9, $r12, r33;
        java.lang.Object $r11;
        long $l0;
        java.lang.Throwable $r14, $r16, $r23;
        java.lang.RuntimeException $r15;
        java.lang.StringBuilder $r17;
        java.lang.String $r22;
        android.util.apk.ApkSignatureSchemeV3Verifier$PlatformNotSupportedException $r25;
        java.io.RandomAccessFile r26;
        android.util.apk.SignatureInfo r27;
        int i1;
        android.util.apk.ApkSignatureSchemeV3Verifier$VerifiedSigner r28, r29;

        r26 := @parameter0: java.io.RandomAccessFile;

        r27 := @parameter1: android.util.apk.SignatureInfo;

        z0 := @parameter2: boolean;

        i1 = 0;

        $r3 = new android.util.ArrayMap;

        specialinvoke $r3.<android.util.ArrayMap: void <init>()>();

        r28 = null;

     label01:
        r1 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");

     label02:
        $r4 = r27.<android.util.apk.SignatureInfo: java.nio.ByteBuffer signatureBlock>;

        r2 = staticinvoke <android.util.apk.ApkSigningBlockUtils: java.nio.ByteBuffer getLengthPrefixedSlice(java.nio.ByteBuffer)>($r4);

     label03:
        $z3 = virtualinvoke r2.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z3 == 0 goto label08;

     label04:
        $r13 = staticinvoke <android.util.apk.ApkSigningBlockUtils: java.nio.ByteBuffer getLengthPrefixedSlice(java.nio.ByteBuffer)>(r2);

        r29 = staticinvoke <android.util.apk.ApkSignatureSchemeV3Verifier: android.util.apk.ApkSignatureSchemeV3Verifier$VerifiedSigner verifySigner(java.nio.ByteBuffer,java.util.Map,java.security.cert.CertificateFactory)>($r13, $r3, r1);

     label05:
        r28 = r29;

        i1 = i1 + 1;

        goto label03;

     label06:
        $r16 := @caughtexception;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to parse/verify signer #");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" block");

        $r21 = new java.lang.SecurityException;

        $r22 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>($r22, $r16);

        throw $r21;

     label07:
        $r25 := @caughtexception;

        goto label03;

     label08:
        if i1 < 1 goto label13;

        if r28 == null goto label13;

        if i1 != 1 goto label12;

        $z1 = interfaceinvoke $r3.<java.util.Map: boolean isEmpty()>();

        if $z1 != 0 goto label11;

        if z0 == 0 goto label09;

        staticinvoke <android.util.apk.ApkSigningBlockUtils: void verifyIntegrity(java.util.Map,java.io.RandomAccessFile,android.util.apk.SignatureInfo)>($r3, r26, r27);

     label09:
        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $z2 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r8);

        if $z2 == 0 goto label10;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r11 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

        r33 = (byte[]) $r11;

        $l0 = virtualinvoke r26.<java.io.RandomAccessFile: long length()>();

        $r12 = staticinvoke <android.util.apk.ApkSigningBlockUtils: byte[] parseVerityDigestAndVerifySourceLength(byte[],long,android.util.apk.SignatureInfo)>(r33, $l0, r27);

        r28.<android.util.apk.ApkSignatureSchemeV3Verifier$VerifiedSigner: byte[] verityRootHash> = $r12;

     label10:
        $r9 = staticinvoke <android.util.apk.ApkSigningBlockUtils: byte[] pickBestDigestForV4(java.util.Map)>($r3);

        r28.<android.util.apk.ApkSignatureSchemeV3Verifier$VerifiedSigner: byte[] digest> = $r9;

        return r28;

     label11:
        $r7 = new java.lang.SecurityException;

        specialinvoke $r7.<java.lang.SecurityException: void <init>(java.lang.String)>("No content digests found");

        throw $r7;

     label12:
        $r6 = new java.lang.SecurityException;

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>("APK Signature Scheme V3 only supports one signer: multiple signers found.");

        throw $r6;

     label13:
        $r5 = new java.lang.SecurityException;

        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>("No signers found");

        throw $r5;

     label14:
        $r23 := @caughtexception;

        $r24 = new java.lang.SecurityException;

        specialinvoke $r24.<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to read list of signers", $r23);

        throw $r24;

     label15:
        $r14 := @caughtexception;

        $r15 = new java.lang.RuntimeException;

        specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to obtain X.509 CertificateFactory", $r14);

        throw $r15;

        catch java.security.cert.CertificateException from label01 to label02 with label15;
        catch java.io.IOException from label02 to label03 with label14;
        catch android.util.apk.ApkSignatureSchemeV3Verifier$PlatformNotSupportedException from label04 to label05 with label07;
        catch java.io.IOException from label04 to label05 with label06;
        catch java.nio.BufferUnderflowException from label04 to label05 with label06;
        catch java.lang.SecurityException from label04 to label05 with label06;
    }

    private static android.util.apk.ApkSignatureSchemeV3Verifier$VerifiedSigner verify(java.io.RandomAccessFile, boolean) throws android.util.apk.SignatureNotFoundException, java.lang.SecurityException, java.io.IOException
    {
        java.io.RandomAccessFile r0;
        boolean z0;
        android.util.apk.SignatureInfo $r1;
        android.util.apk.ApkSignatureSchemeV3Verifier$VerifiedSigner $r2;

        r0 := @parameter0: java.io.RandomAccessFile;

        z0 := @parameter1: boolean;

        $r1 = staticinvoke <android.util.apk.ApkSignatureSchemeV3Verifier: android.util.apk.SignatureInfo findSignature(java.io.RandomAccessFile)>(r0);

        $r2 = staticinvoke <android.util.apk.ApkSignatureSchemeV3Verifier: android.util.apk.ApkSignatureSchemeV3Verifier$VerifiedSigner verify(java.io.RandomAccessFile,android.util.apk.SignatureInfo,boolean)>(r0, $r1, z0);

        return $r2;
    }

    public static android.util.apk.ApkSignatureSchemeV3Verifier$VerifiedSigner verify(java.lang.String) throws android.util.apk.SignatureNotFoundException, java.lang.SecurityException, java.io.IOException
    {
        java.lang.String r0;
        android.util.apk.ApkSignatureSchemeV3Verifier$VerifiedSigner $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <android.util.apk.ApkSignatureSchemeV3Verifier: android.util.apk.ApkSignatureSchemeV3Verifier$VerifiedSigner verify(java.lang.String,boolean)>(r0, 1);

        return $r1;
    }

    private static android.util.apk.ApkSignatureSchemeV3Verifier$VerifiedSigner verify(java.lang.String, boolean) throws android.util.apk.SignatureNotFoundException, java.lang.SecurityException, java.io.IOException
    {
        boolean z0;
        java.io.RandomAccessFile $r0;
        java.lang.Throwable $r1, $r2;
        java.lang.String r3;
        android.util.apk.ApkSignatureSchemeV3Verifier$VerifiedSigner r5;

        r3 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r0 = new java.io.RandomAccessFile;

        specialinvoke $r0.<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>(r3, "r");

     label1:
        r5 = staticinvoke <android.util.apk.ApkSignatureSchemeV3Verifier: android.util.apk.ApkSignatureSchemeV3Verifier$VerifiedSigner verify(java.io.RandomAccessFile,boolean)>($r0, z0);

     label2:
        virtualinvoke $r0.<java.io.RandomAccessFile: void close()>();

        return r5;

     label3:
        $r1 := @caughtexception;

     label4:
        virtualinvoke $r0.<java.io.RandomAccessFile: void close()>();

     label5:
        goto label7;

     label6:
        $r2 := @caughtexception;

        virtualinvoke $r1.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r2);

     label7:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    private static android.util.apk.ApkSignatureSchemeV3Verifier$VerifiedSigner verifyAdditionalAttributes(java.nio.ByteBuffer, java.util.List, java.security.cert.CertificateFactory) throws java.io.IOException
    {
        java.security.cert.CertificateFactory r0;
        java.security.cert.X509Certificate[] r1, $r3;
        java.nio.ByteBuffer r2, r22;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.Object[] $r4;
        boolean $z0, $z1;
        android.util.apk.ApkSignatureSchemeV3Verifier$VerifiedSigner $r5;
        java.lang.StringBuilder $r6;
        java.io.IOException $r9;
        java.lang.String $r10;
        java.lang.SecurityException $r11, $r21, r25;
        java.util.List $r12, $r13, $r14, r23;
        java.lang.Object $r15;
        java.security.cert.X509Certificate $r16, $r18;
        byte[] $r17, $r19;
        java.lang.Throwable $r20;
        android.util.apk.ApkSignatureSchemeV3Verifier$VerifiedProofOfRotation r24;

        r22 := @parameter0: java.nio.ByteBuffer;

        r23 := @parameter1: java.util.List;

        r0 := @parameter2: java.security.cert.CertificateFactory;

        $i0 = interfaceinvoke r23.<java.util.List: int size()>();

        $r3 = newarray (java.security.cert.X509Certificate)[$i0];

        $r4 = interfaceinvoke r23.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        r1 = (java.security.cert.X509Certificate[]) $r4;

        r24 = null;

     label01:
        $z0 = virtualinvoke r22.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 == 0 goto label10;

        r2 = staticinvoke <android.util.apk.ApkSigningBlockUtils: java.nio.ByteBuffer getLengthPrefixedSlice(java.nio.ByteBuffer)>(r22);

        $i1 = virtualinvoke r2.<java.nio.ByteBuffer: int remaining()>();

        if $i1 < 4 goto label09;

        $i3 = virtualinvoke r2.<java.nio.ByteBuffer: int getInt()>();

        if $i3 == 1000370060 goto label02;

        goto label06;

     label02:
        if r24 != null goto label08;

        r24 = staticinvoke <android.util.apk.ApkSignatureSchemeV3Verifier: android.util.apk.ApkSignatureSchemeV3Verifier$VerifiedProofOfRotation verifyProofOfRotationStruct(java.nio.ByteBuffer,java.security.cert.CertificateFactory)>(r2, r0);

     label03:
        $r12 = r24.<android.util.apk.ApkSignatureSchemeV3Verifier$VerifiedProofOfRotation: java.util.List certs>;

        $i4 = interfaceinvoke $r12.<java.util.List: int size()>();

        if $i4 <= 0 goto label06;

        $r14 = r24.<android.util.apk.ApkSignatureSchemeV3Verifier$VerifiedProofOfRotation: java.util.List certs>;

        $r13 = r24.<android.util.apk.ApkSignatureSchemeV3Verifier$VerifiedProofOfRotation: java.util.List certs>;

        $i5 = interfaceinvoke $r13.<java.util.List: int size()>();

        $i6 = $i5 - 1;

        $r15 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>($i6);

        $r16 = (java.security.cert.X509Certificate) $r15;

        $r17 = virtualinvoke $r16.<java.security.cert.X509Certificate: byte[] getEncoded()>();

        $r18 = r1[0];

        $r19 = virtualinvoke $r18.<java.security.cert.X509Certificate: byte[] getEncoded()>();

        $z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r17, $r19);

        if $z1 == 0 goto label05;

     label04:
        goto label06;

     label05:
        r25 = new java.lang.SecurityException;

        specialinvoke r25.<java.lang.SecurityException: void <init>(java.lang.String)>("Terminal certificate in Proof-of-rotation record does not match APK signing certificate");

        throw r25;

     label06:
        goto label01;

     label07:
        $r20 := @caughtexception;

        $r21 = new java.lang.SecurityException;

        specialinvoke $r21.<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to encode certificate when comparing Proof-of-rotation record and signing certificate", $r20);

        throw $r21;

     label08:
        $r11 = new java.lang.SecurityException;

        specialinvoke $r11.<java.lang.SecurityException: void <init>(java.lang.String)>("Encountered multiple Proof-of-rotation records when verifying APK Signature Scheme v3 signature");

        throw $r11;

     label09:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Remaining buffer too short to contain additional attribute ID. Remaining: ");

        $i2 = virtualinvoke r2.<java.nio.ByteBuffer: int remaining()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r9 = new java.io.IOException;

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw $r9;

     label10:
        $r5 = new android.util.apk.ApkSignatureSchemeV3Verifier$VerifiedSigner;

        specialinvoke $r5.<android.util.apk.ApkSignatureSchemeV3Verifier$VerifiedSigner: void <init>(java.security.cert.X509Certificate[],android.util.apk.ApkSignatureSchemeV3Verifier$VerifiedProofOfRotation)>(r1, r24);

        return $r5;

        catch java.security.cert.CertificateEncodingException from label03 to label04 with label07;
        catch java.security.cert.CertificateEncodingException from label05 to label06 with label07;
    }

    private static android.util.apk.ApkSignatureSchemeV3Verifier$VerifiedProofOfRotation verifyProofOfRotationStruct(java.nio.ByteBuffer, java.security.cert.CertificateFactory) throws java.lang.SecurityException, java.io.IOException
    {
        java.util.HashSet r2;
        byte[] r3, r60;
        java.security.PublicKey r4;
        java.security.Signature r5;
        int i0, i4, i5, i6, i7, i8, i9;
        java.util.ArrayList $r6, $r7;
        boolean $z0, $z1, $z5;
        android.util.apk.ApkSignatureSchemeV3Verifier$VerifiedProofOfRotation $r8;
        java.security.cert.Certificate $r10;
        java.lang.String $r14, $r19, $r21, $r27, $r30, $r41, $r48;
        java.lang.Integer $r15;
        java.lang.Object $r20, $r22, $r26, $r31;
        java.security.spec.AlgorithmParameterSpec $r32;
        java.lang.Throwable $r33, $r35, $r42, $r49, $r50, $r51, r67, r68, r69;
        java.io.IOException $r34;
        java.lang.StringBuilder $r36, $r43, r59, r62, r66;
        java.lang.SecurityException $r40, $r47, r58, r61, r65;
        java.nio.ByteBuffer r52, r55, r56;
        java.security.cert.CertificateFactory r53;
        android.util.apk.VerbatimX509Certificate r54;
        android.util.Pair r57;
        java.io.ByteArrayInputStream r63;
        java.security.cert.X509Certificate r64;

        r52 := @parameter0: java.nio.ByteBuffer;

        r53 := @parameter1: java.security.cert.CertificateFactory;

        i4 = 0;

        i5 = -1;

        r54 = null;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        i6 = 0;

        i7 = 0;

     label01:
        virtualinvoke r52.<java.nio.ByteBuffer: int getInt()>();

     label02:
        i6 = 0;

        i7 = 0;

     label03:
        r2 = new java.util.HashSet;

     label04:
        i6 = 0;

        i7 = 0;

     label05:
        specialinvoke r2.<java.util.HashSet: void <init>()>();

     label06:
        i6 = i4;

        i7 = i4;

     label07:
        $z0 = virtualinvoke r52.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 == 0 goto label90;

     label08:
        i4 = i4 + 1;

        i6 = i4;

        i7 = i4;

     label09:
        r55 = staticinvoke <android.util.apk.ApkSigningBlockUtils: java.nio.ByteBuffer getLengthPrefixedSlice(java.nio.ByteBuffer)>(r52);

     label10:
        i6 = i4;

        i7 = i4;

     label11:
        r56 = staticinvoke <android.util.apk.ApkSigningBlockUtils: java.nio.ByteBuffer getLengthPrefixedSlice(java.nio.ByteBuffer)>(r55);

     label12:
        i6 = i4;

        i7 = i4;

     label13:
        i8 = virtualinvoke r55.<java.nio.ByteBuffer: int getInt()>();

     label14:
        i6 = i4;

        i7 = i4;

     label15:
        i9 = virtualinvoke r55.<java.nio.ByteBuffer: int getInt()>();

     label16:
        i6 = i4;

        i7 = i4;

     label17:
        r3 = staticinvoke <android.util.apk.ApkSigningBlockUtils: byte[] readLengthPrefixedByteArray(java.nio.ByteBuffer)>(r55);

     label18:
        if r54 == null goto label55;

        i6 = i4;

        i7 = i4;

     label19:
        r57 = staticinvoke <android.util.apk.ApkSigningBlockUtils: android.util.Pair getSignatureAlgorithmJcaSignatureAlgorithm(int)>(i5);

     label20:
        i6 = i4;

        i7 = i4;

     label21:
        r4 = virtualinvoke r54.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();

     label22:
        i6 = i4;

        i7 = i4;

     label23:
        $r20 = r57.<android.util.Pair: java.lang.Object first>;

        $r21 = (java.lang.String) $r20;

        r5 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>($r21);

     label24:
        i6 = i4;

        i7 = i4;

     label25:
        virtualinvoke r5.<java.security.Signature: void initVerify(java.security.PublicKey)>(r4);

     label26:
        i6 = i4;

        i7 = i4;

     label27:
        $r22 = r57.<android.util.Pair: java.lang.Object second>;

        if $r22 == null goto label30;

     label28:
        i6 = i4;

        i7 = i4;

     label29:
        $r31 = r57.<android.util.Pair: java.lang.Object second>;

        $r32 = (java.security.spec.AlgorithmParameterSpec) $r31;

        virtualinvoke r5.<java.security.Signature: void setParameter(java.security.spec.AlgorithmParameterSpec)>($r32);

     label30:
        i6 = i4;

        i7 = i4;

     label31:
        virtualinvoke r5.<java.security.Signature: void update(java.nio.ByteBuffer)>(r56);

     label32:
        i6 = i4;

        i7 = i4;

     label33:
        $z5 = virtualinvoke r5.<java.security.Signature: boolean verify(byte[])>(r3);

        if $z5 == 0 goto label35;

     label34:
        goto label55;

     label35:
        i6 = i4;

        i7 = i4;

     label36:
        r58 = new java.lang.SecurityException;

     label37:
        i6 = i4;

        i7 = i4;

     label38:
        r59 = new java.lang.StringBuilder;

     label39:
        i6 = i4;

        i7 = i4;

     label40:
        specialinvoke r59.<java.lang.StringBuilder: void <init>()>();

     label41:
        i6 = i4;

        i7 = i4;

     label42:
        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to verify signature of certificate #");

     label43:
        i6 = i4;

        i7 = i4;

     label44:
        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

     label45:
        i6 = i4;

        i7 = i4;

     label46:
        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" using ");

     label47:
        i6 = i4;

        i7 = i4;

     label48:
        $r26 = r57.<android.util.Pair: java.lang.Object first>;

        $r27 = (java.lang.String) $r26;

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

     label49:
        i6 = i4;

        i7 = i4;

     label50:
        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" when verifying Proof-of-rotation record");

     label51:
        i6 = i4;

        i7 = i4;

     label52:
        $r30 = virtualinvoke r59.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r58.<java.lang.SecurityException: void <init>(java.lang.String)>($r30);

     label53:
        i6 = i4;

        i7 = i4;

     label54:
        throw r58;

     label55:
        i6 = i4;

        i7 = i4;

     label56:
        virtualinvoke r56.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

     label57:
        i6 = i4;

        i7 = i4;

     label58:
        r60 = staticinvoke <android.util.apk.ApkSigningBlockUtils: byte[] readLengthPrefixedByteArray(java.nio.ByteBuffer)>(r56);

     label59:
        i6 = i4;

        i7 = i4;

     label60:
        i0 = virtualinvoke r56.<java.nio.ByteBuffer: int getInt()>();

     label61:
        if r54 == null goto label78;

        if i5 != i0 goto label62;

        goto label78;

     label62:
        i6 = i4;

        i7 = i4;

     label63:
        r61 = new java.lang.SecurityException;

     label64:
        i6 = i4;

        i7 = i4;

     label65:
        r62 = new java.lang.StringBuilder;

     label66:
        i6 = i4;

        i7 = i4;

     label67:
        specialinvoke r62.<java.lang.StringBuilder: void <init>()>();

     label68:
        i6 = i4;

        i7 = i4;

     label69:
        virtualinvoke r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Signing algorithm ID mismatch for certificate #");

     label70:
        i6 = i4;

        i7 = i4;

     label71:
        virtualinvoke r62.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

     label72:
        i6 = i4;

        i7 = i4;

     label73:
        virtualinvoke r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" when verifying Proof-of-rotation record");

     label74:
        i6 = i4;

        i7 = i4;

     label75:
        $r19 = virtualinvoke r62.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r61.<java.lang.SecurityException: void <init>(java.lang.String)>($r19);

     label76:
        i6 = i4;

        i7 = i4;

     label77:
        throw r61;

     label78:
        i6 = i4;

        i7 = i4;

     label79:
        r63 = new java.io.ByteArrayInputStream;

     label80:
        i6 = i4;

        i7 = i4;

     label81:
        specialinvoke r63.<java.io.ByteArrayInputStream: void <init>(byte[])>(r60);

     label82:
        $r10 = virtualinvoke r53.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>(r63);

        r64 = (java.security.cert.X509Certificate) $r10;

        r54 = new android.util.apk.VerbatimX509Certificate;

        specialinvoke r54.<android.util.apk.VerbatimX509Certificate: void <init>(java.security.cert.X509Certificate,byte[])>(r64, r60);

     label83:
        i5 = i9;

     label84:
        $z1 = virtualinvoke r2.<java.util.HashSet: boolean contains(java.lang.Object)>(r54);

        if $z1 != 0 goto label86;

        virtualinvoke r2.<java.util.HashSet: boolean add(java.lang.Object)>(r54);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r54);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i8);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r15);

     label85:
        goto label06;

     label86:
        r65 = new java.lang.SecurityException;

        r66 = new java.lang.StringBuilder;

        specialinvoke r66.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Encountered duplicate entries in Proof-of-rotation record at certificate #");

        virtualinvoke r66.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        virtualinvoke r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  All signing certificates should be unique");

        $r14 = virtualinvoke r66.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r65.<java.lang.SecurityException: void <init>(java.lang.String)>($r14);

        throw r65;

     label87:
        $r42 := @caughtexception;

        r67 = $r42;

        goto label92;

     label88:
        $r49 := @caughtexception;

        r68 = $r49;

        goto label94;

     label89:
        $r33 := @caughtexception;

        r69 = $r33;

        goto label96;

     label90:
        $r8 = new android.util.apk.ApkSignatureSchemeV3Verifier$VerifiedProofOfRotation;

        specialinvoke $r8.<android.util.apk.ApkSignatureSchemeV3Verifier$VerifiedProofOfRotation: void <init>(java.util.List,java.util.List)>($r6, $r7);

        return $r8;

     label91:
        $r50 := @caughtexception;

        r67 = $r50;

        i4 = i6;

     label92:
        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to decode certificate #");

        virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" when verifying Proof-of-rotation record");

        $r47 = new java.lang.SecurityException;

        $r48 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r47.<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>($r48, r67);

        throw $r47;

     label93:
        $r35 := @caughtexception;

        r68 = $r35;

        i4 = i7;

     label94:
        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to verify signature over signed data for certificate #");

        virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" when verifying Proof-of-rotation record");

        $r40 = new java.lang.SecurityException;

        $r41 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r40.<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>($r41, r68);

        throw $r40;

     label95:
        $r51 := @caughtexception;

        r69 = $r51;

     label96:
        $r34 = new java.io.IOException;

        specialinvoke $r34.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to parse Proof-of-rotation record", r69);

        throw $r34;

        catch java.io.IOException from label01 to label02 with label95;
        catch java.nio.BufferUnderflowException from label01 to label02 with label95;
        catch java.security.NoSuchAlgorithmException from label01 to label02 with label93;
        catch java.security.InvalidKeyException from label01 to label02 with label93;
        catch java.security.InvalidAlgorithmParameterException from label01 to label02 with label93;
        catch java.security.SignatureException from label01 to label02 with label93;
        catch java.security.cert.CertificateException from label01 to label02 with label91;
        catch java.io.IOException from label03 to label04 with label95;
        catch java.nio.BufferUnderflowException from label03 to label04 with label95;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label93;
        catch java.security.InvalidKeyException from label03 to label04 with label93;
        catch java.security.InvalidAlgorithmParameterException from label03 to label04 with label93;
        catch java.security.SignatureException from label03 to label04 with label93;
        catch java.security.cert.CertificateException from label03 to label04 with label91;
        catch java.io.IOException from label05 to label06 with label95;
        catch java.nio.BufferUnderflowException from label05 to label06 with label95;
        catch java.security.NoSuchAlgorithmException from label05 to label06 with label93;
        catch java.security.InvalidKeyException from label05 to label06 with label93;
        catch java.security.InvalidAlgorithmParameterException from label05 to label06 with label93;
        catch java.security.SignatureException from label05 to label06 with label93;
        catch java.security.cert.CertificateException from label05 to label06 with label91;
        catch java.io.IOException from label07 to label08 with label95;
        catch java.nio.BufferUnderflowException from label07 to label08 with label95;
        catch java.security.NoSuchAlgorithmException from label07 to label08 with label93;
        catch java.security.InvalidKeyException from label07 to label08 with label93;
        catch java.security.InvalidAlgorithmParameterException from label07 to label08 with label93;
        catch java.security.SignatureException from label07 to label08 with label93;
        catch java.security.cert.CertificateException from label07 to label08 with label91;
        catch java.io.IOException from label09 to label10 with label95;
        catch java.nio.BufferUnderflowException from label09 to label10 with label95;
        catch java.security.NoSuchAlgorithmException from label09 to label10 with label93;
        catch java.security.InvalidKeyException from label09 to label10 with label93;
        catch java.security.InvalidAlgorithmParameterException from label09 to label10 with label93;
        catch java.security.SignatureException from label09 to label10 with label93;
        catch java.security.cert.CertificateException from label09 to label10 with label91;
        catch java.io.IOException from label11 to label12 with label95;
        catch java.nio.BufferUnderflowException from label11 to label12 with label95;
        catch java.security.NoSuchAlgorithmException from label11 to label12 with label93;
        catch java.security.InvalidKeyException from label11 to label12 with label93;
        catch java.security.InvalidAlgorithmParameterException from label11 to label12 with label93;
        catch java.security.SignatureException from label11 to label12 with label93;
        catch java.security.cert.CertificateException from label11 to label12 with label91;
        catch java.io.IOException from label13 to label14 with label95;
        catch java.nio.BufferUnderflowException from label13 to label14 with label95;
        catch java.security.NoSuchAlgorithmException from label13 to label14 with label93;
        catch java.security.InvalidKeyException from label13 to label14 with label93;
        catch java.security.InvalidAlgorithmParameterException from label13 to label14 with label93;
        catch java.security.SignatureException from label13 to label14 with label93;
        catch java.security.cert.CertificateException from label13 to label14 with label91;
        catch java.io.IOException from label15 to label16 with label95;
        catch java.nio.BufferUnderflowException from label15 to label16 with label95;
        catch java.security.NoSuchAlgorithmException from label15 to label16 with label93;
        catch java.security.InvalidKeyException from label15 to label16 with label93;
        catch java.security.InvalidAlgorithmParameterException from label15 to label16 with label93;
        catch java.security.SignatureException from label15 to label16 with label93;
        catch java.security.cert.CertificateException from label15 to label16 with label91;
        catch java.io.IOException from label17 to label18 with label95;
        catch java.nio.BufferUnderflowException from label17 to label18 with label95;
        catch java.security.NoSuchAlgorithmException from label17 to label18 with label93;
        catch java.security.InvalidKeyException from label17 to label18 with label93;
        catch java.security.InvalidAlgorithmParameterException from label17 to label18 with label93;
        catch java.security.SignatureException from label17 to label18 with label93;
        catch java.security.cert.CertificateException from label17 to label18 with label91;
        catch java.io.IOException from label19 to label20 with label95;
        catch java.nio.BufferUnderflowException from label19 to label20 with label95;
        catch java.security.NoSuchAlgorithmException from label19 to label20 with label93;
        catch java.security.InvalidKeyException from label19 to label20 with label93;
        catch java.security.InvalidAlgorithmParameterException from label19 to label20 with label93;
        catch java.security.SignatureException from label19 to label20 with label93;
        catch java.security.cert.CertificateException from label19 to label20 with label91;
        catch java.io.IOException from label21 to label22 with label95;
        catch java.nio.BufferUnderflowException from label21 to label22 with label95;
        catch java.security.NoSuchAlgorithmException from label21 to label22 with label93;
        catch java.security.InvalidKeyException from label21 to label22 with label93;
        catch java.security.InvalidAlgorithmParameterException from label21 to label22 with label93;
        catch java.security.SignatureException from label21 to label22 with label93;
        catch java.security.cert.CertificateException from label21 to label22 with label91;
        catch java.io.IOException from label23 to label24 with label95;
        catch java.nio.BufferUnderflowException from label23 to label24 with label95;
        catch java.security.NoSuchAlgorithmException from label23 to label24 with label93;
        catch java.security.InvalidKeyException from label23 to label24 with label93;
        catch java.security.InvalidAlgorithmParameterException from label23 to label24 with label93;
        catch java.security.SignatureException from label23 to label24 with label93;
        catch java.security.cert.CertificateException from label23 to label24 with label91;
        catch java.io.IOException from label25 to label26 with label95;
        catch java.nio.BufferUnderflowException from label25 to label26 with label95;
        catch java.security.NoSuchAlgorithmException from label25 to label26 with label93;
        catch java.security.InvalidKeyException from label25 to label26 with label93;
        catch java.security.InvalidAlgorithmParameterException from label25 to label26 with label93;
        catch java.security.SignatureException from label25 to label26 with label93;
        catch java.security.cert.CertificateException from label25 to label26 with label91;
        catch java.io.IOException from label27 to label28 with label95;
        catch java.nio.BufferUnderflowException from label27 to label28 with label95;
        catch java.security.NoSuchAlgorithmException from label27 to label28 with label93;
        catch java.security.InvalidKeyException from label27 to label28 with label93;
        catch java.security.InvalidAlgorithmParameterException from label27 to label28 with label93;
        catch java.security.SignatureException from label27 to label28 with label93;
        catch java.security.cert.CertificateException from label27 to label28 with label91;
        catch java.io.IOException from label29 to label30 with label95;
        catch java.nio.BufferUnderflowException from label29 to label30 with label95;
        catch java.security.NoSuchAlgorithmException from label29 to label30 with label93;
        catch java.security.InvalidKeyException from label29 to label30 with label93;
        catch java.security.InvalidAlgorithmParameterException from label29 to label30 with label93;
        catch java.security.SignatureException from label29 to label30 with label93;
        catch java.security.cert.CertificateException from label29 to label30 with label91;
        catch java.io.IOException from label31 to label32 with label95;
        catch java.nio.BufferUnderflowException from label31 to label32 with label95;
        catch java.security.NoSuchAlgorithmException from label31 to label32 with label93;
        catch java.security.InvalidKeyException from label31 to label32 with label93;
        catch java.security.InvalidAlgorithmParameterException from label31 to label32 with label93;
        catch java.security.SignatureException from label31 to label32 with label93;
        catch java.security.cert.CertificateException from label31 to label32 with label91;
        catch java.io.IOException from label33 to label34 with label95;
        catch java.nio.BufferUnderflowException from label33 to label34 with label95;
        catch java.security.NoSuchAlgorithmException from label33 to label34 with label93;
        catch java.security.InvalidKeyException from label33 to label34 with label93;
        catch java.security.InvalidAlgorithmParameterException from label33 to label34 with label93;
        catch java.security.SignatureException from label33 to label34 with label93;
        catch java.security.cert.CertificateException from label33 to label34 with label91;
        catch java.io.IOException from label36 to label37 with label95;
        catch java.nio.BufferUnderflowException from label36 to label37 with label95;
        catch java.security.NoSuchAlgorithmException from label36 to label37 with label93;
        catch java.security.InvalidKeyException from label36 to label37 with label93;
        catch java.security.InvalidAlgorithmParameterException from label36 to label37 with label93;
        catch java.security.SignatureException from label36 to label37 with label93;
        catch java.security.cert.CertificateException from label36 to label37 with label91;
        catch java.io.IOException from label38 to label39 with label95;
        catch java.nio.BufferUnderflowException from label38 to label39 with label95;
        catch java.security.NoSuchAlgorithmException from label38 to label39 with label93;
        catch java.security.InvalidKeyException from label38 to label39 with label93;
        catch java.security.InvalidAlgorithmParameterException from label38 to label39 with label93;
        catch java.security.SignatureException from label38 to label39 with label93;
        catch java.security.cert.CertificateException from label38 to label39 with label91;
        catch java.io.IOException from label40 to label41 with label95;
        catch java.nio.BufferUnderflowException from label40 to label41 with label95;
        catch java.security.NoSuchAlgorithmException from label40 to label41 with label93;
        catch java.security.InvalidKeyException from label40 to label41 with label93;
        catch java.security.InvalidAlgorithmParameterException from label40 to label41 with label93;
        catch java.security.SignatureException from label40 to label41 with label93;
        catch java.security.cert.CertificateException from label40 to label41 with label91;
        catch java.io.IOException from label42 to label43 with label95;
        catch java.nio.BufferUnderflowException from label42 to label43 with label95;
        catch java.security.NoSuchAlgorithmException from label42 to label43 with label93;
        catch java.security.InvalidKeyException from label42 to label43 with label93;
        catch java.security.InvalidAlgorithmParameterException from label42 to label43 with label93;
        catch java.security.SignatureException from label42 to label43 with label93;
        catch java.security.cert.CertificateException from label42 to label43 with label91;
        catch java.io.IOException from label44 to label45 with label95;
        catch java.nio.BufferUnderflowException from label44 to label45 with label95;
        catch java.security.NoSuchAlgorithmException from label44 to label45 with label93;
        catch java.security.InvalidKeyException from label44 to label45 with label93;
        catch java.security.InvalidAlgorithmParameterException from label44 to label45 with label93;
        catch java.security.SignatureException from label44 to label45 with label93;
        catch java.security.cert.CertificateException from label44 to label45 with label91;
        catch java.io.IOException from label46 to label47 with label95;
        catch java.nio.BufferUnderflowException from label46 to label47 with label95;
        catch java.security.NoSuchAlgorithmException from label46 to label47 with label93;
        catch java.security.InvalidKeyException from label46 to label47 with label93;
        catch java.security.InvalidAlgorithmParameterException from label46 to label47 with label93;
        catch java.security.SignatureException from label46 to label47 with label93;
        catch java.security.cert.CertificateException from label46 to label47 with label91;
        catch java.io.IOException from label48 to label49 with label95;
        catch java.nio.BufferUnderflowException from label48 to label49 with label95;
        catch java.security.NoSuchAlgorithmException from label48 to label49 with label93;
        catch java.security.InvalidKeyException from label48 to label49 with label93;
        catch java.security.InvalidAlgorithmParameterException from label48 to label49 with label93;
        catch java.security.SignatureException from label48 to label49 with label93;
        catch java.security.cert.CertificateException from label48 to label49 with label91;
        catch java.io.IOException from label50 to label51 with label95;
        catch java.nio.BufferUnderflowException from label50 to label51 with label95;
        catch java.security.NoSuchAlgorithmException from label50 to label51 with label93;
        catch java.security.InvalidKeyException from label50 to label51 with label93;
        catch java.security.InvalidAlgorithmParameterException from label50 to label51 with label93;
        catch java.security.SignatureException from label50 to label51 with label93;
        catch java.security.cert.CertificateException from label50 to label51 with label91;
        catch java.io.IOException from label52 to label53 with label95;
        catch java.nio.BufferUnderflowException from label52 to label53 with label95;
        catch java.security.NoSuchAlgorithmException from label52 to label53 with label93;
        catch java.security.InvalidKeyException from label52 to label53 with label93;
        catch java.security.InvalidAlgorithmParameterException from label52 to label53 with label93;
        catch java.security.SignatureException from label52 to label53 with label93;
        catch java.security.cert.CertificateException from label52 to label53 with label91;
        catch java.io.IOException from label54 to label55 with label95;
        catch java.nio.BufferUnderflowException from label54 to label55 with label95;
        catch java.security.NoSuchAlgorithmException from label54 to label55 with label93;
        catch java.security.InvalidKeyException from label54 to label55 with label93;
        catch java.security.InvalidAlgorithmParameterException from label54 to label55 with label93;
        catch java.security.SignatureException from label54 to label55 with label93;
        catch java.security.cert.CertificateException from label54 to label55 with label91;
        catch java.io.IOException from label56 to label57 with label95;
        catch java.nio.BufferUnderflowException from label56 to label57 with label95;
        catch java.security.NoSuchAlgorithmException from label56 to label57 with label93;
        catch java.security.InvalidKeyException from label56 to label57 with label93;
        catch java.security.InvalidAlgorithmParameterException from label56 to label57 with label93;
        catch java.security.SignatureException from label56 to label57 with label93;
        catch java.security.cert.CertificateException from label56 to label57 with label91;
        catch java.io.IOException from label58 to label59 with label95;
        catch java.nio.BufferUnderflowException from label58 to label59 with label95;
        catch java.security.NoSuchAlgorithmException from label58 to label59 with label93;
        catch java.security.InvalidKeyException from label58 to label59 with label93;
        catch java.security.InvalidAlgorithmParameterException from label58 to label59 with label93;
        catch java.security.SignatureException from label58 to label59 with label93;
        catch java.security.cert.CertificateException from label58 to label59 with label91;
        catch java.io.IOException from label60 to label61 with label95;
        catch java.nio.BufferUnderflowException from label60 to label61 with label95;
        catch java.security.NoSuchAlgorithmException from label60 to label61 with label93;
        catch java.security.InvalidKeyException from label60 to label61 with label93;
        catch java.security.InvalidAlgorithmParameterException from label60 to label61 with label93;
        catch java.security.SignatureException from label60 to label61 with label93;
        catch java.security.cert.CertificateException from label60 to label61 with label91;
        catch java.io.IOException from label63 to label64 with label95;
        catch java.nio.BufferUnderflowException from label63 to label64 with label95;
        catch java.security.NoSuchAlgorithmException from label63 to label64 with label93;
        catch java.security.InvalidKeyException from label63 to label64 with label93;
        catch java.security.InvalidAlgorithmParameterException from label63 to label64 with label93;
        catch java.security.SignatureException from label63 to label64 with label93;
        catch java.security.cert.CertificateException from label63 to label64 with label91;
        catch java.io.IOException from label65 to label66 with label95;
        catch java.nio.BufferUnderflowException from label65 to label66 with label95;
        catch java.security.NoSuchAlgorithmException from label65 to label66 with label93;
        catch java.security.InvalidKeyException from label65 to label66 with label93;
        catch java.security.InvalidAlgorithmParameterException from label65 to label66 with label93;
        catch java.security.SignatureException from label65 to label66 with label93;
        catch java.security.cert.CertificateException from label65 to label66 with label91;
        catch java.io.IOException from label67 to label68 with label95;
        catch java.nio.BufferUnderflowException from label67 to label68 with label95;
        catch java.security.NoSuchAlgorithmException from label67 to label68 with label93;
        catch java.security.InvalidKeyException from label67 to label68 with label93;
        catch java.security.InvalidAlgorithmParameterException from label67 to label68 with label93;
        catch java.security.SignatureException from label67 to label68 with label93;
        catch java.security.cert.CertificateException from label67 to label68 with label91;
        catch java.io.IOException from label69 to label70 with label95;
        catch java.nio.BufferUnderflowException from label69 to label70 with label95;
        catch java.security.NoSuchAlgorithmException from label69 to label70 with label93;
        catch java.security.InvalidKeyException from label69 to label70 with label93;
        catch java.security.InvalidAlgorithmParameterException from label69 to label70 with label93;
        catch java.security.SignatureException from label69 to label70 with label93;
        catch java.security.cert.CertificateException from label69 to label70 with label91;
        catch java.io.IOException from label71 to label72 with label95;
        catch java.nio.BufferUnderflowException from label71 to label72 with label95;
        catch java.security.NoSuchAlgorithmException from label71 to label72 with label93;
        catch java.security.InvalidKeyException from label71 to label72 with label93;
        catch java.security.InvalidAlgorithmParameterException from label71 to label72 with label93;
        catch java.security.SignatureException from label71 to label72 with label93;
        catch java.security.cert.CertificateException from label71 to label72 with label91;
        catch java.io.IOException from label73 to label74 with label95;
        catch java.nio.BufferUnderflowException from label73 to label74 with label95;
        catch java.security.NoSuchAlgorithmException from label73 to label74 with label93;
        catch java.security.InvalidKeyException from label73 to label74 with label93;
        catch java.security.InvalidAlgorithmParameterException from label73 to label74 with label93;
        catch java.security.SignatureException from label73 to label74 with label93;
        catch java.security.cert.CertificateException from label73 to label74 with label91;
        catch java.io.IOException from label75 to label76 with label95;
        catch java.nio.BufferUnderflowException from label75 to label76 with label95;
        catch java.security.NoSuchAlgorithmException from label75 to label76 with label93;
        catch java.security.InvalidKeyException from label75 to label76 with label93;
        catch java.security.InvalidAlgorithmParameterException from label75 to label76 with label93;
        catch java.security.SignatureException from label75 to label76 with label93;
        catch java.security.cert.CertificateException from label75 to label76 with label91;
        catch java.io.IOException from label77 to label78 with label95;
        catch java.nio.BufferUnderflowException from label77 to label78 with label95;
        catch java.security.NoSuchAlgorithmException from label77 to label78 with label93;
        catch java.security.InvalidKeyException from label77 to label78 with label93;
        catch java.security.InvalidAlgorithmParameterException from label77 to label78 with label93;
        catch java.security.SignatureException from label77 to label78 with label93;
        catch java.security.cert.CertificateException from label77 to label78 with label91;
        catch java.io.IOException from label79 to label80 with label95;
        catch java.nio.BufferUnderflowException from label79 to label80 with label95;
        catch java.security.NoSuchAlgorithmException from label79 to label80 with label93;
        catch java.security.InvalidKeyException from label79 to label80 with label93;
        catch java.security.InvalidAlgorithmParameterException from label79 to label80 with label93;
        catch java.security.SignatureException from label79 to label80 with label93;
        catch java.security.cert.CertificateException from label79 to label80 with label91;
        catch java.io.IOException from label81 to label82 with label95;
        catch java.nio.BufferUnderflowException from label81 to label82 with label95;
        catch java.security.NoSuchAlgorithmException from label81 to label82 with label93;
        catch java.security.InvalidKeyException from label81 to label82 with label93;
        catch java.security.InvalidAlgorithmParameterException from label81 to label82 with label93;
        catch java.security.SignatureException from label81 to label82 with label93;
        catch java.security.cert.CertificateException from label81 to label82 with label91;
        catch java.io.IOException from label82 to label83 with label89;
        catch java.nio.BufferUnderflowException from label82 to label83 with label89;
        catch java.security.NoSuchAlgorithmException from label82 to label83 with label88;
        catch java.security.InvalidKeyException from label82 to label83 with label88;
        catch java.security.InvalidAlgorithmParameterException from label82 to label83 with label88;
        catch java.security.SignatureException from label82 to label83 with label88;
        catch java.security.cert.CertificateException from label82 to label83 with label87;
        catch java.io.IOException from label84 to label85 with label89;
        catch java.nio.BufferUnderflowException from label84 to label85 with label89;
        catch java.security.NoSuchAlgorithmException from label84 to label85 with label88;
        catch java.security.InvalidKeyException from label84 to label85 with label88;
        catch java.security.InvalidAlgorithmParameterException from label84 to label85 with label88;
        catch java.security.SignatureException from label84 to label85 with label88;
        catch java.security.cert.CertificateException from label84 to label85 with label87;
        catch java.io.IOException from label86 to label87 with label89;
        catch java.nio.BufferUnderflowException from label86 to label87 with label89;
        catch java.security.NoSuchAlgorithmException from label86 to label87 with label88;
        catch java.security.InvalidKeyException from label86 to label87 with label88;
        catch java.security.InvalidAlgorithmParameterException from label86 to label87 with label88;
        catch java.security.SignatureException from label86 to label87 with label88;
        catch java.security.cert.CertificateException from label86 to label87 with label87;
    }

    private static android.util.apk.ApkSignatureSchemeV3Verifier$VerifiedSigner verifySigner(java.nio.ByteBuffer, java.util.Map, java.security.cert.CertificateFactory) throws java.lang.SecurityException, java.io.IOException, android.util.apk.ApkSignatureSchemeV3Verifier$PlatformNotSupportedException
    {
        java.security.cert.CertificateFactory r0;
        java.nio.ByteBuffer r1, $r35, r75, r77, r79, r92, r95, r104;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11, i12, i13, i14, i15, i16, i17;
        byte[] r2, $r31, r78, r94, r102, r106;
        boolean z0, $z1, $z2, $z3, $z4, $z6, $z9, $z10, $z11;
        java.lang.StringBuilder $r4, $r16, $r39, $r54, $r64, $r70, $r98;
        android.util.apk.ApkSignatureSchemeV3Verifier$PlatformNotSupportedException $r11;
        java.lang.String $r12, $r20, $r40, $r44, $r59, $r68, $r74, r83, r85, $r101;
        java.util.ArrayList $r13, $r22, $r26;
        java.lang.Object $r14, $r15, $r25, $r28;
        java.lang.SecurityException $r19, $r23, $r27, $r32, $r33, $r34, $r43, $r46, $r47, $r58, $r67, $r73, r80;
        java.lang.Integer $r24, $r45, $r48;
        java.security.cert.X509Certificate $r29, r108;
        java.security.PublicKey $r30, r89;
        android.util.apk.ApkSignatureSchemeV3Verifier$VerifiedSigner $r36;
        java.security.cert.Certificate $r37;
        android.util.apk.VerbatimX509Certificate $r38;
        java.lang.Throwable $r49, $r52, $r53, $r60, $r61, $r62, $r63, $r69, r91, r96;
        java.util.Map r76;
        android.util.Pair r84;
        java.security.spec.AlgorithmParameterSpec r86;
        java.security.KeyFactory r87;
        java.security.spec.X509EncodedKeySpec r88;
        java.security.Signature r90;
        java.io.IOException r97, $r100;
        java.io.ByteArrayInputStream r107;

        r75 := @parameter0: java.nio.ByteBuffer;

        r76 := @parameter1: java.util.Map;

        r0 := @parameter2: java.security.cert.CertificateFactory;

        r1 = staticinvoke <android.util.apk.ApkSigningBlockUtils: java.nio.ByteBuffer getLengthPrefixedSlice(java.nio.ByteBuffer)>(r75);

        i0 = virtualinvoke r75.<java.nio.ByteBuffer: int getInt()>();

        i1 = virtualinvoke r75.<java.nio.ByteBuffer: int getInt()>();

        $i2 = <android.os.Build$VERSION: int SDK_INT>;

        if $i2 < i0 goto label52;

        $i4 = <android.os.Build$VERSION: int SDK_INT>;

        if $i4 > i1 goto label52;

        r77 = staticinvoke <android.util.apk.ApkSigningBlockUtils: java.nio.ByteBuffer getLengthPrefixedSlice(java.nio.ByteBuffer)>(r75);

        r2 = staticinvoke <android.util.apk.ApkSigningBlockUtils: byte[] readLengthPrefixedByteArray(java.nio.ByteBuffer)>(r75);

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        r78 = null;

        i9 = -1;

        i10 = 0;

     label01:
        $z10 = virtualinvoke r77.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z10 == 0 goto label11;

        i10 = i10 + 1;

     label02:
        r79 = staticinvoke <android.util.apk.ApkSigningBlockUtils: java.nio.ByteBuffer getLengthPrefixedSlice(java.nio.ByteBuffer)>(r77);

        $i7 = virtualinvoke r79.<java.nio.ByteBuffer: int remaining()>();

        if $i7 < 8 goto label09;

        i11 = virtualinvoke r79.<java.nio.ByteBuffer: int getInt()>();

        $r48 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i11);

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r48);

        $z9 = staticinvoke <android.util.apk.ApkSigningBlockUtils: boolean isSupportedSignatureAlgorithm(int)>(i11);

        if $z9 != 0 goto label04;

     label03:
        goto label01;

     label04:
        if i9 == -1 goto label06;

        i12 = i9;

     label05:
        $i8 = staticinvoke <android.util.apk.ApkSigningBlockUtils: int compareSignatureAlgorithm(int,int)>(i11, i9);

        if $i8 <= 0 goto label08;

     label06:
        i12 = i11;

     label07:
        r78 = staticinvoke <android.util.apk.ApkSigningBlockUtils: byte[] readLengthPrefixedByteArray(java.nio.ByteBuffer)>(r79);

     label08:
        i9 = i12;

        goto label01;

     label09:
        r80 = new java.lang.SecurityException;

        specialinvoke r80.<java.lang.SecurityException: void <init>(java.lang.String)>("Signature record too short");

        throw r80;

     label10:
        $r69 := @caughtexception;

        $r70 = new java.lang.StringBuilder;

        specialinvoke $r70.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to parse signature record #");

        virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);

        $r73 = new java.lang.SecurityException;

        $r74 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r73.<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>($r74, $r69);

        throw $r73;

     label11:
        if i9 != -1 goto label13;

        if i10 != 0 goto label12;

        $r47 = new java.lang.SecurityException;

        specialinvoke $r47.<java.lang.SecurityException: void <init>(java.lang.String)>("No signatures found");

        throw $r47;

     label12:
        $r46 = new java.lang.SecurityException;

        specialinvoke $r46.<java.lang.SecurityException: void <init>(java.lang.String)>("No supported signatures found");

        throw $r46;

     label13:
        r83 = staticinvoke <android.util.apk.ApkSigningBlockUtils: java.lang.String getSignatureAlgorithmJcaKeyAlgorithm(int)>(i9);

        r84 = staticinvoke <android.util.apk.ApkSigningBlockUtils: android.util.Pair getSignatureAlgorithmJcaSignatureAlgorithm(int)>(i9);

        $r14 = r84.<android.util.Pair: java.lang.Object first>;

        r85 = (java.lang.String) $r14;

        $r15 = r84.<android.util.Pair: java.lang.Object second>;

        r86 = (java.security.spec.AlgorithmParameterSpec) $r15;

     label14:
        r87 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(r83);

        r88 = new java.security.spec.X509EncodedKeySpec;

        specialinvoke r88.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>(r2);

        r89 = virtualinvoke r87.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>(r88);

        r90 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(r85);

        virtualinvoke r90.<java.security.Signature: void initVerify(java.security.PublicKey)>(r89);

     label15:
        if r86 == null goto label19;

     label16:
        virtualinvoke r90.<java.security.Signature: void setParameter(java.security.spec.AlgorithmParameterSpec)>(r86);

     label17:
        goto label19;

     label18:
        $r53 := @caughtexception;

        r91 = $r53;

        goto label51;

     label19:
        virtualinvoke r90.<java.security.Signature: void update(java.nio.ByteBuffer)>(r1);

        z0 = virtualinvoke r90.<java.security.Signature: boolean verify(byte[])>(r78);

     label20:
        if z0 == 0 goto label49;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer clear()>();

        r92 = staticinvoke <android.util.apk.ApkSigningBlockUtils: java.nio.ByteBuffer getLengthPrefixedSlice(java.nio.ByteBuffer)>(r1);

        $r22 = new java.util.ArrayList;

        specialinvoke $r22.<java.util.ArrayList: void <init>()>();

        i13 = 0;

        r94 = null;

     label21:
        $z1 = virtualinvoke r92.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z1 == 0 goto label36;

        i13 = i13 + 1;

     label22:
        r95 = staticinvoke <android.util.apk.ApkSigningBlockUtils: java.nio.ByteBuffer getLengthPrefixedSlice(java.nio.ByteBuffer)>(r92);

     label23:
        i14 = virtualinvoke r95.<java.nio.ByteBuffer: int remaining()>();

     label24:
        if i14 < 8 goto label31;

     label25:
        i15 = virtualinvoke r95.<java.nio.ByteBuffer: int getInt()>();

     label26:
        $r45 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i15);

        interfaceinvoke $r22.<java.util.List: boolean add(java.lang.Object)>($r45);

     label27:
        if i15 != i9 goto label29;

     label28:
        r94 = staticinvoke <android.util.apk.ApkSigningBlockUtils: byte[] readLengthPrefixedByteArray(java.nio.ByteBuffer)>(r95);

     label29:
        goto label21;

     label30:
        $r60 := @caughtexception;

        r96 = $r60;

        goto label35;

     label31:
        r97 = new java.io.IOException;

        specialinvoke r97.<java.io.IOException: void <init>(java.lang.String)>("Record too short");

        throw r97;

     label32:
        $r49 := @caughtexception;

        r96 = $r49;

        goto label35;

     label33:
        $r52 := @caughtexception;

        r96 = $r52;

        goto label35;

     label34:
        $r61 := @caughtexception;

        r96 = $r61;

     label35:
        $r98 = new java.lang.StringBuilder;

        specialinvoke $r98.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to parse digest record #");

        virtualinvoke $r98.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i13);

        $r100 = new java.io.IOException;

        $r101 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r100.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>($r101, r96);

        throw $r100;

     label36:
        $z2 = interfaceinvoke $r13.<java.util.List: boolean equals(java.lang.Object)>($r22);

        if $z2 == 0 goto label48;

        i16 = staticinvoke <android.util.apk.ApkSigningBlockUtils: int getSignatureAlgorithmContentDigestAlgorithm(int)>(i9);

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i16);

        $r25 = interfaceinvoke r76.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r24, r94);

        r102 = (byte[]) $r25;

        if r102 == null goto label38;

        $z6 = staticinvoke <java.security.MessageDigest: boolean isEqual(byte[],byte[])>(r102, r94);

        if $z6 == 0 goto label37;

        goto label38;

     label37:
        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r40 = staticinvoke <android.util.apk.ApkSigningBlockUtils: java.lang.String getContentDigestAlgorithmJcaDigestAlgorithm(int)>(i16);

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" contents digest does not match the digest specified by a preceding signer");

        $r43 = new java.lang.SecurityException;

        $r44 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r43.<java.lang.SecurityException: void <init>(java.lang.String)>($r44);

        throw $r43;

     label38:
        r104 = staticinvoke <android.util.apk.ApkSigningBlockUtils: java.nio.ByteBuffer getLengthPrefixedSlice(java.nio.ByteBuffer)>(r1);

        $r26 = new java.util.ArrayList;

        specialinvoke $r26.<java.util.ArrayList: void <init>()>();

        i17 = 0;

     label39:
        $z11 = virtualinvoke r104.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z11 == 0 goto label43;

        i17 = i17 + 1;

        r106 = staticinvoke <android.util.apk.ApkSigningBlockUtils: byte[] readLengthPrefixedByteArray(java.nio.ByteBuffer)>(r104);

     label40:
        r107 = new java.io.ByteArrayInputStream;

        specialinvoke r107.<java.io.ByteArrayInputStream: void <init>(byte[])>(r106);

        $r37 = virtualinvoke r0.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>(r107);

        r108 = (java.security.cert.X509Certificate) $r37;

     label41:
        $r38 = new android.util.apk.VerbatimX509Certificate;

        specialinvoke $r38.<android.util.apk.VerbatimX509Certificate: void <init>(java.security.cert.X509Certificate,byte[])>(r108, r106);

        interfaceinvoke $r26.<java.util.List: boolean add(java.lang.Object)>($r38);

        goto label39;

     label42:
        $r63 := @caughtexception;

        $r64 = new java.lang.StringBuilder;

        specialinvoke $r64.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to decode certificate #");

        virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i17);

        $r67 = new java.lang.SecurityException;

        $r68 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r67.<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>($r68, $r63);

        throw $r67;

     label43:
        $z3 = interfaceinvoke $r26.<java.util.List: boolean isEmpty()>();

        if $z3 != 0 goto label47;

        $r28 = interfaceinvoke $r26.<java.util.List: java.lang.Object get(int)>(0);

        $r29 = (java.security.cert.X509Certificate) $r28;

        $r30 = virtualinvoke $r29.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();

        $r31 = interfaceinvoke $r30.<java.security.PublicKey: byte[] getEncoded()>();

        $z4 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r2, $r31);

        if $z4 == 0 goto label46;

        $i5 = virtualinvoke r1.<java.nio.ByteBuffer: int getInt()>();

        if $i5 != i0 goto label45;

        $i6 = virtualinvoke r1.<java.nio.ByteBuffer: int getInt()>();

        if $i6 != i1 goto label44;

        $r35 = staticinvoke <android.util.apk.ApkSigningBlockUtils: java.nio.ByteBuffer getLengthPrefixedSlice(java.nio.ByteBuffer)>(r1);

        $r36 = staticinvoke <android.util.apk.ApkSignatureSchemeV3Verifier: android.util.apk.ApkSignatureSchemeV3Verifier$VerifiedSigner verifyAdditionalAttributes(java.nio.ByteBuffer,java.util.List,java.security.cert.CertificateFactory)>($r35, $r26, r0);

        return $r36;

     label44:
        $r34 = new java.lang.SecurityException;

        specialinvoke $r34.<java.lang.SecurityException: void <init>(java.lang.String)>("maxSdkVersion mismatch between signed and unsigned in v3 signer block.");

        throw $r34;

     label45:
        $r33 = new java.lang.SecurityException;

        specialinvoke $r33.<java.lang.SecurityException: void <init>(java.lang.String)>("minSdkVersion mismatch between signed and unsigned in v3 signer block.");

        throw $r33;

     label46:
        $r32 = new java.lang.SecurityException;

        specialinvoke $r32.<java.lang.SecurityException: void <init>(java.lang.String)>("Public key mismatch between certificate and signature record");

        throw $r32;

     label47:
        $r27 = new java.lang.SecurityException;

        specialinvoke $r27.<java.lang.SecurityException: void <init>(java.lang.String)>("No certificates listed");

        throw $r27;

     label48:
        $r23 = new java.lang.SecurityException;

        specialinvoke $r23.<java.lang.SecurityException: void <init>(java.lang.String)>("Signature algorithms don\'t match between digests and signatures records");

        throw $r23;

     label49:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r85);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" signature did not verify");

        $r19 = new java.lang.SecurityException;

        $r20 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.SecurityException: void <init>(java.lang.String)>($r20);

        throw $r19;

     label50:
        $r62 := @caughtexception;

        r91 = $r62;

     label51:
        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to verify ");

        virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r85);

        virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" signature");

        $r58 = new java.lang.SecurityException;

        $r59 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r58.<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>($r59, r91);

        throw $r58;

     label52:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Signer not supported by this platform version. This platform: ");

        $i3 = <android.os.Build$VERSION: int SDK_INT>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", signer minSdkVersion: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", maxSdkVersion: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r11 = new android.util.apk.ApkSignatureSchemeV3Verifier$PlatformNotSupportedException;

        $r12 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<android.util.apk.ApkSignatureSchemeV3Verifier$PlatformNotSupportedException: void <init>(java.lang.String)>($r12);

        throw $r11;

        catch java.io.IOException from label02 to label03 with label10;
        catch java.nio.BufferUnderflowException from label02 to label03 with label10;
        catch java.io.IOException from label05 to label06 with label10;
        catch java.nio.BufferUnderflowException from label05 to label06 with label10;
        catch java.io.IOException from label07 to label08 with label10;
        catch java.nio.BufferUnderflowException from label07 to label08 with label10;
        catch java.io.IOException from label09 to label10 with label10;
        catch java.nio.BufferUnderflowException from label09 to label10 with label10;
        catch java.security.NoSuchAlgorithmException from label14 to label15 with label50;
        catch java.security.spec.InvalidKeySpecException from label14 to label15 with label50;
        catch java.security.InvalidKeyException from label14 to label15 with label50;
        catch java.security.InvalidAlgorithmParameterException from label14 to label15 with label50;
        catch java.security.SignatureException from label14 to label15 with label50;
        catch java.security.NoSuchAlgorithmException from label16 to label17 with label18;
        catch java.security.spec.InvalidKeySpecException from label16 to label17 with label18;
        catch java.security.InvalidKeyException from label16 to label17 with label18;
        catch java.security.InvalidAlgorithmParameterException from label16 to label17 with label18;
        catch java.security.SignatureException from label16 to label17 with label18;
        catch java.security.NoSuchAlgorithmException from label19 to label20 with label50;
        catch java.security.spec.InvalidKeySpecException from label19 to label20 with label50;
        catch java.security.InvalidKeyException from label19 to label20 with label50;
        catch java.security.InvalidAlgorithmParameterException from label19 to label20 with label50;
        catch java.security.SignatureException from label19 to label20 with label50;
        catch java.io.IOException from label22 to label23 with label34;
        catch java.nio.BufferUnderflowException from label22 to label23 with label34;
        catch java.io.IOException from label23 to label24 with label33;
        catch java.nio.BufferUnderflowException from label23 to label24 with label33;
        catch java.io.IOException from label25 to label26 with label30;
        catch java.nio.BufferUnderflowException from label25 to label26 with label30;
        catch java.io.IOException from label26 to label27 with label32;
        catch java.nio.BufferUnderflowException from label26 to label27 with label32;
        catch java.io.IOException from label28 to label29 with label32;
        catch java.nio.BufferUnderflowException from label28 to label29 with label32;
        catch java.io.IOException from label31 to label32 with label32;
        catch java.nio.BufferUnderflowException from label31 to label32 with label32;
        catch java.security.cert.CertificateException from label40 to label41 with label42;
    }

    public static void <clinit>()
    {
        <android.util.apk.ApkSignatureSchemeV3Verifier: int SF_ATTRIBUTE_ANDROID_APK_SIGNED_ID> = 3;

        <android.util.apk.ApkSignatureSchemeV3Verifier: int PROOF_OF_ROTATION_ATTR_ID> = 1000370060;

        <android.util.apk.ApkSignatureSchemeV3Verifier: int APK_SIGNATURE_SCHEME_V3_BLOCK_ID> = -262969152;

        return;
    }
}
