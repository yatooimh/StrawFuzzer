public class android.util.apk.ApkSignatureSchemeV4Verifier extends java.lang.Object
{

    public void <init>()
    {
        android.util.apk.ApkSignatureSchemeV4Verifier r0;

        r0 := @this: android.util.apk.ApkSignatureSchemeV4Verifier;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static android.util.apk.ApkSignatureSchemeV4Verifier$VerifiedSigner extractCertificates(java.lang.String) throws android.util.apk.SignatureNotFoundException, java.lang.SecurityException
    {
        java.io.File $r0;
        java.lang.String $r1, $r6, r13;
        android.util.apk.SignatureNotFoundException $r2, $r12;
        int $i0, $i1;
        boolean $z0;
        byte[] $r7, $r8, $r9, r15;
        long $l2;
        android.util.apk.ApkSignatureSchemeV4Verifier$VerifiedSigner $r10;
        java.lang.Throwable $r11;
        android.os.incremental.V4Signature r16;
        android.os.incremental.V4Signature$HashingInfo r17;
        android.os.incremental.V4Signature$SigningInfo r18;
        java.lang.SecurityException r19;
        java.lang.StringBuilder r20;

        r13 := @parameter0: java.lang.String;

        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(r13);

        $r1 = virtualinvoke $r0.<java.io.File: java.lang.String getAbsolutePath()>();

        r15 = staticinvoke <android.os.incremental.IncrementalManager: byte[] unsafeGetFileSignature(java.lang.String)>($r1);

        if r15 == null goto label5;

        $i0 = lengthof r15;

        if $i0 == 0 goto label5;

     label1:
        r16 = staticinvoke <android.os.incremental.V4Signature: android.os.incremental.V4Signature readFrom(byte[])>(r15);

        $z0 = virtualinvoke r16.<android.os.incremental.V4Signature: boolean isVersionSupported()>();

        if $z0 == 0 goto label3;

        $r7 = r16.<android.os.incremental.V4Signature: byte[] hashingInfo>;

        r17 = staticinvoke <android.os.incremental.V4Signature$HashingInfo: android.os.incremental.V4Signature$HashingInfo fromByteArray(byte[])>($r7);

        $r8 = r16.<android.os.incremental.V4Signature: byte[] signingInfo>;

        r18 = staticinvoke <android.os.incremental.V4Signature$SigningInfo: android.os.incremental.V4Signature$SigningInfo fromByteArray(byte[])>($r8);

     label2:
        $l2 = virtualinvoke $r0.<java.io.File: long length()>();

        $r9 = staticinvoke <android.os.incremental.V4Signature: byte[] getSigningData(long,android.os.incremental.V4Signature$HashingInfo,android.os.incremental.V4Signature$SigningInfo)>($l2, r17, r18);

        $r10 = staticinvoke <android.util.apk.ApkSignatureSchemeV4Verifier: android.util.apk.ApkSignatureSchemeV4Verifier$VerifiedSigner verifySigner(android.os.incremental.V4Signature$SigningInfo,byte[])>(r18, $r9);

        return $r10;

     label3:
        r19 = new java.lang.SecurityException;

        r20 = new java.lang.StringBuilder;

        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("v4 signature version ");

        $i1 = r16.<android.os.incremental.V4Signature: int version>;

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not supported");

        $r6 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r19.<java.lang.SecurityException: void <init>(java.lang.String)>($r6);

        throw r19;

     label4:
        $r11 := @caughtexception;

        $r12 = new android.util.apk.SignatureNotFoundException;

        specialinvoke $r12.<android.util.apk.SignatureNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to read V4 signature.", $r11);

        throw $r12;

     label5:
        $r2 = new android.util.apk.SignatureNotFoundException;

        specialinvoke $r2.<android.util.apk.SignatureNotFoundException: void <init>(java.lang.String)>("Failed to obtain signature bytes from IncFS.");

        throw $r2;

        catch java.io.IOException from label1 to label2 with label4;
        catch java.io.IOException from label3 to label4 with label4;
    }

    private static android.util.apk.ApkSignatureSchemeV4Verifier$VerifiedSigner verifySigner(android.os.incremental.V4Signature$SigningInfo, byte[]) throws java.lang.SecurityException
    {
        int i0, $i1;
        byte[] r0, r1, r2, $r14, r31, r44;
        boolean z0, $z1, $z2;
        java.lang.Object $r4, $r5;
        java.lang.String $r10, $r26, r32, r34;
        java.security.cert.Certificate $r11;
        java.security.PublicKey $r13, r38;
        java.lang.Object[] $r17;
        java.lang.Throwable $r18, $r20, $r27, $r29, r48;
        android.os.incremental.V4Signature$SigningInfo r30;
        android.util.Pair r33;
        java.security.spec.AlgorithmParameterSpec r35;
        java.security.KeyFactory r36;
        java.security.Signature r39;
        java.security.cert.CertificateFactory r40;
        java.security.cert.X509Certificate r42;
        java.security.spec.X509EncodedKeySpec r50;
        java.io.ByteArrayInputStream r51;
        android.util.apk.VerbatimX509Certificate r52;
        android.util.apk.ApkSignatureSchemeV4Verifier$VerifiedSigner r53;
        java.lang.SecurityException r54, r55, r58, r60, r61;
        java.lang.RuntimeException r56;
        java.lang.StringBuilder r57, r59;
        java.security.cert.Certificate[] r62;

        r30 := @parameter0: android.os.incremental.V4Signature$SigningInfo;

        r31 := @parameter1: byte[];

        $i1 = r30.<android.os.incremental.V4Signature$SigningInfo: int signatureAlgorithmId>;

        $z1 = staticinvoke <android.util.apk.ApkSigningBlockUtils: boolean isSupportedSignatureAlgorithm(int)>($i1);

        if $z1 == 0 goto label16;

        i0 = r30.<android.os.incremental.V4Signature$SigningInfo: int signatureAlgorithmId>;

        r0 = r30.<android.os.incremental.V4Signature$SigningInfo: byte[] signature>;

        r1 = r30.<android.os.incremental.V4Signature$SigningInfo: byte[] publicKey>;

        r2 = r30.<android.os.incremental.V4Signature$SigningInfo: byte[] certificate>;

        r32 = staticinvoke <android.util.apk.ApkSigningBlockUtils: java.lang.String getSignatureAlgorithmJcaKeyAlgorithm(int)>(i0);

        r33 = staticinvoke <android.util.apk.ApkSigningBlockUtils: android.util.Pair getSignatureAlgorithmJcaSignatureAlgorithm(int)>(i0);

        $r4 = r33.<android.util.Pair: java.lang.Object first>;

        r34 = (java.lang.String) $r4;

        $r5 = r33.<android.util.Pair: java.lang.Object second>;

        r35 = (java.security.spec.AlgorithmParameterSpec) $r5;

     label01:
        r36 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>(r32);

        r50 = new java.security.spec.X509EncodedKeySpec;

        specialinvoke r50.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>(r1);

        r38 = virtualinvoke r36.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>(r50);

        r39 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(r34);

        virtualinvoke r39.<java.security.Signature: void initVerify(java.security.PublicKey)>(r38);

     label02:
        if r35 == null goto label04;

     label03:
        virtualinvoke r39.<java.security.Signature: void setParameter(java.security.spec.AlgorithmParameterSpec)>(r35);

     label04:
        virtualinvoke r39.<java.security.Signature: void update(byte[])>(r31);

        z0 = virtualinvoke r39.<java.security.Signature: boolean verify(byte[])>(r0);

     label05:
        if z0 == 0 goto label12;

     label06:
        r40 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");

     label07:
        r51 = new java.io.ByteArrayInputStream;

        specialinvoke r51.<java.io.ByteArrayInputStream: void <init>(byte[])>(r2);

        $r11 = virtualinvoke r40.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>(r51);

        r42 = (java.security.cert.X509Certificate) $r11;

     label08:
        r52 = new android.util.apk.VerbatimX509Certificate;

        specialinvoke r52.<android.util.apk.VerbatimX509Certificate: void <init>(java.security.cert.X509Certificate,byte[])>(r42, r2);

        $r13 = virtualinvoke r52.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();

        $r14 = interfaceinvoke $r13.<java.security.PublicKey: byte[] getEncoded()>();

        $z2 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r1, $r14);

        if $z2 == 0 goto label09;

        r44 = r30.<android.os.incremental.V4Signature$SigningInfo: byte[] apkDigest>;

        r53 = new android.util.apk.ApkSignatureSchemeV4Verifier$VerifiedSigner;

        $r17 = newarray (java.security.cert.Certificate)[1];

        $r17[0] = r52;

        r62 = (java.security.cert.Certificate[]) $r17;

        specialinvoke r53.<android.util.apk.ApkSignatureSchemeV4Verifier$VerifiedSigner: void <init>(java.security.cert.Certificate[],byte[])>(r62, r44);

        return r53;

     label09:
        r54 = new java.lang.SecurityException;

        specialinvoke r54.<java.lang.SecurityException: void <init>(java.lang.String)>("Public key mismatch between certificate and signature record");

        throw r54;

     label10:
        $r27 := @caughtexception;

        r55 = new java.lang.SecurityException;

        specialinvoke r55.<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to decode certificate", $r27);

        throw r55;

     label11:
        $r18 := @caughtexception;

        r56 = new java.lang.RuntimeException;

        specialinvoke r56.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to obtain X.509 CertificateFactory", $r18);

        throw r56;

     label12:
        r57 = new java.lang.StringBuilder;

        specialinvoke r57.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34);

        virtualinvoke r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" signature did not verify");

        r58 = new java.lang.SecurityException;

        $r10 = virtualinvoke r57.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r58.<java.lang.SecurityException: void <init>(java.lang.String)>($r10);

        throw r58;

     label13:
        $r29 := @caughtexception;

        r48 = $r29;

        goto label15;

     label14:
        $r20 := @caughtexception;

        r48 = $r20;

     label15:
        r59 = new java.lang.StringBuilder;

        specialinvoke r59.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to verify ");

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34);

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" signature");

        r60 = new java.lang.SecurityException;

        $r26 = virtualinvoke r59.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r60.<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>($r26, r48);

        throw r60;

     label16:
        r61 = new java.lang.SecurityException;

        specialinvoke r61.<java.lang.SecurityException: void <init>(java.lang.String)>("No supported signatures found");

        throw r61;

        catch java.security.NoSuchAlgorithmException from label01 to label02 with label14;
        catch java.security.spec.InvalidKeySpecException from label01 to label02 with label14;
        catch java.security.InvalidKeyException from label01 to label02 with label14;
        catch java.security.InvalidAlgorithmParameterException from label01 to label02 with label14;
        catch java.security.SignatureException from label01 to label02 with label14;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label14;
        catch java.security.spec.InvalidKeySpecException from label03 to label04 with label14;
        catch java.security.InvalidKeyException from label03 to label04 with label14;
        catch java.security.InvalidAlgorithmParameterException from label03 to label04 with label14;
        catch java.security.SignatureException from label03 to label04 with label14;
        catch java.security.NoSuchAlgorithmException from label04 to label05 with label13;
        catch java.security.spec.InvalidKeySpecException from label04 to label05 with label13;
        catch java.security.InvalidKeyException from label04 to label05 with label13;
        catch java.security.InvalidAlgorithmParameterException from label04 to label05 with label13;
        catch java.security.SignatureException from label04 to label05 with label13;
        catch java.security.cert.CertificateException from label06 to label07 with label11;
        catch java.security.cert.CertificateException from label07 to label08 with label10;
    }
}
