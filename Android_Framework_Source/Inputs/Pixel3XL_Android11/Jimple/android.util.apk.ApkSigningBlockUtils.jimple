final class android.util.apk.ApkSigningBlockUtils extends java.lang.Object
{
    private static final long APK_SIG_BLOCK_MAGIC_HI;
    private static final long APK_SIG_BLOCK_MAGIC_LO;
    private static final int APK_SIG_BLOCK_MIN_SIZE;
    private static final int CHUNK_SIZE_BYTES;
    static final int CONTENT_DIGEST_CHUNKED_SHA256;
    static final int CONTENT_DIGEST_CHUNKED_SHA512;
    static final int CONTENT_DIGEST_SHA256;
    static final int CONTENT_DIGEST_VERITY_CHUNKED_SHA256;
    static final int SIGNATURE_DSA_WITH_SHA256;
    static final int SIGNATURE_ECDSA_WITH_SHA256;
    static final int SIGNATURE_ECDSA_WITH_SHA512;
    static final int SIGNATURE_RSA_PKCS1_V1_5_WITH_SHA256;
    static final int SIGNATURE_RSA_PKCS1_V1_5_WITH_SHA512;
    static final int SIGNATURE_RSA_PSS_WITH_SHA256;
    static final int SIGNATURE_RSA_PSS_WITH_SHA512;
    static final int SIGNATURE_VERITY_DSA_WITH_SHA256;
    static final int SIGNATURE_VERITY_ECDSA_WITH_SHA256;
    static final int SIGNATURE_VERITY_RSA_PKCS1_V1_5_WITH_SHA256;
    private static final int[] V4_CONTENT_DIGEST_ALGORITHMS;

    static void <clinit>()
    {
        int[] $r0;

        <android.util.apk.ApkSigningBlockUtils: int SIGNATURE_VERITY_RSA_PKCS1_V1_5_WITH_SHA256> = 1057;

        <android.util.apk.ApkSigningBlockUtils: int SIGNATURE_VERITY_ECDSA_WITH_SHA256> = 1059;

        <android.util.apk.ApkSigningBlockUtils: int SIGNATURE_VERITY_DSA_WITH_SHA256> = 1061;

        <android.util.apk.ApkSigningBlockUtils: int SIGNATURE_RSA_PSS_WITH_SHA512> = 258;

        <android.util.apk.ApkSigningBlockUtils: int SIGNATURE_RSA_PSS_WITH_SHA256> = 257;

        <android.util.apk.ApkSigningBlockUtils: int SIGNATURE_RSA_PKCS1_V1_5_WITH_SHA512> = 260;

        <android.util.apk.ApkSigningBlockUtils: int SIGNATURE_RSA_PKCS1_V1_5_WITH_SHA256> = 259;

        <android.util.apk.ApkSigningBlockUtils: int SIGNATURE_ECDSA_WITH_SHA512> = 514;

        <android.util.apk.ApkSigningBlockUtils: int SIGNATURE_ECDSA_WITH_SHA256> = 513;

        <android.util.apk.ApkSigningBlockUtils: int SIGNATURE_DSA_WITH_SHA256> = 769;

        <android.util.apk.ApkSigningBlockUtils: int CONTENT_DIGEST_VERITY_CHUNKED_SHA256> = 3;

        <android.util.apk.ApkSigningBlockUtils: int CONTENT_DIGEST_SHA256> = 4;

        <android.util.apk.ApkSigningBlockUtils: int CONTENT_DIGEST_CHUNKED_SHA512> = 2;

        <android.util.apk.ApkSigningBlockUtils: int CONTENT_DIGEST_CHUNKED_SHA256> = 1;

        <android.util.apk.ApkSigningBlockUtils: int CHUNK_SIZE_BYTES> = 1048576;

        <android.util.apk.ApkSigningBlockUtils: int APK_SIG_BLOCK_MIN_SIZE> = 32;

        <android.util.apk.ApkSigningBlockUtils: long APK_SIG_BLOCK_MAGIC_LO> = 2334950737559900225L;

        <android.util.apk.ApkSigningBlockUtils: long APK_SIG_BLOCK_MAGIC_HI> = 3617552046287187010L;

        $r0 = newarray (int)[3];

        $r0[0] = 2;

        $r0[1] = 3;

        $r0[2] = 1;

        <android.util.apk.ApkSigningBlockUtils: int[] V4_CONTENT_DIGEST_ALGORITHMS> = $r0;

        return;
    }

    private void <init>()
    {
        android.util.apk.ApkSigningBlockUtils r0;

        r0 := @this: android.util.apk.ApkSigningBlockUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static void checkByteOrderLittleEndian(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0;
        java.nio.ByteOrder $r1, $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: java.nio.ByteBuffer;

        $r1 = virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteOrder order()>();

        $r2 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        if $r1 != $r2 goto label1;

        return;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ByteBuffer byte order must be little endian");

        throw $r3;
    }

    private static int compareContentDigestAlgorithm(int, int)
    {
        int i0, i1;
        java.lang.StringBuilder $r0, $r5, $r10, $r15;
        java.lang.IllegalArgumentException $r3, $r8, $r13, $r18;
        java.lang.String $r4, $r9, $r14, $r19;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 == 1 goto label09;

        if i0 == 2 goto label05;

        if i0 != 3 goto label04;

        if i1 == 1 goto label03;

        if i1 == 2 goto label02;

        if i1 != 3 goto label01;

        return 0;

     label01:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown digestAlgorithm2: ");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r18 = new java.lang.IllegalArgumentException;

        $r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r18;

     label02:
        return -1;

     label03:
        return 1;

     label04:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown digestAlgorithm1: ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = new java.lang.IllegalArgumentException;

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r13;

     label05:
        if i1 == 1 goto label08;

        if i1 == 2 goto label07;

        if i1 != 3 goto label06;

        goto label08;

     label06:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown digestAlgorithm2: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label07:
        return 0;

     label08:
        return 1;

     label09:
        if i1 == 1 goto label12;

        if i1 == 2 goto label11;

        if i1 != 3 goto label10;

        goto label11;

     label10:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown digestAlgorithm2: ");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label11:
        return -1;

     label12:
        return 0;
    }

    static int compareSignatureAlgorithm(int, int)
    {
        int i0, i1, $i2, $i3, $i4;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = staticinvoke <android.util.apk.ApkSigningBlockUtils: int getSignatureAlgorithmContentDigestAlgorithm(int)>(i0);

        $i3 = staticinvoke <android.util.apk.ApkSigningBlockUtils: int getSignatureAlgorithmContentDigestAlgorithm(int)>(i1);

        $i4 = staticinvoke <android.util.apk.ApkSigningBlockUtils: int compareContentDigestAlgorithm(int,int)>($i2, $i3);

        return $i4;
    }

    private static byte[][] computeContentDigestsPer1MbChunk(int[], android.util.apk.DataSource[]) throws java.security.DigestException
    {
        int i0, i1, i2, i3, $i6, $i7, $i9, $i10, $i11, $i12, $i15, $i16, $i18, $i19, $i20, $i21, $i22, $i23, $i24, i29, i30, i31, i33, i35, i36, i37, i40, i41, i42, i43, i44, i45;
        byte[][] r0, r55;
        byte[] r1, $r9, r44, r45, r56;
        java.security.MessageDigest r2, $r18, $r19, r58;
        long l4, $l14, $l17, $l26, $l27, l28, l38, l39;
        byte $b5, $b8, $b13, $b25;
        java.lang.StringBuilder $r3, $r10, $r22, $r28, $r34;
        java.security.DigestException $r6, $r39;
        java.lang.String $r7, $r12, $r17, $r26, $r32, $r40, r47, r57;
        android.util.apk.ApkSigningBlockUtils$MultipleDigestDataDigester $r8;
        java.lang.RuntimeException $r16, $r25, $r31;
        android.util.apk.DataSource $r20, r51;
        java.lang.Throwable $r21, $r27, $r33;
        int[] r41;
        android.util.apk.DataSource[] r42;
        java.security.MessageDigest[] r46;

        r41 := @parameter0: int[];

        r42 := @parameter1: android.util.apk.DataSource[];

        l28 = 0L;

        i29 = lengthof r42;

        i30 = 0;

     label01:
        if i30 >= i29 goto label02;

        $r20 = r42[i30];

        $l26 = interfaceinvoke $r20.<android.util.apk.DataSource: long size()>();

        $l27 = staticinvoke <android.util.apk.ApkSigningBlockUtils: long getChunkCount(long)>($l26);

        l28 = l28 + $l27;

        i30 = i30 + 1;

        goto label01;

     label02:
        $b5 = l28 cmp 2097151L;

        if $b5 >= 0 goto label26;

        i0 = (int) l28;

        $i6 = lengthof r41;

        r0 = newarray (byte[])[$i6];

        i31 = 0;

     label03:
        $i7 = lengthof r41;

        if i31 >= $i7 goto label04;

        $i21 = r41[i31];

        $i22 = staticinvoke <android.util.apk.ApkSigningBlockUtils: int getContentDigestAlgorithmOutputSizeBytes(int)>($i21);

        $i23 = i0 * $i22;

        $i24 = $i23 + 5;

        r44 = newarray (byte)[$i24];

        $b25 = (byte) 90;

        r44[0] = $b25;

        staticinvoke <android.util.apk.ApkSigningBlockUtils: void setUnsignedInt32LittleEndian(int,byte[],int)>(i0, r44, 1);

        r0[i31] = r44;

        i31 = i31 + 1;

        goto label03;

     label04:
        r45 = newarray (byte)[5];

        $b8 = (byte) -91;

        r45[0] = $b8;

        $i9 = lengthof r41;

        r46 = newarray (java.security.MessageDigest)[$i9];

        i33 = 0;

     label05:
        $i10 = lengthof r41;

        if i33 >= $i10 goto label09;

        $i20 = r41[i33];

        r47 = staticinvoke <android.util.apk.ApkSigningBlockUtils: java.lang.String getContentDigestAlgorithmJcaDigestAlgorithm(int)>($i20);

     label06:
        $r19 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(r47);

        r46[i33] = $r19;

     label07:
        i33 = i33 + 1;

        goto label05;

     label08:
        $r27 := @caughtexception;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r47);

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" digest not supported");

        $r31 = new java.lang.RuntimeException;

        $r32 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r32, $r27);

        throw $r31;

     label09:
        $r8 = new android.util.apk.ApkSigningBlockUtils$MultipleDigestDataDigester;

        specialinvoke $r8.<android.util.apk.ApkSigningBlockUtils$MultipleDigestDataDigester: void <init>(java.security.MessageDigest[])>(r46);

        i1 = lengthof r42;

        i35 = 0;

        i36 = 0;

        i37 = 0;

     label10:
        if i35 >= i1 goto label20;

        r51 = r42[i35];

        l38 = interfaceinvoke r51.<android.util.apk.DataSource: long size()>();

        l39 = 0L;

     label11:
        $b13 = l38 cmp 0L;

        if $b13 <= 0 goto label19;

        $l14 = staticinvoke <java.lang.Math: long min(long,long)>(l38, 1048576L);

        i2 = (int) $l14;

        staticinvoke <android.util.apk.ApkSigningBlockUtils: void setUnsignedInt32LittleEndian(int,byte[],int)>(i2, r45, 1);

        i40 = 0;

     label12:
        $i15 = lengthof r46;

        if i40 >= $i15 goto label13;

        $r18 = r46[i40];

        virtualinvoke $r18.<java.security.MessageDigest: void update(byte[])>(r45);

        i40 = i40 + 1;

        goto label12;

     label13:
        interfaceinvoke r51.<android.util.apk.DataSource: void feedIntoDataDigester(android.util.apk.DataDigester,long,int)>($r8, l39, i2);

     label14:
        i41 = 0;

     label15:
        $i16 = lengthof r41;

        if i41 >= $i16 goto label17;

        i42 = r41[i41];

        r1 = r0[i41];

        i3 = staticinvoke <android.util.apk.ApkSigningBlockUtils: int getContentDigestAlgorithmOutputSizeBytes(int)>(i42);

        r2 = r46[i41];

        $i18 = i36 * i3;

        $i19 = $i18 + 5;

        i43 = virtualinvoke r2.<java.security.MessageDigest: int digest(byte[],int,int)>(r1, $i19, i3);

        if i43 != i3 goto label16;

        i41 = i41 + 1;

        goto label15;

     label16:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected output size of ");

        $r12 = virtualinvoke r2.<java.security.MessageDigest: java.lang.String getAlgorithm()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" digest: ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i43);

        $r16 = new java.lang.RuntimeException;

        $r17 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.String)>($r17);

        throw $r16;

     label17:
        l4 = (long) i2;

        $l17 = (long) i2;

        l38 = l38 - $l17;

        i36 = i36 + 1;

        l39 = l39 + l4;

        goto label11;

     label18:
        $r33 := @caughtexception;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to digest chunk #");

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i36);

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of section #");

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i37);

        $r39 = new java.security.DigestException;

        $r40 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r39.<java.security.DigestException: void <init>(java.lang.String,java.lang.Throwable)>($r40, $r33);

        throw $r39;

     label19:
        i37 = i37 + 1;

        i35 = i35 + 1;

        goto label10;

     label20:
        $i11 = lengthof r41;

        r55 = newarray (byte[])[$i11];

        i44 = 0;

     label21:
        $i12 = lengthof r41;

        if i44 >= $i12 goto label25;

        i45 = r41[i44];

        r56 = r0[i44];

        r57 = staticinvoke <android.util.apk.ApkSigningBlockUtils: java.lang.String getContentDigestAlgorithmJcaDigestAlgorithm(int)>(i45);

     label22:
        r58 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>(r57);

     label23:
        $r9 = virtualinvoke r58.<java.security.MessageDigest: byte[] digest(byte[])>(r56);

        r55[i44] = $r9;

        i44 = i44 + 1;

        goto label21;

     label24:
        $r21 := @caughtexception;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r57);

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" digest not supported");

        $r25 = new java.lang.RuntimeException;

        $r26 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r26, $r21);

        throw $r25;

     label25:
        return r55;

     label26:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Too many chunks: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l28);

        $r6 = new java.security.DigestException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.security.DigestException: void <init>(java.lang.String)>($r7);

        throw $r6;

        catch java.security.NoSuchAlgorithmException from label06 to label07 with label08;
        catch java.io.IOException from label13 to label14 with label18;
        catch java.security.NoSuchAlgorithmException from label22 to label23 with label24;
    }

    static java.nio.ByteBuffer findApkSignatureSchemeBlock(java.nio.ByteBuffer, int) throws android.util.apk.SignatureNotFoundException
    {
        int i0, i2, i3, $i4, $i5, $i6, $i9, $i10, $i11, $i12, $i13, i14;
        long l1;
        boolean $z0;
        java.lang.StringBuilder $r1, $r7, $r12, $r19;
        android.util.apk.SignatureNotFoundException $r5, $r10, $r17, $r26;
        java.lang.String $r6, $r11, $r18, $r27;
        byte $b7, $b8;
        java.nio.ByteBuffer $r29, r30, r31;

        r30 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        staticinvoke <android.util.apk.ApkSigningBlockUtils: void checkByteOrderLittleEndian(java.nio.ByteBuffer)>(r30);

        $i4 = virtualinvoke r30.<java.nio.ByteBuffer: int capacity()>();

        $i5 = $i4 - 24;

        r31 = staticinvoke <android.util.apk.ApkSigningBlockUtils: java.nio.ByteBuffer sliceFromTo(java.nio.ByteBuffer,int,int)>(r30, 8, $i5);

        i14 = 0;

     label1:
        $z0 = virtualinvoke r31.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 == 0 goto label6;

        i14 = i14 + 1;

        $i6 = virtualinvoke r31.<java.nio.ByteBuffer: int remaining()>();

        if $i6 < 8 goto label5;

        l1 = virtualinvoke r31.<java.nio.ByteBuffer: long getLong()>();

        $b7 = l1 cmp 4L;

        if $b7 < 0 goto label4;

        $b8 = l1 cmp 2147483647L;

        if $b8 > 0 goto label4;

        i2 = (int) l1;

        i3 = virtualinvoke r31.<java.nio.ByteBuffer: int position()>();

        $i9 = virtualinvoke r31.<java.nio.ByteBuffer: int remaining()>();

        if i2 > $i9 goto label3;

        $i11 = virtualinvoke r31.<java.nio.ByteBuffer: int getInt()>();

        if $i11 != i0 goto label2;

        $i13 = i2 - 4;

        $r29 = staticinvoke <android.util.apk.ApkSigningBlockUtils: java.nio.ByteBuffer getByteBuffer(java.nio.ByteBuffer,int)>(r31, $i13);

        return $r29;

     label2:
        $i12 = i3 + i2;

        virtualinvoke r31.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i12);

        goto label1;

     label3:
        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("APK Signing Block entry #");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i14);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" size out of range: ");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", available: ");

        $i10 = virtualinvoke r31.<java.nio.ByteBuffer: int remaining()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r26 = new android.util.apk.SignatureNotFoundException;

        $r27 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<android.util.apk.SignatureNotFoundException: void <init>(java.lang.String)>($r27);

        throw $r26;

     label4:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("APK Signing Block entry #");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i14);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" size out of range: ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r17 = new android.util.apk.SignatureNotFoundException;

        $r18 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<android.util.apk.SignatureNotFoundException: void <init>(java.lang.String)>($r18);

        throw $r17;

     label5:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Insufficient data to read size of APK Signing Block entry #");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i14);

        $r10 = new android.util.apk.SignatureNotFoundException;

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<android.util.apk.SignatureNotFoundException: void <init>(java.lang.String)>($r11);

        throw $r10;

     label6:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No block with ID ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in APK Signing Block.");

        $r5 = new android.util.apk.SignatureNotFoundException;

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<android.util.apk.SignatureNotFoundException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    static android.util.Pair findApkSigningBlock(java.io.RandomAccessFile, long) throws java.io.IOException, android.util.apk.SignatureNotFoundException
    {
        long l0, l2, $l5, $l6, $l9, $l11, $l14, $l17, $l18, l23, l24;
        int i1, $i4, $i7, $i8, $i13, $i20, $i21;
        byte $b3, $b10, $b12, $b15, $b16, $b19, $b22;
        java.lang.StringBuilder $r0, $r9, $r14, $r22;
        android.util.apk.SignatureNotFoundException $r3, $r8, $r12, $r17, $r27;
        java.lang.String $r4, $r13, $r18, $r28;
        java.nio.ByteOrder $r5, $r19;
        byte[] $r7, $r21;
        java.lang.Long $r29;
        android.util.Pair $r30;
        java.io.RandomAccessFile r31;
        java.nio.ByteBuffer r32, r33;

        r31 := @parameter0: java.io.RandomAccessFile;

        l23 := @parameter1: long;

        $b3 = l23 cmp 32L;

        if $b3 < 0 goto label5;

        r32 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(24);

        $r5 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        virtualinvoke r32.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r5);

        $i4 = virtualinvoke r32.<java.nio.ByteBuffer: int capacity()>();

        $l5 = (long) $i4;

        $l6 = l23 - $l5;

        virtualinvoke r31.<java.io.RandomAccessFile: void seek(long)>($l6);

        $r7 = virtualinvoke r32.<java.nio.ByteBuffer: byte[] array()>();

        $i7 = virtualinvoke r32.<java.nio.ByteBuffer: int arrayOffset()>();

        $i8 = virtualinvoke r32.<java.nio.ByteBuffer: int capacity()>();

        virtualinvoke r31.<java.io.RandomAccessFile: void readFully(byte[],int,int)>($r7, $i7, $i8);

        $l9 = virtualinvoke r32.<java.nio.ByteBuffer: long getLong(int)>(8);

        $b10 = $l9 cmp 2334950737559900225L;

        if $b10 != 0 goto label4;

        $l11 = virtualinvoke r32.<java.nio.ByteBuffer: long getLong(int)>(16);

        $b12 = $l11 cmp 3617552046287187010L;

        if $b12 != 0 goto label4;

        l0 = virtualinvoke r32.<java.nio.ByteBuffer: long getLong(int)>(0);

        $i13 = virtualinvoke r32.<java.nio.ByteBuffer: int capacity()>();

        $l14 = (long) $i13;

        $b15 = l0 cmp $l14;

        if $b15 < 0 goto label3;

        $b16 = l0 cmp 2147483639L;

        if $b16 > 0 goto label3;

        $l17 = 8L + l0;

        i1 = (int) $l17;

        $l18 = (long) i1;

        l24 = l23 - $l18;

        $b19 = l24 cmp 0L;

        if $b19 < 0 goto label2;

        r33 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(i1);

        $r19 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        virtualinvoke r33.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r19);

        virtualinvoke r31.<java.io.RandomAccessFile: void seek(long)>(l24);

        $r21 = virtualinvoke r33.<java.nio.ByteBuffer: byte[] array()>();

        $i20 = virtualinvoke r33.<java.nio.ByteBuffer: int arrayOffset()>();

        $i21 = virtualinvoke r33.<java.nio.ByteBuffer: int capacity()>();

        virtualinvoke r31.<java.io.RandomAccessFile: void readFully(byte[],int,int)>($r21, $i20, $i21);

        l2 = virtualinvoke r33.<java.nio.ByteBuffer: long getLong(int)>(0);

        $b22 = l2 cmp l0;

        if $b22 != 0 goto label1;

        $r29 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l24);

        $r30 = staticinvoke <android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>(r33, $r29);

        return $r30;

     label1:
        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("APK Signing Block sizes in header and footer do not match: ");

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" vs ");

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r27 = new android.util.apk.SignatureNotFoundException;

        $r28 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<android.util.apk.SignatureNotFoundException: void <init>(java.lang.String)>($r28);

        throw $r27;

     label2:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("APK Signing Block offset out of range: ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l24);

        $r17 = new android.util.apk.SignatureNotFoundException;

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<android.util.apk.SignatureNotFoundException: void <init>(java.lang.String)>($r18);

        throw $r17;

     label3:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("APK Signing Block size out of range: ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r12 = new android.util.apk.SignatureNotFoundException;

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<android.util.apk.SignatureNotFoundException: void <init>(java.lang.String)>($r13);

        throw $r12;

     label4:
        $r8 = new android.util.apk.SignatureNotFoundException;

        specialinvoke $r8.<android.util.apk.SignatureNotFoundException: void <init>(java.lang.String)>("No APK Signing Block before ZIP Central Directory");

        throw $r8;

     label5:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("APK too small for APK Signing Block. ZIP Central Directory offset: ");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l23);

        $r3 = new android.util.apk.SignatureNotFoundException;

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<android.util.apk.SignatureNotFoundException: void <init>(java.lang.String)>($r4);

        throw $r3;
    }

    static android.util.apk.SignatureInfo findSignature(java.io.RandomAccessFile, int) throws java.io.IOException, android.util.apk.SignatureNotFoundException
    {
        int i0;
        java.nio.ByteBuffer r0, $r9, r13;
        long l1, l2, l3;
        java.lang.Object $r1, $r2, $r5, $r6;
        java.lang.Long $r3, $r7;
        boolean $z0;
        android.util.apk.SignatureNotFoundException $r4;
        android.util.apk.SignatureInfo $r8;
        java.io.RandomAccessFile r10;
        android.util.Pair r11, r12;

        r10 := @parameter0: java.io.RandomAccessFile;

        i0 := @parameter1: int;

        r11 = staticinvoke <android.util.apk.ApkSigningBlockUtils: android.util.Pair getEocd(java.io.RandomAccessFile)>(r10);

        $r1 = r11.<android.util.Pair: java.lang.Object first>;

        r0 = (java.nio.ByteBuffer) $r1;

        $r2 = r11.<android.util.Pair: java.lang.Object second>;

        $r3 = (java.lang.Long) $r2;

        l1 = virtualinvoke $r3.<java.lang.Long: long longValue()>();

        $z0 = staticinvoke <android.util.apk.ZipUtils: boolean isZip64EndOfCentralDirectoryLocatorPresent(java.io.RandomAccessFile,long)>(r10, l1);

        if $z0 != 0 goto label1;

        l2 = staticinvoke <android.util.apk.ApkSigningBlockUtils: long getCentralDirOffset(java.nio.ByteBuffer,long)>(r0, l1);

        r12 = staticinvoke <android.util.apk.ApkSigningBlockUtils: android.util.Pair findApkSigningBlock(java.io.RandomAccessFile,long)>(r10, l2);

        $r5 = r12.<android.util.Pair: java.lang.Object first>;

        r13 = (java.nio.ByteBuffer) $r5;

        $r6 = r12.<android.util.Pair: java.lang.Object second>;

        $r7 = (java.lang.Long) $r6;

        l3 = virtualinvoke $r7.<java.lang.Long: long longValue()>();

        $r8 = new android.util.apk.SignatureInfo;

        $r9 = staticinvoke <android.util.apk.ApkSigningBlockUtils: java.nio.ByteBuffer findApkSignatureSchemeBlock(java.nio.ByteBuffer,int)>(r13, i0);

        specialinvoke $r8.<android.util.apk.SignatureInfo: void <init>(java.nio.ByteBuffer,long,long,long,java.nio.ByteBuffer)>($r9, l3, l2, l1, r0);

        return $r8;

     label1:
        $r4 = new android.util.apk.SignatureNotFoundException;

        specialinvoke $r4.<android.util.apk.SignatureNotFoundException: void <init>(java.lang.String)>("ZIP64 APK not supported");

        throw $r4;
    }

    static java.nio.ByteBuffer getByteBuffer(java.nio.ByteBuffer, int) throws java.nio.BufferUnderflowException
    {
        int i0, i1, i2, i3;
        java.lang.StringBuilder $r0;
        java.lang.IllegalArgumentException $r3;
        java.lang.String $r4;
        java.nio.BufferUnderflowException $r5;
        java.nio.ByteOrder $r7;
        java.lang.Throwable $r11;
        java.nio.ByteBuffer r13, r14;

        r13 := @parameter0: java.nio.ByteBuffer;

        i2 := @parameter1: int;

        if i2 < 0 goto label5;

        i0 = virtualinvoke r13.<java.nio.ByteBuffer: int limit()>();

        i1 = virtualinvoke r13.<java.nio.ByteBuffer: int position()>();

        i3 = i1 + i2;

        if i3 < i1 goto label4;

        if i3 > i0 goto label4;

        virtualinvoke r13.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(i3);

     label1:
        r14 = virtualinvoke r13.<java.nio.ByteBuffer: java.nio.ByteBuffer slice()>();

        $r7 = virtualinvoke r13.<java.nio.ByteBuffer: java.nio.ByteOrder order()>();

        virtualinvoke r14.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r7);

        virtualinvoke r13.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i3);

     label2:
        virtualinvoke r13.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(i0);

        return r14;

     label3:
        $r11 := @caughtexception;

        virtualinvoke r13.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(i0);

        throw $r11;

     label4:
        $r5 = new java.nio.BufferUnderflowException;

        specialinvoke $r5.<java.nio.BufferUnderflowException: void <init>()>();

        throw $r5;

     label5:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("size: ");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    static long getCentralDirOffset(java.nio.ByteBuffer, long) throws android.util.apk.SignatureNotFoundException
    {
        long l0, l1, $l3, $l4;
        byte $b2, $b5;
        java.lang.StringBuilder $r0;
        android.util.apk.SignatureNotFoundException $r5, $r7;
        java.lang.String $r6;
        java.nio.ByteBuffer r8;

        r8 := @parameter0: java.nio.ByteBuffer;

        l0 := @parameter1: long;

        l1 = staticinvoke <android.util.apk.ZipUtils: long getZipEocdCentralDirectoryOffset(java.nio.ByteBuffer)>(r8);

        $b2 = l1 cmp l0;

        if $b2 > 0 goto label2;

        $l3 = staticinvoke <android.util.apk.ZipUtils: long getZipEocdCentralDirectorySizeBytes(java.nio.ByteBuffer)>(r8);

        $l4 = l1 + $l3;

        $b5 = $l4 cmp l0;

        if $b5 != 0 goto label1;

        return l1;

     label1:
        $r7 = new android.util.apk.SignatureNotFoundException;

        specialinvoke $r7.<android.util.apk.SignatureNotFoundException: void <init>(java.lang.String)>("ZIP Central Directory is not immediately followed by End of Central Directory");

        throw $r7;

     label2:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ZIP Central Directory offset out of range: ");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". ZIP End of Central Directory offset: ");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r5 = new android.util.apk.SignatureNotFoundException;

        $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<android.util.apk.SignatureNotFoundException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    private static long getChunkCount(long)
    {
        long l0, $l1, $l2, $l3;

        l0 := @parameter0: long;

        $l1 = l0 + 1048576L;

        $l2 = $l1 - 1L;

        $l3 = $l2 / 1048576L;

        return $l3;
    }

    static java.lang.String getContentDigestAlgorithmJcaDigestAlgorithm(int)
    {
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5;

        i0 := @parameter0: int;

        if i0 == 1 goto label3;

        if i0 == 2 goto label2;

        if i0 != 3 goto label1;

        goto label3;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown content digest algorthm: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label2:
        return "SHA-512";

     label3:
        return "SHA-256";
    }

    private static int getContentDigestAlgorithmOutputSizeBytes(int)
    {
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5;

        i0 := @parameter0: int;

        if i0 == 1 goto label3;

        if i0 == 2 goto label2;

        if i0 != 3 goto label1;

        goto label3;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown content digest algorthm: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label2:
        return 64;

     label3:
        return 32;
    }

    static android.util.Pair getEocd(java.io.RandomAccessFile) throws java.io.IOException, android.util.apk.SignatureNotFoundException
    {
        android.util.apk.SignatureNotFoundException $r0;
        java.io.RandomAccessFile r1;
        android.util.Pair r2;

        r1 := @parameter0: java.io.RandomAccessFile;

        r2 = staticinvoke <android.util.apk.ZipUtils: android.util.Pair findZipEndOfCentralDirectoryRecord(java.io.RandomAccessFile)>(r1);

        if r2 == null goto label1;

        return r2;

     label1:
        $r0 = new android.util.apk.SignatureNotFoundException;

        specialinvoke $r0.<android.util.apk.SignatureNotFoundException: void <init>(java.lang.String)>("Not an APK file: ZIP End of Central Directory record not found");

        throw $r0;
    }

    static java.nio.ByteBuffer getLengthPrefixedSlice(java.nio.ByteBuffer) throws java.io.IOException
    {
        java.nio.ByteBuffer r0, $r14;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.StringBuilder $r1, $r7;
        java.io.IOException $r4, $r12;
        java.lang.String $r5, $r13;
        java.lang.IllegalArgumentException $r6;

        r0 := @parameter0: java.nio.ByteBuffer;

        $i1 = virtualinvoke r0.<java.nio.ByteBuffer: int remaining()>();

        if $i1 < 4 goto label3;

        i0 = virtualinvoke r0.<java.nio.ByteBuffer: int getInt()>();

        if i0 < 0 goto label2;

        $i3 = virtualinvoke r0.<java.nio.ByteBuffer: int remaining()>();

        if i0 > $i3 goto label1;

        $r14 = staticinvoke <android.util.apk.ApkSigningBlockUtils: java.nio.ByteBuffer getByteBuffer(java.nio.ByteBuffer,int)>(r0, i0);

        return $r14;

     label1:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Length-prefixed field longer than remaining buffer. Field length: ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", remaining: ");

        $i4 = virtualinvoke r0.<java.nio.ByteBuffer: int remaining()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r12 = new java.io.IOException;

        $r13 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>($r13);

        throw $r12;

     label2:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Negative length");

        throw $r6;

     label3:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Remaining buffer too short to contain length of length-prefixed field. Remaining: ");

        $i2 = virtualinvoke r0.<java.nio.ByteBuffer: int remaining()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r4 = new java.io.IOException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    static int getSignatureAlgorithmContentDigestAlgorithm(int)
    {
        int i0, $i1;
        java.lang.StringBuilder $r1;
        long $l2;
        java.lang.String $r3, $r6;
        java.lang.IllegalArgumentException $r5;

        i0 := @parameter0: int;

        if i0 == 513 goto label4;

        if i0 == 514 goto label3;

        if i0 == 769 goto label4;

        if i0 == 1057 goto label2;

        if i0 == 1059 goto label2;

        if i0 == 1061 goto label2;

        tableswitch(i0)
        {
            case 257: goto label4;
            case 258: goto label3;
            case 259: goto label4;
            case 260: goto label3;
            default: goto label1;
        };

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown signature algorithm: 0x");

        $i1 = i0 & -1;

        $l2 = (long) $i1;

        $r3 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label2:
        return 3;

     label3:
        return 2;

     label4:
        return 1;
    }

    static java.lang.String getSignatureAlgorithmJcaKeyAlgorithm(int)
    {
        int i0, $i1;
        java.lang.StringBuilder $r1;
        long $l2;
        java.lang.String $r3, $r6;
        java.lang.IllegalArgumentException $r5;

        i0 := @parameter0: int;

        if i0 == 513 goto label4;

        if i0 == 514 goto label4;

        if i0 == 769 goto label3;

        if i0 == 1057 goto label2;

        if i0 == 1059 goto label4;

        if i0 == 1061 goto label3;

        tableswitch(i0)
        {
            case 257: goto label2;
            case 258: goto label2;
            case 259: goto label2;
            case 260: goto label2;
            default: goto label1;
        };

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown signature algorithm: 0x");

        $i1 = i0 & -1;

        $l2 = (long) $i1;

        $r3 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label2:
        return "RSA";

     label3:
        return "DSA";

     label4:
        return "EC";
    }

    static android.util.Pair getSignatureAlgorithmJcaSignatureAlgorithm(int)
    {
        int i0, $i1;
        android.util.Pair $r1, $r2, $r3, $r4, $r5, $r8, $r11;
        java.security.spec.PSSParameterSpec $r6, $r9;
        java.security.spec.MGF1ParameterSpec $r7, $r10;
        java.lang.StringBuilder $r12;
        long $l2;
        java.lang.String $r14, $r17;
        java.lang.IllegalArgumentException $r16;

        i0 := @parameter0: int;

        if i0 == 513 goto label8;

        if i0 == 514 goto label7;

        if i0 == 769 goto label6;

        if i0 == 1057 goto label5;

        if i0 == 1059 goto label8;

        if i0 == 1061 goto label6;

        tableswitch(i0)
        {
            case 257: goto label4;
            case 258: goto label3;
            case 259: goto label5;
            case 260: goto label2;
            default: goto label1;
        };

     label1:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown signature algorithm: 0x");

        $i1 = i0 & -1;

        $l2 = (long) $i1;

        $r14 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l2);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = new java.lang.IllegalArgumentException;

        $r17 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r16;

     label2:
        $r5 = staticinvoke <android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>("SHA512withRSA", null);

        return $r5;

     label3:
        $r6 = new java.security.spec.PSSParameterSpec;

        $r7 = <java.security.spec.MGF1ParameterSpec: java.security.spec.MGF1ParameterSpec SHA512>;

        specialinvoke $r6.<java.security.spec.PSSParameterSpec: void <init>(java.lang.String,java.lang.String,java.security.spec.AlgorithmParameterSpec,int,int)>("SHA-512", "MGF1", $r7, 64, 1);

        $r8 = staticinvoke <android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>("SHA512withRSA/PSS", $r6);

        return $r8;

     label4:
        $r9 = new java.security.spec.PSSParameterSpec;

        $r10 = <java.security.spec.MGF1ParameterSpec: java.security.spec.MGF1ParameterSpec SHA256>;

        specialinvoke $r9.<java.security.spec.PSSParameterSpec: void <init>(java.lang.String,java.lang.String,java.security.spec.AlgorithmParameterSpec,int,int)>("SHA-256", "MGF1", $r10, 32, 1);

        $r11 = staticinvoke <android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>("SHA256withRSA/PSS", $r9);

        return $r11;

     label5:
        $r4 = staticinvoke <android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>("SHA256withRSA", null);

        return $r4;

     label6:
        $r3 = staticinvoke <android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>("SHA256withDSA", null);

        return $r3;

     label7:
        $r2 = staticinvoke <android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>("SHA512withECDSA", null);

        return $r2;

     label8:
        $r1 = staticinvoke <android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>("SHA256withECDSA", null);

        return $r1;
    }

    static boolean isSupportedSignatureAlgorithm(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 == 513 goto label2;

        if i0 == 514 goto label2;

        if i0 == 769 goto label2;

        if i0 == 1057 goto label2;

        if i0 == 1059 goto label2;

        if i0 == 1061 goto label2;

        tableswitch(i0)
        {
            case 257: goto label2;
            case 258: goto label2;
            case 259: goto label2;
            case 260: goto label2;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        return 1;
    }

    static byte[] parseVerityDigestAndVerifySourceLength(byte[], long, android.util.apk.SignatureInfo) throws java.lang.SecurityException
    {
        byte[] r0, $r11;
        long l0, $l4, $l5, $l6, $l7, $l8;
        java.nio.ByteBuffer r1, $r7;
        int $i1, $i2, $i3;
        java.lang.StringBuilder $r2;
        java.lang.SecurityException $r5, $r10;
        java.lang.String $r6;
        java.nio.ByteOrder $r8;
        byte $b9;
        android.util.apk.SignatureInfo r12;

        r0 := @parameter0: byte[];

        l0 := @parameter1: long;

        r12 := @parameter2: android.util.apk.SignatureInfo;

        $i2 = lengthof r0;

        $i1 = 32 + 8;

        if $i2 != $i1 goto label2;

        $r7 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r0);

        $r8 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        r1 = virtualinvoke $r7.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r8);

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(32);

        $l4 = virtualinvoke r1.<java.nio.ByteBuffer: long getLong()>();

        $l6 = r12.<android.util.apk.SignatureInfo: long centralDirOffset>;

        $l5 = r12.<android.util.apk.SignatureInfo: long apkSigningBlockOffset>;

        $l7 = $l6 - $l5;

        $l8 = l0 - $l7;

        $b9 = $l4 cmp $l8;

        if $b9 != 0 goto label1;

        $r11 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>(r0, 0, 32);

        return $r11;

     label1:
        $r10 = new java.lang.SecurityException;

        specialinvoke $r10.<java.lang.SecurityException: void <init>(java.lang.String)>("APK content size did not verify");

        throw $r10;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Verity digest size is wrong: ");

        $i3 = lengthof r0;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r5 = new java.lang.SecurityException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    static byte[] pickBestDigestForV4(java.util.Map)
    {
        java.util.Map r0;
        int[] r1;
        int i0, i1, i2;
        java.lang.Integer $r2, $r3;
        boolean $z0;
        java.lang.Object $r4;
        byte[] $r5;

        r0 := @parameter0: java.util.Map;

        r1 = <android.util.apk.ApkSigningBlockUtils: int[] V4_CONTENT_DIGEST_ALGORITHMS>;

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        i1 = r1[i2];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $z0 = interfaceinvoke r0.<java.util.Map: boolean containsKey(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r4 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        $r5 = (byte[]) $r4;

        return $r5;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return null;
    }

    static byte[] readLengthPrefixedByteArray(java.nio.ByteBuffer) throws java.io.IOException
    {
        java.nio.ByteBuffer r0;
        int i0, $i1, $i2;
        java.io.IOException $r1, $r7;
        java.lang.StringBuilder $r2;
        java.lang.String $r8;
        byte[] r10;

        r0 := @parameter0: java.nio.ByteBuffer;

        i0 = virtualinvoke r0.<java.nio.ByteBuffer: int getInt()>();

        if i0 < 0 goto label2;

        $i1 = virtualinvoke r0.<java.nio.ByteBuffer: int remaining()>();

        if i0 > $i1 goto label1;

        r10 = newarray (byte)[i0];

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r10);

        return r10;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Underflow while reading length-prefixed value. Length: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", available: ");

        $i2 = virtualinvoke r0.<java.nio.ByteBuffer: int remaining()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r7 = new java.io.IOException;

        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label2:
        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Negative length");

        throw $r1;
    }

    static void setUnsignedInt32LittleEndian(int, byte[], int)
    {
        int i0, i1, $i2, $i5, $i6, $i9, $i10, $i11, $i14, $i15, $i16, $i19;
        byte[] r0;
        byte $b3, $b4, $b7, $b8, $b12, $b13, $b17, $b18;

        i0 := @parameter0: int;

        r0 := @parameter1: byte[];

        i1 := @parameter2: int;

        $i2 = i0 & 255;

        $b3 = (byte) $i2;

        $b4 = (byte) $b3;

        r0[i1] = $b4;

        $i9 = i1 + 1;

        $i5 = i0 >>> 8;

        $i6 = $i5 & 255;

        $b7 = (byte) $i6;

        $b8 = (byte) $b7;

        r0[$i9] = $b8;

        $i14 = i1 + 2;

        $i10 = i0 >>> 16;

        $i11 = $i10 & 255;

        $b12 = (byte) $i11;

        $b13 = (byte) $b12;

        r0[$i14] = $b13;

        $i19 = i1 + 3;

        $i15 = i0 >>> 24;

        $i16 = $i15 & 255;

        $b17 = (byte) $i16;

        $b18 = (byte) $b17;

        r0[$i19] = $b18;

        return;
    }

    static java.nio.ByteBuffer sliceFromTo(java.nio.ByteBuffer, int, int)
    {
        int i0, i1, i2, $i3, i4, i5;
        java.lang.StringBuilder $r0, $r5, $r12;
        java.lang.IllegalArgumentException $r3, $r10, $r17;
        java.lang.String $r4, $r11, $r18;
        java.nio.ByteOrder $r22;
        java.lang.Throwable $r27;
        java.nio.ByteBuffer r31, r32;

        r31 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 < 0 goto label6;

        if i1 < i0 goto label5;

        i4 = virtualinvoke r31.<java.nio.ByteBuffer: int capacity()>();

        $i3 = virtualinvoke r31.<java.nio.ByteBuffer: int capacity()>();

        if i1 > $i3 goto label4;

        i2 = virtualinvoke r31.<java.nio.ByteBuffer: int limit()>();

        i5 = virtualinvoke r31.<java.nio.ByteBuffer: int position()>();

     label1:
        virtualinvoke r31.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0);

        virtualinvoke r31.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(i1);

        virtualinvoke r31.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i0);

        r32 = virtualinvoke r31.<java.nio.ByteBuffer: java.nio.ByteBuffer slice()>();

        $r22 = virtualinvoke r31.<java.nio.ByteBuffer: java.nio.ByteOrder order()>();

        virtualinvoke r32.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r22);

     label2:
        virtualinvoke r31.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0);

        virtualinvoke r31.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(i2);

        virtualinvoke r31.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i5);

        return r32;

     label3:
        $r27 := @caughtexception;

        virtualinvoke r31.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0);

        virtualinvoke r31.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(i2);

        virtualinvoke r31.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i5);

        throw $r27;

     label4:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("end > capacity: ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" > ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r17 = new java.lang.IllegalArgumentException;

        $r18 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r17;

     label5:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("end < start: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" < ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r10;

     label6:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("start: ");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    static void verifyIntegrity(java.util.Map, java.io.RandomAccessFile, android.util.apk.SignatureInfo) throws java.lang.SecurityException
    {
        java.io.RandomAccessFile r0;
        android.util.apk.SignatureInfo r1;
        boolean $z0, $z1, $z2, $z3, $z4, z5;
        java.lang.SecurityException $r3, $r8, $r24;
        android.util.ArrayMap $r4;
        java.lang.Integer $r5, $r6, $r7, $r9, $r13, $r14, $r18, $r19;
        java.lang.Object $r10, $r15, $r20;
        byte[] $r11, $r16, $r21;
        java.io.FileDescriptor $r12;
        java.lang.Throwable $r23;
        java.util.Map r25;

        r25 := @parameter0: java.util.Map;

        r0 := @parameter1: java.io.RandomAccessFile;

        r1 := @parameter2: android.util.apk.SignatureInfo;

        $z0 = interfaceinvoke r25.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label9;

        z5 = 1;

        $r4 = new android.util.ArrayMap;

        specialinvoke $r4.<android.util.ArrayMap: void <init>()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $z1 = interfaceinvoke r25.<java.util.Map: boolean containsKey(java.lang.Object)>($r5);

        if $z1 == 0 goto label1;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r20 = interfaceinvoke r25.<java.util.Map: java.lang.Object get(java.lang.Object)>($r19);

        $r21 = (byte[]) $r20;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, $r21);

     label1:
        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $z2 = interfaceinvoke r25.<java.util.Map: boolean containsKey(java.lang.Object)>($r6);

        if $z2 == 0 goto label2;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r15 = interfaceinvoke r25.<java.util.Map: java.lang.Object get(java.lang.Object)>($r14);

        $r16 = (byte[]) $r15;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r16);

     label2:
        $z3 = interfaceinvoke $r4.<java.util.Map: boolean isEmpty()>();

        if $z3 != 0 goto label6;

     label3:
        $r12 = virtualinvoke r0.<java.io.RandomAccessFile: java.io.FileDescriptor getFD()>();

        staticinvoke <android.util.apk.ApkSigningBlockUtils: void verifyIntegrityFor1MbChunkBasedAlgorithm(java.util.Map,java.io.FileDescriptor,android.util.apk.SignatureInfo)>($r4, $r12, r1);

     label4:
        z5 = 0;

        goto label6;

     label5:
        $r23 := @caughtexception;

        $r24 = new java.lang.SecurityException;

        specialinvoke $r24.<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>("Cannot get FD", $r23);

        throw $r24;

     label6:
        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $z4 = interfaceinvoke r25.<java.util.Map: boolean containsKey(java.lang.Object)>($r7);

        if $z4 == 0 goto label7;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r10 = interfaceinvoke r25.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9);

        $r11 = (byte[]) $r10;

        staticinvoke <android.util.apk.ApkSigningBlockUtils: void verifyIntegrityForVerityBasedAlgorithm(byte[],java.io.RandomAccessFile,android.util.apk.SignatureInfo)>($r11, r0, r1);

        z5 = 0;

     label7:
        if z5 != 0 goto label8;

        return;

     label8:
        $r8 = new java.lang.SecurityException;

        specialinvoke $r8.<java.lang.SecurityException: void <init>(java.lang.String)>("No known digest exists for integrity check");

        throw $r8;

     label9:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("No digests provided");

        throw $r3;

        catch java.io.IOException from label3 to label4 with label5;
    }

    private static void verifyIntegrityFor1MbChunkBasedAlgorithm(java.util.Map, java.io.FileDescriptor, android.util.apk.SignatureInfo) throws java.lang.SecurityException
    {
        int i0, $i7, $i8, $i9, i10, i11;
        android.util.apk.MemoryMappedFileDataSource $r2, $r3;
        long $l1, $l2, $l3, $l4, $l5, $l6;
        java.nio.ByteBuffer $r4, r28;
        java.nio.ByteOrder $r5;
        android.util.apk.ByteBufferDataSource $r7;
        java.util.Set $r8;
        boolean $z0, $z1;
        android.util.apk.DataSource[] $r9;
        java.lang.Integer $r10, $r21;
        java.lang.Object $r11, $r20;
        byte[] $r12, $r13;
        java.lang.StringBuilder $r14;
        java.lang.String $r15, $r19;
        java.lang.SecurityException $r18, $r23;
        java.lang.Throwable $r22;
        java.util.Map r24;
        java.io.FileDescriptor r25;
        android.util.apk.SignatureInfo r26;
        int[] r29;
        java.util.Iterator r30;
        byte[][] r31;

        r24 := @parameter0: java.util.Map;

        r25 := @parameter1: java.io.FileDescriptor;

        r26 := @parameter2: android.util.apk.SignatureInfo;

        $r2 = new android.util.apk.MemoryMappedFileDataSource;

        $l1 = r26.<android.util.apk.SignatureInfo: long apkSigningBlockOffset>;

        specialinvoke $r2.<android.util.apk.MemoryMappedFileDataSource: void <init>(java.io.FileDescriptor,long,long)>(r25, 0L, $l1);

        $r3 = new android.util.apk.MemoryMappedFileDataSource;

        $l5 = r26.<android.util.apk.SignatureInfo: long centralDirOffset>;

        $l3 = r26.<android.util.apk.SignatureInfo: long eocdOffset>;

        $l2 = r26.<android.util.apk.SignatureInfo: long centralDirOffset>;

        $l4 = $l3 - $l2;

        specialinvoke $r3.<android.util.apk.MemoryMappedFileDataSource: void <init>(java.io.FileDescriptor,long,long)>(r25, $l5, $l4);

        $r4 = r26.<android.util.apk.SignatureInfo: java.nio.ByteBuffer eocd>;

        r28 = virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.ByteBuffer duplicate()>();

        $r5 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        virtualinvoke r28.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r5);

        $l6 = r26.<android.util.apk.SignatureInfo: long apkSigningBlockOffset>;

        staticinvoke <android.util.apk.ZipUtils: void setZipEocdCentralDirectoryOffset(java.nio.ByteBuffer,long)>(r28, $l6);

        $r7 = new android.util.apk.ByteBufferDataSource;

        specialinvoke $r7.<android.util.apk.ByteBufferDataSource: void <init>(java.nio.ByteBuffer)>(r28);

        $i7 = interfaceinvoke r24.<java.util.Map: int size()>();

        r29 = newarray (int)[$i7];

        $r8 = interfaceinvoke r24.<java.util.Map: java.util.Set keySet()>();

        r30 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

        i10 = 0;

     label1:
        $z0 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r20 = interfaceinvoke r30.<java.util.Iterator: java.lang.Object next()>();

        $r21 = (java.lang.Integer) $r20;

        $i9 = virtualinvoke $r21.<java.lang.Integer: int intValue()>();

        r29[i10] = $i9;

        i10 = i10 + 1;

        goto label1;

     label2:
        $r9 = newarray (android.util.apk.DataSource)[3];

        $r9[0] = $r2;

        $r9[1] = $r3;

        $r9[2] = $r7;

        r31 = staticinvoke <android.util.apk.ApkSigningBlockUtils: byte[][] computeContentDigestsPer1MbChunk(int[],android.util.apk.DataSource[])>(r29, $r9);

     label3:
        i11 = 0;

     label4:
        $i8 = lengthof r29;

        if i11 >= $i8 goto label6;

        i0 = r29[i11];

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r11 = interfaceinvoke r24.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

        $r13 = (byte[]) $r11;

        $r12 = r31[i11];

        $z1 = staticinvoke <java.security.MessageDigest: boolean isEqual(byte[],byte[])>($r13, $r12);

        if $z1 == 0 goto label5;

        i11 = i11 + 1;

        goto label4;

     label5:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = staticinvoke <android.util.apk.ApkSigningBlockUtils: java.lang.String getContentDigestAlgorithmJcaDigestAlgorithm(int)>(i0);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" digest of contents did not verify");

        $r18 = new java.lang.SecurityException;

        $r19 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.SecurityException: void <init>(java.lang.String)>($r19);

        throw $r18;

     label6:
        return;

     label7:
        $r22 := @caughtexception;

        $r23 = new java.lang.SecurityException;

        specialinvoke $r23.<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to compute digest(s) of contents", $r22);

        throw $r23;

        catch java.security.DigestException from label2 to label3 with label7;
    }

    private static void verifyIntegrityForVerityBasedAlgorithm(byte[], java.io.RandomAccessFile, android.util.apk.SignatureInfo) throws java.lang.SecurityException
    {
        java.io.RandomAccessFile r0;
        android.util.apk.SignatureInfo r1;
        android.util.apk.ApkSigningBlockUtils$1 r2;
        long $l0;
        android.util.apk.VerityBuilder$VerityResult $r3;
        byte[] $r4, r7, r8;
        boolean $z0;
        java.lang.Throwable $r5;
        java.lang.SecurityException $r6, r9;

        r7 := @parameter0: byte[];

        r0 := @parameter1: java.io.RandomAccessFile;

        r1 := @parameter2: android.util.apk.SignatureInfo;

     label1:
        $l0 = virtualinvoke r0.<java.io.RandomAccessFile: long length()>();

        r8 = staticinvoke <android.util.apk.ApkSigningBlockUtils: byte[] parseVerityDigestAndVerifySourceLength(byte[],long,android.util.apk.SignatureInfo)>(r7, $l0, r1);

        r2 = new android.util.apk.ApkSigningBlockUtils$1;

        specialinvoke r2.<android.util.apk.ApkSigningBlockUtils$1: void <init>()>();

        $r3 = staticinvoke <android.util.apk.VerityBuilder: android.util.apk.VerityBuilder$VerityResult generateApkVerityTree(java.io.RandomAccessFile,android.util.apk.SignatureInfo,android.util.apk.ByteBufferFactory)>(r0, r1, r2);

        $r4 = $r3.<android.util.apk.VerityBuilder$VerityResult: byte[] rootHash>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r8, $r4);

        if $z0 == 0 goto label3;

     label2:
        return;

     label3:
        r9 = new java.lang.SecurityException;

        specialinvoke r9.<java.lang.SecurityException: void <init>(java.lang.String)>("APK verity digest of contents did not verify");

        throw r9;

     label4:
        $r5 := @caughtexception;

        $r6 = new java.lang.SecurityException;

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>("Error during verification", $r5);

        throw $r6;

        catch java.security.DigestException from label1 to label2 with label4;
        catch java.io.IOException from label1 to label2 with label4;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label4;
        catch java.security.DigestException from label3 to label4 with label4;
        catch java.io.IOException from label3 to label4 with label4;
        catch java.security.NoSuchAlgorithmException from label3 to label4 with label4;
    }
}
