public abstract class android.util.apk.SourceStampVerifier extends java.lang.Object
{
    private static final int APK_SIGNATURE_SCHEME_V2_BLOCK_ID;
    private static final int APK_SIGNATURE_SCHEME_V3_BLOCK_ID;
    private static final int SOURCE_STAMP_BLOCK_ID;
    private static final java.lang.String SOURCE_STAMP_CERTIFICATE_HASH_ZIP_ENTRY_NAME;
    private static final java.lang.String TAG;
    private static final int VERSION_APK_SIGNATURE_SCHEME_V2;
    private static final int VERSION_APK_SIGNATURE_SCHEME_V3;
    private static final int VERSION_JAR_SIGNATURE_SCHEME;

    private void <init>()
    {
        android.util.apk.SourceStampVerifier r0;

        r0 := @this: android.util.apk.SourceStampVerifier;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static void closeApkJar(android.util.jar.StrictJarFile)
    {
        java.lang.Throwable $r0;
        android.util.jar.StrictJarFile r1;

        r1 := @parameter0: android.util.jar.StrictJarFile;

        if r1 != null goto label1;

        return;

     label1:
        virtualinvoke r1.<android.util.jar.StrictJarFile: void close()>();

     label2:
        goto label4;

     label3:
        $r0 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SourceStampVerifier", "Could not close APK jar", $r0);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private static byte[] computeSha256Digest(byte[])
    {
        java.security.MessageDigest r0;
        java.lang.Throwable $r1;
        java.lang.RuntimeException $r2;
        byte[] r3, r4;

        r3 := @parameter0: byte[];

     label1:
        r0 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-256");

        virtualinvoke r0.<java.security.MessageDigest: void update(byte[])>(r3);

        r4 = virtualinvoke r0.<java.security.MessageDigest: byte[] digest()>();

     label2:
        return r4;

     label3:
        $r1 := @caughtexception;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to find SHA-256", $r1);

        throw $r2;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

    private static byte[] encodeApkContentDigests(java.util.List)
    {
        java.util.Iterator r0, r18;
        android.util.Pair r1, $r14;
        boolean $z0, $z1;
        java.nio.ByteOrder $r2;
        byte[] $r4, $r16, r20;
        java.lang.Object $r5, $r6, $r8, $r13, $r15;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.lang.Integer $r9;
        java.util.List r17;
        java.nio.ByteBuffer r19;

        r17 := @parameter0: java.util.List;

        i6 = 0;

        r18 = interfaceinvoke r17.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r13 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>();

        $r14 = (android.util.Pair) $r13;

        $r15 = $r14.<android.util.Pair: java.lang.Object second>;

        $r16 = (byte[]) $r15;

        $i4 = lengthof $r16;

        $i5 = $i4 + 12;

        i6 = i6 + $i5;

        goto label1;

     label2:
        r19 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(i6);

        $r2 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        virtualinvoke r19.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r2);

        r0 = interfaceinvoke r17.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r5 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        r1 = (android.util.Pair) $r5;

        $r6 = r1.<android.util.Pair: java.lang.Object second>;

        r20 = (byte[]) $r6;

        $i0 = lengthof r20;

        $i1 = $i0 + 8;

        virtualinvoke r19.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i1);

        $r8 = r1.<android.util.Pair: java.lang.Object first>;

        $r9 = (java.lang.Integer) $r8;

        $i2 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        virtualinvoke r19.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i2);

        $i3 = lengthof r20;

        virtualinvoke r19.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i3);

        virtualinvoke r19.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>(r20);

        goto label3;

     label4:
        $r4 = virtualinvoke r19.<java.nio.ByteBuffer: byte[] array()>();

        return $r4;
    }

    private static java.util.Map getApkContentDigestsFromSignatureBlock(java.nio.ByteBuffer) throws java.io.IOException
    {
        java.nio.ByteBuffer r1, $r3, $r4, r7, r8, r9;
        int i0, $i1;
        java.util.HashMap $r2;
        boolean $z0, $z1;
        java.lang.Integer $r5;
        byte[] r10;

        r7 := @parameter0: java.nio.ByteBuffer;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r8 = staticinvoke <android.util.apk.ApkSigningBlockUtils: java.nio.ByteBuffer getLengthPrefixedSlice(java.nio.ByteBuffer)>(r7);

     label1:
        $z0 = virtualinvoke r8.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 == 0 goto label4;

        $r3 = staticinvoke <android.util.apk.ApkSigningBlockUtils: java.nio.ByteBuffer getLengthPrefixedSlice(java.nio.ByteBuffer)>(r8);

        $r4 = staticinvoke <android.util.apk.ApkSigningBlockUtils: java.nio.ByteBuffer getLengthPrefixedSlice(java.nio.ByteBuffer)>($r3);

        r1 = staticinvoke <android.util.apk.ApkSigningBlockUtils: java.nio.ByteBuffer getLengthPrefixedSlice(java.nio.ByteBuffer)>($r4);

     label2:
        $z1 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z1 == 0 goto label3;

        r9 = staticinvoke <android.util.apk.ApkSigningBlockUtils: java.nio.ByteBuffer getLengthPrefixedSlice(java.nio.ByteBuffer)>(r1);

        i0 = virtualinvoke r9.<java.nio.ByteBuffer: int getInt()>();

        r10 = staticinvoke <android.util.apk.ApkSigningBlockUtils: byte[] readLengthPrefixedByteArray(java.nio.ByteBuffer)>(r9);

        $i1 = staticinvoke <android.util.apk.ApkSigningBlockUtils: int getSignatureAlgorithmContentDigestAlgorithm(int)>(i0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r10);

        goto label2;

     label3:
        goto label1;

     label4:
        return $r2;
    }

    private static java.util.List getApkDigests(java.util.Map)
    {
        java.util.Map$Entry r1;
        java.util.Set $r3;
        boolean $z0;
        android.util.apk.'-$$Lambda$SourceStampVerifier$iTSqvmQISl76OGD-hCNerhN3N2A' $r4;
        java.util.Comparator $r5;
        java.lang.Object $r6, $r7, $r9;
        java.lang.Integer $r8;
        byte[] $r10;
        android.util.Pair $r11;
        java.util.Map r12;
        java.util.Iterator r13;
        java.util.ArrayList r14;
        java.util.function.Function r15;

        r12 := @parameter0: java.util.Map;

        r14 = new java.util.ArrayList;

        specialinvoke r14.<java.util.ArrayList: void <init>()>();

        $r3 = interfaceinvoke r12.<java.util.Map: java.util.Set entrySet()>();

        r13 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        r1 = (java.util.Map$Entry) $r6;

        $r7 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (java.lang.Integer) $r7;

        $r9 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (byte[]) $r9;

        $r11 = staticinvoke <android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>($r8, $r10);

        interfaceinvoke r14.<java.util.List: boolean add(java.lang.Object)>($r11);

        goto label1;

     label2:
        $r4 = <android.util.apk._$$Lambda$SourceStampVerifier$iTSqvmQISl76OGD_hCNerhN3N2A: android.util.apk.'-$$Lambda$SourceStampVerifier$iTSqvmQISl76OGD-hCNerhN3N2A' INSTANCE>;

        r15 = (java.util.function.Function) $r4;

        $r5 = staticinvoke <java.util.Comparator: java.util.Comparator comparing(java.util.function.Function)>(r15);

        interfaceinvoke r14.<java.util.List: void sort(java.util.Comparator)>($r5);

        return r14;
    }

    private static byte[] getManifestBytes(android.util.jar.StrictJarFile) throws java.io.IOException
    {
        android.util.jar.StrictJarFile r0;
        java.util.zip.ZipEntry r1;
        java.io.InputStream $r2;
        byte[] $r3;

        r0 := @parameter0: android.util.jar.StrictJarFile;

        r1 = virtualinvoke r0.<android.util.jar.StrictJarFile: java.util.zip.ZipEntry findEntry(java.lang.String)>("META-INF/MANIFEST.MF");

        if r1 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r0.<android.util.jar.StrictJarFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>(r1);

        $r3 = staticinvoke <libcore.io.Streams: byte[] readFully(java.io.InputStream)>($r2);

        return $r3;
    }

    private static java.util.Map getSignatureSchemeApkContentDigests(java.io.RandomAccessFile, byte[]) throws java.io.IOException
    {
        byte[] r0, $r16;
        java.util.HashMap $r3, $r14;
        java.lang.Integer $r4, $r9, $r15, $r18;
        android.util.apk.SignatureInfo $r5, $r10;
        java.nio.ByteBuffer $r6, $r11;
        java.util.Map $r7, $r12;
        android.util.apk.SignatureNotFoundException $r20, $r21;
        java.io.RandomAccessFile r22;

        r22 := @parameter0: java.io.RandomAccessFile;

        r0 := @parameter1: byte[];

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

     label1:
        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r5 = staticinvoke <android.util.apk.ApkSigningBlockUtils: android.util.apk.SignatureInfo findSignature(java.io.RandomAccessFile,int)>(r22, -262969152);

        $r6 = $r5.<android.util.apk.SignatureInfo: java.nio.ByteBuffer signatureBlock>;

        $r7 = staticinvoke <android.util.apk.SourceStampVerifier: java.util.Map getApkContentDigestsFromSignatureBlock(java.nio.ByteBuffer)>($r6);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r7);

     label2:
        goto label4;

     label3:
        $r21 := @caughtexception;

     label4:
        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r10 = staticinvoke <android.util.apk.ApkSigningBlockUtils: android.util.apk.SignatureInfo findSignature(java.io.RandomAccessFile,int)>(r22, 1896449818);

        $r11 = $r10.<android.util.apk.SignatureInfo: java.nio.ByteBuffer signatureBlock>;

        $r12 = staticinvoke <android.util.apk.SourceStampVerifier: java.util.Map getApkContentDigestsFromSignatureBlock(java.nio.ByteBuffer)>($r11);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r12);

     label5:
        goto label7;

     label6:
        $r20 := @caughtexception;

     label7:
        if r0 == null goto label8;

        $r14 = new java.util.HashMap;

        specialinvoke $r14.<java.util.HashMap: void <init>()>();

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $r16 = staticinvoke <android.util.apk.SourceStampVerifier: byte[] computeSha256Digest(byte[])>(r0);

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, $r16);

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, $r14);

     label8:
        return $r3;

        catch android.util.apk.SignatureNotFoundException from label1 to label2 with label3;
        catch android.util.apk.SignatureNotFoundException from label4 to label5 with label6;
    }

    private static java.util.Map getSignatureSchemeDigests(java.util.Map)
    {
        java.util.Iterator r1;
        java.util.List r2;
        java.util.HashMap $r3;
        java.util.Set $r4;
        boolean $z0;
        java.lang.Object $r5, $r6, $r8;
        java.util.Map $r7, r12;
        java.lang.Integer $r9;
        byte[] $r10;
        java.util.Map$Entry r13;

        r12 := @parameter0: java.util.Map;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        $r4 = interfaceinvoke r12.<java.util.Map: java.util.Set entrySet()>();

        r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r13 = (java.util.Map$Entry) $r5;

        $r6 = interfaceinvoke r13.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r7 = (java.util.Map) $r6;

        r2 = staticinvoke <android.util.apk.SourceStampVerifier: java.util.List getApkDigests(java.util.Map)>($r7);

        $r8 = interfaceinvoke r13.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = (java.lang.Integer) $r8;

        $r10 = staticinvoke <android.util.apk.SourceStampVerifier: byte[] encodeApkContentDigests(java.util.List)>(r2);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r10);

        goto label1;

     label2:
        return $r3;
    }

    private static byte[] getSourceStampCertificateDigest(android.util.jar.StrictJarFile) throws java.io.IOException
    {
        android.util.jar.StrictJarFile r0;
        java.util.zip.ZipEntry r1;
        java.io.InputStream $r2;
        byte[] $r3;

        r0 := @parameter0: android.util.jar.StrictJarFile;

        r1 = virtualinvoke r0.<android.util.jar.StrictJarFile: java.util.zip.ZipEntry findEntry(java.lang.String)>("stamp-cert-sha256");

        if r1 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r0.<android.util.jar.StrictJarFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>(r1);

        $r3 = staticinvoke <libcore.io.Streams: byte[] readFully(java.io.InputStream)>($r2);

        return $r3;
    }

    static java.lang.Integer lambda$getApkDigests$0(android.util.Pair)
    {
        android.util.Pair r0;
        java.lang.Object $r1;
        java.lang.Integer $r2;

        r0 := @parameter0: android.util.Pair;

        $r1 = r0.<android.util.Pair: java.lang.Object first>;

        $r2 = (java.lang.Integer) $r1;

        return $r2;
    }

    private static android.util.apk.SourceStampVerificationResult verify(android.util.apk.SignatureInfo, java.util.Map, byte[]) throws java.lang.SecurityException, java.io.IOException
    {
        java.nio.ByteBuffer r0, $r12, r20, r21, r23;
        java.util.HashMap $r1;
        boolean $z0, $z1, $z2;
        java.util.Set $r2;
        android.util.apk.SourceStampVerificationResult $r3;
        java.lang.Object $r4, $r5, $r8, $r10, $r11, $r13;
        java.lang.SecurityException $r6;
        java.lang.Object[] $r7;
        java.lang.String $r9;
        byte[] $r14, r19;
        int $i0;
        java.lang.Integer $r15;
        android.util.apk.SignatureInfo r17;
        java.util.Map r18;
        java.security.cert.X509Certificate r22;
        java.util.Iterator r25;
        java.util.Map$Entry r26;

        r17 := @parameter0: android.util.apk.SignatureInfo;

        r18 := @parameter1: java.util.Map;

        r19 := @parameter2: byte[];

        r20 = r17.<android.util.apk.SignatureInfo: java.nio.ByteBuffer signatureBlock>;

        r21 = staticinvoke <android.util.apk.ApkSigningBlockUtils: java.nio.ByteBuffer getLengthPrefixedSlice(java.nio.ByteBuffer)>(r20);

        r22 = staticinvoke <android.util.apk.SourceStampVerifier: java.security.cert.X509Certificate verifySourceStampCertificate(java.nio.ByteBuffer,byte[])>(r21, r19);

        r23 = staticinvoke <android.util.apk.ApkSigningBlockUtils: java.nio.ByteBuffer getLengthPrefixedSlice(java.nio.ByteBuffer)>(r21);

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

     label1:
        $z0 = virtualinvoke r23.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 == 0 goto label2;

        r0 = staticinvoke <android.util.apk.ApkSigningBlockUtils: java.nio.ByteBuffer getLengthPrefixedSlice(java.nio.ByteBuffer)>(r23);

        $i0 = virtualinvoke r0.<java.nio.ByteBuffer: int getInt()>();

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, r0);

        goto label1;

     label2:
        $r2 = interfaceinvoke r18.<java.util.Map: java.util.Set entrySet()>();

        r25 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r4 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>();

        r26 = (java.util.Map$Entry) $r4;

        $r5 = interfaceinvoke r26.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z2 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r5);

        if $z2 == 0 goto label4;

        $r10 = interfaceinvoke r26.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r11 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

        $r12 = (java.nio.ByteBuffer) $r11;

        $r13 = interfaceinvoke r26.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r14 = (byte[]) $r13;

        staticinvoke <android.util.apk.SourceStampVerifier: void verifySourceStampSignature(java.nio.ByteBuffer,java.security.cert.X509Certificate,byte[])>($r12, r22, $r14);

        goto label3;

     label4:
        $r6 = new java.lang.SecurityException;

        $r7 = newarray (java.lang.Object)[1];

        $r8 = interfaceinvoke r26.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7[0] = $r8;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("No signatures found for signature scheme %d", $r7);

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>($r9);

        throw $r6;

     label5:
        $r3 = staticinvoke <android.util.apk.SourceStampVerificationResult: android.util.apk.SourceStampVerificationResult verified(java.security.cert.Certificate)>(r22);

        return $r3;
    }

    private static android.util.apk.SourceStampVerificationResult verify(java.io.RandomAccessFile, byte[], byte[])
    {
        byte[] r0, r1;
        android.util.apk.SignatureInfo r2;
        java.util.Map $r3, r7;
        java.lang.Throwable $r4;
        android.util.apk.SourceStampVerificationResult $r5, r8;
        java.io.RandomAccessFile r6;

        r6 := @parameter0: java.io.RandomAccessFile;

        r0 := @parameter1: byte[];

        r1 := @parameter2: byte[];

     label1:
        r2 = staticinvoke <android.util.apk.ApkSigningBlockUtils: android.util.apk.SignatureInfo findSignature(java.io.RandomAccessFile,int)>(r6, 1845461005);

     label2:
        r7 = staticinvoke <android.util.apk.SourceStampVerifier: java.util.Map getSignatureSchemeApkContentDigests(java.io.RandomAccessFile,byte[])>(r6, r1);

     label3:
        $r3 = staticinvoke <android.util.apk.SourceStampVerifier: java.util.Map getSignatureSchemeDigests(java.util.Map)>(r7);

        r8 = staticinvoke <android.util.apk.SourceStampVerifier: android.util.apk.SourceStampVerificationResult verify(android.util.apk.SignatureInfo,java.util.Map,byte[])>(r2, $r3, r0);

     label4:
        return r8;

     label5:
        $r4 := @caughtexception;

        $r5 = staticinvoke <android.util.apk.SourceStampVerificationResult: android.util.apk.SourceStampVerificationResult notVerified()>();

        return $r5;

        catch java.io.IOException from label1 to label2 with label5;
        catch android.util.apk.SignatureNotFoundException from label1 to label2 with label5;
        catch java.lang.RuntimeException from label1 to label2 with label5;
        catch java.io.IOException from label2 to label3 with label5;
        catch android.util.apk.SignatureNotFoundException from label2 to label3 with label5;
        catch java.lang.RuntimeException from label2 to label3 with label5;
        catch java.io.IOException from label3 to label4 with label5;
        catch android.util.apk.SignatureNotFoundException from label3 to label4 with label5;
        catch java.lang.RuntimeException from label3 to label4 with label5;
    }

    public static android.util.apk.SourceStampVerificationResult verify(java.lang.String)
    {
        java.io.RandomAccessFile r0;
        byte[] $r1, r12;
        java.lang.Throwable $r2, $r3, $r4, $r5;
        java.lang.String r6;
        android.util.jar.StrictJarFile r7, r8, r9, r10;
        android.util.apk.SourceStampVerificationResult r13, r14, r18;

        r6 := @parameter0: java.lang.String;

        r7 = null;

        r8 = null;

     label01:
        r0 = new java.io.RandomAccessFile;

     label02:
        r7 = null;

        r8 = null;

     label03:
        specialinvoke r0.<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>(r6, "r");

     label04:
        r9 = null;

     label05:
        r10 = new android.util.jar.StrictJarFile;

     label06:
        r9 = null;

     label07:
        specialinvoke r10.<android.util.jar.StrictJarFile: void <init>(java.lang.String,boolean,boolean)>(r6, 0, 0);

     label08:
        r9 = r10;

     label09:
        r12 = staticinvoke <android.util.apk.SourceStampVerifier: byte[] getSourceStampCertificateDigest(android.util.jar.StrictJarFile)>(r10);

     label10:
        if r12 != null goto label15;

        r9 = r10;

     label11:
        r13 = staticinvoke <android.util.apk.SourceStampVerificationResult: android.util.apk.SourceStampVerificationResult notPresent()>();

     label12:
        r7 = r10;

        r8 = r10;

     label13:
        virtualinvoke r0.<java.io.RandomAccessFile: void close()>();

     label14:
        staticinvoke <android.util.apk.SourceStampVerifier: void closeApkJar(android.util.jar.StrictJarFile)>(r10);

        return r13;

     label15:
        r9 = r10;

     label16:
        $r1 = staticinvoke <android.util.apk.SourceStampVerifier: byte[] getManifestBytes(android.util.jar.StrictJarFile)>(r10);

        r14 = staticinvoke <android.util.apk.SourceStampVerifier: android.util.apk.SourceStampVerificationResult verify(java.io.RandomAccessFile,byte[],byte[])>(r0, r12, $r1);

     label17:
        r7 = r10;

        r8 = r10;

     label18:
        virtualinvoke r0.<java.io.RandomAccessFile: void close()>();

     label19:
        staticinvoke <android.util.apk.SourceStampVerifier: void closeApkJar(android.util.jar.StrictJarFile)>(r10);

        return r14;

     label20:
        $r3 := @caughtexception;

     label21:
        virtualinvoke r0.<java.io.RandomAccessFile: void close()>();

     label22:
        goto label25;

     label23:
        $r2 := @caughtexception;

        r7 = r9;

        r8 = r9;

     label24:
        virtualinvoke $r3.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r2);

     label25:
        r7 = r9;

        r8 = r9;

     label26:
        throw $r3;

     label27:
        $r4 := @caughtexception;

        goto label31;

     label28:
        $r5 := @caughtexception;

        r7 = r8;

     label29:
        r18 = staticinvoke <android.util.apk.SourceStampVerificationResult: android.util.apk.SourceStampVerificationResult notPresent()>();

     label30:
        staticinvoke <android.util.apk.SourceStampVerifier: void closeApkJar(android.util.jar.StrictJarFile)>(r8);

        return r18;

     label31:
        staticinvoke <android.util.apk.SourceStampVerifier: void closeApkJar(android.util.jar.StrictJarFile)>(r7);

        throw $r4;

        catch java.io.IOException from label01 to label02 with label28;
        catch java.lang.Throwable from label01 to label02 with label27;
        catch java.io.IOException from label03 to label04 with label28;
        catch java.lang.Throwable from label03 to label04 with label27;
        catch java.lang.Throwable from label05 to label06 with label20;
        catch java.lang.Throwable from label07 to label08 with label20;
        catch java.lang.Throwable from label09 to label10 with label20;
        catch java.lang.Throwable from label11 to label12 with label20;
        catch java.io.IOException from label13 to label14 with label28;
        catch java.lang.Throwable from label13 to label14 with label27;
        catch java.lang.Throwable from label16 to label17 with label20;
        catch java.io.IOException from label18 to label19 with label28;
        catch java.lang.Throwable from label18 to label19 with label27;
        catch java.lang.Throwable from label21 to label22 with label23;
        catch java.io.IOException from label24 to label25 with label28;
        catch java.lang.Throwable from label24 to label25 with label27;
        catch java.io.IOException from label26 to label27 with label28;
        catch java.lang.Throwable from label26 to label27 with label27;
        catch java.lang.Throwable from label29 to label30 with label27;
    }

    public static android.util.apk.SourceStampVerificationResult verify(java.util.List)
    {
        java.util.Iterator r0;
        boolean $z0, $z1, $z2, $z3;
        android.util.apk.SourceStampVerificationResult $r1, $r5, r8;
        java.lang.Object $r2;
        java.lang.String $r3;
        java.security.cert.Certificate $r4, r7;
        java.util.List r6;

        r6 := @parameter0: java.util.List;

        r0 = interfaceinvoke r6.<java.util.List: java.util.Iterator iterator()>();

        r7 = null;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r2 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (java.lang.String) $r2;

        r8 = staticinvoke <android.util.apk.SourceStampVerifier: android.util.apk.SourceStampVerificationResult verify(java.lang.String)>($r3);

        $z1 = virtualinvoke r8.<android.util.apk.SourceStampVerificationResult: boolean isPresent()>();

        if $z1 == 0 goto label4;

        $z2 = virtualinvoke r8.<android.util.apk.SourceStampVerificationResult: boolean isVerified()>();

        if $z2 != 0 goto label2;

        goto label4;

     label2:
        if r7 == null goto label3;

        $r4 = virtualinvoke r8.<android.util.apk.SourceStampVerificationResult: java.security.cert.Certificate getCertificate()>();

        $z3 = virtualinvoke r7.<java.security.cert.Certificate: boolean equals(java.lang.Object)>($r4);

        if $z3 != 0 goto label3;

        $r5 = staticinvoke <android.util.apk.SourceStampVerificationResult: android.util.apk.SourceStampVerificationResult notVerified()>();

        return $r5;

     label3:
        r7 = virtualinvoke r8.<android.util.apk.SourceStampVerificationResult: java.security.cert.Certificate getCertificate()>();

        goto label1;

     label4:
        return r8;

     label5:
        $r1 = staticinvoke <android.util.apk.SourceStampVerificationResult: android.util.apk.SourceStampVerificationResult verified(java.security.cert.Certificate)>(r7);

        return $r1;
    }

    private static java.security.cert.X509Certificate verifySourceStampCertificate(java.nio.ByteBuffer, byte[]) throws java.io.IOException
    {
        byte[] r0, $r3, r12;
        java.io.ByteArrayInputStream r1;
        java.security.cert.Certificate $r2;
        boolean $z0;
        java.lang.SecurityException $r4, $r7;
        android.util.apk.VerbatimX509Certificate $r5;
        java.lang.Throwable $r6, $r8;
        java.lang.RuntimeException $r9;
        java.nio.ByteBuffer r10;
        java.security.cert.CertificateFactory r11;
        java.security.cert.X509Certificate r13;

        r10 := @parameter0: java.nio.ByteBuffer;

        r0 := @parameter1: byte[];

     label1:
        r11 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");

     label2:
        r12 = staticinvoke <android.util.apk.ApkSigningBlockUtils: byte[] readLengthPrefixedByteArray(java.nio.ByteBuffer)>(r10);

     label3:
        r1 = new java.io.ByteArrayInputStream;

        specialinvoke r1.<java.io.ByteArrayInputStream: void <init>(byte[])>(r12);

        $r2 = virtualinvoke r11.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>(r1);

        r13 = (java.security.cert.X509Certificate) $r2;

     label4:
        $r3 = staticinvoke <android.util.apk.SourceStampVerifier: byte[] computeSha256Digest(byte[])>(r12);

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r0, $r3);

        if $z0 == 0 goto label5;

        $r5 = new android.util.apk.VerbatimX509Certificate;

        specialinvoke $r5.<android.util.apk.VerbatimX509Certificate: void <init>(java.security.cert.X509Certificate,byte[])>(r13, r12);

        return $r5;

     label5:
        $r4 = new java.lang.SecurityException;

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>("Certificate mismatch between APK and signature block");

        throw $r4;

     label6:
        $r6 := @caughtexception;

        $r7 = new java.lang.SecurityException;

        specialinvoke $r7.<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to decode certificate", $r6);

        throw $r7;

     label7:
        $r8 := @caughtexception;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to obtain X.509 CertificateFactory", $r8);

        throw $r9;

        catch java.security.cert.CertificateException from label1 to label2 with label7;
        catch java.security.cert.CertificateException from label3 to label4 with label6;
    }

    private static void verifySourceStampSignature(java.nio.ByteBuffer, java.security.cert.X509Certificate, byte[]) throws java.io.IOException
    {
        byte[] r0, r27;
        int i0, $i1, $i2, i3, i4, i5;
        java.security.Signature r1;
        boolean z0, $z1, $z2;
        java.lang.Object $r2, $r3;
        java.lang.StringBuilder $r4, $r12, $r19;
        java.lang.SecurityException $r7, $r9, $r10, $r16, $r22, r29;
        java.lang.String $r8, $r17, $r23, r33;
        java.lang.Throwable $r11, $r18;
        java.nio.ByteBuffer r24, r26, r28;
        java.security.cert.X509Certificate r25;
        android.util.Pair r32;
        java.security.spec.AlgorithmParameterSpec r34;
        java.security.PublicKey r35;

        r24 := @parameter0: java.nio.ByteBuffer;

        r25 := @parameter1: java.security.cert.X509Certificate;

        r0 := @parameter2: byte[];

        r26 = staticinvoke <android.util.apk.ApkSigningBlockUtils: java.nio.ByteBuffer getLengthPrefixedSlice(java.nio.ByteBuffer)>(r24);

        i3 = 0;

        i4 = -1;

        r27 = null;

     label01:
        $z2 = virtualinvoke r26.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z2 == 0 goto label11;

        i3 = i3 + 1;

     label02:
        r28 = staticinvoke <android.util.apk.ApkSigningBlockUtils: java.nio.ByteBuffer getLengthPrefixedSlice(java.nio.ByteBuffer)>(r26);

        $i1 = virtualinvoke r28.<java.nio.ByteBuffer: int remaining()>();

        if $i1 < 8 goto label09;

        i0 = virtualinvoke r28.<java.nio.ByteBuffer: int getInt()>();

        $z1 = staticinvoke <android.util.apk.ApkSigningBlockUtils: boolean isSupportedSignatureAlgorithm(int)>(i0);

        if $z1 != 0 goto label04;

     label03:
        goto label01;

     label04:
        if i4 == -1 goto label06;

        i5 = i4;

     label05:
        $i2 = staticinvoke <android.util.apk.ApkSigningBlockUtils: int compareSignatureAlgorithm(int,int)>(i0, i4);

        if $i2 <= 0 goto label08;

     label06:
        i5 = i0;

     label07:
        r27 = staticinvoke <android.util.apk.ApkSigningBlockUtils: byte[] readLengthPrefixedByteArray(java.nio.ByteBuffer)>(r28);

     label08:
        i4 = i5;

        goto label01;

     label09:
        r29 = new java.lang.SecurityException;

        specialinvoke r29.<java.lang.SecurityException: void <init>(java.lang.String)>("Signature record too short");

        throw r29;

     label10:
        $r18 := @caughtexception;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to parse signature record #");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r22 = new java.lang.SecurityException;

        $r23 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>($r23, $r18);

        throw $r22;

     label11:
        if i4 != -1 goto label13;

        if i3 != 0 goto label12;

        $r10 = new java.lang.SecurityException;

        specialinvoke $r10.<java.lang.SecurityException: void <init>(java.lang.String)>("No signatures found");

        throw $r10;

     label12:
        $r9 = new java.lang.SecurityException;

        specialinvoke $r9.<java.lang.SecurityException: void <init>(java.lang.String)>("No supported signatures found");

        throw $r9;

     label13:
        r32 = staticinvoke <android.util.apk.ApkSigningBlockUtils: android.util.Pair getSignatureAlgorithmJcaSignatureAlgorithm(int)>(i4);

        $r2 = r32.<android.util.Pair: java.lang.Object first>;

        r33 = (java.lang.String) $r2;

        $r3 = r32.<android.util.Pair: java.lang.Object second>;

        r34 = (java.security.spec.AlgorithmParameterSpec) $r3;

        r35 = virtualinvoke r25.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();

     label14:
        r1 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>(r33);

        virtualinvoke r1.<java.security.Signature: void initVerify(java.security.PublicKey)>(r35);

     label15:
        if r34 == null goto label17;

     label16:
        virtualinvoke r1.<java.security.Signature: void setParameter(java.security.spec.AlgorithmParameterSpec)>(r34);

     label17:
        virtualinvoke r1.<java.security.Signature: void update(byte[])>(r0);

        z0 = virtualinvoke r1.<java.security.Signature: boolean verify(byte[])>(r27);

     label18:
        if z0 == 0 goto label19;

        return;

     label19:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" signature did not verify");

        $r7 = new java.lang.SecurityException;

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.SecurityException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label20:
        $r11 := @caughtexception;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to verify ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" signature");

        $r16 = new java.lang.SecurityException;

        $r17 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>($r17, $r11);

        throw $r16;

        catch java.io.IOException from label02 to label03 with label10;
        catch java.nio.BufferUnderflowException from label02 to label03 with label10;
        catch java.io.IOException from label05 to label06 with label10;
        catch java.nio.BufferUnderflowException from label05 to label06 with label10;
        catch java.io.IOException from label07 to label08 with label10;
        catch java.nio.BufferUnderflowException from label07 to label08 with label10;
        catch java.io.IOException from label09 to label10 with label10;
        catch java.nio.BufferUnderflowException from label09 to label10 with label10;
        catch java.security.InvalidKeyException from label14 to label15 with label20;
        catch java.security.InvalidAlgorithmParameterException from label14 to label15 with label20;
        catch java.security.SignatureException from label14 to label15 with label20;
        catch java.security.NoSuchAlgorithmException from label14 to label15 with label20;
        catch java.security.InvalidKeyException from label16 to label17 with label20;
        catch java.security.InvalidAlgorithmParameterException from label16 to label17 with label20;
        catch java.security.SignatureException from label16 to label17 with label20;
        catch java.security.NoSuchAlgorithmException from label16 to label17 with label20;
        catch java.security.InvalidKeyException from label17 to label18 with label20;
        catch java.security.InvalidAlgorithmParameterException from label17 to label18 with label20;
        catch java.security.SignatureException from label17 to label18 with label20;
        catch java.security.NoSuchAlgorithmException from label17 to label18 with label20;
    }

    public static void <clinit>()
    {
        <android.util.apk.SourceStampVerifier: int VERSION_JAR_SIGNATURE_SCHEME> = 1;

        <android.util.apk.SourceStampVerifier: int VERSION_APK_SIGNATURE_SCHEME_V3> = 3;

        <android.util.apk.SourceStampVerifier: int VERSION_APK_SIGNATURE_SCHEME_V2> = 2;

        <android.util.apk.SourceStampVerifier: java.lang.String TAG> = "SourceStampVerifier";

        <android.util.apk.SourceStampVerifier: java.lang.String SOURCE_STAMP_CERTIFICATE_HASH_ZIP_ENTRY_NAME> = "stamp-cert-sha256";

        <android.util.apk.SourceStampVerifier: int SOURCE_STAMP_BLOCK_ID> = 1845461005;

        <android.util.apk.SourceStampVerifier: int APK_SIGNATURE_SCHEME_V3_BLOCK_ID> = -262969152;

        <android.util.apk.SourceStampVerifier: int APK_SIGNATURE_SCHEME_V2_BLOCK_ID> = 1896449818;

        return;
    }
}
