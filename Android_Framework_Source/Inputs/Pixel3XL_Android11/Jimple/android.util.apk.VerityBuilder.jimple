public abstract class android.util.apk.VerityBuilder extends java.lang.Object
{
    private static final int CHUNK_SIZE_BYTES;
    private static final byte[] DEFAULT_SALT;
    private static final int DIGEST_SIZE_BYTES;
    private static final int FSVERITY_HEADER_SIZE_BYTES;
    private static final java.lang.String JCA_DIGEST_ALGORITHM;
    private static final int MMAP_REGION_SIZE_BYTES;
    private static final int ZIP_EOCD_CENTRAL_DIR_OFFSET_FIELD_OFFSET;
    private static final int ZIP_EOCD_CENTRAL_DIR_OFFSET_FIELD_SIZE;

    static void <clinit>()
    {
        byte[] $r0;

        <android.util.apk.VerityBuilder: int ZIP_EOCD_CENTRAL_DIR_OFFSET_FIELD_SIZE> = 4;

        <android.util.apk.VerityBuilder: int ZIP_EOCD_CENTRAL_DIR_OFFSET_FIELD_OFFSET> = 16;

        <android.util.apk.VerityBuilder: int MMAP_REGION_SIZE_BYTES> = 1048576;

        <android.util.apk.VerityBuilder: java.lang.String JCA_DIGEST_ALGORITHM> = "SHA-256";

        <android.util.apk.VerityBuilder: int FSVERITY_HEADER_SIZE_BYTES> = 64;

        <android.util.apk.VerityBuilder: int DIGEST_SIZE_BYTES> = 32;

        <android.util.apk.VerityBuilder: int CHUNK_SIZE_BYTES> = 4096;

        $r0 = newarray (byte)[8];

        <android.util.apk.VerityBuilder: byte[] DEFAULT_SALT> = $r0;

        return;
    }

    private void <init>()
    {
        android.util.apk.VerityBuilder r0;

        r0 := @this: android.util.apk.VerityBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static void assertSigningBlockAlignedAndHasFullPages(android.util.apk.SignatureInfo)
    {
        android.util.apk.SignatureInfo r0;
        long $l0, $l1, $l3, $l4, $l5, $l6, $l7, $l9, $l10, $l11;
        byte $b2, $b8;
        java.lang.StringBuilder $r1, $r6;
        java.lang.IllegalArgumentException $r4, $r9;
        java.lang.String $r5, $r10;

        r0 := @parameter0: android.util.apk.SignatureInfo;

        $l0 = r0.<android.util.apk.SignatureInfo: long apkSigningBlockOffset>;

        $l1 = $l0 % 4096L;

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label2;

        $l5 = r0.<android.util.apk.SignatureInfo: long centralDirOffset>;

        $l4 = r0.<android.util.apk.SignatureInfo: long apkSigningBlockOffset>;

        $l6 = $l5 - $l4;

        $l7 = $l6 % 4096L;

        $b8 = $l7 cmp 0L;

        if $b8 != 0 goto label1;

        return;

     label1:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Size of APK Signing Block is not a multiple of 4096: ");

        $l10 = r0.<android.util.apk.SignatureInfo: long centralDirOffset>;

        $l9 = r0.<android.util.apk.SignatureInfo: long apkSigningBlockOffset>;

        $l11 = $l10 - $l9;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l11);

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r9;

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("APK Signing Block does not start at the page boundary: ");

        $l3 = r0.<android.util.apk.SignatureInfo: long apkSigningBlockOffset>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    private static int[] calculateVerityLevelOffset(long)
    {
        int[] r1;
        java.util.ArrayList $r2;
        long $l0, $l1, $l2, $l12, l15;
        java.lang.Long $r3, $r5;
        byte $b3;
        int $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i14, i16;
        java.lang.Object $r4;

        l15 := @parameter0: long;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

     label1:
        $l0 = staticinvoke <android.util.apk.VerityBuilder: long divideRoundup(long,long)>(l15, 4096L);

        l15 = $l0 * 32L;

        $l1 = staticinvoke <android.util.apk.VerityBuilder: long divideRoundup(long,long)>(l15, 4096L);

        $l2 = $l1 * 4096L;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        $b3 = l15 cmp 4096L;

        if $b3 > 0 goto label4;

        $i4 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        $i5 = $i4 + 1;

        r1 = newarray (int)[$i5];

        r1[0] = 0;

        i16 = 0;

     label2:
        $i6 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if i16 >= $i6 goto label3;

        $i7 = i16 + 1;

        $i8 = r1[i16];

        $i9 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        $i10 = $i9 - i16;

        $i11 = $i10 - 1;

        $r4 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i11);

        $r5 = (java.lang.Long) $r4;

        $l12 = virtualinvoke $r5.<java.lang.Long: long longValue()>();

        $i13 = staticinvoke <java.lang.Math: int toIntExact(long)>($l12);

        $i14 = $i8 + $i13;

        r1[$i7] = $i14;

        i16 = i16 + 1;

        goto label2;

     label3:
        return r1;

     label4:
        goto label1;
    }

    private static void consumeByChunk(android.util.apk.DataDigester, android.util.apk.DataSource, int) throws java.io.IOException, java.security.DigestException
    {
        android.util.apk.DataDigester r0;
        android.util.apk.DataSource r1;
        int i0, i1;
        byte $b2;
        long $l3, $l4, $l5, $l6, l7, l8;

        r0 := @parameter0: android.util.apk.DataDigester;

        r1 := @parameter1: android.util.apk.DataSource;

        i0 := @parameter2: int;

        l7 = interfaceinvoke r1.<android.util.apk.DataSource: long size()>();

        l8 = 0L;

     label1:
        $b2 = l7 cmp 0L;

        if $b2 <= 0 goto label2;

        $l3 = (long) i0;

        $l4 = staticinvoke <java.lang.Math: long min(long,long)>(l7, $l3);

        i1 = (int) $l4;

        interfaceinvoke r1.<android.util.apk.DataSource: void feedIntoDataDigester(android.util.apk.DataDigester,long,int)>(r0, l8, i1);

        $l5 = (long) i1;

        l8 = l8 + $l5;

        $l6 = (long) i1;

        l7 = l7 - $l6;

        goto label1;

     label2:
        return;
    }

    private static long divideRoundup(long, long)
    {
        long l0, l1, $l2, $l3, $l4;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $l2 = l0 + l1;

        $l3 = $l2 - 1L;

        $l4 = $l3 / l1;

        return $l4;
    }

    static byte[] generateApkVerity(java.lang.String, android.util.apk.ByteBufferFactory, android.util.apk.SignatureInfo) throws java.io.IOException, android.util.apk.SignatureNotFoundException, java.lang.SecurityException, java.security.DigestException, java.security.NoSuchAlgorithmException
    {
        android.util.apk.SignatureInfo r0;
        android.util.apk.VerityBuilder$VerityResult r1;
        java.io.RandomAccessFile $r2;
        java.nio.ByteBuffer $r3, $r4, $r6, r13;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.Throwable $r8, $r9;
        java.lang.String r10;
        android.util.apk.ByteBufferFactory r11;
        byte[] r14;

        r10 := @parameter0: java.lang.String;

        r11 := @parameter1: android.util.apk.ByteBufferFactory;

        r0 := @parameter2: android.util.apk.SignatureInfo;

        $r2 = new java.io.RandomAccessFile;

        specialinvoke $r2.<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>(r10, "r");

     label1:
        r1 = staticinvoke <android.util.apk.VerityBuilder: android.util.apk.VerityBuilder$VerityResult generateVerityTreeInternal(java.io.RandomAccessFile,android.util.apk.ByteBufferFactory,android.util.apk.SignatureInfo)>($r2, r11, r0);

        $r4 = r1.<android.util.apk.VerityBuilder$VerityResult: java.nio.ByteBuffer verityData>;

        $i0 = r1.<android.util.apk.VerityBuilder$VerityResult: int merkleTreeSize>;

        $r3 = r1.<android.util.apk.VerityBuilder$VerityResult: java.nio.ByteBuffer verityData>;

        $i1 = virtualinvoke $r3.<java.nio.ByteBuffer: int limit()>();

        r13 = staticinvoke <android.util.apk.VerityBuilder: java.nio.ByteBuffer slice(java.nio.ByteBuffer,int,int)>($r4, $i0, $i1);

        staticinvoke <android.util.apk.VerityBuilder: void generateApkVerityFooter(java.io.RandomAccessFile,android.util.apk.SignatureInfo,java.nio.ByteBuffer)>($r2, r0, r13);

        $i2 = virtualinvoke r13.<java.nio.ByteBuffer: int position()>();

        $i3 = $i2 + 4;

        virtualinvoke r13.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i3);

        $r6 = r1.<android.util.apk.VerityBuilder$VerityResult: java.nio.ByteBuffer verityData>;

        $i4 = r1.<android.util.apk.VerityBuilder$VerityResult: int merkleTreeSize>;

        $i5 = virtualinvoke r13.<java.nio.ByteBuffer: int position()>();

        $i6 = $i4 + $i5;

        virtualinvoke $r6.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i6);

        r14 = r1.<android.util.apk.VerityBuilder$VerityResult: byte[] rootHash>;

     label2:
        virtualinvoke $r2.<java.io.RandomAccessFile: void close()>();

        return r14;

     label3:
        $r8 := @caughtexception;

     label4:
        virtualinvoke $r2.<java.io.RandomAccessFile: void close()>();

     label5:
        goto label7;

     label6:
        $r9 := @caughtexception;

        virtualinvoke $r8.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r9);

     label7:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    private static void generateApkVerityDigestAtLeafLevel(java.io.RandomAccessFile, android.util.apk.SignatureInfo, byte[], java.nio.ByteBuffer) throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.DigestException
    {
        java.io.RandomAccessFile r0;
        android.util.apk.SignatureInfo r1;
        int i0, $i7, $i12;
        android.util.apk.VerityBuilder$BufferedDigester $r2;
        android.util.apk.MemoryMappedFileDataSource $r3, $r5, $r11;
        java.io.FileDescriptor $r4, $r6, $r12;
        long $l1, $l2, $l3, $l4, $l5, $l6, $l8, $l9, $l10, $l11, l13, l14;
        java.nio.ByteBuffer $r7, $r13, r15, r17;
        java.nio.ByteOrder $r8;
        byte[] r14;

        r0 := @parameter0: java.io.RandomAccessFile;

        r1 := @parameter1: android.util.apk.SignatureInfo;

        r14 := @parameter2: byte[];

        r15 := @parameter3: java.nio.ByteBuffer;

        $r2 = new android.util.apk.VerityBuilder$BufferedDigester;

        specialinvoke $r2.<android.util.apk.VerityBuilder$BufferedDigester: void <init>(byte[],java.nio.ByteBuffer,android.util.apk.VerityBuilder$1)>(r14, r15, null);

        $r3 = new android.util.apk.MemoryMappedFileDataSource;

        $r4 = virtualinvoke r0.<java.io.RandomAccessFile: java.io.FileDescriptor getFD()>();

        $l1 = r1.<android.util.apk.SignatureInfo: long apkSigningBlockOffset>;

        specialinvoke $r3.<android.util.apk.MemoryMappedFileDataSource: void <init>(java.io.FileDescriptor,long,long)>($r4, 0L, $l1);

        staticinvoke <android.util.apk.VerityBuilder: void consumeByChunk(android.util.apk.DataDigester,android.util.apk.DataSource,int)>($r2, $r3, 1048576);

        $l2 = r1.<android.util.apk.SignatureInfo: long eocdOffset>;

        l13 = $l2 + 16L;

        $r5 = new android.util.apk.MemoryMappedFileDataSource;

        $r6 = virtualinvoke r0.<java.io.RandomAccessFile: java.io.FileDescriptor getFD()>();

        $l5 = r1.<android.util.apk.SignatureInfo: long centralDirOffset>;

        $l3 = r1.<android.util.apk.SignatureInfo: long centralDirOffset>;

        $l4 = l13 - $l3;

        specialinvoke $r5.<android.util.apk.MemoryMappedFileDataSource: void <init>(java.io.FileDescriptor,long,long)>($r6, $l5, $l4);

        staticinvoke <android.util.apk.VerityBuilder: void consumeByChunk(android.util.apk.DataDigester,android.util.apk.DataSource,int)>($r2, $r5, 1048576);

        $r7 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(4);

        $r8 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        r17 = virtualinvoke $r7.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r8);

        $l6 = r1.<android.util.apk.SignatureInfo: long apkSigningBlockOffset>;

        $i7 = staticinvoke <java.lang.Math: int toIntExact(long)>($l6);

        virtualinvoke r17.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i7);

        virtualinvoke r17.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        virtualinvoke $r2.<android.util.apk.VerityBuilder$BufferedDigester: void consume(java.nio.ByteBuffer)>(r17);

        l14 = 4L + l13;

        $r11 = new android.util.apk.MemoryMappedFileDataSource;

        $r12 = virtualinvoke r0.<java.io.RandomAccessFile: java.io.FileDescriptor getFD()>();

        $l8 = virtualinvoke r0.<java.io.RandomAccessFile: long length()>();

        $l9 = $l8 - l14;

        specialinvoke $r11.<android.util.apk.MemoryMappedFileDataSource: void <init>(java.io.FileDescriptor,long,long)>($r12, l14, $l9);

        staticinvoke <android.util.apk.VerityBuilder: void consumeByChunk(android.util.apk.DataDigester,android.util.apk.DataSource,int)>($r2, $r11, 1048576);

        $l10 = virtualinvoke r0.<java.io.RandomAccessFile: long length()>();

        $l11 = $l10 % 4096L;

        i0 = (int) $l11;

        if i0 == 0 goto label1;

        $i12 = 4096 - i0;

        $r13 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i12);

        virtualinvoke $r2.<android.util.apk.VerityBuilder$BufferedDigester: void consume(java.nio.ByteBuffer)>($r13);

     label1:
        virtualinvoke $r2.<android.util.apk.VerityBuilder$BufferedDigester: void assertEmptyBuffer()>();

        staticinvoke <android.util.apk.VerityBuilder$BufferedDigester: void access$200(android.util.apk.VerityBuilder$BufferedDigester)>($r2);

        return;
    }

    private static java.nio.ByteBuffer generateApkVerityExtensions(java.nio.ByteBuffer, long, long, long)
    {
        java.nio.ByteBuffer r0;
        long l0, l1, l2, $l3;
        int $i4;
        byte b5;

        r0 := @parameter0: java.nio.ByteBuffer;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        l2 := @parameter3: long;

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>(24);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>(1);

        staticinvoke <android.util.apk.VerityBuilder: void skip(java.nio.ByteBuffer,int)>(r0, 2);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(long)>(l0);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(long)>(l1);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>(20);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>(2);

        staticinvoke <android.util.apk.VerityBuilder: void skip(java.nio.ByteBuffer,int)>(r0, 2);

        $l3 = 16L + l2;

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(long)>($l3);

        $i4 = staticinvoke <java.lang.Math: int toIntExact(long)>(l0);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i4);

        b5 = 4;

        goto label1;

     label1:
        staticinvoke <android.util.apk.VerityBuilder: void skip(java.nio.ByteBuffer,int)>(r0, b5);

        return r0;
    }

    static void generateApkVerityFooter(java.io.RandomAccessFile, android.util.apk.SignatureInfo, java.nio.ByteBuffer) throws java.io.IOException
    {
        java.io.RandomAccessFile r0;
        android.util.apk.SignatureInfo r1;
        java.nio.ByteBuffer r2;
        long l0, l1, $l2, $l3, $l4, $l5;
        java.nio.ByteOrder $r3;
        byte[] $r5;

        r0 := @parameter0: java.io.RandomAccessFile;

        r1 := @parameter1: android.util.apk.SignatureInfo;

        r2 := @parameter2: java.nio.ByteBuffer;

        $r3 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r3);

        $l2 = virtualinvoke r0.<java.io.RandomAccessFile: long length()>();

        $r5 = <android.util.apk.VerityBuilder: byte[] DEFAULT_SALT>;

        staticinvoke <android.util.apk.VerityBuilder: java.nio.ByteBuffer generateApkVerityHeader(java.nio.ByteBuffer,long,byte[])>(r2, $l2, $r5);

        l0 = r1.<android.util.apk.SignatureInfo: long centralDirOffset>;

        l1 = r1.<android.util.apk.SignatureInfo: long apkSigningBlockOffset>;

        $l5 = r1.<android.util.apk.SignatureInfo: long apkSigningBlockOffset>;

        $l4 = l0 - l1;

        $l3 = r1.<android.util.apk.SignatureInfo: long eocdOffset>;

        staticinvoke <android.util.apk.VerityBuilder: java.nio.ByteBuffer generateApkVerityExtensions(java.nio.ByteBuffer,long,long,long)>(r2, $l5, $l4, $l3);

        return;
    }

    private static java.nio.ByteBuffer generateApkVerityHeader(java.nio.ByteBuffer, long, byte[])
    {
        java.nio.ByteBuffer r0;
        long l0;
        byte[] r1, $r4;
        int $i1;
        java.lang.IllegalArgumentException $r2;
        java.lang.String $r3;

        r0 := @parameter0: java.nio.ByteBuffer;

        l0 := @parameter1: long;

        r1 := @parameter2: byte[];

        $i1 = lengthof r1;

        if $i1 != 8 goto label1;

        $r3 = "TrueBrew";

        $r4 = virtualinvoke $r3.<java.lang.String: byte[] getBytes()>();

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>($r4);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(1);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(0);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(12);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(7);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>(1);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>(1);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>(0);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>(0);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(long)>(l0);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(2);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(0);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>(r1);

        staticinvoke <android.util.apk.VerityBuilder: void skip(java.nio.ByteBuffer,int)>(r0, 22);

        return r0;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("salt is not 8 bytes long");

        throw $r2;
    }

    static byte[] generateApkVerityRootHash(java.io.RandomAccessFile, java.nio.ByteBuffer, android.util.apk.SignatureInfo) throws java.security.NoSuchAlgorithmException, java.security.DigestException, java.io.IOException
    {
        java.nio.ByteBuffer r0, r2, $r3;
        android.util.apk.SignatureInfo r1;
        java.nio.ByteOrder $r4;
        byte[] $r6;
        java.io.RandomAccessFile r7;
        java.security.MessageDigest r8;

        r7 := @parameter0: java.io.RandomAccessFile;

        r0 := @parameter1: java.nio.ByteBuffer;

        r1 := @parameter2: android.util.apk.SignatureInfo;

        staticinvoke <android.util.apk.VerityBuilder: void assertSigningBlockAlignedAndHasFullPages(android.util.apk.SignatureInfo)>(r1);

        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(4096);

        $r4 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        r2 = virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r4);

        staticinvoke <android.util.apk.VerityBuilder: void generateApkVerityFooter(java.io.RandomAccessFile,android.util.apk.SignatureInfo,java.nio.ByteBuffer)>(r7, r1, r2);

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        r8 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-256");

        virtualinvoke r8.<java.security.MessageDigest: void update(java.nio.ByteBuffer)>(r2);

        virtualinvoke r8.<java.security.MessageDigest: void update(java.nio.ByteBuffer)>(r0);

        $r6 = virtualinvoke r8.<java.security.MessageDigest: byte[] digest()>();

        return $r6;
    }

    public static android.util.apk.VerityBuilder$VerityResult generateApkVerityTree(java.io.RandomAccessFile, android.util.apk.SignatureInfo, android.util.apk.ByteBufferFactory) throws java.io.IOException, java.lang.SecurityException, java.security.NoSuchAlgorithmException, java.security.DigestException
    {
        java.io.RandomAccessFile r0;
        android.util.apk.SignatureInfo r1;
        android.util.apk.ByteBufferFactory r2;
        android.util.apk.VerityBuilder$VerityResult $r3;

        r0 := @parameter0: java.io.RandomAccessFile;

        r1 := @parameter1: android.util.apk.SignatureInfo;

        r2 := @parameter2: android.util.apk.ByteBufferFactory;

        $r3 = staticinvoke <android.util.apk.VerityBuilder: android.util.apk.VerityBuilder$VerityResult generateVerityTreeInternal(java.io.RandomAccessFile,android.util.apk.ByteBufferFactory,android.util.apk.SignatureInfo)>(r0, r2, r1);

        return $r3;
    }

    private static void generateFsVerityDigestAtLeafLevel(java.io.RandomAccessFile, java.nio.ByteBuffer) throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.DigestException
    {
        java.io.RandomAccessFile r0;
        int i0, $i4;
        android.util.apk.VerityBuilder$BufferedDigester $r1;
        android.util.apk.MemoryMappedFileDataSource $r2;
        java.io.FileDescriptor $r3;
        long $l1, $l2, $l3;
        java.nio.ByteBuffer $r4, r5;

        r0 := @parameter0: java.io.RandomAccessFile;

        r5 := @parameter1: java.nio.ByteBuffer;

        $r1 = new android.util.apk.VerityBuilder$BufferedDigester;

        specialinvoke $r1.<android.util.apk.VerityBuilder$BufferedDigester: void <init>(byte[],java.nio.ByteBuffer,android.util.apk.VerityBuilder$1)>(null, r5, null);

        $r2 = new android.util.apk.MemoryMappedFileDataSource;

        $r3 = virtualinvoke r0.<java.io.RandomAccessFile: java.io.FileDescriptor getFD()>();

        $l1 = virtualinvoke r0.<java.io.RandomAccessFile: long length()>();

        specialinvoke $r2.<android.util.apk.MemoryMappedFileDataSource: void <init>(java.io.FileDescriptor,long,long)>($r3, 0L, $l1);

        staticinvoke <android.util.apk.VerityBuilder: void consumeByChunk(android.util.apk.DataDigester,android.util.apk.DataSource,int)>($r1, $r2, 1048576);

        $l2 = virtualinvoke r0.<java.io.RandomAccessFile: long length()>();

        $l3 = $l2 % 4096L;

        i0 = (int) $l3;

        if i0 == 0 goto label1;

        $i4 = 4096 - i0;

        $r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i4);

        virtualinvoke $r1.<android.util.apk.VerityBuilder$BufferedDigester: void consume(java.nio.ByteBuffer)>($r4);

     label1:
        virtualinvoke $r1.<android.util.apk.VerityBuilder$BufferedDigester: void assertEmptyBuffer()>();

        staticinvoke <android.util.apk.VerityBuilder$BufferedDigester: void access$200(android.util.apk.VerityBuilder$BufferedDigester)>($r1);

        return;
    }

    private static android.util.apk.VerityBuilder$VerityResult generateVerityTreeInternal(java.io.RandomAccessFile, android.util.apk.ByteBufferFactory, android.util.apk.SignatureInfo) throws java.io.IOException, java.lang.SecurityException, java.security.NoSuchAlgorithmException, java.security.DigestException
    {
        java.io.RandomAccessFile r0;
        android.util.apk.SignatureInfo r1;
        long l0, l1, $l3, $l4, $l5;
        int[] r2;
        int i2, $i6, $i7, $i8;
        java.nio.ByteBuffer r3, r10;
        java.nio.ByteOrder $r4;
        android.util.apk.VerityBuilder$VerityResult $r6;
        byte[] $r7, $r8;
        android.util.apk.ByteBufferFactory r9;

        r0 := @parameter0: java.io.RandomAccessFile;

        r9 := @parameter1: android.util.apk.ByteBufferFactory;

        r1 := @parameter2: android.util.apk.SignatureInfo;

        l0 = r1.<android.util.apk.SignatureInfo: long centralDirOffset>;

        l1 = r1.<android.util.apk.SignatureInfo: long apkSigningBlockOffset>;

        $l3 = virtualinvoke r0.<java.io.RandomAccessFile: long length()>();

        $l4 = l0 - l1;

        $l5 = $l3 - $l4;

        r2 = staticinvoke <android.util.apk.VerityBuilder: int[] calculateVerityLevelOffset(long)>($l5);

        $i6 = lengthof r2;

        $i7 = $i6 - 1;

        i2 = r2[$i7];

        $i8 = i2 + 4096;

        r3 = interfaceinvoke r9.<android.util.apk.ByteBufferFactory: java.nio.ByteBuffer create(int)>($i8);

        $r4 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r4);

        r10 = staticinvoke <android.util.apk.VerityBuilder: java.nio.ByteBuffer slice(java.nio.ByteBuffer,int,int)>(r3, 0, i2);

        $r6 = new android.util.apk.VerityBuilder$VerityResult;

        $r7 = <android.util.apk.VerityBuilder: byte[] DEFAULT_SALT>;

        $r8 = staticinvoke <android.util.apk.VerityBuilder: byte[] generateVerityTreeInternal(java.io.RandomAccessFile,android.util.apk.SignatureInfo,byte[],int[],java.nio.ByteBuffer)>(r0, r1, $r7, r2, r10);

        specialinvoke $r6.<android.util.apk.VerityBuilder$VerityResult: void <init>(java.nio.ByteBuffer,int,byte[],android.util.apk.VerityBuilder$1)>(r3, i2, $r8, null);

        return $r6;
    }

    private static byte[] generateVerityTreeInternal(java.io.RandomAccessFile, android.util.apk.SignatureInfo, byte[], int[], java.nio.ByteBuffer) throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.DigestException
    {
        byte[] r0, r15;
        int[] r1;
        java.nio.ByteBuffer r2, $r3, $r5, $r6, r11, r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14;
        android.util.apk.VerityBuilder$BufferedDigester $r4, $r8;
        android.util.apk.ByteBufferDataSource $r7;
        java.io.RandomAccessFile r9;
        android.util.apk.SignatureInfo r10;

        r9 := @parameter0: java.io.RandomAccessFile;

        r10 := @parameter1: android.util.apk.SignatureInfo;

        r0 := @parameter2: byte[];

        r1 := @parameter3: int[];

        r2 := @parameter4: java.nio.ByteBuffer;

        staticinvoke <android.util.apk.VerityBuilder: void assertSigningBlockAlignedAndHasFullPages(android.util.apk.SignatureInfo)>(r10);

        $i0 = lengthof r1;

        $i1 = $i0 - 2;

        $i5 = r1[$i1];

        $i2 = lengthof r1;

        $i3 = $i2 - 1;

        $i4 = r1[$i3];

        $r3 = staticinvoke <android.util.apk.VerityBuilder: java.nio.ByteBuffer slice(java.nio.ByteBuffer,int,int)>(r2, $i5, $i4);

        staticinvoke <android.util.apk.VerityBuilder: void generateApkVerityDigestAtLeafLevel(java.io.RandomAccessFile,android.util.apk.SignatureInfo,byte[],java.nio.ByteBuffer)>(r9, r10, r0, $r3);

        $i6 = lengthof r1;

        i14 = $i6 - 3;

     label1:
        if i14 < 0 goto label2;

        $i7 = i14 + 1;

        $i10 = r1[$i7];

        $i8 = i14 + 2;

        $i9 = r1[$i8];

        r11 = staticinvoke <android.util.apk.VerityBuilder: java.nio.ByteBuffer slice(java.nio.ByteBuffer,int,int)>(r2, $i10, $i9);

        $i13 = r1[i14];

        $i11 = i14 + 1;

        $i12 = r1[$i11];

        r12 = staticinvoke <android.util.apk.VerityBuilder: java.nio.ByteBuffer slice(java.nio.ByteBuffer,int,int)>(r2, $i13, $i12);

        $r7 = new android.util.apk.ByteBufferDataSource;

        specialinvoke $r7.<android.util.apk.ByteBufferDataSource: void <init>(java.nio.ByteBuffer)>(r11);

        $r8 = new android.util.apk.VerityBuilder$BufferedDigester;

        specialinvoke $r8.<android.util.apk.VerityBuilder$BufferedDigester: void <init>(byte[],java.nio.ByteBuffer,android.util.apk.VerityBuilder$1)>(r0, r12, null);

        staticinvoke <android.util.apk.VerityBuilder: void consumeByChunk(android.util.apk.DataDigester,android.util.apk.DataSource,int)>($r8, $r7, 4096);

        virtualinvoke $r8.<android.util.apk.VerityBuilder$BufferedDigester: void assertEmptyBuffer()>();

        staticinvoke <android.util.apk.VerityBuilder$BufferedDigester: void access$200(android.util.apk.VerityBuilder$BufferedDigester)>($r8);

        i14 = i14 + -1;

        goto label1;

     label2:
        r15 = newarray (byte)[32];

        $r4 = new android.util.apk.VerityBuilder$BufferedDigester;

        $r5 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r15);

        specialinvoke $r4.<android.util.apk.VerityBuilder$BufferedDigester: void <init>(byte[],java.nio.ByteBuffer,android.util.apk.VerityBuilder$1)>(r0, $r5, null);

        $r6 = staticinvoke <android.util.apk.VerityBuilder: java.nio.ByteBuffer slice(java.nio.ByteBuffer,int,int)>(r2, 0, 4096);

        virtualinvoke $r4.<android.util.apk.VerityBuilder$BufferedDigester: void consume(java.nio.ByteBuffer)>($r6);

        virtualinvoke $r4.<android.util.apk.VerityBuilder$BufferedDigester: void assertEmptyBuffer()>();

        return r15;
    }

    private static void skip(java.nio.ByteBuffer, int)
    {
        java.nio.ByteBuffer r0;
        int i0, $i1, $i2;

        r0 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        $i1 = virtualinvoke r0.<java.nio.ByteBuffer: int position()>();

        $i2 = $i1 + i0;

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i2);

        return;
    }

    private static java.nio.ByteBuffer slice(java.nio.ByteBuffer, int, int)
    {
        int i0, i1;
        java.nio.ByteBuffer $r3, r4, r5;

        r4 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r5 = virtualinvoke r4.<java.nio.ByteBuffer: java.nio.ByteBuffer duplicate()>();

        virtualinvoke r5.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0);

        virtualinvoke r5.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(i1);

        virtualinvoke r5.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i0);

        $r3 = virtualinvoke r5.<java.nio.ByteBuffer: java.nio.ByteBuffer slice()>();

        return $r3;
    }
}
