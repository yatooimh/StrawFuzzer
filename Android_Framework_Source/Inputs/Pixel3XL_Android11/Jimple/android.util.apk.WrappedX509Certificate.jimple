class android.util.apk.WrappedX509Certificate extends java.security.cert.X509Certificate
{
    private final java.security.cert.X509Certificate mWrapped;

    void <init>(java.security.cert.X509Certificate)
    {
        android.util.apk.WrappedX509Certificate r0;
        java.security.cert.X509Certificate r1;

        r0 := @this: android.util.apk.WrappedX509Certificate;

        r1 := @parameter0: java.security.cert.X509Certificate;

        specialinvoke r0.<java.security.cert.X509Certificate: void <init>()>();

        r0.<android.util.apk.WrappedX509Certificate: java.security.cert.X509Certificate mWrapped> = r1;

        return;
    }

    public void checkValidity() throws java.security.cert.CertificateExpiredException, java.security.cert.CertificateNotYetValidException
    {
        android.util.apk.WrappedX509Certificate r0;
        java.security.cert.X509Certificate $r1;

        r0 := @this: android.util.apk.WrappedX509Certificate;

        $r1 = r0.<android.util.apk.WrappedX509Certificate: java.security.cert.X509Certificate mWrapped>;

        virtualinvoke $r1.<java.security.cert.X509Certificate: void checkValidity()>();

        return;
    }

    public void checkValidity(java.util.Date) throws java.security.cert.CertificateExpiredException, java.security.cert.CertificateNotYetValidException
    {
        android.util.apk.WrappedX509Certificate r0;
        java.util.Date r1;
        java.security.cert.X509Certificate $r2;

        r0 := @this: android.util.apk.WrappedX509Certificate;

        r1 := @parameter0: java.util.Date;

        $r2 = r0.<android.util.apk.WrappedX509Certificate: java.security.cert.X509Certificate mWrapped>;

        virtualinvoke $r2.<java.security.cert.X509Certificate: void checkValidity(java.util.Date)>(r1);

        return;
    }

    public int getBasicConstraints()
    {
        android.util.apk.WrappedX509Certificate r0;
        java.security.cert.X509Certificate $r1;
        int $i0;

        r0 := @this: android.util.apk.WrappedX509Certificate;

        $r1 = r0.<android.util.apk.WrappedX509Certificate: java.security.cert.X509Certificate mWrapped>;

        $i0 = virtualinvoke $r1.<java.security.cert.X509Certificate: int getBasicConstraints()>();

        return $i0;
    }

    public java.util.Set getCriticalExtensionOIDs()
    {
        android.util.apk.WrappedX509Certificate r0;
        java.security.cert.X509Certificate $r1;
        java.util.Set $r2;

        r0 := @this: android.util.apk.WrappedX509Certificate;

        $r1 = r0.<android.util.apk.WrappedX509Certificate: java.security.cert.X509Certificate mWrapped>;

        $r2 = virtualinvoke $r1.<java.security.cert.X509Certificate: java.util.Set getCriticalExtensionOIDs()>();

        return $r2;
    }

    public byte[] getEncoded() throws java.security.cert.CertificateEncodingException
    {
        android.util.apk.WrappedX509Certificate r0;
        java.security.cert.X509Certificate $r1;
        byte[] $r2;

        r0 := @this: android.util.apk.WrappedX509Certificate;

        $r1 = r0.<android.util.apk.WrappedX509Certificate: java.security.cert.X509Certificate mWrapped>;

        $r2 = virtualinvoke $r1.<java.security.cert.X509Certificate: byte[] getEncoded()>();

        return $r2;
    }

    public byte[] getExtensionValue(java.lang.String)
    {
        android.util.apk.WrappedX509Certificate r0;
        java.lang.String r1;
        java.security.cert.X509Certificate $r2;
        byte[] $r3;

        r0 := @this: android.util.apk.WrappedX509Certificate;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.util.apk.WrappedX509Certificate: java.security.cert.X509Certificate mWrapped>;

        $r3 = virtualinvoke $r2.<java.security.cert.X509Certificate: byte[] getExtensionValue(java.lang.String)>(r1);

        return $r3;
    }

    public java.security.Principal getIssuerDN()
    {
        android.util.apk.WrappedX509Certificate r0;
        java.security.cert.X509Certificate $r1;
        java.security.Principal $r2;

        r0 := @this: android.util.apk.WrappedX509Certificate;

        $r1 = r0.<android.util.apk.WrappedX509Certificate: java.security.cert.X509Certificate mWrapped>;

        $r2 = virtualinvoke $r1.<java.security.cert.X509Certificate: java.security.Principal getIssuerDN()>();

        return $r2;
    }

    public boolean[] getIssuerUniqueID()
    {
        android.util.apk.WrappedX509Certificate r0;
        java.security.cert.X509Certificate $r1;
        boolean[] $r2;

        r0 := @this: android.util.apk.WrappedX509Certificate;

        $r1 = r0.<android.util.apk.WrappedX509Certificate: java.security.cert.X509Certificate mWrapped>;

        $r2 = virtualinvoke $r1.<java.security.cert.X509Certificate: boolean[] getIssuerUniqueID()>();

        return $r2;
    }

    public boolean[] getKeyUsage()
    {
        android.util.apk.WrappedX509Certificate r0;
        java.security.cert.X509Certificate $r1;
        boolean[] $r2;

        r0 := @this: android.util.apk.WrappedX509Certificate;

        $r1 = r0.<android.util.apk.WrappedX509Certificate: java.security.cert.X509Certificate mWrapped>;

        $r2 = virtualinvoke $r1.<java.security.cert.X509Certificate: boolean[] getKeyUsage()>();

        return $r2;
    }

    public java.util.Set getNonCriticalExtensionOIDs()
    {
        android.util.apk.WrappedX509Certificate r0;
        java.security.cert.X509Certificate $r1;
        java.util.Set $r2;

        r0 := @this: android.util.apk.WrappedX509Certificate;

        $r1 = r0.<android.util.apk.WrappedX509Certificate: java.security.cert.X509Certificate mWrapped>;

        $r2 = virtualinvoke $r1.<java.security.cert.X509Certificate: java.util.Set getNonCriticalExtensionOIDs()>();

        return $r2;
    }

    public java.util.Date getNotAfter()
    {
        android.util.apk.WrappedX509Certificate r0;
        java.security.cert.X509Certificate $r1;
        java.util.Date $r2;

        r0 := @this: android.util.apk.WrappedX509Certificate;

        $r1 = r0.<android.util.apk.WrappedX509Certificate: java.security.cert.X509Certificate mWrapped>;

        $r2 = virtualinvoke $r1.<java.security.cert.X509Certificate: java.util.Date getNotAfter()>();

        return $r2;
    }

    public java.util.Date getNotBefore()
    {
        android.util.apk.WrappedX509Certificate r0;
        java.security.cert.X509Certificate $r1;
        java.util.Date $r2;

        r0 := @this: android.util.apk.WrappedX509Certificate;

        $r1 = r0.<android.util.apk.WrappedX509Certificate: java.security.cert.X509Certificate mWrapped>;

        $r2 = virtualinvoke $r1.<java.security.cert.X509Certificate: java.util.Date getNotBefore()>();

        return $r2;
    }

    public java.security.PublicKey getPublicKey()
    {
        android.util.apk.WrappedX509Certificate r0;
        java.security.cert.X509Certificate $r1;
        java.security.PublicKey $r2;

        r0 := @this: android.util.apk.WrappedX509Certificate;

        $r1 = r0.<android.util.apk.WrappedX509Certificate: java.security.cert.X509Certificate mWrapped>;

        $r2 = virtualinvoke $r1.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();

        return $r2;
    }

    public java.math.BigInteger getSerialNumber()
    {
        android.util.apk.WrappedX509Certificate r0;
        java.security.cert.X509Certificate $r1;
        java.math.BigInteger $r2;

        r0 := @this: android.util.apk.WrappedX509Certificate;

        $r1 = r0.<android.util.apk.WrappedX509Certificate: java.security.cert.X509Certificate mWrapped>;

        $r2 = virtualinvoke $r1.<java.security.cert.X509Certificate: java.math.BigInteger getSerialNumber()>();

        return $r2;
    }

    public java.lang.String getSigAlgName()
    {
        android.util.apk.WrappedX509Certificate r0;
        java.security.cert.X509Certificate $r1;
        java.lang.String $r2;

        r0 := @this: android.util.apk.WrappedX509Certificate;

        $r1 = r0.<android.util.apk.WrappedX509Certificate: java.security.cert.X509Certificate mWrapped>;

        $r2 = virtualinvoke $r1.<java.security.cert.X509Certificate: java.lang.String getSigAlgName()>();

        return $r2;
    }

    public java.lang.String getSigAlgOID()
    {
        android.util.apk.WrappedX509Certificate r0;
        java.security.cert.X509Certificate $r1;
        java.lang.String $r2;

        r0 := @this: android.util.apk.WrappedX509Certificate;

        $r1 = r0.<android.util.apk.WrappedX509Certificate: java.security.cert.X509Certificate mWrapped>;

        $r2 = virtualinvoke $r1.<java.security.cert.X509Certificate: java.lang.String getSigAlgOID()>();

        return $r2;
    }

    public byte[] getSigAlgParams()
    {
        android.util.apk.WrappedX509Certificate r0;
        java.security.cert.X509Certificate $r1;
        byte[] $r2;

        r0 := @this: android.util.apk.WrappedX509Certificate;

        $r1 = r0.<android.util.apk.WrappedX509Certificate: java.security.cert.X509Certificate mWrapped>;

        $r2 = virtualinvoke $r1.<java.security.cert.X509Certificate: byte[] getSigAlgParams()>();

        return $r2;
    }

    public byte[] getSignature()
    {
        android.util.apk.WrappedX509Certificate r0;
        java.security.cert.X509Certificate $r1;
        byte[] $r2;

        r0 := @this: android.util.apk.WrappedX509Certificate;

        $r1 = r0.<android.util.apk.WrappedX509Certificate: java.security.cert.X509Certificate mWrapped>;

        $r2 = virtualinvoke $r1.<java.security.cert.X509Certificate: byte[] getSignature()>();

        return $r2;
    }

    public java.security.Principal getSubjectDN()
    {
        android.util.apk.WrappedX509Certificate r0;
        java.security.cert.X509Certificate $r1;
        java.security.Principal $r2;

        r0 := @this: android.util.apk.WrappedX509Certificate;

        $r1 = r0.<android.util.apk.WrappedX509Certificate: java.security.cert.X509Certificate mWrapped>;

        $r2 = virtualinvoke $r1.<java.security.cert.X509Certificate: java.security.Principal getSubjectDN()>();

        return $r2;
    }

    public boolean[] getSubjectUniqueID()
    {
        android.util.apk.WrappedX509Certificate r0;
        java.security.cert.X509Certificate $r1;
        boolean[] $r2;

        r0 := @this: android.util.apk.WrappedX509Certificate;

        $r1 = r0.<android.util.apk.WrappedX509Certificate: java.security.cert.X509Certificate mWrapped>;

        $r2 = virtualinvoke $r1.<java.security.cert.X509Certificate: boolean[] getSubjectUniqueID()>();

        return $r2;
    }

    public byte[] getTBSCertificate() throws java.security.cert.CertificateEncodingException
    {
        android.util.apk.WrappedX509Certificate r0;
        java.security.cert.X509Certificate $r1;
        byte[] $r2;

        r0 := @this: android.util.apk.WrappedX509Certificate;

        $r1 = r0.<android.util.apk.WrappedX509Certificate: java.security.cert.X509Certificate mWrapped>;

        $r2 = virtualinvoke $r1.<java.security.cert.X509Certificate: byte[] getTBSCertificate()>();

        return $r2;
    }

    public int getVersion()
    {
        android.util.apk.WrappedX509Certificate r0;
        java.security.cert.X509Certificate $r1;
        int $i0;

        r0 := @this: android.util.apk.WrappedX509Certificate;

        $r1 = r0.<android.util.apk.WrappedX509Certificate: java.security.cert.X509Certificate mWrapped>;

        $i0 = virtualinvoke $r1.<java.security.cert.X509Certificate: int getVersion()>();

        return $i0;
    }

    public boolean hasUnsupportedCriticalExtension()
    {
        android.util.apk.WrappedX509Certificate r0;
        java.security.cert.X509Certificate $r1;
        boolean $z0;

        r0 := @this: android.util.apk.WrappedX509Certificate;

        $r1 = r0.<android.util.apk.WrappedX509Certificate: java.security.cert.X509Certificate mWrapped>;

        $z0 = virtualinvoke $r1.<java.security.cert.X509Certificate: boolean hasUnsupportedCriticalExtension()>();

        return $z0;
    }

    public java.lang.String toString()
    {
        android.util.apk.WrappedX509Certificate r0;
        java.security.cert.X509Certificate $r1;
        java.lang.String $r2;

        r0 := @this: android.util.apk.WrappedX509Certificate;

        $r1 = r0.<android.util.apk.WrappedX509Certificate: java.security.cert.X509Certificate mWrapped>;

        $r2 = virtualinvoke $r1.<java.security.cert.X509Certificate: java.lang.String toString()>();

        return $r2;
    }

    public void verify(java.security.PublicKey) throws java.security.cert.CertificateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
    {
        android.util.apk.WrappedX509Certificate r0;
        java.security.PublicKey r1;
        java.security.cert.X509Certificate $r2;

        r0 := @this: android.util.apk.WrappedX509Certificate;

        r1 := @parameter0: java.security.PublicKey;

        $r2 = r0.<android.util.apk.WrappedX509Certificate: java.security.cert.X509Certificate mWrapped>;

        virtualinvoke $r2.<java.security.cert.X509Certificate: void verify(java.security.PublicKey)>(r1);

        return;
    }

    public void verify(java.security.PublicKey, java.lang.String) throws java.security.cert.CertificateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
    {
        android.util.apk.WrappedX509Certificate r0;
        java.security.PublicKey r1;
        java.lang.String r2;
        java.security.cert.X509Certificate $r3;

        r0 := @this: android.util.apk.WrappedX509Certificate;

        r1 := @parameter0: java.security.PublicKey;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<android.util.apk.WrappedX509Certificate: java.security.cert.X509Certificate mWrapped>;

        virtualinvoke $r3.<java.security.cert.X509Certificate: void verify(java.security.PublicKey,java.lang.String)>(r1, r2);

        return;
    }
}
