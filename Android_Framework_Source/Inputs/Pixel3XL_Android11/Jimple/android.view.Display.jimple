public final class android.view.Display extends java.lang.Object
{
    private static final int CACHED_APP_SIZE_DURATION_MILLIS;
    public static final int COLOR_MODE_ADOBE_RGB;
    public static final int COLOR_MODE_BT601_525;
    public static final int COLOR_MODE_BT601_525_UNADJUSTED;
    public static final int COLOR_MODE_BT601_625;
    public static final int COLOR_MODE_BT601_625_UNADJUSTED;
    public static final int COLOR_MODE_BT709;
    public static final int COLOR_MODE_DCI_P3;
    public static final int COLOR_MODE_DEFAULT;
    public static final int COLOR_MODE_DISPLAY_P3;
    public static final int COLOR_MODE_INVALID;
    public static final int COLOR_MODE_SRGB;
    private static final boolean DEBUG;
    public static final int DEFAULT_DISPLAY;
    public static final int FLAG_CAN_SHOW_WITH_INSECURE_KEYGUARD;
    public static final int FLAG_PRESENTATION;
    public static final int FLAG_PRIVATE;
    public static final int FLAG_ROUND;
    public static final int FLAG_SCALING_DISABLED;
    public static final int FLAG_SECURE;
    public static final int FLAG_SHOULD_SHOW_SYSTEM_DECORATIONS;
    public static final int FLAG_SUPPORTS_PROTECTED_BUFFERS;
    public static final int FLAG_TRUSTED;
    public static final int INVALID_DISPLAY;
    public static final int REMOVE_MODE_DESTROY_CONTENT;
    public static final int REMOVE_MODE_MOVE_CONTENT_TO_PRIMARY;
    public static final int STATE_DOZE;
    public static final int STATE_DOZE_SUSPEND;
    public static final int STATE_OFF;
    public static final int STATE_ON;
    public static final int STATE_ON_SUSPEND;
    public static final int STATE_UNKNOWN;
    public static final int STATE_VR;
    private static final java.lang.String TAG;
    public static final int TYPE_EXTERNAL;
    public static final int TYPE_INTERNAL;
    public static final int TYPE_OVERLAY;
    public static final int TYPE_UNKNOWN;
    public static final int TYPE_VIRTUAL;
    public static final int TYPE_WIFI;
    private final android.view.DisplayAddress mAddress;
    private int mCachedAppHeightCompat;
    private int mCachedAppWidthCompat;
    private android.view.DisplayAdjustments mDisplayAdjustments;
    private final int mDisplayId;
    private android.view.DisplayInfo mDisplayInfo;
    private final int mFlags;
    private final android.hardware.display.DisplayManagerGlobal mGlobal;
    private boolean mIsValid;
    private long mLastCachedAppSizeUpdate;
    private final int mLayerStack;
    private boolean mMayAdjustByFixedRotation;
    private final java.lang.String mOwnerPackageName;
    private final int mOwnerUid;
    private final android.content.res.Resources mResources;
    private final android.util.DisplayMetrics mTempMetrics;
    private final int mType;

    public void <init>(android.hardware.display.DisplayManagerGlobal, int, android.view.DisplayInfo, android.content.res.Resources)
    {
        android.view.Display r0;
        android.hardware.display.DisplayManagerGlobal r1;
        int i0;
        android.view.DisplayInfo r2;
        android.content.res.Resources r3;

        r0 := @this: android.view.Display;

        r1 := @parameter0: android.hardware.display.DisplayManagerGlobal;

        i0 := @parameter1: int;

        r2 := @parameter2: android.view.DisplayInfo;

        r3 := @parameter3: android.content.res.Resources;

        specialinvoke r0.<android.view.Display: void <init>(android.hardware.display.DisplayManagerGlobal,int,android.view.DisplayInfo,android.view.DisplayAdjustments,android.content.res.Resources)>(r1, i0, r2, null, r3);

        return;
    }

    public void <init>(android.hardware.display.DisplayManagerGlobal, int, android.view.DisplayInfo, android.view.DisplayAdjustments)
    {
        android.view.Display r0;
        android.hardware.display.DisplayManagerGlobal r1;
        int i0;
        android.view.DisplayInfo r2;
        android.view.DisplayAdjustments r3;

        r0 := @this: android.view.Display;

        r1 := @parameter0: android.hardware.display.DisplayManagerGlobal;

        i0 := @parameter1: int;

        r2 := @parameter2: android.view.DisplayInfo;

        r3 := @parameter3: android.view.DisplayAdjustments;

        specialinvoke r0.<android.view.Display: void <init>(android.hardware.display.DisplayManagerGlobal,int,android.view.DisplayInfo,android.view.DisplayAdjustments,android.content.res.Resources)>(r1, i0, r2, r3, null);

        return;
    }

    private void <init>(android.hardware.display.DisplayManagerGlobal, int, android.view.DisplayInfo, android.view.DisplayAdjustments, android.content.res.Resources)
    {
        android.view.Display r0;
        int i0, $i1, $i2, $i3, $i4;
        android.view.DisplayInfo r1;
        android.view.DisplayAdjustments r2, $r5, r9;
        android.content.res.Resources r3, $r6;
        android.util.DisplayMetrics $r4;
        android.content.res.Configuration $r7;
        android.hardware.display.DisplayManagerGlobal r8;
        android.view.DisplayAddress $r10;
        java.lang.String $r11;

        r0 := @this: android.view.Display;

        r8 := @parameter0: android.hardware.display.DisplayManagerGlobal;

        i0 := @parameter1: int;

        r1 := @parameter2: android.view.DisplayInfo;

        r2 := @parameter3: android.view.DisplayAdjustments;

        r3 := @parameter4: android.content.res.Resources;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new android.util.DisplayMetrics;

        specialinvoke $r4.<android.util.DisplayMetrics: void <init>()>();

        r0.<android.view.Display: android.util.DisplayMetrics mTempMetrics> = $r4;

        r0.<android.view.Display: android.hardware.display.DisplayManagerGlobal mGlobal> = r8;

        r0.<android.view.Display: int mDisplayId> = i0;

        r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo> = r1;

        r0.<android.view.Display: android.content.res.Resources mResources> = r3;

        if r3 == null goto label1;

        $r5 = new android.view.DisplayAdjustments;

        $r6 = r0.<android.view.Display: android.content.res.Resources mResources>;

        $r7 = virtualinvoke $r6.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        specialinvoke $r5.<android.view.DisplayAdjustments: void <init>(android.content.res.Configuration)>($r7);

        r9 = $r5;

        goto label3;

     label1:
        r9 = new android.view.DisplayAdjustments;

        if r2 == null goto label2;

        specialinvoke r9.<android.view.DisplayAdjustments: void <init>(android.view.DisplayAdjustments)>(r2);

        goto label3;

     label2:
        specialinvoke r9.<android.view.DisplayAdjustments: void <init>()>();

     label3:
        r0.<android.view.Display: android.view.DisplayAdjustments mDisplayAdjustments> = r9;

        r0.<android.view.Display: boolean mIsValid> = 1;

        $i1 = r1.<android.view.DisplayInfo: int layerStack>;

        r0.<android.view.Display: int mLayerStack> = $i1;

        $i2 = r1.<android.view.DisplayInfo: int flags>;

        r0.<android.view.Display: int mFlags> = $i2;

        $i3 = r1.<android.view.DisplayInfo: int type>;

        r0.<android.view.Display: int mType> = $i3;

        $r10 = r1.<android.view.DisplayInfo: android.view.DisplayAddress address>;

        r0.<android.view.Display: android.view.DisplayAddress mAddress> = $r10;

        $i4 = r1.<android.view.DisplayInfo: int ownerUid>;

        r0.<android.view.Display: int mOwnerUid> = $i4;

        $r11 = r1.<android.view.DisplayInfo: java.lang.String ownerPackageName>;

        r0.<android.view.Display: java.lang.String mOwnerPackageName> = $r11;

        return;
    }

    public static boolean hasAccess(int, int, int, int)
    {
        int i0, i1, i2, i3, $i4;
        android.hardware.display.DisplayManagerGlobal $r0;
        boolean $z0, z1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $i4 = i1 & 4;

        if $i4 == 0 goto label2;

        if i0 == i2 goto label2;

        if i0 == 1000 goto label2;

        if i0 == 0 goto label2;

        $r0 = staticinvoke <android.hardware.display.DisplayManagerGlobal: android.hardware.display.DisplayManagerGlobal getInstance()>();

        $z0 = virtualinvoke $r0.<android.hardware.display.DisplayManagerGlobal: boolean isUidPresentOnDisplay(int,int)>(i0, i3);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        z1 = 0;

        goto label3;

     label2:
        z1 = 1;

     label3:
        return z1;
    }

    public static boolean isActiveState(int)
    {
        int i0;
        boolean z0;

        i0 := @parameter0: int;

        if i0 == 2 goto label2;

        if i0 != 5 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    public static boolean isDozeState(int)
    {
        int i0;
        boolean z0;

        i0 := @parameter0: int;

        if i0 == 3 goto label2;

        if i0 != 4 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    public static boolean isSuspendedState(int)
    {
        int i0;
        boolean z1;

        i0 := @parameter0: int;

        z1 = 1;

        if i0 == 1 goto label2;

        z1 = 1;

        if i0 == 4 goto label2;

        if i0 != 6 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public static java.lang.String stateToString(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label8;
            case 1: goto label7;
            case 2: goto label6;
            case 3: goto label5;
            case 4: goto label4;
            case 5: goto label3;
            case 6: goto label2;
            default: goto label1;
        };

     label1:
        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;

     label2:
        return "ON_SUSPEND";

     label3:
        return "VR";

     label4:
        return "DOZE_SUSPEND";

     label5:
        return "DOZE";

     label6:
        return "ON";

     label7:
        return "OFF";

     label8:
        return "UNKNOWN";
    }

    public static java.lang.String typeToString(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        if i0 == 0 goto label6;

        if i0 == 1 goto label5;

        if i0 == 2 goto label4;

        if i0 == 3 goto label3;

        if i0 == 4 goto label2;

        if i0 == 5 goto label1;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;

     label1:
        return "VIRTUAL";

     label2:
        return "OVERLAY";

     label3:
        return "WIFI";

     label4:
        return "EXTERNAL";

     label5:
        return "INTERNAL";

     label6:
        return "UNKNOWN";
    }

    private void updateCachedAppSizeIfNeededLocked()
    {
        android.view.Display r0;
        long l0, $l1, $l2;
        byte $b3;
        android.view.DisplayInfo $r1;
        android.util.DisplayMetrics $r2, $r4, $r5;
        android.view.DisplayAdjustments $r3;
        int $i4, $i5;

        r0 := @this: android.view.Display;

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l1 = r0.<android.view.Display: long mLastCachedAppSizeUpdate>;

        $l2 = $l1 + 20L;

        $b3 = l0 cmp $l2;

        if $b3 <= 0 goto label1;

        specialinvoke r0.<android.view.Display: void updateDisplayInfoLocked()>();

        $r1 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        $r2 = r0.<android.view.Display: android.util.DisplayMetrics mTempMetrics>;

        $r3 = virtualinvoke r0.<android.view.Display: android.view.DisplayAdjustments getDisplayAdjustments()>();

        virtualinvoke $r1.<android.view.DisplayInfo: void getAppMetrics(android.util.DisplayMetrics,android.view.DisplayAdjustments)>($r2, $r3);

        $r4 = r0.<android.view.Display: android.util.DisplayMetrics mTempMetrics>;

        $i4 = $r4.<android.util.DisplayMetrics: int widthPixels>;

        r0.<android.view.Display: int mCachedAppWidthCompat> = $i4;

        $r5 = r0.<android.view.Display: android.util.DisplayMetrics mTempMetrics>;

        $i5 = $r5.<android.util.DisplayMetrics: int heightPixels>;

        r0.<android.view.Display: int mCachedAppHeightCompat> = $i5;

        r0.<android.view.Display: long mLastCachedAppSizeUpdate> = l0;

     label1:
        return;
    }

    private void updateDisplayInfoLocked()
    {
        android.view.Display r0;
        int $i0;
        android.hardware.display.DisplayManagerGlobal $r1;
        boolean $z0, $z1, $z2, z3;
        android.view.DisplayInfo r2;
        android.content.res.Resources r3;

        r0 := @this: android.view.Display;

        $r1 = r0.<android.view.Display: android.hardware.display.DisplayManagerGlobal mGlobal>;

        $i0 = r0.<android.view.Display: int mDisplayId>;

        r2 = virtualinvoke $r1.<android.hardware.display.DisplayManagerGlobal: android.view.DisplayInfo getDisplayInfo(int)>($i0);

        z3 = 0;

        if r2 != null goto label1;

        $z2 = r0.<android.view.Display: boolean mIsValid>;

        if $z2 == 0 goto label2;

        r0.<android.view.Display: boolean mIsValid> = 0;

        goto label2;

     label1:
        r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo> = r2;

        $z0 = r0.<android.view.Display: boolean mIsValid>;

        if $z0 != 0 goto label2;

        r0.<android.view.Display: boolean mIsValid> = 1;

     label2:
        r3 = r0.<android.view.Display: android.content.res.Resources mResources>;

        if r3 == null goto label3;

        $z1 = virtualinvoke r3.<android.content.res.Resources: boolean hasOverrideDisplayAdjustments()>();

        if $z1 == 0 goto label3;

        z3 = 1;

        goto label3;

     label3:
        r0.<android.view.Display: boolean mMayAdjustByFixedRotation> = z3;

        return;
    }

    public android.view.DisplayAddress getAddress()
    {
        android.view.Display r0;
        android.view.DisplayAddress $r1;

        r0 := @this: android.view.Display;

        $r1 = r0.<android.view.Display: android.view.DisplayAddress mAddress>;

        return $r1;
    }

    public long getAppVsyncOffsetNanos()
    {
        android.view.Display r0;
        long l0;
        android.view.DisplayInfo $r2;
        java.lang.Throwable $r3;

        r0 := @this: android.view.Display;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.view.Display: void updateDisplayInfoLocked()>();

        $r2 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        l0 = $r2.<android.view.DisplayInfo: long appVsyncOffsetNanos>;

        exitmonitor r0;

     label2:
        return l0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int getColorMode()
    {
        android.view.Display r0;
        int i0;
        android.view.DisplayInfo $r2;
        java.lang.Throwable $r3;

        r0 := @this: android.view.Display;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.view.Display: void updateDisplayInfoLocked()>();

        $r2 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        i0 = $r2.<android.view.DisplayInfo: int colorMode>;

        exitmonitor r0;

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void getCurrentSizeRange(android.graphics.Point, android.graphics.Point)
    {
        android.view.Display r0;
        android.graphics.Point r1, r7;
        android.view.DisplayInfo $r2, $r3, $r4, $r5;
        int $i0, $i1, $i2, $i3;
        java.lang.Throwable $r6;

        r0 := @this: android.view.Display;

        r7 := @parameter0: android.graphics.Point;

        r1 := @parameter1: android.graphics.Point;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.view.Display: void updateDisplayInfoLocked()>();

        $r2 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        $i0 = $r2.<android.view.DisplayInfo: int smallestNominalAppWidth>;

        r7.<android.graphics.Point: int x> = $i0;

        $r3 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        $i1 = $r3.<android.view.DisplayInfo: int smallestNominalAppHeight>;

        r7.<android.graphics.Point: int y> = $i1;

        $r4 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        $i2 = $r4.<android.view.DisplayInfo: int largestNominalAppWidth>;

        r1.<android.graphics.Point: int x> = $i2;

        $r5 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        $i3 = $r5.<android.view.DisplayInfo: int largestNominalAppHeight>;

        r1.<android.graphics.Point: int y> = $i3;

        exitmonitor r0;

     label2:
        return;

     label3:
        $r6 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.view.DisplayCutout getCutout()
    {
        android.view.Display r0;
        boolean $z0;
        android.view.DisplayInfo $r1, $r3;
        android.view.DisplayAdjustments $r2;
        android.view.DisplayCutout $r4, r6;
        java.lang.Throwable $r5;

        r0 := @this: android.view.Display;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.view.Display: void updateDisplayInfoLocked()>();

        $z0 = r0.<android.view.Display: boolean mMayAdjustByFixedRotation>;

        if $z0 == 0 goto label3;

        $r2 = virtualinvoke r0.<android.view.Display: android.view.DisplayAdjustments getDisplayAdjustments()>();

        $r3 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        $r4 = $r3.<android.view.DisplayInfo: android.view.DisplayCutout displayCutout>;

        r6 = virtualinvoke $r2.<android.view.DisplayAdjustments: android.view.DisplayCutout getDisplayCutout(android.view.DisplayCutout)>($r4);

     label2:
        goto label4;

     label3:
        $r1 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        r6 = $r1.<android.view.DisplayInfo: android.view.DisplayCutout displayCutout>;

     label4:
        exitmonitor r0;

     label5:
        return r6;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r0;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public android.view.DisplayAdjustments getDisplayAdjustments()
    {
        android.view.Display r0;
        android.view.DisplayAdjustments $r1, $r2, r4, $r5;
        boolean $z0;
        android.content.res.Resources r3;

        r0 := @this: android.view.Display;

        r3 = r0.<android.view.Display: android.content.res.Resources mResources>;

        if r3 == null goto label1;

        r4 = virtualinvoke r3.<android.content.res.Resources: android.view.DisplayAdjustments getDisplayAdjustments()>();

        $r1 = r0.<android.view.Display: android.view.DisplayAdjustments mDisplayAdjustments>;

        $z0 = virtualinvoke $r1.<android.view.DisplayAdjustments: boolean equals(java.lang.Object)>(r4);

        if $z0 != 0 goto label1;

        $r2 = new android.view.DisplayAdjustments;

        specialinvoke $r2.<android.view.DisplayAdjustments: void <init>(android.view.DisplayAdjustments)>(r4);

        r0.<android.view.Display: android.view.DisplayAdjustments mDisplayAdjustments> = $r2;

     label1:
        $r5 = r0.<android.view.Display: android.view.DisplayAdjustments mDisplayAdjustments>;

        return $r5;
    }

    public int getDisplayId()
    {
        android.view.Display r0;
        int $i0;

        r0 := @this: android.view.Display;

        $i0 = r0.<android.view.Display: int mDisplayId>;

        return $i0;
    }

    public boolean getDisplayInfo(android.view.DisplayInfo)
    {
        android.view.Display r0;
        boolean z0;
        android.view.DisplayInfo $r1, r3;
        java.lang.Throwable $r2;

        r0 := @this: android.view.Display;

        r3 := @parameter0: android.view.DisplayInfo;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.view.Display: void updateDisplayInfoLocked()>();

        $r1 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        virtualinvoke r3.<android.view.DisplayInfo: void copyFrom(android.view.DisplayInfo)>($r1);

        z0 = r0.<android.view.Display: boolean mIsValid>;

        exitmonitor r0;

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int getFlags()
    {
        android.view.Display r0;
        int $i0;

        r0 := @this: android.view.Display;

        $i0 = r0.<android.view.Display: int mFlags>;

        return $i0;
    }

    public android.view.Display$HdrCapabilities getHdrCapabilities()
    {
        android.view.Display r0;
        android.view.DisplayInfo $r1;
        java.lang.Throwable $r2;
        android.view.Display$HdrCapabilities r3;

        r0 := @this: android.view.Display;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.view.Display: void updateDisplayInfoLocked()>();

        $r1 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        r3 = $r1.<android.view.DisplayInfo: android.view.Display$HdrCapabilities hdrCapabilities>;

        exitmonitor r0;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int getHeight()
    {
        android.view.Display r0;
        int i0;
        java.lang.Throwable $r2;

        r0 := @this: android.view.Display;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.view.Display: void updateCachedAppSizeIfNeededLocked()>();

        i0 = r0.<android.view.Display: int mCachedAppHeightCompat>;

        exitmonitor r0;

     label2:
        return i0;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int getLayerStack()
    {
        android.view.Display r0;
        int $i0;

        r0 := @this: android.view.Display;

        $i0 = r0.<android.view.Display: int mLayerStack>;

        return $i0;
    }

    public int getMaximumSizeDimension()
    {
        android.view.Display r0;
        int i0, $i1, $i2;
        android.view.DisplayInfo $r2, $r3;
        java.lang.Throwable $r4;

        r0 := @this: android.view.Display;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.view.Display: void updateDisplayInfoLocked()>();

        $r2 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        $i2 = $r2.<android.view.DisplayInfo: int logicalWidth>;

        $r3 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        $i1 = $r3.<android.view.DisplayInfo: int logicalHeight>;

        i0 = staticinvoke <java.lang.Math: int max(int,int)>($i2, $i1);

        exitmonitor r0;

     label2:
        return i0;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void getMetrics(android.util.DisplayMetrics)
    {
        android.view.Display r0;
        android.view.DisplayInfo $r1;
        android.view.DisplayAdjustments $r2;
        java.lang.Throwable $r3;
        android.util.DisplayMetrics r4;

        r0 := @this: android.view.Display;

        r4 := @parameter0: android.util.DisplayMetrics;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.view.Display: void updateDisplayInfoLocked()>();

        $r1 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        $r2 = virtualinvoke r0.<android.view.Display: android.view.DisplayAdjustments getDisplayAdjustments()>();

        virtualinvoke $r1.<android.view.DisplayInfo: void getAppMetrics(android.util.DisplayMetrics,android.view.DisplayAdjustments)>(r4, $r2);

        exitmonitor r0;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.view.Display$Mode getMode()
    {
        android.view.Display r0;
        android.view.DisplayInfo $r1;
        java.lang.Throwable $r2;
        android.view.Display$Mode r3;

        r0 := @this: android.view.Display;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.view.Display: void updateDisplayInfoLocked()>();

        $r1 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        r3 = virtualinvoke $r1.<android.view.DisplayInfo: android.view.Display$Mode getMode()>();

        exitmonitor r0;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.lang.String getName()
    {
        android.view.Display r0;
        android.view.DisplayInfo $r1;
        java.lang.Throwable $r2;
        java.lang.String r3;

        r0 := @this: android.view.Display;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.view.Display: void updateDisplayInfoLocked()>();

        $r1 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        r3 = $r1.<android.view.DisplayInfo: java.lang.String name>;

        exitmonitor r0;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int getOrientation()
    {
        android.view.Display r0;
        int $i0;

        r0 := @this: android.view.Display;

        $i0 = virtualinvoke r0.<android.view.Display: int getRotation()>();

        return $i0;
    }

    public java.lang.String getOwnerPackageName()
    {
        android.view.Display r0;
        java.lang.String $r1;

        r0 := @this: android.view.Display;

        $r1 = r0.<android.view.Display: java.lang.String mOwnerPackageName>;

        return $r1;
    }

    public int getOwnerUid()
    {
        android.view.Display r0;
        int $i0;

        r0 := @this: android.view.Display;

        $i0 = r0.<android.view.Display: int mOwnerUid>;

        return $i0;
    }

    public int getPixelFormat()
    {
        android.view.Display r0;

        r0 := @this: android.view.Display;

        return 1;
    }

    public android.graphics.ColorSpace getPreferredWideGamutColorSpace()
    {
        android.view.Display r0;
        android.view.DisplayInfo $r1;
        boolean $z0;
        android.hardware.display.DisplayManagerGlobal $r2;
        java.lang.Throwable $r3;
        android.graphics.ColorSpace r4;

        r0 := @this: android.view.Display;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.view.Display: void updateDisplayInfoLocked()>();

        $r1 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        $z0 = virtualinvoke $r1.<android.view.DisplayInfo: boolean isWideColorGamut()>();

        if $z0 == 0 goto label3;

        $r2 = r0.<android.view.Display: android.hardware.display.DisplayManagerGlobal mGlobal>;

        r4 = virtualinvoke $r2.<android.hardware.display.DisplayManagerGlobal: android.graphics.ColorSpace getPreferredWideGamutColorSpace()>();

        exitmonitor r0;

     label2:
        return r4;

     label3:
        exitmonitor r0;

     label4:
        return null;

     label5:
        $r3 := @caughtexception;

     label6:
        exitmonitor r0;

     label7:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public long getPresentationDeadlineNanos()
    {
        android.view.Display r0;
        long l0;
        android.view.DisplayInfo $r2;
        java.lang.Throwable $r3;

        r0 := @this: android.view.Display;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.view.Display: void updateDisplayInfoLocked()>();

        $r2 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        l0 = $r2.<android.view.DisplayInfo: long presentationDeadlineNanos>;

        exitmonitor r0;

     label2:
        return l0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void getRealMetrics(android.util.DisplayMetrics)
    {
        android.view.Display r0;
        android.content.res.CompatibilityInfo $r1;
        android.view.DisplayInfo $r2, $r4;
        boolean $z0;
        android.view.DisplayAdjustments $r3;
        int $i0;
        java.lang.Throwable $r5;
        android.util.DisplayMetrics r6;

        r0 := @this: android.view.Display;

        r6 := @parameter0: android.util.DisplayMetrics;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.view.Display: void updateDisplayInfoLocked()>();

        $r2 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        $r1 = <android.content.res.CompatibilityInfo: android.content.res.CompatibilityInfo DEFAULT_COMPATIBILITY_INFO>;

        virtualinvoke $r2.<android.view.DisplayInfo: void getLogicalMetrics(android.util.DisplayMetrics,android.content.res.CompatibilityInfo,android.content.res.Configuration)>(r6, $r1, null);

        $z0 = r0.<android.view.Display: boolean mMayAdjustByFixedRotation>;

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke r0.<android.view.Display: android.view.DisplayAdjustments getDisplayAdjustments()>();

        $r4 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        $i0 = $r4.<android.view.DisplayInfo: int rotation>;

        virtualinvoke $r3.<android.view.DisplayAdjustments: void adjustMetrics(android.util.DisplayMetrics,int)>(r6, $i0);

     label2:
        exitmonitor r0;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r0;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void getRealSize(android.graphics.Point)
    {
        android.view.Display r0;
        android.view.DisplayInfo $r1, $r2, $r4;
        int $i0, $i1, $i2;
        boolean $z0;
        android.view.DisplayAdjustments $r3;
        java.lang.Throwable $r5;
        android.graphics.Point r6;

        r0 := @this: android.view.Display;

        r6 := @parameter0: android.graphics.Point;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.view.Display: void updateDisplayInfoLocked()>();

        $r1 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        $i0 = $r1.<android.view.DisplayInfo: int logicalWidth>;

        r6.<android.graphics.Point: int x> = $i0;

        $r2 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        $i1 = $r2.<android.view.DisplayInfo: int logicalHeight>;

        r6.<android.graphics.Point: int y> = $i1;

        $z0 = r0.<android.view.Display: boolean mMayAdjustByFixedRotation>;

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke r0.<android.view.Display: android.view.DisplayAdjustments getDisplayAdjustments()>();

        $r4 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        $i2 = $r4.<android.view.DisplayInfo: int rotation>;

        virtualinvoke $r3.<android.view.DisplayAdjustments: void adjustSize(android.graphics.Point,int)>(r6, $i2);

     label2:
        exitmonitor r0;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r0;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void getRectSize(android.graphics.Rect)
    {
        android.view.Display r0;
        android.view.DisplayInfo $r1;
        android.util.DisplayMetrics $r2, $r4, $r5;
        android.view.DisplayAdjustments $r3;
        int $i0, $i1;
        java.lang.Throwable $r6;
        android.graphics.Rect r7;

        r0 := @this: android.view.Display;

        r7 := @parameter0: android.graphics.Rect;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.view.Display: void updateDisplayInfoLocked()>();

        $r1 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        $r2 = r0.<android.view.Display: android.util.DisplayMetrics mTempMetrics>;

        $r3 = virtualinvoke r0.<android.view.Display: android.view.DisplayAdjustments getDisplayAdjustments()>();

        virtualinvoke $r1.<android.view.DisplayInfo: void getAppMetrics(android.util.DisplayMetrics,android.view.DisplayAdjustments)>($r2, $r3);

        $r4 = r0.<android.view.Display: android.util.DisplayMetrics mTempMetrics>;

        $i1 = $r4.<android.util.DisplayMetrics: int widthPixels>;

        $r5 = r0.<android.view.Display: android.util.DisplayMetrics mTempMetrics>;

        $i0 = $r5.<android.util.DisplayMetrics: int heightPixels>;

        virtualinvoke r7.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, $i1, $i0);

        exitmonitor r0;

     label2:
        return;

     label3:
        $r6 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public float getRefreshRate()
    {
        android.view.Display r0;
        float f0;
        android.view.DisplayInfo $r2;
        android.view.Display$Mode $r3;
        java.lang.Throwable $r4;

        r0 := @this: android.view.Display;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.view.Display: void updateDisplayInfoLocked()>();

        $r2 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        $r3 = virtualinvoke $r2.<android.view.DisplayInfo: android.view.Display$Mode getMode()>();

        f0 = virtualinvoke $r3.<android.view.Display$Mode: float getRefreshRate()>();

        exitmonitor r0;

     label2:
        return f0;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int getRemoveMode()
    {
        android.view.Display r0;
        android.view.DisplayInfo $r1;
        int $i0;

        r0 := @this: android.view.Display;

        $r1 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        $i0 = $r1.<android.view.DisplayInfo: int removeMode>;

        return $i0;
    }

    public int getRotation()
    {
        android.view.Display r0;
        boolean $z0;
        android.view.DisplayInfo $r2, $r4;
        android.view.DisplayAdjustments $r3;
        int $i0, i1;
        java.lang.Throwable $r5;

        r0 := @this: android.view.Display;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.view.Display: void updateDisplayInfoLocked()>();

        $z0 = r0.<android.view.Display: boolean mMayAdjustByFixedRotation>;

        if $z0 == 0 goto label3;

        $r3 = virtualinvoke r0.<android.view.Display: android.view.DisplayAdjustments getDisplayAdjustments()>();

        $r4 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        $i0 = $r4.<android.view.DisplayInfo: int rotation>;

        i1 = virtualinvoke $r3.<android.view.DisplayAdjustments: int getRotation(int)>($i0);

     label2:
        goto label4;

     label3:
        $r2 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        i1 = $r2.<android.view.DisplayInfo: int rotation>;

     label4:
        exitmonitor r0;

     label5:
        return i1;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r0;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void getSize(android.graphics.Point)
    {
        android.view.Display r0;
        android.view.DisplayInfo $r1;
        android.util.DisplayMetrics $r2, $r4, $r5;
        android.view.DisplayAdjustments $r3;
        int $i0, $i1;
        java.lang.Throwable $r6;
        android.graphics.Point r7;

        r0 := @this: android.view.Display;

        r7 := @parameter0: android.graphics.Point;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.view.Display: void updateDisplayInfoLocked()>();

        $r1 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        $r2 = r0.<android.view.Display: android.util.DisplayMetrics mTempMetrics>;

        $r3 = virtualinvoke r0.<android.view.Display: android.view.DisplayAdjustments getDisplayAdjustments()>();

        virtualinvoke $r1.<android.view.DisplayInfo: void getAppMetrics(android.util.DisplayMetrics,android.view.DisplayAdjustments)>($r2, $r3);

        $r4 = r0.<android.view.Display: android.util.DisplayMetrics mTempMetrics>;

        $i0 = $r4.<android.util.DisplayMetrics: int widthPixels>;

        r7.<android.graphics.Point: int x> = $i0;

        $r5 = r0.<android.view.Display: android.util.DisplayMetrics mTempMetrics>;

        $i1 = $r5.<android.util.DisplayMetrics: int heightPixels>;

        r7.<android.graphics.Point: int y> = $i1;

        exitmonitor r0;

     label2:
        return;

     label3:
        $r6 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int getState()
    {
        android.view.Display r0;
        boolean $z0;
        android.view.DisplayInfo $r2;
        java.lang.Throwable $r3;
        int i0;

        r0 := @this: android.view.Display;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.view.Display: void updateDisplayInfoLocked()>();

        $z0 = r0.<android.view.Display: boolean mIsValid>;

        if $z0 == 0 goto label3;

        $r2 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        i0 = $r2.<android.view.DisplayInfo: int state>;

     label2:
        goto label4;

     label3:
        i0 = 0;

     label4:
        exitmonitor r0;

     label5:
        return i0;

     label6:
        $r3 := @caughtexception;

     label7:
        exitmonitor r0;

     label8:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public int[] getSupportedColorModes()
    {
        android.view.Display r0;
        android.view.DisplayInfo $r1;
        int $i0;
        java.lang.Throwable $r2;
        int[] r3, r4;

        r0 := @this: android.view.Display;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.view.Display: void updateDisplayInfoLocked()>();

        $r1 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        r3 = $r1.<android.view.DisplayInfo: int[] supportedColorModes>;

        $i0 = lengthof r3;

        r4 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>(r3, $i0);

        exitmonitor r0;

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.view.Display$Mode[] getSupportedModes()
    {
        android.view.Display r0;
        android.view.DisplayInfo $r1;
        int $i0;
        java.lang.Object[] $r2;
        java.lang.Throwable $r3;
        android.view.Display$Mode[] r4, r5;

        r0 := @this: android.view.Display;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.view.Display: void updateDisplayInfoLocked()>();

        $r1 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        r4 = $r1.<android.view.DisplayInfo: android.view.Display$Mode[] supportedModes>;

        $i0 = lengthof r4;

        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r4, $i0);

        r5 = (android.view.Display$Mode[]) $r2;

        exitmonitor r0;

     label2:
        return r5;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public float[] getSupportedRefreshRates()
    {
        android.view.Display r0;
        android.view.DisplayInfo $r1;
        java.lang.Throwable $r2;
        float[] r3;

        r0 := @this: android.view.Display;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.view.Display: void updateDisplayInfoLocked()>();

        $r1 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        r3 = virtualinvoke $r1.<android.view.DisplayInfo: float[] getDefaultRefreshRates()>();

        exitmonitor r0;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.graphics.ColorSpace[] getSupportedWideColorGamut()
    {
        android.view.Display r0;
        int[] r1;
        java.util.ArrayList r2;
        int i0, i1, i2;
        boolean $z0;
        java.lang.Object[] $r3;
        android.graphics.ColorSpace$Named $r4, $r6;
        android.graphics.ColorSpace $r5, $r7;
        java.lang.Throwable $r8;
        android.graphics.ColorSpace[] r9, r10;

        r0 := @this: android.view.Display;

        entermonitor r0;

        i2 = 0;

     label01:
        r9 = newarray (android.graphics.ColorSpace)[0];

        specialinvoke r0.<android.view.Display: void updateDisplayInfoLocked()>();

        $z0 = virtualinvoke r0.<android.view.Display: boolean isWideColorGamut()>();

        if $z0 != 0 goto label03;

        exitmonitor r0;

     label02:
        return r9;

     label03:
        r1 = virtualinvoke r0.<android.view.Display: int[] getSupportedColorModes()>();

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        i0 = lengthof r1;

     label04:
        if i2 >= i0 goto label09;

        i1 = r1[i2];

        if i1 == 6 goto label07;

        if i1 == 9 goto label05;

        goto label08;

     label05:
        $r6 = <android.graphics.ColorSpace$Named: android.graphics.ColorSpace$Named DISPLAY_P3>;

        $r7 = staticinvoke <android.graphics.ColorSpace: android.graphics.ColorSpace get(android.graphics.ColorSpace$Named)>($r6);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r7);

     label06:
        goto label08;

     label07:
        $r4 = <android.graphics.ColorSpace$Named: android.graphics.ColorSpace$Named DCI_P3>;

        $r5 = staticinvoke <android.graphics.ColorSpace: android.graphics.ColorSpace get(android.graphics.ColorSpace$Named)>($r4);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r5);

     label08:
        i2 = i2 + 1;

        goto label04;

     label09:
        $r3 = interfaceinvoke r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r9);

        r10 = (android.graphics.ColorSpace[]) $r3;

        exitmonitor r0;

     label10:
        return r10;

     label11:
        $r8 := @caughtexception;

     label12:
        exitmonitor r0;

     label13:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public int getType()
    {
        android.view.Display r0;
        int $i0;

        r0 := @this: android.view.Display;

        $i0 = r0.<android.view.Display: int mType>;

        return $i0;
    }

    public java.lang.String getUniqueId()
    {
        android.view.Display r0;
        android.view.DisplayInfo $r1;
        java.lang.String $r2;

        r0 := @this: android.view.Display;

        $r1 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        $r2 = $r1.<android.view.DisplayInfo: java.lang.String uniqueId>;

        return $r2;
    }

    public int getWidth()
    {
        android.view.Display r0;
        int i0;
        java.lang.Throwable $r2;

        r0 := @this: android.view.Display;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.view.Display: void updateCachedAppSizeIfNeededLocked()>();

        i0 = r0.<android.view.Display: int mCachedAppWidthCompat>;

        exitmonitor r0;

     label2:
        return i0;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean hasAccess(int)
    {
        android.view.Display r0;
        int i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @this: android.view.Display;

        i0 := @parameter0: int;

        $i3 = r0.<android.view.Display: int mFlags>;

        $i2 = r0.<android.view.Display: int mOwnerUid>;

        $i1 = r0.<android.view.Display: int mDisplayId>;

        $z0 = staticinvoke <android.view.Display: boolean hasAccess(int,int,int,int)>(i0, $i3, $i2, $i1);

        return $z0;
    }

    public boolean isHdr()
    {
        android.view.Display r0;
        boolean z0;
        android.view.DisplayInfo $r2;
        java.lang.Throwable $r3;

        r0 := @this: android.view.Display;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.view.Display: void updateDisplayInfoLocked()>();

        $r2 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        z0 = virtualinvoke $r2.<android.view.DisplayInfo: boolean isHdr()>();

        exitmonitor r0;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isMinimalPostProcessingSupported()
    {
        android.view.Display r0;
        boolean z0;
        android.view.DisplayInfo $r2;
        java.lang.Throwable $r3;

        r0 := @this: android.view.Display;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.view.Display: void updateDisplayInfoLocked()>();

        $r2 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        z0 = $r2.<android.view.DisplayInfo: boolean minimalPostProcessingSupported>;

        exitmonitor r0;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isPublicPresentation()
    {
        android.view.Display r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.Display;

        $i0 = r0.<android.view.Display: int mFlags>;

        $i1 = $i0 & 12;

        if $i1 != 8 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isTrusted()
    {
        android.view.Display r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.Display;

        $i0 = r0.<android.view.Display: int mFlags>;

        $i1 = $i0 & 128;

        if $i1 != 128 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isValid()
    {
        android.view.Display r0;
        boolean z0;
        java.lang.Throwable $r2;

        r0 := @this: android.view.Display;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.view.Display: void updateDisplayInfoLocked()>();

        z0 = r0.<android.view.Display: boolean mIsValid>;

        exitmonitor r0;

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isWideColorGamut()
    {
        android.view.Display r0;
        boolean z0;
        android.view.DisplayInfo $r2;
        java.lang.Throwable $r3;

        r0 := @this: android.view.Display;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.view.Display: void updateDisplayInfoLocked()>();

        $r2 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        z0 = virtualinvoke $r2.<android.view.DisplayInfo: boolean isWideColorGamut()>();

        exitmonitor r0;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void requestColorMode(int)
    {
        android.view.Display r0;
        int i0, $i1;
        android.hardware.display.DisplayManagerGlobal $r1;

        r0 := @this: android.view.Display;

        i0 := @parameter0: int;

        $r1 = r0.<android.view.Display: android.hardware.display.DisplayManagerGlobal mGlobal>;

        $i1 = r0.<android.view.Display: int mDisplayId>;

        virtualinvoke $r1.<android.hardware.display.DisplayManagerGlobal: void requestColorMode(int,int)>($i1, i0);

        return;
    }

    public java.lang.String toString()
    {
        android.view.Display r0;
        java.lang.StringBuilder r1, r2;
        android.util.DisplayMetrics $r3, $r11;
        android.view.DisplayInfo $r4, $r8;
        int $i0;
        boolean $z0, $z1;
        android.view.DisplayAdjustments$FixedRotationAdjustments $r16;
        java.lang.Throwable $r19;
        android.view.DisplayAdjustments r20;
        java.lang.String r21, r22;

        r0 := @this: android.view.Display;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.view.Display: void updateDisplayInfoLocked()>();

        r20 = virtualinvoke r0.<android.view.Display: android.view.DisplayAdjustments getDisplayAdjustments()>();

        $r4 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        $r3 = r0.<android.view.Display: android.util.DisplayMetrics mTempMetrics>;

        virtualinvoke $r4.<android.view.DisplayInfo: void getAppMetrics(android.util.DisplayMetrics,android.view.DisplayAdjustments)>($r3, r20);

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Display id ");

        $i0 = r0.<android.view.Display: int mDisplayId>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r8 = r0.<android.view.Display: android.view.DisplayInfo mDisplayInfo>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $z0 = r0.<android.view.Display: boolean mMayAdjustByFixedRotation>;

        if $z0 == 0 goto label3;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r16 = virtualinvoke r20.<android.view.DisplayAdjustments: android.view.DisplayAdjustments$FixedRotationAdjustments getFixedRotationAdjustments()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        r21 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        goto label4;

     label3:
        r21 = ", ";

     label4:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        $r11 = r0.<android.view.Display: android.util.DisplayMetrics mTempMetrics>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", isValid=");

        $z1 = r0.<android.view.Display: boolean mIsValid>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        r22 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        exitmonitor r0;

     label5:
        return r22;

     label6:
        $r19 := @caughtexception;

     label7:
        exitmonitor r0;

     label8:
        throw $r19;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public static void <clinit>()
    {
        <android.view.Display: int TYPE_WIFI> = 3;

        <android.view.Display: int TYPE_VIRTUAL> = 5;

        <android.view.Display: int TYPE_UNKNOWN> = 0;

        <android.view.Display: int TYPE_OVERLAY> = 4;

        <android.view.Display: int TYPE_INTERNAL> = 1;

        <android.view.Display: int TYPE_EXTERNAL> = 2;

        <android.view.Display: java.lang.String TAG> = "Display";

        <android.view.Display: int STATE_VR> = 5;

        <android.view.Display: int STATE_UNKNOWN> = 0;

        <android.view.Display: int STATE_ON_SUSPEND> = 6;

        <android.view.Display: int STATE_ON> = 2;

        <android.view.Display: int STATE_OFF> = 1;

        <android.view.Display: int STATE_DOZE_SUSPEND> = 4;

        <android.view.Display: int STATE_DOZE> = 3;

        <android.view.Display: int REMOVE_MODE_MOVE_CONTENT_TO_PRIMARY> = 0;

        <android.view.Display: int REMOVE_MODE_DESTROY_CONTENT> = 1;

        <android.view.Display: int INVALID_DISPLAY> = -1;

        <android.view.Display: int FLAG_TRUSTED> = 128;

        <android.view.Display: int FLAG_SUPPORTS_PROTECTED_BUFFERS> = 1;

        <android.view.Display: int FLAG_SHOULD_SHOW_SYSTEM_DECORATIONS> = 64;

        <android.view.Display: int FLAG_SECURE> = 2;

        <android.view.Display: int FLAG_SCALING_DISABLED> = 1073741824;

        <android.view.Display: int FLAG_ROUND> = 16;

        <android.view.Display: int FLAG_PRIVATE> = 4;

        <android.view.Display: int FLAG_PRESENTATION> = 8;

        <android.view.Display: int FLAG_CAN_SHOW_WITH_INSECURE_KEYGUARD> = 32;

        <android.view.Display: int DEFAULT_DISPLAY> = 0;

        <android.view.Display: boolean DEBUG> = 0;

        <android.view.Display: int COLOR_MODE_SRGB> = 7;

        <android.view.Display: int COLOR_MODE_INVALID> = -1;

        <android.view.Display: int COLOR_MODE_DISPLAY_P3> = 9;

        <android.view.Display: int COLOR_MODE_DEFAULT> = 0;

        <android.view.Display: int COLOR_MODE_DCI_P3> = 6;

        <android.view.Display: int COLOR_MODE_BT709> = 5;

        <android.view.Display: int COLOR_MODE_BT601_625_UNADJUSTED> = 2;

        <android.view.Display: int COLOR_MODE_BT601_625> = 1;

        <android.view.Display: int COLOR_MODE_BT601_525_UNADJUSTED> = 4;

        <android.view.Display: int COLOR_MODE_BT601_525> = 3;

        <android.view.Display: int COLOR_MODE_ADOBE_RGB> = 8;

        <android.view.Display: int CACHED_APP_SIZE_DURATION_MILLIS> = 20;

        return;
    }
}
