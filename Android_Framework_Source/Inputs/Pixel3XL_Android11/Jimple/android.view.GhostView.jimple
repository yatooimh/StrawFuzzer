public class android.view.GhostView extends android.view.View
{
    private boolean mBeingMoved;
    private int mReferences;
    private final android.view.View mView;

    private void <init>(android.view.View)
    {
        android.view.GhostView r0;
        android.content.Context $r1;
        android.view.View $r2, $r4, r5;
        android.view.ViewParent $r3;
        android.view.ViewGroup r6;

        r0 := @this: android.view.GhostView;

        r5 := @parameter0: android.view.View;

        $r1 = virtualinvoke r5.<android.view.View: android.content.Context getContext()>();

        specialinvoke r0.<android.view.View: void <init>(android.content.Context)>($r1);

        r0.<android.view.GhostView: android.view.View mView> = r5;

        r5.<android.view.View: android.view.GhostView mGhostView> = r0;

        $r2 = r0.<android.view.GhostView: android.view.View mView>;

        $r3 = virtualinvoke $r2.<android.view.View: android.view.ViewParent getParent()>();

        r6 = (android.view.ViewGroup) $r3;

        $r4 = r0.<android.view.GhostView: android.view.View mView>;

        virtualinvoke $r4.<android.view.View: void setTransitionVisibility(int)>(4);

        virtualinvoke r6.<android.view.ViewGroup: void invalidate()>();

        return;
    }

    public static android.view.GhostView addGhost(android.view.View, android.view.ViewGroup)
    {
        android.view.View r0;
        android.view.ViewGroup r1;
        android.view.GhostView $r2;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: android.view.ViewGroup;

        $r2 = staticinvoke <android.view.GhostView: android.view.GhostView addGhost(android.view.View,android.view.ViewGroup,android.graphics.Matrix)>(r0, r1, null);

        return $r2;
    }

    public static android.view.GhostView addGhost(android.view.View, android.view.ViewGroup, android.graphics.Matrix)
    {
        android.view.ViewGroupOverlay r0;
        android.view.ViewOverlay$OverlayViewGroup r1, $r11, $r12;
        android.view.GhostView r2, $r7, r19, r24;
        android.view.View r3, r16;
        android.view.ViewGroup r4, r17;
        android.view.ViewParent $r5, $r14, $r15;
        boolean $z0;
        java.lang.IllegalArgumentException $r6;
        int $i0, $i1, i3, i4;
        android.widget.FrameLayout $r8;
        android.content.Context $r9;
        java.util.ArrayList $r10;
        android.graphics.Matrix $r13, r18, r20;

        r16 := @parameter0: android.view.View;

        r17 := @parameter1: android.view.ViewGroup;

        r18 := @parameter2: android.graphics.Matrix;

        $r5 = virtualinvoke r16.<android.view.View: android.view.ViewParent getParent()>();

        $z0 = $r5 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label6;

        r0 = virtualinvoke r17.<android.view.ViewGroup: android.view.ViewGroupOverlay getOverlay()>();

        r1 = r0.<android.view.ViewGroupOverlay: android.view.ViewOverlay$OverlayViewGroup mOverlayViewGroup>;

        r2 = r16.<android.view.View: android.view.GhostView mGhostView>;

        r19 = r2;

        i3 = 0;

        if r2 == null goto label1;

        $r14 = virtualinvoke r2.<android.view.GhostView: android.view.ViewParent getParent()>();

        r3 = (android.view.View) $r14;

        $r15 = virtualinvoke r3.<android.view.View: android.view.ViewParent getParent()>();

        r4 = (android.view.ViewGroup) $r15;

        r19 = r2;

        i3 = 0;

        if r4 == r1 goto label1;

        i3 = r2.<android.view.GhostView: int mReferences>;

        virtualinvoke r4.<android.view.ViewGroup: void removeView(android.view.View)>(r3);

        r19 = null;

     label1:
        if r19 != null goto label4;

        r20 = r18;

        if r18 != null goto label2;

        $r13 = new android.graphics.Matrix;

        specialinvoke $r13.<android.graphics.Matrix: void <init>()>();

        r20 = $r13;

        staticinvoke <android.view.GhostView: void calculateMatrix(android.view.View,android.view.ViewGroup,android.graphics.Matrix)>(r16, r17, $r13);

     label2:
        $r7 = new android.view.GhostView;

        specialinvoke $r7.<android.view.GhostView: void <init>(android.view.View)>(r16);

        virtualinvoke $r7.<android.view.GhostView: void setMatrix(android.graphics.Matrix)>(r20);

        $r8 = new android.widget.FrameLayout;

        $r9 = virtualinvoke r16.<android.view.View: android.content.Context getContext()>();

        specialinvoke $r8.<android.widget.FrameLayout: void <init>(android.content.Context)>($r9);

        virtualinvoke $r8.<android.widget.FrameLayout: void setClipChildren(boolean)>(0);

        staticinvoke <android.view.GhostView: void copySize(android.view.View,android.view.View)>(r17, $r8);

        staticinvoke <android.view.GhostView: void copySize(android.view.View,android.view.View)>(r17, $r7);

        virtualinvoke $r8.<android.widget.FrameLayout: void addView(android.view.View)>($r7);

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        $r11 = r0.<android.view.ViewGroupOverlay: android.view.ViewOverlay$OverlayViewGroup mOverlayViewGroup>;

        i4 = staticinvoke <android.view.GhostView: int moveGhostViewsToTop(android.view.ViewGroup,java.util.ArrayList)>($r11, $r10);

        $r12 = r0.<android.view.ViewGroupOverlay: android.view.ViewOverlay$OverlayViewGroup mOverlayViewGroup>;

        staticinvoke <android.view.GhostView: void insertIntoOverlay(android.view.ViewGroup,android.view.ViewGroup,android.view.GhostView,java.util.ArrayList,int)>($r12, $r8, $r7, $r10, i4);

        $r7.<android.view.GhostView: int mReferences> = i3;

        r24 = $r7;

     label3:
        goto label5;

     label4:
        r24 = r19;

        if r18 == null goto label3;

        virtualinvoke r19.<android.view.GhostView: void setMatrix(android.graphics.Matrix)>(r18);

        r24 = r19;

     label5:
        $i0 = r24.<android.view.GhostView: int mReferences>;

        $i1 = $i0 + 1;

        r24.<android.view.GhostView: int mReferences> = $i1;

        return r24;

     label6:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Ghosted views must be parented by a ViewGroup");

        throw $r6;
    }

    public static void calculateMatrix(android.view.View, android.view.ViewGroup, android.graphics.Matrix)
    {
        android.view.ViewGroup r0, r4;
        android.graphics.Matrix r1;
        android.view.ViewParent $r2;
        int $i0, $i1, $i2, $i3;
        float $f0, $f1;
        android.view.View r3;

        r3 := @parameter0: android.view.View;

        r0 := @parameter1: android.view.ViewGroup;

        r1 := @parameter2: android.graphics.Matrix;

        $r2 = virtualinvoke r3.<android.view.View: android.view.ViewParent getParent()>();

        r4 = (android.view.ViewGroup) $r2;

        virtualinvoke r1.<android.graphics.Matrix: void reset()>();

        virtualinvoke r4.<android.view.ViewGroup: void transformMatrixToGlobal(android.graphics.Matrix)>(r1);

        $i0 = virtualinvoke r4.<android.view.ViewGroup: int getScrollX()>();

        $i1 = neg $i0;

        $f0 = (float) $i1;

        $i2 = virtualinvoke r4.<android.view.ViewGroup: int getScrollY()>();

        $i3 = neg $i2;

        $f1 = (float) $i3;

        virtualinvoke r1.<android.graphics.Matrix: boolean preTranslate(float,float)>($f0, $f1);

        virtualinvoke r0.<android.view.ViewGroup: void transformMatrixToLocal(android.graphics.Matrix)>(r1);

        return;
    }

    private static void copySize(android.view.View, android.view.View)
    {
        android.view.View r0, r1;
        int $i0, $i1;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: android.view.View;

        virtualinvoke r1.<android.view.View: void setLeft(int)>(0);

        virtualinvoke r1.<android.view.View: void setTop(int)>(0);

        $i0 = virtualinvoke r0.<android.view.View: int getWidth()>();

        virtualinvoke r1.<android.view.View: void setRight(int)>($i0);

        $i1 = virtualinvoke r0.<android.view.View: int getHeight()>();

        virtualinvoke r1.<android.view.View: void setBottom(int)>($i1);

        return;
    }

    public static android.view.GhostView getGhost(android.view.View)
    {
        android.view.View r0;
        android.view.GhostView $r1;

        r0 := @parameter0: android.view.View;

        $r1 = r0.<android.view.View: android.view.GhostView mGhostView>;

        return $r1;
    }

    private static int getInsertIndex(android.view.ViewGroup, java.util.ArrayList, java.util.ArrayList, int)
    {
        android.view.ViewGroup r0, $r4;
        java.util.ArrayList r1, r2;
        int i0, $i1, $i2, i3, i4, i5;
        android.view.View $r3, $r5, $r7;
        android.view.GhostView $r6;
        boolean $z0;

        r0 := @parameter0: android.view.ViewGroup;

        r1 := @parameter1: java.util.ArrayList;

        r2 := @parameter2: java.util.ArrayList;

        i3 := @parameter3: int;

        i4 = i3;

        $i1 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i5 = $i1 - 1;

     label1:
        if i4 > i5 goto label4;

        $i2 = i4 + i5;

        i0 = $i2 / 2;

        $r3 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i0);

        $r4 = (android.view.ViewGroup) $r3;

        $r5 = virtualinvoke $r4.<android.view.ViewGroup: android.view.View getChildAt(int)>(0);

        $r6 = (android.view.GhostView) $r5;

        $r7 = $r6.<android.view.GhostView: android.view.View mView>;

        staticinvoke <android.view.GhostView: void getParents(android.view.View,java.util.ArrayList)>($r7, r2);

        $z0 = staticinvoke <android.view.GhostView: boolean isOnTop(java.util.ArrayList,java.util.ArrayList)>(r1, r2);

        if $z0 == 0 goto label2;

        i4 = i0 + 1;

        goto label3;

     label2:
        i5 = i0 - 1;

     label3:
        virtualinvoke r2.<java.util.ArrayList: void clear()>();

        goto label1;

     label4:
        return i4;
    }

    private static void getParents(android.view.View, java.util.ArrayList)
    {
        android.view.View r0, $r3;
        java.util.ArrayList r1;
        android.view.ViewParent r2;
        boolean $z1;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: java.util.ArrayList;

        r2 = virtualinvoke r0.<android.view.View: android.view.ViewParent getParent()>();

        if r2 == null goto label1;

        $z1 = r2 instanceof android.view.ViewGroup;

        if $z1 == 0 goto label1;

        $r3 = (android.view.View) r2;

        staticinvoke <android.view.GhostView: void getParents(android.view.View,java.util.ArrayList)>($r3, r1);

     label1:
        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r0);

        return;
    }

    private static void insertIntoOverlay(android.view.ViewGroup, android.view.ViewGroup, android.view.GhostView, java.util.ArrayList, int)
    {
        android.view.ViewGroup r0, r1;
        android.view.GhostView r2;
        java.util.ArrayList r3, $r5;
        android.view.View $r6;
        int $i0, i1, i2;

        r0 := @parameter0: android.view.ViewGroup;

        r1 := @parameter1: android.view.ViewGroup;

        r2 := @parameter2: android.view.GhostView;

        r3 := @parameter3: java.util.ArrayList;

        i1 := @parameter4: int;

        if i1 != -1 goto label1;

        virtualinvoke r0.<android.view.ViewGroup: void addView(android.view.View)>(r1);

        goto label4;

     label1:
        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = r2.<android.view.GhostView: android.view.View mView>;

        staticinvoke <android.view.GhostView: void getParents(android.view.View,java.util.ArrayList)>($r6, $r5);

        i2 = staticinvoke <android.view.GhostView: int getInsertIndex(android.view.ViewGroup,java.util.ArrayList,java.util.ArrayList,int)>(r0, $r5, r3, i1);

        if i2 < 0 goto label3;

        $i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        if i2 < $i0 goto label2;

        goto label3;

     label2:
        virtualinvoke r0.<android.view.ViewGroup: void addView(android.view.View,int)>(r1, i2);

        goto label4;

     label3:
        virtualinvoke r0.<android.view.ViewGroup: void addView(android.view.View)>(r1);

     label4:
        return;
    }

    private static boolean isGhostWrapper(android.view.View)
    {
        boolean $z0, $z1;
        int $i0;
        android.view.View $r0, r1;
        android.widget.FrameLayout r2;

        r1 := @parameter0: android.view.View;

        $z0 = r1 instanceof android.widget.FrameLayout;

        if $z0 == 0 goto label1;

        r2 = (android.widget.FrameLayout) r1;

        $i0 = virtualinvoke r2.<android.widget.FrameLayout: int getChildCount()>();

        if $i0 != 1 goto label1;

        $r0 = virtualinvoke r2.<android.widget.FrameLayout: android.view.View getChildAt(int)>(0);

        $z1 = $r0 instanceof android.view.GhostView;

        return $z1;

     label1:
        return 0;
    }

    private static boolean isOnTop(android.view.View, android.view.View)
    {
        android.view.View r0, r1, r6;
        android.view.ViewGroup r2;
        int i0, i1, i2;
        java.util.ArrayList r3;
        android.view.ViewParent $r4;
        java.lang.Object $r5;
        boolean $z1, z2, z3;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: android.view.View;

        $r4 = virtualinvoke r0.<android.view.View: android.view.ViewParent getParent()>();

        r2 = (android.view.ViewGroup) $r4;

        i0 = virtualinvoke r2.<android.view.ViewGroup: int getChildCount()>();

        r3 = virtualinvoke r2.<android.view.ViewGroup: java.util.ArrayList buildOrderedChildList()>();

        if r3 != null goto label01;

        $z1 = virtualinvoke r2.<android.view.ViewGroup: boolean isChildrenDrawingOrderEnabled()>();

        if $z1 == 0 goto label01;

        z2 = 1;

        goto label02;

     label01:
        z2 = 0;

     label02:
        i1 = 0;

     label03:
        z3 = 1;

        if i1 >= i0 goto label10;

        if z2 == 0 goto label04;

        i2 = virtualinvoke r2.<android.view.ViewGroup: int getChildDrawingOrder(int,int)>(i0, i1);

        goto label05;

     label04:
        i2 = i1;

     label05:
        if r3 != null goto label06;

        r6 = virtualinvoke r2.<android.view.ViewGroup: android.view.View getChildAt(int)>(i2);

        goto label07;

     label06:
        $r5 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r6 = (android.view.View) $r5;

     label07:
        if r6 != r0 goto label08;

        z3 = 0;

        goto label10;

     label08:
        if r6 != r1 goto label09;

        z3 = 1;

        goto label10;

     label09:
        i1 = i1 + 1;

        goto label03;

     label10:
        if r3 == null goto label11;

        virtualinvoke r3.<java.util.ArrayList: void clear()>();

     label11:
        return z3;
    }

    private static boolean isOnTop(java.util.ArrayList, java.util.ArrayList)
    {
        java.util.ArrayList r0, r1;
        boolean z0, $z1, $z2, z3;
        int i0, $i1, $i2, $i3, i4;
        android.view.View r2, r3;
        java.lang.Object $r4, $r5, $r6, $r7;

        r0 := @parameter0: java.util.ArrayList;

        r1 := @parameter1: java.util.ArrayList;

        z0 = virtualinvoke r0.<java.util.ArrayList: boolean isEmpty()>();

        z3 = 1;

        if z0 != 0 goto label7;

        $z1 = virtualinvoke r1.<java.util.ArrayList: boolean isEmpty()>();

        if $z1 != 0 goto label7;

        $r4 = virtualinvoke r0.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r5 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(0);

        if $r4 == $r5 goto label1;

        goto label7;

     label1:
        $i1 = virtualinvoke r0.<java.util.ArrayList: int size()>();

        $i2 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        i0 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i2);

        i4 = 1;

     label2:
        if i4 >= i0 goto label4;

        $r6 = virtualinvoke r0.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        r2 = (android.view.View) $r6;

        $r7 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        r3 = (android.view.View) $r7;

        if r2 == r3 goto label3;

        $z2 = staticinvoke <android.view.GhostView: boolean isOnTop(android.view.View,android.view.View)>(r2, r3);

        return $z2;

     label3:
        i4 = i4 + 1;

        goto label2;

     label4:
        $i3 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        if $i3 != i0 goto label5;

        goto label6;

     label5:
        z3 = 0;

     label6:
        return z3;

     label7:
        return 1;
    }

    private static int moveGhostViewsToTop(android.view.ViewGroup, java.util.ArrayList)
    {
        android.view.ViewGroup r0, $r5;
        java.util.ArrayList r1;
        int $i0, $i1, i2, i3, i4, i5, i6, i7, i8;
        android.view.View $r2, $r4, $r6, $r7, r8;
        boolean $z0, $z1, $z2, $z4;
        java.lang.Object $r3;
        android.view.GhostView r9;

        r0 := @parameter0: android.view.ViewGroup;

        r1 := @parameter1: java.util.ArrayList;

        i2 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        if i2 != 0 goto label01;

        return -1;

     label01:
        $i0 = i2 - 1;

        $r2 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>($i0);

        $z0 = staticinvoke <android.view.GhostView: boolean isGhostWrapper(android.view.View)>($r2);

        if $z0 == 0 goto label05;

        i3 = i2 - 1;

        i4 = i2 + -2;

     label02:
        if i4 < 0 goto label04;

        $r7 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i4);

        $z4 = staticinvoke <android.view.GhostView: boolean isGhostWrapper(android.view.View)>($r7);

        if $z4 != 0 goto label03;

        goto label04;

     label03:
        i3 = i4;

        i4 = i4 + -1;

        goto label02;

     label04:
        return i3;

     label05:
        i5 = i2 + -2;

     label06:
        if i5 < 0 goto label08;

        r8 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i5);

        $z2 = staticinvoke <android.view.GhostView: boolean isGhostWrapper(android.view.View)>(r8);

        if $z2 == 0 goto label07;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r8);

        $r5 = (android.view.ViewGroup) r8;

        $r6 = virtualinvoke $r5.<android.view.ViewGroup: android.view.View getChildAt(int)>(0);

        r9 = (android.view.GhostView) $r6;

        r9.<android.view.GhostView: boolean mBeingMoved> = 1;

        virtualinvoke r0.<android.view.ViewGroup: void removeViewAt(int)>(i5);

        r9.<android.view.GhostView: boolean mBeingMoved> = 0;

     label07:
        i5 = i5 + -1;

        goto label06;

     label08:
        $z1 = virtualinvoke r1.<java.util.ArrayList: boolean isEmpty()>();

        if $z1 == 0 goto label09;

        i6 = -1;

        goto label12;

     label09:
        i7 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        $i1 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        i8 = $i1 - 1;

     label10:
        if i8 < 0 goto label11;

        $r3 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i8);

        $r4 = (android.view.View) $r3;

        virtualinvoke r0.<android.view.ViewGroup: void addView(android.view.View)>($r4);

        i8 = i8 + -1;

        goto label10;

     label11:
        virtualinvoke r1.<java.util.ArrayList: void clear()>();

        i6 = i7;

     label12:
        return i6;
    }

    public static void removeGhost(android.view.View)
    {
        int i0, $i1;
        android.view.ViewParent $r0, $r1;
        android.view.ViewGroup $r2, r5;
        android.view.View r3;
        android.view.GhostView r4;

        r3 := @parameter0: android.view.View;

        r4 = r3.<android.view.View: android.view.GhostView mGhostView>;

        if r4 == null goto label1;

        $i1 = r4.<android.view.GhostView: int mReferences>;

        i0 = $i1 - 1;

        r4.<android.view.GhostView: int mReferences> = i0;

        if i0 != 0 goto label1;

        $r0 = virtualinvoke r4.<android.view.GhostView: android.view.ViewParent getParent()>();

        r5 = (android.view.ViewGroup) $r0;

        $r1 = virtualinvoke r5.<android.view.ViewGroup: android.view.ViewParent getParent()>();

        $r2 = (android.view.ViewGroup) $r1;

        virtualinvoke $r2.<android.view.ViewGroup: void removeView(android.view.View)>(r5);

     label1:
        return;
    }

    protected void onDetachedFromWindow()
    {
        android.view.GhostView r0;
        android.view.ViewGroup r1;
        boolean $z0;
        android.view.View $r2, $r3, $r4;
        android.view.ViewParent $r5;

        r0 := @this: android.view.GhostView;

        specialinvoke r0.<android.view.View: void onDetachedFromWindow()>();

        $z0 = r0.<android.view.GhostView: boolean mBeingMoved>;

        if $z0 != 0 goto label1;

        $r2 = r0.<android.view.GhostView: android.view.View mView>;

        virtualinvoke $r2.<android.view.View: void setTransitionVisibility(int)>(0);

        $r3 = r0.<android.view.GhostView: android.view.View mView>;

        $r3.<android.view.View: android.view.GhostView mGhostView> = null;

        $r4 = r0.<android.view.GhostView: android.view.View mView>;

        $r5 = virtualinvoke $r4.<android.view.View: android.view.ViewParent getParent()>();

        r1 = (android.view.ViewGroup) $r5;

        if r1 == null goto label1;

        virtualinvoke r1.<android.view.ViewGroup: void invalidate()>();

     label1:
        return;
    }

    protected void onDraw(android.graphics.Canvas)
    {
        android.view.GhostView r0;
        android.graphics.RecordingCanvas r1;
        boolean $z0, $z1;
        android.view.View $r2, $r3;
        android.graphics.Canvas r4;
        android.graphics.RenderNode r5;

        r0 := @this: android.view.GhostView;

        r4 := @parameter0: android.graphics.Canvas;

        $z0 = r4 instanceof android.graphics.RecordingCanvas;

        if $z0 == 0 goto label1;

        r1 = (android.graphics.RecordingCanvas) r4;

        $r2 = r0.<android.view.GhostView: android.view.View mView>;

        $r2.<android.view.View: boolean mRecreateDisplayList> = 1;

        $r3 = r0.<android.view.GhostView: android.view.View mView>;

        r5 = virtualinvoke $r3.<android.view.View: android.graphics.RenderNode updateDisplayListIfDirty()>();

        $z1 = virtualinvoke r5.<android.graphics.RenderNode: boolean hasDisplayList()>();

        if $z1 == 0 goto label1;

        virtualinvoke r1.<android.graphics.RecordingCanvas: void insertReorderBarrier()>();

        virtualinvoke r1.<android.graphics.RecordingCanvas: void drawRenderNode(android.graphics.RenderNode)>(r5);

        virtualinvoke r1.<android.graphics.RecordingCanvas: void insertInorderBarrier()>();

     label1:
        return;
    }

    public void setMatrix(android.graphics.Matrix)
    {
        android.view.GhostView r0;
        android.graphics.Matrix r1;
        android.graphics.RenderNode $r2;

        r0 := @this: android.view.GhostView;

        r1 := @parameter0: android.graphics.Matrix;

        $r2 = r0.<android.view.GhostView: android.graphics.RenderNode mRenderNode>;

        virtualinvoke $r2.<android.graphics.RenderNode: boolean setAnimationMatrix(android.graphics.Matrix)>(r1);

        return;
    }

    public void setVisibility(int)
    {
        android.view.GhostView r0, $r2;
        android.view.View $r1, $r3;
        int i0;
        byte b1;

        r0 := @this: android.view.GhostView;

        i0 := @parameter0: int;

        specialinvoke r0.<android.view.View: void setVisibility(int)>(i0);

        $r1 = r0.<android.view.GhostView: android.view.View mView>;

        $r2 = $r1.<android.view.View: android.view.GhostView mGhostView>;

        if $r2 != r0 goto label3;

        if i0 != 0 goto label1;

        b1 = 4;

        goto label2;

     label1:
        b1 = 0;

     label2:
        $r3 = r0.<android.view.GhostView: android.view.View mView>;

        virtualinvoke $r3.<android.view.View: void setTransitionVisibility(int)>(b1);

     label3:
        return;
    }
}
