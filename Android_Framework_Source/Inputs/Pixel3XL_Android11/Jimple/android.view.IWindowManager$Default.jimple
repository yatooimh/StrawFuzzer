public class android.view.IWindowManager$Default extends java.lang.Object implements android.view.IWindowManager
{

    public void <init>()
    {
        android.view.IWindowManager$Default r0;

        r0 := @this: android.view.IWindowManager$Default;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public android.view.SurfaceControl addShellRoot(int, android.view.IWindow, int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0, i1;
        android.view.IWindow r1;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.IWindow;

        i1 := @parameter2: int;

        return null;
    }

    public void addWindowToken(android.os.IBinder, int, int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        android.os.IBinder r1;
        int i0, i1;

        r0 := @this: android.view.IWindowManager$Default;

        r1 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        return;
    }

    public int addWindowTokenWithOptions(android.os.IBinder, int, int, android.os.Bundle, java.lang.String) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        android.os.IBinder r1;
        int i0, i1;
        android.os.Bundle r2;
        java.lang.String r3;

        r0 := @this: android.view.IWindowManager$Default;

        r1 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: android.os.Bundle;

        r3 := @parameter4: java.lang.String;

        return 0;
    }

    public android.os.IBinder asBinder()
    {
        android.view.IWindowManager$Default r0;

        r0 := @this: android.view.IWindowManager$Default;

        return null;
    }

    public void clearForcedDisplayDensityForUser(int, int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0, i1;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return;
    }

    public void clearForcedDisplaySize(int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        return;
    }

    public boolean clearWindowContentFrameStats(android.os.IBinder) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        android.os.IBinder r1;

        r0 := @this: android.view.IWindowManager$Default;

        r1 := @parameter0: android.os.IBinder;

        return 0;
    }

    public void closeSystemDialogs(java.lang.String) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        java.lang.String r1;

        r0 := @this: android.view.IWindowManager$Default;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void createInputConsumer(android.os.IBinder, java.lang.String, int, android.view.InputChannel) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        android.os.IBinder r1;
        java.lang.String r2;
        int i0;
        android.view.InputChannel r3;

        r0 := @this: android.view.IWindowManager$Default;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: android.view.InputChannel;

        return;
    }

    public boolean destroyInputConsumer(java.lang.String, int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        java.lang.String r1;
        int i0;

        r0 := @this: android.view.IWindowManager$Default;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        return 0;
    }

    public void disableKeyguard(android.os.IBinder, java.lang.String, int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        android.os.IBinder r1;
        java.lang.String r2;
        int i0;

        r0 := @this: android.view.IWindowManager$Default;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        return;
    }

    public void dismissKeyguard(com.android.internal.policy.IKeyguardDismissCallback, java.lang.CharSequence) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        com.android.internal.policy.IKeyguardDismissCallback r1;
        java.lang.CharSequence r2;

        r0 := @this: android.view.IWindowManager$Default;

        r1 := @parameter0: com.android.internal.policy.IKeyguardDismissCallback;

        r2 := @parameter1: java.lang.CharSequence;

        return;
    }

    public void dontOverrideDisplayInfo(int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        return;
    }

    public void enableScreenIfNeeded() throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;

        r0 := @this: android.view.IWindowManager$Default;

        return;
    }

    public void endProlongedAnimations() throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;

        r0 := @this: android.view.IWindowManager$Default;

        return;
    }

    public void executeAppTransition() throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;

        r0 := @this: android.view.IWindowManager$Default;

        return;
    }

    public void exitKeyguardSecurely(android.view.IOnKeyguardExitResult) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        android.view.IOnKeyguardExitResult r1;

        r0 := @this: android.view.IWindowManager$Default;

        r1 := @parameter0: android.view.IOnKeyguardExitResult;

        return;
    }

    public void freezeDisplayRotation(int, int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0, i1;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return;
    }

    public void freezeRotation(int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        return;
    }

    public float getAnimationScale(int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        return 0.0F;
    }

    public float[] getAnimationScales() throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;

        r0 := @this: android.view.IWindowManager$Default;

        return null;
    }

    public int getBaseDisplayDensity(int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        return 0;
    }

    public void getBaseDisplaySize(int, android.graphics.Point) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0;
        android.graphics.Point r1;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Point;

        return;
    }

    public float getCurrentAnimatorScale() throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;

        r0 := @this: android.view.IWindowManager$Default;

        return 0.0F;
    }

    public android.graphics.Region getCurrentImeTouchRegion() throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;

        r0 := @this: android.view.IWindowManager$Default;

        return null;
    }

    public int getDefaultDisplayRotation() throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;

        r0 := @this: android.view.IWindowManager$Default;

        return 0;
    }

    public int getDockedStackSide() throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;

        r0 := @this: android.view.IWindowManager$Default;

        return 0;
    }

    public int getInitialDisplayDensity(int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        return 0;
    }

    public void getInitialDisplaySize(int, android.graphics.Point) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0;
        android.graphics.Point r1;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Point;

        return;
    }

    public int getNavBarPosition(int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        return 0;
    }

    public int getPreferredOptionsPanelGravity(int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        return 0;
    }

    public int getRemoveContentMode(int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        return 0;
    }

    public void getStableInsets(int, android.graphics.Rect) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0;
        android.graphics.Rect r1;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Rect;

        return;
    }

    public android.view.WindowContentFrameStats getWindowContentFrameStats(android.os.IBinder) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        android.os.IBinder r1;

        r0 := @this: android.view.IWindowManager$Default;

        r1 := @parameter0: android.os.IBinder;

        return null;
    }

    public boolean getWindowInsets(android.view.WindowManager$LayoutParams, int, android.graphics.Rect, android.graphics.Rect, android.view.DisplayCutout$ParcelableWrapper, android.view.InsetsState) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        android.view.WindowManager$LayoutParams r1;
        int i0;
        android.graphics.Rect r2, r3;
        android.view.DisplayCutout$ParcelableWrapper r4;
        android.view.InsetsState r5;

        r0 := @this: android.view.IWindowManager$Default;

        r1 := @parameter0: android.view.WindowManager$LayoutParams;

        i0 := @parameter1: int;

        r2 := @parameter2: android.graphics.Rect;

        r3 := @parameter3: android.graphics.Rect;

        r4 := @parameter4: android.view.DisplayCutout$ParcelableWrapper;

        r5 := @parameter5: android.view.InsetsState;

        return 0;
    }

    public int getWindowingMode(int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        return 0;
    }

    public boolean hasNavigationBar(int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        return 0;
    }

    public void hideTransientBars(int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        return;
    }

    public boolean injectInputAfterTransactionsApplied(android.view.InputEvent, int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        android.view.InputEvent r1;
        int i0;

        r0 := @this: android.view.IWindowManager$Default;

        r1 := @parameter0: android.view.InputEvent;

        i0 := @parameter1: int;

        return 0;
    }

    public boolean isDisplayRotationFrozen(int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        return 0;
    }

    public boolean isKeyguardLocked() throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;

        r0 := @this: android.view.IWindowManager$Default;

        return 0;
    }

    public boolean isKeyguardSecure(int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        return 0;
    }

    public boolean isLayerTracing() throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;

        r0 := @this: android.view.IWindowManager$Default;

        return 0;
    }

    public boolean isRotationFrozen() throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;

        r0 := @this: android.view.IWindowManager$Default;

        return 0;
    }

    public boolean isSafeModeEnabled() throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;

        r0 := @this: android.view.IWindowManager$Default;

        return 0;
    }

    public boolean isViewServerRunning() throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;

        r0 := @this: android.view.IWindowManager$Default;

        return 0;
    }

    public boolean isWindowToken(android.os.IBinder) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        android.os.IBinder r1;

        r0 := @this: android.view.IWindowManager$Default;

        r1 := @parameter0: android.os.IBinder;

        return 0;
    }

    public boolean isWindowTraceEnabled() throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;

        r0 := @this: android.view.IWindowManager$Default;

        return 0;
    }

    public void lockNow(android.os.Bundle) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        android.os.Bundle r1;

        r0 := @this: android.view.IWindowManager$Default;

        r1 := @parameter0: android.os.Bundle;

        return;
    }

    public boolean mirrorDisplay(int, android.view.SurfaceControl) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0;
        android.view.SurfaceControl r1;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.SurfaceControl;

        return 0;
    }

    public void modifyDisplayWindowInsets(int, android.view.InsetsState) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0;
        android.view.InsetsState r1;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.InsetsState;

        return;
    }

    public android.view.IWindowSession openSession(android.view.IWindowSessionCallback) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        android.view.IWindowSessionCallback r1;

        r0 := @this: android.view.IWindowManager$Default;

        r1 := @parameter0: android.view.IWindowSessionCallback;

        return null;
    }

    public void overridePendingAppTransitionMultiThumbFuture(android.view.IAppTransitionAnimationSpecsFuture, android.os.IRemoteCallback, boolean, int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        android.view.IAppTransitionAnimationSpecsFuture r1;
        android.os.IRemoteCallback r2;
        boolean z0;
        int i0;

        r0 := @this: android.view.IWindowManager$Default;

        r1 := @parameter0: android.view.IAppTransitionAnimationSpecsFuture;

        r2 := @parameter1: android.os.IRemoteCallback;

        z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        return;
    }

    public void overridePendingAppTransitionRemote(android.view.RemoteAnimationAdapter, int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        android.view.RemoteAnimationAdapter r1;
        int i0;

        r0 := @this: android.view.IWindowManager$Default;

        r1 := @parameter0: android.view.RemoteAnimationAdapter;

        i0 := @parameter1: int;

        return;
    }

    public void prepareAppTransition(int, boolean) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0;
        boolean z0;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        return;
    }

    public void reenableKeyguard(android.os.IBinder, int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        android.os.IBinder r1;
        int i0;

        r0 := @this: android.view.IWindowManager$Default;

        r1 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        return;
    }

    public void refreshScreenCaptureDisabled(int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        return;
    }

    public void registerDisplayFoldListener(android.view.IDisplayFoldListener) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        android.view.IDisplayFoldListener r1;

        r0 := @this: android.view.IWindowManager$Default;

        r1 := @parameter0: android.view.IDisplayFoldListener;

        return;
    }

    public void registerDisplayWindowListener(android.view.IDisplayWindowListener) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        android.view.IDisplayWindowListener r1;

        r0 := @this: android.view.IWindowManager$Default;

        r1 := @parameter0: android.view.IDisplayWindowListener;

        return;
    }

    public void registerPinnedStackListener(int, android.view.IPinnedStackListener) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0;
        android.view.IPinnedStackListener r1;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.IPinnedStackListener;

        return;
    }

    public void registerShortcutKey(long, com.android.internal.policy.IShortcutService) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        long l0;
        com.android.internal.policy.IShortcutService r1;

        r0 := @this: android.view.IWindowManager$Default;

        l0 := @parameter0: long;

        r1 := @parameter1: com.android.internal.policy.IShortcutService;

        return;
    }

    public void registerSystemGestureExclusionListener(android.view.ISystemGestureExclusionListener, int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        android.view.ISystemGestureExclusionListener r1;
        int i0;

        r0 := @this: android.view.IWindowManager$Default;

        r1 := @parameter0: android.view.ISystemGestureExclusionListener;

        i0 := @parameter1: int;

        return;
    }

    public boolean registerWallpaperVisibilityListener(android.view.IWallpaperVisibilityListener, int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        android.view.IWallpaperVisibilityListener r1;
        int i0;

        r0 := @this: android.view.IWindowManager$Default;

        r1 := @parameter0: android.view.IWallpaperVisibilityListener;

        i0 := @parameter1: int;

        return 0;
    }

    public void removeRotationWatcher(android.view.IRotationWatcher) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        android.view.IRotationWatcher r1;

        r0 := @this: android.view.IWindowManager$Default;

        r1 := @parameter0: android.view.IRotationWatcher;

        return;
    }

    public void removeWindowToken(android.os.IBinder, int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        android.os.IBinder r1;
        int i0;

        r0 := @this: android.view.IWindowManager$Default;

        r1 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        return;
    }

    public void requestAppKeyboardShortcuts(com.android.internal.os.IResultReceiver, int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        com.android.internal.os.IResultReceiver r1;
        int i0;

        r0 := @this: android.view.IWindowManager$Default;

        r1 := @parameter0: com.android.internal.os.IResultReceiver;

        i0 := @parameter1: int;

        return;
    }

    public boolean requestAssistScreenshot(android.app.IAssistDataReceiver) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        android.app.IAssistDataReceiver r1;

        r0 := @this: android.view.IWindowManager$Default;

        r1 := @parameter0: android.app.IAssistDataReceiver;

        return 0;
    }

    public void requestScrollCapture(int, android.os.IBinder, int, android.view.IScrollCaptureController) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0, i1;
        android.os.IBinder r1;
        android.view.IScrollCaptureController r2;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.IBinder;

        i1 := @parameter2: int;

        r2 := @parameter3: android.view.IScrollCaptureController;

        return;
    }

    public android.graphics.Bitmap screenshotWallpaper() throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;

        r0 := @this: android.view.IWindowManager$Default;

        return null;
    }

    public void setAnimationScale(int, float) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0;
        float f0;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        return;
    }

    public void setAnimationScales(float[]) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        float[] r1;

        r0 := @this: android.view.IWindowManager$Default;

        r1 := @parameter0: float[];

        return;
    }

    public void setDisplayWindowInsetsController(int, android.view.IDisplayWindowInsetsController) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0;
        android.view.IDisplayWindowInsetsController r1;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.IDisplayWindowInsetsController;

        return;
    }

    public void setDisplayWindowRotationController(android.view.IDisplayWindowRotationController) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        android.view.IDisplayWindowRotationController r1;

        r0 := @this: android.view.IWindowManager$Default;

        r1 := @parameter0: android.view.IDisplayWindowRotationController;

        return;
    }

    public void setDockedStackDividerTouchRegion(android.graphics.Rect) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        android.graphics.Rect r1;

        r0 := @this: android.view.IWindowManager$Default;

        r1 := @parameter0: android.graphics.Rect;

        return;
    }

    public void setEventDispatching(boolean) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        boolean z0;

        r0 := @this: android.view.IWindowManager$Default;

        z0 := @parameter0: boolean;

        return;
    }

    public void setFixedToUserRotation(int, int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0, i1;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return;
    }

    public void setForceShowSystemBars(boolean) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        boolean z0;

        r0 := @this: android.view.IWindowManager$Default;

        z0 := @parameter0: boolean;

        return;
    }

    public void setForcedDisplayDensityForUser(int, int, int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0, i1, i2;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        return;
    }

    public void setForcedDisplayScalingMode(int, int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0, i1;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return;
    }

    public void setForcedDisplaySize(int, int, int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0, i1, i2;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        return;
    }

    public void setForwardedInsets(int, android.graphics.Insets) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0;
        android.graphics.Insets r1;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Insets;

        return;
    }

    public void setInTouchMode(boolean) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        boolean z0;

        r0 := @this: android.view.IWindowManager$Default;

        z0 := @parameter0: boolean;

        return;
    }

    public void setLayerTracing(boolean) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        boolean z0;

        r0 := @this: android.view.IWindowManager$Default;

        z0 := @parameter0: boolean;

        return;
    }

    public void setLayerTracingFlags(int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        return;
    }

    public void setNavBarVirtualKeyHapticFeedbackEnabled(boolean) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        boolean z0;

        r0 := @this: android.view.IWindowManager$Default;

        z0 := @parameter0: boolean;

        return;
    }

    public void setPipVisibility(boolean) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        boolean z0;

        r0 := @this: android.view.IWindowManager$Default;

        z0 := @parameter0: boolean;

        return;
    }

    public void setRecentsVisibility(boolean) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        boolean z0;

        r0 := @this: android.view.IWindowManager$Default;

        z0 := @parameter0: boolean;

        return;
    }

    public void setRemoveContentMode(int, int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0, i1;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return;
    }

    public void setShellRootAccessibilityWindow(int, int, android.view.IWindow) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0, i1;
        android.view.IWindow r1;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.view.IWindow;

        return;
    }

    public void setShouldShowIme(int, boolean) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0;
        boolean z0;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        return;
    }

    public void setShouldShowSystemDecors(int, boolean) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0;
        boolean z0;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        return;
    }

    public void setShouldShowWithInsecureKeyguard(int, boolean) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0;
        boolean z0;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        return;
    }

    public void setStrictModeVisualIndicatorPreference(java.lang.String) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        java.lang.String r1;

        r0 := @this: android.view.IWindowManager$Default;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void setSwitchingUser(boolean) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        boolean z0;

        r0 := @this: android.view.IWindowManager$Default;

        z0 := @parameter0: boolean;

        return;
    }

    public void setWindowingMode(int, int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0, i1;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return;
    }

    public boolean shouldShowIme(int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        return 0;
    }

    public boolean shouldShowSystemDecors(int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        return 0;
    }

    public boolean shouldShowWithInsecureKeyguard(int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        return 0;
    }

    public void showGlobalActions() throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;

        r0 := @this: android.view.IWindowManager$Default;

        return;
    }

    public void showStrictModeViolation(boolean) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        boolean z0;

        r0 := @this: android.view.IWindowManager$Default;

        z0 := @parameter0: boolean;

        return;
    }

    public void startFreezingScreen(int, int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0, i1;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return;
    }

    public boolean startViewServer(int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        return 0;
    }

    public void startWindowTrace() throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;

        r0 := @this: android.view.IWindowManager$Default;

        return;
    }

    public void statusBarVisibilityChanged(int, int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0, i1;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return;
    }

    public void stopFreezingScreen() throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;

        r0 := @this: android.view.IWindowManager$Default;

        return;
    }

    public boolean stopViewServer() throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;

        r0 := @this: android.view.IWindowManager$Default;

        return 0;
    }

    public void stopWindowTrace() throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;

        r0 := @this: android.view.IWindowManager$Default;

        return;
    }

    public void syncInputTransactions() throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;

        r0 := @this: android.view.IWindowManager$Default;

        return;
    }

    public void thawDisplayRotation(int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        int i0;

        r0 := @this: android.view.IWindowManager$Default;

        i0 := @parameter0: int;

        return;
    }

    public void thawRotation() throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;

        r0 := @this: android.view.IWindowManager$Default;

        return;
    }

    public void unregisterDisplayFoldListener(android.view.IDisplayFoldListener) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        android.view.IDisplayFoldListener r1;

        r0 := @this: android.view.IWindowManager$Default;

        r1 := @parameter0: android.view.IDisplayFoldListener;

        return;
    }

    public void unregisterDisplayWindowListener(android.view.IDisplayWindowListener) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        android.view.IDisplayWindowListener r1;

        r0 := @this: android.view.IWindowManager$Default;

        r1 := @parameter0: android.view.IDisplayWindowListener;

        return;
    }

    public void unregisterSystemGestureExclusionListener(android.view.ISystemGestureExclusionListener, int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        android.view.ISystemGestureExclusionListener r1;
        int i0;

        r0 := @this: android.view.IWindowManager$Default;

        r1 := @parameter0: android.view.ISystemGestureExclusionListener;

        i0 := @parameter1: int;

        return;
    }

    public void unregisterWallpaperVisibilityListener(android.view.IWallpaperVisibilityListener, int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        android.view.IWallpaperVisibilityListener r1;
        int i0;

        r0 := @this: android.view.IWindowManager$Default;

        r1 := @parameter0: android.view.IWallpaperVisibilityListener;

        i0 := @parameter1: int;

        return;
    }

    public void updateRotation(boolean, boolean) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        boolean z0, z1;

        r0 := @this: android.view.IWindowManager$Default;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        return;
    }

    public boolean useBLAST() throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;

        r0 := @this: android.view.IWindowManager$Default;

        return 0;
    }

    public int watchRotation(android.view.IRotationWatcher, int) throws android.os.RemoteException
    {
        android.view.IWindowManager$Default r0;
        android.view.IRotationWatcher r1;
        int i0;

        r0 := @this: android.view.IWindowManager$Default;

        r1 := @parameter0: android.view.IRotationWatcher;

        i0 := @parameter1: int;

        return 0;
    }
}
