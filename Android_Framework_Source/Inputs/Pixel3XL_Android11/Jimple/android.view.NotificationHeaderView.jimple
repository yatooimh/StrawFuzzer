public class android.view.NotificationHeaderView extends android.view.ViewGroup
{
    public static final int NO_COLOR;
    private boolean mAcceptAllTouches;
    private android.view.View mAppName;
    private android.view.View mAppOps;
    private android.view.View$OnClickListener mAppOpsListener;
    private android.graphics.drawable.Drawable mBackground;
    private final int mChildMinWidth;
    private final int mContentEndMargin;
    private boolean mEntireHeaderClickable;
    private com.android.internal.widget.NotificationExpandButton mExpandButton;
    private android.view.View$OnClickListener mExpandClickListener;
    private boolean mExpandOnlyOnButton;
    private boolean mExpanded;
    private final int mGravity;
    private android.view.View mHeaderText;
    private int mHeaderTextMarginEnd;
    private com.android.internal.widget.CachingIconView mIcon;
    private android.view.View mProfileBadge;
    android.view.ViewOutlineProvider mProvider;
    private android.view.View mSecondaryHeaderText;
    private boolean mShowExpandButtonAtEnd;
    private boolean mShowWorkBadgeAtEnd;
    private int mTotalWidth;
    private android.view.NotificationHeaderView$HeaderTouchListener mTouchListener;
    private android.widget.LinearLayout mTransferChip;

    public void <init>(android.content.Context)
    {
        android.view.NotificationHeaderView r0;
        android.content.Context r1;

        r0 := @this: android.view.NotificationHeaderView;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.view.NotificationHeaderView: void <init>(android.content.Context,android.util.AttributeSet)>(r1, null);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        android.view.NotificationHeaderView r0;
        android.content.Context r1;
        android.util.AttributeSet r2;

        r0 := @this: android.view.NotificationHeaderView;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<android.view.NotificationHeaderView: void <init>(android.content.Context,android.util.AttributeSet,int)>(r1, r2, 0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int)
    {
        android.view.NotificationHeaderView r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        int i0;

        r0 := @this: android.view.NotificationHeaderView;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        specialinvoke r0.<android.view.NotificationHeaderView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>(r1, r2, i0, 0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int, int)
    {
        android.view.NotificationHeaderView r0;
        android.util.AttributeSet r1;
        int i0, i1, $i2, $i3, $i4;
        android.content.res.Resources r2;
        android.view.NotificationHeaderView$HeaderTouchListener $r3;
        android.view.NotificationHeaderView$1 $r4;
        boolean $z0;
        int[] $r5;
        android.content.Context r6;
        android.content.res.TypedArray r7;

        r0 := @this: android.view.NotificationHeaderView;

        r6 := @parameter0: android.content.Context;

        r1 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet,int,int)>(r6, r1, i0, i1);

        $r3 = new android.view.NotificationHeaderView$HeaderTouchListener;

        specialinvoke $r3.<android.view.NotificationHeaderView$HeaderTouchListener: void <init>(android.view.NotificationHeaderView)>(r0);

        r0.<android.view.NotificationHeaderView: android.view.NotificationHeaderView$HeaderTouchListener mTouchListener> = $r3;

        $r4 = new android.view.NotificationHeaderView$1;

        specialinvoke $r4.<android.view.NotificationHeaderView$1: void <init>(android.view.NotificationHeaderView)>(r0);

        r0.<android.view.NotificationHeaderView: android.view.ViewOutlineProvider mProvider> = $r4;

        r2 = virtualinvoke r0.<android.view.NotificationHeaderView: android.content.res.Resources getResources()>();

        $i2 = virtualinvoke r2.<android.content.res.Resources: int getDimensionPixelSize(int)>(17105365);

        r0.<android.view.NotificationHeaderView: int mChildMinWidth> = $i2;

        $i3 = virtualinvoke r2.<android.content.res.Resources: int getDimensionPixelSize(int)>(17105345);

        r0.<android.view.NotificationHeaderView: int mContentEndMargin> = $i3;

        $z0 = virtualinvoke r2.<android.content.res.Resources: boolean getBoolean(int)>(17891497);

        r0.<android.view.NotificationHeaderView: boolean mEntireHeaderClickable> = $z0;

        $r5 = newarray (int)[1];

        $r5[0] = 16842927;

        r7 = virtualinvoke r6.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>(r1, $r5, i0, i1);

        $i4 = virtualinvoke r7.<android.content.res.TypedArray: int getInt(int,int)>(0, 0);

        r0.<android.view.NotificationHeaderView: int mGravity> = $i4;

        virtualinvoke r7.<android.content.res.TypedArray: void recycle()>();

        return;
    }

    static android.graphics.drawable.Drawable access$000(android.view.NotificationHeaderView)
    {
        android.view.NotificationHeaderView r0;
        android.graphics.drawable.Drawable $r1;

        r0 := @parameter0: android.view.NotificationHeaderView;

        $r1 = r0.<android.view.NotificationHeaderView: android.graphics.drawable.Drawable mBackground>;

        return $r1;
    }

    static com.android.internal.widget.CachingIconView access$100(android.view.NotificationHeaderView)
    {
        android.view.NotificationHeaderView r0;
        com.android.internal.widget.CachingIconView $r1;

        r0 := @parameter0: android.view.NotificationHeaderView;

        $r1 = r0.<android.view.NotificationHeaderView: com.android.internal.widget.CachingIconView mIcon>;

        return $r1;
    }

    static com.android.internal.widget.NotificationExpandButton access$200(android.view.NotificationHeaderView)
    {
        android.view.NotificationHeaderView r0;
        com.android.internal.widget.NotificationExpandButton $r1;

        r0 := @parameter0: android.view.NotificationHeaderView;

        $r1 = r0.<android.view.NotificationHeaderView: com.android.internal.widget.NotificationExpandButton mExpandButton>;

        return $r1;
    }

    static android.view.View access$300(android.view.NotificationHeaderView)
    {
        android.view.NotificationHeaderView r0;
        android.view.View $r1;

        r0 := @parameter0: android.view.NotificationHeaderView;

        $r1 = r0.<android.view.NotificationHeaderView: android.view.View mAppOps>;

        return $r1;
    }

    static android.view.View access$400(android.view.NotificationHeaderView)
    {
        android.view.NotificationHeaderView r0;
        android.view.View $r1;

        r0 := @parameter0: android.view.NotificationHeaderView;

        $r1 = specialinvoke r0.<android.view.NotificationHeaderView: android.view.View getFirstChildNotGone()>();

        return $r1;
    }

    static boolean access$500(android.view.NotificationHeaderView)
    {
        android.view.NotificationHeaderView r0;
        boolean $z0;

        r0 := @parameter0: android.view.NotificationHeaderView;

        $z0 = r0.<android.view.NotificationHeaderView: boolean mAcceptAllTouches>;

        return $z0;
    }

    static boolean access$600(android.view.NotificationHeaderView)
    {
        android.view.NotificationHeaderView r0;
        boolean $z0;

        r0 := @parameter0: android.view.NotificationHeaderView;

        $z0 = r0.<android.view.NotificationHeaderView: boolean mExpandOnlyOnButton>;

        return $z0;
    }

    private android.view.View getFirstChildNotGone()
    {
        android.view.NotificationHeaderView r0;
        android.view.View r1;
        int $i0, $i1, i2;

        r0 := @this: android.view.NotificationHeaderView;

        i2 = 0;

     label1:
        $i0 = virtualinvoke r0.<android.view.NotificationHeaderView: int getChildCount()>();

        if i2 >= $i0 goto label3;

        r1 = virtualinvoke r0.<android.view.NotificationHeaderView: android.view.View getChildAt(int)>(i2);

        $i1 = virtualinvoke r1.<android.view.View: int getVisibility()>();

        if $i1 == 8 goto label2;

        return r1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return r0;
    }

    private int shrinkViewForOverflow(int, int, android.view.View, int)
    {
        android.view.NotificationHeaderView r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, i7, i8, i9;
        android.view.View r1;

        r0 := @this: android.view.NotificationHeaderView;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.view.View;

        i7 := @parameter3: int;

        i2 = virtualinvoke r1.<android.view.View: int getMeasuredWidth()>();

        i8 = i1;

        if i1 <= 0 goto label1;

        i8 = i1;

        $i3 = virtualinvoke r1.<android.view.View: int getVisibility()>();

        if $i3 == 8 goto label1;

        i8 = i1;

        if i2 <= i7 goto label1;

        $i4 = i2 - i1;

        i9 = staticinvoke <java.lang.Math: int max(int,int)>(i7, $i4);

        $i5 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(i9, -2147483648);

        virtualinvoke r1.<android.view.View: void measure(int,int)>($i5, i0);

        $i6 = i2 - i9;

        i8 = i1 - $i6;

     label1:
        return i8;
    }

    private void updateExpandButton()
    {
        android.view.NotificationHeaderView r0;
        boolean $z0;
        com.android.internal.widget.NotificationExpandButton $r1, $r4, $r6;
        android.content.Context $r2, $r5;
        android.graphics.drawable.Drawable $r3;
        int $i0, i1, i2;
        java.lang.CharSequence $r7;

        r0 := @this: android.view.NotificationHeaderView;

        $z0 = r0.<android.view.NotificationHeaderView: boolean mExpanded>;

        if $z0 == 0 goto label1;

        i1 = 17302368;

        i2 = 17040100;

        goto label2;

     label1:
        i1 = 17302427;

        i2 = 17040099;

     label2:
        $r1 = r0.<android.view.NotificationHeaderView: com.android.internal.widget.NotificationExpandButton mExpandButton>;

        $r2 = virtualinvoke r0.<android.view.NotificationHeaderView: android.content.Context getContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: android.graphics.drawable.Drawable getDrawable(int)>(i1);

        virtualinvoke $r1.<com.android.internal.widget.NotificationExpandButton: void setImageDrawable(android.graphics.drawable.Drawable)>($r3);

        $r4 = r0.<android.view.NotificationHeaderView: com.android.internal.widget.NotificationExpandButton mExpandButton>;

        $i0 = virtualinvoke r0.<android.view.NotificationHeaderView: int getOriginalNotificationColor()>();

        virtualinvoke $r4.<com.android.internal.widget.NotificationExpandButton: void setColorFilter(int)>($i0);

        $r6 = r0.<android.view.NotificationHeaderView: com.android.internal.widget.NotificationExpandButton mExpandButton>;

        $r5 = r0.<android.view.NotificationHeaderView: android.content.Context mContext>;

        $r7 = virtualinvoke $r5.<android.content.Context: java.lang.CharSequence getText(int)>(i2);

        virtualinvoke $r6.<com.android.internal.widget.NotificationExpandButton: void setContentDescription(java.lang.CharSequence)>($r7);

        return;
    }

    private void updateTouchListener()
    {
        android.view.NotificationHeaderView r0;
        android.view.View$OnClickListener $r1, $r4;
        android.view.NotificationHeaderView$HeaderTouchListener $r2, $r3;

        r0 := @this: android.view.NotificationHeaderView;

        $r1 = r0.<android.view.NotificationHeaderView: android.view.View$OnClickListener mExpandClickListener>;

        if $r1 != null goto label1;

        $r4 = r0.<android.view.NotificationHeaderView: android.view.View$OnClickListener mAppOpsListener>;

        if $r4 != null goto label1;

        virtualinvoke r0.<android.view.NotificationHeaderView: void setOnTouchListener(android.view.View$OnTouchListener)>(null);

        return;

     label1:
        $r2 = r0.<android.view.NotificationHeaderView: android.view.NotificationHeaderView$HeaderTouchListener mTouchListener>;

        virtualinvoke r0.<android.view.NotificationHeaderView: void setOnTouchListener(android.view.View$OnTouchListener)>($r2);

        $r3 = r0.<android.view.NotificationHeaderView: android.view.NotificationHeaderView$HeaderTouchListener mTouchListener>;

        virtualinvoke $r3.<android.view.NotificationHeaderView$HeaderTouchListener: void bindTouchRects()>();

        return;
    }

    protected void drawableStateChanged()
    {
        android.view.NotificationHeaderView r0;
        android.graphics.drawable.Drawable r1, $r2;
        boolean $z0;
        int[] $r3;

        r0 := @this: android.view.NotificationHeaderView;

        r1 = r0.<android.view.NotificationHeaderView: android.graphics.drawable.Drawable mBackground>;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<android.graphics.drawable.Drawable: boolean isStateful()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<android.view.NotificationHeaderView: android.graphics.drawable.Drawable mBackground>;

        $r3 = virtualinvoke r0.<android.view.NotificationHeaderView: int[] getDrawableState()>();

        virtualinvoke $r2.<android.graphics.drawable.Drawable: boolean setState(int[])>($r3);

     label1:
        return;
    }

    public android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)
    {
        android.view.NotificationHeaderView r0;
        android.util.AttributeSet r1;
        android.view.ViewGroup$MarginLayoutParams $r2;
        android.content.Context $r3;

        r0 := @this: android.view.NotificationHeaderView;

        r1 := @parameter0: android.util.AttributeSet;

        $r2 = new android.view.ViewGroup$MarginLayoutParams;

        $r3 = virtualinvoke r0.<android.view.NotificationHeaderView: android.content.Context getContext()>();

        specialinvoke $r2.<android.view.ViewGroup$MarginLayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>($r3, r1);

        return $r2;
    }

    public android.widget.ImageView getExpandButton()
    {
        android.view.NotificationHeaderView r0;
        com.android.internal.widget.NotificationExpandButton $r1;

        r0 := @this: android.view.NotificationHeaderView;

        $r1 = r0.<android.view.NotificationHeaderView: com.android.internal.widget.NotificationExpandButton mExpandButton>;

        return $r1;
    }

    public int getHeaderTextMarginEnd()
    {
        android.view.NotificationHeaderView r0;
        int $i0;

        r0 := @this: android.view.NotificationHeaderView;

        $i0 = r0.<android.view.NotificationHeaderView: int mHeaderTextMarginEnd>;

        return $i0;
    }

    public com.android.internal.widget.CachingIconView getIcon()
    {
        android.view.NotificationHeaderView r0;
        com.android.internal.widget.CachingIconView $r1;

        r0 := @this: android.view.NotificationHeaderView;

        $r1 = r0.<android.view.NotificationHeaderView: com.android.internal.widget.CachingIconView mIcon>;

        return $r1;
    }

    public int getOriginalIconColor()
    {
        android.view.NotificationHeaderView r0;
        com.android.internal.widget.CachingIconView $r1;
        int $i0;

        r0 := @this: android.view.NotificationHeaderView;

        $r1 = r0.<android.view.NotificationHeaderView: com.android.internal.widget.CachingIconView mIcon>;

        $i0 = virtualinvoke $r1.<com.android.internal.widget.CachingIconView: int getOriginalIconColor()>();

        return $i0;
    }

    public int getOriginalNotificationColor()
    {
        android.view.NotificationHeaderView r0;
        com.android.internal.widget.NotificationExpandButton $r1;
        int $i0;

        r0 := @this: android.view.NotificationHeaderView;

        $r1 = r0.<android.view.NotificationHeaderView: com.android.internal.widget.NotificationExpandButton mExpandButton>;

        $i0 = virtualinvoke $r1.<com.android.internal.widget.NotificationExpandButton: int getOriginalNotificationColor()>();

        return $i0;
    }

    public android.view.View getWorkProfileIcon()
    {
        android.view.NotificationHeaderView r0;
        android.view.View $r1;

        r0 := @this: android.view.NotificationHeaderView;

        $r1 = r0.<android.view.NotificationHeaderView: android.view.View mProfileBadge>;

        return $r1;
    }

    public boolean hasOverlappingRendering()
    {
        android.view.NotificationHeaderView r0;

        r0 := @this: android.view.NotificationHeaderView;

        return 0;
    }

    public boolean isInTouchRect(float, float)
    {
        android.view.NotificationHeaderView r0;
        float f0, f1;
        android.view.View$OnClickListener $r1;
        android.view.NotificationHeaderView$HeaderTouchListener $r2;
        boolean $z0;

        r0 := @this: android.view.NotificationHeaderView;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r1 = r0.<android.view.NotificationHeaderView: android.view.View$OnClickListener mExpandClickListener>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<android.view.NotificationHeaderView: android.view.NotificationHeaderView$HeaderTouchListener mTouchListener>;

        $z0 = staticinvoke <android.view.NotificationHeaderView$HeaderTouchListener: boolean access$700(android.view.NotificationHeaderView$HeaderTouchListener,float,float)>($r2, f0, f1);

        return $z0;
    }

    protected void onDraw(android.graphics.Canvas)
    {
        android.view.NotificationHeaderView r0;
        android.graphics.Canvas r1;
        android.graphics.drawable.Drawable r2, $r3;
        int $i0, $i1;

        r0 := @this: android.view.NotificationHeaderView;

        r1 := @parameter0: android.graphics.Canvas;

        r2 = r0.<android.view.NotificationHeaderView: android.graphics.drawable.Drawable mBackground>;

        if r2 == null goto label1;

        $i0 = virtualinvoke r0.<android.view.NotificationHeaderView: int getWidth()>();

        $i1 = virtualinvoke r0.<android.view.NotificationHeaderView: int getHeight()>();

        virtualinvoke r2.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>(0, 0, $i0, $i1);

        $r3 = r0.<android.view.NotificationHeaderView: android.graphics.drawable.Drawable mBackground>;

        virtualinvoke $r3.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);

     label1:
        return;
    }

    protected void onFinishInflate()
    {
        android.view.NotificationHeaderView r0;
        android.view.View $r1, $r2, $r3, $r4, $r6, $r8, $r10, $r11;
        android.widget.LinearLayout $r5;
        com.android.internal.widget.NotificationExpandButton $r7;
        com.android.internal.widget.CachingIconView $r9;

        r0 := @this: android.view.NotificationHeaderView;

        specialinvoke r0.<android.view.ViewGroup: void onFinishInflate()>();

        $r1 = virtualinvoke r0.<android.view.NotificationHeaderView: android.view.View findViewById(int)>(16908761);

        r0.<android.view.NotificationHeaderView: android.view.View mAppName> = $r1;

        $r2 = virtualinvoke r0.<android.view.NotificationHeaderView: android.view.View findViewById(int)>(16909033);

        r0.<android.view.NotificationHeaderView: android.view.View mHeaderText> = $r2;

        $r3 = virtualinvoke r0.<android.view.NotificationHeaderView: android.view.View findViewById(int)>(16909035);

        r0.<android.view.NotificationHeaderView: android.view.View mSecondaryHeaderText> = $r3;

        $r4 = virtualinvoke r0.<android.view.NotificationHeaderView: android.view.View findViewById(int)>(16909158);

        $r5 = (android.widget.LinearLayout) $r4;

        r0.<android.view.NotificationHeaderView: android.widget.LinearLayout mTransferChip> = $r5;

        $r6 = virtualinvoke r0.<android.view.NotificationHeaderView: android.view.View findViewById(int)>(16908949);

        $r7 = (com.android.internal.widget.NotificationExpandButton) $r6;

        r0.<android.view.NotificationHeaderView: com.android.internal.widget.NotificationExpandButton mExpandButton> = $r7;

        $r8 = virtualinvoke r0.<android.view.NotificationHeaderView: android.view.View findViewById(int)>(16908294);

        $r9 = (com.android.internal.widget.CachingIconView) $r8;

        r0.<android.view.NotificationHeaderView: com.android.internal.widget.CachingIconView mIcon> = $r9;

        $r10 = virtualinvoke r0.<android.view.NotificationHeaderView: android.view.View findViewById(int)>(16909317);

        r0.<android.view.NotificationHeaderView: android.view.View mProfileBadge> = $r10;

        $r11 = virtualinvoke r0.<android.view.NotificationHeaderView: android.view.View findViewById(int)>(16908762);

        r0.<android.view.NotificationHeaderView: android.view.View mAppOps> = $r11;

        return;
    }

    protected void onLayout(boolean, int, int, int, int)
    {
        android.view.NotificationHeaderView r0;
        boolean z0, $z1, z2;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, $i40, i41, i42, $i43;
        android.view.View r1, $r5, $r6;
        android.view.ViewGroup$MarginLayoutParams r2;
        android.view.ViewGroup$LayoutParams $r3;
        float $f0, $f1, $f2, $f3;
        com.android.internal.widget.NotificationExpandButton $r4;
        android.widget.LinearLayout $r7;

        r0 := @this: android.view.NotificationHeaderView;

        z0 := @parameter0: boolean;

        i28 := @parameter1: int;

        i29 := @parameter2: int;

        i30 := @parameter3: int;

        i31 := @parameter4: int;

        i32 = virtualinvoke r0.<android.view.NotificationHeaderView: int getPaddingStart()>();

        i33 = virtualinvoke r0.<android.view.NotificationHeaderView: int getMeasuredWidth()>();

        $i6 = r0.<android.view.NotificationHeaderView: int mGravity>;

        $i7 = $i6 & 1;

        if $i7 == 0 goto label01;

        z2 = 1;

        goto label02;

     label01:
        z2 = 0;

     label02:
        i34 = i32;

        if z2 == 0 goto label03;

        $i23 = virtualinvoke r0.<android.view.NotificationHeaderView: int getMeasuredWidth()>();

        $i26 = $i23 / 2;

        $i24 = r0.<android.view.NotificationHeaderView: int mTotalWidth>;

        $i25 = $i24 / 2;

        $i27 = $i26 - $i25;

        i34 = i32 + $i27;

     label03:
        i0 = virtualinvoke r0.<android.view.NotificationHeaderView: int getChildCount()>();

        i1 = virtualinvoke r0.<android.view.NotificationHeaderView: int getMeasuredHeight()>();

        i2 = virtualinvoke r0.<android.view.NotificationHeaderView: int getPaddingTop()>();

        i3 = virtualinvoke r0.<android.view.NotificationHeaderView: int getPaddingBottom()>();

        i35 = 0;

        i36 = i33;

     label04:
        if i35 >= i0 goto label14;

        r1 = virtualinvoke r0.<android.view.NotificationHeaderView: android.view.View getChildAt(int)>(i35);

        $i8 = virtualinvoke r1.<android.view.View: int getVisibility()>();

        if $i8 != 8 goto label05;

        goto label13;

     label05:
        i4 = virtualinvoke r1.<android.view.View: int getMeasuredHeight()>();

        $r3 = virtualinvoke r1.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        r2 = (android.view.ViewGroup$MarginLayoutParams) $r3;

        $i9 = virtualinvoke r0.<android.view.NotificationHeaderView: int getPaddingTop()>();

        $f2 = (float) $i9;

        $i10 = i1 - i2;

        $i11 = $i10 - i3;

        $i12 = $i11 - i4;

        $f0 = (float) $i12;

        $f1 = $f0 / 2.0F;

        $f3 = $f2 + $f1;

        i5 = (int) $f3;

        $r4 = r0.<android.view.NotificationHeaderView: com.android.internal.widget.NotificationExpandButton mExpandButton>;

        if r1 != $r4 goto label06;

        $z1 = r0.<android.view.NotificationHeaderView: boolean mShowExpandButtonAtEnd>;

        if $z1 != 0 goto label08;

     label06:
        $r5 = r0.<android.view.NotificationHeaderView: android.view.View mProfileBadge>;

        if r1 == $r5 goto label08;

        $r6 = r0.<android.view.NotificationHeaderView: android.view.View mAppOps>;

        if r1 == $r6 goto label08;

        $r7 = r0.<android.view.NotificationHeaderView: android.widget.LinearLayout mTransferChip>;

        if r1 != $r7 goto label07;

        goto label08;

     label07:
        $i20 = virtualinvoke r2.<android.view.ViewGroup$MarginLayoutParams: int getMarginStart()>();

        i37 = i34 + $i20;

        $i21 = virtualinvoke r1.<android.view.View: int getMeasuredWidth()>();

        i38 = $i21 + i37;

        i39 = i38;

        $i22 = virtualinvoke r2.<android.view.ViewGroup$MarginLayoutParams: int getMarginEnd()>();

        i34 = i38 + $i22;

        goto label11;

     label08:
        $i40 = virtualinvoke r0.<android.view.NotificationHeaderView: int getMeasuredWidth()>();

        if i36 != $i40 goto label09;

        $i19 = r0.<android.view.NotificationHeaderView: int mContentEndMargin>;

        i39 = i36 - $i19;

        goto label10;

     label09:
        $i13 = virtualinvoke r2.<android.view.ViewGroup$MarginLayoutParams: int getMarginEnd()>();

        i39 = i36 - $i13;

     label10:
        $i14 = virtualinvoke r1.<android.view.View: int getMeasuredWidth()>();

        i37 = i39 - $i14;

        $i15 = virtualinvoke r2.<android.view.ViewGroup$MarginLayoutParams: int getMarginStart()>();

        i36 = i37 - $i15;

     label11:
        i41 = i37;

        i42 = i39;

        $i43 = virtualinvoke r0.<android.view.NotificationHeaderView: int getLayoutDirection()>();

        if $i43 != 1 goto label12;

        $i17 = virtualinvoke r0.<android.view.NotificationHeaderView: int getWidth()>();

        i41 = $i17 - i39;

        $i18 = virtualinvoke r0.<android.view.NotificationHeaderView: int getWidth()>();

        i42 = $i18 - i37;

     label12:
        $i16 = i5 + i4;

        virtualinvoke r1.<android.view.View: void layout(int,int,int,int)>(i41, i5, i42, $i16);

     label13:
        i35 = i35 + 1;

        goto label04;

     label14:
        specialinvoke r0.<android.view.NotificationHeaderView: void updateTouchListener()>();

        return;
    }

    protected void onMeasure(int, int)
    {
        android.view.NotificationHeaderView r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, i32, i33, i34, i35, i36, $i37, $i38, $i39, $i40, $i41, i42;
        android.view.View r1, $r3, $r4, $r5, $r8, $r9;
        android.view.ViewGroup$MarginLayoutParams r2;
        android.view.ViewGroup$LayoutParams $r6;
        com.android.internal.widget.NotificationExpandButton $r7;
        android.widget.LinearLayout $r10;
        boolean $z0;

        r0 := @this: android.view.NotificationHeaderView;

        i32 := @parameter0: int;

        i33 := @parameter1: int;

        i0 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>(i32);

        i1 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>(i33);

        i2 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(i0, -2147483648);

        i3 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(i1, -2147483648);

        i34 = virtualinvoke r0.<android.view.NotificationHeaderView: int getPaddingStart()>();

        i35 = virtualinvoke r0.<android.view.NotificationHeaderView: int getPaddingEnd()>();

        i36 = 0;

     label1:
        $i4 = virtualinvoke r0.<android.view.NotificationHeaderView: int getChildCount()>();

        if i36 >= $i4 goto label7;

        r1 = virtualinvoke r0.<android.view.NotificationHeaderView: android.view.View getChildAt(int)>(i36);

        $i16 = virtualinvoke r1.<android.view.View: int getVisibility()>();

        if $i16 != 8 goto label2;

        goto label6;

     label2:
        $r6 = virtualinvoke r1.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        r2 = (android.view.ViewGroup$MarginLayoutParams) $r6;

        $i18 = r2.<android.view.ViewGroup$MarginLayoutParams: int leftMargin>;

        $i17 = r2.<android.view.ViewGroup$MarginLayoutParams: int rightMargin>;

        $i20 = $i18 + $i17;

        $i19 = r2.<android.view.ViewGroup$MarginLayoutParams: int width>;

        $i21 = staticinvoke <android.view.NotificationHeaderView: int getChildMeasureSpec(int,int,int)>(i2, $i20, $i19);

        $i23 = r2.<android.view.ViewGroup$MarginLayoutParams: int topMargin>;

        $i22 = r2.<android.view.ViewGroup$MarginLayoutParams: int bottomMargin>;

        $i25 = $i23 + $i22;

        $i24 = r2.<android.view.ViewGroup$MarginLayoutParams: int height>;

        $i26 = staticinvoke <android.view.NotificationHeaderView: int getChildMeasureSpec(int,int,int)>(i3, $i25, $i24);

        virtualinvoke r1.<android.view.View: void measure(int,int)>($i21, $i26);

        $r7 = r0.<android.view.NotificationHeaderView: com.android.internal.widget.NotificationExpandButton mExpandButton>;

        if r1 != $r7 goto label3;

        $z0 = r0.<android.view.NotificationHeaderView: boolean mShowExpandButtonAtEnd>;

        if $z0 != 0 goto label5;

     label3:
        $r8 = r0.<android.view.NotificationHeaderView: android.view.View mProfileBadge>;

        if r1 == $r8 goto label5;

        $r9 = r0.<android.view.NotificationHeaderView: android.view.View mAppOps>;

        if r1 == $r9 goto label5;

        $r10 = r0.<android.view.NotificationHeaderView: android.widget.LinearLayout mTransferChip>;

        if r1 != $r10 goto label4;

        goto label5;

     label4:
        $i28 = r2.<android.view.ViewGroup$MarginLayoutParams: int leftMargin>;

        $i27 = r2.<android.view.ViewGroup$MarginLayoutParams: int rightMargin>;

        $i29 = $i28 + $i27;

        $i30 = virtualinvoke r1.<android.view.View: int getMeasuredWidth()>();

        $i31 = $i29 + $i30;

        i34 = i34 + $i31;

        goto label6;

     label5:
        $i37 = r2.<android.view.ViewGroup$MarginLayoutParams: int leftMargin>;

        $i38 = r2.<android.view.ViewGroup$MarginLayoutParams: int rightMargin>;

        $i39 = $i37 + $i38;

        $i40 = virtualinvoke r1.<android.view.View: int getMeasuredWidth()>();

        $i41 = $i39 + $i40;

        i35 = i35 + $i41;

     label6:
        i36 = i36 + 1;

        goto label1;

     label7:
        $i5 = r0.<android.view.NotificationHeaderView: int mHeaderTextMarginEnd>;

        i42 = staticinvoke <java.lang.Math: int max(int,int)>($i5, i35);

        $i6 = i0 - i42;

        if i34 <= $i6 goto label8;

        $i10 = i34 - i0;

        $i12 = $i10 + i42;

        $r3 = r0.<android.view.NotificationHeaderView: android.view.View mAppName>;

        $i11 = r0.<android.view.NotificationHeaderView: int mChildMinWidth>;

        $i13 = specialinvoke r0.<android.view.NotificationHeaderView: int shrinkViewForOverflow(int,int,android.view.View,int)>(i3, $i12, $r3, $i11);

        $r4 = r0.<android.view.NotificationHeaderView: android.view.View mHeaderText>;

        $i14 = specialinvoke r0.<android.view.NotificationHeaderView: int shrinkViewForOverflow(int,int,android.view.View,int)>(i3, $i13, $r4, 0);

        $r5 = r0.<android.view.NotificationHeaderView: android.view.View mSecondaryHeaderText>;

        specialinvoke r0.<android.view.NotificationHeaderView: int shrinkViewForOverflow(int,int,android.view.View,int)>(i3, $i14, $r5, 0);

     label8:
        $i7 = virtualinvoke r0.<android.view.NotificationHeaderView: int getPaddingEnd()>();

        $i8 = i34 + $i7;

        $i9 = staticinvoke <java.lang.Math: int min(int,int)>($i8, i0);

        r0.<android.view.NotificationHeaderView: int mTotalWidth> = $i9;

        virtualinvoke r0.<android.view.NotificationHeaderView: void setMeasuredDimension(int,int)>(i0, i1);

        return;
    }

    public void setAcceptAllTouches(boolean)
    {
        android.view.NotificationHeaderView r0;
        boolean $z0, z1, z2;

        r0 := @this: android.view.NotificationHeaderView;

        z1 := @parameter0: boolean;

        $z0 = r0.<android.view.NotificationHeaderView: boolean mEntireHeaderClickable>;

        if $z0 != 0 goto label2;

        if z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        r0.<android.view.NotificationHeaderView: boolean mAcceptAllTouches> = z2;

        return;
    }

    public void setAppOpsOnClickListener(android.view.View$OnClickListener)
    {
        android.view.NotificationHeaderView r0;
        android.view.View$OnClickListener r1;

        r0 := @this: android.view.NotificationHeaderView;

        r1 := @parameter0: android.view.View$OnClickListener;

        r0.<android.view.NotificationHeaderView: android.view.View$OnClickListener mAppOpsListener> = r1;

        specialinvoke r0.<android.view.NotificationHeaderView: void updateTouchListener()>();

        return;
    }

    public void setExpandOnlyOnButton(boolean)
    {
        android.view.NotificationHeaderView r0;
        boolean z0;

        r0 := @this: android.view.NotificationHeaderView;

        z0 := @parameter0: boolean;

        r0.<android.view.NotificationHeaderView: boolean mExpandOnlyOnButton> = z0;

        return;
    }

    public void setExpanded(boolean)
    {
        android.view.NotificationHeaderView r0;
        boolean z0;

        r0 := @this: android.view.NotificationHeaderView;

        z0 := @parameter0: boolean;

        r0.<android.view.NotificationHeaderView: boolean mExpanded> = z0;

        specialinvoke r0.<android.view.NotificationHeaderView: void updateExpandButton()>();

        return;
    }

    public void setHeaderBackgroundDrawable(android.graphics.drawable.Drawable)
    {
        android.view.NotificationHeaderView r0;
        android.graphics.drawable.Drawable r1;
        android.view.ViewOutlineProvider $r2;

        r0 := @this: android.view.NotificationHeaderView;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        if r1 == null goto label1;

        virtualinvoke r0.<android.view.NotificationHeaderView: void setWillNotDraw(boolean)>(0);

        r0.<android.view.NotificationHeaderView: android.graphics.drawable.Drawable mBackground> = r1;

        virtualinvoke r1.<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(r0);

        $r2 = r0.<android.view.NotificationHeaderView: android.view.ViewOutlineProvider mProvider>;

        virtualinvoke r0.<android.view.NotificationHeaderView: void setOutlineProvider(android.view.ViewOutlineProvider)>($r2);

        goto label2;

     label1:
        virtualinvoke r0.<android.view.NotificationHeaderView: void setWillNotDraw(boolean)>(1);

        r0.<android.view.NotificationHeaderView: android.graphics.drawable.Drawable mBackground> = null;

        virtualinvoke r0.<android.view.NotificationHeaderView: void setOutlineProvider(android.view.ViewOutlineProvider)>(null);

     label2:
        virtualinvoke r0.<android.view.NotificationHeaderView: void invalidate()>();

        return;
    }

    public void setHeaderTextMarginEnd(int)
    {
        android.view.NotificationHeaderView r0;
        int i0, $i1;

        r0 := @this: android.view.NotificationHeaderView;

        i0 := @parameter0: int;

        $i1 = r0.<android.view.NotificationHeaderView: int mHeaderTextMarginEnd>;

        if $i1 == i0 goto label1;

        r0.<android.view.NotificationHeaderView: int mHeaderTextMarginEnd> = i0;

        virtualinvoke r0.<android.view.NotificationHeaderView: void requestLayout()>();

     label1:
        return;
    }

    public void setOnClickListener(android.view.View$OnClickListener)
    {
        android.view.NotificationHeaderView r0;
        android.view.View$OnClickListener r1;
        com.android.internal.widget.NotificationExpandButton $r2;

        r0 := @this: android.view.NotificationHeaderView;

        r1 := @parameter0: android.view.View$OnClickListener;

        r0.<android.view.NotificationHeaderView: android.view.View$OnClickListener mExpandClickListener> = r1;

        $r2 = r0.<android.view.NotificationHeaderView: com.android.internal.widget.NotificationExpandButton mExpandButton>;

        virtualinvoke $r2.<com.android.internal.widget.NotificationExpandButton: void setOnClickListener(android.view.View$OnClickListener)>(r1);

        specialinvoke r0.<android.view.NotificationHeaderView: void updateTouchListener()>();

        return;
    }

    public void setShowExpandButtonAtEnd(boolean)
    {
        android.view.NotificationHeaderView r0;
        boolean z0, $z1, $z2;

        r0 := @this: android.view.NotificationHeaderView;

        z0 := @parameter0: boolean;

        $z1 = r0.<android.view.NotificationHeaderView: boolean mShowExpandButtonAtEnd>;

        if z0 == $z1 goto label1;

        $z2 = z0 ^ 1;

        virtualinvoke r0.<android.view.NotificationHeaderView: void setClipToPadding(boolean)>($z2);

        r0.<android.view.NotificationHeaderView: boolean mShowExpandButtonAtEnd> = z0;

     label1:
        return;
    }

    public void setShowWorkBadgeAtEnd(boolean)
    {
        android.view.NotificationHeaderView r0;
        boolean z0, $z1, $z2;

        r0 := @this: android.view.NotificationHeaderView;

        z0 := @parameter0: boolean;

        $z1 = r0.<android.view.NotificationHeaderView: boolean mShowWorkBadgeAtEnd>;

        if z0 == $z1 goto label1;

        $z2 = z0 ^ 1;

        virtualinvoke r0.<android.view.NotificationHeaderView: void setClipToPadding(boolean)>($z2);

        r0.<android.view.NotificationHeaderView: boolean mShowWorkBadgeAtEnd> = z0;

     label1:
        return;
    }

    protected boolean verifyDrawable(android.graphics.drawable.Drawable)
    {
        android.view.NotificationHeaderView r0;
        android.graphics.drawable.Drawable r1, $r2;
        boolean $z0, z1;

        r0 := @this: android.view.NotificationHeaderView;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        $z0 = specialinvoke r0.<android.view.ViewGroup: boolean verifyDrawable(android.graphics.drawable.Drawable)>(r1);

        if $z0 != 0 goto label2;

        $r2 = r0.<android.view.NotificationHeaderView: android.graphics.drawable.Drawable mBackground>;

        if r1 != $r2 goto label1;

        goto label2;

     label1:
        z1 = 0;

        goto label3;

     label2:
        z1 = 1;

     label3:
        return z1;
    }

    public static void <clinit>()
    {
        <android.view.NotificationHeaderView: int NO_COLOR> = 1;

        return;
    }
}
