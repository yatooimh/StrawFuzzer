public final class android.view.PixelCopy extends java.lang.Object
{
    public static final int ERROR_DESTINATION_INVALID;
    public static final int ERROR_SOURCE_INVALID;
    public static final int ERROR_SOURCE_NO_DATA;
    public static final int ERROR_TIMEOUT;
    public static final int ERROR_UNKNOWN;
    public static final int SUCCESS;

    private void <init>()
    {
        android.view.PixelCopy r0;

        r0 := @this: android.view.PixelCopy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void request(android.view.Surface, android.graphics.Bitmap, android.view.PixelCopy$OnPixelCopyFinishedListener, android.os.Handler)
    {
        android.view.Surface r0;
        android.graphics.Bitmap r1;
        android.view.PixelCopy$OnPixelCopyFinishedListener r2;
        android.os.Handler r3;

        r0 := @parameter0: android.view.Surface;

        r1 := @parameter1: android.graphics.Bitmap;

        r2 := @parameter2: android.view.PixelCopy$OnPixelCopyFinishedListener;

        r3 := @parameter3: android.os.Handler;

        staticinvoke <android.view.PixelCopy: void request(android.view.Surface,android.graphics.Rect,android.graphics.Bitmap,android.view.PixelCopy$OnPixelCopyFinishedListener,android.os.Handler)>(r0, null, r1, r2, r3);

        return;
    }

    public static void request(android.view.Surface, android.graphics.Rect, android.graphics.Bitmap, android.view.PixelCopy$OnPixelCopyFinishedListener, android.os.Handler)
    {
        android.view.Surface r0;
        android.graphics.Rect r1;
        android.graphics.Bitmap r2;
        android.view.PixelCopy$OnPixelCopyFinishedListener r3;
        android.os.Handler r4;
        boolean $z0, $z2;
        java.lang.IllegalArgumentException $r5, $r7;
        android.view.PixelCopy$1 $r6;
        int $i0;

        r0 := @parameter0: android.view.Surface;

        r1 := @parameter1: android.graphics.Rect;

        r2 := @parameter2: android.graphics.Bitmap;

        r3 := @parameter3: android.view.PixelCopy$OnPixelCopyFinishedListener;

        r4 := @parameter4: android.os.Handler;

        staticinvoke <android.view.PixelCopy: void validateBitmapDest(android.graphics.Bitmap)>(r2);

        $z0 = virtualinvoke r0.<android.view.Surface: boolean isValid()>();

        if $z0 == 0 goto label3;

        if r1 == null goto label2;

        $z2 = virtualinvoke r1.<android.graphics.Rect: boolean isEmpty()>();

        if $z2 != 0 goto label1;

        goto label2;

     label1:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("sourceRect is empty");

        throw $r7;

     label2:
        $r6 = new android.view.PixelCopy$1;

        $i0 = staticinvoke <android.view.ThreadedRenderer: int copySurfaceInto(android.view.Surface,android.graphics.Rect,android.graphics.Bitmap)>(r0, r1, r2);

        specialinvoke $r6.<android.view.PixelCopy$1: void <init>(android.view.PixelCopy$OnPixelCopyFinishedListener,int)>(r3, $i0);

        virtualinvoke r4.<android.os.Handler: boolean post(java.lang.Runnable)>($r6);

        return;

     label3:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Surface isn\'t valid, source.isValid() == false");

        throw $r5;
    }

    public static void request(android.view.SurfaceView, android.graphics.Bitmap, android.view.PixelCopy$OnPixelCopyFinishedListener, android.os.Handler)
    {
        android.view.SurfaceView r0;
        android.graphics.Bitmap r1;
        android.view.PixelCopy$OnPixelCopyFinishedListener r2;
        android.os.Handler r3;
        android.view.SurfaceHolder $r4;
        android.view.Surface $r5;

        r0 := @parameter0: android.view.SurfaceView;

        r1 := @parameter1: android.graphics.Bitmap;

        r2 := @parameter2: android.view.PixelCopy$OnPixelCopyFinishedListener;

        r3 := @parameter3: android.os.Handler;

        $r4 = virtualinvoke r0.<android.view.SurfaceView: android.view.SurfaceHolder getHolder()>();

        $r5 = interfaceinvoke $r4.<android.view.SurfaceHolder: android.view.Surface getSurface()>();

        staticinvoke <android.view.PixelCopy: void request(android.view.Surface,android.graphics.Bitmap,android.view.PixelCopy$OnPixelCopyFinishedListener,android.os.Handler)>($r5, r1, r2, r3);

        return;
    }

    public static void request(android.view.SurfaceView, android.graphics.Rect, android.graphics.Bitmap, android.view.PixelCopy$OnPixelCopyFinishedListener, android.os.Handler)
    {
        android.view.SurfaceView r0;
        android.graphics.Rect r1;
        android.graphics.Bitmap r2;
        android.view.PixelCopy$OnPixelCopyFinishedListener r3;
        android.os.Handler r4;
        android.view.SurfaceHolder $r5;
        android.view.Surface $r6;

        r0 := @parameter0: android.view.SurfaceView;

        r1 := @parameter1: android.graphics.Rect;

        r2 := @parameter2: android.graphics.Bitmap;

        r3 := @parameter3: android.view.PixelCopy$OnPixelCopyFinishedListener;

        r4 := @parameter4: android.os.Handler;

        $r5 = virtualinvoke r0.<android.view.SurfaceView: android.view.SurfaceHolder getHolder()>();

        $r6 = interfaceinvoke $r5.<android.view.SurfaceHolder: android.view.Surface getSurface()>();

        staticinvoke <android.view.PixelCopy: void request(android.view.Surface,android.graphics.Rect,android.graphics.Bitmap,android.view.PixelCopy$OnPixelCopyFinishedListener,android.os.Handler)>($r6, r1, r2, r3, r4);

        return;
    }

    public static void request(android.view.Window, android.graphics.Bitmap, android.view.PixelCopy$OnPixelCopyFinishedListener, android.os.Handler)
    {
        android.view.Window r0;
        android.graphics.Bitmap r1;
        android.view.PixelCopy$OnPixelCopyFinishedListener r2;
        android.os.Handler r3;

        r0 := @parameter0: android.view.Window;

        r1 := @parameter1: android.graphics.Bitmap;

        r2 := @parameter2: android.view.PixelCopy$OnPixelCopyFinishedListener;

        r3 := @parameter3: android.os.Handler;

        staticinvoke <android.view.PixelCopy: void request(android.view.Window,android.graphics.Rect,android.graphics.Bitmap,android.view.PixelCopy$OnPixelCopyFinishedListener,android.os.Handler)>(r0, null, r1, r2, r3);

        return;
    }

    public static void request(android.view.Window, android.graphics.Rect, android.graphics.Bitmap, android.view.PixelCopy$OnPixelCopyFinishedListener, android.os.Handler)
    {
        android.graphics.Rect r0, $r11, r14, r15;
        android.graphics.Bitmap r1;
        android.view.PixelCopy$OnPixelCopyFinishedListener r2;
        android.os.Handler r3;
        android.view.ViewRootImpl r4;
        java.lang.IllegalArgumentException $r5, $r7, $r9;
        android.view.View $r6, $r8;
        boolean $z0;
        android.view.WindowManager$LayoutParams $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        android.view.Window r12;
        android.view.Surface r13;

        r12 := @parameter0: android.view.Window;

        r0 := @parameter1: android.graphics.Rect;

        r1 := @parameter2: android.graphics.Bitmap;

        r2 := @parameter3: android.view.PixelCopy$OnPixelCopyFinishedListener;

        r3 := @parameter4: android.os.Handler;

        staticinvoke <android.view.PixelCopy: void validateBitmapDest(android.graphics.Bitmap)>(r1);

        if r12 == null goto label5;

        $r6 = virtualinvoke r12.<android.view.Window: android.view.View peekDecorView()>();

        if $r6 == null goto label4;

        r13 = null;

        $r8 = virtualinvoke r12.<android.view.Window: android.view.View peekDecorView()>();

        r4 = virtualinvoke $r8.<android.view.View: android.view.ViewRootImpl getViewRootImpl()>();

        r14 = r0;

        if r4 == null goto label2;

        r13 = r4.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        $r10 = r4.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        r15 = $r10.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        if r0 != null goto label1;

        $r11 = new android.graphics.Rect;

        $i9 = r15.<android.graphics.Rect: int left>;

        $i8 = r15.<android.graphics.Rect: int top>;

        $i3 = r4.<android.view.ViewRootImpl: int mWidth>;

        $i2 = r15.<android.graphics.Rect: int left>;

        $i7 = $i3 + $i2;

        $i5 = r4.<android.view.ViewRootImpl: int mHeight>;

        $i4 = r15.<android.graphics.Rect: int top>;

        $i6 = $i5 + $i4;

        specialinvoke $r11.<android.graphics.Rect: void <init>(int,int,int,int)>($i9, $i8, $i7, $i6);

        r14 = $r11;

        goto label2;

     label1:
        $i1 = r15.<android.graphics.Rect: int left>;

        $i0 = r15.<android.graphics.Rect: int top>;

        virtualinvoke r0.<android.graphics.Rect: void offset(int,int)>($i1, $i0);

        r14 = r0;

     label2:
        if r13 == null goto label3;

        $z0 = virtualinvoke r13.<android.view.Surface: boolean isValid()>();

        if $z0 == 0 goto label3;

        staticinvoke <android.view.PixelCopy: void request(android.view.Surface,android.graphics.Rect,android.graphics.Bitmap,android.view.PixelCopy$OnPixelCopyFinishedListener,android.os.Handler)>(r13, r14, r1, r2, r3);

        return;

     label3:
        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Window doesn\'t have a backing surface!");

        throw $r9;

     label4:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Only able to copy windows with decor views");

        throw $r7;

     label5:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("source is null");

        throw $r5;
    }

    private static void validateBitmapDest(android.graphics.Bitmap)
    {
        android.graphics.Bitmap r0;
        java.lang.IllegalArgumentException $r1, $r2, $r3;
        boolean $z0, $z1;

        r0 := @parameter0: android.graphics.Bitmap;

        if r0 == null goto label3;

        $z0 = virtualinvoke r0.<android.graphics.Bitmap: boolean isRecycled()>();

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r0.<android.graphics.Bitmap: boolean isMutable()>();

        if $z1 == 0 goto label1;

        return;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bitmap is immutable");

        throw $r3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bitmap is recycled");

        throw $r2;

     label3:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bitmap cannot be null");

        throw $r1;
    }

    public static void <clinit>()
    {
        <android.view.PixelCopy: int SUCCESS> = 0;

        <android.view.PixelCopy: int ERROR_UNKNOWN> = 1;

        <android.view.PixelCopy: int ERROR_TIMEOUT> = 2;

        <android.view.PixelCopy: int ERROR_SOURCE_NO_DATA> = 3;

        <android.view.PixelCopy: int ERROR_SOURCE_INVALID> = 4;

        <android.view.PixelCopy: int ERROR_DESTINATION_INVALID> = 5;

        return;
    }
}
