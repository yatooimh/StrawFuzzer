final class android.view.Surface$HwuiContext extends java.lang.Object
{
    private android.graphics.RecordingCanvas mCanvas;
    private android.graphics.HardwareRenderer mHardwareRenderer;
    private final boolean mIsWideColorGamut;
    private final android.graphics.RenderNode mRenderNode;
    final android.view.Surface this$0;

    void <init>(android.view.Surface, boolean)
    {
        android.view.Surface$HwuiContext r0;
        android.view.Surface r1;
        boolean z0;
        android.graphics.RenderNode $r2, $r4, r9;
        android.graphics.HardwareRenderer $r3, $r5, $r6, $r7, $r8;

        r0 := @this: android.view.Surface$HwuiContext;

        r1 := @parameter0: android.view.Surface;

        z0 := @parameter1: boolean;

        r0.<android.view.Surface$HwuiContext: android.view.Surface this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r9 = staticinvoke <android.graphics.RenderNode: android.graphics.RenderNode create(java.lang.String,android.graphics.RenderNode$AnimationHost)>("HwuiCanvas", null);

        r0.<android.view.Surface$HwuiContext: android.graphics.RenderNode mRenderNode> = r9;

        virtualinvoke r9.<android.graphics.RenderNode: boolean setClipToBounds(boolean)>(0);

        $r2 = r0.<android.view.Surface$HwuiContext: android.graphics.RenderNode mRenderNode>;

        virtualinvoke $r2.<android.graphics.RenderNode: boolean setForceDarkAllowed(boolean)>(0);

        r0.<android.view.Surface$HwuiContext: boolean mIsWideColorGamut> = z0;

        $r3 = new android.graphics.HardwareRenderer;

        specialinvoke $r3.<android.graphics.HardwareRenderer: void <init>()>();

        r0.<android.view.Surface$HwuiContext: android.graphics.HardwareRenderer mHardwareRenderer> = $r3;

        $r4 = r0.<android.view.Surface$HwuiContext: android.graphics.RenderNode mRenderNode>;

        virtualinvoke $r3.<android.graphics.HardwareRenderer: void setContentRoot(android.graphics.RenderNode)>($r4);

        $r5 = r0.<android.view.Surface$HwuiContext: android.graphics.HardwareRenderer mHardwareRenderer>;

        virtualinvoke $r5.<android.graphics.HardwareRenderer: void setSurface(android.view.Surface,boolean)>(r1, 1);

        $r6 = r0.<android.view.Surface$HwuiContext: android.graphics.HardwareRenderer mHardwareRenderer>;

        virtualinvoke $r6.<android.graphics.HardwareRenderer: void setWideGamut(boolean)>(z0);

        $r7 = r0.<android.view.Surface$HwuiContext: android.graphics.HardwareRenderer mHardwareRenderer>;

        virtualinvoke $r7.<android.graphics.HardwareRenderer: void setLightSourceAlpha(float,float)>(0.0F, 0.0F);

        $r8 = r0.<android.view.Surface$HwuiContext: android.graphics.HardwareRenderer mHardwareRenderer>;

        virtualinvoke $r8.<android.graphics.HardwareRenderer: void setLightSourceGeometry(float,float,float,float)>(0.0F, 0.0F, 0.0F, 0.0F);

        return;
    }

    void destroy()
    {
        android.view.Surface$HwuiContext r0;
        android.graphics.HardwareRenderer $r1;

        r0 := @this: android.view.Surface$HwuiContext;

        $r1 = r0.<android.view.Surface$HwuiContext: android.graphics.HardwareRenderer mHardwareRenderer>;

        virtualinvoke $r1.<android.graphics.HardwareRenderer: void destroy()>();

        return;
    }

    boolean isWideColorGamut()
    {
        android.view.Surface$HwuiContext r0;
        boolean $z0;

        r0 := @this: android.view.Surface$HwuiContext;

        $z0 = r0.<android.view.Surface$HwuiContext: boolean mIsWideColorGamut>;

        return $z0;
    }

    android.graphics.Canvas lockCanvas(int, int)
    {
        android.view.Surface$HwuiContext r0;
        int i0, i1;
        android.graphics.RecordingCanvas r1, $r2;
        java.lang.IllegalStateException $r3;
        android.graphics.RenderNode $r4;

        r0 := @this: android.view.Surface$HwuiContext;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<android.view.Surface$HwuiContext: android.graphics.RecordingCanvas mCanvas>;

        if $r2 != null goto label1;

        $r4 = r0.<android.view.Surface$HwuiContext: android.graphics.RenderNode mRenderNode>;

        r1 = virtualinvoke $r4.<android.graphics.RenderNode: android.graphics.RecordingCanvas beginRecording(int,int)>(i0, i1);

        r0.<android.view.Surface$HwuiContext: android.graphics.RecordingCanvas mCanvas> = r1;

        return r1;

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Surface was already locked!");

        throw $r3;
    }

    void unlockAndPost(android.graphics.Canvas)
    {
        android.view.Surface$HwuiContext r0;
        android.graphics.Canvas r1;
        android.graphics.RecordingCanvas $r2;
        java.lang.IllegalArgumentException $r3;
        android.graphics.RenderNode $r4;
        android.graphics.HardwareRenderer $r5;
        android.graphics.HardwareRenderer$FrameRenderRequest $r6, $r7;
        long $l0;

        r0 := @this: android.view.Surface$HwuiContext;

        r1 := @parameter0: android.graphics.Canvas;

        $r2 = r0.<android.view.Surface$HwuiContext: android.graphics.RecordingCanvas mCanvas>;

        if r1 != $r2 goto label1;

        $r4 = r0.<android.view.Surface$HwuiContext: android.graphics.RenderNode mRenderNode>;

        virtualinvoke $r4.<android.graphics.RenderNode: void endRecording()>();

        r0.<android.view.Surface$HwuiContext: android.graphics.RecordingCanvas mCanvas> = null;

        $r5 = r0.<android.view.Surface$HwuiContext: android.graphics.HardwareRenderer mHardwareRenderer>;

        $r6 = virtualinvoke $r5.<android.graphics.HardwareRenderer: android.graphics.HardwareRenderer$FrameRenderRequest createRenderRequest()>();

        $l0 = staticinvoke <java.lang.System: long nanoTime()>();

        $r7 = virtualinvoke $r6.<android.graphics.HardwareRenderer$FrameRenderRequest: android.graphics.HardwareRenderer$FrameRenderRequest setVsyncTime(long)>($l0);

        virtualinvoke $r7.<android.graphics.HardwareRenderer$FrameRenderRequest: int syncAndDraw()>();

        return;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("canvas object must be the same instance that was previously returned by lockCanvas");

        throw $r3;
    }

    void updateSurface()
    {
        android.view.Surface$HwuiContext r0;
        android.view.Surface $r1;
        android.graphics.HardwareRenderer $r2;

        r0 := @this: android.view.Surface$HwuiContext;

        $r2 = r0.<android.view.Surface$HwuiContext: android.graphics.HardwareRenderer mHardwareRenderer>;

        $r1 = r0.<android.view.Surface$HwuiContext: android.view.Surface this$0>;

        virtualinvoke $r2.<android.graphics.HardwareRenderer: void setSurface(android.view.Surface,boolean)>($r1, 1);

        return;
    }
}
