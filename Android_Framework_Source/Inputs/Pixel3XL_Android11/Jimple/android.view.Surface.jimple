public class android.view.Surface extends java.lang.Object implements android.os.Parcelable
{
    public static final android.os.Parcelable$Creator CREATOR;
    public static final int FRAME_RATE_COMPATIBILITY_DEFAULT;
    public static final int FRAME_RATE_COMPATIBILITY_FIXED_SOURCE;
    public static final int ROTATION_0;
    public static final int ROTATION_180;
    public static final int ROTATION_270;
    public static final int ROTATION_90;
    public static final int SCALING_MODE_FREEZE;
    public static final int SCALING_MODE_NO_SCALE_CROP;
    public static final int SCALING_MODE_SCALE_CROP;
    public static final int SCALING_MODE_SCALE_TO_WINDOW;
    private static final java.lang.String TAG;
    private final android.graphics.Canvas mCanvas;
    private final dalvik.system.CloseGuard mCloseGuard;
    private android.graphics.Matrix mCompatibleMatrix;
    private int mGenerationId;
    private android.view.Surface$HwuiContext mHwuiContext;
    private boolean mIsAutoRefreshEnabled;
    private boolean mIsSharedBufferModeEnabled;
    private boolean mIsSingleBuffered;
    final java.lang.Object mLock;
    private long mLockedObject;
    private java.lang.String mName;
    long mNativeObject;

    static void <clinit>()
    {
        android.view.Surface$1 $r0;

        <android.view.Surface: java.lang.String TAG> = "Surface";

        <android.view.Surface: int SCALING_MODE_SCALE_TO_WINDOW> = 1;

        <android.view.Surface: int SCALING_MODE_SCALE_CROP> = 2;

        <android.view.Surface: int SCALING_MODE_NO_SCALE_CROP> = 3;

        <android.view.Surface: int SCALING_MODE_FREEZE> = 0;

        <android.view.Surface: int ROTATION_90> = 1;

        <android.view.Surface: int ROTATION_270> = 3;

        <android.view.Surface: int ROTATION_180> = 2;

        <android.view.Surface: int ROTATION_0> = 0;

        <android.view.Surface: int FRAME_RATE_COMPATIBILITY_FIXED_SOURCE> = 1;

        <android.view.Surface: int FRAME_RATE_COMPATIBILITY_DEFAULT> = 0;

        $r0 = new android.view.Surface$1;

        specialinvoke $r0.<android.view.Surface$1: void <init>()>();

        <android.view.Surface: android.os.Parcelable$Creator CREATOR> = $r0;

        return;
    }

    public void <init>()
    {
        android.view.Surface r0;
        dalvik.system.CloseGuard $r1;
        java.lang.Object $r2;
        android.view.Surface$CompatibleCanvas $r3;

        r0 := @this: android.view.Surface;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.view.Surface: dalvik.system.CloseGuard mCloseGuard> = $r1;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<android.view.Surface: java.lang.Object mLock> = $r2;

        $r3 = new android.view.Surface$CompatibleCanvas;

        specialinvoke $r3.<android.view.Surface$CompatibleCanvas: void <init>(android.view.Surface,android.view.Surface$1)>(r0, null);

        r0.<android.view.Surface: android.graphics.Canvas mCanvas> = $r3;

        return;
    }

    private void <init>(long)
    {
        android.view.Surface r0;
        long l0;
        java.lang.Object r1, $r4;
        dalvik.system.CloseGuard $r3;
        android.view.Surface$CompatibleCanvas $r5;
        java.lang.Throwable $r6;

        r0 := @this: android.view.Surface;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.view.Surface: dalvik.system.CloseGuard mCloseGuard> = $r3;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<android.view.Surface: java.lang.Object mLock> = $r4;

        $r5 = new android.view.Surface$CompatibleCanvas;

        specialinvoke $r5.<android.view.Surface$CompatibleCanvas: void <init>(android.view.Surface,android.view.Surface$1)>(r0, null);

        r0.<android.view.Surface: android.graphics.Canvas mCanvas> = $r5;

        r1 = r0.<android.view.Surface: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.view.Surface: void setNativeObjectLocked(long)>(l0);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r6 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void <init>(android.graphics.SurfaceTexture)
    {
        android.view.Surface r0;
        java.lang.Object r1, $r3;
        dalvik.system.CloseGuard $r2;
        android.view.Surface$CompatibleCanvas $r4;
        java.lang.IllegalArgumentException $r5;
        boolean $z0;
        java.lang.String $r6;
        long $l0;
        java.lang.Throwable $r7;
        android.graphics.SurfaceTexture r8;

        r0 := @this: android.view.Surface;

        r8 := @parameter0: android.graphics.SurfaceTexture;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.view.Surface: dalvik.system.CloseGuard mCloseGuard> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<android.view.Surface: java.lang.Object mLock> = $r3;

        $r4 = new android.view.Surface$CompatibleCanvas;

        specialinvoke $r4.<android.view.Surface$CompatibleCanvas: void <init>(android.view.Surface,android.view.Surface$1)>(r0, null);

        r0.<android.view.Surface: android.graphics.Canvas mCanvas> = $r4;

        if r8 == null goto label6;

        $z0 = virtualinvoke r8.<android.graphics.SurfaceTexture: boolean isSingleBuffered()>();

        r0.<android.view.Surface: boolean mIsSingleBuffered> = $z0;

        r1 = r0.<android.view.Surface: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r6 = virtualinvoke r8.<java.lang.Object: java.lang.String toString()>();

        r0.<android.view.Surface: java.lang.String mName> = $r6;

        $l0 = staticinvoke <android.view.Surface: long nativeCreateFromSurfaceTexture(android.graphics.SurfaceTexture)>(r8);

        specialinvoke r0.<android.view.Surface: void setNativeObjectLocked(long)>($l0);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r7 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r7;

     label6:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("surfaceTexture must not be null");

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void <init>(android.view.SurfaceControl)
    {
        android.view.Surface r0;
        android.view.SurfaceControl r1;
        dalvik.system.CloseGuard $r2;
        java.lang.Object $r3;
        android.view.Surface$CompatibleCanvas $r4;

        r0 := @this: android.view.Surface;

        r1 := @parameter0: android.view.SurfaceControl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.view.Surface: dalvik.system.CloseGuard mCloseGuard> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<android.view.Surface: java.lang.Object mLock> = $r3;

        $r4 = new android.view.Surface$CompatibleCanvas;

        specialinvoke $r4.<android.view.Surface$CompatibleCanvas: void <init>(android.view.Surface,android.view.Surface$1)>(r0, null);

        r0.<android.view.Surface: android.graphics.Canvas mCanvas> = $r4;

        virtualinvoke r0.<android.view.Surface: void copyFrom(android.view.SurfaceControl)>(r1);

        return;
    }

    static android.graphics.Matrix access$100(android.view.Surface)
    {
        android.view.Surface r0;
        android.graphics.Matrix $r1;

        r0 := @parameter0: android.view.Surface;

        $r1 = r0.<android.view.Surface: android.graphics.Matrix mCompatibleMatrix>;

        return $r1;
    }

    private void checkNotReleasedLocked()
    {
        android.view.Surface r0;
        long $l0;
        byte $b1;
        java.lang.IllegalStateException $r1;

        r0 := @this: android.view.Surface;

        $l0 = r0.<android.view.Surface: long mNativeObject>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Surface has already been released.");

        throw $r1;
    }

    private static native void nativeAllocateBuffers(long);

    private static native int nativeAttachAndQueueBufferWithColorSpace(long, android.graphics.GraphicBuffer, int);

    private static native long nativeCreateFromSurfaceControl(long);

    private static native long nativeCreateFromSurfaceTexture(android.graphics.SurfaceTexture) throws android.view.Surface$OutOfResourcesException;

    private static native int nativeForceScopedDisconnect(long);

    private static native long nativeGetFromSurfaceControl(long, long);

    private static native int nativeGetHeight(long);

    private static native long nativeGetNextFrameNumber(long);

    private static native int nativeGetWidth(long);

    private static native boolean nativeIsConsumerRunningBehind(long);

    private static native boolean nativeIsValid(long);

    private static native long nativeLockCanvas(long, android.graphics.Canvas, android.graphics.Rect) throws android.view.Surface$OutOfResourcesException;

    private static native long nativeReadFromParcel(long, android.os.Parcel);

    private static native void nativeRelease(long);

    private static native int nativeSetAutoRefreshEnabled(long, boolean);

    private static native int nativeSetFrameRate(long, float, int);

    private static native int nativeSetScalingMode(long, int);

    private static native int nativeSetSharedBufferModeEnabled(long, boolean);

    private static native void nativeUnlockCanvasAndPost(long, android.graphics.Canvas);

    private static native void nativeWriteToParcel(long, android.os.Parcel);

    public static java.lang.String rotationToString(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        if i0 == 0 goto label4;

        if i0 == 1 goto label3;

        if i0 == 2 goto label2;

        if i0 == 3 goto label1;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;

     label1:
        return "ROTATION_270";

     label2:
        return "ROTATION_180";

     label3:
        return "ROTATION_90";

     label4:
        return "ROTATION_0";
    }

    private void setNativeObjectLocked(long)
    {
        android.view.Surface r0;
        long l0, l1, $l4;
        android.view.Surface$HwuiContext r1;
        byte $b2, $b3, $b5, $b6, $b7;
        dalvik.system.CloseGuard $r2, $r3;
        int $i8, $i9;

        r0 := @this: android.view.Surface;

        l0 := @parameter0: long;

        l1 = r0.<android.view.Surface: long mNativeObject>;

        $b2 = l1 cmp l0;

        if $b2 == 0 goto label3;

        $b3 = l1 cmp 0L;

        if $b3 != 0 goto label1;

        $b7 = l0 cmp 0L;

        if $b7 == 0 goto label1;

        $r3 = r0.<android.view.Surface: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r3.<dalvik.system.CloseGuard: void open(java.lang.String)>("release");

        goto label2;

     label1:
        $l4 = r0.<android.view.Surface: long mNativeObject>;

        $b5 = $l4 cmp 0L;

        if $b5 == 0 goto label2;

        $b6 = l0 cmp 0L;

        if $b6 != 0 goto label2;

        $r2 = r0.<android.view.Surface: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r2.<dalvik.system.CloseGuard: void close()>();

     label2:
        r0.<android.view.Surface: long mNativeObject> = l0;

        $i8 = r0.<android.view.Surface: int mGenerationId>;

        $i9 = $i8 + 1;

        r0.<android.view.Surface: int mGenerationId> = $i9;

        r1 = r0.<android.view.Surface: android.view.Surface$HwuiContext mHwuiContext>;

        if r1 == null goto label3;

        virtualinvoke r1.<android.view.Surface$HwuiContext: void updateSurface()>();

     label3:
        return;
    }

    private void unlockSwCanvasAndPost(android.graphics.Canvas)
    {
        android.view.Surface r0;
        long l0, $l1, $l2, $l5, $l6, $l7, $l9;
        android.graphics.Canvas $r2, r15;
        java.lang.IllegalArgumentException $r3;
        byte $b3, $b4;
        java.lang.IllegalStateException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r7, $r10, $r13;
        java.lang.Throwable $r14;

        r0 := @this: android.view.Surface;

        r15 := @parameter0: android.graphics.Canvas;

        $r2 = r0.<android.view.Surface: android.graphics.Canvas mCanvas>;

        if r15 != $r2 goto label6;

        $l2 = r0.<android.view.Surface: long mNativeObject>;

        $l1 = r0.<android.view.Surface: long mLockedObject>;

        $b3 = $l2 cmp $l1;

        if $b3 == 0 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WARNING: Surface\'s mNativeObject (0x");

        $l6 = r0.<android.view.Surface: long mNativeObject>;

        $r7 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l6);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") != mLockedObject (0x");

        $l7 = r0.<android.view.Surface: long mLockedObject>;

        $r10 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l7);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r13 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Surface", $r13);

     label1:
        l0 = r0.<android.view.Surface: long mLockedObject>;

        $b4 = l0 cmp 0L;

        if $b4 == 0 goto label5;

     label2:
        staticinvoke <android.view.Surface: void nativeUnlockCanvasAndPost(long,android.graphics.Canvas)>(l0, r15);

     label3:
        $l5 = r0.<android.view.Surface: long mLockedObject>;

        staticinvoke <android.view.Surface: void nativeRelease(long)>($l5);

        r0.<android.view.Surface: long mLockedObject> = 0L;

        return;

     label4:
        $r14 := @caughtexception;

        $l9 = r0.<android.view.Surface: long mLockedObject>;

        staticinvoke <android.view.Surface: void nativeRelease(long)>($l9);

        r0.<android.view.Surface: long mLockedObject> = 0L;

        throw $r14;

     label5:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Surface was not locked");

        throw $r4;

     label6:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("canvas object must be the same instance that was previously returned by lockCanvas");

        throw $r3;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public void allocateBuffers()
    {
        android.view.Surface r0;
        java.lang.Object r1;
        long $l0;
        java.lang.Throwable $r3;

        r0 := @this: android.view.Surface;

        r1 = r0.<android.view.Surface: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.view.Surface: void checkNotReleasedLocked()>();

        $l0 = r0.<android.view.Surface: long mNativeObject>;

        staticinvoke <android.view.Surface: void nativeAllocateBuffers(long)>($l0);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void attachAndQueueBuffer(android.graphics.GraphicBuffer)
    {
        android.view.Surface r0;
        android.graphics.GraphicBuffer r1;
        android.graphics.ColorSpace$Named $r2;
        android.graphics.ColorSpace $r3;

        r0 := @this: android.view.Surface;

        r1 := @parameter0: android.graphics.GraphicBuffer;

        $r2 = <android.graphics.ColorSpace$Named: android.graphics.ColorSpace$Named SRGB>;

        $r3 = staticinvoke <android.graphics.ColorSpace: android.graphics.ColorSpace get(android.graphics.ColorSpace$Named)>($r2);

        virtualinvoke r0.<android.view.Surface: void attachAndQueueBufferWithColorSpace(android.graphics.GraphicBuffer,android.graphics.ColorSpace)>(r1, $r3);

        return;
    }

    public void attachAndQueueBufferWithColorSpace(android.graphics.GraphicBuffer, android.graphics.ColorSpace)
    {
        android.view.Surface r0;
        java.lang.Object r1;
        int i0, $i2;
        long $l1;
        java.lang.String $r4;
        android.graphics.ColorSpace$Named $r5;
        java.lang.Throwable $r6;
        android.graphics.GraphicBuffer r7;
        android.graphics.ColorSpace r8, r9;
        java.lang.RuntimeException r10;
        java.lang.StringBuilder r11;

        r0 := @this: android.view.Surface;

        r7 := @parameter0: android.graphics.GraphicBuffer;

        r8 := @parameter1: android.graphics.ColorSpace;

        r1 = r0.<android.view.Surface: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<android.view.Surface: void checkNotReleasedLocked()>();

     label02:
        r9 = r8;

        if r8 != null goto label04;

     label03:
        $r5 = <android.graphics.ColorSpace$Named: android.graphics.ColorSpace$Named SRGB>;

        r9 = staticinvoke <android.graphics.ColorSpace: android.graphics.ColorSpace get(android.graphics.ColorSpace$Named)>($r5);

     label04:
        $l1 = r0.<android.view.Surface: long mNativeObject>;

        $i2 = virtualinvoke r9.<android.graphics.ColorSpace: int getId()>();

        i0 = staticinvoke <android.view.Surface: int nativeAttachAndQueueBufferWithColorSpace(long,android.graphics.GraphicBuffer,int)>($l1, r7, $i2);

     label05:
        if i0 != 0 goto label08;

     label06:
        exitmonitor r1;

     label07:
        return;

     label08:
        r10 = new java.lang.RuntimeException;

        r11 = new java.lang.StringBuilder;

        specialinvoke r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to attach and queue buffer to Surface (bad object?), native error: ");

        virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r10.<java.lang.RuntimeException: void <init>(java.lang.String)>($r4);

        throw r10;

     label09:
        $r6 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void copyFrom(android.view.SurfaceControl)
    {
        android.view.Surface r0;
        java.lang.IllegalArgumentException $r2;
        byte $b0, $b3, $b5;
        java.lang.NullPointerException $r3;
        long $l1, $l2, $l4, $l6, l7, l8;
        java.lang.Throwable $r4;
        android.view.SurfaceControl r5;
        java.lang.Object r6;

        r0 := @this: android.view.Surface;

        r5 := @parameter0: android.view.SurfaceControl;

        if r5 == null goto label10;

        l7 = r5.<android.view.SurfaceControl: long mNativeObject>;

        $b0 = l7 cmp 0L;

        if $b0 == 0 goto label09;

        $l1 = r0.<android.view.Surface: long mNativeObject>;

        l8 = staticinvoke <android.view.Surface: long nativeGetFromSurfaceControl(long,long)>($l1, l7);

        r6 = r0.<android.view.Surface: java.lang.Object mLock>;

        entermonitor r6;

     label01:
        $l2 = r0.<android.view.Surface: long mNativeObject>;

        $b3 = l8 cmp $l2;

        if $b3 != 0 goto label03;

        exitmonitor r6;

     label02:
        return;

     label03:
        $l4 = r0.<android.view.Surface: long mNativeObject>;

        $b5 = $l4 cmp 0L;

        if $b5 == 0 goto label04;

        $l6 = r0.<android.view.Surface: long mNativeObject>;

        staticinvoke <android.view.Surface: void nativeRelease(long)>($l6);

     label04:
        specialinvoke r0.<android.view.Surface: void setNativeObjectLocked(long)>(l8);

        exitmonitor r6;

     label05:
        return;

     label06:
        $r4 := @caughtexception;

     label07:
        exitmonitor r6;

     label08:
        throw $r4;

     label09:
        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("null SurfaceControl native object. Are you using a released SurfaceControl?");

        throw $r3;

     label10:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("other must not be null");

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
    }

    public void createFrom(android.view.SurfaceControl)
    {
        android.view.Surface r0;
        java.lang.Object r1;
        java.lang.IllegalArgumentException $r2;
        byte $b0, $b2;
        java.lang.NullPointerException $r3;
        long $l1, $l3, l4, l5;
        java.lang.Throwable $r4;
        android.view.SurfaceControl r5;

        r0 := @this: android.view.Surface;

        r5 := @parameter0: android.view.SurfaceControl;

        if r5 == null goto label8;

        l4 = r5.<android.view.SurfaceControl: long mNativeObject>;

        $b0 = l4 cmp 0L;

        if $b0 == 0 goto label7;

        l5 = staticinvoke <android.view.Surface: long nativeCreateFromSurfaceControl(long)>(l4);

        r1 = r0.<android.view.Surface: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $l1 = r0.<android.view.Surface: long mNativeObject>;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label2;

        $l3 = r0.<android.view.Surface: long mNativeObject>;

        staticinvoke <android.view.Surface: void nativeRelease(long)>($l3);

     label2:
        specialinvoke r0.<android.view.Surface: void setNativeObjectLocked(long)>(l5);

        exitmonitor r1;

     label3:
        return;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

     label7:
        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("null SurfaceControl native object. Are you using a released SurfaceControl?");

        throw $r3;

     label8:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("other must not be null");

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public int describeContents()
    {
        android.view.Surface r0;

        r0 := @this: android.view.Surface;

        return 0;
    }

    public void destroy()
    {
        android.view.Surface r0;

        r0 := @this: android.view.Surface;

        virtualinvoke r0.<android.view.Surface: void release()>();

        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.view.Surface r0;
        dalvik.system.CloseGuard $r2, $r3;
        java.lang.Throwable $r4;

        r0 := @this: android.view.Surface;

     label1:
        $r2 = r0.<android.view.Surface: dalvik.system.CloseGuard mCloseGuard>;

        if $r2 == null goto label2;

        $r3 = r0.<android.view.Surface: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r3.<dalvik.system.CloseGuard: void warnIfOpen()>();

     label2:
        virtualinvoke r0.<android.view.Surface: void release()>();

     label3:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label4:
        $r4 := @caughtexception;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    void forceScopedDisconnect()
    {
        android.view.Surface r0;
        java.lang.Object r1;
        long $l0;
        int $i1;
        java.lang.Throwable $r2;
        java.lang.RuntimeException r3;

        r0 := @this: android.view.Surface;

        r1 = r0.<android.view.Surface: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.view.Surface: void checkNotReleasedLocked()>();

        $l0 = r0.<android.view.Surface: long mNativeObject>;

        $i1 = staticinvoke <android.view.Surface: int nativeForceScopedDisconnect(long)>($l0);

        if $i1 != 0 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        r3 = new java.lang.RuntimeException;

        specialinvoke r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Failed to disconnect Surface instance (bad object?)");

        throw r3;

     label4:
        $r2 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public int getGenerationId()
    {
        android.view.Surface r0;
        java.lang.Object r1;
        int i0;
        java.lang.Throwable $r3;

        r0 := @this: android.view.Surface;

        r1 = r0.<android.view.Surface: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        i0 = r0.<android.view.Surface: int mGenerationId>;

        exitmonitor r1;

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public long getNextFrameNumber()
    {
        android.view.Surface r0;
        java.lang.Object r1;
        long l0, $l1;
        java.lang.Throwable $r3;

        r0 := @this: android.view.Surface;

        r1 = r0.<android.view.Surface: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.view.Surface: void checkNotReleasedLocked()>();

        $l1 = r0.<android.view.Surface: long mNativeObject>;

        l0 = staticinvoke <android.view.Surface: long nativeGetNextFrameNumber(long)>($l1);

        exitmonitor r1;

     label2:
        return l0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void hwuiDestroy()
    {
        android.view.Surface r0;
        android.view.Surface$HwuiContext r1;

        r0 := @this: android.view.Surface;

        r1 = r0.<android.view.Surface: android.view.Surface$HwuiContext mHwuiContext>;

        if r1 == null goto label1;

        virtualinvoke r1.<android.view.Surface$HwuiContext: void destroy()>();

        r0.<android.view.Surface: android.view.Surface$HwuiContext mHwuiContext> = null;

     label1:
        return;
    }

    public boolean isAutoRefreshEnabled()
    {
        android.view.Surface r0;
        boolean $z0;

        r0 := @this: android.view.Surface;

        $z0 = r0.<android.view.Surface: boolean mIsAutoRefreshEnabled>;

        return $z0;
    }

    public boolean isConsumerRunningBehind()
    {
        android.view.Surface r0;
        java.lang.Object r1;
        boolean z0;
        long $l0;
        java.lang.Throwable $r3;

        r0 := @this: android.view.Surface;

        r1 = r0.<android.view.Surface: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.view.Surface: void checkNotReleasedLocked()>();

        $l0 = r0.<android.view.Surface: long mNativeObject>;

        z0 = staticinvoke <android.view.Surface: boolean nativeIsConsumerRunningBehind(long)>($l0);

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isSharedBufferModeEnabled()
    {
        android.view.Surface r0;
        boolean $z0;

        r0 := @this: android.view.Surface;

        $z0 = r0.<android.view.Surface: boolean mIsSharedBufferModeEnabled>;

        return $z0;
    }

    public boolean isSingleBuffered()
    {
        android.view.Surface r0;
        boolean $z0;

        r0 := @this: android.view.Surface;

        $z0 = r0.<android.view.Surface: boolean mIsSingleBuffered>;

        return $z0;
    }

    public boolean isValid()
    {
        android.view.Surface r0;
        java.lang.Object r1;
        boolean z0;
        long $l0, $l2;
        byte $b1;
        java.lang.Throwable $r3;

        r0 := @this: android.view.Surface;

        r1 = r0.<android.view.Surface: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $l0 = r0.<android.view.Surface: long mNativeObject>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label3;

        exitmonitor r1;

     label2:
        return 0;

     label3:
        $l2 = r0.<android.view.Surface: long mNativeObject>;

        z0 = staticinvoke <android.view.Surface: boolean nativeIsValid(long)>($l2);

        exitmonitor r1;

     label4:
        return z0;

     label5:
        $r3 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public android.graphics.Canvas lockCanvas(android.graphics.Rect) throws android.view.Surface$OutOfResourcesException, java.lang.IllegalArgumentException
    {
        android.view.Surface r0;
        java.lang.Object r1;
        long $l0, $l2, $l3;
        byte $b1;
        android.graphics.Canvas $r2, r5;
        java.lang.Throwable $r3;
        android.graphics.Rect r4;
        java.lang.IllegalArgumentException r6;

        r0 := @this: android.view.Surface;

        r4 := @parameter0: android.graphics.Rect;

        r1 = r0.<android.view.Surface: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.view.Surface: void checkNotReleasedLocked()>();

        $l0 = r0.<android.view.Surface: long mLockedObject>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label3;

        $l2 = r0.<android.view.Surface: long mNativeObject>;

        $r2 = r0.<android.view.Surface: android.graphics.Canvas mCanvas>;

        $l3 = staticinvoke <android.view.Surface: long nativeLockCanvas(long,android.graphics.Canvas,android.graphics.Rect)>($l2, $r2, r4);

        r0.<android.view.Surface: long mLockedObject> = $l3;

        r5 = r0.<android.view.Surface: android.graphics.Canvas mCanvas>;

        exitmonitor r1;

     label2:
        return r5;

     label3:
        r6 = new java.lang.IllegalArgumentException;

        specialinvoke r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Surface was already locked");

        throw r6;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public android.graphics.Canvas lockHardwareCanvas()
    {
        android.view.Surface r0;
        java.lang.Object r1;
        android.view.Surface$HwuiContext $r2, $r3, r5;
        long $l0, $l2;
        int $i1, $i3;
        java.lang.Throwable $r4;
        android.graphics.Canvas r6;

        r0 := @this: android.view.Surface;

        r1 = r0.<android.view.Surface: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.view.Surface: void checkNotReleasedLocked()>();

        $r2 = r0.<android.view.Surface: android.view.Surface$HwuiContext mHwuiContext>;

        if $r2 != null goto label2;

        r5 = new android.view.Surface$HwuiContext;

        specialinvoke r5.<android.view.Surface$HwuiContext: void <init>(android.view.Surface,boolean)>(r0, 0);

        r0.<android.view.Surface: android.view.Surface$HwuiContext mHwuiContext> = r5;

     label2:
        $r3 = r0.<android.view.Surface: android.view.Surface$HwuiContext mHwuiContext>;

        $l0 = r0.<android.view.Surface: long mNativeObject>;

        $i1 = staticinvoke <android.view.Surface: int nativeGetWidth(long)>($l0);

        $l2 = r0.<android.view.Surface: long mNativeObject>;

        $i3 = staticinvoke <android.view.Surface: int nativeGetHeight(long)>($l2);

        r6 = virtualinvoke $r3.<android.view.Surface$HwuiContext: android.graphics.Canvas lockCanvas(int,int)>($i1, $i3);

        exitmonitor r1;

     label3:
        return r6;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public android.graphics.Canvas lockHardwareWideColorGamutCanvas()
    {
        android.view.Surface r0;
        java.lang.Object r1;
        android.view.Surface$HwuiContext $r2, $r3, $r4, $r5, $r7, r8;
        long $l0, $l2;
        int $i1, $i3;
        boolean $z0;
        java.lang.Throwable $r6;
        android.graphics.Canvas r9;

        r0 := @this: android.view.Surface;

        r1 = r0.<android.view.Surface: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.view.Surface: void checkNotReleasedLocked()>();

        $r2 = r0.<android.view.Surface: android.view.Surface$HwuiContext mHwuiContext>;

        if $r2 == null goto label2;

        $r4 = r0.<android.view.Surface: android.view.Surface$HwuiContext mHwuiContext>;

        $z0 = virtualinvoke $r4.<android.view.Surface$HwuiContext: boolean isWideColorGamut()>();

        if $z0 != 0 goto label2;

        $r5 = r0.<android.view.Surface: android.view.Surface$HwuiContext mHwuiContext>;

        virtualinvoke $r5.<android.view.Surface$HwuiContext: void destroy()>();

        r0.<android.view.Surface: android.view.Surface$HwuiContext mHwuiContext> = null;

     label2:
        $r7 = r0.<android.view.Surface: android.view.Surface$HwuiContext mHwuiContext>;

        if $r7 != null goto label3;

        r8 = new android.view.Surface$HwuiContext;

        specialinvoke r8.<android.view.Surface$HwuiContext: void <init>(android.view.Surface,boolean)>(r0, 1);

        r0.<android.view.Surface: android.view.Surface$HwuiContext mHwuiContext> = r8;

     label3:
        $r3 = r0.<android.view.Surface: android.view.Surface$HwuiContext mHwuiContext>;

        $l0 = r0.<android.view.Surface: long mNativeObject>;

        $i1 = staticinvoke <android.view.Surface: int nativeGetWidth(long)>($l0);

        $l2 = r0.<android.view.Surface: long mNativeObject>;

        $i3 = staticinvoke <android.view.Surface: int nativeGetHeight(long)>($l2);

        r9 = virtualinvoke $r3.<android.view.Surface$HwuiContext: android.graphics.Canvas lockCanvas(int,int)>($i1, $i3);

        exitmonitor r1;

     label4:
        return r9;

     label5:
        $r6 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void readFromParcel(android.os.Parcel)
    {
        android.view.Surface r0;
        java.lang.Object r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.String $r3;
        int $i0;
        long $l1, $l2;
        java.lang.Throwable $r4;
        android.os.Parcel r5;
        boolean z0;

        r0 := @this: android.view.Surface;

        r5 := @parameter0: android.os.Parcel;

        if r5 == null goto label9;

        r1 = r0.<android.view.Surface: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = virtualinvoke r5.<android.os.Parcel: java.lang.String readString()>();

        r0.<android.view.Surface: java.lang.String mName> = $r3;

        $i0 = virtualinvoke r5.<android.os.Parcel: int readInt()>();

        if $i0 == 0 goto label3;

     label2:
        z0 = 1;

        goto label4;

     label3:
        z0 = 0;

     label4:
        r0.<android.view.Surface: boolean mIsSingleBuffered> = z0;

        $l1 = r0.<android.view.Surface: long mNativeObject>;

        $l2 = staticinvoke <android.view.Surface: long nativeReadFromParcel(long,android.os.Parcel)>($l1, r5);

        specialinvoke r0.<android.view.Surface: void setNativeObjectLocked(long)>($l2);

        exitmonitor r1;

     label5:
        return;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

     label9:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("source must not be null");

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void release()
    {
        android.view.Surface r0;
        java.lang.Object r1;
        android.view.Surface$HwuiContext $r3, $r4;
        long $l0, $l2;
        byte $b1;
        java.lang.Throwable $r5;

        r0 := @this: android.view.Surface;

        r1 = r0.<android.view.Surface: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<android.view.Surface: android.view.Surface$HwuiContext mHwuiContext>;

        if $r3 == null goto label2;

        $r4 = r0.<android.view.Surface: android.view.Surface$HwuiContext mHwuiContext>;

        virtualinvoke $r4.<android.view.Surface$HwuiContext: void destroy()>();

        r0.<android.view.Surface: android.view.Surface$HwuiContext mHwuiContext> = null;

     label2:
        $l0 = r0.<android.view.Surface: long mNativeObject>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label3;

        $l2 = r0.<android.view.Surface: long mNativeObject>;

        staticinvoke <android.view.Surface: void nativeRelease(long)>($l2);

        specialinvoke r0.<android.view.Surface: void setNativeObjectLocked(long)>(0L);

     label3:
        exitmonitor r1;

     label4:
        return;

     label5:
        $r5 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void setAutoRefreshEnabled(boolean)
    {
        android.view.Surface r0;
        boolean z0, $z1;
        long $l0;
        int $i1;
        java.lang.RuntimeException $r1;

        r0 := @this: android.view.Surface;

        z0 := @parameter0: boolean;

        $z1 = r0.<android.view.Surface: boolean mIsAutoRefreshEnabled>;

        if $z1 == z0 goto label2;

        $l0 = r0.<android.view.Surface: long mNativeObject>;

        $i1 = staticinvoke <android.view.Surface: int nativeSetAutoRefreshEnabled(long,boolean)>($l0, z0);

        if $i1 != 0 goto label1;

        r0.<android.view.Surface: boolean mIsAutoRefreshEnabled> = z0;

        goto label2;

     label1:
        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Failed to set auto refresh on Surface (bad object?)");

        throw $r1;

     label2:
        return;
    }

    void setCompatibilityTranslator(android.content.res.CompatibilityInfo$Translator)
    {
        android.view.Surface r0;
        float f0;
        android.graphics.Matrix $r1;
        android.content.res.CompatibilityInfo$Translator r2;

        r0 := @this: android.view.Surface;

        r2 := @parameter0: android.content.res.CompatibilityInfo$Translator;

        if r2 == null goto label1;

        f0 = r2.<android.content.res.CompatibilityInfo$Translator: float applicationScale>;

        $r1 = new android.graphics.Matrix;

        specialinvoke $r1.<android.graphics.Matrix: void <init>()>();

        r0.<android.view.Surface: android.graphics.Matrix mCompatibleMatrix> = $r1;

        virtualinvoke $r1.<android.graphics.Matrix: void setScale(float,float)>(f0, f0);

     label1:
        return;
    }

    public void setFrameRate(float, int)
    {
        android.view.Surface r0;
        float f0;
        java.lang.Object r1;
        long $l0;
        int $i1, $i2, i3, i4;
        java.lang.Throwable $r2;
        java.lang.RuntimeException r3;
        java.lang.IllegalArgumentException r4;

        r0 := @this: android.view.Surface;

        f0 := @parameter0: float;

        i3 := @parameter1: int;

        r1 = r0.<android.view.Surface: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.view.Surface: void checkNotReleasedLocked()>();

        $l0 = r0.<android.view.Surface: long mNativeObject>;

        i4 = staticinvoke <android.view.Surface: int nativeSetFrameRate(long,float,int)>($l0, f0, i3);

        $i1 = <android.system.OsConstants: int EINVAL>;

        $i2 = neg $i1;

        if i4 == $i2 goto label6;

     label2:
        if i4 != 0 goto label5;

     label3:
        exitmonitor r1;

     label4:
        return;

     label5:
        r3 = new java.lang.RuntimeException;

        specialinvoke r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Failed to set frame rate on Surface");

        throw r3;

     label6:
        r4 = new java.lang.IllegalArgumentException;

        specialinvoke r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid argument to Surface.setFrameRate()");

        throw r4;

     label7:
        $r2 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label6 to label7 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    void setScalingMode(int)
    {
        android.view.Surface r0;
        int i0, $i2;
        java.lang.Object r1;
        java.lang.StringBuilder r2;
        long $l1;
        java.lang.String $r5;
        java.lang.Throwable $r6;
        java.lang.IllegalArgumentException r7;

        r0 := @this: android.view.Surface;

        i0 := @parameter0: int;

        r1 = r0.<android.view.Surface: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.view.Surface: void checkNotReleasedLocked()>();

        $l1 = r0.<android.view.Surface: long mNativeObject>;

        $i2 = staticinvoke <android.view.Surface: int nativeSetScalingMode(long,int)>($l1, i0);

        if $i2 != 0 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        r7 = new java.lang.IllegalArgumentException;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid scaling mode: ");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw r7;

     label4:
        $r6 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void setSharedBufferModeEnabled(boolean)
    {
        android.view.Surface r0;
        boolean z0, $z1;
        long $l0;
        int $i1;
        java.lang.RuntimeException $r1;

        r0 := @this: android.view.Surface;

        z0 := @parameter0: boolean;

        $z1 = r0.<android.view.Surface: boolean mIsSharedBufferModeEnabled>;

        if $z1 == z0 goto label2;

        $l0 = r0.<android.view.Surface: long mNativeObject>;

        $i1 = staticinvoke <android.view.Surface: int nativeSetSharedBufferModeEnabled(long,boolean)>($l0, z0);

        if $i1 != 0 goto label1;

        r0.<android.view.Surface: boolean mIsSharedBufferModeEnabled> = z0;

        goto label2;

     label1:
        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Failed to set shared buffer mode on Surface (bad object?)");

        throw $r1;

     label2:
        return;
    }

    public java.lang.String toString()
    {
        android.view.Surface r0;
        java.lang.Object r1;
        java.lang.String $r3, $r6, r10;
        int $i0;
        java.lang.Throwable $r8;
        java.lang.StringBuilder r9;

        r0 := @this: android.view.Surface;

        r1 = r0.<android.view.Surface: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r9 = new java.lang.StringBuilder;

        specialinvoke r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Surface(name=");

        $r3 = r0.<android.view.Surface: java.lang.String mName>;

        virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")/@0x");

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        r10 = virtualinvoke r9.<java.lang.StringBuilder: java.lang.String toString()>();

        exitmonitor r1;

     label2:
        return r10;

     label3:
        $r8 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void transferFrom(android.view.Surface)
    {
        android.view.Surface r0, r4;
        long l0, $l1, $l3;
        java.lang.IllegalArgumentException $r1;
        byte $b2;
        java.lang.Throwable $r2, $r3;
        java.lang.Object r5, r6;

        r0 := @this: android.view.Surface;

        r4 := @parameter0: android.view.Surface;

        if r4 == null goto label13;

        if r4 == r0 goto label12;

        r5 = r4.<android.view.Surface: java.lang.Object mLock>;

        entermonitor r5;

     label01:
        l0 = r4.<android.view.Surface: long mNativeObject>;

        specialinvoke r4.<android.view.Surface: void setNativeObjectLocked(long)>(0L);

        exitmonitor r5;

     label02:
        r6 = r0.<android.view.Surface: java.lang.Object mLock>;

        entermonitor r6;

     label03:
        $l1 = r0.<android.view.Surface: long mNativeObject>;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label04;

        $l3 = r0.<android.view.Surface: long mNativeObject>;

        staticinvoke <android.view.Surface: void nativeRelease(long)>($l3);

     label04:
        specialinvoke r0.<android.view.Surface: void setNativeObjectLocked(long)>(l0);

        exitmonitor r6;

     label05:
        goto label12;

     label06:
        $r2 := @caughtexception;

     label07:
        exitmonitor r6;

     label08:
        throw $r2;

     label09:
        $r3 := @caughtexception;

     label10:
        exitmonitor r5;

     label11:
        throw $r3;

     label12:
        return;

     label13:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("other must not be null");

        throw $r1;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void unlockCanvas(android.graphics.Canvas)
    {
        android.view.Surface r0;
        android.graphics.Canvas r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: android.view.Surface;

        r1 := @parameter0: android.graphics.Canvas;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void unlockCanvasAndPost(android.graphics.Canvas)
    {
        android.view.Surface r0;
        java.lang.Object r1;
        android.view.Surface$HwuiContext $r2, $r3;
        java.lang.Throwable $r4;
        android.graphics.Canvas r5;

        r0 := @this: android.view.Surface;

        r5 := @parameter0: android.graphics.Canvas;

        r1 = r0.<android.view.Surface: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.view.Surface: void checkNotReleasedLocked()>();

        $r2 = r0.<android.view.Surface: android.view.Surface$HwuiContext mHwuiContext>;

        if $r2 == null goto label3;

        $r3 = r0.<android.view.Surface: android.view.Surface$HwuiContext mHwuiContext>;

        virtualinvoke $r3.<android.view.Surface$HwuiContext: void unlockAndPost(android.graphics.Canvas)>(r5);

     label2:
        goto label4;

     label3:
        specialinvoke r0.<android.view.Surface: void unlockSwCanvasAndPost(android.graphics.Canvas)>(r5);

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        android.view.Surface r0;
        int i0, $i2;
        java.lang.Object r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.String $r3;
        boolean $z0;
        long $l1;
        java.lang.Throwable $r4;
        android.os.Parcel r5;
        byte b3;

        r0 := @this: android.view.Surface;

        r5 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        if r5 == null goto label10;

        r1 = r0.<android.view.Surface: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<android.view.Surface: java.lang.String mName>;

        virtualinvoke r5.<android.os.Parcel: void writeString(java.lang.String)>($r3);

        $z0 = r0.<android.view.Surface: boolean mIsSingleBuffered>;

        if $z0 == 0 goto label03;

     label02:
        b3 = 1;

        goto label04;

     label03:
        b3 = 0;

     label04:
        virtualinvoke r5.<android.os.Parcel: void writeInt(int)>(b3);

        $l1 = r0.<android.view.Surface: long mNativeObject>;

        staticinvoke <android.view.Surface: void nativeWriteToParcel(long,android.os.Parcel)>($l1, r5);

        exitmonitor r1;

     label05:
        $i2 = i0 & 1;

        if $i2 == 0 goto label06;

        virtualinvoke r0.<android.view.Surface: void release()>();

     label06:
        return;

     label07:
        $r4 := @caughtexception;

     label08:
        exitmonitor r1;

     label09:
        throw $r4;

     label10:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("dest must not be null");

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }
}
