public class android.view.SurfaceControl$ScreenshotGraphicBuffer extends java.lang.Object
{
    private final android.graphics.ColorSpace mColorSpace;
    private final boolean mContainsSecureLayers;
    private final android.graphics.GraphicBuffer mGraphicBuffer;

    public void <init>(android.graphics.GraphicBuffer, android.graphics.ColorSpace, boolean)
    {
        android.view.SurfaceControl$ScreenshotGraphicBuffer r0;
        android.graphics.GraphicBuffer r1;
        android.graphics.ColorSpace r2;
        boolean z0;

        r0 := @this: android.view.SurfaceControl$ScreenshotGraphicBuffer;

        r1 := @parameter0: android.graphics.GraphicBuffer;

        r2 := @parameter1: android.graphics.ColorSpace;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.view.SurfaceControl$ScreenshotGraphicBuffer: android.graphics.GraphicBuffer mGraphicBuffer> = r1;

        r0.<android.view.SurfaceControl$ScreenshotGraphicBuffer: android.graphics.ColorSpace mColorSpace> = r2;

        r0.<android.view.SurfaceControl$ScreenshotGraphicBuffer: boolean mContainsSecureLayers> = z0;

        return;
    }

    private static android.view.SurfaceControl$ScreenshotGraphicBuffer createFromNative(int, int, int, int, long, int, boolean)
    {
        int i0, i1, i2, i3, i5;
        long l4;
        boolean z0;
        android.view.SurfaceControl$ScreenshotGraphicBuffer $r0;
        android.graphics.GraphicBuffer $r1;
        android.graphics.ColorSpace$Named[] $r2;
        android.graphics.ColorSpace$Named $r3;
        android.graphics.ColorSpace $r4;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        l4 := @parameter4: long;

        i5 := @parameter5: int;

        z0 := @parameter6: boolean;

        $r0 = new android.view.SurfaceControl$ScreenshotGraphicBuffer;

        $r1 = staticinvoke <android.graphics.GraphicBuffer: android.graphics.GraphicBuffer createFromExisting(int,int,int,int,long)>(i0, i1, i2, i3, l4);

        $r2 = staticinvoke <android.graphics.ColorSpace$Named: android.graphics.ColorSpace$Named[] values()>();

        $r3 = $r2[i5];

        $r4 = staticinvoke <android.graphics.ColorSpace: android.graphics.ColorSpace get(android.graphics.ColorSpace$Named)>($r3);

        specialinvoke $r0.<android.view.SurfaceControl$ScreenshotGraphicBuffer: void <init>(android.graphics.GraphicBuffer,android.graphics.ColorSpace,boolean)>($r1, $r4, z0);

        return $r0;
    }

    public boolean containsSecureLayers()
    {
        android.view.SurfaceControl$ScreenshotGraphicBuffer r0;
        boolean $z0;

        r0 := @this: android.view.SurfaceControl$ScreenshotGraphicBuffer;

        $z0 = r0.<android.view.SurfaceControl$ScreenshotGraphicBuffer: boolean mContainsSecureLayers>;

        return $z0;
    }

    public android.graphics.ColorSpace getColorSpace()
    {
        android.view.SurfaceControl$ScreenshotGraphicBuffer r0;
        android.graphics.ColorSpace $r1;

        r0 := @this: android.view.SurfaceControl$ScreenshotGraphicBuffer;

        $r1 = r0.<android.view.SurfaceControl$ScreenshotGraphicBuffer: android.graphics.ColorSpace mColorSpace>;

        return $r1;
    }

    public android.graphics.GraphicBuffer getGraphicBuffer()
    {
        android.view.SurfaceControl$ScreenshotGraphicBuffer r0;
        android.graphics.GraphicBuffer $r1;

        r0 := @this: android.view.SurfaceControl$ScreenshotGraphicBuffer;

        $r1 = r0.<android.view.SurfaceControl$ScreenshotGraphicBuffer: android.graphics.GraphicBuffer mGraphicBuffer>;

        return $r1;
    }
}
