public final class android.view.SurfaceControl extends java.lang.Object implements android.os.Parcelable
{
    public static final android.os.Parcelable$Creator CREATOR;
    public static final int CURSOR_WINDOW;
    public static final int FX_SURFACE_BLAST;
    public static final int FX_SURFACE_CONTAINER;
    public static final int FX_SURFACE_EFFECT;
    public static final int FX_SURFACE_MASK;
    public static final int FX_SURFACE_NORMAL;
    public static final int HIDDEN;
    private static final int INTERNAL_DATASPACE_DISPLAY_P3;
    private static final int INTERNAL_DATASPACE_SCRGB;
    private static final int INTERNAL_DATASPACE_SRGB;
    public static final int METADATA_ACCESSIBILITY_ID;
    public static final int METADATA_MOUSE_CURSOR;
    public static final int METADATA_OWNER_UID;
    public static final int METADATA_TASK_ID;
    public static final int METADATA_WINDOW_TYPE;
    public static final int NON_PREMULTIPLIED;
    public static final int NO_COLOR_FILL;
    public static final int OPAQUE;
    public static final int POWER_MODE_DOZE;
    public static final int POWER_MODE_DOZE_SUSPEND;
    public static final int POWER_MODE_NORMAL;
    public static final int POWER_MODE_OFF;
    public static final int POWER_MODE_ON_SUSPEND;
    public static final int PROTECTED_APP;
    public static final int SECURE;
    private static final int SURFACE_HIDDEN;
    private static final int SURFACE_OPAQUE;
    private static final java.lang.String TAG;
    public static final int WINDOW_TYPE_DONT_SCREENSHOT;
    static android.view.SurfaceControl$Transaction sGlobalTransaction;
    static long sTransactionNestCount;
    private final dalvik.system.CloseGuard mCloseGuard;
    private int mHeight;
    private java.lang.ref.WeakReference mLocalOwnerView;
    private final java.lang.Object mLock;
    private java.lang.String mName;
    private long mNativeHandle;
    public long mNativeObject;
    private java.util.ArrayList mReparentListeners;
    private int mWidth;

    static void <clinit>()
    {
        android.view.SurfaceControl$1 $r0;

        <android.view.SurfaceControl: int WINDOW_TYPE_DONT_SCREENSHOT> = 441731;

        <android.view.SurfaceControl: java.lang.String TAG> = "SurfaceControl";

        <android.view.SurfaceControl: int SURFACE_OPAQUE> = 2;

        <android.view.SurfaceControl: int SURFACE_HIDDEN> = 1;

        <android.view.SurfaceControl: int SECURE> = 128;

        <android.view.SurfaceControl: int PROTECTED_APP> = 2048;

        <android.view.SurfaceControl: int POWER_MODE_ON_SUSPEND> = 4;

        <android.view.SurfaceControl: int POWER_MODE_OFF> = 0;

        <android.view.SurfaceControl: int POWER_MODE_NORMAL> = 2;

        <android.view.SurfaceControl: int POWER_MODE_DOZE_SUSPEND> = 3;

        <android.view.SurfaceControl: int POWER_MODE_DOZE> = 1;

        <android.view.SurfaceControl: int OPAQUE> = 1024;

        <android.view.SurfaceControl: int NO_COLOR_FILL> = 16384;

        <android.view.SurfaceControl: int NON_PREMULTIPLIED> = 256;

        <android.view.SurfaceControl: int METADATA_WINDOW_TYPE> = 2;

        <android.view.SurfaceControl: int METADATA_TASK_ID> = 3;

        <android.view.SurfaceControl: int METADATA_OWNER_UID> = 1;

        <android.view.SurfaceControl: int METADATA_MOUSE_CURSOR> = 4;

        <android.view.SurfaceControl: int METADATA_ACCESSIBILITY_ID> = 5;

        <android.view.SurfaceControl: int INTERNAL_DATASPACE_SRGB> = 142671872;

        <android.view.SurfaceControl: int INTERNAL_DATASPACE_SCRGB> = 411107328;

        <android.view.SurfaceControl: int INTERNAL_DATASPACE_DISPLAY_P3> = 143261696;

        <android.view.SurfaceControl: int HIDDEN> = 4;

        <android.view.SurfaceControl: int FX_SURFACE_NORMAL> = 0;

        <android.view.SurfaceControl: int FX_SURFACE_MASK> = 983040;

        <android.view.SurfaceControl: int FX_SURFACE_EFFECT> = 131072;

        <android.view.SurfaceControl: int FX_SURFACE_CONTAINER> = 524288;

        <android.view.SurfaceControl: int FX_SURFACE_BLAST> = 262144;

        <android.view.SurfaceControl: int CURSOR_WINDOW> = 8192;

        <android.view.SurfaceControl: long sTransactionNestCount> = 0L;

        $r0 = new android.view.SurfaceControl$1;

        specialinvoke $r0.<android.view.SurfaceControl$1: void <init>()>();

        <android.view.SurfaceControl: android.os.Parcelable$Creator CREATOR> = $r0;

        return;
    }

    public void <init>()
    {
        android.view.SurfaceControl r0;
        dalvik.system.CloseGuard $r1;
        java.lang.Object $r2;

        r0 := @this: android.view.SurfaceControl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.view.SurfaceControl: dalvik.system.CloseGuard mCloseGuard> = $r1;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<android.view.SurfaceControl: java.lang.Object mLock> = $r2;

        return;
    }

    private void <init>(android.os.Parcel)
    {
        android.view.SurfaceControl r0;
        android.os.Parcel r1;
        dalvik.system.CloseGuard $r2;
        java.lang.Object $r3;

        r0 := @this: android.view.SurfaceControl;

        r1 := @parameter0: android.os.Parcel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.view.SurfaceControl: dalvik.system.CloseGuard mCloseGuard> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<android.view.SurfaceControl: java.lang.Object mLock> = $r3;

        virtualinvoke r0.<android.view.SurfaceControl: void readFromParcel(android.os.Parcel)>(r1);

        return;
    }

    void <init>(android.os.Parcel, android.view.SurfaceControl$1)
    {
        android.view.SurfaceControl r0;
        android.os.Parcel r1;
        android.view.SurfaceControl$1 r2;

        r0 := @this: android.view.SurfaceControl;

        r1 := @parameter0: android.os.Parcel;

        r2 := @parameter1: android.view.SurfaceControl$1;

        specialinvoke r0.<android.view.SurfaceControl: void <init>(android.os.Parcel)>(r1);

        return;
    }

    public void <init>(android.view.SurfaceControl, java.lang.String)
    {
        android.view.SurfaceControl r0, r1;
        java.lang.String r2;
        dalvik.system.CloseGuard $r3;
        java.lang.Object $r4;

        r0 := @this: android.view.SurfaceControl;

        r1 := @parameter0: android.view.SurfaceControl;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.view.SurfaceControl: dalvik.system.CloseGuard mCloseGuard> = $r3;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<android.view.SurfaceControl: java.lang.Object mLock> = $r4;

        virtualinvoke r0.<android.view.SurfaceControl: void copyFrom(android.view.SurfaceControl,java.lang.String)>(r1, r2);

        return;
    }

    private void <init>(android.view.SurfaceSession, java.lang.String, int, int, int, int, android.view.SurfaceControl, android.util.SparseIntArray, java.lang.ref.WeakReference, java.lang.String) throws android.view.Surface$OutOfResourcesException, java.lang.IllegalArgumentException
    {
        android.view.SurfaceControl r0, r17;
        java.lang.String r1, r3;
        int i0, i1, i2, i3, $i7, $i8, $i9, $i10, $i11, i12;
        android.util.SparseIntArray r2;
        dalvik.system.CloseGuard $r4, $r8;
        java.lang.Object $r5;
        java.lang.IllegalArgumentException $r6;
        long $l4, $l6, l13, l14;
        byte $b5;
        android.view.Surface$OutOfResourcesException $r7;
        java.nio.ByteBuffer $r9, $r11, $r12;
        java.nio.ByteOrder $r10;
        byte[] $r13;
        java.lang.Throwable $r14, $r15, r20;
        android.view.SurfaceSession r16;
        java.lang.ref.WeakReference r18;
        android.os.Parcel r19;

        r0 := @this: android.view.SurfaceControl;

        r16 := @parameter0: android.view.SurfaceSession;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        r17 := @parameter6: android.view.SurfaceControl;

        r2 := @parameter7: android.util.SparseIntArray;

        r18 := @parameter8: java.lang.ref.WeakReference;

        r3 := @parameter9: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.view.SurfaceControl: dalvik.system.CloseGuard mCloseGuard> = $r4;

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<android.view.SurfaceControl: java.lang.Object mLock> = $r5;

        if r1 == null goto label17;

        r0.<android.view.SurfaceControl: java.lang.String mName> = r1;

        r0.<android.view.SurfaceControl: int mWidth> = i0;

        r0.<android.view.SurfaceControl: int mHeight> = i1;

        r0.<android.view.SurfaceControl: java.lang.ref.WeakReference mLocalOwnerView> = r18;

        r19 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        if r2 == null goto label08;

     label01:
        $i7 = virtualinvoke r2.<android.util.SparseIntArray: int size()>();

        if $i7 <= 0 goto label08;

        $i8 = virtualinvoke r2.<android.util.SparseIntArray: int size()>();

        virtualinvoke r19.<android.os.Parcel: void writeInt(int)>($i8);

     label02:
        i12 = 0;

     label03:
        $i9 = virtualinvoke r2.<android.util.SparseIntArray: int size()>();

        if i12 >= $i9 goto label05;

        $i10 = virtualinvoke r2.<android.util.SparseIntArray: int keyAt(int)>(i12);

        virtualinvoke r19.<android.os.Parcel: void writeInt(int)>($i10);

        $r9 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(4);

        $r10 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        $r11 = virtualinvoke $r9.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r10);

        $i11 = virtualinvoke r2.<android.util.SparseIntArray: int valueAt(int)>(i12);

        $r12 = virtualinvoke $r11.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i11);

        $r13 = virtualinvoke $r12.<java.nio.ByteBuffer: byte[] array()>();

        virtualinvoke r19.<android.os.Parcel: void writeByteArray(byte[])>($r13);

     label04:
        i12 = i12 + 1;

        goto label03;

     label05:
        virtualinvoke r19.<android.os.Parcel: void setDataPosition(int)>(0);

     label06:
        goto label08;

     label07:
        $r14 := @caughtexception;

        r20 = $r14;

        goto label16;

     label08:
        if r17 == null goto label11;

     label09:
        l13 = r17.<android.view.SurfaceControl: long mNativeObject>;

     label10:
        goto label12;

     label11:
        l13 = 0L;

     label12:
        $l4 = staticinvoke <android.view.SurfaceControl: long nativeCreate(android.view.SurfaceSession,java.lang.String,int,int,int,int,long,android.os.Parcel)>(r16, r1, i0, i1, i2, i3, l13, r19);

        r0.<android.view.SurfaceControl: long mNativeObject> = $l4;

     label13:
        virtualinvoke r19.<android.os.Parcel: void recycle()>();

        l14 = r0.<android.view.SurfaceControl: long mNativeObject>;

        $b5 = l14 cmp 0L;

        if $b5 == 0 goto label14;

        $l6 = staticinvoke <android.view.SurfaceControl: long nativeGetHandle(long)>(l14);

        r0.<android.view.SurfaceControl: long mNativeHandle> = $l6;

        $r8 = r0.<android.view.SurfaceControl: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r8.<dalvik.system.CloseGuard: void openWithCallSite(java.lang.String,java.lang.String)>("release", r3);

        return;

     label14:
        $r7 = new android.view.Surface$OutOfResourcesException;

        specialinvoke $r7.<android.view.Surface$OutOfResourcesException: void <init>(java.lang.String)>("Couldn\'t allocate SurfaceControl native object");

        throw $r7;

     label15:
        $r15 := @caughtexception;

        r20 = $r15;

     label16:
        virtualinvoke r19.<android.os.Parcel: void recycle()>();

        throw r20;

     label17:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("name must not be null");

        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label09 to label10 with label07;
        catch java.lang.Throwable from label12 to label13 with label15;
    }

    void <init>(android.view.SurfaceSession, java.lang.String, int, int, int, int, android.view.SurfaceControl, android.util.SparseIntArray, java.lang.ref.WeakReference, java.lang.String, android.view.SurfaceControl$1) throws android.view.Surface$OutOfResourcesException, java.lang.IllegalArgumentException
    {
        android.view.SurfaceControl r0, r3;
        android.view.SurfaceSession r1;
        java.lang.String r2, r6;
        int i0, i1, i2, i3;
        android.util.SparseIntArray r4;
        java.lang.ref.WeakReference r5;
        android.view.SurfaceControl$1 r7;

        r0 := @this: android.view.SurfaceControl;

        r1 := @parameter0: android.view.SurfaceSession;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        r3 := @parameter6: android.view.SurfaceControl;

        r4 := @parameter7: android.util.SparseIntArray;

        r5 := @parameter8: java.lang.ref.WeakReference;

        r6 := @parameter9: java.lang.String;

        r7 := @parameter10: android.view.SurfaceControl$1;

        specialinvoke r0.<android.view.SurfaceControl: void <init>(android.view.SurfaceSession,java.lang.String,int,int,int,int,android.view.SurfaceControl,android.util.SparseIntArray,java.lang.ref.WeakReference,java.lang.String)>(r1, r2, i0, i1, i2, i3, r3, r4, r5, r6);

        return;
    }

    static void access$1000(long, long, int)
    {
        long l0, l1;
        int i2;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        i2 := @parameter2: int;

        staticinvoke <android.view.SurfaceControl: void nativeSetFrameRateSelectionPriority(long,long,int)>(l0, l1, i2);

        return;
    }

    static void access$1100(long, long, int, int)
    {
        long l0, l1;
        int i2, i3;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        staticinvoke <android.view.SurfaceControl: void nativeSetFlags(long,long,int,int)>(l0, l1, i2, i3);

        return;
    }

    static void access$1200(long, long, float, float)
    {
        long l0, l1;
        float f0, f1;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        staticinvoke <android.view.SurfaceControl: void nativeSetPosition(long,long,float,float)>(l0, l1, f0, f1);

        return;
    }

    static void access$1300(long, long, int, int)
    {
        long l0, l1;
        int i2, i3;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        staticinvoke <android.view.SurfaceControl: void nativeSetSize(long,long,int,int)>(l0, l1, i2, i3);

        return;
    }

    static void access$1400(long, long, int)
    {
        long l0, l1;
        int i2;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        i2 := @parameter2: int;

        staticinvoke <android.view.SurfaceControl: void nativeSetFixedTransformHint(long,long,int)>(l0, l1, i2);

        return;
    }

    static void access$1500(long, long, int)
    {
        long l0, l1;
        int i2;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        i2 := @parameter2: int;

        staticinvoke <android.view.SurfaceControl: void nativeSetLayer(long,long,int)>(l0, l1, i2);

        return;
    }

    static void access$1600(long, long, long, int)
    {
        long l0, l1, l2;
        int i3;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        i3 := @parameter3: int;

        staticinvoke <android.view.SurfaceControl: void nativeSetRelativeLayer(long,long,long,int)>(l0, l1, l2, i3);

        return;
    }

    static void access$1700(long, long, android.graphics.Region)
    {
        long l0, l1;
        android.graphics.Region r0;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r0 := @parameter2: android.graphics.Region;

        staticinvoke <android.view.SurfaceControl: void nativeSetTransparentRegionHint(long,long,android.graphics.Region)>(l0, l1, r0);

        return;
    }

    static void access$1800(long, long, float)
    {
        long l0, l1;
        float f0;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        f0 := @parameter2: float;

        staticinvoke <android.view.SurfaceControl: void nativeSetAlpha(long,long,float)>(l0, l1, f0);

        return;
    }

    static void access$1900(long, long, android.view.InputWindowHandle)
    {
        long l0, l1;
        android.view.InputWindowHandle r0;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r0 := @parameter2: android.view.InputWindowHandle;

        staticinvoke <android.view.SurfaceControl: void nativeSetInputWindowInfo(long,long,android.view.InputWindowHandle)>(l0, l1, r0);

        return;
    }

    static long access$200()
    {
        long $l0;

        $l0 = staticinvoke <android.view.SurfaceControl: long nativeGetNativeTransactionFinalizer()>();

        return $l0;
    }

    static void access$2000(long)
    {
        long l0;

        l0 := @parameter0: long;

        staticinvoke <android.view.SurfaceControl: void nativeSyncInputWindows(long)>(l0);

        return;
    }

    static void access$2100(long, long, android.graphics.Rect, android.graphics.Rect, long)
    {
        long l0, l1, l2;
        android.graphics.Rect r0, r1;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r0 := @parameter2: android.graphics.Rect;

        r1 := @parameter3: android.graphics.Rect;

        l2 := @parameter4: long;

        staticinvoke <android.view.SurfaceControl: void nativeSetGeometry(long,long,android.graphics.Rect,android.graphics.Rect,long)>(l0, l1, r0, r1, l2);

        return;
    }

    static void access$2200(long, long, float, float, float, float)
    {
        long l0, l1;
        float f0, f1, f2, f3;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        f2 := @parameter4: float;

        f3 := @parameter5: float;

        staticinvoke <android.view.SurfaceControl: void nativeSetMatrix(long,long,float,float,float,float)>(l0, l1, f0, f1, f2, f3);

        return;
    }

    static void access$2300(long, long, float[], float[])
    {
        long l0, l1;
        float[] r0, r1;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r0 := @parameter2: float[];

        r1 := @parameter3: float[];

        staticinvoke <android.view.SurfaceControl: void nativeSetColorTransform(long,long,float[],float[])>(l0, l1, r0, r1);

        return;
    }

    static void access$2400(long, long, boolean)
    {
        long l0, l1;
        boolean z0;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        z0 := @parameter2: boolean;

        staticinvoke <android.view.SurfaceControl: void nativeSetColorSpaceAgnostic(long,long,boolean)>(l0, l1, z0);

        return;
    }

    static void access$2500(long, long, int, int, int, int)
    {
        long l0, l1;
        int i2, i3, i4, i5;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        staticinvoke <android.view.SurfaceControl: void nativeSetWindowCrop(long,long,int,int,int,int)>(l0, l1, i2, i3, i4, i5);

        return;
    }

    static void access$2600(long, long, float)
    {
        long l0, l1;
        float f0;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        f0 := @parameter2: float;

        staticinvoke <android.view.SurfaceControl: void nativeSetCornerRadius(long,long,float)>(l0, l1, f0);

        return;
    }

    static void access$2700(long, long, int)
    {
        long l0, l1;
        int i2;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        i2 := @parameter2: int;

        staticinvoke <android.view.SurfaceControl: void nativeSetBackgroundBlurRadius(long,long,int)>(l0, l1, i2);

        return;
    }

    static void access$2800(long, long, int)
    {
        long l0, l1;
        int i2;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        i2 := @parameter2: int;

        staticinvoke <android.view.SurfaceControl: void nativeSetLayerStack(long,long,int)>(l0, l1, i2);

        return;
    }

    static void access$2900(long, long, long, long)
    {
        long l0, l1, l2, l3;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        l3 := @parameter3: long;

        staticinvoke <android.view.SurfaceControl: void nativeDeferTransactionUntil(long,long,long,long)>(l0, l1, l2, l3);

        return;
    }

    static void access$300(android.view.SurfaceControl)
    {
        android.view.SurfaceControl r0;

        r0 := @parameter0: android.view.SurfaceControl;

        specialinvoke r0.<android.view.SurfaceControl: void checkNotReleased()>();

        return;
    }

    static void access$3000(long, long, long, long)
    {
        long l0, l1, l2, l3;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        l3 := @parameter3: long;

        staticinvoke <android.view.SurfaceControl: void nativeDeferTransactionUntilSurface(long,long,long,long)>(l0, l1, l2, l3);

        return;
    }

    static void access$3100(long, long, long)
    {
        long l0, l1, l2;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        staticinvoke <android.view.SurfaceControl: void nativeReparentChildren(long,long,long)>(l0, l1, l2);

        return;
    }

    static void access$3200(long, long, long)
    {
        long l0, l1, l2;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        staticinvoke <android.view.SurfaceControl: void nativeReparent(long,long,long)>(l0, l1, l2);

        return;
    }

    static void access$3300(long, long)
    {
        long l0, l1;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        staticinvoke <android.view.SurfaceControl: void nativeSeverChildren(long,long)>(l0, l1);

        return;
    }

    static void access$3400(long, long, int)
    {
        long l0, l1;
        int i2;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        i2 := @parameter2: int;

        staticinvoke <android.view.SurfaceControl: void nativeSetOverrideScalingMode(long,long,int)>(l0, l1, i2);

        return;
    }

    static void access$3500(long, long, float[])
    {
        long l0, l1;
        float[] r0;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r0 := @parameter2: float[];

        staticinvoke <android.view.SurfaceControl: void nativeSetColor(long,long,float[])>(l0, l1, r0);

        return;
    }

    static void access$3600(long, android.os.IBinder, long)
    {
        long l0, l1;
        android.os.IBinder r0;

        l0 := @parameter0: long;

        r0 := @parameter1: android.os.IBinder;

        l1 := @parameter2: long;

        staticinvoke <android.view.SurfaceControl: void nativeSetDisplaySurface(long,android.os.IBinder,long)>(l0, r0, l1);

        return;
    }

    static void access$3700(long, android.os.IBinder, int)
    {
        long l0;
        android.os.IBinder r0;
        int i1;

        l0 := @parameter0: long;

        r0 := @parameter1: android.os.IBinder;

        i1 := @parameter2: int;

        staticinvoke <android.view.SurfaceControl: void nativeSetDisplayLayerStack(long,android.os.IBinder,int)>(l0, r0, i1);

        return;
    }

    static void access$3800(long, android.os.IBinder, int, int, int, int, int, int, int, int, int)
    {
        long l0;
        android.os.IBinder r0;
        int i1, i2, i3, i4, i5, i6, i7, i8, i9;

        l0 := @parameter0: long;

        r0 := @parameter1: android.os.IBinder;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        i5 := @parameter6: int;

        i6 := @parameter7: int;

        i7 := @parameter8: int;

        i8 := @parameter9: int;

        i9 := @parameter10: int;

        staticinvoke <android.view.SurfaceControl: void nativeSetDisplayProjection(long,android.os.IBinder,int,int,int,int,int,int,int,int,int)>(l0, r0, i1, i2, i3, i4, i5, i6, i7, i8, i9);

        return;
    }

    static void access$3900(long, android.os.IBinder, int, int)
    {
        long l0;
        android.os.IBinder r0;
        int i1, i2;

        l0 := @parameter0: long;

        r0 := @parameter1: android.os.IBinder;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        staticinvoke <android.view.SurfaceControl: void nativeSetDisplaySize(long,android.os.IBinder,int,int)>(l0, r0, i1, i2);

        return;
    }

    static long access$400()
    {
        long $l0;

        $l0 = staticinvoke <android.view.SurfaceControl: long nativeCreateTransaction()>();

        return $l0;
    }

    static void access$4000(long)
    {
        long l0;

        l0 := @parameter0: long;

        staticinvoke <android.view.SurfaceControl: void nativeSetAnimationTransaction(long)>(l0);

        return;
    }

    static void access$4100(long)
    {
        long l0;

        l0 := @parameter0: long;

        staticinvoke <android.view.SurfaceControl: void nativeSetEarlyWakeup(long)>(l0);

        return;
    }

    static void access$4200(long)
    {
        long l0;

        l0 := @parameter0: long;

        staticinvoke <android.view.SurfaceControl: void nativeSetEarlyWakeupStart(long)>(l0);

        return;
    }

    static void access$4300(long)
    {
        long l0;

        l0 := @parameter0: long;

        staticinvoke <android.view.SurfaceControl: void nativeSetEarlyWakeupEnd(long)>(l0);

        return;
    }

    static void access$4400(long, long, int, android.os.Parcel)
    {
        long l0, l1;
        int i2;
        android.os.Parcel r0;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        i2 := @parameter2: int;

        r0 := @parameter3: android.os.Parcel;

        staticinvoke <android.view.SurfaceControl: void nativeSetMetadata(long,long,int,android.os.Parcel)>(l0, l1, i2, r0);

        return;
    }

    static void access$4500(long, long, float)
    {
        long l0, l1;
        float f0;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        f0 := @parameter2: float;

        staticinvoke <android.view.SurfaceControl: void nativeSetShadowRadius(long,long,float)>(l0, l1, f0);

        return;
    }

    static void access$4600(long, long, float, int)
    {
        long l0, l1;
        float f0;
        int i2;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        f0 := @parameter2: float;

        i2 := @parameter3: int;

        staticinvoke <android.view.SurfaceControl: void nativeSetFrameRate(long,long,float,int)>(l0, l1, f0, i2);

        return;
    }

    static void access$4700(long, long)
    {
        long l0, l1;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        staticinvoke <android.view.SurfaceControl: void nativeMergeTransaction(long,long)>(l0, l1);

        return;
    }

    static void access$4800(long, android.os.Parcel)
    {
        long l0;
        android.os.Parcel r0;

        l0 := @parameter0: long;

        r0 := @parameter1: android.os.Parcel;

        staticinvoke <android.view.SurfaceControl: void nativeWriteTransactionToParcel(long,android.os.Parcel)>(l0, r0);

        return;
    }

    static long access$4900(android.os.Parcel)
    {
        android.os.Parcel r0;
        long $l0;

        r0 := @parameter0: android.os.Parcel;

        $l0 = staticinvoke <android.view.SurfaceControl: long nativeReadTransactionFromParcel(android.os.Parcel)>(r0);

        return $l0;
    }

    static void access$500(long, boolean)
    {
        long l0;
        boolean z0;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        staticinvoke <android.view.SurfaceControl: void nativeApplyTransaction(long,boolean)>(l0, z0);

        return;
    }

    static java.lang.Object access$600(android.view.SurfaceControl)
    {
        android.view.SurfaceControl r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.view.SurfaceControl;

        $r1 = r0.<android.view.SurfaceControl: java.lang.Object mLock>;

        return $r1;
    }

    static int access$702(android.view.SurfaceControl, int)
    {
        android.view.SurfaceControl r0;
        int i0;

        r0 := @parameter0: android.view.SurfaceControl;

        i0 := @parameter1: int;

        r0.<android.view.SurfaceControl: int mWidth> = i0;

        return i0;
    }

    static int access$802(android.view.SurfaceControl, int)
    {
        android.view.SurfaceControl r0;
        int i0;

        r0 := @parameter0: android.view.SurfaceControl;

        i0 := @parameter1: int;

        r0.<android.view.SurfaceControl: int mHeight> = i0;

        return i0;
    }

    static java.util.ArrayList access$900(android.view.SurfaceControl)
    {
        android.view.SurfaceControl r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: android.view.SurfaceControl;

        $r1 = r0.<android.view.SurfaceControl: java.util.ArrayList mReparentListeners>;

        return $r1;
    }

    public static long acquireFrameRateFlexibilityToken()
    {
        long $l0;

        $l0 = staticinvoke <android.view.SurfaceControl: long nativeAcquireFrameRateFlexibilityToken()>();

        return $l0;
    }

    private void assignNativeObject(long, java.lang.String)
    {
        android.view.SurfaceControl r0;
        long l0, l1, l5;
        java.lang.String r1;
        byte $b2, $b3, $b4;
        dalvik.system.CloseGuard $r2;

        r0 := @this: android.view.SurfaceControl;

        l0 := @parameter0: long;

        r1 := @parameter1: java.lang.String;

        l1 = r0.<android.view.SurfaceControl: long mNativeObject>;

        l5 = 0L;

        $b2 = l1 cmp 0L;

        if $b2 == 0 goto label1;

        virtualinvoke r0.<android.view.SurfaceControl: void release()>();

     label1:
        $b3 = l0 cmp 0L;

        if $b3 == 0 goto label2;

        $r2 = r0.<android.view.SurfaceControl: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r2.<dalvik.system.CloseGuard: void openWithCallSite(java.lang.String,java.lang.String)>("release", r1);

     label2:
        r0.<android.view.SurfaceControl: long mNativeObject> = l0;

        $b4 = l0 cmp 0L;

        if $b4 == 0 goto label3;

        l5 = staticinvoke <android.view.SurfaceControl: long nativeGetHandle(long)>(l0);

     label3:
        r0.<android.view.SurfaceControl: long mNativeHandle> = l5;

        return;
    }

    public static android.view.SurfaceControl$ScreenshotGraphicBuffer captureLayers(android.view.SurfaceControl, android.graphics.Rect, float)
    {
        android.view.SurfaceControl r0;
        android.graphics.Rect r1;
        float f0;
        android.view.SurfaceControl$ScreenshotGraphicBuffer $r2;

        r0 := @parameter0: android.view.SurfaceControl;

        r1 := @parameter1: android.graphics.Rect;

        f0 := @parameter2: float;

        $r2 = staticinvoke <android.view.SurfaceControl: android.view.SurfaceControl$ScreenshotGraphicBuffer captureLayers(android.view.SurfaceControl,android.graphics.Rect,float,int)>(r0, r1, f0, 1);

        return $r2;
    }

    public static android.view.SurfaceControl$ScreenshotGraphicBuffer captureLayers(android.view.SurfaceControl, android.graphics.Rect, float, int)
    {
        android.view.SurfaceControl r0;
        android.graphics.Rect r1;
        float f0;
        int i0;
        android.os.IBinder $r2;
        long $l1;
        android.view.SurfaceControl$ScreenshotGraphicBuffer $r3;

        r0 := @parameter0: android.view.SurfaceControl;

        r1 := @parameter1: android.graphics.Rect;

        f0 := @parameter2: float;

        i0 := @parameter3: int;

        $r2 = staticinvoke <android.view.SurfaceControl: android.os.IBinder getInternalDisplayToken()>();

        $l1 = r0.<android.view.SurfaceControl: long mNativeObject>;

        $r3 = staticinvoke <android.view.SurfaceControl: android.view.SurfaceControl$ScreenshotGraphicBuffer nativeCaptureLayers(android.os.IBinder,long,android.graphics.Rect,float,long[],int)>($r2, $l1, r1, f0, null, i0);

        return $r3;
    }

    public static android.view.SurfaceControl$ScreenshotGraphicBuffer captureLayersExcluding(android.view.SurfaceControl, android.graphics.Rect, float, int, android.view.SurfaceControl[])
    {
        android.view.SurfaceControl r0, $r6;
        android.graphics.Rect r1;
        float f0;
        android.view.SurfaceControl[] r2;
        android.os.IBinder r3;
        long[] r4;
        int $i0, $i1, i4, i5;
        long $l2, $l3;
        android.view.SurfaceControl$ScreenshotGraphicBuffer $r5;

        r0 := @parameter0: android.view.SurfaceControl;

        r1 := @parameter1: android.graphics.Rect;

        f0 := @parameter2: float;

        i4 := @parameter3: int;

        r2 := @parameter4: android.view.SurfaceControl[];

        r3 = staticinvoke <android.view.SurfaceControl: android.os.IBinder getInternalDisplayToken()>();

        $i0 = lengthof r2;

        r4 = newarray (long)[$i0];

        i5 = 0;

     label1:
        $i1 = lengthof r2;

        if i5 >= $i1 goto label2;

        $r6 = r2[i5];

        $l3 = $r6.<android.view.SurfaceControl: long mNativeObject>;

        r4[i5] = $l3;

        i5 = i5 + 1;

        goto label1;

     label2:
        $l2 = r0.<android.view.SurfaceControl: long mNativeObject>;

        $r5 = staticinvoke <android.view.SurfaceControl: android.view.SurfaceControl$ScreenshotGraphicBuffer nativeCaptureLayers(android.os.IBinder,long,android.graphics.Rect,float,long[],int)>(r3, $l2, r1, f0, r4, 1);

        return $r5;
    }

    private void checkNotReleased()
    {
        android.view.SurfaceControl r0;
        long $l0;
        byte $b1;
        java.lang.StringBuilder $r2;
        java.lang.NullPointerException $r6;
        java.lang.String $r7;

        r0 := @this: android.view.SurfaceControl;

        $l0 = r0.<android.view.SurfaceControl: long mNativeObject>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        return;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mNativeObject is null. Have you called release() already?");

        $r6 = new java.lang.NullPointerException;

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    public static boolean clearAnimationFrameStats()
    {
        boolean $z0;

        $z0 = staticinvoke <android.view.SurfaceControl: boolean nativeClearAnimationFrameStats()>();

        return $z0;
    }

    public static void closeTransaction()
    {
        long l0, $l1, $l3;
        byte $b2, $b4;
        android.view.SurfaceControl$Transaction $r1;
        java.lang.Throwable $r2;

        entermonitor class "Landroid/view/SurfaceControl;";

     label01:
        $l1 = <android.view.SurfaceControl: long sTransactionNestCount>;

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label03;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("SurfaceControl", "Call to SurfaceControl.closeTransaction without matching openTransaction");

     label02:
        goto label07;

     label03:
        $l3 = <android.view.SurfaceControl: long sTransactionNestCount>;

        l0 = $l3 - 1L;

        <android.view.SurfaceControl: long sTransactionNestCount> = l0;

     label04:
        $b4 = l0 cmp 0L;

        if $b4 <= 0 goto label07;

     label05:
        exitmonitor class "Landroid/view/SurfaceControl;";

     label06:
        return;

     label07:
        $r1 = <android.view.SurfaceControl: android.view.SurfaceControl$Transaction sGlobalTransaction>;

        virtualinvoke $r1.<android.view.SurfaceControl$Transaction: void apply()>();

        exitmonitor class "Landroid/view/SurfaceControl;";

     label08:
        return;

     label09:
        $r2 := @caughtexception;

     label10:
        exitmonitor class "Landroid/view/SurfaceControl;";

     label11:
        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public static android.os.IBinder createDisplay(java.lang.String, boolean)
    {
        java.lang.String r0;
        boolean z0;
        java.lang.IllegalArgumentException $r1;
        android.os.IBinder $r2;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if r0 == null goto label1;

        $r2 = staticinvoke <android.view.SurfaceControl: android.os.IBinder nativeCreateDisplay(java.lang.String,boolean)>(r0, z0);

        return $r2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("name must not be null");

        throw $r1;
    }

    public static void destroyDisplay(android.os.IBinder)
    {
        android.os.IBinder r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: android.os.IBinder;

        if r0 == null goto label1;

        staticinvoke <android.view.SurfaceControl: void nativeDestroyDisplay(android.os.IBinder)>(r0);

        return;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("displayToken must not be null");

        throw $r1;
    }

    public static int getActiveColorMode(android.os.IBinder)
    {
        android.os.IBinder r0;
        java.lang.IllegalArgumentException $r1;
        int $i0;

        r0 := @parameter0: android.os.IBinder;

        if r0 == null goto label1;

        $i0 = staticinvoke <android.view.SurfaceControl: int nativeGetActiveColorMode(android.os.IBinder)>(r0);

        return $i0;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("displayToken must not be null");

        throw $r1;
    }

    public static int getActiveConfig(android.os.IBinder)
    {
        android.os.IBinder r0;
        java.lang.IllegalArgumentException $r1;
        int $i0;

        r0 := @parameter0: android.os.IBinder;

        if r0 == null goto label1;

        $i0 = staticinvoke <android.view.SurfaceControl: int nativeGetActiveConfig(android.os.IBinder)>(r0);

        return $i0;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("displayToken must not be null");

        throw $r1;
    }

    public static boolean getAnimationFrameStats(android.view.WindowAnimationFrameStats)
    {
        android.view.WindowAnimationFrameStats r0;
        boolean $z0;

        r0 := @parameter0: android.view.WindowAnimationFrameStats;

        $z0 = staticinvoke <android.view.SurfaceControl: boolean nativeGetAnimationFrameStats(android.view.WindowAnimationFrameStats)>(r0);

        return $z0;
    }

    public static boolean getAutoLowLatencyModeSupport(android.os.IBinder)
    {
        android.os.IBinder r0;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;

        r0 := @parameter0: android.os.IBinder;

        if r0 == null goto label1;

        $z0 = staticinvoke <android.view.SurfaceControl: boolean nativeGetAutoLowLatencyModeSupport(android.os.IBinder)>(r0);

        return $z0;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("displayToken must not be null");

        throw $r1;
    }

    public static android.graphics.ColorSpace[] getCompositionColorSpaces()
    {
        int[] r0;
        android.graphics.ColorSpace r1, $r5, $r7;
        android.graphics.ColorSpace[] r2;
        int i0, $i1, i2;
        android.graphics.ColorSpace$Named $r3, $r4, $r6;

        r0 = staticinvoke <android.view.SurfaceControl: int[] nativeGetCompositionDataspaces()>();

        $r3 = <android.graphics.ColorSpace$Named: android.graphics.ColorSpace$Named SRGB>;

        r1 = staticinvoke <android.graphics.ColorSpace: android.graphics.ColorSpace get(android.graphics.ColorSpace$Named)>($r3);

        r2 = newarray (android.graphics.ColorSpace)[2];

        r2[0] = r1;

        r2[1] = r1;

        $i1 = lengthof r0;

        if $i1 != 2 goto label5;

        i2 = 0;

     label1:
        if i2 >= 2 goto label5;

        i0 = r0[i2];

        if i0 == 143261696 goto label3;

        if i0 == 411107328 goto label2;

        goto label4;

     label2:
        $r6 = <android.graphics.ColorSpace$Named: android.graphics.ColorSpace$Named EXTENDED_SRGB>;

        $r7 = staticinvoke <android.graphics.ColorSpace: android.graphics.ColorSpace get(android.graphics.ColorSpace$Named)>($r6);

        r2[i2] = $r7;

        goto label4;

     label3:
        $r4 = <android.graphics.ColorSpace$Named: android.graphics.ColorSpace$Named DISPLAY_P3>;

        $r5 = staticinvoke <android.graphics.ColorSpace: android.graphics.ColorSpace get(android.graphics.ColorSpace$Named)>($r4);

        r2[i2] = $r5;

     label4:
        i2 = i2 + 1;

        goto label1;

     label5:
        return r2;
    }

    public static android.view.SurfaceControl$DesiredDisplayConfigSpecs getDesiredDisplayConfigSpecs(android.os.IBinder)
    {
        android.os.IBinder r0;
        java.lang.IllegalArgumentException $r1;
        android.view.SurfaceControl$DesiredDisplayConfigSpecs $r2;

        r0 := @parameter0: android.os.IBinder;

        if r0 == null goto label1;

        $r2 = staticinvoke <android.view.SurfaceControl: android.view.SurfaceControl$DesiredDisplayConfigSpecs nativeGetDesiredDisplayConfigSpecs(android.os.IBinder)>(r0);

        return $r2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("displayToken must not be null");

        throw $r1;
    }

    public static boolean getDisplayBrightnessSupport(android.os.IBinder)
    {
        android.os.IBinder r0;
        boolean $z0;

        r0 := @parameter0: android.os.IBinder;

        $z0 = staticinvoke <android.view.SurfaceControl: boolean nativeGetDisplayBrightnessSupport(android.os.IBinder)>(r0);

        return $z0;
    }

    public static int[] getDisplayColorModes(android.os.IBinder)
    {
        android.os.IBinder r0;
        java.lang.IllegalArgumentException $r1;
        int[] $r2;

        r0 := @parameter0: android.os.IBinder;

        if r0 == null goto label1;

        $r2 = staticinvoke <android.view.SurfaceControl: int[] nativeGetDisplayColorModes(android.os.IBinder)>(r0);

        return $r2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("displayToken must not be null");

        throw $r1;
    }

    public static android.view.SurfaceControl$DisplayConfig[] getDisplayConfigs(android.os.IBinder)
    {
        android.os.IBinder r0;
        java.lang.IllegalArgumentException $r1;
        android.view.SurfaceControl$DisplayConfig[] $r2;

        r0 := @parameter0: android.os.IBinder;

        if r0 == null goto label1;

        $r2 = staticinvoke <android.view.SurfaceControl: android.view.SurfaceControl$DisplayConfig[] nativeGetDisplayConfigs(android.os.IBinder)>(r0);

        return $r2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("displayToken must not be null");

        throw $r1;
    }

    public static android.view.SurfaceControl$DisplayInfo getDisplayInfo(android.os.IBinder)
    {
        android.os.IBinder r0;
        java.lang.IllegalArgumentException $r1;
        android.view.SurfaceControl$DisplayInfo $r2;

        r0 := @parameter0: android.os.IBinder;

        if r0 == null goto label1;

        $r2 = staticinvoke <android.view.SurfaceControl: android.view.SurfaceControl$DisplayInfo nativeGetDisplayInfo(android.os.IBinder)>(r0);

        return $r2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("displayToken must not be null");

        throw $r1;
    }

    public static android.view.SurfaceControl$DisplayPrimaries getDisplayNativePrimaries(android.os.IBinder)
    {
        android.os.IBinder r0;
        java.lang.IllegalArgumentException $r1;
        android.view.SurfaceControl$DisplayPrimaries $r2;

        r0 := @parameter0: android.os.IBinder;

        if r0 == null goto label1;

        $r2 = staticinvoke <android.view.SurfaceControl: android.view.SurfaceControl$DisplayPrimaries nativeGetDisplayNativePrimaries(android.os.IBinder)>(r0);

        return $r2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("displayToken must not be null");

        throw $r1;
    }

    public static android.hardware.display.DisplayedContentSample getDisplayedContentSample(android.os.IBinder, long, long)
    {
        android.os.IBinder r0;
        long l0, l1;
        java.lang.IllegalArgumentException $r1;
        android.hardware.display.DisplayedContentSample $r2;

        r0 := @parameter0: android.os.IBinder;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        if r0 == null goto label1;

        $r2 = staticinvoke <android.view.SurfaceControl: android.hardware.display.DisplayedContentSample nativeGetDisplayedContentSample(android.os.IBinder,long,long)>(r0, l0, l1);

        return $r2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("displayToken must not be null");

        throw $r1;
    }

    public static android.hardware.display.DisplayedContentSamplingAttributes getDisplayedContentSamplingAttributes(android.os.IBinder)
    {
        android.os.IBinder r0;
        java.lang.IllegalArgumentException $r1;
        android.hardware.display.DisplayedContentSamplingAttributes $r2;

        r0 := @parameter0: android.os.IBinder;

        if r0 == null goto label1;

        $r2 = staticinvoke <android.view.SurfaceControl: android.hardware.display.DisplayedContentSamplingAttributes nativeGetDisplayedContentSamplingAttributes(android.os.IBinder)>(r0);

        return $r2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("displayToken must not be null");

        throw $r1;
    }

    public static boolean getGameContentTypeSupport(android.os.IBinder)
    {
        android.os.IBinder r0;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;

        r0 := @parameter0: android.os.IBinder;

        if r0 == null goto label1;

        $z0 = staticinvoke <android.view.SurfaceControl: boolean nativeGetGameContentTypeSupport(android.os.IBinder)>(r0);

        return $z0;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("displayToken must not be null");

        throw $r1;
    }

    public static android.view.Display$HdrCapabilities getHdrCapabilities(android.os.IBinder)
    {
        android.os.IBinder r0;
        java.lang.IllegalArgumentException $r1;
        android.view.Display$HdrCapabilities $r2;

        r0 := @parameter0: android.os.IBinder;

        if r0 == null goto label1;

        $r2 = staticinvoke <android.view.SurfaceControl: android.view.Display$HdrCapabilities nativeGetHdrCapabilities(android.os.IBinder)>(r0);

        return $r2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("displayToken must not be null");

        throw $r1;
    }

    public static android.os.IBinder getInternalDisplayToken()
    {
        long[] r0;
        int $i0;
        long $l1;
        android.os.IBinder $r1;

        r0 = staticinvoke <android.view.SurfaceControl: long[] getPhysicalDisplayIds()>();

        $i0 = lengthof r0;

        if $i0 != 0 goto label1;

        return null;

     label1:
        $l1 = r0[0];

        $r1 = staticinvoke <android.view.SurfaceControl: android.os.IBinder getPhysicalDisplayToken(long)>($l1);

        return $r1;
    }

    public static long[] getPhysicalDisplayIds()
    {
        long[] $r0;

        $r0 = staticinvoke <android.view.SurfaceControl: long[] nativeGetPhysicalDisplayIds()>();

        return $r0;
    }

    public static android.os.IBinder getPhysicalDisplayToken(long)
    {
        long l0;
        android.os.IBinder $r0;

        l0 := @parameter0: long;

        $r0 = staticinvoke <android.view.SurfaceControl: android.os.IBinder nativeGetPhysicalDisplayToken(long)>(l0);

        return $r0;
    }

    public static boolean getProtectedContentSupport()
    {
        boolean $z0;

        $z0 = staticinvoke <android.view.SurfaceControl: boolean nativeGetProtectedContentSupport()>();

        return $z0;
    }

    public static void mergeToGlobalTransaction(android.view.SurfaceControl$Transaction)
    {
        android.view.SurfaceControl$Transaction $r0, r3;
        java.lang.Throwable $r2;

        r3 := @parameter0: android.view.SurfaceControl$Transaction;

        entermonitor class "Landroid/view/SurfaceControl;";

     label1:
        $r0 = <android.view.SurfaceControl: android.view.SurfaceControl$Transaction sGlobalTransaction>;

        virtualinvoke $r0.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction merge(android.view.SurfaceControl$Transaction)>(r3);

        exitmonitor class "Landroid/view/SurfaceControl;";

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor class "Landroid/view/SurfaceControl;";

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static android.view.SurfaceControl mirrorSurface(android.view.SurfaceControl)
    {
        long l0, $l1;
        android.view.SurfaceControl $r0, r1;

        r1 := @parameter0: android.view.SurfaceControl;

        $l1 = r1.<android.view.SurfaceControl: long mNativeObject>;

        l0 = staticinvoke <android.view.SurfaceControl: long nativeMirrorSurface(long)>($l1);

        $r0 = new android.view.SurfaceControl;

        specialinvoke $r0.<android.view.SurfaceControl: void <init>()>();

        specialinvoke $r0.<android.view.SurfaceControl: void assignNativeObject(long,java.lang.String)>(l0, "mirrorSurface");

        return $r0;
    }

    private static native long nativeAcquireFrameRateFlexibilityToken();

    private static native void nativeApplyTransaction(long, boolean);

    private static native android.view.SurfaceControl$ScreenshotGraphicBuffer nativeCaptureLayers(android.os.IBinder, long, android.graphics.Rect, float, long[], int);

    private static native boolean nativeClearAnimationFrameStats();

    private static native boolean nativeClearContentFrameStats(long);

    private static native long nativeCopyFromSurfaceControl(long);

    private static native long nativeCreate(android.view.SurfaceSession, java.lang.String, int, int, int, int, long, android.os.Parcel) throws android.view.Surface$OutOfResourcesException;

    private static native android.os.IBinder nativeCreateDisplay(java.lang.String, boolean);

    private static native long nativeCreateTransaction();

    private static native void nativeDeferTransactionUntil(long, long, long, long);

    private static native void nativeDeferTransactionUntilSurface(long, long, long, long);

    private static native void nativeDestroyDisplay(android.os.IBinder);

    private static native void nativeDisconnect(long);

    private static native int nativeGetActiveColorMode(android.os.IBinder);

    private static native int nativeGetActiveConfig(android.os.IBinder);

    private static native boolean nativeGetAnimationFrameStats(android.view.WindowAnimationFrameStats);

    private static native boolean nativeGetAutoLowLatencyModeSupport(android.os.IBinder);

    private static native int[] nativeGetCompositionDataspaces();

    private static native boolean nativeGetContentFrameStats(long, android.view.WindowContentFrameStats);

    private static native android.view.SurfaceControl$DesiredDisplayConfigSpecs nativeGetDesiredDisplayConfigSpecs(android.os.IBinder);

    private static native boolean nativeGetDisplayBrightnessSupport(android.os.IBinder);

    private static native int[] nativeGetDisplayColorModes(android.os.IBinder);

    private static native android.view.SurfaceControl$DisplayConfig[] nativeGetDisplayConfigs(android.os.IBinder);

    private static native android.view.SurfaceControl$DisplayInfo nativeGetDisplayInfo(android.os.IBinder);

    private static native android.view.SurfaceControl$DisplayPrimaries nativeGetDisplayNativePrimaries(android.os.IBinder);

    private static native android.hardware.display.DisplayedContentSample nativeGetDisplayedContentSample(android.os.IBinder, long, long);

    private static native android.hardware.display.DisplayedContentSamplingAttributes nativeGetDisplayedContentSamplingAttributes(android.os.IBinder);

    private static native boolean nativeGetGameContentTypeSupport(android.os.IBinder);

    private static native long nativeGetHandle(long);

    private static native android.view.Display$HdrCapabilities nativeGetHdrCapabilities(android.os.IBinder);

    private static native long nativeGetNativeTransactionFinalizer();

    private static native long[] nativeGetPhysicalDisplayIds();

    private static native android.os.IBinder nativeGetPhysicalDisplayToken(long);

    private static native boolean nativeGetProtectedContentSupport();

    private static native void nativeMergeTransaction(long, long);

    private static native long nativeMirrorSurface(long);

    private static native long nativeReadFromParcel(android.os.Parcel);

    private static native long nativeReadTransactionFromParcel(android.os.Parcel);

    private static native void nativeRelease(long);

    private static native void nativeReleaseFrameRateFlexibilityToken(long);

    private static native void nativeReparent(long, long, long);

    private static native void nativeReparentChildren(long, long, long);

    private static native android.view.SurfaceControl$ScreenshotGraphicBuffer nativeScreenshot(android.os.IBinder, android.graphics.Rect, int, int, boolean, int, boolean);

    private static native boolean nativeSetActiveColorMode(android.os.IBinder, int);

    private static native void nativeSetAlpha(long, long, float);

    private static native void nativeSetAnimationTransaction(long);

    private static native void nativeSetAutoLowLatencyMode(android.os.IBinder, boolean);

    private static native void nativeSetBackgroundBlurRadius(long, long, int);

    private static native void nativeSetColor(long, long, float[]);

    private static native void nativeSetColorSpaceAgnostic(long, long, boolean);

    private static native void nativeSetColorTransform(long, long, float[], float[]);

    private static native void nativeSetCornerRadius(long, long, float);

    private static native boolean nativeSetDesiredDisplayConfigSpecs(android.os.IBinder, android.view.SurfaceControl$DesiredDisplayConfigSpecs);

    private static native boolean nativeSetDisplayBrightness(android.os.IBinder, float);

    private static native void nativeSetDisplayLayerStack(long, android.os.IBinder, int);

    private static native void nativeSetDisplayPowerMode(android.os.IBinder, int);

    private static native void nativeSetDisplayProjection(long, android.os.IBinder, int, int, int, int, int, int, int, int, int);

    private static native void nativeSetDisplaySize(long, android.os.IBinder, int, int);

    private static native void nativeSetDisplaySurface(long, android.os.IBinder, long);

    private static native boolean nativeSetDisplayedContentSamplingEnabled(android.os.IBinder, boolean, int, int);

    private static native void nativeSetEarlyWakeup(long);

    private static native void nativeSetEarlyWakeupEnd(long);

    private static native void nativeSetEarlyWakeupStart(long);

    private static native void nativeSetFixedTransformHint(long, long, int);

    private static native void nativeSetFlags(long, long, int, int);

    private static native void nativeSetFrameRate(long, long, float, int);

    private static native void nativeSetFrameRateSelectionPriority(long, long, int);

    private static native void nativeSetGameContentType(android.os.IBinder, boolean);

    private static native void nativeSetGeometry(long, long, android.graphics.Rect, android.graphics.Rect, long);

    private static native void nativeSetGlobalShadowSettings(float[], float[], float, float, float);

    private static native void nativeSetInputWindowInfo(long, long, android.view.InputWindowHandle);

    private static native void nativeSetLayer(long, long, int);

    private static native void nativeSetLayerStack(long, long, int);

    private static native void nativeSetMatrix(long, long, float, float, float, float);

    private static native void nativeSetMetadata(long, long, int, android.os.Parcel);

    private static native void nativeSetOverrideScalingMode(long, long, int);

    private static native void nativeSetPosition(long, long, float, float);

    private static native void nativeSetRelativeLayer(long, long, long, int);

    private static native void nativeSetShadowRadius(long, long, float);

    private static native void nativeSetSize(long, long, int, int);

    private static native void nativeSetTransparentRegionHint(long, long, android.graphics.Region);

    private static native void nativeSetWindowCrop(long, long, int, int, int, int);

    private static native void nativeSeverChildren(long, long);

    private static native void nativeSyncInputWindows(long);

    private static native void nativeWriteToParcel(long, android.os.Parcel);

    private static native void nativeWriteTransactionToParcel(long, android.os.Parcel);

    public static void openTransaction()
    {
        android.view.SurfaceControl$Transaction $r0, r3;
        long $l0, $l1;
        java.lang.Throwable $r1, $r2;

        entermonitor class "Landroid/view/SurfaceControl;";

     label01:
        $r0 = <android.view.SurfaceControl: android.view.SurfaceControl$Transaction sGlobalTransaction>;

        if $r0 != null goto label02;

        r3 = new android.view.SurfaceControl$Transaction;

        specialinvoke r3.<android.view.SurfaceControl$Transaction: void <init>()>();

        <android.view.SurfaceControl: android.view.SurfaceControl$Transaction sGlobalTransaction> = r3;

     label02:
        entermonitor class "Landroid/view/SurfaceControl;";

     label03:
        $l0 = <android.view.SurfaceControl: long sTransactionNestCount>;

        $l1 = $l0 + 1L;

        <android.view.SurfaceControl: long sTransactionNestCount> = $l1;

        exitmonitor class "Landroid/view/SurfaceControl;";

     label04:
        exitmonitor class "Landroid/view/SurfaceControl;";

     label05:
        return;

     label06:
        $r2 := @caughtexception;

     label07:
        exitmonitor class "Landroid/view/SurfaceControl;";

     label08:
        throw $r2;

     label09:
        $r1 := @caughtexception;

     label10:
        exitmonitor class "Landroid/view/SurfaceControl;";

     label11:
        throw $r1;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public static void releaseFrameRateFlexibilityToken(long)
    {
        long l0;

        l0 := @parameter0: long;

        staticinvoke <android.view.SurfaceControl: void nativeReleaseFrameRateFlexibilityToken(long)>(l0);

        return;
    }

    private static void rotateCropForSF(android.graphics.Rect, int)
    {
        android.graphics.Rect r0;
        int $i0, $i1, i2, i3, i4;

        r0 := @parameter0: android.graphics.Rect;

        i2 := @parameter1: int;

        if i2 == 1 goto label1;

        if i2 != 3 goto label2;

     label1:
        i3 = r0.<android.graphics.Rect: int top>;

        $i0 = r0.<android.graphics.Rect: int left>;

        r0.<android.graphics.Rect: int top> = $i0;

        r0.<android.graphics.Rect: int left> = i3;

        i4 = r0.<android.graphics.Rect: int right>;

        $i1 = r0.<android.graphics.Rect: int bottom>;

        r0.<android.graphics.Rect: int right> = $i1;

        r0.<android.graphics.Rect: int bottom> = i4;

     label2:
        return;
    }

    public static android.graphics.Bitmap screenshot(android.graphics.Rect, int, int, int)
    {
        android.graphics.Rect r0;
        int i0, i1, i2;
        android.graphics.Bitmap $r1;

        r0 := @parameter0: android.graphics.Rect;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r1 = staticinvoke <android.view.SurfaceControl: android.graphics.Bitmap screenshot(android.graphics.Rect,int,int,boolean,int)>(r0, i0, i1, 0, i2);

        return $r1;
    }

    public static android.graphics.Bitmap screenshot(android.graphics.Rect, int, int, boolean, int)
    {
        int i0, i1, i5, i6;
        boolean z0;
        android.os.IBinder r0;
        android.graphics.GraphicBuffer $r1;
        android.graphics.ColorSpace $r2;
        android.graphics.Bitmap $r3;
        android.graphics.Rect r4;
        byte b7;
        android.view.SurfaceControl$ScreenshotGraphicBuffer r5;

        r4 := @parameter0: android.graphics.Rect;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        i5 := @parameter4: int;

        r0 = staticinvoke <android.view.SurfaceControl: android.os.IBinder getInternalDisplayToken()>();

        if r0 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("SurfaceControl", "Failed to take screenshot because internal display is disconnected");

        return null;

     label1:
        if i5 == 1 goto label2;

        i6 = i5;

        if i5 != 3 goto label5;

     label2:
        if i5 != 1 goto label3;

        b7 = 3;

        goto label4;

     label3:
        b7 = 1;

     label4:
        i6 = b7;

     label5:
        staticinvoke <android.view.SurfaceControl: void rotateCropForSF(android.graphics.Rect,int)>(r4, i6);

        r5 = staticinvoke <android.view.SurfaceControl: android.view.SurfaceControl$ScreenshotGraphicBuffer screenshotToBuffer(android.os.IBinder,android.graphics.Rect,int,int,boolean,int)>(r0, r4, i0, i1, z0, i6);

        if r5 != null goto label6;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("SurfaceControl", "Failed to take screenshot");

        return null;

     label6:
        $r1 = virtualinvoke r5.<android.view.SurfaceControl$ScreenshotGraphicBuffer: android.graphics.GraphicBuffer getGraphicBuffer()>();

        $r2 = virtualinvoke r5.<android.view.SurfaceControl$ScreenshotGraphicBuffer: android.graphics.ColorSpace getColorSpace()>();

        $r3 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap wrapHardwareBuffer(android.graphics.GraphicBuffer,android.graphics.ColorSpace)>($r1, $r2);

        return $r3;
    }

    public static void screenshot(android.os.IBinder, android.view.Surface)
    {
        android.os.IBinder r0;
        android.view.Surface r1;
        android.graphics.Rect $r2;

        r0 := @parameter0: android.os.IBinder;

        r1 := @parameter1: android.view.Surface;

        $r2 = new android.graphics.Rect;

        specialinvoke $r2.<android.graphics.Rect: void <init>()>();

        staticinvoke <android.view.SurfaceControl: void screenshot(android.os.IBinder,android.view.Surface,android.graphics.Rect,int,int,boolean,int)>(r0, r1, $r2, 0, 0, 0, 0);

        return;
    }

    public static void screenshot(android.os.IBinder, android.view.Surface, android.graphics.Rect, int, int, boolean, int)
    {
        android.graphics.Rect r0;
        int i0, i1, i2;
        boolean z0;
        java.lang.IllegalArgumentException $r1;
        android.graphics.GraphicBuffer $r2;
        android.graphics.ColorSpace $r3;
        java.lang.RuntimeException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r7, $r9;
        android.os.IBinder r10;
        android.view.Surface r11;
        android.view.SurfaceControl$ScreenshotGraphicBuffer r12;

        r10 := @parameter0: android.os.IBinder;

        r11 := @parameter1: android.view.Surface;

        r0 := @parameter2: android.graphics.Rect;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        z0 := @parameter5: boolean;

        i2 := @parameter6: int;

        if r11 == null goto label5;

        r12 = staticinvoke <android.view.SurfaceControl: android.view.SurfaceControl$ScreenshotGraphicBuffer screenshotToBuffer(android.os.IBinder,android.graphics.Rect,int,int,boolean,int)>(r10, r0, i0, i1, z0, i2);

     label1:
        $r2 = virtualinvoke r12.<android.view.SurfaceControl$ScreenshotGraphicBuffer: android.graphics.GraphicBuffer getGraphicBuffer()>();

        $r3 = virtualinvoke r12.<android.view.SurfaceControl$ScreenshotGraphicBuffer: android.graphics.ColorSpace getColorSpace()>();

        virtualinvoke r11.<android.view.Surface: void attachAndQueueBufferWithColorSpace(android.graphics.GraphicBuffer,android.graphics.ColorSpace)>($r2, $r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to take screenshot - ");

        $r7 = virtualinvoke $r4.<java.lang.RuntimeException: java.lang.String getMessage()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("SurfaceControl", $r9);

     label4:
        return;

     label5:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("consumer must not be null");

        throw $r1;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public static android.view.SurfaceControl$ScreenshotGraphicBuffer screenshotToBuffer(android.os.IBinder, android.graphics.Rect, int, int, boolean, int)
    {
        android.os.IBinder r0;
        android.graphics.Rect r1;
        int i0, i1, i2;
        boolean z0;
        java.lang.IllegalArgumentException $r2;
        android.view.SurfaceControl$ScreenshotGraphicBuffer $r3;

        r0 := @parameter0: android.os.IBinder;

        r1 := @parameter1: android.graphics.Rect;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        z0 := @parameter4: boolean;

        i2 := @parameter5: int;

        if r0 == null goto label1;

        $r3 = staticinvoke <android.view.SurfaceControl: android.view.SurfaceControl$ScreenshotGraphicBuffer nativeScreenshot(android.os.IBinder,android.graphics.Rect,int,int,boolean,int,boolean)>(r0, r1, i0, i1, z0, i2, 0);

        return $r3;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("displayToken must not be null");

        throw $r2;
    }

    public static android.view.SurfaceControl$ScreenshotGraphicBuffer screenshotToBufferWithSecureLayersUnsafe(android.os.IBinder, android.graphics.Rect, int, int, boolean, int)
    {
        android.os.IBinder r0;
        android.graphics.Rect r1;
        int i0, i1, i2;
        boolean z0;
        java.lang.IllegalArgumentException $r2;
        android.view.SurfaceControl$ScreenshotGraphicBuffer $r3;

        r0 := @parameter0: android.os.IBinder;

        r1 := @parameter1: android.graphics.Rect;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        z0 := @parameter4: boolean;

        i2 := @parameter5: int;

        if r0 == null goto label1;

        $r3 = staticinvoke <android.view.SurfaceControl: android.view.SurfaceControl$ScreenshotGraphicBuffer nativeScreenshot(android.os.IBinder,android.graphics.Rect,int,int,boolean,int,boolean)>(r0, r1, i0, i1, z0, i2, 1);

        return $r3;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("displayToken must not be null");

        throw $r2;
    }

    public static boolean setActiveColorMode(android.os.IBinder, int)
    {
        android.os.IBinder r0;
        int i0;
        java.lang.IllegalArgumentException $r1;
        boolean $z0;

        r0 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        if r0 == null goto label1;

        $z0 = staticinvoke <android.view.SurfaceControl: boolean nativeSetActiveColorMode(android.os.IBinder,int)>(r0, i0);

        return $z0;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("displayToken must not be null");

        throw $r1;
    }

    public static void setAutoLowLatencyMode(android.os.IBinder, boolean)
    {
        android.os.IBinder r0;
        boolean z0;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

        if r0 == null goto label1;

        staticinvoke <android.view.SurfaceControl: void nativeSetAutoLowLatencyMode(android.os.IBinder,boolean)>(r0, z0);

        return;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("displayToken must not be null");

        throw $r1;
    }

    public static boolean setDesiredDisplayConfigSpecs(android.os.IBinder, android.view.SurfaceControl$DesiredDisplayConfigSpecs)
    {
        android.os.IBinder r0;
        android.view.SurfaceControl$DesiredDisplayConfigSpecs r1;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;

        r0 := @parameter0: android.os.IBinder;

        r1 := @parameter1: android.view.SurfaceControl$DesiredDisplayConfigSpecs;

        if r0 == null goto label1;

        $z0 = staticinvoke <android.view.SurfaceControl: boolean nativeSetDesiredDisplayConfigSpecs(android.os.IBinder,android.view.SurfaceControl$DesiredDisplayConfigSpecs)>(r0, r1);

        return $z0;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("displayToken must not be null");

        throw $r2;
    }

    public static boolean setDisplayBrightness(android.os.IBinder, float)
    {
        android.os.IBinder r0;
        float f0;
        boolean $z0, $z1;
        byte $b0, $b1, $b2;
        java.lang.IllegalArgumentException $r2;

        r0 := @parameter0: android.os.IBinder;

        f0 := @parameter1: float;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0);

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z0 != 0 goto label2;

        $b0 = f0 cmpl 1.0F;

        if $b0 > 0 goto label2;

        $b1 = f0 cmpg 0.0F;

        if $b1 >= 0 goto label1;

        $b2 = f0 cmpl -1.0F;

        if $b2 != 0 goto label2;

     label1:
        $z1 = staticinvoke <android.view.SurfaceControl: boolean nativeSetDisplayBrightness(android.os.IBinder,float)>(r0, f0);

        return $z1;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("brightness must be a number between 0.0f and 1.0f, or -1 to turn the backlight off.");

        throw $r2;
    }

    public static void setDisplayLayerStack(android.os.IBinder, int)
    {
        int i0;
        android.view.SurfaceControl$Transaction $r0;
        java.lang.Throwable $r2;
        android.os.IBinder r3;

        r3 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        entermonitor class "Landroid/view/SurfaceControl;";

     label1:
        $r0 = <android.view.SurfaceControl: android.view.SurfaceControl$Transaction sGlobalTransaction>;

        virtualinvoke $r0.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setDisplayLayerStack(android.os.IBinder,int)>(r3, i0);

        exitmonitor class "Landroid/view/SurfaceControl;";

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor class "Landroid/view/SurfaceControl;";

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static void setDisplayPowerMode(android.os.IBinder, int)
    {
        android.os.IBinder r0;
        int i0;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        if r0 == null goto label1;

        staticinvoke <android.view.SurfaceControl: void nativeSetDisplayPowerMode(android.os.IBinder,int)>(r0, i0);

        return;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("displayToken must not be null");

        throw $r1;
    }

    public static void setDisplayProjection(android.os.IBinder, int, android.graphics.Rect, android.graphics.Rect)
    {
        int i0;
        android.graphics.Rect r0, r1;
        android.view.SurfaceControl$Transaction $r2;
        java.lang.Throwable $r4;
        android.os.IBinder r5;

        r5 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        r0 := @parameter2: android.graphics.Rect;

        r1 := @parameter3: android.graphics.Rect;

        entermonitor class "Landroid/view/SurfaceControl;";

     label1:
        $r2 = <android.view.SurfaceControl: android.view.SurfaceControl$Transaction sGlobalTransaction>;

        virtualinvoke $r2.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setDisplayProjection(android.os.IBinder,int,android.graphics.Rect,android.graphics.Rect)>(r5, i0, r0, r1);

        exitmonitor class "Landroid/view/SurfaceControl;";

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor class "Landroid/view/SurfaceControl;";

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static void setDisplaySize(android.os.IBinder, int, int)
    {
        int i0, i1;
        android.view.SurfaceControl$Transaction $r0;
        java.lang.Throwable $r2;
        android.os.IBinder r3;

        r3 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        entermonitor class "Landroid/view/SurfaceControl;";

     label1:
        $r0 = <android.view.SurfaceControl: android.view.SurfaceControl$Transaction sGlobalTransaction>;

        virtualinvoke $r0.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setDisplaySize(android.os.IBinder,int,int)>(r3, i0, i1);

        exitmonitor class "Landroid/view/SurfaceControl;";

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor class "Landroid/view/SurfaceControl;";

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static void setDisplaySurface(android.os.IBinder, android.view.Surface)
    {
        android.view.Surface r0;
        android.view.SurfaceControl$Transaction $r1;
        java.lang.Throwable $r3;
        android.os.IBinder r4;

        r4 := @parameter0: android.os.IBinder;

        r0 := @parameter1: android.view.Surface;

        entermonitor class "Landroid/view/SurfaceControl;";

     label1:
        $r1 = <android.view.SurfaceControl: android.view.SurfaceControl$Transaction sGlobalTransaction>;

        virtualinvoke $r1.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setDisplaySurface(android.os.IBinder,android.view.Surface)>(r4, r0);

        exitmonitor class "Landroid/view/SurfaceControl;";

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor class "Landroid/view/SurfaceControl;";

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static boolean setDisplayedContentSamplingEnabled(android.os.IBinder, boolean, int, int)
    {
        android.os.IBinder r0;
        boolean z0, $z1;
        int i0, i1, $i2;
        java.lang.IllegalArgumentException $r1, $r2;

        r0 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        if r0 == null goto label2;

        $i2 = i0 >> 4;

        if $i2 != 0 goto label1;

        $z1 = staticinvoke <android.view.SurfaceControl: boolean nativeSetDisplayedContentSamplingEnabled(android.os.IBinder,boolean,int,int)>(r0, z0, i0, i1);

        return $z1;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("invalid componentMask when enabling sampling");

        throw $r2;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("displayToken must not be null");

        throw $r1;
    }

    public static void setGameContentType(android.os.IBinder, boolean)
    {
        android.os.IBinder r0;
        boolean z0;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

        if r0 == null goto label1;

        staticinvoke <android.view.SurfaceControl: void nativeSetGameContentType(android.os.IBinder,boolean)>(r0, z0);

        return;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("displayToken must not be null");

        throw $r1;
    }

    public static void setGlobalShadowSettings(float[], float[], float, float, float)
    {
        float[] r0, r1;
        float f0, f1, f2;

        r0 := @parameter0: float[];

        r1 := @parameter1: float[];

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        f2 := @parameter4: float;

        staticinvoke <android.view.SurfaceControl: void validateColorArg(float[])>(r0);

        staticinvoke <android.view.SurfaceControl: void validateColorArg(float[])>(r1);

        staticinvoke <android.view.SurfaceControl: void nativeSetGlobalShadowSettings(float[],float[],float,float,float)>(r0, r1, f0, f1, f2);

        return;
    }

    private static void validateColorArg(float[])
    {
        float[] r0;
        int i0, $i1, i4;
        float f0;
        java.lang.IllegalArgumentException $r1, $r2;
        byte $b2, $b3;

        r0 := @parameter0: float[];

        $i1 = lengthof r0;

        if $i1 != 4 goto label4;

        i0 = lengthof r0;

        i4 = 0;

     label1:
        if i4 >= i0 goto label3;

        f0 = r0[i4];

        $b2 = f0 cmpg 0.0F;

        if $b2 < 0 goto label2;

        $b3 = f0 cmpl 1.0F;

        if $b3 > 0 goto label2;

        i4 = i4 + 1;

        goto label1;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Color must be specified as a float array with four values to represent r, g, b, a in range [0..1]");

        throw $r2;

     label3:
        return;

     label4:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Color must be specified as a float array with four values to represent r, g, b, a in range [0..1]");

        throw $r1;
    }

    public boolean addOnReparentListener(android.view.SurfaceControl$OnReparentListener)
    {
        android.view.SurfaceControl r0;
        java.lang.Object r1;
        java.util.ArrayList r2, $r3, $r4;
        boolean z0;
        java.lang.Throwable $r5;
        android.view.SurfaceControl$OnReparentListener r6;

        r0 := @this: android.view.SurfaceControl;

        r6 := @parameter0: android.view.SurfaceControl$OnReparentListener;

        r1 = r0.<android.view.SurfaceControl: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<android.view.SurfaceControl: java.util.ArrayList mReparentListeners>;

        if $r3 != null goto label2;

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>(int)>(1);

        r0.<android.view.SurfaceControl: java.util.ArrayList mReparentListeners> = r2;

     label2:
        $r4 = r0.<android.view.SurfaceControl: java.util.ArrayList mReparentListeners>;

        z0 = virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

        exitmonitor r1;

     label3:
        return z0;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public boolean clearContentFrameStats()
    {
        android.view.SurfaceControl r0;
        long $l0;
        boolean $z0;

        r0 := @this: android.view.SurfaceControl;

        specialinvoke r0.<android.view.SurfaceControl: void checkNotReleased()>();

        $l0 = r0.<android.view.SurfaceControl: long mNativeObject>;

        $z0 = staticinvoke <android.view.SurfaceControl: boolean nativeClearContentFrameStats(long)>($l0);

        return $z0;
    }

    public void copyFrom(android.view.SurfaceControl, java.lang.String)
    {
        android.view.SurfaceControl r0, r1;
        java.lang.String r2, $r3;
        int $i0, $i1;
        java.lang.ref.WeakReference $r4;
        long $l2, $l3;

        r0 := @this: android.view.SurfaceControl;

        r1 := @parameter0: android.view.SurfaceControl;

        r2 := @parameter1: java.lang.String;

        $r3 = r1.<android.view.SurfaceControl: java.lang.String mName>;

        r0.<android.view.SurfaceControl: java.lang.String mName> = $r3;

        $i0 = r1.<android.view.SurfaceControl: int mWidth>;

        r0.<android.view.SurfaceControl: int mWidth> = $i0;

        $i1 = r1.<android.view.SurfaceControl: int mHeight>;

        r0.<android.view.SurfaceControl: int mHeight> = $i1;

        $r4 = r1.<android.view.SurfaceControl: java.lang.ref.WeakReference mLocalOwnerView>;

        r0.<android.view.SurfaceControl: java.lang.ref.WeakReference mLocalOwnerView> = $r4;

        $l2 = r1.<android.view.SurfaceControl: long mNativeObject>;

        $l3 = staticinvoke <android.view.SurfaceControl: long nativeCopyFromSurfaceControl(long)>($l2);

        specialinvoke r0.<android.view.SurfaceControl: void assignNativeObject(long,java.lang.String)>($l3, r2);

        return;
    }

    public void deferTransactionUntil(android.view.SurfaceControl, long)
    {
        android.view.SurfaceControl r0, r4;
        long l0;
        android.view.SurfaceControl$Transaction $r1;
        java.lang.Throwable $r3;

        r0 := @this: android.view.SurfaceControl;

        r4 := @parameter0: android.view.SurfaceControl;

        l0 := @parameter1: long;

        entermonitor class "Landroid/view/SurfaceControl;";

     label1:
        $r1 = <android.view.SurfaceControl: android.view.SurfaceControl$Transaction sGlobalTransaction>;

        virtualinvoke $r1.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction deferTransactionUntil(android.view.SurfaceControl,android.view.SurfaceControl,long)>(r0, r4, l0);

        exitmonitor class "Landroid/view/SurfaceControl;";

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor class "Landroid/view/SurfaceControl;";

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int describeContents()
    {
        android.view.SurfaceControl r0;

        r0 := @this: android.view.SurfaceControl;

        return 0;
    }

    public void detachChildren()
    {
        android.view.SurfaceControl r0;
        android.view.SurfaceControl$Transaction $r2;
        java.lang.Throwable $r4;

        r0 := @this: android.view.SurfaceControl;

        entermonitor class "Landroid/view/SurfaceControl;";

     label1:
        $r2 = <android.view.SurfaceControl: android.view.SurfaceControl$Transaction sGlobalTransaction>;

        virtualinvoke $r2.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction detachChildren(android.view.SurfaceControl)>(r0);

        exitmonitor class "Landroid/view/SurfaceControl;";

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor class "Landroid/view/SurfaceControl;";

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void disconnect()
    {
        android.view.SurfaceControl r0;
        long l0;
        byte $b1;

        r0 := @this: android.view.SurfaceControl;

        l0 = r0.<android.view.SurfaceControl: long mNativeObject>;

        $b1 = l0 cmp 0L;

        if $b1 == 0 goto label1;

        staticinvoke <android.view.SurfaceControl: void nativeDisconnect(long)>(l0);

     label1:
        return;
    }

    public void dumpDebug(android.util.proto.ProtoOutputStream, long)
    {
        android.view.SurfaceControl r0;
        android.util.proto.ProtoOutputStream r1;
        int $i0;
        java.lang.String $r2;
        long l1, l2;

        r0 := @this: android.view.SurfaceControl;

        r1 := @parameter0: android.util.proto.ProtoOutputStream;

        l1 := @parameter1: long;

        l2 = virtualinvoke r1.<android.util.proto.ProtoOutputStream: long start(long)>(l1);

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464257L, $i0);

        $r2 = r0.<android.view.SurfaceControl: java.lang.String mName>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,java.lang.String)>(1138166333442L, $r2);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void end(long)>(l2);

        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.view.SurfaceControl r0;
        dalvik.system.CloseGuard $r2, $r3;
        long $l0, $l2;
        byte $b1;
        java.lang.Throwable $r4;

        r0 := @this: android.view.SurfaceControl;

     label1:
        $r2 = r0.<android.view.SurfaceControl: dalvik.system.CloseGuard mCloseGuard>;

        if $r2 == null goto label2;

        $r3 = r0.<android.view.SurfaceControl: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r3.<dalvik.system.CloseGuard: void warnIfOpen()>();

     label2:
        $l0 = r0.<android.view.SurfaceControl: long mNativeObject>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label3;

        $l2 = r0.<android.view.SurfaceControl: long mNativeObject>;

        staticinvoke <android.view.SurfaceControl: void nativeRelease(long)>($l2);

     label3:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label4:
        $r4 := @caughtexception;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public boolean getContentFrameStats(android.view.WindowContentFrameStats)
    {
        android.view.SurfaceControl r0;
        android.view.WindowContentFrameStats r1;
        long $l0;
        boolean $z0;

        r0 := @this: android.view.SurfaceControl;

        r1 := @parameter0: android.view.WindowContentFrameStats;

        specialinvoke r0.<android.view.SurfaceControl: void checkNotReleased()>();

        $l0 = r0.<android.view.SurfaceControl: long mNativeObject>;

        $z0 = staticinvoke <android.view.SurfaceControl: boolean nativeGetContentFrameStats(long,android.view.WindowContentFrameStats)>($l0, r1);

        return $z0;
    }

    public int getHeight()
    {
        android.view.SurfaceControl r0;
        java.lang.Object r1;
        int i0;
        java.lang.Throwable $r3;

        r0 := @this: android.view.SurfaceControl;

        r1 = r0.<android.view.SurfaceControl: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        i0 = r0.<android.view.SurfaceControl: int mHeight>;

        exitmonitor r1;

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.view.View getLocalOwnerView()
    {
        android.view.SurfaceControl r0;
        java.lang.Object $r1;
        java.lang.ref.WeakReference r2;
        android.view.View r3;

        r0 := @this: android.view.SurfaceControl;

        r2 = r0.<android.view.SurfaceControl: java.lang.ref.WeakReference mLocalOwnerView>;

        if r2 == null goto label1;

        $r1 = virtualinvoke r2.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r3 = (android.view.View) $r1;

        goto label2;

     label1:
        r3 = null;

     label2:
        return r3;
    }

    public int getWidth()
    {
        android.view.SurfaceControl r0;
        java.lang.Object r1;
        int i0;
        java.lang.Throwable $r3;

        r0 := @this: android.view.SurfaceControl;

        r1 = r0.<android.view.SurfaceControl: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        i0 = r0.<android.view.SurfaceControl: int mWidth>;

        exitmonitor r1;

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void hide()
    {
        android.view.SurfaceControl r0;
        android.view.SurfaceControl$Transaction $r2;
        java.lang.Throwable $r4;

        r0 := @this: android.view.SurfaceControl;

        specialinvoke r0.<android.view.SurfaceControl: void checkNotReleased()>();

        entermonitor class "Landroid/view/SurfaceControl;";

     label1:
        $r2 = <android.view.SurfaceControl: android.view.SurfaceControl$Transaction sGlobalTransaction>;

        virtualinvoke $r2.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction hide(android.view.SurfaceControl)>(r0);

        exitmonitor class "Landroid/view/SurfaceControl;";

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor class "Landroid/view/SurfaceControl;";

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isSameSurface(android.view.SurfaceControl)
    {
        android.view.SurfaceControl r0, r1;
        long $l0, $l1;
        byte $b2;
        boolean z0;

        r0 := @this: android.view.SurfaceControl;

        r1 := @parameter0: android.view.SurfaceControl;

        $l1 = r1.<android.view.SurfaceControl: long mNativeHandle>;

        $l0 = r0.<android.view.SurfaceControl: long mNativeHandle>;

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isValid()
    {
        android.view.SurfaceControl r0;
        long $l0;
        byte $b1;
        boolean z0;

        r0 := @this: android.view.SurfaceControl;

        $l0 = r0.<android.view.SurfaceControl: long mNativeObject>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public void readFromParcel(android.os.Parcel)
    {
        android.view.SurfaceControl r0;
        android.os.Parcel r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.String $r3;
        int $i0, $i1, $i2;
        long l3;

        r0 := @this: android.view.SurfaceControl;

        r1 := @parameter0: android.os.Parcel;

        if r1 == null goto label2;

        $r3 = virtualinvoke r1.<android.os.Parcel: java.lang.String readString8()>();

        r0.<android.view.SurfaceControl: java.lang.String mName> = $r3;

        $i0 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r0.<android.view.SurfaceControl: int mWidth> = $i0;

        $i1 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r0.<android.view.SurfaceControl: int mHeight> = $i1;

        l3 = 0L;

        $i2 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        if $i2 == 0 goto label1;

        l3 = staticinvoke <android.view.SurfaceControl: long nativeReadFromParcel(android.os.Parcel)>(r1);

     label1:
        specialinvoke r0.<android.view.SurfaceControl: void assignNativeObject(long,java.lang.String)>(l3, "readFromParcel");

        return;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("source must not be null");

        throw $r2;
    }

    public void release()
    {
        android.view.SurfaceControl r0;
        long l0;
        byte $b1;
        dalvik.system.CloseGuard $r1;

        r0 := @this: android.view.SurfaceControl;

        l0 = r0.<android.view.SurfaceControl: long mNativeObject>;

        $b1 = l0 cmp 0L;

        if $b1 == 0 goto label1;

        staticinvoke <android.view.SurfaceControl: void nativeRelease(long)>(l0);

        r0.<android.view.SurfaceControl: long mNativeObject> = 0L;

        r0.<android.view.SurfaceControl: long mNativeHandle> = 0L;

        $r1 = r0.<android.view.SurfaceControl: dalvik.system.CloseGuard mCloseGuard>;

        virtualinvoke $r1.<dalvik.system.CloseGuard: void close()>();

     label1:
        return;
    }

    public boolean removeOnReparentListener(android.view.SurfaceControl$OnReparentListener)
    {
        android.view.SurfaceControl r0;
        java.lang.Object r1;
        boolean z0, $z1;
        java.util.ArrayList $r2, $r3;
        java.lang.Throwable $r4;
        android.view.SurfaceControl$OnReparentListener r5;

        r0 := @this: android.view.SurfaceControl;

        r5 := @parameter0: android.view.SurfaceControl$OnReparentListener;

        r1 = r0.<android.view.SurfaceControl: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.view.SurfaceControl: java.util.ArrayList mReparentListeners>;

        z0 = virtualinvoke $r2.<java.util.ArrayList: boolean remove(java.lang.Object)>(r5);

        $r3 = r0.<android.view.SurfaceControl: java.util.ArrayList mReparentListeners>;

        $z1 = virtualinvoke $r3.<java.util.ArrayList: boolean isEmpty()>();

        if $z1 == 0 goto label2;

        r0.<android.view.SurfaceControl: java.util.ArrayList mReparentListeners> = null;

     label2:
        exitmonitor r1;

     label3:
        return z0;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void reparentChildren(android.view.SurfaceControl)
    {
        android.view.SurfaceControl r0, r4;
        android.view.SurfaceControl$Transaction $r1;
        java.lang.Throwable $r3;

        r0 := @this: android.view.SurfaceControl;

        r4 := @parameter0: android.view.SurfaceControl;

        entermonitor class "Landroid/view/SurfaceControl;";

     label1:
        $r1 = <android.view.SurfaceControl: android.view.SurfaceControl$Transaction sGlobalTransaction>;

        virtualinvoke $r1.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction reparentChildren(android.view.SurfaceControl,android.view.SurfaceControl)>(r0, r4);

        exitmonitor class "Landroid/view/SurfaceControl;";

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor class "Landroid/view/SurfaceControl;";

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setAlpha(float)
    {
        android.view.SurfaceControl r0;
        float f0;
        android.view.SurfaceControl$Transaction $r2;
        java.lang.Throwable $r4;

        r0 := @this: android.view.SurfaceControl;

        f0 := @parameter0: float;

        specialinvoke r0.<android.view.SurfaceControl: void checkNotReleased()>();

        entermonitor class "Landroid/view/SurfaceControl;";

     label1:
        $r2 = <android.view.SurfaceControl: android.view.SurfaceControl$Transaction sGlobalTransaction>;

        virtualinvoke $r2.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setAlpha(android.view.SurfaceControl,float)>(r0, f0);

        exitmonitor class "Landroid/view/SurfaceControl;";

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor class "Landroid/view/SurfaceControl;";

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setBufferSize(int, int)
    {
        android.view.SurfaceControl r0;
        int i0, i1;
        android.view.SurfaceControl$Transaction $r2;
        java.lang.Throwable $r4;

        r0 := @this: android.view.SurfaceControl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<android.view.SurfaceControl: void checkNotReleased()>();

        entermonitor class "Landroid/view/SurfaceControl;";

     label1:
        $r2 = <android.view.SurfaceControl: android.view.SurfaceControl$Transaction sGlobalTransaction>;

        virtualinvoke $r2.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setBufferSize(android.view.SurfaceControl,int,int)>(r0, i0, i1);

        exitmonitor class "Landroid/view/SurfaceControl;";

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor class "Landroid/view/SurfaceControl;";

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setColorSpaceAgnostic(boolean)
    {
        android.view.SurfaceControl r0;
        boolean z0;
        android.view.SurfaceControl$Transaction $r2;
        java.lang.Throwable $r4;

        r0 := @this: android.view.SurfaceControl;

        z0 := @parameter0: boolean;

        specialinvoke r0.<android.view.SurfaceControl: void checkNotReleased()>();

        entermonitor class "Landroid/view/SurfaceControl;";

     label1:
        $r2 = <android.view.SurfaceControl: android.view.SurfaceControl$Transaction sGlobalTransaction>;

        virtualinvoke $r2.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setColorSpaceAgnostic(android.view.SurfaceControl,boolean)>(r0, z0);

        exitmonitor class "Landroid/view/SurfaceControl;";

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor class "Landroid/view/SurfaceControl;";

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setLayer(int)
    {
        android.view.SurfaceControl r0;
        int i0;
        android.view.SurfaceControl$Transaction $r2;
        java.lang.Throwable $r4;

        r0 := @this: android.view.SurfaceControl;

        i0 := @parameter0: int;

        specialinvoke r0.<android.view.SurfaceControl: void checkNotReleased()>();

        entermonitor class "Landroid/view/SurfaceControl;";

     label1:
        $r2 = <android.view.SurfaceControl: android.view.SurfaceControl$Transaction sGlobalTransaction>;

        virtualinvoke $r2.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setLayer(android.view.SurfaceControl,int)>(r0, i0);

        exitmonitor class "Landroid/view/SurfaceControl;";

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor class "Landroid/view/SurfaceControl;";

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setMatrix(float, float, float, float)
    {
        android.view.SurfaceControl r0;
        float f0, f1, f2, f3;
        android.view.SurfaceControl$Transaction $r2;
        java.lang.Throwable $r4;

        r0 := @this: android.view.SurfaceControl;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        specialinvoke r0.<android.view.SurfaceControl: void checkNotReleased()>();

        entermonitor class "Landroid/view/SurfaceControl;";

     label1:
        $r2 = <android.view.SurfaceControl: android.view.SurfaceControl$Transaction sGlobalTransaction>;

        virtualinvoke $r2.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setMatrix(android.view.SurfaceControl,float,float,float,float)>(r0, f0, f1, f2, f3);

        exitmonitor class "Landroid/view/SurfaceControl;";

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor class "Landroid/view/SurfaceControl;";

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setOpaque(boolean)
    {
        android.view.SurfaceControl r0;
        boolean z0;
        android.view.SurfaceControl$Transaction $r2;
        java.lang.Throwable $r4;

        r0 := @this: android.view.SurfaceControl;

        z0 := @parameter0: boolean;

        specialinvoke r0.<android.view.SurfaceControl: void checkNotReleased()>();

        entermonitor class "Landroid/view/SurfaceControl;";

     label1:
        $r2 = <android.view.SurfaceControl: android.view.SurfaceControl$Transaction sGlobalTransaction>;

        virtualinvoke $r2.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setOpaque(android.view.SurfaceControl,boolean)>(r0, z0);

        exitmonitor class "Landroid/view/SurfaceControl;";

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor class "Landroid/view/SurfaceControl;";

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setOverrideScalingMode(int)
    {
        android.view.SurfaceControl r0;
        int i0;
        android.view.SurfaceControl$Transaction $r2;
        java.lang.Throwable $r4;

        r0 := @this: android.view.SurfaceControl;

        i0 := @parameter0: int;

        specialinvoke r0.<android.view.SurfaceControl: void checkNotReleased()>();

        entermonitor class "Landroid/view/SurfaceControl;";

     label1:
        $r2 = <android.view.SurfaceControl: android.view.SurfaceControl$Transaction sGlobalTransaction>;

        virtualinvoke $r2.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setOverrideScalingMode(android.view.SurfaceControl,int)>(r0, i0);

        exitmonitor class "Landroid/view/SurfaceControl;";

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor class "Landroid/view/SurfaceControl;";

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setPosition(float, float)
    {
        android.view.SurfaceControl r0;
        float f0, f1;
        android.view.SurfaceControl$Transaction $r2;
        java.lang.Throwable $r4;

        r0 := @this: android.view.SurfaceControl;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        specialinvoke r0.<android.view.SurfaceControl: void checkNotReleased()>();

        entermonitor class "Landroid/view/SurfaceControl;";

     label1:
        $r2 = <android.view.SurfaceControl: android.view.SurfaceControl$Transaction sGlobalTransaction>;

        virtualinvoke $r2.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setPosition(android.view.SurfaceControl,float,float)>(r0, f0, f1);

        exitmonitor class "Landroid/view/SurfaceControl;";

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor class "Landroid/view/SurfaceControl;";

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setSecure(boolean)
    {
        android.view.SurfaceControl r0;
        boolean z0;
        android.view.SurfaceControl$Transaction $r2;
        java.lang.Throwable $r4;

        r0 := @this: android.view.SurfaceControl;

        z0 := @parameter0: boolean;

        specialinvoke r0.<android.view.SurfaceControl: void checkNotReleased()>();

        entermonitor class "Landroid/view/SurfaceControl;";

     label1:
        $r2 = <android.view.SurfaceControl: android.view.SurfaceControl$Transaction sGlobalTransaction>;

        virtualinvoke $r2.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setSecure(android.view.SurfaceControl,boolean)>(r0, z0);

        exitmonitor class "Landroid/view/SurfaceControl;";

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor class "Landroid/view/SurfaceControl;";

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setTransparentRegionHint(android.graphics.Region)
    {
        android.view.SurfaceControl r0;
        android.view.SurfaceControl$Transaction $r1;
        java.lang.Throwable $r3;
        android.graphics.Region r4;

        r0 := @this: android.view.SurfaceControl;

        r4 := @parameter0: android.graphics.Region;

        specialinvoke r0.<android.view.SurfaceControl: void checkNotReleased()>();

        entermonitor class "Landroid/view/SurfaceControl;";

     label1:
        $r1 = <android.view.SurfaceControl: android.view.SurfaceControl$Transaction sGlobalTransaction>;

        virtualinvoke $r1.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setTransparentRegionHint(android.view.SurfaceControl,android.graphics.Region)>(r0, r4);

        exitmonitor class "Landroid/view/SurfaceControl;";

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor class "Landroid/view/SurfaceControl;";

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setWindowCrop(android.graphics.Rect)
    {
        android.view.SurfaceControl r0;
        android.view.SurfaceControl$Transaction $r1;
        java.lang.Throwable $r3;
        android.graphics.Rect r4;

        r0 := @this: android.view.SurfaceControl;

        r4 := @parameter0: android.graphics.Rect;

        specialinvoke r0.<android.view.SurfaceControl: void checkNotReleased()>();

        entermonitor class "Landroid/view/SurfaceControl;";

     label1:
        $r1 = <android.view.SurfaceControl: android.view.SurfaceControl$Transaction sGlobalTransaction>;

        virtualinvoke $r1.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setWindowCrop(android.view.SurfaceControl,android.graphics.Rect)>(r0, r4);

        exitmonitor class "Landroid/view/SurfaceControl;";

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor class "Landroid/view/SurfaceControl;";

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void show()
    {
        android.view.SurfaceControl r0;
        android.view.SurfaceControl$Transaction $r2;
        java.lang.Throwable $r4;

        r0 := @this: android.view.SurfaceControl;

        specialinvoke r0.<android.view.SurfaceControl: void checkNotReleased()>();

        entermonitor class "Landroid/view/SurfaceControl;";

     label1:
        $r2 = <android.view.SurfaceControl: android.view.SurfaceControl$Transaction sGlobalTransaction>;

        virtualinvoke $r2.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction show(android.view.SurfaceControl)>(r0);

        exitmonitor class "Landroid/view/SurfaceControl;";

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor class "Landroid/view/SurfaceControl;";

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.lang.String toString()
    {
        android.view.SurfaceControl r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r4, $r7, $r9;
        int $i0;

        r0 := @this: android.view.SurfaceControl;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Surface(name=");

        $r4 = r0.<android.view.SurfaceControl: java.lang.String mName>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")/@0x");

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        android.view.SurfaceControl r0;
        android.os.Parcel r1;
        int i0, $i1, $i2, $i6;
        java.lang.String $r2;
        long $l3, $l5;
        byte $b4;

        r0 := @this: android.view.SurfaceControl;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        $r2 = r0.<android.view.SurfaceControl: java.lang.String mName>;

        virtualinvoke r1.<android.os.Parcel: void writeString8(java.lang.String)>($r2);

        $i1 = r0.<android.view.SurfaceControl: int mWidth>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i1);

        $i2 = r0.<android.view.SurfaceControl: int mHeight>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i2);

        $l3 = r0.<android.view.SurfaceControl: long mNativeObject>;

        $b4 = $l3 cmp 0L;

        if $b4 != 0 goto label1;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(0);

        goto label2;

     label1:
        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(1);

     label2:
        $l5 = r0.<android.view.SurfaceControl: long mNativeObject>;

        staticinvoke <android.view.SurfaceControl: void nativeWriteToParcel(long,android.os.Parcel)>($l5, r1);

        $i6 = i0 & 1;

        if $i6 == 0 goto label3;

        virtualinvoke r0.<android.view.SurfaceControl: void release()>();

     label3:
        return;
    }
}
