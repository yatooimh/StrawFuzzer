public final class android.view.ThreadedRenderer extends android.graphics.HardwareRenderer
{
    public static final java.lang.String DEBUG_DIRTY_REGIONS_PROPERTY;
    public static final java.lang.String DEBUG_FORCE_DARK;
    public static final java.lang.String DEBUG_FPS_DIVISOR;
    public static final java.lang.String DEBUG_OVERDRAW_PROPERTY;
    public static final java.lang.String DEBUG_SHOW_LAYERS_UPDATES_PROPERTY;
    public static final java.lang.String DEBUG_SHOW_NON_RECTANGULAR_CLIP_PROPERTY;
    public static int EGL_CONTEXT_PRIORITY_HIGH_IMG;
    public static int EGL_CONTEXT_PRIORITY_LOW_IMG;
    public static int EGL_CONTEXT_PRIORITY_MEDIUM_IMG;
    public static final java.lang.String OVERDRAW_PROPERTY_SHOW;
    static final java.lang.String PRINT_CONFIG_PROPERTY;
    static final java.lang.String PROFILE_MAXFRAMES_PROPERTY;
    public static final java.lang.String PROFILE_PROPERTY;
    public static final java.lang.String PROFILE_PROPERTY_VISUALIZE_BARS;
    private static final java.lang.String[] VISUALIZERS;
    public static boolean sRendererDisabled;
    public static boolean sSystemRendererDisabled;
    public static boolean sTrimForeground;
    private boolean mEnabled;
    private int mHeight;
    private boolean mInitialized;
    private int mInsetLeft;
    private int mInsetTop;
    private final float mLightRadius;
    private final float mLightY;
    private final float mLightZ;
    private java.util.ArrayList mNextRtFrameCallbacks;
    private boolean mRequested;
    private boolean mRootNodeNeedsUpdate;
    private int mSurfaceHeight;
    private int mSurfaceWidth;
    private int mWidth;

    static void <clinit>()
    {
        java.lang.String[] $r0;

        <android.view.ThreadedRenderer: java.lang.String PROFILE_PROPERTY_VISUALIZE_BARS> = "visual_bars";

        <android.view.ThreadedRenderer: java.lang.String PROFILE_PROPERTY> = "debug.hwui.profile";

        <android.view.ThreadedRenderer: java.lang.String PROFILE_MAXFRAMES_PROPERTY> = "debug.hwui.profile.maxframes";

        <android.view.ThreadedRenderer: java.lang.String PRINT_CONFIG_PROPERTY> = "debug.hwui.print_config";

        <android.view.ThreadedRenderer: java.lang.String OVERDRAW_PROPERTY_SHOW> = "show";

        <android.view.ThreadedRenderer: java.lang.String DEBUG_SHOW_NON_RECTANGULAR_CLIP_PROPERTY> = "debug.hwui.show_non_rect_clip";

        <android.view.ThreadedRenderer: java.lang.String DEBUG_SHOW_LAYERS_UPDATES_PROPERTY> = "debug.hwui.show_layers_updates";

        <android.view.ThreadedRenderer: java.lang.String DEBUG_OVERDRAW_PROPERTY> = "debug.hwui.overdraw";

        <android.view.ThreadedRenderer: java.lang.String DEBUG_FPS_DIVISOR> = "debug.hwui.fps_divisor";

        <android.view.ThreadedRenderer: java.lang.String DEBUG_FORCE_DARK> = "debug.hwui.force_dark";

        <android.view.ThreadedRenderer: java.lang.String DEBUG_DIRTY_REGIONS_PROPERTY> = "debug.hwui.show_dirty_regions";

        <android.view.ThreadedRenderer: int EGL_CONTEXT_PRIORITY_HIGH_IMG> = 12545;

        <android.view.ThreadedRenderer: int EGL_CONTEXT_PRIORITY_MEDIUM_IMG> = 12546;

        <android.view.ThreadedRenderer: int EGL_CONTEXT_PRIORITY_LOW_IMG> = 12547;

        staticinvoke <android.view.ThreadedRenderer: boolean isAvailable()>();

        <android.view.ThreadedRenderer: boolean sRendererDisabled> = 0;

        <android.view.ThreadedRenderer: boolean sSystemRendererDisabled> = 0;

        <android.view.ThreadedRenderer: boolean sTrimForeground> = 0;

        $r0 = newarray (java.lang.String)[1];

        $r0[0] = "visual_bars";

        <android.view.ThreadedRenderer: java.lang.String[] VISUALIZERS> = $r0;

        return;
    }

    void <init>(android.content.Context, boolean, java.lang.String)
    {
        android.view.ThreadedRenderer r0;
        boolean z0, $z1;
        java.lang.String r1;
        float f0, f1, $f2, $f3, $f4;
        int[] $r2;
        android.content.Context r3;
        android.content.res.TypedArray r4;

        r0 := @this: android.view.ThreadedRenderer;

        r3 := @parameter0: android.content.Context;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.lang.String;

        specialinvoke r0.<android.graphics.HardwareRenderer: void <init>()>();

        r0.<android.view.ThreadedRenderer: boolean mInitialized> = 0;

        r0.<android.view.ThreadedRenderer: boolean mRequested> = 1;

        virtualinvoke r0.<android.view.ThreadedRenderer: void setName(java.lang.String)>(r1);

        $z1 = z0 ^ 1;

        virtualinvoke r0.<android.view.ThreadedRenderer: void setOpaque(boolean)>($z1);

        $r2 = <com.android.internal.R$styleable: int[] Lighting>;

        r4 = virtualinvoke r3.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>(null, $r2, 0, 0);

        $f2 = virtualinvoke r4.<android.content.res.TypedArray: float getDimension(int,float)>(3, 0.0F);

        r0.<android.view.ThreadedRenderer: float mLightY> = $f2;

        $f3 = virtualinvoke r4.<android.content.res.TypedArray: float getDimension(int,float)>(4, 0.0F);

        r0.<android.view.ThreadedRenderer: float mLightZ> = $f3;

        $f4 = virtualinvoke r4.<android.content.res.TypedArray: float getDimension(int,float)>(2, 0.0F);

        r0.<android.view.ThreadedRenderer: float mLightRadius> = $f4;

        f0 = virtualinvoke r4.<android.content.res.TypedArray: float getFloat(int,float)>(0, 0.0F);

        f1 = virtualinvoke r4.<android.content.res.TypedArray: float getFloat(int,float)>(1, 0.0F);

        virtualinvoke r4.<android.content.res.TypedArray: void recycle()>();

        virtualinvoke r0.<android.view.ThreadedRenderer: void setLightSourceAlpha(float,float)>(f0, f1);

        return;
    }

    public static android.view.ThreadedRenderer create(android.content.Context, boolean, java.lang.String)
    {
        android.content.Context r0;
        boolean z0, $z1;
        java.lang.String r1;
        android.view.ThreadedRenderer $r2, r3;

        r0 := @parameter0: android.content.Context;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.lang.String;

        r3 = null;

        $z1 = staticinvoke <android.view.ThreadedRenderer: boolean isAvailable()>();

        if $z1 == 0 goto label1;

        $r2 = new android.view.ThreadedRenderer;

        specialinvoke $r2.<android.view.ThreadedRenderer: void <init>(android.content.Context,boolean,java.lang.String)>(r0, z0, r1);

        r3 = $r2;

     label1:
        return r3;
    }

    private static void destroyResources(android.view.View)
    {
        android.view.View r0;

        r0 := @parameter0: android.view.View;

        virtualinvoke r0.<android.view.View: void destroyHardwareResources()>();

        return;
    }

    public static void disable(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        <android.view.ThreadedRenderer: boolean sRendererDisabled> = 1;

        if z0 == 0 goto label1;

        <android.view.ThreadedRenderer: boolean sSystemRendererDisabled> = 1;

     label1:
        return;
    }

    public static void enableForegroundTrimming()
    {
        <android.view.ThreadedRenderer: boolean sTrimForeground> = 1;

        return;
    }

    public static boolean isAvailable()
    {
        return 1;
    }

    static void lambda$updateRootDisplayList$0(java.util.ArrayList, long)
    {
        java.util.ArrayList r0;
        long l0;
        int $i1, i2;
        java.lang.Object $r1;
        android.graphics.HardwareRenderer$FrameDrawingCallback $r2;

        r0 := @parameter0: java.util.ArrayList;

        l0 := @parameter1: long;

        i2 = 0;

     label1:
        $i1 = virtualinvoke r0.<java.util.ArrayList: int size()>();

        if i2 >= $i1 goto label2;

        $r1 = virtualinvoke r0.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r2 = (android.graphics.HardwareRenderer$FrameDrawingCallback) $r1;

        interfaceinvoke $r2.<android.graphics.HardwareRenderer$FrameDrawingCallback: void onFrameDraw(long)>(l0);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    private void updateEnabledState(android.view.Surface)
    {
        android.view.ThreadedRenderer r0;
        android.view.Surface r1;
        boolean $z0, $z1;

        r0 := @this: android.view.ThreadedRenderer;

        r1 := @parameter0: android.view.Surface;

        if r1 == null goto label2;

        $z0 = virtualinvoke r1.<android.view.Surface: boolean isValid()>();

        if $z0 != 0 goto label1;

        goto label2;

     label1:
        $z1 = r0.<android.view.ThreadedRenderer: boolean mInitialized>;

        virtualinvoke r0.<android.view.ThreadedRenderer: void setEnabled(boolean)>($z1);

        goto label3;

     label2:
        virtualinvoke r0.<android.view.ThreadedRenderer: void setEnabled(boolean)>(0);

     label3:
        return;
    }

    private void updateRootDisplayList(android.view.View, android.view.ThreadedRenderer$DrawCallbacks)
    {
        android.view.ThreadedRenderer r0;
        android.view.ThreadedRenderer$DrawCallbacks r1;
        int i0, $i1, $i2, $i3, $i4;
        java.util.ArrayList $r2, r11;
        boolean $z0, $z1;
        android.graphics.RenderNode $r3, $r4, $r5, $r6, $r9;
        float $f0, $f1;
        android.view._$$Lambda$ThreadedRenderer$ydBD_R1iP5u_97XYakm_jKvC1b4 $r7;
        java.lang.Throwable $r8;
        android.view.View r10;
        android.graphics.RecordingCanvas r12;

        r0 := @this: android.view.ThreadedRenderer;

        r10 := @parameter0: android.view.View;

        r1 := @parameter1: android.view.ThreadedRenderer$DrawCallbacks;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8L, "Record View#draw()");

        specialinvoke r0.<android.view.ThreadedRenderer: void updateViewTreeDisplayList(android.view.View)>(r10);

        $r2 = r0.<android.view.ThreadedRenderer: java.util.ArrayList mNextRtFrameCallbacks>;

        if $r2 == null goto label1;

        r11 = r0.<android.view.ThreadedRenderer: java.util.ArrayList mNextRtFrameCallbacks>;

        r0.<android.view.ThreadedRenderer: java.util.ArrayList mNextRtFrameCallbacks> = null;

        $r7 = new android.view._$$Lambda$ThreadedRenderer$ydBD_R1iP5u_97XYakm_jKvC1b4;

        specialinvoke $r7.<android.view._$$Lambda$ThreadedRenderer$ydBD_R1iP5u_97XYakm_jKvC1b4: void <init>(java.util.ArrayList)>(r11);

        virtualinvoke r0.<android.view.ThreadedRenderer: void setFrameCallback(android.graphics.HardwareRenderer$FrameDrawingCallback)>($r7);

     label1:
        $z0 = r0.<android.view.ThreadedRenderer: boolean mRootNodeNeedsUpdate>;

        if $z0 != 0 goto label2;

        $r6 = r0.<android.view.ThreadedRenderer: android.graphics.RenderNode mRootNode>;

        $z1 = virtualinvoke $r6.<android.graphics.RenderNode: boolean hasDisplayList()>();

        if $z1 != 0 goto label5;

     label2:
        $r3 = r0.<android.view.ThreadedRenderer: android.graphics.RenderNode mRootNode>;

        $i2 = r0.<android.view.ThreadedRenderer: int mSurfaceWidth>;

        $i1 = r0.<android.view.ThreadedRenderer: int mSurfaceHeight>;

        r12 = virtualinvoke $r3.<android.graphics.RenderNode: android.graphics.RecordingCanvas beginRecording(int,int)>($i2, $i1);

     label3:
        i0 = virtualinvoke r12.<android.graphics.RecordingCanvas: int save()>();

        $i3 = r0.<android.view.ThreadedRenderer: int mInsetLeft>;

        $f1 = (float) $i3;

        $i4 = r0.<android.view.ThreadedRenderer: int mInsetTop>;

        $f0 = (float) $i4;

        virtualinvoke r12.<android.graphics.RecordingCanvas: void translate(float,float)>($f1, $f0);

        interfaceinvoke r1.<android.view.ThreadedRenderer$DrawCallbacks: void onPreDraw(android.graphics.RecordingCanvas)>(r12);

        virtualinvoke r12.<android.graphics.RecordingCanvas: void enableZ()>();

        $r4 = virtualinvoke r10.<android.view.View: android.graphics.RenderNode updateDisplayListIfDirty()>();

        virtualinvoke r12.<android.graphics.RecordingCanvas: void drawRenderNode(android.graphics.RenderNode)>($r4);

        virtualinvoke r12.<android.graphics.RecordingCanvas: void disableZ()>();

        interfaceinvoke r1.<android.view.ThreadedRenderer$DrawCallbacks: void onPostDraw(android.graphics.RecordingCanvas)>(r12);

        virtualinvoke r12.<android.graphics.RecordingCanvas: void restoreToCount(int)>(i0);

        r0.<android.view.ThreadedRenderer: boolean mRootNodeNeedsUpdate> = 0;

     label4:
        $r5 = r0.<android.view.ThreadedRenderer: android.graphics.RenderNode mRootNode>;

        virtualinvoke $r5.<android.graphics.RenderNode: void endRecording()>();

     label5:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        return;

     label6:
        $r8 := @caughtexception;

        $r9 = r0.<android.view.ThreadedRenderer: android.graphics.RenderNode mRootNode>;

        virtualinvoke $r9.<android.graphics.RenderNode: void endRecording()>();

        throw $r8;

        catch java.lang.Throwable from label3 to label4 with label6;
    }

    private void updateViewTreeDisplayList(android.view.View)
    {
        android.view.ThreadedRenderer r0;
        android.view.View r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean z0;

        r0 := @this: android.view.ThreadedRenderer;

        r1 := @parameter0: android.view.View;

        $i0 = r1.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 | 32;

        r1.<android.view.View: int mPrivateFlags> = $i1;

        $i2 = r1.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 & -2147483648;

        if $i3 != -2147483648 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        r1.<android.view.View: boolean mRecreateDisplayList> = z0;

        $i4 = r1.<android.view.View: int mPrivateFlags>;

        $i5 = $i4 & 2147483647;

        r1.<android.view.View: int mPrivateFlags> = $i5;

        virtualinvoke r1.<android.view.View: android.graphics.RenderNode updateDisplayListIfDirty()>();

        r1.<android.view.View: boolean mRecreateDisplayList> = 0;

        return;
    }

    android.graphics.Picture captureRenderingCommands()
    {
        android.view.ThreadedRenderer r0;

        r0 := @this: android.view.ThreadedRenderer;

        return null;
    }

    public void destroy()
    {
        android.view.ThreadedRenderer r0;

        r0 := @this: android.view.ThreadedRenderer;

        r0.<android.view.ThreadedRenderer: boolean mInitialized> = 0;

        specialinvoke r0.<android.view.ThreadedRenderer: void updateEnabledState(android.view.Surface)>(null);

        specialinvoke r0.<android.graphics.HardwareRenderer: void destroy()>();

        return;
    }

    void destroyHardwareResources(android.view.View)
    {
        android.view.ThreadedRenderer r0;
        android.view.View r1;

        r0 := @this: android.view.ThreadedRenderer;

        r1 := @parameter0: android.view.View;

        staticinvoke <android.view.ThreadedRenderer: void destroyResources(android.view.View)>(r1);

        virtualinvoke r0.<android.view.ThreadedRenderer: void clearContent()>();

        return;
    }

    void draw(android.view.View, android.view.View$AttachInfo, android.view.ThreadedRenderer$DrawCallbacks)
    {
        android.view.ThreadedRenderer r0;
        android.view.View r1;
        android.view.View$AttachInfo r2;
        android.view.ThreadedRenderer$DrawCallbacks r3;
        android.view.Choreographer r4;
        int i0, $i1, $i2, i4, i5;
        android.view.ViewRootImpl $r5, $r9, $r10, $r11;
        android.graphics.FrameInfo $r6, $r8;
        java.util.List $r7, $r12, $r13, $r14;
        java.lang.Object $r15;
        android.graphics.RenderNode $r16;

        r0 := @this: android.view.ThreadedRenderer;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View$AttachInfo;

        r3 := @parameter2: android.view.ThreadedRenderer$DrawCallbacks;

        $r5 = r2.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        r4 = $r5.<android.view.ViewRootImpl: android.view.Choreographer mChoreographer>;

        $r6 = r4.<android.view.Choreographer: android.graphics.FrameInfo mFrameInfo>;

        virtualinvoke $r6.<android.graphics.FrameInfo: void markDrawStart()>();

        specialinvoke r0.<android.view.ThreadedRenderer: void updateRootDisplayList(android.view.View,android.view.ThreadedRenderer$DrawCallbacks)>(r1, r3);

        $r7 = r2.<android.view.View$AttachInfo: java.util.List mPendingAnimatingRenderNodes>;

        if $r7 == null goto label3;

        $r12 = r2.<android.view.View$AttachInfo: java.util.List mPendingAnimatingRenderNodes>;

        i0 = interfaceinvoke $r12.<java.util.List: int size()>();

        i4 = 0;

     label1:
        if i4 >= i0 goto label2;

        $r14 = r2.<android.view.View$AttachInfo: java.util.List mPendingAnimatingRenderNodes>;

        $r15 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>(i4);

        $r16 = (android.graphics.RenderNode) $r15;

        virtualinvoke r0.<android.view.ThreadedRenderer: void registerAnimatingRenderNode(android.graphics.RenderNode)>($r16);

        i4 = i4 + 1;

        goto label1;

     label2:
        $r13 = r2.<android.view.View$AttachInfo: java.util.List mPendingAnimatingRenderNodes>;

        interfaceinvoke $r13.<java.util.List: void clear()>();

        r2.<android.view.View$AttachInfo: java.util.List mPendingAnimatingRenderNodes> = null;

     label3:
        $r8 = r4.<android.view.Choreographer: android.graphics.FrameInfo mFrameInfo>;

        i5 = virtualinvoke r0.<android.view.ThreadedRenderer: int syncAndDrawFrame(android.graphics.FrameInfo)>($r8);

        $i1 = i5 & 2;

        if $i1 == 0 goto label4;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("OpenGLRenderer", "Surface lost, forcing relayout");

        $r10 = r2.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        $r10.<android.view.ViewRootImpl: boolean mForceNextWindowRelayout> = 1;

        $r11 = r2.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        virtualinvoke $r11.<android.view.ViewRootImpl: void requestLayout()>();

     label4:
        $i2 = i5 & 1;

        if $i2 == 0 goto label5;

        $r9 = r2.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        virtualinvoke $r9.<android.view.ViewRootImpl: void invalidate()>();

     label5:
        return;
    }

    void dumpGfxInfo(java.io.PrintWriter, java.io.FileDescriptor, java.lang.String[])
    {
        android.view.ThreadedRenderer r0;
        java.io.FileDescriptor r1;
        java.lang.String[] r2;
        int i0, $i1, i3, $i5;
        boolean $z0, $z1, $z2;
        java.io.PrintWriter r3;
        byte b2, b4, b6, b7;
        java.lang.String r4;

        r0 := @this: android.view.ThreadedRenderer;

        r3 := @parameter0: java.io.PrintWriter;

        r1 := @parameter1: java.io.FileDescriptor;

        r2 := @parameter2: java.lang.String[];

        virtualinvoke r3.<java.io.PrintWriter: void flush()>();

        if r2 == null goto label02;

        $i1 = lengthof r2;

        if $i1 != 0 goto label01;

        goto label02;

     label01:
        b2 = 0;

        goto label03;

     label02:
        b2 = 1;

     label03:
        i3 = 0;

        b4 = b2;

     label04:
        $i5 = lengthof r2;

        if i3 >= $i5 goto label14;

        r4 = r2[i3];

        b6 = -1;

        i0 = virtualinvoke r4.<java.lang.String: int hashCode()>();

        if i0 == -252053678 goto label08;

        if i0 == 1492 goto label07;

        if i0 == 108404047 goto label06;

     label05:
        goto label09;

     label06:
        $z2 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("reset");

        if $z2 == 0 goto label05;

        b6 = 1;

        goto label09;

     label07:
        $z1 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("-a");

        if $z1 == 0 goto label05;

        b6 = 2;

        goto label09;

     label08:
        $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("framestats");

        if $z0 == 0 goto label05;

        b6 = 0;

     label09:
        if b6 == 0 goto label12;

        if b6 == 1 goto label11;

        if b6 == 2 goto label10;

        b7 = b4;

        goto label13;

     label10:
        b7 = 1;

        goto label13;

     label11:
        b7 = b4 | 2;

        goto label13;

     label12:
        b7 = b4 | 1;

     label13:
        i3 = i3 + 1;

        b4 = b7;

        goto label04;

     label14:
        virtualinvoke r0.<android.view.ThreadedRenderer: void dumpProfileInfo(java.io.FileDescriptor,int)>(r1, b4);

        return;
    }

    int getHeight()
    {
        android.view.ThreadedRenderer r0;
        int $i0;

        r0 := @this: android.view.ThreadedRenderer;

        $i0 = r0.<android.view.ThreadedRenderer: int mHeight>;

        return $i0;
    }

    public android.graphics.RenderNode getRootNode()
    {
        android.view.ThreadedRenderer r0;
        android.graphics.RenderNode $r1;

        r0 := @this: android.view.ThreadedRenderer;

        $r1 = r0.<android.view.ThreadedRenderer: android.graphics.RenderNode mRootNode>;

        return $r1;
    }

    int getWidth()
    {
        android.view.ThreadedRenderer r0;
        int $i0;

        r0 := @this: android.view.ThreadedRenderer;

        $i0 = r0.<android.view.ThreadedRenderer: int mWidth>;

        return $i0;
    }

    boolean initialize(android.view.Surface) throws android.view.Surface$OutOfResourcesException
    {
        android.view.ThreadedRenderer r0;
        android.view.Surface r1;
        boolean z0, $z1;

        r0 := @this: android.view.ThreadedRenderer;

        r1 := @parameter0: android.view.Surface;

        z0 = r0.<android.view.ThreadedRenderer: boolean mInitialized>;

        r0.<android.view.ThreadedRenderer: boolean mInitialized> = 1;

        specialinvoke r0.<android.view.ThreadedRenderer: void updateEnabledState(android.view.Surface)>(r1);

        virtualinvoke r0.<android.view.ThreadedRenderer: void setSurface(android.view.Surface)>(r1);

        $z1 = z0 ^ 1;

        return $z1;
    }

    boolean initializeIfNeeded(int, int, android.view.View$AttachInfo, android.view.Surface, android.graphics.Rect) throws android.view.Surface$OutOfResourcesException
    {
        android.view.ThreadedRenderer r0;
        int i0, i1;
        android.view.View$AttachInfo r1;
        android.view.Surface r2;
        android.graphics.Rect r3;
        boolean $z0, $z1, $z2;

        r0 := @this: android.view.ThreadedRenderer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.view.View$AttachInfo;

        r2 := @parameter3: android.view.Surface;

        r3 := @parameter4: android.graphics.Rect;

        $z0 = virtualinvoke r0.<android.view.ThreadedRenderer: boolean isRequested()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<android.view.ThreadedRenderer: boolean isEnabled()>();

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<android.view.ThreadedRenderer: boolean initialize(android.view.Surface)>(r2);

        if $z2 == 0 goto label1;

        virtualinvoke r0.<android.view.ThreadedRenderer: void setup(int,int,android.view.View$AttachInfo,android.graphics.Rect)>(i0, i1, r1, r3);

        return 1;

     label1:
        return 0;
    }

    void invalidateRoot()
    {
        android.view.ThreadedRenderer r0;

        r0 := @this: android.view.ThreadedRenderer;

        r0.<android.view.ThreadedRenderer: boolean mRootNodeNeedsUpdate> = 1;

        return;
    }

    boolean isEnabled()
    {
        android.view.ThreadedRenderer r0;
        boolean $z0;

        r0 := @this: android.view.ThreadedRenderer;

        $z0 = r0.<android.view.ThreadedRenderer: boolean mEnabled>;

        return $z0;
    }

    boolean isRequested()
    {
        android.view.ThreadedRenderer r0;
        boolean $z0;

        r0 := @this: android.view.ThreadedRenderer;

        $z0 = r0.<android.view.ThreadedRenderer: boolean mRequested>;

        return $z0;
    }

    public boolean loadSystemProperties()
    {
        android.view.ThreadedRenderer r0;
        boolean z0;

        r0 := @this: android.view.ThreadedRenderer;

        z0 = specialinvoke r0.<android.graphics.HardwareRenderer: boolean loadSystemProperties()>();

        if z0 == 0 goto label1;

        virtualinvoke r0.<android.view.ThreadedRenderer: void invalidateRoot()>();

     label1:
        return z0;
    }

    void registerRtFrameCallback(android.graphics.HardwareRenderer$FrameDrawingCallback)
    {
        android.view.ThreadedRenderer r0;
        android.graphics.HardwareRenderer$FrameDrawingCallback r1;
        java.util.ArrayList $r2, $r3, $r4;

        r0 := @this: android.view.ThreadedRenderer;

        r1 := @parameter0: android.graphics.HardwareRenderer$FrameDrawingCallback;

        $r2 = r0.<android.view.ThreadedRenderer: java.util.ArrayList mNextRtFrameCallbacks>;

        if $r2 != null goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<android.view.ThreadedRenderer: java.util.ArrayList mNextRtFrameCallbacks> = $r4;

     label1:
        $r3 = r0.<android.view.ThreadedRenderer: java.util.ArrayList mNextRtFrameCallbacks>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        return;
    }

    void setEnabled(boolean)
    {
        android.view.ThreadedRenderer r0;
        boolean z0;

        r0 := @this: android.view.ThreadedRenderer;

        z0 := @parameter0: boolean;

        r0.<android.view.ThreadedRenderer: boolean mEnabled> = z0;

        return;
    }

    void setLightCenter(android.view.View$AttachInfo)
    {
        android.view.ThreadedRenderer r0;
        android.view.View$AttachInfo r1;
        android.graphics.Point r2;
        android.view.Display $r3;
        int $i0, $i1, $i2;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8;

        r0 := @this: android.view.ThreadedRenderer;

        r1 := @parameter0: android.view.View$AttachInfo;

        r2 = r1.<android.view.View$AttachInfo: android.graphics.Point mPoint>;

        $r3 = r1.<android.view.View$AttachInfo: android.view.Display mDisplay>;

        virtualinvoke $r3.<android.view.Display: void getRealSize(android.graphics.Point)>(r2);

        $i0 = r2.<android.graphics.Point: int x>;

        $f0 = (float) $i0;

        $f2 = $f0 / 2.0F;

        $i1 = r1.<android.view.View$AttachInfo: int mWindowLeft>;

        $f1 = (float) $i1;

        $f8 = $f2 - $f1;

        $f4 = r0.<android.view.ThreadedRenderer: float mLightY>;

        $i2 = r1.<android.view.View$AttachInfo: int mWindowTop>;

        $f3 = (float) $i2;

        $f7 = $f4 - $f3;

        $f6 = r0.<android.view.ThreadedRenderer: float mLightZ>;

        $f5 = r0.<android.view.ThreadedRenderer: float mLightRadius>;

        virtualinvoke r0.<android.view.ThreadedRenderer: void setLightSourceGeometry(float,float,float,float)>($f8, $f7, $f6, $f5);

        return;
    }

    void setRequested(boolean)
    {
        android.view.ThreadedRenderer r0;
        boolean z0;

        r0 := @this: android.view.ThreadedRenderer;

        z0 := @parameter0: boolean;

        r0.<android.view.ThreadedRenderer: boolean mRequested> = z0;

        return;
    }

    public void setSurface(android.view.Surface)
    {
        android.view.ThreadedRenderer r0;
        android.view.Surface r1;
        boolean $z0;

        r0 := @this: android.view.ThreadedRenderer;

        r1 := @parameter0: android.view.Surface;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<android.view.Surface: boolean isValid()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<android.graphics.HardwareRenderer: void setSurface(android.view.Surface)>(r1);

        goto label2;

     label1:
        specialinvoke r0.<android.graphics.HardwareRenderer: void setSurface(android.view.Surface)>(null);

     label2:
        return;
    }

    void setup(int, int, android.view.View$AttachInfo, android.graphics.Rect)
    {
        android.view.ThreadedRenderer r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21;
        android.view.View$AttachInfo r1;
        android.graphics.Rect r2;
        android.graphics.RenderNode $r3;

        r0 := @this: android.view.ThreadedRenderer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.view.View$AttachInfo;

        r2 := @parameter3: android.graphics.Rect;

        r0.<android.view.ThreadedRenderer: int mWidth> = i0;

        r0.<android.view.ThreadedRenderer: int mHeight> = i1;

        if r2 == null goto label2;

        $i2 = r2.<android.graphics.Rect: int left>;

        if $i2 != 0 goto label1;

        $i3 = r2.<android.graphics.Rect: int right>;

        if $i3 != 0 goto label1;

        $i4 = r2.<android.graphics.Rect: int top>;

        if $i4 != 0 goto label1;

        $i5 = r2.<android.graphics.Rect: int bottom>;

        if $i5 == 0 goto label2;

     label1:
        $i6 = r2.<android.graphics.Rect: int left>;

        r0.<android.view.ThreadedRenderer: int mInsetLeft> = $i6;

        $i7 = r2.<android.graphics.Rect: int top>;

        r0.<android.view.ThreadedRenderer: int mInsetTop> = $i7;

        $i8 = r0.<android.view.ThreadedRenderer: int mInsetLeft>;

        $i9 = $i8 + i0;

        $i10 = r2.<android.graphics.Rect: int right>;

        $i11 = $i9 + $i10;

        r0.<android.view.ThreadedRenderer: int mSurfaceWidth> = $i11;

        $i12 = r0.<android.view.ThreadedRenderer: int mInsetTop>;

        $i13 = $i12 + i1;

        $i14 = r2.<android.graphics.Rect: int bottom>;

        $i15 = $i13 + $i14;

        r0.<android.view.ThreadedRenderer: int mSurfaceHeight> = $i15;

        virtualinvoke r0.<android.view.ThreadedRenderer: void setOpaque(boolean)>(0);

        goto label3;

     label2:
        r0.<android.view.ThreadedRenderer: int mInsetLeft> = 0;

        r0.<android.view.ThreadedRenderer: int mInsetTop> = 0;

        r0.<android.view.ThreadedRenderer: int mSurfaceWidth> = i0;

        r0.<android.view.ThreadedRenderer: int mSurfaceHeight> = i1;

     label3:
        $r3 = r0.<android.view.ThreadedRenderer: android.graphics.RenderNode mRootNode>;

        $i16 = r0.<android.view.ThreadedRenderer: int mInsetLeft>;

        $i17 = neg $i16;

        $i18 = r0.<android.view.ThreadedRenderer: int mInsetTop>;

        $i19 = neg $i18;

        $i20 = r0.<android.view.ThreadedRenderer: int mSurfaceWidth>;

        $i21 = r0.<android.view.ThreadedRenderer: int mSurfaceHeight>;

        virtualinvoke $r3.<android.graphics.RenderNode: boolean setLeftTopRightBottom(int,int,int,int)>($i17, $i19, $i20, $i21);

        virtualinvoke r0.<android.view.ThreadedRenderer: void setLightCenter(android.view.View$AttachInfo)>(r1);

        return;
    }

    void updateSurface(android.view.Surface) throws android.view.Surface$OutOfResourcesException
    {
        android.view.ThreadedRenderer r0;
        android.view.Surface r1;

        r0 := @this: android.view.ThreadedRenderer;

        r1 := @parameter0: android.view.Surface;

        specialinvoke r0.<android.view.ThreadedRenderer: void updateEnabledState(android.view.Surface)>(r1);

        virtualinvoke r0.<android.view.ThreadedRenderer: void setSurface(android.view.Surface)>(r1);

        return;
    }
}
