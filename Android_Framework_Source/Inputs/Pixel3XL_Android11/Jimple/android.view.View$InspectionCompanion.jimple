public final class android.view.View$InspectionCompanion extends java.lang.Object implements android.view.inspector.InspectionCompanion
{
    private int mAccessibilityFocusedId;
    private int mAccessibilityHeadingId;
    private int mAccessibilityLiveRegionId;
    private int mAccessibilityPaneTitleId;
    private int mAccessibilityTraversalAfterId;
    private int mAccessibilityTraversalBeforeId;
    private int mActivatedId;
    private int mAlphaId;
    private int mAutofillHintsId;
    private int mBackgroundId;
    private int mBackgroundTintId;
    private int mBackgroundTintModeId;
    private int mBaselineId;
    private int mClickableId;
    private int mContentDescriptionId;
    private int mContextClickableId;
    private int mDefaultFocusHighlightEnabledId;
    private int mDrawingCacheQualityId;
    private int mDuplicateParentStateId;
    private int mElevationId;
    private int mEnabledId;
    private int mFadingEdgeLengthId;
    private int mFilterTouchesWhenObscuredId;
    private int mFitsSystemWindowsId;
    private int mFocusableId;
    private int mFocusableInTouchModeId;
    private int mFocusedByDefaultId;
    private int mFocusedId;
    private int mForceDarkAllowedId;
    private int mForegroundGravityId;
    private int mForegroundId;
    private int mForegroundTintId;
    private int mForegroundTintModeId;
    private int mHapticFeedbackEnabledId;
    private int mIdId;
    private int mImportantForAccessibilityId;
    private int mImportantForAutofillId;
    private int mImportantForContentCaptureId;
    private int mIsScrollContainerId;
    private int mKeepScreenOnId;
    private int mKeyboardNavigationClusterId;
    private int mLabelForId;
    private int mLayerTypeId;
    private int mLayoutDirectionId;
    private int mLongClickableId;
    private int mMinHeightId;
    private int mMinWidthId;
    private int mNestedScrollingEnabledId;
    private int mNextClusterForwardId;
    private int mNextFocusDownId;
    private int mNextFocusForwardId;
    private int mNextFocusLeftId;
    private int mNextFocusRightId;
    private int mNextFocusUpId;
    private int mOutlineAmbientShadowColorId;
    private int mOutlineProviderId;
    private int mOutlineSpotShadowColorId;
    private int mOverScrollModeId;
    private int mPaddingBottomId;
    private int mPaddingLeftId;
    private int mPaddingRightId;
    private int mPaddingTopId;
    private int mPointerIconId;
    private int mPressedId;
    private boolean mPropertiesMapped;
    private int mRawLayoutDirectionId;
    private int mRawTextAlignmentId;
    private int mRawTextDirectionId;
    private int mRequiresFadingEdgeId;
    private int mRotationId;
    private int mRotationXId;
    private int mRotationYId;
    private int mSaveEnabledId;
    private int mScaleXId;
    private int mScaleYId;
    private int mScreenReaderFocusableId;
    private int mScrollIndicatorsId;
    private int mScrollXId;
    private int mScrollYId;
    private int mScrollbarDefaultDelayBeforeFadeId;
    private int mScrollbarFadeDurationId;
    private int mScrollbarSizeId;
    private int mScrollbarStyleId;
    private int mSelectedId;
    private int mSolidColorId;
    private int mSoundEffectsEnabledId;
    private int mStateListAnimatorId;
    private int mTagId;
    private int mTextAlignmentId;
    private int mTextDirectionId;
    private int mTooltipTextId;
    private int mTransformPivotXId;
    private int mTransformPivotYId;
    private int mTransitionNameId;
    private int mTranslationXId;
    private int mTranslationYId;
    private int mTranslationZId;
    private int mVisibilityId;

    public void <init>()
    {
        android.view.View$InspectionCompanion r0;

        r0 := @this: android.view.View$InspectionCompanion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.view.View$InspectionCompanion: boolean mPropertiesMapped> = 0;

        return;
    }

    public void mapProperties(android.view.inspector.PropertyMapper)
    {
        android.view.View$InspectionCompanion r0;
        android.view.inspector.PropertyMapper r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96;
        android.util.SparseArray $r2, $r5, $r8, $r11, $r14, $r17, $r20, $r23, $r26, $r29, $r32, $r35, $r44, $r47, $r50, $r53;
        android.view._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI $r4, $r7, $r10, $r13, $r16, $r19, $r22, $r25, $r28, $r31, $r34, $r37, $r46, $r49, $r52, $r55;
        android.view.inspector.IntFlagMapping $r38, $r41;
        android.view._$$Lambda$gFNlJIKfxqleu304aRWP5R5v1yY $r40, $r43;

        r0 := @this: android.view.View$InspectionCompanion;

        r1 := @parameter0: android.view.inspector.PropertyMapper;

        $i0 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("accessibilityFocused", 0);

        r0.<android.view.View$InspectionCompanion: int mAccessibilityFocusedId> = $i0;

        $i1 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("accessibilityHeading", 16844160);

        r0.<android.view.View$InspectionCompanion: int mAccessibilityHeadingId> = $i1;

        $r2 = new android.util.SparseArray;

        specialinvoke $r2.<android.util.SparseArray: void <init>()>();

        virtualinvoke $r2.<android.util.SparseArray: void put(int,java.lang.Object)>(0, "none");

        virtualinvoke $r2.<android.util.SparseArray: void put(int,java.lang.Object)>(1, "polite");

        virtualinvoke $r2.<android.util.SparseArray: void put(int,java.lang.Object)>(2, "assertive");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2);

        $r4 = new android.view._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI;

        specialinvoke $r4.<android.view._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI: void <init>(android.util.SparseArray)>($r2);

        $i2 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapIntEnum(java.lang.String,int,java.util.function.IntFunction)>("accessibilityLiveRegion", 16843758, $r4);

        r0.<android.view.View$InspectionCompanion: int mAccessibilityLiveRegionId> = $i2;

        $i3 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapObject(java.lang.String,int)>("accessibilityPaneTitle", 16844156);

        r0.<android.view.View$InspectionCompanion: int mAccessibilityPaneTitleId> = $i3;

        $i4 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapResourceId(java.lang.String,int)>("accessibilityTraversalAfter", 16843986);

        r0.<android.view.View$InspectionCompanion: int mAccessibilityTraversalAfterId> = $i4;

        $i5 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapResourceId(java.lang.String,int)>("accessibilityTraversalBefore", 16843985);

        r0.<android.view.View$InspectionCompanion: int mAccessibilityTraversalBeforeId> = $i5;

        $i6 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("activated", 0);

        r0.<android.view.View$InspectionCompanion: int mActivatedId> = $i6;

        $i7 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapFloat(java.lang.String,int)>("alpha", 16843551);

        r0.<android.view.View$InspectionCompanion: int mAlphaId> = $i7;

        $i8 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapObject(java.lang.String,int)>("autofillHints", 16844118);

        r0.<android.view.View$InspectionCompanion: int mAutofillHintsId> = $i8;

        $i9 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapObject(java.lang.String,int)>("background", 16842964);

        r0.<android.view.View$InspectionCompanion: int mBackgroundId> = $i9;

        $i10 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapObject(java.lang.String,int)>("backgroundTint", 16843883);

        r0.<android.view.View$InspectionCompanion: int mBackgroundTintId> = $i10;

        $i11 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapObject(java.lang.String,int)>("backgroundTintMode", 16843884);

        r0.<android.view.View$InspectionCompanion: int mBackgroundTintModeId> = $i11;

        $i12 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapInt(java.lang.String,int)>("baseline", 16843548);

        r0.<android.view.View$InspectionCompanion: int mBaselineId> = $i12;

        $i13 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("clickable", 16842981);

        r0.<android.view.View$InspectionCompanion: int mClickableId> = $i13;

        $i14 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapObject(java.lang.String,int)>("contentDescription", 16843379);

        r0.<android.view.View$InspectionCompanion: int mContentDescriptionId> = $i14;

        $i15 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("contextClickable", 16844007);

        r0.<android.view.View$InspectionCompanion: int mContextClickableId> = $i15;

        $i16 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("defaultFocusHighlightEnabled", 16844130);

        r0.<android.view.View$InspectionCompanion: int mDefaultFocusHighlightEnabledId> = $i16;

        $r5 = new android.util.SparseArray;

        specialinvoke $r5.<android.util.SparseArray: void <init>()>();

        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(0, "auto");

        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(524288, "low");

        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(1048576, "high");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r5);

        $r7 = new android.view._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI;

        specialinvoke $r7.<android.view._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI: void <init>(android.util.SparseArray)>($r5);

        $i17 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapIntEnum(java.lang.String,int,java.util.function.IntFunction)>("drawingCacheQuality", 16842984, $r7);

        r0.<android.view.View$InspectionCompanion: int mDrawingCacheQualityId> = $i17;

        $i18 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("duplicateParentState", 16842985);

        r0.<android.view.View$InspectionCompanion: int mDuplicateParentStateId> = $i18;

        $i19 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapFloat(java.lang.String,int)>("elevation", 16843840);

        r0.<android.view.View$InspectionCompanion: int mElevationId> = $i19;

        $i20 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("enabled", 16842766);

        r0.<android.view.View$InspectionCompanion: int mEnabledId> = $i20;

        $i21 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapInt(java.lang.String,int)>("fadingEdgeLength", 16842976);

        r0.<android.view.View$InspectionCompanion: int mFadingEdgeLengthId> = $i21;

        $i22 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("filterTouchesWhenObscured", 16843460);

        r0.<android.view.View$InspectionCompanion: int mFilterTouchesWhenObscuredId> = $i22;

        $i23 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("fitsSystemWindows", 16842973);

        r0.<android.view.View$InspectionCompanion: int mFitsSystemWindowsId> = $i23;

        $r8 = new android.util.SparseArray;

        specialinvoke $r8.<android.util.SparseArray: void <init>()>();

        virtualinvoke $r8.<android.util.SparseArray: void put(int,java.lang.Object)>(0, "false");

        virtualinvoke $r8.<android.util.SparseArray: void put(int,java.lang.Object)>(1, "true");

        virtualinvoke $r8.<android.util.SparseArray: void put(int,java.lang.Object)>(16, "auto");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r8);

        $r10 = new android.view._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI;

        specialinvoke $r10.<android.view._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI: void <init>(android.util.SparseArray)>($r8);

        $i24 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapIntEnum(java.lang.String,int,java.util.function.IntFunction)>("focusable", 16842970, $r10);

        r0.<android.view.View$InspectionCompanion: int mFocusableId> = $i24;

        $i25 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("focusableInTouchMode", 16842971);

        r0.<android.view.View$InspectionCompanion: int mFocusableInTouchModeId> = $i25;

        $i26 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("focused", 0);

        r0.<android.view.View$InspectionCompanion: int mFocusedId> = $i26;

        $i27 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("focusedByDefault", 16844100);

        r0.<android.view.View$InspectionCompanion: int mFocusedByDefaultId> = $i27;

        $i28 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("forceDarkAllowed", 16844172);

        r0.<android.view.View$InspectionCompanion: int mForceDarkAllowedId> = $i28;

        $i29 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapObject(java.lang.String,int)>("foreground", 16843017);

        r0.<android.view.View$InspectionCompanion: int mForegroundId> = $i29;

        $i30 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapGravity(java.lang.String,int)>("foregroundGravity", 16843264);

        r0.<android.view.View$InspectionCompanion: int mForegroundGravityId> = $i30;

        $i31 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapObject(java.lang.String,int)>("foregroundTint", 16843885);

        r0.<android.view.View$InspectionCompanion: int mForegroundTintId> = $i31;

        $i32 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapObject(java.lang.String,int)>("foregroundTintMode", 16843886);

        r0.<android.view.View$InspectionCompanion: int mForegroundTintModeId> = $i32;

        $i33 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("hapticFeedbackEnabled", 16843358);

        r0.<android.view.View$InspectionCompanion: int mHapticFeedbackEnabledId> = $i33;

        $i34 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapResourceId(java.lang.String,int)>("id", 16842960);

        r0.<android.view.View$InspectionCompanion: int mIdId> = $i34;

        $r11 = new android.util.SparseArray;

        specialinvoke $r11.<android.util.SparseArray: void <init>()>();

        virtualinvoke $r11.<android.util.SparseArray: void put(int,java.lang.Object)>(0, "auto");

        virtualinvoke $r11.<android.util.SparseArray: void put(int,java.lang.Object)>(1, "yes");

        virtualinvoke $r11.<android.util.SparseArray: void put(int,java.lang.Object)>(2, "no");

        virtualinvoke $r11.<android.util.SparseArray: void put(int,java.lang.Object)>(4, "noHideDescendants");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r11);

        $r13 = new android.view._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI;

        specialinvoke $r13.<android.view._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI: void <init>(android.util.SparseArray)>($r11);

        $i35 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapIntEnum(java.lang.String,int,java.util.function.IntFunction)>("importantForAccessibility", 16843690, $r13);

        r0.<android.view.View$InspectionCompanion: int mImportantForAccessibilityId> = $i35;

        $r14 = new android.util.SparseArray;

        specialinvoke $r14.<android.util.SparseArray: void <init>()>();

        virtualinvoke $r14.<android.util.SparseArray: void put(int,java.lang.Object)>(0, "auto");

        virtualinvoke $r14.<android.util.SparseArray: void put(int,java.lang.Object)>(1, "yes");

        virtualinvoke $r14.<android.util.SparseArray: void put(int,java.lang.Object)>(2, "no");

        virtualinvoke $r14.<android.util.SparseArray: void put(int,java.lang.Object)>(4, "yesExcludeDescendants");

        virtualinvoke $r14.<android.util.SparseArray: void put(int,java.lang.Object)>(8, "noExcludeDescendants");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r14);

        $r16 = new android.view._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI;

        specialinvoke $r16.<android.view._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI: void <init>(android.util.SparseArray)>($r14);

        $i36 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapIntEnum(java.lang.String,int,java.util.function.IntFunction)>("importantForAutofill", 16844120, $r16);

        r0.<android.view.View$InspectionCompanion: int mImportantForAutofillId> = $i36;

        $r17 = new android.util.SparseArray;

        specialinvoke $r17.<android.util.SparseArray: void <init>()>();

        virtualinvoke $r17.<android.util.SparseArray: void put(int,java.lang.Object)>(0, "auto");

        virtualinvoke $r17.<android.util.SparseArray: void put(int,java.lang.Object)>(1, "yes");

        virtualinvoke $r17.<android.util.SparseArray: void put(int,java.lang.Object)>(2, "no");

        virtualinvoke $r17.<android.util.SparseArray: void put(int,java.lang.Object)>(4, "yesExcludeDescendants");

        virtualinvoke $r17.<android.util.SparseArray: void put(int,java.lang.Object)>(8, "noExcludeDescendants");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r17);

        $r19 = new android.view._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI;

        specialinvoke $r19.<android.view._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI: void <init>(android.util.SparseArray)>($r17);

        $i37 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapIntEnum(java.lang.String,int,java.util.function.IntFunction)>("importantForContentCapture", 16844295, $r19);

        r0.<android.view.View$InspectionCompanion: int mImportantForContentCaptureId> = $i37;

        $i38 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("isScrollContainer", 16843342);

        r0.<android.view.View$InspectionCompanion: int mIsScrollContainerId> = $i38;

        $i39 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("keepScreenOn", 16843286);

        r0.<android.view.View$InspectionCompanion: int mKeepScreenOnId> = $i39;

        $i40 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("keyboardNavigationCluster", 16844096);

        r0.<android.view.View$InspectionCompanion: int mKeyboardNavigationClusterId> = $i40;

        $i41 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapResourceId(java.lang.String,int)>("labelFor", 16843718);

        r0.<android.view.View$InspectionCompanion: int mLabelForId> = $i41;

        $r20 = new android.util.SparseArray;

        specialinvoke $r20.<android.util.SparseArray: void <init>()>();

        virtualinvoke $r20.<android.util.SparseArray: void put(int,java.lang.Object)>(0, "none");

        virtualinvoke $r20.<android.util.SparseArray: void put(int,java.lang.Object)>(1, "software");

        virtualinvoke $r20.<android.util.SparseArray: void put(int,java.lang.Object)>(2, "hardware");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r20);

        $r22 = new android.view._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI;

        specialinvoke $r22.<android.view._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI: void <init>(android.util.SparseArray)>($r20);

        $i42 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapIntEnum(java.lang.String,int,java.util.function.IntFunction)>("layerType", 16843604, $r22);

        r0.<android.view.View$InspectionCompanion: int mLayerTypeId> = $i42;

        $r23 = new android.util.SparseArray;

        specialinvoke $r23.<android.util.SparseArray: void <init>()>();

        virtualinvoke $r23.<android.util.SparseArray: void put(int,java.lang.Object)>(0, "ltr");

        virtualinvoke $r23.<android.util.SparseArray: void put(int,java.lang.Object)>(1, "rtl");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r23);

        $r25 = new android.view._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI;

        specialinvoke $r25.<android.view._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI: void <init>(android.util.SparseArray)>($r23);

        $i43 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapIntEnum(java.lang.String,int,java.util.function.IntFunction)>("layoutDirection", 16843698, $r25);

        r0.<android.view.View$InspectionCompanion: int mLayoutDirectionId> = $i43;

        $i44 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("longClickable", 16842982);

        r0.<android.view.View$InspectionCompanion: int mLongClickableId> = $i44;

        $i45 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapInt(java.lang.String,int)>("minHeight", 16843072);

        r0.<android.view.View$InspectionCompanion: int mMinHeightId> = $i45;

        $i46 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapInt(java.lang.String,int)>("minWidth", 16843071);

        r0.<android.view.View$InspectionCompanion: int mMinWidthId> = $i46;

        $i47 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("nestedScrollingEnabled", 16843830);

        r0.<android.view.View$InspectionCompanion: int mNestedScrollingEnabledId> = $i47;

        $i48 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapResourceId(java.lang.String,int)>("nextClusterForward", 16844098);

        r0.<android.view.View$InspectionCompanion: int mNextClusterForwardId> = $i48;

        $i49 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapResourceId(java.lang.String,int)>("nextFocusDown", 16842980);

        r0.<android.view.View$InspectionCompanion: int mNextFocusDownId> = $i49;

        $i50 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapResourceId(java.lang.String,int)>("nextFocusForward", 16843580);

        r0.<android.view.View$InspectionCompanion: int mNextFocusForwardId> = $i50;

        $i51 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapResourceId(java.lang.String,int)>("nextFocusLeft", 16842977);

        r0.<android.view.View$InspectionCompanion: int mNextFocusLeftId> = $i51;

        $i52 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapResourceId(java.lang.String,int)>("nextFocusRight", 16842978);

        r0.<android.view.View$InspectionCompanion: int mNextFocusRightId> = $i52;

        $i53 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapResourceId(java.lang.String,int)>("nextFocusUp", 16842979);

        r0.<android.view.View$InspectionCompanion: int mNextFocusUpId> = $i53;

        $i54 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapColor(java.lang.String,int)>("outlineAmbientShadowColor", 16844162);

        r0.<android.view.View$InspectionCompanion: int mOutlineAmbientShadowColorId> = $i54;

        $i55 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapObject(java.lang.String,int)>("outlineProvider", 16843960);

        r0.<android.view.View$InspectionCompanion: int mOutlineProviderId> = $i55;

        $i56 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapColor(java.lang.String,int)>("outlineSpotShadowColor", 16844161);

        r0.<android.view.View$InspectionCompanion: int mOutlineSpotShadowColorId> = $i56;

        $r26 = new android.util.SparseArray;

        specialinvoke $r26.<android.util.SparseArray: void <init>()>();

        virtualinvoke $r26.<android.util.SparseArray: void put(int,java.lang.Object)>(0, "always");

        virtualinvoke $r26.<android.util.SparseArray: void put(int,java.lang.Object)>(1, "ifContentScrolls");

        virtualinvoke $r26.<android.util.SparseArray: void put(int,java.lang.Object)>(2, "never");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r26);

        $r28 = new android.view._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI;

        specialinvoke $r28.<android.view._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI: void <init>(android.util.SparseArray)>($r26);

        $i57 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapIntEnum(java.lang.String,int,java.util.function.IntFunction)>("overScrollMode", 16843457, $r28);

        r0.<android.view.View$InspectionCompanion: int mOverScrollModeId> = $i57;

        $i58 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapInt(java.lang.String,int)>("paddingBottom", 16842969);

        r0.<android.view.View$InspectionCompanion: int mPaddingBottomId> = $i58;

        $i59 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapInt(java.lang.String,int)>("paddingLeft", 16842966);

        r0.<android.view.View$InspectionCompanion: int mPaddingLeftId> = $i59;

        $i60 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapInt(java.lang.String,int)>("paddingRight", 16842968);

        r0.<android.view.View$InspectionCompanion: int mPaddingRightId> = $i60;

        $i61 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapInt(java.lang.String,int)>("paddingTop", 16842967);

        r0.<android.view.View$InspectionCompanion: int mPaddingTopId> = $i61;

        $i62 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapObject(java.lang.String,int)>("pointerIcon", 16844041);

        r0.<android.view.View$InspectionCompanion: int mPointerIconId> = $i62;

        $i63 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("pressed", 0);

        r0.<android.view.View$InspectionCompanion: int mPressedId> = $i63;

        $r29 = new android.util.SparseArray;

        specialinvoke $r29.<android.util.SparseArray: void <init>()>();

        virtualinvoke $r29.<android.util.SparseArray: void put(int,java.lang.Object)>(0, "ltr");

        virtualinvoke $r29.<android.util.SparseArray: void put(int,java.lang.Object)>(1, "rtl");

        virtualinvoke $r29.<android.util.SparseArray: void put(int,java.lang.Object)>(2, "inherit");

        virtualinvoke $r29.<android.util.SparseArray: void put(int,java.lang.Object)>(3, "locale");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r29);

        $r31 = new android.view._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI;

        specialinvoke $r31.<android.view._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI: void <init>(android.util.SparseArray)>($r29);

        $i64 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapIntEnum(java.lang.String,int,java.util.function.IntFunction)>("rawLayoutDirection", 0, $r31);

        r0.<android.view.View$InspectionCompanion: int mRawLayoutDirectionId> = $i64;

        $r32 = new android.util.SparseArray;

        specialinvoke $r32.<android.util.SparseArray: void <init>()>();

        virtualinvoke $r32.<android.util.SparseArray: void put(int,java.lang.Object)>(0, "inherit");

        virtualinvoke $r32.<android.util.SparseArray: void put(int,java.lang.Object)>(1, "gravity");

        virtualinvoke $r32.<android.util.SparseArray: void put(int,java.lang.Object)>(2, "textStart");

        virtualinvoke $r32.<android.util.SparseArray: void put(int,java.lang.Object)>(3, "textEnd");

        virtualinvoke $r32.<android.util.SparseArray: void put(int,java.lang.Object)>(4, "center");

        virtualinvoke $r32.<android.util.SparseArray: void put(int,java.lang.Object)>(5, "viewStart");

        virtualinvoke $r32.<android.util.SparseArray: void put(int,java.lang.Object)>(6, "viewEnd");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r32);

        $r34 = new android.view._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI;

        specialinvoke $r34.<android.view._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI: void <init>(android.util.SparseArray)>($r32);

        $i65 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapIntEnum(java.lang.String,int,java.util.function.IntFunction)>("rawTextAlignment", 0, $r34);

        r0.<android.view.View$InspectionCompanion: int mRawTextAlignmentId> = $i65;

        $r35 = new android.util.SparseArray;

        specialinvoke $r35.<android.util.SparseArray: void <init>()>();

        virtualinvoke $r35.<android.util.SparseArray: void put(int,java.lang.Object)>(0, "inherit");

        virtualinvoke $r35.<android.util.SparseArray: void put(int,java.lang.Object)>(1, "firstStrong");

        virtualinvoke $r35.<android.util.SparseArray: void put(int,java.lang.Object)>(2, "anyRtl");

        virtualinvoke $r35.<android.util.SparseArray: void put(int,java.lang.Object)>(3, "ltr");

        virtualinvoke $r35.<android.util.SparseArray: void put(int,java.lang.Object)>(4, "rtl");

        virtualinvoke $r35.<android.util.SparseArray: void put(int,java.lang.Object)>(5, "locale");

        virtualinvoke $r35.<android.util.SparseArray: void put(int,java.lang.Object)>(6, "firstStrongLtr");

        virtualinvoke $r35.<android.util.SparseArray: void put(int,java.lang.Object)>(7, "firstStrongRtl");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r35);

        $r37 = new android.view._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI;

        specialinvoke $r37.<android.view._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI: void <init>(android.util.SparseArray)>($r35);

        $i66 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapIntEnum(java.lang.String,int,java.util.function.IntFunction)>("rawTextDirection", 0, $r37);

        r0.<android.view.View$InspectionCompanion: int mRawTextDirectionId> = $i66;

        $r38 = new android.view.inspector.IntFlagMapping;

        specialinvoke $r38.<android.view.inspector.IntFlagMapping: void <init>()>();

        virtualinvoke $r38.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(4096, 4096, "horizontal");

        virtualinvoke $r38.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(12288, 0, "none");

        virtualinvoke $r38.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(8192, 8192, "vertical");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r38);

        $r40 = new android.view._$$Lambda$gFNlJIKfxqleu304aRWP5R5v1yY;

        specialinvoke $r40.<android.view._$$Lambda$gFNlJIKfxqleu304aRWP5R5v1yY: void <init>(android.view.inspector.IntFlagMapping)>($r38);

        $i67 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapIntFlag(java.lang.String,int,java.util.function.IntFunction)>("requiresFadingEdge", 16843685, $r40);

        r0.<android.view.View$InspectionCompanion: int mRequiresFadingEdgeId> = $i67;

        $i68 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapFloat(java.lang.String,int)>("rotation", 16843558);

        r0.<android.view.View$InspectionCompanion: int mRotationId> = $i68;

        $i69 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapFloat(java.lang.String,int)>("rotationX", 16843559);

        r0.<android.view.View$InspectionCompanion: int mRotationXId> = $i69;

        $i70 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapFloat(java.lang.String,int)>("rotationY", 16843560);

        r0.<android.view.View$InspectionCompanion: int mRotationYId> = $i70;

        $i71 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("saveEnabled", 16842983);

        r0.<android.view.View$InspectionCompanion: int mSaveEnabledId> = $i71;

        $i72 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapFloat(java.lang.String,int)>("scaleX", 16843556);

        r0.<android.view.View$InspectionCompanion: int mScaleXId> = $i72;

        $i73 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapFloat(java.lang.String,int)>("scaleY", 16843557);

        r0.<android.view.View$InspectionCompanion: int mScaleYId> = $i73;

        $i74 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("screenReaderFocusable", 16844148);

        r0.<android.view.View$InspectionCompanion: int mScreenReaderFocusableId> = $i74;

        $r41 = new android.view.inspector.IntFlagMapping;

        specialinvoke $r41.<android.view.inspector.IntFlagMapping: void <init>()>();

        virtualinvoke $r41.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(2, 2, "bottom");

        virtualinvoke $r41.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(32, 32, "end");

        virtualinvoke $r41.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(4, 4, "left");

        virtualinvoke $r41.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(-1, 0, "none");

        virtualinvoke $r41.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(8, 8, "right");

        virtualinvoke $r41.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(16, 16, "start");

        virtualinvoke $r41.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(1, 1, "top");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r41);

        $r43 = new android.view._$$Lambda$gFNlJIKfxqleu304aRWP5R5v1yY;

        specialinvoke $r43.<android.view._$$Lambda$gFNlJIKfxqleu304aRWP5R5v1yY: void <init>(android.view.inspector.IntFlagMapping)>($r41);

        $i75 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapIntFlag(java.lang.String,int,java.util.function.IntFunction)>("scrollIndicators", 16844006, $r43);

        r0.<android.view.View$InspectionCompanion: int mScrollIndicatorsId> = $i75;

        $i76 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapInt(java.lang.String,int)>("scrollX", 16842962);

        r0.<android.view.View$InspectionCompanion: int mScrollXId> = $i76;

        $i77 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapInt(java.lang.String,int)>("scrollY", 16842963);

        r0.<android.view.View$InspectionCompanion: int mScrollYId> = $i77;

        $i78 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapInt(java.lang.String,int)>("scrollbarDefaultDelayBeforeFade", 16843433);

        r0.<android.view.View$InspectionCompanion: int mScrollbarDefaultDelayBeforeFadeId> = $i78;

        $i79 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapInt(java.lang.String,int)>("scrollbarFadeDuration", 16843432);

        r0.<android.view.View$InspectionCompanion: int mScrollbarFadeDurationId> = $i79;

        $i80 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapInt(java.lang.String,int)>("scrollbarSize", 16842851);

        r0.<android.view.View$InspectionCompanion: int mScrollbarSizeId> = $i80;

        $r44 = new android.util.SparseArray;

        specialinvoke $r44.<android.util.SparseArray: void <init>()>();

        virtualinvoke $r44.<android.util.SparseArray: void put(int,java.lang.Object)>(0, "insideOverlay");

        virtualinvoke $r44.<android.util.SparseArray: void put(int,java.lang.Object)>(16777216, "insideInset");

        virtualinvoke $r44.<android.util.SparseArray: void put(int,java.lang.Object)>(33554432, "outsideOverlay");

        virtualinvoke $r44.<android.util.SparseArray: void put(int,java.lang.Object)>(50331648, "outsideInset");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r44);

        $r46 = new android.view._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI;

        specialinvoke $r46.<android.view._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI: void <init>(android.util.SparseArray)>($r44);

        $i81 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapIntEnum(java.lang.String,int,java.util.function.IntFunction)>("scrollbarStyle", 16842879, $r46);

        r0.<android.view.View$InspectionCompanion: int mScrollbarStyleId> = $i81;

        $i82 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("selected", 0);

        r0.<android.view.View$InspectionCompanion: int mSelectedId> = $i82;

        $i83 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapColor(java.lang.String,int)>("solidColor", 16843594);

        r0.<android.view.View$InspectionCompanion: int mSolidColorId> = $i83;

        $i84 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("soundEffectsEnabled", 16843285);

        r0.<android.view.View$InspectionCompanion: int mSoundEffectsEnabledId> = $i84;

        $i85 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapObject(java.lang.String,int)>("stateListAnimator", 16843848);

        r0.<android.view.View$InspectionCompanion: int mStateListAnimatorId> = $i85;

        $i86 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapObject(java.lang.String,int)>("tag", 16842961);

        r0.<android.view.View$InspectionCompanion: int mTagId> = $i86;

        $r47 = new android.util.SparseArray;

        specialinvoke $r47.<android.util.SparseArray: void <init>()>();

        virtualinvoke $r47.<android.util.SparseArray: void put(int,java.lang.Object)>(1, "gravity");

        virtualinvoke $r47.<android.util.SparseArray: void put(int,java.lang.Object)>(2, "textStart");

        virtualinvoke $r47.<android.util.SparseArray: void put(int,java.lang.Object)>(3, "textEnd");

        virtualinvoke $r47.<android.util.SparseArray: void put(int,java.lang.Object)>(4, "center");

        virtualinvoke $r47.<android.util.SparseArray: void put(int,java.lang.Object)>(5, "viewStart");

        virtualinvoke $r47.<android.util.SparseArray: void put(int,java.lang.Object)>(6, "viewEnd");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r47);

        $r49 = new android.view._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI;

        specialinvoke $r49.<android.view._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI: void <init>(android.util.SparseArray)>($r47);

        $i87 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapIntEnum(java.lang.String,int,java.util.function.IntFunction)>("textAlignment", 16843697, $r49);

        r0.<android.view.View$InspectionCompanion: int mTextAlignmentId> = $i87;

        $r50 = new android.util.SparseArray;

        specialinvoke $r50.<android.util.SparseArray: void <init>()>();

        virtualinvoke $r50.<android.util.SparseArray: void put(int,java.lang.Object)>(1, "firstStrong");

        virtualinvoke $r50.<android.util.SparseArray: void put(int,java.lang.Object)>(2, "anyRtl");

        virtualinvoke $r50.<android.util.SparseArray: void put(int,java.lang.Object)>(3, "ltr");

        virtualinvoke $r50.<android.util.SparseArray: void put(int,java.lang.Object)>(4, "rtl");

        virtualinvoke $r50.<android.util.SparseArray: void put(int,java.lang.Object)>(5, "locale");

        virtualinvoke $r50.<android.util.SparseArray: void put(int,java.lang.Object)>(6, "firstStrongLtr");

        virtualinvoke $r50.<android.util.SparseArray: void put(int,java.lang.Object)>(7, "firstStrongRtl");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r50);

        $r52 = new android.view._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI;

        specialinvoke $r52.<android.view._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI: void <init>(android.util.SparseArray)>($r50);

        $i88 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapIntEnum(java.lang.String,int,java.util.function.IntFunction)>("textDirection", 0, $r52);

        r0.<android.view.View$InspectionCompanion: int mTextDirectionId> = $i88;

        $i89 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapObject(java.lang.String,int)>("tooltipText", 16844084);

        r0.<android.view.View$InspectionCompanion: int mTooltipTextId> = $i89;

        $i90 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapFloat(java.lang.String,int)>("transformPivotX", 16843552);

        r0.<android.view.View$InspectionCompanion: int mTransformPivotXId> = $i90;

        $i91 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapFloat(java.lang.String,int)>("transformPivotY", 16843553);

        r0.<android.view.View$InspectionCompanion: int mTransformPivotYId> = $i91;

        $i92 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapObject(java.lang.String,int)>("transitionName", 16843776);

        r0.<android.view.View$InspectionCompanion: int mTransitionNameId> = $i92;

        $i93 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapFloat(java.lang.String,int)>("translationX", 16843554);

        r0.<android.view.View$InspectionCompanion: int mTranslationXId> = $i93;

        $i94 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapFloat(java.lang.String,int)>("translationY", 16843555);

        r0.<android.view.View$InspectionCompanion: int mTranslationYId> = $i94;

        $i95 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapFloat(java.lang.String,int)>("translationZ", 16843770);

        r0.<android.view.View$InspectionCompanion: int mTranslationZId> = $i95;

        $r53 = new android.util.SparseArray;

        specialinvoke $r53.<android.util.SparseArray: void <init>()>();

        virtualinvoke $r53.<android.util.SparseArray: void put(int,java.lang.Object)>(0, "visible");

        virtualinvoke $r53.<android.util.SparseArray: void put(int,java.lang.Object)>(4, "invisible");

        virtualinvoke $r53.<android.util.SparseArray: void put(int,java.lang.Object)>(8, "gone");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r53);

        $r55 = new android.view._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI;

        specialinvoke $r55.<android.view._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI: void <init>(android.util.SparseArray)>($r53);

        $i96 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapIntEnum(java.lang.String,int,java.util.function.IntFunction)>("visibility", 16842972, $r55);

        r0.<android.view.View$InspectionCompanion: int mVisibilityId> = $i96;

        r0.<android.view.View$InspectionCompanion: boolean mPropertiesMapped> = 1;

        return;
    }

    public void readProperties(android.view.View, android.view.inspector.PropertyReader)
    {
        android.view.View$InspectionCompanion r0;
        android.view.View r1;
        android.view.inspector.PropertyReader r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25;
        android.view.inspector.InspectionCompanion$UninitializedPropertyMapException $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141;
        java.lang.CharSequence $r4, $r9, $r17;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11;
        java.lang.String[] $r5;
        android.graphics.drawable.Drawable $r6, $r10;
        android.content.res.ColorStateList $r7, $r11;
        android.graphics.PorterDuff$Mode $r8, $r12;
        android.view.ViewOutlineProvider $r13;
        android.view.PointerIcon $r14;
        android.animation.StateListAnimator $r15;
        java.lang.Object $r16;
        java.lang.String $r18;

        r0 := @this: android.view.View$InspectionCompanion;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.inspector.PropertyReader;

        $z0 = r0.<android.view.View$InspectionCompanion: boolean mPropertiesMapped>;

        if $z0 == 0 goto label1;

        $i0 = r0.<android.view.View$InspectionCompanion: int mAccessibilityFocusedId>;

        $z1 = virtualinvoke r1.<android.view.View: boolean isAccessibilityFocused()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i0, $z1);

        $i1 = r0.<android.view.View$InspectionCompanion: int mAccessibilityHeadingId>;

        $z2 = virtualinvoke r1.<android.view.View: boolean isAccessibilityHeading()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i1, $z2);

        $i2 = r0.<android.view.View$InspectionCompanion: int mAccessibilityLiveRegionId>;

        $i3 = virtualinvoke r1.<android.view.View: int getAccessibilityLiveRegion()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readIntEnum(int,int)>($i2, $i3);

        $i4 = r0.<android.view.View$InspectionCompanion: int mAccessibilityPaneTitleId>;

        $r4 = virtualinvoke r1.<android.view.View: java.lang.CharSequence getAccessibilityPaneTitle()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readObject(int,java.lang.Object)>($i4, $r4);

        $i5 = r0.<android.view.View$InspectionCompanion: int mAccessibilityTraversalAfterId>;

        $i6 = virtualinvoke r1.<android.view.View: int getAccessibilityTraversalAfter()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readResourceId(int,int)>($i5, $i6);

        $i7 = r0.<android.view.View$InspectionCompanion: int mAccessibilityTraversalBeforeId>;

        $i8 = virtualinvoke r1.<android.view.View: int getAccessibilityTraversalBefore()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readResourceId(int,int)>($i7, $i8);

        $i9 = r0.<android.view.View$InspectionCompanion: int mActivatedId>;

        $z3 = virtualinvoke r1.<android.view.View: boolean isActivated()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i9, $z3);

        $i10 = r0.<android.view.View$InspectionCompanion: int mAlphaId>;

        $f0 = virtualinvoke r1.<android.view.View: float getAlpha()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readFloat(int,float)>($i10, $f0);

        $i11 = r0.<android.view.View$InspectionCompanion: int mAutofillHintsId>;

        $r5 = virtualinvoke r1.<android.view.View: java.lang.String[] getAutofillHints()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readObject(int,java.lang.Object)>($i11, $r5);

        $i12 = r0.<android.view.View$InspectionCompanion: int mBackgroundId>;

        $r6 = virtualinvoke r1.<android.view.View: android.graphics.drawable.Drawable getBackground()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readObject(int,java.lang.Object)>($i12, $r6);

        $i13 = r0.<android.view.View$InspectionCompanion: int mBackgroundTintId>;

        $r7 = virtualinvoke r1.<android.view.View: android.content.res.ColorStateList getBackgroundTintList()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readObject(int,java.lang.Object)>($i13, $r7);

        $i14 = r0.<android.view.View$InspectionCompanion: int mBackgroundTintModeId>;

        $r8 = virtualinvoke r1.<android.view.View: android.graphics.PorterDuff$Mode getBackgroundTintMode()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readObject(int,java.lang.Object)>($i14, $r8);

        $i15 = r0.<android.view.View$InspectionCompanion: int mBaselineId>;

        $i16 = virtualinvoke r1.<android.view.View: int getBaseline()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readInt(int,int)>($i15, $i16);

        $i17 = r0.<android.view.View$InspectionCompanion: int mClickableId>;

        $z4 = virtualinvoke r1.<android.view.View: boolean isClickable()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i17, $z4);

        $i18 = r0.<android.view.View$InspectionCompanion: int mContentDescriptionId>;

        $r9 = virtualinvoke r1.<android.view.View: java.lang.CharSequence getContentDescription()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readObject(int,java.lang.Object)>($i18, $r9);

        $i19 = r0.<android.view.View$InspectionCompanion: int mContextClickableId>;

        $z5 = virtualinvoke r1.<android.view.View: boolean isContextClickable()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i19, $z5);

        $i20 = r0.<android.view.View$InspectionCompanion: int mDefaultFocusHighlightEnabledId>;

        $z6 = virtualinvoke r1.<android.view.View: boolean getDefaultFocusHighlightEnabled()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i20, $z6);

        $i21 = r0.<android.view.View$InspectionCompanion: int mDrawingCacheQualityId>;

        $i22 = virtualinvoke r1.<android.view.View: int getDrawingCacheQuality()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readIntEnum(int,int)>($i21, $i22);

        $i23 = r0.<android.view.View$InspectionCompanion: int mDuplicateParentStateId>;

        $z7 = virtualinvoke r1.<android.view.View: boolean isDuplicateParentStateEnabled()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i23, $z7);

        $i24 = r0.<android.view.View$InspectionCompanion: int mElevationId>;

        $f1 = virtualinvoke r1.<android.view.View: float getElevation()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readFloat(int,float)>($i24, $f1);

        $i25 = r0.<android.view.View$InspectionCompanion: int mEnabledId>;

        $z8 = virtualinvoke r1.<android.view.View: boolean isEnabled()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i25, $z8);

        $i26 = r0.<android.view.View$InspectionCompanion: int mFadingEdgeLengthId>;

        $i27 = virtualinvoke r1.<android.view.View: int getFadingEdgeLength()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readInt(int,int)>($i26, $i27);

        $i28 = r0.<android.view.View$InspectionCompanion: int mFilterTouchesWhenObscuredId>;

        $z9 = virtualinvoke r1.<android.view.View: boolean getFilterTouchesWhenObscured()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i28, $z9);

        $i29 = r0.<android.view.View$InspectionCompanion: int mFitsSystemWindowsId>;

        $z10 = virtualinvoke r1.<android.view.View: boolean getFitsSystemWindows()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i29, $z10);

        $i30 = r0.<android.view.View$InspectionCompanion: int mFocusableId>;

        $i31 = virtualinvoke r1.<android.view.View: int getFocusable()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readIntEnum(int,int)>($i30, $i31);

        $i32 = r0.<android.view.View$InspectionCompanion: int mFocusableInTouchModeId>;

        $z11 = virtualinvoke r1.<android.view.View: boolean isFocusableInTouchMode()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i32, $z11);

        $i33 = r0.<android.view.View$InspectionCompanion: int mFocusedId>;

        $z12 = virtualinvoke r1.<android.view.View: boolean isFocused()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i33, $z12);

        $i34 = r0.<android.view.View$InspectionCompanion: int mFocusedByDefaultId>;

        $z13 = virtualinvoke r1.<android.view.View: boolean isFocusedByDefault()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i34, $z13);

        $i35 = r0.<android.view.View$InspectionCompanion: int mForceDarkAllowedId>;

        $z14 = virtualinvoke r1.<android.view.View: boolean isForceDarkAllowed()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i35, $z14);

        $i36 = r0.<android.view.View$InspectionCompanion: int mForegroundId>;

        $r10 = virtualinvoke r1.<android.view.View: android.graphics.drawable.Drawable getForeground()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readObject(int,java.lang.Object)>($i36, $r10);

        $i37 = r0.<android.view.View$InspectionCompanion: int mForegroundGravityId>;

        $i38 = virtualinvoke r1.<android.view.View: int getForegroundGravity()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readGravity(int,int)>($i37, $i38);

        $i39 = r0.<android.view.View$InspectionCompanion: int mForegroundTintId>;

        $r11 = virtualinvoke r1.<android.view.View: android.content.res.ColorStateList getForegroundTintList()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readObject(int,java.lang.Object)>($i39, $r11);

        $i40 = r0.<android.view.View$InspectionCompanion: int mForegroundTintModeId>;

        $r12 = virtualinvoke r1.<android.view.View: android.graphics.PorterDuff$Mode getForegroundTintMode()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readObject(int,java.lang.Object)>($i40, $r12);

        $i41 = r0.<android.view.View$InspectionCompanion: int mHapticFeedbackEnabledId>;

        $z15 = virtualinvoke r1.<android.view.View: boolean isHapticFeedbackEnabled()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i41, $z15);

        $i42 = r0.<android.view.View$InspectionCompanion: int mIdId>;

        $i43 = virtualinvoke r1.<android.view.View: int getId()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readResourceId(int,int)>($i42, $i43);

        $i44 = r0.<android.view.View$InspectionCompanion: int mImportantForAccessibilityId>;

        $i45 = virtualinvoke r1.<android.view.View: int getImportantForAccessibility()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readIntEnum(int,int)>($i44, $i45);

        $i46 = r0.<android.view.View$InspectionCompanion: int mImportantForAutofillId>;

        $i47 = virtualinvoke r1.<android.view.View: int getImportantForAutofill()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readIntEnum(int,int)>($i46, $i47);

        $i48 = r0.<android.view.View$InspectionCompanion: int mImportantForContentCaptureId>;

        $i49 = virtualinvoke r1.<android.view.View: int getImportantForContentCapture()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readIntEnum(int,int)>($i48, $i49);

        $i50 = r0.<android.view.View$InspectionCompanion: int mIsScrollContainerId>;

        $z16 = virtualinvoke r1.<android.view.View: boolean isScrollContainer()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i50, $z16);

        $i51 = r0.<android.view.View$InspectionCompanion: int mKeepScreenOnId>;

        $z17 = virtualinvoke r1.<android.view.View: boolean getKeepScreenOn()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i51, $z17);

        $i52 = r0.<android.view.View$InspectionCompanion: int mKeyboardNavigationClusterId>;

        $z18 = virtualinvoke r1.<android.view.View: boolean isKeyboardNavigationCluster()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i52, $z18);

        $i53 = r0.<android.view.View$InspectionCompanion: int mLabelForId>;

        $i54 = virtualinvoke r1.<android.view.View: int getLabelFor()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readResourceId(int,int)>($i53, $i54);

        $i55 = r0.<android.view.View$InspectionCompanion: int mLayerTypeId>;

        $i56 = virtualinvoke r1.<android.view.View: int getLayerType()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readIntEnum(int,int)>($i55, $i56);

        $i57 = r0.<android.view.View$InspectionCompanion: int mLayoutDirectionId>;

        $i58 = virtualinvoke r1.<android.view.View: int getLayoutDirection()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readIntEnum(int,int)>($i57, $i58);

        $i59 = r0.<android.view.View$InspectionCompanion: int mLongClickableId>;

        $z19 = virtualinvoke r1.<android.view.View: boolean isLongClickable()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i59, $z19);

        $i60 = r0.<android.view.View$InspectionCompanion: int mMinHeightId>;

        $i61 = virtualinvoke r1.<android.view.View: int getMinimumHeight()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readInt(int,int)>($i60, $i61);

        $i62 = r0.<android.view.View$InspectionCompanion: int mMinWidthId>;

        $i63 = virtualinvoke r1.<android.view.View: int getMinimumWidth()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readInt(int,int)>($i62, $i63);

        $i64 = r0.<android.view.View$InspectionCompanion: int mNestedScrollingEnabledId>;

        $z20 = virtualinvoke r1.<android.view.View: boolean isNestedScrollingEnabled()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i64, $z20);

        $i65 = r0.<android.view.View$InspectionCompanion: int mNextClusterForwardId>;

        $i66 = virtualinvoke r1.<android.view.View: int getNextClusterForwardId()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readResourceId(int,int)>($i65, $i66);

        $i67 = r0.<android.view.View$InspectionCompanion: int mNextFocusDownId>;

        $i68 = virtualinvoke r1.<android.view.View: int getNextFocusDownId()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readResourceId(int,int)>($i67, $i68);

        $i69 = r0.<android.view.View$InspectionCompanion: int mNextFocusForwardId>;

        $i70 = virtualinvoke r1.<android.view.View: int getNextFocusForwardId()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readResourceId(int,int)>($i69, $i70);

        $i71 = r0.<android.view.View$InspectionCompanion: int mNextFocusLeftId>;

        $i72 = virtualinvoke r1.<android.view.View: int getNextFocusLeftId()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readResourceId(int,int)>($i71, $i72);

        $i73 = r0.<android.view.View$InspectionCompanion: int mNextFocusRightId>;

        $i74 = virtualinvoke r1.<android.view.View: int getNextFocusRightId()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readResourceId(int,int)>($i73, $i74);

        $i75 = r0.<android.view.View$InspectionCompanion: int mNextFocusUpId>;

        $i76 = virtualinvoke r1.<android.view.View: int getNextFocusUpId()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readResourceId(int,int)>($i75, $i76);

        $i77 = r0.<android.view.View$InspectionCompanion: int mOutlineAmbientShadowColorId>;

        $i78 = virtualinvoke r1.<android.view.View: int getOutlineAmbientShadowColor()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readColor(int,int)>($i77, $i78);

        $i79 = r0.<android.view.View$InspectionCompanion: int mOutlineProviderId>;

        $r13 = virtualinvoke r1.<android.view.View: android.view.ViewOutlineProvider getOutlineProvider()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readObject(int,java.lang.Object)>($i79, $r13);

        $i80 = r0.<android.view.View$InspectionCompanion: int mOutlineSpotShadowColorId>;

        $i81 = virtualinvoke r1.<android.view.View: int getOutlineSpotShadowColor()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readColor(int,int)>($i80, $i81);

        $i82 = r0.<android.view.View$InspectionCompanion: int mOverScrollModeId>;

        $i83 = virtualinvoke r1.<android.view.View: int getOverScrollMode()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readIntEnum(int,int)>($i82, $i83);

        $i84 = r0.<android.view.View$InspectionCompanion: int mPaddingBottomId>;

        $i85 = virtualinvoke r1.<android.view.View: int getPaddingBottom()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readInt(int,int)>($i84, $i85);

        $i86 = r0.<android.view.View$InspectionCompanion: int mPaddingLeftId>;

        $i87 = virtualinvoke r1.<android.view.View: int getPaddingLeft()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readInt(int,int)>($i86, $i87);

        $i88 = r0.<android.view.View$InspectionCompanion: int mPaddingRightId>;

        $i89 = virtualinvoke r1.<android.view.View: int getPaddingRight()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readInt(int,int)>($i88, $i89);

        $i90 = r0.<android.view.View$InspectionCompanion: int mPaddingTopId>;

        $i91 = virtualinvoke r1.<android.view.View: int getPaddingTop()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readInt(int,int)>($i90, $i91);

        $i92 = r0.<android.view.View$InspectionCompanion: int mPointerIconId>;

        $r14 = virtualinvoke r1.<android.view.View: android.view.PointerIcon getPointerIcon()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readObject(int,java.lang.Object)>($i92, $r14);

        $i93 = r0.<android.view.View$InspectionCompanion: int mPressedId>;

        $z21 = virtualinvoke r1.<android.view.View: boolean isPressed()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i93, $z21);

        $i94 = r0.<android.view.View$InspectionCompanion: int mRawLayoutDirectionId>;

        $i95 = virtualinvoke r1.<android.view.View: int getRawLayoutDirection()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readIntEnum(int,int)>($i94, $i95);

        $i96 = r0.<android.view.View$InspectionCompanion: int mRawTextAlignmentId>;

        $i97 = virtualinvoke r1.<android.view.View: int getRawTextAlignment()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readIntEnum(int,int)>($i96, $i97);

        $i98 = r0.<android.view.View$InspectionCompanion: int mRawTextDirectionId>;

        $i99 = virtualinvoke r1.<android.view.View: int getRawTextDirection()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readIntEnum(int,int)>($i98, $i99);

        $i100 = r0.<android.view.View$InspectionCompanion: int mRequiresFadingEdgeId>;

        $i101 = virtualinvoke r1.<android.view.View: int getFadingEdge()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readIntFlag(int,int)>($i100, $i101);

        $i102 = r0.<android.view.View$InspectionCompanion: int mRotationId>;

        $f2 = virtualinvoke r1.<android.view.View: float getRotation()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readFloat(int,float)>($i102, $f2);

        $i103 = r0.<android.view.View$InspectionCompanion: int mRotationXId>;

        $f3 = virtualinvoke r1.<android.view.View: float getRotationX()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readFloat(int,float)>($i103, $f3);

        $i104 = r0.<android.view.View$InspectionCompanion: int mRotationYId>;

        $f4 = virtualinvoke r1.<android.view.View: float getRotationY()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readFloat(int,float)>($i104, $f4);

        $i105 = r0.<android.view.View$InspectionCompanion: int mSaveEnabledId>;

        $z22 = virtualinvoke r1.<android.view.View: boolean isSaveEnabled()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i105, $z22);

        $i106 = r0.<android.view.View$InspectionCompanion: int mScaleXId>;

        $f5 = virtualinvoke r1.<android.view.View: float getScaleX()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readFloat(int,float)>($i106, $f5);

        $i107 = r0.<android.view.View$InspectionCompanion: int mScaleYId>;

        $f6 = virtualinvoke r1.<android.view.View: float getScaleY()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readFloat(int,float)>($i107, $f6);

        $i108 = r0.<android.view.View$InspectionCompanion: int mScreenReaderFocusableId>;

        $z23 = virtualinvoke r1.<android.view.View: boolean isScreenReaderFocusable()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i108, $z23);

        $i109 = r0.<android.view.View$InspectionCompanion: int mScrollIndicatorsId>;

        $i110 = virtualinvoke r1.<android.view.View: int getScrollIndicators()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readIntFlag(int,int)>($i109, $i110);

        $i111 = r0.<android.view.View$InspectionCompanion: int mScrollXId>;

        $i112 = virtualinvoke r1.<android.view.View: int getScrollX()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readInt(int,int)>($i111, $i112);

        $i113 = r0.<android.view.View$InspectionCompanion: int mScrollYId>;

        $i114 = virtualinvoke r1.<android.view.View: int getScrollY()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readInt(int,int)>($i113, $i114);

        $i115 = r0.<android.view.View$InspectionCompanion: int mScrollbarDefaultDelayBeforeFadeId>;

        $i116 = virtualinvoke r1.<android.view.View: int getScrollBarDefaultDelayBeforeFade()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readInt(int,int)>($i115, $i116);

        $i117 = r0.<android.view.View$InspectionCompanion: int mScrollbarFadeDurationId>;

        $i118 = virtualinvoke r1.<android.view.View: int getScrollBarFadeDuration()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readInt(int,int)>($i117, $i118);

        $i119 = r0.<android.view.View$InspectionCompanion: int mScrollbarSizeId>;

        $i120 = virtualinvoke r1.<android.view.View: int getScrollBarSize()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readInt(int,int)>($i119, $i120);

        $i121 = r0.<android.view.View$InspectionCompanion: int mScrollbarStyleId>;

        $i122 = virtualinvoke r1.<android.view.View: int getScrollBarStyle()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readIntEnum(int,int)>($i121, $i122);

        $i123 = r0.<android.view.View$InspectionCompanion: int mSelectedId>;

        $z24 = virtualinvoke r1.<android.view.View: boolean isSelected()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i123, $z24);

        $i124 = r0.<android.view.View$InspectionCompanion: int mSolidColorId>;

        $i125 = virtualinvoke r1.<android.view.View: int getSolidColor()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readColor(int,int)>($i124, $i125);

        $i126 = r0.<android.view.View$InspectionCompanion: int mSoundEffectsEnabledId>;

        $z25 = virtualinvoke r1.<android.view.View: boolean isSoundEffectsEnabled()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i126, $z25);

        $i127 = r0.<android.view.View$InspectionCompanion: int mStateListAnimatorId>;

        $r15 = virtualinvoke r1.<android.view.View: android.animation.StateListAnimator getStateListAnimator()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readObject(int,java.lang.Object)>($i127, $r15);

        $i128 = r0.<android.view.View$InspectionCompanion: int mTagId>;

        $r16 = virtualinvoke r1.<android.view.View: java.lang.Object getTag()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readObject(int,java.lang.Object)>($i128, $r16);

        $i129 = r0.<android.view.View$InspectionCompanion: int mTextAlignmentId>;

        $i130 = virtualinvoke r1.<android.view.View: int getTextAlignment()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readIntEnum(int,int)>($i129, $i130);

        $i131 = r0.<android.view.View$InspectionCompanion: int mTextDirectionId>;

        $i132 = virtualinvoke r1.<android.view.View: int getTextDirection()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readIntEnum(int,int)>($i131, $i132);

        $i133 = r0.<android.view.View$InspectionCompanion: int mTooltipTextId>;

        $r17 = virtualinvoke r1.<android.view.View: java.lang.CharSequence getTooltipText()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readObject(int,java.lang.Object)>($i133, $r17);

        $i134 = r0.<android.view.View$InspectionCompanion: int mTransformPivotXId>;

        $f7 = virtualinvoke r1.<android.view.View: float getPivotX()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readFloat(int,float)>($i134, $f7);

        $i135 = r0.<android.view.View$InspectionCompanion: int mTransformPivotYId>;

        $f8 = virtualinvoke r1.<android.view.View: float getPivotY()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readFloat(int,float)>($i135, $f8);

        $i136 = r0.<android.view.View$InspectionCompanion: int mTransitionNameId>;

        $r18 = virtualinvoke r1.<android.view.View: java.lang.String getTransitionName()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readObject(int,java.lang.Object)>($i136, $r18);

        $i137 = r0.<android.view.View$InspectionCompanion: int mTranslationXId>;

        $f9 = virtualinvoke r1.<android.view.View: float getTranslationX()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readFloat(int,float)>($i137, $f9);

        $i138 = r0.<android.view.View$InspectionCompanion: int mTranslationYId>;

        $f10 = virtualinvoke r1.<android.view.View: float getTranslationY()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readFloat(int,float)>($i138, $f10);

        $i139 = r0.<android.view.View$InspectionCompanion: int mTranslationZId>;

        $f11 = virtualinvoke r1.<android.view.View: float getTranslationZ()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readFloat(int,float)>($i139, $f11);

        $i140 = r0.<android.view.View$InspectionCompanion: int mVisibilityId>;

        $i141 = virtualinvoke r1.<android.view.View: int getVisibility()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readIntEnum(int,int)>($i140, $i141);

        return;

     label1:
        $r3 = new android.view.inspector.InspectionCompanion$UninitializedPropertyMapException;

        specialinvoke $r3.<android.view.inspector.InspectionCompanion$UninitializedPropertyMapException: void <init>()>();

        throw $r3;
    }

    public volatile void readProperties(java.lang.Object, android.view.inspector.PropertyReader)
    {
        android.view.View$InspectionCompanion r0;
        java.lang.Object r1;
        android.view.inspector.PropertyReader r2;
        android.view.View $r3;

        r0 := @this: android.view.View$InspectionCompanion;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: android.view.inspector.PropertyReader;

        $r3 = (android.view.View) r1;

        virtualinvoke r0.<android.view.View$InspectionCompanion: void readProperties(android.view.View,android.view.inspector.PropertyReader)>($r3, r2);

        return;
    }
}
